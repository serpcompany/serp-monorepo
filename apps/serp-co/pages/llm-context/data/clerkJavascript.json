[
  {
    "owner": "clerk",
    "repo": "javascript",
    "content": "TITLE: Implementing Route Protection with clerkMiddleware in Next.js\nDESCRIPTION: This snippet demonstrates how to use clerkMiddleware() to protect dashboard and admin routes in a Next.js application. It uses createRouteMatcher for defining route groups and auth().protect() for implementing authentication and authorization checks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/middleware-changes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isDashboardRoute = createRouteMatcher(['/dashboard(.*)']);\nconst isAdminRoute = createRouteMatcher(['/admin(.*)']);\n\nexport default clerkMiddleware((auth, req) => {\n  // Restrict admin route to users with specific role\n  if (isAdminRoute(req)) auth().protect({ role: 'org:admin' });\n\n  // Restrict dashboard routes to logged in users\n  if (isDashboardRoute(req)) auth().protect();\n});\n\nexport const config = {\n  matcher: ['/((?!.*\\..*|_next).*)', '/', '/(api|trpc)(.*)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Authentication in Next.js Page Component\nDESCRIPTION: This code snippet demonstrates how to use Clerk's useAuth hook in a Next.js page component. It handles loading states, checks if the user is signed in, displays user information, and includes a function to fetch data from an external API using an authentication token.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/docs/use-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useAuth } from '@clerk/nextjs';\n\nexport default function ExternalDataPage() {\n  const { userId, sessionId, getToken, isLoaded, isSignedIn } = useAuth();\n\n  const fetchExternalData = async () => {\n    const token = await getToken();\n\n    // Fetch data from an external API\n    const response = await fetch('https://api.example.com/data', {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    return response.json();\n  };\n\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isSignedIn) {\n    return <div>Sign in to view this page</div>;\n  }\n\n  return (\n    <div>\n      <p>\n        Hello, {userId}! Your current active session is {sessionId}.\n      </p>\n      <button onClick={fetchExternalData}>Fetch Data</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UserProfile Component Customization Example\nDESCRIPTION: Demonstrates how to customize the UserProfile component by adding custom pages and external links to the navigation sidebar using UserProfile.Page and UserProfile.Link components.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\n<UserProfile>\n  <UserProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </UserProfile.Page>\n  <UserProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <UserProfile.Page label='account' />\n  <UserProfile.Page label='security' />\n</UserProfile>\n```\n\n----------------------------------------\n\nTITLE: Google One Tap Authentication Example Code\nDESCRIPTION: Example showing how to initialize and handle Google One Tap authentication with Clerk using custom flow and manual session management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    if (signInOrUp.status === 'complete') {\n      await Clerk.setActive({\n        session: signInOrUp.createdSessionId,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Feature and Plan Based Authorization with useAuth in React\nDESCRIPTION: Examples showing different ways to use the useAuth hook with feature and plan based authorization, including scoping permissions to users or organizations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Plan\nuseAuth().has({ plan: \"my-plan\" })\n\n// Feature\nuseAuth().has({ feature: \"my-feature\" })\n\n// Scoped per user or per org\nuseAuth().has({ feature: \"org:my-feature\" })\nuseAuth().has({ feature: \"user:my-feature\" })\nuseAuth().has({ plan: \"user:my-plan\" })\nuseAuth().has({ plan: \"org:my-plan\" })\n```\n\n----------------------------------------\n\nTITLE: Migrating from authMiddleware to clerkMiddleware in Next.js\nDESCRIPTION: This code snippet shows how to migrate from the deprecated authMiddleware() to the new clerkMiddleware() in a Next.js application. It demonstrates the basic changes required in imports and default export to maintain the same behavior of protecting all routes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/middleware-changes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- import { authMiddleware } from \"@clerk/nextjs\"\n+ import { clerkMiddleware } from '@clerk/nextjs/server'\n\n- export default authMiddleware()\n+ export default clerkMiddleware((auth) => auth().protect())\n\n  export const config = {\n    matcher: [\"/((?!.*\\..*|_next).*)\", \"/\", \"/(api|trpc)(.*)\"]\n  }\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhooks in tRPC\nDESCRIPTION: Example of verifying Clerk webhooks in a tRPC route using the verifyWebhook function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyWebhook } from '@clerk/nextjs/webhooks';\n\nconst webhookRouter = router({\n  webhook: publicProcedure.input(/** schema */).mutation(async ({ ctx }) => {\n    const evt = await verifyWebhook(ctx.req);\n    // Handle webhook event\n    return { received: true };\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing createRouteMatcher with clerkMiddleware for Route Protection\nDESCRIPTION: Shows how to use the createRouteMatcher helper with clerkMiddleware to protect specific routes based on patterns. This approach allows for flexible route protection using glob patterns, regular expressions, or custom functions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isProtectedRoute = createRouteMatcher(['/dashboard(.*)']);\n\nexport default clerkMiddleware((auth, request) => {\n  if (isProtectedRoute(request)) {\n    auth().protect();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Passkey in Clerk\nDESCRIPTION: Demonstrates how to implement passkey authentication using the stable Clerk API. This snippet shows error handling for various passkey-related operations through the client.signIn interface.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await clerk.client.signIn.authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing In with a Fake User - Playwright and Clerk - TypeScript\nDESCRIPTION: Illustrates a Playwright test case for signing in with a previously created fake user. Dependencies include the SignIn page object and test utils from Clerk, along with Playwright's test API. Shows how to navigate to the sign-in form and perform user login by supplying email and instant password, and asserts successful authentication. Input parameters are page/context objects and the fake user's credentials.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Imports\\n\\ntest.describe('Smoke test', () => {\\n  test.describe.configure({ mode: 'parallel' });\\n  let app: Application;\\n  let fakeUser: FakeUser;\\n\\n  test.beforeAll(async () => {\\n    // ...\\n  });\\n\\n  test.afterAll(async () => {\\n    // ...\\n  });\\n\\n  test('can sign in', async ({ page, context }) => {\\n    const u = createTestUtils({ app, page, context });\\n    await u.po.signIn.goTo();\\n    await u.po.signIn.waitForMounted();\\n    await u.po.signIn.signInWithEmailAndInstantPassword({ email: fakeUser.email, password: fakeUser.password });\\n    await u.po.expect.toBeSignedIn();\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-Up Page with Clerk in Next.js\nDESCRIPTION: This code snippet shows how to create a sign-up page using Clerk's authentication in a Next.js application. It uses the useSignUp hook from @clerk/nextjs to manage the sign-up state and display the current status.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/docs/use-sign-up.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSignUp } from '@clerk/nextjs';\n\nexport default function SignUpPage() {\n  const { isLoaded, signUp } = useSignUp();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n\n  return <div>The current sign-up attempt status is {signUp?.status}.</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Passkey Creation and Authentication Flow with Clerk Expo Passkeys - TypeScript\nDESCRIPTION: This TypeScript (React/Expo) code block shows two approaches: first, using a user's createPasskey method to register a new passkey; second, authenticating a user with their passkey and setting the active session with Clerk. The code uses hooks such as useUser and useSignIn from Clerk’s React bindings. Dependencies: @clerk/clerk-expo, @clerk/clerk-expo/passkeys, proper Clerk project configuration. Parameters include user objects and signIn/signInResponse from hooks. Inputs and outputs are handled asynchronously via Promises. Error handling is demonstrated using try/catch, and the approach works within both iOS/Android and web Expo projects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// passkey creation\\nconst { user } = useUser();\\n\\nconst handleCreatePasskey = async () => {\\n  if (!user) return;\\n  try {\\n    return await user.createPasskey();\\n  } catch (e: any) {\\n    // handle error\\n  }\\n};\\n\\n// passkey authentication\\nconst { signIn, setActive } = useSignIn();\\n\\nconst handlePasskeySignIn = async () => {\\n  try {\\n    const signInResponse = await signIn.authenticateWithPasskey();\\n    await setActive({ session: signInResponse.createdSessionId });\\n  } catch (err: any) {\\n    //handle error\\n  }\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ClerkProvider with Offline Support for Expo - React Typescript (TSX)\nDESCRIPTION: This React/TypeScript (TSX) snippet provides a full example of setting up ClerkProvider in an Expo app to utilize secure resource caching for offline support. It imports required modules, checks for a publishable key in environment variables, and conditionally enables offline caching by passing a secureStore to ClerkProvider's __experimental_resourceCache property. Key dependencies are @clerk/clerk-expo, expo-router, and expo-secure-store. Expected input is a valid EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY, otherwise an error is thrown. Output is a React component rendering the app with offline-capable Clerk authentication. Ensure all dependencies are installed and the key is set in the .env file for correct operation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider, ClerkLoaded } from '@clerk/clerk-expo';\nimport { Slot } from 'expo-router';\nimport { tokenCache } from '../token-cache';\nimport { secureStore } from '@clerk/clerk-expo/secure-store';\n\nexport default function RootLayout() {\n  const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY!;\n\n  if (!publishableKey) {\n    throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY to your .env file');\n  }\n\n  return (\n    <ClerkProvider\n      publishableKey={publishableKey}\n      tokenCache={tokenCache}\n      __experimental_resourceCache={secureStore}\n    >\n      <ClerkLoaded>\n        <Slot />\n      </ClerkLoaded>\n    </ClerkProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Passkey with Clerk in TypeScript\nDESCRIPTION: This code snippet shows how to create a passkey for an authenticated user. It uses the useUser hook to access the current user and calls the createPasskey method. Error handling is included to manage potential issues during passkey creation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { user } = useUser();\n\nconst handleCreatePasskey = async () => {\n  if (!user) return;\n  try {\n    return await user.createPasskey();\n  } catch (e: any) {\n    // handle error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Creation with Clerk\nDESCRIPTION: Code snippet showing how to create a passkey for a user using the Clerk API. This example includes error handling and uses the useUser hook to access the current user.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// passkey creation\nconst { user } = useUser();\n\nconst handleCreatePasskey = async () => {\n  if (!user) return;\n  try {\n    return await user.createPasskey();\n  } catch (e: any) {\n    // handle error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Sign-In Redirection with clerkMiddleware\nDESCRIPTION: Demonstrates how to manually redirect unauthenticated users to the sign-in page using the redirectToSignIn helper with clerkMiddleware, offering more fine-grained control over the redirection flow.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  // If you want more fine-grained control, you can always use the low-level redirectToSignIn helper\n  if (!auth().userId) {\n    return auth().redirectToSignIn();\n  }\n\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Protection with clerkMiddleware\nDESCRIPTION: Demonstrates how to use the new clerkMiddleware helper to protect routes that require authentication. The function automatically handles redirecting unauthenticated users to the sign-in page.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  const { userId } = auth().protect();\n  // userId is now available for use in your route handler\n  // for page requests, calling protect will automatically redirect the user to the sign-in URL if they are not authenticated\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Plugin Configuration in Fastify (JavaScript)\nDESCRIPTION: This snippet demonstrates the required migration for initializing the Clerk plugin within a Fastify application in JavaScript. It replaces the deprecated frontendApi parameter with the new publishableKey key, highlighting that both the key and its value must be updated, as the values are not interchangeable. The plugin is registered via fastify.register; the value for publishableKey should be sourced from the Clerk dashboard. No additional dependencies are required beyond @clerk/fastify. Input: plugin options with frontendApi; Output: correct plugin registration with publishableKey.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/fastify/clerkplugin-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { clerkPlugin } from '@clerk/fastify';\n\n- fastify.register(clerkPlugin, { frontendApi: '...' });\n+ fastify.register(clerkPlugin, { publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Regex for Finding Deprecated ClerkProvider `frontendApi` Prop Usage\nDESCRIPTION: Provides a regular expression (`<ClerkProvider[\\s\\S]*?frontendApi=[\\s\\S]*?>` with the 'm' flag) designed to find instances of the `<ClerkProvider>` component using the deprecated `frontendApi` prop in JavaScript/React applications. This prop has been renamed to `publishableKey`, and developers should update their code to use `publishableKey` along with the corresponding new key value obtained from the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/clerkprovider-frontendapi-2.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n<ClerkProvider[\\s\\S]*?frontendApi=[\\s\\S]*?>\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhooks in Next.js Pages Router\nDESCRIPTION: Example of verifying Clerk webhooks in a Next.js Pages Router API route using the verifyWebhook function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from 'next';\nimport { verifyWebhook } from '@clerk/nextjs/webhooks';\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    const evt = await verifyWebhook(req);\n    // Handle webhook event\n    res.status(200).json({ received: true });\n  } catch (err) {\n    res.status(400).json({ error: 'Webhook verification failed' });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Protection with Clerk Middleware\nDESCRIPTION: Examples of using clerkMiddleware for route protection with authentication and permissions checks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  const { userId } = auth().protect();\n  // userId is now available for use in your route handler\n  // for page requests, calling protect will automatically redirect the user to the sign-in URL if they are not authenticated\n  return NextResponse.next();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  const { userId } = auth().protect({ permission: 'org:domains:delete' });\n  // userId is now available for use in your route handler\n  // for page requests, calling protect will automatically throw a notFound error if the user does not have the required permissions\n  return NextResponse.next();\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  // If you want more fine-grained control, you can always use the low-level redirectToSignIn helper\n  if (!auth().userId) {\n    return auth().redirectToSignIn();\n  }\n\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Protect Component with Feature and Plan Based Authorization in React\nDESCRIPTION: Examples showing different ways to use the Protect component with feature and plan based authorization, including scoping permissions to users or organizations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Plan\n<Protect plan=\"my-plan\" />\n\n// Feature\n<Protect feature=\"my-feature\" />\n\n// Scoped per user or per org\n<Protect feature=\"org:my-feature\" />\n<Protect feature=\"user:my-feature\" />\n<Protect plan=\"org:my-plan\" />\n<Protect plan=\"user:my-plan\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware with Recommended `clerkMiddleware` (TypeScript)\nDESCRIPTION: This snippet shows the recommended approach for configuring Clerk authentication middleware in Next.js using `clerkMiddleware` and `createRouteMatcher` from `@clerk/nextjs/server`. It defines a route matcher for protected routes (`/dashboard(.*)`) and uses `clerkMiddleware` to conditionally protect matching requests by calling `auth().protect()`. Unprotected routes are handled by `NextResponse.next()`. A standard Next.js middleware matcher config is exported.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/auth-middleware-deprecated.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware.ts\n\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nconst isProtectedRoute = createRouteMatcher(['/dashboard(.*)']);\n\nexport default clerkMiddleware((auth, request) => {\n  if (isProtectedRoute(request)) {\n    auth().protect();\n  }\n\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: ['/((?!.*\\..*|_next).*)', '/', '/(api|trpc)(.*)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Using clerkMiddleware in Express\nDESCRIPTION: Demonstrates how to use the clerkMiddleware function to attach Auth object to requests in an Express application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/express';\nimport express from 'express';\n\nconst app = express();\n\n// Pass no parameters\napp.use(clerkMiddleware());\n\n// Pass options\napp.use(clerkMiddleware(options));\n```\n\n----------------------------------------\n\nTITLE: Using Protect Component with treatPendingAsSignedOut Option in React\nDESCRIPTION: Examples showing how to use the Protect component with the treatPendingAsSignedOut option to control when children components are mounted based on session state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node only mounts when session is active\n// Example: Organization selection must be completed if enforced\n<Protect>\n  <p>You have selected an organization!</p>\n</Protect>\n\n// Children node mounts for both active and pending session\n<Protect treatPendingAsSignedOut={false}>\n  <p>You might not have an organization selected</p>\n</Protect>\n```\n\n----------------------------------------\n\nTITLE: Replacing signOutCallback with redirectUrl in SignOutButton (React)\nDESCRIPTION: This code diff demonstrates updating the `<SignOutButton />` component from `@clerk/clerk-react`. The deprecated `signOutCallback` prop, which previously required manual redirection using `window.location.href`, is replaced by the `redirectUrl` prop, which declaratively specifies the redirection path after a successful sign-out.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/signoutcallback-to-redirecturl.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import { SignOutButton } from \"@clerk/clerk-react\";\n\n  export const Signout = () => {\n    return (\n      <SignOutButton\n-       signOutCallback={() => { window.location.href = \"/your-path\" }}\n+       redirectUrl=\"/your-path\"\n      >\n        <button>Sign Out</button>\n      </SignOutButton>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Reverification Hook in React Component\nDESCRIPTION: Example usage of the experimental useReverification hook to handle user account deletion with reverification flow.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport { __experimental_useReverification as useReverification } from '@clerk/nextjs';\n\nfunction DeleteAccount() {\n  const { user } = useUser();\n  const [deleteUserAccount] = useReverification(() => {\n    if (!user) return;\n    return user.delete();\n  });\n\n  return (\n    <>\n      <button\n        onClick={async () => {\n          await deleteUserAccount();\n        }}\n      >\n        Delete account\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAuth Helper in Express\nDESCRIPTION: Demonstrates how to use the getAuth helper function to retrieve authentication state and implement custom authorization in an Express application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { clerkMiddleware, getAuth } from '@clerk/express';\nimport express from 'express';\n\nconst app = express();\n\n// Apply centralized middleware\napp.use(clerkMiddleware());\n\n// Protect a route based on authorization status\nhasPermission = (request, response, next) => {\n  const auth = getAuth(request);\n\n  // Handle if the user is not authorized\n  if (!auth.has({ permission: 'org:admin:testpermission' })) {\n    return response.status(403).send('Unauthorized');\n  }\n\n  return next();\n};\n\napp.get('/path', requireAuth, hasPermission, (req, res) => res.json(req.auth));\n```\n\n----------------------------------------\n\nTITLE: Checking Authorization with Experimental Assurance in Clerk (TypeScript)\nDESCRIPTION: Demonstrates the experimental usage of the `has()` function with the `__experimental_assurance` property to perform authorization checks based on specific assurance levels and maximum age criteria. This example requires Level 2 second-factor authentication (`L2.secondFactor`) completed within the last 10 minutes (`A1.10min`). A shared utility `createCheckAuthorization` is also introduced.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nhas({\n  __experimental_assurance: {\n    level: 'L2.secondFactor',\n    maxAge: 'A1.10min',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Updates\nDESCRIPTION: Migration guidance for environment variable changes, including deprecation of CLERK_API_KEY and CLERK_FRONTEND_API in favor of new variables CLERK_SECRET_KEY and CLERK_PUBLISHABLE_KEY.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Old environment variables (deprecated)\nCLERK_API_KEY\nCLERK_FRONTEND_API\n\n// New environment variables to use\nCLERK_SECRET_KEY      // Instead of CLERK_API_KEY\nCLERK_PUBLISHABLE_KEY // Instead of CLERK_FRONTEND_API\n```\n\n----------------------------------------\n\nTITLE: Updating App Router Imports in Next.js with Clerk\nDESCRIPTION: This snippet shows how to update imports for the Next.js App Router when using Clerk. It replaces the beta-specific import with the main @clerk/nextjs import, which now supports both App and Pages routers.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import { } from \"@clerk/nextjs/app-beta\"\n+ import { } from \"@clerk/nextjs\"\n```\n\n----------------------------------------\n\nTITLE: Updating Signed-In State Check in TypeScript using Clerk SDK\nDESCRIPTION: This diff snippet illustrates replacing the check `if (Clerk.user)` with the newly introduced `if (Clerk.isSignedIn)` for verifying user authentication within the Clerk JavaScript SDK. This change provides a more explicit way to determine if a user is signed in before proceeding with actions like mounting UI components. It depends on an initialized Clerk instance (`clerk`) and specific HTML element IDs (`signed-in`, `user-button`).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- if (Clerk.user) {\n+ if (Clerk.isSignedIn) {\n  // Mount user button component\n  document.getElementById('signed-in').innerHTML = `\n    <div id=\"user-button\"></div>\n  `\n\n  const userbuttonDiv = document.getElementById('user-button')\n\n  clerk.mountUserButton(userbuttonDiv)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating User Properties with Clerk in Next.js\nDESCRIPTION: This code snippet demonstrates how to use the Clerk useUser hook to update a user's first and last name in a Next.js application. It handles loading states and renders a button to trigger the update along with displaying the current user information.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/docs/use-user.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useUser } from '@clerk/nextjs';\n\nexport default function HomePage() {\n  const { isLoaded, user } = useUser();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n\n  if (!user) return null;\n\n  const updateUser = async () => {\n    await user.update({\n      firstName: 'John',\n      lastName: 'Doe',\n    });\n  };\n\n  return (\n    <>\n      <button onClick={updateUser}>Update your name</button>\n      <p>user.firstName: {user?.firstName}</p>\n      <p>user.lastName: {user?.lastName}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Menu Items in Clerk <UserButton> Component (JSX)\nDESCRIPTION: This example illustrates how to compose a <UserButton> component with custom menu items using Clerk's React UI SDK. It demonstrates the use of <UserButton.MenuItems>, <UserButton.Link>, and <UserButton.Action> to present external links, internal navigation, built-in account management, and custom actions such as showing a chat modal. The snippet requires Clerk React UI components and, optionally, supporting libraries for routing and icons. Labels, hrefs, and handlers are customizable parameters. Useful for enhancing the user dropdown menu in authentication flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<UserButton>\n  <UserButton.MenuItems>\n    <UserButton.Link\n      label='Terms'\n      labelIcon={<Icon />}\n      href='/terms'\n    />\n    <UserButton.Action\n      label='Help'\n      labelIcon={<Icon />}\n      open='help'\n    />{' '}\n    // Navigate to `/help` page when UserProfile opens as a modal. (Requires a custom page to have been set in\n    `/help`)\n    <UserButton.Action\n      label='manageAccount'\n      labelIcon={<Icon />}\n    />\n    <UserButton.Action\n      label='Chat Modal'\n      labelIcon={<Icon />}\n      onClick={() => setModal(true)}\n    />\n  </UserButton.MenuItems>\n</UserButton>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Route Matchers with experimental_createRouteMatcher\nDESCRIPTION: Shows how to create a custom route matcher using the experimental_createRouteMatcher helper to match routes against the current request. This allows for customizing which routes should be protected based on patterns.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, experimental_createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isProtectedRoute = experimental_createRouteMatcher([/protected.*/]);\n\nexport default clerkMiddleware((auth, request) => {\n  if (isProtectedRoute(request)) {\n    auth().protect();\n  }\n\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plan-Based Authorization with auth.protect()\nDESCRIPTION: Examples of using plan-based authorization with the auth.protect() function in Next.js.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nauth.protect({ plan: \"my-plan\" })\nauth.protect({ plan: \"user:my-plan\" })\nauth.protect({ plan: \"org:my-plan\" })\n```\n\n----------------------------------------\n\nTITLE: Permission-Based Route Protection with clerkMiddleware\nDESCRIPTION: Shows how to protect routes that require specific permissions using the clerkMiddleware helper. This example checks if the user has the 'org:domains:delete' permission before allowing access.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware(auth => {\n  const { userId } = auth().protect({ permission: 'org:domains:delete' });\n  // userId is now available for use in your route handler\n  // for page requests, calling protect will automatically throw a notFound error if the user does not have the required permissions\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ClerkProvider with Passkeys in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the ClerkProvider with passkey support in an Expo application. It imports the necessary components and wraps the app with the ClerkProvider, enabling passkey functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider } from '@clerk/clerk-expo';\nimport { passkeys } from '@clerk/clerk-expo/passkeys';\n\n<ClerkProvider __experimental_passkeys={passkeys}>{/* Your app here */}</ClerkProvider>;\n```\n\n----------------------------------------\n\nTITLE: Using clerkClient in Express\nDESCRIPTION: Shows how to use the clerkClient object to interact with Clerk's Backend API, specifically to retrieve a list of users in an Express application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { clerkClient } from '@clerk/express';\nimport express from 'express';\n\nconst app = express();\n\napp.get('/users', requireAuth, async (req, res) => {\n  const users = await clerkClient.users.getUserList();\n  return res.json({ users });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Handlers in ClerkJS\nDESCRIPTION: Demonstrates how to remove event listeners, either all handlers for an event or specific handler functions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/docs/events.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventBus, events } from './core/events';\n\n// all handlers of event\neventBus.off(events.NewEvent);\n\n// specific handler of event\n// const handler = (obj: NewEventPayload) => { /* do something */ };\n// eventBus.on(events.NewEvent, handler);\neventBus.off(events.NewEvent, handler);\n```\n\n----------------------------------------\n\nTITLE: Managing Webhooks and JWT Templates in TypeScript\nDESCRIPTION: Shows how to manage webhooks and JWT templates using the Clerk backend client, including creating, updating, and deleting operations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\n\n// Webhooks\nawait clerkClient.webhooks.createSvixApp();\nawait clerkClient.webhooks.generateSvixAuthURL();\nawait clerkClient.webhooks.deleteSvixApp();\n\n// JWT Templates\nawait clerkClient.jwtTemplates.list({...});\nawait clerkClient.jwtTemplates.get('templateId');\nawait clerkClient.jwtTemplates.create({...});\nawait clerkClient.jwtTemplates.update({...});\nawait clerkClient.jwtTemplates.delete('templateId');\n\n// Creating an active session\nawait clerkClient.sessions.createSession({\n  userId: 'user_xxxxxx',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Claims in Fastify with TypeScript\nDESCRIPTION: Shows how to access JWT claims using the getAuth function from @clerk/fastify in a Fastify server application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/orgs-claim.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAuth } from \"@clerk/fastify\"\nconst claims: JwtPayload = (await getAuth(request)).sessionClaims\n```\n\n----------------------------------------\n\nTITLE: Updating SessionApi.getToken() Usage in Clerk Integrations\nDESCRIPTION: Changes to SessionApi.getToken() to return a consistent { data, errors } format. This snippet shows how to use the new format in various Clerk integrations and how to maintain the existing behavior with the new return value.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAuth } from '@clerk/nextjs/server';\n\nconst { getToken } = await getAuth(...);\nconst jwtString = await getToken(...);\n\n// To keep existing behavior with SessionApi.getToken()\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst response = await clerkClient.sessions.getToken(...);\n\nif (response.errors) {\n    const { status, statusText, clerkTraceId } = response;\n    const error = new ClerkAPIResponseError(statusText || '', {\n        data: [],\n        status: Number(status || ''),\n        clerkTraceId,\n    });\n    error.errors = response.errors;\n\n    throw error;\n}\n\n// the value of the v4 `clerkClient.sessions.getToken(...)`\nconst jwtString = response.data.jwt;\n```\n\n----------------------------------------\n\nTITLE: Using auth().redirectToSignIn() in Next.js API Routes and Pages\nDESCRIPTION: Demonstrates how to use the new auth().redirectToSignIn() method in React components to redirect unauthenticated users to the sign-in page when needed.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@clerk/nextjs/server';\n\nexport const Layout = ({ children }) => {\n  const { userId } = auth();\n\n  if (!userId) {\n    return auth().redirectToSignIn();\n  }\n\n  return <>{children}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Middleware Imports in Next.js with Clerk\nDESCRIPTION: This snippet illustrates the change in import path for Edge Middleware functionality when using Clerk with Next.js. The separate edge-middleware import is now consolidated into the main @clerk/nextjs import.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { } from \"@clerk/nextjs/edge-middleware\"\n+ import { } from \"@clerk/nextjs\"\n```\n\n----------------------------------------\n\nTITLE: Using SAML Connection API in Next.js\nDESCRIPTION: Example of using the clerkClient to get SAML connection list. This snippet demonstrates how to import and use the SAML connections API from the Clerk client.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkClient } from '@clerk/nextjs/server';\nconst samlConnection = await clerkClient.samlConnections.getSamlConnectionList();\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication with Clerk\nDESCRIPTION: Example demonstrating how to authenticate a user with a passkey using Clerk's API. This code uses the useSignIn hook to handle the authentication flow.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// passkey authentication\nconst { signIn, setActive } = useSignIn();\n\nconst handlePasskeySignIn = async () => {\n  try {\n    const signInResponse = await signIn.authenticateWithPasskey();\n    await setActive({ session: signInResponse.createdSessionId });\n  } catch (err: any) {\n    //handle error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Passkey for a User in Expo/React (TypeScript)\nDESCRIPTION: Illustrates how to programmatically create a passkey for the currently authenticated user using the `useUser` hook from Clerk. The `handleCreatePasskey` function calls `user.createPasskey()` within a try-catch block to handle potential errors during the passkey creation process.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\n// passkey creation\nconst { user } = useUser();\n\nconst handleCreatePasskey = async () => {\n  if (!user) return;\n  try {\n    return await user.createPasskey();\n  } catch (e: any) {\n    // handle error\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using SAML Connections with Clerk Client in Next.js\nDESCRIPTION: Example of using the new clerkClient.samlConnections API to retrieve SAML connection list in a Next.js application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkClient } from '@clerk/nextjs/server';\nconst samlConnection = await clerkClient.samlConnections.getSamlConnectionList();\n```\n\n----------------------------------------\n\nTITLE: Implementing requireAuth Middleware in Express\nDESCRIPTION: Shows how to use the requireAuth middleware to protect routes and redirect unauthenticated users in an Express application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { requireAuth } from '@clerk/express';\nimport express from 'express';\n\nconst app = express();\n\n// Apply centralized middleware\napp.use(requireAuth());\n\n// Apply middleware to a specific route\napp.get('/protected', requireAuth(), (req, res) => {\n  res.send('This is a protected route');\n});\n\n// Custom sign-in URL\napp.get('/protected', requireAuth({ signInUrl: '/sign-in' }), (req, res) => {\n  res.send('This is a protected route');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Authentication in Chrome Extension Service Worker\nDESCRIPTION: This snippet demonstrates how to create a Clerk client in a Chrome extension background script, obtain an authentication token, and use it in a runtime message listener. It requires the @clerk/chrome-extension package and environment variables for the Clerk publishable key and optional sync host.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/service-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/chrome-extension/background';\n\nconst PUBLISHABLE_KEY = process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY;\nconst SYNC_HOST = process.env.PLASMO_PUBLIC_CLERK_SYNC_HOST; // OPTIONAL\n\nasync function getToken() {\n  const clerk = await createClerkClient({\n    publishableKey: PUBLISHABLE_KEY,\n    syncHost: SYNC_HOST, // OPTIONAL: Add if you want to sync with a host, similarly to the provider above.\n  });\n  return await clerk.session?.getToken();\n}\n\n// NOTE: A runtime listener cannot be async.\n//       It must return true, in order to keep the connection open and send a response later.\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // You can use the token in the listener to perform actions on behalf of the user\n  // OR send the token back to the content script\n  getToken().then(token => sendResponse({ token }));\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Updated authenticateRequest Usage in TypeScript\nDESCRIPTION: Shows the new usage of authenticateRequest() with a Request object and options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nauthenticateRequest(new Request(...), { secretKey: '...' })\n```\n\n----------------------------------------\n\nTITLE: Updating verifyToken Return Value in @clerk/backend\nDESCRIPTION: The return value of verifyToken() from @clerk/backend is changed to { data, error }. This snippet demonstrates how to replicate the previous behavior using the new return format.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyToken } from '@clerk/backend'\n\nconst { data, error }  = await verifyToken(...);\nif(error){\n    throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating redirect import path from Clerk in Next.js\nDESCRIPTION: Example showing how to update the import path for the `redirect` function in Clerk for Next.js. This change moves the import from the top-level package to the server subpath, as redirect should only be used on the server side.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/redirect-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { redirect } from \"@clerk/nextjs\"\n+ import { redirect } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google OneTap using ClerkJS Custom Flow in TypeScript\nDESCRIPTION: Shows how to perform the Google OneTap authentication flow directly by integrating with google.accounts.id.initialize and ClerkJS APIs. This snippet initializes the Google OneTap prompt and processes the callback by authenticating with Clerk.authenticateWithGoogleOneTap, followed by Clerk.handleGoogleOneTapCallback for handling redirection. Requires ClerkJS, a Google Client ID set up on the page, and a compatible JavaScript/TypeScript environment. Key parameters include the Google OneTap credential token from the response. Input: token from Google; Output: user sign-in and automated redirection via Clerk.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    await Clerk.handleGoogleOneTapCallback(signInOrUp, {\n      signInForceRedirectUrl: window.location.href,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Usage of Users.getOrganizationMembershipList in JavaScript\nDESCRIPTION: This snippet demonstrates the change in how to destructure the return value of Users.getOrganizationMembershipList method. The method now returns an object with 'data' and 'totalCount' properties instead of just the 'data' array.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/getorganizationmembershiplist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n- const data = await clerkClient.users.getOrganizationMembershipList()\n+ const { data, totalCount } = await clerkClient.users.getOrganizationMembershipList()\n```\n\n----------------------------------------\n\nTITLE: Using @clerk/clerk-sdk-node for Authentication in Express\nDESCRIPTION: Demonstrates how to use the @clerk/clerk-sdk-node package to implement authentication middleware in an Express router and access auth information in a route handler.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/orgs-claim.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkClient } from \"@clerk/clerk-sdk-node\"\n\nrouter.use((...args) => clerkClient.expressRequireAuth()(...args))\nrouter.get(\"/me\", async (req, reply: Response) => {\n  return reply.json({ auth: req.auth })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Google One Tap with Custom Redirect URLs\nDESCRIPTION: Implementation showing how to configure Google One Tap with custom redirect URLs for sign-in and sign-up flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n<__experimental_GoogleOneTap\n  signInForceRedirectUrl=''\n  signUpForceRedirectUrl=''\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Routing Props on Clerk Components\nDESCRIPTION: Shows examples of how to properly set routing props on Clerk components like UserProfile, CreateOrganization, etc. An error will be thrown if path and routing props are not provided.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n// Without path or routing props, an error with be thrown\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// Alternative #1\n<UserProfile path=\"/whatever\"/>\n<CreateOrganization path=\"/whatever\"/>\n<OrganizationProfile path=\"/whatever\"/>\n<SignIn path=\"/whatever\"/>\n<SignUp path=\"/whatever\"/>\n\n// Alternative #2\n<UserProfile routing=\"hash_or_virtual\"/>\n<CreateOrganization routing=\"hash_or_virtual\"/>\n<OrganizationProfile routing=\"hash_or_virtual\"/>\n<SignIn routing=\"hash_or_virtual\"/>\n<SignUp routing=\"hash_or_virtual\"/>\n```\n\n----------------------------------------\n\nTITLE: Modifying buildClerkProps Import in Clerk/Next.js\nDESCRIPTION: This code diff illustrates the update needed for importing the `buildClerkProps` function. The import path must be changed from `@clerk/nextjs` to `@clerk/nextjs/server` because this helper is intended for server-side execution only within a Next.js application using Clerk for authentication.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/buildclerkprops-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { buildClerkProps } from \"@clerk/nextjs\"\n+ import { buildClerkProps } from \"@clerk/nextjs/server\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental GoogleOneTap Component with Redirect URLs\nDESCRIPTION: Example showing how to implement the experimental GoogleOneTap component with custom redirect URLs for sign-in and sign-up flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<__experimental_GoogleOneTap\n  signInForceRedirectUrl=''\n  signUpForceRedirectUrl=''\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Feature-Based Authorization with await auth()\nDESCRIPTION: Examples of using feature-based authorization with the await auth() function in Next.js.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(await auth()).has({ feature: \"my-feature\" })\n(await auth()).has({ feature: \"org:my-feature\" })\n(await auth()).has({ feature: \"user:my-feature\" })\n```\n\n----------------------------------------\n\nTITLE: Custom Clerk Client Implementation - TypeScript\nDESCRIPTION: Example of creating and using a custom Clerk client for dynamic secret key configuration and multiple Clerk instances using the @clerk/backend package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkToolkit } from '@clerk/agent-toolkit/ai-sdk';\nimport { createClerkClient } from '@clerk/backend';\n\nexport async function POST(req: Request) {\n  // Create a new Clerk client\n  const clerkClient = createClerkClient({ secretKey: 'sk_' });\n\n  // Instantiate a new Clerk toolkit with the custom client\n  const toolkit = await createClerkToolkit({ clerkClient });\n\n  // Use the toolkit as usual\n  const result = streamText({\n    model: openai('gpt-4o'),\n    messages,\n    tools: toolkit.users(),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Clerk Upgrade CLI Tool\nDESCRIPTION: Different package manager commands to run the @clerk/upgrade CLI tool. The tool scans your project for required upgrade changes and can be executed using npm, yarn, or pnpm. An alternative global installation method is also available using npm install.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @clerk/upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx @clerk/upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx @clerk/upgrade\n```\n\n----------------------------------------\n\nTITLE: Introducing Waitlist Component (JSX)\nDESCRIPTION: Introduces the `<Waitlist />` React component. This component provides a UI for users to sign up for a waitlist using their email address.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<Waitlist />\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Clerk Backend Client in TypeScript\nDESCRIPTION: Demonstrates how to create and use the Clerk backend client for various operations including instance management, OAuth applications, domains, and sign-up attempts.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\n\n// Instance operations\nawait clerkClient.instance.get();\nawait clerkClient.instance.update({...});\nawait clerkClient.instance.updateRestrictions({...});\nawait clerkClient.instance.updateOrganizationSettings({...});\n\n// OAuth Applications operations\nawait clerkClient.oauthApplications.list({...});\nawait clerkClient.oauthApplications.get('templateId');\nawait clerkClient.oauthApplications.create({...});\nawait clerkClient.oauthApplications.update({...});\nawait clerkClient.oauthApplications.delete('templateId');\nawait clerkClient.oauthApplications.rotateSecret('templateId');\n\n// Domain operations\nawait clerkClient.domains.list();\nawait clerkClient.domains.add({...});\nawait clerkClient.domains.update({...});\nawait clerkClient.domains.delete('satelliteDomainId');\n\n// Sign-up operations\nawait clerkClient.signUps.get('signUpAttemptId');\nawait clerkClient.signUps.update({...});\n\n// Beta feature: Change production domain\nawait clerkClient.betaFeatures.changeDomain({\n  homeUrl: 'https://www.example.com',\n  isSecondary: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Authorization Check for Plans and Features\nDESCRIPTION: Examples demonstrating how to check authorization for plans and features, with support for user and organization scoping.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.session.checkAuthorization({ plan: \"my-plan\" })\nClerk.session.checkAuthorization({ feature: \"my-feature\" })\nClerk.session.checkAuthorization({ feature: \"org:my-feature\" })\nClerk.session.checkAuthorization({ feature: \"user:my-feature\" })\nClerk.session.checkAuthorization({ plan: \"user:my-plan\" })\nClerk.session.checkAuthorization({ plan: \"org:my-plan\" })\n```\n\n----------------------------------------\n\nTITLE: Creating a User Passkey in JavaScript\nDESCRIPTION: Shows how to create a new passkey for a user's account using the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nawait clerk.user.__experimental__createPasskey()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Passkey using Clerk in TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a user using a passkey. It utilizes the useSignIn hook to access signIn methods, authenticates with a passkey, and sets the active session. Error handling is included for managing authentication failures.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { signIn, setActive } = useSignIn();\n\nconst handlePasskeySignIn = async () => {\n  try {\n    const signInResponse = await signIn.authenticateWithPasskey();\n    await setActive({ session: signInResponse.createdSessionId });\n  } catch (err: any) {\n    // handle error\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing apiKey with secretKey in Clerk getAuth function\nDESCRIPTION: This code shows how to update the deprecated apiKey parameter to the new secretKey parameter when using Clerk's getAuth function in a Remix loader function. This change is required as part of Clerk's API updates.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/getauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { getAuth } from '@clerk/remix/ssr.server';\n\nexport const loader: LoaderFunction = async args => {\n-  return getAuth(args, { apiKey: '...' });\n+  return getAuth(args, { secretKey: '...' });\n};\n```\n\n----------------------------------------\n\nTITLE: Path-based Routing Configuration Example\nDESCRIPTION: Example showing the required configuration for path-based routing in Clerk components. Either path prop or routing prop must be specified to avoid errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n\n// Without path or routing props, an error with be thrown\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// Alternative #1\n<UserProfile path=\"/whatever\"/>\n<CreateOrganization path=\"/whatever\"/>\n<OrganizationProfile path=\"/whatever\"/>\n<SignIn path=\"/whatever\"/>\n<SignUp path=\"/whatever\"/>\n\n// Alternative #2\n<UserProfile routing=\"hash_or_virtual\"/>\n<CreateOrganization routing=\"hash_or_virtual\"/>\n<OrganizationProfile routing=\"hash_or_virtual\"/>\n<SignIn routing=\"hash_or_virtual\"/>\n<SignUp routing=\"hash_or_virtual\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Google OneTap Prompt with React Component in TypeScript\nDESCRIPTION: Demonstrates how to render and customize the <GoogleOneTap/> React component, specifying parameters to control prompt UX. Requires ClerkJS and React+TypeScript environment. Parameters such as cancelOnTapOutside, itpSupport, and fedCmSupport control the prompt's behavior, and the component is typically rendered at the app's root. Expected input: optional props for prompt behavior; output: Google OneTap prompt with custom UX.\n\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating `decodeJwt` Import in Clerk/Next.js\nDESCRIPTION: This diff shows the required modification to import the `decodeJwt` function in a Next.js project using Clerk. The import path must be changed from '@clerk/nextjs' to '@clerk/nextjs/server' as `decodeJwt` is now designated for server-side execution only.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/decodejwt-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { decodeJwt } from \"@clerk/nextjs\"\n+ import { decodeJwt } from \"@clerk/nextjs/server\"\n```\n```\n\n----------------------------------------\n\nTITLE: Utilizing Test Utilities for Page Interactions in Playwright\nDESCRIPTION: Demonstrates the initialization and usage of the `createTestUtils` helper within a Playwright test. This helper accepts the current `app`, `page`, `context`, and optional `browser`, returning a namespaced object `u` which provides utilities for page interactions (e.g., `u.po.signUp.goTo()`) via Page Object Models, service access, and tab management.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ntest('...', async ({ page, context }) => {\n  const u = createTestUtils({ app, page, context, browser });\n  await u.po.signUp.goTo();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Introducing Xero & Box OAuth Provider Types\nDESCRIPTION: Implementation that adds support for Xero and Box as OAuth providers in the Clerk authentication system.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: Markdown\nCODE:\n```\n- **types:** Introduce Xero & Box OAuth provider types ([d7da1f2](https://github.com/clerk/javascript/commit/d7da1f2cbefef2841781202ac2853402c0b8eb2b))\n```\n\n----------------------------------------\n\nTITLE: Using SignedIn Component with treatPendingAsSignedOut Option in React\nDESCRIPTION: Examples showing how to use the SignedIn component with the treatPendingAsSignedOut option to control when children components are mounted based on session state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node only mounts when session is active\n// Example: Organization selection must be completed if enforced\n<SignedIn>\n  <p>You have selected an organization!</p>\n</SignedIn>\n\n// Children node mounts for both active and pending session\n<SignedIn treatPendingAsSignedOut={false}>\n  <p>You might not have an organization selected</p>\n</SignedIn>\n```\n\n----------------------------------------\n\nTITLE: Updating redirectToSignIn Import Path for Next.js Server Components\nDESCRIPTION: Shows the required change to import redirectToSignIn from the server subpath in Clerk's Next.js SDK. This change is necessary because redirectToSignIn is intended for server-side use only and must be imported from @clerk/nextjs/server.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/redirecttosignin-import-path.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { redirectToSignIn } from \"@clerk/nextjs\"\n+ import { redirectToSignIn } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Link Component in React\nDESCRIPTION: This code shows how to use the new Elements Link component in a React application, both directly and with a custom Next.js Link component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as Clerk from '@clerk/elements/common';\nimport NextLink from 'next/link';\n\nfunction SignInPage() {\n  return (\n    <>\n      <Clerk.Link navigate='sign-up'>Sign up</Clerk.Link>\n\n      <Clerk.Link navigate='sign-up'>{url => <NextLink href={url}>Sign up</NextLink>}</Clerk.Link>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Clerk Import to createClerkClient - Clerk Remix JS\nDESCRIPTION: Demonstrates the new practice of creating a Clerk client instance in Remix by using createClerkClient instead of the deprecated Clerk named import. Adjusts both the import statement and the invocation accordingly. The input is a JavaScript (or TypeScript) Remix server configuration; output is compatible with the latest Clerk SDK. Only dependency is '@clerk/remix'. Invoking the wrong named import will throw or fail to create a Clerk client.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { Clerk } from '@clerk/remix';\nconst clerk = Clerk({ secretKey: '...' });\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createClerkClient } from '@clerk/remix';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Clerk Provider in TanStack React Start Root Component\nDESCRIPTION: Modification to the root component in app/routes/_root.tsx to wrap the application with ClerkProvider.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClerkProvider } from '@clerk/tanstack-react-start'\nimport { createRootRoute } from '@tanstack/react-router'\nimport { Link, Outlet } from '@tanstack/react-router'\nimport { TanStackRouterDevtools } from '@tanstack/router-devtools'\nimport { Body, Head, Html, Meta, Scripts } from '@tanstack/start'\nimport * as React from 'react'\nimport { DefaultCatchBoundary } from '~/components/DefaultCatchBoundary'\nimport { NotFound } from '~/components/NotFound'\n\nexport const Route = createRootRoute({\n  meta: () => [\n    {\n      charSet: 'utf-8',\n    },\n    {\n      name: 'viewport',\n      content: 'width=device-width, initial-scale=1',\n    },\n  ],\n  errorComponent: (props) => {\n    return (\n      <RootDocument>\n        <DefaultCatchBoundary {...props} />\n      </RootDocument>\n    )\n  },\n  notFoundComponent: () => <NotFound />,\n  component: RootComponent,\n})\n\nfunction RootComponent() {\n  return (\n    <ClerkProvider>\n      <RootDocument>\n          <Outlet />\n      </RootDocument>\n    </ClerkProvider>\n  )\n}\n\nfunction RootDocument({ children }: { children: React.ReactNode }) { ... }\n```\n\n----------------------------------------\n\nTITLE: Exposing Permissions on OrganizationMembership in Clerk JS\nDESCRIPTION: Exposes a new `permissions` field on the `OrganizationMembership` resource. This allows developers to access the specific permissions associated with a user's membership within an organization directly through the membership object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// On OrganizationMembership resource\npermissions: OrganizationPermissionKey[];\n```\n\n----------------------------------------\n\nTITLE: Passkey Authentication Implementation\nDESCRIPTION: Example demonstrating how to implement passkey authentication using the Clerk client API.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await clerk.client.signIn.authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Provider for Chrome Extension in React TSX\nDESCRIPTION: This snippet demonstrates how to set up the ClerkProvider component for a Chrome extension. It includes optional configuration for syncing with a host and uses environment variables for key management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/clerk-provider.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// IndexPopup.tsx\nimport { ClerkProvider } from '@clerk/chrome-extension';\nimport App from './App';\n\nconst PUBLISHABLE_KEY = process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY; // REQUIRED\nconst SYNC_HOST = process.env.PLASMO_PUBLIC_CLERK_SYNC_HOST; // OPTIONAL\n\nfunction IndexPopup() {\n  return (\n    <ClerkProvider\n      publishableKey={PUBLISHABLE_KEY}\n      /* OPTIONAL: If syncHost is set, the extension will attempt to grab credentials from the host provided */\n      syncHost={SYNC_HOST}\n    >\n      <App />\n    </ClerkProvider>\n  );\n}\n\nexport default IndexPopup;\n```\n\n----------------------------------------\n\nTITLE: Custom Re-verification UI with useReverification in React\nDESCRIPTION: Shows how to use the new onNeedsReverification option with useReverification to create a custom UI for handling the re-verification flow in a React component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReverification } from '@clerk/clerk-react';\nimport { isReverificationCancelledError } from '@clerk/clerk-react/error';\n\ntype MyData = {\n  balance: number;\n};\n\nexport function MyButton() {\n  const fetchMyData = () => fetch('/api/balance').then(res => res.json() as Promise<MyData>);\n  const enhancedFetcher = useReverification(fetchMyData, {\n    onNeedsReverification: ({ complete, cancel, level }) => {\n      // e.g open a modal here and handle the re-verification flow\n    },\n  });\n\n  const handleClick = async () => {\n    try {\n      const myData = await enhancedFetcher();\n      //     ^ is typed as `MyData`\n    } catch (e) {\n      // Handle error returned from the fetcher here\n\n      // You can also handle cancellation with the following\n      if (isReverificationCancelledError(err)) {\n        // Handle the cancellation error here\n      }\n    }\n  };\n\n  return <button onClick={handleClick}>Update User</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Verification Code Example (JavaScript/TypeScript)\nDESCRIPTION: Example code showing how to verify incoming Clerk webhooks using the verifyWebhook() function from the Express SDK. Demonstrates webhook signature verification using Svix.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyWebhook } from '@clerk/express/webhooks';\n\napp.post(\n  '/api/webhooks',\n  bodyParser.raw({ type: 'application/json' }),\n\n  async (req, res) => {\n    try {\n      const evt = await verifyWebhook(req);\n\n      // Do something with payload\n      const { id } = evt.data;\n      const eventType = evt.type;\n      console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n      console.log('Webhook payload:', body);\n\n      return res.status(200).send('Webhook received');\n    } catch (err) {\n      console.log('Error: Could not verify webhook:', err.message);\n      return res.status(400).send('Error: Verification error');\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating `createClerkClient` Parameter from `frontendApi` to `publishableKey` in JavaScript\nDESCRIPTION: This code modification shows how to update the initialization of the Clerk server client using `createClerkClient` from `@clerk/nextjs/server`. The deprecated `frontendApi` parameter must be replaced with `publishableKey`, and the corresponding value must be updated with the application's publishable key obtained from the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/createclerkclient-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/nextjs/server';\n\n- createClerkClient({ frontendApi: '...' });\n+ createClerkClient({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Webhook Verification Handler Implementation\nDESCRIPTION: Demonstrates how to implement webhook verification using the new verifyWebhook() function from @clerk/nuxt/webhooks, including error handling and payload processing.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server/api/webhooks.post.ts\nimport { verifyWebhook } from '@clerk/nuxt/webhooks';\n\nexport default eventHandler(async event => {\n  try {\n    const evt = await verifyWebhook(event);\n\n    // Do something with payload\n    const { id } = evt.data;\n    const eventType = evt.type;\n    console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n    console.log('Webhook payload:', body);\n\n    return 'Webhook received';\n  } catch (err) {\n    console.error('Error: Could not verify webhook:', err);\n    setResponseStatus(event, 400);\n    return 'Error: Verification error';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Clerk Client in Fastify using createClerkClient (New Method - JavaScript)\nDESCRIPTION: Demonstrates the updated method for initializing the Clerk client in Fastify as introduced in version 1.0.0-alpha-v5.10. It involves importing the `createClerkClient` factory function from `@clerk/fastify` and calling it with configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClerkClient } from '@clerk/fastify';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updated Resource Type Imports in TypeScript\nDESCRIPTION: Shows the correct way to import resource-related type exports from @clerk/backend.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Customizing UserButton Menu Items with Custom Components in JSX\nDESCRIPTION: This example demonstrates how to use custom components to add and customize menu items in the UserButton dropdown, including custom links, actions, and reordering existing items.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<UserButton>\n  <UserButton.MenuItems>\n    <UserButton.Link\n      label='Terms'\n      labelIcon={<Icon />}\n      href='/terms'\n    />\n    <UserButton.Action\n      label='Help'\n      labelIcon={<Icon />}\n      open='help'\n    />\n    <UserButton.Action\n      label='manageAccount'\n      labelIcon={<Icon />}\n    />\n    <UserButton.Action\n      label='Chat Modal'\n      labelIcon={<Icon />}\n      onClick={() => setModal(true)}\n    />\n  </UserButton.MenuItems>\n</UserButton>\n```\n\n----------------------------------------\n\nTITLE: React Token Cache Example with ClerkProvider\nDESCRIPTION: Example showing how to configure ClerkProvider with token cache and resource cache in a React Native/Expo app.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// app/_layout.tsx\nimport { ClerkProvider } from '@clerk/clerk-expo'\nimport { tokenCache } from '@clerk/clerk-expo/token-cache'\nimport { resourceCache } from '@clerk/clerk-expo/resource-cache'\n\nexport default function RootLayout() {\n  return (\n    <ClerkProvider\n      publishableKey=\"your-publishable-key\"\n      tokenCache={tokenCache}\n      __experimental_resourceCache={resourceCache}\n    >\n      {...}\n    </ClerkProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating isClerkAPIResponseError Import Path in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the import path for the isClerkAPIResponseError utility. The import path has changed from @clerk/nextjs to @clerk/nextjs/errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/isclerkapiresponserror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isClerkAPIResponseError } from \"@clerk/nextjs\"\n+ import { isClerkAPIResponseError } from \"@clerk/nextjs/errors\"\n```\n\n----------------------------------------\n\nTITLE: Using sessionClaims in useAuth Hook with Clerk\nDESCRIPTION: Introduces the sessionClaims property to the useAuth() hook in Clerk, allowing access to session claims.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { sessionClaims } = useAuth();\n```\n\n----------------------------------------\n\nTITLE: Reimplementing withSession Higher Order Function in Clerk with React - JavaScript\nDESCRIPTION: This snippet shows how to recreate the deprecated withSession higher order function using Clerk's custom React hooks. It accepts a component and injects session context into its props by leveraging the useSessionContext hook. The function sets an accurate displayName for easier debugging, and returns null if the session is unavailable. Inputs include the component and optionally its display name; outputs are a new component that provides a session prop. This pattern requires Clerk's React package (e.g., clerk-react) and the useSessionContext hook to be installed and available.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withsession-hof-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction withSession(Component, displayName) {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n  const HOC = props => {\n    const session = useSessionContext();\n\n    if (!session) return null;\n\n    return (\n      <Component\n        {...props}\n        session={session}\n      />\n    );\n  };\n\n  HOC.displayName = `withSession(${displayName})`;\n  return HOC;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-In Page Component with Clerk in Next.js\nDESCRIPTION: This code snippet defines a SignInPage component using Clerk's useSignIn hook. It handles the loading state and displays the current sign-in attempt status. The component is marked with 'use client' for client-side rendering in Next.js.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/docs/use-sign-in.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSignIn } from '@clerk/nextjs';\n\nexport default function SignInPage() {\n  const { isLoaded, signIn } = useSignIn();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n\n  return <div>The current sign-in attempt status is {signIn?.status}.</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Plan-Based Authorization with useAuth() Hook\nDESCRIPTION: Examples of using plan-based authorization with the useAuth() hook in React.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuseAuth().has({ plan: \"my-plan\" })\nuseAuth().has({ plan: \"user:my-plan\" })\nuseAuth().has({ plan: \"org:my-plan\" })\n```\n\n----------------------------------------\n\nTITLE: Handling Error Responses in TypeScript\nDESCRIPTION: Shows how to handle error responses from Clerk Backend API requests using the new response payload structure that includes data and errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport { users } from '@clerk/backend';\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst { data, errors, clerkTraceId, status, statusText } = await users.getUser('user_deadbeef');\nif (errors) {\n  throw new ClerkAPIResponseError(statusText, {\n    data: errors,\n    status,\n    clerkTraceId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User Passkey in Clerk\nDESCRIPTION: Experimental support for users to register a new passkey for their account using Clerk's JavaScript client.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Register a new passkey\nawait clerk.user.__experimental__createPasskey()\n```\n\n----------------------------------------\n\nTITLE: Replacing apiKey with secretKey in rootAuthLoader for Clerk Remix Authentication\nDESCRIPTION: This code shows how to replace the deprecated 'apiKey' parameter with 'secretKey' in the rootAuthLoader function from the @clerk/remix package. This change is required as part of a breaking change in the Clerk authentication system.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/rootauthloader-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { rootAuthLoader } from '@clerk/remix/ssr.server';\n\n- export const loader = args => rootAuthLoader(args, { apiKey: '...' });\n+ export const loader = args => rootAuthLoader(args, { secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Core App with Clerk Components in React TSX\nDESCRIPTION: This snippet shows the basic structure of a React component using Clerk authentication components. It includes conditional rendering based on the user's authentication state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/clerk-provider.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { SignedIn, SignedOut, SignInButton, UserButton } from '@clerk/chrome-extension';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <SignedOut>\n          <SignInButton mode='modal' />\n        </SignedOut>\n        <SignedIn>\n          <UserButton />\n        </SignedIn>\n      </header>\n      <main>\n        <SignedOut>Please Sign In</SignedOut>\n        <SignedIn>Welcome!</SignedIn>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Usage Example\nDESCRIPTION: Example showing how to import and use the authenticateRequest method from @clerk/express package\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authenticateRequest } from '@clerk/express';\n```\n\n----------------------------------------\n\nTITLE: Clerk SignOut Configuration Examples\nDESCRIPTION: Examples of different ways to implement sign out functionality in Clerk, including redirectUrl configuration through various components and methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.signOut({ redirectUrl: '/' })\n\n<SignOutButton redirectUrl='/' />\n// uses Clerk.signOut({ redirectUrl: '/' })\n<UserButton afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n<ClerkProvider afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n```\n\n----------------------------------------\n\nTITLE: Migrating from setClerkApiKey to createClerkClient with secretKey parameter in Node.js\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated setClerkApiKey method to the new approach of passing secretKey directly to createClerkClient. The parameter name has also changed from apiKey to secretKey.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/setclerkapikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient, setClerkApiKey } from '@clerk/clerk-sdk-node';\n\n- const clerkClient = createClerkClient({ apiKey: '...' });\n- setClerkApiKey('...');\n\n+ const clerkClient = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Authentication Object Changes in Clerk JavaScript SDK\nDESCRIPTION: Breaking change that drops user/organization/session from auth object in signed-out state and replaces them with userId/organizationId/sessionId across different frameworks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n// Backend\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient({...});\nconst requestState = clerkClient.authenticateRequest(request, {...});\n\n- const { user, organization, session } = requestState.toAuth();\n+ const { userId, organizationId, sessionId } = requestState.toAuth();\n\n// Remix\nimport { getAuth } from '@clerk/remix/ssr.server';\n\n- const { user, organization, session } = await getAuth(args);\n+ const { userId, organizationId, sessionId } = await getAuth(args);\n\n// or\nrootAuthLoader(\n    args,\n    ({ request }) => {\n        - const { user, organization, session } = request.auth;\n        + const { userId, organizationId, sessionId } = request.auth;\n        // ...\n    },\n    { loadUser: true },\n);\n\n// NextJS\nimport { getAuth } from '@clerk/nextjs/server';\n\n- const { user, organization, session } = getAuth(args);\n+ const { userId, organizationId, sessionId } = getAuth(req, opts);\n\n// Gatsby\nimport { withServerAuth } from 'gatsby-plugin-clerk';\n\nexport const getServerData: GetServerData<any> = withServerAuth(\n    async props => {\n        - const { user, organization, session } =  props;\n        + const { userId, organizationId, sessionId } = props;\n        return { props: { data: '1', auth: props.auth, userId, organizationId, sessionId } };\n    },\n    { loadUser: true },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating SSR Imports in Next.js with Clerk\nDESCRIPTION: This code change demonstrates how to update Server-Side Rendering (SSR) imports when using Clerk with Next.js. The main @clerk/nextjs import now supports SSR by default, eliminating the need for a separate SSR-specific import.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { } from \"@clerk/nextjs/ssr\"\n+ import { } from \"@clerk/nextjs\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk authMiddleware apiKey to secretKey in JavaScript\nDESCRIPTION: Demonstrates how to update the Clerk authMiddleware initialization by replacing the deprecated 'apiKey' parameter with 'secretKey' as required for newer Clerk versions. Requires '@clerk/nextjs' as a dependency. Input is a configuration object for authMiddleware; outputs a middleware instance. Migration is necessary to prevent runtime errors due to deprecation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/authmiddleware-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { authMiddleware } from '@clerk/nextjs';\n\n- authMiddleware({ apiKey: '...' });\n+ authMiddleware({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Resource Type Exports in TypeScript\nDESCRIPTION: Type imports for core Clerk resources from @clerk/backend package\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Updated JWT Utility Imports in TypeScript\nDESCRIPTION: Demonstrates the new import structure for JWT-related utilities from @clerk/backend/jwt.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeJwt, hasValidSignature, signJwt, verifyJwt } from '@clerk/backend/jwt';\n```\n\n----------------------------------------\n\nTITLE: Disabling Development Mode Warnings in ClerkProvider using TypeScript/React\nDESCRIPTION: Shows how to disable the development mode warnings UI introduced in Clerk by setting the `unsafe_disableDevelopmentModeWarnings` property to `true` within the `layout` object of the `appearance` prop passed to the `<ClerkProvider>` component in a React application. Requires `@clerk/clerk-react`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkProvider\n  appearance={{\n    layout: {\n      unsafe_disableDevelopmentModeWarnings: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating `createAuthenticateRequest` Import Path (Diff)\nDESCRIPTION: Shows the necessary code change to update the import path for the `createAuthenticateRequest` function. The import should now point to `@clerk/nextjs/server` instead of `@clerk/nextjs`, as this helper is intended for server-side execution only.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/createauthenticaterequest-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { createAuthenticateRequest } from \"@clerk/nextjs\"\n+ import { createAuthenticateRequest } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Accessing New User Leave Organization Method\nDESCRIPTION: Demonstrates the new user resource method to leave an organization. This method can be called directly on the user object with the organization ID as a parameter.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nuser.leaveOrganization(<org_id>)\n```\n\n----------------------------------------\n\nTITLE: Defining Passkey Strategy UI in Clerk SignIn (TSX)\nDESCRIPTION: This snippet demonstrates how to define the user interface for the 'passkey' verification strategy itself using `SignIn.Strategy`. It includes displaying a personalized welcome message with `SignIn.Salutation` and a custom submission button.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.Strategy name='passkey'>\n  <p className='text-sm'>\n    Welcome back <SignIn.Salutation />!\n  </p>\n\n  <CustomSubmit>Continue with Passkey</CustomSubmit>\n</SignIn.Strategy>\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests with Clerk Backend in TypeScript\nDESCRIPTION: Illustrates the new way to authenticate requests using Clerk Backend, passing the entire request object instead of individual headers and cookies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkClient } from '@clerk/backend'\n\n// use req (if it's a fetch#Request instance) or use `createIsomorphicRequest` from `@clerk/backend`\n// to re-construct fetch#Request instance\nconst requestState = await clerkClient.authenticateRequest({\n    secretKey: 'sk_....'\n    publishableKey: 'pk_....'\n    request: req\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from frontendApi to publishableKey in createClerkExpressWithAuth\nDESCRIPTION: This code demonstrates how to update the createClerkExpressWithAuth function to use publishableKey instead of the deprecated frontendApi parameter. Note that both the parameter name and its value need to be changed, as they are different. The publishable key can be found in the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkexpresswithauth-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkExpressWithAuth } from '@clerk/clerk-sdk-node';\n\n- createClerkExpressWithAuth({ frontendApi: '...' });\n+ createClerkExpressWithAuth({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Using GoogleOneTap Component with React\nDESCRIPTION: Example of how to implement and customize the GoogleOneTap component in a React application, showing how to configure user experience options like cancelOnTapOutside, itpSupport, and fedCmSupport.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listeners in ClerkJS\nDESCRIPTION: Demonstrates how to subscribe to and handle events using the eventBus.on() method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/docs/events.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventBus, events } from './core/events';\n\neventBus.on(events.NewEvent, (obj: NewEventPayload) => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering SignIn Component with Fallback in Clerk React - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates the usage of Clerk's <SignIn /> React component with a fallback prop for improved user experience and minimized layout shift during mount. It requires the Clerk JavaScript SDK and React to be installed, and the LoadingSkeleton component should be defined in the project. The key parameter is 'fallback', which accepts a React element to display while authentication resources are loading. The main input is component props (optionally including fallback), and the output is a rendered SignIn interface with graceful loading behavior. This code is illustrative and intended for use within a Clerk-enabled React/TypeScript application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\n<SignIn fallback={<LoadingSkeleton />} />\n```\n\n----------------------------------------\n\nTITLE: Using Feature-Based Authorization with Protect Component\nDESCRIPTION: Examples of using feature-based authorization with the Protect component in React.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Protect feature=\"my-feature\" />\n<Protect feature=\"org:my-feature\" />\n<Protect feature=\"user:my-feature\" />\n```\n\n----------------------------------------\n\nTITLE: Improving Developer Experience for Headless Import\nDESCRIPTION: Feature update that improves the developer experience when importing and using headless Clerk functionality in React applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-js:** Improve DX for headless import ([8d64310](https://github.com/clerk/javascript/commit/8d64310ab23c6e21f8a687e503521245acad8211))\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Agent Toolkit with Vercel's AI SDK\nDESCRIPTION: Example of integrating Clerk Agent Toolkit with Vercel's AI SDK in a TypeScript environment.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkToolkit } from '@clerk/agent-toolkit/ai-sdk';\nimport { openai } from '@ai-sdk/openai';\nimport { streamText } from 'ai';\nimport { auth } from '@clerk/nextjs/server';\nimport { systemPrompt } from '@/lib/ai/prompts';\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n  const authContext = await auth.protect();\n\n  const toolkit = await createClerkToolkit({ authContext });\n\n  const result = streamText({\n    model: openai('gpt-4o'),\n    messages,\n    system: toolkit.injectSessionClaims(systemPrompt),\n    tools: {\n      ...toolkit.users(),\n      ...toolkit.organizations(),\n    },\n  });\n\n  return result.toDataStreamResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for createIsomorphicRequest in Clerk Next.js (diff)\nDESCRIPTION: This code snippet provides a unified diff that illustrates the migration of the 'createIsomorphicRequest' import from the '@clerk/nextjs' package to '@clerk/nextjs/server'. No external dependencies beyond Clerk's Next.js package are required. The key parameter is the module import path, which must be changed for correct server-only usage; failure to update may result in runtime errors on the client. The snippet demonstrates both the removal of the old import statement and addition of the correct one.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/createisomorphicrequest-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { createIsomorphicRequest } from \"@clerk/nextjs\"\\n+ import { createIsomorphicRequest } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Re-implementing WithClerk Using Clerk React Custom Hooks - JavaScript\nDESCRIPTION: This snippet demonstrates how to recreate the deprecated WithClerk higher-order component using the useClerk React hook. It wraps its children as a function and supplies the current Clerk context object. Required dependencies include the @clerk/clerk-react package. The component expects the children prop to be a function accepting the clerk object and throws an error otherwise; it returns the result of invoking children(clerk). Only supports functional children and requires React environment with Clerk hooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withclerk-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithClerk = ({ children }) => {\n  const clerk = useClerk();\n  if (typeof children !== 'function') throw new Error();\n\n  return {children(clerk)};\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Backend API Requests in TypeScript\nDESCRIPTION: This code example demonstrates how to handle the new response payload format for Backend API requests, which now returns { data, errors } instead of throwing on error responses.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nimport { users } from '@clerk/backend';\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst { data, errors, clerkTraceId, status, statusText } = await users.getUser('user_deadbeef');\nif (errors) {\n  throw new ClerkAPIResponseError(statusText, {\n    data: errors,\n    status,\n    clerkTraceId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Session Management in Next.js Client Component\nDESCRIPTION: A Next.js client component that uses the useSession hook from Clerk to manage authentication state. It handles loading states, signed-out states, and displays the time since the session was last active when the user is signed in.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/docs/use-session.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSession } from '@clerk/nextjs';\n\nexport default function HomePage() {\n  const { isLoaded, session, isSignedIn } = useSession();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n  if (!isSignedIn) {\n    // Handle signed out state\n    return null;\n  }\n\n  return (\n    <div>\n      <p>This session has been active since {session.lastActiveAt.toLocaleString()}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using auth().protect() with redirectUrl in TypeScript\nDESCRIPTION: Examples of using the auth().protect() method to handle both authorization and authentication, with optional redirectUrl parameter.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n// Authorization\nauth().protect({ role: 'org:admin' }, { redirectUrl: '/any-page' });\nauth().protect({ permission: 'org:settings:manage' }, { redirectUrl: '/any-page' });\n\n// Authentication\nauth().protect({ redirectUrl: '/any-page' });\n```\n\n----------------------------------------\n\nTITLE: Updating ClerkClient Options in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the secretKey for a ClerkClient instance. Instead of modifying __unstable_options, it shows creating a new instance with createClerkClient and passing the new options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/client-unstableoptions-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  import { createClerkClient } from \"@clerk/backend\"\n\n  const clerkClient = createClerkClient({ secretKey: \"old\" })\n\n- clerkClient.__unstable_options.secretKey = \"new\"\n+ const newClerkClient = createClerkClient({ secretKey: \"new\" })\n```\n\n----------------------------------------\n\nTITLE: Vue Protect Component with treatPendingAsSignedOut Examples\nDESCRIPTION: Examples showing how to use the Protect component with the treatPendingAsSignedOut prop to control component rendering based on session state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node only mounts when session is active\n// Example: Organization selection must be completed if enforced\n<Protect>\n  <p>You have selected an organization!</p>\n</Protect>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node mounts for both active and pending session\n<Protect treatPendingAsSignedOut={false}>\n  <p>You might not have an organization selected</p>\n</Protect>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Import Paths for Clerk Astro Components (Diff)\nDESCRIPTION: This diff illustrates the simplification of import paths for Clerk components within the `@clerk/astro` package (version 0.0.3+). Components like `UserProfile`, `Protect`, and `SignInButton`, previously imported from specific subdirectories (`interactive`, `control`, `unstyled`), are now directly accessible from the main `@clerk/astro/components` entry point, simplifying usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- import { UserProfile } from \"@clerk/astro/components/interactive\"\\n+ import { UserProfile } from \"@clerk/astro/components\"\\n\\n- import { Protect } from \"@clerk/astro/components/control\"\\n+ import { Protect } from \"@clerk/astro/components\"\\n\\n- import { SignInButton } from \"@clerk/astro/components/unstyled\"\\n+ import { SignInButton } from \"@clerk/astro/components\"\n```\n\n----------------------------------------\n\nTITLE: Updating isEmailLinkError Import Path in Clerk NextJS\nDESCRIPTION: Example showing how to update the import path for isEmailLinkError which has moved from @clerk/nextjs to @clerk/nextjs/errors. This change is necessary for the function to work correctly in newer versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/isemaillinkerror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isEmailLinkError } from \"@clerk/nextjs\"\n+ import { isEmailLinkError } from \"@clerk/nextjs/errors\"\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Package Imports\nDESCRIPTION: New import syntax for Clerk packages after dropping default exports. Developers need to use named imports instead of default imports.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\nimport { clerkInstance } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-js';\nimport { Clerk } from '@clerk/clerk-js/headless';\nimport { IsomorphicClerk } from '@clerk/clerk-react'\n```\n\n----------------------------------------\n\nTITLE: Introducing __reverificationError API\nDESCRIPTION: Introduces the `__reverificationError` API property, replacing the previous experimental version (`____experimental_reverificationError`), likely used within the context of the `useReverification` hook or related logic.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n__reverificationError\n```\n\n----------------------------------------\n\nTITLE: Route Protection with Path Matching\nDESCRIPTION: Example of using createRouteMatcher with glob patterns for protecting specific routes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isProtectedRoute = createRouteMatcher(['/dashboard(.*)']);\n\nexport default clerkMiddleware((auth, request) => {\n  if (isProtectedRoute(request)) {\n    auth().protect();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using recommended clerkMiddleware in Next.js\nDESCRIPTION: Example of using the new clerkMiddleware function that replaces withClerkMiddleware. It demonstrates the cleaner syntax with the createRouteMatcher utility for defining public routes and uses the auth().protect() method to handle authentication.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/with-clerk-middleware-removed.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// After: using clerkMiddleware\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs';\n\nconst isPublicRoute = createRouteMatcher(['/', '/sign-in', '/sign-up']);\n\nexport default clerkMiddleware((auth, req) => {\n  if (isPublicRoute(req)) return;\n\n  auth().protect();\n});\n\nexport const config = {\n  matcher: ['/((?!.+\\\\.[\\\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating createClerkExpressRequireAuth parameter from frontendApi to publishableKey\nDESCRIPTION: This code demonstrates how to migrate from the deprecated 'frontendApi' parameter to the new 'publishableKey' parameter in the createClerkExpressRequireAuth function. The keys have different values, so you'll need to obtain your publishable key from the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkexpressrequireauth-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkExpressRequireAuth } from '@clerk/clerk-sdk-node';\n\n- createClerkExpressRequireAuth({ frontendApi: '...' });\n+ createClerkExpressRequireAuth({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Checking Clerk Status Values in TypeScript\nDESCRIPTION: Example showing the possible values for Clerk.status property which tracks the state of the clerk singleton. The status can be 'loading', 'error', 'ready', or 'degraded'.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.status = \"loading\" | \"error\" | \"ready\" | \"degraded\"\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Key Injection Option Across Multiple Packages\nDESCRIPTION: A feature that adds support for an injected JWT key option across multiple Clerk packages including backend-core, clerk-sdk-node, nextjs, and remix. This was added in version 3.2.0-alpha.1.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_75\n\nLANGUAGE: Markdown\nCODE:\n```\n- **backend-core,clerk-sdk-node,nextjs,remix:** Add injected jwtKey option ([53e56e7](https://github.com/clerk/javascript/commit/53e56e76d59984d4d3f5b7e1e2d276adb8b2dc77))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Passkey Strategy Button in Clerk SignIn (TSX)\nDESCRIPTION: This snippet illustrates using `SignIn.SupportedStrategy` with `name='passkey'` and the `asChild` prop to render a custom button component that triggers the passkey authentication flow within Clerk SignIn.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.SupportedStrategy\n  asChild\n  name='passkey'\n>\n  <Button>use passkey</Button>\n</SignIn.SupportedStrategy>\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating With Passkey and Handling Errors - Clerk SDK - TypeScript\nDESCRIPTION: This snippet demonstrates how to authenticate a user using the experimental passkey authentication API, surrounded by a try-catch block. The example shows using `isClerkRuntimeError()` to check errors returned from Clerk and specifically handles the 'passkey_operation_aborted' error code. Dependencies include the Clerk SDK with experimental passkey APIs and utility functions. Inputs are the arguments to `__experimental_authenticateWithPasskey`, while outputs are the success result of the authentication or error handling logic.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk API Call for Pending Organization Invitations in JavaScript\nDESCRIPTION: This code snippet demonstrates the change from using 'getPendingOrganizationInvitationList' to 'getOrganizationInvitationList' with a 'status' parameter set to 'pending'. This change maintains the same functionality while using the new API method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/getpendingorganizationinvitationlist.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- clerkClient.organizations.getPendingOrganizationInvitationList()\n+ clerkClient.organizations.getOrganizationInvitationList({ status: \"pending\" })\n```\n\n----------------------------------------\n\nTITLE: Migrating SignOutButton Component in React\nDESCRIPTION: Example showing migration from signOutCallback prop to redirectUrl prop in SignOutButton component. The new approach simplifies redirect handling after sign out.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignOutButton } from '@clerk/clerk-react';\n\nexport const Signout = () => {\n  return (\n    <SignOutButton\n      signOutCallback={() => {\n        window.location.href = '/your-path';\n      }}\n    >\n      <button>Sign Out</button>\n    </SignOutButton>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignOutButton } from '@clerk/clerk-react';\n\nexport const Signout = () => {\n  return (\n    <SignOutButton redirectUrl='/your-path'>\n      <button>Sign Out</button>\n    </SignOutButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Updating authenticateRequest Usage in @clerk/backend\nDESCRIPTION: Changes to the authenticateRequest method in @clerk/backend to use a single request parameter instead of individual header or cookie options. This snippet demonstrates how to migrate from the old usage to the new one.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n//\n// current\n//\nimport { clerkClient } from '@clerk/backend'\n\nconst requestState = await clerkClient.authenticateRequest({\n    secretKey: 'sk_....'\n    publishableKey: 'pk_....'\n    origin: req.headers.get('origin'),\n    host: req.headers.get('host'),\n    forwardedHost: req.headers.get('x-forwarded-host'),\n    forwardedProto: req.headers.get('x-forwarded-proto'),\n    referrer: req.headers.get('referer'),\n    userAgent: req.headers.get('user-agent'),\n    clientUat: req.cookies.get('__client_uat'),\n    cookieToken: req.cookies.get('__session'),\n    headerToken: req.headers.get('authorization'),\n    searchParams: req.searchParams\n});\n\n//\n// new\n//\nimport { clerkClient,  } from '@clerk/backend'\n\n// use req (if it's a fetch#Request instance) or use `createIsomorphicRequest` from `@clerk/backend`\n// to re-construct fetch#Request instance\nconst requestState = await clerkClient.authenticateRequest({\n    secretKey: 'sk_....'\n    publishableKey: 'pk_....'\n    request: req\n});\n```\n\n----------------------------------------\n\nTITLE: Using Error Handling Utilities in Vue\nDESCRIPTION: Example of how to use the Clerk error handling utilities to properly handle API response errors in a Vue component. This shows how to type-guard errors and handle them appropriately in a sign-in form.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignIn } from '@clerk/vue';\nimport { isClerkAPIResponseError } from '@clerk/vue/errors';\n\n// ... form state refs and other setup ...\nconst { signIn } = useSignIn();\n\nconst handleSubmit = async () => {\n  try {\n    const signInAttempt = await signIn.value.create({\n      identifier: email.value,\n      password: password.value,\n    });\n    // ... handle successful sign in ...\n  } catch (err) {\n    // Type guard to safely handle Clerk API errors\n    if (isClerkAPIResponseError(err)) {\n      errors.value = err.errors; // err.errors is properly typed as ClerkAPIError[]\n    }\n  }\n};\n</script>\n\n<template>\n  <!-- Form template here -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating apiKey to secretKey Parameter in createClerkClient\nDESCRIPTION: This code demonstrates how to migrate from the deprecated 'apiKey' parameter to the new 'secretKey' parameter when initializing the Clerk client with createClerkClient. The change is a breaking change that requires updating existing code to maintain functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkclient-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/clerk-sdk-node';\n\n- createClerkClient({ apiKey: '...' });\n+ createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Manual Session Management after Google OneTap Authentication with ClerkJS in TypeScript\nDESCRIPTION: Illustrates manual session and redirection control after Google OneTap authentication using ClerkJS, allowing for custom post-login handling. After authenticating with Clerk.authenticateWithGoogleOneTap, the snippet checks the signInOrUp.status and calls Clerk.setActive if authentication was completed, setting the session explicitly. Requires ClerkJS and a Google Client ID; used when developers want to manage redirection/session themselves instead of using Clerk's defaults.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    if (signInOrUp.status === 'complete') {\n      await Clerk.setActive({\n        session: signInOrUp.createdSessionId,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WithUser Functionality with Clerk Custom Hook – JavaScript\nDESCRIPTION: This React functional component example re-implements the WithUser higher order component's behavior using Clerk's useUser custom hook. It expects a single prop, children, which must be a function receiving the current user object; if not, an error is thrown. This snippet depends on Clerk's useUser hook and is intended for use in projects replacing the deprecated WithUser HOC to provide user context to child components. Inputs are a function as the children prop; output is the result of calling this function with the user object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withuser-removed-2.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithUser = ({ children }) => {\n  const user = useUser();\n  if (typeof children !== 'function') throw new Error();\n\n  return {children(user)};\n};\n```\n\n----------------------------------------\n\nTITLE: Updating API-related Imports in Next.js with Clerk\nDESCRIPTION: This snippet demonstrates how to update API-related imports when using Clerk with Next.js. The @clerk/nextjs/api subpath has been removed, and its exports are now available directly from @clerk/clerk-sdk-node.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n  import type {\n    ClerkMiddleware,\n    ClerkMiddlewareOptions,\n    LooseAuthProp,\n    RequireAuthProp,\n    StrictAuthProp,\n    WithAuthProp\n- } from \"@clerk/nextjs/api\"\n+ } from \"@clerk/clerk-sdk-node\"\n\n- import { requireAuth, withAuth } from \"@clerk/nextjs/api\"\n+ import { requireAuth, withAuth } from \"@clerk/clerk-sdk-node\"\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Components in TanStack React Start Route\nDESCRIPTION: Example of using Clerk components (SignIn, SignedIn, SignedOut, UserButton) in a TanStack React Start route file (app/routes/index.tsx).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignIn, SignedIn, SignedOut, UserButton } from '@clerk/tanstack-react-start';\nimport { createFileRoute } from '@tanstack/react-router';\n\nexport const Route = createFileRoute('/')({ \n  component: Home,\n});\n\nfunction Home() {\n  return (\n    <div className='p-2'>\n      <h1>Hello Clerk!</h1>\n      <SignedIn>\n        <UserButton />\n      </SignedIn>\n      <SignedOut>\n        <SignIn />\n      </SignedOut>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Organization Profile Pages in Vue\nDESCRIPTION: Shows how to add custom pages and links to the Organization Profile component through the OrganizationSwitcher in a Vue application. This enables developers to extend the organizational UI with custom content.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { OrganizationSwitcher } from '@clerk/vue';\nimport Icon from './Icon.vue';\n</script>\n\n<template>\n  <header>\n    <OrganizationSwitcher>\n      <OrganizationSwitcher.OrganizationProfilePage\n        label=\"Custom Page\"\n        url=\"custom\"\n      >\n        <template #labelIcon>\n          <Icon />\n        </template>\n        <div>\n          <h1>Custom Organization Profile Page</h1>\n          <p>This is the custom organization profile page</p>\n        </div>\n      </OrganizationSwitcher.OrganizationProfilePage>\n      <OrganizationSwitcher.OrganizationProfileLink\n        label=\"Homepage\"\n        url=\"/\"\n      >\n        <template #labelIcon>\n          <Icon />\n        </template>\n      </OrganizationSwitcher.OrganizationProfileLink>\n    </OrganizationSwitcher>\n  </header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Client Creation in TypeScript\nDESCRIPTION: Demonstrates how to update the creation of a Clerk client instance using the new createClerkClient factory method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Accessing Experimental Factor Verification Age from Session in Clerk React (TypeScript)\nDESCRIPTION: This client-side example shows how to retrieve the experimental '__experimental_factorVerificationAge' property from a user session using the 'useSession' hook in a React application. The code expects Clerk's React SDK to be installed and configured in a TypeScript environment. The main parameter is the session object, from which the property is extracted if available. Intended for experimental use, it provides information on the age of verified factor groups for the session, but may not be stable across releases.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { session } = useSession();\nsession?.__experimental_factorVerificationAge;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Session Account Selection with Clerk Elements in TSX\nDESCRIPTION: This code demonstrates how to implement a multi-session choose-account step using Clerk Elements UI components within a React/TSX application. It leverages <SignIn.Step> for the session choosing phase, with child components <SignIn.SessionList> and <SignIn.SessionListItem> to enumerate available sessions. The callback exposes each session's properties, enabling display and action controls, such as switching the active session using <SignIn.Action setActiveSession>. Requires Clerk Elements, React, and correct Clerk backend configuration. Accepts no explicit parameters, but relies on context from Clerk's provider; expects rendering in an environment where valid sessions are available.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx\n<SignIn.Step name='choose-session'>\n  <SignIn.SessionList>\n    <SignIn.SessionListItem>\n      {({ session }) => (\n        <>\n          {session.identifier} | <SignIn.Action setActiveSession>Switch...</SignIn.Action>\n        </>\n      )}\n    </SignIn.SessionListItem>\n  </SignIn.SessionList>\n</SignIn.Step>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Assurance Feature in Clerk - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to utilize the new experimental assurance options with the `has` API, passing a configuration object that specifies desired assurance level and maximum age. To use this, ensure your project imports or has access to the `has` function supporting the `__experimental_assurance` object. The `level` and `maxAge` parameters control session verification factors and expiration; see the referenced pull request and new API documentation for allowable values. The snippet expects development dependencies on Clerk libraries at or above the release introducing these changes and assumes a compatible TypeScript project setup.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nhas({\n  __experimental_assurance: {\n    level: 'L2.secondFactor',\n    maxAge: 'A1.10min',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating SignOut Behavior in ClerkJS Components\nDESCRIPTION: Updates the SignOut behavior in ClerkJS components to consolidate afterSignOutOneUrl and afterSignOutAllUrl into afterSignOutUrl. Removes usage of Dashboard settings for Account Portal application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.signOut({ redirectUrl: '/' })\n\n<SignOutButton redirectUrl='/' />\n// uses Clerk.signOut({ redirectUrl: '/' })\n<UserButton afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n<ClerkProvider afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Passkey during Sign-In in Expo/React (TypeScript)\nDESCRIPTION: Shows the process of authenticating a user via a passkey during the sign-in flow using Clerk hooks. It utilizes the `useSignIn` hook to get the `signIn` object and the `setActive` function. The `handlePasskeySignIn` function calls `signIn.authenticateWithPasskey()` and, upon success, sets the active session using `setActive`, handling potential errors in a catch block.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\n// passkey authentication\nconst { signIn, setActive } = useSignIn();\n\nconst handlePasskeySignIn = async () => {\n  try {\n    const signInResponse = await signIn.authenticateWithPasskey();\n    await setActive({ session: signInResponse.createdSessionId });\n  } catch (err: any) {\n    //handle error\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Children Render Function to Field - jsx\nDESCRIPTION: This JSX snippet showcases the new optional capability for the <Field> component to accept a child function. The function receives the current state, enabling dynamic rendering based on field state. Required Clerk Elements components must be installed, and the parent context must provide necessary state management. Input is usually managed via form state, and output is a rendered React element.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Field>{state => ()}</Field>\n```\n\n----------------------------------------\n\nTITLE: Preventing Error Throwing with Clerk Instance\nDESCRIPTION: Bug fix that prevents throwing a missing key error when a Clerk instance is used, improving error handling in the React integration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-react:** Do not throw missing key error if a Clerk instance is used ([a300016](https://github.com/clerk/javascript/commit/a3000164483e7ed947d448f7593e0ce4dd110db3))\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Component in TSX\nDESCRIPTION: Example showing how to use the Step component which replaces Start, Continue and Verifications components. The Step component accepts a name prop that can be set to 'start', 'continue' or 'verifications'.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// You can also use name=\"continue\" or name=\"verifications\"\n<Step name='start'>Contents</Step>\n```\n\n----------------------------------------\n\nTITLE: Updating verifyToken Import Path in Clerk for Next.js\nDESCRIPTION: This diff shows how to update the import path for the verifyToken function, moving it from the top-level @clerk/nextjs package to the server-specific @clerk/nextjs/server path. This change is required as verifyToken is a server-side helper.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/verifytoken-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { verifyToken } from \"@clerk/nextjs\"\n+ import { verifyToken } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Updating Code for `getRedirectUrlList` Return Signature Change (Diff)\nDESCRIPTION: This diff shows the required modification to handle the updated return signature of `clerkClient.redirectUrls.getRedirectUrlList`. Instead of directly assigning the result to a `data` variable, the code now destructures the returned object to extract both the `data` array and the `totalCount` number. This change is necessary due to the SDK update aligning with paginated backend API responses.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getredirecturllist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const data = await clerkClient.redirectUrls.getRedirectUrlList()\n+ const { data, totalCount } = await clerkClient.redirectUrls.getRedirectUrlList()\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Reverification Errors in Clerk with React Hook - TypeScript/TSX\nDESCRIPTION: Demonstrates the use of the experimental useReverification hook from @clerk/nextjs to handle user session reverification errors in a React component. The DeleteAccount component retrieves the current user, wraps a delete operation with the reverification flow, and triggers it via a button click. Requires @clerk/nextjs, and expects a valid user context; when reverification is required, a modal is presented to the user and the attempted operation is retried automatically once upon completion.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport { __experimental_useReverification as useReverification } from '@clerk/nextjs';\n\nfunction DeleteAccount() {\n  const { user } = useUser();\n  const [deleteUserAccount] = useReverification(() => {\n    if (!user) return;\n    return user.delete();\n  });\n\n  return (\n    <>\n      <button\n        onClick={async () => {\n          await deleteUserAccount();\n        }}\n      >\n        Delete account\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Clerk Import to createClerkClient in Fastify - JavaScript\nDESCRIPTION: Shows how to migrate from the deprecated named 'Clerk' import to using 'createClerkClient' in the '@clerk/fastify' package as part of a breaking API change. The factory method pattern is now used for consistent Clerk client instantiation across packages. Requires Node.js (>=18.18.0) and '@clerk/fastify'. The main input is the secretKey configuration object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { Clerk } from '@clerk/fastify';\nconst clerk = Clerk({ secretKey: '...' });\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { createClerkClient } from '@clerk/fastify';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating authenticateRequest Function Call in JavaScript\nDESCRIPTION: This code snippet demonstrates the change in how the authenticateRequest function is called. The 'request' parameter is now passed as the first argument, separate from the 'options' object which becomes the second argument.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/authenticaterequest-params-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- clerkClient.authenticateRequest({ ...opts, request })\n+ clerkClient.authenticateRequest(request, { ...opts })\n```\n\n----------------------------------------\n\nTITLE: Initializing Google One Tap with Authentication Callback\nDESCRIPTION: Shows how to initialize Google One Tap with Clerk's authentication methods, handling the credential response and performing proper redirections after authentication.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    await Clerk.handleGoogleOneTapCallback(signInOrUp, {\n      signInForceRedirectUrl: window.location.href,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom `withUser` HOC with Clerk Hooks (JavaScript)\nDESCRIPTION: This JavaScript function defines a custom higher-order component (HOC) named `withUser` as a replacement for the removed built-in function. It wraps a React component, uses a Clerk hook (implicitly `useUser` is likely intended to get the `user` object, although `useUserContext` is shown) to access the authentication state, and renders the wrapped component only if a user is signed in, passing the `user` object as a prop. If no user is authenticated, it renders `null`. Requires React and Clerk React (`useUser` or `useUserContext`).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withuser-hof-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction withUser(Component, displayName) {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n  const HOC = props => {\n    const clerk = useUserContext(); // Note: 'user' variable used below is not explicitly defined here. Assumes useUser() or similar context access provides it.\n\n    if (!user) return null;\n\n    return (\n      <Component\n        {...props}\n        user={user}\n      />\n    );\n  };\n\n  HOC.displayName = `withUser(${displayName})`;\n  return HOC;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated `afterSignXUrl` Props in Clerk SignIn Component (React)\nDESCRIPTION: This code diff illustrates how to update the Clerk `<SignIn>` component to use the new fallback redirection props for maintaining previous behavior. The deprecated `afterSignInUrl` and `afterSignUpUrl` props are replaced with `fallbackRedirectUrl` and `signUpFallbackRedirectUrl` respectively. This change preserves the original behavior where redirection to the specified URLs only occurs if no `redirect_url` query parameter is present during the sign-in/sign-up flow.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/aftersignxurl-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <SignIn afterSignInUrl='/foo' afterSignUpUrl='/bar' />\n+ <SignIn fallbackRedirectUrl='/foo' signUpFallbackRedirectUrl='/bar' />\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Handle Relative Redirect URLs\nDESCRIPTION: Fixes an issue where relative redirect URLs were being discarded instead of properly handled.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-js:** Do not discard relative redirect urls ([#754](https://github.com/clerk/javascript/issues/754)) ([6b227ff](https://github.com/clerk/javascript/commit/6b227ffac5ded2ef30f5f586891c2985c7569805))\n```\n\n----------------------------------------\n\nTITLE: Accessing Experimental Factor Verification Age using Clerk Auth Object in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the experimental '__experimental_factorVerificationAge' property from the auth object on the server side within a Next.js application. No additional dependencies are required beyond the Clerk SDK for Node and TypeScript support. The output is the age data for verified factor groups, and its availability is contingent on the latest SDK version supporting this field. It is intended for experimental usage and may change in future releases.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nauth().__experimental_factorVerificationAge;\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Passkeys in Clerk Expo (TSX)\nDESCRIPTION: This snippet demonstrates how to enable experimental passkey support in an Expo application using Clerk. It involves importing the `passkeys` object from `@clerk/clerk-expo/passkeys` and passing it as the `__experimental_passkeys` prop to the `ClerkProvider` component wrapping the application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ClerkProvider } from '@clerk/clerk-expo';\nimport { passkeys } from '@clerk/clerk-expo/passkeys';\n\n<ClerkProvider __experimental_passkeys={passkeys}>{/* Your app here */}</ClerkProvider>;\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Server-Side Imports in Next.js with Clerk\nDESCRIPTION: This snippet demonstrates how to update import statements for server-side functionality in Clerk for Next.js. It moves several imports from the main @clerk/nextjs package to the more specific @clerk/nextjs/server submodule.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n    auth,\n    currentUser,\n    authMiddleware,\n    buildClerkProps,\n    verifyToken,\n    verifyJwt,\n    decodeJwt,\n    signJwt,\n    constants,\n    redirect,\n    createAuthenticateRequest,\n    createIsomorphicRequest,\n- } from \"@clerk/nextjs\"\n+ } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Response Clone Alternative for Cloudflare Workers\nDESCRIPTION: Replacement for response.clone() to avoid stream branching issues in Cloudflare workers by creating a new Response object with the same body and properties.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnew Response(response.body, response)\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Utility Functions in @clerk/backend/jwt\nDESCRIPTION: Changes to the return values of signJwt, hasValidSignature, decodeJwt, and verifyJwt to return { data, error }. This snippet shows how to maintain the same behavior using these utilities with the new return format.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, hasValidSignature, decodeJwt, verifyJwt } from '@clerk/backend/jwt';\n\nconst { data, error } = await signJwt(...)\nif (error) throw error;\n\nconst { data, error } = await hasValidSignature(...)\nif (error) throw error;\n\nconst { data, error } = decodeJwt(...)\nif (error) throw error;\n\nconst { data, error } = await verifyJwt(...)\nif (error) throw error;\n```\n\n----------------------------------------\n\nTITLE: Google One Tap Recommended Authentication Flow\nDESCRIPTION: Recommended implementation for Google One Tap authentication flow using Clerk's helper methods for proper redirection handling.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    await Clerk.handleGoogleOneTapCallback(signInOrUp, {\n      signInForceRedirectUrl: window.location.href,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Invitation Metadata\nDESCRIPTION: Feature that adds support for metadata in organization invitations, allowing additional information to be attached to invites.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js,types:** Organization invitation metadata ([87764b8](https://github.com/clerk/javascript/commit/87764b839cc65455347e1c19b15f4a17603201b8))\n```\n\n----------------------------------------\n\nTITLE: Implementing Backup Code Verification Step in Clerk SignIn (TSX)\nDESCRIPTION: This snippet demonstrates the implementation of the 'verifications' step for the 'backup_code' strategy within Clerk SignIn. It includes defining the form field for the backup code using `Clerk.Field`, `Clerk.Label`, `Clerk.Input`, and `Clerk.FieldError`, along with a submit action using `Clerk.Action`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.Step name='verifications'>\n  <SignIn.Strategy name='backup_code'>\n    <Clerk.Field name=\"backup_code\">\n      <Clerk.Label>Code:</Clerk.Label>\n      <Clerk.Input />\n      <Clerk.FieldError />\n    </Clerk.Field>\n\n    <Clerk.Action submit>Continue</Clerk.Action>\n  </SignIn.Strategy>\n<SignIn.Step>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Flow to Popup in Clerk SignIn and SignUp Components\nDESCRIPTION: Adds support for the oauthFlow prop on SignIn and SignUp components, allowing developers to use a popup for OAuth authorization instead of redirects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<SignIn oauthFlow=\"popup\" />\n<SignUp oauthFlow=\"popup\" />\n```\n\n----------------------------------------\n\nTITLE: Error Exports from @clerk/backend/errors\nDESCRIPTION: Shows the new import path for error-related exports from the dedicated errors subpath.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TokenVerificationError,\n  TokenVerificationErrorAction,\n  TokenVerificationErrorCode,\n  TokenVerificationErrorReason,\n} from '@clerk/backend/errors';\n```\n\n----------------------------------------\n\nTITLE: Adding Passkey Button to Clerk SignIn Start Step (TSX)\nDESCRIPTION: This snippet shows how to add a dedicated passkey action to the 'start' step of the Clerk SignIn flow using the `SignIn.Passkey` component. It also demonstrates handling loading states within the button.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.Step name='start'>\n  <SignIn.Passkey>\n    <Clerk.Loading>{isLoading => (isLoading ? <Spinner /> : 'Use passkey instead')}.</Clerk.Loading>\n  </SignIn.Passkey>\n</SignIn.Step>\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating useOrganizationList Parameter in JavaScript\nDESCRIPTION: Example showing the migration from the deprecated organizationList parameter to the new userMemberships parameter in the useOrganizationList hook. The new parameter uses initialPage and pageSize instead of limit and offset for pagination.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/shared/useorganizationlist-organizationlist.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nconst { organizationList } = useOrganizationList({\n  organizationList: { limit: 10, offset: 1 },\n});\n\n// after\nconst { memberships } = useOrganizationList({\n  userMemberships: { initialPage: 1, pageSize: 10 },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Pagination Arguments in Sessions.getSessionList for Clerk JavaScript SDK\nDESCRIPTION: This code snippet demonstrates the changes in pagination arguments for the Sessions.getSessionList function. The 'limit' parameter has been renamed to 'pageSize', and 'offset' has been renamed to 'initialPage'. These changes aim to make pagination control more intuitive and easier to understand.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/getsessionlist-arguments.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await sessions.getSessionList({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Host Permissions in manifest.json\nDESCRIPTION: Example of adding the required storage permission to the manifest.json file for Chrome extensions using Clerk. This permission is necessary for Clerk to store authentication data for the extension.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\"storage\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering OAuth Providers in Sign In/Up Components\nDESCRIPTION: Feature that enhances Sign In and Sign Up components to only list OAuth providers that support authentication.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: Markdown\nCODE:\n```\n- **types,clerk-js:** List only authenticatable OAuth providers in Sign in/up components ([4b3f1e6](https://github.com/clerk/javascript/commit/4b3f1e67d655dfb3e818ce9015b68b369d7a1bd4))\n```\n\n----------------------------------------\n\nTITLE: Using SignIn.Captcha and SignIn.Step Components in React\nDESCRIPTION: This snippet demonstrates how to use the newly introduced SignIn.Captcha and SignIn.Step components for SSO callback in a React application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SignIn.Captcha />\n<SignIn.Step name='sso-callback'>\n```\n\n----------------------------------------\n\nTITLE: Migrating from LegacyAuthObject to AuthObject in Clerk Authentication\nDESCRIPTION: This diff shows the changes between the legacy and new authentication object types. The main change is renaming 'claims' to 'sessionClaims' and adding organization-related properties (orgId, orgRole, orgSlug, orgPermissions, has).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/legacyauthobject-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- type LegacyAuthObject = {\n+ type AuthObject = {\n    sessionId: string | null;\n    actor: ActClaim | undefined | null;\n    userId: string | null;\n    getToken: ServerGetToken | null;\n    debug: AuthObjectDebug | null;\n-   claims: JwtPayload | null;\n+   sessionClaims: JwtPayload | null;\n+   orgId: string | undefined | null;\n+   orgRole: OrganizationCustomRoleKey | undefined | null;\n+   orgSlug: string | undefined | null;\n+   orgPermissions: OrganizationCustomPermissionKey[] | undefined | null;\n+   has: CheckAuthorizationWithCustomPermissions | null;\n  }\n```\n\n----------------------------------------\n\nTITLE: Verifying Proxy Checks with Clerk Backend API\nDESCRIPTION: Demonstrates how to use the Backend API client to verify proxy checks. This functionality allows verification of domain and proxy URL combinations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\nawait clerkClient.proxyChecks.verify({\n  domainId: 'dmn_xxxxxx',\n  proxyUrl: 'https://[your-domain].com'\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing User Passkeys in Clerk\nDESCRIPTION: Experimental support for reading, updating, and deleting a user's registered passkeys within the Clerk platform. This includes accessing the passkey collection, updating a passkey name, and deleting a specific passkey.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the user's passkeys\nclerk.user.__experimental__passkeys\n\n// Update the name of a passkey\nclerk.user.__experimental__passkeys?.[0].update({name:'work laptop passkey'})\n\n// Delete a passkey\nclerk.user.__experimental__passkeys?.[0].delete()\n```\n\n----------------------------------------\n\nTITLE: Defining StorageCache Interface for ClerkProvider in TypeScript\nDESCRIPTION: This TypeScript snippet defines the StorageCache interface used in the ClerkProvider component. It details the required methods for cache key creation (createKey), retrieval (get), removal (remove), and insertion (set), all supporting Promise-based asynchronous operations. Implementations must provide these methods, expecting string-based keys and, for set, string values; get is generic to allow any return type.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/chrome-extension/clerkprovider-tokencache.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype StorageCache = {\n  createKey: (...keys: string[]) => string;\n  get: <T = any>(key: string) => Promise<T>;\n  remove: (key: string) => Promise<void>;\n  set: (key: string, value: string) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Auth Middleware API Route Patterns\nDESCRIPTION: Default patterns used by authMiddleware to identify API routes in NextJS applications. Includes URL patterns for API and tRPC routes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\n[\"/api/(.*)\", \"/trpc/(.*)\"]\n```\n\n----------------------------------------\n\nTITLE: Using useClerk().status in React\nDESCRIPTION: Example of using the new useClerk().status value to check Clerk's initialization status in a React component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst status = useClerk().status;\n\nswitch (status) {\n  case \"loading\":\n    return <Loading />;\n  case \"error\":\n    return <Error />;\n  case \"ready\":\n    return <Ready />;\n  case \"degraded\":\n    return <Degraded />;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from User.update to User.updatePassword in Clerk JavaScript (diff)\nDESCRIPTION: This diff shows the deprecation of the User.update({ password }) method and its replacement with User.updatePassword in Clerk's JavaScript SDK. The updated method requires the currentPassword and newPassword fields, as well as an optional signOutOfOtherSessions boolean. This migration enhances password change security by verifying the user's current password before allowing an update. The diff format clearly shows what should be removed and what should be added.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/user-update-password.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- user.update({ password: 'foo' });\\n\\n+ user.updatePassword({\\n+   currentPassword: 'bar',\\n+   newPassword: 'foo',\\n+   signOutOfOtherSessions: true,\\n+ });\n```\n\n----------------------------------------\n\nTITLE: Updating createIsomorphicRequest Import Path in JavaScript\nDESCRIPTION: This code snippet shows the necessary change to update the import path for the createIsomorphicRequest function. The import is moved from @clerk/backend to @clerk/backend/internal. Note that internal imports are not covered by semver and not intended for general usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createisomorphicrequest-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { createIsomorphicRequest } from \"@clerk/backend\"\n+ import { createIsomorphicRequest } from \"@clerk/backend/internal\"\n```\n\n----------------------------------------\n\nTITLE: Updating authMiddleware Import Path in Next.js with Clerk (diff)\nDESCRIPTION: Demonstrates the necessary change to update the import statement for authMiddleware in a Next.js project using Clerk. The original import from '@clerk/nextjs' is replaced with '@clerk/nextjs/server' to enforce server-only usage, in line with current best practices. Requires that the project uses Clerk for authentication, with authMiddleware previously imported from the client-side entrypoint; the expected result is proper server-side functioning of the middleware after migration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/authmiddleware-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { authMiddleware } from \"@clerk/nextjs\"\n+ import { authMiddleware } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Clerk Client in Service Worker\nDESCRIPTION: Example of using the createClerkClient method to handle background tasks in a Chrome extension. This code shows how to create a Clerk instance in a service worker, get a fresh token, and respond to messages from content scripts.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/chrome-extension/background';\n\n// Create a new Clerk instance and get a fresh token for the user\nasync function getToken() {\n  const clerk = await createClerkClient({\n    publishableKey: process.env.PLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY,\n  });\n  return await clerk.session?.getToken();\n}\n\n// Create a listener to listen for messages from content scripts\n// NOTE: A runtime listener cannot be async.\n//       It must return true, in order to keep the connection open and send a response later.\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // You can use the token in the listener to perform actions on behalf of the user\n  // OR send the token back to the content script\n  getToken().then(token => sendResponse({ token }));\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Clock Skew Option Name in Clerk JavaScript SDK\nDESCRIPTION: This snippet demonstrates the renaming of 'clockSkewInSeconds' to 'clockSkewInMs' in various Clerk authentication functions. The change affects verifyJwt, verifyToken, and Clerk.authenticateRequest. The value remains the same, only the option name is updated.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/clockskewinseconds.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyJwt({\n  clockSkewInMs: // value in milliseconds\n})\n\nverifyToken({\n  clockSkewInMs: // value in milliseconds\n})\n\nClerk.authenticateRequest({\n  clockSkewInMs: // value in milliseconds\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom User Profile Pages with UserButton and Outlet - Clerk React - TSX\nDESCRIPTION: Shows how to use the experimental asProvider prop and nested UserButton.Page and Outlet subcomponents in Clerk's React SDK. The UserButton is configured to delay rendering until the Outlet is mounted and includes custom pages as children, which can display any React element. Requires Clerk's React library, and is useful for managing user profile routing within customized UI flows. Props like afterSignOutUrl and __experimental_asStandalone allow advanced navigation and UI composition.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\n<UserButton\n  __experimental_asProvider\n  afterSignOutUrl='/'\n>\n  <UserButton.UserProfilePage\n    label='Custom Page'\n    url='/custom-page'\n  >\n    <h1> This is my page available to all children </h1>\n  </UserButton.UserProfilePage>\n  <UserButton.__experimental_Outlet __experimental_asStandalone />\n</UserButton>\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Detecting Deprecated SIGN_IN_URL Import\nDESCRIPTION: This regular expression is used internally to identify imports of the deprecated `SIGN_IN_URL` constant from the `@clerk/nextjs` package within codebases. It helps locate code that needs updating to use the `NEXT_PUBLIC_CLERK_SIGN_IN_URL` environment variable instead. The associated `matcherFlags: 'm'` enables multi-line matching.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-sign-in-url.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nimport\\s+{[^}]*?SIGN_IN_URL[\\s\\S]*?from\\s+['\"]@clerk\\/nextjs[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Handling Passkey Authentication Errors in TypeScript\nDESCRIPTION: Shows how to implement error handling for passkey authentication using Clerk's error codes. This example demonstrates how to catch and handle specific passkey-related errors using the isClerkRuntimeError helper.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in Express\nDESCRIPTION: Code snippet showing how to load environment variables using dotenv in an Express application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'dotenv/config';\n\n// Rest of application\n```\n\n----------------------------------------\n\nTITLE: Authenticating With Passkey Using Stable Clerk API - Clerk SDK - TypeScript\nDESCRIPTION: This snippet shows the stable approach for passkey authentication using the `clerk.client.signIn.authenticateWithPasskey` method. It uses a try-catch block and conditional type-checking with `isClerkRuntimeError` to handle Clerk-specific error codes, highlighting how to detect a 'passkey_operation_aborted' error. This depends on Clerk 2.x+ with stable passkey API, and expects the `clerk` object and necessary arguments. Outputs are the authentication result or error-specific logic.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n  await clerk.client.signIn.authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing UserProfile in React\nDESCRIPTION: Example of how to customize the UserProfile component in React by adding custom pages and external links.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<UserProfile>\n  <UserProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </UserProfile.Page>\n  <UserProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <UserProfile.Page label='account' />\n  <UserProfile.Page label='security' />\n</UserProfile>\n```\n\n----------------------------------------\n\nTITLE: Fixing TokenVerificationError Import Path in @clerk/backend (JavaScript/TypeScript)\nDESCRIPTION: This code diff demonstrates the required update for importing `TokenVerificationError`. The old import path `\"@clerk/backend\"` is removed, and the new path `\"@clerk/backend/errors\"` is added. This change is necessary as the error class has been relocated within the package structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/tokenverificationerror-import-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { TokenVerificationError } from \"@clerk/backend\"\n+ import { TokenVerificationError } from \"@clerk/backend/errors\"\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Organization Invitations\nDESCRIPTION: Shows how to use the new Organization.getInvitations method to fetch organization invitations, which replaces the deprecated getPendingInvitations method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nOrganization.getInvitations()\n```\n\n----------------------------------------\n\nTITLE: Handling Clerk API Errors in Vue Component\nDESCRIPTION: This snippet demonstrates how to use the isClerkAPIResponseError utility to safely handle Clerk API errors in a Vue component using the Composition API. It shows error handling in a sign-in form submission.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useSignIn } from '@clerk/vue';\nimport { isClerkAPIResponseError } from '@clerk/vue/errors';\n\n// ... form state refs and other setup ...\nconst { signIn } = useSignIn();\n\nconst handleSubmit = async () => {\n  try {\n    const signInAttempt = await signIn.value.create({\n      identifier: email.value,\n      password: password.value,\n    });\n    // ... handle successful sign in ...\n  } catch (err) {\n    // Type guard to safely handle Clerk API errors\n    if (isClerkAPIResponseError(err)) {\n      errors.value = err.errors; // err.errors is properly typed as ClerkAPIError[]\n    }\n  }\n};\n</script>\n\n<template>\n  <!-- Form template here -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Import in Node.js SDK\nDESCRIPTION: Demonstrates how to migrate from the deprecated default Clerk import to the new named createClerkClient import in the @clerk/clerk-sdk-node package. This change is required for proper functionality with newer versions of the SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/clerk-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Clerk from \"@clerk/clerk-sdk-node\"\n+ import { createClerkClient } from \"@clerk/clerk-sdk-node\"\n```\n\n----------------------------------------\n\nTITLE: Using getClerkInstance with Publishable Key\nDESCRIPTION: Example of creating a Clerk instance outside of React components by using getClerkInstance with a publishable key. This allows accessing Clerk functionality in non-React contexts.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider, getClerkInstance } from \"@clerk/expo\"\n\nconst clerkInstance = getClerkInstance({ publishableKey: 'xxxx' })\n\n// Always pass the `publishableKey` to `ClerkProvider`\n<ClerkProvider publishableKey={'xxxx'}>\n    ...\n</ClerkProvider>\n\n// Somewhere in your code, outside of React you can do\nconst token = await clerkInstance.session?.getToken();\nfetch('http://example.com/', {headers: {Authorization: token }})\n```\n\n----------------------------------------\n\nTITLE: Signing Out with Redirect in TypeScript\nDESCRIPTION: Demonstrates various ways to sign out a user with a redirect URL using Clerk components and methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.signOut({ redirectUrl: '/' })\n\n<SignOutButton redirectUrl='/' />\n// uses Clerk.signOut({ redirectUrl: '/' })\n<UserButton afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n<ClerkProvider afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n```\n\n----------------------------------------\n\nTITLE: Creating and Authenticating with Passkeys in Clerk Expo (TSX)\nDESCRIPTION: This snippet shows the API usage for passkey creation and authentication in Expo projects, which mirrors the web API. It uses the `useUser` hook to get the user object and call `user.createPasskey()` for creation. For authentication, it uses the `useSignIn` hook to get the `signIn` object and `setActive` function, calls `signIn.authenticateWithPasskey()`, and then activates the session.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n// passkey creation\nconst { user } = useUser();\n\nconst handleCreatePasskey = async () => {\n  if (!user) return;\n  try {\n    return await user.createPasskey();\n  } catch (e: any) {\n    // handle error\n  }\n};\n\n// passkey authentication\nconst { signIn, setActive } = useSignIn();\n\nconst handlePasskeySignIn = async () => {\n  try {\n    const signInResponse = await signIn.authenticateWithPasskey();\n    await setActive({ session: signInResponse.createdSessionId });\n  } catch (err: any) {\n    //handle error\n  }\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Updating isKnownError Import Path in Clerk SDK\nDESCRIPTION: This snippet demonstrates how to update the import path for isKnownError from @clerk/nextjs to @clerk/nextjs/errors. This change is required for the function to work correctly in newer versions of the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/isknownerror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isKnownError } from \"@clerk/nextjs\"\n+ import { isKnownError } from \"@clerk/nextjs/errors\"\n```\n\n----------------------------------------\n\nTITLE: Using Prefill Feature with Sign In Components\nDESCRIPTION: Shows how to use the initialValues option with SignIn and SignUp components to prefill form fields with provided values.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n<SignIn initialValues={...} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<SignUp initialValues={...} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<RedirectToSignin initialValues={...} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<RedirectToSignUp initialValues={...} />\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclerk.redirectToSignIn({ initialValues: {...} })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclerk.redirectToSignUp({ initialValues: {...} })\n```\n\n----------------------------------------\n\nTITLE: Migrating Organization Invitation Retrieval - Clerk JavaScript (diff)\nDESCRIPTION: This snippet shows the migration path from the deprecated Organization.getPendingInvitations() method to the new Organization.getInvitations({ status: 'pending' }) method in JavaScript. To modernize code and ensure compatibility with recent Clerk SDK versions, replace calls to the old method with the new one, passing an options object with the status set to 'pending'. The snippet is in unified diff format, which highlights the removal and addition of code lines required for the update.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getpendinginvitations.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- Organization.getPendingInvitations();\\n+ Organization.getInvitations({ status: 'pending' });\n```\n\n----------------------------------------\n\nTITLE: StorageCache Interface for WebSSO in Chrome Extensions\nDESCRIPTION: The updated interface for storageCache (formerly tokenCache) used in WebSSO implementation for Chrome extensions, providing methods for key creation, retrieval, removal, and storage of values.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ntype StorageCache = {\n  createKey: (...keys: string[]) => string;\n  get: <T = any>(key: string) => Promise<T>;\n  remove: (key: string) => Promise<void>;\n  set: (key: string, value: string) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using totalCount in Pagination Responses with Clerk Backend Client\nDESCRIPTION: Example demonstrating how to access the new totalCount property from paginated responses in the Clerk Backend client, which provides the total count of items beyond just the items returned in the current page.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\n\nconst clerkClient = Clerk({ secretKey: '...' });\n\n// current\nconst { data } = await clerkClient.organizations.getOrganizationList();\nconsole.log('totalCount: ', data.length);\n\n// new\nconst { data, totalCount } = await clerkClient.organizations.getOrganizationList();\nconsole.log('totalCount: ', totalCount);\n```\n\n----------------------------------------\n\nTITLE: Verifying Clerk Webhooks in Next.js\nDESCRIPTION: Example of how to use the verifyWebhook function in a Next.js API route to verify and process Clerk webhooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api/webhooks/route.ts\nimport { verifyWebhook } from '@clerk/nextjs/webhooks';\n\nexport async function POST(req: Request) {\n  try {\n    const evt = await verifyWebhook(req);\n\n    // Do something with payload\n    const { id } = evt.data;\n    const eventType = evt.type;\n    console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n    console.log('Webhook payload:', body);\n\n    return new Response('Webhook received', { status: 200 });\n  } catch (err) {\n    console.error('Error: Could not verify webhook:', err);\n    return new Response('Error: Verification error', {\n      status: 400,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Server getToken Throw Error on Missing Session\nDESCRIPTION: A bug fix that makes the server-side getToken function throw an error when called without a session, providing better error handling for both Next.js and Remix packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_77\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs,remix:** Make server getToken throw if called with no session ([f7736c1](https://github.com/clerk/javascript/commit/f7736c1f4730d713f3fbcedd73e2ef5a1ceee605))\n```\n\n----------------------------------------\n\nTITLE: Organization Changes\nDESCRIPTION: Fix to handle null organization values and emit organization changes to listeners\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_50\n\nLANGUAGE: markdown\nCODE:\n```\n- **clerk-js:** If organization is `null`, set the active org as null ([f7bff5c](https://github.com/clerk/javascript/commit/f7bff5c586a33e2b45258912924ab27b4ecf6da9))\n- **clerk-js:** Emit changes in organization to listeners ([798ee62](https://github.com/clerk/javascript/commit/798ee622e7961d3aa7f8842184f5fadbcfed517f))\n```\n\n----------------------------------------\n\nTITLE: Using `setActive` with Organization Parameter in Clerk JavaScript\nDESCRIPTION: This JavaScript code demonstrates using the `setActive` function to set both the active session and the active organization. The function accepts an options object where `session` and `organization` can be specified either by their ID strings or by their respective objects. An optional `beforeEmit` callback can also be provided.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/setsession.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait setActive({\n  session: 'sessionID',\n  organization: 'orgID',\n  beforeEmit: () => void\n})\n\nawait setActive({\n  session: sessionObj,\n  organization: orgObj,\n  beforeEmit: () => void\n})\n```\n\n----------------------------------------\n\nTITLE: Updating ClerkProvider Prop from tokenCache to storageCache in Diff\nDESCRIPTION: This diff snippet demonstrates the migration process for ClerkProvider properties: replacing the deprecated tokenCache prop with the expanded storageCache prop. Developers should update all instances in their codebase to follow this change, ensuring compatibility with future and current ClerkProvider versions. Both props are assumed to accept compatible cache provider objects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/chrome-extension/clerkprovider-tokencache.md#2025-04-22_snippet_1\n\nLANGUAGE: Diff\nCODE:\n```\n- <ClerkProvider tokenCache={/* ... */}>\n+ <ClerkProvider storageCache={/* ... */}>\n```\n\n----------------------------------------\n\nTITLE: Verifying Clerk Webhook in Fastify Route Handler\nDESCRIPTION: This code demonstrates how to use the verifyWebhook() function from the Fastify SDK to verify incoming Clerk webhook requests and process the payload.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyWebhook } from '@clerk/fastify/webhooks';\n\nfastify.post('/api/webhooks', async (request, reply) => {\n  try {\n    const evt = await verifyWebhook(request);\n\n    // Do something with payload\n    const { id } = evt.data;\n    const eventType = evt.type;\n    console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n    console.log('Webhook payload:', evt.data);\n\n    return reply.status(200).send('Webhook received');\n  } catch (err) {\n    console.log('Error: Could not verify webhook:', err);\n    return reply.status(400).send('Error: Verification error');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk `authMiddleware` Import in Next.js (JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates the updated import statement for the `authMiddleware` function from the `@clerk/nextjs` package. This replaces the previously used import from the deprecated `@clerk/nextjs/edge-middleware` path. Users should replace their old import statements with this one when upgrading their Clerk Next.js integration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-nextjs-edge-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { authMiddleware } from @clerk/nextjs\n```\n\n----------------------------------------\n\nTITLE: Handling Passkey Authentication Errors\nDESCRIPTION: Example of how to handle errors when authenticating with a passkey using ClerkRuntimeError.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n} catch (e) {\n  if (isClerkRuntimeError(e)) {\n    if (err.code === 'passkey_operation_aborted') {\n      // Handle error\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding joinWaitlist() Method to Clerk Singleton (JavaScript/TypeScript)\nDESCRIPTION: Adds a new method `joinWaitlist()` to the Clerk singleton object (likely `window.Clerk` or an imported instance). This method allows programmatic submission of an email address to the waitlist.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\njoinWaitlist()\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Agent Toolkit with Langchain\nDESCRIPTION: Example of integrating Clerk Agent Toolkit with Langchain in a TypeScript environment.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkToolkit } from '@clerk/agent-toolkit/langchain';\nimport { ChatOpenAI } from '@langchain/openai';\nimport { auth } from '@clerk/nextjs/server';\nimport { HumanMessage, SystemMessage } from '@langchain/core/messages';\nimport { LangChainAdapter } from 'ai';\nimport { systemPrompt } from '@/lib/ai/prompts';\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { prompt } = await req.json();\n  const authContext = await auth.protect();\n\n  const toolkit = await createClerkToolkit({ authContext });\n\n  const model = new ChatOpenAI({ model: 'gpt-4o', temperature: 0 });\n\n  const modelWithTools = model.bindTools(toolkit.users());\n\n  const messages = [new SystemMessage(toolkit.injectSessionClaims(systemPrompt)), new HumanMessage(prompt)];\n  const aiMessage = await modelWithTools.invoke(messages);\n  messages.push(aiMessage);\n\n  for (const toolCall of aiMessage.tool_calls || []) {\n    const selectedTool = toolkit.toolMap()[toolCall.name];\n    const toolMessage = await selectedTool.invoke(toolCall);\n    messages.push(toolMessage);\n  }\n\n  const stream = await modelWithTools.stream(messages);\n  return LangChainAdapter.toDataStreamResponse(stream);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from setClerkHttpOptions to createClerkClient in JavaScript\nDESCRIPTION: Shows how to update code by replacing the deprecated `setClerkHttpOptions` method with passing options directly to `createClerkClient`. This follows Clerk's updated pattern for configuring the client with HTTP options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/setclerkhttpoptions.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { clerkClient, setClerkApiKey } from '@clerk/clerk-sdk-node';\n\n- const clerkClient = createClerkClient({ apiKey: '...' });\n- setClerkHttpOptions('...');\n\n+ const clerkClient = createClerkClient({ secretKey: '...', httpOptions: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Object Properties in Backend and Framework Integrations\nDESCRIPTION: Changes to the auth object properties returned by various Clerk functions across backend and framework integrations. The properties 'user', 'organization', and 'session' are replaced with 'userId', 'organizationId', and 'sessionId' in the signed-out state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n    // Backend\n    import { createClerkClient } from '@clerk/backend';\n\n    const clerkClient = createClerkClient({...});\n    const requestState = clerkClient.authenticateRequest(request, {...});\n\n    - const { user, organization, session } = requestState.toAuth();\n    + const { userId, organizationId, sessionId } = requestState.toAuth();\n\n    // Remix\n    import { getAuth } from '@clerk/remix/ssr.server';\n\n    - const { user, organization, session } = await getAuth(args);\n    + const { userId, organizationId, sessionId } = await getAuth(args);\n\n    // or\n    rootAuthLoader(\n        args,\n        ({ request }) => {\n            - const { user, organization, session } = request.auth;\n            + const { userId, organizationId, sessionId } = request.auth;\n            // ...\n        },\n        { loadUser: true },\n    );\n\n    // NextJS\n    import { getAuth } from '@clerk/nextjs/server';\n\n    - const { user, organization, session } = getAuth(args);\n    + const { userId, organizationId, sessionId } = getAuth(req, opts);\n\n    // Gatsby\n    import { withServerAuth } from 'gatsby-plugin-clerk';\n\n    export const getServerData: GetServerData<any> = withServerAuth(\n        async props => {\n            - const { user, organization, session } =  props;\n            + const { userId, organizationId, sessionId } = props;\n            return { props: { data: '1', auth: props.auth, userId, organizationId, sessionId } };\n        },\n        { loadUser: true },\n    );\n```\n\n----------------------------------------\n\nTITLE: Introducing 'waitlist' Sign Up Mode (Configuration)\nDESCRIPTION: Introduces a new sign-up mode string literal `'waitlist'`. When the `<SignIn />` component's mode is set to `waitlist`, it prompts users to 'Join waitlist' instead of the standard sign-in/sign-up flow. The `<SignUp />` component text is also adjusted accordingly.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n'waitlist'\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Components in Expo Web\nDESCRIPTION: Example of importing and using Clerk's SignUp component in an Expo Web application. This functionality became available in version 2.0.0 which added support for Expo Web.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignUp } from '@clerk/clerk-expo/web';\n\nexport default function Page() {\n  return <SignUp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Profile with Re-verification in React\nDESCRIPTION: Example of using the useReverification hook to fetch data with re-verification support in a React component. It demonstrates error handling, including cancellation errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReverification } from '@clerk/clerk-react';\nimport { isReverificationCancelledError } from '@clerk/clerk-react/error';\n\ntype MyData = {\n  balance: number;\n};\n\nexport function MyButton() {\n  const fetchMyData = () => fetch('/api/balance').then(res => res.json() as Promise<MyData>);\n  const enhancedFetcher = useReverification(fetchMyData);\n\n  const handleClick = async () => {\n    try {\n      const myData = await enhancedFetcher();\n      //     ^ is typed as `MyData`\n    } catch (e) {\n      // Handle error returned from the fetcher here\n      // You can also handle cancellation with the following\n      if (isReverificationCancelledError(err)) {\n        // Handle the cancellation error here\n      }\n    }\n  };\n\n  return <button onClick={handleClick}>Update User</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Import for Server-Side Usage (Diff)\nDESCRIPTION: This diff illustrates the required change to update the Clerk import path. The old import `import { Clerk } from \"@clerk/nextjs\"` is replaced with the new server-specific import `import { createClerkClient } from \"@clerk/nextjs/server\"` as part of the v5 changes. This ensures the helper is only used on the server side.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/clerk-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { Clerk } from \"@clerk/nextjs\"\n+ import { createClerkClient } from \"@clerk/nextjs/server\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using ClerkFailed and ClerkLoaded Components in React\nDESCRIPTION: Example showing how to use the ClerkFailed component to display a fallback UI when Clerk fails to load, and ClerkLoaded for the normal UI when Clerk loads successfully.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkLoaded>\n  <MyCustomSignInForm/>\n</ClerkLoaded>\n<ClerkFailed>\n  <ContactSupportBanner/>\n</ClerkFailed>\n```\n\n----------------------------------------\n\nTITLE: Updated Clerk Middleware Authentication\nDESCRIPTION: Shows the simplified middleware authentication pattern where explicit return is no longer needed for redirectToSignIn().\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    return auth().redirectToSignIn()\n  }\n})\n\n// After\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    auth().redirectToSignIn()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Return Value Changes\nDESCRIPTION: Updates to JWT helper functions return values to match backend API client format for consistency.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\nimport { signJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await signJwt(...);\n+ const { data, errors: [error] = [] } = await signJwt(...);\n```\n\nLANGUAGE: diff\nCODE:\n```\nimport { verifyJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await verifyJwt(...);\n+ const { data, errors: [error] = [] } = await verifyJwt(...);\n```\n\nLANGUAGE: diff\nCODE:\n```\nimport { hasValidSignature } from '@clerk/backend/jwt';\n\n- const { data, error } = await hasValidSignature(...);\n+ const { data, errors: [error] = [] } = await hasValidSignature(...);\n```\n\nLANGUAGE: diff\nCODE:\n```\nimport { decodeJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await decodeJwt(...);\n+ const { data, errors: [error] = [] } = await decodeJwt(...);\n```\n\nLANGUAGE: diff\nCODE:\n```\nimport { verifyToken } from '@clerk/backend';\n\n- const { data, error } = await verifyToken(...);\n+ const { data, errors: [error] = [] } = await verifyToken(...);\n```\n\n----------------------------------------\n\nTITLE: Authentication Redirect in NextJS Layout\nDESCRIPTION: Demonstrates how to implement authentication redirect in a NextJS layout component using the auth() helper.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@clerk/nextjs/server';\n\nexport const Layout = ({ children }) => {\n  const { userId } = auth();\n\n  if (!userId) {\n    return auth().redirectToSignIn();\n  }\n\n  return <>{children}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Pagination Arguments in Clerk's getClientList Function (JavaScript)\nDESCRIPTION: This snippet shows the changes made to the pagination arguments in the Clerk JavaScript SDK's getClientList function. The 'limit' parameter has been renamed to 'pageSize', and 'offset' has been renamed to 'initialPage'. These changes aim to improve clarity and simplify pagination control.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/getclientlist-arguments.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await clients.getClientList({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n\n----------------------------------------\n\nTITLE: Migrating isEmailLinkError Import Path in Clerk React (diff)\nDESCRIPTION: This diff demonstrates the required change to import the isEmailLinkError function from '@clerk/clerk-react/errors' instead of the previous '@clerk/clerk-react' module. No additional dependencies are required besides the Clerk React package. Replace the old import statement as shown, ensuring the updated path to avoid import errors. The input is the JavaScript import statement, and the output is the modified import statement; no further adjustments needed.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/isemaillinkerror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isEmailLinkError } from \"@clerk/clerk-react\"\n+ import { isEmailLinkError } from \"@clerk/clerk-react/errors\"\n```\n\n----------------------------------------\n\nTITLE: Customizing UserButton Menu Items in JSX/React\nDESCRIPTION: Provides an example of customizing the Clerk `<UserButton>` component by adding custom menu items. It uses `<UserButton.MenuItems>` to wrap custom actions and links, `<UserButton.Link>` for navigation, and `<UserButton.Action>` for triggering custom page navigation within UserProfile or custom JavaScript functions via `onClick`. It also demonstrates reordering built-in actions like `manageAccount`. Requires the `@clerk/clerk-react` package and relevant components/hooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<UserButton>\n  <UserButton.MenuItems>\n    <UserButton.Link\n      label='Terms'\n      labelIcon={<Icon />}\n      href='/terms'\n    />\n    <UserButton.Action\n      label='Help'\n      labelIcon={<Icon />}\n      open='help'\n    />{' '}\n    // Navigate to `/help` page when UserProfile opens as a modal. (Requires a custom page to have been set in\n    `/help`)\n    <UserButton.Action\n      label='manageAccount'\n      labelIcon={<Icon />}\n    />\n    <UserButton.Action\n      label='Chat Modal'\n      labelIcon={<Icon />}\n      onClick={() => setModal(true)}\n    />\n  </UserButton.MenuItems>\n</UserButton>\n```\n\n----------------------------------------\n\nTITLE: Updating SignOutButton Component in React\nDESCRIPTION: Demonstrates the migration from using the signOutCallback prop to the new redirectUrl prop on the SignOutButton component. This change aligns the API surface with other UI components provided by @clerk/clerk-react.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignOutButton } from '@clerk/clerk-react';\n\nexport const Signout = () => {\n  return (\n    <SignOutButton\n      signOutCallback={() => {\n        window.location.href = '/your-path';\n      }}\n    >\n      <button>Sign Out</button>\n    </SignOutButton>\n  );\n};\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SignOutButton } from '@clerk/clerk-react';\n\nexport const Signout = () => {\n  return (\n    <SignOutButton redirectUrl='/your-path'>\n      <button>Sign Out</button>\n    </SignOutButton>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Organization Pages with OrganizationSwitcher and Outlet - Clerk React - TSX\nDESCRIPTION: Illustrates the use of the OrganizationSwitcher component with asProvider and Outlet/OrganizationProfilePage subcomponents for custom organization profile flows in Clerk's React SDK. The OrganizationSwitcher delays rendering until its Outlet mounts, and nested OrganizationProfilePages define custom navigation. The __experimental_asStandalone prop on Outlet enables standalone UI rendering. Dependencies include Clerk's React component library; input props allow customization of navigation and layout for organization management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\n<OrganizationSwitcher\n  __experimental_asProvider\n  afterSignOutUrl='/'\n>\n  <OrganizationSwitcher.OrganizationProfilePage\n    label='Custom Page'\n    url='/custom-page'\n  >\n    <h1> This is my page available to all children </h1>\n  </OrganizationSwitcher.OrganizationProfilePage>\n  <OrganizationSwitcher.__experimental_Outlet __experimental_asStandalone />\n</OrganizationSwitcher>\n```\n\n----------------------------------------\n\nTITLE: Initializing ClerkProvider with Experimental Passkeys in Expo (TypeScript)\nDESCRIPTION: Demonstrates how to enable experimental passkey support in a Clerk Expo application by importing the `passkeys` object from `@clerk/clerk-expo/passkeys` and passing it to the `__experimental_passkeys` prop of the `ClerkProvider` component. This setup is necessary to utilize passkey functionality within the Expo environment.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\nimport { ClerkProvider } from '@clerk/clerk-expo';\nimport { passkeys } from '@clerk/clerk-expo/passkeys';\n\n<ClerkProvider __experimental_passkeys={passkeys}>{/* Your app here */}</ClerkProvider>;\n```\n```\n\n----------------------------------------\n\nTITLE: Using `asChild` with Clerk's Astro SignInButton\nDESCRIPTION: Demonstrates how to use the `asChild` prop with the `@clerk/components/astro` `SignInButton` component. This allows wrapping a custom child element (e.g., a `<button>`) which will inherit the functionality of the `SignInButton`, enabling unstyled or custom-styled trigger elements for the sign-in action. This feature was introduced in patch change #4122.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { SignInButton } from '@clerk/components/astro'\n---\n\n<SignInButton asChild>\n  <button>Sign in with Clerk</button>\n</SignInButton>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Test Application with Playwright\nDESCRIPTION: Demonstrates the typical lifecycle of setting up a test application using the `Application` model within a Playwright test suite. It covers cloning a preset config (`appConfigs.react.vite`), adding files, running setup scripts (`app.setup`), setting environment variables (`app.withEnv`), starting the development server (`app.dev`), and cleaning up afterwards (`app.teardown`).\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { expect, test } from '@playwright/test';\n\nimport type { Application } from '../models/application';\nimport { appConfigs } from '../presets';\n\ntest.describe('Your test', () => {\n  test.describe.configure({ mode: 'parallel' });\n  let app: Application;\n\n  test.beforeAll(async () => {\n    app = await appConfigs.react.vite\n      .clone()\n      .addFile(\n        'src/metadata.ts',\n        () => `export const metadata = {\n  name: 'Hello World',\n}`,\n      )\n      .commit();\n\n    // Run the 'setup' npm script and do other setup stuff\n    await app.setup();\n    // Set the environment variables\n    await app.withEnv(appConfigs.envs.withEmailCodes);\n    // Start the development server through the 'dev' npm script\n    await app.dev();\n  });\n\n  test.afterAll(async () => {\n    // Remove the temporary test folder and any temporary artifacts\n    await app.teardown();\n  });\n\n  test('your tests', async ({ page }) => {\n    // TODO\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating from setClerkServerApiUrl to createClerkClient options in JavaScript\nDESCRIPTION: This code shows how to migrate from the deprecated setClerkServerApiUrl function to the new pattern of passing configuration options directly to createClerkClient. The serverApiURL option should be passed as part of the configuration object to createClerkClient instead of using the separate setter function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/setclerkserverapiurl.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { clerkClient, setClerkApiKey } from '@clerk/clerk-sdk-node';\n\n- const clerkClient = createClerkClient({ apiKey: '...' });\n- setClerkServerApiUrl('...');\n\n+ const clerkClient = createClerkClient({\n+ \tsecretKey: '...',\n+ \tserverApiURL: '...',\n+ });\n```\n\n----------------------------------------\n\nTITLE: Updating Backend API Request Response Handling\nDESCRIPTION: Changes to the response payload of Backend API requests to return { data, errors } instead of returning data and throwing on error. This snippet demonstrates how to maintain the same error-throwing behavior with the new format.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { users } from '@clerk/backend';\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst { data, errors, clerkTraceId, status, statusText } = await users.getUser('user_deadbeef');\nif (errors) {\n  throw new ClerkAPIResponseError(statusText, {\n    data: errors,\n    status,\n    clerkTraceId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk/Next.js `auth` Import Path (Diff)\nDESCRIPTION: This diff snippet illustrates the required update for importing the `auth` helper in Clerk/Next.js applications. The path changes from `@clerk/nextjs` to `@clerk/nextjs/server` to correctly scope it as a server-side utility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/auth-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { auth } from \"@clerk/nextjs\"\n+ import { auth } from \"@clerk/nextjs/server\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Clerk Backend Resource Types Only - TypeScript\nDESCRIPTION: Demonstrates the continued usage of specific resource-related types (Organization, Session, User, WebhookEvent, WebhookEventType) from the '@clerk/backend' module after deprecating other class imports. This supplies type safety for backend workflows involving Clerk resources, and is intended for TypeScript type-checking only. Dependencies: TypeScript, Node.js (>=18.18.0), and '@clerk/backend'.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Configuring ClerkProvider to Disable Development Warnings in TSX\nDESCRIPTION: This snippet shows how to configure ClerkProvider to disable development mode warnings by setting the 'unsafe_disableDevelopmentModeWarnings' layout appearance prop.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkProvider\n  appearance={{\n    layout: {\n      unsafe_disableDevelopmentModeWarnings: true,\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: GoogleOneTap React Component Example\nDESCRIPTION: Example showing how to customize the GoogleOneTap authentication prompt with various configuration options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing Client-Only Availability of isClerkAPIError\nDESCRIPTION: Addresses an issue where the `isClerkAPIError` type guard function was previously only available in the client-side bundle. This fix ensures the function is accessible in server-side contexts as well.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nisClerkAPIError\n```\n\n----------------------------------------\n\nTITLE: Migrating ClerkProvider `navigate` Prop to `routerPush`/`routerReplace` (Diff)\nDESCRIPTION: This diff demonstrates how to replace the deprecated `navigate` prop on `ClerkProvider` with the new `routerPush` and `routerReplace` props. Passing the same navigation function (here, an identity function `x => x`) to both new props ensures identical behavior to the previous `navigate` implementation, effectively only performing push navigations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/navigate-to-routerpush-routerreplace.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <ClerkProvider navigate={ x => x } />\n+ <ClerkProvider routerPush={ x => x } routerReplace={ x => x } />\n```\n\n----------------------------------------\n\nTITLE: Configuring ClerkProvider for Passkey Support in Expo using TypeScript\nDESCRIPTION: This TypeScript React snippet demonstrates how to initialize the ClerkProvider component within an Expo project to enable experimental passkey authentication by passing the passkeys object from @clerk/clerk-expo/passkeys to the __experimental_passkeys prop. Dependencies include @clerk/clerk-expo and @clerk/clerk-expo/passkeys. The provider should wrap the application root to ensure authentication context is available throughout the app. Input consists of configuration objects; output is the provisioned authentication context. Only works in Expo environments with compatible Clerk SDK versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ClerkProvider } from '@clerk/clerk-expo';\\nimport { passkeys } from '@clerk/clerk-expo/passkeys';\\n\\n<ClerkProvider __experimental_passkeys={passkeys}>{/* Your app here */}</ClerkProvider>;\n```\n\n----------------------------------------\n\nTITLE: Using getAuth in TanStack Start Server Functions\nDESCRIPTION: Example of how to use the newly introduced `getAuth` function in server functions created with TanStack Start. This snippet demonstrates how to fetch the current user's authentication status and use the userId for authorization checks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAuth } from '@clerk/tanstack-start/server'\nimport { createServerFn } from '@tanstack/start'\n\n\nexport const fetchCurrentUserPosts = createServerFn('GET', async (_payload, ctx) => {\n  const { userId } = await getAuth(ctx)\n\n  if (!userId) {\n    ...\n  }\n\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Migration from Navigate Component to Action Component - jsx\nDESCRIPTION: These JSX migration examples illustrate the removal of the <Navigate> component and the introduction of <Action> for navigation purposes. The code shows how to update codebases from <Navigate to=\"previous\"> to <Action navigate=\"previous\">. No additional dependencies are required, but use of the new <Action> API is mandatory for navigating between steps in authentication flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Navigate to=\"previous\">Go back</Navigate>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Action navigate=\"previous\">Go back</Action>\n```\n\n----------------------------------------\n\nTITLE: Creating WithSession Component with Clerk React Hooks - JavaScript\nDESCRIPTION: This snippet re-implements the deprecated WithSession higher-order component using Clerk's useSession hook in JavaScript. It defines a functional component that retrieves the current session and passes it to its children prop, which must be a function. The snippet requires that useSession is available from Clerk's React library, and it throws an error if children is not a function. Inputs: children (a function expecting session). Output: children rendered with session as its argument. This component assumes you are using Clerk for authentication in a React application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withsession-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WithSession = ({ children }) => {\n  const session = useSession();\n  if (typeof children !== 'function') throw new Error();\n\n  return {children(session)};\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing the `Organization` Object (JavaScript)\nDESCRIPTION: This refers to the `Organization` object type provided by the Clerk JavaScript SDK, as linked in the documentation. The property renaming change (`logoUrl` -> `imageUrl`) applies to instances of this object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-logourl.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nOrganization\n```\n\n----------------------------------------\n\nTITLE: Migrating currentUser Import Path in Clerk Next.js (diff)\nDESCRIPTION: Shows how to update the import path for the currentUser helper from @clerk/nextjs to @clerk/nextjs/server. This change is necessary because currentUser should only be used on the server; importing from the wrong location may cause runtime errors or incorrect execution context. No additional dependencies are required beyond Clerk and a server-side Next.js environment. Input is the import statement, and output is the corrected import path for server usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/currentuser-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { currentUser } from \"@clerk/nextjs\"\n+ import { currentUser } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Querying Organization Memberships using useOrganization - JavaScript\nDESCRIPTION: These snippets demonstrate how to transition from the deprecated 'membershipList' parameter to the updated 'memberships' parameter with the useOrganization React hook from Clerk. The 'memberships' parameter allows initialization with pagination controls such as 'initialPage' and 'pageSize', or can be set to true to retrieve all memberships. The returned object destructures 'memberships' for consumption in the component. Requires the '@clerk/nextjs' or '@clerk/clerk-react' package and a configured Clerk provider.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/useorganization-membershiplist.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// before\nconst { membershipList } = useOrganization({\n  membershipList: { limit: 10, offset: 1 },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// after\nconst { memberships } = useOrganization({\n  memberships: {\n    initialPage: 1,\n    pageSize: 10,\n  },\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// you can also simply return all memberships\nconst { memberships } = useOrganization({ memberships: true });\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Helpers using Clerk Backend Internal - TypeScript\nDESCRIPTION: Demonstrates how to import specific authentication helpers and enums from the new '@clerk/backend/internal' path following a breaking API change. This update requires developers to replace earlier top-level Clerk imports with granular imports for improved encapsulation. The snippet requires a working Node.js environment (>=18.18.0) with Clerk dependencies installed. No user-facing parameters are involved; all exports are for backend and server-side usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthStatus,\n  buildRequestUrl,\n  constants,\n  createAuthenticateRequest,\n  createIsomorphicRequest,\n  debugRequestState,\n  makeAuthObjectSerializable,\n  prunePrivateMetadata,\n  redirect,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Replacing frontendApi with publishableKey in rootAuthLoader for Clerk Remix Integration\nDESCRIPTION: This code snippet demonstrates how to update your Clerk integration in a Remix project by changing the deprecated 'frontendApi' parameter to the new 'publishableKey' parameter when calling the rootAuthLoader function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/rootauthloader-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { rootAuthLoader } from '@clerk/remix/ssr.server';\n\n- export const loader = args => rootAuthLoader(args, { frontendApi: '...' });\n+ export const loader = args => rootAuthLoader(args, { publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Google One Tap React Component Usage\nDESCRIPTION: Example showing how to customize the Google One Tap UX prompt using Clerk's React component with various configuration options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: tsx\nCODE:\n```\n<GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Client Initialization Parameter\nDESCRIPTION: Shows the required change to migrate from using apiKey to secretKey when initializing the Clerk client. The code demonstrates how to properly initialize the Clerk client using the createClerkClient function with the new parameter name.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/createclerkclient-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/remix/api.server';\n\n- createClerkClient({ apiKey: '...' });\n+ createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating decodeJwt Import Path in JavaScript\nDESCRIPTION: This code snippet shows how to update the import statement for the decodeJwt function from the Clerk backend. The old import path @clerk/backend is replaced with the new path @clerk/backend/tokens.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/decodejwt-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { decodeJwt } from \"@clerk/backend\"\n+ import { decodeJwt } from \"@clerk/backend/tokens\"\n```\n\n----------------------------------------\n\nTITLE: Using Alternative Redirect Methods `redirectToAfterSignUp`/`redirectAfterSignIn` in JavaScript\nDESCRIPTION: Provides the alternative methods `window.Clerk.redirectToAfterSignUp()` and `window.Clerk.redirectAfterSignIn()` to replace the removed `Clerk.redirectToHome()`. These methods should be used for programmatic redirection after sign-up or sign-in respectively, based on configured URLs (`afterSignUpUrl`, `afterSignInUrl`). Requires the Clerk JS SDK to be loaded via `window.Clerk`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/redirecttohome.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Clerk.redirectToAfterSignUp()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.Clerk.redirectAfterSignIn()\n```\n\n----------------------------------------\n\nTITLE: Renaming afterSwitchOrganizationUrl Prop in Clerk OrganizationSwitcher - diff\nDESCRIPTION: This code diff demonstrates the replacement of the deprecated 'afterSwitchOrganizationUrl' prop with 'afterSelectOrganizationUrl' in the <OrganizationSwitcher /> component. The change requires no additional dependencies other than Clerk's JavaScript SDK and aims to ensure correctness of post-selection navigation behavior. The diff should be applied directly to components using the affected prop to avoid warnings or errors after updating Clerk.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/afterswitchorganizationurl.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <OrganizationSwitcher afterSwitchOrganizationUrl='...' />\\n+ <OrganizationSwitcher afterSelectOrganizationUrl='...' />\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Protect Component with Server Islands in Astro\nDESCRIPTION: Illustrates how to use the Clerk Protect component with Astro's server islands, including both fallback and protect-fallback slots.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n<Protect server:defer role=\"admin\">\n  <p slot=\"fallback\">Loading...</p>\n  <p slot=\"protect-fallback\">Not an admin</p>\n  <p>You're an admin</p>\n</Protect>\n```\n\n----------------------------------------\n\nTITLE: Enabling Organization Creation for a User with Clerk Backend Client\nDESCRIPTION: Demonstrates how to update a user's ability to create organizations using the updateUser method from the Clerk Backend client. This allows administrators to control which users can create new organizations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient }  from '@clerk/backend';\n\nconst clerkClient = createClerkClient({...});\nawait clerkClient.users.updateUser('user_...', { createOrganizationEnabled: true })\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Passkey Authentication Error Handling in TypeScript\nDESCRIPTION: Example showing how to handle passkey authentication errors with the ClerkRuntimeError system. This pattern allows detecting specific error conditions like when a passkey operation is aborted.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Subscription Details Method in React\nDESCRIPTION: Example showing how to use the experimental method for opening the SubscriptionDetails component in a Clerk application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nclerk.__experimental_openSubscriptionDetails(...)\n```\n\n----------------------------------------\n\nTITLE: Path-based Routing Examples in JSX\nDESCRIPTION: Examples showing valid and invalid routing configurations for Clerk components after making path-based routing the default strategy when path prop is provided.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n// Without path or routing props, an error with be thrown\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// Alternative #1\n<UserProfile path=\"/whatever\"/>\n<CreateOrganization path=\"/whatever\"/>\n<OrganizationProfile path=\"/whatever\"/>\n<SignIn path=\"/whatever\"/>\n<SignUp path=\"/whatever\"/>\n\n// Alternative #2\n<UserProfile routing=\"hash_or_virtual\"/>\n<CreateOrganization routing=\"hash_or_virtual\"/>\n<OrganizationProfile routing=\"hash_or_virtual\"/>\n<SignIn routing=\"hash_or_virtual\"/>\n<SignUp routing=\"hash_or_virtual\"/>\n```\n\n----------------------------------------\n\nTITLE: Adapting to the New `Users.getUserList` Return Signature (Diff)\nDESCRIPTION: This code diff demonstrates the change required when calling `clerkClient.users.getUserList`. Previously, it returned the data array directly. Now, it returns an object containing both the `data` array and the `totalCount` number, necessitating destructuring to access the user list and the total count.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getuserlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const data = await clerkClient.users.getUserList()\n+ const { data, totalCount } = await clerkClient.users.getUserList()\n```\n```\n\n----------------------------------------\n\nTITLE: Introducing organizationSyncOptions in clerkMiddleware\nDESCRIPTION: Introduces the `organizationSyncOptions` option for the `clerkMiddleware`. This feature enables the synchronization of an active organization or personal account from the current URL directly into the Clerk session state during middleware processing.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage within clerkMiddleware options:\nclerkMiddleware({\n  // ... other options\n  organizationSyncOptions: {\n    organizationPatterns: ['/org/:orgId(.*)'],\n    personalAccountPatterns: ['/user/(.*)']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating from frontendApi to publishableKey in ClerkExpressRequireAuth\nDESCRIPTION: Updates the ClerkExpressRequireAuth function call to use the 'publishableKey' parameter instead of the deprecated 'frontendApi' parameter. Both the parameter name and its value need to be updated as they are different. The publishable key can be found in the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/clerkexpressrequireauth-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { ClerkExpressRequireAuth } from '@clerk/clerk-sdk-node';\n\n- ClerkExpressRequireAuth({ frontendApi: '...' });\n+ ClerkExpressRequireAuth({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Replacing Submit Component with Action for Login - jsx\nDESCRIPTION: This JSX snippet demonstrates replacing the deprecated <Submit> component in login forms with the <Action submit> alternative. After the breaking change, <Action submit> is the standard for triggering form submission. The code revision is straightforward and assumes Clerk Elements is set up in the host React application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Action submit>Log in</Action>\n```\n\n----------------------------------------\n\nTITLE: Comparing auth().redirectToSignIn() Implementation Examples in Middleware\nDESCRIPTION: Shows how the auth().redirectToSignIn() helper has been simplified in the middleware. The updated version no longer requires explicitly returning the function call.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    return auth().redirectToSignIn()\n  }\n})\n\n// After\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    auth().redirectToSignIn()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing frontendApi with publishableKey in ClerkProvider (JSX)\nDESCRIPTION: This code diff demonstrates how to update the ClerkProvider component usage. The deprecated 'frontendApi' prop is removed and replaced with the 'publishableKey' prop. The value passed to 'publishableKey' must be a valid publishable key obtained from the Clerk dashboard, replacing the old frontend API key.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/expo/clerkprovider-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nimport { ClerkProvider } from '@clerk/clerk-expo';\n\n- <ClerkProvider frontendApi='...' />\n+ <ClerkProvider publishableKey='...' />\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Sign-In Button in Next.js\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button using Clerk authentication in a Next.js application. It utilizes the useClerk hook from the @clerk/nextjs package to handle the sign-in process.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/docs/use-clerk.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useClerk } from '@clerk/nextjs';\n\nexport default function HomePage() {\n  const clerk = useClerk();\n\n  return <button onClick={() => clerk.openSignIn({})}>Sign in</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pagination Arguments in Clerk JavaScript SDK - diff\nDESCRIPTION: This diff-formatted snippet demonstrates how to update code using Clerk's User.getOrganizationMemberships method by renaming pagination arguments: 'limit' becomes 'pageSize' and 'offset' becomes 'initialPage'. No external dependencies are required beyond the Clerk JavaScript SDK. The update helps enhance code clarity regarding pagination; developers should replace the old arguments in their function calls as shown.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/user-getorganizationmemberships-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n  const { data } = await user.getOrganizationMemberships({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying `getRoles` Pagination Parameters in JavaScript\nDESCRIPTION: This code snippet demonstrates the updated pagination arguments for the `organization.getRoles` method. It shows the replacement of the deprecated `limit` parameter with `pageSize` (specifying results per page) and `offset` with `initialPage` (specifying the starting page number, e.g., 1 for the first page, 2 for the second). This change is intended to enhance the clarity and simplicity of controlling pagination.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getroles-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await organization.getRoles({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n\n----------------------------------------\n\nTITLE: Adapting `getUserOauthAccessToken` Call for Paginated Response (JavaScript)\nDESCRIPTION: Illustrates the required code change for handling the updated return signature of `clerkClient.users.getUserOauthAccessToken` in the Clerk JavaScript SDK Core 2 release. The method now returns an object containing both the `data` array and the `totalCount` of items, necessitating destructuring to access the data.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getuseroauthaccesstoken-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.users.getUserOauthAccessToken()\n+ const { data, totalCount } = await clerkClient.users.getUserOauthAccessToken()\n```\n\n----------------------------------------\n\nTITLE: Migrating Pagination Arguments in Clerk Organization.getDomains (diff)\nDESCRIPTION: This snippet uses unified diff syntax to show a direct migration from the old pagination argument names (limit, offset) to the new names (pageSize, initialPage) in the Clerk JavaScript SDK\\'s organization.getDomains call. It helps developers see the precise arguments to change when updating their codebases. Inputs are the arguments to the getDomains method; outputs remain the resulting domain data. No runtime dependencies are needed beyond the Clerk SDK and JavaScript runtime; however, this snippet assumes you are using a version of Clerk with the new argument names.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getdomains-arguments-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await organization.getDomains({\\n-   limit: 10,\\n+   pageSize: 10,\\n-   offset: 10,\\n+   initialPage: 2,\\n  })\n```\n\n----------------------------------------\n\nTITLE: Custom Session Management with Google One Tap\nDESCRIPTION: Example of handling Google One Tap authentication with custom session management, checking for completion status and manually setting the active session.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    if (signInOrUp.status === 'complete') {\n      await Clerk.setActive({\n        session: signInOrUp.createdSessionId,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Introducing __experimental_reverificationMismatchResponse Helper (TypeScript/JavaScript)\nDESCRIPTION: Introduces an experimental helper function `__experimental_reverificationMismatchResponse` exported from `@clerk/nextjs/server`. This function likely aids in constructing appropriate server-side responses when a reverification mismatch occurs.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n__experimental_reverificationMismatchResponse\n```\n\n----------------------------------------\n\nTITLE: Updating `isClerkAPIResponseError` Import in Clerk React (JavaScript/Diff)\nDESCRIPTION: This code diff demonstrates the required change for importing the `isClerkAPIResponseError` utility function. The import path has moved from the root `@clerk/clerk-react` package to the specific `@clerk/clerk-react/errors` subpath. This update is mandatory for the import to function correctly in newer versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/isclerkapiresponserror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { isClerkAPIResponseError } from \"@clerk/clerk-react\"\n+ import { isClerkAPIResponseError } from \"@clerk/clerk-react/errors\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Passkeys in Expo with Clerk Provider Configuration\nDESCRIPTION: Example showing how to configure ClerkProvider with experimental passkeys support in Expo projects. This code demonstrates the necessary imports and provider setup.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider } from '@clerk/clerk-expo';\nimport { passkeys } from '@clerk/clerk-expo/passkeys';\n\n<ClerkProvider __experimental_passkeys={passkeys}>{/* Your app here */}</ClerkProvider>;\n```\n\n----------------------------------------\n\nTITLE: Introducing useReverification() Hook\nDESCRIPTION: Introduces the stable `useReverification()` hook for handling the session reverification flow within React applications. This hook replaces the previously experimental `__experimental_useReverification` hook.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nuseReverification()\n```\n\n----------------------------------------\n\nTITLE: Fixing Window Reference in isomorphicClerk\nDESCRIPTION: Bug fix that ensures the code properly checks for window existence in the isomorphicClerk function, which is important for server-side rendering compatibility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-react:** Check for window in isomorphicClerk ([fe82852](https://github.com/clerk/javascript/commit/fe828523c2bbdc2f3fc35ad5e30aea52b5438922))\n```\n\n----------------------------------------\n\nTITLE: OrganizationProfile Component Customization Example\nDESCRIPTION: Shows how to customize the OrganizationProfile component by adding custom pages and external links using OrganizationProfile.Page and OrganizationProfile.Link components.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\n<OrganizationProfile>\n  <OrganizationProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </OrganizationProfile.Page>\n  <OrganizationProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <OrganizationProfile.Page label='members' />\n  <OrganizationProfile.Page label='settings' />\n</OrganizationProfile>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Middleware Options - Clerk Middleware (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to provide an asynchronous options callback to the Clerk middleware for Next.js. It illustrates defining a default export with 'clerkMiddleware', supplying both an authentication-and-request handler and an async function that awaits additional options. Required dependencies include '@clerk/nextjs/server' and an asynchronous 'getOptions' function. The snippet expects the request object as input, fetches options asynchronously, and returns them to enhance middleware configuration. Outputs are the constructed middleware and enhanced request options; ensure all middleware checks and asynchronous logic are handled within the functions provided.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default clerkMiddleware(\\n  (auth, req) => {\\n    // Add your middleware checks\\n  },\\n  async req => {\\n    const options = await getOptions(req);\\n    return options;\\n  },\\n);\n```\n\n----------------------------------------\n\nTITLE: Adapting to `getAllowlistIdentifierList` Return Change (JavaScript)\nDESCRIPTION: This diff demonstrates how to update JavaScript code to handle the changed return signature of `clerkClient.allowlistIdentifiers.getAllowlistIdentifierList`. Previously returning only the data array, it now returns an object containing both the `data` array and the `totalCount` of all available items, facilitating pagination. The code now uses destructuring to access both properties.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getallowlistidentifierlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.allowlistIdentifiers.getAllowlistIdentifierList()\n+ const { data, totalCount } = await clerkClient.allowlistIdentifiers.getAllowlistIdentifierList()\n```\n\n----------------------------------------\n\nTITLE: Importing createPathMatcher from @clerk/shared in TypeScript\nDESCRIPTION: Demonstrates importing the `createPathMatcher` utility function from the `@clerk/shared/pathMatcher` module in TypeScript. This change, introduced in version 6.10.5 (PR #5043), centralizes path matching logic previously duplicated in `@clerk/astro` and `@clerk/nextjs`. This function is used for matching URL paths against defined patterns within Clerk applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPathMatcher } from '@clerk/shared/pathMatcher';\n```\n\n----------------------------------------\n\nTITLE: Comparing Return Values of useOrganizations and useOrganizationList in JavaScript\nDESCRIPTION: This snippet contrasts the return object structure of the deprecated `useOrganizations` hook (before) with the return object structure of the newer `useOrganizationList` hook (after) in the Clerk React SDK. Key differences include the replacement of `getOrganizationMemberships` and `getOrganization` with properties like `userMemberships`, `userInvitations`, `userSuggestions`, and the addition of the `setActive` function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/useorganizations.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// before: useOrganizations return values\n{\n    isLoaded: boolean,\n    createOrganization: clerk.createOrganization,\n    getOrganizationMemberships: clerk.getOrganizationMemberships,\n    getOrganization: clerk.getOrganization,\n}\n\n// after: useOrganizationList return values\n{\n    isLoaded: boolean,\n    createOrganization: clerk.createOrganization,\n    userMemberships: PaginatedResourcesWithDefault<...> | PaginatedResources<..._>,\n    userInvitations: PaginatedResourcesWithDefault<...> | PaginatedResources<..._>,\n    userSuggestions: PaginatedResourcesWithDefault<...> | PaginatedResources<..._>,\n    setActive: clerk.setActive,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Client Initialization with publishableKey in JavaScript\nDESCRIPTION: This code snippet demonstrates the changes required to update the Clerk client initialization from using 'frontendApi' to 'publishableKey'. It includes updating the import statement, client creation, and authentication request. The publishable key can be found in the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createclerkclient-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Clerk } from '@clerk/backend';\n+ import { createClerkClient } from '@clerk/backend';\n\n- const clerkClient = Clerk({ frontendApi: '...' });\n+ const clerkClient = createClerkClient({ publishableKey: '...' });\n\n- clerkClient.authenticateRequest({ frontendApi: '...' });\n+ clerkClient.authenticateRequest({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Switcher and Profile Components\nDESCRIPTION: Feature that wires up the OrganizationSwitcher and OrganizationProfile components to enable organization management in the UI.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js,clerk-react,types:** Wire up `OrganizationSwitcher` and `OrganizationProfile` ([1e34e69](https://github.com/clerk/javascript/commit/1e34e6986ee49aeb9ca9f72cdc5d799d6611b53f))\n```\n\n----------------------------------------\n\nTITLE: Updating createClerkClient Initialization for Clerk in JavaScript\nDESCRIPTION: This snippet demonstrates how to update initialization of Clerk's Fastify client by replacing the deprecated 'frontendApi' option with the new 'publishableKey' parameter. The change requires swapping both the property key and value, as these are different and not directly interchangeable. The provided diff highlights the required modification, which ensures continued compatibility with the Clerk SDK and requires access to the proper publishable key from the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/fastify/createclerkclient-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/fastify';\\n\\n- createClerkClient({ frontendApi: '...' });\\n+ createClerkClient({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Migrating attemptWeb3WalletVerification usage in Clerk JavaScript\nDESCRIPTION: This snippet demonstrates the migration from the deprecated 'generatedSignature' parameter, which required an asynchronous function, to the new 'signature' parameter of the 'Signup.attemptWeb3WalletVerification' method in the Clerk JavaScript SDK. Dependencies include the Clerk SDK and an instantiated signup object 's'. Key parameters are 'generatedSignature' (async function, deprecated) and 'signature' (string, current). Inputs are either a function returning the signature ('before'), or a string value containing the signature ('after'). Expected output is successful execution of the verification method. Developers should ensure that asynchronous signature retrieval is resolved before passing it to 'signature'.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/signup-attemptweb3walletverification-generatedsignature.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// before\ns.attemptWeb3WalletVerification({\n  generatedSignature: async () => 'signatureString',\n});\n```\n\nLANGUAGE: js\nCODE:\n```\n// after\ns.attemptWeb3WalletVerification({ signature: 'signatureString' });\n```\n\nLANGUAGE: js\nCODE:\n```\n// or, if you still need to fetch the signature async\nconst signatureString = await (async () => 'signatureString');\ns.attemptWeb3WalletVerification({ signature: signatureString });\n```\n\n----------------------------------------\n\nTITLE: Updated Error Imports in TypeScript\nDESCRIPTION: Shows the new import structure for error-related exports from @clerk/backend/errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TokenVerificationError,\n  TokenVerificationErrorAction,\n  TokenVerificationErrorCode,\n  TokenVerificationErrorReason,\n} from '@clerk/backend/errors';\n```\n\n----------------------------------------\n\nTITLE: Refactoring UserButton Prop from userProfile to userProfileProps in Clerk JavaScript (diff)\nDESCRIPTION: This code snippet shows the required code change in the usage of the UserButton component, where the userProfile prop has been renamed to userProfileProps. No changes to the prop's value structure are required—only the prop name should be updated across the codebase. This assists with migration to maintain compatibility with newer Clerk JavaScript versions and avoid deprecation warnings.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/userprofile-prop.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <UserButton userProfile={} />\\n+ <UserButton userProfileProps={} />\n```\n\n----------------------------------------\n\nTITLE: Updating isKnownError Import Path in Clerk React - diff\nDESCRIPTION: This snippet demonstrates how to change the isKnownError import path from the root of the @clerk/clerk-react package to the new @clerk/clerk-react/errors subpath. No external dependencies are required other than the Clerk React library itself. Update existing code by replacing the import statement, ensuring compatibility with the latest package version; this operation does not affect runtime behavior but is necessary for proper module resolution.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/isknownerror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isKnownError } from \"@clerk/clerk-react\"\n+ import { isKnownError } from \"@clerk/clerk-react/errors\"\n```\n\n----------------------------------------\n\nTITLE: Google OneTap Authentication Integration\nDESCRIPTION: Example demonstrating how to integrate Google OneTap authentication using Clerk's APIs for handling callbacks and session management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    await Clerk.handleGoogleOneTapCallback(signInOrUp, {\n      signInForceRedirectUrl: window.location.href,\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ClerkProvider with WebSSO for Chrome Extensions\nDESCRIPTION: Example of how to configure the ClerkProvider component with the necessary props for WebSSO functionality in Chrome extensions, including the new storageCache prop replacing tokenCache.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkProvider\n  publishableKey={publishableKey}\n  routerPush={to => navigate(to)}\n  routerReplace={to => navigate(to, { replace: true })}\n  syncSessionWithTab\n\n  // tokenCache is now storageCache (See below)\n  storageCache={/* ... */}\n>\n```\n\n----------------------------------------\n\nTITLE: Updated Parameter Identifier `redirectUrl` (JavaScript)\nDESCRIPTION: The updated identifier `redirectUrl` which replaces the deprecated `redirect_url` parameter key in the options for `User.createExternalAccount`. This parameter specifies the redirect destination after linking an external account.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-createexternalaccount-redirecturl.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nredirectUrl\n```\n\n----------------------------------------\n\nTITLE: Updating Loading Component Imports - diff\nDESCRIPTION: This code diff illustrates the breaking change in how the <Loading> component should be imported for both sign-in and sign-up flows, standardizing the import path to /common. Developers should update their import statements from @clerk/elements/sign-in and @clerk/elements/sign-up to use @clerk/elements/common instead. This requires modifying import statements for proper component resolution after an upgrade.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- import { Loading } from \"@clerk/elements/sign-in\"\n- import { Loading } from \"@clerk/elements/sign-up\"\n+ import { Loading } from \"@clerk/elements/common\"\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Keys and Default Values with ClerkProvider in JavaScript\nDESCRIPTION: This snippet provides a JavaScript object, 'newValues', that maps new localization keys to their default English display values for Clerk's UI components. Dependencies include Clerk's localization system in a JavaScript or React environment, where developers are expected to supply custom values to override defaults. The structure covers nested keys for forms, organization management, sign-in, errors, and user profile features; inputs are key/value pairs, and outputs serve as text for UI components, with placeholders such as '{{domain}}' and '{{identifier}}' available for variable substitution.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/new-localization-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst newValues = {\n  formButtonPrimary__verify: 'Verify',\n  formFieldInputPlaceholder__confirmDeletionUserAccount: 'Delete account',\n  organizationProfile: {\n    invitePage: {\n      selectDropdown__role: 'Select role',\n    },\n    navbar: {\n      description: 'Manage your organization.',\n      general: 'General',\n      members: 'Members',\n      title: 'Organization',\n    },\n    profilePage: {\n      domainSection: {\n        menuAction__manage: 'Manage',\n        menuAction__remove: 'Delete',\n        menuAction__verify: 'Verify',\n      },\n    },\n    start: {\n      headerTitle__general: 'General',\n      profileSection: {\n        primaryButton: 'Update profile',\n        title: 'Organization Profile',\n        uploadAction__title: 'Logo',\n      },\n    },\n    verifiedDomainPage: {\n      title: 'Update {{domain}}',\n    },\n  },\n  signIn: {\n    accountSwitcher: {\n      action__addAccount: 'Add account',\n      action__signOutAll: 'Sign out of all accounts',\n      subtitle: 'Select the account with which you wish to continue.',\n      title: 'Choose an account',\n    },\n    alternativeMethods: {\n      actionText: 'Don\\u2019t have any of these?',\n      subtitle: 'Facing issues? You can use any of these methods to sign in.',\n    },\n    forgotPassword: {\n      subtitle_email: 'First, enter the code sent to your email ID',\n      subtitle_phone: 'First, enter the code sent to your phone',\n      title: 'Reset password',\n    },\n  },\n  unstable__errors: {\n    form_param_format_invalid__phone_number: 'Phone number must be in a valid international format',\n  },\n  userProfile: {\n    emailAddressPage: {\n      verifyTitle: 'Verify email address',\n    },\n    formButtonPrimary__add: 'Add',\n    formButtonPrimary__remove: 'Remove',\n    formButtonPrimary__save: 'Save',\n    mfaPhoneCodePage: {\n      backButton: 'Use existing number',\n      successMessage1:\n        'When signing in, you will need to enter a verification code sent to this phone number as an additional step.',\n      successMessage2:\n        'Save these backup codes and store them somewhere safe. If you lose access to your authentication device, you can use backup codes to sign in.',\n      successTitle: 'SMS code verification enabled',\n    },\n    navbar: {\n      account: 'Profile',\n      description: 'Manage your account info.',\n      security: 'Security',\n      title: 'Account',\n    },\n    passwordPage: {\n      checkboxInfoText__signOutOfOtherSessions:\n        'It is recommended to sign out of all other devices which may have used your old password.',\n      successMessage__set: 'Your password has been set.',\n      successMessage__signOutOfOtherSessions: 'All other devices have been signed out.',\n      successMessage__update: 'Your password has been updated.',\n      title__set: 'Set password',\n      title__update: 'Update password',\n    },\n    phoneNumberPage: {\n      verifySubtitle: 'Enter the verification code sent to {{identifier}}',\n      verifyTitle: 'Verify phone number',\n    },\n    start: {\n      passwordSection: {\n        primaryButton__updatePassword: 'Update password',\n      },\n      profileSection: {\n        primaryButton: 'Update profile',\n      },\n      usernameSection: {\n        primaryButton__updateUsername: 'Update username',\n      },\n    },\n    usernamePage: {\n      title__set: 'Set username',\n      title__update: 'Update username',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Change Notifications\nDESCRIPTION: Bug fix that enables the Clerk JS module to emit change notifications to listeners when an organization is modified, ensuring components stay in sync with organization state changes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug fix mentioned in commit 798ee62\n// Emit changes in organization to listeners\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Import from @clerk/backend in JavaScript\nDESCRIPTION: This snippet demonstrates the change in importing Clerk from the @clerk/backend package. The top-level Clerk import has been renamed to createClerkClient. This is a straightforward name change with no alterations to parameters or return types.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/clerk-import.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nimport { Clerk } from '@clerk/backend';\n\n// after\nimport { createClerkClient } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Updating User.getOrganizationSuggestions Pagination Parameters\nDESCRIPTION: This code diff demonstrates the required changes when calling `user.getOrganizationSuggestions`. The `limit` argument is replaced by `pageSize`, and the `offset` argument is replaced by `initialPage`. This modification aims to make pagination control clearer and more intuitive.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/user-getorganizationsuggestions-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await user.getOrganizationSuggestions({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n\n----------------------------------------\n\nTITLE: Using ClerkFailed Component in React\nDESCRIPTION: Example of using the new ClerkFailed component to display a fallback UI when Clerk fails to initialize.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkLoaded>\n  <MyCustomSignInForm/>\n</ClerkLoaded>\n<ClerkFailed>\n  <ContactSupportBanner/>\n</ClerkFailed>\n```\n\n----------------------------------------\n\nTITLE: Updating apiKey to secretKey in createClerkExpressWithAuth Configuration\nDESCRIPTION: This code snippet demonstrates how to migrate from the deprecated 'apiKey' parameter to the new 'secretKey' parameter when configuring Clerk authentication in an Express application. The change is a straightforward parameter name update in the function call.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkexpresswithauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkExpressWithAuth } from '@clerk/clerk-sdk-node';\n\n- createClerkExpressWithAuth({ apiKey: '...' });\n+ createClerkExpressWithAuth({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Adding redirectToWaitlist() Method to Clerk Singleton (JavaScript/TypeScript)\nDESCRIPTION: Adds a new method `redirectToWaitlist()` to the Clerk singleton object. This method facilitates programmatically redirecting the user to the application's designated waitlist page.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nredirectToWaitlist()\n```\n\n----------------------------------------\n\nTITLE: Updating TokenVerificationErrorAction Import Path in Clerk (diff)\nDESCRIPTION: This diff snippet illustrates the specific change required to migrate the TokenVerificationErrorAction import from @clerk/backend to the new location @clerk/backend/errors. No additional dependencies are introduced, but updating the path is necessary for compatibility with recent versions. The '-' line shows the old import, while the '+' line provides the corrected import statement. The snippet helps developers see precisely what needs to change.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/tokenverificationerroraction-import-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { TokenVerificationErrorAction } from \"@clerk/backend\"\n+ import { TokenVerificationErrorAction } from \"@clerk/backend/errors\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages for Existing Identifiers\nDESCRIPTION: Adds translation keys to customize error messages when an identifier already exists for email address, username, or phone number.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"form_identifier_exists__email_address\"\n\"form_identifier_exists__username\"\n\"form_identifier_exists__phone_number\"\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk API Usage in React Components\nDESCRIPTION: Migration steps for updating Clerk API usage in React components, including prop name changes and function replacements.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: jsx\nCODE:\n```\n// Old\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// New\n<UserProfile path=\"/whatever\"/>\n<CreateOrganization path=\"/whatever\"/>\n<OrganizationProfile path=\"/whatever\"/>\n<SignIn path=\"/whatever\"/>\n<SignUp path=\"/whatever\"/>\n\n// Alternative\n<UserProfile routing=\"hash_or_virtual\"/>\n<CreateOrganization routing=\"hash_or_virtual\"/>\n<OrganizationProfile routing=\"hash_or_virtual\"/>\n<SignIn routing=\"hash_or_virtual\"/>\n<SignUp routing=\"hash_or_virtual\"/>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Parameter Identifier `redirect_url` (JavaScript)\nDESCRIPTION: The deprecated identifier `redirect_url` which was previously used as a parameter key in the options for `User.createExternalAccount`. This parameter specified the redirect destination after linking an external account and should be replaced by `redirectUrl`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-createexternalaccount-redirecturl.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nredirect_url\n```\n\n----------------------------------------\n\nTITLE: Enabling Passkey Autofill in Clerk SignIn Input (TSX)\nDESCRIPTION: This snippet shows how to enable browser-native passkey autofill prompts by adding the `autoComplete='webauthn'` attribute to a `Clerk.Input` component within the 'start' step of the Clerk SignIn flow. This typically targets an identifier field like email.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.Step name='start'>\n  <Clerk.Field name='identifier'>\n    <Clerk.Label className='sr-only'>Email</Clerk.Label>\n    <Clerk.Input\n      autoComplete='webauthn'\n      placeholder='Enter your email address'\n    />\n    <Clerk.FieldError />\n  </Clerk.Field>\n</SignIn.Step>\n```\n```\n\n----------------------------------------\n\nTITLE: Using getClerkInstance After ClerkProvider Initialization\nDESCRIPTION: Example of using getClerkInstance without options after ClerkProvider has rendered. This pattern assumes ClerkProvider is already initialized in the application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider, getClerkInstance } from \"@clerk/expo\"\n\n// Always pass the `publishableKey` to `ClerkProvider`\n<ClerkProvider publishableKey={'xxxx'}>\n    ...\n</ClerkProvider>\n\n// If you sure that this code will run after the ClerkProvider has rendered then you can use `getClerkIntance` without options\nconst token = await getClerkInstance().session?.getToken();\nfetch('http://example.com/', {headers: {Authorization: token }})\n```\n\n----------------------------------------\n\nTITLE: Migrating Users.getOrganizationInvitationList Return Handling - Clerk JavaScript SDK (diff)\nDESCRIPTION: Demonstrates refactoring consumer code to adapt to the new return signature of Users.getOrganizationInvitationList. The method now returns an object with both data and totalCount properties instead of just data, aligning the SDK with the backend API's pagination conventions. Consumers need to destructure these properties to access invitation data and total item count for pagination features.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getorganizationinvitationlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.users.getOrganizationInvitationList()\\n+ const { data, totalCount } = await clerkClient.users.getOrganizationInvitationList()\n```\n\n----------------------------------------\n\nTITLE: Migrating authMiddleware Argument in Clerk Next.js - diff\nDESCRIPTION: This code snippet demonstrates how to update the usage of the authMiddleware function from the @clerk/nextjs/server package, changing the frontendApi argument to publishableKey. This migration is necessary due to the deprecation and subsequent removal of the frontendApi parameter. The snippet is presented as a diff patch, highlighting exactly what lines to change for seamless migration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/authmiddleware-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { authMiddleware } from \"@clerk/nextjs/server\"\n\n- authMiddleware({ frontendApi: '...' })\n+ authMiddleware({ publishableKey: '...' })\n```\n\n----------------------------------------\n\nTITLE: Introducing reverificationErrorResponse API\nDESCRIPTION: Introduces the `reverificationErrorResponse` API property, replacing the experimental version (`__experimental_reverificationErrorResponse`), providing access to the error response object during a reverification failure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nreverificationErrorResponse\n```\n\n----------------------------------------\n\nTITLE: Adding initialValues Option to SignUpButton Component (JSX)\nDESCRIPTION: Introduces an `initialValues` option to the `<SignUpButton />` React component. This allows pre-filling fields in the sign-up form when the button is clicked.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<SignUpButton />\n```\n\n----------------------------------------\n\nTITLE: Boolean Environment Variable Parsing\nDESCRIPTION: Updated environment variable boolean parsing to support multiple truthy values: true, 'true', '1', and 1.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Supported truthy values\ntrue\n\"true\"\n\"1\"\n1\n```\n\n----------------------------------------\n\nTITLE: Updating FieldState Usage to Direct State Passing - jsx\nDESCRIPTION: This pair of JSX code examples demonstrates the before and after usage for the <FieldState> component post-breaking change. Previously, the render prop received an object with a 'state' property; now, the 'state' is provided directly to the child function. No external dependencies are required, but code using the old pattern must be updated to avoid errors or unexpected behavior.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<FieldState>{({ state }) => ()}</FieldState>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<FieldState>{state => ()}</FieldState>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy in clerkMiddleware\nDESCRIPTION: Example of how to configure Content Security Policy (CSP) headers in clerkMiddleware, including support for strict-dynamic mode and custom directives.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default clerkMiddleware(\n  async (auth, request) => {\n    if (!isPublicRoute(request)) {\n      await auth.protect();\n    }\n  },\n  {\n    contentSecurityPolicy: {\n      mode: \"strict-dynamic\",\n      directives: {\n        \"connect-src\": [\"external.api.com\"],\n        \"script-src\": [\"external.scripts.com\"]\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Organization Features in Clerk React\nDESCRIPTION: Feature implementation that wires up OrganizationSwitcher and OrganizationProfile components in the Clerk React package, enabling organization management functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Feature mentioned in commit 1e34e69\n// Wire up `OrganizationSwitcher` and `OrganizationProfile`\n```\n\n----------------------------------------\n\nTITLE: Updating Import for Email Link Error Handling in Clerk/Next.js\nDESCRIPTION: This diff demonstrates how to update the import statement in a Next.js application using Clerk. It replaces the deprecated `EmailLinkErrorCode` with the recommended `EmailLinkErrorCodeStatus` from `@clerk/nextjs/errors` for handling email link verification errors in custom authentication flows, improving error handling clarity.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { EmailLinkErrorCode } from '@clerk/nextjs/errors'\n+ import { EmailLinkErrorCodeStatus } from '@clerk/nextjs/errors'\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Publishable Key Attribute in React Components\nDESCRIPTION: Bug fix that ensures the data-clerk-publishable-key attribute is only added to DOM elements when the publishable key is available, preventing potential rendering issues.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-react:** Add data-clerk-publishable-key attribute only when PK is available ([8d44f54](https://github.com/clerk/javascript/commit/8d44f54434754e2c31b4a77b58a28ae969ce5a09))\n```\n\n----------------------------------------\n\nTITLE: Importing EmailLinkErrorCodeStatus in JavaScript\nDESCRIPTION: Example of updating imports to use the new EmailLinkErrorCodeStatus instead of the deprecated EmailLinkErrorCode.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react-router/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- import { EmailLinkErrorCode } from '@clerk/nextjs/errors'\n+ import { EmailLinkErrorCodeStatus } from '@clerk/nextjs/errors'\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk Import to Named Import with Clerk JS (diff)\nDESCRIPTION: Demonstrates how to update the import statement for Clerk in a JavaScript project from a default import to a named import, as per the latest library version. No other changes, such as parameters or return types, are required. The snippet displays exactly what needs to be added and removed according to diff notation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/clerk-import.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Clerk from '@clerk/clerk-js';\\n+ import { Clerk } from '@clerk/clerk-js';\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Lodash omit Function for Localization Keys\nDESCRIPTION: Example showing how to use the lodash omit function to remove deleted keys from a localization object. This is useful for maintaining localization files by efficiently removing obsolete or renamed keys.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/removed-localization-keys.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { omit } from 'lodash-es';\n\nconst localization = omit(yourOldOject, deletedKeys);\n```\n\n----------------------------------------\n\nTITLE: Updating Import Paths in Clerk SDK Node.js Applications\nDESCRIPTION: This code shows how to update import paths in Clerk SDK. The deprecated paths with /cjs/instance or /esm/instance segments should be replaced with direct imports from the main @clerk/clerk-sdk-node package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/cjs-esm-instance.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { ... } from \"@clerk/clerk-sdk-node/esm/instance\";\n- import { ... } from \"@clerk/clerk-sdk-node/cjs/instance\";\n+ import { ... } from \"@clerk/clerk-sdk-node\";\n```\n\n----------------------------------------\n\nTITLE: Preventing Missing Key Error in isomorphicClerk.load\nDESCRIPTION: Bug fix that prevents throwing a missing key error specifically in the isomorphicClerk.load method, improving error handling during component initialization.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-react:** Do not throw missing key error in isomorphicClerk.load ([8b3b763](https://github.com/clerk/javascript/commit/8b3b763ed67d3af101573627fc7b00fb0a526b9b))\n```\n\n----------------------------------------\n\nTITLE: Using Clerk Environment Variables in Astro\nDESCRIPTION: Demonstrates how to use type-safe Clerk environment variables in an Astro project using the astro:env API.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PUBLIC_CLERK_PUBLISHABLE_KEY } from 'astro:env/client';\nimport { CLERK_SECRET_KEY } from 'astro:env/server';\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for verifyJwt in Clerk Backend (diff)\nDESCRIPTION: This snippet demonstrates the change necessary to update the import path for verifyJwt from @clerk/backend to @clerk/backend/tokens in your JavaScript or TypeScript project. No external dependencies are required apart from the Clerk SDK. Replace any imports of verifyJwt as shown to avoid runtime errors due to deprecated paths. Inputs: existing project code importing from @clerk/backend; Outputs: successful import from @clerk/backend/tokens.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/verifyjwt-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { verifyJwt } from \"@clerk/backend\"\n+ import { verifyJwt } from \"@clerk/backend/tokens\"\n```\n\n----------------------------------------\n\nTITLE: Updating Organization.create Syntax - Clerk JavaScript - Diff\nDESCRIPTION: This diff snippet demonstrates how to update deprecated usage of `Organization.create` by replacing string arguments with an object containing a `name` property. No external dependencies are needed, but users must adopt the new signature for compatibility. Input is the method call, and output is the migrated code; does not execute code, but illustrates migration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-create-string.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- Organization.create('...');\n+ Organization.create({ name: '...' });\n```\n\n----------------------------------------\n\nTITLE: Handling Clerk Backend API Responses\nDESCRIPTION: Updated code example for handling Clerk Backend API responses with the new { data, errors } payload structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { users } from '@clerk/backend';\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst { data, errors, clerkTraceId, status, statusText } = await users.getUser('user_deadbeef');\nif (errors) {\n  throw new ClerkAPIResponseError(statusText, {\n    data: errors,\n    status,\n    clerkTraceId,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Standalone Mode for Clerk UI Components (JavaScript/TypeScript)\nDESCRIPTION: Introduces the experimental `__experimental_asStandalone: true` property for `<UserButton />` and `<OrganizationSwitcher />` components. When set to true, the component renders only the popover content directly in place, without its usual trigger element. This change also includes an internal prefetch function `__experimental_prefetchOrganizationSwitcher` and updates to the `mountOrganizationSwitcher` and `mountUserButton` functions to accept the new property.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n__experimental_asStandalone: true\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// (For internal usage) Added `__experimental_prefetchOrganizationSwitcher` as a way to mount an internal component...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmountOrganizationSwitcher(node, { __experimental_asStandalone: true })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmountUserButton(node, { __experimental_asStandalone: true })\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Return Value Updates\nDESCRIPTION: Changes to the return value format of JWT helper functions for consistency with backend API\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, verifyJwt, hasValidSignature, decodeJwt } from '@clerk/backend/jwt';\nimport { verifyToken } from '@clerk/backend';\n\n// Updated return value format\nconst { data, errors: [error] = [] } = await signJwt(...);\nconst { data, errors: [error] = [] } = await verifyJwt(...);\nconst { data, errors: [error] = [] } = await hasValidSignature(...);\nconst { data, errors: [error] = [] } = await decodeJwt(...);\nconst { data, errors: [error] = [] } = await verifyToken(...);\n```\n\n----------------------------------------\n\nTITLE: Committing Modified Application Configs in a Test Setup - TypeScript\nDESCRIPTION: Shows full usage of custom application config instantiation and mutation in a Playwright test suite. Imports necessary models, sets up and applies template changes (such as adding files), and commits the result into a test directory as `Application`. Demonstrates the clone-modify-commit pattern, which is central to Playwright + Clerk test scaffolding.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@playwright/test';\\n\\nimport type { Application } from '../models/application';\\nimport { appConfigs } from '../presets';\\n\\ntest.describe('Your test', () => {\\n  test.describe.configure({ mode: 'parallel' });\\n  let app: Application;\\n\\n  test.beforeAll(async () => {\\n    app = await appConfigs.react.vite\\n      .clone()\\n      .addFile(\\n        'src/metadata.ts',\\n        () => `export const metadata = {\\n  name: 'Hello World',\\n}`,\\n      )\\n      .commit();\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Routing with Clerk and React Router in TSX\nDESCRIPTION: This snippet shows how to integrate Clerk authentication with react-router-dom for navigation in a Chrome extension. It includes route definitions and custom navigation handlers for the ClerkProvider.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/clerk-provider.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ClerkProvider } from '@clerk/chrome-extension';\nimport { useNavigate, Routes, Route, MemoryRouter } from 'react-router-dom';\nimport App from './App';\n\nconst publishableKey = process.env.VITE_CLERK_PUBLISHABLE_KEY;\n\nfunction AppWithRouting() {\n  const navigate = useNavigate();\n\n  return (\n    <Routes>\n      <Route\n        path='/sign-up/*'\n        element={<SignUp signInUrl='/' />}\n      />\n      <Route\n        path='/'\n        element={\n          <>\n            <SignedIn>Welcome User!</SignedIn>\n            <SignedOut>\n              <SignIn\n                forceRedirectUrl='/'\n                signUpUrl='/sign-up'\n              />\n            </SignedOut>\n          </>\n        }\n      />\n    </Routes>\n  );\n}\n\nfunction IndexPopupWithRouting() {\n  const navigate = useNavigate();\n\n  return (\n    <MemoryRouter>\n      <ClerkProvider\n        publishableKey={PUBLISHABLE_KEY}\n        routerPush={to => navigate(to)}\n        routerReplace={to => navigate(to, { replace: true })}\n      >\n        <AppWithRouting />\n      </ClerkProvider>\n    </MemoryRouter>\n  );\n}\n\nexport default IndexPopupWithRouting;\n```\n\n----------------------------------------\n\nTITLE: Updating createIsomorphicRequest import path in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the import statement for the createIsomorphicRequest function. The import path is changed from '@clerk/backend' to '@clerk/backend/internal', reflecting its move to an internal module.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createisomorphicrequest-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { createIsomorphicRequest } from \"@clerk/backend\"\n+ import { createIsomorphicRequest } from \"@clerk/backend/internal\"\n```\n\n----------------------------------------\n\nTITLE: Updating redirectToSignUp Import Path in Next.js Applications\nDESCRIPTION: This code snippet demonstrates how to migrate the redirectToSignUp import from the old top-level package path to the new server-specific path. The redirectToSignUp function should only be used server-side, hence the import path change.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/redirecttosignup-import-path.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { redirectToSignUp } from \"@clerk/nextjs\"\n+ import { redirectToSignUp } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Using Updated useReverification Hook in React\nDESCRIPTION: Demonstrates how to use the updated useReverification hook in a React component. The hook now returns the fetcher directly and throws cancellation errors instead of using options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReverification } from '@clerk/clerk-react';\nimport { isReverificationCancelledError } from '@clerk/clerk-react/error';\n\ntype MyData = {\n  balance: number;\n};\n\nexport function MyButton() {\n  const fetchMyData = () => fetch('/api/balance').then(res => res.json() as Promise<MyData>);\n  const enhancedFetcher = useReverification(fetchMyData);\n\n  const handleClick = async () => {\n    try {\n      const myData = await enhancedFetcher();\n      //     ^ is typed as `MyData`\n    } catch (e) {\n      // Handle error returned from the fetcher here\n      // You can also handle cancellation with the following\n      if (isReverificationCancelledError(err)) {\n        // Handle the cancellation error here\n      }\n    }\n  };\n\n  return <button onClick={handleClick}>Update User</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk Client Creation in Remix\nDESCRIPTION: Shows how to update the Clerk client creation code in Remix applications, replacing the named Clerk import with createClerkClient factory method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport { Clerk } from '@clerk/remix';\nconst clerk = Clerk({ secretKey: '...' });\n\n// After\nimport { createClerkClient } from '@clerk/remix';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Vue SignedIn Component with treatPendingAsSignedOut Examples\nDESCRIPTION: Examples showing how to use the SignedIn component with the treatPendingAsSignedOut prop to control component rendering based on session state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node only mounts when session is active\n// Example: Organization selection must be completed if enforced\n<SignedIn>\n  <p>You have selected an organization!</p>\n</SignedIn>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Children node mounts for both active and pending session\n<SignedIn treatPendingAsSignedOut={false}>\n  <p>You might not have an organization selected</p>\n</SignedIn>\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for createAuthenticateRequest in Clerk JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to update the import path for the createAuthenticateRequest function in Clerk's JavaScript SDK. The import path has changed from @clerk/backend to @clerk/backend/internal. Note that internal imports are not covered by semver and are not intended for general usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createauthenticaterequest-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { createAuthenticateRequest } from \"@clerk/backend\"\n+ import { createAuthenticateRequest } from \"@clerk/backend/internal\"\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Support for Gate Component with Role Checks in JavaScript\nDESCRIPTION: Minor change to add experimental support for the Gate component with role checks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_54\n\nLANGUAGE: Markdown\nCODE:\n```\n- Experimental support for `<Gate/>` with role checks. ([#1942](https://github.com/clerk/javascript/pull/1942)) by [@panteliselef](https://github.com/panteliselef)\n```\n\n----------------------------------------\n\nTITLE: Accessing User Passkeys in JavaScript\nDESCRIPTION: Demonstrates how to get a user's passkeys, update a passkey name, and delete a passkey using the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the user's passkeys\nclerk.user.__experimental__passkeys\n\n// Update the name of a passkey\nclerk.user.__experimental__passkeys?.[0].update({name:'work laptop passkey'})\n\n// Delete a passkey\nclerk.user.__experimental__passkeys?.[0].delete()\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy Roles with TypeScript Interface Merging for Clerk\nDESCRIPTION: Provides a TypeScript interface definition (`ClerkAuthorization`) that uses interface merging to add support for the legacy organization roles ('admin', 'basic_member', 'guest_member') after the `MembershipRole` type was replaced by `OrganizationCustomRoleKey`. This helps maintain backward compatibility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/membershiprole.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ninterface ClerkAuthorization {\n  permission: ''\n  role: 'admin' | 'basic_member' | 'guest_member'\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Type Annotations for setSession in isomorphicClerk\nDESCRIPTION: Bug fix that corrects type annotations in the isomorphicClerk implementation specifically for the setSession method, improving type safety and developer experience.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Bug fix mentioned in commit 56abc04\n// Correct annotations in isomorphicClerk for setSession\n```\n\n----------------------------------------\n\nTITLE: Dropping Support for Node 14 and 16 in JavaScript\nDESCRIPTION: Major change to drop support for Node 14 and 16 as they reached EOL status. The minimal Node.js version required by Clerk is now 18.18.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_51\n\nLANGUAGE: Markdown\nCODE:\n```\n- Dropping support for Node 14 and 16 as they both reached EOL status. The minimal Node.js version required by Clerk is `18.18.0` now. ([#1864](https://github.com/clerk/javascript/pull/1864)) by [@dimkl](https://github.com/dimkl)\n```\n\n----------------------------------------\n\nTITLE: Managing Waitlist Entries and Actor Tokens in TypeScript\nDESCRIPTION: Shows how to use the Clerk backend client to manage waitlist entries and actor tokens, including listing, creating, and revoking operations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\n\n// Waitlist entries\nawait clerkClient.waitlistEntries.list({...});\nawait clerkClient.waitlistEntries.create({\n  emailAddress: 'you@yourdomain.com',\n  notify: true\n});\n\n// Actor tokens\nconst { id } = await clerkClient.actorTokens.create({...});\nawait clerkClient.actorTokens.revoke(id);\n```\n\n----------------------------------------\n\nTITLE: Accessing Experimental Factor Verification Age (Client-Side) in TypeScript/React\nDESCRIPTION: Shows how to access the experimental `__experimental_factorVerificationAge` property on the `session` object obtained from the `useSession` hook in a React application. This property tracks the age of verified factor groups. Requires the `@clerk/clerk-react` package and the `useSession` hook.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst { session } = useSession();\nsession?.__experimental_factorVerificationAge;\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Membership List Access - Clerk JavaScript - diff\nDESCRIPTION: Demonstrates the migration from the previous return type (an array of items) to the new paginated object structure for the getOrganizationMembershipList method in Clerk's JavaScript SDK. In the new version, callers must access the membership list via the data field, and can also use totalCount for total item tracking. The example uses a diff-style highlight to show a safe update, and assumes useUser() and user objects from the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getorganizationmembershiplist-return-type-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { user } = useUser()\\n  const membershipList = user.getOrganizationMembershipList()\\n\\n- membershipList.forEach(() => {})\\n+ membershipList.data.forEach(() => {})\n```\n\n----------------------------------------\n\nTITLE: Making API Parameters Mutually Exclusive\nDESCRIPTION: Type definition update that makes frontendApi and publishableKey parameters mutually exclusive but optional, improving the API design and type safety.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n**nextjs,types:** Make frontendApi or publishableKey mutually exclusive but optional ([953c276](https://github.com/clerk/javascript/commit/953c27622ba24054172d6f4178bd5af50f73fa36))\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk JWT Utility Usage\nDESCRIPTION: Example of keeping the same behavior when using updated Clerk JWT utilities that now return { data, error } objects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, hasValidSignature, decodeJwt, verifyJwt } from '@clerk/backend/jwt';\n\nconst { data, error } = await signJwt(...)\nif (error) throw error;\n\nconst { data, error } = await hasValidSignature(...)\nif (error) throw error;\n\nconst { data, error } = decodeJwt(...)\nif (error) throw error;\n\nconst { data, error } = await verifyJwt(...)\nif (error) throw error;\n```\n\n----------------------------------------\n\nTITLE: Refactoring Auth Data Retrieval in Next.js and Remix\nDESCRIPTION: A refactoring that standardizes how auth data is retrieved in both Next.js and Remix packages by using common utility functions. This improves code maintainability and consistency.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_76\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs,remix:** Refactor remix and nextjs getAuthData to use common utils ([d5f5dba](https://github.com/clerk/javascript/commit/d5f5dbace577ae617636841ce51e7cccd5d25b95))\n```\n\n----------------------------------------\n\nTITLE: Updating verifyToken Usage in TypeScript\nDESCRIPTION: Demonstrates how to update the usage of verifyToken() from @clerk/backend to handle the new { data, error } return value structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyToken } from '@clerk/backend'\n\nconst { data, error }  = await verifyToken(...);\nif(error){\n    throw error;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Event Types in ClerkJS\nDESCRIPTION: Shows how to define a new event type in the events module including the event constant and associated payload type definitions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/docs/events.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const events = {\n  // ...\n  NewEvent: 'namespace_or_resource:action_or_identifier',\n} as const;\n// ... after TokenUpdatePayload ...\ntype NewEventPayload = { something: NewEventType };\n\ntype EventPayload = {\n  //...\n  [events.NewEvent]: EventType<NewEventPayload>;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path for TokenVerificationErrorCode (Diff)\nDESCRIPTION: This diff snippet illustrates the required change to update the import path for `TokenVerificationErrorCode`. The previous import from `@clerk/backend` is removed, and the new import from `@clerk/backend/errors` is added.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/tokenverificationerrorcode-import-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { TokenVerificationErrorCode } from \"@clerk/backend\"\n+ import { TokenVerificationErrorCode } from \"@clerk/backend/errors\"\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Utility Functions in TypeScript\nDESCRIPTION: Shows how to update the usage of signJwt, hasValidSignature, decodeJwt, and verifyJwt functions to handle the new { data, error } return value structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, hasValidSignature, decodeJwt, verifyJwt } from '@clerk/backend/jwt';\n\nconst { data, error } = await signJwt(...)\nif (error) throw error;\n\nconst { data, error } = await hasValidSignature(...)\nif (error) throw error;\n\nconst { data, error } = decodeJwt(...)\nif (error) throw error;\n\nconst { data, error } = await verifyJwt(...)\nif (error) throw error;\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Client Persistence in JavaScript/React\nDESCRIPTION: Illustrates how to enable the experimental `persistClient` feature in Clerk. This allows matching a user's device with a client even after sign-out. The example shows configuration via the `experimental` prop in `<ClerkProvider>` for React and the options object for `clerk.load()` in Vanilla JS.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// React\n<ClerkProvider experimental={{ persistClient: true }} />;\n\n// Vanilla JS\nawait clerk.load({ experimental: { persistClient: true } });\n```\n\n----------------------------------------\n\nTITLE: Updated Auth Context Usage in TypeScript\nDESCRIPTION: Shows the migration from event.context.auth as a property to event.context.auth() as a function call to access user authentication details.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default clerkMiddleware((event) => {\n+ const { userId } = event.context.auth()\n- const { userId } = event.context.auth\n  const isAdminRoute = event.path.startsWith('/api/admin')\n\n  if (!userId && isAdminRoute) {\n    throw createError({\n      statusCode: 401,\n      statusMessage: 'Unauthorized: User not signed in',\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Modifying Import Path for `TokenVerificationErrorReason` (Diff)\nDESCRIPTION: This diff snippet demonstrates the required change for importing `TokenVerificationErrorReason` in Clerk projects. The import path has moved from `@clerk/backend` to the more specific `@clerk/backend/errors` path. Users must apply this change to ensure their code referencing this enum functions correctly after updating Clerk dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/tokenverificationerrorreason-import-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- import { TokenVerificationErrorReason } from \"@clerk/backend\"\n+ import { TokenVerificationErrorReason } from \"@clerk/backend/errors\"\n```\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates\nDESCRIPTION: Updated package dependencies including version changes and peer dependency requirements for React 18+.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n\"@clerk/types\": \"^4.0.0-alpha-v5.4\"\n\"react\": \">=18\"\n\"react-dom\": \"*\"\n```\n\n----------------------------------------\n\nTITLE: Custom Role Type Definition\nDESCRIPTION: Example showing how to define custom authorization roles in TypeScript using interface definition.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// clerk.d.ts\ninterface ClerkAuthorization {\n  permission: '';\n  role: 'admin' | 'basic_member' | 'guest_member';\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Clerk Error Boundary Usage - Remix Diff\nDESCRIPTION: Shows the migration from the deprecated ClerkErrorBoundary component and import in @clerk/remix. Developers should remove any import or usage of ClerkErrorBoundary, switching to only import ClerkApp. The input is the project entry file, and the output is a file without ClerkErrorBoundary. There are no dependencies except Clerk Remix SDK. Errors may occur if the ClerkErrorBoundary is not removed after updating.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { ClerkApp, ClerkErrorBoundary } from \"@clerk/remix\";\n+ import { ClerkApp } from \"@clerk/remix\";\n\n...\n\n- export const ErrorBoundary = ClerkErrorBoundary();\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk NextJS SDK\nDESCRIPTION: Commands to install the Clerk SDK for Next.js using different package managers (npm, yarn, or pnpm).\nSOURCE: https://github.com/clerk/javascript/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @clerk/nextjs\n# or\nyarn add @clerk/nextjs\n# or\npnpm add @clerk/nextjs\n```\n\n----------------------------------------\n\nTITLE: Updating Pagination Arguments for Clerk SDK in JavaScript\nDESCRIPTION: This code diff demonstrates how to update the argument names used with the organization.getInvitations() function in the Clerk JavaScript SDK. The usage of 'limit' and 'offset' as pagination controls is replaced by 'pageSize' and 'initialPage', respectively. The expected input remains an options object and the output is an object containing the invitations data; no other dependencies are required, and the update is purely a change in argument names to improve code clarity.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getinvitations-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await organization.getInvitations({\\n-   limit: 10,\\n+   pageSize: 10,\\n-   offset: 10,\\n+   initialPage: 2,\\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating EmailLinkErrorCode Import Statement in Clerk React (diff)\nDESCRIPTION: Demonstrates the required migration for importing 'EmailLinkErrorCode' in Clerk React: updating from the root module to the '/errors' submodule. This change addresses the recent module structure updates in Clerk React (JavaScript/TypeScript). There are no runtime dependencies other than using '@clerk/clerk-react' at an appropriate version; ensure no other code relies on the deprecated import path. Input is a diff patch; output is the updated import statement.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/emaillinkerrorcode-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { EmailLinkErrorCode } from \"@clerk/clerk-react\"\n+ import { EmailLinkErrorCode } from \"@clerk/clerk-react/errors\"\n```\n\n----------------------------------------\n\nTITLE: Styling Clerk MFA Dropdown with CSS Classes\nDESCRIPTION: CSS class selectors for customizing the Clerk MFA dropdown appearance within `<UserProfile />`. `cl-menuList__mfa` targets the dropdown list container, and `cl-menuItem__mfa` targets individual MFA items within the list. Apply styles using these classes in your project's CSS.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/mfa-dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ncl-menuList__mfa\n```\n\nLANGUAGE: css\nCODE:\n```\ncl-menuItem__mfa\n```\n\n----------------------------------------\n\nTITLE: Importing API_URL from Clerk SDK Node Package\nDESCRIPTION: This pattern matches code where the API_URL constant is imported from the @clerk/clerk-sdk-node package. The value of this constant has changed from 'https://api.clerk.dev' to 'https://api.clerk.com'.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/api-url-value-change.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport\\s+{[^}]*?[,\\s]API_URL[,\\s][\\s\\S]*?from\\s+['\"]@clerk\\/clerk-sdk-node[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Using the OrganizationList Component\nDESCRIPTION: Example of using the new OrganizationList component which displays memberships, invitations, or suggestions for the active user, powered by the useOrganizationList hook.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: jsx\nCODE:\n```\n<OrganizationList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Authentication Components with Path Routing in JSX\nDESCRIPTION: This snippet demonstrates how to use Clerk authentication components with the new default path routing strategy. It shows how to set the 'path' prop for various components.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/path-routing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SignIn path=\"/sign-in\" />\n<SignUp path=\"/sign-up\" />\n<UserProfile path=\"/user-profile\" />\n<CreateOrganization path=\"/create-org\" />\n<OrganizationProfile path=\"/org-profile\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Sync Precedence in Clerk JS\nDESCRIPTION: Modifies the behavior of `organizationSyncOptions` so that `organizationPatterns` now take precedence over `personalAccountPatterns`. This change affects how Clerk determines whether to sync an active organization or a personal account based on URL patterns.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n// Within organizationSyncOptions:\n// organizationPatterns now takes precedence over personalAccountPatterns\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Clerk Sign-In/Up URLs in Next.js\nDESCRIPTION: This snippet demonstrates how to set environment variables for sign-in and sign-up URLs in a Next.js application using Clerk. These variables allow the use of SignIn and SignUp components without explicitly passing the path prop.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/path-routing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\nNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up\n```\n\n----------------------------------------\n\nTITLE: Updating User Metadata via API with Clerk in Next.js\nDESCRIPTION: This code snippet shows how to update user metadata using an API endpoint in a Next.js application with Clerk. It fetches data from an API, checks for successful updates, and reloads the user data. The snippet also handles loading states and displays the user's role from public metadata.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/docs/use-user.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useUser } from '@clerk/nextjs';\n\nexport default function HomePage() {\n  const { isLoaded, user } = useUser();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n\n  if (!user) return null;\n\n  const updateUser = async () => {\n    // Update data via an API endpoint\n    const updateMetadata = await fetch('/api/updateMetadata');\n\n    // Check if the update was successful\n    if (updateMetadata.message !== 'success') {\n      throw new Error('Error updating');\n    }\n\n    // If the update was successful, reload the user data\n    await user.reload();\n  };\n\n  return (\n    <>\n      <button onClick={updateUser}>Update your metadata</button>\n      <p>user role: {user?.publicMetadata.role}</p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updated JWT Utility Functions Return Values\nDESCRIPTION: Example showing the new return value pattern for JWT utility functions signJwt, hasValidSignature, decodeJwt, and verifyJwt which now return an object with data and error properties.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, hasValidSignature, decodeJwt, verifyJwt } from '@clerk/backend/jwt';\n\nconst { data, error } = await signJwt(...)\nif (error) throw error;\n\nconst { data, error } = await hasValidSignature(...)\nif (error) throw error;\n\nconst { data, error } = decodeJwt(...)\nif (error) throw error;\n\nconst { data, error } = await verifyJwt(...)\nif (error) throw error;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Links to UserButton in Vue\nDESCRIPTION: Demonstrates how to render custom UserProfile links inside the UserButton component in a Vue application. This allows developers to add custom navigation options to the user menu.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { UserButton } from '@clerk/vue';\n</script>\n\n<template>\n  <UserButton>\n    <UserButton.UserProfileLink\n      label=\"Homepage\"\n      url=\"/\"\n    >\n      <template #labelIcon>\n        <div>Icon</div>\n      </template>\n    </UserButton.UserProfileLink>\n  </UserButton>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating `isMetamaskError` Import Path in ClerkJS React (Diff)\nDESCRIPTION: This diff illustrates the required code modification for importing the `isMetamaskError` function. The import statement must be changed from `@clerk/react` to the new, more specific path `@clerk/react/errors` to correctly resolve the function.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/ismetamaskerror-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { isMetamaskError } from \"@clerk/react\"\n+ import { isMetamaskError } from \"@clerk/react/errors\"\n```\n\n----------------------------------------\n\nTITLE: Using Localization Keys in React Components\nDESCRIPTION: This snippet shows how to use localization keys within React components, both in JSX and in function calls.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n- <Text>Role</Text>\n+ <Text localizationKey={localizationKeys('formFieldLabel__role')} />\n\n+ const { t } = useLocalizations();\n\n- card.setError('Some Error')\n+ card.setError(t(localizationKeys('some_error')))\n```\n\n----------------------------------------\n\nTITLE: Obtaining JWT Claims with @clerk/backend in TypeScript\nDESCRIPTION: Illustrates the process of creating a Clerk client and authenticating a request to access JWT claims using the @clerk/backend package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/orgs-claim.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from \"@clerk/backend\"\n\nconst clerkClient = createClerkClient({ secretKey: \"\" })\nconst requestState = await clerkClient.authenticateRequest(\n  request,\n  { publishableKey: \"\" }\n)\nconst claims: JwtPayload = requestState.toAuth().sessionClaims\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Claims Attribute\nDESCRIPTION: Added claims attribute to req.auth for NextJS, Clerk SDK Node, and Remix integrations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **nextjs,clerk-sdk-node,remix:** Add claims attribute to req.auth ([c695529](https://github.com/clerk/javascript/commit/c695529089f55baef72b86e3b73b8cd9f4f58e6d))\n```\n\n----------------------------------------\n\nTITLE: Customizing GoogleOneTap User Experience Settings\nDESCRIPTION: Shows how to configure the user experience settings for the experimental GoogleOneTap component, controlling behavior for tap outside, ITP support, and FedCM support.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<__experimental_GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Clerk Sign-In/Up URLs in Remix\nDESCRIPTION: This snippet shows how to set environment variables for sign-in and sign-up URLs in a Remix application using Clerk. These variables allow the use of SignIn and SignUp components without explicitly passing the path prop.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/path-routing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nCLERK_SIGN_IN_URL=/sign-in\nCLERK_SIGN_UP_URL=/sign-up\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect URLs via Environment Variables in Next.js\nDESCRIPTION: Shows the environment variables `NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL` and `NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL` used to configure the respective redirect URLs in a Next.js application using the Clerk SDK. Set these in your environment (e.g., `.env.local`) to define the post-authentication redirect destinations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/redirecttohome.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL\n```\n\nLANGUAGE: shell\nCODE:\n```\nNEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL\n```\n\n----------------------------------------\n\nTITLE: Chrome Extension WebSSO Host Permissions Configuration\nDESCRIPTION: JSON configuration for Chrome extension manifest.json showing required host permissions for WebSSO functionality in both development and production environments.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\n    // ...\n    \"http://localhost\"\n    // ...\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\n    // ...\n    \"https://clerk.example.com\"\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Passkey in Clerk\nDESCRIPTION: Example usage for authenticating a user with a passkey during sign-in with Clerk's authentication system.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// Authenticate with a passkey during sign-in\nawait signIn.authenticateWithPasskey()\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Name from apiKey to secretKey in createClerkExpressRequireAuth\nDESCRIPTION: This code demonstrates how to update the deprecated 'apiKey' parameter to the new 'secretKey' parameter when creating Clerk Express authentication middleware. The change is required for continued functionality with newer versions of the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkexpressrequireauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkExpressRequireAuth } from '@clerk/clerk-sdk-node';\n\n- createClerkExpressRequireAuth({ apiKey: '...' });\n+ createClerkExpressRequireAuth({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Using Experimental Subscription Details Method in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the experimental method for opening the SubscriptionDetails component in a React application using TypeScript.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nclerk.__experimental_openSubscriptionDetails(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URLs with `Clerk.load` in JavaScript\nDESCRIPTION: Demonstrates how to configure the `afterSignUpUrl` and `afterSignInUrl` when initializing Clerk using `Clerk.load` in a non-React JavaScript environment. Replace 'x' and 'y' with the desired absolute or relative redirect URLs. This configuration dictates where users are sent after completing sign-up or sign-in flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/redirecttohome.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nClerk.load({ afterSignUpUrl: 'x', afterSignInUrl: 'y' })\n```\n\n----------------------------------------\n\nTITLE: Updating User with createOrganizationsLimit in @clerk/backend\nDESCRIPTION: Example of using the new createOrganizationsLimit parameter when updating a user with the @clerk/backend SDK. Shows how to set a limit and remove it.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClerkClient }  from '@clerk/backend';\n\nconst clerkClient = createClerkClient({...});\n// Update user with createOrganizationsLimit equals 10\nawait clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 10 })\n\n// Remove createOrganizationsLimit\nawait clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 0 })\n```\n\n----------------------------------------\n\nTITLE: Updating Experimental AuthObject Property and Reverification APIs in Clerk JS\nDESCRIPTION: Updates the experimental AuthObject property `__experimental_factorVerificationAge` to `factorVerificationAge`. Additionally, renames related experimental reverification APIs: `__experimental_reverificationError` becomes `__reverificationError`, and `__experimental_reverificationErrorResponse` becomes `reverificationErrorResponse`. This change aims to stabilize these previously experimental features.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n- __experimental_factorVerificationAge -> factorVerificationAge\n- __experimental_reverificationError -> __reverificationError\n- __experimental_reverificationErrorResponse -> reverificationErrorResponse\n```\n\n----------------------------------------\n\nTITLE: Updating Import Path of MultiSessionAppSupport in Clerk React (Diff)\nDESCRIPTION: Demonstrates the required change to the import statement for the MultiSessionAppSupport component in a JavaScript Clerk React project. The snippet shows a diff where the import is transitioned from '@clerk/clerk-react' to '@clerk/clerk-react/internal', reflecting its undocumented, internal-only nature. No other code changes are necessary, but external use of this API is discouraged as it is not covered by semantic versioning guarantees.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/multisessionappsupport-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { MultiSessionAppSupport } from '@clerk/clerk-react'\\n+ import { MultiSessionAppSupport } from '@clerk/clerk-react/internal'\n```\n\n----------------------------------------\n\nTITLE: Custom Google OneTap Session Management\nDESCRIPTION: Example showing custom handling of Google OneTap authentication with manual session management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ngoogle.accounts.id.initialize({\n  callback: async response => {\n    const signInOrUp = await Clerk.authenticateWithGoogleOneTap({\n      token: response.credential,\n    });\n    if (signInOrUp.status === 'complete') {\n      await Clerk.setActive({\n        session: signInOrUp.createdSessionId,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing webhook verification in Astro\nDESCRIPTION: Example of how to use the verifyWebhook function to handle and verify incoming Clerk webhooks in an Astro API route.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/webhooks.ts\nimport { verifyWebhook } from '@clerk/astro/webhooks';\n\nexport const POST = ({ request }) => {\n  try {\n    const evt = await verifyWebhook(request);\n\n    // Do something with payload\n    const { id } = evt.data;\n    const eventType = evt.type;\n    console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n    console.log('Webhook payload:', body);\n\n    return new Response('Webhook received', { status: 200 });\n  } catch (err) {\n    console.error('Error: Could not verify webhook:', err);\n    return new Response('Error: Verification error', {\n      status: 400,\n    });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Support to Next.js Server-Side Authentication\nDESCRIPTION: Feature that adds organization access on the request object and loadOrg option for Next.js withServerSideAuth middleware, enabling server-side organization data access.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Features mentioned in commits d064448 and 0889bde\n// Add req.organization access on gssp\n// Add loadOrg option for Next.js withServerSideAuth middleware\n```\n\n----------------------------------------\n\nTITLE: Checking Authorization with Assurance Levels Using Clerk has() Utility - TypeScript\nDESCRIPTION: Demonstrates using the has function with an experimental assurance configuration in TypeScript. The snippet shows how to specify multifactor authentication levels and time constraints by passing an options object to has, which requires Clerk's shared utilities. Key parameters include level (e.g., 'L2.secondFactor') and maxAge (e.g., 'A1.10min'), constraining the recency and method of user authentication when checking permissions programmatically.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nhas({\n  __experimental_assurance: {\n    level: 'L2.secondFactor',\n    maxAge: 'A1.10min',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Import Statement for Fastify in JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the import statement for Clerk from using a default import to a named import (createClerkClient) in the @clerk/fastify package. There are no additional dependencies aside from having the correct Clerk package version installed. The diff clearly shows the line to be removed and the new line to add, ensuring correct usage after the breaking change.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/fastify/clerk-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Clerk from \"@clerk/fastify\"\n+ import { createClerkClient } from \"@clerk/fastify\"\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Input for Destructive Actions in JavaScript\nDESCRIPTION: Adds a confirmation input as an additional check when performing destructive actions like deleting an organization, deleting a user account, or leaving an organization.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n- Add a confirmation input as an additional check when doing destructive actions such as: ([#1454](https://github.com/clerk/javascript/pull/1454)) by [@raptisj](https://github.com/raptisj)\n\n  - delete an organization\n  - delete a user account\n  - leave an organization\n\n  Νew localization keys were introduced to support the above\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Functions Import Path Update\nDESCRIPTION: Demonstrates the new import path for JWT helper functions from @clerk/backend/jwt subpath instead of the main package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeJwt, hasValidSignature, signJwt, verifyJwt } from '@clerk/backend/jwt';\n```\n\n----------------------------------------\n\nTITLE: Example User-Agent Header for Clerk BAPI Requests\nDESCRIPTION: Illustrates the updated `User-Agent` header format sent in BAPI (Backend API) requests from Clerk SDKs. This header now includes the specific SDK package name (e.g., `@clerk/nextjs`) and its version (e.g., `5.0.0-alpha-v5.16`), replacing the older `Clerk-Backend-SDK` header. This change aids in identifying the source and version of SDK requests made to Clerk's backend.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nUser-Agent: @clerk/nextjs@5.0.0-alpha-v5.16\n```\n\n----------------------------------------\n\nTITLE: Opening Subscription Details in React with Clerk\nDESCRIPTION: Introduces an experimental method for opening the SubscriptionDetails component in React applications using Clerk.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclerk.__experimental_openSubscriptionDetails(...)\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Cross Origin Anonymous\nDESCRIPTION: Added cross origin anonymous support to the interstitial feature in Remix integration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **remix:** Add cross origin anonymous to interstitial ([#246](https://github.com/clerk/javascript/issues/246)) ([acd7160](https://github.com/clerk/javascript/commit/acd7160a7b209fb65243fecb33b848345876585c))\n```\n\n----------------------------------------\n\nTITLE: Migrating Package Version Parameter in Clerk JS (diff)\nDESCRIPTION: Demonstrates the migration from providing the 'pkgVersion' parameter to instead using the 'clerkJSVersion' parameter in the 'loadInterstitialFromLocal' function. The example clarifies the exact change required in client code when upgrading to a newer revision of the Clerk JS SDK. There are no external dependencies unique to this migration, and the main constraint is that 'loadInterstitialFromLocal' no longer accepts 'pkgVersion'. Inputs: object parameter with 'clerkJSVersion'. Output: function behaves with new parameter.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/pkgversion.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- loadInterstitialFromLocal({ pkgVersion: \"...\" })\\n+ loadInterstitialFromLocal({ clerkJSVersion: \"...\" })\n```\n\n----------------------------------------\n\nTITLE: Adapting Code for getOrganizationInvitationList Return Type Change in Clerk JS\nDESCRIPTION: This code diff illustrates the necessary change when using `clerkClient.organizations.getOrganizationInvitationList`. Previously, the returned `data` was the array itself. With the updated pagination structure, the array of invitations is now accessed via the `data` property of the returned object (`data.data`).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getorganizationinvitationlist-return-type-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const data = await clerkClient.organizations.getOrganizationInvitationList({\n    organizationId: \"...\",\n  })\n\n- data.forEach(() => {})\n+ data.data.forEach(() => {})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Plasmo\nDESCRIPTION: Environment variable configuration for Plasmo to set the Clerk publishable key.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Plasmo\nPLASMO_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxx\n```\n\n----------------------------------------\n\nTITLE: User-centric Operations with Clerk Backend API\nDESCRIPTION: Shows various user-related operations that can be performed using the Backend API client. These include retrieving organization invitations, deleting user credentials, and managing user authentication methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\n\nawait clerkClient.users.getOrganizationInvitationList({\n  userId: 'user_xxxxxx',\n  status: 'pending',\n});\nawait clerkClient.users.deleteUserPasskey({\n  userId: 'user_xxxxxx',\n  passkeyIdentificationId: 'xxxxxxx',\n});\nawait clerkClient.users.deleteUserWeb3Wallet({\n  userId: 'user_xxxxxx',\n  web3WalletIdentificationId: 'xxxxxxx',\n});\nawait clerkClient.users.deleteUserExternalAccount({\n  userId: 'user_xxxxxx',\n  externalAccountId: 'xxxxxxx',\n});\nawait clerkClient.users.deleteUserBackupCodes('user_xxxxxx');\nawait clerkClient.users.deleteUserTOTP('user_xxxxxx');\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWKS and Managing Blocklist Identifiers in TypeScript\nDESCRIPTION: Demonstrates how to retrieve JWKS and manage blocklist identifiers using the Clerk backend client, including listing, creating, and deleting operations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient } from '@clerk/backend';\n\nconst clerkClient = createClerkClient(...);\n\n// JWKS retrieval\nawait clerkClient.jwks.getJWKS();\n\n// Blocklist Identifiers\nawait clerkClient.blocklistIdentifiers.getBlocklistIdentifierList();\nawait clerkClient.blocklistIdentifiers.createBlocklistIdentifier({ identifier });\nawait clerkClient.blocklistIdentifiers.deleteBlocklistIdentifier('blocklistIdentifierId');\n\n// Allowlist Identifiers\nconst res = await clerkClient.blocklistIdentifiers.getAllowlistIdentifierList({ limit, offset });\n```\n\n----------------------------------------\n\nTITLE: Updating `getOrganizationInvitations` Pagination Arguments (JavaScript Diff)\nDESCRIPTION: This diff illustrates the required update for pagination parameters when calling `user.getOrganizationInvitations`. The `limit` parameter is replaced with `pageSize` to specify the number of results per page, and `offset` is replaced with `initialPage` (assuming a page size, e.g., 10) to define the starting page number. This change aims to improve clarity for pagination control within the Clerk library.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/user-getorganizationinvitations-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await user.getOrganizationInvitations({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Functions Export Changes\nDESCRIPTION: Example showing the new import path for JWT helper functions from @clerk/backend/jwt instead of the top-level @clerk/backend package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeJwt, hasValidSignature, signJwt, verifyJwt } from '@clerk/backend/jwt';\n```\n\n----------------------------------------\n\nTITLE: Enhancing Type Safety for withServerSideAuth Return Values\nDESCRIPTION: A type system improvement that strictly types all possible return value combinations from the withServerSideAuth function, providing better developer experience and type checking.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_81\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs:** Strictly type all possible withServerSideAuth return value combinations ([beba831](https://github.com/clerk/javascript/commit/beba83195828737ef20ca4450badded92d95d098))\n```\n\n----------------------------------------\n\nTITLE: Initializing Clerk Client in Chrome Extension Background Script\nDESCRIPTION: Example showing how to create a Clerk client and retrieve authentication tokens in a Chrome Extension background script. Includes setup for message listener and token retrieval.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { __unstable__createClerkClient } from '@clerk/chrome-extension/background';\n\nconst publishableKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY || '';\n\nasync function getToken() {\n  const clerk = await __unstable__createClerkClient({\n    publishableKey /*, syncSessionWithTab: true */,\n  });\n  return await clerk.session?.getToken();\n}\n\n// NOTE: A runtime listener cannot be async.\n//       It must return true, in order to keep the connection open and send a response later.\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  getToken().then(token => sendResponse({ token }));\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Svix Dependency for Webhook Verification\nDESCRIPTION: This snippet shows how to install the Svix dependency, which is required for verifying Clerk webhooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install svix\n```\n\n----------------------------------------\n\nTITLE: Adapting to New `getInvitationList` Return Signature in Clerk JS\nDESCRIPTION: Illustrates the required code change for handling the updated return signature of `clerkClient.invitations.getInvitationList` in the Clerk JavaScript SDK. Instead of directly assigning the result to `data`, the response object should be destructured to access both the `data` array (the list of invitations) and the `totalCount` (the total number of invitations available). This change was introduced in Core 2.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getinvitationlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const data = await clerkClient.invitations.getInvitationList()\n+ const { data, totalCount } = await clerkClient.invitations.getInvitationList()\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Support Email from Environment API\nDESCRIPTION: Enhancement that retrieves the support email from the FAPI /v1/environment endpoint if it exists, improving support contact information management.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js:** Get support email from FAPI /v1/environment if exists ([c9bb8d7](https://github.com/clerk/javascript/commit/c9bb8d7aaf3958207d4799bdd30e3b15b2890a5d))\n```\n\n----------------------------------------\n\nTITLE: Retained Type Exports from @clerk/backend\nDESCRIPTION: Shows the type exports that will remain available in the @clerk/backend package after the removal of internal exports.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Migrating signJwt Import Path in Next.js with Clerk\nDESCRIPTION: Shows how to update the import path for the signJwt function from the root @clerk/nextjs package to @clerk/nextjs/server. This change is necessary because signJwt is a server-side only utility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/signjwt-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { signJwt } from \"@clerk/nextjs\"\n+ import { signJwt } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Clerk Singleton State with Clerk.status in JavaScript\nDESCRIPTION: Introduces the Clerk.status property for tracking the state of the clerk singleton. It can have values of 'loading', 'error', 'ready', or 'degraded'. The Clerk.loaded property is computed based on this status.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nClerk.status // Possible values: \"loading\", \"error\", \"ready\", \"degraded\"\n\nClerk.loaded // true when status is \"ready\" or \"degraded\", false otherwise\n```\n\n----------------------------------------\n\nTITLE: Full list of exports moved to @clerk/shared/react\nDESCRIPTION: Complete list of React-specific exports that have been moved from the root imports to the react subpath in @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nexport {\n  ClerkInstanceContext,\n  ClientContext,\n  OrganizationContext,\n  OrganizationProvider,\n  SessionContext,\n  UserContext,\n  assertContextExists,\n  createContextAndHook,\n  useClerkInstanceContext,\n  useClientContext,\n  useOrganization,\n  useOrganizationContext,\n  useOrganizationList,\n  useOrganizations,\n  useSafeLayoutEffect,\n  useSessionContext,\n  useUserContext,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @clerk/themes package using npm\nDESCRIPTION: This command installs the @clerk/themes package using npm. It's a prerequisite for using Clerk's prebuilt themes in your application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @clerk/themes\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Client Initialization in JavaScript\nDESCRIPTION: This code snippet shows the changes required to update the Clerk client initialization process. It includes updating the import statement, changing the parameter name from 'apiKey' to 'secretKey', and updating the authenticateRequest method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createclerkclient-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Clerk } from '@clerk/backend';\n+ import { createClerkClient } from '@clerk/backend';\n\n- const clerkClient = Clerk({ apiKey: '...' });\n+ const clerkClient = createClerkClient({ secretKey: '...' });\n\n- clerkClient.authenticateRequest({ apiKey: '...' });\n+ clerkClient.authenticateRequest({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Publishable Key in Expo Environment\nDESCRIPTION: Shows how to set the Clerk publishable key using the EXPO_PUBLIC_ prefix in a .env file for Expo applications. This allows Expo applications to properly access Clerk configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: dotenv\nCODE:\n```\n## .env\n\nEXPO_PUBLIC_CLERK_PUBLISHABLE_KEY=xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Refactoring Pagination Arguments in Organization.getMemberships - JavaScript\nDESCRIPTION: Demonstrates how to update the argument names for pagination when calling the Organization.getMemberships function in JavaScript. 'limit' is replaced by 'pageSize', and 'offset' is replaced by 'initialPage' to enhance clarity and usability. The example shows both the old and new syntax, with only the argument names changing and all other functionality remaining the same.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getmemberships-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  const { data } = await organization.getMemberships({\\n-   limit: 10,\\n+   pageSize: 10,\\n-   offset: 10,\\n+   initialPage: 2,\\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating Return Signature of Clients.getClientList in Clerk JavaScript SDK (diff)\nDESCRIPTION: This diff code snippet demonstrates how to update the usage of the Clients.getClientList method in the Clerk JavaScript SDK following a change in the return signature. Previously, the method returned only data, but now it returns an object containing data and totalCount, reflecting backend pagination updates. It shows the necessary change to deconstruct the new response shape. No additional dependencies are required beyond the Clerk SDK itself, and the main parameter affected is the method usage in asynchronous calls. The expected output now includes both the data array and the total count of items, and developers should update their variable assignment accordingly.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getclientlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.clients.getClientList()\\n+ const { data, totalCount } = await clerkClient.allowlistIdentifiers.getClientList()\n```\n\n----------------------------------------\n\nTITLE: Internal Helpers and Enums Export Changes\nDESCRIPTION: Example showing the new import path for internal helpers and enums from @clerk/backend/internal instead of the top-level @clerk/backend package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthStatus,\n  buildRequestUrl,\n  constants,\n  createAuthenticateRequest,\n  createIsomorphicRequest,\n  debugRequestState,\n  makeAuthObjectSerializable,\n  prunePrivateMetadata,\n  redirect,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Referencing ClerkProvider dynamic Component (JSX)\nDESCRIPTION: References the `<ClerkProvider dynamic />` component in the context of wrapping the `useAuth()` hook. The `dynamic` prop likely relates to how Clerk state or components are loaded.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<ClerkProvider dynamic />\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSSO Host Permissions in Chrome Extension Manifest\nDESCRIPTION: Configuration examples for the manifest.json file showing how to set up host permissions for WebSSO in both development and production environments for Chrome extensions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\n    // ...\n    \"http://localhost\"\n    // ...\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\n    // ...\n    \"https://clerk.example.com\"\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Fix for Next.js and Backend Core\nDESCRIPTION: A bug fix that corrects the error parsing in the handleError function, affecting both the @clerk/nextjs and backend-core packages. This was implemented in version 3.3.7.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_74\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs,backend-core:** Fix handleError parsing ([4eb9732](https://github.com/clerk/javascript/commit/4eb97324d9153aa91492982d00bb76b8592947c7))\n```\n\n----------------------------------------\n\nTITLE: Error Types Export Changes\nDESCRIPTION: Example showing the new import path for error-related types and enums from @clerk/backend/errors subpath.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TokenVerificationError,\n  TokenVerificationErrorAction,\n  TokenVerificationErrorCode,\n  TokenVerificationErrorReason,\n} from '@clerk/backend/errors';\n```\n\n----------------------------------------\n\nTITLE: Migrating cookie and glob utilities\nDESCRIPTION: Example showing how to migrate cookie and glob utilities from the root imports to their specific subpaths in @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- import { createCookieHandler, globs } from \"@clerk/shared\"\n+ import { createCookieHandler } from \"@clerk/shared/cookie\"\n+ import { globs } from \"@clerk/shared/globs\"\n```\n\n----------------------------------------\n\nTITLE: React Component Error Example - Invalid Routing Configuration\nDESCRIPTION: Example showing an invalid component configuration that will throw a runtime error when using incompatible routing strategy with path property.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\n<SignIn\n  routing='hash'\n  path='/sign-in'\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Passkey Authentication Errors in TypeScript\nDESCRIPTION: Demonstrates how to catch and handle specific runtime errors during passkey authentication using `__experimental_authenticateWithPasskey`. It utilizes a try-catch block and the `isClerkRuntimeError` type guard to check for specific error codes, such as `passkey_operation_aborted`, introduced in version 2.0.0-beta.19 for improved error handling.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n\n\n```\n```\n\n----------------------------------------\n\nTITLE: Enhancing requireAuth Middleware in Clerk Express Package\nDESCRIPTION: Makes the requireAuth middleware more flexible and adds an opt-in option for handshake flow in version 0.1.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- Make `requireAuth` middleware more flexible ([#4159](https://github.com/clerk/javascript/pull/4159)) by [@wobsoriano](https://github.com/wobsoriano)\n\n- Add opt-in option for handshake flow ([#4157](https://github.com/clerk/javascript/pull/4157)) by [@wobsoriano](https://github.com/wobsoriano)\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Path Matcher Utility - Clerk Shared Module - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the createPathMatcher function from the @clerk/shared/pathMatcher package in TypeScript. Usage of this utility enables route matching logic to be shared across different SDK environments such as @clerk/astro and @clerk/nextjs, reducing duplication. No additional dependencies are required beyond @clerk/shared; expected usage is the path matching in Clerk-integrated applications, with createPathMatcher accepting route specifications and returning matcher functions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createPathMatcher } from '@clerk/shared/pathMatcher';\n```\n\n----------------------------------------\n\nTITLE: WebSSO Storage Cache Interface Definition\nDESCRIPTION: TypeScript interface definition for the new storageCache prop replacing tokenCache in WebSSO implementation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype StorageCache = {\n  createKey: (...keys: string[]) => string;\n  get: <T = any>(key: string) => Promise<T>;\n  remove: (key: string) => Promise<void>;\n  set: (key: string, value: string) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating SignJWTError Import Path in Clerk (diff)\nDESCRIPTION: Demonstrates how to update the import statement for SignJWTError in Clerk by changing the path from '@clerk/backend' to '@clerk/backend/errors'. No additional dependencies are required beyond the @clerk/backend package version where this change is relevant. The snippet uses the diff format to illustrate the required one-line change. Input is the old and revised import statements; output is the expected correct import. Suitable for developers migrating code to the new package structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/signjwterror-import-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { SignJWTError } from \"@clerk/backend\"\\n+ import { SignJWTError } from \"@clerk/backend/errors\"\n```\n\n----------------------------------------\n\nTITLE: Customizing OrganizationProfile Component in React\nDESCRIPTION: Example of how to use the new customization features in the OrganizationProfile component, including adding custom pages, external links, and reordering default routes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\n<OrganizationProfile>\n  <OrganizationProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </OrganizationProfile.Page>\n  <OrganizationProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <OrganizationProfile.Page label='members' />\n  <OrganizationProfile.Page label='settings' />\n</OrganizationProfile>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Resource Type Imports\nDESCRIPTION: Example showing resource type imports that are still available from root\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Import to createClerkClient in Remix Applications\nDESCRIPTION: Shows how to migrate from the deprecated default 'Clerk' import to the new named 'createClerkClient' import from the @clerk/remix package. This change is required as the Clerk default import has been removed in favor of the named import pattern.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/clerk-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Clerk from \"@clerk/remix\"\n+ import { createClerkClient } from \"@clerk/remix\"\n```\n\n----------------------------------------\n\nTITLE: Customizing OrganizationProfile in React\nDESCRIPTION: Example of how to customize the OrganizationProfile component in React by adding custom pages and external links.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<OrganizationProfile>\n  <OrganizationProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </OrganizationProfile.Page>\n  <OrganizationProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <OrganizationProfile.Page label='members' />\n  <OrganizationProfile.Page label='settings' />\n</OrganizationProfile>\n```\n\n----------------------------------------\n\nTITLE: Switching Imports for Internal Utilities and Errors - Clerk React Typescript\nDESCRIPTION: Illustrates migration of internal and error-related imports from @clerk/clerk-react to their respective new subpaths. Developers should move imports of setErrorThrowerOptions and MultisessionAppSupport to /internal subpath, and import error-type utilities from /errors. All component and utility names remain the same, but source paths change. Dependencies are @clerk/clerk-react package. Inputs are TypeScript/ES modules, outputs are modernized import statements. This reduces surface exports and clarifies usage boundaries.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { **internal**setErrorThrowerOptions } from '@clerk/clerk-react';\n// After\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\n\n    // Before\n    import { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react';\n    // After\n    import { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react/errors';\n\n    // Before\n    import { MultisessionAppSupport } from '@clerk/clerk-react';\n    // After\n    import { MultisessionAppSupport } from '@clerk/clerk-react/internal';\n```\n\n----------------------------------------\n\nTITLE: Importing Deprecated Email Link Error Code\nDESCRIPTION: Code example showing migration from deprecated EmailLinkErrorCode to new EmailLinkErrorCodeStatus import\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n- import { EmailLinkErrorCode } from '@clerk/nextjs/errors'\n+ import { EmailLinkErrorCodeStatus } from '@clerk/nextjs/errors'\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for Clerk Chrome Extension\nDESCRIPTION: cURL command to configure allowed origins for the Clerk instance to enable extension communication. Requires Clerk Secret Key and extension key.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl  -X PATCH https://api.clerk.com/v1/instance \\\n      -H \"Content-type: application/json\" \\\n      -H \"Authorization: Bearer <CLERK_SECRET_KEY>\" \\\n      -d '{\"allowed_origins\": [\"chrome-extension://<YOUR_EXTENSION_KEY>\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Authentication Components with Alternative Routing in JSX\nDESCRIPTION: This snippet shows how to use Clerk authentication components with hash or virtual routing strategies instead of the new default path routing.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/path-routing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<UserProfile routing=\"hash\" />\n<OrganizationProfile routing=\"virtual\" />\n```\n\n----------------------------------------\n\nTITLE: Enforcing Return Type in withServerSideAuth Callback\nDESCRIPTION: A type safety improvement that enforces the return type for the withServerSideAuth callback function, helping prevent type-related errors during development.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_78\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs:** Enforce withServerSideAuth callback return type ([3766a49](https://github.com/clerk/javascript/commit/3766a4938641de36f953ec49f45d539f971d778c))\n```\n\n----------------------------------------\n\nTITLE: Migrating Top-Level Helper Imports to Internal Path - TypeScript\nDESCRIPTION: Shows migration from importing authentication helpers directly from '@clerk/backend' to '@clerk/backend/internal' due to breaking changes. This ensures that only public APIs are accessed from the top-level and advanced or internal features are consumed from their new internal location. Requirements include Node.js 18.18.0 or later, and '@clerk/backend' library. The main input is the module import path.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { AuthStatus, ... } from '@clerk/backend';\n// After\nimport { AuthStatus, ... } from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Implementing Google One Tap Component in TSX\nDESCRIPTION: Example of using the experimental Google One Tap component with customizable configuration options for sign-in and sign-up redirect URLs.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<__experimental_GoogleOneTap />\n```\n\n----------------------------------------\n\nTITLE: Accessing Pagination Data in TypeScript\nDESCRIPTION: Demonstrates how to access the new totalCount property from Clerk Backend API responses for paginated data or responses with an array of objects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\n\nconst clerkClient = Clerk({ secretKey: '...' });\n\n// current\nconst { data } = await clerkClient.organizations.getOrganizationList();\nconsole.log('totalCount: ', data.length);\n\n// new\nconst { data, totalCount } = await clerkClient.organizations.getOrganizationList();\nconsole.log('totalCount: ', totalCount);\n```\n\n----------------------------------------\n\nTITLE: Clerk Client Creation Update\nDESCRIPTION: Migration from direct Clerk import to createClerkClient factory method usage\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Clerk } from '@clerk/nextjs';\nconst clerk = Clerk({ secretKey: '...' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClerkClient } from '@clerk/nextjs';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating UserButton Component for Default Redirect in Clerk Core 2\nDESCRIPTION: Demonstrates the removal of explicit '/' redirect URL in UserButton component since it's now the default value. This change simplifies the code as the afterSignOutUrl prop is no longer needed when redirecting to the root path.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/after-sign-x-handling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <UserButton afterSignOutUrl='/' />\n+ <UserButton />\n```\n\n----------------------------------------\n\nTITLE: Comparing `setSession` and `setActive` Parameter Changes (Diff)\nDESCRIPTION: This diff highlights the syntactical changes required when migrating from `setSession` to `setActive`. `setActive` requires its parameters (`session` and optional `beforeEmit`) to be passed within a single object, whereas `setSession` accepted them as direct arguments. The `session` parameter can be either a session ID string or a session object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/setsession.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- await setSession('sessionID', () => void)\n+ await setActive({ session: 'sessionID',  beforeEmit: () => void })\n\n- await setSession(sessionObj)\n+ await setActive({ session: sessionObj })\n\n- await setSession(sessionObj, () => void)\n+ await setActive({ session: sessionObj,  beforeEmit: () => void })\n```\n\n----------------------------------------\n\nTITLE: Adapting Code for `getOrganizationList` Pagination Return Type Change (JavaScript Diff)\nDESCRIPTION: This code diff illustrates the necessary adjustment when calling `organization.getOrganizationList()`. Previously, the result was an array that could be directly iterated (e.g., using `forEach`). With the updated return type `{ data: [Items], totalCount: number }`, iteration now requires accessing the `data` property of the returned object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getorganizationlist-return-type-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n  const { organization } = useOrganization()\n  const orgList = organization.getOrganizationList()\n\n- orgList.forEach(() => {})\n+ orgList.data.forEach(() => {})\n```\n```\n\n----------------------------------------\n\nTITLE: Moving Shared Next.js SSR Types to Types Package\nDESCRIPTION: A refactoring that moves shared server-side rendering types from the Next.js package to a common types package, improving code organization and reusability across Clerk packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_80\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs:** Move shared NextJS SSR types to types package ([78d8c7c](https://github.com/clerk/javascript/commit/78d8c7c3e84f3926127e48c655793a0fca3cdc2c))\n```\n\n----------------------------------------\n\nTITLE: Running Backport Script for PR Merging in Shell\nDESCRIPTION: Command to backport a specific PR to an older release branch using the backport script. This requires setting up a GitHub access token in the .env file to authenticate with the GitHub API.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/PUBLISH.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode backport.mjs release/v4 1234\n```\n\n----------------------------------------\n\nTITLE: Deprecation Updates - Clerk Type Definitions\nDESCRIPTION: New pagination types introduced in @clerk/types package for consistent pagination handling across the SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nClerkPaginationRequest // describes pagination related props in request payload\nClerkPaginatedResponse // describes pagination related props in response body\nClerkPaginationParams // describes pagination related props in api client method params\n```\n\n----------------------------------------\n\nTITLE: Refactoring Redirect Import Path in Clerk Backend (diff)\nDESCRIPTION: This diff snippet demonstrates the required update for importing the \\`redirect\\` function in Clerk's JavaScript SDK. Developers must change their import statement from \\`@clerk/backend\\` to \\`@clerk/backend/internal\\` to ensure compatibility. This change has no additional functionality differences but signifies usage of an internal API, which is not stable under semver guarantees.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/redirect-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { redirect } from \"@clerk/backend\"\n+ import { redirect } from \"@clerk/backend/internal\"\n```\n\n----------------------------------------\n\nTITLE: Dropping Internal Resource Exports from Clerk Backend - TypeScript\nDESCRIPTION: Explains deprecating several internal resource exports from '@clerk/backend', illustrating both legacy usage and informing that no replacement is necessary for these classes. The snippet is for informative purposes to clarify previous patterns and the removal of exports, highlighting the shift toward type-only imports for major resources. Dependency: Node.js (>=18.18.0), '@clerk/backend'. No runtime parameters required.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport {\n  AllowlistIdentifier,\n  Client,\n  DeletedObject,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  OauthAccessToken,\n  ObjectType,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  RedirectUrl,\n  SMSMessage,\n  Session,\n  SignInToken,\n  Token,\n  User,\n  Verification,\n} from '@clerk/backend';\n// After : no alternative since there is no need to use those classes\n```\n\n----------------------------------------\n\nTITLE: JSX Component Usage Example\nDESCRIPTION: Examples showing different ways to use Clerk components with path-based or hash routing\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// Without path or routing props, an error with be thrown\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// Alternative #1\n<UserProfile path=\\\"/whatever\\\"/>\n<CreateOrganization path=\\\"/whatever\\\"/>\n<OrganizationProfile path=\\\"/whatever\\\"/>\n<SignIn path=\\\"/whatever\\\"/>\n<SignUp path=\\\"/whatever\\\"/>\n\n// Alternative #2\n<UserProfile routing=\\\"hash_or_virtual\\\"/>\n<CreateOrganization routing=\\\"hash_or_virtual\\\"/>\n<OrganizationProfile routing=\\\"hash_or_virtual\\\"/>\n<SignIn routing=\\\"hash_or_virtual\\\"/>\n<SignUp routing=\\\"hash_or_virtual\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing createEventBus from Clerk Shared EventBus in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and use a type-safe event bus using the createEventBus function exported from @clerk/shared/eventBus. It shows subscribing to events, emitting events, and unsubscribing from events.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a type-safe event bus\nconst bus = createEventBus<{\n  'user:login': { id: string };\n  error: Error;\n}>();\n\n// Subscribe to events\nconst onLogin = ({ id }: { id: string }) => console.log('User logged in:', id);\nbus.on('user:login', onLogin);\n\n// Subscribe with priority (runs before regular handlers)\nbus.onBefore('error', error => console.error('Error occurred:', error));\n\n// Emit events\nbus.emit('user:login', { id: 'user_123' });\n\n// Unsubscribe specific handler\nbus.off('user:login', onLogin);\n\n// Unsubscribe all handlers\nbus.off('error');\n```\n\n----------------------------------------\n\nTITLE: Migrating React-related utilities\nDESCRIPTION: Example showing how to migrate React-specific utilities from the root imports to the react subpath in @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- import { useSafeLayoutEffect, ClerkInstanceContext } from \"@clerk/shared\"\n+ import { useSafeLayoutEffect, ClerkInstanceContext } from \"@clerk/shared/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Permissions for Clerk Browser Extension in JSON\nDESCRIPTION: This snippet shows the required host permissions for the extension to communicate with the host application. It includes localhost, production domain, and Clerk API endpoints. Replace placeholder values with actual domains.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/manifest.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host_permissions\": [\n    \"http://localhost/*\"\n    \"https://<YOUR_PRODUCTION_APP_DOMAIN>/*\",\n    \"https://YOUR_CLERK_DEVELOPMENT_FRONTEND_API.clerk.accounts.dev/*\",\n    \"https://<YOUR_CLERK_PRODUCTION_FRONTEND_API>/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake User with Playwright and Clerk - TypeScript\nDESCRIPTION: Demonstrates Playwright test setup for creating a disposable fake user via Clerk's `createTestUtils`, then ensuring cleanup after all tests. Dependencies include Clerk test utilities, Playwright test classes, and correct TypeScript typings (`FakeUser`, `Application`). The snippet initializes the user before tests, cleans up resources after, and is structured for parallel smoke testing.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Rest of imports from previous section\\nimport type { FakeUser } from '../testUtils';\\n\\ntest.describe('Smoke test', () => {\\n  test.describe.configure({ mode: 'parallel' });\\n  let app: Application;\\n  let fakeUser: FakeUser;\\n\\n  test.beforeAll(async () => {\\n    // ...\\n\\n    const m = createTestUtils({ app });\\n    fakeUser = m.services.users.createFakeUser();\\n    await m.services.users.createBapiUser(fakeUser);\\n  });\\n\\n  test.afterAll(async () => {\\n    await fakeUser.deleteIfExists();\\n    await app.teardown();\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Internal Class Exports from @clerk/backend\nDESCRIPTION: Documents the removal of internal class exports from the top-level API of @clerk/backend package. Shows the before state of imports that are being deprecated.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AllowlistIdentifier,\n  Client,\n  DeletedObject,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  OauthAccessToken,\n  ObjectType,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  RedirectUrl,\n  SMSMessage,\n  Session,\n  SignInToken,\n  Token,\n  User,\n  Verification,\n} from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Customizing Google One Tap Behavior\nDESCRIPTION: Example showing how to configure Google One Tap experience options including tap outside behavior and support settings.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n<__experimental_GoogleOneTap\n  cancelOnTapOutside={false}\n  itpSupport={false}\n  fedCmSupport={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Backup Code Strategy Support in Clerk SignIn (TSX)\nDESCRIPTION: This snippet shows how to configure a SignIn step named 'choose-strategy' to include support for the 'backup_code' authentication method using the `SignIn.SupportedStrategy` component within a Clerk Elements implementation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<SignIn.Step name='choose-strategy'>\n  <SignIn.SupportedStrategy name='backup_code'>Use a backup code</SignIn.SupportedStrategy>\n<SignIn.Step>\n```\n```\n\n----------------------------------------\n\nTITLE: Update EmailLinkErrorCode import path in Clerk Next.js\nDESCRIPTION: This code diff illustrates the required modification for importing `EmailLinkErrorCode` in a Clerk Next.js project. The import path must be changed from `@clerk/nextjs` to `@clerk/nextjs/errors` to reflect its relocation within the package structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/emaillinkerrorcode-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { EmailLinkErrorCode } from \"@clerk/nextjs\"\n+ import { EmailLinkErrorCode } from \"@clerk/nextjs/errors\"\n```\n\n----------------------------------------\n\nTITLE: Updating Profile Image URL Property Using Regular Expressions in JavaScript Files\nDESCRIPTION: This snippet outlines the configuration for a find-and-replace operation intended to update references to the 'profileImageUrl' property across JavaScript codebases using a regular expression matcher and a replacement string. The matcher is a string that indicates a regex pattern for locating the deprecated 'profileImageUrl' property in code, while 'replaceWithString' specifies the new property, 'imageUrl', to be substituted. This approach presumes that users will utilize this configuration with automated migration or codemod tooling; no dependencies other than standard JavaScript regex support are required. The limitation is that it only applies to direct textual matches and does not perform context-aware AST transformations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-orgpublicdata-profileimageurl.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmatcher: \"\\\\.profileImageUrl\"\nreplaceWithString: '.imageUrl'\n```\n\n----------------------------------------\n\nTITLE: Opening Subscription Details Component in React\nDESCRIPTION: Example showing how to use the experimental method for opening the SubscriptionDetails component in React applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nclerk.__experimental_openSubscriptionDetails(...)\n```\n\n----------------------------------------\n\nTITLE: Localization Key Changes\nDESCRIPTION: Updates to localization key names and removal of deprecated keys in the Clerk SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// Removed keys\nformFieldLabel__emailAddress_phoneNumber\nformFieldLabel__phoneNumber_username\nformFieldLabel__emailAddress_phoneNumber_username\n\n// Updated keys\ntitle__connectionFailed // instead of title__conectionFailed\nactionLabel__connectionFailed // instead of actionLabel__conectionFailed\nheaderTitle__members // instead of headerTitle__active\nheaderTitle__invitations // instead of headerTitle__invited\n```\n\n----------------------------------------\n\nTITLE: Configuring Cypress support in @clerk/testing\nDESCRIPTION: Code snippet showing the introduction of Cypress framework support in version 1.1.0 of the @clerk/testing package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- Introduce support for the Cypress framework ([#3378](https://github.com/clerk/javascript/pull/3378)) by [@anagstef](https://github.com/anagstef)\n```\n\n----------------------------------------\n\nTITLE: Refactoring Import Path for Clerk Constants in Next.js (diff)\nDESCRIPTION: This code snippet provides a diff view showing the correct way to update the import of the \"constants\" helper from Clerk's Next.js SDK. It demonstrates moving the import from the general package to the server-specific export, ensuring the helper is only accessible in server-side code. There are no functional dependencies beyond the Clerk Next.js library, and the main parameter— the import path— must be updated to '@clerk/nextjs/server'. The diff clearly separates removed and added lines, clarifying the exact change required for migration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/constants-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { constants } from \"@clerk/nextjs\"\n+ import { constants } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Updated JWT Utilities Return Signatures in TypeScript\nDESCRIPTION: Demonstrates the new return value pattern for JWT-related utilities that now return an object with data and error properties instead of throwing errors directly. This change affects signJwt, hasValidSignature, decodeJwt, and verifyJwt functions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt, hasValidSignature, decodeJwt, verifyJwt } from '@clerk/backend/jwt';\n\nconst { data, error } = await signJwt(...)\nif (error) throw error;\n\nconst { data, error } = await hasValidSignature(...)\nif (error) throw error;\n\nconst { data, error } = decodeJwt(...)\nif (error) throw error;\n\nconst { data, error } = await verifyJwt(...)\nif (error) throw error;\n```\n\n----------------------------------------\n\nTITLE: Updating useLocalCredentials Import Path in Clerk Expo\nDESCRIPTION: Code change showing the migration of the useLocalCredentials hook import from the main package to a dedicated path to improve tree-shaking and reduce unnecessary peer dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import {  useLocalCredentials } from \"@clerk/clerk-expo\"\n+ import { useLocalCredentials } from \"@clerk/clerk-expo/local-credentials\"\n```\n\n----------------------------------------\n\nTITLE: Configuring `useMagicLink` to `useEmailLink` Refactoring (YAML)\nDESCRIPTION: This YAML frontmatter block defines configuration parameters for renaming `useMagicLink` to `useEmailLink`. The `matcher` property specifies the string to find ('useMagicLink'), and `replaceWithString` provides the replacement string ('useEmailLink'). This configuration is likely used by an automated refactoring tool or script to update source code or documentation files.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/usemagiclink.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '`useMagicLink` -> `useEmailLink`'\nmatcher: 'useMagicLink'\nreplaceWithString: 'useEmailLink'\n---\n```\n\n----------------------------------------\n\nTITLE: Extending OAuth Strategy Types for Custom OAuth Providers in TypeScript\nDESCRIPTION: Demonstrates how the OAuth strategy types were updated to include CustomOAuthStrategy, defining the type with a template literal and extending the OAuthStrategy type to include it.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OAuthStrategy = `oauth_${OAuthProvider}` | CustomOAuthStrategy;\n```\n\n----------------------------------------\n\nTITLE: Route Matcher with Clerk Middleware\nDESCRIPTION: Implementation of route matching functionality using the experimental createRouteMatcher helper with Clerk middleware.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkMiddleware, experimental_createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isProtectedRoute = experimental_createRouteMatcher([/protected.*/]);\n\nexport default clerkMiddleware((auth, request) => {\n  if (isProtectedRoute(request)) {\n    auth().protect();\n  }\n\n  return NextResponse.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Sync Host Permissions for Clerk Browser Extension in JSON\nDESCRIPTION: This configuration is necessary when syncing with a host application. It includes both 'cookies' and 'storage' permissions, enabling the extension to interact with browser cookies and storage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/manifest.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"cookies\", \"storage\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Clerk UserProfile and UserButton Components in JSX\nDESCRIPTION: Represents the Clerk `<UserProfile />` and `<UserButton />` components in JSX. The `<UserProfile />` handles user settings, including MFA addition which now uses a dropdown. `<UserButton />` often renders `<UserProfile />`. Requires the Clerk React or JavaScript library.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/mfa-dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<UserProfile />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<UserButton />\n```\n\n----------------------------------------\n\nTITLE: Import Statement Changes - Clerk JavaScript\nDESCRIPTION: Updated import statements following removal of default exports from all Clerk packages. Shows the new import syntax for various Clerk packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\nimport { clerkInstance } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-js';\nimport { Clerk } from '@clerk/clerk-js/headless';\nimport { IsomorphicClerk } from '@clerk/clerk-react'\n```\n\n----------------------------------------\n\nTITLE: Custom Re-verification UI in React\nDESCRIPTION: Example of using the useReverification hook with a custom UI handler for the re-verification process in a React component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useReverification } from '@clerk/clerk-react';\nimport { isReverificationCancelledError } from '@clerk/clerk-react/error';\n\ntype MyData = {\n  balance: number;\n};\n\nexport function MyButton() {\n  const fetchMyData = () => fetch('/api/balance').then(res => res.json() as Promise<MyData>);\n  const enhancedFetcher = useReverification(fetchMyData, {\n    onNeedsReverification: ({ complete, cancel, level }) => {\n      // e.g open a modal here and handle the re-verification flow\n    },\n  });\n\n  const handleClick = async () => {\n    try {\n      const myData = await enhancedFetcher();\n      //     ^ is typed as `MyData`\n    } catch (e) {\n      // Handle error returned from the fetcher here\n\n      // You can also handle cancellation with the following\n      if (isReverificationCancelledError(err)) {\n        // Handle the cancellation error here\n      }\n    }\n  };\n\n  return <button onClick={handleClick}>Update User</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Session Tracking in Next.js React Component\nDESCRIPTION: This code snippet shows how to use the useSessionList hook from Clerk in a Next.js page component. It retrieves the user's session information and displays the number of sessions, indicating how many times the user has visited.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/docs/use-session-list.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport { useSessionList } from '@clerk/nextjs';\n\nexport default function HomePage() {\n  const { isLoaded, sessions } = useSessionList();\n\n  if (!isLoaded) {\n    // Handle loading state\n    return null;\n  }\n\n  return (\n    <div>\n      <p>Welcome back. You've been here {sessions.length} times before.</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Organization Creation Limit using Clerk Backend Client in TypeScript\nDESCRIPTION: Demonstrates using the `createClerkClient` from `@clerk/backend` to update the `createOrganizationsLimit` property for a specific user via the `clerkClient.users.updateUser` method. Setting the limit to 0 removes it. Requires the `@clerk/backend` package and an initialized Clerk client.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n    import { createClerkClient }  from '@clerk/backend';\n\n    const clerkClient = createClerkClient({...});\n    // Update user with createOrganizationsLimit equals 10\n    await clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 10 })\n\n    // Remove createOrganizationsLimit\n    await clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 0 })\n```\n\n----------------------------------------\n\nTITLE: Identifying Deprecated IS_SATELLITE Imports (Regex)\nDESCRIPTION: This regular expression pattern is designed to find import statements in JavaScript or TypeScript code that import the now-removed `IS_SATELLITE` constant from the `@clerk/nextjs` package. It uses multiline matching (`m` flag) as indicated by `matcherFlags: 'm'`. This helps identify the deprecated pattern for removal or replacement.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-is-satellite.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nimport\\s+{[^}]*?IS_SATELLITE[\\s\\S]*?from\\s+['\"]@clerk\\/nextjs[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Updated JWT Helper Response Format\nDESCRIPTION: Shows the change in response format for JWT helpers. The error property has been replaced with an errors array for consistency with backend API client return values.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await signJwt(...);\n+ const { data, errors: [error] = [] } = await signJwt(...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifyJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await verifyJwt(...);\n+ const { data, errors: [error] = [] } = await verifyJwt(...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { hasValidSignature } from '@clerk/backend/jwt';\n\n- const { data, error } = await hasValidSignature(...);\n+ const { data, errors: [error] = [] } = await hasValidSignature(...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await decodeJwt(...);\n+ const { data, errors: [error] = [] } = await decodeJwt(...);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { verifyToken } from '@clerk/backend';\n\n- const { data, error } = await verifyToken(...);\n+ const { data, errors: [error] = [] } = await verifyToken(...);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom withClerk HoC using Clerk Hooks in React - JavaScript\nDESCRIPTION: This snippet implements a replacement for the removed withClerk higher-order function using React and Clerk's custom hook useIsomorphicClerkContext. It defines a function that wraps a component, injecting the current Clerk context into it as a prop, and only renders the wrapped component if Clerk is loaded. Key parameters: Component (the React component to wrap), displayName (optional display name for debugging). Dependencies: React, useIsomorphicClerkContext from Clerk. Outputs a higher-order component suitable for wrapping and enhancing any child component with authentication context.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/withclerk-hof-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction withClerk(Component, displayName) {\n  displayName = displayName || Component.displayName || Component.name || 'Component';\n  Component.displayName = displayName;\n  const HOC = props => {\n    const clerk = useIsomorphicClerkContext();\n\n    if (!clerk.loaded) return null;\n\n    return (\n      <Component\n        {...props}\n        clerk={clerk}\n      />\n    );\n  };\n\n  HOC.displayName = `withClerk(${displayName})`;\n  return HOC;\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Updating User Parameters in Clerk Backend\nDESCRIPTION: This commit updates user parameters in the Clerk backend package. It addresses an issue related to user parameter handling.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_55\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **backend:** Update user params ([624402f](https://github.com/clerk/javascript/commit/624402fa0e2ff00819254d0fe0e6e7f44bdbe42c))\n```\n\n----------------------------------------\n\nTITLE: Adding Legal Acceptance Fields to User API in Clerk JS\nDESCRIPTION: Adds new fields related to legal term acceptance to the User object and associated parameters. Specifically, `legalAcceptedAt` is added to the `User` object, `legalAcceptedAt` and `skipLegalChecks` are added to `CreateUserParams` and `UpdateUserParams`, and `legal_accepted_at` is added to the `UserJSON` representation. This facilitates tracking user consent to legal terms.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// On User object\nlegalAcceptedAt: Date | null;\n\n// On CreateUserParams & UpdateUserParams\nlegalAcceptedAt?: Date | null;\nskipLegalChecks?: boolean;\n\n// On UserJSON\nlegal_accepted_at: number | null;\n```\n\n----------------------------------------\n\nTITLE: Introducing Instagram OAuth Support\nDESCRIPTION: Feature that adds support for Instagram as an OAuth provider in the Clerk authentication system.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: Markdown\nCODE:\n```\n- **types:** Introduce Instagram OAuth ([2991b01](https://github.com/clerk/javascript/commit/2991b011bf8002ed9a9c88fbe4cb911665201245))\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Environment Variables to an Application\nDESCRIPTION: Demonstrates how to apply a predefined set of environment variables (like Clerk keys) to an application instance using the `withEnv` method. This example uses a configuration (`withEmailCodes`) available within `appConfigs.envs`.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nawait app.withEnv(appConfigs.envs.withEmailCodes);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Updated Default en-US Localization Values in JavaScript\nDESCRIPTION: This JavaScript object literal, `changedValues`, lists localization keys whose default en-US values have been updated in the Clerk library. It serves as a reference for developers, showing the new default strings for various UI elements across components like Sign In, Sign Up, User Profile, and Organization Management. Developers might use this to update their custom localizations or simply be aware of the new defaults.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/changed-localization-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst changedValues = {\n  formFieldLabel__organizationName: 'Name',\n  formFieldLabel__organizationSlug: 'Slug',\n  formFieldInputPlaceholder__emailAddresses: 'example@email.com, example2@email.com',\n  formFieldInputPlaceholder__organizationSlug: 'my-org',\n  signUp: {\n    start: {\n      subtitle: 'Welcome! Please fill in the details to get started.',\n      actionText: 'Already have an account?',\n    },\n    emailCode: {\n      subtitle: 'Enter the verification code sent to your email',\n    },\n    phoneCode: {\n      subtitle: 'Enter the verification code sent to your phone',\n    },\n    continue: {\n      subtitle: 'Please fill in the remaining details to continue.',\n      actionText: 'Already have an account?',\n    },\n  },\n  signIn: {\n    start: {\n      title: 'Sign in to {{applicationName}}',\n      subtitle: 'Welcome back! Please sign in to continue',\n      actionText: 'Don’t have an account?',\n    },\n    password: {\n      subtitle: 'Enter the password associated with your account',\n    },\n    forgotPasswordAlternativeMethods: {\n      label__alternativeMethods: 'Or, sign in with another method',\n    },\n    resetPassword: {\n      title: 'Set new password',\n    },\n    phoneCodeMfa: {\n      subtitle: 'To continue, please enter the verification code sent to your phone',\n    },\n    totpMfa: {\n      subtitle: 'To continue, please enter the verification code generated by your authenticator app',\n    },\n    backupCodeMfa: {\n      subtitle: 'Your backup code is the one you got when setting up two-step authentication.',\n    },\n  },\n  userProfile: {\n    start: {\n      headerTitle__account: 'Profile details',\n      emailAddressesSection: {\n        primaryButton: 'Add email address',\n        detailsAction__unverified: 'Verify',\n        destructiveAction: 'Remove email',\n      },\n      phoneNumbersSection: {\n        primaryButton: 'Add phone number',\n      },\n      mfaSection: {\n        phoneCode: {\n          destructiveActionLabel: 'Remove',\n        },\n        backupCodes: {\n          actionLabel__regenerate: 'Regenerate',\n        },\n      },\n      dangerSection: {\n        title: 'Delete account',\n        deleteAccountButton: 'Delete account',\n      },\n    },\n    profilePage: {\n      imageFormSubtitle: 'Upload',\n      imageFormDestructiveActionSubtitle: 'Remove',\n      fileDropAreaHint: 'Recommended size 1:1, up to 10MB.',\n    },\n    phoneNumberPage: {\n      infoText:\n        'A text message containing a verification code will be sent to this phone number. Message and data rates may apply.',\n    },\n    connectedAccountPage: {\n      socialButtonsBlockButton: '{{provider|titleize}}',\n    },\n    mfaPhoneCodePage: {\n      primaryButton__addPhoneNumber: 'Add phone number',\n      subtitle__availablePhoneNumbers:\n        'Select an existing phone number to register for SMS code two-step verification or add a new one.',\n      subtitle__unavailablePhoneNumbers:\n        'There are no available phone numbers to register for SMS code two-step verification, please add a new one.',\n    },\n    deletePage: {\n      actionDescription: \"Type 'Delete account' below to continue.\",\n    },\n  },\n  organizationSwitcher: {\n    action__createOrganization: 'Create organization',\n    action__manageOrganization: 'Manage',\n  },\n  organizationProfile: {\n    profilePage: {\n      title: 'Update profile',\n      dangerSection: {\n        leaveOrganization: {\n          actionDescription: \"Type '{{organizationName}}' below to continue.\",\n        },\n        deleteOrganization: {\n          actionDescription: \"Type '{{organizationName}}' below to continue.\",\n        },\n      },\n    },\n    invitePage: {\n      title: 'Invite new members',\n      subtitle: 'Enter or paste one or more email addresses, separated by spaces or commas.',\n    },\n  },\n  createOrganization: {\n    title: 'Create organization',\n  },\n  organizationList: {\n    title: 'Choose an account',\n    titleWithoutPersonal: 'Choose an organization',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing Checkout with Clerk Internal Methods\nDESCRIPTION: Introduces internal methods for opening and closing the Checkout component in Clerk.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclerk.__internal_openCheckout()\nclerk.__internal_closeCheckout()\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Passkey Authentication\nDESCRIPTION: Example showing how to handle errors during passkey authentication using try-catch and the ClerkRuntimeError type.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await __experimental_authenticateWithPasskey(...args);\n}catch (e) {\n  if (isClerkRuntimeError(e)) {\n      if (err.code === 'passkey_operation_aborted') {\n          ...\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Secret Key Environment Variable\nDESCRIPTION: Example of setting the Clerk secret key as an environment variable.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCLERK_SECRET_KEY=sk_\n```\n\n----------------------------------------\n\nTITLE: Optimizing User and Session Fetching in Next.js\nDESCRIPTION: A performance improvement that fetches user and session data in parallel rather than sequentially, reducing load times in Next.js applications using Clerk authentication.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_79\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs:** Fetch user and session in parallel ([#49](https://github.com/clerk/javascript/issues/49)) ([fb89732](https://github.com/clerk/javascript/commit/fb89732952fba2d45fe9ea73820b6264f5e02dbc))\n```\n\n----------------------------------------\n\nTITLE: Optimizing Localization Imports with Subpath Exports (Diff)\nDESCRIPTION: Illustrates the change in importing localization resources introduced in version 2.0.0-alpha-v5.6. Instead of importing all languages from the top-level `@clerk/localizations`, developers can now use subpath exports (e.g., `@clerk/localizations/fr-FR`) to import only the necessary languages. This optional change facilitates tree-shaking and can reduce the application's bundle size.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n# Single language\n- import { frFR } from \"@clerk/localizations\"\n+ import { frFR } from \"@clerk/localizations/fr-FR\"\n\n# Multiple languages\n- import { enUS, esES } from \"@clerk/localizations\"\n+ import { enUS } from \"@clerk/localizations/en-US\"\n+ import { esES } from \"@clerk/localizations/es-ES\"\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing frontendApi with publishableKey in ClerkExpressWithAuth\nDESCRIPTION: This code example shows how to update ClerkExpressWithAuth initialization from using the deprecated 'frontendApi' parameter to the new 'publishableKey' parameter. Note that the values of these keys are different, so you'll need to obtain your application's publishable key from the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/clerkexpresswithauth-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { ClerkExpressWithAuth } from '@clerk/clerk-sdk-node';\n\n- ClerkExpressWithAuth({ frontendApi: '...' });\n+ ClerkExpressWithAuth({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Functions Return Type Changes\nDESCRIPTION: Shows the updated return value format for JWT helper functions to match backend API client return values for consistency.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await signJwt(...);\n+ const { data, errors: [error] = [] } = await signJwt(...);\n\nimport { verifyJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await verifyJwt(...);\n+ const { data, errors: [error] = [] } = await verifyJwt(...);\n\nimport { hasValidSignature } from '@clerk/backend/jwt';\n\n- const { data, error } = await hasValidSignature(...);\n+ const { data, errors: [error] = [] } = await hasValidSignature(...);\n\nimport { decodeJwt } from '@clerk/backend/jwt';\n\n- const { data, error } = await decodeJwt(...);\n+ const { data, errors: [error] = [] } = await decodeJwt(...);\n\nimport { verifyToken } from '@clerk/backend';\n\n- const { data, error } = await verifyToken(...);\n+ const { data, errors: [error] = [] } = await verifyToken(...);\n```\n\n----------------------------------------\n\nTITLE: Updating Session Token in Non-Browser Environment\nDESCRIPTION: Ensures the session token is updated when calling `setActive()` in a non-browser environment. This patch addresses an issue in the Clerk JavaScript SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetActive()\n```\n\n----------------------------------------\n\nTITLE: Updating `getMembershipRequests` Call with New Pagination Arguments (Diff)\nDESCRIPTION: This diff illustrates the necessary code modifications when calling `organization.getMembershipRequests`. The previous `limit` and `offset` arguments for pagination control have been replaced with `pageSize` and `initialPage` respectively for improved clarity. This change requires updating existing calls to use the new argument names as shown.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-getmembershiprequests-arguments-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n  const { data } = await organization.getMembershipRequests({\n-   limit: 10,\n+   pageSize: 10,\n-   offset: 10,\n+   initialPage: 2,\n  })\n```\n```\n\n----------------------------------------\n\nTITLE: Package Version Update Commands\nDESCRIPTION: Sample import statements showing migration from default exports to named exports in various Clerk packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\nimport { clerkInstance } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-js';\nimport { Clerk } from '@clerk/clerk-js/headless';\nimport { IsomorphicClerk } from '@clerk/clerk-react'\n```\n\n----------------------------------------\n\nTITLE: Customizing UserProfile Component in React\nDESCRIPTION: Example of how to use the new customization features in the UserProfile component, including adding custom pages, external links, and reordering default routes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\n<UserProfile>\n  <UserProfile.Page\n    label='Custom Page'\n    url='custom'\n    labelIcon={<CustomIcon />}\n  >\n    <MyCustomPageContent />\n  </UserProfile.Page>\n  <UserProfile.Link\n    label='External'\n    url='/home'\n    labelIcon={<Icon />}\n  />\n  <UserProfile.Page label='account' />\n  <UserProfile.Page label='security' />\n</UserProfile>\n```\n\n----------------------------------------\n\nTITLE: Migrating Appearance Prop Keys in Clerk OrganizationSwitcher – Markdown\nDESCRIPTION: This snippet shows the replacement of the organizationPreview__organizationSwitcher string with organizationPreview__organizationSwitcherTrigger when used as an appearance prop element key within the <OrganizationSwitcher /> component. There are no code dependencies, but the change is specific to projects upgrading to Clerk v5. The key parameter affected is the elements object in the appearance prop, and the expected outcome is a seamless transition to the new prop while avoiding deprecated usage. The snippet also suggests there may be further design adjustments required upon upgrade.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/appearance-organizationpreview-organizationswitcher.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIf you are using `organizationPreview__organizationSwitcher` as an [appearance prop](https://clerk.com/docs/components/customization/overview#appearance-prop) value to the [`<OrganizationSwitcher />` component](https://clerk.com/docs/references/javascript/clerk/organization-switcher#organization-switcher-component), it must be updated to `organizationPreview__organizationSwitcherTrigger` instead. This is a simple text replacement. However, it should be noted that component designs have been updated as part of v5, so you may need to make adjustments to any appearance prop customizations that have been implemented as a whole.\n```\n\n----------------------------------------\n\nTITLE: Using ClerkDegraded Component in React\nDESCRIPTION: Example of using the new ClerkDegraded component to display a warning when Clerk is in a degraded state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkLoaded>\n  <MyCustomPasskeyRegistration />\n  <ClerkDegraded>We are experiencing issues, registering a passkey might fail.</ClerkDegraded>\n</ClerkLoaded>\n```\n\n----------------------------------------\n\nTITLE: Updating buildRequest Function Usage in JavaScript\nDESCRIPTION: This diff shows the removal of the httpOptions parameter from the buildRequest function and the new way to set header parameters. The change affects how headers are passed to the request.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/httpoptions-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const r = buildRequest({ httpOptions: { headers: {} }})\n+ const request = buildRequest()\n+ request({ headerParams: {} })\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice for React Components\nDESCRIPTION: Announcement of deprecated components including RedirectToUserProfile, RedirectToOrganizationProfile, and RedirectToCreateOrganization\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Add deprecation notices for the following components:\n  - `RedirectToUserProfile`\n  - `RedirectToOrganizationProfile`\n  - `RedirectToCreateOrganization`\n```\n\n----------------------------------------\n\nTITLE: Targeting UserButton Box Element with CSS in Clerk\nDESCRIPTION: The CSS class selector `.cl-userButtonBox` targets the box or dropdown element of the Clerk `<UserButton />`. Following a structural update, this element is now nested inside `.cl-userButtonTrigger`. Styles targeting this class, particularly those depending on its previous parentage, may require adjustments.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/userbuttontrigger-userbuttonbox-invert.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.cl-userButtonBox\n```\n\n----------------------------------------\n\nTITLE: Customizing UserButton Elements via Appearance API in Clerk JS\nDESCRIPTION: Illustrates targeting `userButtonTrigger` and `userButtonBox` within the Clerk JavaScript SDK's appearance customization object (`elements`). The structural change where `userButtonBox` is now a child of `userButtonTrigger` might affect how styles or properties applied through this configuration behave. Ensure customizations account for the new nesting order.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/userbuttontrigger-userbuttonbox-invert.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nelements: {\\n  // ... other elements\\n  userButtonTrigger: { /* styles or props */ },\\n  userButtonBox: { /* styles or props */ }\\n  // ... other elements\\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Internal Top-level Backend Exports - Clerk Backend Typescript\nDESCRIPTION: Explains the removal of several internal resource classes from the top-level '@clerk/backend' API, listing all dropped exports in TypeScript. It retains only Organization, Session, User, WebhookEvent, and WebhookEventType as resource types. This impacts backend TypeScript codebases and plugins that previously relied on these exports. The correct usage is demonstrated via the updated import line for types only.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport {\n  AllowlistIdentifier,\n  Client,\n  DeletedObject,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  OauthAccessToken,\n  ObjectType,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  RedirectUrl,\n  SMSMessage,\n  Session,\n  SignInToken,\n  Token,\n  User,\n  Verification,\n} from '@clerk/backend';\n// After : no alternative since there is no need to use those classes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Installing Latest React Dependencies using npm\nDESCRIPTION: This command installs the latest versions of React and React DOM using npm. It's necessary for compatibility with Clerk SDKs that require React 18 or higher.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/react-version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Matching Removed Identity Preview Avatar Selectors - regex\nDESCRIPTION: These regex patterns are used to match the now-removed CSS class selectors and object key patterns related to the 'identityPreviewAvatarBox' and 'identityPreviewAvatarImage' customization IDs in Clerk's SignIn component. They can be used to search codebases or CSS files for lingering uses of the deprecated selectors so that customizations can be updated or removed. Pass relevant CSS or JavaScript code as input to these regular expressions to identify outdated patterns.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/remove-identitypreview-avatar.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\.cl-identityPreviewAvatarBox\n```\n\nLANGUAGE: regex\nCODE:\n```\n\\.cl-identityPreviewAvatarImage\n```\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\s+{[\\s\\S]*?identityPreviewAvatarBox:[\\s\\S]*?}\n```\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\s+{[\\s\\S]*?identityPreviewAvatarImage:[\\s\\S]*?}\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Utilities from Clerk React\nDESCRIPTION: New import paths for internal utilities and error handling functions in the Clerk React package. This change introduces subpath exports for better organization of internal utilities.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Before\nimport { **internal**setErrorThrowerOptions } from '@clerk/clerk-react';\n// After\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\n\n// Before\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react';\n// After\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react/errors';\n\n// Before\nimport { MultisessionAppSupport } from '@clerk/clerk-react';\n// After\nimport { MultisessionAppSupport } from '@clerk/clerk-react/internal';\n```\n\n----------------------------------------\n\nTITLE: Importing AuthObject Type from Backend Module\nDESCRIPTION: Example showing how to import and use the AuthObject type from @clerk/backend.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AuthObject } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Installing Latest React Dependencies using Yarn\nDESCRIPTION: This command installs the latest versions of React and React DOM using Yarn. It's necessary for compatibility with Clerk SDKs that require React 18 or higher.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/react-version.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Updating Error-Related Imports in Next.js with Clerk\nDESCRIPTION: This code change illustrates the new import path for error-related exports in Clerk for Next.js. It moves these imports from the main @clerk/nextjs package to the new @clerk/nextjs/errors submodule.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n    isClerkAPIResponseError,\n    isEmailLinkError,\n    isKnownError,\n    isMetamaskError,\n    EmailLinkErrorCode,\n- } from \"@clerk/nextjs\"\n+ } from \"@clerk/nextjs/errors\"\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for Clerk SDK\nDESCRIPTION: Examples of new import statements for various Clerk packages after dropping default exports. This change affects multiple packages including backend, Node SDK, and React components.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Clerk } from '@clerk/backend';\nimport { clerkInstance } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-sdk-node';\nimport { Clerk } from '@clerk/clerk-js';\nimport { Clerk } from '@clerk/clerk-js/headless';\nimport { IsomorphicClerk } from '@clerk/clerk-react'\n```\n\n----------------------------------------\n\nTITLE: Error Message for Hooks Outside ClerkProvider Context in React\nDESCRIPTION: Example of an error message thrown when using Clerk hooks like useAuth outside of the ClerkProvider context. This was added in version 2.0.0-alpha-v5.6 to help developers identify context-related issues.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n@clerk/clerk-react: useAuth can only be used within the <ClerkProvider /> component\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Identifier Replacement using YAML Frontmatter\nDESCRIPTION: This YAML frontmatter block configures a find-and-replace task. The 'matcher' key specifies the string 'MagicLinkErrorCode' to be located, and the 'replaceWithString' key provides 'EmailLinkErrorCode' as its replacement. This facilitates updating terminology across Clerk's resources.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/magiclinkerrorcode.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '`MagicLinkErrorCode` -> `EmailLinkErrorCode`'\nmatcher: 'MagicLinkErrorCode'\nreplaceWithString: 'EmailLinkErrorCode'\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Attribute Name in Clerk JavaScript SDK\nDESCRIPTION: This code snippet demonstrates the renaming of the 'members_count' attribute to 'membersCount' in the Organization resource. The change is made to align with the naming convention of other attributes in the Clerk JavaScript SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/members-count.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- organization.members_count\n+ organization.membersCount\n```\n\n----------------------------------------\n\nTITLE: Refactoring @clerk/backend Imports for Internal Helpers (TypeScript)\nDESCRIPTION: Illustrates the required code change for importing internal backend helpers. Previously imported directly from '@clerk/backend', these helpers must now be imported from '@clerk/backend/internal' following the update in version 1.0.0-alpha-v5.12.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { AuthStatus, ... } from '@clerk/backend';\n// After\nimport { AuthStatus, ... } from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Options in Vue\nDESCRIPTION: Example of how to use the `updateClerkOptions()` utility function to dynamically change Clerk options such as applying dark theme or changing localization.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { updateClerkOptions } from '@clerk/vue';\nimport { dark } from '@clerk/themes';\nimport { frFR } from '@clerk/localizations';\n\nfunction enableDarkTheme() {\n  updateClerkOptions({\n    appearance: {\n      baseTheme: dark,\n    },\n  });\n}\n\nfunction changeToFrench() {\n  updateClerkOptions({\n    localization: frFR,\n  });\n}\n</script>\n\n<template>\n  <button @click=\"enableDarkTheme\">Enable Dark Theme</button>\n  <button @click=\"changeToFrench\">Change to French</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vite\nDESCRIPTION: Environment variable configuration for Vite to set the Clerk publishable key.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Vite\nVITE_CLERK_PUBLISHABLE_KEY=pk_test_xxx\n```\n\n----------------------------------------\n\nTITLE: Updating signJwt Import Path in Clerk JavaScript (diff)\nDESCRIPTION: This snippet illustrates the necessary change to the signJwt import path when upgrading Clerk JavaScript dependencies. Developers must import signJwt from '@clerk/backend/tokens' instead of the deprecated '@clerk/backend'. No external dependencies beyond Clerk are involved. The only parameter affected is the import path itself, and this diff demonstrates the required modification for compatibility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/signjwt-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { signJwt } from \"@clerk/backend\"\n+ import { signJwt } from \"@clerk/backend/tokens\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Experimental Factor Verification Age (Server-Side) in TypeScript\nDESCRIPTION: Demonstrates how to access the experimental `__experimental_factorVerificationAge` property on the `auth` object in a server-side Next.js environment. This property tracks the age of verified factor groups. Requires the Clerk `auth` helper.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nauth().__experimental_factorVerificationAge;\n```\n\n----------------------------------------\n\nTITLE: Identifying Deprecated Clerk Back Button CSS Selectors\nDESCRIPTION: These CSS selectors (`.cl-headerBackIcon`, `.cl-headerBackRow`, `.cl-headerBackLink`) targeted the back button elements on the alternative 2FA methods page within Clerk's `<SignIn />` component. Due to a UI change moving the button, `.cl-headerBackIcon` is removed, and the others are renamed to `.cl-backRow` and `.cl-backLink`. These selectors are useful for finding outdated custom styles.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/alternativemethods-backlink.md#2025-04-22_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.cl-headerBackIcon\n```\n\nLANGUAGE: css\nCODE:\n```\n.cl-headerBackRow\n```\n\nLANGUAGE: css\nCODE:\n```\n.cl-headerBackLink\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Agent Toolkit\nDESCRIPTION: Command to install the Clerk Agent Toolkit package using npm.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @clerk/agent-toolkit\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Dispatch Token Update for Session Token\nDESCRIPTION: Fixes an issue to only dispatch token updates for session tokens, not other token types.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-js:** Dispatch token update only for session token ([fc6837b](https://github.com/clerk/javascript/commit/fc6837b3e9b5fae018b51f4814f3b1f8281f00cc))\n```\n\n----------------------------------------\n\nTITLE: Error Handling Imports\nDESCRIPTION: Import of error-related types and constants from @clerk/backend/errors subpath\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  TokenVerificationError,\n  TokenVerificationErrorAction,\n  TokenVerificationErrorCode,\n  TokenVerificationErrorReason,\n} from '@clerk/backend/errors';\n```\n\n----------------------------------------\n\nTITLE: Replacing Clerk Import with createClerkClient in @clerk/backend\nDESCRIPTION: The named Clerk import from @clerk/backend is replaced with createClerkClient. This change aligns usage across Clerk SDKs and enables better DX improvements in the future.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nimport { Clerk } from '@clerk/backend';\nconst clerk = Clerk({ secretKey: '...' });\n\n// After\nimport { createClerkClient } from '@clerk/backend';\nconst clerk = createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating User Organization Limits\nDESCRIPTION: Example demonstrating how to use the createClerkClient to update a user's organization creation limits.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClerkClient }  from '@clerk/backend';\n\nconst clerkClient = createClerkClient({...});\n// Update user with createOrganizationsLimit equals 10\nawait clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 10 })\n\n// Remove createOrganizationsLimit\nawait clerkClient.users.updateUser('user_...', { createOrganizationsLimit: 0 })\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Helpers from @clerk/backend/internal in TypeScript\nDESCRIPTION: Demonstrates the new way to import internal Clerk backend helpers like `AuthStatus`, `buildRequestUrl`, etc., from the `@clerk/backend/internal` path instead of the top-level `@clerk/backend` export. This change was introduced in version 1.0.0-alpha-v5.12.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthStatus,\n  buildRequestUrl,\n  constants,\n  createAuthenticateRequest,\n  createIsomorphicRequest,\n  debugRequestState,\n  makeAuthObjectSerializable,\n  prunePrivateMetadata,\n  redirect,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Major Changes Documentation for v5.0 Alpha\nDESCRIPTION: Description of breaking changes and updates made in version 5.0.0-alpha, including API domain changes, deprecation removals, and Node.js version requirements\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- Internal update default apiUrl domain from clerk.dev to clerk.com\n- Drop deprecations. Migration steps:\n  - use `CLERK_PUBLISHABLE_KEY` instead of `CLERK_FRONTEND_API` env variable\n  - use `publishableKey` instead of `frontendApi`\n  - use `isEmailLinkError` instead of `isMagicLinkError`\n  - use `EmailLinkErrorCode` instead of `MagicLinkErrorCode` \n  - use `useEmailLink` instead of `useMagicLink`\n- Dropping support for Node 14 and 16 as they both reached EOL status. The minimal Node.js version required by Clerk is `18.18.0` now.\n```\n\n----------------------------------------\n\nTITLE: Importing Localizations Using Subpath Exports - Clerk SDK - Diff\nDESCRIPTION: This snippet is a diff showing how to migrate imports of localization files to use subpath exports for improved tree-shaking and reduced bundle size. It demonstrates changing imports from top-level `@clerk/localizations` to targeting specific language subpaths like `@clerk/localizations/fr-FR`. This is relevant for users optimizing their bundle, and applies to projects using Clerk's localization package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Diff\nCODE:\n```\n# Single language\n- import { frFR } from \"@clerk/localizations\"\n+ import { frFR } from \"@clerk/localizations/fr-FR\"\n\n# Multiple languages\n- import { enUS, esES } from \"@clerk/localizations\"\n+ import { enUS } from \"@clerk/localizations/en-US\"\n+ import { esES } from \"@clerk/localizations/es-ES\"\n\n```\n\n----------------------------------------\n\nTITLE: Introducing Experimental Nuxt SDK and Updating Dependencies\nDESCRIPTION: This snippet introduces an experimental version of Clerk SDK for Nuxt and shows updates to dependencies including @clerk/vue, @clerk/backend, and @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Introduce an experimental version of Clerk SDK for [Nuxt](https://nuxt.com) ([#4541](https://github.com/clerk/javascript/pull/4541)) by [@wobsoriano](https://github.com/wobsoriano)\n\n- Updated dependencies [[`91f60ca113928a5152efed23ef5eeb9330be5066`](https://github.com/clerk/javascript/commit/91f60ca113928a5152efed23ef5eeb9330be5066), [`536fa996ff84a545678a3036b28409824d1c00dd`](https://github.com/clerk/javascript/commit/536fa996ff84a545678a3036b28409824d1c00dd), [`b28c5e8bc44885bf6b1533df48e872ba90c387da`](https://github.com/clerk/javascript/commit/b28c5e8bc44885bf6b1533df48e872ba90c387da)]:\n  - @clerk/vue@0.0.5\n  - @clerk/backend@1.17.0\n  - @clerk/shared@2.15.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Client Persistence in React\nDESCRIPTION: Shows how to disable the experimental client persistence feature in React using ClerkProvider component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<ClerkProvider experimental={{ persistClient: false }} />;\n```\n\n----------------------------------------\n\nTITLE: Updating Constants Import Path in Clerk Backend JavaScript\nDESCRIPTION: This code snippet demonstrates how to update the import path for constants in Clerk's backend. The old import path '@clerk/backend' is replaced with the new path '@clerk/backend/internal'. Note that internal imports are not intended for general usage and are outside the scope of semver.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/constants-import-path-move.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { constants } from \"@clerk/backend\"\n+ import { constants } from \"@clerk/backend/internal\"\n```\n\n----------------------------------------\n\nTITLE: Package Import Change Example\nDESCRIPTION: Example showing the required import change from @clerk/tanstack-start to @clerk/tanstack-react-start package\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n- import { ClerkProvider } from '@clerk/tanstack-start'\n+ import { ClerkProvider } from '@clerk/tanstack-react-start'\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated Clerk Back Button Identifiers with Regex\nDESCRIPTION: This set of regular expressions is used to identify deprecated identifiers associated with the back button on Clerk's alternative 2FA methods page. It includes patterns for matching the old CSS class names (`.cl-headerBackIcon`, `.cl-headerBackRow`, `.cl-headerBackLink`) and the corresponding old configuration keys (`headerBackIcon`, `headerBackRow`, `headerBackLink` within an `elements` object). This aids in finding code requiring updates due to the identifier changes (`headerBackIcon` removed, others renamed to `backRow`/`backLink`).\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/alternativemethods-backlink.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.cl-headerBackIcon\n```\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.cl-headerBackRow\n```\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.cl-headerBackLink\n```\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?headerBackIcon:[\\\\s\\\\S]*?}\n```\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?headerBackRow:[\\\\s\\\\S]*?}\n```\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?headerBackLink:[\\\\s\\\\S]*?}\n```\n\n----------------------------------------\n\nTITLE: Matching `fontSmoothing` Variable Declaration using Regex\nDESCRIPTION: This regular expression identifies the usage of the deprecated `fontSmoothing` variable within a `variables` object literal in JavaScript or similar code. It is designed to help locate instances that need removal due to breaking changes, matching the pattern `variables: { ... fontSmoothing: ... }`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/appearance-variables-breaking-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\"variables:\\\\s+{[\\\\s\\\\S]*?fontSmoothing:\"\n```\n\n----------------------------------------\n\nTITLE: Error message when using useAuth outside of ClerkProvider - Shell\nDESCRIPTION: This snippet displays the error message shown if the useAuth React hook is called outside the <ClerkProvider /> context. No installation needed, but requires the @clerk/clerk-react library to display this error. Intended as runtime feedback during development, it prevents improper context usage that could break authentication flows.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n@clerk/clerk-react: useAuth can only be used within the <ClerkProvider /> component\n```\n\n----------------------------------------\n\nTITLE: Replacing __experimental_useReverification Hook\nDESCRIPTION: Documents the replacement of the experimental hook `__experimental_useReverification` with the stable `useReverification()` hook for managing session reverification.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n__experimental_useReverification\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Environment Variables for Application Configuration\nDESCRIPTION: Shows how to create a new, custom environment configuration using the `environmentConfig` factory function. It demonstrates setting various private (`CLERK_API_URL`, `CLERK_SECRET_KEY`) and public (`CLERK_PUBLISHABLE_KEY`, `CLERK_SIGN_IN_URL`, etc.) environment variables using chained `setEnvVariable` calls.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst withCustomRoles = environmentConfig()\n  .setId('withCustomRoles')\n  .setEnvVariable('private', 'CLERK_API_URL', process.env.E2E_APP_STAGING_CLERK_API_URL)\n  .setEnvVariable('private', 'CLERK_SECRET_KEY', envKeys['with-custom-roles'].sk)\n  .setEnvVariable('public', 'CLERK_PUBLISHABLE_KEY', envKeys['with-custom-roles'].pk)\n  .setEnvVariable('public', 'CLERK_SIGN_IN_URL', '/sign-in')\n  .setEnvVariable('public', 'CLERK_SIGN_UP_URL', '/sign-up')\n  .setEnvVariable('public', 'CLERK_JS', process.env.E2E_APP_CLERK_JS || 'http://localhost:18211/clerk.browser.js');\n```\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated API_URL Import in Clerk/Next.js (RegExp)\nDESCRIPTION: This regular expression identifies import statements in JavaScript/TypeScript code that use the deprecated `API_URL` constant from the `@clerk/nextjs` package. This pattern, used with the multiline flag (`m`), helps find code that needs to be updated to use the `CLERK_API_URL` environment variable instead.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-api-url.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nimport\\s+{[^}]*?API_URL[\\s\\S]*?from\\s+['\"]@clerk\\/nextjs[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Tools - Shell Commands\nDESCRIPTION: Examples of running the MCP server with different tool configurations, showing how to specify which Clerk tools should be available to the server using the --tools flag.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n// This example assumes the CLERK_SECRET_KEY environment variable is set\n\n// Use all tools\nnpx -y @clerk/agent-toolkit -p local-mcp\nnpx -y @clerk/agent-toolkit -p local-mcp --tools=\"*\"\n\n// Use only a specific tool category\nnpx -y @clerk/agent-toolkit -p local-mcp --tools users\nnpx -y @clerk/agent-toolkit -p local-mcp --tools \"users.*\"\n\n// Use multiple tool categories\nnpx -y @clerk/agent-toolkit -p local-mcp --tools users organizations\n\n// Use specific tools\nnpx -y @clerk/agent-toolkit -p local-mcp --tools users.getUserCount organizations.getOrganization\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Settings Resource\nDESCRIPTION: Feature implementation that introduces the OrganizationSettings resource to the Clerk system to manage organization-level configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: Markdown\nCODE:\n```\n- **types,clerk-js:** Introduce OrganizationSettings resource ([455911f](https://github.com/clerk/javascript/commit/455911f4166e4bea00aa62b32a05bef297983c61))\n```\n\n----------------------------------------\n\nTITLE: WebSSO Provider Configuration Example\nDESCRIPTION: React/TypeScript example showing the updated ClerkProvider configuration with new props for WebSSO functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<ClerkProvider\n  publishableKey={publishableKey}\n  routerPush={to => navigate(to)}\n  routerReplace={to => navigate(to, { replace: true })}\n  syncSessionWithTab\n\n  // tokenCache is now storageCache (See below)\n  storageCache={/* ... */}\n>\n```\n\n----------------------------------------\n\nTITLE: Replacing apiKey with secretKey in ClerkExpressWithAuth Configuration\nDESCRIPTION: Updates the configuration parameter for ClerkExpressWithAuth from the deprecated 'apiKey' to the current 'secretKey'. This change is necessary due to parameter deprecation in the @clerk/clerk-sdk-node library.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/clerkexpresswithauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { ClerkExpressWithAuth } from '@clerk/clerk-sdk-node';\n\n- ClerkExpressWithAuth({ apiKey: '...' });\n+ ClerkExpressWithAuth({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Bug Fixes - Clerk Fastify Package\nDESCRIPTION: Various bug fixes including deprecation warnings, plugin option types, and code refactoring for better performance\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **fastify:** Add deprecation warning for API_KEY & FRONTEND_API ([4957a23])\n- **fastify:** Add type to plugin options ([7142f3c])\n- **fastify:** Improve readability ([1162362])\n- **fastify:** Introduce error message generator like in remix ([05475c2])\n- **fastify:** Refactor to drop fastify deprecation warning ([472ab57])\n- **fastify:** Tackle PR comments ([a2c9615])\n```\n\n----------------------------------------\n\nTITLE: Introducing Experimental Verification Helpers in Clerk Backend (Internal)\nDESCRIPTION: Introduces new experimental verification helper functions exported from `@clerk/backend/internal`. These helpers, `__experimental_reverificationMismatch` and `__experimental_reverificationMismatchResponse`, are intended for internal use or experimental features related to handling reverification mismatches.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Exported from @clerk/backend/internal\n__experimental_reverificationMismatch\n__experimental_reverificationMismatchResponse\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Environment Variables in Next.js\nDESCRIPTION: Migration steps for updating Clerk environment variable names in Next.js applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// Old\nNEXT_PUBLIC_CLERK_FRONTEND_API\nCLERK_JS_VERSION\nCLERK_API_KEY\n\n// New\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY\nNEXT_PUBLIC_CLERK_JS_VERSION\nCLERK_SECRET_KEY\n```\n\n----------------------------------------\n\nTITLE: Adding Frontend API Fallback in Clerk React\nDESCRIPTION: Bug fix that adds frontendAPI on window as a fallback solution. This allows the Clerk React package to find the API endpoint when the primary method is unavailable.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bug fix mentioned in commit 06f8b37\n// Add frontendAPI on window as a fallback\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed `Clerk.experimental_canUseCaptcha` Property in JavaScript\nDESCRIPTION: This snippet shows the reference to the `Clerk.experimental_canUseCaptcha` property. This property was experimental and has been removed from the Clerk JavaScript library. There is no current replacement functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/experimental-canusecaptcha.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nClerk.experimental_canUseCaptcha\n```\n\n----------------------------------------\n\nTITLE: Error Code Import Change Example\nDESCRIPTION: Example showing the migration from deprecated EmailLinkErrorCode to new EmailLinkErrorCodeStatus\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n- import { EmailLinkErrorCode } from '@clerk/tanstack-start/errors'\n+ import { EmailLinkErrorCodeStatus } from '@clerk/tanstack-start/errors'\n```\n\n----------------------------------------\n\nTITLE: Matching `.cl-button` CSS Class with Regex\nDESCRIPTION: This regular expression is designed to find CSS class names that exactly match `.cl-(button)`. It captures the `button` part and was likely used to identify elements styled with the deprecated generic button class within the Clerk framework for replacement.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/button-to-organizationlistcreateorganizationactionbutton.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\"\\\\.cl-(button)\"\n```\n\n----------------------------------------\n\nTITLE: Re-exporting isClerkRuntimeError from @clerk/clerk-react/errors\nDESCRIPTION: Re-exports the `isClerkRuntimeError` type guard function from the `@clerk/clerk-react/errors` module. This allows developers using `@clerk/nextjs` to directly import and use this function for checking Clerk runtime errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nisClerkRuntimeError\n```\n\n----------------------------------------\n\nTITLE: Importing Remaining Type Exports from @clerk/backend (TypeScript)\nDESCRIPTION: Specifies the resource-related types (`Organization`, `Session`, `User`, `WebhookEvent`, `WebhookEventType`) that continue to be exported directly from `@clerk/backend` after the refactoring in version 1.0.0-alpha-v5.12.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Migrating Email Link Error Handling - Next.js (Diff, JavaScript/TypeScript)\nDESCRIPTION: This snippet demonstrates transitioning from the deprecated 'EmailLinkErrorCode' import to the newer 'EmailLinkErrorCodeStatus' in '@clerk/nextjs/errors'. It provides a direct diff showing the minimal code change required for consumers of the Clerk SDK when upgrading. No special implementation dependencies are required beyond the updated package version; users should ensure their code imports the correct symbol matching the new release. The input is simply the import line; the output should use the status-based code instead of the deprecated error code.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- import { EmailLinkErrorCode } from '@clerk/nextjs/errors'\\n+ import { EmailLinkErrorCodeStatus } from '@clerk/nextjs/errors'\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Version 0.2.0\nDESCRIPTION: Removed expo-modules-core from dependencies and added expo as a peer dependency to allow compatibility with Expo SDK versions ^50, ^51, ^52.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- Removed `expo-modules-core` from dependencies in favor of `expo` as a peer dependency to allow broader compatibility with Expo SDK versions `^50 || ^51 || ^52`.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 5.0.2\nDESCRIPTION: Documents patch changes for version 5.0.2, adding new webhook event type exports and updating dependencies\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.2\n\n### Patch Changes\n\n- Export all Webhook event types and related JSON types. The newly exported types are: `DeletedObjectJSON`, `EmailJSON`, `OrganizationInvitationJSON`, `OrganizationJSON`, `OrganizationMembershipJSON`, `SessionJSON`, `SMSMessageJSON`, `UserJSON`, `UserWebhookEvent`, `EmailWebhookEvent`, `SMSWebhookEvent`, `SessionWebhookEvent`, `OrganizationWebhookEvent`, `OrganizationMembershipWebhookEvent`, `OrganizationInvitationWebhookEvent` ([#3248](https://github.com/clerk/javascript/pull/3248)) by [@nikosdouvlis](https://github.com/nikosdouvlis)\n\n- Updated dependencies [[`3c6e5a6f1`](https://github.com/clerk/javascript/commit/3c6e5a6f1dd0ac198e6e48d1b83c6d4846a7f900), [`65503dcb9`](https://github.com/clerk/javascript/commit/65503dcb97acb9538e5c0e3f8199d20ad31c9d7d)]:\n  - @clerk/backend@1.0.1\n  - @clerk/clerk-react@5.0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Loaded Property to Clerk Instance\nDESCRIPTION: Enhancement that adds a 'loaded' property to the core Clerk instance to track loading state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js:** Add `loaded` to core Clerk instance ([7c08a91](https://github.com/clerk/javascript/commit/7c08a914d674f05608503898542b907886465b7e))\n```\n\n----------------------------------------\n\nTITLE: Deprecating 'oauth_' Prefix in getUserOauthAccessToken Method (JavaScript)\nDESCRIPTION: Illustrates the deprecation of using the 'oauth_' prefix for the provider name parameter in the `client.users.getUserOauthAccessToken` method. The example shows the correct usage by removing the prefix, changing 'oauth_google' to 'google'. This change is part of the Clerk JavaScript client library updates.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- client.users.getUserOauthAccessToken('user_id', 'oauth_google')\n+ client.users.getUserOauthAccessToken('user_id', 'google')\n```\n\n----------------------------------------\n\nTITLE: Deprecation Migration Changes\nDESCRIPTION: List of deprecated features and their new alternatives in the Clerk SDK, including property name changes and method replacements.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// Old -> New migrations\npublishableKey // instead of frontendApi\nClerk.handleEmailLinkVerification() // instead of Clerk.handleMagicLinkVerification()\nisEmailLinkError // instead of isMagicLinkError\nEmailLinkErrorCode // instead of MagicLinkErrorCode\nuseEmailLink // instead of useMagicLink\nExternalAccount.imageUrl // instead of ExternalAccount.avatarUrl\nOrganization.imageUrl // instead of Organization.logoUrl\nUser.imageUrl // instead of User.profileImageUrl\n```\n\n----------------------------------------\n\nTITLE: Updating OrganizationSwitcher Component in JavaScript\nDESCRIPTION: Makes changes to the OrganizationSwitcher component, including removal of user identifier and hiding the avatar of the active user when hidePersonal is true.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n- Changes to OrganizationSwitcher ([#1462](https://github.com/clerk/javascript/pull/1462)) by [@panteliselef](https://github.com/panteliselef)\n\n  - Removal of user identifier from the trigger & popover\n  - Hidden avatar of active user when `hidePersonal` is true\n```\n\n----------------------------------------\n\nTITLE: Listing Removed Clerk Localization Keys in JavaScript\nDESCRIPTION: Defines a JavaScript array named `deletedKeys` containing strings. Each string represents a localization key that has been removed from Clerk's components due to a redesign and should be removed from any custom localization objects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/removed-localization-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst deletedKeys = [\n  'formFieldLabel__emailAddress_phoneNumber',\n  'formFieldLabel__phoneNumber_username',\n  'formFieldLabel__emailAddress_phoneNumber_username',\n  'formFieldInputPlaceholder__emailAddress_phoneNumber',\n  'formFieldInputPlaceholder__phoneNumber_username',\n  'formFieldInputPlaceholder__emailAddress_phoneNumber_username',\n  'signIn.forgotPassword.title_email',\n  'signIn.forgotPassword.title_phone',\n  'signIn.forgotPassword.formSubtitle_email',\n  'signIn.forgotPassword.formSubtitle_phone',\n  'signIn.emailCode.formSubtitle',\n  'signIn.phoneCode.formSubtitle',\n  'signIn.phoneCodeMfa.formSubtitle',\n  'signIn.totpMfa.formSubtitle',\n  'signIn.backupCodeMfa.formTitle',\n  'signIn.backupCodeMfa.formSubtitle',\n  'userProfile.start.headerSubtitle__account',\n  'userProfile.start.headerSubtitle__security',\n  'userProfile.start.usernameSection.primaryButton__changeUsername',\n  'userProfile.start.emailAddressesSection.detailsTitle__primary',\n  'userProfile.start.emailAddressesSection.detailsSubtitle__primary',\n```\n\n----------------------------------------\n\nTITLE: Using Clerk SignIn and SignUp Components without Props in JSX\nDESCRIPTION: This snippet demonstrates how to use Clerk SignIn and SignUp components without any props when the appropriate environment variables have been set for sign-in and sign-up URLs.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/path-routing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<SignIn />\n<SignUp />\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Documents version history with patch changes, dependency updates, and pull request references. Contains information about API mutation headers, package dependencies, and various bug fixes across multiple package versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`ec84d51e7`](https://github.com/clerk/javascript/commit/ec84d51e705370273ffb82a0d7c94d90ba3de874)]:\n  - @clerk/clerk-js@5.3.1\n  - @clerk/shared@2.1.1\n  - @clerk/clerk-react@5.0.6\n\n## 1.0.9\n\n### Patch Changes\n\n- Remove `Origin` from API mutation request headers via `onInstalled` listener. ([#3363](https://github.com/clerk/javascript/pull/3363)) by [@tmilewski](https://github.com/tmilewski)\n\n- Revert: Remove `Origin` from API mutation request headers via `onInstalled` listener. ([#3375](https://github.com/clerk/javascript/pull/3375)) by [@tmilewski](https://github.com/tmilewski)\n\n- Updated dependencies [[`94197710a`](https://github.com/clerk/javascript/commit/94197710a70381c4f1c460948ef02cd2a70b88bb), [`34befeebc`](https://github.com/clerk/javascript/commit/34befeebc49d95b5492a2e665ad3b31919f2c1e3), [`b27ca8366`](https://github.com/clerk/javascript/commit/b27ca8366a1d6ec1d7ce4a5be5005f1b1b017c20), [`bcbb2c9ef`](https://github.com/clerk/javascript/commit/bcbb2c9ef42c11b13c1d2f60db4dd88a2d4f04f6)]:\n  - @clerk/clerk-js@5.3.0\n  - @clerk/shared@2.1.0\n  - @clerk/clerk-react@5.0.5\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash Reference for Context Provider Fix\nDESCRIPTION: Git commit hash reference showing fix for passing initialState directly to ClerkContextProvider.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: markdown\nCODE:\n```\n9e55b7c2cafdcbcf6d8c210e668a22e07580cdb6\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Keys for Test Presets - JSON\nDESCRIPTION: Provides a JSON structure for storing Clerk environment credentials (publishable/secret keys) by a concise key name in `.keys.json`. Keys should be filled appropriately for each environment. Required by other snippets that reference `envKeys` for environment variable assignment. Placeholders indicate where secrets should be filled in.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"your-concise-name\\\": {\\n    \\\"pk\\\": \\\"\\\",\\n    \\\"sk\\\": \\\"\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Deprecated `Clerk.redirectToHome()` Usage in JavaScript\nDESCRIPTION: This snippet identifies the `Clerk.redirectToHome()` method which has been removed. Users should replace calls to this method with alternatives like `window.Clerk.redirectToAfterSignUp()` or `window.Clerk.redirectAfterSignIn()`. It requires the Clerk JS SDK to be loaded.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/redirecttohome.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nClerk.redirectToHome()\n```\n\n----------------------------------------\n\nTITLE: Overriding NPM Scripts in Application Builder - TypeScript\nDESCRIPTION: Shows how to override the default 'dev' npm script in an app template within the application config builder. This enables custom dev script execution for a specific framework in test environments.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n.addScript('dev', 'pnpm dev')\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with JSDoc Comments in TypeScript\nDESCRIPTION: Example of a TypeScript function with comprehensive JSDoc comments, showcasing documentation best practices for Clerk's SDKs.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype FnParameters = {\n  /**\n   * Input to the function with a lengthy and good description.\n   */\n  input: string | Array<string>;\n  /**\n   * Optional parameter with a default value.\n   * @default false\n   */\n  isOffline?: boolean;\n};\n\ntype FnReturn = Array<string>;\n\n/**\n * Some long description goes here.\n *\n * > [!NOTE]\n * > This is a note that will be rendered in the documentation.\n *\n * @example\n * ### Example 1\n *\n * This shows how to use the function with a single string input.\n *\n * ```tsx\n * const result = exampleFunction({ input: 'example' });\n * console.log(result); // Output: ['example']\n * ```\n *\n * @example\n * ### Example 2\n *\n * This shows how to use the function with an array of strings as input.\n *\n * ```tsx\n * const result = exampleFunction({ input: ['example1', 'example2'] });\n * console.log(result); // Output: ['example1', 'example2']\n * ```\n */\nexport function exampleFunction({ input, isOffline = false }: FnParameters): FnReturn {\n  if (isOffline) {\n    return [];\n  }\n\n  if (Array.isArray(input)) {\n    return input;\n  }\n\n  return [input];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Client Persistence in Vanilla JavaScript\nDESCRIPTION: Shows how to disable the experimental client persistence feature using the vanilla JavaScript clerk.load method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait clerk.load({ experimental: { persistClient: false } });\n```\n\n----------------------------------------\n\nTITLE: Adding Express 5 Support in Clerk Express Package\nDESCRIPTION: Introduces support for Express 5 in the Clerk Express package, marking a major version change to 1.0.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1.0.0\n\n### Major Changes\n\n- Add support for Express 5 ([#4201](https://github.com/clerk/javascript/pull/4201)) by [@wobsoriano](https://github.com/wobsoriano)\n```\n\n----------------------------------------\n\nTITLE: Adding HeadlessBrowserClerk Implementation\nDESCRIPTION: Feature addition that adds HeadlessBrowserClerk implementation, enabling headless usage of Clerk authentication in React applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-react:** Add HeadlessBrowserClerk ([4236147](https://github.com/clerk/javascript/commit/4236147201b32e3f1d60ebbe2c36de8e89e5e2f6))\n```\n\n----------------------------------------\n\nTITLE: Using ClerkPaginationRequest Type in TypeScript\nDESCRIPTION: Fix for using the ClerkPaginationRequest type without passing a generic. The type now correctly includes limit and offset properties.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nClerkPaginationRequest = { limit, offset }\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Middleware with Async Auth in Next.js\nDESCRIPTION: This code snippet shows how to update the Clerk middleware to use async auth in Next.js. It demonstrates the usage of clerkMiddleware with async/await syntax for authentication and redirection.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkClient, clerkMiddleware } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nexport default clerkMiddleware(async (auth, request) => {\n  const resolvedAuth = await auth();\n\n  const count = await resolvedAuth.users.getCount();\n\n  if (count) {\n    return NextResponse.redirect(new URL('/new-url', request.url));\n  }\n});\n\nexport const config = {\n  matcher: [...],\n};\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - JWT Key Injection\nDESCRIPTION: Added injected jwtKey option to backend-core, clerk-sdk-node, nextjs, and remix packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **backend-core,clerk-sdk-node,nextjs,remix:** Add injected jwtKey option ([53e56e7](https://github.com/clerk/javascript/commit/53e56e76d59984d4d3f5b7e1e2d276adb8b2dc77))\n```\n\n----------------------------------------\n\nTITLE: Fix Options Parsing in withServerSideAuth for Next.js\nDESCRIPTION: A bug fix for the withServerSideAuth function in the @clerk/nextjs package that corrects how options are parsed. This was introduced in version 3.4.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_73\n\nLANGUAGE: Markdown\nCODE:\n```\n- **nextjs:** Fix opts parsing in withServerSideAuth ([1eecb81](https://github.com/clerk/javascript/commit/1eecb81439809fd4536d4b7d2f65d4fed6c6137b))\n```\n\n----------------------------------------\n\nTITLE: Defining Matcher for API_URL Change in Markdown\nDESCRIPTION: This code snippet defines a regular expression matcher to identify occurrences of API_URL in the codebase. It's used to detect instances where the old URL might still be in use.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/api-url-value-changed.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: '`API_URL` value has changed'\nmatcher: \"API_URL[\\\\s\\\\S]*?from\\\\s+['\\\"]@clerk\\\\/backend\\\\/constants['\\\"]\"\nmatcherFlags: 'm'\nwarning: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing webhook verification in TanStack React\nDESCRIPTION: Example of how to use the verifyWebhook function to verify and process Clerk webhooks in a TanStack React application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/webhooks.ts\nimport { verifyWebhook } from '@clerk/tanstack-react-start/webhooks';\n\nexport const APIRoute = createAPIFileRoute('/api/webhooks')({\n  POST: async ({ request }) => {\n    try {\n      const evt = await verifyWebhook(req);\n\n      // Do something with payload\n      const { id } = evt.data;\n      const eventType = evt.type;\n      console.log(`Received webhook with ID ${id} and event type of ${eventType}`);\n      console.log('Webhook payload:', body);\n\n      return new Response('Webhook received', { status: 200 });\n    } catch (err) {\n      console.error('Error: Could not verify webhook:', err);\n      return new Response('Error: Verification error', {\n        status: 400,\n      });\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk.getOrganizationMemberships to user.getOrganizationMemberships in JavaScript\nDESCRIPTION: This diff illustrates the required code change for retrieving organization memberships in Clerk. The static `Clerk.getOrganizationMemberships()` method is deprecated and removed; developers should now call the `getOrganizationMemberships()` method on a user instance (`user`). This change requires having access to a specific user object instance.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/getorganizationmemberships.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- Clerk.getOrganizationMemberships();\n+ user.getOrganizationMemberships();\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example - Before\nDESCRIPTION: Example showing how to import internal helpers and enums before export changes\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { AuthStatus, ... } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Configs Object - TypeScript\nDESCRIPTION: Exports the environment config (`yourConciseName`) as part of an immutable object. This pattern allows for adding multiple environment presets and safely passing them around test suites. The export is usually referenced by Playwright test runners.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const envs = {\\n  // Other exports...\\n  yourConciseName,\\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Regex for Finding `buildRequestUrl` Imports\nDESCRIPTION: This regular expression identifies import statements in JavaScript/TypeScript code that import the `buildRequestUrl` function from the '@clerk/backend' package. This pattern is used to locate code potentially affected by the function's removal. The 'm' flag enables multiline matching, allowing the pattern to work across line breaks within the import statement.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/buildrequesturl-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nimport\\s+{[^}]*?buildRequestUrl[\\s\\S]*?}\\s+from\\s+['\"]@clerk\\/backend['\"]\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Supporting Node12 Runtimes in Clerk Packages\nDESCRIPTION: This commit adds support for Node.js 12 runtimes in the Clerk backend, SDK, and shared packages. It ensures compatibility with older Node.js versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_57\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **backend,clerk-sdk-node,shared:** Support node12 runtimes ([fdcd6b3](https://github.com/clerk/javascript/commit/fdcd6b3f7c61490297a5fdfa80228cbb7787b49b))\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events in ClerkJS\nDESCRIPTION: Shows how to dispatch events with payload data using the eventBus.dispatch() method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/docs/events.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { eventBus, events } from './core/events';\n\nconst obj: NewEventPayload = { something: ... };\neventBus.dispatch(events.NewEvent, obj);\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash Reference for Loading Fix\nDESCRIPTION: Git commit hash reference showing fix for making isomorphicClerk loading idempotent.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n91b62175cadd82b38747cc6d7a0216f42c89b5fe\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to run the Next.js development server using npm, yarn, or pnpm. This allows developers to view and test their application locally.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/next-app-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Feature Implementation - Clerk Fastify Integration\nDESCRIPTION: Initial implementation of @clerk/fastify package with basic functionality including client exports and plugin options\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **fastify:** Add @clerk/fastify implementation & use it in @playground/fastify ([6cb4c6a])\n- **fastify:** Export `clerkClient` and `createClerkClient` ([ba7abfa])\n- **fastify:** Improve code readability and test coverage ([13d4f0f])\n```\n\n----------------------------------------\n\nTITLE: Documenting New Features in Clerk React Changelog\nDESCRIPTION: Lists new features added to the Clerk React package, including hooks for organization management and updates to fetching mechanisms.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: Markdown\nCODE:\n```\n### Features\n\n- **clerk-js,clerk-react:** GetOrganization/s hook methods, fetching mechanism alignment ([fc11087](https://github.com/clerk/javascript/commit/fc110874f9a3e056cd43c773c267409dd9b318d6))\n- **clerk-js:** Add useOrganization hook ([480c422](https://github.com/clerk/javascript/commit/480c422774472fc712afdfe6ded2677b458d3ef0))\n- **clerk-react,clerk-js:** Add useOrganization hook using __unstable attribute ([1635132](https://github.com/clerk/javascript/commit/16351321a99945d167cbf6e6ca0efdbbbf7efe5a))\n```\n\n----------------------------------------\n\nTITLE: Replacing __experimental_reverificationErrorResponse API\nDESCRIPTION: Notes the renaming of the experimental API property `__experimental_reverificationErrorResponse` to `reverificationErrorResponse` for accessing reverification error details.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n__experimental_reverificationErrorResponse\n```\n\n----------------------------------------\n\nTITLE: Simplified Redirect to Sign In with Clerk Middleware\nDESCRIPTION: Comparison of before and after syntax for redirecting to sign in from middleware, demonstrating that explicit returns are no longer needed when calling auth().redirectToSignIn().\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    return auth().redirectToSignIn()\n  }\n})\n\n// After\nexport default clerkMiddleware(auth => {\n  if (protectedRoute && !auth.user) {\n    auth().redirectToSignIn()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Verification Status Default\nDESCRIPTION: Bug fix to set default verification status to unverified when verification is missing\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_49\n\nLANGUAGE: markdown\nCODE:\n```\n- **clerk-js:** Default verification status to unverified if verification is missing ([cac67a0](https://github.com/clerk/javascript/commit/cac67a0199c0058ba23a7b74834dfa55915a42ae))\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Permissions for Clerk Browser Extension in JSON\nDESCRIPTION: This snippet shows the minimum required permissions for all Clerk Browser Extensions. It includes the 'storage' permission, which is essential for the extension's functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/docs/manifest.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permissions\": [\"storage\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling `User.createExternalAccount` Method (JavaScript)\nDESCRIPTION: Reference to the `User.createExternalAccount` method from the Clerk JavaScript SDK. This method is affected by the parameter rename from `redirect_url` to `redirectUrl` and is used for linking external accounts.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-createexternalaccount-redirecturl.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nUser.createExternalAccount\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated `redirect_url` in `createExternalAccount` (Regex)\nDESCRIPTION: A regular expression designed to find instances where the deprecated `redirect_url` parameter is used within the options object passed to the `createExternalAccount` function. This helps locate code needing update.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-createexternalaccount-redirecturl.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\ncreateExternalAccount\\\\(\\\\s*{[\\\\s\\\\S]*?(redirect_url):[\\\\s\\\\S]*?\\\\)\n```\n\n----------------------------------------\n\nTITLE: Adapting to `getOrganizationMembershipList` Return Change (JavaScript)\nDESCRIPTION: Illustrates the necessary code modification in JavaScript to handle the updated return signature of `clerkClient.users.getOrganizationMembershipList`. The method previously returned only the data array, but now returns an object `{ data, totalCount }`, requiring de-structuring to access the paginated data and the total number of memberships. This change was introduced in the core 2 release.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/user-getorganizationmemberships-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- const data = await clerkClient.users.getOrganizationMembershipList()\n+ const { data, totalCount } = await clerkClient.users.getOrganizationMembershipList()\n```\n```\n\n----------------------------------------\n\nTITLE: Using Internal Backend Helpers and Enums - Clerk Backend Typescript\nDESCRIPTION: Specifies how to import common authentication helpers and enums from '@clerk/backend/internal' instead of the package root. Provides a list of available helpers for authentication and request management, such as createAuthenticateRequest and debugRequestState. The source file must be in TypeScript using the Clerk backend package. Input is backend code handling authentication; output is more explicitly versioned import paths. Omitting these changes can result in unresolved imports.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthStatus,\n  buildRequestUrl,\n  constants,\n  createAuthenticateRequest,\n  createIsomorphicRequest,\n  debugRequestState,\n  makeAuthObjectSerializable,\n  prunePrivateMetadata,\n  redirect,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Limiting Playwright Test Matrix in GitHub Actions - YAML\nDESCRIPTION: Demonstrates how to restrict the 'test-name' matrix parameter in a GitHub Actions CI workflow (`ci.yml`) to a single project (e.g., 'nextjs'). This enables debugging by reducing which tests are run. The snippet should be placed inside the 'strategy.matrix' section.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\\n  matrix:\\n    # In the original file the test-name includes more in its array\\n    test-name: ['nextjs']\n```\n\n----------------------------------------\n\nTITLE: Adding Modal Appearance Option in Clerk JavaScript SDK\nDESCRIPTION: This change adds the ability to specify an appearance for modal component usages in the Clerk JavaScript SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Add the ability to specify an appearance for modal component usages. ([#5125](https://github.com/clerk/javascript/pull/5125)) by [@alexcarpenter](https://github.com/alexcarpenter)\n```\n\n----------------------------------------\n\nTITLE: Writing Individual Tests in TypeScript\nDESCRIPTION: Structure for writing individual tests within a Playwright test suite, including utility setup.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\nimport type { Application } from '../models/application';\nimport { appConfigs } from '../presets';\nimport { createTestUtils } from '../testUtils';\n\ntest.describe('Smoke test', () => {\n  test.describe.configure({ mode: 'parallel' });\n  let app: Application;\n\n  test.beforeAll(async () => {\n    // ...\n  });\n\n  test.afterAll(async () => {\n    await app.teardown();\n  });\n\n  test('your test', async ({ page, context }) => {\n    const u = createTestUtils({ app, page, context });\n\n    // Your tests\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Session Token Return Value Changes\nDESCRIPTION: Example showing migration path for SessionApi.getToken() return value changes to maintain v4 behavior.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClerkAPIResponseError } from '@clerk/shared/error';\n\nconst response = await clerkClient.sessions.getToken(...);\n\nif (response.errors) {\n    const { status, statusText, clerkTraceId } = response;\n    const error = new ClerkAPIResponseError(statusText || '', {\n        data: [],\n        status: Number(status || ''),\n        clerkTraceId,\n    });\n    error.errors = response.errors;\n\n    throw error;\n}\n\n// the value of the v4 `clerkClient.sessions.getToken(...)`\nconst jwtString = response.data.jwt;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Suite with Application in TypeScript\nDESCRIPTION: Basic setup for a test suite with application initialization and teardown in TypeScript.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\nimport type { Application } from '../models/application';\n\ntest.describe('Smoke test', () => {\n  test.describe.configure({ mode: 'parallel' });\n  let app: Application;\n\n  test.beforeAll(async () => {\n    // TODO\n  });\n\n  test.afterAll(async () => {\n    // TODO\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sign Out Implementation Examples\nDESCRIPTION: Various examples showing how to implement sign out functionality using different Clerk components and methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.signOut({ redirectUrl: '/' })\n\n<SignOutButton redirectUrl='/' />\n// uses Clerk.signOut({ redirectUrl: '/' })\n<UserButton afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n<ClerkProvider afterSignOutUrl='/after' />\n// uses Clerk.signOut({ redirectUrl: '/after' })\n```\n\n----------------------------------------\n\nTITLE: Updating MultiSessionAppSupport Import Path for Next.js\nDESCRIPTION: Example showing how to update the import path for MultiSessionAppSupport from @clerk/nextjs to @clerk/nextjs/internal. Note that internal imports are not intended for general usage and are outside the scope of semantic versioning.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/multisessionappsupport-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { MultiSessionAppSupport } from \"@clerk/nextjs\"\n+ import { MultiSessionAppSupport } from \"@clerk/nextjs/internal\"\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Core 1 Version of Clerk SDK\nDESCRIPTION: This npm command installs the latest Core 1 version of the Clerk SDK. It's recommended to update to this version before upgrading to Core 2 to ensure a smoother transition.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/prepare.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i <%= packageName %>@<%= parseInt(version.substring(1)) - 1 %>\n```\n\n----------------------------------------\n\nTITLE: Package Reference - Clerk Backend SDK\nDESCRIPTION: Reference to the Clerk Backend SDK package name as used in Node.js projects.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/backend/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@clerk/backend\n```\n\n----------------------------------------\n\nTITLE: Running Tests Against Pre-Started Long Running Applications\nDESCRIPTION: Illustrates how to define tests that run against a pre-started, long-running application instance using the `testAgainstRunningApps` utility. This approach avoids the overhead of starting and stopping the application for each test suite by reusing an application started in `global.setup` and stopped in `global.teardown`.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { expect, test } from '@playwright/test';\n\nimport { appConfigs } from '../presets';\nimport type { FakeUser } from '../testUtils';\nimport { createTestUtils, testAgainstRunningApps } from '../testUtils';\n\ntestAgainstRunningApps({ withEnv: [appConfigs.envs.withEmailCodes] })('your test', ({ app }) => {\n  // Your test\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Targeting UserButton Trigger Element with CSS in Clerk\nDESCRIPTION: The CSS class selector `.cl-userButtonTrigger` targets the trigger element of the Clerk `<UserButton />`. Due to a structural change, this element now contains `.cl-userButtonBox`. Custom styles applied to this selector might need review, especially those relying on its previous relationship with `userButtonBox`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/userbuttontrigger-userbuttonbox-invert.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.cl-userButtonTrigger\n```\n\n----------------------------------------\n\nTITLE: Cloning the Clerk Chrome Extension Quickstart in Bash\nDESCRIPTION: Command to clone the Clerk Chrome Extension quickstart repository for a working template.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/browser-extension/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/clerkinc/clerk-chrome-extension-quickstart\n```\n\n----------------------------------------\n\nTITLE: Extracting revalidate and setData from useOrganizationList hook - Javascript\nDESCRIPTION: This snippet shows how to destructure the revalidate and setData functions from the userMemberships object returned by the useOrganizationList React hook. Requires @clerk/react as a dependency. The hook must be called inside a React component and receives an options object, with userMemberships set to true, enabling paginated list data operations for user memberships. Returns methods for cache invalidation and manual data setting, facilitating seamless data updates in apps using Clerk organizations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst {userMemberships:{revalidate, setData}} = useOrganizationList({userMemberships:true})\n```\n\n----------------------------------------\n\nTITLE: Initializing Application for Test Suite in TypeScript\nDESCRIPTION: Complete setup for a test suite with application initialization, configuration, and teardown in TypeScript.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\nimport type { Application } from '../models/application';\nimport { appConfigs } from '../presets';\n\ntest.describe('Smoke test', () => {\n  test.describe.configure({ mode: 'parallel' });\n  let app: Application;\n\n  test.beforeAll(async () => {\n    app = await appConfigs.react.vite.clone().commit();\n    await app.setup();\n    await app.withEnv(appConfigs.envs.withEmailCodes);\n    await app.dev();\n  });\n\n  test.afterAll(async () => {\n    await app.teardown();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates with mkcert in Bash\nDESCRIPTION: This command generates a new cert/key pair for 'example.com' and its subdomains using mkcert. It creates 'sessions.pem' and 'sessions-key.pem' files in the current directory.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/certs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkcert -cert-file sessions.pem -key-file sessions-key.pem \"example.com\" \"*.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Updating CreateOrganization Component Behavior in JavaScript\nDESCRIPTION: Modifies the CreateOrganization component to skip the invitation page if the newly created organization has a maximum allowed membership of 1.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n- In the <CreateOrganization /> component, if the newly created organization has max allowed membership equal to 1, skip the invitation page ([#1471](https://github.com/clerk/javascript/pull/1471)) by [@chanioxaris](https://github.com/chanioxaris)\n```\n\n----------------------------------------\n\nTITLE: Standardizing Ambient Declaration Files\nDESCRIPTION: This change standardizes ambient declaration files across all Clerk SDKs for consistency.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- Standardizing ambient declaration files for all SDKs ([#4919](https://github.com/clerk/javascript/pull/4919)) by [@jacekradko](https://github.com/jacekradko)\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Various setup commands for configuring a project to use monorepo versions of Clerk packages, with options for customizing the setup process.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/dev-cli/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev setup\n```\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev setup --no-js\n```\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev setup --skip-install\n```\n\n----------------------------------------\n\nTITLE: Updated TypeScript Import Paths\nDESCRIPTION: Example of migrating imports to new paths in @clerk/clerk-react package, showing before and after usage patterns.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { **internal**setErrorThrowerOptions } from '@clerk/clerk-react';\n// After\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\n\n// Before\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react';\n// After\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react/errors';\n\n// Before\nimport { MultisessionAppSupport } from '@clerk/clerk-react';\n// After\nimport { MultisessionAppSupport } from '@clerk/clerk-react/internal';\n```\n\n----------------------------------------\n\nTITLE: Migrating Routing Props in Clerk React Components - React JSX\nDESCRIPTION: Demonstrates how to configure Clerk component routing via the 'path' and 'routing' props in React. Enforces the required 'path' or 'routing' properties, showing error case if omitted and alternatives for compliance. No external dependencies required besides Clerk React components and a React environment. Inputs are JSX Clerk components; outputs are rendered authentication UIs with variable routing logic. Failing to include required props results in errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Without path or routing props, an error with be thrown\n<UserProfile />\n<CreateOrganization />\n<OrganizationProfile />\n<SignIn />\n<SignUp />\n\n// Alternative #1\n<UserProfile path=\"/whatever\"/>\n<CreateOrganization path=\"/whatever\"/>\n<OrganizationProfile path=\"/whatever\"/>\n<SignIn path=\"/whatever\"/>\n<SignUp path=\"/whatever\"/>\n\n// Alternative #2\n<UserProfile routing=\"hash_or_virtual\"/>\n<CreateOrganization routing=\"hash_or_virtual\"/>\n<OrganizationProfile routing=\"hash_or_virtual\"/>\n<SignIn routing=\"hash_or_virtual\"/>\n<SignUp routing=\"hash_or_virtual\"/>\n```\n\n----------------------------------------\n\nTITLE: Using ClerkDegraded Component in React\nDESCRIPTION: Example showing how to use the ClerkDegraded component to display a warning message when Clerk is in a degraded state while still showing the main UI.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ClerkLoaded>\n  <MyCustomPasskeyRegistration />\n  <ClerkDegraded>We are experiencing issues, registering a passkey might fail.</ClerkDegraded>\n</ClerkLoaded>\n```\n\n----------------------------------------\n\nTITLE: Adding a New Localization Language\nDESCRIPTION: This snippet explains the process of adding a new localization language by creating a new file and translating the contents from the en-US.ts file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. Create a new file that follows the [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format\n\n2. Copy the contents of the `en-US.ts` file and translate all keys where necessary. Empty strings can stay empty. You don't need to translate things word by word, adjust where necessary as long as the same meaning is conveyed.\n```\n\n----------------------------------------\n\nTITLE: Required Next.js Version for Clerk Integration\nDESCRIPTION: Specifies the minimum required Next.js version (13.0.4) for using the @clerk/nextjs package. Users need to ensure their Next.js installation meets this requirement for compatibility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/nextjs-version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@clerk/nextjs\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Dropping Support for NodeJS 12 in Clerk Packages\nDESCRIPTION: This commit removes support for NodeJS 12 in the Clerk backend, SDK, and shared packages. It's part of updating the minimum supported Node.js version.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_56\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **backend,clerk-sdk-node,shared:** Drop support for NodeJS 12 ([d9169ab](https://github.com/clerk/javascript/commit/d9169ab4873e1745d7250628f5bf8c8f7da49421))\n```\n\n----------------------------------------\n\nTITLE: Identifying Deprecated Interstitial API Usage in JavaScript\nDESCRIPTION: This code snippet represents a regular expression pattern used to identify usage of the deprecated loadInterstitialFromLocal function in JavaScript code. It's likely used as part of a migration or deprecation detection process.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/interstitial-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nloadInterstitialFromLocal\\(\n```\n\n----------------------------------------\n\nTITLE: Updating `useOrganization` Hook for Invitations in JavaScript\nDESCRIPTION: Demonstrates the transition from the deprecated `invitationList` parameter to the new `invitations` parameter within the `useOrganization` hook (which replaces the deprecated `useOrganizations`). It shows the change in pagination parameters from `limit`/`offset` to `initialPage`/`pageSize` and includes an example for fetching all invitations using `invitations: true`. Note that `useOrganizations` is deprecated.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/useorganization-invitationlist.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// before\nconst { invitationList } = useOrganization({\n  invitationList: { limit: 10, offset: 1 },\n});\n\n// after\nconst { invitations } = useOrganization({\n  invitations: {\n    initialPage: 1,\n    pageSize: 10,\n  },\n});\n\n// you can also simply return all invitations\nconst { invitations } = useOrganization({ invitations: true });\n```\n\n----------------------------------------\n\nTITLE: Improving Error Messages in Clerk Testing\nDESCRIPTION: Code snippet showing the enhancement of error messages when the setupClerkTestingToken function cannot find the FAPI URL.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Improve the error message when `setupClerkTestingToken` cannot find the FAPI URL ([#3520](https://github.com/clerk/javascript/pull/3520)) by [@anagstef](https://github.com/anagstef)\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset Example in Markdown\nDESCRIPTION: Example of a changeset for the @clerk/nextjs package with a minor version bump. This demonstrates the format of a changeset file which includes the package name, semver bump type, and description.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n---\n'@clerk/nextjs': minor\n---\n\nDescription goes here\n```\n\n----------------------------------------\n\nTITLE: Importing API_URL from Clerk React Package\nDESCRIPTION: Shows the import pattern for the API_URL constant from @clerk/clerk-react package. The value has changed from https://api.clerk.dev to https://api.clerk.com which may require code adjustments if implementations depend on the specific URL value.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/react/api-url-value-change.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { API_URL } from '@clerk/clerk-react'\n```\n\n----------------------------------------\n\nTITLE: Setting Active Instance\nDESCRIPTION: Command to switch between different clerk-dev instances in the configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/dev-cli/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev set-instance yourName\n```\n\n----------------------------------------\n\nTITLE: Installing expo-secure-store via npm - Bash\nDESCRIPTION: This snippet demonstrates the command required to install the expo-secure-store package, which is a prerequisite for enabling offline resource caching in Clerk-enabled Expo apps. Developers must run this command in their project directory prior to configuring Clerk offline support. The command installs expo-secure-store as a dependency, allowing it to be imported and used for secure persistent storage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i expo-secure-store\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Adding HeadlessBrowserClerk\nDESCRIPTION: Implementation of HeadlessBrowserClerk functionality in clerk-react package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n4236147201b32e3f1d60ebbe2c36de8e89e5e2f6\n```\n\n----------------------------------------\n\nTITLE: Installing svix dependency for webhook verification\nDESCRIPTION: Command to install the svix package, which is required for verifying Clerk webhooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install svix\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Express Package\nDESCRIPTION: Command to install the @clerk/express package using npm.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @clerk/express\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash Reference for Bug Fix\nDESCRIPTION: Git commit hash reference showing fix for making getOrCreateInstance handle both SSR and CSR instantiation.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_43\n\nLANGUAGE: markdown\nCODE:\n```\nd22b808cf9eee2570be83f247fd25543a0202fd6\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Package.json\nDESCRIPTION: This snippet shows the updated dependencies for the Clerk JavaScript SDK. It includes version bumps for @clerk/types, @clerk/backend, @clerk/shared, and @clerk/vue.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`8a28d1f403309f692d9332704f07effbf39d056d`](https://github.com/clerk/javascript/commit/8a28d1f403309f692d9332704f07effbf39d056d), [`8a28d1f403309f692d9332704f07effbf39d056d`](https://github.com/clerk/javascript/commit/8a28d1f403309f692d9332704f07effbf39d056d)]:\n  - @clerk/types@4.35.1\n  - @clerk/backend@1.18.1\n  - @clerk/shared@2.17.1\n  - @clerk/vue@0.0.10\n```\n\n----------------------------------------\n\nTITLE: Removed Import Pattern for `createEmail` in JavaScript\nDESCRIPTION: This regular expression pattern matches import statements that include the `createEmail` function from the `@clerk/backend` package. It is used to identify code that needs to be updated due to the removal of this import.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/createemail-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport\\s+{[^}]*?createEmail[\\s\\S]*?}\\s+from\\s+['\"]@clerk/backend['\"]\n```\n\n----------------------------------------\n\nTITLE: Removed API Function Reference - getRequestUrl in Clerk JavaScript\nDESCRIPTION: The getRequestUrl function, previously used for custom framework integrations with Clerk, has been removed from the SDK. This function was used for internal URL handling and has been replaced with alternative internal methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/shared/getrequesturl.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.getRequestUrl(\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Clerk JavaScript Package\nDESCRIPTION: This snippet shows dependency updates for version 1.4.28 of the Clerk JavaScript package. It lists changes to @clerk/backend, @clerk/types, and @clerk/shared dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`725918d`](https://github.com/clerk/javascript/commit/725918df2e74cea15e9b748aaf103a52df8e8500), [`10247ba`](https://github.com/clerk/javascript/commit/10247ba2d08d98d6c440b254a4b786f4f1e8967a), [`91d0f0b`](https://github.com/clerk/javascript/commit/91d0f0b0dccab7168ad4dc06c8629808938c235f), [`9572bf5`](https://github.com/clerk/javascript/commit/9572bf5bdfb7dc309ec8714989b98ab12174965b), [`39bbc51`](https://github.com/clerk/javascript/commit/39bbc5189a33dc6cebdc269ac2184dc4ffff2534), [`3dddcda`](https://github.com/clerk/javascript/commit/3dddcda191d8f8d6a9b02464f1f6374d3c6aacb9), [`7524943`](https://github.com/clerk/javascript/commit/7524943300d7e693d61cc1820b520abfadec1c64), [`150b5c8`](https://github.com/clerk/javascript/commit/150b5c89477abb0feab15e0a886179473f653cac), [`23c931e`](https://github.com/clerk/javascript/commit/23c931e9e95e6de992549ad499b477aca9a9c344), [`730262f`](https://github.com/clerk/javascript/commit/730262f0f973923c8749b09078c80c2fc966a8ec), [`5601a15`](https://github.com/clerk/javascript/commit/5601a15e69a7d5e2496dcd82541ca3e6d73b0a3f), [`0b18bb1`](https://github.com/clerk/javascript/commit/0b18bb1fe6fa3ded97547bb6b4d2c73030aad329), [`021bc5f`](https://github.com/clerk/javascript/commit/021bc5f40044d34e49956ce3c9b61d833d815b42), [`1a61390`](https://github.com/clerk/javascript/commit/1a61390d3482bd4af58508b972ad89dea56fa224)]:\n  - @clerk/types@4.49.0\n  - @clerk/backend@1.25.3\n  - @clerk/shared@3.0.2\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Clerk JavaScript Monorepo\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd javascript\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests in Parallel with pnpm\nDESCRIPTION: Command to execute all integration tests in parallel using pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:integration:base\n```\n\n----------------------------------------\n\nTITLE: Updated Imports from @clerk/backend/internal in TypeScript\nDESCRIPTION: Demonstrates the new import structure for various helpers and enums from @clerk/backend/internal.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthStatus,\n  buildRequestUrl,\n  constants,\n  createAuthenticateRequest,\n  createIsomorphicRequest,\n  debugRequestState,\n  makeAuthObjectSerializable,\n  prunePrivateMetadata,\n  redirect,\n  sanitizeAuthObject,\n  signedInAuthObject,\n  signedOutAuthObject,\n} from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Generated Changelog Entry Example in Markdown\nDESCRIPTION: Example of a generated changelog entry from a changeset. The entry includes the change type (Minor), the description, PR reference, and author attribution.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Minor Changes\n\n- Description goes here (#123) by @johndoe\n```\n\n----------------------------------------\n\nTITLE: Deprecated API Migration - Node Version Support\nDESCRIPTION: Migration details showing minimum required Node.js version is now 18.18.0, dropping support for Node 14 and 16 as they reached EOL status.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Minimum required Node.js version\nnode >= 18.18.0\n```\n\n----------------------------------------\n\nTITLE: Setting Redirect URLs via Environment Variables in Remix\nDESCRIPTION: Shows the environment variables `CLERK_AFTER_SIGN_IN_URL` and `CLERK_AFTER_SIGN_UP_URL` used to configure the respective redirect URLs in a Remix application using the Clerk SDK. Set these in your server environment to define the post-authentication redirect destinations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/redirecttohome.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nCLERK_AFTER_SIGN_IN_URL\n```\n\nLANGUAGE: shell\nCODE:\n```\nCLERK_AFTER_SIGN_UP_URL\n```\n\n----------------------------------------\n\nTITLE: Using subpath exports with @clerk/shared\nDESCRIPTION: Example showing how to migrate from root imports to subpath exports in @clerk/shared, which helps with tree-shaking and prevents loading React modules in Node.js environments.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- import { deprecated, OrganizationProvider } from \"@clerk/shared\"\n+ import { deprecated } from \"@clerk/shared/deprecated\"\n+ import { OrganizationProvider } from \"@clerk/shared/react\"\n```\n\n----------------------------------------\n\nTITLE: Removing ClerkErrorBoundary Import and Usage in Remix\nDESCRIPTION: Example showing how to remove the deprecated ClerkErrorBoundary component from Remix applications. The component is no longer needed for error handling in Remix and should be removed from imports and usage.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/remix/clerkerrorboundary-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n import { rootAuthLoader } from '@clerk/remix/ssr.server';\n import {\n     ClerkApp,\n-    ClerkErrorBoundary\n } from '@clerk/remix';\n\n export const loader = (args: DataFunctionArgs) => {\n   return rootAuthLoader(args);\n };\n\n export default ClerkApp(App);\n\n- export const ErrorBoundary = ClerkErrorBoundary();\n```\n\n----------------------------------------\n\nTITLE: Adding a New Localization Key in English\nDESCRIPTION: This snippet demonstrates how to add a new localization key to the en-US.ts file, which serves as the default language for localizations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nOpen the [`localizations/src/en-US.ts`](https://github.com/clerk/javascript/blob/main/packages/localizations/src/en-US.ts) file and add your new key to the object.\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Domain Webhook Event Types\nDESCRIPTION: This change adds types for organization domain webhook events in the Clerk JavaScript SDK.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Adds types for organization domain webhook events ([#4819](https://github.com/clerk/javascript/pull/4819)) by [@ijxy](https://github.com/ijxy)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with Specific Commit References\nDESCRIPTION: This snippet shows updates to dependencies with specific commit references for @clerk/types, @clerk/backend, @clerk/shared, and @clerk/vue.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`c70994b5b6f92a6550dfe37547f01bbfa810c223`](https://github.com/clerk/javascript/commit/c70994b5b6f92a6550dfe37547f01bbfa810c223), [`7623a99594e7329200b6b374e483152d7679ce66`](https://github.com/clerk/javascript/commit/7623a99594e7329200b6b374e483152d7679ce66)]:\n  - @clerk/types@4.34.2\n  - @clerk/backend@1.17.2\n  - @clerk/shared@2.16.1\n  - @clerk/vue@0.0.7\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates Version 0.0.8\nDESCRIPTION: Updated dependencies including @clerk/shared and @clerk/types with corresponding commit references\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/vue/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`fe9e147e366153d664af7fc325655ecb299a1f9d`], [`fe9e147e366153d664af7fc325655ecb299a1f9d`], [`d84d7e31235c5c7da3415981dc76db4473a71a39`], [`dce4f7ffca7248c0500f0ec9a978672b1f2fad69`]]:\n  - @clerk/shared@2.17.0\n  - @clerk/types@4.35.0\n```\n\n----------------------------------------\n\nTITLE: Migrating from frontendApi to publishableKey in createClerkClient for Node.js\nDESCRIPTION: This code demonstrates how to update from the deprecated 'frontendApi' parameter to the new 'publishableKey' parameter when initializing a Clerk client. Both the parameter name and value need to be changed, with the new publishable key available in the Clerk dashboard.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkclient-frontendapi.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/clerk-sdk-node';\n\n- createClerkClient({ frontendApi: '...' });\n+ createClerkClient({ publishableKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Updating auth() Function to Async in Next.js\nDESCRIPTION: This snippet demonstrates the migration from a synchronous auth() function to an asynchronous one in Next.js. It shows the changes required in the GET function to accommodate the new async behavior.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from '@clerk/nextjs/server';\n\nexport async function GET() {\n  const { userId } = await auth();\n  return new Response(JSON.stringify({ userId }));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating @clerk/types Dependency in package.json\nDESCRIPTION: Example of updating the @clerk/types dependency version in a package.json file. This is a common pattern seen throughout the changelog.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@clerk/types\": \"^4.42.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Environment Variables\nDESCRIPTION: Command to run tests with custom environment variables for a specific setup.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nE2E_APP_SK=sk_test_xxx E2E_APP_PK=pk_test_xxx E2E_APP_URL=http://localhost:3000 E2E_APP_CLERK_JS=https://xxx.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js pnpm test:integration:base -- --ui\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Utilities from New Subpaths in @clerk/clerk-react\nDESCRIPTION: Shows the changes to import paths for internal utilities, error handling functions, and components that have been moved to dedicated subpaths in @clerk/clerk-react.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { __internal__setErrorThrowerOptions } from '@clerk/clerk-react';\n// After\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\n\n// Before\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react';\n// After\nimport {\n  isClerkAPIResponseError,\n  isEmailLinkError,\n  isKnownError,\n  isMetamaskError,\n} from '@clerk/clerk-react/errors';\n\n// Before\nimport { MultisessionAppSupport } from '@clerk/clerk-react';\n// After\nimport { MultisessionAppSupport } from '@clerk/clerk-react/internal';\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Polyfilling WebCrypto for Node14 and Node12\nDESCRIPTION: This commit adds a polyfill for WebCrypto in Node.js versions 14 and 12. It ensures that cryptographic operations are available in these older Node.js environments.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_58\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **backend:** Polyfill webcrypto for node14 and node12 ([329bd6d](https://github.com/clerk/javascript/commit/329bd6d3426929e2cee06aeb04fd910b394a920f))\n```\n\n----------------------------------------\n\nTITLE: Installing Latest React Dependencies using pnpm\nDESCRIPTION: This command installs the latest versions of React and React DOM using pnpm. It's necessary for compatibility with Clerk SDKs that require React 18 or higher.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/react-version.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add react@latest react-dom@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Environment Variables\nDESCRIPTION: Environment variables required for Clerk integration, to be set in a .env file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nCLERK_PUBLISHABLE_KEY=pk_test_xxx\nCLERK_SECRET_KEY=sk_test_xxx\n```\n\n----------------------------------------\n\nTITLE: Accessing the New `imageUrl` Property (JavaScript)\nDESCRIPTION: This snippet shows the new property name `imageUrl`. It replaces the deprecated `logoUrl` for accessing the image URL associated with a Clerk `Organization` object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-logourl.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimageUrl\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Clerk JavaScript Packages\nDESCRIPTION: This snippet shows version updates for Clerk JavaScript packages. It includes changes to @clerk/clerk-js, @clerk/shared, and @clerk/clerk-react dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`1da28a2`](https://github.com/clerk/javascript/commit/1da28a28bf602069b433c15b92df21f682779294), [`d7f13ac`](https://github.com/clerk/javascript/commit/d7f13ac0edba90ea18d01f12a9d8613cbc1eafbf), [`a9b618d`](https://github.com/clerk/javascript/commit/a9b618dfa97a0dacc462186c8b2588ad5ddb6902), [`f20dc15`](https://github.com/clerk/javascript/commit/f20dc159f542449e7f5b437b70d3eb3ba04d6975), [`4d9f1ee`](https://github.com/clerk/javascript/commit/4d9f1ee8c22fe1e4a166ff054d0af4d37b829f0a)]:\n  - @clerk/clerk-js@5.58.0\n  - @clerk/shared@3.2.2\n  - @clerk/clerk-react@5.25.4\n```\n\n----------------------------------------\n\nTITLE: Initial Configuration Setup\nDESCRIPTION: Commands for initializing the clerk-dev configuration file and setting the root directory for the clerk/javascript repository.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/dev-cli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev init\n```\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev set-root\n```\n\n----------------------------------------\n\nTITLE: Setting up Clerk Handler in TanStack React Start SSR Entrypoint\nDESCRIPTION: Modification to the SSR entrypoint (app/ssr.tsx) to wrap the start handler with Clerk's handler.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createStartHandler, defaultStreamHandler } from '@tanstack/start/server';\nimport { getRouterManifest } from '@tanstack/start/router-manifest';\nimport { createRouter } from './router';\nimport { createClerkHandler } from '@clerk/tanstack-react-start/server';\n\nconst handler = createStartHandler({\n  createRouter,\n  getRouterManifest,\n});\n\nconst clerkHandler = createClerkHandler(handler);\n\n/*\n * // You can also override Clerk options by passing an object as second argument\n * const clerkHandler = createClerkHandler(handler, {\n *   afterSignInUrl: '/dashboard',\n * });\n */\n\nexport default clerkHandler(defaultStreamHandler);\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Clerk SDK with npm\nDESCRIPTION: This command installs the latest version of the Clerk SDK using npm. The <%= packageName %> placeholder should be replaced with the actual package name.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/update-version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install <%= packageName %>\n```\n\n----------------------------------------\n\nTITLE: Updating @clerk/types Dependency in package.json\nDESCRIPTION: This snippet shows how to update the @clerk/types dependency in the package.json file. It uses the caret (^) symbol to specify version compatibility.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@clerk/types\": \"^4.55.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Table and Pagination Elements\nDESCRIPTION: Enhancement that adds table and pagination UI elements to the Clerk JavaScript library for displaying tabular data.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_41\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js:** Add table and pagination elements ([cb56f5c](https://github.com/clerk/javascript/commit/cb56f5c0313ba6f1fce50eae6fc3e3d596cf1b16))\n```\n\n----------------------------------------\n\nTITLE: Introducing reverificationError Property\nDESCRIPTION: Introduces the `reverificationError` property, which is the new name for the previously named `reverificationMismatch` property, used to indicate or detail reverification errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nreverificationError\n```\n\n----------------------------------------\n\nTITLE: Building All Packages in the Clerk JavaScript Monorepo\nDESCRIPTION: Command to build all packages in the Clerk JavaScript monorepo using pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: URL Constructor Fix\nDESCRIPTION: Code fix for creating new URLs in clerk-js\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_48\n\nLANGUAGE: markdown\nCODE:\n```\n- **clerk-js:** Fix new URL constructor ([d0cc743](https://github.com/clerk/javascript/commit/d0cc74330bfbf277fa5529e9e537cad384875653))\n```\n\n----------------------------------------\n\nTITLE: Identifying the Removed Experimental Property `Clerk.__unstable__invitationUpdate`\nDESCRIPTION: This snippet identifies the specific experimental property `Clerk.__unstable__invitationUpdate` that has been removed from the Clerk JavaScript library. The surrounding text explains that this property is no longer available and has no current replacement. Users relying on this property need to find alternatives or contact Clerk support.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/unstable-invitationupdate.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nClerk.__unstable__invitationUpdate\n```\n\n----------------------------------------\n\nTITLE: Matching `colorAlphaShade` Variable Declaration using Regex\nDESCRIPTION: This regular expression identifies the usage of the renamed `colorAlphaShade` variable within a `variables` object literal in JavaScript or similar code. It is designed to help locate instances that need to be updated to `colorNeutral` due to breaking changes, matching the pattern `variables: { ... colorAlphaShade: ... }`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/appearance-variables-breaking-changes.md#2025-04-22_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n\"variables:\\\\s+{[\\\\s\\\\S]*?colorAlphaShade:\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Parallelism in TypeScript\nDESCRIPTION: Configuration for running tests in parallel within a Playwright test suite.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe('Smoke test', () => {\n  test.describe.configure({ mode: 'parallel' });\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example - After\nDESCRIPTION: Example showing updated import path for internal helpers and enums after export changes\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// After\nimport { AuthStatus, ... } from '@clerk/backend/internal';\n```\n\n----------------------------------------\n\nTITLE: Configuring Refactoring for `logoUrl` to `imageUrl` Renaming (YAML)\nDESCRIPTION: This YAML frontmatter configures a refactoring process or documentation metadata. It defines the title for the change, a regular expression (`\\\\.logoUrl`) to match the old property access, a category ('image-url'), and the string (`.imageUrl`) to replace the matched pattern with. This is likely used by a codemod tool or documentation generator.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-logourl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '`Organization.logoUrl` -> `Organization.imageUrl`'\nmatcher: \"\\\\.logoUrl\"\ncategory: 'image-url'\nreplaceWithString: '.imageUrl'\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting Patch and Minor Changes in Clerk JavaScript - Markdown\nDESCRIPTION: This Markdown snippet structures the changelog for the Clerk JavaScript project. It lists versioned changes, including minor and patch changes, with details of updated dependencies, commit references, and the specific package versions incremented. No code or configuration logic is included; the snippet is purely for documentation, requiring Markdown rendering compatibility. Expected input is textual changelog data, providing informative output for developers regarding the project's evolution.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`3fac68329c39811f18d18dce03ba1f816ee51837`](https://github.com/clerk/javascript/commit/3fac68329c39811f18d18dce03ba1f816ee51837), [`cab940862870e7961ba92e88ae3e6228b1893e97`](https://github.com/clerk/javascript/commit/cab940862870e7961ba92e88ae3e6228b1893e97), [`74868fa2c2b29f3e180755a463b1f0f2fea769e2`](https://github.com/clerk/javascript/commit/74868fa2c2b29f3e180755a463b1f0f2fea769e2), [`d76c4699990b8477745c2584b1b98d5c92f9ace6`](https://github.com/clerk/javascript/commit/d76c4699990b8477745c2584b1b98d5c92f9ace6), [`c0ecbe41ffde6992e9953fb47f8907ea0f9d2a18`](https://github.com/clerk/javascript/commit/c0ecbe41ffde6992e9953fb47f8907ea0f9d2a18), [`a9b0087fca3f427f65907b358d9b5bc0c95921d8`](https://github.com/clerk/javascript/commit/a9b0087fca3f427f65907b358d9b5bc0c95921d8), [`92d17d7c087470b262fa5407cb6720fe6b17d333`](https://github.com/clerk/javascript/commit/92d17d7c087470b262fa5407cb6720fe6b17d333), [`30f6f3808e9b3778d5a9eb275780f94f9e9c7651`](https://github.com/clerk/javascript/commit/30f6f3808e9b3778d5a9eb275780f94f9e9c7651), [`14fd729bc3a2d6afd442e95ed3a53ae8a5c7cbc8`](https://github.com/clerk/javascript/commit/14fd729bc3a2d6afd442e95ed3a53ae8a5c7cbc8), [`35059df134f0b9643cfaebf76f6fc0f34326d96b`](https://github.com/clerk/javascript/commit/35059df134f0b9643cfaebf76f6fc0f34326d96b), [`f59491ea3b92eee05d812a2c7f965e06e78b4c9b`](https://github.com/clerk/javascript/commit/f59491ea3b92eee05d812a2c7f965e06e78b4c9b)]:\n  - @clerk/clerk-js@5.53.0\n  - @clerk/shared@2.22.0\n  - @clerk/clerk-react@5.23.0\n\n## 2.2.9\n\n### Patch Changes\n\n- Updated dependencies [[`dd2cbfe9f30358b6b298901bb52fa378b0acdca3`](https://github.com/clerk/javascript/commit/dd2cbfe9f30358b6b298901bb52fa378b0acdca3), [`570d8386f6aa596bf7bb1659bdddb8dd4d992b1d`](https://github.com/clerk/javascript/commit/570d8386f6aa596bf7bb1659bdddb8dd4d992b1d), [`dd2cbfe9f30358b6b298901bb52fa378b0acdca3`](https://github.com/clerk/javascript/commit/dd2cbfe9f30358b6b298901bb52fa378b0acdca3)]:\n  - @clerk/clerk-react@5.22.13\n  - @clerk/clerk-js@5.52.3\n  - @clerk/shared@2.21.1\n\n## 2.2.8\n\n### Patch Changes\n\n- Updated dependencies [[`f41081c563ddd2afc05b837358e0de087ae0c895`](https://github.com/clerk/javascript/commit/f41081c563ddd2afc05b837358e0de087ae0c895), [`ea857c42591712808942aba113ab2a313b016ff7`](https://github.com/clerk/javascript/commit/ea857c42591712808942aba113ab2a313b016ff7), [`767ac85fe6ce0ee0594c923e9af701bb05f40a0b`](https://github.com/clerk/javascript/commit/767ac85fe6ce0ee0594c923e9af701bb05f40a0b), [`225b38c7187d31fc755155ea99834ca03894d36b`](https://github.com/clerk/javascript/commit/225b38c7187d31fc755155ea99834ca03894d36b), [`6ce705cc9dab04db4872b7e9004fdb47739c68c3`](https://github.com/clerk/javascript/commit/6ce705cc9dab04db4872b7e9004fdb47739c68c3), [`f936cf121ea85af131619d13129cca5fa01c46fc`](https://github.com/clerk/javascript/commit/f936cf121ea85af131619d13129cca5fa01c46fc), [`429f1bfe5f7a554ab1fdf265475ba6c8b3f78472`](https://github.com/clerk/javascript/commit/429f1bfe5f7a554ab1fdf265475ba6c8b3f78472), [`51af43da590dab0a9883e38e9a4bc7790f926277`](https://github.com/clerk/javascript/commit/51af43da590dab0a9883e38e9a4bc7790f926277)]:\n  - @clerk/shared@2.21.0\n  - @clerk/clerk-js@5.52.2\n  - @clerk/clerk-react@5.22.12\n\n## 2.2.7\n\n### Patch Changes\n\n- Updated dependencies [[`5c26eef22cd296366bbd21b4d04a4f87d74fc284`](https://github.com/clerk/javascript/commit/5c26eef22cd296366bbd21b4d04a4f87d74fc284), [`0fa449cd09c9973297464a14f785895e3ddcab4d`](https://github.com/clerk/javascript/commit/0fa449cd09c9973297464a14f785895e3ddcab4d), [`68b89170a2d4c475e37056e6d5b59c497c45cfb3`](https://github.com/clerk/javascript/commit/68b89170a2d4c475e37056e6d5b59c497c45cfb3), [`b6b8a1207e706ee2a305e11b941f4c32c69d5922`](https://github.com/clerk/javascript/commit/b6b8a1207e706ee2a305e11b941f4c32c69d5922)]:\n  - @clerk/clerk-js@5.52.1\n  - @clerk/clerk-react@5.22.11\n\n## 2.2.6\n\n### Patch Changes\n\n- Updated dependencies [[`f51ecdcf23c50061ed7ff66580ec05f717d5e118`](https://github.com/clerk/javascript/commit/f51ecdcf23c50061ed7ff66580ec05f717d5e118)]:\n  - @clerk/clerk-js@5.52.0\n\n## 2.2.5\n\n### Patch Changes\n\n- Updated dependencies [[`d3152be7f01fbb5ca26aeddc2437021f4b7ecc83`](https://github.com/clerk/javascript/commit/d3152be7f01fbb5ca26aeddc2437021f4b7ecc83), [`f976349243da2b75023e59e802460e6f3592ebbd`](https://github.com/clerk/javascript/commit/f976349243da2b75023e59e802460e6f3592ebbd)]:\n  - @clerk/clerk-js@5.51.0\n  - @clerk/clerk-react@5.22.10\n  - @clerk/shared@2.20.18\n\n## 2.2.4\n\n### Patch Changes\n\n- Updated dependencies [[`26225f2c31a22560f7ece2e02f1d0080b5b89520`](https://github.com/clerk/javascript/commit/26225f2c31a22560f7ece2e02f1d0080b5b89520), [`0f95982551565f11032b4d018d89746a081c1b76`](https://github.com/clerk/javascript/commit/0f95982551565f11032b4d018d89746a081c1b76), [`833693a6792b621e72162d70673e7bdfa84a69b6`](https://github.com/clerk/javascript/commit/833693a6792b621e72162d70673e7bdfa84a69b6)]:\n  - @clerk/shared@2.20.17\n  - @clerk/clerk-js@5.50.2\n  - @clerk/clerk-react@5.22.9\n\n## 2.2.3\n\n### Patch Changes\n\n- Updated dependencies [[`a309be354275b91a7b17d5a67e8ef6aa230a9935`](https://github.com/clerk/javascript/commit/a309be354275b91a7b17d5a67e8ef6aa230a9935), [`cf23178c8b6829e99cb4756a0f2b51e94425e00a`](https://github.com/clerk/javascript/commit/cf23178c8b6829e99cb4756a0f2b51e94425e00a), [`8dc2e63aa37f453f9161c5701d8c4916f13adc3f`](https://github.com/clerk/javascript/commit/8dc2e63aa37f453f9161c5701d8c4916f13adc3f), [`02ec26a67f9b1a9b679f7b4f302b569632818e0f`](https://github.com/clerk/javascript/commit/02ec26a67f9b1a9b679f7b4f302b569632818e0f), [`1aa5bb6e2abf45121274e072bd5e5bbbd73a7362`](https://github.com/clerk/javascript/commit/1aa5bb6e2abf45121274e072bd5e5bbbd73a7362), [`1345cb487970a7347351897e80dfb829d85c41ea`](https://github.com/clerk/javascript/commit/1345cb487970a7347351897e80dfb829d85c41ea), [`65f313abadece443122f6193d28d2d6795236927`](https://github.com/clerk/javascript/commit/65f313abadece443122f6193d28d2d6795236927), [`fa7e40c1cb5a2984e8eceb37e4117c6e58064975`](https://github.com/clerk/javascript/commit/fa7e40c1cb5a2984e8eceb37e4117c6e58064975)]:\n  - @clerk/shared@2.20.16\n  - @clerk/clerk-js@5.50.1\n  - @clerk/clerk-react@5.22.8\n\n## 2.2.2\n\n### Patch Changes\n\n- Updated dependencies [[`11c6458763be12646bf21c5def6269edd3dcaacb`](https://github.com/clerk/javascript/commit/11c6458763be12646bf21c5def6269edd3dcaacb), [`57c983fdc2b8d883623a2294daae0ac6c02c48f6`](https://github.com/clerk/javascript/commit/57c983fdc2b8d883623a2294daae0ac6c02c48f6), [`a26cf0ff10c76244975c454fdf6c615475d4bcd5`](https://github.com/clerk/javascript/commit/a26cf0ff10c76244975c454fdf6c615475d4bcd5), [`93ae27c2925e2ab09b6806409a53e6a132013c69`](https://github.com/clerk/javascript/commit/93ae27c2925e2ab09b6806409a53e6a132013c69)]:\n  - @clerk/clerk-js@5.50.0\n  - @clerk/shared@2.20.15\n  - @clerk/clerk-react@5.22.7\n\n## 2.2.1\n\n### Patch Changes\n\n- Updated dependencies [[`3113059ad7a6d36689a59d3e886bad654d88e79d`](https://github.com/clerk/javascript/commit/3113059ad7a6d36689a59d3e886bad654d88e79d), [`2179690c10a61b117e82fdd566b34939f4d28bc1`](https://github.com/clerk/javascript/commit/2179690c10a61b117e82fdd566b34939f4d28bc1), [`bdb537a9902c0f0ae58ca1d4b7590d929f28fedb`](https://github.com/clerk/javascript/commit/bdb537a9902c0f0ae58ca1d4b7590d929f28fedb)]:\n  - @clerk/clerk-js@5.49.0\n  - @clerk/clerk-react@5.22.6\n  - @clerk/shared@2.20.14\n\n## 2.2.0\n\n### Minor Changes\n\n- Add experimental support for listening to cookie changes on a synced host via the `__experimental_syncHostListener` ([#4962](https://github.com/clerk/javascript/pull/4962)) by [@tmilewski](https://github.com/tmilewski)\n\n### Patch Changes\n\n- Updated dependencies [[`3c6d8159cb1021927c0d581a8feb93345913005f`](https://github.com/clerk/javascript/commit/3c6d8159cb1021927c0d581a8feb93345913005f), [`442d23afddb6bd0a4539fdb876191d66b834a276`](https://github.com/clerk/javascript/commit/442d23afddb6bd0a4539fdb876191d66b834a276), [`f87ede848265d75ea1e880a3ab80c53a250f42cf`](https://github.com/clerk/javascript/commit/f87ede848265d75ea1e880a3ab80c53a250f42cf), [`6126cc98281bca96797fd8a55b6ec6aeda397e46`](https://github.com/clerk/javascript/commit/6126cc98281bca96797fd8a55b6ec6aeda397e46), [`6e096564a459db4eaf953e99e570905b10be6c84`](https://github.com/clerk/javascript/commit/6e096564a459db4eaf953e99e570905b10be6c84), [`f69ce570f89c82ba3206b976b5b35bbcf7c1077a`](https://github.com/clerk/javascript/commit/f69ce570f89c82ba3206b976b5b35bbcf7c1077a), [`e0dbdc61ba20ff319603b57dab7799a7d743544b`](https://github.com/clerk/javascript/commit/e0dbdc61ba20ff319603b57dab7799a7d743544b)]:\n  - @clerk/clerk-js@5.48.0\n  - @clerk/shared@2.20.13\n  - @clerk/clerk-react@5.22.5\n\n## 2.1.17\n\n### Patch Changes\n\n- Updated dependencies [[`b55db4db89a7549465101850e474a52e9346f441`](https://github.com/clerk/javascript/commit/b55db4db89a7549465101850e474a52e9346f441), [`5bbb05365227862f8256f5a1fa0212fd28a8af67`](https://github.com/clerk/javascript/commit/5bbb05365227862f8256f5a1fa0212fd28a8af67), [`00148b871d920dc10c9343f6bd15c2844db7c19c`](https://github.com/clerk/javascript/commit/00148b871d920dc10c9343f6bd15c2844db7c19c), [`c4cad79cb45fd9d2818c5ffafcedb0e8c26f2f6b`](https://github.com/clerk/javascript/commit/c4cad79cb45fd9d2818c5ffafcedb0e8c26f2f6b), [`9da41ce2fef73f411648eb6faa0dc579fae2b114`](https://github.com/clerk/javascript/commit/9da41ce2fef73f411648eb6faa0dc579fae2b114), [`4427c4702f64d4f28f7564ce5889d41e260aa519`](https://github.com/clerk/javascript/commit/4427c4702f64d4f28f7564ce5889d41e260aa519), [`69734a2624de704b12a31d5737e2f22f9050df25`](https://github.com/clerk/javascript/commit/69734a2624de704b12a31d5737e2f22f9050df25)]:\n  - @clerk/clerk-js@5.47.0\n  - @clerk/clerk-react@5.22.4\n  - @clerk/shared@2.20.12\n\n## 2.1.16\n```\n\n----------------------------------------\n\nTITLE: Configuring Current Folder for Clerk Development\nDESCRIPTION: Commands for setting up the current working directory with environment variables and dependencies. Creates an environment file, installs dependencies, removes node modules, and links local packages using yalc.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/express/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch .env # set PUBLISHABLE_KEY, SECRET_KEY and JWT_KEY from Clerk Dashboard API keys\nnpm i\nrm -rf node_modules/@clerk\nyalc add @clerk/express # also add the packages you made changes to, e.g. @clerk/backend @clerk/types.\n```\n\n----------------------------------------\n\nTITLE: Removing useAuth() Error without ClerkProvider (JavaScript/React)\nDESCRIPTION: Fixes an issue where using the `useAuth()` hook outside of a `<ClerkProvider dynamic />` wrapper would incorrectly throw an error during development. The hook should now function without this specific error, though proper provider wrapping is still necessary for functionality.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nuseAuth()\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Clerk SDK with pnpm\nDESCRIPTION: This command installs the latest version of the Clerk SDK using pnpm. The <%= packageName %> placeholder should be replaced with the actual package name.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/update-version.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add <%= packageName %>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown Changelog\nDESCRIPTION: This snippet shows how dependency updates are documented in the changelog using markdown formatting and GitHub commit links.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`4749ed4c5`](https://github.com/clerk/javascript/commit/4749ed4c55a5ba5810451b8d436aad0d49829050), [`f1f17eaab`](https://github.com/clerk/javascript/commit/f1f17eaabed0dc4b7de405fb77d85503cf75ad33), [`2e35ac538`](https://github.com/clerk/javascript/commit/2e35ac53885f8008779940d41d1e804fa77ebfa9)]:\n  - @clerk/types@4.23.0\n```\n\n----------------------------------------\n\nTITLE: Cloning the Clerk JavaScript Repository\nDESCRIPTION: Command to clone the Clerk JavaScript repository from GitHub.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/clerk/javascript\n```\n\n----------------------------------------\n\nTITLE: Replacing ____experimental_reverificationError API\nDESCRIPTION: Notes the renaming of the experimental API property `____experimental_reverificationError` to `__reverificationError` as part of the stabilization of the reverification feature.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n____experimental_reverificationError\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Clerk JavaScript Example\nDESCRIPTION: Commands to install project dependencies and start the example application using either npm or yarn package managers.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/tanstack-react-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Exporting ESM Modules in @clerk/testing\nDESCRIPTION: Code snippet showing the update to use .mjs extension for exporting ESM modules instead of relying on tsup's legacy output directory structure.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Use the .mjs extension to export esm modules instead of relying on tsup's legacy output directory structure ([#3270](https://github.com/clerk/javascript/pull/3270)) by [@gcascio](https://github.com/gcascio)\n```\n\n----------------------------------------\n\nTITLE: Accessing the Deprecated `logoUrl` Property (JavaScript)\nDESCRIPTION: This snippet represents the deprecated property name `logoUrl`. According to the documentation, this property on a Clerk `Organization` object has been renamed to `imageUrl` and should be updated in consuming code.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organization-logourl.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlogoUrl\n```\n\n----------------------------------------\n\nTITLE: Markdown Updates for @clerk/testing\nDESCRIPTION: Release notes containing version history and change details for the @clerk/testing package, including changes to FAPI call interception and dependency updates.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @clerk/testing\n\n## 1.5.0\n\n### Minor Changes\n\n- Switching over our interception of FAPI calls from page.route to context.route as routes set up with page.route() take precedence over browser context routes when request matches both handlers. ([#5673](https://github.com/clerk/javascript/pull/5673)) by [@jacekradko](https://github.com/jacekradko)\n\n  This allows for users to override calls to FAPI more consistently\n\n### Patch Changes\n\n- Updated dependencies [[`33201bf`](https://github.com/clerk/javascript/commit/33201bf972d6a980617d47ebd776bef76f871833), [`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`0ae0403`](https://github.com/clerk/javascript/commit/0ae040303d239b75a3221436354a2c2ecdb85aae)]:\n  - @clerk/types@4.55.0\n  - @clerk/backend@1.29.2\n  - @clerk/shared@3.7.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Matchers for Removed Clerk Localization Keys in YAML\nDESCRIPTION: YAML configuration specifying metadata (title, flags, category) and a list of matchers (strings/regex patterns). These matchers are likely used by a tool to identify occurrences of removed Clerk localization keys within codebases.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/removed-localization-keys.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Removed localization keys'\nmatcherFlags: 'm'\ncategory: 'localization'\nmatcher:\n  - 'formFieldLabel__emailAddress_phoneNumber:'\n  - 'formFieldLabel__phoneNumber_username:'\n  - 'formFieldLabel__emailAddress_phoneNumber_username:'\n  - 'formFieldInputPlaceholder__emailAddress_phoneNumber:'\n  - 'formFieldInputPlaceholder__phoneNumber_username:'\n  - 'formFieldInputPlaceholder__emailAddress_phoneNumber_username:'\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?forgotPassword:\\\\s+{[\\\\s\\\\S]*?title_email:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?forgotPassword:\\\\s+{[\\\\s\\\\S]*?title_phone:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?forgotPassword:\\\\s+{[\\\\s\\\\S]*?formSubtitle_email:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?forgotPassword:\\\\s+{[\\\\s\\\\S]*?formSubtitle_phone:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?emailCode:\\\\s+{[\\\\s\\\\S]*?formSubtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?formSubtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?phoneCodeMfa:\\\\s+{[\\\\s\\\\S]*?formSubtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?totpMfa:\\\\s+{[\\\\s\\\\S]*?formSubtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?backupCodeMfa:\\\\s+{[\\\\s\\\\S]*?formTitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?backupCodeMfa:\\\\s+{[\\\\s\\\\S]*?formSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerSubtitle__account:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerSubtitle__security:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?usernameSection:\\\\s+{[\\\\s\\\\S]*?primaryButton__changeUsername:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__primary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__primary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__nonPrimary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__nonPrimary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__unverified:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__unverified:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__primary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__primary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__nonPrimary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__nonPrimary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle__unverified:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle__unverified:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?title__conectionFailed:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?title__connectionFailed:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?title__reauthorize:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?actionLabel__conectionFailed:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?connectedAccountsSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionAccordionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?passwordSection:\\\\s+{[\\\\s\\\\S]*?primaryButton__changePassword:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?destructiveActionTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?title__default:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?title__setDefault:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?subtitle__default:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?subtitle__setDefault:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?totp:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?totp:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?totp:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?totp:\\\\s+{[\\\\s\\\\S]*?destructiveActionLabel:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?activeDevicesSection:\\\\s+{[\\\\s\\\\S]*?primaryButton:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?activeDevicesSection:\\\\s+{[\\\\s\\\\S]*?detailsTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?activeDevicesSection:\\\\s+{[\\\\s\\\\S]*?detailsSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?activeDevicesSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?activeDevicesSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?web3WalletsSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?web3WalletsSection:\\\\s+{[\\\\s\\\\S]*?destructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?deleteAccountTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?deleteAccountDescription:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?fileDropAreaTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?fileDropAreaAction:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?usernamePage:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?phoneNumberPage:\\\\s+{[\\\\s\\\\S]*?infoText__secondary:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?passwordPage:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?passwordPage:\\\\s+{[\\\\s\\\\S]*?changePasswordTitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?passwordPage:\\\\s+{[\\\\s\\\\S]*?successMessage:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?passwordPage:\\\\s+{[\\\\s\\\\S]*?changePasswordSuccessMessage:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?passwordPage:\\\\s+{[\\\\s\\\\S]*?sessionsSignedOutSuccessMessage:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?mfaPhoneCodePage:\\\\s+{[\\\\s\\\\S]*?successMessage:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerTitle__settings:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerSubtitle__members:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerSubtitle__settings:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?domainSection:\\\\s+{[\\\\s\\\\S]*?unverifiedDomain_menuAction__verify:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?domainSection:\\\\s+{[\\\\s\\\\S]*?unverifiedDomain_menuAction__remove:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?verifiedDomainPage:\\\\s+{[\\\\s\\\\S]*?enrollmentTab:\\\\s+{[\\\\s\\\\S]*?formButton__save:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerTitle__active:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerTitle__invited:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?invitationsTab:\\\\s+{[\\\\s\\\\S]*?manualInvitations:\\\\s+{[\\\\s\\\\S]*?headerTitle:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?invitationsTab:\\\\s+{[\\\\s\\\\S]*?manualInvitations:\\\\s+{[\\\\s\\\\S]*?headerSubtitle:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?requestsTab:\\\\s+{[\\\\s\\\\S]*?requests:\\\\s+{[\\\\s\\\\S]*?headerTitle:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?membersPage:\\\\s+{[\\\\s\\\\S]*?requestsTab:\\\\s+{[\\\\s\\\\S]*?requests:\\\\s+{[\\\\s\\\\S]*?headerSubtitle:\"\n  - \"createOrganization:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Updates the version ranges for Clerk dependencies in package.json to use the caret (^) operator for semver ranges.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@clerk/types\": \"^4.39.1\",\n  \"@clerk/backend\": \"^1.20.2\",\n  \"@clerk/clerk-react\": \"^5.19.2\",\n  \"@clerk/shared\": \"^2.19.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Commit Reference\nDESCRIPTION: Code block showing Git commit hashes referenced in changelog\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n[[`ccfb0e8ed`](https://github.com/clerk/javascript/commit/ccfb0e8ed43c7857bfd5cb4dcb732fe6cf2d40d5), [`9ca215702`](https://github.com/clerk/javascript/commit/9ca215702d1b816217d2c06c812f7d653ec2da11)]\n```\n\n----------------------------------------\n\nTITLE: Matching `SECRET_KEY` Imports from @clerk/nextjs (RegExp)\nDESCRIPTION: This regular expression is used to find import statements in JavaScript or TypeScript code that import the deprecated `SECRET_KEY` constant from the `@clerk/nextjs` package. It supports multi-line imports (`m` flag) and various import syntaxes. Its purpose is to identify code requiring updates to use the `CLERK_SECRET_KEY` environment variable.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-secret-key.md#2025-04-22_snippet_0\n\nLANGUAGE: RegExp\nCODE:\n```\nimport\\\\s+{[^}]*?SECRET_KEY[\\\\s\\\\S]*?from\\\\s+['\"]@clerk\\\\/nextjs[\\\\s\\\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Documenting Minor Changes in Markdown Changelog\nDESCRIPTION: This snippet demonstrates how minor changes are documented in the changelog, including dropping dependencies and updating version requirements.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- Drop `react` and `react-dom` as peer dependencies since they are not necessary for this package. ([#3273](https://github.com/clerk/javascript/pull/3273)) by [@panteliselef](https://github.com/panteliselef)\n```\n\n----------------------------------------\n\nTITLE: Adding Experimental Console Warning for Cypress\nDESCRIPTION: Code snippet showing the addition of an experimental console warning on the Cypress setup function in version 1.1.3.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Add experimental console warning on Cypress setup function ([#3395](https://github.com/clerk/javascript/pull/3395)) by [@anagstef](https://github.com/anagstef)\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Dev CLI\nDESCRIPTION: Commands to install the clerk-dev CLI and turbo build tool globally using npm.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/dev-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global @clerk/dev-cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global turbo\n```\n\n----------------------------------------\n\nTITLE: Installing @clerk/localizations Package\nDESCRIPTION: This snippet demonstrates how to install the @clerk/localizations package. It references the official documentation for the most up-to-date installation instructions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe fastest way to get started with `@clerk/localizations` is by following the [localization reference documentation](https://clerk.com/docs/customization/localization#usage?utm_source=github&utm_medium=clerk_localizations).\n```\n\n----------------------------------------\n\nTITLE: Renaming Reverification Error Property in Clerk JS\nDESCRIPTION: Renames the property `reverificationMismatch` to `reverificationError`. This change likely standardizes the naming convention for error-related properties within the Clerk JavaScript library.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nreverificationMismatch -> reverificationError\n```\n\n----------------------------------------\n\nTITLE: Starting the Fastify Server\nDESCRIPTION: Command to start the Fastify server using pnpm after installing dependencies and building packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/fastify/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Preset (Next.js) with pnpm\nDESCRIPTION: Command to run integration tests for a specific preset, in this case Next.js, using pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:integration:nextjs\n```\n\n----------------------------------------\n\nTITLE: Installing Svix for Webhook Verification\nDESCRIPTION: Command to install the Svix package, which is required for verifying Clerk webhooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install svix\n```\n\n----------------------------------------\n\nTITLE: Clerk API Method List\nDESCRIPTION: Lists Clerk backend API methods that were fixed to populate paginated responses\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- `clerkClient.allowListIndentifiers.getAllowlistIdentifierList()`\n- `clerkClient.clients.getClientList()`\n- `clerkClient.invitations.getInvitationList`\n- `clerkClient.redirectUrls.getRedirectUrlList()`\n- `clerkClient.sessions.getSessionList()`\n- `clerkClient.users.getUserOauthAccessToken()`\n```\n\n----------------------------------------\n\nTITLE: Matching `shadowShimmer` Variable Declaration using Regex\nDESCRIPTION: This regular expression identifies the usage of the deprecated `shadowShimmer` variable within a `variables` object literal in JavaScript or similar code. It is designed to help locate instances that need removal due to breaking changes, matching the pattern `variables: { ... shadowShimmer: ... }`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/appearance-variables-breaking-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"variables:\\\\s+{[\\\\s\\\\S]*?shadowShimmer:\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Clerk Express Package\nDESCRIPTION: Updates dependencies of the Clerk Express package to newer versions, including @clerk/types, @clerk/backend, and @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- Updated dependencies [[`c9063853e`](https://github.com/clerk/javascript/commit/c9063853e538a4010f5d4e522a3da5abc80098a4), [`19d3808d4`](https://github.com/clerk/javascript/commit/19d3808d4672234944226d6709ec51214e8d6e1d), [`737bcbb0f`](https://github.com/clerk/javascript/commit/737bcbb0ffb5e2dcadbb02e8fc718fe8825c5842)]:\n  - @clerk/types@4.22.0\n  - @clerk/backend@1.13.4\n  - @clerk/shared@2.8.3\n```\n\n----------------------------------------\n\nTITLE: Matching Clerk Elements Customization Object with Regex\nDESCRIPTION: A regular expression designed to find JavaScript or JSON-like structures where an `elements` object contains a `card` property. This pattern targets configuration code related to Clerk component appearance customization, potentially for automated updates or checks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/card-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?card:[\\\\s\\\\S]*?}\n```\n\n----------------------------------------\n\nTITLE: Running Local MCP Server with Environment Variables - Shell Commands\nDESCRIPTION: Commands to start the Clerk MCP server locally using npx, demonstrating how to provide the Clerk secret key either through environment variables or command line arguments.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n// Provide the Clerk secret key as an environment variable\nCLERK_SECRET_KEY=sk_123 npx -y @clerk/agent-toolkit -p local-mcp\n\n// Alternatively, you can pass the secret key as an argument\nnpx -y @clerk/agent-toolkit -p local-mcp --secret-key sk_123\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 5.0.1\nDESCRIPTION: Documents patch changes for version 5.0.1, adding support for legacy environment variables\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.1\n\n### Patch Changes\n\n- cfbe43d3a: Correctly read legacy NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL and NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL env variables\n```\n\n----------------------------------------\n\nTITLE: Illustrating Removed Imports from `@clerk/nextjs/api` in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates specific imports (like `ClerkMiddleware`, `ClerkMiddlewareOptions`, `LooseAuthProp`, etc.) that are no longer available via the `@clerk/nextjs/api` subpath due to its removal. The surrounding documentation clarifies that these types and functions should now be imported directly from `@clerk/clerk-sdk-node`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-nextjs-api.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// These have been removed\\nimport {\\n  ClerkMiddleware,\\n  ClerkMiddlewareOptions,\\n  LooseAuthProp,\\n  RequireAuthProp,\\n  StrictAuthProp,\\n  WithAuthProp,\\n} from '@clerk/nextjs/api';\n```\n\n----------------------------------------\n\nTITLE: Regex for Finding Deprecated DOMAIN Imports in @clerk/nextjs\nDESCRIPTION: This regular expression is designed to find import statements in JavaScript or TypeScript code that include the deprecated `DOMAIN` constant from the `@clerk/nextjs` package. It uses the multiline flag (`m`) to search across line breaks within the import statement. The pattern specifically looks for imports structured like `import { ..., DOMAIN, ... } from '@clerk/nextjs';`. This matcher helps identify code that needs updating to use the `NEXT_PUBLIC_CLERK_DOMAIN` environment variable instead.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-domain.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nimport\\s+{[^}]*?DOMAIN[\\s\\S]*?from\\s+['\"]@clerk\\/nextjs[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Clerk TanStack Start Quickstart Repository\nDESCRIPTION: This command clones the Clerk TanStack Start quickstart repository from GitHub to the local machine. It provides a starting point for developers to integrate Clerk authentication into their TanStack Start applications.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/tanstack-react-start/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/clerk/clerk-tanstack-start-quickstart\n```\n\n----------------------------------------\n\nTITLE: Starting Clerk Development Server\nDESCRIPTION: Command to run the development server for the Clerk project. After executing this command, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/express/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating a New Environment Config for Playwright Tests - TypeScript\nDESCRIPTION: Shows how to define a new environment config using a fluent API builder (`environmentConfig`), with public and private variable mapping for Clerk in Playwright tests. Relies on external secrets from `.keys.json`, environment variables from CI, and defines URLs and the Clerk JS source. The config is intended to be imported and exported as part of a larger `envs` object for test suite parametrization.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst yourConciseName = environmentConfig()\\n  .setId('yourConciseName')\\n  .setEnvVariable('private', 'CLERK_API_URL', process.env.E2E_APP_STAGING_CLERK_API_URL)\\n  .setEnvVariable('private', 'CLERK_SECRET_KEY', envKeys['your-concise-name'].sk)\\n  .setEnvVariable('public', 'CLERK_PUBLISHABLE_KEY', envKeys['your-concise-name'].pk)\\n  .setEnvVariable('public', 'CLERK_SIGN_IN_URL', '/sign-in')\\n  .setEnvVariable('public', 'CLERK_SIGN_UP_URL', '/sign-up')\\n  .setEnvVariable('public', 'CLERK_JS', process.env.E2E_APP_CLERK_JS || 'http://localhost:18211/clerk.browser.js');\n```\n\n----------------------------------------\n\nTITLE: Invalid Routing Configuration Example in TSX\nDESCRIPTION: Example showing incorrect usage of routing props that will throw a runtime error when using non-path routing strategy with path property.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n<SignIn\n  routing='hash'\n  path='/sign-in'\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for Expo App\nDESCRIPTION: Command to install project dependencies using PNPM package manager\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/expo-web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Matching `.supported_external_accounts` with Regex\nDESCRIPTION: This regular expression is provided as a `matcher` pattern to identify occurrences of the `.supported_external_accounts` string, likely used for automated code scanning, deprecation warnings, or migration tools related to the property's removal.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/supported-external-accounts-removed.md#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.supported_external_accounts\n```\n\n----------------------------------------\n\nTITLE: Adding Telemetry Opt-Out Option in Clerk Express Package\nDESCRIPTION: Introduces an option to opt-out of telemetry data collection in version 0.1.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n### Patch Changes\n\n- Add option to opt-out of telemetry data collection ([#4158](https://github.com/clerk/javascript/pull/4158)) by [@wobsoriano](https://github.com/wobsoriano)\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in Markdown\nDESCRIPTION: Markdown entries documenting version changes and dependency updates for a Clerk JavaScript package. Includes commit hashes and affected dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`9ca215702`](https://github.com/clerk/javascript/commit/9ca215702d1b816217d2c06c812f7d653ec2da11)]:\n  - @clerk/types@3.56.1\n  - @clerk/backend@0.31.2\n\n## 0.6.15\n\n### Patch Changes\n\n- Updated dependencies [[`35be8709d`](https://github.com/clerk/javascript/commit/35be8709d88f1d1eef043acdba4d49b07578c7b2), [`13e9dfbaa`](https://github.com/clerk/javascript/commit/13e9dfbaa5b7b7e72f63e4b8ecfc1c1918517cd8)]\n```\n\n----------------------------------------\n\nTITLE: Matching `button` Key in `elements` Object with Regex\nDESCRIPTION: This regular expression targets a structure resembling a JavaScript or JSON object, specifically looking for a key named `button` within an `elements` object. It uses `[\\s\\S]*?` for non-greedy matching of any character including newlines. This was used to locate the deprecated `button` customization point within Clerk's appearance configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/button-to-organizationlistcreateorganizationactionbutton.md#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"elements:\\\\s+{[\\\\s\\\\S]*?(button):[\\\\s\\\\S]*?}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm Package Manager\nDESCRIPTION: Command to enable the pnpm package manager using corepack.\nSOURCE: https://github.com/clerk/javascript/blob/main/docs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Dependency in Package.json\nDESCRIPTION: This snippet shows an update to the @clerk/vue dependency version in the package.json file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`0a1807552dcf0501a97f60b4df0280525bca9743`](https://github.com/clerk/javascript/commit/0a1807552dcf0501a97f60b4df0280525bca9743)]:\n  - @clerk/vue@0.0.9\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Format\nDESCRIPTION: Shows how dependency updates are documented with commit references\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`cb32aaf59`](https://github.com/clerk/javascript/commit/cb32aaf59d38dcd12e959f542782f71a87adf9c1), [`2e5c550e4`](https://github.com/clerk/javascript/commit/2e5c550e4aec61150c2a17fdcd4a0e1273cb50e7)]:\n  - @clerk/shared@2.8.2\n  - @clerk/types@4.21.1\n  - @clerk/backend@1.13.3\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server with Wrangler\nDESCRIPTION: Command to start the Remix development server along with Wrangler for local development, emulating the Cloudflare runtime environment\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-cf-pages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# start the remix dev server and wrangler\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin\nDESCRIPTION: Extended ESLint configuration that incorporates React-specific linting rules. Sets up React version, adds the React plugin, and enables recommended and JSX runtime rules.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-router-library/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react';\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed `SignIn.supported_external_accounts` Property (JavaScript)\nDESCRIPTION: Identifies the `SignIn.supported_external_accounts` property, which has been removed from the ClerkJS `SignIn` component. Accessing this property is no longer valid and indicates deprecated usage that needs updating in JavaScript or TypeScript codebases using ClerkJS.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/supported-external-accounts-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSignIn.supported_external_accounts\n```\n\n----------------------------------------\n\nTITLE: Starting Expo Development Server\nDESCRIPTION: Command to start the Expo development server for running the application\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/expo-web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm expo start\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Types from @clerk/types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import types from @clerk/types and use them in a TypeScript file. It shows the import statement and an example of defining a type using the imported OAuthStrategy.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { OAuthStrategy } from '@clerk/types';\n\nexport type OAuthProps = {\n  oAuthOptions: OAuthStrategy[];\n  error?: string;\n  setError?: React.Dispatch<React.SetStateAction<string | undefined>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Resource Type Exports\nDESCRIPTION: Example showing the remaining resource-related type exports that are still available from the top-level @clerk/backend package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Organization, Session, User, WebhookEvent, WebhookEventType } from '@clerk/backend';\n```\n\n----------------------------------------\n\nTITLE: Deploying Remix Application to Cloudflare Workers\nDESCRIPTION: Command to deploy the Remix application to Cloudflare Workers after setting up a Cloudflare account and configuring a Workers subdomain.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-cf-worker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm deploy\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Builds the React app for production, bundling and optimizing it for best performance.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-cra/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with Multiple Commit References\nDESCRIPTION: This snippet shows updates to dependencies with multiple commit references for @clerk/shared, @clerk/types, @clerk/vue, and @clerk/backend.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`e47eb5882a7fd4a8dee25933c6644790d6ea3407`](https://github.com/clerk/javascript/commit/e47eb5882a7fd4a8dee25933c6644790d6ea3407), [`273d16cb0665d4d960838cb294dc356f41814745`](https://github.com/clerk/javascript/commit/273d16cb0665d4d960838cb294dc356f41814745), [`6b0961765e1f3d09679be4b163fa13ac7dd97191`](https://github.com/clerk/javascript/commit/6b0961765e1f3d09679be4b163fa13ac7dd97191)]:\n  - @clerk/shared@2.16.0\n  - @clerk/types@4.34.1\n  - @clerk/vue@0.0.6\n  - @clerk/backend@1.17.1\n```\n\n----------------------------------------\n\nTITLE: Defining Clerk Shared Package in Markdown\nDESCRIPTION: Package name and high-level description of the @clerk/shared utility package that provides common functionality across Clerk packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/shared/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @clerk/shared\\n\\nUtilities used in `@clerk` packages\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Adding Organization Hooks to Expo\nDESCRIPTION: Addition of organization-related hooks to the Clerk Expo package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n93ac73329d6c36ffdf269b5ae6f26ec18e0246c0\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Headers Markdown\nDESCRIPTION: Version headers and change descriptions in markdown format tracking localization updates and dependency changes\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`d74a6a7c0f291104c6bba722a8c432814d7b336e`](https://github.com/clerk/javascript/commit/d74a6a7c0f291104c6bba722a8c432814d7b336e), [`1a0c8fe665869e732d3c800bde0f5219fce54301`](https://github.com/clerk/javascript/commit/1a0c8fe665869e732d3c800bde0f5219fce54301)]:\n  - @clerk/types@4.30.0\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated JS Configuration for Social Button Arrow (Regex)\nDESCRIPTION: This regular expression targets JavaScript code, specifically searching for an `elements` object configuration that includes a `socialButtonsBlockButtonArrow` key. This pattern was part of Clerk's appearance customization API for styling the (now removed) social button arrow. The regex assists in locating this configuration in theme or element customization objects for removal or update.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/remove-socialbuttonsblockbuttonarrow.md#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?socialButtonsBlockButtonArrow:[\\\\s\\\\S]*?}\n```\n\n----------------------------------------\n\nTITLE: Production Server Launch Command\nDESCRIPTION: Command to start the application in production mode.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json for Clerk React Router\nDESCRIPTION: This code snippet shows how to update the peer dependencies for react and react-dom in the package.json file for the @clerk/react-router package. It ensures consistent versioning across React-related dependencies.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react-router/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"peerDependencies\": {\n    \"react\": \"^16.8.0 || ^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^16.8.0 || ^17.0.0 || ^18.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating makeAuthObjectSerializable Function in JavaScript\nDESCRIPTION: Patch change to strip 'experimental__has' from the auth object in makeAuthObjectSerializable() to fix an issue in Next.js where an error is thrown when this function is passed to a client component as a prop.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_49\n\nLANGUAGE: Markdown\nCODE:\n```\n- Strip `experimental__has` from the auth object in `makeAuthObjectSerializable()`. This fixes an issue in Next.js where an error is being thrown when this function is passed to a client component as a prop. ([#2101](https://github.com/clerk/javascript/pull/2101)) by [@BRKalow](https://github.com/BRKalow)\n```\n\n----------------------------------------\n\nTITLE: Development Server Launch Command\nDESCRIPTION: Command to start the development server with hot-reload capabilities.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: New Remix Project Creation Commands\nDESCRIPTION: Commands to create a new Remix project and migrate existing application code.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n# create a new project, and pick a pre-configured host\npnpm dlx create-remix@latest\ncd my-new-remix-app\n# remove the new project's app (not the old one!)\nrm -rf app\n# copy your app over\ncp -R ../my-old-remix-app/app app\n```\n\n----------------------------------------\n\nTITLE: Project Directory Setup Commands\nDESCRIPTION: Commands to add Yalc dependencies and install npm packages at the current directory level.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm yalc:add\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing authMiddleware from @clerk/nextjs in Next.js (JavaScript)\nDESCRIPTION: Demonstrates the updated import statement for pulling in Clerk's authentication middleware in a Next.js project, replacing the previous import from the deprecated `@clerk/nextjs/edge-middlewarefiles` package. This usage requires the `@clerk/nextjs` npm package to be installed and aligns with current Clerk documentation. Key parameters include the named import `authMiddleware`, intended to secure Next.js API routes or middleware. Input is the JavaScript import statement; output is the reference to the Clerk authentication middleware. Developers should ensure version compatibility, as functionality may differ across releases.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-nextjs-edge-middlewarefiles.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { authMiddleware } from '@clerk/nextjs';\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Pass Unsafe Metadata to Sign Up Methods\nDESCRIPTION: Fixes an issue to ensure unsafe metadata is properly passed to sign up methods.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-js:** Pass unsafe metadata to sign up methods ([e2510e6](https://github.com/clerk/javascript/commit/e2510e65b726c113de977fb8252cdcd708ad9bb7))\n```\n\n----------------------------------------\n\nTITLE: Resetting Expo Project\nDESCRIPTION: Command to reset the project by moving starter code to app-example directory and creating a new blank app directory\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/expo-web/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm reset-project\n```\n\n----------------------------------------\n\nTITLE: Disabling Clerk Environment Schema in Astro Config\nDESCRIPTION: Shows how to disable the default type-safe environment variable schema for Clerk in an Astro project configuration.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineConfig({\n  integrations: [clerk({ enableEnvSchema: false })],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Organization Role with useAuth Hook in Clerk React\nDESCRIPTION: Demonstrates how to retrieve the user's organization role using the `useAuth` hook from the `@clerk/clerk-react` library. This property's type has changed from `MembershipRole` to `OrganizationCustomRoleKey`.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/backend/membershiprole.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useAuth } from '@clerk/clerk-react';\n\nconst { orgRole } = useAuth();\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with pnpm\nDESCRIPTION: Command to build the application for production. It creates an optimized bundle in the 'build' folder with minified files and content hashes for efficient caching.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/cra-js/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk Upgrade CLI Tool\nDESCRIPTION: Command to install and run Clerk's upgrade CLI tool to scan for required component redesign changes\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/retheme/intro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @clerk/upgrade\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Ejects the app from the default Create React App configuration, providing full control over build tools and configuration files.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-cra/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm eject\n```\n\n----------------------------------------\n\nTITLE: Production Build Command\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Introducing __experimental_reverificationMismatch Helper (TypeScript/JavaScript)\nDESCRIPTION: Introduces an experimental helper function `__experimental_reverificationMismatch` exported from `@clerk/nextjs/server`. This function is likely intended for server-side logic to handle or identify session reverification mismatches.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n__experimental_reverificationMismatch\n```\n\n----------------------------------------\n\nTITLE: Generating Session Keys with mkcert in Shell\nDESCRIPTION: Command to generate required session keys using mkcert in the certs directory.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkcert -cert-file sessions.pem -key-file sessions-key.pem \"example.com\" \"*.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Browser Extension Playground in Bash\nDESCRIPTION: Commands to navigate to the playground directory, set up Node.js version, install dependencies, and start the development server.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/browser-extension/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> cd playground/browser-extension\n> n 18.17\n> npm i\n> npm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @clerk/testing Package with npm\nDESCRIPTION: This command installs the @clerk/testing package as a development dependency using npm. It's used to add testing utilities for Clerk applications to your project.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @clerk/testing --save-dev\n```\n\n----------------------------------------\n\nTITLE: Updating Default API URL Domain in JavaScript\nDESCRIPTION: Major change to update the default apiUrl domain from clerk.dev to clerk.com for internal use.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_50\n\nLANGUAGE: Markdown\nCODE:\n```\n- Internal update default apiUrl domain from clerk.dev to clerk.com ([#1878](https://github.com/clerk/javascript/pull/1878)) by [@dimkl](https://github.com/dimkl)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Integration Folder in Shell\nDESCRIPTION: Command to change directory to the integration folder where tests are located.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd integration\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Dependencies in Package.json\nDESCRIPTION: This snippet shows updates to multiple dependencies including @clerk/shared, @clerk/types, @clerk/backend, and @clerk/vue in the package.json file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nuxt/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`fe9e147e366153d664af7fc325655ecb299a1f9d`](https://github.com/clerk/javascript/commit/fe9e147e366153d664af7fc325655ecb299a1f9d), [`fe9e147e366153d664af7fc325655ecb299a1f9d`](https://github.com/clerk/javascript/commit/fe9e147e366153d664af7fc325655ecb299a1f9d), [`d84d7e31235c5c7da3415981dc76db4473a71a39`](https://github.com/clerk/javascript/commit/d84d7e31235c5c7da3415981dc76db4473a71a39), [`fe9e147e366153d664af7fc325655ecb299a1f9d`](https://github.com/clerk/javascript/commit/fe9e147e366153d664af7fc325655ecb299a1f9d), [`dce4f7ffca7248c0500f0ec9a978672b1f2fad69`](https://github.com/clerk/javascript/commit/dce4f7ffca7248c0500f0ec9a978672b1f2fad69)]:\n  - @clerk/shared@2.17.0\n  - @clerk/types@4.35.0\n  - @clerk/backend@1.18.0\n  - @clerk/vue@0.0.8\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 5.0.3\nDESCRIPTION: Documents patch changes for version 5.0.3, updating backend package dependencies\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.3\n\n### Patch Changes\n\n- Updated dependencies [[`b3fda50f0`](https://github.com/clerk/javascript/commit/b3fda50f03672106c6858219fc607d226851ec10), [`b3ad7a459`](https://github.com/clerk/javascript/commit/b3ad7a459c46be1f8967faf73c2cdd96406593c8), [`4e5de1164`](https://github.com/clerk/javascript/commit/4e5de1164d956c7dc21f72d25e312296d36504a7)]:\n  - @clerk/backend@1.1.0\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers (pnpm, yarn). Running these commands will start the development server on localhost:3000.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/elements-next/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Clerk Development Environment in Root Folder\nDESCRIPTION: Commands for initializing the development environment in the root folder of the Clerk project. This installs dependencies, builds the project, and publishes packages to the local yalc store.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/express/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm build && pnpm yalc:all\n```\n\n----------------------------------------\n\nTITLE: Adding Color Scheme Support to Interstitial in JavaScript\nDESCRIPTION: Minor change to add prefers-color-scheme support to the interstitial component.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_52\n\nLANGUAGE: Markdown\nCODE:\n```\n- Added prefers-color-scheme to interstitial ([#1935](https://github.com/clerk/javascript/pull/1935)) by [@royanger](https://github.com/royanger)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration setup for enabling type-aware lint rules in ESLint with TypeScript project references. Specifies parser options including project configuration files and root directory.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-router-library/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running React Tests with npm\nDESCRIPTION: Command to launch the test runner in interactive watch mode. This allows for continuous testing while developing.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/cra-js/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Modifying Sessions.getSessionList Response Structure - Clerk JavaScript - diff\nDESCRIPTION: Illustrates the required code change after the Sessions.getSessionList method in the Clerk JavaScript SDK was updated to return an object containing both the paginated data and the totalCount property. This snippet demonstrates replacing direct assignment with object destructuring to access both values, ensuring compatibility with the new SDK response. The key dependency is the clerkClient.sessions.getSessionList method from the Clerk JavaScript SDK, and correct destructuring is necessary to prevent runtime errors due to the changed return shape.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getsessionlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.sessions.getSessionList()\\n+ const { data, totalCount } = await clerkClient.sessions.getSessionList()\n```\n\n----------------------------------------\n\nTITLE: Running Tests in UI Mode with pnpm\nDESCRIPTION: Command to run tests in UI mode using pnpm and Playwright.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:integration:base -- --ui email.link.test.ts\n```\n\n----------------------------------------\n\nTITLE: Version History Entry\nDESCRIPTION: Markdown section documenting version updates with contributor information\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 3.4.4\n\n### Patch Changes\n\n- Updates missing Russian translations by [@nikosdouvlis](https://github.com/nikosdouvlis)\n```\n\n----------------------------------------\n\nTITLE: Feature: Improving DX for Headless Import\nDESCRIPTION: Enhancement to improve developer experience for headless import functionality in clerk-js package.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n8d64310ab23c6e21f8a687e503521245acad8211\n```\n\n----------------------------------------\n\nTITLE: Setting Clerk Environment Variables\nDESCRIPTION: Example of setting Clerk API keys in a .env file for use in the application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/express/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nCLERK_PUBLISHABLE_KEY=pk_*******\nCLERK_SECRET_KEY=sk_******\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Add Missing Dev Instance Suffix\nDESCRIPTION: Adds the missing dev instance suffix for new accounts.dev URLs to ensure proper routing.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n**clerk-js:** Add missing dev instance suffix for new accounts.dev urls ([cb2e516](https://github.com/clerk/javascript/commit/cb2e516fb8c45c7438a867083a641b9ee4cab2f9))\n```\n\n----------------------------------------\n\nTITLE: Documenting Major Changes in Markdown Changelog\nDESCRIPTION: This snippet shows how major changes are documented in the changelog, including version requirement updates and significant UI changes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/themes/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- c2a090513: Change the minimal Node.js version required by Clerk to `18.17.0`.\n- 52ff8fe6b: Upgrade React version to >=18 and add react-dom as peer dependency\n  to fix issues with vite & rollup building.\n- 97407d8aa: Dropping support for Node 14 and 16 as they both reached EOL status. The minimal Node.js version required by Clerk is `18.18.0` now.\n- 7886ba89d: Refresh the look and feel of the Clerk UI components\n\n  For more info, refer to the [upgrade guide from v4 to v5 in Clerk docs](https://clerk.com/docs/upgrade-guides/upgrading-from-v4-to-v5).\n```\n\n----------------------------------------\n\nTITLE: Next.js Page File Location\nDESCRIPTION: Reference to the main page file location in the Next.js application that can be edited for instant updates.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/examples/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Matching Unsupported React Versions in Dependencies using Regex - Regex\nDESCRIPTION: This regex is used to scan a dependencies block (such as in a package.json file) for React versions 12 through 17. It helps identify projects that need to upgrade React to v18 or later in order to use the latest Clerk SDKs. The pattern matches lines where \\\"react\\\" is assigned a version starting with 12, 13, 14, 15, 16, or 17. Required input is a string containing the dependencies, and output is a match when unsupported versions are found.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/min-react-version.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\ndependencies\\\":\\s*{[\\s\\S]*?\\\"react\\\":\\s*\\\"(?:^|~|>|=|\\s)*(?:12|13|14|15|16|17)\\..*?\n```\n\n----------------------------------------\n\nTITLE: Installing svix dependency for webhook verification\nDESCRIPTION: Command to install the svix package, which is required for verifying Clerk webhooks.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install svix\n```\n\n----------------------------------------\n\nTITLE: Custom Role Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for custom authorization roles in Clerk, allowing developers to specify custom role types for authorization.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClerkAuthorization {\n  permission: '';\n  role: 'admin' | 'basic_member' | 'guest_member';\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project File Structure in Text\nDESCRIPTION: This snippet shows the typical file structure of an Astro project. It includes the public directory for static assets, src directory for components, layouts, and pages, and the package.json file at the root.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/astro-node/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Defining Matchers for Localization Keys in YAML\nDESCRIPTION: This YAML frontmatter block defines metadata and matching patterns related to Clerk JavaScript localization. It includes a title, category, flags for matching behavior (`matcherFlags`), and a list of `matcher` entries. These matchers consist of specific key names and regular expressions designed to identify usages of potentially changed localization keys within codebases.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/changed-localization-keys.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'Localization keys changed'\nmatcherFlags: 'm'\ncategory: 'localization'\nmatcher:\n  - 'formFieldLabel__organizationName:'\n  - 'formFieldLabel__organizationSlug:'\n  - 'formFieldInputPlaceholder__emailAddresses:'\n  - 'formFieldInputPlaceholder__organizationSlug:'\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?actionText:\"\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?emailCode:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?continue:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signUp:\\\\s+{[\\\\s\\\\S]*?continue:\\\\s+{[\\\\s\\\\S]*?actionText:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?actionText:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?password:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?forgotPasswordAlternativeMethods:\\\\s+{[\\\\s\\\\S]*?label__alternativeMethods:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?resetPassword:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?phoneCodeMfa:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?totpMfa:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"signIn:\\\\s+{[\\\\s\\\\S]*?backupCodeMfa:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?headerTitle__account:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?primaryButton:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?detailsAction__unverified:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?emailAddressesSection:\\\\s+{[\\\\s\\\\S]*?destructiveAction:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?phoneNumbersSection:\\\\s+{[\\\\s\\\\S]*?primaryButton:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?phoneCode:\\\\s+{[\\\\s\\\\S]*?destructiveActionLabel:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?mfaSection:\\\\s+{[\\\\s\\\\S]*?backupCodes:\\\\s+{[\\\\s\\\\S]*?actionLabel__regenerate:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?start:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?deleteAccountButton:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?imageFormSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?imageFormDestructiveActionSubtitle:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?fileDropAreaHint:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?phoneNumberPage:\\\\s+{[\\\\s\\\\S]*?infoText:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?connectedAccountPage:\\\\s+{[\\\\s\\\\S]*?socialButtonsBlockButton:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?mfaPhoneCodePage:\\\\s+{[\\\\s\\\\S]*?primaryButton__addPhoneNumber:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?mfaPhoneCodePage:\\\\s+{[\\\\s\\\\S]*?subtitle__availablePhoneNumbers:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?mfaPhoneCodePage:\\\\s+{[\\\\s\\\\S]*?subtitle__unavailablePhoneNumbers:\"\n  - \"userProfile:\\\\s+{[\\\\s\\\\S]*?deletePage:\\\\s+{[\\\\s\\\\S]*?actionDescription:\"\n  - \"organizationSwitcher:\\\\s+{[\\\\s\\\\S]*?action__createOrganization:\"\n  - \"organizationSwitcher:\\\\s+{[\\\\s\\\\S]*?action__manageOrganization:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?leaveOrganization:\\\\s+{[\\\\s\\\\S]*?actionDescription:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?profilePage:\\\\s+{[\\\\s\\\\S]*?dangerSection:\\\\s+{[\\\\s\\\\S]*?deleteOrganization:\\\\s+{[\\\\s\\\\S]*?actionDescription:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?invitePage:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"organizationProfile:\\\\s+{[\\\\s\\\\S]*?invitePage:\\\\s+{[\\\\s\\\\S]*?subtitle:\"\n  - \"createOrganization:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"organizationList:\\\\s+{[\\\\s\\\\S]*?title:\"\n  - \"organizationList:\\\\s+{[\\\\s\\\\S]*?titleWithoutPersonal:\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Default robots.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This robots.txt configuration specifies that all web crawlers (User-agent: *) are allowed to access all parts of the website, as indicated by the empty Disallow directive. The file includes a reference to the robotstxt.org standard.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/cra-js/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Utilities from @clerk/clerk-react\nDESCRIPTION: Demonstrates the new way to import internal utilities and error handlers using subpath exports from @clerk/clerk-react package. Shows migration from old import paths to new ones.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { __internal__setErrorThrowerOptions } from '@clerk/clerk-react';\n// After\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\n\n// Before\nimport { isClerkAPIResponseError, isEmailLinkError, isKnownError, isMetamaskError } from '@clerk/clerk-react';\n// After\nimport {\n  isClerkAPIResponseError,\n  isEmailLinkError,\n  isKnownError,\n  isMetamaskError,\n} from '@clerk/clerk-react/errors';\n\n// Before\nimport { MultisessionAppSupport } from '@clerk/clerk-react';\n// After\nimport { MultisessionAppSupport } from '@clerk/clerk-react/internal';\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates\nDESCRIPTION: Lists of dependency updates and version changes for @clerk/elements package, including clerk-react, types, and shared packages across multiple versions.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/elements/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @clerk/elements\n\n## 0.23.17\n\n### Patch Changes\n\n- Updated dependencies [[`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`33201bf`](https://github.com/clerk/javascript/commit/33201bf972d6a980617d47ebd776bef76f871833), [`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`0ae0403`](https://github.com/clerk/javascript/commit/0ae040303d239b75a3221436354a2c2ecdb85aae)]:\n  - @clerk/clerk-react@5.29.0\n  - @clerk/types@4.55.0\n  - @clerk/shared@3.7.3\n```\n\n----------------------------------------\n\nTITLE: Adding Support for NextJS 14 in JavaScript\nDESCRIPTION: Minor change to add support for NextJS 14.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_53\n\nLANGUAGE: Markdown\nCODE:\n```\n- Add support for NextJS 14 ([#1968](https://github.com/clerk/javascript/pull/1968)) by [@dimkl](https://github.com/dimkl)\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started using npm, yarn, or pnpm and will be accessible at localhost:3000.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/next-app-router-quickstart/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Reference\nDESCRIPTION: Code block showing updated dependency versions\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n- @clerk/localizations@1.26.6\n- @clerk/types@3.56.1\n```\n\n----------------------------------------\n\nTITLE: Running the Standard Playground in Bash\nDESCRIPTION: Command to start the standard development server for the Clerk Chrome Extension playground.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/browser-extension/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration - JSON\nDESCRIPTION: Configuration settings for integrating the local MCP server with Claude Desktop by adding server details to the claude_desktop_config.json file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/agent-toolkit/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"clerk\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@clerk/agent-toolkit\", \"-p=local-mcp\", \"--tools=users\", \"--secret-key=sk_123\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming reverificationMismatch Property\nDESCRIPTION: Documents the renaming of the property `reverificationMismatch` to `reverificationError`. This change likely standardizes the naming convention for properties related to reverification errors.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nreverificationMismatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access\nDESCRIPTION: Sets up default access rules for web crawlers. Specifies that all user agents (*) are allowed to access all content as there are no disallow rules.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-cra/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: JWT Helper Functions Export\nDESCRIPTION: Import of JWT-related helper functions from the @clerk/backend/jwt subpath\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeJwt, hasValidSignature, signJwt, verifyJwt } from '@clerk/backend/jwt';\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: A series of changelog entries documenting version updates, with commit references and dependency changes for Clerk JavaScript packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/chrome-extension/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 2.2.32\n\n### Patch Changes\n\n- Updated dependencies [[`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`3336161`](https://github.com/clerk/javascript/commit/3336161fb5d55a86a199b09d02de906d5f362611)]:\n  - @clerk/clerk-react@5.29.0\n  - @clerk/clerk-js@5.62.0\n  - @clerk/shared@3.7.3\n```\n\n----------------------------------------\n\nTITLE: Running Clerk Upgrade CLI Tool\nDESCRIPTION: This command runs the Clerk Upgrade CLI tool in the current directory. It initiates a questionnaire to guide the user through the upgrade process and shows required changes.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @clerk/upgrade\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: Launches the React app in development mode, opening it in the browser and enabling live reloading.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-cra/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding a New Localization Key in TypeScript\nDESCRIPTION: This snippet explains how to add a new localization key to the _LocalizationResource type in the types/src/localization.ts file.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/localizations/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOpen the [`types/src/localization.ts`](https://github.com/clerk/javascript/blob/main/packages/types/src/localization.ts) file to add a new key to the `_LocalizationResource` type.\n```\n\n----------------------------------------\n\nTITLE: Improved Boolean Environment Variable Parsing\nDESCRIPTION: Enhanced isTruthy helper function to better handle boolean environment variables. Now accepts true, \"true\", \"1\", and 1 as truthy values.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nisTruthy(value) {\n  return value === true || value === \"true\" || value === \"1\" || value === 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 5.0.5\nDESCRIPTION: Documents patch changes for version 5.0.5, updating dependencies for clerk-react package\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.5\n\n### Patch Changes\n\n- Updated dependencies [[`e93b5777b`](https://github.com/clerk/javascript/commit/e93b5777b4f8578e6a6f81566e2601ab0e65590a)]:\n  - @clerk/clerk-react@5.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing @clerk/types Package with npm\nDESCRIPTION: This command installs the @clerk/types package as a development dependency using npm.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @clerk/types --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Smoke Test Suite in TypeScript\nDESCRIPTION: Basic structure for a smoke test suite using Playwright in TypeScript.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@playwright/test';\n\ntest.describe('Smoke test', () => {});\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Reference\nDESCRIPTION: Shows a dependency update reference using commit hashes for @clerk/shared package\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/backend/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n[[`a78bc447c`](https://github.com/clerk/javascript/commit/a78bc447c1aabaa41bcbaa2a8fe3c48f31275574), [`19cd42434`](https://github.com/clerk/javascript/commit/19cd42434450e568998336bf6d705e475122abbc)]:\n  - @clerk/shared@2.0.1\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk Client Initialization from apiKey to secretKey in JavaScript/Next.js\nDESCRIPTION: This snippet demonstrates how to update the createClerkClient initialization in a Next.js project that uses the Clerk authentication library. The deprecated apiKey parameter must be replaced with secretKey in the function's configuration object. No additional dependencies are required beyond the existing @clerk/nextjs/server package. The input is a configuration object with your Clerk secret key and the output is the initialized Clerk client; failing to update from apiKey to secretKey will result in errors or unsupported behavior.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/createclerkclient-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createClerkClient } from '@clerk/nextjs/server';\n\n- createClerkClient({ apiKey: '...' });\n+ createClerkClient({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Executing Code in an Isolated Browser Context using Test Utilities\nDESCRIPTION: Shows how to use the `u.tabs.runInNewBrowser` utility, provided by `createTestUtils`, to execute test code within a completely new, isolated browser instance. The callback function receives its own `u` object scoped to the new browser context, ensuring isolation from the parent test's browser state.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nawait u.tabs.runInNewBrowser(async u => {\n  // TODO\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Version Number Update Format\nDESCRIPTION: Shows the format used for version number updates in the changelog\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.45\n\n### Patch Changes\n\n- Updated dependencies [[`02babaccb`](https://github.com/clerk/javascript/commit/02babaccb648fa4e22f38cc0f572d44f82b09f78)]:\n  - @clerk/backend@1.13.2\n```\n\n----------------------------------------\n\nTITLE: Code Example: EmailLinkErrorCodeStatus Usage\nDESCRIPTION: Example showing migration from deprecated EmailLinkErrorCode to new EmailLinkErrorCodeStatus.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/remix/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n- import { EmailLinkErrorCode } from '@clerk/nextjs/errors'\n+ import { EmailLinkErrorCodeStatus } from '@clerk/nextjs/errors'\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk Users.getOrganizationList Return Structure - Diff\nDESCRIPTION: This snippet demonstrates the change in assignment style required when the Users.getOrganizationList method's return value changes from a direct data array to an object with data and totalCount properties. Developers must now destructure the response to access both the page data and the total count in alignment with the paginated backend API. No new dependencies are required, but existing implementations must update their usage patterns to match the new signature.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/getorganizationlist-return-signature.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- const data = await clerkClient.users.getOrganizationList()\\n+ const { data, totalCount } = await clerkClient.users.getOrganizationList()\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fixes in Clerk React Changelog\nDESCRIPTION: Documents bug fixes made to the Clerk React package, specifically addressing API feedback issues across clerk-react, clerk-js, and types packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_46\n\nLANGUAGE: Markdown\nCODE:\n```\n### Bug Fixes\n\n- **clerk-react,clerk-js,types:** Crate of API feedback fixes ([721ce72](https://github.com/clerk/javascript/commit/721ce7228c37b012891b2bec8caf290239164d05))\n```\n\n----------------------------------------\n\nTITLE: Migrating getAuth Parameter from apiKey to secretKey in JavaScript\nDESCRIPTION: This code diff shows how to update the getAuth function call by replacing the deprecated apiKey parameter with the new secretKey parameter. The change ensures compatibility with the updated API that no longer accepts apiKey. No external dependencies are needed beyond the getAuth function, and the primary input is an object with an authentication key property. The expected output is proper authentication using the secretKey; omitting this update may result in errors or deprecated usage warnings.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/getauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- getAuth({ apiKey: '...' })\\n+ getAuth({ secretKey: '...' })\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated Clerk Organization Switcher Text IDs (RegExp)\nDESCRIPTION: These regular expressions are used to find occurrences of the removed Clerk CSS customization IDs `organizationSwitcherPopoverActionButtonText`, `organizationSwitcherPopoverActionButtonText__manageOrganization`, and `organizationSwitcherPopoverActionButtonText__createOrganization`. They match direct CSS class selectors (e.g., `.cl-organizationSwitcherPopoverActionButtonText`) and usage within Clerk's `elements` customization object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/organizationswitcherpopoveractionbuttontext-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: RegExp\nCODE:\n```\n\\\\.cl-organizationSwitcherPopoverActionButtonText\n```\n\nLANGUAGE: RegExp\nCODE:\n```\n\\\\.cl-organizationSwitcherPopoverActionButtonText__manageOrganization\n```\n\nLANGUAGE: RegExp\nCODE:\n```\n\\\\.cl-organizationSwitcherPopoverActionButtonText__createOrganization\n```\n\nLANGUAGE: RegExp\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?organizationSwitcherPopoverActionButtonText:[\\\\s\\\\S]*?}\n```\n\nLANGUAGE: RegExp\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?organizationSwitcherPopoverActionButtonText__manageOrganization:[\\\\s\\\\S]*?}\n```\n\nLANGUAGE: RegExp\nCODE:\n```\nelements:\\\\s+{[\\\\s\\\\S]*?organizationSwitcherPopoverActionButtonText__createOrganization:[\\\\s\\\\S]*?}\n```\n\n----------------------------------------\n\nTITLE: Exporting Error Helpers in Clerk Packages\nDESCRIPTION: Exports error helper functions from the shared package to framework-specific packages. This minor change improves error handling across different Clerk integrations.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example usage of exported error helpers\nimport { someErrorHelper } from '@clerk/your-framework-package';\n```\n\n----------------------------------------\n\nTITLE: Uploading Artifacts for Temporary Sites on Failure - GitHub Actions YAML\nDESCRIPTION: Defines a GitHub Actions step to upload app artifacts (such as a temporary test site) following CI cancellation or failure. Uses the 'actions/upload-artifact@v4' action and relies on matrix variables for file naming. Requires that the 'long-running' app ID is substituted correctly in the path. Intended for extra debugging info after integration tests.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Upload app artifacts\\n  if: ${{ cancelled() || failure() }}\\n  uses: actions/upload-artifact@v4\\n  with:\\n    name: temp-app-${{ matrix.test-name }}\\n    path: /tmp/.temp_integration/long-running--XXX__debug\\n    retention-days: 1\n```\n\n----------------------------------------\n\nTITLE: Matching Clerk Card CSS Class with Regex\nDESCRIPTION: A regular expression used to identify the primary CSS class selector `.cl-card` for Clerk component cards. This is likely used within build or analysis tools to find instances of this selector in code or style definitions for migration or updates.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/card-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.cl-card\n```\n\n----------------------------------------\n\nTITLE: Using Google One Tap Authentication Methods\nDESCRIPTION: Code showing how to access experimental Google One Tap authentication methods from the Clerk singleton.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nClerk.__experimental_authenticateWithGoogleOneTap;\nClerk.__experimental_handleGoogleOneTapCallback;\n```\n\n----------------------------------------\n\nTITLE: Appending Files to Application Templates for Tests - TypeScript\nDESCRIPTION: Demonstrates programmatic file creation and inclusion in a test template via the config builder, using both a helper function (`ts`) for TypeScript code and a plain callback for string content. Allows customization of test fixture apps by adding source files directly before test runs.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n.addFile(\\n  'src/metadata.ts',\\n  ({ ts }) => ts`export const metadata = {\\n    name: 'Hello World',\\n  }`\\n)\\n\\n// This also works without the `ts` helper, but you'll then want to make sure the indentation is right\\n.addFile(\\n  'src/metadata.ts',\\n  () => `export const metadata = {\\n  name: 'Hello World',\\n}`\\n)\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated Clerk Event Properties with Regex\nDESCRIPTION: This regular expression, found in the page's frontmatter, is designed to match occurrences of the deprecated properties `.lastOrganizationInvitation` or `.lastOrganizationMember`. It likely serves to identify code usage that needs updating following the removal of these properties from Clerk event emitters. The `?:` defines a non-capturing group, and `\\.` ensures a literal dot is matched before the property names.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/lastorganizationinvitation-member.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\"(?:\\\\.lastOrganizationInvitation|\\\\.lastOrganizationMember)\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in JavaScript\nDESCRIPTION: Updates dependencies for @clerk/types and @clerk/localizations packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n- Updated dependencies [[`2a9d83280`](https://github.com/clerk/javascript/commit/2a9d8328011cb4c3e1a4c6c675cbd5a4edac4c5c), [`73c0f9a29`](https://github.com/clerk/javascript/commit/73c0f9a29499f4fea590aae9c4bf4026395f0c12)]:\n  - @clerk/types@3.48.0\n  - @clerk/localizations@1.23.1\n```\n\n----------------------------------------\n\nTITLE: Moving createPathMatcher to @clerk/shared\nDESCRIPTION: This change moves the createPathMatcher() function from @clerk/astro and @clerk/nextjs to @clerk/shared for reusability.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/astro/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- Previously the `createPathMatcher()` function was re-implemented both in `@clerk/astro` and `@clerk/nextjs`, this PR moves this logic to `@clerk/shared`. ([#5043](https://github.com/clerk/javascript/pull/5043)) by [@wobsoriano](https://github.com/wobsoriano)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPathMatcher } from '@clerk/shared/pathMatcher';\n```\n\n----------------------------------------\n\nTITLE: Using deprecated withClerkMiddleware in Next.js\nDESCRIPTION: Example of using the deprecated withClerkMiddleware function to protect routes in a Next.js application. It includes custom logic to check if a route is public and redirects unauthenticated users to the sign-in page.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/with-clerk-middleware-removed.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before: using withClerkMiddleware\nimport { withClerkMiddleware } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nconst publicPaths = ['/', '/sign-in', '/sign-up'];\n\nconst isPublic = (path: string) => {\n  return publicPaths.find(x => path.match(new RegExp(`^${x}$`.replace('*$', '($|/)'))));  \n\n  if (isPublic(request.nextUrl.pathname)) {\n    return NextResponse.next();\n  }\n  const { userId } = getAuth(request);\n\n  if (!userId) {\n    const signInUrl = new URL('/sign-in', request.url);\n    signInUrl.searchParams.set('redirect_url', request.url);\n    return NextResponse.redirect(signInUrl);\n  }\n};\n\nexport default withClerkMiddleware((req: NextRequest) => {\n  return NextResponse.next();\n});\n\nexport const config = {\n  matcher: ['/((?!static|.*\\\\..*|_next|favicon.ico).*)', '/'],\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry 5.0.4\nDESCRIPTION: Documents patch changes for version 5.0.4, updating multiple dependencies including backend, shared, and clerk-react packages\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/nextjs/CHANGELOG.md#2025-04-22_snippet_39\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.4\n\n### Patch Changes\n\n- Updated dependencies [[`8fbe23857`](https://github.com/clerk/javascript/commit/8fbe23857bc588a4662af78ee33b24123cd8bc2e), [`a78bc447c`](https://github.com/clerk/javascript/commit/a78bc447c1aabaa41bcbaa2a8fe3c48f31275574), [`19cd42434`](https://github.com/clerk/javascript/commit/19cd42434450e568998336bf6d705e475122abbc), [`e79d2e3d3`](https://github.com/clerk/javascript/commit/e79d2e3d3be02eb1cf8b2647ac179cc5d4aa2de2)]:\n  - @clerk/backend@1.1.1\n  - @clerk/shared@2.0.1\n  - @clerk/clerk-react@5.0.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware with Deprecated `authMiddleware` (TypeScript)\nDESCRIPTION: This snippet demonstrates the deprecated method of configuring Clerk authentication middleware in a Next.js application using `authMiddleware` from `@clerk/nextjs`. It defines public routes based on a function that checks the request URL, specifically making routes not containing '/dashboard' public. A standard Next.js middleware matcher config is also exported.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/auth-middleware-deprecated.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// middleware.ts\n\nimport { authMiddleware } from '@clerk/nextjs';\n\nexport default authMiddleware({\n  publicRoutes: req => !req.url.includes('/dashboard'),\n});\n\nexport const config = {\n  matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],\n};\n```\n\n----------------------------------------\n\nTITLE: Version Number References\nDESCRIPTION: Code block showing version numbers referenced in changelog\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/clerk-js/CHANGELOG.md#2025-04-22_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.62.0\n## 4.61.0\n## 4.60.1\n```\n\n----------------------------------------\n\nTITLE: Defining a New Application Config Preset for Testing - TypeScript\nDESCRIPTION: Shows how to define a new application configuration (e.g., 'react-parcel') with a builder API. Utilizes template association, environment variable formatting, and dependency injection, using constants and preset templates. This pattern is used for setting up testable app templates with Playwright.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst parcel = applicationConfig()\\n  .setName('react-parcel')\\n  .useTemplate(templates['react-parcel'])\\n  .setEnvFormatter('public', key => `${key}`)\\n  .addDependency('@clerk/clerk-react', constants.E2E_CLERK_VERSION || clerkReactLocal);\n```\n\n----------------------------------------\n\nTITLE: Removing Internal Class Imports from @clerk/backend (TypeScript)\nDESCRIPTION: Highlights the removal of internal class exports (like `Client`, `Email`, `User`, etc.) from the top-level API of `@clerk/backend` in version 1.0.0-alpha-v5.12. The comment indicates there's no direct replacement as these were internal.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport {\n  AllowlistIdentifier,\n  Client,\n  DeletedObject,\n  Email,\n  EmailAddress,\n  ExternalAccount,\n  IdentificationLink,\n  Invitation,\n  OauthAccessToken,\n  ObjectType,\n  Organization,\n  OrganizationInvitation,\n  OrganizationMembership,\n  OrganizationMembershipPublicUserData,\n  PhoneNumber,\n  RedirectUrl,\n  SMSMessage,\n  Session,\n  SignInToken,\n  Token,\n  User,\n  Verification,\n} from '@clerk/backend';\n// After : no alternative since there is no need to use those classes\n```\n\n----------------------------------------\n\nTITLE: Installing Clerk for TanStack React Start\nDESCRIPTION: Command to install the Clerk package for TanStack React Start using npm.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/tanstack-react-start/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @clerk/tanstack-react-start\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Development Package in Bash\nDESCRIPTION: Commands to navigate to the chrome-extension package directory, build the package, and publish it to a local registry for development.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/browser-extension/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> cd packages/chrome-extension\n> pnpm build && pnpm publish:local\n```\n\n----------------------------------------\n\nTITLE: Introduction of @clerk/testing Package\nDESCRIPTION: Code snippet showing the initial introduction of the @clerk/testing package in version 1.0.0.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/testing/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- Introduce the `@clerk/testing` package ([#3247](https://github.com/clerk/javascript/pull/3247)) by [@anagstef](https://github.com/anagstef)\n```\n\n----------------------------------------\n\nTITLE: Migrating Clerk Client Configuration from Setters to Constructor Options\nDESCRIPTION: Shows the migration from using individual setter methods to using the createClerkClient configuration object. Demonstrates how to replace setClerkApiKey, setClerkApiVersion, setClerkHttpOptions, and setClerkServerApiUrl with equivalent constructor options.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/node/node-setters-removals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import {\n     clerkClient,\n-    setClerkApiKey,\n-    setClerkApiVersion,\n-    setClerkHttpOptions,\n-    setClerkServerApiUrl\n} from \"@clerk/clerk-sdk-node\"\n\n- setClerkApiKey(\"...\")\n- setClerkApiVersion(\"...\")\n- setClerkHttpOptions(\"...\")\n- setClerkServerApiUrl(\"...\")\n\n  const clerkClient = createClerkClient({\n+     secretKey: \"...\"\n+     apiVersion: \"...\"\n+     httpOptions: \"...\"\n+     serverApiUrl: \"...\"\n  })\n\n  await clerkClient.users.getUser(userId);\n```\n\n----------------------------------------\n\nTITLE: Updating Upstream Monorepo Packages in Bash\nDESCRIPTION: Commands to update the Clerk Chrome Extension package and restart the development server after changes to upstream packages.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/browser-extension/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm update @clerk/chrome-extension && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Version Change Log Entry\nDESCRIPTION: Log entry documenting patch changes and dependency updates for version 2.9.15\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.9.15\n\n### Patch Changes\n\n- Updated dependencies [[`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`3336161`](https://github.com/clerk/javascript/commit/3336161fb5d55a86a199b09d02de906d5f362611), [`f707756`](https://github.com/clerk/javascript/commit/f7077562703552af30de4fbc3230cc9df58ef827), [`33201bf`](https://github.com/clerk/javascript/commit/33201bf972d6a980617d47ebd776bef76f871833), [`62a1c54`](https://github.com/clerk/javascript/commit/62a1c5418af1235c15a3ac1956547039f8571af4), [`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`0ae0403`](https://github.com/clerk/javascript/commit/0ae040303d239b75a3221436354a2c2ecdb85aae), [`6f4cf71`](https://github.com/clerk/javascript/commit/6f4cf715cde0bb0f573fa0aa07f97db49d0d47aa)]:\n  - @clerk/clerk-react@5.29.0\n  - @clerk/clerk-js@5.62.0\n  - @clerk/types@4.55.0\n  - @clerk/shared@3.7.3\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm\nDESCRIPTION: Command to start the React application in development mode. It launches a local development server that can be accessed at http://localhost:3000 and provides hot reloading for changes.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/cra-js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Matching Deprecated CSS Selector for Social Button Arrow (Regex)\nDESCRIPTION: This regular expression is designed to find occurrences of the CSS class selector `.cl-socialButtonsBlockButtonArrow`. This selector was previously used to style the arrow element within Clerk's social sign-in buttons, which is no longer present in newer designs. Identifying this selector helps in removing deprecated styles.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/common/remove-socialbuttonsblockbuttonarrow.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n\\\\.cl-socialButtonsBlockButtonArrow\n```\n\n----------------------------------------\n\nTITLE: Updating clerkClient() to Async in Next.js Middleware\nDESCRIPTION: This snippet illustrates the migration of clerkClient() to an async function within Next.js middleware. It shows how to update the middleware to use await with clerkClient() and handle user count checks asynchronously.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { clerkClient, clerkMiddleware } from '@clerk/nextjs/server';\nimport { NextResponse } from 'next/server';\n\nexport default clerkMiddleware(async (auth, request) => {\n  const client = await clerkClient();\n  const count = await client.users?.getCount();\n\n  if (count) {\n    return NextResponse.redirect(new URL('/new-url', request.url));\n  }\n});\n\nexport const config = {\n  matcher: [...],\n};\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates Examples\nDESCRIPTION: Example of dependency version updates and patches in changelog format\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`33201bf`](https://github.com/clerk/javascript/commit/33201bf972d6a980617d47ebd776bef76f871833), [`4334598`](https://github.com/clerk/javascript/commit/4334598108ff2cfa3c25b5a46117c1c9c65b7974), [`0ae0403`](https://github.com/clerk/javascript/commit/0ae040303d239b75a3221436354a2c2ecdb85aae)]:\n  - @clerk/types@4.55.0\n  - @clerk/shared@3.7.3\n```\n\n----------------------------------------\n\nTITLE: Migrating from `setClerkApiVersion` to `createClerkClient` options in JavaScript\nDESCRIPTION: Shows how to replace the deprecated `setClerkApiVersion` method with direct options passing to `createClerkClient`. The new approach requires specifying both `secretKey` and `apiVersion` in a single configuration object.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/setclerkapiversion.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { clerkClient, setClerkApiKey } from '@clerk/clerk-sdk-node';\n\n- const clerkClient = createClerkClient({ apiKey: '...' });\n- setClerkApiVersion('...');\n\n+ const clerkClient = createClerkClient({ secretKey: '...', apiVersion: '...' });\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with pnpm\nDESCRIPTION: Command to eject from Create React App configuration. This is a one-way operation that exposes all configuration files and dependencies, giving full control over the build setup.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/cra-js/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm eject\n```\n\n----------------------------------------\n\nTITLE: Updating Clerk JavaScript Dependencies\nDESCRIPTION: A markdown snippet showing dependency updates for the Clerk JavaScript package, including changes to @clerk/types and @clerk/shared.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo-passkeys/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`dd2cbfe9f30358b6b298901bb52fa378b0acdca3`](https://github.com/clerk/javascript/commit/dd2cbfe9f30358b6b298901bb52fa378b0acdca3), [`570d8386f6aa596bf7bb1659bdddb8dd4d992b1d`](https://github.com/clerk/javascript/commit/570d8386f6aa596bf7bb1659bdddb8dd4d992b1d)]:\n  - @clerk/types@4.46.0\n  - @clerk/shared@2.21.1\n```\n\n----------------------------------------\n\nTITLE: Replacing `apiKey` with `secretKey` in `createClerkClient` (Diff)\nDESCRIPTION: Shows the required code modification for `createClerkClient` from `@clerk/fastify`. The configuration object must now use `secretKey` instead of the deprecated `apiKey` parameter to pass the Clerk Secret Key.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/fastify/createclerkclient-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\nimport { createClerkClient } from '@clerk/fastify';\n\n- createClerkClient({ apiKey: '...' });\n+ createClerkClient({ secretKey: '...' });\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating from apiKey to secretKey in ClerkExpressRequireAuth for Node.js\nDESCRIPTION: This code snippet demonstrates how to update ClerkExpressRequireAuth middleware configuration by replacing the deprecated 'apiKey' parameter with the new 'secretKey' parameter. The functionality remains the same, but the parameter name has changed.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/clerkexpressrequireauth-apikey.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { ClerkExpressRequireAuth } from '@clerk/clerk-sdk-node';\n\n- ClerkExpressRequireAuth({ apiKey: '...' });\n+ ClerkExpressRequireAuth({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Importing deprecated SIGN_UP_URL constant from @clerk/nextjs\nDESCRIPTION: This code snippet shows the now invalid import pattern for the SIGN_UP_URL constant that has been removed from @clerk/nextjs. Developers should use the NEXT_PUBLIC_CLERK_SIGN_UP_URL environment variable instead.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/import-sign-up-url.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport\\s+{[^}]*?SIGN_UP_URL[\\s\\S]*?from\\s+['\"]@clerk\\/nextjs[\\s\\S]*?['\"]\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Environment for Remix with Cloudflare Workers\nDESCRIPTION: Command to start both the Miniflare server (local environment for Cloudflare Workers) and the Remix development server simultaneously for local development.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-cf-worker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Middleware Files Imports in Next.js with Clerk\nDESCRIPTION: This code change shows how to update imports for Edge Middleware files when using Clerk with Next.js. The separate edge-middlewarefiles import is now consolidated into the main @clerk/nextjs import.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/nextjs/import-changes.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { } from \"@clerk/nextjs/edge-middlewarefiles\"\n+ import { } from \"@clerk/nextjs\"\n```\n\n----------------------------------------\n\nTITLE: Updating verifyJwt Import Path in Next.js Applications\nDESCRIPTION: This snippet shows how to update the import path for the verifyJwt function from @clerk/nextjs to @clerk/nextjs/server. This change is necessary as verifyJwt is a server-side function and should only be used in server contexts.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/nextjs/verifyjwt-import-change.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { verifyJwt } from \"@clerk/nextjs\"\n+ import { verifyJwt } from \"@clerk/nextjs/server\"\n```\n\n----------------------------------------\n\nTITLE: Building the Test Application for Production Artifacts\nDESCRIPTION: Shows how to invoke the build process for the test application using `app.build()` instead of starting the development server. This is useful for testing production artifacts and assumes `app` is an initialized `Application` instance.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nawait app.build();\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed Clerk experimental_captchaURL Property (JavaScript)\nDESCRIPTION: Shows the identifier `Clerk.experimental_captchaURL`, an experimental property that has been removed from the Clerk JavaScript SDK. There is no direct replacement for this functionality. Attempting to access this property will likely result in `undefined` or an error.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/experimental-captchaurl.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nClerk.experimental_captchaURL\n```\n\n----------------------------------------\n\nTITLE: Initializing Clerk Client in Fastify (Old Method - JavaScript)\nDESCRIPTION: Shows the previous method for initializing the Clerk client in a Fastify application by directly importing and instantiating the `Clerk` class from `@clerk/fastify`. This approach is deprecated as of version 1.0.0-alpha-v5.10.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/fastify/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Clerk } from '@clerk/fastify';\nconst clerk = Clerk({ secretKey: '...' });\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Dependencies at Directory Level\nDESCRIPTION: Commands for adding yalc dependencies and installing npm packages at the current directory level.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm yalc:add\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Using createClerkExpressWithAuth with Required Publishable Key in JavaScript\nDESCRIPTION: The createClerkExpressWithAuth middleware now requires a Clerk publishable key parameter to function correctly. This key can be passed directly as a parameter or set as an environment variable. The middleware will throw an error if no publishable key is provided.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/node/createclerkexpresswithauth-publickey-required.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateClerkExpressWithAuth\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install the necessary dependencies for the Clerk Fastify playground application.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/fastify/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Claims in Next.js with TypeScript\nDESCRIPTION: Demonstrates how to retrieve JWT claims using the getAuth function from @clerk/nextjs/server and @clerk/ssr.server in a Next.js application.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/orgs-claim.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAuth } from \"@clerk/nextjs/server\"\nconst claims: JwtPayload = getAuth(request).sessionClaims\n\nimport { getAuth } from \"@clerk/ssr.server\"\nconst claims: JwtPayload = (await getAuth(request)).sessionClaims\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authorization Types in Clerk\nDESCRIPTION: Demonstrates how to define custom authorization types for Clerk when using custom roles instead of the default MemberRole type which has been removed.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/react/CHANGELOG.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// clerk.d.ts\nexport {};\n\ninterface ClerkAuthorization {\n  permission: '';\n  role: 'admin' | 'basic_member' | 'guest_member';\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with NODE_EXTRA_CA_CERTS in Shell\nDESCRIPTION: This command runs Playwright tests while setting the NODE_EXTRA_CA_CERTS environment variable. This allows the tests to recognize the self-signed certificates generated by mkcert.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/certs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nNODE_EXTRA_CA_CERTS=\"$(mkcert -CAROOT)/rootCA.pem\" playwright test...\n```\n\n----------------------------------------\n\nTITLE: Running Watch Mode\nDESCRIPTION: Commands for starting the development watchers for Clerk dependencies, with options to exclude clerk-js.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/dev-cli/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev watch\n```\n\nLANGUAGE: shell\nCODE:\n```\nclerk-dev watch --no-js\n```\n\n----------------------------------------\n\nTITLE: Updated Parameter Name `redirectUrl` (JavaScript)\nDESCRIPTION: The string literal 'redirectUrl' which should replace the deprecated 'redirect_url' parameter key within the options object for the `User.createExternalAccount` method.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/versions/core-2/js/user-createexternalaccount-redirecturl.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'redirectUrl'\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Basic Template in Shell\nDESCRIPTION: This command uses npm to create a new Astro project using the basic template. It demonstrates how to quickly set up an Astro project using the command line interface.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/astro-node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Updates for v5.1 Alpha\nDESCRIPTION: List of dependency updates and version changes for Clerk packages in version 5.1.0-alpha\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/expo/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`1ddffb67e`], [`64d3763ec`], ...]: \n  - @clerk/clerk-js@5.0.0-alpha-v5.1\n  - @clerk/shared@2.0.0-alpha-v5.1\n  - @clerk/clerk-react@5.0.0-alpha-v5.1\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Clerk SDK with Yarn\nDESCRIPTION: This command installs the latest version of the Clerk SDK using Yarn. The <%= packageName %> placeholder should be replaced with the actual package name.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/upgrade/src/guide-generators/core-2/shared/update-version.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add <%= packageName %>\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Production Build for Remix\nDESCRIPTION: Commands to build the Remix application for production and start a local server to test the production build. This allows testing the application as it would run in production.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-cf-worker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Repository Dependencies with pnpm\nDESCRIPTION: Commands for building the project and linking all packages using yalc at the repository level.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\npnpm yalc:all\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be started using npm, yarn, or pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/app-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Keeping Temporary Site During Test Run\nDESCRIPTION: Command to run tests while keeping the temporary site, using an environment variable.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nCLEANUP=0 pnpm test:integration:base\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands for starting the Next.js development server using either pnpm or yarn package managers.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/nextjs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File with pnpm\nDESCRIPTION: Command to run a specific test file (email-link.test.ts) using pnpm.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm test:integration:base -- email.link.test.ts\n```\n\n----------------------------------------\n\nTITLE: Copying Sample Configuration Files in Shell\nDESCRIPTION: Commands to create local copies of sample configuration files for testing.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.local.sample .env.local\ncp .keys.json.sample .keys.json\n```\n\n----------------------------------------\n\nTITLE: Initial Repository Setup Commands\nDESCRIPTION: Commands to build the project and set up Yalc dependencies at the repository level.\nSOURCE: https://github.com/clerk/javascript/blob/main/playground/remix-node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\npnpm yalc:all\n```\n\n----------------------------------------\n\nTITLE: Running Tests for React App\nDESCRIPTION: Launches the test runner in interactive watch mode for the React application.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/templates/react-cra/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting NODE_EXTRA_CA_CERTS Environment Variable in Shell\nDESCRIPTION: This command sets the NODE_EXTRA_CA_CERTS environment variable to the root CA certificate generated by mkcert. This is necessary because Node.js doesn't use the system root store.\nSOURCE: https://github.com/clerk/javascript/blob/main/integration/certs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_EXTRA_CA_CERTS=\"$(mkcert -CAROOT)/rootCA.pem\"\n```\n\n----------------------------------------\n\nTITLE: Adding Open Property to User Button\nDESCRIPTION: Enhancement that adds an 'open' property to the user button component to control its initial state.\nSOURCE: https://github.com/clerk/javascript/blob/main/packages/types/CHANGELOG.md#2025-04-22_snippet_42\n\nLANGUAGE: Markdown\nCODE:\n```\n- **clerk-js:** Add open prop in user button ([6ae7f42](https://github.com/clerk/javascript/commit/6ae7f4226f4db5760e04ee812a494beb66ab2502))\n```"
  }
]