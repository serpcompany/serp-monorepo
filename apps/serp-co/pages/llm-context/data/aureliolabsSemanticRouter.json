[
  {
    "owner": "aurelio-labs",
    "repo": "semantic-router",
    "content": "TITLE: Semantic Router Implementation Workflow with Mermaid\nDESCRIPTION: Detailed flowchart showing the setup and runtime phases of implementing semantic routing. Illustrates the complete process from route definition to runtime handling of inputs.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/overview.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Setup[\"Setup Phase\"]\n        A[Define Routes] --> |Example utterances| B[Select Encoder]\n        B --> |Based on content type| C[Configure Router]\n        C --> |Connect components| D[Implement Handlers]\n        D --> E[Precompute Route Embeddings]\n    end\n    \n    subgraph Runtime[\"Runtime Phase\"]\n        F[Receive Input] --> G[Encode Input]\n        G --> H[Calculate Similarity]\n        H --> I{Best Match > Threshold?}\n        I -->|Yes| J[Execute Matched Handler]\n        I -->|No| K[Execute Default Handler]\n    end\n    \n    E --> F\n    \n    classDef setup fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef runtime fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px\n    class A,B,C,D,E setup\n    class F,G,H,I,J,K runtime\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SemanticRouter with OpenAI Encoder\nDESCRIPTION: This example demonstrates how to set up a SemanticRouter with OpenAI embeddings, define routes for different topics, and route an incoming query to the most semantically similar route. It uses the LocalIndex for storing and matching embeddings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\nfrom semantic_router.index import LocalIndex\nfrom semantic_router import Route\nimport os\n\n# Set up API key\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\n\n# Create routes\nroutes = [\n    Route(name=\"weather\", utterances=[\"How's the weather?\", \"Is it raining?\"]),\n    Route(name=\"politics\", utterances=[\"Tell me about politics\", \"Who's the president?\"])\n]\n\n# Initialize the router\nrouter = SemanticRouter(\n    encoder=OpenAIEncoder(),\n    routes=routes,\n    index=LocalIndex()\n)\n\n# Use the router to route a query\nresult = router(\"What's the weather like today?\")\nprint(result.name)  # \"weather\"\nprint(result.score) # e.g., 0.92\n```\n\n----------------------------------------\n\nTITLE: Visualizing System Overview with Mermaid\nDESCRIPTION: A mermaid diagram illustrating the high-level system overview of Semantic Router, showing the flow from input query through encoding, routing, and response handling.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Input Query] --> B[Encoder]\n    B --> C[Vector Embedding]\n    C --> D[Router]\n    E[Routes] --> D\n    F[Index] <--> D\n    D --> G[Matched Route]\n    G --> H[Response Handler]\n```\n\n----------------------------------------\n\nTITLE: Using AurelioSparseEncoder for Sparse Embeddings in Semantic Router\nDESCRIPTION: This example shows how to use AurelioSparseEncoder to generate sparse embeddings, which excel at keyword matching. It demonstrates creating routes with example utterances and then generating sparse embeddings for sample queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/encoders.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import AurelioSparseEncoder\nfrom semantic_router import Route\nimport os\n\n# Set up API key\nos.environ[\"AURELIO_API_KEY\"] = \"your-api-key\"\n\n# Create some routes for routing\nroutes = [\n    Route(name=\"weather\", utterances=[\"How's the weather?\", \"Is it raining?\"]),\n    Route(name=\"politics\", utterances=[\"Tell me about politics\", \"Who's the president?\"])\n]\n\n# Initialize the sparse encoder\nencoder = AurelioSparseEncoder()\n\n# Generate sparse embeddings for documents\nembeddings = encoder([\"How's the weather today?\", \"Tell me about politics\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a SemanticRouter Instance\nDESCRIPTION: Initializes a SemanticRouter with the configured encoder and routes. The auto_sync parameter is set to 'local' for local synchronization of embeddings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import SemanticRouter\n\nsr = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalIndex with SemanticRouter in Python\nDESCRIPTION: This example demonstrates how to set up a local in-memory index with SemanticRouter. It shows the complete workflow from defining routes to initializing the router and making a query. LocalIndex stores embeddings in memory, making it suitable for development and testing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/indexes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index import LocalIndex\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\nimport os\n\n# Set up API key\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\n\n# Create routes\nfrom semantic_router import Route\nroutes = [\n    Route(name=\"weather\", utterances=[\"How's the weather?\", \"Is it raining?\"]),\n    Route(name=\"politics\", utterances=[\"Tell me about politics\", \"Who's the president?\"])\n]\n\n# Initialize the local index\nindex = LocalIndex()\n\n# Create a router with the local index\nrouter = SemanticRouter(\n    encoder=OpenAIEncoder(),\n    routes=routes,\n    index=index\n)\n\n# Use the router\nresult = router(\"What's the weather like today?\")\nprint(result.name)  # \"weather\"\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router via pip\nDESCRIPTION: Command to install the semantic-router library using pip. Additional instructions are provided for local and hybrid installations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/get-started/quickstart.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -qU semantic-router\n```\n\n----------------------------------------\n\nTITLE: Configuring Score Thresholds in Semantic Router\nDESCRIPTION: This snippet shows how to control the sensitivity of routing by setting score thresholds, both globally for the router and individually for specific routes. Thresholds determine the minimum similarity score required for a match.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Global threshold for all routes\nrouter = SemanticRouter(\n    encoder=OpenAIEncoder(),\n    routes=routes,\n    score_threshold=0.75  # Only match if similarity is above 0.75\n)\n\n# Per-route threshold\nweather_route = Route(\n    name=\"weather\", \n    utterances=[\"How's the weather?\", \"Is it raining?\"],\n    score_threshold=0.8  # Higher threshold for this specific route\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Router with Dense and Sparse Encoders\nDESCRIPTION: Initializes a HybridRouter that combines the OpenAI dense encoder and the Aurelio sparse encoder to effectively route queries based on both semantic meaning and term matching.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\n\nrouter = HybridRouter(\n    encoder=encoder, sparse_encoder=sparse_encoder, routes=routes, auto_sync=\"local\"\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Bi-Encoder Flow with Mermaid\nDESCRIPTION: Flowchart showing the transformation of input content through a bi-encoder neural network into vector embeddings. Demonstrates the encoding process from raw content to numerical vectors.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/overview.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A[\"Input Content<br/>(Text, Image, Audio)\"] --> B[\"Bi-Encoder<br/>(Neural Net)\"]\n    B --> C[\"Vector Embedding<br/>[x₁, x₂, ..., xₙ]\"]\n    \n    style A fill:#f5f5f5,stroke:#333,stroke-width:1px\n    style B fill:#e3f2fd,stroke:#1565c0,stroke-width:2px\n    style C fill:#f1f8e9,stroke:#558b2f,stroke-width:1px\n```\n\n----------------------------------------\n\nTITLE: Classifying a Politics-related Query\nDESCRIPTION: Demonstrates using the SemanticRouter to classify a politics-related query, showing how it returns a RouteChoice object with the matched route name.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsr(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Implementing PineconeIndex with SemanticRouter in Python\nDESCRIPTION: This example shows how to use a remote Pinecone vector database as an index for Semantic Router. It demonstrates connecting to Pinecone, initializing the index with the appropriate dimensions, and configuring auto-synchronization. Remote indexes provide persistence and scalability for production applications.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/indexes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index import PineconeIndex\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\nimport os\n\n# Set up API keys\nos.environ[\"OPENAI_API_KEY\"] = \"your-openai-api-key\"\nos.environ[\"PINECONE_API_KEY\"] = \"your-pinecone-api-key\"\n\n# Create routes\nfrom semantic_router import Route\nroutes = [\n    Route(name=\"weather\", utterances=[\"How's the weather?\", \"Is it raining?\"]),\n    Route(name=\"politics\", utterances=[\"Tell me about politics\", \"Who's the president?\"])\n]\n\n# Initialize the Pinecone index\nindex = PineconeIndex(\n    index_name=\"semantic-router\",\n    dimensions=1536  # Must match your encoder's dimension\n)\n\n# Create a router with the Pinecone index\nrouter = SemanticRouter(\n    encoder=OpenAIEncoder(),\n    routes=routes,\n    index=index,\n    auto_sync=\"remote\"  # Automatically sync routes to remote index\n)\n\n# Use the router\nresult = router(\"What's the weather like today?\")\nprint(result.name)  # \"weather\"\n```\n\n----------------------------------------\n\nTITLE: Defining Political Route\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances that should trigger this route\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.route import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Encoder Class Hierarchy with Mermaid\nDESCRIPTION: A class diagram showing the hierarchy of encoder classes in Semantic Router, including BaseEncoder, DenseEncoder, SparseEncoder, and specific implementations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class BaseEncoder {\n        +encode(text: List[str]) -> Any\n        +aencode(text: List[str]) -> Any\n    }\n    class DenseEncoder {\n        +encode() -> dense vectors\n    }\n    class SparseEncoder {\n        +encode() -> sparse vectors\n    }\n    BaseEncoder <|-- DenseEncoder\n    BaseEncoder <|-- SparseEncoder\n    DenseEncoder <|-- OpenAIEncoder\n    DenseEncoder <|-- HuggingFaceEncoder\n    DenseEncoder <|-- CLIPEncoder\n    SparseEncoder <|-- AurelioSparseEncoder\n    SparseEncoder <|-- BM25Encoder\n    SparseEncoder <|-- TFIDFEncoder\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library\nDESCRIPTION: Installation command for the semantic-router library using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Router in Python\nDESCRIPTION: A Python code example demonstrating how to integrate and use Semantic Router, including defining routes, initializing the encoder, creating a router, and routing an incoming query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route, SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\n\n# 1. Define routes\nweather_route = Route(name=\"weather\", utterances=[\"What's the weather like?\"])\ngreeting_route = Route(name=\"greeting\", utterances=[\"Hello there!\", \"Hi!\"])\n\n# 2. Initialize encoder\nencoder = OpenAIEncoder()\n\n# 3. Create router with routes\nrouter = SemanticRouter(encoder=encoder, routes=[weather_route, greeting_route])\n\n# 4. Route an incoming query\nresult = router(\"What's the forecast for tomorrow?\")\nprint(result.name)  # \"weather\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SemanticRouter with Auto-Sync in Python\nDESCRIPTION: This snippet demonstrates how to initialize a SemanticRouter object with auto_sync set to 'local'. It includes setting up routes, an encoder, and a Pinecone index before creating the SemanticRouter instance.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route, SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\nfrom semantic_router.indexes import PineconeIndex\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n\nencoder = OpenAIEncoder(openai_api_key=openai_api_key)\n\npc_index = PineconeIndex(\n    api_key=pinecone_api_key,\n    region=\"us-east-1\",\n    index_name=\"sync-example\",\n)\n# before initializing the SemanticRouter with auto_sync we should initialize\n# the index\npc_index.index = pc_index._init_index(force_create=True)\n\n# now we can initialize the SemanticRouter with local auto_sync\nsr = SemanticRouter(\n    encoder=encoder, routes=routes, index=pc_index,\n    auto_sync=\"local\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Routing\nDESCRIPTION: Creates Route objects with example utterances to define decision paths for the semantic router. This example sets up routes for detecting political conversations and chitchat topics.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router\nDESCRIPTION: Initializes the SemanticRouter with the encoder and routes, setting up local auto-synchronization.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nsr = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the OpenAI dense encoder\nDESCRIPTION: Sets up the OpenAI dense encoder using text-embedding-3-small model with a score threshold of 0.3. This requires an OpenAI API key and is used for generating dense vector embeddings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\", score_threshold=0.3)\n```\n\n----------------------------------------\n\nTITLE: Implementing HybridRouter with Dense and Sparse Encodings\nDESCRIPTION: This snippet shows how to configure a HybridRouter that combines both dense (OpenAI) and sparse (Aurelio) embeddings for improved routing accuracy. The alpha parameter controls the balance between semantic matching and keyword matching.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\nfrom semantic_router.encoders import OpenAIEncoder, AurelioSparseEncoder\nfrom semantic_router.index import HybridLocalIndex\nfrom semantic_router import Route\nimport os\n\n# Set up API keys\nos.environ[\"OPENAI_API_KEY\"] = \"your-openai-api-key\"\nos.environ[\"AURELIO_API_KEY\"] = \"your-aurelio-api-key\"\n\n# Create routes\nroutes = [\n    Route(name=\"weather\", utterances=[\"How's the weather?\", \"Is it raining?\"]),\n    Route(name=\"politics\", utterances=[\"Tell me about politics\", \"Who's the president?\"])\n]\n\n# Initialize the router with both dense and sparse encoders\nrouter = HybridRouter(\n    encoder=OpenAIEncoder(),\n    sparse_encoder=AurelioSparseEncoder(),\n    routes=routes,\n    index=HybridLocalIndex(),\n    alpha=0.3  # Balance between dense (0) and sparse (1) embeddings\n)\n\n# Use the router \nresult = router(\"What's the weather like today?\")\nprint(result.name)  # \"weather\"\n```\n\n----------------------------------------\n\nTITLE: Defining Politics Route\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Conversation Routes\nDESCRIPTION: Creates Route objects for different conversation topics (politics and chitchat) with example utterances for each category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating a RouteLayer in Semantic Router\nDESCRIPTION: Initializes a RouteLayer object using the previously defined encoder and routes. This layer will be used for making routing decisions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/get-started/quickstart.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Making Semantic Routing Decisions\nDESCRIPTION: Demonstrates how to use the initialized router to make decisions based on user queries. The examples show successful matches to defined routes and a case where no match is found.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\").name\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Router\nDESCRIPTION: Initializes a SemanticRouter instance with the specified encoder and routes. The auto_sync parameter configures how route embeddings are synchronized.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hybrid Approach with Dense and Sparse Encoders in Semantic Router\nDESCRIPTION: This code demonstrates how to combine both dense and sparse encoders in a hybrid approach using HybridRouter. The alpha parameter balances between dense (0) and sparse (1) embeddings, allowing you to leverage the strengths of both encoding methods.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/encoders.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\nfrom semantic_router.encoders import OpenAIEncoder, AurelioSparseEncoder\nimport os\n\n# Set up API keys\nos.environ[\"OPENAI_API_KEY\"] = \"your-openai-api-key\"\nos.environ[\"AURELIO_API_KEY\"] = \"your-aurelio-api-key\"\n\n# Create dense and sparse encoders\ndense_encoder = OpenAIEncoder()\nsparse_encoder = AurelioSparseEncoder()\n\n# Initialize the hybrid router\nrouter = HybridRouter(\n    encoder=dense_encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    alpha=0.5  # Balance between dense (0) and sparse (1) embeddings\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Routes in Semantic Router\nDESCRIPTION: Creates Route objects for different categories of conversations, each with sample utterances that represent the category. In this example, routes for 'politics' and 'chitchat' are defined.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package with version 0.1.0 that supports the new dimensions parameter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router==0.1.0\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI Encoder for Semantic Router\nDESCRIPTION: Initializes an OpenAIEncoder to encode text inputs. This requires setting the OPENAI_API_KEY environment variable with your API key.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_API_KEY>\"\n\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router with OpenAI Encoder\nDESCRIPTION: Creates a Semantic Router instance with the OpenAI encoder and the previously defined routes, enabling local storage of embeddings with auto_sync.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\n\nrl = SemanticRouter(encoder=OpenAIEncoder(), routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Encoders for Semantic Router\nDESCRIPTION: Sets up either a CohereEncoder or OpenAIEncoder for converting text into numerical vectors. Requires setting the appropriate API key as an environment variable.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/get-started/quickstart.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder\n\n# for Cohere\nos.environ[\"COHERE_API_KEY\"] = \"<YOUR_API_KEY>\"\nencoder = CohereEncoder()\n\n# or for OpenAI\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_API_KEY>\"\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Using AutoEncoder to Select Appropriate Encoder in Semantic Router\nDESCRIPTION: This snippet demonstrates how to use the AutoEncoder class to automatically select the appropriate encoder based on the specified type. It creates an encoder based on EncoderType and then uses it to generate embeddings for a text query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/encoders.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import AutoEncoder\nfrom semantic_router.schema import EncoderType\n\n# Create an encoder based on type\nencoder = AutoEncoder(type=EncoderType.OPENAI.value, name=\"text-embedding-3-small\").model\n\n# Use the encoder\nembeddings = encoder([\"How can I help you today?\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing HybridLocalIndex with HybridRouter in Python\nDESCRIPTION: This example demonstrates how to use the HybridLocalIndex for combining dense and sparse embeddings in Semantic Router. It initializes both dense and sparse encoders and creates a hybrid router with an alpha parameter to balance between the two embedding types.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/indexes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index import HybridLocalIndex\nfrom semantic_router.routers import HybridRouter\nfrom semantic_router.encoders import OpenAIEncoder, AurelioSparseEncoder\nimport os\n\n# Set up API keys\nos.environ[\"OPENAI_API_KEY\"] = \"your-openai-api-key\"\nos.environ[\"AURELIO_API_KEY\"] = \"your-aurelio-api-key\"\n\n# Initialize dense and sparse encoders\ndense_encoder = OpenAIEncoder()\nsparse_encoder = AurelioSparseEncoder()\n\n# Create a hybrid index\nindex = HybridLocalIndex()\n\n# Create a hybrid router\nrouter = HybridRouter(\n    encoder=dense_encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    index=index,\n    alpha=0.5  # Balance between dense (0) and sparse (1) embeddings\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Router\nDESCRIPTION: Creates two routes ('politics' and 'chitchat') with example utterances that help the router recognize similar queries. Each route contains representative examples of text that should be classified into that category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating a Semantic Layer for Query Augmentation\nDESCRIPTION: Implements a function that processes user queries through the semantic router and augments them with contextual information based on the identified route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef semantic_layer(query: str):\n    route = rl(query)\n    if route.name == \"get_time\":\n        query += f\" (SYSTEM NOTE: {get_time()})\"\n    elif route.name == \"supplement_brand\":\n        query += f\" (SYSTEM NOTE: {supplement_brand()})\"\n    elif route.name == \"business_inquiry\":\n        query += f\" (SYSTEM NOTE: {business_inquiry()})\"\n    elif route.name == \"product\":\n        query += f\" (SYSTEM NOTE: {product()})\"\n    else:\n        pass\n    return query\n```\n\n----------------------------------------\n\nTITLE: Initializing Aurelio Sparse Encoder for Term Matching\nDESCRIPTION: Sets up the Aurelio sparse encoder using the 'bm25' model for term matching capabilities. This will complement the dense encoder by capturing specific brand name matches.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders.aurelio import AurelioSparseEncoder\n\nos.environ[\"AURELIO_API_KEY\"] = os.getenv(\"AURELIO_API_KEY\") or getpass(\n    \"Enter your Aurelio API key: \"\n)\n# sparse encoder for term matching\nsparse_encoder = AurelioSparseEncoder(name=\"bm25\")\n```\n\n----------------------------------------\n\nTITLE: Loading Routers from Configuration in Semantic Router\nDESCRIPTION: This code shows how to initialize routers from external configurations for easier deployment across environments. It demonstrates loading from a YAML file and from a RouterConfig object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create a router from a YAML configuration file\nrouter = SemanticRouter.from_yaml(\"router_config.yaml\")\n\n# Or from a RouterConfig object\nfrom semantic_router.routers import RouterConfig\n\nconfig = RouterConfig(routes=routes, encoder_type=\"openai\")\nrouter = SemanticRouter.from_config(config)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library in Python\nDESCRIPTION: Installs the semantic-router library using pip. This is a prerequisite for using the Semantic Router in Python.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n!pip install -qU semantic-router\n```\n\n----------------------------------------\n\nTITLE: Creating a Chitchat Route and Compiling Routes\nDESCRIPTION: Defines another Route for casual conversation (chitchat) with example utterances and combines both routes into a list for the router configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-Related Functions in Python\nDESCRIPTION: This snippet defines three functions for working with timezones: get_time to find the current time in a specific timezone, get_time_difference to calculate the time difference between two timezones, and convert_time to convert a specific time from one timezone to another. These functions use the datetime module and ZoneInfo for accurate timezone handling.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Function with one argument\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n\n\ndef get_time_difference(timezone1: str, timezone2: str) -> str:\n    \"\"\"Calculates the time difference between two timezones.\n    :param timezone1: The first timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :param timezone2: The second timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :type timezone1: str\n    :type timezone2: str\n    :return: The time difference in hours between the two timezones.\"\"\"\n    # Get the current time in UTC\n    now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    # Convert the UTC time to the specified timezones\n    tz1_time = now_utc.astimezone(ZoneInfo(timezone1))\n    tz2_time = now_utc.astimezone(ZoneInfo(timezone2))\n\n    # Calculate the difference in offsets from UTC\n    tz1_offset = tz1_time.utcoffset().total_seconds()\n    tz2_offset = tz2_time.utcoffset().total_seconds()\n\n    # Calculate the difference in hours\n    hours_difference = (tz2_offset - tz1_offset) / 3600\n\n    return f\"The time difference between {timezone1} and {timezone2} is {hours_difference} hours.\"\n\n\n# Function with three arguments\ndef convert_time(time: str, from_timezone: str, to_timezone: str) -> str:\n    \"\"\"Converts a specific time from one timezone to another.\n    :param time: The time to convert in HH:MM format.\n    :param from_timezone: The original timezone of the time, should be a valid IANA timezone.\n    :param to_timezone: The target timezone for the time, should be a valid IANA timezone.\n    :type time: str\n    :type from_timezone: str\n    :type to_timezone: str\n    :return: The converted time in the target timezone.\n    :raises ValueError: If the time format or timezone strings are invalid.\n\n    Example:\n        convert_time(\"12:30\", \"America/New_York\", \"Asia/Tokyo\") -> \"03:30\"\n    \"\"\"\n    try:\n        # Use today's date to avoid historical timezone issues\n        today = datetime.now().date()\n        datetime_string = f\"{today} {time}\"\n        time_obj = datetime.strptime(datetime_string, \"%Y-%m-%d %H:%M\").replace(\n            tzinfo=ZoneInfo(from_timezone)\n        )\n\n        converted_time = time_obj.astimezone(ZoneInfo(to_timezone))\n\n        formatted_time = converted_time.strftime(\"%H:%M\")\n        return formatted_time\n    except Exception as e:\n        raise ValueError(f\"Error converting time: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up RouteLayer for Text Classification\nDESCRIPTION: Creates a RouteLayer by combining the encoder, routes, and index components. This layer will handle the classification of incoming text to the appropriate route based on semantic similarity.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes, index=qd_index)\n```\n\n----------------------------------------\n\nTITLE: Using OpenAIEncoder for Dense Embeddings in Semantic Router\nDESCRIPTION: This snippet demonstrates how to initialize and use the OpenAIEncoder to generate dense embeddings from text documents. It requires setting the OpenAI API key as an environment variable before creating embeddings for multiple text inputs.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/encoders.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import OpenAIEncoder\nimport os\n\n# Set up API key\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\n\n# Initialize the encoder\nencoder = OpenAIEncoder()\n\n# Generate dense embeddings for documents\nembeddings = encoder([\"How's the weather today?\", \"Tell me about politics\"])\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Semantic Router to/from JSON in Python\nDESCRIPTION: Demonstrates how to save a Semantic Router instance to a JSON file and load it back. This is useful for persisting router configurations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# save to JSON\nrouter.to_json(\"router.json\")\n# load from JSON\nnew_router = SemanticRouter.from_json(\"router.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Bedrock Support\nDESCRIPTION: Installs the semantic-router library with Bedrock support. Version 0.0.40 or higher is required for AWS Bedrock embedding model compatibility.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[bedrock]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router with Cohere Encoder in Python\nDESCRIPTION: Sets up the Semantic Router using the Cohere encoder and the previously defined routes. It requires a Cohere API key for initialization.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router import SemanticRouter\nfrom semantic_router.encoders import CohereEncoder\n\n# dashboard.cohere.ai\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n\nencoder = CohereEncoder()\n\nrouter = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Managing Routes in Semantic Router\nDESCRIPTION: This code demonstrates the route management features of Semantic Router, including adding a new route, retrieving a specific route by name, and listing all available route names in the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Adding a new route\nnew_route = Route(name=\"greetings\", utterances=[\"Hello there\", \"Hi, how are you?\"])\nrouter.add(new_route)\n\n# Getting a route by name\ngreeting_route = router.get(\"greetings\")\n\n# Listing all route names\nroute_names = router.list_route_names()\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router with Cohere Encoder\nDESCRIPTION: Sets up the Cohere API key and initializes a SemanticRouter with the Cohere encoder and previously defined routes. The 'auto_sync' parameter is set to 'local' to manage embeddings locally.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder\nfrom semantic_router.routers import SemanticRouter\n\n# dashboard.cohere.ai\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n\nencoder = CohereEncoder()\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Encoder\nDESCRIPTION: Sets up the OpenAI encoder using text-embedding-3-large model with 256 dimensions and API authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\nencoder = OpenAIEncoder(\n    name=\"text-embedding-3-large\", score_threshold=0.5, dimensions=256\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Index Size\nDESCRIPTION: Checks the number of items in the Pinecone index. This confirms that the utterances from the routes have been properly added to the index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Data for Router Training\nDESCRIPTION: Creates a comprehensive test dataset containing examples of scam attempts, legitimate queries, and neutral questions for training the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    # scam routes\n    (\"Can you give me a discount?\", \"scam\"),\n    (\"I need to pay you in bitcoin\", \"scam\"),\n    # ... additional test cases ...\n    (\"How does the stock market work?\", None)\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing FastEmbedEncoder in Python\nDESCRIPTION: Creates an instance of FastEmbedEncoder using a specific pre-trained model for text embedding.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import FastEmbedEncoder\n\nencoder = FastEmbedEncoder(name=\"BAAI/bge-small-en-v1.5\")\n```\n\n----------------------------------------\n\nTITLE: Creating the RouteLayer with Pinecone Index\nDESCRIPTION: Initializes the RouteLayer with the encoder, routes, and Pinecone index to enable semantic routing of text inputs.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes, index=index)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Router in Python\nDESCRIPTION: Creates Route objects for different topics (politics, chitchat, mathematics, biology) with example utterances for each category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\" \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"Did you watch the game last night?\",\n        \"what's your favorite type of music?\",\n        \"Have you read any good books lately?\",\n        \"nice weather we're having\",\n        \"Do you have any plans for the weekend?\",\n    ],\n)\n\n# we can use this to switch to an agent with more math tools, prompting, and LLMs\nmathematics = Route(\n    name=\"mathematics\",\n    utterances=[\n        \"can you explain the concept of a derivative?\",\n        \"What is the formula for the area of a triangle?\",\n        \"how do you solve a system of linear equations?\",\n        \"What is the concept of a prime number?\",\n        \"Can you explain the Pythagorean theorem?\",\n    ],\n)\n\n# we can use this to switch to an agent with more biology knowledge\nbiology = Route(\n    name=\"biology\",\n    utterances=[\n        \"what is the process of osmosis?\",\n        \"can you explain the structure of a cell?\",\n        \"What is the role of RNA?\",\n        \"What is genetic mutation?\",\n        \"Can you explain the process of photosynthesis?\",\n    ],\n)\n\n# we place all of our decisions together into single list\nroutes = [politics, chitchat, mathematics, biology]\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Sync Between Local and Remote Indexes\nDESCRIPTION: This snippet demonstrates how to set up automatic synchronization between local and remote indexes in Semantic Router. The auto_sync parameter controls whether to prioritize local or remote data when syncing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Initialize router with auto-sync to remote index\nrouter = SemanticRouter(\n    encoder=encoder,\n    routes=routes,\n    index=remote_index,\n    auto_sync=\"remote\"  # Options: \"local\", \"remote\", None\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Sample Utterances\nDESCRIPTION: Creates two Route objects for 'politics' and 'chitchat' categories, each with example utterances that represent the kinds of user inputs that should be routed to these categories.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Zone Function\nDESCRIPTION: Defines a function to get current time in a specific timezone using the IANA Time Zone Database.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking Semantic Router\nDESCRIPTION: Initializes a SemanticRouter with the encoder, routes, and Pinecone index. It sets auto_sync to 'local' and waits for the indexing to complete before checking synchronization status.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\nimport time\n\nrl = SemanticRouter(encoder=encoder, routes=routes, index=pc_index, auto_sync=\"local\")\n# due to pinecone indexing latency we wait 3 seconds\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Sync Feature with SemanticRouter in Python\nDESCRIPTION: This example shows how to use the auto-sync feature of Semantic Router to keep routes synchronized between local and remote indexes. It initializes a router with auto-sync set to \"remote\" and demonstrates adding a new route that will be automatically synced to the remote index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/indexes.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Initialize router with auto-sync to remote index\nrouter = SemanticRouter(\n    encoder=encoder,\n    routes=routes,\n    index=remote_index,\n    auto_sync=\"remote\"  # Options: \"local\", \"remote\", None\n)\n\n# Add a new route - it will be automatically synced to the remote index\nnew_route = Route(name=\"greetings\", utterances=[\"Hello there\", \"Hi, how are you?\"])\nrouter.add(new_route)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Encoder for Text Embeddings\nDESCRIPTION: Creates an instance of the OpenAIEncoder using the 'text-embedding-ada-002' model and the API key from environment variables. This encoder will be used to generate embeddings for the documents.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nencoder = OpenAIEncoder(\n    name=\"text-embedding-ada-002\", openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router\nDESCRIPTION: Creates a SemanticRouter instance with the encoder and routes for classification\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Creating SemanticRouter Instance\nDESCRIPTION: This snippet initializes a SemanticRouter instance with the configured encoder, routes, and index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrouter = SemanticRouter(\n    encoder=encoder,\n    routes=routes,\n    index=index,\n    auto_sync=\"local\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Functions for Routing in Python\nDESCRIPTION: Defines two utility functions that will be used by the semantic router: get_time for retrieving current time in a specified timezone, and get_news for getting news by category and country. These functions will be registered as callable routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\".\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    print(f\"Invoked `get_time` function with timezone: `{timezone}`\")\n    return now.strftime(\"%H:%M\")\n\n\ndef get_news(category: str, country: str) -> str:\n    \"\"\"Useful to get the news in a specific country\"\"\"\n    print(\n        f\"Invoked: `get_news` function with category: `{category}` \"\n        f\"and country: `{country}`\"\n    )\n    return \"Results from dummy news API\"\n```\n\n----------------------------------------\n\nTITLE: Using RouterConfig for SemanticRouter initialization in Python\nDESCRIPTION: Shows how to use the new RouterConfig class to configure and initialize a SemanticRouter, replacing the older LayerConfig approach.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import RouterConfig\n\n# Create configuration for your router\nconfig = RouterConfig(\n    routes=[route1, route2],\n    encoder_type=\"openai\",\n    encoder_name=\"text-embedding-3-small\"\n)\n\n# Initialize a router from config\nsemantic_router = SemanticRouter.from_config(config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Parser for Semantic Router in Python\nDESCRIPTION: This function parses the response from the semantic router and executes the appropriate time-related function based on the router's decision. It handles responses for get_time, get_time_difference, and convert_time functions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef parse_response(response: str):\n    for call in response.function_call:\n        args = call[\"arguments\"]\n        if call[\"function_name\"] == \"get_time\":\n            result = get_time(**args)\n            print(result)\n        if call[\"function_name\"] == \"get_time_difference\":\n            result = get_time_difference(**args)\n            print(result)\n        if call[\"function_name\"] == \"convert_time\":\n            result = convert_time(**args)\n            print(result)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Router\nDESCRIPTION: Creates Route objects for politics, chitchat, mathematics, and biology topics. Each route includes example utterances for classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"Did you watch the game last night?\",\n        \"what's your favorite type of music?\",\n        \"Have you read any good books lately?\",\n        \"nice weather we're having\",\n        \"Do you have any plans for the weekend?\",\n    ],\n)\n\n# we can use this to switch to an agent with more math tools, prompting, and LLMs\nmathematics = Route(\n    name=\"mathematics\",\n    utterances=[\n        \"can you explain the concept of a derivative?\",\n        \"What is the formula for the area of a triangle?\",\n        \"how do you solve a system of linear equations?\",\n        \"What is the concept of a prime number?\",\n        \"Can you explain the Pythagorean theorem?\",\n    ],\n)\n\n# we can use this to switch to an agent with more biology knowledge\nbiology = Route(\n    name=\"biology\",\n    utterances=[\n        \"what is the process of osmosis?\",\n        \"can you explain the structure of a cell?\",\n        \"What is the role of RNA?\",\n        \"What is genetic mutation?\",\n        \"Can you explain the process of photosynthesis?\",\n    ],\n)\n\n# we place all of our decisions together into single list\nroutes = [politics, chitchat, mathematics, biology]\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Routes with Function Calling in Semantic Router\nDESCRIPTION: This section demonstrates how to create and use dynamic routes with function calling capabilities, using a time zone example.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"\n    Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\n    \"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n```\n\nLANGUAGE: python\nCODE:\n```\nget_time(\"America/New_York\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.utils.function_call import get_schema\n\nschema = get_schema(get_time)\nschema\n```\n\nLANGUAGE: python\nCODE:\n```\ntime_route = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what is the time in new york city?\",\n        \"what is the time in london?\",\n        \"I live in Rome, what time is it?\",\n    ],\n    function_schemas=[schema],\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nrl.add(time_route)\n```\n\nLANGUAGE: python\nCODE:\n```\nout = rl(\"what is the time in new york city?\")\nprint(out)\n```\n\nLANGUAGE: python\nCODE:\n```\nget_time(**out.function_call)\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Routes for Fitness Domain\nDESCRIPTION: Defines multiple semantic routes with example utterances for different categories including time queries, supplement recommendations, business inquiries, and product information related to fitness.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\ntime_route = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what time is it?\",\n        \"when should I eat my next meal?\",\n        \"how long should I rest until training again?\",\n        \"when should I go to the gym?\",\n    ],\n)\n\nsupplement_route = Route(\n    name=\"supplement_brand\",\n    utterances=[\n        \"what do you think of Optimum Nutrition?\",\n        \"what should I buy from MyProtein?\",\n        \"what brand for supplements would you recommend?\",\n        \"where should I get my whey protein?\",\n    ],\n)\n\nbusiness_route = Route(\n    name=\"business_inquiry\",\n    utterances=[\n        \"how much is an hour training session?\",\n        \"do you do package discounts?\",\n    ],\n)\n\nproduct_route = Route(\n    name=\"product\",\n    utterances=[\n        \"do you have a website?\",\n        \"how can I find more info about your services?\",\n        \"where do I sign up?\",\n        \"how do I get hench?\",\n        \"do you have recommended training programmes?\",\n    ],\n)\n\nroutes = [time_route, supplement_route, business_route, product_route]\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Router\nDESCRIPTION: Initializes the HybridRouter with both dense and sparse encoders, routes, and alpha parameter for balancing between encoders\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\n\nrouter = HybridRouter(\n    encoder=dense_encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    alpha=0.5,  # Balance between dense (0) and sparse (1) embeddings\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFace Encoder\nDESCRIPTION: Creates an encoder using the HuggingFaceEncoder class with the 'intfloat/e5-base-v2' model. This encoder will transform text inputs into vector embeddings for semantic comparison.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder(model_name=\"intfloat/e5-base-v2\")\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Classification\nDESCRIPTION: Creates route definitions for classifying text into 'politics' and 'chitchat' categories by providing example utterances for each category. These routes will be used to guide a chatbot's responses based on the type of user input.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing Router Queries\nDESCRIPTION: Example usage of the semantic router with various test queries to demonstrate routing functionality.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsr(\"don't you love politics?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsr(\"how's the weather today?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsr(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Routes in Python\nDESCRIPTION: Creates static routes for politics and chitchat categories with example utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router with Routes in Python\nDESCRIPTION: This snippet initializes a SemanticRouter object with the previously defined routes and an encoder. The 'auto_sync' parameter is set to 'local'.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsr2 = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Functions in Multi-Function Route in Python\nDESCRIPTION: This code tests multiple functions in the multi-function route by asking for the time in Prague, time difference between Frankfurt and Beijing, and converting time from Lisbon to Bangkok.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\n    \"\"\"\n    What is the time in Prague?\n    What is the time difference between Frankfurt and Beijing?\n    What is 5:53 Lisbon time in Bangkok time?\n\"\"\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Define Semantic Routes\nDESCRIPTION: Creates route definitions for politics and chitchat conversations with example utterances\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-Function Route with Semantic Router in Python\nDESCRIPTION: This snippet demonstrates how to use the semantic router with multiple time-related queries in a single input. It processes the input and returns the router's response.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresponse = sr2(\n    \"\"\"\n    What is the time in Prague?\n    What is the time difference between Frankfurt and Beijing?\n    What is 5:53 Lisbon time in Bangkok time?\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Encoder for Text Embedding\nDESCRIPTION: Sets up the Cohere encoder by configuring the API key through environment variables or user input. The encoder will be used to convert text into vector embeddings for semantic comparison.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder\n\nos.environ[\"COHERE_API_KEY\"] = os.environ.get(\"COHERE_API_KEY\") or getpass(\n    \"Enter COHERE API key: \"\n)\nencoder = CohereEncoder()\n```\n\n----------------------------------------\n\nTITLE: Creating SemanticRouter with Jina Encoder\nDESCRIPTION: Initializes a SemanticRouter using the Jina encoder and defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter Performance in Python\nDESCRIPTION: Demonstrates the use of the SemanticRouter by routing sample utterances and printing the results.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor utterance in [\n    \"don't you love politics?\",\n    \"how's the weather today?\",\n    \"What's DNA?\",\n    \"I'm interested in learning about llama 2\",\n]:\n    print(f\"{utterance} -> {sr(utterance).name}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Model\nDESCRIPTION: Sets up the embedding model using either Cohere or OpenAI encoders with API key authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder  # noqa: F401\n\n# os.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n#     \"Enter Cohere API Key: \"\n# )\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\n# encoder = CohereEncoder()\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router\nDESCRIPTION: Initializes the SemanticRouter with the configured encoder and routes for text classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Route Layer Responses in Python\nDESCRIPTION: This function parses the response from the route layer and calls the appropriate function (get_time, get_time_difference, or convert_time) based on the function name in the response.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef parse_response(response: str):\n    for call in response.function_call:\n        args = call[\"arguments\"]\n        if call[\"function_name\"] == \"get_time\":\n            result = get_time(**args)\n            print(result)\n        if call[\"function_name\"] == \"get_time_difference\":\n            result = get_time_difference(**args)\n            print(result)\n        if call[\"function_name\"] == \"convert_time\":\n            result = convert_time(**args)\n            print(result)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone Index\nDESCRIPTION: Sets up the Pinecone index by configuring the API key and creating the index object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index.pinecone import PineconeIndex\n\n# get at app.pinecone.io\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\npc_index = PineconeIndex()\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Custom Routes\nDESCRIPTION: Demonstrates how to manually create and add routes with example utterances. This example adds a get_weather route with sample weather-related queries, without connecting it to an actual function implementation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# You can manually add or remove routes\n\nget_weather_route = Route(\n    name=\"get_weather\",\n    utterances=[\n        \"what is the weather in SF\",\n        \"what is the current temperature in London?\",\n        \"tomorrow's weather in Paris?\",\n    ],\n    function_schemas=None,\n)\nroutes.append(get_weather_route)\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Definition\nDESCRIPTION: Creating a dynamic route with example utterances and function schemas for time queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\ntime_route = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what is the time in new york city?\",\n        \"what is the time in london?\",\n        \"I live in Rome, what time is it?\",\n    ],\n    function_schemas=schemas,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Routes from Functions\nDESCRIPTION: Creates routing configurations by automatically extracting information from the defined functions. This uses the LLM to understand the function signatures and purposes for natural language routing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\nfunctions = [get_time, get_news]\n\nroutes = []\n\nfor function in functions:\n    route = Route.from_dynamic_route(llm=llm, entities=function)\n    routes.append(route)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Encoder for Semantic Router\nDESCRIPTION: This snippet sets up the OpenAI API key and initializes the OpenAIEncoder for use in the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\n# get at platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\nencoder = OpenAIEncoder(\n    name=\"text-embedding-3-large\", score_threshold=0.5, dimensions=1536\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI Encoder\nDESCRIPTION: Configures the OpenAI encoder by setting up the API key and initializing the encoder object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\n# get at platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Testing Semantic Router in Python\nDESCRIPTION: Demonstrates how to use the initialized Semantic Router to classify input text into predefined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"isn't politics the best thing ever\")\n\nrouter(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Defining Index Class Hierarchy with Mermaid\nDESCRIPTION: A class diagram illustrating the hierarchy of indexing systems in Semantic Router, including BaseIndex and various implementations like LocalIndex and cloud-based indexes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class BaseIndex {\n        +add(embeddings, routes, utterances)\n        +query(vector, top_k) -> matches\n        +delete(route_name)\n    }\n    BaseIndex <|-- LocalIndex\n    BaseIndex <|-- PostgresIndex \n    BaseIndex <|-- PineconeIndex\n    BaseIndex <|-- QdrantIndex\n    LocalIndex <|-- HybridLocalIndex\n```\n\n----------------------------------------\n\nTITLE: Creating SemanticRouter Instance in Python\nDESCRIPTION: Initializes a SemanticRouter object with the defined encoder and routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import SemanticRouter\n\nsr = SemanticRouter(encoder=encoder, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Testing Time Function with Rome\nDESCRIPTION: Tests the get_time function with a query about Rome's time, showing how the LLM correctly maps city names to IANA timezone identifiers.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nout = rl(\"what's the time in Rome right now?\")\nprint(out)\nget_time(**out.function_call[0])\n```\n\n----------------------------------------\n\nTITLE: Initializing Cohere Encoder\nDESCRIPTION: Sets up the Cohere encoder using the embed-english-v3.0 model with 256-dimensional vectors and configures API authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder\n\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n\nencoder = CohereEncoder(name=\"embed-english-v3.0\", score_threshold=0.3)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Route for Timezone Management in Python\nDESCRIPTION: This snippet defines a dynamic route for handling various timezone-related queries. It includes utterances for getting time, calculating time differences, and converting time between different cities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmulti_function_route = Route(\n    name=\"timezone_management\",\n    utterances=[\n        # Utterances for get_time function\n        \"what is the time in New York?\",\n        \"current time in Berlin?\",\n        \"tell me the time in Moscow right now\",\n        \"can you show me the current time in Tokyo?\",\n        \"please provide the current time in London\",\n        # Utterances for get_time_difference function\n        \"how many hours ahead is Tokyo from London?\",\n        \"time difference between Sydney and Cairo\",\n        \"what's the time gap between Los Angeles and New York?\",\n        \"how much time difference is there between Paris and Sydney?\",\n        \"calculate the time difference between Dubai and Toronto\",\n        # Utterances for convert_time function\n        \"convert 15:00 from New York time to Berlin time\",\n        \"change 09:00 from Paris time to Moscow time\",\n        \"adjust 20:00 from Rome time to London time\",\n        \"convert 12:00 from Madrid time to Chicago time\",\n        \"change 18:00 from Beijing time to Los Angeles time\"\n        # All three functions\n        \"What is the time in Seattle? What is the time difference between Mumbai and Tokyo? What is 5:53 Toronto time in Sydney time?\",\n    ],\n    function_schemas=schemas,\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Router from JSON File\nDESCRIPTION: Demonstrates how to load a previously saved router configuration from a JSON file using the from_json class method.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl = SemanticRouter.from_json(\"layer.json\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the MistralEncoder with API key\nDESCRIPTION: Sets up the MistralEncoder with the 'mistral-embed' model, including API key retrieval and encoder configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import MistralEncoder\n\nos.environ[\"MISTRAL_API_KEY\"] = os.getenv(\"MISTRAL_API_KEY\") or getpass(\n    \"Enter Mistral API Key: \"\n)\n\nencoder = MistralEncoder(\n    name=\"mistral-embed\",\n    score_threshold=0.4,\n    mistralai_api_key=os.environ[\"MISTRAL_API_KEY\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Routes with Scores\nDESCRIPTION: Demonstrates using the retrieve_multiple_routes method to get multiple matching routes with their similarity scores for a query that contains elements of multiple categories.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsr.retrieve_multiple_routes(\"Hi! How are you doing in politics??\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram showing the data flow in Semantic Router, from user input through encoding, index searching, and returning the best matched route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant Router\n    participant Encoder\n    participant Index\n    User->>Router: send query\n    Router->>Encoder: encode query\n    Encoder->>Router: return vector\n    Router->>Index: search for similar routes\n    Index->>Router: return matches\n    Router->>User: return best matched route\n```\n\n----------------------------------------\n\nTITLE: Creating the SemanticRouter with Local Synchronization\nDESCRIPTION: Initializes a SemanticRouter with the configured encoder and routes, using local synchronization for embedding storage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Defining Route Class with Mermaid\nDESCRIPTION: A class diagram showing the structure of the Route class in Semantic Router, including its properties such as name, utterances, and function schemas.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Route {\n        +name: str\n        +utterances: List[str]\n        +description: Optional[str]\n        +function_schemas: Optional[List[Dict]]\n        +score_threshold: Optional[float]\n        +metadata: Optional[Dict]\n    }\n```\n\n----------------------------------------\n\nTITLE: Initialize Postgres Index\nDESCRIPTION: Configures and initializes the Postgres vector index for storing embeddings\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index.postgres import PostgresIndex\nimport os\n\nos.environ[\"POSTGRES_CONNECTION_STRING\"] = (\n    \"postgresql://admin:root@localhost:5432/semantic_router\"\n)\npostgres_index = PostgresIndex()\n```\n\n----------------------------------------\n\nTITLE: Creating a SemanticRouter in Python\nDESCRIPTION: Initializes a SemanticRouter with the FastEmbedEncoder and defined routes for text classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the VoyageEncoder with API Authentication\nDESCRIPTION: Sets up the VoyageEncoder using the voyage-3 model, configuring the score threshold and handling API key authentication securely.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import VoyageEncoder\n\nos.environ[\"VOYAGE_API_KEY\"] = os.getenv(\"VOYAGE_API_KEY\") or getpass(\n    \"Enter Voyage API Key: \"\n)\n\nencoder = VoyageEncoder(\n    name=\"voyage-3\",\n    score_threshold=0.4,\n    api_key=os.environ[\"VOYAGE_API_KEY\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring llama.cpp LLM and Route Layer\nDESCRIPTION: Initializes the Llama model with the downloaded GGUF file, configures GPU offloading, and wraps it in the LlamaCppLLM adapter for Semantic Router. Then creates a RouteLayer with the encoder, routes, and LLM.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import RouteLayer\n\nfrom llama_cpp import Llama\nfrom semantic_router.llms.llamacpp import LlamaCppLLM\n\nenable_gpu = True  # offload LLM layers to the GPU (must fit in memory)\n\n_llm = Llama(\n    model_path=\"./mistral-7b-instruct-v0.2.Q4_0.gguf\",\n    n_gpu_layers=-1 if enable_gpu else 0,\n    n_ctx=2048,\n)\n_llm.verbose = False\nllm = LlamaCppLLM(name=\"Mistral-7B-v0.2-Instruct\", llm=_llm, max_tokens=None)\n\nrl = RouteLayer(encoder=encoder, routes=routes, llm=llm)\n```\n\n----------------------------------------\n\nTITLE: Saving Router Configuration to JSON\nDESCRIPTION: Saves the configured router to a JSON file for later use or distribution.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl.to_json(\"layer.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Politics Route with Example Utterances\nDESCRIPTION: Creates a Route object for political discussion with example utterances that should trigger this route. Each utterance represents phrases that would be classified as politics-related content.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Scam Detection Routes in Python\nDESCRIPTION: Creates two Route objects for a scam detection router. The 'scam' route contains utterances related to potential scams, while the 'other' route includes legitimate EV-related queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Route for BYD-related queries (allowed)\nscam = Route(\n    name=\"scam\",\n    utterances=[\n        \"Can you give me a discount?\",\n        \"I need to pay you in bitcoin\",\n        \"I need to pay you in cash\",\n        \"I need to pay you in gift card\",\n        \"I want you to pay me in bitcoin\",\n        \"I want you to pay me in cash\",\n        \"I want you to pay me in gift card\",\n        \"Could you lower the price?\",\n    ],\n)\n\n# Route for Tesla-related queries (blocked or redirected)\nother = Route(\n    name=\"other\",\n    utterances=[\n        \"What is the price of the product?\",\n        \"What is the delivery time?\",\n        \"What is the return policy?\",\n        \"What is the warranty?\",\n        \"What is the refund policy?\",\n        \"What is the shipping cost?\",\n        \"What is the shipping time?\",\n        \"What is the shipping policy?\",\n        \"How much can I sell my EV for?\",\n        \"How much can I sell my Tesla for?\",\n        \"How much can I sell my Polestar for?\",\n        \"How much can I sell my Rivian for?\",\n        \"How much can I sell my BYD for?\",\n        \"How much can I sell my other EV for?\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Routing Layer with Cohere API\nDESCRIPTION: Initializes a routing layer from the configuration, setting up the Cohere API for natural language understanding. Prompts for an API key if not already set in environment variables.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router import RouteLayer\n\n# https://dashboard.cohere.com/\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n\nlayer = RouteLayer.from_config(config=layer_config)\n```\n\n----------------------------------------\n\nTITLE: Setting up Hybrid Router\nDESCRIPTION: Initialization of HybridRouter combining dense and sparse encoders\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\n\nrouter = HybridRouter(\n    encoder=encoder, sparse_encoder=sparse_encoder, routes=routes, auto_sync=\"local\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing with Time-Related Query\nDESCRIPTION: Evaluates the agent's responses to a query about training time, comparing standard responses versus semantically augmented responses with current time information.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nquery = \"okay, I just finished training, what time should I train again?\"\nsr_query = semantic_layer(query)\nsr_query\n```\n\nLANGUAGE: python\nCODE:\n```\nagent.memory = memory1\nagent(query)\n```\n\nLANGUAGE: python\nCODE:\n```\nagent.memory = memory2\nagent(sr_query)\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Local and Remote Instances in Python\nDESCRIPTION: This snippet demonstrates how to use the sync() method of the SemanticRouter object to synchronize the local and remote instances using the 'local' strategy.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsr.sync(sync_mode=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Router in Python\nDESCRIPTION: Creates a list of Route objects for politics and chitchat categories. These routes are used to initialize the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Function Route for Semantic Router in Python\nDESCRIPTION: This snippet creates a Route object for the semantic router. It includes multiple utterances for each time-related function, allowing the router to handle various time-related queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Define the dynamic route with multiple functions\nmulti_function_route = Route(\n    name=\"timezone_management\",\n    utterances=[\n        # Utterances for get_time function\n        \"what is the time in New York?\",\n        \"current time in Berlin?\",\n        \"tell me the time in Moscow right now\",\n        \"can you show me the current time in Tokyo?\",\n        \"please provide the current time in London\",\n        # Utterances for get_time_difference function\n        \"how many hours ahead is Tokyo from London?\",\n        \"time difference between Sydney and Cairo\",\n        \"what's the time gap between Los Angeles and New York?\",\n        \"how much time difference is there between Paris and Sydney?\",\n        \"calculate the time difference between Dubai and Toronto\",\n        # Utterances for convert_time function\n        \"convert 15:00 from New York time to Berlin time\",\n        \"change 09:00 from Paris time to Moscow time\",\n        \"adjust 20:00 from Rome time to London time\",\n        \"convert 12:00 from Madrid time to Chicago time\",\n        \"change 18:00 from Beijing time to Los Angeles time\"\n        # All three functions\n        \"What is the time in Seattle? What is the time difference between Mumbai and Tokyo? What is 5:53 Toronto time in Sydney time?\",\n    ],\n    function_schemas=schemas,\n)\n```\n\n----------------------------------------\n\nTITLE: Saving and Loading Semantic Router to/from YAML in Python\nDESCRIPTION: Shows how to save a Semantic Router instance to a YAML file and load it back. This provides an alternative format for storing router configurations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# save to YAML\nrouter.to_yaml(\"router.yaml\")\n# load from YAML\nnew_router = SemanticRouter.from_yaml(\"router.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Testing the Semantic Layer with a Sample Query\nDESCRIPTION: Demonstrates how the semantic layer augments a user query about supplement brands with additional context before passing it to the agent.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquery = \"should I buy ON whey or MP?\"\nsr_query = semantic_layer(query)\nsr_query\n```\n\n----------------------------------------\n\nTITLE: Training Semantic Router in Python\nDESCRIPTION: This snippet shows how to train a semantic router using the fit method. It assumes that X and y variables are already defined with training data and labels.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrl.fit(X=X, y=y)\n```\n\n----------------------------------------\n\nTITLE: Classifying a Chitchat-related Query\nDESCRIPTION: Demonstrates using the SemanticRouter to classify a chitchat-related query about weather.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsr(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating SemanticRouter Accuracy in Python\nDESCRIPTION: Uses the evaluate() method to test the accuracy of the SemanticRouter on a small test dataset.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    (\"don't you love politics?\", \"politics\"),\n    (\"how's the weather today?\", \"chitchat\"),\n    (\"What's DNA?\", \"biology\"),\n    (\"I'm interested in learning about llama 2\", None),\n]\n\n# unpack the test data\nX, y = zip(*test_data)\n\n# evaluate using the default thresholds\naccuracy = sr.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy*100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Encoders\nDESCRIPTION: Sets up OpenAI dense encoder and Aurelio sparse encoder with API keys and configuration\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.encoders import OpenAIEncoder, AurelioSparseEncoder\nfrom getpass import getpass\n\n# get OpenAI API key from https://platform.openai.com/\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\ndense_encoder = OpenAIEncoder(name=\"text-embedding-3-small\", score_threshold=0.3)\n\n# get Aurelio API key from https://platform.aurelio.ai\n# use \"SRHYBRIDROUTER\" for free credits\nos.environ[\"AURELIO_API_KEY\"] = os.getenv(\"AURELIO_API_KEY\") or getpass(\n    \"Enter Aurelio API Key: \"\n)\n\n# Using Aurelio's BM25 sparse encoder\nsparse_encoder = AurelioSparseEncoder(name=\"bm25\")\n```\n\n----------------------------------------\n\nTITLE: Reinitializing RouteLayer with Loaded Routes\nDESCRIPTION: Creates a new RouteLayer instance using the routes loaded from the Pinecone index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes, index=index)\n```\n\n----------------------------------------\n\nTITLE: Classifying Weather-Related Text Query\nDESCRIPTION: Shows how the system classifies a question about weather into the chitchat category based on semantic similarity to the predefined examples.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Router in Asynchronous Mode\nDESCRIPTION: Shows how to use the SemanticRouter asynchronously with the acall method to classify a message about politics. This is more efficient for handling multiple requests.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nout = await rl.acall(\"don't you love politics?\")  # ASYNC mode\nout.name\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Function Route for Timezone Management in Python\nDESCRIPTION: This code defines a Route object for timezone management, including utterances for different time-related functions and their corresponding schemas.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmulti_function_route = Route(\n    name=\"timezone_management\",\n    utterances=[\n        # Utterances for get_time function\n        \"what is the time in New York?\",\n        \"current time in Berlin?\",\n        \"tell me the time in Moscow right now\",\n        \"can you show me the current time in Tokyo?\",\n        \"please provide the current time in London\",\n        # Utterances for get_time_difference function\n        \"how many hours ahead is Tokyo from London?\",\n        \"time difference between Sydney and Cairo\",\n        \"what's the time gap between Los Angeles and New York?\",\n        \"how much time difference is there between Paris and Sydney?\",\n        \"calculate the time difference between Dubai and Toronto\",\n        # Utterances for convert_time function\n        \"convert 15:00 from New York time to Berlin time\",\n        \"change 09:00 from Paris time to Moscow time\",\n        \"adjust 20:00 from Rome time to London time\",\n        \"convert 12:00 from Madrid time to Chicago time\",\n        \"change 18:00 from Beijing time to Los Angeles time\"\n        # All three functions\n        \"What is the time in Seattle? What is the time difference between Mumbai and Tokyo? What is 5:53 Toronto time in Sydney time?\",\n    ],\n    function_schemas=schemas,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SemanticRouter with GoogleEncoder\nDESCRIPTION: Initializes a SemanticRouter using the GoogleEncoder and defined routes. The 'auto_sync' parameter is set to 'local'.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Comprehensive Test Dataset for Semantic Router in Python\nDESCRIPTION: This code creates a large test dataset with queries related to different EV brands (BYD, Tesla, Polestar, Rivian) and general knowledge questions. Each query is paired with its expected route or None for general queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    # BYD-related queries\n    (\"Tell me about the BYD Seal.\", \"byd\"),\n    (\"What is the battery capacity of the BYD Dolphin?\", \"byd\"),\n    # ... [truncated for brevity] ...\n    (\"How do I set up a home theater system?\", None),\n]\n```\n\n----------------------------------------\n\nTITLE: Converting Dataset Items to Route Objects\nDESCRIPTION: Transforms the dataset items into Route objects that can be used by Semantic Router, displaying the first route after conversion.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\nroutes = [Route(**data[i]) for i in range(len(data))]\nroutes[0]\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronization Strategy with Semantic Router in Python\nDESCRIPTION: This code demonstrates how to execute a synchronization strategy using the SemanticRouter._execute_sync_strategy() method. It synchronizes the local instance with the remote one.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsr._execute_sync_strategy(sync_mode=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Configuring LlamaCpp LLM\nDESCRIPTION: Setup and configuration of LlamaCpp LLM with GPU acceleration and context size parameters.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import SemanticRouter\n\nfrom llama_cpp import Llama\nfrom semantic_router.llms.llamacpp import LlamaCppLLM\n\nenable_gpu = True  # offload LLM layers to the GPU (must fit in memory)\n\n_llm = Llama(\n    model_path=\"./mistral-7b-instruct-v0.2.Q4_0.gguf\",\n    n_gpu_layers=-1 if enable_gpu else 0,\n    n_ctx=2048,\n)\n_llm.verbose = False\nllm = LlamaCppLLM(name=\"Mistral-7B-v0.2-Instruct\", llm=_llm, max_tokens=None)\n\n# Initialize SemanticRouter with our encoder, routes, and LLM\nrouter = SemanticRouter(encoder=encoder, routes=routes, llm=llm)\n```\n\n----------------------------------------\n\nTITLE: Testing Function Routing with Natural Language\nDESCRIPTION: Tests the routing layer by passing a natural language query about time in Stockholm, demonstrating how the system routes the query to the appropriate function.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlayer(\"What is the time in Stockholm?\")\n```\n\n----------------------------------------\n\nTITLE: Creating New Router with Loaded Configuration\nDESCRIPTION: Creates a new router instance using the encoder and routes from the loaded configuration and setting auto_sync to 'local'.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnew_rl = SemanticRouter(encoder=rl.encoder, routes=rl.routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Time Function Implementation\nDESCRIPTION: Function to get current time in a specific timezone using IANA timezone database.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n```\n\n----------------------------------------\n\nTITLE: Testing Route with Political Query\nDESCRIPTION: Tests the router with a political statement to demonstrate routing to the 'politics' category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrl(\"isn't politics the best thing ever\")\n```\n\n----------------------------------------\n\nTITLE: Routing a Political Query\nDESCRIPTION: Routes a query about politics and returns the matched route name. The router should classify this as belonging to the 'politics' route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl(\"don't you love politics?\").name\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Function Time Zone Utilities\nDESCRIPTION: Defines multiple time-related functions including time difference calculation and time conversion between zones.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n\n\ndef get_time_difference(timezone1: str, timezone2: str) -> str:\n    \"\"\"Calculates the time difference between two timezones.\n    :param timezone1: The first timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :param timezone2: The second timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :type timezone1: str\n    :type timezone2: str\n    :return: The time difference in hours between the two timezones.\"\"\"\n    # Get the current time in UTC\n    now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    # Convert the UTC time to the specified timezones\n    tz1_time = now_utc.astimezone(ZoneInfo(timezone1))\n    tz2_time = now_utc.astimezone(ZoneInfo(timezone2))\n\n    # Calculate the difference in offsets from UTC\n    tz1_offset = tz1_time.utcoffset().total_seconds()\n    tz2_offset = tz2_time.utcoffset().total_seconds()\n\n    # Calculate the difference in hours\n    hours_difference = (tz2_offset - tz1_offset) / 3600\n\n    return f\"The time difference between {timezone1} and {timezone2} is {hours_difference} hours.\"\n\n\ndef convert_time(time: str, from_timezone: str, to_timezone: str) -> str:\n    \"\"\"Converts a specific time from one timezone to another.\n    :param time: The time to convert in HH:MM format.\n    :param from_timezone: The original timezone of the time, should be a valid IANA timezone.\n    :param to_timezone: The target timezone for the time, should be a valid IANA timezone.\n    :type time: str\n    :type from_timezone: str\n    :type to_timezone: str\n    :return: The converted time in the target timezone.\n    :raises ValueError: If the time format or timezone strings are invalid.\n\n    Example:\n        convert_time(\"12:30\", \"America/New_York\", \"Asia/Tokyo\") -> \"03:30\"\n    \"\"\"\n    try:\n        # Use today's date to avoid historical timezone issues\n        today = datetime.now().date()\n        datetime_string = f\"{today} {time}\"\n        time_obj = datetime.strptime(datetime_string, \"%Y-%m-%d %H:%M\").replace(\n            tzinfo=ZoneInfo(from_timezone)\n        )\n\n        converted_time = time_obj.astimezone(ZoneInfo(to_timezone))\n\n        formatted_time = converted_time.strftime(\"%H:%M\")\n        return formatted_time\n    except Exception as e:\n        raise ValueError(f\"Error converting time: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Routes List for Semantic Router in Python\nDESCRIPTION: This snippet creates a list of routes for the semantic router, including the previously defined multi-function route for time-related queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nroutes = [politics, chitchat, multi_function_route]\n```\n\n----------------------------------------\n\nTITLE: Initializing Static Routes and RouteLayer\nDESCRIPTION: Creates static routes for politics and chitchat, then initializes a RouteLayer with these routes using OpenAIEncoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder  # noqa: F401\n\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\n# encoder = CohereEncoder()\nencoder = OpenAIEncoder()\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the BedrockEncoder with AWS Credentials\nDESCRIPTION: Sets up the BedrockEncoder using AWS credentials. This encoder uses the amazon.titan-embed-image-v1 model with a score threshold of 0.5 for classification decisions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import BedrockEncoder\n\naws_access_key_id = os.getenv(\"AWS_ACCESS_KEY_ID\") or getpass(\n    \"Enter AWS Access Key ID: \"\n)\naws_secret_access_key = os.getenv(\"AWS_SECRET_ACCESS_KEY\") or getpass(\n    \"Enter AWS Secret Access Key: \"\n)\naws_session_token = os.getenv(\"AWS_SESSION_TOKEN\") or getpass(\n    \"Enter AWS Session Token: \"\n)\naws_region = os.getenv(\"AWS_REGION\") or getpass(\"Enter AWS Region: \")\n\nencoder = BedrockEncoder(\n    name=\"amazon.titan-embed-image-v1\",\n    score_threshold=0.5,\n    access_key_id=aws_access_key_id,\n    secret_access_key=aws_secret_access_key,\n    session_token=aws_session_token,\n    region=aws_region,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Routes with Multiple Functions\nDESCRIPTION: Defines multiple time-related functions, creates schemas for them, and adds them to a new dynamic route for handling various time queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n\n\ndef get_time_difference(timezone1: str, timezone2: str) -> str:\n    \"\"\"Calculates the time difference between two timezones.\n    :param timezone1: The first timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :param timezone2: The second timezone, should be a valid timezone from the IANA Time Zone Database like \"America/New_York\" or \"Europe/London\".\n    :type timezone1: str\n    :type timezone2: str\n    :return: The time difference in hours between the two timezones.\"\"\"\n    # Get the current time in UTC\n    now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo(\"UTC\"))\n\n    # Convert the UTC time to the specified timezones\n    tz1_time = now_utc.astimezone(ZoneInfo(timezone1))\n    tz2_time = now_utc.astimezone(ZoneInfo(timezone2))\n\n    # Calculate the difference in offsets from UTC\n    tz1_offset = tz1_time.utcoffset().total_seconds()\n    tz2_offset = tz2_time.utcoffset().total_seconds()\n\n    # Calculate the difference in hours\n    hours_difference = (tz2_offset - tz1_offset) / 3600\n\n    return f\"The time difference between {timezone1} and {timezone2} is {hours_difference} hours.\"\n\n\ndef convert_time(time: str, from_timezone: str, to_timezone: str) -> str:\n    \"\"\"Converts a specific time from one timezone to another.\n    :param time: The time to convert in HH:MM format.\n    :param from_timezone: The original timezone of the time, should be a valid IANA timezone.\n    :param to_timezone: The target timezone for the time, should be a valid IANA timezone.\n    :type time: str\n    :type from_timezone: str\n    :type to_timezone: str\n    :return: The converted time in the target timezone.\n    :raises ValueError: If the time format or timezone strings are invalid.\n\n    Example:\n        convert_time(\"12:30\", \"America/New_York\", \"Asia/Tokyo\") -> \"03:30\"\n    \"\"\"\n    try:\n        # Use today's date to avoid historical timezone issues\n        today = datetime.now().date()\n        datetime_string = f\"{today} {time}\"\n        time_obj = datetime.strptime(datetime_string, \"%Y-%m-%d %H:%M\").replace(\n            tzinfo=ZoneInfo(from_timezone)\n        )\n\n        converted_time = time_obj.astimezone(ZoneInfo(to_timezone))\n\n        formatted_time = converted_time.strftime(\"%H:%M\")\n        return formatted_time\n    except Exception as e:\n        raise ValueError(f\"Error converting time: {e}\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfunctions = [get_time, get_time_difference, convert_time]\n```\n\nLANGUAGE: python\nCODE:\n```\n# Generate schemas for all functions\nfrom semantic_router.llms.openai import get_schemas_openai\n\nschemas = get_schemas_openai(functions)\nschemas\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Classification in Sync Mode\nDESCRIPTION: Demonstrates synchronous classification of a weather-related message, which should be categorized as chitchat by the SemanticRouter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Comparing Agent Responses with and without Semantic Routing\nDESCRIPTION: Tests the agent with both the original query and the semantically enhanced query to demonstrate how adding context through routing improves the agent's responses.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagent(query)\n```\n\nLANGUAGE: python\nCODE:\n```\n# swap  agent memory first\nagent.memory = memory2\nagent(sr_query)\n```\n\n----------------------------------------\n\nTITLE: Starting Pinecone Local Docker Container\nDESCRIPTION: This command starts a Pinecone Local Docker container with specific environment variables and port mappings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n--name pinecone-local \\\n-e PORT=5080 \\\n-e PINECONE_HOST=localhost \\\n-p 5080-6000:5080-6000 \\\n--platform linux/amd64 \\\nghcr.io/pinecone-io/pinecone-local:latest\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter Classification\nDESCRIPTION: Tests the SemanticRouter with various input queries to demonstrate classification results.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n\nrl(\"how's the weather today?\")\n\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with a Politics-Related Query\nDESCRIPTION: Tests the router with a politics-related question to see if it correctly identifies the appropriate route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Cross-Brand Query Similarities with Dense Embeddings\nDESCRIPTION: Demonstrates that similar queries about different brands have high semantic similarity when using only dense embeddings, showing why dense encoders alone struggle with brand-specific routing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom numpy.linalg import norm\n\nvectors = encoder(\n    docs=[\n        \"can I sell my Tesla?\",\n        \"can I sell my Polestar?\",\n        \"can I sell my BYD?\",\n        \"can I sell my Rivian?\",\n    ]\n)\n\n# normalize our vectors\nvector_norms = norm(vectors, axis=1, keepdims=True)\nnormalized_vectors = vectors / vector_norms\n\n# calculate the dot product similarity between the vectors\ndot_products = np.dot(normalized_vectors, normalized_vectors.T)\ndot_products\n```\n\n----------------------------------------\n\nTITLE: Verifying Synchronization Status with Semantic Router in Python\nDESCRIPTION: This snippet shows how to check if the local and remote instances are synchronized using the SemanticRouter.is_synced() method. It returns True if synchronization is complete.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsr.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Generating LLM Translation Prediction with In-context Learning\nDESCRIPTION: This code snippet demonstrates how to generate a translation prediction using an LLM with in-context learning. It shows the process of concatenating exemplars and templates to create a prompt, then using the LLM to generate the output.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\narg max Y p(P ⊕ T (X , Y))\n```\n\n----------------------------------------\n\nTITLE: Testing Unrelated Topic Classification in Sync Mode\nDESCRIPTION: Tests how the SemanticRouter handles a message about LLM models in synchronous mode. This shows how the router deals with content not explicitly defined in routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Index\nDESCRIPTION: Initializes a LocalIndex instance that will store and retrieve vector embeddings for the route utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index.local import LocalIndex\n\nlocal_index = LocalIndex()\n```\n\n----------------------------------------\n\nTITLE: Testing the Encoder with a Simple Input\nDESCRIPTION: Tests the encoder by generating an embedding for a simple text input \"hey\". This verifies that the encoder is properly initialized and functional.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nencoder([\"hey\"])\n```\n\n----------------------------------------\n\nTITLE: Testing Static Routes in Semantic Router\nDESCRIPTION: These snippets demonstrate how to test the static routes with sample input utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with Politics Query\nDESCRIPTION: Tests the hybrid router with a query related to politics.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Setting up a Semantic Router with Routes and Encoder\nDESCRIPTION: Creates a SemanticRouter instance with the configured encoder and routes, setting auto_sync to 'local' for local embedding storage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Executing a Sync Strategy\nDESCRIPTION: Executes the local synchronization strategy to update the remote instance based on local data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nstrategy = diff.get_sync_strategy(\"local\")\nrl._execute_sync_strategy(strategy=strategy)\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Classification in Async Mode\nDESCRIPTION: Shows asynchronous classification of a weather-related message using the SemanticRouter's acall method. This demonstrates the async functionality with chitchat content.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nout = await rl.acall(\"how's the weather today?\")\nout.name\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Encoder\nDESCRIPTION: Sets up the AzureOpenAIEncoder with necessary configuration parameters including API key, deployment name, endpoint, and model. This encoder will be used to generate embeddings for text classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import AzureOpenAIEncoder\n\nencoder = AzureOpenAIEncoder(\n    api_key=\"YOUR_AZURE_OPENAI_API_KEY\",\n    deployment_name=\"YOUR_DEPLOYMENT_NAME\",\n    azure_endpoint=\"YOUR_ENDPOINT\",\n    api_version=\"2024-02-01\",\n    model=\"text-embedding-3-small\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a SemanticRouter with MistralEncoder and routes\nDESCRIPTION: Initializes a SemanticRouter (RouteLayer) using the MistralEncoder and defined routes for text classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFace Encoder\nDESCRIPTION: Creates a HuggingFaceEncoder instance for encoding text inputs.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Thresholds for Semantic Router Routes in Python\nDESCRIPTION: This code sets custom thresholds for different routes in the semantic router. Each threshold is a float value between 0 and 1.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrouter.set_threshold(route_name=\"byd\", threshold=0.42424242424242425)\nrouter.set_threshold(route_name=\"tesla\", threshold=0.31313131313131315)\nrouter.set_threshold(route_name=\"polestar\", threshold=0.84640342822161)\nrouter.set_threshold(route_name=\"rivian\", threshold=0.12121212121212122)\n```\n\n----------------------------------------\n\nTITLE: Querying SemanticRouter\nDESCRIPTION: These snippets demonstrate how to query the SemanticRouter with different inputs and retrieve route information.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"don't you love politics?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"how are things going?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"don't you love politics?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"how's the weather today?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Creating Layer Configuration with Routes\nDESCRIPTION: Creates a LayerConfig object with the defined routes and converts it to a dictionary representation to inspect the configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import LayerConfig\n\nlayer_config = LayerConfig(routes=routes)\nlayer_config.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Parsing and Executing Semantic Router Response in Python\nDESCRIPTION: This snippet uses the previously defined parse_response function to execute the time-related functions based on the semantic router's response, and prints the results.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Testing the RouteLayer with a Query\nDESCRIPTION: Tests the RouteLayer by sending a weather-related query and retrieving the matched route name.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Defining Politics Route\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances for classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Local Support\nDESCRIPTION: Installation commands for semantic-router with local LLM support, including optional Metal hardware acceleration for Apple silicon.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npip install -qU \"semantic-router[local]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nCMAKE_ARGS=\"-DLLAMA_METAL=on\" pip install -qU \"semantic-router[local]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router Instance\nDESCRIPTION: Initializes a SemanticRouter with the defined routes and encoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Thresholds\nDESCRIPTION: Gets and displays the updated threshold values for different routes after training. Shows thresholds for politics, chitchat, mathematics, and biology categories.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = sr.get_thresholds()\nprint(\"Updated route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Route Names\nDESCRIPTION: Retrieves and displays the names of all routes configured in the RouteLayer. This helps verify the setup of the classification system.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl.list_route_names()\n```\n\n----------------------------------------\n\nTITLE: Testing New Router with Chitchat Query\nDESCRIPTION: Tests the newly created router with a casual weather question to verify it routes correctly after being recreated from the loaded configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nnew_rl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing Politics Non-Dynamic Route in Python\nDESCRIPTION: This snippet tests the politics non-dynamic route by calling the semantic router with a political question.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\"What is your political leaning?\")\nresponse\n```\n\n----------------------------------------\n\nTITLE: Testing Route Activation with Sample Queries\nDESCRIPTION: Tests the semantic router to see if it correctly identifies the appropriate route for different types of user queries related to fitness.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrl(\"should I buy ON whey or MP?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how do I get big arms?\")\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFaceEncoder for Text Embedding\nDESCRIPTION: Imports and initializes the HuggingFaceEncoder, which will convert text into embeddings for semantic comparison.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Evaluating Semantic Router Accuracy After Optimization in Python\nDESCRIPTION: This snippet evaluates the accuracy of the semantic router after optimizing thresholds and prints the result as a percentage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\naccuracy = router.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Creating RouteLayer with Ollama LLM for Semantic Router\nDESCRIPTION: This code sets up the RouteLayer using the OllamaLLM, which utilizes the OpenHermes model for local LLM execution.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\nfrom semantic_router.llms.ollama import OllamaLLM\n\n\nllm = OllamaLLM(\n    llm_name=\"openhermes\"\n)  # Change llm_name if you want to use a different LLM with dynamic routes.\nrl = RouteLayer(encoder=encoder, routes=routes, llm=llm)\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with sample queries\nDESCRIPTION: Demonstrates how to use the SemanticRouter to classify different text inputs and handle unrelated queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n\nrl(\"how's the weather today?\")\n\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with politics-related input in Python\nDESCRIPTION: Demonstrates using the SemanticRouter to classify a politics-related query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Testing Get Time Function in Multi-Function Route\nDESCRIPTION: This snippet tests the get_time function within the multi-function route by querying the time in New York.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\"what is the time in New York?\")\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Encoder Configuration\nDESCRIPTION: Setting up the Azure OpenAI encoder with API credentials and model configuration for async operations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import AzureOpenAIEncoder\n\nencoder = AzureOpenAIEncoder(\n    api_key=\"YOUR_AZURE_OPENAI_API_KEY\",\n    deployment_name=\"YOUR_DEPLOYMENT_NAME\",\n    azure_endpoint=\"YOUR_ENDPOINT\",\n    api_version=\"2024-02-01\",\n    model=\"text-embedding-3-small\",\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Time Difference Function in Multi-Function Route\nDESCRIPTION: This code tests the get_time_difference function within the multi-function route by querying the time difference between Los Angeles and Istanbul.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\"What is the time difference between Los Angeles and Istanbul?\")\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Router Accuracy\nDESCRIPTION: Uses the evaluate method to test the router's accuracy on a small dataset.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    (\"don't you love politics?\", \"politics\"),\n    (\"how's the weather today?\", \"chitchat\"),\n    (\"What's DNA?\", \"biology\"),\n    (\"I'm interested in learning about llama 2\", None),\n]\n\n# unpack the test data\nX, y = zip(*test_data)\n\n# evaluate using the default thresholds\naccuracy = rl.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Chitchat Route\nDESCRIPTION: Creates another Route object for chitchat with example utterances and combines both routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with chitchat-related input in Python\nDESCRIPTION: Shows how to use the SemanticRouter to classify a casual conversation query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing Router with Sample Queries\nDESCRIPTION: Tests the semantic router with various input queries to demonstrate classification behavior.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI Encoder\nDESCRIPTION: Initializes the OpenAIEncoder for generating embeddings from text. It securely handles the OpenAI API key input for authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\n# get at platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\n\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Route Thresholds in Python\nDESCRIPTION: Prints the current default threshold values for each route in the SemanticRouter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = sr.get_thresholds()\nprint(\"Default route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Displaying Semantic Router Response in Python\nDESCRIPTION: This snippet prints the response from the semantic router, showing how it parsed the multi-function query and determined the appropriate functions to call.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nresponse\n```\n\n----------------------------------------\n\nTITLE: Testing Time Function with New York\nDESCRIPTION: Tests the get_time function with a query about New York's time, demonstrating function calling capabilities with the route layer.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nout = rl(\"what's the time in New York right now?\")\nprint(out)\nget_time(**out.function_call[0])\n```\n\n----------------------------------------\n\nTITLE: Classifying General Interest Query\nDESCRIPTION: Tests the system with a query about a topic not explicitly defined in the routes (LLaMA 2). The system will attempt to classify it into the closest matching route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Migrating from RouteLayer.add to SemanticRouter.add in Python\nDESCRIPTION: Shows how to update code from using the old RouteLayer.add method to the new SemanticRouter.add method which now accepts a list of routes for batch addition.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Before\nroute_layer = RouteLayer(encoder=encoder)\nroute_layer.add(route1)\nroute_layer.add(route2)\n\n# After\nsemantic_router = SemanticRouter(encoder=encoder)\nsemantic_router.add([route1, route2])  # Add multiple routes at once\nsemantic_router.add(route3)  # Still works for a single route\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Route Query with SemanticRouter\nDESCRIPTION: These snippets show how to perform asynchronous queries using the SemanticRouter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait router.acall(\"how are things going?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nawait router.index._async_list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Checking Synchronization Status\nDESCRIPTION: Verifies if local and remote instances are synchronized by calling the is_synced() method.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Async RouteLayer Implementation\nDESCRIPTION: Setting up and using RouteLayer with both synchronous and asynchronous operations for route matching.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes, index=pc_index)\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with a Politics Query\nDESCRIPTION: Tests the semantic router with a politics-related query to demonstrate classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Route for chitchat classification\nDESCRIPTION: Defines a chitchat route with example utterances and combines it with the politics route into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pinecone Index for Vector Storage\nDESCRIPTION: Initializes a Pinecone vector database index for storing route embeddings, requiring a Pinecone API key for authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.index.pinecone import PineconeIndex\n\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\n\nindex = PineconeIndex(index_name=\"index\", namespace=\"namespace\")\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Functions in Multi-Function Route\nDESCRIPTION: This code demonstrates the ability to handle multiple time-related queries in a single request, showcasing the versatility of the multi-function route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\n    \"\"\"\n    What is the time in Prague?\n    What is the time difference between Frankfurt and Beijing?\n    What is 5:53 Lisbon time in Bangkok time?\n\"\"\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Semantic Router Initialization\nDESCRIPTION: Setting up the SemanticRouter with OpenAI encoder and routes configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\n\n# platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_API_KEY>\"\n\nencoder = OpenAIEncoder()\n\nsr = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Output for Multiple Routes Retrieval\nDESCRIPTION: Shows the list of RouteChoice objects returned when retrieving multiple routes, each containing the route name and its similarity score.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n[Out]: [RouteChoice(name='politics', function_call=None, similarity_score=0.859),\n        RouteChoice(name='chitchat', function_call=None, similarity_score=0.835)]\n```\n\n----------------------------------------\n\nTITLE: Migrating from retrieve_multiple_routes to __call__ with limit parameter in Python\nDESCRIPTION: Demonstrates how to update code that used the deprecated retrieve_multiple_routes method to the new pattern using __call__ or acall with a limit parameter to retrieve multiple matching routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Before (v0.0.x)\nroute_layer = RouteLayer(encoder=encoder, routes=routes)\nmultiple_routes = route_layer.retrieve_multiple_routes(query_text)\n\n# Transitional (v0.1.0-0.1.2)\n# Using deprecated method (not recommended)\nsemantic_router = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\nquery_results = semantic_router._query(query_text)\nmultiple_routes = semantic_router._semantic_classify_multiple_routes(query_results)\n\n# After (v0.1.3+)\nsemantic_router = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n# Return all routes that pass their score thresholds\nall_routes = semantic_router(query_text, limit=None)\n# Or return top N routes that pass their score thresholds\ntop_routes = semantic_router(query_text, limit=3)\n\n# To get scores for all routes regardless of threshold\nsemantic_router.set_threshold(threshold=0.0)  # Set all route thresholds to 0\nall_route_scores = semantic_router(query_text, limit=None)\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous Operations with Semantic Router\nDESCRIPTION: This example demonstrates how to use the asynchronous methods of Semantic Router for improved performance in async environments. It shows async routing (acall) and async route addition (aadd).\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Async routing\nresult = await router.acall(\"What's the weather like today?\")\n\n# Async route addition\nawait router.aadd(new_route)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Thresholds\nDESCRIPTION: Gets and displays the threshold values used by the router for classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = second_router.get_thresholds()\nprint(\"Updated route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating In-Memory Qdrant Vector Index\nDESCRIPTION: Initializes a Qdrant vector index in memory to store and search the vector representations of the route utterances, enabling efficient semantic search.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index.qdrant import QdrantIndex\n\n\nqd_index = QdrantIndex(location=\":memory:\")\n```\n\n----------------------------------------\n\nTITLE: Creating Larger Test Dataset for SemanticRouter in Python\nDESCRIPTION: Defines a more comprehensive test dataset with examples for each route category and some None routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    # politics\n    (\"What's your opinion on the current government?\", \"politics\"),\n    (\"Who do you think will win the next election?\", \"politics\"),\n    (\"What are your thoughts on the new policy?\", \"politics\"),\n    (\"How do you feel about the political situation?\", \"politics\"),\n    (\"Do you agree with the president's actions?\", \"politics\"),\n    (\"What's your stance on the political debate?\", \"politics\"),\n    (\"How do you see the future of our country?\", \"politics\"),\n    (\"What do you think about the opposition party?\", \"politics\"),\n    (\"Do you believe the government is doing enough?\", \"politics\"),\n    (\"What's your opinion on the political scandal?\", \"politics\"),\n    (\"Do you think the new law will make a difference?\", \"politics\"),\n    (\"What are your thoughts on the political reform?\", \"politics\"),\n    (\"Do you agree with the government's foreign policy?\", \"politics\"),\n    # chitchat\n    (\"What's the weather like?\", \"chitchat\"),\n    (\"It's a beautiful day today.\", \"chitchat\"),\n    (\"How's your day going?\", \"chitchat\"),\n    (\"It's raining cats and dogs.\", \"chitchat\"),\n    (\"Let's grab a coffee.\", \"chitchat\"),\n    (\"What's up?\", \"chitchat\"),\n    (\"It's a bit chilly today.\", \"chitchat\"),\n    (\"How's it going?\", \"chitchat\"),\n    (\"Nice weather we're having.\", \"chitchat\"),\n    (\"It's a bit windy today.\", \"chitchat\"),\n    (\"Let's go for a walk.\", \"chitchat\"),\n    (\"How's your week been?\", \"chitchat\"),\n    (\"It's quite sunny today.\", \"chitchat\"),\n    (\"How are you feeling?\", \"chitchat\"),\n    (\"It's a bit cloudy today.\", \"chitchat\"),\n    # mathematics\n    (\"What is the Pythagorean theorem?\", \"mathematics\"),\n    (\"Can you solve this quadratic equation?\", \"mathematics\"),\n    (\"What is the derivative of x squared?\", \"mathematics\"),\n    (\"Explain the concept of integration.\", \"mathematics\"),\n    (\"What is the area of a circle?\", \"mathematics\"),\n    (\"How do you calculate the volume of a sphere?\", \"mathematics\"),\n    (\"What is the difference between a vector and a scalar?\", \"mathematics\"),\n    (\"Explain the concept of a matrix.\", \"mathematics\"),\n    (\"What is the Fibonacci sequence?\", \"mathematics\"),\n    (\"How do you calculate permutations?\", \"mathematics\"),\n    (\"What is the concept of probability?\", \"mathematics\"),\n    (\"Explain the binomial theorem.\", \"mathematics\"),\n    (\"What is the difference between discrete and continuous data?\", \"mathematics\"),\n    (\"What is a complex number?\", \"mathematics\"),\n    (\"Explain the concept of limits.\", \"mathematics\"),\n    # biology\n    (\"What is photosynthesis?\", \"biology\"),\n    (\"Explain the process of cell division.\", \"biology\"),\n    (\"What is the function of mitochondria?\", \"biology\"),\n    (\"What is DNA?\", \"biology\"),\n    (\"What is the difference between prokaryotic and eukaryotic cells?\", \"biology\"),\n    (\"What is an ecosystem?\", \"biology\"),\n    (\"Explain the theory of evolution.\", \"biology\"),\n    (\"What is a species?\", \"biology\"),\n    (\"What is the role of enzymes?\", \"biology\"),\n    (\"What is the circulatory system?\", \"biology\"),\n    (\"Explain the process of respiration.\", \"biology\"),\n    (\"What is a gene?\", \"biology\"),\n    (\"What is the function of the nervous system?\", \"biology\"),\n    (\"What is homeostasis?\", \"biology\"),\n    (\"What is the difference between a virus and a bacteria?\", \"biology\"),\n    (\"What is the role of the immune system?\", \"biology\"),\n    # add some None routes to prevent excessively small thresholds\n    (\"What is the capital of France?\", None),\n    (\"how many people live in the US?\", None),\n    (\"when is the best time to visit Bali?\", None),\n    (\"how do I learn a language\", None),\n    (\"tell me an interesting fact\", None),\n    (\"what is the best programming language?\", None),\n    (\"I'm interested in learning about llama 2\", None),\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Route by Name\nDESCRIPTION: Demonstrates how to access a specific route from the layer configuration by its name, in this case retrieving the 'get_time' route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Get a route by name\nlayer_config.get(\"get_time\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Printing Route Thresholds for Semantic Router in Python\nDESCRIPTION: This snippet retrieves the current thresholds for all routes in the semantic router and prints them.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = router.get_thresholds()\nprint(\"Default route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Creating a HybridRouter without auto-sync\nDESCRIPTION: Initializes a HybridRouter with the dense and sparse encoders, routes, and Pinecone index without specifying auto-sync. This creates a router that can use both semantic meaning and keyword matching but doesn't sync with the remote index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\n\nrouter = HybridRouter(\n    encoder=encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    index=index,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a RouteLayer for Image Classification\nDESCRIPTION: Initializes a RouteLayer with the ViT encoder and defined routes. This layer will handle the routing logic based on image content, determining if an image contains Shrek or not.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Defining Action Functions for Each Route\nDESCRIPTION: Creates functions that return contextual information for each route, such as current time, supplement brand information, business pricing, and product details.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\n\n\ndef get_time():\n    now = datetime.now()\n    return (\n        f\"The current time is {now.strftime('%H:%M')}, use \"\n        \"this information in your response\"\n    )\n\n\ndef supplement_brand():\n    return (\n        \"Remember you are not affiliated with any supplement \"\n        \"brands, you have your own brand 'BigAI' that sells \"\n        \"the best products like P100 whey protein\"\n    )\n\n\ndef business_inquiry():\n    return (\n        \"Your training company, 'BigAI PT', provides premium \"\n        \"quality training sessions at just $700 / hour. \"\n        \"Users can find out more at www.aurelio.ai/train\"\n    )\n\n\ndef product():\n    return (\n        \"Remember, users can sign up for a fitness programme at www.aurelio.ai/sign-up\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Utterances\nDESCRIPTION: Extracts the list of utterances from the local route layer configuration for comparison.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlocal_utterances = rl.to_config().to_utterances()\nlocal_utterances\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with weather query\nDESCRIPTION: Shows how the router classifies a weather-related query into the chitchat category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsr(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Chitchat Route with Example Utterances\nDESCRIPTION: Creates a second Route object for casual conversation with example utterances. This route captures general small talk and weather-related conversations as distinct from political discussions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: OpenAI Encoder Setup\nDESCRIPTION: Configuring OpenAI encoder with API key authentication and model selection.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\n# get at platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\")\n```\n\n----------------------------------------\n\nTITLE: Defining a 'politics' Route in Python\nDESCRIPTION: Creates a Route object for politics-related utterances using the semantic_router library.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with Politics Query\nDESCRIPTION: Demonstrates using the SemanticRouter to classify a politics-related query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Converting Route Dictionary to Route Objects\nDESCRIPTION: Transforms the route dictionary back into Route objects for use with the RouteLayer.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nroutes = [\n    Route(name=route, utterances=utterances)\n    for route, utterances in routes_dict.items()\n]\nroutes[0]\n```\n\n----------------------------------------\n\nTITLE: Defining a Politics Route for Semantic Router\nDESCRIPTION: Creates a Route object for politics with example utterances that should trigger this route. The utterances help train the router to recognize similar queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Utterance Differences\nDESCRIPTION: Examines the specific differences between local and remote instances by calling get_utterance_diff().\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrl.get_utterance_diff()\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with Unrelated Query\nDESCRIPTION: Shows how the SemanticRouter handles a query unrelated to the defined routes, returning None for no matches.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Function List for Semantic Router in Python\nDESCRIPTION: This snippet creates a list of the previously defined time-related functions. This list will be used to generate schemas for the semantic router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfunctions = [get_time, get_time_difference, convert_time]\n```\n\n----------------------------------------\n\nTITLE: Initializing Aurelio BM25 Sparse Encoder\nDESCRIPTION: Sets up the Aurelio API key and initializes the AurelioSparseEncoder with the 'bm25' model.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders.aurelio import AurelioSparseEncoder\n\nos.environ[\"AURELIO_API_KEY\"] = os.getenv(\"AURELIO_API_KEY\") or getpass(\n    \"Enter Aurelio API Key: \"\n)\n\nsparse_encoder = AurelioSparseEncoder(name=\"bm25\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the Aurelio BM25 sparse encoder\nDESCRIPTION: Sets up the Aurelio sparse encoder using the BM25 model. This requires an Aurelio API key which can be obtained from the Aurelio Platform and is used for generating sparse encodings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders.aurelio import AurelioSparseEncoder\n\nos.environ[\"AURELIO_API_KEY\"] = os.getenv(\"AURELIO_API_KEY\") or getpass(\n    \"Enter Aurelio API Key: \"\n)\n\nsparse_encoder = AurelioSparseEncoder(name=\"bm25\")\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with a Weather-Related Query\nDESCRIPTION: Tests the router with a weather-related question to verify it correctly identifies the chitchat route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with Unrelated Query\nDESCRIPTION: Tests the hybrid router with a query unrelated to any defined routes, which should return None.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Filtering to politics route only\nDESCRIPTION: Demonstrates how filtering to only the politics route for a weather query returns None as the query doesn't match well enough.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsr(\"how's the weather today?\", route_filter=[\"politics\"])\n```\n\n----------------------------------------\n\nTITLE: Setting up Semantic Router with Local Index\nDESCRIPTION: Creates a SemanticRouter instance with the configured encoder, routes, and local index. The 'auto_sync=\"local\"' parameter ensures that routes are automatically synchronized with the local index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nlocal_rl = SemanticRouter(\n    encoder=encoder, routes=routes, index=local_index, auto_sync=\"local\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Route Layer\nDESCRIPTION: Creates a RouteLayer instance combining the encoder, routes, and Postgres index\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes, index=postgres_index)\n```\n\n----------------------------------------\n\nTITLE: Filtering Local-Only Utterances\nDESCRIPTION: Filters the diff to show only utterances that exist in the local instance but not remotely.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_tag(\"-\")\n```\n\n----------------------------------------\n\nTITLE: Output for Chitchat Query Classification\nDESCRIPTION: Shows the RouteChoice object returned when classifying a chitchat-related query, containing the name of the matched route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n[Out]: RouteChoice(name='chitchat', function_call=None, similarity_score=None)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for EV Brand Detection\nDESCRIPTION: Creates route definitions for different electric vehicle brands (BYD, Tesla, Polestar, Rivian) with example utterances that represent each route. Each route contains brand-specific queries that would be expected from users.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# Route for BYD-related queries (allowed)\nbyd = Route(\n    name=\"byd\",\n    utterances=[\n        \"Tell me about the BYD Seal.\",\n        \"What is the battery capacity of the BYD Dolphin?\",\n        \"How does BYD's Blade Battery work?\",\n        \"Is the BYD Atto 3 a good EV?\",\n        \"Can I sell my BYD?\",\n        \"How much is my BYD worth?\",\n        \"What is the resale value of my BYD?\",\n        \"How much can I get for my BYD?\",\n        \"How much can I sell my BYD for?\",\n    ],\n)\n\n# Route for Tesla-related queries (blocked or redirected)\ntesla = Route(\n    name=\"tesla\",\n    utterances=[\n        \"Is Tesla better than BYD?\",\n        \"Tell me about the Tesla Model 3.\",\n        \"How does Tesla's autopilot compare to other EVs?\",\n        \"What's new in the Tesla Cybertruck?\",\n        \"Can I sell my Tesla?\",\n        \"How much is my Tesla worth?\",\n        \"What is the resale value of my Tesla?\",\n        \"How much can I get for my Tesla?\",\n        \"How much can I sell my Tesla for?\",\n    ],\n)\n\n# Route for Polestar-related queries (blocked or redirected)\npolestar = Route(\n    name=\"polestar\",\n    utterances=[\n        \"What's the range of the Polestar 2?\",\n        \"Is Polestar a good alternative to other EVs?\",\n        \"How does Polestar compare to other EVs?\",\n        \"Can I sell my Polestar?\",\n        \"How much is my Polestar worth?\",\n        \"What is the resale value of my Polestar?\",\n        \"How much can I get for my Polestar?\",\n        \"How much can I sell my Polestar for?\",\n    ],\n)\n\n# Route for Rivian-related queries (blocked or redirected)\nrivian = Route(\n    name=\"rivian\",\n    utterances=[\n        \"Tell me about the Rivian R1T.\",\n        \"How does Rivian's off-road capability compare to other EVs?\",\n        \"Is Rivian's charging network better than other EVs?\",\n        \"Can I sell my Rivian?\",\n        \"How much is my Rivian worth?\",\n        \"What is the resale value of my Rivian?\",\n        \"How much can I get for my Rivian?\",\n        \"How much can I sell my Rivian for?\",\n    ],\n)\n\n# Combine all routes\nroutes = [byd, tesla, polestar, rivian]\n```\n\n----------------------------------------\n\nTITLE: Evaluating Semantic Router Accuracy in Python\nDESCRIPTION: This snippet evaluates the accuracy of the trained semantic router using the evaluate method. It prints the accuracy as a percentage, providing a measure of the model's performance.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naccuracy = rl.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Route Classification\nDESCRIPTION: Tests the RouteLayer with a weather-related query to verify correct classification. The system should identify this query as belonging to the chitchat route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Route Detection\nDESCRIPTION: Tests the RouteLayer with a chitchat example to confirm that it correctly identifies and routes the query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter classification\nDESCRIPTION: Tests the router with a politics-related query, showing the output format.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsr(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Creating Desynchronized State\nDESCRIPTION: Demonstrates how to intentionally create a desynchronized state by deleting the route layer and reinitializing with only one route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndel rl\n\nrl = SemanticRouter(encoder=encoder, routes=[politics], index=pc_index)\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with Chitchat Query\nDESCRIPTION: Demonstrates using the SemanticRouter to classify a casual conversation query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Dense Encoder\nDESCRIPTION: Sets up the OpenAI dense encoder using the 'text-embedding-3-small' model with a score threshold of 0.3. This encoder will be used to capture semantic meaning in queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter your OpenAI API key: \"\n)\n# dense encoder for semantic meaning\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\", score_threshold=0.3)\n```\n\n----------------------------------------\n\nTITLE: Generating Schemas for OpenAI Semantic Router in Python\nDESCRIPTION: This snippet uses the OpenAI semantic router to generate schemas for the time-related functions. These schemas will be used to define the router's capabilities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Generate schemas for all functions\nfrom semantic_router.llms.openai import get_schemas_openai\n\nschemas = get_schemas_openai(functions)\n```\n\n----------------------------------------\n\nTITLE: Filtering routes in SemanticRouter classification\nDESCRIPTION: Shows how to use the route_filter parameter to restrict classification to only specific routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsr(\"don't you love politics?\", route_filter=[\"chitchat\"])\n```\n\n----------------------------------------\n\nTITLE: Testing Router Performance\nDESCRIPTION: Testing the router with sample utterances and evaluating route assignments\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    (\"Tell me about BYD's Blade Battery.\", \"byd\"),\n    (\"Does the Tesla Model 3 have better range?\", \"tesla\"),\n    (\"What are the key features of the Polestar 2?\", \"polestar\"),\n    (\"Is Rivian's R1T better for off-roading?\", \"rivian\"),\n]\n\n# unpack the test data\nX, y = zip(*test_data)\n```\n\n----------------------------------------\n\nTITLE: Testing Time Conversion Function in Multi-Function Route\nDESCRIPTION: This snippet tests the convert_time function within the multi-function route by converting time from Dubai to Tokyo.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\"What is 23:02 Dubai time in Tokyo time? Please and thank you.\")\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Creating a SemanticRouter instance\nDESCRIPTION: Initializes a SemanticRouter with the encoder and routes defined earlier.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nsr = SemanticRouter(encoder=encoder, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Initializing a LangChain Conversational Agent\nDESCRIPTION: Sets up a conversational LangChain agent with OpenAI's GPT-3.5 Turbo model, conversation memory, and a custom system message that defines the agent's personality as a helpful yet sarcastic personal trainer.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain_openai import ChatOpenAI\nfrom langchain.memory import ConversationBufferWindowMemory\n\nllm = ChatOpenAI(model=\"gpt-3.5-turbo-1106\")\n\nmemory1 = ConversationBufferWindowMemory(\n    memory_key=\"chat_history\", k=5, return_messages=True, output_key=\"output\"\n)\nmemory2 = ConversationBufferWindowMemory(\n    memory_key=\"chat_history\", k=5, return_messages=True, output_key=\"output\"\n)\n\nagent = initialize_agent(\n    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\n    tools=[],\n    llm=llm,\n    max_iterations=3,\n    early_stopping_method=\"generate\",\n    memory=memory1,\n)\n\n# update the system prompt\nsystem_message = \"\"\"You are a helpful personal trainer working to help users on\ntheir health and fitness journey. Although you are lovely and helpful, you are\nrather sarcastic and witty. So you must always remember to joke with the user.\n\nAlongside your time , you are a noble British gentleman, so you must always act with the\nutmost candor and speak in a way worthy of your status.\n\nFinally, remember to read the SYSTEM NOTES provided with user queries, they provide\nadditional useful information.\"\"\"\n\nnew_prompt = agent.agent.create_prompt(system_message=system_message, tools=[])\nagent.agent.llm_chain.prompt = new_prompt\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Route for Time Queries\nDESCRIPTION: Defines a function to get the current time in a specific timezone, creates a schema for it, and adds it as a dynamic route to the RouteLayer.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.llms.openai import get_schemas_openai\n\nschemas = get_schemas_openai([get_time])\nschemas\n```\n\nLANGUAGE: python\nCODE:\n```\ntime_route = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what is the time in new york city?\",\n        \"what is the time in london?\",\n        \"I live in Rome, what time is it?\",\n    ],\n    function_schemas=schemas,\n)\n\nrl.add(time_route)\n```\n\n----------------------------------------\n\nTITLE: Query and Manage Routes\nDESCRIPTION: Demonstrates various operations including querying routes, deleting routes, and retrieving route information\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# List route names\nrl.list_route_names()\n\n# Check index length\nlen(rl.index)\n\n# Get route records\nrl.index._get_route_ids(route_name=\"politics\")\n\n# Query routes\nrl(\"I like voting. What do you think about the president?\")\nrl(\"how's the weather today?\").name\nrl(\"where are you?\").name\n\n# Delete routes\nrl.delete(route_name=\"chitchat\")\ntime.sleep(1)\nlen(rl.index)\n\n# Get all routes\nrl.index.get_routes()\n\n# Describe index\nrl.index.describe()\n```\n\n----------------------------------------\n\nTITLE: Routing a Weather-related Query\nDESCRIPTION: Routes a query about weather and returns the matched route name. The router should classify this as belonging to the 'chitchat' route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Initializing Aurelio Sparse Encoder\nDESCRIPTION: Setup of Aurelio's sparse encoder for term matching capabilities\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders.aurelio import AurelioSparseEncoder\n\nos.environ[\"AURELIO_API_KEY\"] = os.getenv(\"AURELIO_API_KEY\") or getpass(\n    \"Enter your Aurelio API key: \"\n)\n# sparse encoder for term matching\nsparse_encoder = AurelioSparseEncoder(name=\"bm25\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Semantic Router Accuracy with Default Thresholds in Python\nDESCRIPTION: This snippet demonstrates how to evaluate the accuracy of a semantic router using default thresholds. It prints the accuracy as a percentage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\naccuracy = router.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Initializing the Pinecone index for hybrid search\nDESCRIPTION: Creates a Pinecone index for storing both sparse and dense embeddings. This requires a Pinecone API key and configures a new index called 'hybrid-test' with 1536 dimensions using the dotproduct similarity metric.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index import PineconeIndex\n\nos.environ[\"PINECONE_API_KEY\"] = os.getenv(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API Key: \"\n)\n\nindex = PineconeIndex(\n    index_name=\"hybrid-test\",\n    dimensions=1536,\n    metric=\"dotproduct\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Route Thresholds\nDESCRIPTION: Displays the current default thresholds for each route in the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = rl.get_thresholds()\nprint(\"Default route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Checking Current Index Size Before Deletion\nDESCRIPTION: Retrieves the number of items in the index before performing a route deletion operation. This provides a baseline for comparison.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Creating Routes for a Chatbot\nDESCRIPTION: Defines two example routes for a chatbot: one to identify political conversations and another for chitchat. Each route contains example utterances that help classify incoming messages.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Non-Dynamic Route in Python\nDESCRIPTION: This code tests the chitchat route by sending a greeting to the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\"Hello bot, how are you today?\")\nresponse\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with a Chitchat Query\nDESCRIPTION: Tests the semantic router with a casual conversation query to demonstrate classification to a different route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Reconnecting to Existing Pinecone Index\nDESCRIPTION: Reconnects to the previously created Pinecone index using the same index name and namespace.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nindex = PineconeIndex(index_name=\"index\", namespace=\"namespace\")\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings for Documents\nDESCRIPTION: Calls the encoder with the documents list to generate embeddings. The truncate parameter is set to True to handle documents that exceed the model's token limit.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nencoder(docs=docs, truncate=True)\n```\n\n----------------------------------------\n\nTITLE: Handling unrelated queries in SemanticRouter\nDESCRIPTION: Demonstrates how the router returns None when a query doesn't match any defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsr(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the Graph\nDESCRIPTION: Creates the semantic graph and tests it with a sample query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsemantic_graph = Graph(name=\"Semantic Graph\", nodes=(Check, CheckScam, Respond))\n\nresult = await semantic_graph.run(\n    start_node=Check(),\n    state=graph_state(query=\"What is the price of a BYD?\", response=\"\")\n)\n\nprint(\"Response: \", result.state.response)\nprint(\"Query: \", result.state.query)\n```\n\n----------------------------------------\n\nTITLE: Checking Sparse Index Size\nDESCRIPTION: Displays the number of sparse vector records in the index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlen(router.index.sparse_index)\n```\n\n----------------------------------------\n\nTITLE: Loading and Filtering Image Dataset for Classification\nDESCRIPTION: Loads a Shrek detection dataset and filters it to extract only Shrek images that will be used as utterances for the route definition.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\nimages = load_dataset(\"aurelio-ai/shrek-detection\")\nshrek_entries = filter(\n    lambda entry: entry[\"is_shrek\"], images[\"train\"]\n)  # We only want Shrek images for our route\nshrek_images = list(map(lambda entry: entry[\"image\"], shrek_entries))\nshrek_images\n```\n\n----------------------------------------\n\nTITLE: Creating a Hybrid Local Index\nDESCRIPTION: Initializes a HybridLocalIndex to support both sparse and dense encodings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.index.hybrid_local import HybridLocalIndex\n\nindex = HybridLocalIndex()\n```\n\n----------------------------------------\n\nTITLE: Testing Route with Chitchat Query\nDESCRIPTION: Tests the router with a casual weather question to demonstrate routing to the 'chitchat' category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Testing the router with an unmatched query\nDESCRIPTION: Tests the router with a query about Llama 2 that doesn't match any defined routes. This demonstrates how the router handles inputs that fall below the similarity threshold for all routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Routing an Unrelated Query\nDESCRIPTION: Routes a query about LLama 2 that doesn't clearly fit into existing routes and returns the best match route name.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Evaluating Router Performance\nDESCRIPTION: Calculates and displays the accuracy of the trained router model.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\naccuracy = second_router.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Checking Default Route Thresholds\nDESCRIPTION: Retrieves and displays the default similarity thresholds for each route in the hybrid router. These thresholds determine when a query is considered a match for a particular route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = router.get_thresholds()\nprint(\"Default route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Initializing Jina Encoder\nDESCRIPTION: Sets up the JinaEncoder with the 'jina-embeddings-v3' model and API key authentication.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import JinaEncoder\n\nos.environ[\"JINA_AI_API_KEY\"] = os.getenv(\"JINA_AI_API_KEY\") or getpass(\n    \"Enter Jina API Key: \"\n)\n\nencoder = JinaEncoder(\n    name=\"jina-embeddings-v3\",\n    score_threshold=0.4,\n    api_key=os.environ[\"JINA_AI_API_KEY\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Testing the Encoder with Sample Text\nDESCRIPTION: Demonstrates how to use the encoder to convert a simple text string into an embedding vector.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nencoder([\"hey\"])\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with Chitchat Query\nDESCRIPTION: Tests the hybrid router with a query related to chitchat/weather.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Route\nDESCRIPTION: Demonstrates how to delete a specific route (chitchat) from the SemanticRouter and waits for the deletion to take effect in the Pinecone index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nrl.delete(route_name=\"chitchat\")\ntime.sleep(3)\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Testing Time Difference Function in Multi-Function Route in Python\nDESCRIPTION: This code tests the get_time_difference function in the multi-function route by asking for the time difference between Los Angeles and Istanbul.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\n    \"What is the time difference between Los Angeles and Istanbul?\"\n)\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Defining a Route for Shrek Image Classification\nDESCRIPTION: Creates a Route object with a collection of Shrek images as utterances. This route will be used to identify incoming images that contain Shrek.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\nshrek = Route(name=\"shrek\", utterances=shrek_images)\n\nroutes = [shrek]\n```\n\n----------------------------------------\n\nTITLE: Getting Remote Sync Strategy\nDESCRIPTION: Retrieves the synchronization strategy for syncing from remote to local, which takes remote as the source of truth.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_sync_strategy(\"remote\")\n```\n\n----------------------------------------\n\nTITLE: Time Function Example Usage\nDESCRIPTION: Example of calling the get_time function with a specific timezone.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nget_time(\"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFaceEncoder for Semantic Router\nDESCRIPTION: This code initializes the HuggingFaceEncoder, which is used for encoding text in the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Displaying Encoder Object Information\nDESCRIPTION: Returns the encoder object to display its information, useful for verification and debugging purposes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nencoder\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Dense Encoder\nDESCRIPTION: Sets up the OpenAI API key and initializes the OpenAIEncoder with 'text-embedding-3-small' model and a score threshold of 0.3.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\", score_threshold=0.3)\n```\n\n----------------------------------------\n\nTITLE: Creating a HybridRouter with local-to-remote auto-sync\nDESCRIPTION: Initializes a HybridRouter with auto_sync='local', which will automatically synchronize the local routes to the remote Pinecone index. This overwrites the remote index with the local route definitions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrouter = HybridRouter(\n    encoder=encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    index=index,\n    auto_sync=\"local\",\n)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAI Schemas for Functions in Python\nDESCRIPTION: This snippet uses the get_schemas_openai function to generate schemas for the defined functions, which will be used in the Semantic Router configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.llms.openai import get_schemas_openai\n\nschemas = get_schemas_openai(functions)\nschemas\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Pinecone Support\nDESCRIPTION: Installs the semantic-router package with local and pinecone extras, as well as the datasets package for loading sample route data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \\\n    \"semantic-router[local, pinecone]==0.0.22\" \\\n    datasets==2.17.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Routes for Unrelated Query\nDESCRIPTION: Demonstrates calling retrieve_multiple_routes with a query that doesn't match any defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsr.retrieve_multiple_routes(\"I'm interested in learning about llama 3\")\n```\n\n----------------------------------------\n\nTITLE: Encoding sample texts with MistralEncoder\nDESCRIPTION: Demonstrates how to use the encoder to generate embeddings for a list of sample texts.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = encoder(\n    [\n        \"I'm interested in learning about llama 2\",\n        \"Don't you love politics?\",\n        \"How's the weather today?\",\n        \"I love the politics\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying synchronization after auto-sync\nDESCRIPTION: Checks if the router is now synchronized after enabling auto_sync='local'. This confirms that the local routes have been successfully synced to the remote Pinecone index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrouter.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Power Function Schema Definition\nDESCRIPTION: Function schema for raising a number to a power, including type hints and documentation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef power(base: float, exponent: float) -> float:\n    \"\"\"Raise base to the power of exponent.\n\n    Args:\n        base (float): The base number.\n        exponent (float): The exponent to which the base is raised.\n\n    Returns:\n        float: The result of base raised to the power of exponent.\n    \"\"\"\n    return base ** exponent\n```\n\n----------------------------------------\n\nTITLE: Initialize OpenAI Encoder\nDESCRIPTION: Sets up OpenAI API credentials and initializes the encoder for generating embeddings\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Pinecone support\nDESCRIPTION: Installs the Semantic Router package with Pinecone integration using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Getting Index Description\nDESCRIPTION: Retrieves metadata and structural information about the vector index. This provides insights into how the routes and their utterances are organized in the vector space.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrl.index.describe()\n```\n\n----------------------------------------\n\nTITLE: Configuring synchronization strategy in SemanticRouter\nDESCRIPTION: Demonstrates how to initialize a SemanticRouter with a specific synchronization strategy for handling local and remote route indexes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Example: Initialize with synchronization strategy\nsemantic_router = SemanticRouter(\n    encoder=encoder,\n    routes=routes,\n    index=PineconeIndex(...),\n    auto_sync=\"local\"  # Local routes will be used to update the remote index\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Chitchat Route for Semantic Router\nDESCRIPTION: Creates a Route object for casual conversation (chitchat) queries. It includes example utterances and combines both routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Routes\nDESCRIPTION: Setup of dynamic routes including time queries and chitchat functionality with function calling capabilities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom semantic_router import Route\nfrom semantic_router.utils.function_call import get_schema\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n\n\ntime_schema = get_schema(get_time)\ntime = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what is the time in new york city?\",\n        \"what is the time in london?\",\n        \"I live in Rome, what time is it?\",\n    ],\n    function_schemas=[time_schema],\n)\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\" \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat, time]\n```\n\n----------------------------------------\n\nTITLE: Listing Indexes Asynchronously\nDESCRIPTION: Demonstrates how to asynchronously list all Pinecone indexes associated with the account. This is useful for verifying available indexes before operations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nawait pc_index._async_list_indexes()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote Utterances\nDESCRIPTION: Gets the list of utterances from the remote Pinecone index for comparison with local utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nremote_utterances = rl.index.get_utterances()\nremote_utterances\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFace Encoder\nDESCRIPTION: Creates an encoder instance using the HuggingFaceEncoder, which will be used to convert text into vector embeddings for semantic matching.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Pinecone Local Docker Container\nDESCRIPTION: These commands stop and remove the Pinecone Local Docker container and associated resources.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker stop pinecone-local\ndocker rm pinecone-local\n```\n\n----------------------------------------\n\nTITLE: Creating a RouteLayer for Text Classification\nDESCRIPTION: Initializes a RouteLayer using the encoder and defined routes. The RouteLayer handles the classification of incoming text to the appropriate routes based on semantic similarity.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import RouteLayer\n\nrl = RouteLayer(encoder=encoder, routes=routes)\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-router with ViT Dependencies\nDESCRIPTION: Installs semantic-router package with the [local] flag to include all dependencies needed for the VitEncoder functionality.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[local]==0.0.23\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Politics Route for Semantic Router\nDESCRIPTION: Creates a Route object for politics-related queries. It includes example utterances that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Investigating Synchronization Differences in Python\nDESCRIPTION: This snippet shows how to use the get_utterance_diff() method to obtain a readable diff of the synchronization differences between local and remote instances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndiff = sr.get_utterance_diff()\n```\n\n----------------------------------------\n\nTITLE: Converting Retrieved Routes to Dictionary Format\nDESCRIPTION: Transforms the retrieved routes into a dictionary format where keys are route names and values are lists of utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nroutes_dict = {}\nfor route, utterance in index.get_routes():\n    if route not in routes_dict:\n        routes_dict[route] = []\n    routes_dict[route].append(utterance)\n```\n\n----------------------------------------\n\nTITLE: Saving Semantic Router to JSON File in Python\nDESCRIPTION: Shows how to save the current state of the Semantic Router to a JSON file for later use or sharing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrouter.to_json(\"router.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining a 'politics' route with example utterances\nDESCRIPTION: Creates a Route object for the 'politics' category with example phrases that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Training Semantic Router with Fit Method\nDESCRIPTION: Initializes training of the semantic router using the fit method with training data X and labels y.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsr.fit(X=X, y=y)\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-router with Mistral support\nDESCRIPTION: Installs the semantic-router library version 0.1.8 which includes support for the Mistral encoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router==0.1.8\n```\n\n----------------------------------------\n\nTITLE: Defining a chitchat route with example utterances\nDESCRIPTION: Creates a 'chitchat' route with casual conversation examples and collects both routes into a list for the router. These examples represent everyday small talk to distinguish from political content.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Checking Index Size\nDESCRIPTION: Returns the number of items in the vector index, which corresponds to the number of example utterances stored across all routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Checking Synchronization in Python\nDESCRIPTION: This snippet shows how to check if the local and remote instances are synchronized using the is_synced() method of the SemanticRouter object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsr.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Loading Semantic Router from JSON File in Python\nDESCRIPTION: Shows how to initialize a new Semantic Router instance from a previously saved JSON file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrouter = SemanticRouter.from_json(\"router.json\")\n```\n\n----------------------------------------\n\nTITLE: Testing Time Function with Phuket\nDESCRIPTION: Tests the get_time function with a query about Phuket's time, showing how the model handles locations in the same timezone as previously seen locations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nout = rl(\"what's the time in Phuket right now?\")\nprint(out)\nget_time(**out.function_call[0])\n```\n\n----------------------------------------\n\nTITLE: Displaying Time Schema\nDESCRIPTION: Outputs the function schema generated for the get_time function, which includes parameter details and return type information.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntime_schema\n```\n\n----------------------------------------\n\nTITLE: Initializing Hybrid Router Configuration\nDESCRIPTION: Sets up the hybrid router with encoder configurations and route definitions for handling different types of queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nroutes = [scam, other]\nsecond_router = HybridRouter(\n    encoder=encoder, sparse_encoder=sparse_encoder, routes=routes, auto_sync=\"local\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Pinecone Support\nDESCRIPTION: Installs the semantic-router package with Pinecone support using pip. This is required before using the library's functionality.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Utterance Diff\nDESCRIPTION: Creates a structured difference report using the UtteranceDiff class to compare local and remote utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.schema import UtteranceDiff\n\ndiff = UtteranceDiff.from_utterances(\n    local_utterances=local_utterances, remote_utterances=remote_utterances\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Thresholds in Python\nDESCRIPTION: This code retrieves and prints the updated route thresholds after training the semantic router. It demonstrates how to access the new threshold values.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nroute_thresholds = rl.get_thresholds()\nprint(\"Updated route thresholds:\", route_thresholds)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Loaded Semantic Router Attributes in Python\nDESCRIPTION: Displays the key attributes of the loaded Semantic Router to verify correct initialization from the JSON file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    f\"\"\"{router.encoder.type=}\n{router.encoder.name=}\n{router.routes=}\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Routes List in Python\nDESCRIPTION: This snippet creates a list of routes including politics, chitchat, and the multi-function route for timezone management.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nroutes = [politics, chitchat, multi_function_route]\n```\n\n----------------------------------------\n\nTITLE: Viewing route differences between local and remote\nDESCRIPTION: Displays the differences between the routes in the local HybridRouter and the remote Pinecone index. This helps identify which utterances need to be synced to achieve consistency.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrouter.get_utterance_diff()\n```\n\n----------------------------------------\n\nTITLE: Initialize Docker Compose for Postgres pgvector\nDESCRIPTION: Starts a Postgres instance with pgvector extension using Docker Compose\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/postgres/postgres.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!echo \"Running Docker Compose to start Postgres instance with pgvector extension\"\n!docker compose -f ./docs/indexes/postgres/postgres.compose.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Listing Route Names\nDESCRIPTION: Displays all available route names in the SemanticRouter. This helps verify that the routes have been properly initialized.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrl.list_route_names()\n```\n\n----------------------------------------\n\nTITLE: Testing the router with a weather-related query\nDESCRIPTION: Tests the hybrid router with a casual conversation about weather to see if it correctly identifies the appropriate route. This demonstrates how the router handles an input that should match the chitchat route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"it's raining cats and dogs today\")\n```\n\n----------------------------------------\n\nTITLE: Getting Standard Merge Strategy\nDESCRIPTION: Retrieves the standard merge strategy that combines both local and remote data, prioritizing local for conflicting items.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_sync_strategy(\"merge\")\n```\n\n----------------------------------------\n\nTITLE: Creating Embeddings Asynchronously\nDESCRIPTION: Demonstrates how to generate embeddings asynchronously using the encoder's acall method. This is more efficient for processing multiple documents.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait encoder.acall(docs=[\"test\", \"test 2\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Politics Route\nDESCRIPTION: Creates a Route object for politics-related content with example utterances for classification\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Politics and Chitchat\nDESCRIPTION: Creates Route objects for politics and chitchat categories with example utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Sync Method\nDESCRIPTION: Demonstrates the simplified sync method that combines strategy selection and execution in one call.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nrl.sync(sync_mode=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Classifying Political Text Query\nDESCRIPTION: Demonstrates routing by classifying a political question. The system returns the route name that best matches the semantic content of the input text.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\").name\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites\nDESCRIPTION: Installation commands for required packages semantic-router and pydantic-ai\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install -qU \\\n#    semantic-router>=0.1.6 \\\n#    pydantic-ai>=0.0.42\n```\n\n----------------------------------------\n\nTITLE: Loading Layer Configuration from File\nDESCRIPTION: Loads a previously saved layer configuration from a JSON file, allowing reuse of routing configurations across different sessions or applications.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.layer import LayerConfig\n\nlayer_config = LayerConfig.from_file(\"output/layer_config.json\")\n```\n\n----------------------------------------\n\nTITLE: Testing Unrelated Query Classification\nDESCRIPTION: Tests the RouteLayer with an unrelated query about LLM models. This should return None as it doesn't match any of the defined routes with sufficient similarity.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrl(\"How does llama model work?\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Route from SemanticRouter\nDESCRIPTION: This code demonstrates how to delete a specific route from the SemanticRouter instance.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nrouter.delete(route_name=\"politics\")\ntime.sleep(1)\nlen(router.index)\n```\n\n----------------------------------------\n\nTITLE: Getting Available Routes\nDESCRIPTION: Retrieves all available routes from the index after deletion. This confirms which routes remain in the system after the deletion operation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nrl.index.get_routes()\n```\n\n----------------------------------------\n\nTITLE: Retrieving utterances from the Pinecone index\nDESCRIPTION: Gets all utterances stored in the remote Pinecone index to verify the current state of the remote storage. This helps confirm if any utterances exist in the index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrouter.index.get_utterances()\n```\n\n----------------------------------------\n\nTITLE: Defining a Chitchat Route with Example Utterances\nDESCRIPTION: Creates a second Route object for casual conversation (chitchat) with example utterances and combines both routes into a list for the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Initializing embedding model for SemanticRouter\nDESCRIPTION: Sets up the Cohere encoder by configuring the API key and initializing the encoder object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder\n\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n# os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n#     \"Enter OpenAI API Key: \"\n# )\n\nencoder = CohereEncoder()\n# encoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Getting Local Sync Strategy\nDESCRIPTION: Retrieves the synchronization strategy for syncing from local to remote, which takes local as the source of truth.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_sync_strategy(\"local\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Route and Checking Index Size\nDESCRIPTION: Deletes the 'chitchat' route from the router and checks the updated size of the index to confirm the deletion.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl.delete(\"chitchat\")\nlen(local_rl.index.index)\n```\n\n----------------------------------------\n\nTITLE: Initializing UtteranceDiff Object in Python\nDESCRIPTION: This snippet demonstrates how to initialize an UtteranceDiff object to further investigate and resolve synchronization differences between local and remote instances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlocal_utterances = sr.to_config().to_utterances()\nremote_utterances = sr.index.get_utterances()\n\ndiff = UtteranceDiff.from_utterances(\n    local_utterances=local_utterances, remote_utterances=remote_utterances\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Router Class Hierarchy with Mermaid\nDESCRIPTION: A class diagram showing the hierarchy of router classes in Semantic Router, including BaseRouter and its implementations SemanticRouter and HybridRouter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/concepts/architecture.md#2025-04-17_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class BaseRouter {\n        +__call__(query) -> RouteChoice\n        +acall(query) -> RouteChoice\n        +add(routes)\n        +route(query) -> RouteChoice\n    }\n    BaseRouter <|-- SemanticRouter\n    BaseRouter <|-- HybridRouter\n```\n\n----------------------------------------\n\nTITLE: Loading Route Dataset from Hugging Face\nDESCRIPTION: Downloads a dataset of generic routes from Hugging Face's datasets repository for demonstration purposes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datasets import load_dataset\n\ndata = load_dataset(\"aurelio-ai/generic-routes\", split=\"train\")\ndata\n```\n\n----------------------------------------\n\nTITLE: Defining Politics Route\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Route Filtering\nDESCRIPTION: Examples of using the route_filter parameter to restrict classification to specific routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\", route_filter=[\"chitchat\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\", route_filter=[\"politics\"])\n```\n\n----------------------------------------\n\nTITLE: Testing Politics Route Classification\nDESCRIPTION: Tests the RouteLayer with a politics-related query to verify correct classification. The system should identify this query as belonging to the politics route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pinecone API Key\nDESCRIPTION: Configures the Pinecone API key from environment variables or user input. This key is required to authenticate with the Pinecone vector database service.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.index.pinecone import PineconeIndex\n\n# get at app.pinecone.io\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\n```\n\n----------------------------------------\n\nTITLE: Vector Similarity Comparison\nDESCRIPTION: Comparison of vector similarities between different queries using numpy operations\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom numpy.linalg import norm\n\nvectors = encoder(\n    docs=[\n        \"can I sell my Tesla?\",\n        \"can I sell my Polestar?\",\n        \"can I sell my BYD?\",\n        \"can I sell my Rivian?\",\n    ]\n)\n\n# normalize our vectors\nvector_norms = norm(vectors, axis=1, keepdims=True)\nnormalized_vectors = vectors / vector_norms\n\n# calculate the dot product similarity between the vectors\ndot_products = np.dot(normalized_vectors, normalized_vectors.T)\ndot_products\n```\n\n----------------------------------------\n\nTITLE: Comparing Within-Brand Query Similarities with Dense Embeddings\nDESCRIPTION: Shows the similarity between different queries about the same brand using dense embeddings, highlighting that some inter-brand similarities can be stronger than intra-brand similarities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvectors = encoder(\n    docs=[\n        \"Tell me about the BYD Seal.\",\n        \"How does BYD's Blade Battery work?\",\n        \"Is the BYD Atto 3 a good EV?\",\n        \"Can I sell my BYD?\",\n        \"How much can I sell my BYD for?\",\n    ]\n)\n\n# normalize our vectors\nvector_norms = norm(vectors, axis=1, keepdims=True)\nnormalized_vectors = vectors / vector_norms\n\n# calculate the dot product similarity between the vectors\ndot_products = np.dot(normalized_vectors, normalized_vectors.T)\ndot_products\n```\n\n----------------------------------------\n\nTITLE: Identifying Differences in Utterances with Semantic Router in Python\nDESCRIPTION: This snippet shows how to use the diff.get_tag() method to identify utterances that exist in both local and remote instances of a Semantic Router project.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_tag(\" \")\n```\n\n----------------------------------------\n\nTITLE: Filtering Utterances by Diff Tag in Python\nDESCRIPTION: This snippet shows how to filter utterances in the UtteranceDiff object based on their diff tags, which indicate whether they exist only in remote, only in local, or in both instances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/sync.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# all utterances that exist only in remote\ndiff.get_tag(\"+\")\n\n# all utterances that exist only in local\ndiff.get_tag(\"-\")\n```\n\n----------------------------------------\n\nTITLE: Encoding Text Samples with Jina Encoder\nDESCRIPTION: Demonstrates encoding multiple text samples using the Jina encoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresult = encoder(\n    [\n        \"I'm interested in learning about llama 2\",\n        \"Don't you love politics?\",\n        \"How's the weather today?\",\n        \"I love the politics\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating BLEU Scores for Translation Performance Evaluation in Python\nDESCRIPTION: This code snippet demonstrates how to compute BLEU scores for evaluating translation performance. It uses the sacrebleu library, which is a popular tool for machine translation evaluation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhttps://github.com/mjpost/sacrebleu\n```\n\n----------------------------------------\n\nTITLE: Downloading Mistral 7B Instruct GGUF Model\nDESCRIPTION: Downloads the 4-bit quantized version of Mistral 7B Instruct model in GGUF format from Hugging Face, which balances performance and hardware requirements.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n! curl -L \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q4_0.gguf?download=true\" -o ./mistral-7b-instruct-v0.2.Q4_0.gguf\n! ls mistral-7b-instruct-v0.2.Q4_0.gguf\n```\n\n----------------------------------------\n\nTITLE: Getting OpenAI Function Schemas\nDESCRIPTION: Using the get_schemas_openai helper to generate function schemas for OpenAI.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.llms.openai import get_schemas_openai\n\nschemas = get_schemas_openai([get_time])\nschemas\n```\n\n----------------------------------------\n\nTITLE: Displaying Route Dictionary\nDESCRIPTION: Shows the contents of the routes dictionary created from the Pinecone index data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nroutes_dict\n```\n\n----------------------------------------\n\nTITLE: Testing RouteLayer with Weather Expression\nDESCRIPTION: Tests the RouteLayer with a weather-related idiomatic expression.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nrl(\"it's raining cats and dogs today\").name\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Route from Dataset\nDESCRIPTION: Retrieves and displays the first route from the loaded dataset to show its structure.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata[0]\n```\n\n----------------------------------------\n\nTITLE: Describing the Index\nDESCRIPTION: Calls the describe method on the local index to get information about its current state and contents.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl.index.describe()\n```\n\n----------------------------------------\n\nTITLE: Verifying Utterance Differences After Sync\nDESCRIPTION: Examines the utterance differences after synchronization to confirm the changes made.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nrl.get_utterance_diff()\n```\n\n----------------------------------------\n\nTITLE: Creating Routes for Semantic Router\nDESCRIPTION: Defines routes for different categories of conversations: politics and chitchat. Each route contains example utterances that help the router identify the category of incoming messages.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing Function Call in Python\nDESCRIPTION: A simple test call to the get_time function with a specific timezone parameter ('America/New_York') to verify it works properly.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nget_time(\"America/New_York\")\n```\n\n----------------------------------------\n\nTITLE: Testing Route Classification\nDESCRIPTION: Multiple examples of using the router for text classification\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"tell me about your political opinions?\")\n\nrl(\"how's the weather today?\")\n\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Defining Route Training Utterances\nDESCRIPTION: Example utterances for training a dynamic route to handle power calculation queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"what is x to the power of y?\"\n\"what is 9 to the power of 4?\"\n\"calculate the result of base x and exponent y\"\n\"calculate the result of base 10 and exponent 3\"\n\"return x to the power of y\"\n```\n\n----------------------------------------\n\nTITLE: Checking Embedding Dimensions\nDESCRIPTION: Retrieves the dimensionality of the encoded vectors from the RouteLayer index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl.index.dimensions\n```\n\n----------------------------------------\n\nTITLE: Evaluating Model Accuracy\nDESCRIPTION: Evaluates the trained model's performance by calculating accuracy on the dataset and displaying the result as a percentage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naccuracy = sr.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy*100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Dimensions\nDESCRIPTION: Displays the dimensionality of the vectors used by the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl.index.dimensions\n```\n\n----------------------------------------\n\nTITLE: Rechecking Synchronization Status\nDESCRIPTION: Checks the synchronization status again after creating a desynchronized state.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Checking Index Size\nDESCRIPTION: Checks the current size of the local index by getting the length of the index object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlen(local_rl.index.index)\n```\n\n----------------------------------------\n\nTITLE: Translation Direction Reversal Results\nDESCRIPTION: Table showing BLEU scores when reversing translation direction ratios for German-English and English-German pairs\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nRev ratio Deu-Eng Head Tail Eng-Deu Head Tail\n0 / 8 37.37 37.37 26.49 26.49\n1 / 8 37.74 36.05 26.75 23.96\n2 / 8 37.29 36.79 26.89 24.66\n3 / 8 36.82 35.67 26.44 24.34\n4 / 8 36.60 35.18 26.23 22.17\n5 / 8 35.61 31.93 25.58 17.47\n6 / 8 30.49 20.71 22.42 8.73\n7 / 8 14.60 5.36 12.51 3.19\n8 / 8 3.42 3.42 3.10 3.10\n```\n\n----------------------------------------\n\nTITLE: Creating Larger Test Dataset\nDESCRIPTION: Defines a more comprehensive test dataset with examples for each route and some None routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    # politics\n    (\"What's your opinion on the current government?\", \"politics\"),\n    (\"Who do you think will win the next election?\", \"politics\"),\n    (\"What are your thoughts on the new policy?\", \"politics\"),\n    (\"How do you feel about the political situation?\", \"politics\"),\n    (\"Do you agree with the president's actions?\", \"politics\"),\n    (\"What's your stance on the political debate?\", \"politics\"),\n    (\"How do you see the future of our country?\", \"politics\"),\n    (\"What do you think about the opposition party?\", \"politics\"),\n    (\"Do you believe the government is doing enough?\", \"politics\"),\n    (\"What's your opinion on the political scandal?\", \"politics\"),\n    (\"Do you think the new law will make a difference?\", \"politics\"),\n    (\"What are your thoughts on the political reform?\", \"politics\"),\n    (\"Do you agree with the government's foreign policy?\", \"politics\"),\n    # chitchat\n    (\"What's the weather like?\", \"chitchat\"),\n    (\"It's a beautiful day today.\", \"chitchat\"),\n    (\"How's your day going?\", \"chitchat\"),\n    (\"It's raining cats and dogs.\", \"chitchat\"),\n    (\"Let's grab a coffee.\", \"chitchat\"),\n    (\"What's up?\", \"chitchat\"),\n    (\"It's a bit chilly today.\", \"chitchat\"),\n    (\"How's it going?\", \"chitchat\"),\n    (\"Nice weather we're having.\", \"chitchat\"),\n    (\"It's a bit windy today.\", \"chitchat\"),\n    (\"Let's go for a walk.\", \"chitchat\"),\n    (\"How's your week been?\", \"chitchat\"),\n    (\"It's quite sunny today.\", \"chitchat\"),\n    (\"How are you feeling?\", \"chitchat\"),\n    (\"It's a bit cloudy today.\", \"chitchat\"),\n    # mathematics\n    (\"What is the Pythagorean theorem?\", \"mathematics\"),\n    (\"Can you solve this quadratic equation?\", \"mathematics\"),\n    (\"What is the derivative of x squared?\", \"mathematics\"),\n    (\"Explain the concept of integration.\", \"mathematics\"),\n    (\"What is the area of a circle?\", \"mathematics\"),\n    (\"How do you calculate the volume of a sphere?\", \"mathematics\"),\n    (\"What is the difference between a vector and a scalar?\", \"mathematics\"),\n    (\"Explain the concept of a matrix.\", \"mathematics\"),\n    (\"What is the Fibonacci sequence?\", \"mathematics\"),\n    (\"How do you calculate permutations?\", \"mathematics\"),\n    (\"What is the concept of probability?\", \"mathematics\"),\n    (\"Explain the binomial theorem.\", \"mathematics\"),\n    (\"What is the difference between discrete and continuous data?\", \"mathematics\"),\n    (\"What is a complex number?\", \"mathematics\"),\n    (\"Explain the concept of limits.\", \"mathematics\"),\n    # biology\n    (\"What is photosynthesis?\", \"biology\"),\n    (\"Explain the process of cell division.\", \"biology\"),\n    (\"What is the function of mitochondria?\", \"biology\"),\n    (\"What is DNA?\", \"biology\"),\n    (\"What is the difference between prokaryotic and eukaryotic cells?\", \"biology\"),\n    (\"What is an ecosystem?\", \"biology\"),\n    (\"Explain the theory of evolution.\", \"biology\"),\n    (\"What is a species?\", \"biology\"),\n    (\"What is the role of enzymes?\", \"biology\"),\n    (\"What is the circulatory system?\", \"biology\"),\n    (\"Explain the process of respiration.\", \"biology\"),\n    (\"What is a gene?\", \"biology\"),\n    (\"What is the function of the nervous system?\", \"biology\"),\n    (\"What is homeostasis?\", \"biology\"),\n    (\"What is the difference between a virus and a bacteria?\", \"biology\"),\n    (\"What is the role of the immune system?\", \"biology\"),\n    # add some None routes to prevent excessively small thresholds\n    (\"What is the capital of France?\", None),\n    (\"how many people live in the US?\", None),\n    (\"when is the best time to visit Bali?\", None),\n    (\"how do I learn a language\", None),\n    (\"tell me an interesting fact\", None),\n    (\"what is the best programming language?\", None),\n    (\"I'm interested in learning about llama 2\", None),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nested Event Loops\nDESCRIPTION: Configures the environment for nested event loops and disables logfire config requirements.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport nest_asyncio\n\n# this is needed to allow nested event loops\nnest_asyncio.apply()\n\n# this is needed to ignore the no config error\nos.environ[\"LOGFIRE_IGNORE_NO_CONFIG\"] = \"1\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Pydantic AI Agent\nDESCRIPTION: Creates an AI agent instance using the GPT-4 mini model.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent(model=\"gpt-4o-mini\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Routes in Index\nDESCRIPTION: Gets a list of all routes currently stored in the index after the deletion operation. This helps verify which routes are still available for classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrl.index.get_routes()\n```\n\n----------------------------------------\n\nTITLE: Setting CMAKE Arguments for Metal Hardware Acceleration\nDESCRIPTION: Configures CMAKE_ARGS to enable Metal hardware acceleration for Apple silicon devices.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!CMAKE_ARGS=\"-DLLAMA_METAL=on\"\n```\n\n----------------------------------------\n\nTITLE: Single Route Vector Similarity\nDESCRIPTION: Comparison of vector similarities between utterances within a single route\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvectors = encoder(\n    docs=[\n        \"Tell me about the BYD Seal.\",\n        \"How does BYD's Blade Battery work?\",\n        \"Is the BYD Atto 3 a good EV?\",\n        \"Can I sell my BYD?\",\n        \"How much can I sell my BYD for?\",\n    ]\n)\n\n# normalize our vectors\nvector_norms = norm(vectors, axis=1, keepdims=True)\nnormalized_vectors = vectors / vector_norms\n\n# calculate the dot product similarity between the vectors\ndot_products = np.dot(normalized_vectors, normalized_vectors.T)\ndot_products\n```\n\n----------------------------------------\n\nTITLE: Filtering Shared Utterances\nDESCRIPTION: Filters the diff to show only utterances that exist in both local and remote instances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_tag(\" \")\n```\n\n----------------------------------------\n\nTITLE: Output for Politics Query Classification\nDESCRIPTION: Shows the RouteChoice object returned when classifying a politics-related query, containing the name of the matched route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n[Out]: RouteChoice(name='politics', function_call=None, similarity_score=None)\n```\n\n----------------------------------------\n\nTITLE: Defining a 'chitchat' route with example utterances\nDESCRIPTION: Creates a Route object for the 'chitchat' category with example phrases, and combines it with the 'politics' route into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Defining a politics route with example utterances\nDESCRIPTION: Creates a 'politics' route in semantic-router with example phrases that should trigger this route. Each utterance represents political discussion that should be routed to this category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Router Nodes\nDESCRIPTION: Defines the node classes for handling different routing scenarios and responses.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\nfrom __future__ import annotations\n\n@dataclass\nclass Respond(BaseNode[graph_state, None, str]):\n    async def run(self, ctx: GraphRunContext) -> End[str]:\n        ctx.state.response = agent.run_sync(user_prompt=ctx.state.query)\n        return End(ctx.state.response)\n\n@dataclass\nclass Check(BaseNode[graph_state, None, str]):\n    async def run(self, ctx: GraphRunContext) -> CheckScam | End[str]:\n        result = router(text=ctx.state.query)\n        if result.name == \"byd\":\n            return CheckScam()\n        else:\n            ctx.state.response = f\"We dont talk about {result.name} here\"\n            return End(ctx.state.response)\n\n@dataclass\nclass CheckScam(BaseNode[graph_state, None, str]):\n    async def run(self, ctx: GraphRunContext) -> Respond | End[str]:\n        result = second_router(text=ctx.state.query)\n        if result.name == \"other\":\n            return Respond()\n        else:\n            ctx.state.response = f\"We dont do {result.name}s here\"\n            return End(ctx.state.response)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library\nDESCRIPTION: Installs the semantic-router library and tzdata using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \\\n    \"semantic-router>=0.1.5\" \\\n    tzdata\n```\n\n----------------------------------------\n\nTITLE: Testing SemanticRouter with unrelated input in Python\nDESCRIPTION: Illustrates the SemanticRouter's behavior when given an input unrelated to defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2 mechanics\")\n```\n\n----------------------------------------\n\nTITLE: Cleanup Command\nDESCRIPTION: Command to remove the downloaded model file after usage.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrm ./mistral-7b-instruct-v0.2.Q4_0.gguf\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenAI API Key for Authentication\nDESCRIPTION: Configures the OpenAI API key from environment variables or by prompting the user to enter it, which is required for the OpenAI encoder to work.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\n\n# platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up for Index Reloading Demonstration\nDESCRIPTION: Deletes the route layer, index, and routes variables to demonstrate loading from a pre-existing Pinecone index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndel rl, index, routes\n```\n\n----------------------------------------\n\nTITLE: Testing Shrek Image Classification\nDESCRIPTION: Displays a Shrek test image and runs it through the RouteLayer to demonstrate positive classification of Shrek content.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndisplay(test_shrek)\nrl(test_shrek)\n```\n\n----------------------------------------\n\nTITLE: Defining System Prompt\nDESCRIPTION: Sets up a system prompt to guide the agent's behavior regarding discounts and negotiations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@agent.system_prompt\ndef how_to_respond() -> str:\n    return \"\"\"You are a helpful assistant designed to only respond to queries about BYD, \n    however if the user asks you for any form of discount or negotiation you tell them 'We dont do discounts here'.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-router with FastEmbed support in Python\nDESCRIPTION: Installs the semantic-router library with FastEmbed dependencies using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[fastembed]==0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Classifying an Unrelated Query\nDESCRIPTION: Demonstrates what happens when the SemanticRouter is given a query that doesn't match any defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsr(\"I'm interested in learning about llama 3\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with VoyageAI Support\nDESCRIPTION: Installs the semantic-router package with support for the voyage encoder, which was added in version 0.1.8.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router==0.1.8\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables for OpenAI API Key\nDESCRIPTION: Loads environment variables from a .env file. Contains a commented-out section that would set the OpenAI API key from the environment or prompt the user for it.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# load your .env file\nload_dotenv(\"../../semantic-router.env\")\n\n# os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n#    \"Enter OpenAI API Key: \"\n# )\n```\n\n----------------------------------------\n\nTITLE: Testing Encoder\nDESCRIPTION: Simple test of the encoder with a basic input\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nencoder(\"Hey\")\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router Instance in Python\nDESCRIPTION: This code creates an instance of the SemanticRouter with the specified encoder, routes, and auto-sync option set to 'local'.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl2 = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Getting Merge-Force-Remote Strategy\nDESCRIPTION: Retrieves the merge-force-remote strategy that merges both instances but gives priority to remote data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_sync_strategy(\"merge-force-remote\")\n```\n\n----------------------------------------\n\nTITLE: Defining Politics Route\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Training the Router Model\nDESCRIPTION: Fits the hybrid router model using the prepared training data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsecond_router.fit(X=X, y=y)\n```\n\n----------------------------------------\n\nTITLE: Library Installation\nDESCRIPTION: Installing required dependencies including tzdata and semantic-router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n!pip install tzdata\n!pip install -qU semantic-router>=0.1.5\n```\n\n----------------------------------------\n\nTITLE: Output for Unrelated Query Classification\nDESCRIPTION: Shows the RouteChoice object returned when no matching route is found, with all attributes set to None.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n[Out]: RouteChoice(name=None, function_call=None, similarity_score=None)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Qdrant Support\nDESCRIPTION: Installs the semantic-router package with Qdrant support using pip in a Jupyter notebook environment.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[qdrant]\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with an Unrelated Query\nDESCRIPTION: Tests the router with a query unrelated to any defined routes to demonstrate the return of None when no match is found.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router library\nDESCRIPTION: Installs the semantic-router library using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Dense Encoder\nDESCRIPTION: Setup of OpenAI's dense embedding model for semantic similarity analysis\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter your OpenAI API key: \"\n)\n# dense encoder for semantic meaning\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\", score_threshold=0.3)\n```\n\n----------------------------------------\n\nTITLE: Checking Embedding Dimensions in the Router\nDESCRIPTION: Verifies the dimensionality of the vector embeddings by accessing the index attribute of the router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl.index.dimensions\n```\n\n----------------------------------------\n\nTITLE: Checking OpenAI API Key in Environment\nDESCRIPTION: Shell command to echo the OpenAI API key from the environment variables to verify it has been set correctly.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# test to see OPENAI_API_KEY assigned\n!echo $OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Output for Unrelated Multiple Routes Retrieval\nDESCRIPTION: Shows the empty list returned when no matching routes are found with retrieve_multiple_routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/semantic-router.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n[Out]: []\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package with a minimum version requirement of 0.1.6 using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router>=0.1.6\n```\n\n----------------------------------------\n\nTITLE: Complete Migration Example from RouteLayer to SemanticRouter\nDESCRIPTION: A side-by-side comparison showing how to migrate a complete example from the old RouteLayer API to the new SemanticRouter API in v0.1.x.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Before (v0.0.x)\nfrom semantic_router import RouteLayer, Route\nfrom semantic_router.encoders import OpenAIEncoder\n\nroute = Route(name=\"example\", utterances=[\"sample utterance\"])\nlayer = RouteLayer(encoder=OpenAIEncoder())\nlayer.add(route)\nresult = layer(\"query text\")\n\n# After (v0.1.x)\nfrom semantic_router import Route\nfrom semantic_router.routers import SemanticRouter\nfrom semantic_router.encoders import OpenAIEncoder\n\nroute = Route(name=\"example\", utterances=[\"sample utterance\"])\nrouter = SemanticRouter(encoder=OpenAIEncoder())\nrouter.add(route)  # Still works for a single route\nresult = router(\"query text\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Local Dependencies\nDESCRIPTION: Installs the semantic-router package with the [local] flag to include all necessary dependencies for HuggingFaceEncoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[local]==0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Reading Documents from Files\nDESCRIPTION: Creates a list of document filenames, then reads the content of each file and appends it to a docs list. This prepares the document content for embedding.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# document list\ndoc_list = [\"doc1.txt\", \"doc2.txt\"]\n\ndocs = []\nfor doc in doc_list:\n    with open(doc, \"r\") as dr:\n        doc = dr.read()\n        docs.append(doc)\n```\n\n----------------------------------------\n\nTITLE: Getting Merge-Force-Local Strategy\nDESCRIPTION: Retrieves the merge-force-local strategy that merges both instances but gives priority to local data.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_sync_strategy(\"merge-force-local\")\n```\n\n----------------------------------------\n\nTITLE: Defining a 'chitchat' Route in Python\nDESCRIPTION: Creates a Route object for casual conversation utterances and combines it with the politics route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/fastembed.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Filtering to chitchat route only\nDESCRIPTION: Shows how route filtering forces a politics query to be classified as chitchat when only the chitchat route is allowed.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsr(\"don't you love politics?\", route_filter=[\"chitchat\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package version 0.1.5 or higher using pip with the quiet flag.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Creating Graph State Class\nDESCRIPTION: Defines a dataclass to store query and response state information.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\n@dataclass\nclass graph_state:\n    query: str\n    response: str\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Dimensionality\nDESCRIPTION: Examines the dimensionality of the embedding vectors by accessing the shape of the index. This confirms the encoder is producing the expected vector dimensions.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/bedrock.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl.index.index.shape\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Repository in Bash\nDESCRIPTION: This snippet demonstrates how to clone a forked repository of the Semantic Router project to the local machine using Git.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-gh-username>/<semantic-router>.git\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package in Python\nDESCRIPTION: Installs the semantic-router package using pip in a Jupyter notebook or Google Colab environment.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Route by Name\nDESCRIPTION: Shows how to remove a specific route from the layer configuration by name, then displays the updated configuration after removal.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Remove a route by name\nlayer_config.remove(\"get_weather\")\nlayer_config.to_dict()\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router Instance in Python\nDESCRIPTION: This code initializes a SemanticRouter instance with the defined encoder, routes, and auto-sync option set to 'local'.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrl2 = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI LLM for Semantic Router\nDESCRIPTION: Imports and initializes an OpenAI language model that will be used by the semantic router to understand and classify user queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.llms import OpenAILLM\n\nllm = OpenAILLM()\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs semantic-router package version 0.1.8 or higher which includes CohereEncoder functionality.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/cohere.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.8\"\n```\n\n----------------------------------------\n\nTITLE: Saving Layer Configuration to File\nDESCRIPTION: Saves the layer configuration to a JSON file for later reuse, demonstrating how configurations can be persisted.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayer_config.to_file(\"output/layer_config.json\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installing the semantic-router package with Pinecone support using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]==0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Testing Time Function with Bangkok\nDESCRIPTION: Tests the get_time function with a query about Bangkok's time, demonstrating the flexibility of the function calling capabilities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nout = rl(\"what's the time in Bangkok right now?\")\nprint(out)\nget_time(**out.function_call[0])\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Routes for EV Manufacturers\nDESCRIPTION: Setup of Route objects for different EV manufacturers (BYD, Tesla, Polestar, Rivian) with example utterances for each route\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# Route for BYD-related queries (allowed)\nbyd = Route(\n    name=\"byd\",\n    utterances=[\n        \"Tell me about the BYD Seal.\",\n        \"What is the battery capacity of the BYD Dolphin?\",\n        \"How does BYD's Blade Battery work?\",\n        \"Is the BYD Atto 3 a good EV?\",\n        \"Can I sell my BYD?\",\n        \"How much is my BYD worth?\",\n        \"What is the resale value of my BYD?\",\n        \"How much can I get for my BYD?\",\n        \"How much can I sell my BYD for?\",\n    ],\n)\n\n# Route for Tesla-related queries (blocked or redirected)\ntesla = Route(\n    name=\"tesla\",\n    utterances=[\n        \"Is Tesla better than BYD?\",\n        \"Tell me about the Tesla Model 3.\",\n        \"How does Tesla's autopilot compare to other EVs?\",\n        \"What's new in the Tesla Cybertruck?\",\n        \"Can I sell my Tesla?\",\n        \"How much is my Tesla worth?\",\n        \"What is the resale value of my Tesla?\",\n        \"How much can I get for my Tesla?\",\n        \"How much can I sell my Tesla for?\",\n    ],\n)\n\n# Route for Polestar-related queries (blocked or redirected)\npolestar = Route(\n    name=\"polestar\",\n    utterances=[\n        \"What's the range of the Polestar 2?\",\n        \"Is Polestar a good alternative to other EVs?\",\n        \"How does Polestar compare to other EVs?\",\n        \"Can I sell my Polestar?\",\n        \"How much is my Polestar worth?\",\n        \"What is the resale value of my Polestar?\",\n        \"How much can I get for my Polestar?\",\n        \"How much can I sell my Polestar for?\",\n    ],\n)\n\n# Route for Rivian-related queries (blocked or redirected)\nrivian = Route(\n    name=\"rivian\",\n    utterances=[\n        \"Tell me about the Rivian R1T.\",\n        \"How does Rivian's off-road capability compare to other EVs?\",\n        \"Is Rivian's charging network better than other EVs?\",\n        \"Can I sell my Rivian?\",\n        \"How much is my Rivian worth?\",\n        \"What is the resale value of my Rivian?\",\n        \"How much can I get for my Rivian?\",\n        \"How much can I sell my Rivian for?\",\n    ],\n)\n\n# Combine all routes\nroutes = [byd, tesla, polestar, rivian]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Routes from Pinecone Index\nDESCRIPTION: Gets the previously stored routes from the Pinecone index to demonstrate route persistence.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nindex.get_routes()\n```\n\n----------------------------------------\n\nTITLE: Examining Loaded Router Attributes\nDESCRIPTION: Prints the loaded router's attributes to verify that the encoder type, name, and routes were correctly loaded from the JSON file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    f\"\"\"{rl.encoder.type=}\n{rl.encoder.name=}\n{rl.routes=}\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Route After Deletion\nDESCRIPTION: Tests routing a weather-related query after the 'chitchat' route has been deleted to see how the router now classifies it.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Examining Saved Router JSON Configuration\nDESCRIPTION: Loads and displays the contents of the saved router JSON file to show the structure of the saved configuration, including encoder type, name, and routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nwith open(\"layer.json\", \"r\") as f:\n    layer_json = json.load(f)\n\nprint(layer_json)\n```\n\n----------------------------------------\n\nTITLE: Setting Up HuggingFace Encoder\nDESCRIPTION: Initializes a HuggingFaceEncoder to provide embeddings for the semantic router, using the default sentence-transformers/all-MiniLM-L6-v2 model.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Initializing Routes for Semantic Router in Python\nDESCRIPTION: This snippet initializes the routes for the semantic router, including politics, chitchat, and the multi-function route for timezone management.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nroutes = [politics, chitchat, multi_function_route]\n```\n\n----------------------------------------\n\nTITLE: Loading Test Images for Classification\nDESCRIPTION: Defines a utility function to load images from URLs and prepares test images for both Shrek and non-Shrek categories to evaluate the classifier.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\nimport requests\n\nfrom PIL import Image\n\n\ndef load_img(url):\n    resp = requests.get(url)\n    return Image.open(BytesIO(resp.content))\n\n\ntest_shrek = load_img(\n    \"https://static.wikia.nocookie.net/dreamworks/images/6/67/Shrek_Profile.jpg/revision/latest/thumbnail/width/360/height/360?cb=20231223041813\"\n)\ntest_not_shrek = list(\n    map(\n        lambda entry: entry[\"image\"],\n        filter(lambda entry: not entry[\"is_shrek\"], images[\"train\"]),\n    )\n)[0]\n```\n\n----------------------------------------\n\nTITLE: Confirming no differences between local and remote\nDESCRIPTION: Verifies there are no differences between local and remote routes after synchronization. This ensures both environments have identical route configurations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrouter.get_utterance_diff()\n```\n\n----------------------------------------\n\nTITLE: Fitting Semantic Router to Test Data in Python\nDESCRIPTION: This code uses the fit method to optimize the router's thresholds based on the provided test data (X and y).\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrouter.fit(X=X, y=y)\n```\n\n----------------------------------------\n\nTITLE: Getting Route IDs\nDESCRIPTION: Retrieves all record IDs associated with a specific route. This is useful for debugging and understanding how routes are stored in the index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrl.index._get_route_ids(route_name=\"politics\")\n```\n\n----------------------------------------\n\nTITLE: Describing the Index\nDESCRIPTION: Shows detailed information about the Pinecone index, including its configuration and metadata. This provides an overview of the current state of the vector store.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nrl.index.describe()\n```\n\n----------------------------------------\n\nTITLE: Testing Politics Non-Dynamic Route in Python\nDESCRIPTION: This snippet tests the politics route by sending a political query to the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = rl2(\"What is your political leaning?\")\nresponse\n```\n\n----------------------------------------\n\nTITLE: Checking router synchronization status\nDESCRIPTION: Verifies if the local router instance is synchronized with the remote Pinecone index. This helps identify if there are differences between local routes and the persisted routes in Pinecone.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrouter.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Checking Dense Index Shape\nDESCRIPTION: Displays the dimensionality and number of dense vector records in the index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nrouter.index.index.shape\n```\n\n----------------------------------------\n\nTITLE: Computing COMET Scores for Translation Quality Assessment in Python\nDESCRIPTION: This code snippet shows how to calculate COMET scores for assessing translation quality. It uses the wmt22-comet-da model, which is a reference-free metric for machine translation evaluation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWe compute the score with wmt22-comet-da model.\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Encoders\nDESCRIPTION: Sets up embedding models from either Cohere or OpenAI by configuring API keys and initializing the corresponding encoder classes. These encoders convert text into vector representations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder\n\n# for Cohere\nos.environ[\"COHERE_API_KEY\"] = \"<YOUR_API_KEY>\"\nencoder = CohereEncoder()\n\n# or for OpenAI\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR_API_KEY>\"\nencoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Checking embedding dimensionality\nDESCRIPTION: Retrieves the dimensionality of the generated embeddings from the RouteLayer's index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/mistral-encoder.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl.index.dimensions\n```\n\n----------------------------------------\n\nTITLE: Displaying Encoder Details\nDESCRIPTION: Shows the encoder details, including the default score threshold. This helps in understanding the configuration of the encoder being used.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nencoder\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Encoder\nDESCRIPTION: Sets up the OpenAIEncoder using the OpenAI API key from environment variables or user input. This encoder is used as an alternative to Azure's for generating text embeddings.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import OpenAIEncoder\n\n# get at platform.openai.com\nos.environ[\"OPENAI_API_KEY\"] = os.environ.get(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API key: \"\n)\nencoder = OpenAIEncoder(name=\"text-embedding-3-small\")\n```\n\n----------------------------------------\n\nTITLE: Processing Test Data\nDESCRIPTION: Unpacks the test data into features (X) and labels (y) for model training.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/integrations/pydantic-ai/chatbot-with-guardrails.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nX, y = zip(*test_data)\n\nX = list(X)\ny = list(y)\n\nprint(X)\nprint(y)\n```\n\n----------------------------------------\n\nTITLE: Testing RouteLayer with Humor Query\nDESCRIPTION: Tests the reinitialized RouteLayer by sending a humor-related query.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrl(\"say something to make me laugh\").name\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package with Pinecone integration using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Testing RouteLayer with Amusement Query\nDESCRIPTION: Tests the RouteLayer with another humor-related query to verify consistent behavior.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nrl(\"tell me something amusing\").name\n```\n\n----------------------------------------\n\nTITLE: Initializing Semantic Router\nDESCRIPTION: Sets up the SemanticRouter with the encoder, routes, and Pinecone index. The auto_sync parameter is set to \"local\" to automatically sync the routes to the local cache.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\nimport time\n\nrl = SemanticRouter(encoder=encoder, routes=routes, index=pc_index, auto_sync=\"local\")\n# due to pinecone indexing latency we wait 3 seconds\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Queries\nDESCRIPTION: Shows how the semantic router handles a query that doesn't match any defined routes, returning None to indicate no decision could be made.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Testing Get Time Function in Multi-Function Route in Python\nDESCRIPTION: This snippet tests the get_time function in the multi-function route by asking for the time in New York.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\"what is the time in New York?\")\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Viewing the Router's Index\nDESCRIPTION: Displays the router's index which contains the embedded representations of the route utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl.index\n```\n\n----------------------------------------\n\nTITLE: Downloading Mistral Model\nDESCRIPTION: Commands to download the Mistral 7B Instruct 4-bit quantized GGUF model file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n!curl -L \"https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/resolve/main/mistral-7b-instruct-v0.2.Q4_0.gguf?download=true\" -o ./mistral-7b-instruct-v0.2.Q4_0.gguf\n!ls mistral-7b-instruct-v0.2.Q4_0.gguf\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Router in Synchronous Mode\nDESCRIPTION: Demonstrates a synchronous query to the SemanticRouter to classify a message about politics. The router returns which route best matches the input text.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics\").name  # SYNC mode\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Shrek Image Classification\nDESCRIPTION: Displays a non-Shrek test image and runs it through the RouteLayer to demonstrate negative classification, showing how the system identifies non-Shrek content.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndisplay(test_not_shrek)\ndisplay(rl(test_not_shrek))\n```\n\n----------------------------------------\n\nTITLE: Initializing Huggingface Endpoint Encoder\nDESCRIPTION: Sets up the Huggingface endpoint encoder with API credentials for text embedding\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders.huggingface import HFEndpointEncoder\n\nhuggingface_url = os.getenv(\"HF_API_URL\") or getpass(\"Enter HuggingFace API URL: \")\nhuggingface_api_key = os.getenv(\"HF_API_KEY\") or getpass(\"Enter HuggingFace API Key: \")\n\nencoder = HFEndpointEncoder(\n    huggingface_url=huggingface_url,\n    huggingface_api_key=huggingface_api_key,\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Translation Performance Tables\nDESCRIPTION: Tables showing translation quality scores using COMET and SEScore metrics. Data is organized by language families and includes scores for major language models like XGLM-7.5B, OPT-175B, LLaMA2-7B, ChatGPT, GPT4 and others. Lower scores generally indicate better translation quality.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nTable 8: Detailed results (COMET) of our evaluated models.\nTable 9: Detailed results (SEScore) of our evaluated models.\n```\n\n----------------------------------------\n\nTITLE: Testing Time Conversion Function in Multi-Function Route in Python\nDESCRIPTION: This snippet tests the convert_time function in the multi-function route by asking to convert time from Dubai to Tokyo.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\n    \"What is 23:02 Dubai time in Tokyo time? Please and thank you.\"\n)\nresponse\n```\n\nLANGUAGE: python\nCODE:\n```\nparse_response(response)\n```\n\n----------------------------------------\n\nTITLE: Testing with Business Inquiry Query\nDESCRIPTION: Demonstrates the agent's responses to a business-related query, comparing standard responses versus semantically augmented responses with pricing information.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nquery = \"okay fine, do you do training sessions, how much are they?\"\nsr_query = semantic_layer(query)\nsr_query\n```\n\nLANGUAGE: python\nCODE:\n```\nagent.memory = memory1\nagent(query)\n```\n\nLANGUAGE: python\nCODE:\n```\nagent.memory = memory2\nagent(sr_query)\n```\n\n----------------------------------------\n\nTITLE: Routing Chitchat Queries\nDESCRIPTION: Example of routing a query that matches the chitchat route based on semantic similarity to the predefined utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Pinecone Index Configuration\nDESCRIPTION: Initializing Pinecone index with async support for vector storage and retrieval.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.index.pinecone import PineconeIndex\n\n# get at app.pinecone.io\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\npc_index = PineconeIndex(dimensions=1536, init_async_index=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Routes for Semantic Router\nDESCRIPTION: This snippet defines two static routes (politics and chitchat) with example utterances for each category.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Testing the Router with an Unrelated Query\nDESCRIPTION: Shows how the router handles queries unrelated to any defined routes, returning None when no match is found based on the configured threshold.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router\nDESCRIPTION: Initializes the SemanticRouter with the configured encoder and routes for text classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Testing Router Performance\nDESCRIPTION: Demonstrates basic usage of the router by classifying example utterances.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor utterance in [\n    \"don't you love politics?\",\n    \"how's the weather today?\",\n    \"What's DNA?\",\n    \"I'm interested in learning about llama 2\",\n]:\n    print(f\"{utterance} -> {rl(utterance).name}\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Route Layer Responses in Python\nDESCRIPTION: This function parses the response from the Semantic Router, calling the appropriate time-related function based on the function name in the response.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef parse_response(response: str):\n    for call in response.function_call:\n        args = call[\"arguments\"]\n        if call[\"function_name\"] == \"get_time\":\n            result = get_time(**args)\n            print(result)\n        if call[\"function_name\"] == \"get_time_difference\":\n            result = get_time_difference(**args)\n            print(result)\n        if call[\"function_name\"] == \"convert_time\":\n            result = convert_time(**args)\n            print(result)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Route and Verifying Index Size\nDESCRIPTION: Removes the 'chitchat' route from the system and verifies the reduction in index size after deletion. Includes a sleep timer to ensure the deletion is processed.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nrl.delete(route_name=\"chitchat\")\ntime.sleep(1)\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone Index\nDESCRIPTION: Creates a PineconeIndex with specified dimensions for storing embeddings. It initializes an asynchronous index and forces creation of a new index instance.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.index.pinecone import PineconeIndex\n\n# get at app.pinecone.io\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\n\npc_index = PineconeIndex(\n    dimensions=1536,\n    init_async_index=True,  # enables asynchronous methods, it's optional\n)\npc_index.index = pc_index._init_index(force_create=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Embedding Model\nDESCRIPTION: Sets up the encoder using either Cohere or OpenAI API, with API key configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder  # noqa: F401\n\nos.environ[\"COHERE_API_KEY\"] = os.getenv(\"COHERE_API_KEY\") or getpass(\n    \"Enter Cohere API Key: \"\n)\n# os.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n#     \"Enter OpenAI API Key: \"\n# )\n\nencoder = CohereEncoder()\n# encoder = OpenAIEncoder()\n```\n\n----------------------------------------\n\nTITLE: Deleting the Pinecone Index\nDESCRIPTION: Cleans up by deleting the Pinecone index after the demonstration is complete.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-and-scaling.ipynb#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# delete index\nindex.delete_index()\n```\n\n----------------------------------------\n\nTITLE: Router Usage Examples\nDESCRIPTION: Demonstrates how to use the router with example queries\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"don't you love politics?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrouter(\"how's the weather today?\")\n```\n\n----------------------------------------\n\nTITLE: Checking Index Size Before Deletion\nDESCRIPTION: Checks the number of items in the index before deleting a route. This establishes a baseline for comparison after deletion.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlen(rl.index)\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleEncoder for Semantic Router\nDESCRIPTION: Sets up the GoogleEncoder with project ID and location. Requires an active Google Cloud Platform account with the Embeddings API enabled.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import GoogleEncoder\n\nPROJECT_ID = \"your-project-id\"\nLOCATION = \"us-central1\"\n\nencoder = GoogleEncoder(project_id=PROJECT_ID, location=LOCATION)\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Routes\nDESCRIPTION: Creating route definitions for politics and chitchat categories with example utterances for chatbot response routing.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-async.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Cleanup Downloaded Model\nDESCRIPTION: Removes the downloaded GGUF model file from the local system to clean up disk space.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n! rm ./mistral-7b-instruct-v0.2.Q4_0.gguf\n```\n\n----------------------------------------\n\nTITLE: Downloading Pinecone Local Docker Image\nDESCRIPTION: This command pulls the latest Pinecone Local Docker image from the GitHub Container Registry.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/pinecone-io/pinecone-local:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Google support\nDESCRIPTION: Installs the semantic-router package with Google support using pip. This step is necessary to use the GoogleEncoder class.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/google.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[google]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Pinecone Support\nDESCRIPTION: This command installs the Semantic Router package with Pinecone support using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library and Dependencies\nDESCRIPTION: This snippet shows the installation command for the semantic_router library with local dependencies.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/ollama-local-execution.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# !pip install -qU \"semantic_router[local]==0.0.28\"\n```\n\n----------------------------------------\n\nTITLE: Testing Chitchat Non-Dynamic Route in Python\nDESCRIPTION: This code tests the chitchat non-dynamic route by calling the semantic router with a greeting message.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/08-async-dynamic-routes.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = await rl2.acall(\"Hello bot, how are you today?\")\nresponse\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package version 0.1.0 using pip\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router==0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Structured Diff Details\nDESCRIPTION: Examines the structured difference information generated by the UtteranceDiff object.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndiff.diff\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router\nDESCRIPTION: Installs the semantic-router package with version 0.1.0 which supports the AurelioSparseEncoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router==0.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-router Package\nDESCRIPTION: Installs the semantic-router package (version 0.1.5 or newer) using pip with quiet output.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Politics Route with Example Utterances\nDESCRIPTION: Creates a Route object for politics-related queries with example utterances that should trigger this route during classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Semantic Router and LangChain\nDESCRIPTION: Installs the required packages including semantic-router, langchain, and openai to set up the environment for the tutorial.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/03-basic-langchain-agent.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \\\n    \"semantic-router>=0.1.5\" \\\n    langchain==0.0.352 \\\n    openai>=1.6.1\n```\n\n----------------------------------------\n\nTITLE: Tuning Hybrid Alpha in HybridRouter\nDESCRIPTION: This example shows how to fine-tune the balance between dense and sparse embeddings in HybridRouter using the alpha parameter. It demonstrates configurations that prioritize semantic matching, keyword matching, or a balanced approach.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/components/routers.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# More weight to dense embeddings (semantic matching)\nrouter = HybridRouter(\n    encoder=OpenAIEncoder(),\n    sparse_encoder=AurelioSparseEncoder(),\n    routes=routes,\n    alpha=0.2  # 80% dense, 20% sparse\n)\n\n# Equal weight to both\nrouter = HybridRouter(\n    encoder=OpenAIEncoder(),\n    sparse_encoder=AurelioSparseEncoder(),\n    routes=routes,\n    alpha=0.5  # 50% dense, 50% sparse\n)\n\n# More weight to sparse embeddings (keyword matching)\nrouter = HybridRouter(\n    encoder=OpenAIEncoder(),\n    sparse_encoder=AurelioSparseEncoder(),\n    routes=routes,\n    alpha=0.8  # 20% dense, 80% sparse\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Politics Route\nDESCRIPTION: Creates a Route object for politics with example utterances that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library\nDESCRIPTION: Installation command for the semantic-router package version 0.1.5 or higher.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Testing New Router with Political Query\nDESCRIPTION: Tests the newly created router with a political statement to verify it routes correctly after being recreated from the loaded configuration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/01-save-load-from-file.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnew_rl(\"isn't politics the best thing ever\")\n```\n\n----------------------------------------\n\nTITLE: Testing Classification After Route Deletion\nDESCRIPTION: Attempts to classify a weather-related query after deleting the 'chitchat' route. This demonstrates how the system behaves when queried with text that previously had a dedicated route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/qdrant.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\n----------------------------------------\n\nTITLE: Making Routing Decisions with Semantic Router\nDESCRIPTION: Demonstrates how to use the RouteLayer to make routing decisions based on user queries. Shows examples of matching queries to defined routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/get-started/quickstart.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\").name\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\").name\n```\n\n----------------------------------------\n\nTITLE: Calculating SEScore for Translation Evaluation in Python\nDESCRIPTION: This code snippet illustrates how to compute SEScore for evaluating translation quality. It specifically uses the SEScore-2 model, which is an advanced metric for assessing semantic equivalence in translations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWe compute the score with SEScore-2 (Xu et al., 2022a).\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Library\nDESCRIPTION: Installation command for the semantic-router library version 0.1.0\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-router.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install -qU semantic-router==0.1.0\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for OpenAI Encoder\nDESCRIPTION: Imports the necessary modules including OpenAIEncoder from semantic_router, os for environment variables, and dotenv for loading environment variables from a file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-encoder.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders.openai import OpenAIEncoder\nimport os\nfrom dotenv import load_dotenv\n```\n\n----------------------------------------\n\nTITLE: Setting top_k parameter when retrieving multiple routes in Python\nDESCRIPTION: Shows how to properly set the top_k parameter when using limit to retrieve multiple routes, ensuring that enough candidate utterances are considered.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/migration-to-v1.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example: Setting top_k higher when retrieving multiple routes\nsemantic_router = SemanticRouter(encoder=encoder, routes=routes, top_k=100)\nall_routes = semantic_router(query_text, limit=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Route and Execute Function\nDESCRIPTION: Defines a comprehensive function that routes a query to the appropriate function and executes it with the extracted parameters. If no matching function is found, it falls back to the LLM for general queries, and then tests it with multiple example queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/function_calling.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.schema import RouteChoice\nfrom semantic_router.schema import Message\n\nllm = OpenAILLM()\n\n\ndef route_and_execute(query, functions, layer):\n    route_choice: RouteChoice = layer(query)\n\n    for function in functions:\n        if function.__name__ == route_choice.name:\n            if route_choice.function_call:\n                return function(**route_choice.function_call)\n\n    # If no function is found, use the LLM for general queries\n    msgs = [Message(role=\"user\", content=query)]\n    return llm(msgs)\n\n\nqueries = [\n    \"What is the time in Stockholm?\",\n    \"What are the tech news in the US?\",\n    \"The capital of France?\",\n]\n\nfor query in queries:\n    print(f\"Query: {query}\")\n    print(route_and_execute(query, functions, layer))\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Local Dependencies\nDESCRIPTION: Installs the semantic-router package with the 'local' extras to support local LLM integration.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[local]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Semantic Router\nDESCRIPTION: This snippet creates two Route objects for politics and chitchat, which will be used in the Semantic Router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Creating a Route for politics classification\nDESCRIPTION: Defines a politics route with example utterances that should trigger this route.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/route-filter.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Async Classification After Route Deletion\nDESCRIPTION: Tests how the SemanticRouter handles a chitchat-related query after the chitchat route has been deleted. Shows the router's behavior when a previously defined category is removed.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nout = await rl.acall(\"how's the weather today?\")\nout.name\n```\n\n----------------------------------------\n\nTITLE: Initializing the Vision Transformer Encoder\nDESCRIPTION: Sets up a VitEncoder using device-specific acceleration (MPS for MacBook Pro). The encoder transforms images into vector embeddings for classification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/vision-transformer.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import VitEncoder\n\nencoder = VitEncoder(\n    device=\"mps\"\n)  # Using MBP Metal acceleration (for other platforms, please see https://pytorch.org/docs/stable/tensor_attributes.html#torch.device)\n```\n\n----------------------------------------\n\nTITLE: Static Routes Implementation\nDESCRIPTION: Defining static routes for politics and chitchat conversations.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/dynamic-routes.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\", \"don't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Setting up the Hybrid Router\nDESCRIPTION: Initializes the HybridRouter with the dense encoder, sparse encoder, routes, and hybrid index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/aurelio-bm25.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import HybridRouter\n\nrouter = HybridRouter(\n    encoder=encoder,\n    sparse_encoder=sparse_encoder,\n    routes=routes,\n    index=index,\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating SemanticRouter on Larger Dataset in Python\nDESCRIPTION: Tests the accuracy of the SemanticRouter on the larger, more comprehensive dataset.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# unpack the test data\nX, y = zip(*test_data)\n\n# evaluate using the default thresholds\naccuracy = sr.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy*100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Listing Available Routes\nDESCRIPTION: Lists all route names that are currently available in the semantic router.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/local.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlocal_rl.list_route_names()\n```\n\n----------------------------------------\n\nTITLE: Setting up RouteLayer with Encoder\nDESCRIPTION: Initializes the SemanticRouter with an encoder (OpenAI or Cohere) and configured routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/02-dynamic-routes.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom getpass import getpass\nfrom semantic_router.encoders import CohereEncoder, OpenAIEncoder  # noqa: F401\nfrom semantic_router.routers import SemanticRouter\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\") or getpass(\n    \"Enter OpenAI API Key: \"\n)\n\nencoder = OpenAIEncoder()\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router Package\nDESCRIPTION: Installs the semantic-router package using pip.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router>=0.1.5\"\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router\nDESCRIPTION: Initializes the SemanticRouter with the configured encoder, routes, and Pinecone index.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, index=pc_index, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Checking Vector Dimensions\nDESCRIPTION: Accesses the index attribute to verify vector dimensions\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/huggingface-endpoint.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrl.index\n```\n\n----------------------------------------\n\nTITLE: Verifying Synchronization After Strategy Execution\nDESCRIPTION: Checks if the synchronization was successful after executing the strategy by calling is_synced().\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(3)\nrl.is_synced()\n```\n\n----------------------------------------\n\nTITLE: Testing Unrelated Topic Classification in Async Mode\nDESCRIPTION: Tests how the SemanticRouter handles a message about LLM models in asynchronous mode. This demonstrates router behavior with content not explicitly defined in routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nout = await rl.acall(\"I'm interested in learning about llama 2\")\nout.name\n```\n\n----------------------------------------\n\nTITLE: Displaying SEScore Evaluation Results in Markdown\nDESCRIPTION: This snippet shows a markdown table reference for presenting average SEScore results of LLMs on different language families for translation to English.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nTable 6 presents average SEScore of LLMs on different language families. Currently, SEScore mainly supports evaluating English translation. Thus we evaluate LLMâs performance on trans- lating other languages to English.\n```\n\n----------------------------------------\n\nTITLE: Generating Embeddings with VoyageEncoder\nDESCRIPTION: Demonstrates how to use the encoder to generate embeddings for a batch of example queries across different topics.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/voyage-encoder.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresult = encoder(\n    [\n        \"I'm interested in learning about llama 2\",\n        \"Don't you love politics?\",\n        \"How's the weather today?\",\n        \"I love the politics\",\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing PineconeIndex for Semantic Router\nDESCRIPTION: This code sets up the Pinecone API key and initializes a PineconeIndex for use with the local Pinecone instance.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-local.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom semantic_router.index.pinecone import PineconeIndex\n\nos.environ[\"PINECONE_API_KEY\"] = os.environ.get(\"PINECONE_API_KEY\") or getpass(\n    \"Enter Pinecone API key: \"\n)\n\n# Pass the pinecone local hosted url as base url\n# os.environ[\"PINECONE_API_BASE_URL\"] = \"https://api.pinecone.io\"\nos.environ[\"PINECONE_API_BASE_URL\"] = \"http://localhost:5080\"\n\nindex = PineconeIndex(\n    index_name=\"route-test\", dimensions=1536, base_url=\"http://localhost:5080\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Route Classifications\nDESCRIPTION: Example queries to test the semantic router's classification capabilities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/openai-embed-3.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrl(\"don't you love politics?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"how's the weather today?\")\n```\n\nLANGUAGE: python\nCODE:\n```\nrl(\"I'm interested in learning about llama 2\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router with Jina Support\nDESCRIPTION: Installs the semantic-router library with support for the Jina encoder.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/encoders/jina-encoder.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU semantic-router==0.1.8\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Routes with Function Calling\nDESCRIPTION: Creates dynamic routes including a time function with schema, politics detection, and chitchat detection. The get_time function uses the ZoneInfo module to fetch current time in a specified timezone.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/05-local-execution.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nfrom semantic_router import Route\nfrom semantic_router.utils.function_call import get_schema\n\n\ndef get_time(timezone: str) -> str:\n    \"\"\"Finds the current time in a specific timezone.\n\n    :param timezone: The timezone to find the current time in, should\n        be a valid timezone from the IANA Time Zone Database like\n        \"America/New_York\" or \"Europe/London\". Do NOT put the place\n        name itself like \"rome\", or \"new york\", you must provide\n        the IANA format.\n    :type timezone: str\n    :return: The current time in the specified timezone.\"\"\"\n    now = datetime.now(ZoneInfo(timezone))\n    return now.strftime(\"%H:%M\")\n\n\ntime_schema = get_schema(get_time)\ntime_schema\ntime = Route(\n    name=\"get_time\",\n    utterances=[\n        \"what is the time in new york city?\",\n        \"what is the time in london?\",\n        \"I live in Rome, what time is it?\",\n    ],\n    function_schemas=[time_schema],\n)\n\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the presidentdon't you just hate the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat, time]\n```\n\n----------------------------------------\n\nTITLE: Initializing HuggingFaceEncoder for Semantic Router in Python\nDESCRIPTION: Creates an instance of HuggingFaceEncoder to be used as the encoder for the SemanticRouter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/features/threshold-optimization.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Python for Semantic Router\nDESCRIPTION: Creates Route objects for 'politics' and 'chitchat' topics, each with example utterances. These routes will be used for semantic matching of user input.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/get-started/quickstart.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Installing semantic-router with Pinecone support\nDESCRIPTION: Installs the semantic-router package with Pinecone support. This version (0.1.0) includes the new AurelioSparseEncoder parameter.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/pinecone-hybrid.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -qU \"semantic-router[pinecone]==0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Hybrid Router with Example Queries\nDESCRIPTION: Tests the hybrid router with example queries about different EV brands to demonstrate how it correctly routes each query to the appropriate brand category based on combined dense and sparse encoding.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor utterance in [\n    \"Tell me about BYD's Blade Battery.\",\n    \"Does the Tesla Model 3 have better range?\",\n    \"What are the key features of the Polestar 2?\",\n    \"Is Rivian's R1T better for off-roading?\",\n]:\n    print(f\"{utterance} -> {router(utterance).name}\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Remote-Only Utterances\nDESCRIPTION: Filters the diff to show only utterances that exist in the remote instance but not locally.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone-sync-routes.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndiff.get_tag(\"+\")\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Data for Router Evaluation\nDESCRIPTION: Creates a test dataset with query-brand pairs that will be used to evaluate the accuracy of the hybrid router in correctly identifying brand-specific queries.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntest_data = [\n    (\"Tell me about BYD's Blade Battery.\", \"byd\"),\n    (\"Does the Tesla Model 3 have better range?\", \"tesla\"),\n    (\"What are the key features of the Polestar 2?\", \"polestar\"),\n    (\"Is Rivian's R1T better for off-roading?\", \"rivian\"),\n]\n\n# unpack the test data\nX, y = zip(*test_data)\n```\n\n----------------------------------------\n\nTITLE: Unpacking Test Data for Semantic Router Evaluation in Python\nDESCRIPTION: This snippet unpacks the test data into separate lists for inputs (X) and expected outputs (y), then prints them for verification.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/examples/hybrid-chat-guardrails.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nX, y = zip(*test_data)\n\nX = list(X)\ny = list(y)\n\nprint(X)\nprint(y)\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone Index\nDESCRIPTION: Creates a PineconeIndex instance with specific parameters for dimensions, async initialization, and region. This index will store the vector embeddings for the routes.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/indexes/pinecone_async.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npc_index = PineconeIndex(dimensions=1536, init_async_index=True, region=\"us-east-1\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Router on Larger Dataset\nDESCRIPTION: Tests the router's accuracy on the more comprehensive dataset.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/06-threshold-optimization.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# unpack the test data\nX, y = zip(*test_data)\n\n# evaluate using the default thresholds\naccuracy = rl.evaluate(X=X, y=y)\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Router\nDESCRIPTION: Initializes the SemanticRouter with the encoder and routes, setting up local auto-sync.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/09-route-filter.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.routers import SemanticRouter\n\nrl = SemanticRouter(encoder=encoder, routes=routes, auto_sync=\"local\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Inspecting Saved Semantic Router JSON in Python\nDESCRIPTION: Demonstrates how to load and inspect the contents of a saved Semantic Router JSON file.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/save-load-from-file.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\n\nwith open(\"router.json\", \"r\") as f:\n    router_json = json.load(f)\n\nprint(router_json)\n```\n\n----------------------------------------\n\nTITLE: Setting up HuggingFace Encoder\nDESCRIPTION: Initialization of HuggingFaceEncoder for text embedding generation.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/user-guide/guides/local-execution.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom semantic_router.encoders import HuggingFaceEncoder\n\nencoder = HuggingFaceEncoder()\n```\n\n----------------------------------------\n\nTITLE: Translation Performance Data Structure\nDESCRIPTION: Data structure showing translation performance metrics for different types of in-context exemplars across German-English and English-German translations\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/tests/integration/57640.4032.txt#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nIn-context Exemplars | Consistency Granularity Diversity | Deu-Eng Eng-Deu\nMismatched Translation xK v v 0.00 0.00\nWord-level Translation v xK v 25.10 5.84\nDoc-level Translation v xK v 8.01 2.05\nDuplicated Translation v v x 35.12 19.66\nSent-level Translation | v v Â¥ | 37.37 26.49\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Router via pip\nDESCRIPTION: Command for installing the semantic-router package using pip. Additional installation options are provided for local execution and hybrid routing capabilities.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -qU semantic-router\n```\n\n----------------------------------------\n\nTITLE: Defining Chitchat Route\nDESCRIPTION: Creates a Route object for casual conversation with example utterances and combines routes into a list.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/docs/00-introduction.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\nroutes = [politics, chitchat]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Semantic Router in Bash\nDESCRIPTION: This code block shows the steps to set up a development environment for the Semantic Router project, including creating a virtual environment, activating it, and installing dependencies.\nSOURCE: https://github.com/aurelio-labs/semantic-router/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Move into the cloned folder\ncd semantic-router/\n\n# Create a virtual environment\nuv venv --python 3.13\n\n# Activate the environment\nsource .venv/bin/activate\n\n# Install via uv with all extras relevant to perform unit tests\nuv pip install -e .[dev]\n```"
  }
]