[
  {
    "owner": "google",
    "repo": "go-github",
    "content": "TITLE: Authenticating with OAuth Token in go-github\nDESCRIPTION: Example of configuring a GitHub client to authenticate using an OAuth token, which is the recommended approach for most use cases outside of GitHub Apps.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nclient := github.NewClient(nil).WithAuthToken(\"... your access token ...\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App Using ghinstallation Package\nDESCRIPTION: Example of authenticating as a GitHub App using the bradleyfalzon/ghinstallation package, which implements http.RoundTripper for GitHub App authentication.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\n\t\"github.com/bradleyfalzon/ghinstallation/v2\"\n\t\"github.com/google/go-github/v71/github\"\n)\n\nfunc main() {\n\t// Wrap the shared transport for use with the integration ID 1 authenticating with installation ID 99.\n\titr, err := ghinstallation.NewKeyFromFile(http.DefaultTransport, 1, 99, \"2016-10-19.private-key.pem\")\n\n\t// Or for endpoints that require JWT authentication\n\t// itr, err := ghinstallation.NewAppsTransportKeyFromFile(http.DefaultTransport, 1, \"2016-10-19.private-key.pem\")\n\n\tif err != nil {\n\t\t// Handle error.\n\t}\n\n\t// Use installation transport with client.\n\tclient := github.NewClient(&http.Client{Transport: itr})\n\n\t// Use client...\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating as a GitHub App Using go-githubauth Package\nDESCRIPTION: Example of authenticating as a GitHub App using the jferrl/go-githubauth package, which implements oauth2.TokenSource for GitHub App authentication.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/google/go-github/v71/github\"\n\t\"github.com/jferrl/go-githubauth\"\n\t\"golang.org/x/oauth2\"\n)\n\nfunc main() {\n\tprivateKey := []byte(os.Getenv(\"GITHUB_APP_PRIVATE_KEY\"))\n\n\tappTokenSource, err := githubauth.NewApplicationTokenSource(1112, privateKey)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating application token source:\", err)\n\t\treturn\n\t }\n\n\tinstallationTokenSource := githubauth.NewInstallationTokenSource(1113, appTokenSource)\n\n\t// oauth2.NewClient uses oauth2.ReuseTokenSource to reuse the token until it expires.\n\t// The token will be automatically refreshed when it expires.\n\t// InstallationTokenSource has the mechanism to refresh the token when it expires.\n\thttpClient := oauth2.NewClient(context.Background(), installationTokenSource)\n\n\tclient := github.NewClient(httpClient)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Repository Resource - go-github - Go\nDESCRIPTION: This Go example illustrates how to use go-github's resource structs with pointer fields to differentiate unset versus zero values. It creates a new private repository by constructing a Repository struct, initializing its Name and Private fields using helper pointer functions, then calls Create. Required dependencies are go-github and its helper APIs. Inputs are repository properties; output is a new repository instance if permissions permit.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// create a new private repository named \"foo\"\nrepo := &github.Repository{\n\tName:    github.Ptr(\"foo\"),\n\tPrivate: github.Ptr(true),\n}\nclient.Repositories.Create(ctx, \"\", repo)\n```\n\n----------------------------------------\n\nTITLE: Handling GitHub Webhook Events - go-github - Go\nDESCRIPTION: This Go snippet demonstrates how to validate, parse, and dispatch GitHub webhook events using go-github. It verifies the request with ValidatePayload, parses event type with ParseWebHook, and dispatches to event-specific handlers via type assertion and switch. Dependencies are go-github, an HTTP handler, and a secret key for payload validation. Inputs are the http.Request and webhook secret. Outputs include processing of various webhook event types. Error handling is performed after each step.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *GitHubEventMonitor) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tpayload, err := github.ValidatePayload(r, s.webhookSecretKey)\n\tif err != nil { ... }\n\tevent, err := github.ParseWebHook(github.WebHookType(r), payload)\n\tif err != nil { ... }\n\tswitch event := event.(type) {\n\tcase *github.CommitCommentEvent:\n\t\tprocessCommitCommentEvent(event)\n\tcase *github.CreateEvent:\n\t\tprocessCreateEvent(event)\n\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Paginated Results with enrichman/gh-iter - go-github - Go\nDESCRIPTION: This Go snippet uses the enrichman/gh-iter package to handle result pagination automatically using Go's iter package. It creates an iterator from the client method ListByOrg and aggregates all repositories in a loop. Dependencies are go-github and gh-iter. Key inputs are the client and organization name; expected output is a complete slice of repository pointers. This method abstracts away pagination logic.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nclient := github.NewClient(nil)\nvar allRepos []*github.Repository\n\n// create an iterator and start looping through all the results\nrepos := ghiter.NewFromFn1(client.Repositories.ListByOrg, \"github\")\nfor repo := range repos.All() {\n\tallRepos = append(allRepos, repo)\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Repository Listings Manually - go-github - Go\nDESCRIPTION: This snippet implements manual pagination for listing repositories by organization with go-github. Using RepositoryListByOrgOptions, it loops through all result pages, collecting all repositories into a slice. Key parameters are per-page count and organization name. Required dependencies: go-github and a configured client. The input is the organization identifier; output is a complete in-memory list of repositories. Handles continuation via NextPage in the API response.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nclient := github.NewClient(nil)\n\nopt := &github.RepositoryListByOrgOptions{\n\tListOptions: github.ListOptions{PerPage: 10},\n}\n// get all pages of results\nvar allRepos []*github.Repository\nfor {\n\trepos, resp, err := client.Repositories.ListByOrg(ctx, \"github\", opt)\n\tif err != nil {\n\t\treturn err\n\t}\n\tallRepos = append(allRepos, repos...)\n\tif resp.NextPage == 0 {\n\t\tbreak\n\t}\n\topt.Page = resp.NextPage\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Client and Listing Organizations\nDESCRIPTION: Example of creating a new GitHub client and using it to list all organizations for a specific user.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient := github.NewClient(nil)\n\n// list all organizations for user \"willnorris\"\norgs, _, err := client.Organizations.List(context.Background(), \"willnorris\", nil)\n```\n\n----------------------------------------\n\nTITLE: Importing go-github Package in Go Code\nDESCRIPTION: Example of how to import the go-github package in your Go code, with options for both modules-enabled and modules-disabled environments.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/google/go-github/v71/github\"\t// with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport \"github.com/google/go-github/github\" // with go modules disabled\n```\n\n----------------------------------------\n\nTITLE: Installing go-github Package with Go Modules\nDESCRIPTION: Commands to install the go-github package using Go modules. This shows how to add the package to your current development module along with its dependencies.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/google/go-github/v71\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters with GitHub API\nDESCRIPTION: Example of using optional parameters when making GitHub API calls, specifically listing public repositories for an organization.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nclient := github.NewClient(nil)\n\n// list public repositories for org \"github\"\nopt := &github.RepositoryListByOrgOptions{Type: \"public\"}\nrepos, _, err := client.Repositories.ListByOrg(context.Background(), \"github\", opt)\n```\n\n----------------------------------------\n\nTITLE: Initializing go-github with HTTP Cache for Conditional Requests - Go\nDESCRIPTION: This snippet shows how to set up the go-github client to leverage an RFC 7234-compliant HTTP caching transport, such as gregjones/httpcache, for conditional GET requests via ETag headers. It improves performance and helps reduce rate limit usage. The github.NewClient is used with a cache-based HTTP client, and WithAuthToken attaches authentication. Required dependencies are go-github, gregjones/httpcache, and an environment variable holding the GITHUB_TOKEN. Inputs include a valid token; outputs a cache-enabled GitHub API client.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/gregjones/httpcache\"\n\nclient := github.NewClient(\n\thttpcache.NewMemoryCacheTransport().Client()\n).WithAuthToken(os.Getenv(\"GITHUB_TOKEN\"))\n```\n\n----------------------------------------\n\nTITLE: Using Top-of-Trunk Version of go-github\nDESCRIPTION: Command to install the latest master branch version of the go-github package.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/google/go-github/v71@master\n```\n\n----------------------------------------\n\nTITLE: Blocking Until GitHub Rate Limit Reset\nDESCRIPTION: Example of using context.WithValue to block until the GitHub API rate limit is reset, allowing the request to automatically retry after the limit resets.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nrepos, _, err := client.Repositories.List(context.WithValue(ctx, github.SleepUntilPrimaryRateLimitResetWhenRateLimited, true), \"\", nil)\n```\n\n----------------------------------------\n\nTITLE: Detecting GitHub API Rate Limit Errors\nDESCRIPTION: Example of checking for GitHub API rate limit errors by testing if the error type is *github.RateLimitError.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nrepos, _, err := client.Repositories.List(ctx, \"\", nil)\nif _, ok := err.(*github.RateLimitError); ok {\n\tlog.Println(\"hit rate limit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting GitHub API Secondary Rate Limit Errors\nDESCRIPTION: Example of checking for GitHub API secondary rate limit errors by testing if the error type is *github.AbuseRateLimitError.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nrepos, _, err := client.Repositories.List(ctx, \"\", nil)\nif _, ok := err.(*github.AbuseRateLimitError); ok {\n\tlog.Println(\"hit secondary rate limit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting AcceptedError Responses - go-github - Go\nDESCRIPTION: This Go snippet demonstrates checking if an API error returned by a client call is of type *github.AcceptedError, which indicates GitHub scheduled the request and the data is not ready yet (202 Accepted). It requires the go-github client and proper error checking. The function ListContributorsStats is called, and the error is type-asserted to inform the user if response was scheduled on the server side. Inputs are API call parameters; outputs log scheduling status.\nSOURCE: https://github.com/google/go-github/blob/master/README.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nstats, _, err := client.Repositories.ListContributorsStats(ctx, org, repo)\nif _, ok := err.(*github.AcceptedError); ok {\n\tlog.Println(\"scheduled on GitHub side\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting Go API Methods with GitHub REST Mappings - Go\nDESCRIPTION: This Go code snippet demonstrates the proper style for documenting an exported method in the go-github project. It includes a Go Doc comment immediately above the method with a brief description, a GitHub API documentation URL, and a `//meta:operation` directive for code generation. The method signature follows Go idioms and takes context and params, returning related API types. The snippet assumes dependencies like `context`, `fmt`, and project-specific types; it expects input API parameters and outputs a repository pointer, response, and error. The comment structure and use of `u := fmt.Sprintf...` helps the code generator map and maintain API coverage.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Get fetches a repository.\n//\n// GitHub API docs: https://docs.github.com/rest/repos/repos#get-a-repository\n//\n//meta:operation GET /repos/{owner}/{repo}\nfunc (s *RepositoriesService) Get(ctx context.Context, owner, repo string) (*Repository, *Response, error) {\nu := fmt.Sprintf(\"repos/%v/%v\", owner, repo)\nreq, err := s.client.NewRequest(\"GET\", u, nil)\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Generators and Mod Tidy with Shell Script - Bash\nDESCRIPTION: This bash script (script/generate.sh) executes code generators and runs 'go mod tidy' on all modules to keep dependencies updated. When called with '--check', it verifies that generated files are current. It depends on Go code generators and a compatible Go environment and supports an optional '--check' flag as a parameter.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nscript/generate.sh --check\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code with Shell Script - Bash\nDESCRIPTION: This bash snippet refers to the usage of a shell script (script/fmt.sh) that formats all Go code in the repository using standard Go formatting tools. The script ensures code consistency across the codebase but requires the Go toolchain (with formatting tools like gofmt) to be installed. Running it will modify files for formatting compliance; it does not take input parameters.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscript/fmt.sh\n```\n\n----------------------------------------\n\nTITLE: Running Linters and Generated File Checks with Shell Script - Bash\nDESCRIPTION: The script/lint.sh bash script runs static linters on the project and checks if generated files are up to date. It depends on having linters (e.g. golint, staticcheck) installed and outputs linting and code generation status. No additional input parameters are specified.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nscript/lint.sh\n```\n\n----------------------------------------\n\nTITLE: Executing All Tests with Shell Script - Bash\nDESCRIPTION: The script/test.sh bash script runs test suites on all Go modules within the project for verification and validation. It assumes a Go environment with all necessary dependencies installed and outputs the results of running go tests across modules. There are no mentioned arguments or configuration files required.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nscript/test.sh\n```\n\n----------------------------------------\n\nTITLE: Running Metadata Extraction with Shell Script - Bash\nDESCRIPTION: This snippet calls script/metadata.sh, which executes the (tools/metadata) binary for extracting or validating project metadata. The context indicates tighter project tooling integration but does not specify input/output beyond referencing a dedicated metadata tool. The script relies on tools/metadata being built or available on PATH.\nSOURCE: https://github.com/google/go-github/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscript/metadata.sh\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with go-github - Shell\nDESCRIPTION: This command demonstrates how to execute the go-github project's integration tests against the live GitHub API using an OAuth token for authentication. It requires setting the GITHUB_AUTH_TOKEN environment variable before invoking Go's test tool with the \\\"integration\\\" tag and test directory. The integration tests are intended to validate real API behavior, may exhaust API rate limits quickly, and should ideally be run against a dedicated test account.\nSOURCE: https://github.com/google/go-github/blob/master/test/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_AUTH_TOKEN=XXX go test -v -tags=integration ./integration\n```\n\n----------------------------------------\n\nTITLE: Running the Fields Mapping Tool with go-github - Shell\nDESCRIPTION: This command shows how to run the field mapping tool within the go-github project to identify unmapped GitHub API response fields. It uses an OAuth token for authenticated API access and runs the fields.go script directly with Go. The tool only reads data and is less intrusive than integration tests, but may still exhaust the API rate limit quickly.\nSOURCE: https://github.com/google/go-github/blob/master/test/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_AUTH_TOKEN=XXX go run ./fields/fields.go\n```\n\n----------------------------------------\n\nTITLE: Running Authorizations API Integration Tests with go-github - Shell\nDESCRIPTION: This command illustrates how to execute specific integration tests for the GitHub Authorizations API in the go-github project. It requires several environment variables (GITHUB_USERNAME, GITHUB_PASSWORD, GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET) for authenticating and authorizing the requests. The command limits test execution to Authorizations-related cases and uses the \\\"integration\\\" tag; missing variables will cause related tests to be skipped.\nSOURCE: https://github.com/google/go-github/blob/master/test/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGITHUB_USERNAME='<GH_USERNAME>' GITHUB_PASSWORD='<GH_PASSWORD>' GITHUB_CLIENT_ID='<CLIENT_ID>' GITHUB_CLIENT_SECRET='<CLIENT_SECRET>' go test -v -tags=integration -run=Authorizations ./integration\n```"
  }
]