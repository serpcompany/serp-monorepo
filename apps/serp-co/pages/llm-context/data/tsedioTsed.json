[
  {
    "owner": "tsedio",
    "repo": "tsed",
    "content": "TITLE: Installing Ts.ED CLI with npm\nDESCRIPTION: Use npx to run the Ts.ED CLI and initialize a new project in the current directory.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p @tsed/cli tsed init .\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Using Package Managers\nDESCRIPTION: Commands for initializing a new Ts.ED project using different package managers (npm, yarn, pnpm, and bun). Each command creates a conventional base structure for a new Ts.ED project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/getting-started.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p @tsed/cli tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn set version berry\nyarn dlx -p @tsed/cli tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpx -p @tsed/cli tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\nbnx -p @tsed/cli tsed init .\n```\n\n----------------------------------------\n\nTITLE: Using Authentication with Swagger Documentation in Ts.ED\nDESCRIPTION: Demonstrates configuring authentication with additional Swagger documentation requirements using multiple decorators for comprehensive API documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, UseAuth} from \"@tsed/common\";\nimport {Security, Returns} from \"@tsed/schema\";\nimport {CustomAuth} from \"../middlewares/CustomAuth\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  @UseAuth(CustomAuth)\n  @Security(\"bearer\")\n  @Returns(401).Description(\"Unauthorized\")\n  @Returns(403).Description(\"Forbidden\")\n  get() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing REST API with Jest and SuperTest\nDESCRIPTION: Example of testing a REST API endpoint using Jest, SuperTest, and PlatformTest.bootstrap() to set up the server for integration testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport * as SuperTest from \"supertest\";\nimport {Server} from \"../Server.js\";\n\ndescribe(\"Rest\", () => {\n  beforeAll(PlatformTest.bootstrap(Server));\n  afterAll(PlatformTest.reset);\n\n  describe(\"GET /rest/calendars\", () => {\n    it(\"should do something\", async () => {\n      const request = SuperTest(PlatformTest.callback());\n      const response = await request.get(\"/rest/calendars\").expect(200);\n\n      expect(typeof response.body).toEqual(\"array\");\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with Mocked Service using PlatformTest.bootstrap()\nDESCRIPTION: Example demonstrating how to mock a service during integration testing using PlatformTest.bootstrap(). This approach allows testing the full server while replacing specific services with mock implementations to avoid side effects like database operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport SuperTest from \"supertest\";\nimport {Server} from \"../../Server\";\n\ndescribe(\"SomeIntegrationTestWithDB\", () => {\n  beforeAll(\n    PlatformTest.bootstrap(Server, {\n      imports: [\n        {\n          token: DbService,\n          use: {\n            getData: () => {\n              return \"test\";\n            }\n          }\n        }\n      ]\n    })\n  );\n  afterAll(PlatformTest.reset);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Validator Pipe in Ts.ED\nDESCRIPTION: Demonstrates how to create a custom validation pipe using class-validator and class-transformer libraries in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, OverrideProvider} from \"@tsed/di\";\nimport {ValidationPipe} from \"@tsed/platform-params\";\nimport {ParamMetadata} from \"@tsed/platform-params\";\nimport {plainToClass} from \"class-transformer\";\nimport {validate} from \"class-validator\";\n\n@Injectable()\n@OverrideProvider(ValidationPipe)\nexport class ClassValidationPipe extends ValidationPipe {\n  async transform(value: any, metadata: ParamMetadata) {\n    if (this.shouldValidate(metadata)) {\n      const object = plainToClass(metadata.type, value);\n      const errors = await validate(object);\n      if (errors.length > 0) {\n        throw new Error('Validation failed');\n      }\n      return value;\n    }\n    return value;\n  }\n\n  private shouldValidate(metadata: ParamMetadata): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.some((type) => metadata.type === type) && metadata.type !== undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Server Configuration in TypeScript\nDESCRIPTION: Example of how to customize the server configuration using the @Configuration decorator in the Server.ts file.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  rootDir: process.cwd()\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Middleware in Ts.ED\nDESCRIPTION: Shows how to create a global middleware that logs the start and end of request processing. It uses the @Middleware decorator and implements the use method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Middleware, Context, Req} from \"@tsed/common\";\nimport {Logger} from \"@tsed/logger\";\n\n@Middleware()\nexport class GlobalMiddleware {\n  constructor(private logger: Logger) {}\n\n  use(@Req() req: Req, @Context() ctx: Context) {\n    this.logger.info(\"Start request\");\n\n    ctx.response.onEnd(() => {\n      this.logger.info(\"End request\");\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic Ts.ED server configuration using TypeScript decorators. It sets up the server port and middleware.\nSOURCE: https://github.com/tsedio/tsed/blob/production/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport \"@tsed/platform-express\";\nimport cookieParser from \"cookie-parser\";\nimport compress from \"compress\";\nimport methodOverride from \"method-override\";\n\n@Configuration({\n  port: 3000,\n  middlewares: [\"cookie-parser\", \"compression\", \"method-override\", \"json-parser\", \"urlencoded-parser\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files in Ts.ED\nDESCRIPTION: Example of configuring static file serving using the @Configuration decorator with different hooks.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-api.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  statics: {\n    \"/before\": [\n      {\n        root: `${process.cwd()}/public`,\n        hook: \"$beforeRoutesInit\"\n        // ... statics options\n      }\n    ],\n    \"/after\": [\n      {\n        root: `${process.cwd()}/public`,\n        hook: \"$afterRoutesInit\"\n        // ... statics options\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Auth Decorator in Controller in Ts.ED\nDESCRIPTION: Example of applying the custom Auth decorator to protect routes in a controller, simplifying authentication configuration with a single decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get} from \"@tsed/common\";\nimport {Auth} from \"../decorators/Auth\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  @Auth()\n  get() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Platform API\nDESCRIPTION: Example of configuring a Ts.ED server using Platform API with middleware and views configuration through the @Configuration decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-api.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Constant} from \"@tsed/di\";\nimport {MyMiddleware} from \"./MyMiddleware.js\";\n\n@Configuration({\n  views: {\n    root: `${process.cwd()}/views`,\n    viewEngine: \"ejs\"\n  },\n  middlewares: [MyMiddleware, \"cookie-parser\", \"compression\", \"method-override\"]\n})\nexport class Server {\n  @Constant(\"viewsDir\")\n  viewsDir: string;\n\n  $beforeRoutesInit() {\n    console.log(this.viewsDir);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Decorators in Ts.ED\nDESCRIPTION: Demonstrates how to use various parameter decorators in Ts.ED controllers to extract data from the request, including path parameters, query parameters, and body.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, PathParams, QueryParams, BodyParams, Required, Status, Returns} from \"@tsed/schema\";\n\n@Controller(\"/params\")\nexport class ParamsController {\n  @Get(\"/\")\n  getAll(\n    @QueryParams(\"page\") page: number,\n    @QueryParams(\"perPage\") perPage: number\n  ) {\n    return {\n      page,\n      perPage\n    };\n  }\n\n  @Get(\"/:id\")\n  getById(@PathParams(\"id\") id: string) {\n    return {id: id};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Array Body Parameters in Ts.ED\nDESCRIPTION: Demonstrates how to handle array body parameters in a POST request using the @BodyParams decorator in Ts.ED controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, BodyParams} from \"@tsed/schema\";\n\n@Controller(\"/post\")\nexport class PostArrayController {\n  @Post(\"/\")\n  post(@BodyParams() data: string[]) {\n    console.log(\"Is data an Array ??\", data instanceof Array); // true\n    return {data};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Ts.ED\nDESCRIPTION: Demonstrates how to access request headers using the @HeaderParams decorator in Ts.ED controllers to extract specific header values from the request.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {HeaderParams} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  get(\n    @HeaderParams(\"x-token\") token: string,\n    @HeaderParams(\"host\") host: string\n  ) {\n    console.log(\"token\", token);\n    console.log(\"host\", host);\n\n    return {host};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context in Controllers and Middlewares with Ts.ED\nDESCRIPTION: Example showing how to use the Context object in a Ts.ED application to share data between middleware and controller endpoints. The middleware stores an AuthToken in the context, and the controller retrieves it.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Context} from \"@tsed/platform-params\";\nimport {Middleware, UseBefore} from \"@tsed/platform-middlewares\";\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {Forbidden} from \"@tsed/exceptions\";\nimport {AuthToken} from \"../domain/auth/AuthToken.js\";\n\n@Middleware()\nclass AuthTokenMiddleware {\n  use(@Context() ctx: Context) {\n    if (!ctx.has(\"auth\")) {\n      ctx.set(\"auth\", new AuthToken(ctx.request));\n    }\n\n    try {\n      ctx.get(\"auth\").claims(); // check token\n    } catch (er) {\n      throw new Forbidden(\"Access forbidden - Bad token\");\n    }\n  }\n}\n\n@Controller(\"/\")\n@UseBefore(AuthTokenMiddleware) // protect all routes for this controller\nclass MyCtrl {\n  @Get(\"/\")\n  get(@Context() context: Context, @Context(\"auth\") auth: AuthToken) {\n    context.logger.info({event: \"auth\", auth}); // Attach log to the request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Validation Decorators in Ts.ED\nDESCRIPTION: Example of a model class with various validation decorators to enforce constraints on properties including length, range, format, and pattern validation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, MaxLength, MinLength, Minimum, Maximum, Format, Enum, Pattern, Email} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @MaxLength(20)\n  @MinLength(3)\n  @Required()\n  title: string;\n\n  @Minimum(0)\n  @Maximum(10)\n  rating: number;\n\n  @Email()\n  email: string;\n\n  @Format(\"date\") // or date-time, etc...\n  createDate: Date;\n\n  @Pattern(/hello/)\n  customInput: string;\n\n  @Enum(\"value1\", \"value2\")\n  customInput: \"value1\" | \"value2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Ts.ED Server with Express\nDESCRIPTION: This code snippet shows how to bootstrap a Ts.ED server using the Express platform. It initializes the server and starts listening for requests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/logger\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\nasync function bootstrap() {\n  try {\n    $log.debug(\"Start server...\");\n    const platform = await PlatformExpress.bootstrap(Server);\n\n    await platform.listen();\n    $log.debug(\"Server initialized\");\n  } catch (er) {\n    $log.error(er);\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Ts.ED Server\nDESCRIPTION: Shows how to bootstrap a Ts.ED server using the Platform API with Express integration. Includes error handling and logging.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-http/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/logger\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\nasync function bootstrap() {\n  try {\n    $log.debug(\"Start server...\");\n    const platform = await PlatformExpress.bootstrap(Server);\n\n    await platform.listen();\n    $log.debug(\"Server initialized\");\n  } catch (er) {\n    $log.error(er);\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Ts.ED Server\nDESCRIPTION: Shows how to bootstrap a Ts.ED server using the Platform API with Express platform. Includes error handling and logging.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/common/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/logger\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\nasync function bootstrap() {\n  try {\n    $log.debug(\"Start server...\");\n    const platform = await PlatformExpress.bootstrap(Server);\n\n    await platform.listen();\n    $log.debug(\"Server initialized\");\n  } catch (er) {\n    $log.error(er);\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authentication Middleware in Ts.ED\nDESCRIPTION: Implementation of a custom authentication middleware that uses Passport.js methods to protect routes and handle token verification.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Context, Middleware, Req} from \"@tsed/common\";\nimport Passport from \"passport\";\n\n@Middleware()\nexport class CustomAuth {\n  use(@Req() request: Req, @Context() ctx: Context) {\n    return new Promise((resolve, reject) => {\n      const options = {\n        ...ctx.endpoint.get(CustomAuth) || {}\n      };\n\n      Passport.authenticate(\"jwt\", options, (err, user, info) => {\n        if (err) {\n          return reject(err);\n        }\n\n        request.user = user;\n\n        if (!user) {\n          return reject(new Unauthorized(\"Unauthorized\"));\n        }\n\n        if (options.role && !options.role.includes(user.role)) {\n          return reject(new Forbidden(\"Forbidden\"));\n        }\n\n        return resolve(user);\n      })(request);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Models with Body Parameters in Ts.ED\nDESCRIPTION: Shows how to use model classes with body parameters in Ts.ED controllers to automatically validate and transform request bodies.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, BodyParams, Required, Property} from \"@tsed/schema\";\n\nclass Person {\n  @Required()\n  name: string;\n\n  @Property()\n  age: number;\n}\n\n@Controller(\"/post\")\nexport class PostModelController {\n  @Post(\"/\")\n  post(@BodyParams() data: Person) {\n    console.log(\"Is data a Person ??\", data instanceof Person); // true\n    return {data};\n  }\n\n  @Post(\"/array\")\n  postArray(@BodyParams() data: Person[]) {\n    console.log(\n      \"Is data[0] a Person ??\",\n      (data as Person[]).length && data[0] instanceof Person\n    ); // true\n    return {data};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Exception Filter in Ts.ED\nDESCRIPTION: Example of implementing a custom exception filter for handling HTTP exceptions in a standardized way.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Catch, ExceptionFilterMethods, PlatformContext} from \"@tsed/common\";\nimport {Exception} from \"@tsed/exceptions\";\n\n@Catch(Exception)\nexport class HttpExceptionFilter implements ExceptionFilterMethods {\n  catch(exception: Exception, ctx: PlatformContext) {\n    const {response, logger, request} = ctx;\n    const error = this.mapError(exception);\n    const headers = this.getHeaders(exception);\n\n    logger.error({\n      error,\n      origin: exception.origin,\n      url: request.url\n    });\n\n    response\n      .setHeaders(headers)\n      .status(exception.status)\n      .body(error);\n  }\n\n  mapError(error: Exception) {\n    return {\n      name: error.name,\n      message: error.message,\n      status: error.status,\n      errors: error.errors\n    };\n  }\n\n  getHeaders(exception: Exception) {\n    return exception.headers || {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Socket.io Service with Jest in Ts.ED\nDESCRIPTION: Example showing how to test a Socket.io service using Jest testing framework. Demonstrates setting up a test WebSocket service, establishing connections, and testing socket events using @tsed/socketio-testing package. Includes both service implementation and test cases.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Emit, Input, SocketIOServer, SocketService, SocketSession, SocketUseBefore} from \"@tsed/socketio\";\nimport {SocketClientService} from \"@tsed/socketio-testing\";\nimport {Namespace, Socket as IOSocket} from \"socket.io\";\nimport {Server} from \"./app/Server\";\n\n@SocketService(\"/test\")\nexport class TestWS {\n  @Inject()\n  private io: SocketIOServer;\n\n  $onConnection(socket: IOSocket, nsp: Namespace) {}\n\n  $onDisconnect(socket: IOSocket, nsp: Namespace) {}\n\n  @Input(\"input:scenario1\")\n  @Emit(\"output:scenario1\")\n  async scenario1() {\n    return \"My message\";\n  }\n}\n\ndescribe(\"Socket integration\", () => {\n  beforeAll(\n    PlatformTest.bootstrap(Server, {\n      adapter: PlatformExpress,\n      listen: true,\n      httpPort: 8999,\n      imports: [TestWS]\n    })\n  );\n  afterAll(PlatformTest.reset);\n\n  describe(\"RoomWS: eventName\", () => {\n    it(\"should return the data\", async () => {\n      const service = PlatformTest.get<SocketClientService>(SocketClientService);\n      const client = await service.get(\"/test\");\n      const client2 = await service.get(\"/test\");\n\n      expect(client).toEqual(client2);\n\n      return new Promise((resolve) => {\n        client.on(\"output:scenario1\", (result) => {\n          expect(result).toEqual(\"My message\");\n          resolve();\n        });\n\n        client.emit(\"input:scenario1\");\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Injectable with Configuration Options in Ts.ED\nDESCRIPTION: Shows how to use the @Injectable decorator with configuration options to define a provider's scope and behavior.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nclass CalendarService {\n  $onInit() {\n    // initialization logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Controller in Ts.ED\nDESCRIPTION: This example demonstrates how to create a controller for managing users in Ts.ED. It includes methods for CRUD operations and uses decorators for routing, parameter injection, and OpenAPI documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {Summary} from \"@tsed/swagger\";\nimport {\n  Controller,\n  Get,\n  QueryParams,\n  PathParams,\n  Delete,\n  Post,\n  Required,\n  BodyParams,\n  Status,\n  Put,\n  Returns,\n  ReturnsArray\n} from \"@tsed/schema\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {UsersService} from \"../services/UsersService.js\";\nimport {User} from \"../models/User.js\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private usersService: UsersService;\n\n  @Get(\"/:id\")\n  @Summary(\"Get a user from his Id\")\n  @Returns(User)\n  async getUser(@PathParams(\"id\") id: string): Promise<User> {\n    return this.usersService.findById(id);\n  }\n\n  @Post(\"/\")\n  @Status(201)\n  @Summary(\"Create a new user\")\n  @Returns(User)\n  async postUser(@Required() @BodyParams() user: User): Promise<User> {\n    return this.usersService.save(user);\n  }\n\n  @Put(\"/:id\")\n  @Status(201)\n  @Summary(\"Update the given user\")\n  @Returns(User)\n  async putUser(@PathParams(\"id\") id: string, @Required() @BodyParams() user: User): Promise<User> {\n    if (user.id !== id) {\n      throw new BadRequest(\"ID mismatch with the given payload\");\n    }\n\n    return this.usersService.save(user);\n  }\n\n  @Delete(\"/:id\")\n  @Summary(\"Remove a user\")\n  @Status(204)\n  async deleteUser(@PathParams(\"id\") @Required() id: string): Promise<User> {\n    await this.usersService.delete(user);\n  }\n\n  @Get(\"/\")\n  @Summary(\"Get all users\")\n  @(Returns(200, Array).Of(User))\n  async findUser(@QueryParams(\"name\") name: string) {\n    return this.usersService.find({name});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Options in Ts.ED\nDESCRIPTION: Example of configuring HTTPS options for a Ts.ED server, including key, passphrase, and certificate settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  httpsOptions: {\n    key: \"<string>\",\n    passphrase: \"<string>\",\n    cert: \"<string>\"\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Injecting PrismaService in a Custom Service with Ts.ED\nDESCRIPTION: This snippet demonstrates how to inject the PrismaService into a custom service using Ts.ED decorators. This allows direct access to the Prisma client in your service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {PrismaService} from \"@tsed/prisma\";\n\n@Injectable()\nexport class MyService {\n  @Inject()\n  protected prisma: PrismaService;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with Ts.ED and Prisma\nDESCRIPTION: This snippet shows the implementation of a UsersController using Ts.ED decorators and Prisma repository. It includes methods for creating a new user and retrieving all users.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Groups, Returns, Summary, Get, Post} from \"@tsed/schema\";\nimport {UserModel, UsersRepository} from \"@tsed/prisma\";\n\n@Controller(\"/users\")\nexport class UsersController {\n  @Inject()\n  protected service: UsersRepository;\n\n  @Post(\"/\")\n  @Summary(\"Create a new user\")\n  @Returns(201, UserModel)\n  async signupUser(@BodyParams() @Groups(\"creation\") user: UserModel): Promise<UserModel> {\n    return this.service.create({data: user});\n  }\n\n  @Get(\"/\")\n  @Summary(\"Filter posts by title or content\")\n  @(Returns(200, Array).Of(UserModel).Description(\"Return a list of User\"))\n  getAll() {\n    return this.service.findMany();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Configuration\nDESCRIPTION: Server configuration showing controller mounting and route setup\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/create-your-first-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/ajv\";\nimport \"@tsed/swagger\";\nimport {config} from \"./config/index\";\nimport * as rest from \"./controllers/rest/index\";\nimport * as pages from \"./controllers/pages/index\";\n\n@Configuration({\n  ...config,\n  mount: {\n    \"/rest\": [\n      ...Object.values(rest)\n    ],\n    \"/\": [...Object.values(pages)]\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using Axios for Proxying API Calls in Ts.ED\nDESCRIPTION: Shows how to proxy API calls using Axios in a Ts.ED controller, allowing the framework to handle Axios responses and convert them to Express.js responses.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport Axios from \"axios\";\n\n@Controller(\"/\")\nexport class AxiosCtrl {\n  @Get(\"/axios\")\n  async axios() {\n    return Axios.get(\"https://tsed.io\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Controller in Ts.ED\nDESCRIPTION: Demonstrates how to create a basic controller with a GET endpoint using the @Controller decorator to define a base path and the @Get decorator to map HTTP GET requests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  @Get(\"/\")\n  findAll() {\n    return [\"This is a basic controller\"];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'any' Type with Body Parameters in Ts.ED\nDESCRIPTION: Demonstrates how to use the 'any' type and @Any decorator with body parameters in Ts.ED controllers to handle arbitrary data structures.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, BodyParams, Any} from \"@tsed/schema\";\n\n@Controller(\"/post\")\nexport class PostAnyController {\n  @Post(\"/\")\n  post(\n    @Any() // Required since v6 to accept any type\n    @BodyParams() data: any\n  ) {\n    return {data};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Transformer Pipe in Ts.ED\nDESCRIPTION: Shows how to create a custom deserializer pipe using class-transformer library in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, OverrideProvider} from \"@tsed/di\";\nimport {DeserializerPipe} from \"@tsed/platform-params\";\nimport {ParamMetadata} from \"@tsed/platform-params\";\nimport {plainToClass} from \"class-transformer\";\n\n@Injectable()\n@OverrideProvider(DeserializerPipe)\nexport class ClassTransformerPipe extends DeserializerPipe {\n  transform(value: any, metadata: ParamMetadata) {\n    if (this.shouldValidate(metadata)) {\n      return plainToClass(metadata.type, value);\n    }\n\n    return value;\n  }\n\n  private shouldValidate(metadata: ParamMetadata): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.some((type) => metadata.type === type) && metadata.type !== undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Options\nDESCRIPTION: Example of router configuration showing how to control the order of route registration with appendChildrenRoutesFirst option.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  router: {\n    appendChildrenRoutesFirst: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Express.js Application with Ts.ED\nDESCRIPTION: Implementation of bootstrap function to initialize a Ts.ED application with Express.js platform adapter.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-api.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/logger\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./server\";\n\nasync function bootstrap() {\n  try {\n    $log.debug(\"Start server...\");\n    const platform = await PlatformExpress.bootstrap(Server, {\n      // extra settings\n    });\n\n    await platform.listen();\n    $log.debug(\"Server initialized\");\n  } catch (er) {\n    $log.error(er);\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Input Validation in Ts.ED Controllers\nDESCRIPTION: Demonstrates how to validate request input data using schema decorators in Ts.ED controllers to ensure data integrity before processing requests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, PathParams, QueryParams, Min, Max, Enum, Required} from \"@tsed/schema\";\n\nenum MyEnum {\n  OPTION1 = \"option1\",\n  OPTION2 = \"option2\"\n}\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  get(\n    @Required()\n    @Enum(MyEnum)\n    @QueryParams(\"option\")\n    option: MyEnum,\n    @Min(0)\n    @Max(100)\n    @QueryParams(\"number\")\n    number: number\n  ) {\n    return {option, number};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST API Controller in Ts.ED\nDESCRIPTION: Example of a REST API controller implementation for user management. Shows usage of decorators for route definition, parameter validation, and swagger documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/common/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {Summary} from \"@tsed/swagger\";\nimport {\n  Returns,\n  ReturnsArray,\n  Controller,\n  Get,\n  QueryParams,\n  PathParams,\n  Delete,\n  Post,\n  Required,\n  BodyParams,\n  Status,\n  Put\n} from \"@tsed/schema\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {UsersService} from \"../services/UsersService.js\";\nimport {User} from \"../models/User.js\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  protected usersService: UsersService;\n\n  @Get(\"/:id\")\n  @Summary(\"Get a user from his Id\")\n  @Returns(User)\n  async getUser(@PathParams(\"id\") id: string): Promise<User> {\n    return this.usersService.findById(id);\n  }\n\n  @Post(\"/\")\n  @Status(201)\n  @Summary(\"Create a new user\")\n  @Returns(User)\n  async postUser(@Required() @BodyParams() user: User): Promise<User> {\n    return this.usersService.save(user);\n  }\n\n  @Put(\"/:id\")\n  @Status(201)\n  @Summary(\"Update the given user\")\n  @Returns(User)\n  async putUser(@PathParams(\"id\") id: string, @Required() @BodyParams() user: User): Promise<User> {\n    if (user.id !== id) {\n      throw new BadRequest(\"ID mismatch with the given payload\");\n    }\n\n    return this.usersService.save(user);\n  }\n\n  @Delete(\"/:id\")\n  @Summary(\"Remove a user\")\n  @Status(204)\n  async deleteUser(@PathParams(\"id\") @Required() id: string): Promise<User> {\n    await this.usersService.delete(user);\n  }\n\n  @Get(\"/\")\n  @Summary(\"Get all users\")\n  @ReturnsArray(User)\n  async findUser(@QueryParams(\"name\") name: string) {\n    return this.usersService.find({name});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration via Dependency Injection\nDESCRIPTION: Shows how to inject and access configuration in services, controllers, or middlewares using dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Injectable} from \"@tsed/di\";\n\n@Injectable() // or Controller or Middleware\nexport class MyService {\n  constructor(@Configuration() configuration: Configuration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Async Controller in Ts.ED\nDESCRIPTION: Shows how to use async/await and Promises in a Ts.ED controller to handle asynchronous operations with proper error handling.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/async\")\nexport class AsyncController {\n  @Get(\"/\")\n  async findAll() {\n    return new Promise((resolve) => {\n      resolve([\"This is a async controller\"]);\n    });\n  }\n\n  @Get(\"/error\")\n  async findError() {\n    throw new Error(\"Bad request\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration with dotenv-flow in Ts.ED\nDESCRIPTION: Shows how to use dotenv-flow to load environment variables from multiple .env files based on NODE_ENV. This approach allows for environment-specific configuration with fallback to default values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/load-configuration-from-file.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/common\";\nimport {$log} from \"@tsed/logger\";\nimport * as dotenvFlow from \"dotenv-flow\";\nimport * as path from \"path\";\n\ndotenvFlow.config();\n\nexport const rootDir = __dirname;\n\n@Configuration({\n  rootDir,\n  port: process.env.PORT\n})\nexport class Server {\n  @Inject()\n  app: PlatformApplication;\n\n  $beforeInit() {\n    $log.debug(\"Do something before init\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller in Ts.ED\nDESCRIPTION: Comprehensive example of a REST controller implementation for user management. Shows usage of decorators for routing, parameter validation, and swagger documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-http/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {Summary} from \"@tsed/swagger\";\nimport {\n  Returns,\n  ReturnsArray,\n  Controller,\n  Get,\n  QueryParams,\n  PathParams,\n  Delete,\n  Post,\n  Required,\n  BodyParams,\n  Status,\n  Put\n} from \"@tsed/schema\";\nimport {BadRequest} from \"@tsed/exceptions\";\nimport {UsersService} from \"../services/UsersService.js\";\nimport {User} from \"../models/User.js\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  protected usersService: UsersService;\n\n  @Get(\"/:id\")\n  @Summary(\"Get a user from his Id\")\n  @Returns(User)\n  async getUser(@PathParams(\"id\") id: string): Promise<User> {\n    return this.usersService.findById(id);\n  }\n\n  @Post(\"/\")\n  @Status(201)\n  @Summary(\"Create a new user\")\n  @Returns(User)\n  async postUser(@Required() @BodyParams() user: User): Promise<User> {\n    return this.usersService.save(user);\n  }\n\n  @Put(\"/:id\")\n  @Status(201)\n  @Summary(\"Update the given user\")\n  @Returns(User)\n  async putUser(@PathParams(\"id\") id: string, @Required() @BodyParams() user: User): Promise<User> {\n    if (user.id !== id) {\n      throw new BadRequest(\"ID mismatch with the given payload\");\n    }\n\n    return this.usersService.save(user);\n  }\n\n  @Delete(\"/:id\")\n  @Summary(\"Remove a user\")\n  @Status(204)\n  async deleteUser(@PathParams(\"id\") @Required() id: string): Promise<User> {\n    await this.usersService.delete(user);\n  }\n\n  @Get(\"/\")\n  @Summary(\"Get all users\")\n  @ReturnsArray(User)\n  async findUser(@QueryParams(\"name\") name: string) {\n    return this.usersService.find({name});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Injectable Service Implementation in Ts.ED\nDESCRIPTION: Demonstrates creating a simple CalendarService provider using both decorator-based and functional approaches. Shows how to define and inject dependencies.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Service()\nclass CalendarService {\n  $onInit() {\n    // initialization logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Service with Jest in Ts.ED\nDESCRIPTION: Example of unit testing a ParseService using Jest in a Ts.ED application. It demonstrates creating a test context, injecting the service, and testing its functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/common\";\nimport {ParseService} from \"./ParseService\";\n\ndescribe(\"ParseService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  it(\"should convert string to a number\", async () => {\n    const service = PlatformTest.get(ParseService);\n\n    expect(service.toNumber(\"1\")).toEqual(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Complete CRUD Controller Implementation\nDESCRIPTION: Full implementation of CalendarsController with CRUD operations\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/create-your-first-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {CalendarModel} from \"../models/CalendarModel\";\n\n@Controller(\"/calendars\")\nexport class CalendarsController {\n  @Get(\"/\")\n  getAll() {\n    const model = new CalendarModel();\n    model.id = \"1\";\n    model.name = \"My calendar\";\n    model.description = \"My calendar description\";\n\n    return [model];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ApolloService in Ts.ED\nDESCRIPTION: Demonstrates how to retrieve and use an ApolloServer instance using ApolloService in a Ts.ED service class. Shows dependency injection and lifecycle hook implementation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterRoutesInit} from \"@tsed/platform-http\";\nimport {Injectable} from \"@tsed/di\";\nimport {graphQLService} from \"@tsed/apollo\";\nimport {ApolloServer} from \"@apollo/server\";\n\n@Injectable()\nexport class UsersService implements AfterRoutesInit {\n  @Injec()\n  apolloService: ApolloService;\n\n  private server: ApolloServer;\n\n  $afterRoutesInit() {\n    this.server = this.apolloService.get(\"server1\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Ts.ED Application\nDESCRIPTION: Commands to start a Ts.ED application after installation using various package managers. Each command launches the development server.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Middleware in Ts.ED\nDESCRIPTION: Demonstrates how to create a custom middleware class using the @Middleware decorator. The middleware logs the current date and uses dependency injection for the Logger service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Middleware, Context, Req, Next} from \"@tsed/common\";\nimport {Logger} from \"@tsed/logger\";\n\n@Middleware()\nexport class CustomMiddleware {\n  constructor(private logger: Logger) {}\n\n  use(@Req() req: Req, @Context() ctx: Context, @Next() next: Next) {\n    this.logger.info(\"Current date\", new Date().toISOString());\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ts.ED Controller for AWS Lambda\nDESCRIPTION: Example of a Ts.ED controller that will be used with AWS Lambda, showing routing, dependency injection, and response handling with proper imports from the recommended packages.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\"; // /!\\ don't import decorators from @tsed/common\nimport {TimeslotsService} from \"../services/TimeslotsService\";\nimport {TimeslotModel} from \"../models/TimeslotModel\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsController {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  getAll(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Observable, Stream, and Buffer Responses in Ts.ED\nDESCRIPTION: Demonstrates how to return Observable, Stream, or Buffer responses in Ts.ED controllers for advanced response handling scenarios.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, Returns} from \"@tsed/schema\";\nimport {Observable, of} from \"rxjs\";\nimport {createReadStream} from \"fs\";\n\n@Controller(\"/\")\nexport class ObservableCtrl {\n  @Get(\"/observable\")\n  @Returns(200).ContentType(\"application/json\")\n  findAll(): Observable<any[]> {\n    return of([{id: \"1\"}]);\n  }\n\n  @Get(\"/stream\")\n  @Returns(200).ContentType(\"application/octet-stream\")\n  stream() {\n    return createReadStream(\"/path/file.json\");\n  }\n\n  @Get(\"/buffer\")\n  @Returns(200).ContentType(\"application/octet-stream\")\n  buffer() {\n    return Buffer.from(\"Hello\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Layout for Logger in Production\nDESCRIPTION: TypeScript code to configure JSON layout for the logger in production mode, including setting up stdout and stderr appenders and disabling routes summary.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {env} from \"@tsed/core\";\nimport {Configuration} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport \"@tsed/platform-express\";\n\nexport const isProduction = process.env.NODE_ENV === Env.PROD;\n\nif (isProduction) {\n  $log.appenders.set(\"stdout\", {\n    type: \"stdout\",\n    levels: [\"info\", \"debug\"],\n    layout: {\n      type: \"json\"\n    }\n  });\n  $log.appenders.set(\"stderr\", {\n    levels: [\"trace\", \"fatal\", \"error\", \"warn\"],\n    type: \"stderr\",\n    layout: {\n      type: \"json\"\n    }\n  });\n}\n\n@Configuration({\n  logger: {\n    disableRoutesSummary: isProduction // remove table with routes summary\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AJV Keyword with CodeGen in Ts.ED\nDESCRIPTION: Implementation of an 'even' validator using AJV's CodeGen module for optimal performance, showing how to use the code method to generate validation logic.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Keyword, KeywordMethods} from \"@tsed/ajv\";\nimport {array, number} from \"@tsed/schema\";\nimport {_, KeywordCxt} from \"ajv\";\n\n@Keyword({\nkeyword: \"even\",\ntype: \"number\",\nschemaType: \"boolean\"\n})\nclass EvenKeyword implements KeywordMethods {\n  code(cxt: KeywordCxt) {\n    const {data, schema} = cxt;\n    const op = schema ? _`!==` : _`===`;\n    cxt.fail(\\_`${data} %2 ${op} 0`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middleware in Ts.ED Server\nDESCRIPTION: Demonstrates how to add a global middleware to the Ts.ED server configuration using the $beforeRoutesInit hook in the Server class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {GlobalMiddleware} from \"./GlobalMiddleware\";\n\n@Configuration({\n  rootDir: __dirname\n})\nexport class Server {\n  $beforeRoutesInit() {\n    this.use(GlobalMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Orm Decorator to Obtain MikroORM Instance\nDESCRIPTION: Demonstrates how to inject and use a MikroORM instance in a service using the @Orm decorator. Includes examples for creating and finding users.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {Orm} from \"@tsed/mikro-orm\";\nimport {MikroORM} from \"@mikro-orm/core\";\n\n@Injectable()\nexport class UsersService {\n  @Orm()\n  private readonly orm!: MikroORM;\n\n  async create(user: User): Promise<User> {\n    // do something\n    // ...\n    // Then save\n    await this.orm.em.persistAndFlush(user);\n    console.log(\"Saved a new user with id: \" + user.id);\n\n    return user;\n  }\n\n  async find(): Promise<User[]> {\n    const users = await this.orm.em.find(User, {});\n    console.log(\"Loaded users: \", users);\n\n    return users;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Validation Decorators in Ts.ED\nDESCRIPTION: Example of a model class with validation decorators. Demonstrates the use of various validation constraints like MaxLength, MinLength, Required, etc.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, MaxLength, MinLength, Minimum, Maximum, Format, Enum, Pattern, Email} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @MaxLength(20)\n  @MinLength(3)\n  @Required()\n  title: string;\n\n  @Minimum(0)\n  @Maximum(10)\n  rating: number;\n\n  @Email()\n  email: string;\n\n  @Format(\"date\") // or date-time, etc...\n  createDate: Date;\n\n  @Pattern(/hello/)\n  customInput: string;\n\n  @Enum(\"value1\", \"value2\")\n  customInput: \"value1\" | \"value2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using UseAuth Decorator for Route Protection in Ts.ED\nDESCRIPTION: Basic example of using the @UseAuth decorator to protect a controller endpoint with a custom authentication middleware.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, UseAuth} from \"@tsed/common\";\nimport {CustomAuth} from \"../middlewares/CustomAuth\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  @UseAuth(CustomAuth) // protect route\n  get() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data in Ts.ED Controller\nDESCRIPTION: Shows how to access various request data like body, params, query, cookies, and session from the PlatformRequest object in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    ctx.request.body; // return body payload\n    ctx.request.params; // return path params\n    ctx.request.query; // return query params\n    ctx.request.cookies; // return cookies\n    ctx.request.session; // return session\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Controllers with PlatformServerlessTest in TypeScript\nDESCRIPTION: Complete example showing how to test a Lambda controller using Ts.ED's PlatformServerlessTest utility. Demonstrates testing both direct lambda invocation and router-based endpoints. Includes setup with beforeEach/afterEach hooks and multiple test cases for different endpoints.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerlessTest} from \"@tsed/platform-serverless-testing\";\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\n\n@Controller(\"/\")\nclass TimeslotsLambdaController {\n  @Get(\"/\")\n  getAll() {\n    return [];\n  }\n\n  @Get(\"/:id\")\n  getById(@PathParams(\"id\") id: string, @QueryParams(\"start_date\") startDate: Date, @QueryParams(\"end_date\") endDate: Date) {\n    return {\n      id,\n      startDate,\n      endDate\n    };\n  }\n}\n\ndescribe(\"TimeslotsLambdaController\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerless, {\n      lambda: [TimeslotsLambdaController]\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  describe(\"Invoke by lambda name\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.call(\"getAll\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n\n    it(\"should call getById Lambda\", async () => {\n      const response = await PlatformServerlessTest.request\n        .call(\"getById\")\n        .params({\n          id: \"1\"\n        })\n        .query({\n          start_date: new Date(\"2020-01-01\"),\n          end_date: new Date(\"2020-01-10\")\n        });\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual({\n        id: \"1\",\n        endDate: \"2020-01-10T00:00:00.000Z\",\n        startDate: \"2020-01-01T00:00:00.000Z\"\n      });\n    });\n  });\n\n  describe(\"invoke using the router\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.get(\"/\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration with dotenv in Ts.ED\nDESCRIPTION: Demonstrates how to load environment variables from a .env file using the dotenv package and incorporate them into a Ts.ED application configuration. The example shows a complete bootstrap file with proper configuration initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/load-configuration-from-file.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/common\";\nimport {$log} from \"@tsed/logger\";\nimport * as dotenv from \"dotenv\";\nimport * as path from \"path\";\n\ndotenv.config({path: path.join(process.cwd(), process.env.NODE_ENV ? `.env.${process.env.NODE_ENV}` : \".env\")});\n\nexport const rootDir = __dirname;\n\n@Configuration({\n  rootDir,\n  port: process.env.PORT\n})\nexport class Server {\n  @Inject()\n  app: PlatformApplication;\n\n  $beforeInit() {\n    $log.debug(\"Do something before init\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in Ts.ED Server\nDESCRIPTION: Example of configuring middleware for a Ts.ED server, including various middleware types and options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, ProviderScope, ProviderType} from \"@tsed/di\";\n\n@Configuration({\n  middlewares: [\n    {use: \"helmet\", hook: \"$afterInit\", options: {contentSecurityPolicy: false}},\n    {use: EnsureHttpsMiddleware, env: Env.PROD},\n    \"cors\",\n    cookieParser(),\n    \"json-parser\",\n    {use: \"encodedurl-parser\", options: {extended: true}},\n    \"compression\",\n    \"method-override\",\n    AuthTokenMiddleware\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Error Middleware in Ts.ED\nDESCRIPTION: Shows how to create an error middleware using the @Middleware decorator and @Err parameter decorator to handle specific types of errors.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Middleware, Err, Req, Res, Next} from \"@tsed/common\";\nimport {CustomError} from \"./CustomError\";\n\n@Middleware()\nexport class ErrorMiddleware {\n  use(@Err() error: any, @Req() request: Req, @Res() response: Res, @Next() next: Next) {\n    if (error instanceof CustomError) {\n      response.status(error.status).json({\n        status: error.status,\n        message: error.message\n      });\n      return next();\n    }\n\n    next(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MongooseService Usage Example\nDESCRIPTION: Demonstrates how to use MongooseService to retrieve Mongoose connection instances in a service class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {MongooseService} from \"@tsed/mongoose\";\n\n@Service()\nexport class MyService {\n  constructor(mongooseService: MongooseService) {\n    const default = mongooseService.get(); // OR mongooseService.get(\"default\");\n    // GET Other connection\n    const db2 = mongooseService.get('db2');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using TypeORM Entity with Ts.ED Controller\nDESCRIPTION: Demonstrates how to define a TypeORM entity with Ts.ED decorators and use it in a controller for CRUD operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Get, Post} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {MYSQL_DATA_SOURCE} from \"../datasources/MySqlDataSource\";\nimport {User} from \"../entities/User\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject(MYSQL_DATA_SOURCE)\n  protected mysqlDataSource: DataSource;\n\n  @Post(\"/\")\n  create(@BodyParams() user: User): Promise<User> {\n    return this.mysqlDataSource.manager.create(User, user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.mysqlDataSource.manager.find(User);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AcceptMime Decorator in Ts.ED\nDESCRIPTION: Implementation of the AcceptMime decorator that registers MIME types and uses PlatformAcceptMimesMiddleware. It demonstrates how to combine multiple decorators and store metadata for middleware use.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-endpoint-decorators.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Use} from \"@tsed/common\";\nimport {useDecorators} from \"@tsed/core\";\nimport {StoreMerge} from \"@tsed/core\";\nimport {PlatformAcceptMimesMiddleware} from \"../middlewares/PlatformAcceptMimesMiddleware\";\n\n/**\n * Accept only requests with the Content-type that match with given mime types.\n *\n * @param mimes\n * @decorator\n * @operation\n * @controller\n */\nexport function AcceptMime(...mimes: string[]) {\n  const normalizedMimes = mimes.map((mime) => mime.toLowerCase());\n\n  return useDecorators(\n    StoreMerge(PlatformAcceptMimesMiddleware, normalizedMimes),\n    Use(PlatformAcceptMimesMiddleware)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Socket Service with Middleware\nDESCRIPTION: Full example of a Socket service with middleware integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, SocketUseAfter, SocketUseBefore, Emit, Input, Args, SocketSession} from \"@tsed/socketio\";\nimport {UserConverterSocketMiddleware, ErrorHandlerSocketMiddleware} from \"../middlewares.js\";\nimport {User} from \"../models/User.js\";\n\n@SocketService(\"/my-namespace\")\n@SocketUseBefore(UserConverterSocketMiddleware)\n@SocketUseAfter(ErrorHandlerSocketMiddleware)\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\")\n  @SocketUseBefore(UserConverterSocketMiddleware)\n  @SocketUseAfter(ErrorHandlerSocketMiddleware)\n  async myMethod(@Args(0) userName: User) {\n    const user = session.get(\"user\") || {};\n    user.name = userName;\n\n    session.set(\"user\", user);\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Express Router\nDESCRIPTION: Example of migrating an Express.js server to Ts.ED, demonstrating how to integrate an existing Express router into the Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-express.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/common\";\nimport \"@tsed/platform-express\";\nimport {$log} from \"@tsed/logger\";\nimport express from \"express\";\nimport path from \"path\";\nimport bodyParser from \"body-parser\";\nimport compress from \"compression\";\nimport cookieParser from \"cookie-parser\";\nimport methodOverride from \"method-override\";\nimport cors from \"cors\";\nimport \"@tsed/ajv\";\n\nconst rootDir = __dirname;\n\nconst legacyRouter = express.Router();\nlegacyRouter.get(\"/\", (req, res) => res.send(\"Hello world\"));\n\n@Configuration({\n  rootDir,\n  acceptMimes: [\"application/json\"],\n  httpPort: process.env.PORT || 8083,\n  httpsPort: false,\n  mount: {\n    \"/rest\": [...Object.values(controllers)]\n  },\n  middlewares: [\n    cors(),\n    cookieParser(),\n    compress({}),\n    methodOverride(),\n    bodyParser.json(),\n    bodyParser.urlencoded({\n      extended: true\n    }),\n    legacyRouter\n  ],\n  views: {\n    root: path.join(__dirname, \"../views\"),\n    extensions: {\n      ejs: \"ejs\"\n    }\n  },\n  exclude: [\"**/*.spec.ts\"]\n})\nexport class Server {\n  @Inject()\n  protected app: PlatformApplication;\n\n  @Configuration()\n  protected settings: Configuration;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED server with Apollo integration\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure a Ts.ED server to use Apollo. It imports the necessary modules and uses a decorator to set up an Apollo server instance with a specified path and schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/apollo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/apollo\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      path: \"/\",\n      schema: {},\n      resolvers: []\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with Dependency Injection\nDESCRIPTION: Example of a CalendarCtrl using the injected CalendarsService and decorated with @Controller from @tsed/di.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/di/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, Body, Get} from \"@tsed/schema\";\nimport {CalendarsService} from \"./CalendarsService.js\";\nimport {Calendar} from \"./models/Calendar.js\";\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  constructor(private readonly calendarsService: CalendarsService) {}\n\n  @Post()\n  async create(@Body() calendar: Calendar) {\n    this.calendarsService.create(calendar);\n  }\n\n  @Get()\n  async findAll(): Promise<Calendar[]> {\n    return this.calendarsService.findAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server\nDESCRIPTION: Server configuration setup for Ts.ED application including middleware configuration, swagger documentation, and controller mounting.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport cors from \"cors\";\nimport compress from \"compression\";\nimport cookieParser from \"cookie-parser\";\nimport methodOverride from \"method-override\";\nimport \"@tsed/ajv\";\nimport \"@tsed/swagger\";\nimport {TimeslotsController} from \"./controllers/TimeslotsController.js\";\n\n@Configuration({\n  acceptMimes: [\"application/json\"],\n  mount: {\n    \"/\": [TimeslotsController]\n  },\n  swagger: [\n    {\n      path: \"/v3/docs\",\n      specVersion: \"3.0.1\"\n    }\n  ],\n  views: {\n    root: \"${rootDir}/views\",\n    extensions: {\n      ejs: \"ejs\"\n    }\n  },\n  middlewares: [\"cors\", \"cookie-parser\", \"compression\", \"method-override\", \"json-parser\", \"urlencoded-parser\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Joi-based Validation Pipe in Ts.ED\nDESCRIPTION: Shows how to create a custom validation pipe using Joi for schema-based validation in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, OverrideProvider} from \"@tsed/di\";\nimport {ValidationPipe} from \"@tsed/platform-params\";\nimport {ParamMetadata} from \"@tsed/platform-params\";\nimport Joi from \"joi\";\n\n@Injectable()\n@OverrideProvider(ValidationPipe)\nexport class JoiValidationPipe extends ValidationPipe {\n  private schema: Joi.Schema;\n\n  constructor(schema: Joi.Schema) {\n    super();\n    this.schema = schema;\n  }\n\n  async transform(value: any, metadata: ParamMetadata) {\n    const {error, value: validatedValue} = this.schema.validate(value);\n    if (error) {\n      throw new Error('Validation failed');\n    }\n    return validatedValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger in Ts.ED Server\nDESCRIPTION: TypeScript code snippet showing how to configure Swagger in a Ts.ED server application. It sets up Swagger UI paths and specifies OpenAPI version.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  swagger: [\n    {\n      path: \"/v2/doc\",\n      specVersion: \"2.0\"\n    },\n    {\n      path: \"/v3/doc\",\n      specVersion: \"3.0.1\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Mongoose Model\nDESCRIPTION: Example of declaring a Mongoose model using Ts.ED decorators with schema validation\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Minimum, Maximum, MaxLength, MinLength, Enum, Pattern, Required, CollectionOf} from \"@tsed/schema\";\nimport {Model, Unique, Indexed, Ref, ObjectID} from \"@tsed/mongoose\";\n\nenum Categories {\n  CAT1 = \"cat1\",\n  CAT2 = \"cat2\"\n}\n\n@Model({dbName: \"default\"})\nexport class MyModel {\n  @ObjectID()\n  _id: string;\n\n  @Unique()\n  @Required()\n  unique: string;\n\n  @Indexed()\n  @MinLength(3)\n  @MaxLength(50)\n  indexed: string;\n\n  @Minimum(0)\n  @Maximum(100)\n  rate: Number;\n\n  @Enum(Categories)\n  category: Categories;\n\n  @Pattern(/[a-z]/)\n  pattern: String;\n\n  @CollectionOf(String)\n  arrayOf: string[];\n\n  @Ref(OtherModel)\n  ref: Ref<OtherModel>;\n\n  @Ref(OtherModel)\n  refs: Ref<OtherModel>[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapper Response Filter for JSON Responses\nDESCRIPTION: Shows how to implement a response filter that wraps all JSON responses in a standard structure with data, errors, and links properties.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResponseFilter, ResponseFilterMethods} from \"@tsed/platform-response-filter\";\nimport {Context} from \"@tsed/platform-params\";\n\n@ResponseFilter(\"application/json\")\nexport class WrapperResponseFilter implements ResponseFilterMethods {\n  transform(data: any, ctx: Context) {\n    return {data, errors: [], links: []};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generics in Ts.ED Controller Responses\nDESCRIPTION: Demonstrates how to use generics with the @Returns decorator to properly document responses in Swagger.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get} from \"@tsed/common\";\nimport {Returns} from \"@tsed/schema\";\nimport {Document} from \"./Document\";\nimport {Product} from \"./Product\";\n\n@Controller(\"/products\")\nexport class ProductsController {\n  @Get(\"/:id\")\n  @Returns(200, Document).Of(Product).Description(\"Get product detail\")\n  async get(@PathParams(\"id\") id: string): Promise<Document<Product>> {\n    return new Document<Product>({\n      data: new Product({\n        id,\n        title: \"title\"\n      }),\n      links: {\n        self: `/products/${id}`,\n        products: \"/products\"\n      }\n    });\n  }\n}\n\nexport class Document<T> {\n  constructor({data, links}: Partial<Document<T>> = {}) {\n    if (data) {\n      this.data = data;\n    }\n\n    if (links) {\n      this.links = links;\n    }\n  }\n\n  data: T;\n  links: {\n    self: string;\n    [key: string]: string;\n  };\n}\n\nexport class Product {\n  @Property()\n  id: string;\n\n  @Property()\n  title: string;\n\n  constructor({id, title}: Partial<Product> = {}) {\n    id && (this.id = id);\n    title && (this.title = title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling String Body Parameters in Ts.ED\nDESCRIPTION: Shows how to handle string body parameters in a POST request using the @BodyParams decorator in Ts.ED controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, BodyParams} from \"@tsed/schema\";\n\n@Controller(\"/post\")\nexport class PostController {\n  @Post(\"/\")\n  post(@BodyParams() data: string) {\n    console.log(\"Is data a string ??\", typeof data === \"string\"); // true\n    return {data};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Provider with Factory Function\nDESCRIPTION: Example demonstrating how to create providers dynamically using factory functions. Shows provider instantiation with dependencies resolved by DI container.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-providers.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CONNECTION = new Token<Connection>(\"CONNECTION\");\n\nconst CONNECTION = {\n  provide: CONNECTION,\n  useFactory: {\n    deps: [Configuration],\n    fn: (configuration: Configuration) => {\n      return new Connection(configuration);\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing Standard Exceptions in Ts.ED and Express\nDESCRIPTION: Examples showing how to throw exceptions in both Ts.ED controller context and Express.js routes context.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams} from \"@tsed/common\";\nimport {NotFound} from \"@tsed/exceptions\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  async getUser(@PathParams(\"id\") id: string) {\n    const user = await findUser(id);\n\n    if (!user) {\n      throw new NotFound(\"User not found\");\n    }\n\n    return user;\n  }\n}\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport {NotFound} from \"@tsed/exceptions\";\n\nconst app = express();\n\napp.get(\"/users/:id\", (req, res, next) => {\n  findUser(req.params.id)\n    .then((user) => {\n      if (!user) {\n        throw new NotFound(\"User not found\");\n      }\n\n      res.json(user);\n    })\n    .catch(next);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Request and Response Hooks in a Module\nDESCRIPTION: Shows how to intercept request and response events by implementing $onRequest and $onResponse methods in a module. This allows executing code for every HTTP request and response.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module} from \"@tsed/di\";\nimport {PlatformContext} from \"@tsed/platform-http\";\n\n@Module()\nclass CustomContextModule {\n  $onRequest($ctx: PlatformContext) {\n    // do something\n  }\n\n  $onResponse($ctx: PlatformContext) {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions in Ts.ED Controller\nDESCRIPTION: Shows how to throw HTTP exceptions in a Ts.ED controller using @tsed/exceptions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams} from \"@tsed/common\";\nimport {BadRequest} from \"@tsed/exceptions\";\n\n@Controller(\"/calendars\")\nexport class CalendarController {\n  @Get(\"/:id\")\n  async get(@PathParams(\"id\") id: number) {\n    if (isNaN(id)) {\n      throw new BadRequest(\"Not a number\");\n    }\n\n    return {id};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED server with Apollo\nDESCRIPTION: TypeScript code to configure the Ts.ED server with Apollo integration. It sets up the GraphQL server with custom options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-nexus.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/apollo\";\nimport {schema} from \"./schema\";\nimport {join} from \"node:path\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      // GraphQL server configuration\n      path: \"/\",\n      playground: true, // enable playground GraphQL IDE. Set false to use Apollo Studio\n      schema,\n      plugins: [] // Apollo plugins\n\n      // Give custom server instance\n      // server?: (config: Config) => ApolloServer;\n\n      // ApolloServer options\n      // ...\n      // See options descriptions on https://www.apollographql.com/docs/apollo-server/api/apollo-server.html\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Post-Hook Implementation\nDESCRIPTION: Shows how to implement post-save hooks in Mongoose models using decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PostHook, Model} from \"@tsed/mongoose\";\n\n@Model()\n@PostHook(\"save\", (car: CarModel) => {\n  console.log(\"After save\");\n})\nexport class CarModel {\n  @Property()\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Error Filter in Ts.ED\nDESCRIPTION: Example of implementing a filter to catch all types of errors in a Ts.ED application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Catch, ExceptionFilterMethods, PlatformContext} from \"@tsed/common\";\n\n@Catch(Error)\nexport class ErrorFilter implements ExceptionFilterMethods {\n  catch(error: Error, ctx: PlatformContext) {\n    const {logger} = ctx;\n\n    logger.error({\n      message: error.message,\n      stack: error.stack,\n      error\n    });\n\n    ctx.response.body(\"Internal Error\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Exception in a Controller\nDESCRIPTION: Example of using a custom exception class within a controller method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams} from \"@tsed/common\";\nimport {IDFormatException} from \"../exceptions/IDFormatException\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  async getUser(@PathParams(\"id\") id: string) {\n    if (!/^[0-9a-f]{24}$/.test(id)) {\n      throw new IDFormatException();\n    }\n\n    return await findUser(id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Universal Response Filter for All Content Types\nDESCRIPTION: Demonstrates how to create a response filter that handles all content types using the '*/*' wildcard to intercept all responses.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResponseFilter, ResponseFilterMethods} from \"@tsed/platform-response-filter\";\nimport {Context} from \"@tsed/platform-params\";\n\n@ResponseFilter(\"*/*\")\nexport class AnyResponseFilter implements ResponseFilterMethods {\n  transform(data: any, ctx: Context) {\n    // do something\n    return data;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Model Definition with Ts.ED Decorators - Prisma Schema\nDESCRIPTION: Example of Prisma schema with Ts.ED decorators for model generation, including User and Post models with relationships\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nmodel User {\n  /// @TsED.Groups(\"!creation\")\n  /// Comment\n  id          Int      @id @default(autoincrement())\n  createdAt   DateTime @default(now())\n  /// @TsED.Email()\n  /// @TsED.Description(\"User email. This email must be unique!\")\n  email       String   @unique\n  weight      Float?\n  is18        Boolean?\n  name        String?\n  successorId Int?\n  successor   User?    @relation(\"BlogOwnerHistory\", fields: [successorId], references: [id])\n  predecessor User?    @relation(\"BlogOwnerHistory\")\n  role        Role     @default(USER)\n  posts       Post[]\n  keywords    String[]\n  biography   Json\n  /// @TsED.Ignore(ctx.endpoint === true)\n  ignored    String\n}\n\nmodel Post {\n  id     Int   @id @default(autoincrement())\n  user   User? @relation(fields: [userId], references: [id])\n  userId Int?\n}\n\nenum Role {\n  USER\n  ADMIN\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Middleware Method in API Testing with Jest\nDESCRIPTION: Example of stubbing a middleware method (like authentication) when testing an API endpoint with Jest. Uses TestMongooseContext for database setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport SuperTest from \"supertest\";\nimport {TestMongooseContext} from \"@tsed/testing-mongoose\";\nimport {HelloWorldController} from \"./HelloWorldController.js\";\nimport {Server} from \"../../Server.js\";\nimport {AuthMiddleware} from \"../../middlewares/auth.middleware.js\";\n\ndescribe(\"HelloWorldController\", () => {\n  beforeAll(async () => {\n    await TestMongooseContext.bootstrap(Server)();\n\n    const authMiddleware = PlatformTest.get<AuthMiddleware>(AuthMiddleware);\n    jest.spyOn(authMiddleware, \"use\").mockResolvedValue(true);\n  });\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  afterAll(TestMongooseContext.reset);\n\n  it(\"should return value\", async () => {\n    const request = SuperTest(PlatformTest.callback());\n    const response = await request.get(\"/rest/hello-world\").expect(200);\n    expect(response.text).toEqual(\"hello\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Service with Vitest in Ts.ED\nDESCRIPTION: Example of unit testing a ParseService using Vitest in a Ts.ED application. It demonstrates creating a test context, injecting the service, and testing its functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, it, expect, beforeEach, afterEach} from \"vitest\";\nimport {PlatformTest} from \"@tsed/common\";\nimport {ParseService} from \"./ParseService\";\n\ndescribe(\"ParseService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  it(\"should convert string to a number\", async () => {\n    const service = PlatformTest.get(ParseService);\n\n    expect(service.toNumber(\"1\")).toEqual(1);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Interceptor\nDESCRIPTION: Advanced interceptor implementation that demonstrates error catching and handling functionality using try-catch block.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/interceptors.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Interceptor()\nexport class ErrorHandlingInterceptor implements InterceptorMethods {\n  async intercept(context: InterceptorContext<any>, next: InterceptorNext) {\n    try {\n      return await next()\n    } catch (error) {\n      console.log(\"An error occurred:\", error)\n      throw error\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Decorator for Endpoint Middleware in Ts.ED\nDESCRIPTION: Shows how to create a custom decorator that applies the AcceptMimesMiddleware to an endpoint, allowing for easy specification of accepted MIME types.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {UseAuth} from \"@tsed/common\";\nimport {AcceptMimesMiddleware} from \"./AcceptMimesMiddleware\";\n\nexport function AcceptMimes(...mimes: string[]) {\n  return UseAuth(AcceptMimesMiddleware, ...mimes);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ Dependencies\nDESCRIPTION: Command to install the required BullMQ packages for Ts.ED integration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tsed/bullmq bullmq\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger in Ts.ED Server\nDESCRIPTION: TypeScript code to configure Swagger in a Ts.ED server. It sets up two Swagger endpoints for different API versions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/swagger\"; // import swagger Ts.ED module\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  swagger: [\n    {\n      path: \"/v2/docs\",\n      specVersion: \"2.0\"\n    },\n    {\n      path: \"/v3/docs\",\n      specVersion: \"3.0.1\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ts.ED Platform with Bootstrap Function in TypeScript\nDESCRIPTION: A bootstrap function that initializes the Ts.ED platform with Express, starts the server, and sets up a SIGINT handler to stop the server gracefully when the process is terminated.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  try {\n    const platform = await PlatformExpress.bootstrap(Server);\n    await platform.listen();\n\n    process.on(\"SIGINT\", () => {\n      platform.stop();\n    });\n  } catch (error) {\n    $log.error({event: \"SERVER_BOOTSTRAP_ERROR\", message: error.message, stack: error.stack});\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Example in Ts.ED\nDESCRIPTION: Illustrates how to inject dependencies using both constructor injection and property injection patterns.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass MyInjectable {\n  @Inject()\n  private calendarsService: CalendarsService;\n\n  constructor(private calendarsService2: CalendarsService) {\n    console.log(calendarsService);\n    console.log(calendarsService2);\n    console.log(calendarsService === calendarsService2); // true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Service Methods with Vitest\nDESCRIPTION: Example of testing asynchronous database service methods using async/await in Vitest. Shows how to create a context and test promises.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, it, expect, beforeEach, afterEach} from \"vitest\";\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\n\ndescribe(\"DbService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should do something\", async () => {\n      const service = PlatformTest.get(DbService);\n\n      const result = await service.find();\n\n      expect(result).toEqual([]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Auth Decorator in Ts.ED\nDESCRIPTION: Implementation of a custom authentication decorator that combines UseAuth, Security, and Returns decorators to simplify route protection configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CustomAuth} from \"../middlewares/CustomAuth\";\nimport {UseAuth} from \"@tsed/common\";\nimport {Returns, Security} from \"@tsed/schema\";\n\nexport function Auth(options?: any) {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    // Apply decorators\n    Security(\"bearer\")(target, propertyKey, descriptor);\n    Returns(401).Description(\"Unauthorized\")(target, propertyKey, descriptor);\n    Returns(403).Description(\"Forbidden\")(target, propertyKey, descriptor);\n    UseAuth(CustomAuth, options)(target, propertyKey, descriptor);\n\n    return descriptor;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple API Versions in Ts.ED\nDESCRIPTION: Demonstrates how to configure multiple API versions by mounting different endpoints associated with specific folders in the server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/common\";\n\n@Configuration({\n  mount: {\n    \"/rest\": [`${__dirname}/controllers/**/!(*v2).{ts,js}`],\n    \"/rest/v2\": [`${__dirname}/controllers/**/*v2.{ts,js}`]\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Controller Usage with Person Model\nDESCRIPTION: Demonstrates how to use a model class within a controller endpoint, showing how Ts.ED automatically handles transformation of request and response data using the Person model.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/persons\")\nexport class PersonsController {\n  @Get(\"/:id\")\n  @Returns(200, Person)\n  async get(@PathParams(\"id\") id: string): Promise<Person> {\n    const person = new Person();\n    person.firstName = \"John\";\n    person.lastName = \"Doe\";\n\n    return person;\n  }\n\n  @Post(\"/\")\n  @Returns(201, Person)\n  create(@BodyParams() payload: Person): Promise<Person> {\n    // use the Person and save it.\n    // JsonMapper serializes the returned person to a plain object.\n    return Promise.resolve(payload);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PlatformAcceptMimesMiddleware in Ts.ED\nDESCRIPTION: This code demonstrates implementation of a middleware that checks if the request's Content-Type header matches the accepted MIME types. It throws a NotAcceptable exception if the content type is not acceptable.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-endpoint-decorators.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Context} from \"@tsed/common\";\nimport {EndpointInfo} from \"@tsed/common\";\nimport {Middleware} from \"@tsed/common\";\nimport {NotAcceptable} from \"@tsed/exceptions\";\n\n@Middleware()\nexport class PlatformAcceptMimesMiddleware {\n  use(@Context() ctx: Context, @EndpointInfo() endpoint: EndpointInfo) {\n    if (!endpoint.get(PlatformAcceptMimesMiddleware)) {\n      return;\n    }\n\n    const mimes = endpoint.get(PlatformAcceptMimesMiddleware) || [];\n    const contentType = ctx.request.headers[\"content-type\"] || \"\";\n\n    if (mimes.length && !mimes.includes(contentType.toLowerCase())) {\n      throw new NotAcceptable(\"Accepted content type: \" + mimes.join(\", \"));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeGraphQL Dependencies\nDESCRIPTION: Commands to install required packages for TypeGraphQL integration with Ts.ED for both Express.js and Koa.js environments.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo graphql type-graphql @apollo/server @apollo/datasource-rest graphql-scalars\nnpm install --save-dev apollo-server-testing\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo graphql type-graphql @apollo/server @as-integration/koa @apollo/datasource-rest graphql-scalars\nnpm install --save-dev apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: Using @tsed/hooks Package to Subscribe to Hooks\nDESCRIPTION: Demonstrates the v8+ approach to subscribe to hooks using the $on function from the @tsed/hooks package. This allows subscribing to specific events like $beforeInit without implementing interfaces.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$on} from \"@tsed/hooks\";\n\n$on(\"$beforeInit\", () => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Alterable Value Events in Ts.ED\nDESCRIPTION: Shows how to emit events that allow subscribers to modify a value. The modified value is passed to the next subscriber and eventually returned to the emitter.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// module-emitter\nimport {inject, Module, $alterAsync} from \"@tsed/di\";\n\nexport interface AlterEvent {\n  $alterEvent(value: string): Promise<string>;\n}\n\n@Module()\nexport class ModuleEmitter {\n  async initSomething() {\n    // do something before\n    const value = $alterAsync(\"$alterEvent\", \"hello\"); // alterAsync and alter accept extra parameters forwarded to subscribers\n\n    console.log(value); // \"hello-world\"\n    // do something after\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend File Upload with Vanilla JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to implement file uploading on the frontend using vanilla JavaScript. It shows how to create a FormData object, append a file to it, and send it to the server using fetch.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/upload-files.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = document.querySelector('input[type=\"file\"]');\n\ninput.addEventListener('change', async (e) => {\n  const file = e.target.files[0];\n  const formData = new FormData();\n  formData.append('file', file);\n\n  const response = await fetch('/api/upload', {\n    method: 'POST',\n    body: formData\n  });\n\n  if (response.ok) {\n    console.log('File uploaded successfully');\n  } else {\n    console.error('File upload failed');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Serverless Platform Bootstrap Handler\nDESCRIPTION: Handler configuration for bootstrapping the Serverless platform with Lambda controllers\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerless} from \"@tsed/serverless\";\nimport {TimeslotsLambda} from \"./lambda/TimeslotsLambda\";\n\nconst platform = PlatformServerless.bootstrap({\n  lambda: [TimeslotsLambda]\n});\n\nconst {getTimeslot} = platform.callbacks();\n\nexport {getTimeslot};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Mapper in Ts.ED\nDESCRIPTION: Example of configuring JSON mapper options for a Ts.ED server, including additional properties and security settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  jsonMapper: {\n    additionalProperties: false,\n    disableUnsecureConstructor: true,\n    strictGroups: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Service Method in API Testing with Jest\nDESCRIPTION: Example of stubbing a service method when testing an API endpoint with Jest, using spyOn to mock the service's behavior.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport SuperTest from \"supertest\";\nimport {Server} from \"../../Server\";\nimport {Chapter} from \"../../entity/Chapter\";\n\nconst entity = new Chapter();\nObject.assign(entity, {\n  id: 2,\n  bookId: 4,\n  timestamp: 1650996201,\n  name: \"First Day At Work\"\n});\n\ndescribe(\"ChapterController\", () => {\n  beforeAll(PlatformTest.bootstrap(Server));\n  afterAll(PlatformTest.reset);\n\n  describe(\"GET /rest/chapter\", () => {\n    it(\"Get All Chapters\", async () => {\n      const service = PlatformTest.get(ChapterService);\n\n      jest.spyOn(service, \"findChapters\").mockResolvedValue([entity]);\n\n      const request = SuperTest(PlatformTest.callback());\n\n      const response = await request.get(\"/rest/chapter\").expect(200);\n      expect(typeof response.body).toEqual(\"object\");\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Default Server Configuration in JSON\nDESCRIPTION: The default server configuration object that defines development environment, ports, debug mode, and upload directory settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": \"development\",\n  \"port\": 8080,\n  \"debug\": false,\n  \"httpsPort\": 8000,\n  \"uploadDir\": \"./uploads\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Controller with Ts.ED and Prisma\nDESCRIPTION: This snippet demonstrates the implementation of a PostsController using Ts.ED decorators and Prisma repository. It includes methods for CRUD operations on posts, as well as searching and publishing posts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams, PathParams} from \"@tsed/platform-params\";\nimport {Inject, Controller} from \"@tsed/di\";\nimport {Description, Groups, Name, Returns, Summary, Delete, Get, Post, Put} from \"@tsed/schema\";\nimport {NotFound} from \"@tsed/exceptions\";\nimport {PostModel, PostsRepository} from \"@tsed/prisma\";\n\n@Controller(\"/posts\")\n@Name(\"Posts\")\nexport class PostsController {\n  @Inject()\n  protected service: PostsRepository;\n\n  @Get(\"/:id\")\n  @Summary(\"Fetch a single post by its id\")\n  @Returns(200, PostModel)\n  @Returns(404)\n  async getById(@PathParams(\"id\") id: string): Promise<PostModel> {\n    const model = await this.service.findUnique({where: {id: Number(id)}});\n\n    if (!model) {\n      throw new NotFound(\"Post not found\");\n    }\n\n    return model;\n  }\n\n  @Post(\"/\")\n  @Summary(\"Create a new post\")\n  @Returns(201, PostModel)\n  createDraft(@BodyParams(\"post\") @Groups(\"creation\") post: PostModel, @BodyParams(\"authorEmail\") authorEmail: string) {\n    return this.service.create({\n      data: {\n        title: post.title,\n        content: post.content,\n        author: {\n          connect: {email: authorEmail}\n        }\n      }\n    });\n  }\n\n  @Put(\"/publish/:id\")\n  @Summary(\"Publish a post by its id\")\n  @Returns(200, PostModel)\n  async publishPost(@PathParams(\"id\") id: string): Promise<PostModel> {\n    return this.service.update({\n      where: {id: Number(id)},\n      data: {published: true}\n    });\n  }\n\n  @Delete(\"/:id\")\n  @Summary(\"Delete a post by its id\")\n  @Returns(200, PostModel)\n  async deletePost(@PathParams(\"id\") id: string): Promise<PostModel> {\n    return this.service.delete({where: {id: Number(id)}});\n  }\n\n  @Get(\"/search/:searchString\")\n  @Description(\"Filter posts by title or content\")\n  @(Returns(200, Array).Of(PostModel))\n  async getFilteredPosts(@PathParams(\"searchString\") searchString: string): Promise<PostModel[]> {\n    return this.service.findMany({\n      where: {\n        OR: [\n          {\n            title: {contains: searchString}\n          },\n          {\n            content: {contains: searchString}\n          }\n        ]\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting an Endpoint with Swagger Decorators\nDESCRIPTION: Comprehensive example of using various decorators to document an API endpoint, including parameters, responses, and security.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Summary, Description, Returns, Security, Name} from \"@tsed/schema\";\nimport {Get, QueryParams} from \"@tsed/common\";\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  @Get(\"/\")\n  @Summary(\"Get all calendars\")\n  @Description(\"Return a list of calendars\")\n  @Returns(200, Array).Of(Calendar)\n  @Security(\"calendar_auth\", \"write:calendar\", \"read:calendar\")\n  @Name(\"GetCalendars\")\n  async getAllCalendars(\n    @QueryParams(\"limit\") limit: number\n  ): Promise<CalendarModel[]> {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Single File Upload in Ts.ED Controller\nDESCRIPTION: This code snippet shows how to handle a single file upload in a Ts.ED controller using the @MultipartFile decorator. It includes error handling and demonstrates how to access the uploaded file's properties.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/upload-files.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, Post} from \"@tsed/schema\";\nimport {MultipartFile} from \"@tsed/common\";\nimport {PlatformMulterFile} from \"@tsed/common\";\n\n@Controller(\"/\")\nexport class HelloWorldController {\n  @Post(\"/upload\")\n  uploadFile(@MultipartFile(\"file\") file: PlatformMulterFile) {\n    console.log(\"Uploaded\", file);\n\n    return {name: file.originalname};\n  }\n\n  @Post(\"/upload-with-error\")\n  uploadFileWithError(@MultipartFile(\"file\") file: PlatformMulterFile, @Req() req: Req) {\n    if (req.fileValidationError) {\n      throw new BadRequest(req.fileValidationError);\n    }\n\n    if (!file) {\n      throw new BadRequest(\"File is missing\");\n    }\n\n    console.log(\"Uploaded\", file);\n\n    return {name: file.originalname};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint Middleware in Ts.ED\nDESCRIPTION: Illustrates the implementation of an endpoint middleware that checks accepted MIME types. It uses the @Middleware decorator and EndpointInfo for context-aware processing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Middleware, Context, EndpointInfo, Req, Res, Next} from \"@tsed/common\";\nimport {Unauthorized} from \"@tsed/exceptions\";\n\n@Middleware()\nexport class AcceptMimesMiddleware {\n  use(@EndpointInfo() endpoint: EndpointInfo, @Req() request: Req, @Res() response: Res) {\n    const mimes = endpoint.get(AcceptMimes) || [];\n\n    if (!request.accepts(mimes)) {\n      throw new Unauthorized(\"Unsupported Media Type\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controller Inheritance in Ts.ED\nDESCRIPTION: Demonstrates how to use inheritance in Ts.ED controllers to create reusable base controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, Post, BodyParams} from \"@tsed/common\";\n\nexport abstract class BaseController<T> {\n  abstract create(model: T): Promise<T>;\n\n  @Post(\"/\")\n  async createAction(@BodyParams() model: T): Promise<T> {\n    return this.create(model);\n  }\n\n  @Get(\"/\")\n  async getAction(): Promise<T[]> {\n    return [];\n  }\n}\n\nimport {Controller} from \"@tsed/common\";\nimport {BaseController} from \"./BaseController\";\n\nclass MyModel {\n  id: string;\n  name: string;\n}\n\n@Controller(\"/my-ctrl\")\nexport class MyCtrl extends BaseController<MyModel> {\n  async create(model: MyModel): Promise<MyModel> {\n    // create model\n    return model;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Injectable TypeORM Repository in Ts.ED\nDESCRIPTION: Shows how to create an injectable TypeORM repository and register it as a provider in Ts.ED. It includes extending repository functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {DataSource} from \"typeorm\";\nimport {MySqlDataSource} from \"../datasources/MySqlDataSource\";\nimport {User} from \"../entities/User\";\n\nexport const UserRepository = MySqlDataSource.getRepository(User).extend({\n  findByName(firstName: string, lastName: string) {\n    return this.createQueryBuilder(\"user\")\n      .where(\"user.firstName = :firstName\", {firstName})\n      .andWhere(\"user.lastName = :lastName\", {lastName})\n      .getMany();\n  }\n});\nexport const USER_REPOSITORY = Symbol.for(\"UserRepository\");\nexport type USER_REPOSITORY = typeof UserRepository;\n\nregisterProvider({\n  provide: USER_REPOSITORY,\n  useValue: UserRepository\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Endpoint Metadata in Ts.ED Middleware\nDESCRIPTION: Demonstrates how to access endpoint metadata in a Ts.ED middleware. The middleware can retrieve information about the controller method being executed, including class name, property key, and custom stored values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {StoreSet} from \"@tsed/core\";\nimport {Controller} from \"@tsed/di\";\nimport {Middleware, Use} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\nimport {Get, Returns} from \"@tsed/schema\";\nimport {Resource} from \"./Resource\";\n\n@Middleware()\nexport class MyMiddleware {\n  use(@Context() ctx: Context) {\n    console.log(ctx.endpoint); // Endpoint Metadata\n    console.log(ctx.endpoint.targetName); // MyCtrl\n    console.log(ctx.endpoint.propertyKey); // getMethod\n    console.log(ctx.endpoint.type); // Resource\n    console.log(ctx.endpoint.store.get(\"options\")); // options\n  }\n}\n\n@Controller(\"/resources\")\nclass MyCtrl {\n  @Get(\"/:id\")\n  @Use(MyMiddleware)\n  @Returns(200, Resource)\n  @StoreSet(\"options\", \"options\")\n  getMethod(): Resource {\n    return new Resource();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Server in Ts.ED\nDESCRIPTION: Server configuration setup for enabling Temporal integration with connection and client options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/temporal\";\n\n@Configuration({\n  temporal: {\n    enabled: true,\n    connection: {\n      /* optional: see ConnectionOptions of @temporalio/client */\n    },\n    client: {\n      /* optional: see ClientOptions of @temporalio/client */\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating AcceptRoles Decorator in Ts.ED\nDESCRIPTION: TypeScript code creating a custom decorator for role-based access control in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/acceptRoles.ts\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Hook in Ts.ED Server Configuration Class\nDESCRIPTION: Shows how to implement the BeforeInit interface to subscribe to the $beforeInit hook in a Server class. This allows executing code before the server initialization phase begins.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BeforeInit, Configuration} from \"@tsed/di\";\n\n@Configuration({})\nclass Server implements BeforeInit {\n  async $beforeInit(): Promise<any> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Hooks in a Custom Provider\nDESCRIPTION: Demonstrates how to subscribe to hooks like $onDestroy in a custom provider using the hooks method. This example shows closing a database connection when the provider is destroyed.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injectable, constant} from \"@tsed/di\";\nimport {DatabaseConnection, Options} from \"connection-lib\";\n\nexport const CONNECTION = injectable<DatabaseConnection>(Symbol.for(\"CONNECTION\"))\n  .factory(() => {\n    const options = constant<Options>(\"myOptions\");\n\n    return new DatabaseConnection(options);\n  })\n  .hooks({\n    $onDestroy(connection) {\n      // called when provider instance is destroyed\n      return connection.close();\n    }\n  })\n  .token();\n```\n\n----------------------------------------\n\nTITLE: Configuration Binding with Constants in Ts.ED\nDESCRIPTION: Shows how to bind configuration values using @Constant decorator and constant function for environment variables and configuration management.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass MyService {\n  @Constant(\"MY_VALUE\")\n  myValue: string;\n\n  doSomething() {\n    return this.myValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timeslots Controller in TypeScript\nDESCRIPTION: Example controller implementation with Ts.ED decorators for handling timeslot operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\";\nimport {TimeslotsService} from \"../services/TimeslotsService\";\nimport {TimeslotModel} from \"../models/TimeslotModel\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsController {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  get(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple File Uploads in Ts.ED Controller\nDESCRIPTION: This code snippet illustrates how to handle multiple file uploads in a Ts.ED controller. It uses the PlatformMulterFile[] type to accept an array of files, even if only one file is uploaded.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/upload-files.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post} from \"@tsed/schema\";\nimport {MultipartFile} from \"@tsed/common\";\nimport {PlatformMulterFile} from \"@tsed/common\";\n\n@Controller(\"/\")\nexport class HelloWorldController {\n  @Post(\"/upload\")\n  uploadFiles(@MultipartFile(\"files\") files: PlatformMulterFile[]) {\n    console.log(\"Uploaded\", files);\n\n    return {files: files.map(o => o.originalname)};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MikroORM Entity in Ts.ED Controller\nDESCRIPTION: Demonstrates how to use a MikroORM entity (User) in a Ts.ED controller for creating and retrieving users.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post, Post, Get} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Ts.ED Server\nDESCRIPTION: Shows how to configure route mounting in a Ts.ED server by specifying glob patterns in the mount attribute or by manually importing controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/common\";\nimport {CalendarsCtrl} from \"./controllers/CalendarsCtrl\";\n\n@Configuration({\n  mount: {\n    \"/rest\": [\n      `${__dirname}/controllers/**/*.ts` // using glob\n    ]\n  },\n  imports: [\n    CalendarsCtrl // or manually importing controllers\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs in Ts.ED with BullMQ\nDESCRIPTION: Examples of dispatching jobs using the JobDispatcher service, including basic dispatch and dispatch with custom options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {JobDispatcher} from \"@tsed/bullmq\";\nimport {ExampleJob} from \"./jobs/ExampleJob\";\n\n@Service()\nclass MyService {\n  constructor(private readonly dispatcher: JobDispatcher) {}\n\n  public async doingSomething() {\n    await this.dispatcher.dispatch(ExampleJob, {msg: \"this message is part of the payload for the job\"});\n\n    console.info(\"I just dispatched a job!\");\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {JobDispatcher} from \"@tsed/bullmq\";\nimport {ExampleJob} from \"./jobs/ExampleJob\";\n\n@Service()\nclass MyService {\n  constructor(private readonly dispatcher: JobDispatcher) {}\n\n  public async doingSomething() {\n    await this.dispatcher.dispatch(\n      ExampleJob,\n      {msg: \"this message is part of the payload for the job\"},\n      {\n        delay: 600_000 // 10 minutes in milliseconds\n      }\n    );\n\n    console.info(\"I just dispatched a job!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Ts.ED\nDESCRIPTION: Example of setting response headers, content-type, and status code using the PlatformResponse object in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    // set headers, content-type and status\n    ctx.response.setHeaders({\"x-header\": \"header\"});\n    ctx.response.contentType(\"application/json\");\n    ctx.response.status(201);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Sequences for Middlewares in Ts.ED\nDESCRIPTION: Illustrates how to configure multiple middlewares at different levels (controller and method) to control the execution sequence of middlewares for specific endpoints.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, UseBefore, UseAfter, Get} from \"@tsed/common\";\nimport {MdlwCtrlBefore} from \"../middlewares/MdlwCtrlBefore\";\nimport {MdlwCtrlAfter} from \"../middlewares/MdlwCtrlAfter\";\nimport {MdlwBefore} from \"../middlewares/MdlwBefore\";\nimport {MdlwAfter} from \"../middlewares/MdlwAfter\";\n\n@Controller(\"/\")\n@UseBefore(MdlwCtrlBefore)\n@UseAfter(MdlwCtrlAfter)\nclass MyCtrl {\n  @Get(\"/\")\n  @UseBefore(MdlwBefore)\n  @UseAfter(MdlwAfter)\n  get() {}\n\n  @Get(\"/\")\n  get2() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Range Validation Decorators\nDESCRIPTION: Implementation of custom decorators that wrap the CustomKey functionality to provide cleaner syntax for range validation in models.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CustomKey} from \"@tsed/schema\";\n\nexport function Range(min: number, max: number) {\n  return CustomKey(\"range\", [min, max]);\n}\n\nexport function ExclusiveRange(bool: boolean) {\n  return CustomKey(\"exclusiveRange\", bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Multiple Lambda Functions in a Single Handler\nDESCRIPTION: Example of bootstrapping a Ts.ED platform for serverless to handle multiple routes within a single Lambda function with shared configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/ajv\"; // enable validation\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\nimport {TimeslotsController} from \"./TimeslotsController.js\";\n\n// shared configuration\nconst config = {\n  envs: process.env,\n  lambda: [TimeslotsController],\n  imports: [\n    {\n      token: TimeslotsRepository,\n      useClass: DynamoDBTimeslotsRepository\n    }\n  ]\n};\n\nconst platform = PlatformServerless.bootstrap(config);\n\nexport const timeslots = platform.handler();\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Middleware in Ts.ED\nDESCRIPTION: Demonstrates how to override an existing Ts.ED middleware using the @OverrideProvider decorator and the Platform API for request handling.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Context, Middleware, OverrideProvider} from \"@tsed/common\";\nimport {SendResponseMiddleware} from \"@tsed/platform-express\";\n\n@OverrideProvider(SendResponseMiddleware)\n@Middleware()\nexport class CustomSendResponseMiddleware {\n  use(@Context() ctx: Context) {\n    if (ctx.data) {\n      ctx.response.body = {data: ctx.data};\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Passport Controller in Ts.ED\nDESCRIPTION: TypeScript code for implementing a Passport controller in Ts.ED. It defines a login endpoint that uses the 'login' authentication strategy.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/passport/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Req} from \"@tsed/platform-http\";\nimport {Get, Post} from \"@tsed/schema\";\nimport {Controller, ProviderScope, Scope} from \"@tsed/di\";\nimport {Authenticate} from \"@tsed/passport\";\n\n@Controller(\"/\")\n@Scope(ProviderScope.SINGLETON)\nexport class PassportCtrl {\n  @Post(\"/login\")\n  @Authenticate(\"login\")\n  login(@Req() req: Req, @BodyParams(\"email\") email: string, @BodyParams(\"password\") password: string) {\n    // FACADE\n    return req.user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Implementation\nDESCRIPTION: Initial implementation of CalendarsController with a basic GET endpoint\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/create-your-first-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/calendars\")\nexport class CalendarsController {\n  @Get(\"/\")\n  get() {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Protocol in Ts.ED\nDESCRIPTION: TypeScript class implementing JWT protocol using @tsed/passport decorators in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/JwtProtocol.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Agenda\nDESCRIPTION: TypeScript code to configure a Ts.ED server with Agenda integration, including connection to MongoDB and various options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/agenda\"; // import agenda ts.ed module\n\nconst mongoConnectionString = \"mongodb://127.0.0.1/agenda\";\n\n@Configuration({\n  agenda: {\n    enabled: true, // Enable Agenda jobs for this instance.\n    // drainJobsBeforeStop: true, // Wait for jobs to finish before stopping the agenda process.\n    // disableJobProcessing: true, // Prevents jobs from being processed.\n    // pass any options that you would normally pass to new Agenda(), e.g.\n    db: {\n      address: mongoConnectionString\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring MikroORM in Server\nDESCRIPTION: Server configuration example showing how to import and configure MikroORM module with multiple database contexts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {MikroOrmModule} from \"@tsed/mikro-orm\";\n\n@Configuration({\n  imports: [MikroOrmModule],\n  mikroOrm: [\n    {\n      contextName: 'default',\n      type: 'postgres',\n      ...,\n\n      entities: [\n        `./entity/*{.ts,.js}`\n      ]\n    },\n    {\n      contextName: 'mongo',\n      type: 'mongo',\n      ...\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Scope in Ts.ED with Decorators\nDESCRIPTION: Creates a provider with singleton scope using decorators. The provider is created once during server initialization and shared across all requests, returning the same random value for all requests to the endpoint.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Scope, ProviderScope, Get} from \"@tsed/common\";\n\n@Controller(\"/random\")\n@Scope(ProviderScope.SINGLETON) // Optional because it's the default scope\nexport class RandomController {\n  random = Math.random();\n\n  @Get(\"/\")\n  get() {\n    return this.random;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Controller Implementation\nDESCRIPTION: Example of implementing cache in a controller using UseCache decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {UseCache} from \"@tsed/platform-cache\";\nimport {Controller} from \"@tsed/di\";\nimport {PathParams} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/my-path\")\nexport class MyController {\n  @Get(\"/:id\")\n  @UseCache()\n  get(@PathParams(\"id\") id: string) {\n    return \"something with  \" + id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration via Dependency Injection\nDESCRIPTION: Demonstrates how to access configuration through dependency injection in a service class using the Configuration decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Injectable} from \"@tsed/di\";\n\n@Injectable() // or Controller or Middleware\nexport class MyService {\n  constructor(@Configuration() configuration: Configuration) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with MikroORM\nDESCRIPTION: Example of a REST controller implementation using MikroORM entities and service integration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/common\";\nimport {BodyParamst} from \"@tsed/platform-params\";\nimport {Post, Post, Get} from \"@tsed/schema\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Client Repository\nDESCRIPTION: Complete implementation of client repository with CRUD operations\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {v4} from \"uuid\";\nimport {Injectable} from \"@tsed/di\";\nimport {serialize, deserialize} from \"@tsed/json-mapper\";\nimport {REDIS_CONNECTION} from \"./RedisConnection\";\nimport {ClientModel} from \"./ClientModel\";\n\n@Injectable()\nexport class ClientRepository {\n  @Inject(REDIS_CONNECTION)\n  protected connection: REDIS_CONNECTION;\n\n  async get(id: string) {\n    const raw = await this.connection.get(\"clients:\" + id);\n\n    if (!raw) {\n      return undefined;\n    }\n\n    return deserialize(JSON.parse(raw), {type: ClientModel});\n  }\n\n  async save(client: ClientModel) {\n    client.id = client.id || v4();\n\n    this.connection.set(\"clients:\" + client.id, JSON.stringify(serialize(client)));\n\n    return client;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Response Filters in Server Configuration\nDESCRIPTION: Shows how to register a custom response filter in the Ts.ED server configuration using the responseFilters array.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {XmlResponseFilter} from \"./filters/XmlResponseFilter.js\";\n\n@Configuration({\n  responseFilters: [\n    XmlResponseFilter\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporal Workflow\nDESCRIPTION: Implementation of a user onboarding workflow using Temporal workflow patterns and signals.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {proxyActivities, defineSignal, setHandler, condition, sleep} from \"@temporalio/workflow\";\nimport {Activities} from \"../activities\";\n\nexport const isVerifiedSignal = defineSignal(\"verificationSignal\");\n\nexport async function onboardUser(email: string): Promise<string> {\n  const {sendVerificationEmail, activateUser, sendWelcomeEmail, sendFollowUpEmail, deleteUser} = proxyActivities<Activities>({\n    startToCloseTimeout: \"1 minute\"\n  });\n\n  let isVerified = false;\n  setHandler(isVerifiedSignal, () => {\n    isVerified = true;\n  });\n\n  await sendVerificationEmail(email);\n\n  const verifiedInTime = await condition(() => isVerified, \"1w\");\n  if (!verifiedInTime) {\n    await deleteUserAndTenant(email);\n    return false;\n  }\n\n  await sendWelcomeEmail(email);\n\n  await sleep(\"1d\");\n  await sendFollowUpEmail(email);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request Logger in Ts.ED Controller\nDESCRIPTION: Demonstrates how to use the logger attached to the PlatformContext in a Ts.ED controller. Shows various log levels and forwarding context to a service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Logger} from \"@tsed/logger\";\nimport {Context} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\nimport {MyService} from \"../services/MyService\";\n\n@Controller(\"/\")\nclass MyController {\n  @Inject()\n  myService: MyService;\n\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    ctx.logger.info({customData: \"test\"}); // parameter is optional\n    ctx.logger.debug({customData: \"test\"});\n    ctx.logger.warn({customData: \"test\"});\n    ctx.logger.error({customData: \"test\"});\n    ctx.logger.trace({customData: \"test\"});\n\n    // forward ctx object to the service and use logger inside.\n    // All request\n    myService.doSomething(\"test\", ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller with Multiple Methods for Lambda\nDESCRIPTION: Example of a Ts.ED controller with multiple methods that can be exposed as separate Lambda functions or as routes within a single Lambda.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\"; // /!\\ don't import decorators from @tsed/common\nimport {TimeslotsService} from \"../services/TimeslotsService\";\nimport {TimeslotModel} from \"../models/TimeslotModel\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsController {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/:id\")\n  getById() {\n    // code\n  }\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  getAll(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SSE Implementation with EventStreamCtx\nDESCRIPTION: Example showing how to implement an SSE endpoint using @EventStream decorator and EventStreamCtx for handling event stream\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/server-sent-events.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {EventStream, EventStreamCtx} from \"@tsed/sse\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  @Get(\"/events\")\n  @EventStream()\n  events(@EventStreamCtx() eventStream: EventStreamCtx) {\n    let intervalId: ReturnType<typeof setInterval>;\n\n    eventStream.on(\"close\", () => {\n      clearInterval(intervalId);\n    });\n\n    eventStream.on(\"end\", () => {\n      clearInterval(intervalId);\n    });\n\n    intervalId = setInterval(() => {\n      // Ts.ED support Model serialization using json-mapper here\n      eventStream.emit(\"event\", new Date());\n    }, 1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Request Scope Providers in Ts.ED with Decorators\nDESCRIPTION: Demonstrates how to chain request-scoped providers, where both the controller and service are created for each request. Each service instance is unique to the request and maintains its own state.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Scope, ProviderScope, Get, Service, Inject} from \"@tsed/common\";\n\n@Service()\n@Scope(ProviderScope.REQUEST)\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\n@Controller(\"/random\")\n@Scope(ProviderScope.REQUEST)\nexport class RandomController {\n  @Inject()\n  myService: MyService;\n\n  @Get(\"/\")\n  get() {\n    return this.myService.get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AJV error messages in Ts.ED\nDESCRIPTION: Configuration example showing how to customize error formatting for AJV validation errors in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/diu\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({\n  ajv: {\n    errorFormatter: (error) => `At ${error.modelName}${error.dataPath}, value '${error.data}' ${error.message}`,\n    verbose: true\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Request and Response in Ts.ED Controller\nDESCRIPTION: Demonstrates how to inject and use Request and Response objects in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PlatformRequest, PlatformResponse, Req, Request, Res, Response} from \"@tsed/common\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  get(\n    @Req() req: Req,\n    @Request() request: Req,\n    @Res() res: Res,\n    @Response() response: Res,\n    @PlatformRequest() platformRequest: PlatformRequest,\n    @PlatformResponse() platformResponse: PlatformResponse,\n    @Req(\"nodejs\") nodeRequest: any,\n    @Res(\"nodejs\") nodeResponse: any\n  ) {\n    // DO SOMETHING\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KeycloakAuth Decorator\nDESCRIPTION: Custom decorator for protecting routes with Keycloak authentication and role-based access control.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Returns} from \"@tsed/schema\";\nimport {UseAuth} from \"@tsed/platform-middlewares\";\nimport {useDecorators} from \"@tsed/core\";\nimport {Security} from \"@tsed/schema\";\nimport {KeycloakMiddleware} from \"../middlewares/KeycloakMiddleware\";\n\nexport interface KeycloakAuthOptions extends Record<string, any> {\n  role?: string;\n  scopes?: string[];\n}\n\nexport function KeycloakAuth(options: KeycloakAuthOptions = {}): Function {\n  return useDecorators(UseAuth(KeycloakMiddleware, options), Security(\"oauth2\", ...(options.scopes || [])), Returns(403));\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting TypeORM DataSource in Ts.ED Service\nDESCRIPTION: Shows how to inject the TypeORM DataSource into a Ts.ED service. It demonstrates dependency injection and checking the connection status.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {DataSource} from \"typeorm\";\nimport {MYSQL_DATA_SOURCE} from \"../datasources/MysqlDataSource\";\n\n@Injectable()\nexport class MyService {\n  @Inject(MYSQL_DATA_SOURCE)\n  protected mysqlDataSource: DataSource;\n\n  $onInit() {\n    if (this.mysqlDataSource.isInitialized) {\n      console.log(\"INIT\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing REST API with Vitest and SuperTest\nDESCRIPTION: Example of testing a REST API endpoint using Vitest, SuperTest, and PlatformTest.bootstrap() to set up the server for integration testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {it, expect, describe, beforeAll, afterAll} from \"vitest\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport * as SuperTest from \"supertest\";\nimport {Server} from \"../Server.js\";\n\ndescribe(\"Rest\", () => {\n  beforeAll(PlatformTest.bootstrap(Server));\n  afterAll(PlatformTest.reset);\n\n  describe(\"GET /rest/calendars\", () => {\n    it(\"should do something\", async () => {\n      const request = SuperTest(PlatformTest.callback());\n      const response = await request.get(\"/rest/calendars\").expect(200);\n\n      expect(typeof response.body).toEqual(\"array\");\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using @OnSerialize Decorator for Transform Values\nDESCRIPTION: Demonstrates how to intercept and modify property values during serialization using the @OnSerialize decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OnSerialize} from \"@tsed/schema\";\n\nexport class Person {\n  @OnSerialize((v) => v + \"Test\")\n  property: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using AcceptMime Decorator with Endpoint Method\nDESCRIPTION: Example showing how to use the AcceptMime decorator on a controller method to specify accepted MIME types. The decorator is applied to the POST method to only accept application/json content type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-endpoint-decorators.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/common\";\nimport {AcceptMime} from \"@tsed/schema\";\nimport {Post} from \"@tsed/schema\";\n\n@Controller(\"/\")\nclass MyController {\n  @Post(\"/\")\n  @AcceptMime(\"application/json\")\n  post() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Agenda Service in Ts.ED\nDESCRIPTION: Defines an EmailJobService using Agenda decorators to create scheduled and on-demand jobs for email-related tasks.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Agenda, Every, Define} from \"@tsed/agenda\";\nimport {Job} from \"agenda\";\n\n@Agenda({namespace: \"email\"})\nexport class EmailJobService {\n  @Every(\"60 minutes\", {\n    name: \"maintenanceJob\"\n    /* ... and any option you would normally pass to agenda.every/define */\n  })\n  async sendAdminStatistics(job: Job) {\n    // implement something here\n  }\n\n  @Define({\n    name: \"sendWelcomeEmail\"\n    /*  ... and any option you would normally pass to agenda.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n  }\n\n  @Define({name: \"sendFollowUpEmail\"})\n  async sendFollowUpEmail(job: Job) {\n    // implement something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Endpoints for a Single Method in Ts.ED\nDESCRIPTION: Demonstrates how to define multiple HTTP endpoints for a single controller method, supporting different paths and HTTP verbs.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, Post, Returns} from \"@tsed/schema\";\n\n@Controller(\"/multi\")\nexport class MultipleEndpoint {\n  @Get(\"/:id\")\n  @Get(\"/\")\n  @Post(\"/\")\n  @Returns(200, String).Description(\"Description\")\n  get() {\n    return \"Hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeORM DataSource in Ts.ED (v0.3.x)\nDESCRIPTION: Demonstrates how to create a TypeORM DataSource and register it as a provider in Ts.ED. It includes connection configuration, entity registration, and logging.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {registerProvider} from \"@tsed/di\";\nimport {DataSource} from \"typeorm\";\nimport {Logger} from \"@tsed/logger\";\nimport {User} from \"../entities/User\";\n\nexport const MYSQL_DATA_SOURCE = Symbol.for(\"MySqlDataSource\");\nexport const MysqlDataSource = new DataSource({\n  // name: \"default\",  if you come from v0.2.x\n  type: \"mysql\",\n  entities: [User], // add this to discover typeorm model\n  host: \"localhost\",\n  port: 3306,\n  username: \"test\",\n  password: \"test\",\n  database: \"test\"\n});\n\nregisterProvider<DataSource>({\n  provide: MYSQL_DATA_SOURCE,\n  type: \"typeorm:datasource\",\n  deps: [Logger],\n  async useAsyncFactory(logger: Logger) {\n    await MysqlDataSource.initialize();\n\n    logger.info(\"Connected with typeorm to database: MySQL\");\n\n    return MysqlDataSource;\n  },\n  hooks: {\n    $onDestroy(dataSource) {\n      return dataSource.isInitialized && dataSource.close();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Socket Service in Ts.ED\nDESCRIPTION: Example of creating a Socket service with namespace and event handlers in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as SocketIO from \"socket.io\";\nimport {SocketService, IO, Nsp, Socket, SocketSession, Reason} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Nsp nsp: SocketIO.Namespace;\n\n  @Nsp(\"/my-other-namespace\")\n  nspOther: SocketIO.Namespace; // communication between two namespace\n\n  constructor(@IO private io: SocketIO.Server) {}\n  /**\n   * Triggered the namespace is created\n   */\n  $onNamespaceInit(nsp: SocketIO.Namespace) {}\n  /**\n   * Triggered when a new client connects to the Namespace.\n   */\n  $onConnection(@Socket socket: SocketIO.Socket, @SocketSession session: SocketSession) {}\n  /**\n   * Triggered when a client disconnects from the Namespace.\n   */\n  $onDisconnect(@Socket socket: SocketIO.Socket, @Reason reason: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Agenda Service with Scheduled Jobs\nDESCRIPTION: Defines an EmailJobService using @Agenda decorator with @Every and @Define methods for scheduling jobs automatically and programmatically.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Agenda, Every, Define} from \"@tsed/agenda\";\nimport {Job} from \"agenda\";\n\n@Agenda({namespace: \"email\"})\nexport class EmailJobService {\n  @Every(\"60 minutes\", {\n    name: \"maintenanceJob\"\n    /* ... and any option you would normally pass to agenda.every/define */\n  })\n  async sendAdminStatistics(job: Job) {\n    // implement something here\n  }\n\n  @Define({\n    name: \"sendWelcomeEmail\"\n    /*  ... and any option you would normally pass to agenda.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n  }\n\n  @Define({name: \"sendFollowUpEmail\"})\n  async sendFollowUpEmail(job: Job) {\n    // implement something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injectable TypeORM Repository in Ts.ED Controller\nDESCRIPTION: Demonstrates how to inject and use a custom TypeORM repository in a Ts.ED controller for specialized database operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Get, Post} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {User} from \"../../entities/User\";\nimport {USER_REPOSITORY} from \"../../repositories/UserRepository\";\n\n@Controller(\"/users\")\nexport class UsersController {\n  @Inject(USER_REPOSITORY)\n  protected repository: USER_REPOSITORY;\n\n  @Get(\"/\")\n  getByName(): Promise<User[]> {\n    return this.repository.findByName(\"john\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Objection.js Model with Ts.ED Decorators\nDESCRIPTION: Example of defining a User model using Ts.ED decorators and Objection.js Model class, including various property types and validations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, MinLength, MaxLength} from \"@tsed/schema\";\nimport {Inject} from \"@tsed/di\";\nimport {Entity, IdColumn} from \"@tsed/objection\";\nimport {Model} from \"objection\";\n\n@Entity(\"users\")\nexport class User extends Model {\n  @IdColumn()\n  id: number;\n\n  @Property()\n  @MaxLength(200)\n  name: string;\n\n  @Property()\n  age: number;\n\n  @Decimal({scale: 1, precision: 12})\n  score: number;\n\n  @Property()\n  active: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Documentation for Controllers\nDESCRIPTION: Examples of using @Docs decorator to specify which Swagger documentation a controller should appear in.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Docs} from \"@tsed/swagger\";\n\n@Controller(\"/calendars\")\n@Docs(\"api-v2\") // display this controllers only for api-docs-v2\nexport class CalendarCtrlV2 {}\n// OR\n@Controller(\"/calendars\")\n@Docs(\"api-v2\", \"api-v1\") // display this controllers for api-docs-v2 and api-docs-v1\nexport class CalendarCtrl {}\n```\n\n----------------------------------------\n\nTITLE: Listening to Token Invocation with $beforeInvoke Hook\nDESCRIPTION: Shows how to listen for token invocation events using $beforeInvoke hook. This can be used to perform actions before a token is invoked, either for all tokens or for a specific token.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {TokenProvider, ResolvedInvokeOptions} from \"@tsed/di\";\nimport {$on} from \"@tsed/hooks\";\n\n// triggered for all tokens\n$on(\"$beforeInvoke\", (token: TokenProvider, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n});\n\n// triggered for a specific token\n\n@Injectable()\nclass MyService {}\n\n$on(\"$beforeInvoke\", MyService, (token: TokenProvider, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n  console.log(token === MyService); // true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing and Testing Lambda Controller in TypeScript with Ts.ED\nDESCRIPTION: This code snippet shows the implementation of a Lambda controller and its corresponding test suite using Ts.ED's PlatformServerlessTest utility. It demonstrates how to set up tests, invoke Lambda functions by name and through the router, and verify the responses.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerlessTest} from \"@tsed/platform-serverless-testing\";\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\n\n@Controller(\"/\")\nclass TimeslotsLambdaController {\n  @Get(\"/\")\n  getAll() {\n    return [];\n  }\n\n  @Get(\"/:id\")\n  getById(@PathParams(\"id\") id: string, @QueryParams(\"start_date\") startDate: Date, @QueryParams(\"end_date\") endDate: Date) {\n    return {\n      id,\n      startDate,\n      endDate\n    };\n  }\n}\n\ndescribe(\"TimeslotsLambdaController\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerless, {\n      lambda: [TimeslotsLambdaController]\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  describe(\"Invoke by lambda name\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.call(\"getAll\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n\n    it(\"should call getById Lambda\", async () => {\n      const response = await PlatformServerlessTest.request\n        .call(\"getById\")\n        .params({\n          id: \"1\"\n        })\n        .query({\n          start_date: new Date(\"2020-01-01\"),\n          end_date: new Date(\"2020-01-10\")\n        });\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual({\n        id: \"1\",\n        endDate: \"2020-01-10T00:00:00.000Z\",\n        startDate: \"2020-01-01T00:00:00.000Z\"\n      });\n    });\n  });\n\n  describe(\"invoke using the router\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.get(\"/\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing a Single Lambda Function Handler\nDESCRIPTION: Example of creating a Lambda handler file that exposes a single controller method as an AWS Lambda function with configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/ajv\"; // enable validation\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\nimport {TimeslotsController} from \"./TimeslotsController.js\";\n\nconst config = {\n  envs: process.env\n};\n\nexport const timeslots = PlatformServerless.callback(TimeslotsController, \"getAll\", config);\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket Service with Middleware Usage in TypeScript\nDESCRIPTION: A Socket.io service class that demonstrates how to apply middlewares at both class and method levels. It shows the usage of @SocketUseBefore and @SocketUseAfter decorators along with other socket-related decorators for handling events, emitting responses, and managing session data.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, SocketUseAfter, SocketUseBefore, Emit, Input, Args, SocketSession} from \"@tsed/socketio\";\nimport {UserConverterSocketMiddleware, ErrorHandlerSocketMiddleware} from \"../middlewares.js\";\nimport {User} from \"../models/User.js\";\nimport {SocketSessionData} from \"@tsed/socketio/lib/cjs\";\n\n@SocketService(\"/my-namespace\")\n@SocketUseBefore(UserConverterSocketMiddleware) // global version\n@SocketUseAfter(ErrorHandlerSocketMiddleware)\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\") // or Broadcast or BroadcastOthers\n  @SocketUseBefore(UserConverterSocketMiddleware)\n  @SocketUseAfter(ErrorHandlerSocketMiddleware)\n  async myMethod(@Args(0) userName: User, @SocketSessionData session: SocketSessionData) {\n    const user = session.get(\"user\") || {};\n    user.name = userName;\n\n    session.set(\"user\", user);\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Validation in Ts.ED\nDESCRIPTION: Demonstrates how to use inline validation with parameter decorators in Ts.ED controllers, applying validation rules directly to parameters.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post, BodyParams, Required, MinLength} from \"@tsed/schema\";\n\n@Controller(\"/post\")\nexport class PostValidationController {\n  @Post(\"/\")\n  post(\n    @Required()\n    @MinLength(3)\n    @BodyParams(\"username\") username: string\n  ) {\n    console.log(\"Username ??\", username);\n    return {username};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Middlewares in Ts.ED Controller\nDESCRIPTION: Demonstrates how to use middleware decorators in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, UseBefore, Use, UseAfter} from \"@tsed/common\";\nimport {CustomMiddleware} from \"../middlewares/CustomMiddleware\";\n\n@Controller(\"/\")\n@UseBefore(CustomMiddleware) // or @Use or @UseAfter\nclass MyController {\n  @Get(\"/\")\n  @UseBefore(CustomMiddleware) // or @Use or @UseAfter\n  get() {\n    // DO SOMETHING\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating XML Response Filter in Ts.ED\nDESCRIPTION: Demonstrates how to implement a custom response filter that transforms data to XML format based on the 'text/xml' Content-Type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResponseFilter, ResponseFilterMethods} from \"@tsed/platform-response-filter\";\nimport {Context} from \"@tsed/platform-params\";\n\n@ResponseFilter(\"text/xml\")\nexport class XmlResponseFilter implements ResponseFilterMethods {\n  transform(data: any, ctx: Context) {\n    return jsToXML(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Scope in Ts.ED with Decorators\nDESCRIPTION: Creates a provider with instance scope using decorators. A new instance is created each time the provider is injected into another class, ensuring unique instances across different injection points.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Scope, ProviderScope, Get, Service, Inject} from \"@tsed/common\";\n\n@Service()\n@Scope(ProviderScope.INSTANCE)\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\n@Controller(\"/random\")\nexport class RandomController {\n  @Inject()\n  service1: MyService;\n\n  @Inject()\n  service2: MyService;\n\n  @Get(\"/\")\n  get() {\n    return {\n      random1: this.service1.get(),\n      random2: this.service2.get()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing $onReady Hook for Server Ready Events\nDESCRIPTION: Shows how to implement the $onReady hook to perform tasks when the server is ready to accept incoming requests. This hook doesn't block the server startup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module, OnReady, Inject} from \"@tsed/di\";\n\n@Module()\nexport class MyModule implements OnReady {\n  async $onReady(): Promise<any> {\n    // perform some async tasks\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ORM Instance with Service\nDESCRIPTION: Example of a service class using the @Orm decorator to inject and utilize MikroORM instance for database operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {AfterRoutesInit} from \"@tsed/platform-http\";\nimport {Orm} from \"@tsed/mikro-orm\";\nimport {MikroORM} from \"@mikro-orm/core\";\n\n@Injectable()\nexport class UsersService {\n  @Orm()\n  private readonly orm!: MikroORM;\n\n  async create(user: User): Promise<User> {\n    await this.orm.em.persistAndFlush(user);\n    console.log(\"Saved a new user with id: \" + user.id);\n\n    return user;\n  }\n\n  async find(): Promise<User[]> {\n    const users = await this.orm.em.find(User, {});\n    console.log(\"Loaded users: \", users);\n\n    return users;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception in Ts.ED\nDESCRIPTION: Example of creating a custom exception by extending the BadRequest exception class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BadRequest} from \"@tsed/exceptions\";\n\nexport class IDFormatException extends BadRequest {\n  constructor() {\n    super(\"ID format is not valid\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Values in Controller\nDESCRIPTION: Example of updating cookie values in a Ts.ED controller using the @Cookies decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/session.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams, Cookies} from \"@tsed/platform-params\";\nimport {Post, Returns} from \"@tsed/schema\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  @Post(\"/\")\n  updateSession(@Cookies() cookies: any) {\n    cookies.count = (cookies.count || 0) + 1;\n    return \"OK - \" + cookies.count;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Socket Service Implementation\nDESCRIPTION: Example of implementing a basic Socket.io service with event handling using Ts.ED decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Args, Emit, Input, Socket, SocketService} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\") // or Broadcast or BroadcastOthers\n  async myMethod(@Args(0) userName: string, @Socket socket: Socket) {\n    return \"Message \" + userName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Event Emitter\nDESCRIPTION: TypeScript code to import and configure the Event Emitter module in a Ts.ED server. It enables events and sets options for EventEmitter2.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/event-emitter/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/event-emitter\"; // import event emitter ts.ed module\n\n@Configuration({\n  eventEmitter: {\n    enabled: true, // Enable events for this instance.\n    // pass any options that you would normally pass to new EventEmitter2(), e.g.\n    wildcard: true\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Vike Integration\nDESCRIPTION: TypeScript code snippet showing how to configure a Ts.ED server with Vike integration. It includes necessary imports and a Server class with Vike configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/vike.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {join} from \"node:path\";\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/common\";\nimport \"@tsed/platform-express\"; // /!\\ keep this import\nimport \"@tsed/vike\"; // add this\nimport \"@tsed/ajv\";\nimport \"@tsed/swagger\";\nimport {config} from \"./config\";\nimport * as rest from \"./controllers/rest\";\nimport * as pages from \"./controllers/pages\";\n\n@Configuration({\n  vite: {\n    root: \"../path/to/app/project\"\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in Objection.js Models with Ts.ED\nDESCRIPTION: Example of defining a relationship between User and Movie models using Ts.ED decorators for Objection.js, demonstrating BelongsToOne relationship.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Entity, BelongsToOne} from \"@tsed/objection\";\n\n@Entity(\"user\")\nclass User extends Model {\n  @IdColumn()\n  id!: string;\n}\n\n@Entity(\"movie\")\nclass Movie extends Model {\n  @IdColumn()\n  id!: string;\n\n  ownerId!: string;\n\n  @BelongsToOne()\n  owner?: User;\n}\n\n// Retrieve the related user\nconst owner = await Movie.relatedQuery(\"owner\").for(1);\n\n// Retrieve the movie with their owner\nconst movie = await Movie.query().for(1).withGraphFetched(\"owner\");\n```\n\n----------------------------------------\n\nTITLE: Using toClass Method for Mongoose Model Instances in TypeScript\nDESCRIPTION: This snippet demonstrates the use of the toClass method added by Ts.ED to convert Mongoose model instances to the expected class type. It shows how to retrieve a Product instance from a Mongoose query result.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, Injectable} from \"@tsed/di\";\nimport {MongooseModel} from \"@tsed/mongoose\";\nimport {Product} from \"./models/Product\";\n\n@Injectable()\nexport class MyRepository {\n  @Inject(Product)\n  private model: MongooseModel<Product>;\n\n  async find(query: any) {\n    const list = await this.model.find(query).exec();\n\n    console.log(list[0]); // Model { Product }\n    console.log(list[0].toClass()); // Product {}\n\n    return list;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Scope in Ts.ED with Decorators\nDESCRIPTION: Creates a provider with request scope using decorators. A new instance is created for each incoming request, ensuring that each request to the endpoint returns a different random value.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Scope, ProviderScope, Get} from \"@tsed/common\";\n\n@Controller(\"/random\")\n@Scope(ProviderScope.REQUEST)\nexport class RandomController {\n  random = Math.random();\n\n  @Get(\"/\")\n  get() {\n    return this.random;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Body in Ts.ED\nDESCRIPTION: Shows different ways to set the response body using the PlatformResponse object in a Ts.ED controller, handling various data types including streams.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    // equivalent to ctx.getResponse().send()\n    ctx.response.body(null);\n    ctx.response.body(undefined);\n    ctx.response.body(true);\n    ctx.response.body(false);\n\n    // equivalent to ctx.getResponse().json()\n    ctx.response.body({});\n    ctx.response.body([]);\n    ctx.response.body(new Date());\n\n    // equivalent to readableStream.pipe(ctx.response.raw)\n    ctx.response.body(readableStream);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Transactional Decorator for Request Context\nDESCRIPTION: Shows how to use the @Transactional decorator to handle request context and transactions in a controller method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post, Post, Get} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  @Transactional()\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AJV Keyword Validator in Ts.ED\nDESCRIPTION: Implementation of a custom 'range' validator using the Keyword decorator to validate number ranges with optional exclusivity. Defines the validator behavior and schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Keyword, KeywordMethods} from \"@tsed/ajv\";\nimport {array, number} from \"@tsed/schema\";\n\n@Keyword({\n  keyword: \"range\",\n  type: \"number\",\n  schemaType: \"array\",\n  implements: [\"exclusiveRange\"],\n  metaSchema: array().items([number(), number()]).minItems(2).additionalItems(false)\n})\nclass RangeKeyword implements KeywordMethods {\n  compile([min, max]: number[], parentSchema: any) {\n    return parentSchema.exclusiveRange === true ? (data: any) => data > min && data < max : (data: any) => data >= min && data <= max;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Socket Input Event Handler in Ts.ED\nDESCRIPTION: Shows how to declare an input event handler in a Ts.ED Socket service using decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, Input, Emit, Args, Socket, Nsp} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  myMethod(@Args(0) userName: string, @Socket socket: SocketIO.Socket, @Nsp nsp: SocketIO.Namespace) {\n    console.log(userName);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ResourceNotFound Exception Filter\nDESCRIPTION: Example of creating a custom filter to handle 404 ResourceNotFound errors with custom response formatting.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Catch, ExceptionFilterMethods, PlatformContext, ResourceNotFound} from \"@tsed/common\";\n\n@Catch(ResourceNotFound)\nexport class ResourceNotFoundFilter implements ExceptionFilterMethods {\n  async catch(exception: ResourceNotFound, ctx: PlatformContext) {\n    const {response, request} = ctx;\n    const acceptTypes = request.getAcceptMime();\n\n    if (acceptTypes.includes(\"text/html\")) {\n      return response.render(\"404\", {});\n    }\n\n    const error = {\n      name: exception.origin?.name || exception.name,\n      message: exception.message,\n      status: exception.status,\n      errors: exception.errors\n    };\n\n    response.status(404).body(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Mapper in Typescript\nDESCRIPTION: This snippet demonstrates how to create a custom DateMapper class that handles date serialization and deserialization, including support for different date formats.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {isBoolean} from \"@tsed/core\";\nimport {DateFormat} from \"@tsed/schema\";\nimport {serialize, JsonMapper, JsonMapperContext, JsonMapperMethods} from \"../../src/index\";\n\n@JsonMapper(Date)\nexport class DateMapper implements JsonMapperMethods {\n  deserialize(data: string | number, ctx: JsonMapperContext): Date;\n  deserialize(data: boolean | null | undefined, ctx: JsonMapperContext): boolean | null | undefined;\n  deserialize(data: any, ctx: JsonMapperContext): any {\n    // don't convert unexpected data. In normal case, Ajv reject unexpected data.\n    // But by default, we have to skip data deserialization and let user to apply\n    // the right mapping\n    if (isBoolean(data) || data === null || data === undefined) {\n      return data;\n    }\n\n    return new Date(data);\n  }\n\n  serialize(object: Date, ctx: JsonMapperContext): any {\n    const date = new Date(object);\n\n    switch (ctx.options.format) {\n      case \"date\":\n        const y = date.getUTCFullYear();\n        const m = (\"0\" + (date.getUTCMonth() + 1)).slice(-2);\n        const d = (\"0\" + date.getUTCDate()).slice(-2);\n\n        return `${y}-${m}-${d}`;\n      default:\n        return new Date(object).toISOString();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with TypeGraphQL\nDESCRIPTION: Server configuration setup for TypeGraphQL integration showing Apollo server options and type-graphql settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/typegraphql\";\nimport \"./resolvers/index\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      path: \"/\",\n      playground: true\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Express\nDESCRIPTION: Example showing how to configure a basic Ts.ED server using Express platform with middleware configuration. Uses the @Configuration decorator to specify port and middleware settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/common/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport \"@tsed/platform-express\";\nimport Path from \"node:path\";\nimport cookieParser from \"cookie-parser\";\nimport compress from \"compression\";\nimport methodOverride from \"method-override\";\n\n@Configuration({\n  port: 3000,\n  middlewares: [\"cookie-parser\", \"compression\", \"method-override\", \"json-parser\", \"urlencoded-parser\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Objection.js Connection in Ts.ED Service\nDESCRIPTION: Example of injecting and using the Objection.js connection in a Ts.ED service class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OBJECTION_CONNECTION} from \"@tsed/objection\";\n\n@Injectable()\nclass MyService {\n  @Inject(OBJECTION_CONNECTION)\n  connection: OBJECTION_CONNECTION;\n\n  $onInit() {\n    console.log(this.connection);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AJV in Ts.ED Server\nDESCRIPTION: Basic server configuration to import and use AJV validation module with coerced values returned to the next pipe.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({\n  ajv: {\n    returnsCoercedValues: true // returns coerced value to the next pipe instead of returns original value (See #2355)\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth Protocol in Ts.ED\nDESCRIPTION: TypeScript class implementing a Basic Auth protocol using passport-http strategy in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/BasicProtocol.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Dependencies\nDESCRIPTION: Commands to install required Mongoose packages using different package managers including npm, yarn, and bun.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save mongoose\nnpm install --save @tsed/mongoose\nnpm install --save-dev @tsed/testcontainers-mongo\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE with RxJS Observable\nDESCRIPTION: Controller implementation using RxJS Observable for SSE event streaming\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/sse/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventStream} from \"@tsed/sse\";\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  @Get(\"/events\")\n  @EventStream()\n  events() {\n    const observable = new Observable((observer) => {\n      setInterval(() => {\n        observer.next(new Date());\n      }, 1000);\n    });\n\n    return observable;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with OIDC Provider\nDESCRIPTION: TypeScript code snippet showing the configuration of a Ts.ED server with OIDC provider settings, including adapters, views, and OIDC-specific options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {Accounts} from \"./services/Accounts\";\nimport {InteractionsCtrl} from \"./controllers/oidc/InteractionsCtrl\";\n\n@Configuration({\n  httpPort: 8083,\n  mount: {\n    \"/\": [InteractionsCtrl]\n  },\n  adapters: {\n    lowdbDir: join(process.cwd(), \"..\", \".db\"),\n    Adapter: FileSyncAdapter\n  },\n  oidc: {\n    // path: \"/oidc\",\n    Accounts: Accounts,\n    jwksPath: join(process.cwd(), \"..\", \"..\", \"keys\", \"jwks.json\"),\n    // allowHttpLocalhost: false, // by default. true in dev mode and false in production\n    clients: [\n      {\n        client_id: \"client_id\",\n        client_secret: \"client_secret\",\n        redirect_uris: [\"http://localhost:3000\"],\n        response_types: [\"id_token\"],\n        grant_types: [\"implicit\"],\n        token_endpoint_auth_method: \"none\"\n      }\n    ],\n    claims: {\n      openid: [\"sub\"],\n      email: [\"email\", \"email_verified\"]\n    },\n    features: {\n      // disable the packaged interactions\n      devInteractions: {enabled: false},\n      encryption: {enabled: true},\n      introspection: {enabled: true},\n      revocation: {enabled: true}\n    }\n  },\n  views: {\n    root: `./views`,\n    extensions: {\n      ejs: \"ejs\"\n    }\n  }\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining MikroORM Entity with Ts.ED Decorators\nDESCRIPTION: Example of defining a MikroORM entity (User) with Ts.ED decorators for JSON Schema validation and Swagger documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MaxLength, Required} from \"@tsed/schema\";\nimport {Entity, Property, PrimaryKey, Property} from \"@mikro-orm/core\";\n\n@Entity()\nexport class User {\n  @PrimaryKey()\n  @Required()\n  id!: number;\n\n  @Property()\n  @MaxLength(100)\n  @Required()\n  firstName!: string;\n\n  @Property()\n  @MaxLength(100)\n  @Required()\n  lastName!: string;\n\n  @Property()\n  @Mininum(0)\n  @Maximum(100)\n  age!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KeycloakMiddleware\nDESCRIPTION: Middleware class that handles token management and route protection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MiddlewareMethods, Middleware} from \"@tsed/platform-middlewares\";\nimport {Inject} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\nimport {KeycloakAuthOptions} from \"../decorators/KeycloakAuthDecorator\";\nimport {KeycloakService} from \"../services/KeycloakService\";\n\n@Middleware()\nexport class KeycloakMiddleware implements MiddlewareMethods {\n  @Inject()\n  protected keycloakService: KeycloakService;\n\n  public use(@Context() ctx: Context) {\n    const options: KeycloakAuthOptions = ctx.endpoint.store.get(KeycloakMiddleware);\n    const keycloak = this.keycloakService.getKeycloakInstance();\n\n    if (ctx.getRequest().kauth.grant) {\n      this.keycloakService.setToken(ctx.getRequest().kauth.grant.access_token);\n    }\n\n    return keycloak.protect(options.role);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Scope in Ts.ED with Functional API\nDESCRIPTION: Creates a provider with request scope using the functional API. A new instance is created for each incoming request, ensuring that each request to the endpoint returns a different random value.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, registerProvider} from \"@tsed/common\";\nimport {useDecorators} from \"@tsed/core\";\n\nfunction RandomController() {\n  const random = Math.random();\n\n  return useDecorators(\n    Get(\"/\"),\n    () => {\n      return random;\n    }\n  );\n}\n\nregisterProvider({\n  provide: RandomController,\n  type: \"controller\",\n  use: [RandomController], // function and endpoint\n  scope: \"request\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PubSub Provider\nDESCRIPTION: Setting up a PubSub instance and registering it as a provider for dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PubSub} from \"graphql-subscriptions\";\nimport {registerProvider} from \"@tsed/di\";\n\nexport const pubsub = new PubSub();\nexport const PubSubProvider = Symbol.for(\"PubSubProvider\");\nexport type PubSubProvider = PubSub;\n\nregisterProvider({provide: PubSub, useValue: pubsub});\n```\n\n----------------------------------------\n\nTITLE: Injecting Mongoose Model\nDESCRIPTION: Example of injecting and using a Mongoose model in a service\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service, Inject} from \"@tsed/di\";\nimport {MongooseModel} from \"@tsed/mongoose\";\nimport {MyModel} from \"./models/MyModel.js\";\n\n@Service()\nexport class MyService {\n  constructor(@Inject(MyModel) private model: MongooseModel<MyModel>): MyModel {\n    console.log(model);\n  }\n\n  async save(obj: MyModel): MongooseModel<MyModel> {\n    const doc = new this.model(obj);\n    await doc.save();\n\n    return doc;\n  }\n\n  async find(query: any) {\n    const list = await this.model.find(query).exec();\n    console.log(list);\n    return list;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Keywords in a Model\nDESCRIPTION: Example of a Product model that uses custom validation keywords for price range validation, showing both direct CustomKey usage and abstracted decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CustomKey} from \"@tsed/schema\";\nimport {Range, ExclusiveRange} from \"../decorators/Range\"; // custom decorator\n\nexport class Product {\n  @CustomKey(\"range\", [10, 100])\n  @CustomKey(\"exclusiveRange\", true)\n  price: number;\n\n  // OR\n\n  @Range(10, 100)\n  @ExclusiveRange(true)\n  price2: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Command Class in TypeScript\nDESCRIPTION: Example of a basic command implementation with @Command decorator. Includes the $prompt method for interactive questions, $mapContext for context mapping, and $exec for task execution.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\n\nexport interface HelloCommandContext {}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {},\n  options: {},\n  allowUnknownOption: false\n})\nexport class HelloCommand implements CommandProvider {\n  /**\n   *  Ask questions using Inquirer. Return an empty array or don't implement the method to skip this step\n   */\n  async $prompt(initialOptions: Partial<HelloCommandContext>): Promise<QuestionOptions> {\n    return [];\n  }\n\n  /**\n   * This method is called after the $prompt to create / map inputs to a proper context for the next step\n   */\n  $mapContext(ctx: Partial<HelloCommandContext>): HelloCommandContext {\n    return {\n      ...ctx\n      // map something, based on ctx\n    };\n  }\n\n  /**\n   *  This step run your tasks with Listr module\n   */\n  async $exec(ctx: HelloCommandContext): Promise<any> {\n    return [\n      {\n        title: \"Doing something\",\n        task: () => {\n          console.log(\"HELLO\");\n        }\n      }\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration with node-config in Ts.ED\nDESCRIPTION: Demonstrates integration of node-config library with Ts.ED to load configuration from structured config files. This approach supports hierarchical configuration with environment-specific overrides.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/load-configuration-from-file.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/common\";\nimport {$log} from \"@tsed/logger\";\nimport * as config from \"config\";\n\nexport const rootDir = __dirname;\n\n@Configuration({\n  rootDir,\n  port: config.get(\"server.port\")\n})\nexport class Server {\n  @Inject()\n  app: PlatformApplication;\n\n  $beforeInit() {\n    $log.debug(\"Do something before init\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with PlatformResponse in Ts.ED\nDESCRIPTION: This snippet demonstrates how to render a template using the PlatformResponse instance in a Ts.ED controller. It includes both the controller code and the corresponding EJS template.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams, PlatformResponse} from \"@tsed/common\";\n\n@Controller(\"/events\")\nexport class EventCtrl {\n  @Get(\"/:id\")\n  async get(@PathParams(\"id\") id: string, @PlatformResponse() response: PlatformResponse) {\n    const event = await this.eventService.find(id);\n\n    return response.render(\"event.ejs\", {\n      startDate: event.startDate.toISOString(),\n      name: event.name\n    });\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1><%- name %></h1>\n<div>Start: <%- startDate %></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for TestContainers with Mongoose\nDESCRIPTION: This snippet shows how to configure Vitest to use TestContainers for Mongoose testing. It sets up a global setup file to start the MongoDB server for testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    globalSetup: [import.meta.resolve(\"@tsed/testcontainers-mongo/vitest/setup\")]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Model for Swagger Documentation\nDESCRIPTION: Example of defining a model class with properties and decorators for use in Swagger documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, MinLength, MaxLength, Property} from \"@tsed/schema\";\n\nexport class Calendar {\n  @Property()\n  id: string;\n\n  @Required()\n  @MinLength(3)\n  @MaxLength(20)\n  name: string;\n\n  @Property()\n  owner: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Express\nDESCRIPTION: Example showing how to configure a basic Ts.ED server with Express integration. Demonstrates the use of Configuration decorator and middleware setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-http/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport \"@tsed/platform-express\";\nimport Path from \"node:path\";\nimport cookieParser from \"cookie-parser\";\nimport compress from \"compression\";\nimport methodOverride from \"method-override\";\n\n@Configuration({\n  port: 3000,\n  middlewares: [\"cookie-parser\", \"compression\", \"method-override\", \"json-parser\", \"urlencoded-parser\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Mongoose Model Instance Caveat in TypeScript\nDESCRIPTION: This snippet shows a caveat where Mongoose doesn't return a real instance of the defined class. It demonstrates how to use the MongooseModel to find instances of a Product class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, Injectable} from \"@tsed/di\";\nimport {MongooseModel} from \"@tsed/mongoose\";\nimport {Product} from \"./models/Product\";\n\n@Injectable()\nexport class MyRepository {\n  @Inject(Product)\n  private model: MongooseModel<Product>;\n\n  async find(query: any) {\n    const list = await this.model.find(query).exec();\n\n    console.log(list[0]); // Model { Product }\n\n    return list;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with Multiple Response Types\nDESCRIPTION: Shows a controller that returns different content types (JSON and XML) for the same endpoint using the Returns decorator with ContentType specifications.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {Returns} from \"@tsed/schema\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Get(\"/:id\")\n  @(Returns(200, User).ContentType(\"application/json\"))\n  @(Returns(200, String).ContentType(\"text/xml\"))\n  async getUser(@PathParams(\"id\") id: string) {\n    return new User({id});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MikroORM Subscriber with IoC Container\nDESCRIPTION: Examples of registering MikroORM subscribers using Ts.ED's IoC container, including both default and context-specific subscriber registration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventSubscriber} from \"@mikro-orm/core\";\nimport {Subscriber} from \"@tsed/mikro-orm\";\n\n@Subscriber()\nexport class SomeSubscriber implements EventSubscriber {\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventSubscriber} from \"@mikro-orm/core\";\nimport {Subscriber} from \"@tsed/mikro-orm\";\n\n@Subscriber({contextName: \"mongodb\"})\nexport class SomeSubscriber implements EventSubscriber {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using @EntityManager Decorator to Obtain EntityManager Instance\nDESCRIPTION: Shows how to inject and use an EntityManager instance in a service using the @Em decorator. Includes an example of creating a user.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {Em} from \"@tsed/mikro-orm\";\nimport {EntityManager} from \"@mikro-orm/mysql\"; // Import EntityManager from your driver package or `@mikro-orm/knex`\n\n@Injectable()\nexport class UsersService {\n  @Em()\n  private readonly em!: EntityManager;\n\n  async create(user: User): Promise<User> {\n    await this.em.persistAndFlush(user);\n    console.log(\"Saved a new user with id: \" + user.id);\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AJV Keyword Validator in Ts.ED\nDESCRIPTION: Implementation of a custom range validation keyword for AJV. Uses the @Keyword decorator to define a new validator that checks if a number is within a specified range.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Keyword, KeywordMethods} from \"@tsed/ajv\";\nimport {array, number} from \"@tsed/schema\";\n\n@Keyword({\n  keyword: \"range\",\n  type: \"number\",\n  schemaType: \"array\",\n  implements: [\"exclusiveRange\"],\n  metaSchema: array().items([number(), number()]).minItems(2).additionalItems(false)\n})\nclass RangeKeyword implements KeywordMethods {\n  compile([min, max]: number[], parentSchema: any) {\n    return parentSchema.exclusiveRange === true ? (data: any) => data > min && data < max : (data: any) => data >= min && data <= max;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED server with TypeGraphQL\nDESCRIPTION: TypeScript code to configure the Ts.ED server with TypeGraphQL integration, including Apollo Server settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/typegraphql/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/typegraphql\";\nimport \"./resolvers/index\"; // barrel file with all resolvers\n\n@Configuration({\n  apollo: {\n    server1: {\n      // GraphQL server configuration\n      // See options descriptions on https://www.apollographql.com/docs/apollo-server/api/apollo-server.html\n      path: \"/\",\n      playground: true // enable playground GraphQL IDE. Set false to use Apollo Studio\n\n      // resolvers?: (Function | string)[];\n      // dataSources?: Function;\n      // server?: (config: Config) => ApolloServer;\n\n      // plugins: []\n      // middlewareOptions?: ServerRegistration;\n\n      // type-graphql\n      // See options descriptions on https://19majkel94.github.io/type-graphql/\n      // buildSchemaOptions?: Partial<BuildSchemaOptions>;\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminators in Mongoose Models\nDESCRIPTION: Example of using discriminators with Mongoose models in Ts.ED\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Model()\nclass EventModel {\n  @ObjectID()\n  _id: string;\n\n  @Required()\n  time: Date = new Date();\n\n  @DiscriminatorKey()\n  type: string;\n}\n\n@Model()\nclass ClickedLinkEventModel extends EventModel {\n  @Required()\n  url: string;\n}\n\n@Model({discriminatorValue: \"signUpEvent\"})\nclass SignedUpEventModel extends EventModel {\n  @Required()\n  user: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Stripe in a Service\nDESCRIPTION: Example of how to inject and use the Stripe instance in a Ts.ED service class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass MyStripeService {\n  @Inject()\n  stripe: Stripe;\n\n  $onInit() {\n    // do something with stripe\n    this.stripe.on(\"request\", this.onRequest.bind(this));\n  }\n\n  protected onRequest(request: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Pulse Service\nDESCRIPTION: Example demonstrating how to inject and use the PulseModule service directly for manual job scheduling\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/pulse.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {AfterRoutesInit} from \"@tsed/platform-params\";\nimport {PulseModule} from \"@tsed/pulse\";\n\n@Service()\nexport class UsersService {\n  @Inject()\n  private pulse: PulseModule;\n\n  async create(user: User): Promise<User> {\n    await this.pulse.now(\"email.sendWelcomeEmail\", {user});\n    await this.pulse.schedule(\"in 2 hours\", \"email.sendFollowUpEmail\", {user});\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Discord Protocol in Ts.ED\nDESCRIPTION: TypeScript class implementing Discord protocol with token refresh functionality in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/DiscordProtocol.ts\n```\n\n----------------------------------------\n\nTITLE: Exposing a Web Application with Custom Cache Headers in Express.js\nDESCRIPTION: Configuration for exposing a frontend web application (React, Vue.js, Angular) with appropriate cache headers and redirection rules for client-side routing in Express.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport send from \"send\";\n\nfunction setCustomCacheControl(res: ServerResponse, path: string) {\n  if (send.mime.lookup(path) === \"text/html\") {\n    res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    res.setHeader(\"Pragma\", \"no-cache\");\n    res.setHeader(\"expires\", \"0\");\n  }\n}\n\n@Configuration({\n  statics: {\n    \"/app\": [\n      {\n        root: `./public`,\n        maxAge: \"1d\",\n        setHeaders: setCustomCacheControl\n      }\n    ]\n  }\n})\nexport class Server {\n  @Inject()\n  app: PlatformApplication;\n\n  $afterRoutesInit() {\n    this.app.get(`/app/*`, (req: any, res: Res) => {\n      res.sendFile(join(directory, \"index.html\"));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-loading with Decorators in Ts.ED\nDESCRIPTION: Example showing how to use the LazyInject decorator to load the PlatformExceptions provider on-demand, reducing initial bootstrap time. The provider will only be loaded when the property is actually used in the code.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Injectable } from \"@tsed/di\";\nimport { LazyInject } from \"@tsed/di\";\n\n@Injectable()\nexport class MyService {\n  @LazyInject(\"@tsed/platform-exceptions:PlatformExceptions\")\n  protected exception: any;\n\n  public method() {\n    // exception is instantiated only when the code reaches this line\n    throw this.exception.badRequest(\"message\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using AcceptRoles Decorator in Ts.ED\nDESCRIPTION: Example of using the AcceptRoles decorator to protect an endpoint with role-based access in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/roles-usage.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing $onInit Hook for Asynchronous Initialization\nDESCRIPTION: Shows how to implement the $onInit hook to perform asynchronous tasks when all tokens are resolved. This example loads data and caches it for later use.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module, OnInit} from \"@tsed/di\";\n\n@Module()\nexport class MyModule implements OnInit {\n  cachedData: any;\n\n  async $onInit(): Promise<any> {\n    this.cachedData = await this.loadData();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Engine in Ts.ED\nDESCRIPTION: This example shows how to implement a custom template engine (Pug) for Ts.ED using the @ViewEngine decorator. It demonstrates the required methods for compiling templates and files.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Engine, ViewEngine} from \"@tsed/engines\";\n\n@ViewEngine(\"pug\", {\n  requires: [\"pug\", \"then-pug\"] // multiple require is possible. Ts.ED will use the first module resolved from node_modules\n})\nexport class PugEngine extends Engine {\n  protected $compile(template: string, options: any) {\n    return this.engine.compile(template, options);\n  }\n\n  protected async $compileFile(file: string, options: any) {\n    return this.engine.compileFile(file, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Authorizer Controller in Ts.ED\nDESCRIPTION: This snippet shows the implementation of a Lambda Authorizer controller in Ts.ED. It includes JWT token validation, user scope checking, and policy generation for allowing or denying access to API resources.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JwtService} from \"@project/infra/auth/services/JwtService.js\";\nimport {AwsPolicyService} from \"@project/infra/aws/auth/AwsPolicyService.js\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\nimport {ServerlessContext} from \"@tsed/platform-serverless\";\nimport {Description, Get} from \"@tsed/schema\";\nimport type {APIGatewayTokenAuthorizerEvent} from \"aws-lambda\";\n\nexport type AuthorizeServerlessContext = ServerlessContext<APIGatewayTokenAuthorizerEvent>;\n\n@Controller(\"/\")\nexport class LambdaAuthorizerController {\n  @Inject()\n  protected awsPolicyService: AwsPolicyService;\n\n  @Inject()\n  protected jwtService: JwtService;\n\n  @Get(\"/authorizer\")\n  @Description(\"this endpoint is used to authorize the request using Lambda aws\")\n  async authorizer(@Context() $ctx: AuthorizeServerlessContext) {\n    const decodedToken = await this.jwtService.decode($ctx.event.authorizationToken.replace(\"Bearer \", \"\"));\n    const {user} = decodedToken.payload;\n\n    // example on how to manage auth and format the response depending on the user scope\n    if (!user.scopes.includes(\"api\")) {\n      // not allowed to consume API\n      return $ctx.response.status(401).body(this.awsPolicyService.generateDeny(\"me\", $ctx.event.methodArn));\n    }\n\n    if (user.scopes.includes(\"timeslots\")) {\n      // allowed to consume timeslots\n      return this.awsPolicyService.generateAllow(\"me\", $ctx.event.methodArn, {\n        user\n      });\n    }\n\n    // no API resource allowed\n    return this.awsPolicyService.generateDeny(\"me\", $ctx.event.methodArn);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Interceptor in TypeScript\nDESCRIPTION: Implementation of a basic interceptor class that logs method execution details. The interceptor implements InterceptorMethods interface and uses the @Interceptor decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/interceptors.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Interceptor()\nexport class MyInterceptor implements InterceptorMethods {\n  intercept(context: InterceptorContext<any>, next: InterceptorNext) {\n    console.log(\n      `the method ${context.target.name} will be executed with args and static data`,\n      context.args,\n      context.options\n    )\n\n    return next().then((result) => {\n      console.log(`the method was executed, and returned`, result)\n      return result\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ in Ts.ED Server\nDESCRIPTION: TypeScript code to configure the BullMQ module in a Ts.ED server, including queue definitions, connection options, and worker settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/bullmq\"; // import bullmq ts.ed module\n\n@Configuration({\n  bullmq: {\n    // Define queue names.\n    // Note: Since v7.60.0 this options is not required anymore, excepted if queue is not defined in JobController decorator\n    queues: [\"default\", \"special\"],\n    connection: {\n      // redisio connection options\n    },\n    defaultQueueOptions: {\n      // Default queue options which are applied to every queue\n      // Can be extended/overridden by `queueOptions`\n    },\n    queueOptions: {\n      special: {\n        // Specify additional queue options by queue name\n      }\n    },\n    // Disable the creation of any worker.\n    // All other worker configuration will be ignored\n    disableWorker: true,\n    // Specify for which queues to start a worker for.\n    // When undefined falls back to all queues specified.\n    workerQueues: [\"default\"],\n    defaultWorkerOptions: {\n      // Default worker options which are applied to every worker\n      // Can be extended/overridden by `workerOptions`\n    },\n    workerOptions: {\n      special: {\n        // Specify additional worker options by queue name\n      }\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Testing Socket.io Service with Vitest in Ts.ED\nDESCRIPTION: Example showing how to test a Socket.io service using Vitest testing framework. Nearly identical to the Jest implementation but with ESM imports. Demonstrates socket service testing setup and event handling verification.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Emit, Input, SocketIOServer, SocketService, SocketSession, SocketUseBefore} from \"@tsed/socketio\";\nimport {SocketClientService} from \"@tsed/socketio-testing\";\nimport {Namespace, Socket as IOSocket} from \"socket.io\";\nimport {Server} from \"./app/Server.js\";\n\n@SocketService(\"/test\")\nexport class TestWS {\n  @Inject()\n  private io: SocketIOServer;\n\n  $onConnection(socket: IOSocket, nsp: Namespace) {}\n\n  $onDisconnect(socket: IOSocket, nsp: Namespace) {}\n\n  @Input(\"input:scenario1\")\n  @Emit(\"output:scenario1\")\n  async scenario1() {\n    return \"My message\";\n  }\n}\n\ndescribe(\"Socket integration\", () => {\n  beforeAll(\n    PlatformTest.bootstrap(Server, {\n      adapter: PlatformExpress,\n      listen: true,\n      httpPort: 8999,\n      imports: [TestWS]\n    })\n  );\n  afterAll(PlatformTest.reset);\n\n  describe(\"RoomWS: eventName\", () => {\n    it(\"should return the data\", async () => {\n      const service = PlatformTest.get<SocketClientService>(SocketClientService);\n      const client = await service.get(\"/test\");\n      const client2 = await service.get(\"/test\");\n\n      expect(client).toEqual(client2);\n\n      return new Promise((resolve) => {\n        client.on(\"output:scenario1\", (result) => {\n          expect(result).toEqual(\"My message\");\n          resolve();\n        });\n\n        client.emit(\"input:scenario1\");\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment in Server Configuration\nDESCRIPTION: Demonstration of setting the environment profile and using it within the server class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Env} from \"@tsed/core\";\nimport {Configuration, Constant} from \"@tsed/di\";\n\n@Configuration({\n  env: Env.PROD\n})\nexport class Server {\n  @Constant(\"env\")\n  env: Env;\n\n  $beforeRoutesInit() {\n    if (this.env === Env.PROD) {\n      // do something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using In Decorator for Swagger Authorization Header in Ts.ED\nDESCRIPTION: Enhanced Auth decorator that adds the Authorization header field to Swagger documentation automatically using the In decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/authentication.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {UseAuth} from \"@tsed/common\";\nimport {In, Returns, Security} from \"@tsed/schema\";\nimport {CustomAuth} from \"../middlewares/CustomAuth\";\n\nexport function Auth(options?: any) {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    // Apply decorators\n    Security(\"bearer\")(target, propertyKey, descriptor);\n    Returns(401).Description(\"Unauthorized\")(target, propertyKey, descriptor);\n    Returns(403).Description(\"Forbidden\")(target, propertyKey, descriptor);\n    In(\"header\").Name(\"Authorization\").Description(\"Bearer <token>\").Required()(target, propertyKey, descriptor);\n    UseAuth(CustomAuth, options)(target, propertyKey, descriptor);\n\n    return descriptor;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using PulseService in Ts.ED\nDESCRIPTION: Demonstrates how to inject the PulseService instance and use it to schedule jobs manually within a service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/pulse/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service, Inject} from \"@tsed/di\";\nimport {PulseModule} from \"@tsed/pulse\";\n\n@Service()\nexport class UsersService {\n  @Inject()\n  private pulse: PulseModule;\n\n  async create(user: User): Promise<User> {\n    // do something\n    // ...\n    // then schedule some jobs\n    await this.pulse.now(\"email.sendWelcomeEmail\", {user});\n    await this.pulse.schedule(\"in 2 hours\", \"email.sendFollowUpEmail\", {user});\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Type Mapper in Typescript\nDESCRIPTION: This snippet shows how to create a custom type mapper using the JsonMapper decorator. It implements serialize and deserialize methods for a String type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonMapper, JsonMapperMethods, JsonMapperCtx} from \"@tsed/json-mapper\";\n\n@JsonMapper(String)\nexport class TheTypeMapper implements JsonMapperMethods {\n  deserialize(data: any, ctx: JsonMapperCtx): String {\n    return JSON.stringify(data) + \":deserialize\";\n  }\n\n  serialize(data: any, ctx: JsonMapperCtx): String {\n    return JSON.stringify(data) + \":serialize\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Lambda Controller Implementation\nDESCRIPTION: Example of a Lambda controller class with dependency injection and HTTP endpoint definition using Ts.ED decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\";\nimport {TimeslotsService} from \"../services/TimeslotsService\";\nimport {TimeslotModel} from \"../models/TimeslotModel\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsLambda {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  get(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Object in Ts.ED\nDESCRIPTION: Shows how to return a response-like object from a controller method to set status, headers, and data in one operation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    return {\n      statusText: \"OK\",\n      status: 200,\n      headers: {},\n      data: {}\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Defining Job Processors in Ts.ED Pulse\nDESCRIPTION: Shows how to manually define job processors using PulseModule, including fetching data and dynamically building job names and options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/pulse/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Pulse, PulseModule, Define} from \"@tsed/pulse\";\n\n@Pulse({namespace: \"email\"})\nexport class EmailJobService {\n  @Inject()\n  pulse: PulseModule;\n\n  @Inject()\n  httpClient: HttpClient;\n\n  cache: Map<string, Job[]> = new Map();\n\n  @Define({\n    name: \"sendWelcomeEmail\",\n    concurrency: 3\n    /*  ... and any option you would normally pass to pulse.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n    console.log(job.attrs.data.locale);\n  }\n\n  async $beforePulseStart() {\n    const locales = await this.httpClient.get(\"/locales\");\n\n    this.cache.set(\n      \"sendWelcomeEmail\",\n      locales.map((locale) => {\n        return this.pulse.create(\"sendWelcomeEmail\", {locale});\n      })\n    );\n  }\n\n  async $afterPulseStart() {\n    const jobs = this.cache.get(\"sendWelcomeEmail\");\n\n    await Promise.all(jobs.map((job) => job.repeatEvery(\"1 week\").save()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for TestContainers with Mongoose\nDESCRIPTION: This snippet demonstrates how to configure Jest to use TestContainers for Mongoose testing. It includes setup for global setup and teardown files to start and stop the MongoDB server.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  globalSetup: [\"jest.setup.js\"],\n  globalTeardown: [\"jest.teardown.js\"]\n};\n\n// jest.setup.js\nconst {TestContainersMongo} = require(\"@tsed/testcontainers-mongo\");\nmodule.exports = async () => {\n  await TestContainersMongo.startMongoServer();\n};\n\n// jest.teardown.js\nconst {TestContainersMongo} = require(\"@tsed/testcontainers-mongo\");\nmodule.exports = async () => {\n  await TestContainersMongo.stopMongoServer();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Endpoint Middleware Decorator in Ts.ED\nDESCRIPTION: Demonstrates the usage of the custom AcceptMimes decorator on a controller method to specify accepted MIME types for an endpoint.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/middlewares.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get} from \"@tsed/common\";\nimport {AcceptMimes} from \"./AcceptMimes\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  @AcceptMimes('application/json')\n  get() {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controllers and Setting up Express.js App with PlatformRouter\nDESCRIPTION: This snippet demonstrates how to create controllers using decorators, set up an Express.js application, and use PlatformRouter to generate routes from the decorated classes. It also shows how to transform handler metadata and bind layers to the Express.js router.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-router/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport {Controller, InjectorService} from \"@tsed/di\";\nimport {PlatformHandlerType, PlatformHandlerMetadata, PlatformRouter, PlatformLayer} from \"@tsed/platform-router\";\nimport {Delete, Get, Head, Options, Patch, Post, Put} from \"@tsed/schema\";\n\n@Controller(\"/nested\")\nclass NestedController {\n  @Get(\"/\")\n  get() {}\n\n  @Post(\"/\")\n  post() {}\n\n  @Put(\"/:id\")\n  put() {}\n\n  @Delete(\"/:id\")\n  delete() {}\n\n  @Head(\"/:id\")\n  head() {}\n\n  @Options(\"/:id\")\n  option() {}\n\n  @Patch(\"/:id\")\n  patch() {}\n}\n\n@Controller({path: \"/controller\", children: [NestedController]})\n@UseBefore(function useBefore() {})\nclass MyController {\n  @Get(\"/\")\n  get() {}\n\n  @Post(\"/\")\n  post() {}\n\n  @Put(\"/:id\")\n  put() {}\n\n  @Delete(\"/:id\")\n  delete() {}\n\n  @Head(\"/:id\")\n  head() {}\n\n  @Options(\"/:id\")\n  option() {}\n\n  @Patch(\"/:id\")\n  patch() {}\n}\n\nconst injector = new InjectorService();\n\nconst expressApp = express();\n\ninjector.addProvider(MyController);\ninjector.addProvider(NestedController);\n\nconst appRouter = new PlatformRouter(injector);\n\nappRouter.use(\"/rest\", MyController);\n\n// transform handlerMetadata to a compatible handler for the targeted framework (Express.js, Koa.js, etc...)\nPlatformRouter.hooks.on(\"alterHandler\", (handlerMetadata: PlatformHandlerMetadata) => {\n  if (!handlerMetadata.isInjectable()) {\n    return handlerMetadata.handler;\n  }\n\n  const handler = this.platformParams.compileHandler(handlerMetadata);\n\n  switch (handlerMetadata.type) {\n    case PlatformHandlerType.DEFAULT:\n    case PlatformHandlerType.ENDPOINT:\n    case PlatformHandlerType.MIDDLEWARE:\n      const handler = platformParams.compileHandler(handlerMetadata);\n\n      return (req, res, next) => {\n        return handler({$ctx: {next, request: req, response: res}});\n      };\n    case PlatformHandlerType.ERR_MIDDLEWARE:\n      return (error: unknown, req, res, next) => {\n        return handler({$ctx: {error, next, request: req, response: res}});\n      };\n  }\n});\n\n// bind layers to the framework router\nappRouter.getLayers().forEach((layer: PlatformLayer) => {\n  const {method, args} = layer;\n\n  expressApp[method](...layer.args);\n});\n\nexpressApp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Events in Ts.ED\nDESCRIPTION: Shows how to subscribe to custom events by implementing the event interface in a module class. This allows the module to react to events emitted by other modules.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module} from \"@tsed/di\";\nimport {OnEvent} from \"./ModuleEmitter.js\";\n\n@Module()\nexport class ModuleSubscriber extends OnEvent {\n  $alterEvent() {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Provider with Lifecycle Hooks\nDESCRIPTION: Example showing how to create a custom provider class with lifecycle hook $onInit. This demonstrates basic provider initialization using the @Injectable decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-providers.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass CustomProvider {\n  async $onInit() {\n    // Initialize your custom provider\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Background Cache Refresh Configuration in Ts.ED\nDESCRIPTION: Implements background cache refresh mechanism using refreshThreshold option in UseCache decorator for service methods.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {PathParams} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\n\n@Injectable()\nexport class MyService {\n  @UseCache({ttl: 3600, refreshThreshold: 900})\n  get(id: string) {\n    return \"something with \" + id;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Decorator with Express Middleware\nDESCRIPTION: A simplified endpoint decorator that sets the HTTP status code. This example uses a pure Express middleware for better performance when the action is small.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-endpoint-decorators.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {StoreSet} from \"@tsed/core\";\nimport {useDecorators} from \"@tsed/core\";\nimport {UseAfter} from \"@tsed/common\";\n\nexport function Status(status: number) {\n  return useDecorators(\n    StoreSet(Status, status),\n    UseAfter((req: any, res: any, next: any) => {\n      const endpoint = req.ctx.endpoint;\n      const code = endpoint.get(Status) || res.statusCode;\n\n      res.status(code);\n      next();\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Implementation using RxJS Observable\nDESCRIPTION: Example showing how to implement SSE using RxJS Observable pattern\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/server-sent-events.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {EventStream} from \"@tsed/sse\";\nimport {Observable} from \"rxjs\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  @Get(\"/events\")\n  @EventStream()\n  events() {\n    const observable = new Observable((observer) => {\n      setInterval(() => {\n        observer.next(new Date());\n      }, 1000);\n    });\n\n    return observable;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interceptor with Service Methods\nDESCRIPTION: Example showing how to apply an interceptor to a service method using the @Intercept decorator with custom options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/interceptors.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class MyService {\n  @Intercept(MyInterceptor, \"simple data\")\n  mySimpleMethod() {\n    console.log(\"the simple method is executed\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler Socket Middleware in TypeScript\nDESCRIPTION: A Socket.io error middleware that handles errors thrown during socket processing. It logs the error and emits an error event back to the client with a generic error message.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketMiddlewareError, SocketErr, Socket} from \"@tsed/socketio\";\n\n@SocketMiddlewareError()\nexport class ErrorHandlerSocketMiddleware {\n  async use(@SocketErr err: any, @Socket socket: SocketIO.Socket) {\n    console.error(err);\n    socket.emit(\"error\", {message: \"An error has occured\"});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Name Decorator for Property Aliases\nDESCRIPTION: Shows how to rename properties using the @Name decorator, which is useful for mapping database field names to more consumer-friendly API property names.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Name, Property} from \"@tsed/schema\";\n\nclass Product {\n  @Name(\"id\")\n  _id: string;\n\n  @Property()\n  title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Job Processor Definition\nDESCRIPTION: Example showing how to manually define job processors with dynamic configuration and lifecycle hooks\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/pulse.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Pulse, PulseModule, Define} from \"@tsed/pulse\";\n\n@Pulse({namespace: \"email\"})\nexport class EmailJobService {\n  @Inject()\n  pulse: PulseModule;\n\n  @Inject()\n  httpClient: HttpClient;\n\n  cache: Map<string, Job[]> = new Map();\n\n  @Define({\n    name: \"sendWelcomeEmail\",\n    concurrency: 3\n  })\n  async sendWelcomeEmail(job: Job) {\n    console.log(job.attrs.data.locale);\n  }\n\n  async $beforePulseStart() {\n    const locales = await this.httpClient.get(\"/locales\");\n\n    this.cache.set(\n      \"sendWelcomeEmail\",\n      locales.map((locale) => {\n        return this.pulse.create(\"sendWelcomeEmail\", {locale});\n      })\n    );\n  }\n\n  async $afterPulseStart() {\n    const jobs = this.cache.get(\"sendWelcomeEmail\");\n\n    await Promise.all(jobs.map((job) => job.repeatEvery(\"1 week\").save()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown Hooks\nDESCRIPTION: Example of implementing various graceful shutdown hooks using Ts.ED Terminus decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass RedisCtrl {\n  $beforeShutdown() {\n    console.log(\"called before shutdown\");\n  }\n\n  $onSignal() {\n    console.log(\"called on signal\");\n  }\n\n  $onShutdown() {\n    console.log(\"called on shutdown\");\n  }\n\n  $onSendFailureDuringShutdown() {\n    console.log(\"on send failure during shutdown\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Template Engine Implementation\nDESCRIPTION: Shows how to implement a custom template engine using the @ViewEngine decorator and Engine class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Engine, ViewEngine} from \"@tsed/engines\";\n\n@ViewEngine(\"pug\", {\n  requires: [\"pug\", \"then-pug\"] // multiple require is possible. Ts.ED will use the first module resolved from node_modules\n})\nexport class PugEngine extends Engine {\n  protected $compile(template: string, options: any) {\n    return this.engine.compile(template, options);\n  }\n\n  protected async $compileFile(file: string, options: any) {\n    return this.engine.compileFile(file, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AJV Error Messages in Ts.ED\nDESCRIPTION: Example of configuring AJV to customize error message formatting. Uses the errorFormatter option to specify a custom error message template.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({\n  ajv: {\n    errorFormatter: (error) => `At ${error.modelName}${error.dataPath}, value '${error.data}' ${error.message}`,\n    verbose: true\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: AWS Context and Event Handler\nDESCRIPTION: Example controller showing how to access AWS Lambda event and context objects.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {ServerlessEvent, ServerlessContext} from \"@tsed/platform-serverless-http\";\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Get(\"/\")\n  get(@ServerlessEvent() event: any, @ServerlessContext() context: ServerlessContext) {\n    console.log(\"Event\", event);\n    console.log(\"Context\", context);\n\n    return {event, context};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE with EventEmitter\nDESCRIPTION: Controller implementation using Node.js EventEmitter for SSE event streaming\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/sse/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventStream} from \"@tsed/sse\";\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  private eventEmitter = new EventEmitter();\n\n  $onInit() {\n    setInterval(() => {\n      this.eventEmitter.emit(\"message\", new Date());\n    }, 1000);\n  }\n\n  @Get(\"/events\")\n  @EventStream()\n  events() {\n    return this.eventEmitter;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Repository\nDESCRIPTION: Service implementation using Redis connection for client data management\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class ClientRepository {\n  @Inject(REDIS_CONNECTION)\n  protected connection: REDIS_CONNECTION;\n\n  async keys() {\n    return this.connection.keys(\"clients:*\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Documentation - TypeScript Class Definition\nDESCRIPTION: Example of documenting a model class using Ts.ED schema decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonProperty, Title, Description, Example} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @Title(\"iD\")\n  @Description(\"Description of calendar model id\")\n  @Example(\"Example value\")\n  @JsonProperty()\n  public id: string;\n\n  @JsonProperty()\n  public name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Service Cache Implementation\nDESCRIPTION: Example of implementing cache in a service with type handling.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {UseCache} from \"@tsed/platform-cache\";\n\n@Injectable()\nexport class MyService {\n  @UseCache({type: MyClass})\n  get(id: string): MyClass {\n    return new MyClass({id});\n  }\n\n  @UseCache({type: MyClass, collectionType: Array})\n  getAll(): MyClass[] {\n    return [new MyClass({id: 1})];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Cache Refresh Implementation in Ts.ED\nDESCRIPTION: Demonstrates how to implement manual cache refresh functionality using PlatformCache for explicitly updating cached data.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Injectable} from \"@tsed/di\";\nimport {PlatformCache, UseCache} from \"@tsed/platform-cache\";\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {PathParams} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\n\n@Injectable()\nexport class ProductsService {\n  @Inject()\n  protected pimClient: PimClient;\n\n  @UseCache({ttl: 3600})\n  async get(id: string) {\n    return this.pimClient.get(\"/products/\" + id);\n  }\n}\n\n@Injectable()\nexport class NotificationsService {\n  @Inject()\n  protected cache: PlatformCache;\n\n  @Inject()\n  protected productsService: ProductsService;\n\n  refreshProductId(id: string) {\n    return this.cache.refresh(() => this.productsService.get(id));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BullMQ Server in Ts.ED\nDESCRIPTION: Server configuration example showing how to set up BullMQ with queue configurations, worker options, and Redis connection settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/bullmq\";\n\n@Configuration({\n  bullmq: {\n    queues: [\"default\", \"special\"],\n    connection: {\n    },\n    defaultQueueOptions: {\n    },\n    queueOptions: {\n      special: {\n      }\n    },\n    disableWorker: true,\n    workerQueues: [\"default\"],\n    defaultWorkerOptions: {\n    },\n    workerOptions: {\n      special: {\n      }\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform Request and Response in Ts.ED\nDESCRIPTION: Shows different ways to access the request and response objects in Ts.ED middleware, both through abstraction layers and by retrieving the original platform-specific objects.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Req, Res} from \"@tsed/platform-http\";\nimport {Middleware} from \"@tsed/platform-middlewares\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Middleware()\nexport class MyMiddleware {\n  use(@Req() req: Req, @Res() res: Res, @Context() ctx: Context) {\n    // abstraction\n    console.log(ctx.request); // PlatformRequest\n    console.log(ctx.response); // PlatformResponse\n\n    // by decorator\n    console.log(req); // Express.Request\n    console.log(res); // Express.Response\n\n    // by\n    console.log(ctx.request.raw); // Express.Request\n    console.log(ctx.response.raw); // Express.Request\n\n    // by method\n    console.log(ctx.getRequest<Express.Request>()); // Express.Request\n    console.log(ctx.getResponse<Express.Response>()); // Express.Response\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies with PlatformTest.invoke in Vitest\nDESCRIPTION: Example of mocking service dependencies using PlatformTest.invoke() in Vitest, which creates a new instance of the component with mocked dependencies.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, it, expect, beforeEach, afterEach} from \"vitest\";\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\nimport {Connection} from \"./Connection\";\n\ndescribe(\"DbService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should call find method from the connection\", async () => {\n      // GIVEN\n      const connection = {\n        find: vi.fn().mockResolvedValue([{id: \"1\"}])\n      };\n\n      // WHEN\n      const service = await PlatformTest.invoke(DbService, [\n        {\n          token: Connection,\n          use: connection\n        }\n      ]);\n\n      // THEN\n      const result = await service.find();\n\n      expect(connection.find).toHaveBeenCalled();\n      expect(result).toEqual([{id: \"1\"}]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Adapter in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a custom adapter for OIDC provider. It includes methods for CRUD operations and additional methods required for Redis implementation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CustomAdapter<Model extends AdapterModel> extends Adapter<Model> implements OidcAdapterMethods {\n  //\n  // implement all required methods\n  //\n  create(value: Partial<Omit<Model, \"_id\">>, expiresAt?: Date): Promise<Model> {}\n\n  update(id: string, value: Model, expiresAt?: Date): Promise<Model | undefined> {}\n\n  updateOne(predicate: Partial<Model>, value: Partial<Model>, expiresAt?: Date): Promise<Model | undefined> {}\n\n  upsert(id: string, value: Model, expiresAt?: Date): Promise<Model> {}\n\n  findOne(predicate: Partial<Model>): Promise<Model | undefined> {}\n\n  findById(id: string): Promise<Model | undefined> {}\n\n  findAll(predicate?: Partial<Model>): Promise<Model[]> {}\n\n  deleteOne(predicate: Partial<Model>): Promise<Model | undefined> {}\n\n  deleteMany(predicate: Partial<Model>): Promise<Model[]> {}\n\n  deleteById(id: string): Promise<Model | undefined> {}\n\n  //\n  // if you use redis implement also the following methods\n  //\n  async findByUserCode(userCode: string) {}\n\n  async findByUid(uid: string) {}\n\n  async destroy(id: string) {}\n\n  async revokeByGrantId(grantId: string) {}\n\n  async consume(grantId: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a DataSource for Apollo Server\nDESCRIPTION: TypeScript code demonstrating how to create a DataSource for Apollo Server using Ts.ED's DataSourceService decorator. It extends RESTDataSource to interact with a REST API.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-nexus.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DataSource} from \"@tsed/typegraphql\";\nimport {RESTDataSource} from \"@apollo/datasource-rest\";\nimport {User} from \"../models/User\";\n@DataSource()\nexport class UserDataSource extends RESTDataSource {\n  constructor() {\n    super();\n    this.baseURL = \"https://myapi.com/api/users\";\n  }\n\n  getUserById(id: string): Promise<User> {\n    return this.get(`/${id}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Keycloak\nDESCRIPTION: Server configuration class that sets up express-session and Keycloak middleware.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport session from \"express-session\";\n\n@Configuration({\n  middlewares: [\"cors\", \"compression\", \"cookie-parser\", \"method-override\", \"json-parser\", \"urlencoded-parser\"]\n})\nexport class Server {\n  @Inject()\n  protected app: PlatformApplication;\n\n  @Inject()\n  protected keycloakService: KeycloakService;\n\n  @Configuration()\n  protected settings: Configuration;\n\n  $beforeRoutesInit(): void {\n    this.app.use(\n      session({\n        secret: \"thisShouldBeLongAndSecret\",\n        resave: false,\n        saveUninitialized: true,\n        store: this.keycloakService.getMemoryStore()\n      })\n    );\n    this.app.use(this.keycloakService.getKeycloakInstance().middleware());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Isolation Level in Ts.ED Controller\nDESCRIPTION: Demonstrates setting a custom isolation level (SERIALIZABLE) for a transaction using the @Transactional decorator in a controller method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {Transactional} from \"@tsed/mikro-orm\";\nimport {BodyParams} from \"@tsed/platform-params\";\n\n@Controller('/users')\nclass UsersController {\n  @Post('/')\n  @Transactional({isolationLevel: IsolationLevel.SERIALIZABLE})\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Auth Context in Lambda Function with Ts.ED\nDESCRIPTION: This snippet demonstrates how to access the auth context in a Lambda function using Ts.ED. It shows how to retrieve user information from the event authorizer object within a controller method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\nimport {ServerlessContext} from \"@tsed/platform-serverless\";\n\n@Controller()\nexport class TimeslotsController {\n  get(@Context() $ctx: ServerlessContext) {\n    console.log($ctx.event.authorizer.user); // Show user info serialized by the AwsPolicyService\n\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Temporal Activities\nDESCRIPTION: Implementation of Temporal activities using @Temporal and @Activity decorators for user onboarding workflow\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Temporal, Activity} from \"@tsed/temporal\";\n\n@Temporal()\nexport class UserOnboardingActivities {\n  constructor(\n    private userService: UserService,\n    private emailService: EmailService\n  ) {}\n\n  @Activity()\n  async sendVerificationEmail(email: string) {\n    return this.emailService.sendVerificationEmail(email);\n  }\n\n  @Activity()\n  async activateUser(email: string) {\n    return this.userService.activateUser(email);\n  }\n\n  @Activity()\n  async sendWelcomeEmail(email: string) {\n    return this.emailService.sendWelcomeEmail(email);\n  }\n\n  @Activity()\n  async sendFollowUpEmail(email: string) {\n    return this.emailService.sendFollowUpEmail(email);\n  }\n\n  @Activity()\n  async deleteUser(email: string) {\n    return this.userService.deleteUser(email);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redacting Sensitive Fields in Ts.ED Request Logger\nDESCRIPTION: Demonstrates how to override the PlatformLogMiddleware to redact sensitive fields from the request body before logging.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Context, OverrideProvider} from \"@tsed/di\";\nimport {PlatformLogMiddleware} from \"@tsed/platform-log-middleware\";\n\n@OverrideProvider(PlatformLogMiddleware)\nexport class CustomPlatformLogMiddleware extends PlatformLogMiddleware {\n  attributesToHide = [\"password\", \"client_secret\"];\n\n  private redactAttributes(body: any): any {\n    if (body) {\n      for (const attribute of this.attributesToHide) {\n        if (body[attribute]) {\n          body[attribute] = \"[REDACTED]\";\n        }\n      }\n    }\n    return body;\n  }\n\n  requestToObject(ctx: Context): any {\n    const {request} = ctx;\n\n    return {\n      method: request.method,\n      url: request.url,\n      route: request.route,\n      headers: request.headers,\n      body: this.redactAttributes(request.body),\n      query: request.query,\n      params: request.params\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ajv error formatting in Server setup\nDESCRIPTION: Example of customizing Ajv error messages and options in the Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/ajv/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({\n  ajv: {\n    errorFormatter: (error) => `At ${error.modelName}${error.dataPath}, value '${error.data}' ${error.message}`,\n    options: {verbose: true}\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server for Socket.io\nDESCRIPTION: TypeScript code snippet showing how to configure a Ts.ED server to use Socket.io.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/socketio\"; // import socketio Ts.ED module\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  socketIO: {\n    // ... see configuration\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters with Ts.ED Decorators in TypeScript\nDESCRIPTION: This example demonstrates the use of @PathParams decorator to configure method parameters in Ts.ED. It specifies that the 'id' parameter should be extracted from the path.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync get(@PathParams(\"id\") id: string): Promise<Calendar> {\n```\n\n----------------------------------------\n\nTITLE: Implementing KeycloakService\nDESCRIPTION: Service class that handles Keycloak instance initialization, memory store management, and token operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {MemoryStore} from \"express-session\";\nimport {$log} from \"@tsed/logger\";\nimport {Token} from \"keycloak-connect\";\nimport KeycloakConnect = require(\"keycloak-connect\");\n\n@Service()\nexport class KeycloakService {\n  private keycloak: KeycloakConnect.Keycloak;\n  private memoryStore: MemoryStore;\n  private token: Token;\n\n  constructor() {\n    this.initKeycloak();\n  }\n\n  public initKeycloak(): KeycloakConnect.Keycloak {\n    if (this.keycloak) {\n      $log.warn(\"Trying to init Keycloak again!\");\n      return this.keycloak;\n    } else {\n      $log.info(\"Initializing Keycloak...\");\n      this.memoryStore = new MemoryStore();\n      this.keycloak = new KeycloakConnect({store: this.memoryStore}, \"src/config/keycloak/keycloak.json\");\n      return this.keycloak;\n    }\n  }\n\n  public getKeycloakInstance(): KeycloakConnect.Keycloak {\n    return this.keycloak;\n  }\n\n  public getMemoryStore(): MemoryStore {\n    return this.memoryStore;\n  }\n\n  public getToken(): Token {\n    return this.token;\n  }\n\n  public setToken(token: Token): void {\n    this.token = token;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Ignore Decorator for Property Exclusion\nDESCRIPTION: Demonstrates how to use the @Ignore decorator to explicitly exclude properties during serialization or deserialization, showing class inheritance for different model types.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  @Name(\"id\")\n  _id: string;\n\n  @Property()\n  firstName: string;\n\n  @Property()\n  lastName: string;\n\n  @Ignore((value, ctx) => ctx.endpoint) // should not serialized when the object is returned by an endpoint.\n  password: string;\n\n  @Ignore((value, ctx) => ctx.mongoose) // should be serialized when the object is returned by an endpoint.\n  scopes: string[];\n\n  @Ignore()\n  alwaysIgnored: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Request Context Usage in Ts.ED\nDESCRIPTION: Example showing how to test code that uses the Context feature by using the runInContext function in unit tests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, expect, it, afterEach, beforeEach} from \"vitest\";\nimport {runInContext} from \"@tsed/async-hook-context\";\nimport {PlatformTest} from \"@tsed/common\";\nimport {MyContext, getUserId} from \"./your-module\";\n\ndescribe(\"getUserId\", () => {\n  it(\"should get the user id from context\", () => {\n    const context: MyContext = {userId: \"user-id\"};\n\n    const result = runInContext(\"myContext\", () => {\n      return getUserId();\n    }, context);\n\n    expect(result).toBe(\"user-id\");\n  });\n});\n\ndescribe(\"Service with context\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  it(\"should run service in context\", () => {\n    const service = PlatformTest.get(MyContextService);\n    const context: MyContext = {userId: \"user-id-2\"};\n\n    const result = runInContext(\"myContext\", () => {\n      return service.whoAmI();\n    }, context);\n\n    expect(result).toBe(\"user-id-2\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-Injectable Service Configuration - TypeScript\nDESCRIPTION: Shows how to create an auto-injectable class that automatically resolves dependencies while allowing manual parameter passing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AutoInjectable} from \"@tsed/di\";\nimport {MyOtherService} from \"./MyOtherService.js\";\n\n@AutoInjectable()\nclass MyService {\n  constructor(\n    opts: MyOptions,\n    private myOtherService?: MyOtherService\n  ) {\n    console.log(myOtherService);\n    console.log(opts);\n  }\n}\n\nconst myService = new MyService({\n  prop: \"value\"\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with TestContainers Mongo and Mongoose\nDESCRIPTION: Example of unit testing a Mongoose model with TestContainers Mongo, including hooks and model definition\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/testcontainers-mongo/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {Property, Required} from \"@tsed/schema\";\nimport {Model, MongooseModel, ObjectID, PostHook, PreHook, Unique} from \"@tsed/mongoose\";\nimport {TestContainersMongo} from \"@tsed/testcontainers-mongo\";\n\n@Model({schemaOptions: {timestamps: true}})\n@PreHook(\"save\", (user: UserModel, next: any) => {\n  user.pre = \"hello pre\";\n\n  next();\n})\n@PostHook(\"save\", (user: UserModel, next: any) => {\n  user.post = \"hello post\";\n\n  next();\n})\nexport class UserModel {\n  @ObjectID(\"id\")\n  _id: string;\n\n  @Property()\n  @Required()\n  @Unique()\n  email: string;\n\n  @Property()\n  pre: string;\n\n  @Property()\n  post: string;\n}\n\ndescribe(\"UserModel\", () => {\n  beforeEach(() => TestContainersMongo.create());\n  afterEach(() => TestContainersMongo.reset(\"users\"));\n\n  it(\"should run pre and post hook\", async () => {\n    const userModel = PlatformTest.get<MongooseModel<UserModel>>(UserModel);\n\n    // GIVEN\n    const user = new userModel({\n      email: \"test@test.fr\"\n    });\n\n    // WHEN\n    await user.save();\n\n    // THEN\n    expect(user.pre).toEqual(\"hello pre\");\n    expect(user.post).toEqual(\"hello post\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Controllers in Ts.ED\nDESCRIPTION: Illustrates how to use nested controllers in Ts.ED to organize and combine routes.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get} from \"@tsed/common\";\nimport {CalendarCtrl} from \"./CalendarCtrl\";\nimport {EventCtrl} from \"./EventCtrl\";\n\n@Controller(\"/rest\")\nexport class RestCtrl {\n  @Get(\"/\")\n  get() {\n  }\n}\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  @Get(\"/\")\n  get() {\n  }\n}\n\n@Controller(\"/events\")\nexport class EventCtrl {\n  @Get(\"/\")\n  get() {\n  }\n}\n\nimport {Configuration} from \"@tsed/common\";\nimport {RestCtrl} from \"./RestCtrl\";\nimport {CalendarCtrl} from \"./CalendarCtrl\";\nimport {EventCtrl} from \"./EventCtrl\";\n\nconst rootDir = __dirname;\n\n@Configuration({\n  rootDir,\n  mount: {\n    \"/rest\": [\n      RestCtrl,\n      {`${CalendarCtrl}`: [EventCtrl]},\n      EventCtrl\n    ]\n  }\n})\nexport class Server {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multer Storage in Ts.ED Server\nDESCRIPTION: This snippet demonstrates how to configure Multer storage options in a Ts.ED server. It sets up disk storage with a custom destination and filename function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/upload-files.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {diskStorage} from \"multer\";\nimport {join} from \"path\";\n\nconst rootDir = __dirname;\n\n@Configuration({\n  multer: {\n    storage: diskStorage({\n      destination: join(rootDir, \"../uploads\"),\n      filename: (req, file, cb) => {\n        const ext = file.mimetype.split(\"/\")[1];\n        cb(null, `${file.fieldname}-${Date.now()}.${ext}`);\n      }\n    })\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED with Objection.js\nDESCRIPTION: TypeScript code snippet showing how to configure Ts.ED to use Objection.js with SQLite as an example. This includes importing the necessary modules and setting up the Knex configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/objection/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/platform-http\";\nimport \"@tsed/objection\"; // don't forget to add this line!\n\n@Configuration({\n  // ...\n  knex: {\n    client: \"sqlite3\",\n    connection: \":memory:\"\n  }\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Model with Collections\nDESCRIPTION: Example showing how to define Mongoose models with collections support including lists and maps.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, Property} from \"@tsed/schema\";\nimport {Model} from \"@tsed/mongoose\";\n\n@Model()\nexport class EventModel {\n  @Property()\n  field: string;\n\n  @Required()\n  items: string[];\n\n  @Property()\n  mapping: Map<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Interaction in TypeScript\nDESCRIPTION: This code snippet defines a LoginInteraction class that handles the login process for OIDC. It includes methods for checking if login is required, performing the login, and building the login result.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Interaction({\n  name: \"login\"\n})\nexport class LoginInteraction {\n  @Inject()\n  protected oidc: OidcService;\n\n  @Inject()\n  protected usersService: UsersService;\n\n  $prompt(oidcCtx: OidcCtx) {\n    const { uid, prompt, params, session } = oidcCtx;\n    const client = params.client_id;\n\n    return oidcCtx.render(\"login\", {\n      uid,\n      details: prompt.details,\n      params,\n      session,\n      client,\n      server: {\n        name: \"Test OIDC\"\n      },\n      title: \"Sign-in\",\n      flash: false\n    });\n  }\n\n  $check(oidcCtx: OidcCtx) {\n    const result = oidcCtx.checkOrigin();\n\n    if (result) {\n      return result;\n    }\n\n    const { prompt } = oidcCtx;\n\n    return !prompt.name || prompt.name === \"login\";\n  }\n\n  async $exec(oidcCtx: OidcCtx) {\n    const { prompt } = oidcCtx;\n    const account = await this.usersService.login(oidcCtx.body);\n\n    return this.oidc.interactionFinished(oidcCtx, {\n      login: {\n        accountId: String(account.accountId),\n        ...(prompt.details as any).login,\n        ts: Date.now()\n      }\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with @View Decorator in Ts.ED\nDESCRIPTION: This example shows how to use the @View decorator to render a template in a Ts.ED controller. It includes both the controller code and the corresponding EJS template.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams, View} from \"@tsed/common\";\n\n@Controller(\"/events\")\nexport class EventCtrl {\n  @Get(\"/:id\")\n  @View(\"event.ejs\")\n  async get(@PathParams(\"id\") id: string) {\n    const event = await this.eventService.find(id);\n\n    return {\n      startDate: event.startDate.toISOString(),\n      name: event.name\n    };\n  }\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1><%- name %></h1>\n<div>Start: <%- startDate %></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Consent Interaction in TypeScript\nDESCRIPTION: This code snippet defines a ConsentInteraction class that handles the consent process for OIDC. It includes methods for checking if consent is required and executing the consent flow.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Interaction({\n  name: \"consent\"\n})\nexport class ConsentInteraction {\n  @Inject()\n  protected oidc: OidcService;\n\n  $check(oidcCtx: OidcCtx) {\n    const { prompt } = oidcCtx;\n    return prompt.name === \"consent\";\n  }\n\n  async $exec(oidcCtx: OidcCtx) {\n    const { session, params } = oidcCtx;\n\n    return this.oidc.interactionFinished(\n      oidcCtx,\n      {\n        consent: {\n          rejectedScopes: [],\n          rejectedClaims: []\n        }\n      },\n      { mergeWithLastSubmission: true }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $on Function to Subscribe to Request and Response Events\nDESCRIPTION: Shows how to use the $on function from @tsed/hooks to subscribe to request and response events without implementing methods in a class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$on} from \"@tsed/hooks\";\n\n$on(\"$onRequest\", ($ctx: PlatformContext) => {\n  // do something\n});\n\n$on(\"$onResponse\", ($ctx: PlatformContext) => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Queue in Ts.ED with BullMQ\nDESCRIPTION: Example of injecting a Queue instance into a job controller using the @InjectQueue decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {InjectQueue, JobController} from \"@tsed/bullmq\";\nimport {Queue} from \"bullmq\";\n\n@JobController(\"example\")\nclass ExampleJob implements JobMethods {\n  @InjectQueue(\"default\")\n  private readonly queue?: Queue;\n\n  $onInit() {\n    if (this.queue) {\n      // do something with the queue\n      this.queue.add(\"some-job\", {msg: \"this message is part of the payload for the job\"});\n    }\n  }\n\n  public handle(payload: {msg: string}) {\n    console.info(\"New message incoming\", payload.msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Declaration with Functional API in Ts.ED v8 (TypeScript)\nDESCRIPTION: New way of declaring factories using the functional API in Ts.ED v8, offering more flexibility and improved typing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {constant, injectable} from \"@tsed/di\";\nimport {DatabaseConnection, Options} from \"connection-lib\";\n\nexport const CONNECTION = injectable<DatabaseConnection>(Symbol.for(\"CONNECTION\"))\n  .factory(() => {\n    const options = constant<Options>(\"myOptions\");\n\n    return new DatabaseConnection(options);\n  })\n  .hooks({\n    $onDestroy(connection) {\n      return connection.close();\n    }\n  })\n  .token(); // return the created token\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Server with WebSocket Support\nDESCRIPTION: Server configuration example showing Apollo and GraphQL WebSocket setup with options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/apollo\";\nimport \"@tsed/graphql-ws\";\nimport {join} from \"node:path\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      path: \"/\",\n      playground: true,\n      plugins: [],\n      wsServerOptions: {},\n      wsUseServerOptions: {}\n    }\n  },\n  graphqlWs: {\n    wsServerOptions: {},\n    wsUseServerOptions: {}\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Prompts in Commands\nDESCRIPTION: Example showing how to implement interactive prompts using the $prompt method in a command. The prompts are created using Inquirer and can transform user input.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\nimport {MyService} from \"../services/MyService\";\n\nexport interface HelloCommandContext {\n  projectName: string;\n}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {},\n  options: {}\n})\nexport class HelloCommand implements CommandProvider {\n  @Inject()\n  myService: MyService;\n\n  async $prompt(initialOptions: Partial<HelloCommandContext>): Promise<QuestionOptions> {\n    return [\n      {\n        type: \"input\",\n        name: \"projectName\",\n        message: \"What is your project name\",\n        transformer(input) {\n          return paramCase(input);\n        }\n      }\n    ];\n  }\n\n  async $exec(ctx: HelloCommandContext): Promise<any> {\n    console.log(ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Socket Session in Ts.ED\nDESCRIPTION: Illustrates how to use and manage socket sessions in a Ts.ED Socket service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, Input, Emit, Args, SocketSession} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\") // or Broadcast or BroadcastOthers\n  async myMethod(@Args(0) userName: string, @SocketSession session: SocketSession) {\n    const user = session.get(\"user\") || {};\n    user.name = userName;\n\n    session.set(\"user\", user);\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pulse Job Service\nDESCRIPTION: Example service showing how to create scheduled jobs using @Pulse decorator with @Every and @Define decorators for automatic and programmatic scheduling\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/pulse.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Pulse, Every, Define} from \"@tsed/pulse\";\nimport {Job} from \"@pulsecron/pulse\";\n\n@Pulse({namespace: \"email\"})\nexport class EmailJobService {\n  @Every(\"60 minutes\", {\n    name: \"maintenanceJob\"\n  })\n  async sendAdminStatistics(job: Job) {\n    // implement something here\n  }\n\n  @Define({\n    name: \"sendWelcomeEmail\"\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n  }\n\n  @Define({name: \"sendFollowUpEmail\"})\n  async sendFollowUpEmail(job: Job) {\n    // implement something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Token Invocation with $afterInvoke Hook\nDESCRIPTION: Shows how to listen for token invocation completion events using $afterInvoke hook. This can be used to perform actions after a token is invoked and an instance is created.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {TokenProvider, ResolvedInvokeOptions} from \"@tsed/di\";\nimport {$on} from \"@tsed/hooks\";\n\n// triggered for all tokens\n$on(\"$afterInvoke\", (instance: unknown, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n});\n\n@Injectable()\nclass MyService {}\n\n$on(\"$afterInvoke\", MyService, (instance: MyService, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n  console.log(resolvedOpts.token === MyService); // true\n  console.log(instance instanceof MyService); // true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Injectable Provider with Decorators in Ts.ED\nDESCRIPTION: Example demonstrating how to use a custom lazy injectable provider in another service. The MyLazyService will only be loaded when the test method is called.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, LazyInject } from \"@tsed/di\";\n\n@Injectable()\nexport class AnotherService {\n  @LazyInject(\"./MyLazyService\")\n  myLazyService: any;\n\n  test() {\n    // myLazyService is instantiated only when the code reaches this line\n    this.myLazyService.test();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Altering OIDC Policy in TypeScript\nDESCRIPTION: This code snippet shows how to alter the OIDC policy configuration by adding a $alterOidcPolicy method to the InteractionsCtrl. This allows for customization of the policy when @tsed/oidc-provider links interactions with OIDC policy.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Interactions({\n  path: \"/interaction/:uid\",\n  children: [\n    LoginInteraction // register its children interations\n  ]\n})\nexport class InteractionsCtrl {\n  @Get(\"/:name?\")\n  async promptInteraction(@PathParams(\"name\") name: string | undefined, @OidcCtx() oidcCtx: OidcCtx) {\n    return oidcCtx.runInteraction(name);\n  }\n\n  $alterOidcPolicy(policy: DefaultPolicy) {\n    // do something\n\n    return policy;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL schema with Nexus\nDESCRIPTION: TypeScript code to create a GraphQL schema using Nexus. It sets up the schema with custom output paths for type generation and schema definition.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-nexus.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeSchema} from \"nexus\";\nimport {join} from \"node:path\";\n\nexport const schema = makeSchema({\n  types: [], // 1\n  outputs: {\n    typegen: join(process.cwd(), \"..\", \"..\", \"nexus-typegen.ts\"), // 2\n    schema: join(process.cwd(), \"..\", \"..\", \"schema.graphql\") // 3\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Profile with Enum\nDESCRIPTION: Example showing how to set the environment profile using the Env enum and access it via dependency injection with @Constant.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Env} from \"@tsed/core\";\nimport {Configuration, Constant} from \"@tsed/di\";\n\n@Configuration({\n  env: Env.PROD\n})\nexport class Server {\n  @Constant(\"env\")\n  env: Env;\n\n  $beforeRoutesInit() {\n    if (this.env === Env.PROD) {\n      // do something\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform Application Instance\nDESCRIPTION: Examples showing how to access the framework application instance using both decorator and functional approaches.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-api.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport {MyMiddleware} from \"../middlewares/MyMiddleware\";\n\n@Injectable()\nclass MyService {\n  @Inject()\n  protected app: PlatformApplication<Express.Application>;\n\n  $onInit() {\n    // With Platform API, it is also possible to adding middlewares with a service, module, etc...\n    this.app.use(MyMiddleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Range Validation Decorators for Ts.ED\nDESCRIPTION: Implementation of custom decorators that wrap the CustomKey functionality for better code readability. Provides Range and ExclusiveRange decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CustomKey} from \"@tsed/schema\";\n\nexport function Range(min: number, max: number) {\n  return CustomKey(\"range\", [min, max]);\n}\n\nexport function ExclusiveRange(bool: boolean) {\n  return CustomKey(\"exclusiveRange\", bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URI Format Validator in TypeScript\nDESCRIPTION: Creates a custom URI format validator that extends AJV's format validation to allow empty strings. Uses @Formats decorator to register the new validator and implements the FormatsMethods interface.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Formats, FormatsMethods} from \"@tsed/ajv\";\n\nconst NOT_URI_FRAGMENT = /\\/|:/;\nconst URI =\n  /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?:\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)*(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@\\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@\\/?]|%[0-9a-f]{2})*)?$/i;\n\n@Formats(\"uri\", {type: \"string\"})\nexport class UriFormat implements FormatsMethods<string> {\n  validate(str: string): boolean {\n    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n    return str === \"\" ? true : NOT_URI_FRAGMENT.test(str) && URI.test(str);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Koa App Integration in Ts.ED\nDESCRIPTION: Example showing how to integrate a custom Koa application instance with Ts.ED using the Configuration decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/koa.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-koa\";\nimport {createKoaApp} from \"./app.js\";\nimport {Koa} from \"koa\";\n\n@Configuration({\n  koa: {\n    app: createKoaApp()\n  }\n})\nexport class Server {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pulse Server Integration\nDESCRIPTION: Server configuration showing how to enable and configure Pulse with Ts.ED, including MongoDB connection and processing options\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/pulse.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/pulse\";\n\nconst mongoConnectionString = \"mongodb://127.0.0.1/pulse\";\n\n@Configuration({\n  pulse: {\n    enabled: true,\n    db: {\n      address: mongoConnectionString\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using @OnDeserialize Decorator for Transform Values\nDESCRIPTION: Shows how to intercept and modify property values during deserialization using the @OnDeserialize decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OnDeserialize} from \"@tsed/schema\";\n\nexport class Person {\n  @OnDeserialize((v) => v + \"Test\")\n  property: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom Provider with Inject Decorator\nDESCRIPTION: Example showing usage of @Inject decorator to inject a custom provider. Demonstrates how to use tokens for dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/custom-providers.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Define the symbol once and export it\nexport const MY_SERVICE = Symbol.for(\"MY_SERVICE\");\n\n// Correct usage\n@Injectable()\nclass MyService {\n  @Inject(MY_SERVICE)\n  service: MyServiceType;\n}\n\n// Incorrect usage - creates a new Symbol\n@Injectable()\nclass MyService {\n  @Inject()\n  service: MyServiceType;\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Hooks in Ts.ED v8 (TypeScript)\nDESCRIPTION: Example of using the new $beforeInvoke and $afterInvoke hooks in Ts.ED v8, demonstrating how to perform actions before and after the invocation of injectable classes or factories.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {TokenProvider, ResolvedInvokeOptions} from \"@tsed/di\";\nimport {$on} from \"@tsed/hooks\";\n\n// triggered for all tokens\n$on(\"$beforeInvoke\", (token: TokenProvider, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n});\n\n// triggered for a specific token\n\n@Injectable()\nclass MyService {}\n\n$on(\"$beforeInvoke\", MyService, (token: TokenProvider, resolvedOpts: ResolvedInvokeOptions) => {\n  // do something\n  console.log(token === MyService); // true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe in Ts.ED Server\nDESCRIPTION: TypeScript code to configure Stripe in a Ts.ED server, including API key setup and webhook configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport \"@tsed/stripe\";\nimport {Stripe} from \"stripe\";\n\n@Configuration({\n  stripe: {\n    apiKey: process.env.STRIPE_SECRET_KEY,\n    webhooks: {\n      secret: process.env.STRIPE_WEBHOOK_SECRET\n    },\n    // Stripe options\n    apiVersion: \"2019-08-08\",\n    httpProxy: new ProxyAgent(process.env.http_proxy)\n  }\n})\nexport class Server {\n  @Inject()\n  stripe: Stripe;\n\n  $afterInit() {\n    // do something with stripe\n    // this.stripe.customers\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Mapper Configuration Options\nDESCRIPTION: Configuration options for JSON mapper, controlling additional properties, constructor behavior, and groups validation strictness.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  jsonMapper: {\n    additionalProperties: false,\n    disableUnsecureConstructor: true,\n    strictGroups: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection for OIDC Provider\nDESCRIPTION: TypeScript code for creating a Redis connection provider for use with OIDC provider.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Redis from \"ioredis\";\nimport {registerConnectionProvider} from \"@tsed/ioredis\";\n\nexport const REDIS_CONNECTION = Symbol.for(\"REDIS_CONNECTION\");\nexport type REDIS_CONNECTION = Redis;\n\nregisterConnectionProvider({\n  provide: REDIS_CONNECTION,\n  name: \"default\" // you can change this name at your conveniance\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Injector Instance - TypeScript\nDESCRIPTION: Demonstrates how to access the injector instance directly to retrieve service instances.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injector} from \"@tsed/di\";\n\nfunction doSomething() {\n  const myService = injector().get<MyService>(MyService);\n  // shortcut to inject(MyService)\n\n  return myService.doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Providers with Type Code - TypeScript\nDESCRIPTION: Demonstrates how to inject multiple implementations of the same interface using type codes and tokens.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, injectMany} from \"@tsed/di\";\nimport {Post} from \"@tsed/schema\";\nimport {BodyParams} from \"@tsed/platform-params\";\n\n@Controller(\"/some\")\nexport class SomeController {\n  @Post()\n  async create(@BodyParams(\"type\") type: \"baz\" | \"foo\") {\n    const bar = injectMany<Bar>(Bar).find((x) => x.type === type);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lazy Injectable Provider with Functional API in Ts.ED\nDESCRIPTION: Example showing how to use a custom lazy injectable provider with the functional API. The provider is only loaded when actually needed, improving startup performance.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createProvider, useLazyInject } from \"@tsed/di\";\n\nexport const AnotherService = createProvider({\n  name: \"AnotherService\",\n  useFactory() {\n    // lazy-load the MyLazyService\n    const [myLazyService] = useLazyInject([\"./MyLazyService\"]);\n\n    return {\n      test() {\n        // myLazyService is instantiated only when the code reaches this line\n        myLazyService().test();\n      }\n    };\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Interaction in TypeScript\nDESCRIPTION: This code snippet defines a CustomInteraction class that demonstrates how to create a custom interaction with extra methods for configuring checks, preconditions, and details information.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Interaction({\n  name: \"custom\"\n})\nexport class CustomInteraction {\n  @Inject()\n  oidc: OidcService;\n\n  $checks = [\n    this.constructor.name,\n    \"custom\",\n    \"login\",\n    \"select_account\",\n    \"consent\",\n    \"no_session\"\n  ];\n\n  $details = {\n    missingOIDCScope: (ctx: any) => {}\n  };\n\n  $preconditions = {\n    noSESSION: (ctx: any) => {}\n  };\n\n  async $exec(oidcCtx: OidcCtx) {\n    return this.oidc.interactionFinished(oidcCtx, {}, { mergeWithLastSubmission: false });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-hooks in Mongoose Model\nDESCRIPTION: Example of using post-hooks in a Mongoose model using Ts.ED decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ObjectID, Required} from \"@tsed/schema\";\nimport {PostHook, Model} from \"@tsed/mongoose\";\n\n@Model()\n@PostHook(\"save\", (car: CarModel) => {\n  if (car.topSpeedInKmH > 300) {\n    console.log(car.model, \"is fast!\");\n  }\n})\nexport class CarModel {\n  @ObjectID()\n  _id: string;\n\n  @Required()\n  model: string;\n\n  @Required()\n  isFast: boolean;\n\n  @PostHook(\"save\")\n  static postSave(car: CarModel) {\n    if (car.topSpeedInKmH > 300) {\n      console.log(car.model, \"is fast!\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Content Type in Ts.ED Controller\nDESCRIPTION: Shows how to set the response content type using the @ContentType decorator in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, ContentType} from \"@tsed/common\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  @ContentType(\"application/xml\")\n  get() {\n    return \"<html><body>Hello</body></html>\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Response Filters with Different Accept Headers\nDESCRIPTION: Demonstrates how to test a controller with different Accept headers to verify the response format changes based on the requested content type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport * as SuperTest from \"supertest\";\nimport {UsersCtrl} from \"./UsersCtrl.js\";\nimport {Server} from \"../../Server.js\";\n\ndescribe(\"UserCtrl\", () => {\n  let request: SuperTest.Agent;\n\n  before(\n    PlatformTest.bootstrap(Server, {\n      mount: {\n        \"/rest\": [UsersCtrl]\n      },\n      responseFilters: [XmlResponseFilter]\n    })\n  );\n  before(() => {\n    request = SuperTest(PlatformTest.callback());\n  });\n  after(PlatformTest.reset);\n  it(\"should return the xml format\", async () => {\n    const response = await request\n      .get(\"/rest/users/1\")\n      .set({\n        Accept: \"text/xml\"\n      })\n      .expect(200);\n\n    expect(response.text).toEqual(\"<xml>...</xml>\");\n  });\n  it(\"should return the default format\", async () => {\n    const response = await request.get(\"/rest/users/1\").expect(200);\n\n    expect(response.body).toEqual({id: \"1\"});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Express App in Ts.ED\nDESCRIPTION: Demonstrates how to use a custom Express application instance with Ts.ED instead of letting the framework create one by default. The custom app is provided through the 'app' property in the express configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/express.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport {createExpressApp} from \"./app.js\";\n\n@Configuration({\n  express: {\n    app: createExpressApp()\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Protocol in Ts.ED\nDESCRIPTION: TypeScript class implementing Facebook authentication protocol with scope configuration in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/FacebookProtocol.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Pulse\nDESCRIPTION: Example of how to configure a Ts.ED server to use the Pulse module, including MongoDB connection and various options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/pulse/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/pulse\"; // import pulse ts.ed module\n\nconst mongoConnectionString = \"mongodb://127.0.0.1/pulse\";\n\n@Configuration({\n  pulse: {\n    enabled: true, // Enable Pulse jobs for this instance.\n    // drainJobsBeforeStop: true, // Wait for jobs to finish before stopping the pulse process.\n    // disableJobProcessing: true, // Prevents jobs from being processed.\n    // pass any options that you would normally pass to new Pulse(), e.g.\n    db: {\n      address: mongoConnectionString\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Job Controllers\nDESCRIPTION: Example of creating fallback job controllers for handling dynamic job names and queue-specific fallbacks.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FallbackJobController, JobMethods} from \"@tsed/bullmq\";\n\n@FallbackJobController(\"foo\")\nclass FooFallbackController implements JobMethods {\n  public handle() {\n    console.info(`I run for every job within the \"foo\" queue, which doesn't has it's own JobController`);\n  }\n}\n\n@FallbackJobController()\nclass GlobalFallbackController implements JobMethods {\n  public handle() {\n    console.info(`I run for every job in every other queue, which doesn't has it's own JobController`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Class with @Configuration Decorator\nDESCRIPTION: Example of applying the @Configuration decorator to a Server class to customize server settings at the class level.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  rootDir: process.cwd()\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job with Custom Queue and Options\nDESCRIPTION: Example of defining a job with a custom queue name and job-specific options using the @JobController decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"other-example\", \"other-queue\", {\n  attempts: 42\n})\nclass OtherExampleJob implements JobMethods {\n  public handle(payload: {num: number}) {\n    console.info(\"look at my awesome number: \", payload.num);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Class with Ts.ED Decorators in TypeScript\nDESCRIPTION: This snippet demonstrates the use of @Controller and @Docs decorators to configure a class in Ts.ED. It sets up routing and documentation for the class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/calendars\")\n@Docs(\"api-v3\")\nexport class CalendarsController {\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe in Ts.ED Server\nDESCRIPTION: TypeScript code to configure Stripe in a Ts.ED server application. It demonstrates how to set up Stripe with API key, webhook secret, and other options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/stripe\";\nimport {Stripe} from \"stripe\";\n\n@Configuration({\n  stripe: {\n    apiKey: process.env.STRIPE_SECRET_KEY,\n    webhooks: {\n      secret: process.env.STRIPE_WEBHOOK_SECRET\n    },\n    // Stripe options\n    apiVersion: \"2019-08-08\",\n    httpProxy: new ProxyAgent(process.env.http_proxy)\n  }\n})\nexport class Server {\n  @Inject()\n  stripe: Stripe;\n\n  $afterInit() {\n    // do something with stripe\n    // this.stripe.customers\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel\nDESCRIPTION: Configuration setup for Redis sentinel with sentinel-specific options\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-cache\";\nimport \"@tsed/ioredis\";\n\n@Configuration({\n  ioredis: [\n    {\n      name: \"default\",\n      cache: true,\n      sentinelName: \"redis-master\",\n      sentinels: [\"...\"],\n      redisOptions: {\n        noDelay: true,\n        connectTimeout: 15000,\n        autoResendUnfulfilledCommands: true,\n        maxRetriesPerRequest: 5,\n        enableAutoPipelining: true,\n        autoPipeliningIgnoredCommands: [\"scan\"]\n      }\n    }\n  ],\n  cache: {\n    ttl: 300\n  }\n})\nclass MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Temporal Worker\nDESCRIPTION: Setting up a Temporal worker to execute workflows and activities.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {bootstrapWorker} from \"@tsed/temporal\";\nimport {Server} from \"./app/Server\";\n\nconst worker = await bootstrapWorker(Server, {\n  worker: {\n    taskQueue: \"onboarding\",\n    workflowsPath: require.resolve(\"./temporal\")\n  },\n  connection: {\n    /* optional: see NativeConnectionOptions of @temporalio/worker */\n  },\n  platform: {\n    componentsScan: false,\n    logger: {\n      level: \"info\"\n    }\n  }\n});\nawait worker.run();\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Context and Event in Ts.ED Controller\nDESCRIPTION: This snippet shows how to access the AWS Context and Event using the ServerlessContext abstraction provided by Ts.ED. It demonstrates retrieving the context, event, and response/request objects within a controller method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {QueryParams, Context} from \"@tsed/platform-params\"; // /!\\ don't import decorators from @tsed/common\nimport {ServerlessContext} from \"@tsed/platform-serverless\";\nimport type {APIGatewayProxyEventV2} from \"aws-lambda\";\n\n@Controller()\nexport class TimeslotsController {\n  get(@Context() $ctx: ServerlessContext) {\n    console.log($ctx.context); // AWS Context\n    console.log($ctx.event); // AWS Event\n    console.log($ctx.getEvent<APIGatewayProxyEventV2>()); // AWS Event with the correct typings\n    console.log($ctx.response); // Response Platform abstraction layer\n    console.log($ctx.request); // Request Platform abstraction layer\n\n    $ctx.response.setHeader(\"x-test\", \"test\");\n\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Request Scope Providers in Ts.ED with Functional API\nDESCRIPTION: Demonstrates how to chain request-scoped providers using the functional API, where both the controller and service are created for each request. Each service instance is unique to the request.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, registerProvider} from \"@tsed/common\";\nimport {inject} from \"@tsed/di\";\nimport {useDecorators} from \"@tsed/core\";\n\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\nregisterProvider({\n  provide: MyService,\n  scope: \"request\"\n});\n\nfunction RandomController() {\n  const myService = inject(MyService);\n\n  return useDecorators(\n    Get(\"/\"),\n    () => {\n      return myService.get();\n    }\n  );\n}\n\nregisterProvider({\n  provide: RandomController,\n  type: \"controller\",\n  use: [RandomController], // function and endpoint\n  scope: \"request\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-hooks in Mongoose Model\nDESCRIPTION: Example of using pre-hooks in a Mongoose model using Ts.ED decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required} from \"@tsed/schema\";\nimport {PreHook, Model, ObjectID} from \"@tsed/mongoose\";\n\n@Model()\n@PreHook(\"save\", (car: CarModel, next) => {\n  if (car.model === \"Tesla\") {\n    car.isFast = true;\n  }\n  next();\n})\nexport class CarModel {\n  @ObjectID()\n  _id: string;\n\n  @Required()\n  model: string;\n\n  @Required()\n  isFast: boolean;\n\n  @PreHook(\"save\")\n  static preSave(car: CarModel, next) {\n    if (car.model === \"Tesla\") {\n      car.isFast = true;\n    }\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Functional Serialization in Ts.ED v6/v7\nDESCRIPTION: Demonstrates the new functional approach for serialization and deserialization in Ts.ED v6/v7, replacing the ConverterService.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {serialize, deserialize} from \"@tsed/json-mapper\";\nimport {Inject, Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass MyClass {\n  doSomething1(client: Client): any {\n    return serialize(client, {type: Client});\n  }\n\n  doSomething2(client: any): Client {\n    return deserialize(client, {type: Client});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Ts.ED Controller\nDESCRIPTION: Illustrates how to set response headers using the @Header decorator in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, Header} from \"@tsed/common\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  @Header(\"Cache-Control\", \"no-cache, no-store, must-revalidate\")\n  @Header(\"Pragma\", \"no-cache\")\n  @Header(\"Expires\", \"0\")\n  get() {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Basic Auth in Ts.ED\nDESCRIPTION: Example of using the @Authorize decorator to protect routes with Basic Auth in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/guard-basic-auth.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check with Ts.ED Terminus\nDESCRIPTION: Example of creating a health check for MongoDB using the @Health decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Health} from \"@tsed/terminus\";\nimport {Injectable, Inject} from \"@tsed/di\";\n\n@Injectable()\nclass MongoCtrl {\n  @Health(\"mongo\")\n  async check() {\n    // Here check the mongo health\n    return \"ok\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolver with Subscriptions\nDESCRIPTION: Example of a GraphQL resolver using TypeGraphQL with queries, mutations, and subscriptions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {InjectContext, Inject} from \"@tsed/di\";\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Arg, Mutation, Query, Root, Subscription} from \"type-graphql\";\nimport {RecipeService} from \"../../services/RecipeService\";\nimport {PubSubProvider} from \"../pubsub/pubsub.js\";\nimport {Recipe, RecipeNotification} from \"./Recipe\";\nimport {RecipeNotFoundError} from \"./RecipeNotFoundError\";\n\n@ResolverController((_of) => Recipe)\nexport class RecipeResolver {\n  @InjectContext()\n  private $ctx: PlatformContext;\n\n  @Inject()\n  private recipeService: RecipeService;\n\n  @Inject(PubSubProvider)\n  private pubSub: PubSubProvider;\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string) {\n    const recipe = await this.recipeService.findById(id);\n\n    if (recipe === undefined) {\n      throw new RecipeNotFoundError(id);\n    }\n\n    return recipe;\n  }\n\n  @Query((returns) => [Recipe], {description: \"Get all the recipes from around the world \"})\n  recipes(): Promise<Recipe[]> {\n    this.$ctx.set(\"test\", \"test\");\n    return this.recipeService.findAll({});\n  }\n\n  @Mutation((returns) => Recipe)\n  async addRecipe(@Arg(\"title\") title: string, @Arg(\"description\") description: string) {\n    const payload = await this.recipeService.create({title, description});\n    const notification = new RecipeNotification(payload);\n\n    this.pubSub.publish(\"NOTIFICATIONS\", notification);\n\n    return payload;\n  }\n\n  @Subscription(() => RecipeNotification, {\n    topics: \"RECIPE_ADDED\"\n  })\n  newRecipe(@Root() payload: Recipe): RecipeNotification {\n    return {...payload, date: new Date()};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhooks in Ts.ED Controller\nDESCRIPTION: Demonstrates how to use the @WebhookEvent decorator to handle Stripe webhook events in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RawBodyParams, HeaderParams, Context} from \"@tsed/platform-params\";\nimport {Controller} from \"@tsed/di\";\nimport {Stripe} from \"stripe\";\n\n@Controller(\"/webhooks\")\nexport class StripWebhookCtrl {\n  @Inject()\n  stripe: Stripe;\n\n  @Post(\"/callback\")\n  successPaymentHook(@WebhookEvent() event: Stripe.Event, @Context() ctx: Context) {\n    ctx.logger.info({name: \"Webhook success\", event});\n\n    return {received: true};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Account Model for OIDC Provider\nDESCRIPTION: TypeScript code defining the Account model required by oidc-provider for finding accounts during interactions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {v4} from \"uuid\";\n\nexport class Account {\n  public readonly id: string;\n  public readonly email: string;\n  public readonly email_verified: boolean;\n\n  constructor({id = v4(), email = \"\", email_verified = false}: Partial<Account> = {}) {\n    this.id = id;\n    this.email = email;\n    this.email_verified = email_verified;\n  }\n\n  claims() {\n    return {\n      sub: this.id,\n      email: this.email,\n      email_verified: this.email_verified\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Service with Auto-Emit\nDESCRIPTION: Example showing automatic event emission without explicit @Emit decorator in Ts.ED v7.59.0+.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Args, Emit, Input, Socket, SocketService} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  async myMethod(@Args(0) userName: string) {\n    return \"Message \" + userName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff Retry Strategy in TypeScript\nDESCRIPTION: Implementation of a retry strategy using exponential backoff for handling optimistic lock errors in MikroORM transactions. The strategy retries failed operations with increasing delays up to a maximum number of attempts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OptimisticLockError} from \"@mikro-orm/core\";\nimport {RetryStrategy} from \"@tsed/mikro-orm\";\nimport {OverrideProvider} from \"@tsed/di\";\nimport {setTimeout} from \"timers/promises\";\n\n@OverrideProvider(RetryStrategy)\nexport class ExponentialBackoff implements RetryStrategy {\n  private readonly maxDepth = 3;\n  private depth = 0;\n\n  public async acquire<T extends (...args: unknown[]) => unknown>(task: T): Promise<ReturnType<T>> {\n    try {\n      return (await task()) as ReturnType<T>;\n    } catch (e) {\n      if (this.shouldRetry(e as Error) && this.depth < this.options.maxDepth) {\n        return this.retry(task);\n      }\n\n      throw e;\n    }\n  }\n\n  private shouldRetry(error: Error): boolean {\n    return error instanceof OptimisticLockError;\n  }\n\n  private async retry<T extends (...args: unknown[]) => unknown>(task: T): Promise<ReturnType<T>> {\n    await setTimeout(2 ** this.depth * 50);\n\n    this.depth += 1;\n\n    return this.acquire(task);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporal Activities Service\nDESCRIPTION: Example of creating a service with Temporal activities for user onboarding workflow.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Temporal, Activity} from \"@tsed/agenda\";\n\n@Temporal()\nexport class UserOnboardingActivities {\n  constructor(\n    private userService: UserService,\n    private emailService: EmailService\n  ) {}\n\n  @Activity()\n  async sendVerificationEmail(email: string) {\n    return this.emailService.sendVerificationEmail(email);\n  }\n\n  @Activity()\n  async activateUser(email: string) {\n    return this.userService.activateUser(email);\n  }\n\n  @Activity()\n  async sendWelcomeEmail(email: string) {\n    return this.emailService.sendWelcomeEmail(email);\n  }\n\n  @Activity()\n  async sendFollowUpEmail(email: string) {\n    return this.emailService.sendFollowUpEmail(email);\n  }\n\n  @Activity()\n  async deleteUser(email: string) {\n    return this.userService.deleteUser(email);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Job in Ts.ED with BullMQ\nDESCRIPTION: Example of defining a basic job using the @JobController decorator and implementing the JobMethods interface.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"example\")\nclass ExampleJob implements JobMethods {\n  public handle(payload: {msg: string}) {\n    console.info(\"New message incoming\", payload.msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AJV Keyword using CodeGen in Ts.ED\nDESCRIPTION: Example of creating a custom 'even' validation keyword using AJV's CodeGen module. Uses the KeywordCxt interface and code method for inline code generation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Keyword, KeywordMethods} from \"@tsed/ajv\";\nimport {array, number} from \"@tsed/schema\";\nimport {_, KeywordCxt} from \"ajv\";\n\n@Keyword({\nkeyword: \"even\",\ntype: \"number\",\nschemaType: \"boolean\"\n})\nclass EvenKeyword implements KeywordMethods {\ncode(cxt: KeywordCxt) {\nconst {data, schema} = cxt;\nconst op = schema ? _`!==` : _`===`;\ncxt.fail(\\_`${data} %2 ${op} 0`);\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Arguments in TypeScript\nDESCRIPTION: Example showing how to define and handle command-line arguments in a Ts.ED command. The arguments are specified in the @Command decorator and accessed in the context object.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\n\nexport interface HelloCommandContext {\n  action: \"create\";\n  subAction: \"user\";\n}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {\n    action: {\n      type: String,\n      defaultValue: \"create\",\n      description: \"Action description\"\n    },\n    subAction: {\n      type: String,\n      defaultValue: \"user\",\n      description: \"My sub-action\"\n    }\n  },\n  options: {},\n  allowUnknownOption: false\n})\nexport class HelloCommand implements CommandProvider {\n  $exec(ctx: HelloCommandContext) {\n    console.log(ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Passport Local Strategy Protocol in Ts.ED\nDESCRIPTION: TypeScript code demonstrating how to create a Protocol for Passport Local Strategy. It includes credential validation, user verification, and strategy installation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/passport/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Format, Required} from \"@tsed/schema\";\nimport {Req} from \"@tsed/platform-http\";\nimport {Strategy} from \"passport-local\";\nimport {Unauthorized} from \"@tsed/exceptions\";\nimport {Protocol, OnInstall, OnVerify} from \"@tsed/passport\";\nimport {Inject} from \"@tsed/di\";\nimport {UserService} from \"../services/UserService.js\";\n\nexport class Credentials {\n  @Required()\n  @Format(\"email\")\n  email: string;\n\n  @Required()\n  password: string;\n}\n\n@Protocol({\n  name: \"login\",\n  useStrategy: Strategy,\n  settings: {\n    usernameField: \"email\",\n    passwordField: \"password\"\n  }\n})\nexport class LocalProtocol implements OnVerify, OnInstall {\n  @Inject(UserService)\n  private userService: UserService;\n\n  async $onVerify(@Req() request: Req, @BodyParams() credentials: Credentials) {\n    const user = await this.userService.find(credentials);\n\n    if (!user) {\n      throw new Unauthorized(\"Unauthorized user\");\n    }\n\n    if (!user.verifyPassword()) {\n      throw new Unauthorized(\"Unauthorized user\");\n    }\n\n    return user;\n  }\n\n  $onInstall(strategy: Strategy): void {\n    // intercept the strategy instance to adding extra configuration\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Value Binding Implementation in Ts.ED\nDESCRIPTION: Demonstrates how to use @Value decorator and refValue function for mutable configuration values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nclass MyService {\n  @Value(\"MY_VALUE\")\n  myValue: string;\n\n  doSomething() {\n    return this.myValue;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with Decorators\nDESCRIPTION: Example of defining a User entity using MikroORM and Ts.ED decorators for schema validation and database mapping.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Property, MaxLength, Required} from \"@tsed/schema\";\nimport {Entity, Property, PrimaryKey, Property as Column} from \"@mikro-orm/core\";\n\n@Entity()\nexport class User {\n  @PrimaryKey()\n  @Property()\n  id!: number;\n\n  @Column()\n  @MaxLength(100)\n  @Required()\n  firstName!: string;\n\n  @Column()\n  @MaxLength(100)\n  @Required()\n  lastName!: string;\n\n  @Column()\n  @Mininum(0)\n  @Maximum(100)\n  age!: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Moment.js Mapper in Typescript\nDESCRIPTION: This snippet shows how to create a custom mapper for Moment.js to handle date transformations in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonMapper, JsonMapperMethods} from \"@tsed/json-mapper\";\nimport moment from \"moment\";\n\n@JsonMapper(Date)\nexport class MomentMapper implements JsonMapperMethods {\n  deserialize(data: string | Date | number): moment.Moment {\n    return moment(data);\n  }\n\n  serialize(data: moment.Moment): string {\n    return data.toISOString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Event Handler Implementation\nDESCRIPTION: Implementation of a Socket event handler with input decorator and response emission\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, Input, Emit, Args, Socket, Nsp} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\")\n  async myMethod(@Args(0) userName: string, @Socket socket: SocketIO.Socket) {\n    return \"Message \" + userName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Service Method in API Testing with Vitest\nDESCRIPTION: Example of stubbing a service method when testing an API endpoint with Vitest, using spyOn to mock the service's behavior.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {it, expect, describe, beforeAll, afterAll} from \"vitest\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport SuperTest from \"supertest\";\nimport {Server} from \"../../Server.js\";\nimport {Chapter} from \"../../entity/Chapter.js\";\n\nconst entity = new Chapter();\nObject.assign(entity, {\n  id: 2,\n  bookId: 4,\n  timestamp: 1650996201,\n  name: \"First Day At Work\"\n});\n\ndescribe(\"ChapterController\", () => {\n  beforeAll(PlatformTest.bootstrap(Server));\n  afterAll(PlatformTest.reset);\n\n  describe(\"GET /rest/chapter\", () => {\n    it(\"Get All Chapters\", async () => {\n      const service = PlatformTest.get(ChapterService);\n\n      jest.spyOn(service, \"findChapters\").mockResolvedValue([entity]);\n\n      const request = SuperTest(PlatformTest.callback());\n\n      const response = await request.get(\"/rest/chapter\").expect(200);\n      expect(typeof response.body).toEqual(\"object\");\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Controller Routes\nDESCRIPTION: Example controller showing how to protect routes using the KeycloakAuth decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {KeycloakAuth} from \"../decorators/KeycloakAuthDecorator\";\n\n@Controller(\"/hello-world\")\nexport class HelloWorldController {\n  @Get(\"/\")\n  @KeycloakAuth({role: \"realm:example-role\"})\n  get() {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Repeating Job in Ts.ED with BullMQ\nDESCRIPTION: Example of defining a repeating job (cron job) using the @JobController decorator with repeat options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"my-cron-job\", \"default\", {\n  repeat: {\n    pattern: \"* * * * *\"\n  }\n})\nclass MyCronJob implements JobMethods {\n  public handle() {\n    console.info(\"I run every minute!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single MongoDB Connection\nDESCRIPTION: Basic server configuration for single MongoDB database connection using Ts.ED decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/mongoose\";\n\n@Configuration({\n  mongoose: [\n    {\n      id: \"default\",\n      url: \"mongodb://127.0.0.1:27017/db1\",\n      connectionOptions: {}\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Setting up Event Listener in Ts.ED\nDESCRIPTION: TypeScript code demonstrating how to create an event listener using the @OnEvent decorator in a Ts.ED injectable service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/event-emitter/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {OnEvent} from \"@tsed/event-emitter\";\n\ninterface OrderShippedEvent {\n  orderId: string;\n}\n\n@Injectable()\nexport class SlackNotificationService {\n  @OnEvent(\"order.shipped\", {\n    /* optional: add any option you would normally pass to emitter.on(\"order.shipped\", options) */\n  })\n  sendOrderNotification(event: OrderShippedEvent) {\n    // implement something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Access Middleware in Ts.ED\nDESCRIPTION: TypeScript class implementing a middleware for role-based access control in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/AcceptRolesMiddleware.ts\n```\n\n----------------------------------------\n\nTITLE: Manipulating Original Express Response in Ts.ED\nDESCRIPTION: Shows how to access and use the original Express Response object in a Ts.ED controller for platform-specific operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    // Express.js\n    ctx.getResponse<Express.Response>().status(201).send(\"Hello\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request Logger in Ts.ED Service\nDESCRIPTION: Shows how to use the logger in a Ts.ED service by passing the PlatformContext from the controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {Injectable, Inject} from \"@tsed/di\";\n\n@Injectable()\nexport class MyService {\n  doSomething(input: string, ctx: PlatformContext) {\n    ctx.logger.info({event: \"test\", input});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Keywords in a Ts.ED Model\nDESCRIPTION: Example of using custom validation keywords in a model. Demonstrates both direct use of CustomKey and abstracted decorator functions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CustomKey} from \"@tsed/schema\";\nimport {Range, ExclusiveRange} from \"../decorators/Range\"; // custom decorator\n\nexport class Product {\n@CustomKey(\"range\", [10, 100])\n@CustomKey(\"exclusiveRange\", true)\nprice: number;\n\n// OR\n\n@Range(10, 100)\n@ExclusiveRange(true)\nprice2: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Lambda Controllers with PlatformServerlessTest in Ts.ED\nDESCRIPTION: A comprehensive example demonstrating how to test Lambda controllers using Ts.ED's PlatformServerlessTest utility. The example includes setting up a test environment, testing Lambda functions by direct invocation, testing with path and query parameters, and testing via HTTP routes.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerlessTest} from \"@tsed/platform-serverless-testing\";\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\n\n@Controller(\"/\")\nclass TimeslotsLambdaController {\n  @Get(\"/\")\n  getAll() {\n    return [];\n  }\n\n  @Get(\"/:id\")\n  getById(@PathParams(\"id\") id: string, @QueryParams(\"start_date\") startDate: Date, @QueryParams(\"end_date\") endDate: Date) {\n    return {\n      id,\n      startDate,\n      endDate\n    };\n  }\n}\n\ndescribe(\"TimeslotsLambdaController\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerless, {\n      lambda: [TimeslotsLambdaController]\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  describe(\"Invoke by lambda name\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.call(\"getAll\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request\n        .call(\"getById\")\n        .params({\n          id: \"1\"\n        })\n        .query({\n          start_date: new Date(\"2020-01-01\"),\n          end_date: new Date(\"2020-01-10\")\n        });\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual({\n        id: \"1\",\n        endDate: \"2020-01-10T00:00:00.000Z\",\n        startDate: \"2020-01-01T00:00:00.000Z\"\n      });\n    });\n  });\n\n  describe(\"invoke using the router\", () => {\n    it(\"should call getAll Lambda\", async () => {\n      const response = await PlatformServerlessTest.request.get(\"/\");\n\n      expect(response.statusCode).toEqual(200);\n      expect(response.headers).toEqual({\n        \"x-request-id\": \"requestId\",\n        \"content-type\": \"application/json\"\n      });\n      expect(JSON.parse(response.body)).toEqual([]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Jobs Using JobDispatcher\nDESCRIPTION: Example showing how to dispatch jobs using the JobDispatcher service with various configuration options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {JobDispatcher} from \"@tsed/bullmq\";\nimport {ExampleJob} from \"./jobs/ExampleJob.js\";\n\n@Service()\nclass MyService {\n  constructor(private readonly dispatcher: JobDispatcher) {}\n\n  public async doingSomething() {\n    await this.dispatcher.dispatch(\n      ExampleJob,\n      {msg: \"this message is part of the payload for the job\"},\n      {\n        delay: 600_000\n      }\n    );\n\n    console.info(\"I just dispatched a job!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Pulse Service with Scheduled Jobs\nDESCRIPTION: Demonstrates how to create a service with @Pulse decorator and define scheduled jobs using @Every and @Define decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/pulse/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Pulse, Every, Define} from \"@tsed/pulse\";\nimport {Job} from \"@pulsecron/pulse\";\n\n@Pulse({namespace: \"email\"})\nexport class EmailJobService {\n  @Every(\"60 minutes\", {\n    name: \"maintenanceJob\"\n    /* ... and any option you would normally pass to pulse.every/define */\n  })\n  async sendAdminStatistics(job: Job) {\n    // implement something here\n  }\n\n  @Define({\n    name: \"sendWelcomeEmail\"\n    /*  ... and any option you would normally pass to pulse.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n  }\n\n  @Define({name: \"sendFollowUpEmail\"})\n  async sendFollowUpEmail(job: Job) {\n    // implement something here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Job Controllers in Ts.ED\nDESCRIPTION: Examples of defining fallback job controllers for specific queues and globally using the @FallbackJobController decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {FallbackJobController, JobMethods} from \"@tsed/bullmq\";\n\n@FallbackJobController(\"foo\")\nclass FooFallbackController implements JobMethods {\n  public handle() {\n    console.info(`I run for every job within the \"foo\" queue, which doesn't have its own JobController`);\n  }\n}\n\n@FallbackJobController()\nclass GlobalFallbackController implements JobMethods {\n  public handle() {\n    console.info(`I run for every job in every other queue, which doesn't have its own JobController`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Koa Router Configuration Interface\nDESCRIPTION: TypeScript interface defining the configuration options for Koa Router including prefix, methods, sensitivity, and strict matching settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/koa.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KoaRouterOptions {\n  /**\n   * Prefix for all routes.\n   */\n  prefix?: string;\n  /**\n   * Methods which should be supported by the router.\n   */\n  methods?: string[];\n  routerPath?: string;\n  /**\n   * Whether or not routing should be case-sensitive.\n   */\n  sensitive?: boolean;\n  /**\n   * Whether or not routes should matched strictly.\n   *\n   * If strict matching is enabled, the trailing slash is taken into\n   * account when matching routes.\n   */\n  strict?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Service Methods with Jest\nDESCRIPTION: Example of testing asynchronous database service methods using async/await in Jest. Shows how to create a context and test promises.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\n\ndescribe(\"DbService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should do something\", async () => {\n      const service = PlatformTest.get(DbService);\n\n      const result = await service.find();\n\n      expect(result).toEqual([]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server for SSE\nDESCRIPTION: Server configuration to enable SSE support by importing the module and configuring accepted MIME types\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/server-sent-events.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/sse\"; // import sse Ts.ED module\n\n@Configuration({\n  acceptMimes: [\"application/json\", \"text/event-stream\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing MikroORM Subscriber\nDESCRIPTION: Example of creating and registering a MikroORM subscriber using the @Subscriber decorator with IoC container integration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventSubscriber} from \"@mikro-orm/core\";\nimport {Subscriber} from \"@tsed/mikro-orm\";\n\n@Subscriber()\nexport class SomeSubscriber implements EventSubscriber {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies with PlatformTest.invoke in Jest\nDESCRIPTION: Example of mocking service dependencies using PlatformTest.invoke() in Jest, which creates a new instance of the component with mocked dependencies.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\nimport {Connection} from \"./Connection\";\n\ndescribe(\"DbService\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should call find method from the connection\", async () => {\n      // GIVEN\n      const connection = {\n        find: jest.fn().mockResolvedValue([{id: \"1\"}])\n      };\n\n      // WHEN\n      const service = await PlatformTest.invoke(DbService, [\n        {\n          token: Connection,\n          use: connection\n        }\n      ]);\n\n      // THEN\n      const result = await service.find();\n\n      expect(connection.find).toHaveBeenCalled();\n      expect(result).toEqual([{id: \"1\"}]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies with PlatformTest.create in Jest\nDESCRIPTION: Example of mocking service dependencies using PlatformTest.create() in Jest, useful for mocking dependencies for all tests or when testing code in constructors.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\nimport {Connection} from \"./Connection\";\n\ndescribe(\"DbService\", () => {\n  let connectionFindStub: jest.Mock;\n  let connectionMock: any;\n\n  beforeEach(async () => {\n    connectionMock = {\n      find: jest.fn().mockResolvedValue([{id: \"1\"}])\n    };\n\n    await PlatformTest.create({\n      imports: [\n        {\n          token: Connection,\n          use: connectionMock\n        }\n      ]\n    });\n  });\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should call find method from the connection\", async () => {\n      // GIVEN\n      const service = PlatformTest.get(DbService);\n\n      // WHEN\n      const result = await service.find();\n\n      // THEN\n      expect(connectionMock.find).toHaveBeenCalled();\n      expect(result).toEqual([{id: \"1\"}]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User Converter Socket Middleware in TypeScript\nDESCRIPTION: A Socket.io middleware that deserializes a user object from arguments. It intercepts the socket event arguments, transforms the user data into a User model instance using deserialize from @tsed/json-mapper, and returns the updated arguments array.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {SocketMiddleware, Args} from \"@tsed/socketio\";\nimport {User} from \"../models/User.js\";\n\n@SocketMiddleware()\nexport class UserConverterSocketMiddleware {\n  async use(@Args() args: any[]) {\n    let [user] = args;\n    // update Arguments\n    user = deserialize(user, {type: User});\n\n    return [user];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple MongoDB Connections\nDESCRIPTION: Server configuration for multiple MongoDB database connections using Ts.ED decorators\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/mongoose\";\n\n@Configuration({\n  mongoose: [\n    {\n      id: \"default\",\n      url: \"mongodb://127.0.0.1:27017/db1\",\n      connectionOptions: {}\n    },\n    {\n      id: \"default\",\n      url: \"mongodb://127.0.0.1:27017/db2\",\n      connectionOptions: {}\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Services into Commands\nDESCRIPTION: Example demonstrating how to inject a service into a command using the @Inject decorator. The injected service can be used within the command's methods.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\nimport {MyService} from \"../services/MyService\";\n\nexport interface HelloCommandContext {\n  rawArgs: string[];\n}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {},\n  options: {},\n  allowUnknownOption: false\n})\nexport class HelloCommand implements CommandProvider {\n  @Inject()\n  myService: MyService;\n\n  async $exec(ctx: HelloCommandContext): Promise<any> {\n    return [\n      {\n        title: \"Update something\",\n        task: () => this.myService.update(ctx)\n      }\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Temporal Workflow\nDESCRIPTION: Implementation of user onboarding workflow using Temporal workflow primitives\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {proxyActivities, defineSignal, setHandler, condition, sleep} from \"@temporalio/workflow\";\nimport {Activities} from \"../activities.js\";\n\nexport const isVerifiedSignal = defineSignal(\"verificationSignal\");\n\nexport async function onboardUser(email: string): Promise<string> {\n  const {sendVerificationEmail, activateUser, sendWelcomeEmail, sendFollowUpEmail, deleteUser} = proxyActivities<Activities>({\n    startToCloseTimeout: \"1 minute\"\n  });\n\n  let isVerified = false;\n  setHandler(isVerifiedSignal, () => {\n    isVerified = true;\n  });\n\n  await sendVerificationEmail(email);\n\n  const verifiedInTime = await condition(() => isVerified, \"1w\");\n  if (!verifiedInTime) {\n    await deleteUserAndTenant(email);\n    return false;\n  }\n\n  await sendWelcomeEmail(email);\n\n  await sleep(\"1d\");\n  await sendFollowUpEmail(email);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactions Controller in TypeScript\nDESCRIPTION: This code snippet defines an Interactions controller responsible for handling OIDC interactions. It exposes a route for displaying interactions and defines the priority order of different interaction types.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Interactions({\n  path: \"/interaction/:uid\",\n  children: [\n    LoginInteraction,\n    ConsentInteraction,\n    CustomInteraction,\n    AbortInteraction\n  ]\n})\nexport class InteractionsCtrl {\n  @Get(\"/:name?\")\n  async promptInteraction(@PathParams(\"name\") name: string | undefined, @OidcCtx() oidcCtx: OidcCtx) {\n    return oidcCtx.runInteraction(name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Controller Testing\nDESCRIPTION: Unit testing setup for Lambda controllers using PlatformServerlessTest.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerless} from \"@tsed/platform-serverless-http\";\nimport {PlatformServerlessTest} from \"@tsed/platform-serverless-testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server\";\n\n@Controller(\"/timeslots\")\nclass TimeslotsController {\n  @Get(\"/\")\n  getAll() {\n    return [];\n  }\n}\n\ndescribe(\"TimeslotsController\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerlessHttp, {\n      server: Server,\n      mount: {\n        \"/\": [TimeslotsLambdaController]\n      }\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  it(\"should call getAll Lambda\", async () => {\n    const response = await PlatformServerlessTest.request.get(\"/timeslots\");\n\n    expect(response.statusCode).toEqual(200);\n    expect(JSON.parse(response.body)).toEqual([]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Prisma Configuration\nDESCRIPTION: Prisma schema and environment configuration for PostgreSQL database.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Worker in Ts.ED with BullMQ\nDESCRIPTION: Example of injecting a Worker instance into a job controller using the @InjectWorker decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {InjectWorker, JobController} from \"@tsed/bullmq\";\n\n@JobController(\"example\")\nclass ExampleJob implements JobMethods {\n  @InjectWorker(\"default\")\n  private readonly worker?: Worker;\n\n  $onInit() {\n    if (this.worker) {\n      // do something with the worker\n      this.worker.on(\"completed\", (job) => {\n        console.log(\"Job completed\", job);\n      });\n    }\n  }\n\n  public handle(payload: {msg: string}) {\n    console.info(\"New message incoming\", payload.msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Agenda in a Ts.ED Service\nDESCRIPTION: Shows how to inject and use the AgendaModule in a Ts.ED service to schedule jobs programmatically.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterRoutesInit} from \"@tsed/platform-test\";\nimport {Service} from \"@tsed/di\";\nimport {AgendaModule} from \"@tsed/agenda\";\n\n@Service()\nexport class UsersService {\n  @Inject()\n  private agenda: AgendaModule;\n\n  async create(user: User): Promise<User> {\n    // do something\n    // ...\n    // then schedule some jobs\n    await this.agenda.now(\"email.sendWelcomeEmail\", {user});\n    await this.agenda.schedule(\"in 2 hours\", \"email.sendFollowUpEmail\", {user});\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Store Configuration\nDESCRIPTION: Configuration setup for using Redis as cache store with IORedis.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport redisStore from \"cache-manager-ioredis\";\n\n@Configuration({\n  cache: {\n    ttl: 300, // default TTL\n    store: redisStore\n  },\n  redis: {\n    port: 6379\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transactional Controller\nDESCRIPTION: Example of using @Transactional decorator for handling database transactions in controllers with different isolation levels.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParamst} from \"@tsed/platform-params\";\nimport {Post, Post, Get} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  @Transactional()\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Apollo dependencies for Ts.ED\nDESCRIPTION: This snippet shows the npm commands to install the necessary dependencies for integrating Apollo with Ts.ED. It includes the core Apollo packages and testing utilities.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/apollo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo graphql@15 @apollo/server apollo/datasource-rest\nnpm install --save-dev  apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: Listening to Token Instantiation by Provider Type\nDESCRIPTION: Shows how to listen for controller instantiation events to attach a router to the controller. This allows the controller to have access to the router for defining routes programmatically.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {ResolvedInvokeOptions} from \"@tsed/di\";\nimport {$on} from \"@tsed/hooks\";\n\n$on(`$beforeInvoke:${ProviderType.CONTROLLER}`, ({provider, locals}: ResolvedInvokeOptions) => {\n  const router = createInjectableRouter(provider as ControllerProvider);\n  locals.set(PlatformRouter, router);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nunjucks Template Engine in Ts.ED\nDESCRIPTION: This snippet demonstrates how to configure the Nunjucks template engine with custom filters in a Ts.ED application. It shows the setup of view directories, file extensions, and engine options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport nunjucks from \"nunjucks\";\n\nconst nunjucksInstances = nunjucks.configure(\"./views\");\nnunjucksInstances.addFilter(\"foo\", function () {\n  return \"bar\";\n});\n\n@Configuration({\n  views: {\n    root: `${rootDir}/views`,\n    viewEngine: \"nunjucks\",\n    extensions: {\n      njk: \"nunjucks\"\n    },\n    options: {\n      nunjucks: {\n        requires: nunjucksInstances\n      }\n    }\n  }\n})\nexport default class ShopApp {}\n```\n\n----------------------------------------\n\nTITLE: Calendar Model Definition\nDESCRIPTION: Definition of the Calendar model with validation decorators and properties\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/create-your-first-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Property} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @Property()\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using Agenda in a Service\nDESCRIPTION: Shows how to inject and use AgendaModule in a service to schedule jobs programmatically.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {AfterRoutesInit} from \"@tsed/platform-params\";\nimport {AgendaModule} from \"@tsed/agenda\";\n\n@Service()\nexport class UsersService {\n  @Inject()\n  private agenda: AgendaModule;\n\n  async create(user: User): Promise<User> {\n    // do something\n    // ...\n    // then schedule some jobs\n    await this.agenda.now(\"email.sendWelcomeEmail\", {user});\n    await this.agenda.schedule(\"in 2 hours\", \"email.sendFollowUpEmail\", {user});\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Events in Ts.ED Module\nDESCRIPTION: Shows how to emit custom events in a Ts.ED module using $asyncEmit. This allows other modules to subscribe to these events and perform actions when they occur.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module} from \"@tsed/di\";\nimport {$asyncEmit} from \"@tsed/hooks\";\n\nexport interface OnEvent {\n  $myEvent(value: string): Promise<void>;\n}\n\n@Module()\nexport class ModuleEmitter {\n  async initSomething() {\n    // do something before\n\n    await $asyncEmit(\"$myEvent\"); // emit accept extra parameters forwarded to subscribers\n\n    // do something after\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Ts.ED Responses\nDESCRIPTION: Demonstrates how to set and clear cookies using the PlatformResponse object in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    // set\n    ctx.response.cookie(\"locale\", \"fr-FR\");\n\n    // clear\n    ctx.response.cookie(\"locale\", null);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeGraphQL with PubSub\nDESCRIPTION: Server configuration example showing TypeGraphQL integration with PubSub instance.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/apollo\";\nimport \"@tsed/typegraphql\";\nimport \"@tsed/graphql-ws\";\nimport {join} from \"node:path\";\nimport {pubsub} from \"./pubsub/pubsub\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      path: \"/\",\n      playground: true,\n      plugins: [],\n      buildSchemaOptions: {\n        pubsub\n      }\n    }\n  },\n  graphqlWs: {\n    wsServerOptions: {},\n    wsUseServerOptions: {}\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Server in Ts.ED\nDESCRIPTION: Server configuration setup for enabling Temporal integration with connection and client options\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/temporal\";\n\n@Configuration({\n  temporal: {\n    enabled: true,\n    connection: {\n      /* optional: see ConnectionOptions of @temporalio/client */\n    },\n    client: {\n      /* optional: see ClientOptions of @temporalio/client */\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ApolloService in a Users Service\nDESCRIPTION: Example of how to inject and use ApolloService within a service class to access the ApolloServer instance after routes initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/graphql-ws/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {AfterRoutesInit} from \"@tsed/platform-http\";\nimport {graphQLService} from \"@tsed/apollo\";\nimport {ApolloServer} from \"@apollo/server\";\n\n@Injectable()\nexport class UsersService implements AfterRoutesInit {\n  @Injec()\n  apolloService: ApolloService;\n\n  private server: ApolloServer;\n\n  $afterRoutesInit() {\n    this.server = this.apolloService.get(\"server1\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Model Documentation\nDESCRIPTION: Example of using Ts.ED decorators to document a model class for Swagger.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonProperty, Title, Description, Example} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @Title(\"iD\")\n  @Description(\"Description of calendar model id\")\n  @Example(\"Example value\")\n  @JsonProperty()\n  public id: string;\n\n  @JsonProperty()\n  public name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with Retry Strategy\nDESCRIPTION: Example of a controller using the retry strategy with the @Transactional decorator's retry option enabled.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post, Post, Get} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  @Transactional({retry: true})\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Passport Exception Filter in Ts.ED\nDESCRIPTION: TypeScript class implementing an exception filter for handling Passport exceptions in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {Catch, ExceptionFilterMethods} from \"@tsed/platform-exceptions\";\nimport {PassportException} from \"@tsed/passport\";\n\n@Catch(PassportException)\nexport class PassportExceptionFilter implements ExceptionFilterMethods {\n  async catch(exception: PassportException, ctx: PlatformContext) {\n    const {response} = ctx;\n\n    console.log(exception.name);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Session Management\nDESCRIPTION: Example of managing session data in a Socket service\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, Input, Emit, Args, SocketSession} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\")\n  async myMethod(@Args(0) userName: string, @SocketSession session: SocketSession) {\n    const user = session.get(\"user\") || {};\n    user.name = userName;\n\n    session.set(\"user\", user);\n\n    return user;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown with Ts.ED Terminus\nDESCRIPTION: TypeScript code showing how to use decorators for handling Terminus hooks to implement graceful shutdown.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/terminus/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass RedisCtrl {\n  $beforeShutdown() {\n    console.log(\"called before shutdown\");\n  }\n\n  $onSignal() {\n    console.log(\"called on signal\");\n  }\n\n  $onShutdown() {\n    console.log(\"called on shutdown\");\n  }\n\n  $onSendFailureDuringShutdown() {\n    console.log(\"on send failure during shutdown\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Defining Agenda Job Processors\nDESCRIPTION: Demonstrates how to manually define job processors using AgendaModule, including dynamic job creation based on fetched data.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Agenda, AgendaModule, Define} from \"@tsed/agenda\";\n\n@Agenda({namespace: \"email\"})\nexport class EmailJobService {\n  @Inject()\n  agenda: AgendaModule;\n\n  @Inject()\n  httpClient: HttpClient;\n\n  cache: Map<string, Job[]> = new Map();\n\n  @Define({\n    name: \"sendWelcomeEmail\",\n    concurrency: 3\n    /*  ... and any option you would normally pass to agenda.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n    console.log(job.attrs.data.locale);\n  }\n\n  async $beforeAgendaStart() {\n    const locales = await this.httpClient.get(\"/locales\");\n\n    this.cache.set(\n      \"sendWelcomeEmail\",\n      locales.map((locale) => {\n        return this.agenda.create(\"sendWelcomeEmail\", {locale});\n      })\n    );\n  }\n\n  async $afterAgendaStart() {\n    const jobs = this.cache.get(\"sendWelcomeEmail\");\n\n    await Promise.all(jobs.map((job) => job.repeatEvery(\"1 week\").save()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster\nDESCRIPTION: Configuration setup for Redis cluster with detailed cluster options\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-cache\";\nimport \"@tsed/ioredis\";\n\n@Configuration({\n  ioredis: [\n    {\n      name: \"default\",\n      cache: true,\n      nodes: [\"...\"],\n      scaleReads: \"all\",\n      maxRedirections: 16,\n      retryDelayOnTryAgain: 100,\n      retryDelayOnFailover: 200,\n      retryDelayOnClusterDown: 1000,\n      slotsRefreshTimeout: 15000,\n      slotsRefreshInterval: 20000,\n      enableOfflineQueue: true,\n      enableReadyCheck: true,\n      redisOptions: {\n        noDelay: true,\n        connectTimeout: 15000,\n        autoResendUnfulfilledCommands: true,\n        maxRetriesPerRequest: 5,\n        enableAutoPipelining: true,\n        autoPipeliningIgnoredCommands: [\"scan\"]\n      }\n    }\n  ],\n  cache: {\n    ttl: 300\n  }\n})\nclass MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Flush Mode in Ts.ED Controller\nDESCRIPTION: Shows how to configure the flush mode for a transaction using the @Transactional decorator's flushMode option.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nclass UsersController {\n  @Post(\"/\")\n  @Transactional({flushMode: FlushMode.AUTO})\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Settings in Ts.ED\nDESCRIPTION: This snippet demonstrates how to configure default Fastify settings in a Ts.ED server. It uses the @Configuration decorator to set Fastify options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/fastify.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-fastify\";\n\n@Configuration({\n  fastify: {\n    // see fastify options\n  },\n  plugins: []\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Redis Connection Provider\nDESCRIPTION: Implementation of a Redis connection provider for cache management using IORedis.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, registerProvider} from \"@tsed/di\";\nimport {Logger} from \"@tsed/logger\";\nimport Redis from \"ioredis\";\n\nexport const REDIS_CONNECTION = Symbol(\"redis:connection\");\nexport type REDIS_CONNECTION = Redis;\n\nregisterProvider({\n  provide: REDIS_CONNECTION,\n  deps: [Configuration, Logger],\n  async useAsyncFactory(configuration: Configuration, logger: Logger) {\n    const cacheSettings = configuration.get(\"cache\");\n    const redisSettings = configuration.get(\"redis\");\n    const connection = new Redis({...redisSettings, lazyConnect: true});\n\n    cacheSettings.redisInstance = connection;\n\n    try {\n      await connection.connect();\n      logger.info(\"Connected to redis database...\");\n    } catch (error) {\n      logger.error({\n        event: \"REDIS_ERROR\",\n        error\n      });\n    }\n\n    return connection;\n  },\n  hooks: {\n    $onDestroy(connection: Redis) {\n      return connection.disconnect();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Policy Service in Ts.ED\nDESCRIPTION: This snippet shows the implementation of an AWS Policy Service in Ts.ED. It includes methods for generating IAM policies for allowing or denying access to AWS resources, and serializing user information.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {UserInfo} from \"@project/domain/users/UserInfo.js\";\nimport {Injectable} from \"@tsed/di\";\nimport {serialize} from \"@tsed/json-mapper\";\n\nexport interface AwsAuthResponse {\n  principalId: string;\n  policyDocument?: {\n    Version: string;\n    Statement: {\n      Action: string;\n      Effect: string;\n      Resource: string;\n    }[];\n  };\n  context: {\n    user?: UserInfo;\n  };\n}\n\n@Injectable()\nexport class AwsPolicyService {\n  // Help function to generate an IAM policy\n  generatePolicy(principalId: string, effect: string, resource: string, context: AwsAuthResponse[\"context\"]): AwsAuthResponse {\n    // Required output:\n    const authResponse: AwsAuthResponse = {\n      principalId,\n      // Optional output with custom properties of the String, Number or Boolean type.\n      context: {\n        ...context,\n        user: serialize(context.user)\n      }\n    };\n\n    if (effect && resource) {\n      authResponse.policyDocument = {\n        Version: \"2012-10-17\",\n        Statement: [\n          {\n            Action: \"execute-api:Invoke\",\n            Effect: effect,\n            Resource: resource\n          }\n        ]\n      };\n    }\n\n    return authResponse;\n  }\n\n  generateAllow(principalId: string, resource: string, context: AwsAuthResponse[\"context\"]) {\n    return this.generatePolicy(principalId, \"Allow\", resource, context);\n  }\n\n  generateDeny(principalId: string, resource: string, context: AwsAuthResponse[\"context\"] = {}) {\n    return this.generatePolicy(principalId, \"Deny\", resource, context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server for Passport Integration\nDESCRIPTION: TypeScript code to configure the Ts.ED server to use Passport.js. It sets up component scanning for protocol files and initializes the passport configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/passport/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  componentsScan: [\n    `./protocols/*.ts` // scan protocols directory\n  ],\n  passport: {}\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating CLI Entry Point in TypeScript\nDESCRIPTION: Creating the main entry point file for bootstrapping a CLI application with custom commands. This file initializes the CliCore with configuration and registers command classes.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\nimport {CliCore} from \"@tsed/cli-core\";\nimport {config} from \"../config\"; // Import your application configuration\nimport {HelloCommand} from \"./HelloCommand\";\n\nCliCore.bootstrap({\n  ...config,\n  // add your custom commands here\n  commands: [HelloCommand]\n}).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Endpoint Documentation - TypeScript Controller\nDESCRIPTION: Example of documenting API endpoints using Ts.ED decorators with various HTTP methods and return types\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams, QueryParams} from \"@tsed/platform-params\";\nimport {Get, Post, Returns, ReturnsArray, Description, Summary, Deprecated, Security} from \"@tsed/schema\";\nimport {CalendarModel} from \"../models/CalendarModel.js\";\n\n@Controller(\"/calendars\")\nexport class Calendar {\n  @Get(\"/:id\")\n  @Summary(\"Summary of this route\")\n  @Description(\"Description of this route\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  async getCalendar(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/v0/:id\")\n  @Deprecated()\n  @Description(\"Deprecated route, use /rest/calendars/:id instead of.\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  getCalendarDeprecated(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/\")\n  @Description(\"Description of this route\")\n  @ReturnsArray(CalendarModel)\n  getCalendars(): Promise<CalendarModel[]> {\n    // ...\n  }\n\n  @Post(\"/\")\n  @Security(\"calendar_auth\", \"write:calendar\", \"read:calendar\")\n  @Returns(CalendarModel)\n  async createCalendar(@BodyParams() body: any): Promise<CalendarModel> {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes Order in Ts.ED\nDESCRIPTION: Shows the importance of route registration order in Ts.ED controllers, demonstrating how to properly order methods to ensure requests are routed correctly.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  @Get(\"/\")\n  findAll() {\n    return [\"all calendars\"];\n  }\n\n  // This method will never be called if it's placed after the findAll() method\n  @Get(\"/:id\")\n  findOne() {\n    return {id: \"1\"};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TemporalClient in Service\nDESCRIPTION: Example of injecting and using TemporalClient to start workflows in a service.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterRoutesInit} from \"@tsed/platform-http\";\nimport {Service} from \"@tsed/di\";\nimport {TemporalClient} from \"@tsed/temporal\";\nimport {onboardUser} from \"../workflows\";\n\n@Service()\nexport class UsersService implements AfterRoutesInit {\n  @Inject()\n  private temporalClient: TemporalClient;\n\n  async create(user: User): Promise<User> {\n    await this.temporalClient.workflow.start(onboardUser, {\n      args: [user.email],\n      taskQueue: \"onboarding\",\n      workflowId: `onboarding-${user.id}`\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom UserInfo Model in Ts.ED\nDESCRIPTION: TypeScript code to set a custom UserInfo model in the Ts.ED passport configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomUserInfoModel {\n  @Property()\n  id: string;\n\n  @Property()\n  token: string;\n}\n\n@Configuration({\n  passport: {\n    userInfoModel: CustomUserInfoModel\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Path Prefix for Static Files in Ts.ED\nDESCRIPTION: Configuration for serving static files with a virtual path prefix. This allows static files to be accessed via a custom URL path that doesn't exist in the actual file system.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  statics: {\n    \"/statics\": [\n      {\n        root: `./public`,\n        // Optional\n        hook: \"$beforeRoutesInit\" // Load statics on the expected hook. Default: $afterRoutesInit\n        // ... statics options\n      }\n    ]\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Testing Stream Response in Ts.ED Lambda Function\nDESCRIPTION: This snippet demonstrates how to test a stream response in a Ts.ED Lambda function. It uses PlatformServerlessTest to bootstrap the test environment and make requests to the Lambda function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"Stream\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerless, {\n      lambda: [StreamLambda]\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  describe(\"scenario1: Post lambda with body and handle response\", () => {\n    it(\"should return data\", async () => {\n      const response = await PlatformServerlessTest.request.call(\"scenario1\").post(\"/\").body({\n        id: \"1\",\n        name: \"Test\"\n      });\n\n      expect(response).toEqual({\n        body: '{\"id\":\"HELLO\"}',\n        headers: {\n          \"content-type\": \"application/octet-stream\",\n          \"x-request-id\": \"requestId\"\n        },\n        statusCode: 200\n      });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Stripe Webhooks with SuperTest\nDESCRIPTION: Integration test example for testing Stripe webhook handling in a Ts.ED application using SuperTest and PlatformTestUtils.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {PlatformTestUtils} from \"@tsed/platform-test-utils\";\nimport {expect} from \"chai\";\nimport {Stripe} from \"stripe\";\nimport SuperTest from \"supertest\";\nimport {StripeWebhooksCtrl} from \"./StripWebhookCtrl.js\";\nimport {Server} from \"../Server.js\";\n\nconst utils = PlatformTestUtils.create({\n  adapter: PlatformExpress,\n  server: Server,\n  logger: {\n    level: \"info\"\n  }\n});\n\ndescribe(\"Stripe\", () => {\n  let request: SuperTest.Agent;\n  beforeEach(\n    utils.bootstrap({\n      mount: {\n        \"/rest\": [StripWebhookCtrl]\n      }\n    })\n  );\n  beforeEach(() => {\n    request = SuperTest.agent(PlatformTest.callback());\n  });\n\n  afterEach(() => PlatformTest.reset());\n\n  it(\"should call the webhook\", async () => {\n    const stripe = PlatformTest.get<Stripe>(Stripe);\n    const payload = {\n      id: \"evt_test_webhook\",\n      object: \"event\"\n    };\n    const payloadString = JSON.stringify(payload, null, 2);\n\n    const signature = stripe.webhooks.generateTestHeaderString({\n      payload: payloadString,\n      secret: \"whsec_test_secret\"\n    });\n\n    const response = await request.post(\"/rest/webhooks/callback\").send(payloadString).set(\"stripe-signature\", signature).expect(200);\n\n    expect(response.body).to.deep.eq({\n      event: payload,\n      received: true\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Temporal Worker\nDESCRIPTION: Configuration and startup of Temporal worker process with Ts.ED integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {bootstrapWorker} from \"@tsed/temporal\";\nimport {Server} from \"./app/Server.js\";\n\nconst worker = await bootstrapWorker(Server, {\n  worker: {\n    taskQueue: \"onboarding\",\n    workflowsPath: require.resolve(\"./temporal\")\n  },\n  connection: {\n    /* optional: see NativeConnectionOptions of @temporalio/worker */\n  },\n  platform: {\n    componentsScan: false,\n    logger: {\n      level: \"info\"\n    }\n  }\n});\nawait worker.run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check with Ts.ED Terminus\nDESCRIPTION: TypeScript code demonstrating how to create a readiness/liveliness check using the @Health decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/terminus/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Health} from \"@tsed/terminus\";\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {HealthCheckError} from \"@godaddy/terminus\";\nimport {REDIS_CONNECTION} from \"./RedisConnection.js\";\n\n@Injectable()\nclass RedisClient {\n  @Inject(REDIS_CONNECTION)\n  protected redisConnection: REDIS_CONNECTION;\n\n  @Health(\"redis\")\n  async check() {\n    if (this.redisConnection.status === \"ready\") {\n      return \"OK\";\n    }\n\n    // Here check the redis health\n    throw new HealthCheckError(\"failed\", {\n      redis: this.redisConnection.status\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Hooks with New API in Ts.ED v8 (TypeScript)\nDESCRIPTION: Introduction to the new way of declaring hooks using the @tsed/hooks package in Ts.ED v8, allowing for more flexible hook declarations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$on} from \"@tsed/hooks\";\n\n$on(\"$beforeInit\", () => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Filter in a Module Class in TypeScript\nDESCRIPTION: Example of a module class that uses the ResponseFilter to process and transform data returned by a service method. It demonstrates how to set up the context, call the service, serialize the data, and apply the response filter.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-response-filter/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module, DIContext} from \"@tsed/di\";\nimport {ResponseFilter} from \"@tsed/platform-response-filter\";\nimport \"./filters/WrapperResponseFilter\";\n\n@Module()\nclass MyModule {\n  @Inject()\n  injector: InjectorService;\n\n  @Inject()\n  responseFilter: ResponseFilter;\n\n  async onRequest(req: any, res: any) {\n    const context = new DIContext({\n      id: uuid.v4(),\n      injector: this.injector,\n      logger: this.injector.logger\n    });\n\n    // must implement these methods\n    context.request = {\n      accepts(...args: any[]) {\n        return req.accepts(...args);\n      },\n      get(key: string) {\n        return req.get(key);\n      }\n    };\n    context.response = {\n      contentType(contentType: string) {\n        res.contentType(contentType);\n      }\n    };\n\n    const service = this.injector.get<MyService>(MyService);\n    let data = await service.getData();\n\n    // serialize data (map Model to Plain object)\n    data = await this.responseFilter.serialize(data, context);\n\n    // call filter based on the right content type\n    data = await this.responseFilter.transform(data, context);\n\n    if (isObject(data)) {\n      res.json(data);\n    } else {\n      res.send(data);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Provider\nDESCRIPTION: Creates and registers a Redis connection provider with a symbolic token for dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Redis from \"ioredis\";\nimport {registerConnectionProvider} from \"@tsed/ioredis\";\n\nexport const REDIS_CONNECTION = Symbol.for(\"REDIS_CONNECTION\");\nexport type REDIS_CONNECTION = Redis;\n\nregisterConnectionProvider({\n  token: REDIS_CONNECTION,\n  name: \"default\"\n});\n```\n\n----------------------------------------\n\nTITLE: PrimitiveMapper Implementation for Type Conversion\nDESCRIPTION: The implementation of PrimitiveMapper that handles conversion between primitive types like Boolean, Number, and String during serialization and deserialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonMapper} from \"../decorators/jsonMapper\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\n@JsonMapper([\n  Boolean,\n  String,\n  Number\n] as any[])\nexport class PrimitiveMapper implements JsonMapperMethods {\n  deserialize<T>(obj: any, targetType: T): any {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    const constructor = targetType as any;\n\n    if (constructor === String) {\n      return String(obj);\n    }\n\n    if (constructor === Boolean) {\n      if (obj === \"null\") {\n        return null;\n      }\n\n      if (obj === true || obj === \"true\" || obj === \"1\" || obj === 1) {\n        return true;\n      }\n\n      if (obj === false || obj === \"false\" || obj === \"0\" || obj === 0 || obj === \"\") {\n        return false;\n      }\n\n      return Boolean(obj);\n    }\n\n    if (constructor === Number) {\n      if (obj === \"null\") {\n        return null;\n      }\n\n      if ([\"NaN\", NaN].includes(obj)) {\n        return NaN;\n      }\n\n      if (/^-?\\d+$/.test(String(obj))) {\n        return parseInt(String(obj), 10);\n      }\n\n      // if it's a numeric with precision\n      if (/^-?\\d+\\.\\d+$/.test(String(obj))) {\n        return parseFloat(String(obj));\n      }\n\n      const num = Number(obj);\n\n      if (isNaN(num)) {\n        throw new Error(`Cast error. Cannot cast value \\'${obj}\\' to Number.`);\n      }\n\n      return num;\n    }\n\n    return obj;\n  }\n\n  serialize(object: any): any {\n    return object;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting API Endpoints\nDESCRIPTION: Controller example showing various endpoint documentation decorators including returns, security, and deprecation\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/scalar/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams, QueryParams} from \"@tsed/platform-params\";\nimport {Get, Post, Returns, ReturnsArray, Description, Summary, Deprecated, Security} from \"@tsed/schema\";\nimport {CalendarModel} from \"../models/CalendarModel.js\";\n\n@Controller(\"/calendars\")\nexport class Calendar {\n  @Get(\"/:id\")\n  @Summary(\"Summary of this route\")\n  @Description(\"Description of this route\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  async getCalendar(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/v0/:id\")\n  @Deprecated()\n  @Description(\"Deprecated route, use /rest/calendars/:id instead of.\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  getCalendarDeprecated(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/\")\n  @Description(\"Description of this route\")\n  @ReturnsArray(CalendarModel)\n  getCalendars(): Promise<CalendarModel[]> {\n    // ...\n  }\n\n  @Post(\"/\")\n  @Security(\"calendar_auth\", \"write:calendar\", \"read:calendar\")\n  @Returns(CalendarModel)\n  async createCalendar(@BodyParams() body: any): Promise<CalendarModel> {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Agenda\nDESCRIPTION: TypeScript code to configure a Ts.ED server with Agenda integration, including MongoDB connection and various options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/agenda\"; // import agenda ts.ed module\n\nconst mongoConnectionString = \"mongodb://127.0.0.1/agenda\";\n\n@Configuration({\n  agenda: {\n    enabled: true, // Enable Agenda jobs for this instance.\n    // drainJobsBeforeStop: true, // Wait for jobs to finish before stopping the agenda process.\n    // disableJobProcessing: true, // Prevents jobs from being processed.\n    // pass any options that you would normally pass to new Agenda(), e.g.\n    db: {\n      address: mongoConnectionString\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware with Different Registration Formats\nDESCRIPTION: Example showing multiple ways to register middleware in Ts.ED, including native middleware (Express, Koa) and Ts.ED middleware with environment and hook options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, ProviderScope, ProviderType} from \"@tsed/di\";\n\n@Configuration({\n  middlewares: [\n    {use: \"helmet\", hook: \"$afterInit\", options: {contentSecurityPolicy: false}},\n    {use: EnsureHttpsMiddleware, env: Env.PROD},\n    \"cors\",\n    cookieParser(),\n    \"json-parser\", // you can add also the text-parser\n    {use: \"encodedurl-parser\", options: {extended: true}},\n    \"compression\",\n    \"method-override\",\n    AuthTokenMiddleware\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Bearer Protocol in Ts.ED\nDESCRIPTION: TypeScript class implementing Azure Bearer protocol with multiple return values in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/AzureBearerProtocol.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Request Headers in Ts.ED Controller\nDESCRIPTION: Demonstrates how to retrieve request headers using the PlatformRequest object in a Ts.ED controller through the Context object.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Context} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nexport class MyController {\n  @Get(\"/\")\n  get(@Context() ctx: Context) {\n    ctx.request.headers; // return all headers\n    ctx.get(\"host\"); // return host header\n    ctx.getHeader(\"host\"); // return host header\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TemporalClient in Service\nDESCRIPTION: Example of injecting and using TemporalClient to start workflows in a service\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {TemporalClient} from \"@tsed/temporal\";\nimport {onboardUser} from \"../workflows.js\";\n\n@Service()\nexport class UsersService {\n  @Inject()\n  private temporalClient: TemporalClient;\n\n  async create(user: User): Promise<User> {\n    await this.temporalClient.workflow.start(onboardUser, {\n      args: [user.email],\n      taskQueue: \"onboarding\",\n      workflowId: `onboarding-${user.id}`\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Client Repository\nDESCRIPTION: Example of a service class using Redis connection for data operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class ClientRepository {\n  @Inject(REDIS_CONNECTION)\n  protected connection: REDIS_CONNECTION;\n\n  async keys() {\n    return this.connection.keys(\"clients:*\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Objection.js Model in Ts.ED\nDESCRIPTION: Example of creating a database migration file using Ts.ED's createColumns utility for an Objection.js model.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createColumns} from \"@tsed/objection\";\nimport {User} from \"../domain/User\";\nimport Knex from \"objection\";\n\nexport async function up(knex: Knex): Promise<any> {\n  return knex.schema.createTable(User.tableName, async (table: Knex.TableBuilder) => {\n    // createColumns for the given model\n    createColumns(table, User);\n  });\n}\n\nexport async function down(knex: Knex): Promise<any> {\n  return knex.schema.dropTable(\"users\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request Context with Functional API in Ts.ED\nDESCRIPTION: Example showing how to use the Context feature with functional API to store data during a request lifecycle.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get} from \"@tsed/common\";\nimport {runInContext, createContext, getContext} from \"@tsed/async-hook-context\";\nimport type {RequestContext} from \"@tsed/platform-http/global\";\n\n/**\n * Create a custom context\n */\nexport interface MyContext extends RequestContext {\n  userId: string;\n}\n\n/**\n * Create a function that requires context\n */\nexport function getUserId() {\n  const context = getContext<MyContext>(\"myContext\");\n\n  return context.userId;\n}\n\n/**\n * Use runInContext to run code with context\n */\nexport function doSomething() {\n  // Get the current context\n  const ctx = getContext<RequestContext>();\n\n  // Create a context to pass to the doSomethingElse function\n  const myContext: MyContext = {...ctx, userId: \"userId\"};\n\n  // run your function with the context\n  return runInContext(\"myContext\", () => {\n    return getUserId();\n  }, myContext);\n}\n\n@Controller(\"/users\")\nexport class UsersController {\n  @Get(\"/profile\")\n  getProfile() {\n    return doSomething();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Platform Bootstrap Configuration\nDESCRIPTION: Handler configuration for bootstrapping the Ts.ED serverless platform with lambda controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\nimport {TimeslotsLambda} from \"./lambda/TimeslotsLambda.js\";\n\nconst platform = PlatformServerless.bootstrap({\n  lambda: [TimeslotsLambda]\n});\n\nexport = platform.callbacks();\n```\n\n----------------------------------------\n\nTITLE: Disabling Explicit Transactions in Ts.ED Controller\nDESCRIPTION: Example of disabling explicit transactions while preserving async context using the disabled option in @Transactional decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Post} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nclass UsersController {\n  @Post(\"/\")\n  @Transactional({disabled: true})\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Scope in Ts.ED with Functional API\nDESCRIPTION: Creates a provider with instance scope using the functional API. A new instance is created each time the provider is injected, resulting in multiple unique instances when injected multiple times in the same class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, registerProvider} from \"@tsed/common\";\nimport {inject} from \"@tsed/di\";\nimport {useDecorators} from \"@tsed/core\";\n\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\nregisterProvider({\n  provide: MyService,\n  scope: \"instance\"\n});\n\nfunction RandomController() {\n  const service1 = inject(MyService);\n  const service2 = inject(MyService);\n\n  return useDecorators(\n    Get(\"/\"),\n    () => {\n      return {\n        random1: service1.get(),\n        random2: service2.get()\n      };\n    }\n  );\n}\n\nregisterProvider({\n  provide: RandomController,\n  type: \"controller\",\n  use: [RandomController] // function and endpoint\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Repository\nDESCRIPTION: Unit test implementation for Redis repository using ioredis-mock.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ClientRepository} from \"./ClientRepository.js\";\nimport {REDIS_CONNECTION} from \"./RedisConnection.js\";\nimport {ClientModel} from \"./ClientModel.js\";\n\ndescribe(\"IORedisTest\", () => {\n  beforeEach(() => IORedisTest.create());\n  afterEach(() => IORedisTest.reset());\n\n  it(\"should return nothing\", async () => {\n    const service = IORedisTest.get<MyRepository>(MyRepository);\n\n    const client = await service.get(\"uid\");\n\n    expect(client).toEqual(undefined);\n  });\n\n  it(\"should return all keys\", async () => {\n    const service = IORedisTest.get<MyRepository>(MyRepository);\n    const client = new ClientModel();\n    client.name = \"name\";\n\n    const newClient = await service.save(client);\n\n    expect(newClient.id).toBeInstanceOf(String);\n    expect(newClient.name).toEqual(\"name\");\n\n    const clientFound = await service.get(newClient.id);\n\n    expect(clientFound).toBeInstanceOf(ClientModel);\n    expect(clientFound.id).toEqual(newClient.id);\n    expect(clientFound.name).toEqual(\"name\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check with Error Handling\nDESCRIPTION: Example of creating a health check for Redis with error handling using HealthCheckError.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Health} from \"@tsed/terminus\";\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {HealthCheckError} from \"@godaddy/terminus\";\nimport {REDIS_CONNECTION} from \"./RedisConnection\";\n\n@Injectable()\nclass RedisClient {\n  @Inject(REDIS_CONNECTION)\n  protected redisConnection: REDIS_CONNECTION;\n\n  @Health(\"redis\")\n  async check() {\n    if (this.redisConnection.status === \"ready\") {\n      return \"ok\";\n    }\n\n    // Here check the redis health\n    throw new HealthCheckError(\"failed\", {\n      redis: this.redisConnection.status\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Pre-Hook Implementation\nDESCRIPTION: Shows how to implement pre-save hooks in Mongoose models using decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PreHook, Model} from \"@tsed/mongoose\";\n\n@Model()\n@PreHook(\"save\", (car: CarModel) => {\n  // do something\n  console.log(\"Before save\");\n})\nexport class CarModel {\n  @Property()\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Service Declaration with Functional API in Ts.ED v8 (TypeScript)\nDESCRIPTION: New way of declaring services using the functional API in Ts.ED v8, providing more flexibility and improved type inference.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injectable, inject, configuration, constant} from \"@tsed/di\";\nimport {MyRepository} from \"./inject-model.js\";\nimport {injector} from \"./injector.js\";\n\nexport class MyService {\n  private settings = configuration();\n  private myConstant = constant(\"myConstant\", \"default\");\n  private repository = inject(MyRepository);\n\n  constructor() {\n    console.log(this.settings);\n    console.log(this.myConstant);\n    console.log(this.repository);\n  }\n}\n\ninjectable(MyService); // .scope(Scope.SINGLETON) by default\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates with PlatformViews in Ts.ED\nDESCRIPTION: This example shows how to use the PlatformViews service to render a template in a Ts.ED service. It demonstrates rendering a template from a service context.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, Injectable} from \"@tsed/di\";\nimport {PlatformViews} from \"@tsed/platform-views\";\n\n@Injectable()\nexport class MyService {\n  @Inject()\n  protected platformViews: PlatformViews;\n\n  async renderTemplate(locals: any) {\n    return this.platformViews.render(\"template.ejs\", locals);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hook Methods to Register Middleware\nDESCRIPTION: Alternative approach to register middleware using server lifecycle hook methods, showing environment-specific middleware registration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, ProviderScope, ProviderType} from \"@tsed/di\";\nimport {Env} from \"@tsed/core\";\nimport bodyParser from \"body-parser\";\n\n@Configuration({})\nexport class Server {\n  $afterInit() {\n    this.app.use(helmet({contentSecurityPolicy: false}));\n  }\n\n  $beforeRoutesInit() {\n    if (this.env === Env.PROD) {\n      this.app.use(EnsureHttpsMiddleware);\n    }\n\n    this.app\n      .use(cors())\n      .use(cookieParser())\n      .use(bodyParser.json())\n      .use(bodyParser.urlencoded({extended: true}))\n      .use(compress({}))\n      .use(methodOverride())\n      .use(AuthTokenMiddleware);\n\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locals in Ts.ED for Template Rendering\nDESCRIPTION: Shows how to use @Locals decorator in Ts.ED controllers to attach data to the response, which can be used by template engines for server-side rendering.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get, View} from \"@tsed/schema\";\nimport {Locals} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  @View(\"home.pug\")\n  get(@Locals() locals: any) {\n    locals.user = \"user\"; // locals will be used by the template engine\n\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Logger in a Service\nDESCRIPTION: Example of how to inject and use the Logger in a service class using TypeScript decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Logger} from \"@tsed/logger\";\nimport {Injectable, Inject} from \"@tsed/di\";\n\n@Injectable()\nexport class MyService {\n  @Inject()\n  logger: Logger;\n\n  $onInit() {\n    this.logger.info(\"Hello world\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED with EJS templating engine\nDESCRIPTION: TypeScript code snippet showing how to configure Ts.ED server with EJS as the templating engine. It sets up the views directory, enables caching in production, and specifies the default view engine.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/ajv\";\nimport \"@tsed/swagger\";\nimport {resolve} from \"path\";\n\n@Configuration({\n  views: {\n    root: resolve(__dirname, \"../views\"),\n    viewEngine: \"ejs\",\n    extensions: {\n      ejs: \"ejs\"\n    },\n    cache: process.env.NODE_ENV === \"production\"\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Files Directory in Ts.ED\nDESCRIPTION: Basic configuration example for serving static files from a directory. The code demonstrates how to expose files under a root path for direct access through the server.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  statics: {\n    \"/\": [\n      {\n        root: `./public`,\n        // Optional\n        hook: \"$beforeRoutesInit\" // Load statics on the expected hook. Default: $afterRoutesInit\n        // ... statics options\n      }\n    ]\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Exposing a Web Application with Custom Cache Headers in Koa.js\nDESCRIPTION: Configuration for exposing a frontend web application with appropriate cache headers and redirection rules for client-side routing in Koa.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport send from \"send\";\n\nfunction setCustomCacheControl(res: ServerResponse, path: string) {\n  if (send.mime.lookup(path) === \"text/html\") {\n    res.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    res.setHeader(\"Pragma\", \"no-cache\");\n    res.setHeader(\"expires\", \"0\");\n  }\n}\n\n@Configuration({\n  statics: {\n    \"/app\": [\n      {\n        root: `./public`,\n        maxAge: \"1d\",\n        setHeaders: setCustomCacheControl\n      }\n    ]\n  }\n})\nexport class Server {\n  @Inject()\n  app: PlatformApplication;\n\n  $afterRoutesInit() {\n    this.app.get(`/app/*`, (req: any, res: Res) => {\n      res.sendFile(join(directory, \"index.html\"));\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Redis\nDESCRIPTION: Server configuration setup with Redis connection options and cache settings\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-cache\";\nimport \"@tsed/ioredis\";\n\n@Configuration({\n  ioredis: [\n    {\n      name: \"default\",\n      cache: true\n    }\n  ],\n  cache: {\n    ttl: 300\n  }\n})\nclass MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ts.ED Injector in Legacy Express.js Code\nDESCRIPTION: Example of how to access Ts.ED services and injector within legacy Express.js router code using the getContext() function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-express.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MyService} from \"./services/MyService\";\nimport {Router} from \"express\";\n\nconst router = Router({mergeParams: true});\n\nrouter.get(\"/:id\", (req, res) => {\n  const $ctx = getContext();\n  const service = $ctx.injector.get(MyService);\n\n  service.doSomething();\n\n  res.send(\"Hello\");\n});\n\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL WebSocket Dependencies\nDESCRIPTION: Command line instructions for installing required packages using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/graphql-ws graphql-ws ws @types/ws\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tsed/graphql-ws graphql-ws ws @types/ws\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tsed/graphql-ws graphql-ws ws @types/ws\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @tsed/graphql-ws graphql-ws ws @types/ws\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Parameters to Scalar Documentation\nDESCRIPTION: Shows how to add extra parameters like headers to the Scalar documentation without consuming them in the endpoint.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/products\")\nexport class ProductsController {\n  @Get(\"/:id\")\n  @In(\"header\").Name(\"x-token\").Type(String).Required(true)\n  @In(\"header\").Name(\"x-api-key\").Type(String).Required(true)\n  @Status(200, Product).Description(\"Success\")\n  async get(\n    @PathParams(\"id\") @Description(\"Product id\") id: string\n  ): Promise<Product<string>> {\n    return new Product<string>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Recipe Service in TypeScript\nDESCRIPTION: This snippet defines a RecipesService class that manages a collection of recipes. It includes methods for finding all recipes and finding a recipe by ID, demonstrating basic data management for the GraphQL API.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Service } from \"@tsed/di\";\nimport { Recipe } from \"./Recipe\";\n\n@Service()\nexport class RecipesService {\n  private readonly items: Recipe[] = [\n    { id: \"1\", title: \"Recipe 1\", description: \"Desc 1\", creationDate: new Date(\"2020-01-01\") },\n    { id: \"2\", title: \"Recipe 2\", description: \"Desc 2\", creationDate: new Date(\"2020-01-02\") },\n    { id: \"3\", title: \"Recipe 3\", description: \"Desc 3\", creationDate: new Date(\"2020-01-03\") }\n  ];\n\n  async findAll(): Promise<Recipe[]> {\n    return this.items;\n  }\n\n  async findById(id: string): Promise<Recipe> {\n    return this.items.find((item) => item.id === id)!;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom AJV Validation in Ts.ED\nDESCRIPTION: Unit test for custom validation keyword. Verifies that the custom range validator works correctly for both valid and invalid values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/ajv\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {getJsonSchema} from \"@tsed/schema\";\nimport {Product} from \"./Product.js\";\nimport \"../keywords/RangeKeyword.js\";\n\ndescribe(\"Product\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  it(\"should call custom keyword validation (compile)\", () => {\n    const ajv = PlatformTest.get<Ajv>(Ajv);\n    const schema = getJsonSchema(Product, {customKeys: true});\n    const validate = ajv.compile(schema);\n\n    expect(schema).to.deep.equal({\n      properties: {\n        price: {\n          exclusiveRange: true,\n          range: [10, 100],\n          type: \"number\"\n        }\n      },\n      type: \"object\"\n    });\n\n    expect(validate({price: 10.01})).toEqual(true);\n    expect(validate({price: 99.99})).toEqual(true);\n    expect(validate({price: 10})).toEqual(false);\n    expect(validate({price: 100})).toEqual(false);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: SSE Implementation using EventEmitter\nDESCRIPTION: Example demonstrating SSE implementation using Node.js EventEmitter pattern\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/server-sent-events.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EventStream} from \"@tsed/sse\";\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  private eventEmitter = new EventEmitter();\n\n  $onInit() {\n    setInterval(() => {\n      this.eventEmitter.emit(\"message\", new Date());\n    }, 1000);\n  }\n\n  @Get(\"/events\")\n  @EventStream()\n  events() {\n    return this.eventEmitter;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom URI Format Validation\nDESCRIPTION: Demonstrates how to test the custom URI format validator using PlatformTest and AjvService. Includes validation of empty strings and schema generation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Uri, getJsonSchema} from \"@tsed/schema\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {AjvService} from \"@tsed/ajv\";\nimport \"./UriFormat.js\";\n\ndescribe(\"UriFormat\", () => {\n  beforeEach(() => PlatformTest.create());\n  afterEach(() => PlatformTest.reset());\n  it(\"should validate empty string when we load the our custom Formats for AJV\", async () => {\n    class MyModel {\n      @Uri() // or @Format(\"uri\")\n      uri: string;\n    }\n\n    const service = PlatformTest.get<AjvService>(AjvService);\n    const jsonSchema = getJsonSchema(MyModel);\n\n    expect(jsonSchema).to.deep.equal({\n      properties: {\n        uri: {\n          format: \"uri\",\n          type: \"string\"\n        }\n      },\n      type: \"object\"\n    });\n\n    const result = await service.validate({uri: \"\"}, {type: MyModel});\n\n    expect(result).to.deep.eq({uri: \"\"});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Parameters to Swagger Documentation\nDESCRIPTION: Shows how to add extra parameters to Swagger documentation using the @In decorator, without consuming them in the endpoint.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {In} from \"@tsed/schema\";\nimport {Get, QueryParams} from \"@tsed/common\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  @Get(\"/\")\n  @In(\"header\").Name(\"x-token\").Type(String).Required(true)\n  @In(\"header\").Name(\"x-api-key\").Type(String).Required(true)\n  @Returns(200, String).Description(\"Success\")\n  myMethod() {\n    return \"\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swagger Endpoint Documentation\nDESCRIPTION: Example of using Ts.ED decorators to document controller methods for Swagger, including route descriptions, return types, and security.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams, QueryParams} from \"@tsed/platform-params\";\nimport {Get, Post, Returns, ReturnsArray, Description, Summary, Deprecated, Security} from \"@tsed/schema\";\nimport {CalendarModel} from \"../models/CalendarModel.js\";\n\n@Controller(\"/calendars\")\nexport class Calendar {\n  @Get(\"/:id\")\n  @Summary(\"Summary of this route\")\n  @Description(\"Description of this route\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  async getCalendar(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/v0/:id\")\n  @Deprecated()\n  @Description(\"Deprecated route, use /rest/calendars/:id instead of.\")\n  @Returns(CalendarModel)\n  @Returns(404, {description: \"Not found\"})\n  getCalendarDeprecated(@QueryParams(\"id\") id: string): Promise<CalendarModel> {\n    //...\n  }\n\n  @Get(\"/\")\n  @Description(\"Description of this route\")\n  @ReturnsArray(CalendarModel)\n  getCalendars(): Promise<CalendarModel[]> {\n    // ...\n  }\n\n  @Post(\"/\")\n  @Security(\"calendar_auth\", \"write:calendar\", \"read:calendar\")\n  @Returns(CalendarModel)\n  async createCalendar(@BodyParams() body: any): Promise<CalendarModel> {\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transactional Decorator with Retry Policy\nDESCRIPTION: Example of a controller using the @Transactional decorator with retry functionality enabled for handling user creation operations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParamst} from \"@tsed/platform-params\";\nimport {Post, Post, Get} from \"@tsed/schema\";\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Transactional} from \"@tsed/mikro-orm\";\n\n@Controller(\"/users\")\nexport class UsersCtrl {\n  @Inject()\n  private readonly usersService!: UsersService;\n\n  @Post(\"/\")\n  @Transactional({retry: true})\n  create(@BodyParams() user: User): Promise<User> {\n    return this.usersService.create(user);\n  }\n\n  @Get(\"/\")\n  getList(): Promise<User[]> {\n    return this.usersService.find();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Class with Returns Decorator in TypeScript\nDESCRIPTION: Example of defining a service class with methods that use the @Returns decorator to specify the return type and status code. It also demonstrates the use of the @View decorator for rendering views.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-response-filter/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {Returns} from \"@tsed/schema\";\nimport {MyModel} from \"../models/MyModel.js\";\n\n@Injectable()\nclass MyService {\n  @Returns(200, MyModel)\n  async getData() {\n    return new MyModel({id: \"id\", test: \"test\"});\n  }\n\n  @Returns(200, MyModel)\n  @View(\"myview.ejs\")\n  async getDataView() {\n    return new MyModel({id: \"id\", test: \"test\"});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Backoff Retry Strategy\nDESCRIPTION: Implementation of a custom retry strategy using exponential backoff for handling optimistic lock errors in transactions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OptimisticLockError} from \"@mikro-orm/core\";\nimport {RetryStrategy} from \"@tsed/mikro-orm\";\nimport {OverrideProvider} from \"@tsed/di\";\nimport {setTimeout} from \"timers/promises\";\n\n@OverrideProvider(RetryStrategy)\nexport class ExponentialBackoff implements RetryStrategy {\n  private readonly maxDepth = 3;\n  private depth = 0;\n\n  public async acquire<T extends (...args: unknown[]) => unknown>(task: T): Promise<ReturnType<T>> {\n    try {\n      return (await task()) as ReturnType<T>;\n    } catch (e) {\n      if (this.shouldRetry(e as Error) && this.depth < this.options.maxDepth) {\n        return this.retry(task);\n      }\n\n      throw e;\n    }\n  }\n\n  private shouldRetry(error: Error): boolean {\n    return error instanceof OptimisticLockError;\n  }\n\n  private async retry<T extends (...args: unknown[]) => unknown>(task: T): Promise<ReturnType<T>> {\n    await setTimeout(2 ** this.depth * 50);\n\n    this.depth += 1;\n\n    return this.acquire(task);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Body Parsing in Configuration\nDESCRIPTION: Configuration example showing how to enable raw body parsing and automatically configure body parsers without manual initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  rawBody: true,\n  middlewares: [\n     {use: 'json-parser'},\n     {use: 'urlencoded-parser', options: {extended: true})\n  ]\n})\nexport class Server {\n  @Inject()\n  protected app: PlatformApplication;\n\n  $beforeRoutesInit() {\n-    this.app\n-      .use(bodyParser.json())\n-      .use(bodyParser.urlencoded({extended: true}));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing $onDestroy Hook for Cleanup\nDESCRIPTION: Shows how to implement the $onDestroy hook to perform cleanup tasks when a provider instance is destroyed. This example closes a database connection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module, OnDestroy} from \"@tsed/di\";\n\n@Module()\nexport class MyModule implements OnDestroy {\n  async $onDestroy(): Promise<any> {\n    await this.closeConnection();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding PlatformLogMiddleware in Ts.ED\nDESCRIPTION: Shows how to override the default PlatformLogMiddleware to customize the logging behavior.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OverrideProvider} from \"@tsed/di\";\nimport {Context, PlatformLogMiddleware} from \"@tsed/common\";\n\n@OverrideProvider(PlatformLogMiddleware)\nexport class CustomPlatformLogMiddleware extends PlatformLogMiddleware {\n  public use(@Context() ctx: Context) {\n    // do something\n\n    return super.use(ctx); // required\n  }\n\n  protected requestToObject(ctx: Context) {\n    const {request} = ctx;\n\n    // NOTE: request => PlatformRequest. To get Express.Request use ctx.getRequest<Express.Request>();\n    return {\n      method: request.method,\n      url: request.url,\n      headers: request.headers,\n      body: request.body,\n      query: request.query,\n      params: request.params\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic SSE Controller with EventStreamCtx\nDESCRIPTION: Controller implementation using EventStream decorator and EventStreamCtx for handling SSE events\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/sse/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {EventStream, EventStreamCtx} from \"@tsed/sse\";\n\n@Controller(\"/sse\")\nexport class MyCtrl {\n  @Get(\"/events\")\n  @EventStream()\n  events(@EventStreamCtx() eventStream: EventStreamCtx) {\n    let intervalId: ReturnType<typeof setInterval>;\n\n    eventStream.on(\"close\", () => {\n      clearInterval(intervalId);\n    });\n\n    eventStream.on(\"end\", () => {\n      clearInterval(intervalId);\n    });\n\n    intervalId = setInterval(() => {\n      eventStream.emit(\"event\", new Date());\n    }, 1000);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job with Custom Queue\nDESCRIPTION: Example of creating a job controller with a custom queue name and job-specific options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"other-example\", \"other-queue\", {\n  attempts: 42\n})\nclass OtherExampleJob implements JobMethods {\n  public handle(payload: {num: number}) {\n    console.info(\"look at my awesome number: \", payload.num);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Testing in Ts.ED\nDESCRIPTION: Demonstrates how to disable caching during unit tests by setting the cache option to false in the test configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"MyCtrl\", () => {\n  let request: SuperTest.Agent;\n  beforeAll(\n    TestMongooseContext.bootstrap(Server, {\n      cache: false,\n      mount: {\n        \"/rest\": [MyCtrl]\n      }\n    })\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Provider Wildcard Redirect URI Plugin in Ts.ED Server\nDESCRIPTION: TypeScript code to import and configure the OIDC Provider Wildcard Redirect URI plugin in a Ts.ED server. It demonstrates how to enable the plugin conditionally based on the environment.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/oidc-provider-plugin-wildcard-redirect-uri/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/oidc-provider\"; // import typeorm ts.ed module\nimport \"@tsed/oidc-provider-plugin-wildcard-redirect-uri\"; // import typeorm ts.ed module\n\n@Configuration({\n  oidc: {\n    plugins: {\n      wildcard: {\n        enabled: process.env.NODE_ENV !== \"production\"\n      }\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI with Custom JavaScript\nDESCRIPTION: Example of configuring Swagger UI in Ts.ED with a custom JavaScript file for additional customization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  swagger: [\n    {\n      path: \"/v3/doc\",\n      specVersion: \"3.0.1\",\n      jsPath: \"/scripts/swagger-ui.js\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Apollo Server Instance\nDESCRIPTION: TypeScript code showing how to retrieve an instance of ApolloServer using ApolloService in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, Injectable} from \"@tsed/di\";\nimport {ApolloService} from \"@tsed/apollo\";\n\n@Injectable()\nexport class UsersService {\n  @Inject()\n  apollo: ApolloService;\n\n  async $onInit() {\n    const server = await this.apollo.get(\"server1\");\n    // use the server\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Users Repository - TypeScript\nDESCRIPTION: Auto-generated TypeScript repository class with CRUD operations for User model\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {isArray} from \"@tsed/core\";\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {Injectable, Inject} from \"@tsed/di\";\nimport {PrismaService} from \"../services/PrismaService\";\nimport {Prisma, User} from \"../client\";\nimport {UserModel} from \"../models\";\n\n@Injectable()\nexport class UsersRepository {\n  @Inject()\n  protected prisma: PrismaService;\n\n  get collection() {\n    return this.prisma.user;\n  }\n\n  get groupBy() {\n    return this.collection.groupBy.bind(this.collection);\n  }\n\n  protected deserialize<T>(obj: null | User | User[]): T {\n    return deserialize<T>(obj, {type: UserModel, collectionType: isArray(obj) ? Array : undefined});\n  }\n\n  async findUnique(args: Prisma.UserFindUniqueArgs): Promise<UserModel | null> {\n    const obj = await this.collection.findUnique(args);\n    return this.deserialize<UserModel | null>(obj);\n  }\n\n  async findFirst(args: Prisma.UserFindFirstArgs): Promise<UserModel | null> {\n    const obj = await this.collection.findFirst(args);\n    return this.deserialize<UserModel | null>(obj);\n  }\n\n  async findMany(args?: Prisma.UserFindManyArgs): Promise<UserModel[]> {\n    const obj = await this.collection.findMany(args);\n    return this.deserialize<UserModel[]>(obj);\n  }\n\n  async create(args: Prisma.UserCreateArgs): Promise<UserModel> {\n    const obj = await this.collection.create(args);\n    return this.deserialize<UserModel>(obj);\n  }\n\n  async update(args: Prisma.UserUpdateArgs): Promise<UserModel> {\n    const obj = await this.collection.update(args);\n    return this.deserialize<UserModel>(obj);\n  }\n\n  async upsert(args: Prisma.UserUpsertArgs): Promise<UserModel> {\n    const obj = await this.collection.upsert(args);\n    return this.deserialize<UserModel>(obj);\n  }\n\n  async delete(args: Prisma.UserDeleteArgs): Promise<UserModel> {\n    const obj = await this.collection.delete(args);\n    return this.deserialize<UserModel>(obj);\n  }\n\n  async deleteMany(args: Prisma.UserDeleteManyArgs) {\n    return this.collection.deleteMany(args);\n  }\n\n  async updateMany(args: Prisma.UserUpdateManyArgs) {\n    return this.collection.updateMany(args);\n  }\n\n  async aggregate(args: Prisma.UserAggregateArgs) {\n    return this.collection.aggregate(args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using EventEmitter in Ts.ED Service\nDESCRIPTION: TypeScript code showing how to inject the EventEmitterService into a Ts.ED service and use it to emit events.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/event-emitter/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service, Inject} from \"@tsed/di\";\nimport {EventEmitterService} from \"@tsed/event-emitter\";\n\n@Service()\nexport class OrderService {\n  @Inject()\n  private eventEmitter: EventEmitterService;\n\n  shipIt(orderId: string) {\n    // do something ...\n    // then send an event\n    this.eventEmitter.emit(\"order.shipped\", {orderId});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection State Recovery in Ts.ED\nDESCRIPTION: Shows how to configure connection state recovery for Socket.io in a Ts.ED server.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/socketio\";\n\n@Configuration({\n  socketIO: {\n    // ... see configuration\n    connectionStateRecovery: {\n      // the backup duration of the sessions and the packets\n      maxDisconnectionDuration: 2 * 60 * 1000,\n      // whether to skip middlewares upon successful recovery\n      skipMiddlewares: true\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using $on Function to Subscribe to $onInit Hook\nDESCRIPTION: Shows how to use the $on function from @tsed/hooks to subscribe to the $onInit event without implementing interfaces in a class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$on} from \"@tsed/hooks\";\n\n$on(\"$onInit\", () => {\n  // do something\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Configuration\nDESCRIPTION: Configuration examples for custom cache key resolution at server and controller levels.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformContext} from \"@tsed/platform-http\";\n\n@Configuration({\n  cache: {\n    keyResolver(args: any[], $ctx?: PlatformContext): string {\n      // NOTE $ctx is only available for endpoints\n      return \"key\"\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Template Caching in Ts.ED\nDESCRIPTION: This snippet demonstrates how to enable caching for template rendering in a Ts.ED controller using the @View decorator. It's useful for production environments to improve performance.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, View} from \"@tsed/common\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  @Get(\"/\")\n  @View(\"home.ejs\", {cache: true})\n  get() {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Moment Mapper in Typescript\nDESCRIPTION: This snippet demonstrates how to configure the server to use the MomentMapper for date handling.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/common\";\nimport \"./MomentMapper\";\n\n@Configuration({\n  // ...\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using Moment in Model Class with Ts.ED Decorators\nDESCRIPTION: This example shows how to use Moment.js in a model class with Ts.ED decorators for property mapping.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Moment} from \"moment\";\nimport {Property} from \"@tsed/schema\";\n\nexport class Person {\n  @Property(Date) // or @Property(String) + @DateTime()\n  birthdate: Moment;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Scope in Ts.ED with Functional API\nDESCRIPTION: Creates a provider with singleton scope using the functional API. The provider is created once during server initialization and shared across all requests, returning the same random value for all requests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, registerProvider} from \"@tsed/common\";\nimport {useDecorators} from \"@tsed/core\";\n\nfunction RandomController() {\n  const random = Math.random();\n\n  return useDecorators(\n    Get(\"/\"),\n    () => {\n      return random;\n    }\n  );\n}\n\nregisterProvider({\n  provide: RandomController,\n  type: \"controller\",\n  use: [RandomController], // function and endpoint\n  scope: \"singleton\" // Optional because it's the default scope\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Auth Routes in Ts.ED\nDESCRIPTION: TypeScript class implementing routes for Facebook authentication with scope configuration in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/tutorials/snippets/passport/PassportFacebookCtrl.ts\n```\n\n----------------------------------------\n\nTITLE: Documenting an Endpoint with Scalar\nDESCRIPTION: Illustrates how to use decorators to generate Scalar documentation for an API endpoint, including summary, description, and response types.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/products\")\nexport class ProductsController {\n  @Get(\"/:id\")\n  @Summary(\"Return a product\")\n  @Description(\"Longer description of the endpoint\")\n  @Status(200, Product).Description(\"Success\")\n  async get(\n    @PathParams(\"id\") @Description(\"Product id\") id: string\n  ): Promise<Product<string>> {\n    return new Product<string>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MikroORM in Ts.ED Server\nDESCRIPTION: Example of importing and configuring MikroORM module in the Ts.ED server configuration. Shows setup for multiple database contexts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {MikroOrmModule} from \"@tsed/mikro-orm\";\n\n@Configuration({\n  imports: [MikroOrmModule],\n  mikroOrm: [\n    {\n      contextName: 'default',\n      type: 'postgresql',\n      ...,\n\n      entities: [\n        `./entity/*{.ts,.js}`\n      ]\n    },\n    {\n      contextName: 'mongo',\n      type: 'mongo',\n      ...\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED CLI with pnpm\nDESCRIPTION: Use pnpm to run the Ts.ED CLI and initialize a new project in the current directory.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm --package=@tsed/cli dlx tsed init .\n```\n\n----------------------------------------\n\nTITLE: AWS Context and Event Handler\nDESCRIPTION: Example of accessing AWS Lambda context and event objects using Ts.ED decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {ServerlessEvent, ServerlessContext} from \"@tsed/platform-serverless-http\";\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Get(\"/\")\n  get(@ServerlessEvent() event: any, @ServerlessContext() context: ServerlessContext) {\n    console.log(\"Event\", event);\n    console.log(\"Context\", context);\n\n    return {event, context};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Injector in TypeScript\nDESCRIPTION: Example of loading the injector, configuring the logger, and using the CalendarCtrl with dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/di/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {InjectorService, attachLogger} from \"@tsed/di\";\nimport {$log} from \"@tsed/logger\";\nimport {CalendarCtrl} from \"./CalendarCtrl.js\";\n\nasync function bootstrap() {\n  const injector = new InjectorService();\n\n  // configure the default logger\n  attachLogger(injector, $log);\n\n  // Load all providers registered via @Injectable decorator\n  await injector.load();\n\n  const calendarController = injector.get<CalendarCtrl>();\n  await calendarController.create(new Calendar());\n\n  // emit event to trigger actions for third parties modules\n  await injector.emit(\"$onReady\");\n\n  // And finally destroy injector and his instances (see injector hooks)\n  await injector.destroy();\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Scalar Documentations\nDESCRIPTION: Example of setting up multiple Scalar documentations in Ts.ED, each with different paths and specifications.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  scalar: [\n    {\n      path: \"/api-docs\",\n      doc: \"api\",\n      specVersion: \"3.0.1\"\n    },\n    {\n      path: \"/admin-docs\",\n      doc: \"admin\",\n      specVersion: \"3.0.1\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining a model with Ajv validation decorators\nDESCRIPTION: Example of a TypeScript class using Ajv validation decorators to define constraints on model properties.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/ajv/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Required, MaxLength, MinLength, Minimum, Maximum, Format, Enum, Pattern, Email} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @MaxLength(20)\n  @MinLength(3)\n  @Required()\n  title: string;\n\n  @Minimum(0)\n  @Maximum(10)\n  rating: number;\n\n  @Email()\n  email: string;\n\n  @Format(\"date\") // or date-time, etc...\n  createDate: Date;\n\n  @Pattern(/hello/)\n  customInput: string;\n\n  @Enum(\"value1\", \"value2\")\n  customInput: \"value1\" | \"value2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Log Response Function\nDESCRIPTION: Example of how to configure a custom onLogResponse function in the Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-log-request\";\nimport {customOnLogResponse} from \"./utils/customOnLogResponse.js\";\n\n@Configuration({\n  onLogResponse: customOnLogResponse\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Registering Fastify Plugins in Ts.ED\nDESCRIPTION: This snippet shows how to register Fastify plugins using the plugins server option in Ts.ED. It demonstrates registering both a plugin by name and a plugin with custom options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/fastify.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-fastify\";\nimport {FastifyPluginCallback} from \"fastify\";\nimport {ThePlugin} from \"fastify-plugin\";\n\n@Configuration({\n  fastify: {\n    plugins: [\n      \"fastify-plugin-1\",\n      {\n        // register a plugin\n        use: ThePlugin,\n        options: {\n          // plugin options\n        }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminus in Ts.ED Server\nDESCRIPTION: TypeScript code snippet showing how to import and configure Terminus in a Ts.ED server file.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/terminus\"; // import terminus Ts.ED module\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  terminus: {\n    path: \"/health\"\n    // ... see configuration\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method with Ts.ED Decorators in TypeScript\nDESCRIPTION: This snippet shows how to use @Get, @Summary, and @Returns decorators to configure a method in Ts.ED. It sets up the HTTP method, provides a summary, and specifies the return type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Get(\"/:id\")\n@Summary(\"Return a calendar\")\n@Returns(200, Calendar)\nasync get(@PathParams(\"id\") id: string): Promise<Calendar> {\n  return new Calendar({id});\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED CLI globally\nDESCRIPTION: Command to install @tsed/cli globally to run custom commands directly from the Ts.ED CLI.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @tsed/cli\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Alterable Value Events in Ts.ED\nDESCRIPTION: Shows how to subscribe to alterable value events and modify the value. This example appends \" world\" to the value received from the event.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module} from \"@tsed/di\";\nimport {AlterEvent} from \"./ModuleEmitter.js\";\n\n@Module()\nexport class ModuleSubscriber extends AlterEvent {\n  $alterEvent(value: any) {\n    return value + \" world\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Validators with Ts.ED and AJV\nDESCRIPTION: Unit test for validating the custom range validator implementation, showing how to compile the schema and test validation with various input values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/ajv\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {getJsonSchema} from \"@tsed/schema\";\nimport {Product} from \"./Product\";\nimport \"../keywords/RangeKeyword\";\n\ndescribe(\"Product\", () => {\n  beforeEach(PlatformTest.create);\n  afterEach(PlatformTest.reset);\n\n  it(\"should call custom keyword validation (compile)\", () => {\n    const ajv = PlatformTest.get<Ajv>(Ajv);\n    const schema = getJsonSchema(Product, {customKeys: true});\n    const validate = ajv.compile(schema);\n\n    expect(schema).to.deep.equal({\n      properties: {\n        price: {\n          exclusiveRange: true,\n          range: [10, 100],\n          type: \"number\"\n        }\n      },\n      type: \"object\"\n    });\n\n    expect(validate({price: 10.01})).toEqual(true);\n    expect(validate({price: 99.99})).toEqual(true);\n    expect(validate({price: 10})).toEqual(false);\n    expect(validate({price: 100})).toEqual(false);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP and HTTPS Server Addresses\nDESCRIPTION: Example showing how to specify custom IP addresses and ports for both HTTP and HTTPS servers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: \"127.0.0.1:8081\",\n  httpsPort: \"127.0.0.2:8082\"\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Alter Log Function\nDESCRIPTION: Example of how to configure a custom alterLog function in the Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-log-request\";\nimport {customAlterLog} from \"./utils/customAlterLog.js\";\n\n@Configuration({\n  alterLog: customAlterLog\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Testing Stripe Webhooks in Ts.ED\nDESCRIPTION: Unit test example for testing Stripe webhook handling in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Stripe} from \"stripe\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {StripWebhookCtrl} from \"./StripWebhookCtrl\";\n\ndescribe(\"StripWebhookCtrl\", () => {\n  beforeEach(() =>\n    PlatformTest.create({\n      stripe: {\n        apiKey: \"fake_api_key\",\n        webhooks: {\n          secret: \"whsec_test_secret\"\n        },\n        // Stripe options\n        apiVersion: \"2019-08-08\"\n      }\n    })\n  );\n  afterEach(PlatformTest.reset);\n  it(\"should call event\", async () => {\n    const stripe = PlatformTest.get<Stripe>(Stripe);\n    const payload = {\n      id: \"evt_test_webhook\",\n      object: \"event\"\n    };\n    const payloadString = JSON.stringify(payload, null, 2);\n\n    const header = stripe.webhooks.generateTestHeaderString({\n      payload: payloadString,\n      secret: \"whsec_test_secret\"\n    });\n\n    const event = stripe.webhooks.constructEvent(payloadString, header, secret);\n    const ctx = PlatformTest.createRequestContext();\n\n    const ctrl = await PlatformTest.invoke<StripWebhookCtrl>(StripWebhookCtrl);\n\n    const result = ctrl.successPaymentHook(event, ctx);\n\n    expect(result).toEqual({received: true});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Repository with CRUD Operations\nDESCRIPTION: Example of a repository class implementing get and save operations with Redis.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {v4} from \"uuid\";\nimport {Injectable} from \"@tsed/di\";\nimport {serialize, deserialize} from \"@tsed/json-mapper\";\nimport {REDIS_CONNECTION} from \"./RedisConnection.js\";\nimport {ClientModel} from \"./ClientModel.js\";\n\n@Injectable()\nexport class ClientRepository {\n  @Inject(REDIS_CONNECTION)\n  protected connection: REDIS_CONNECTION;\n\n  async get(id: string) {\n    const raw = await this.connection.get(\"clients:\" + id);\n\n    if (!raw) {\n      return undefined;\n    }\n\n    return deserialize(JSON.parse(raw), {type: ClientModel});\n  }\n\n  async save(client: ClientModel) {\n    client.id = client.id || v4();\n\n    this.connection.set(\"clients:\" + client.id, JSON.stringify(serialize(client)));\n\n    return client;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Stripe Webhooks with Jest\nDESCRIPTION: Unit test example for testing Stripe webhook handling in a Ts.ED controller using Jest and PlatformTest.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Stripe} from \"stripe\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {StripWebhookCtrl} from \"./StripWebhookCtrl.js\";\n\ndescribe(\"StripWebhookCtrl\", () => {\n  beforeEach(() =>\n    PlatformTest.create({\n      stripe: {\n        apiKey: \"fake_api_key\",\n        webhooks: {\n          secret: \"whsec_test_secret\"\n        },\n        // Stripe options\n        apiVersion: \"2019-08-08\"\n      }\n    })\n  );\n  afterEach(PlatformTest.reset);\n  it(\"should call event\", async () => {\n    const stripe = PlatformTest.get<Stripe>(Stripe);\n    const payload = {\n      id: \"evt_test_webhook\",\n      object: \"event\"\n    };\n    const payloadString = JSON.stringify(payload, null, 2);\n\n    const header = stripe.webhooks.generateTestHeaderString({\n      payload: payloadString,\n      secret: \"whsec_test_secret\"\n    });\n\n    const event = stripe.webhooks.constructEvent(payloadString, header, secret);\n    const ctx = PlatformTest.createRequestContext();\n\n    const ctrl = await PlatformTest.invoke<StripWebhookCtrl>(StripWebhookCtrl);\n\n    const result = ctrl.successPaymentHook(event, ctx);\n\n    expect(result).toEqual({received: true});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Log Response Function\nDESCRIPTION: Default implementation of the onLogResponse function, which logs the response details. It handles both successful and error responses.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defaultLogResponse($ctx: BaseContext) {\n  if ($ctx.response.statusCode >= 400) {\n    const error = $ctx.error as any | undefined;\n\n    $ctx.logger.error({\n      event: \"request.end\",\n      status: $ctx.response.statusCode,\n      status_code: String($ctx.response.statusCode),\n      state: \"KO\",\n      ...cleanObject({\n        error_name: error?.name || error?.code,\n        error_message: error?.message,\n        error_errors: error?.errors,\n        error_stack: error?.stack,\n        error_body: error?.body,\n        error_headers: error?.headers\n      })\n    });\n  } else {\n    $ctx.logger.info({\n      event: \"request.end\",\n      status: $ctx.response.statusCode,\n      status_code: String($ctx.response.statusCode),\n      state: \"OK\"\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED CLI with bun\nDESCRIPTION: Use bun to run the Ts.ED CLI and initialize a new project in the current directory.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbnx -p @tsed/cli tsed init .\n```\n\n----------------------------------------\n\nTITLE: Altering OIDC Configuration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to alter the OIDC provider configuration by listening to the $alterOidcConfiguration hook. It shows how to inject custom functions into the configuration for resource indicators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Module()\nclass OidcResourceIndicatorsModule {\n  @InjectContext()\n  protected $ctx: PlatformContext; // retrieve the Ts.ED context\n\n  async $alterOidcConfiguration(config: OidcSettings): Promise<OidcSettings> {\n    // example with the\n    config.features!.resourceIndicators = {\n      enabled: true,\n      defaultResource: this.defaultResource.bind(this),\n      getResourceServerInfo: this.getResourceServerInfo.bind(this),\n      useGrantedResource: this.useGrantedResource.bind(this)\n    };\n\n    return config;\n  }\n\n  protected async defaultResource(ctx: KoaContextWithOIDC): Promise<string | string[]> {\n    ///\n    return \"https://mydomain.com\";\n  }\n\n  protected async getResourceServerInfo(ctx: KoaContextWithOIDC, resourceIndicator: string, client: Client): Promise<ResourceServer> {\n    ///\n    return {};\n  }\n\n  protected async useGrantedResource(\n    ctx: KoaContextWithOIDC,\n    model: AuthorizationCode | RefreshToken | DeviceCode | BackchannelAuthenticationRequest\n  ): Promise<boolean> {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL resolver using TypeGraphQL and Ts.ED\nDESCRIPTION: TypeScript code showing how to create a GraphQL resolver for the Recipe type using TypeGraphQL decorators and Ts.ED's ResolverController.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/typegraphql/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Resolver, Query, Arg, Args, Mutation, Authorized, Ctx} from \"type-graphql\";\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Recipe} from \"../types/Recipe.js\";\nimport {RecipeService} from \"../services/RecipeService.js\";\nimport {RecipeNotFoundError} from \"../errors/RecipeNotFoundError.js\";\n\n@ResolverController(Recipe)\nexport class RecipeResolver {\n  constructor(private recipeService: RecipeService) {}\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string) {\n    const recipe = await this.recipeService.findById(id);\n    if (recipe === undefined) {\n      throw new RecipeNotFoundError(id);\n    }\n    return recipe;\n  }\n\n  @Query((returns) => [Recipe])\n  recipes(@Args() {skip, take}: RecipesArgs) {\n    return this.recipeService.findAll({skip, take});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Router Implementation in TypeScript\nDESCRIPTION: Example showing how to use PlatformRouter in a controller with the new virtual router system in Ts.ED v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformRouter} from \"@tsed/platform-router\";\nimport {Controller} from \"@tsed/di\";\n\n@Controller(\"/calendars\")\nexport class CalendarCtrl {\n  constructor(router: PlatformRouter) {\n    router.get(\"/\", this.myMethod.bind(this));\n\n    // GET raw router (Express.Router or Koa.Router)\n    console.log(router.callback()); // v7 removed\n    console.log(router.getRouter()); // removed\n    console.log(router.raw); // return PlatformRouter itself intead Express.Router\n  }\n\n  myMethod(req: any, res: any, next: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job with Custom ID in Ts.ED\nDESCRIPTION: Example of implementing the optional jobId method to define a custom job ID based on the payload.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"example-with-custom-id\")\nclass ExampleJobWithCustomId implements JobMethods {\n  public handle(payload: {num: number}) {\n    console.info(\"look at my awesome number: \", payload.num);\n  }\n\n  public jobId(payload: {num: number}): string {\n    return `very realistic job id #${payload.num}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Resolver for Recipes in TypeScript\nDESCRIPTION: This snippet defines a RecipeResolver class using TypeGraphQL decorators. It includes methods for querying all recipes and finding a recipe by ID, demonstrating the integration of a service with GraphQL resolvers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Service } from \"@tsed/di\";\nimport { ResolveProperty, Resolver, Query, Arg } from \"type-graphql\";\nimport { Recipe } from \"./Recipe\";\nimport { RecipesService } from \"./RecipesService\";\nimport { RecipeArgs } from \"./RecipeArgs\";\n\n@Service()\n@Resolver(Recipe)\nexport class RecipeResolver {\n  @Inject()\n  private recipesService: RecipesService;\n\n  @Query((returns) => [Recipe])\n  async recipes(): Promise<Recipe[]> {\n    return this.recipesService.findAll();\n  }\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string): Promise<Recipe> {\n    return this.recipesService.findById(id);\n  }\n\n  @ResolveProperty()\n  async description(@Arg(\"id\") id: string): Promise<string> {\n    const recipe = await this.recipesService.findById(id);\n    return recipe.description;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Hook Context in Ts.ED v7\nDESCRIPTION: Demonstrates the changes in using async hook context in Ts.ED v7, which is now integrated into the @tsed/di module.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n- import {Injectable, Controller} from \"@tsed/di\";\n- import {InjectContext} from \"@tsed/async-hook-context\";\n+ import {Injectable, Controller, runInContext, InjectContext} from \"@tsed/di\";\nimport {PlatformContext} from \"@tsed/common\";\n\n@Injectable()\nexport class CustomRepository {\n  @InjectContext()\n  protected $ctx?: PlatformContext;\n\n  async findById(id: string) {\n    this.ctx?.logger.info(\"Where are in the repository\");\n\n    return {\n      id,\n      headers: this.$ctx?.request.headers\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JavaScript for Swagger UI\nDESCRIPTION: Example of configuring a custom JavaScript file to be loaded with Swagger UI for customization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/swagger\"; // import swagger Ts.ED module\n\n@Configuration({\n  swagger: [\n    {\n      path: \"/api-docs\",\n      jsPath: \"/spec/main.js\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies with PlatformTest.create in Vitest\nDESCRIPTION: Example of mocking service dependencies using PlatformTest.create() in Vitest, useful for mocking dependencies for all tests or when testing code in constructors.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {describe, it, expect, beforeEach, afterEach} from \"vitest\";\nimport {PlatformTest} from \"@tsed/common\";\nimport {DbService} from \"./DbService\";\nimport {Connection} from \"./Connection\";\n\ndescribe(\"DbService\", () => {\n  let connectionFindStub: vi.Mock;\n  let connectionMock: any;\n\n  beforeEach(async () => {\n    connectionMock = {\n      find: vi.fn().mockResolvedValue([{id: \"1\"}])\n    };\n\n    await PlatformTest.create({\n      imports: [\n        {\n          token: Connection,\n          use: connectionMock\n        }\n      ]\n    });\n  });\n  afterEach(PlatformTest.reset);\n\n  describe(\"find()\", () => {\n    it(\"should call find method from the connection\", async () => {\n      // GIVEN\n      const service = PlatformTest.get(DbService);\n\n      // WHEN\n      const result = await service.find();\n\n      // THEN\n      expect(connectionMock.find).toHaveBeenCalled();\n      expect(result).toEqual([{id: \"1\"}]);\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fastify App in Ts.ED\nDESCRIPTION: This snippet illustrates how to use a custom Fastify app in Ts.ED. It uses the app server option to provide a custom Fastify application created by an external function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/fastify.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-fastify\";\nimport {FastifyPluginCallback} from \"fastify\";\nimport {createFastifyApp} from \"./app\";\n\n@Configuration({\n  fastify: {\n    app: createFastifyApp()\n  }\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Bootstrap\nDESCRIPTION: Server bootstrap configuration for local development environment.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server\";\n\nasync function bootstrap() {\n  const platform = await PlatformExpress.bootstrap(Server, {\n    httpsPort: false,\n    httpPort: process.env.PORT || 8080,\n    disableComponentsScan: true\n  });\n\n  await platform.listen();\n\n  return platform;\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values in Controller\nDESCRIPTION: Example of updating session values in a Ts.ED controller using the @Session decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/session.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams, Session} from \"@tsed/platform-params\";\nimport {Post, Returns} from \"@tsed/schema\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  @Post(\"/\")\n  updateSession(@Session() session: any) {\n    session.count = (session.count || 0) + 1;\n    return \"OK - \" + session.count;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request Context with Decorators in Ts.ED\nDESCRIPTION: Example showing how to use the Context feature with decorators to store data during a request lifecycle.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BodyParams, Context, Controller, Get, Post} from \"@tsed/common\";\nimport {useDecorators} from \"@tsed/core\";\nimport {createContext, setContext} from \"@tsed/async-hook-context\";\nimport type {RequestContext} from \"@tsed/platform-http/global\";\n\n/**\n * Create a custom context\n */\nexport interface MyContext extends RequestContext {\n  userId: string;\n}\n\n/**\n * Create a custom decorator to inject context\n */\nexport function MyContext() {\n  return useDecorators(Context(\"myContext\"));\n}\n\n/**\n * Set context in a Controller/Middleware\n */\n@Controller(\"/\")\nexport class UsersController {\n  @Post(\"/\")\n  post(@BodyParams() user: any, @Context() ctx: RequestContext) {\n    // Create a new context from existing context\n    const myContext: MyContext = {...ctx, userId: user.id};\n    setContext(\"myContext\", myContext);\n\n    return \"...\"; // do something\n  }\n\n  @Get(\"/profile\")\n  getProfile(@MyContext() context: MyContext) {\n    // get userId from context\n    const {userId} = context;\n\n    return \"...\"; // do something with userId\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Log Request\nDESCRIPTION: Demonstrates how to configure a Ts.ED server to use the new log request feature with customization options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/platform-log-request\"; // just add this line\n\n@Configuration({\n   logger: {\n      logRequest: true\n      /**\n       * A function to alter the log object before it's logged.\n       * @optional\n       */\n      // alterLog: (level, data, $ctx) => {\n      //   /// see example above\n      // },\n      /**\n       * A function to alter the log object before it's logged.\n       * @optional\n       */\n      // onLogEnd? : ($ctx: BaseContext) => void;\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Alter Log Function\nDESCRIPTION: Default implementation of the alterLog function, which modifies the log object before it's logged. It includes different levels of detail based on the log level.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function defaultAlterLog(level: string, obj: Record<string, unknown>, ctx: BaseContext) {\n  const minimalLog = {\n    method: ctx.request.method,\n    url: ctx.request.url,\n    route: ctx.request.route || ctx.request.url,\n    ...obj\n  };\n\n  if (level === \"info\") {\n    return minimalLog;\n  }\n\n  return {\n    ...minimalLog,\n    headers: ctx.request.headers,\n    body: ctx.request.body,\n    query: ctx.request.query,\n    params: ctx.request.params\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Dependencies\nDESCRIPTION: Commands to install required npm packages for Mongoose integration with Ts.ED\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save mongoose\nnpm install --save @tsed/mongoose\nnpm install --save-dev @types/mongoose\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Authorizer Handler in Ts.ED\nDESCRIPTION: This snippet demonstrates how to create a Lambda authorizer handler using Ts.ED's PlatformServerless. It sets up the necessary configuration and exports the authorizer function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@tsed/ajv\"; // enable validation\n\nimport {LambdaAuthorizerController} from \"@project/controllers/LambdaAuthorizerController.js\";\nimport {PlatformServerless} from \"@tsed/platform-serverless\";\n\n// shared configuration\nconst config = {\n  envs: process.env,\n  auth: {}\n};\n\nexport const authorizer = PlatformServerless.callback(LambdaAuthorizerController, \"authorizer\", config);\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Redis\nDESCRIPTION: Server configuration setup showing Redis and cache configuration options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-cache\";\nimport \"@tsed/ioredis\";\n\n@Configuration({\n  ioredis: [\n    {\n      name: \"default\",\n      cache: true\n    }\n  ],\n  cache: {\n    ttl: 300\n  }\n})\nclass MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.io Server in Ts.ED\nDESCRIPTION: Basic server configuration to enable Socket.io in a Ts.ED application\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/socketio\";\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  socketIO: {\n    // ... see configuration\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Koa Dependencies\nDESCRIPTION: Commands to install the required npm packages for using Koa.js with Ts.ED framework. Installs the platform package, Koa itself, and TypeScript type definitions for Koa.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-koa/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-koa koa\nnpm install --save-dev @types/koa\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI with JavaScript\nDESCRIPTION: Example of JavaScript code to customize Swagger UI configuration and instance.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(SwaggerUIBuilder.config); //Swagger-ui config\n\ndocument.addEventListener(\"swagger.init\", (evt) => {\n  console.log(SwaggerUIBuilder.ui); //Swagger-ui instance\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Caching with UseCache Decorator in TypeScript\nDESCRIPTION: Demonstrates how to conditionally cache values using the UseCache decorator with a non-nullish check. This prevents caching of null or undefined values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {PathParams} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\n\n@Controller(\"/my-path\")\nexport class MyController {\n  @Get(\"/:id\")\n  @UseCache({ttl: 500, canCache: \"non-nullish\"})\n  get(@PathParams(\"id\") id: string) {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Development Server Configuration\nDESCRIPTION: Setup for running the Ts.ED application locally using PlatformExpress for development purposes.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\nasync function bootstrap() {\n  const platform = await PlatformExpress.bootstrap(Server, {\n    httpsPort: false,\n    httpPort: process.env.PORT || 3000,\n    disableComponentsScan: true\n  });\n\n  await platform.listen();\n\n  return platform;\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Adding Mongoose Plugins\nDESCRIPTION: Example of using plugins with Mongoose models in Ts.ED\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {MongoosePlugin, Model, MongooseModel} from \"@tsed/mongoose\";\nimport * as findOrCreate from 'mongoose-findorcreate';\n\n@Model()\n@MongoosePlugin(findOrCreate)\nclass UserModel {\n  static findOrCreate(condition: InstanceType<User>):\n    Promise<{ doc: InstanceType<User>, created: boolean }>;\n}\n\n@Service()\nclass UserService {\n    constructor(@Inject(UserModel) userModel: MongooseModel<UserModel>) {\n        userModel.findOrCreate({ ... }).then(findOrCreateResult => {\n          ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Swagger Documentations\nDESCRIPTION: Example of setting up multiple swagger documentation endpoints with different versions\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/scalar/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/scalar\"; // import scalar Ts.ED module\n\n@Configuration({\n  scalar: [\n    {\n      path: \"/api-docs-v1\",\n      doc: \"api-v1\"\n    },\n    {\n      path: \"/api-docs-v2\",\n      doc: \"api-v2\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Webhooks in Ts.ED\nDESCRIPTION: Controller setup for handling Stripe webhook events using the @WebhookEvent decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {RawBodyParams, HeaderParams, Context} from \"@tsed/platform-params\";\nimport {Controller} from \"@tsed/di\";\nimport {Stripe} from \"stripe\";\n\n@Controller(\"/webhooks\")\nexport class StripWebhookCtrl {\n  @Inject()\n  protected stripe: Stripe;\n\n  @Post(\"/callback\")\n  successPaymentHook(@WebhookEvent() event: Stripe.Event, @Context() ctx: Context) {\n    ctx.logger.info({name: \"Webhook success\", event});\n\n    return {received: true};\n  }\n\n  // with custom webhook options\n  @Post(\"/callback2\")\n  successPaymentHook(@WebhookEvent({secret: \".....\"}) event: Stripe.Event, @Context() ctx: Context) {\n    ctx.logger.info({name: \"Webhook success\", event});\n\n    return {received: true};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Options in TypeScript\nDESCRIPTION: Example showing how to define and handle command-line options with flags in a Ts.ED command. Options are specified in the @Command decorator and accessed in the context object.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\n\nexport interface HelloCommandContext {\n  option1: string;\n}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {},\n  options: {\n    \"-o, --opt-1 <option1>\": {\n      type: String,\n      defaultValue: \"dev\",\n      description: \"My option\"\n    }\n  },\n  allowUnknownOption: false\n})\nexport class HelloCommand implements CommandProvider {\n  $exec(ctx: HelloCommandContext) {\n    console.log(ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated User Model with Ts.ED Decorators - TypeScript\nDESCRIPTION: Auto-generated TypeScript model class with Ts.ED decorators based on Prisma schema\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {User} from \"../client\";\nimport {Integer, Required, Property, Groups, Format, Email, Description, Allow, Enum, CollectionOf} from \"@tsed/schema\";\nimport {Role} from \"../enums\";\nimport {PostModel} from \"./PostModel\";\n\nexport class UserModel implements User {\n  @Property(Number)\n  @Integer()\n  @Required()\n  @Groups(\"!creation\")\n  id: number;\n\n  @Property(Date)\n  @Format(\"date-time\")\n  @Required()\n  createdAt: Date;\n\n  @Property(String)\n  @Required()\n  @Email()\n  @Description(\"User email. This email must be unique!\")\n  email: string;\n\n  @Property(Number)\n  @Allow(null)\n  weight: number | null;\n\n  @Property(Boolean)\n  @Allow(null)\n  is18: boolean | null;\n\n  @Property(String)\n  @Allow(null)\n  name: string | null;\n\n  @Property(Number)\n  @Integer()\n  @Allow(null)\n  successorId: number | null;\n\n  @Property(() => UserModel)\n  @Allow(null)\n  predecessor: UserModel | null;\n\n  @Required()\n  @Enum(Role)\n  role: Role;\n\n  @CollectionOf(() => PostModel)\n  @Required()\n  posts: PostModel[];\n\n  @CollectionOf(String)\n  @Required()\n  keywords: string[];\n\n  @Property(Object)\n  @Required()\n  biography: any;\n\n  @TsED.Ignore((value: any, ctx: any) => ctx.endpoint === true)\n  ignored: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Extra Options in Commands\nDESCRIPTION: Example showing how to configure a command to accept unknown options by setting allowUnknownOption to true. These options can be accessed through the rawArgs property in the context.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Command, CommandProvider, QuestionOptions} from \"@tsed/cli-core\";\n\nexport interface HelloCommandContext {\n  rawArgs: string[];\n}\n\n@Command({\n  name: \"hello-command\",\n  description: \"Command description\",\n  args: {},\n  options: {},\n  allowUnknownOption: true\n})\nexport class HelloCommand implements CommandProvider {\n  $exec(ctx: HelloCommandContext) {\n    console.log(ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OnInit Hook in a Module\nDESCRIPTION: Shows how to subscribe to the $onInit hook by implementing the OnInit interface in a Module class. This allows executing code when all tokens are resolved.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Module, OnInit} from \"@tsed/di\";\n\n@Module()\nexport class MyModule implements OnInit {\n  async $onInit(): Promise<any> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar in Ts.ED Server\nDESCRIPTION: TypeScript code snippet showing how to configure Scalar in a Ts.ED server. It sets up the path for the documentation and includes other Scalar-specific options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  scalar: [\n    {\n      path: \"/doc\",\n      specVersion: \"3.0.1\",\n      spec: {\n        info: {\n          title: \"Ts.ED API\",\n          version: \"3.0.0\"\n        }\n      },\n      options: {\n        // Scalar options\n      }\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Controller Integration with Socket Service\nDESCRIPTION: Example of injecting and using a Socket service within a controller\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {MySocketService} from \"../services/MySocketService.js\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  constructor(private mySocketService: MySocketService) {}\n\n  @Get(\"/allo\")\n  allo() {\n    this.mySocketService.helloAll();\n    return \"is sent\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger in Ts.ED Server - TypeScript Configuration\nDESCRIPTION: Server configuration for Swagger UI with multiple version support for OpenAPI 2.0 and 3.0.1\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/swagger\";\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  swagger: [\n    {\n      path: \"/v2/docs\",\n      specVersion: \"2.0\"\n    },\n    {\n      path: \"/v3/docs\",\n      specVersion: \"3.0.1\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.io Dependencies\nDESCRIPTION: Commands to install Socket.io and related dependencies using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save socket.io @types/socket.io @tsed/socketio\nnpm install --save-dev @tsed/socketio-testing\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add socket.io @types/socket.io @tsed/socketio\nyarn add --dev @tsed/socketio-testing\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add socket.io @types/socket.io @tsed/socketio\npnpm add -D @tsed/socketio-testing\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add socket.io @types/socket.io @tsed/socketio\nbun add --dev @tsed/socketio-testing\n```\n\n----------------------------------------\n\nTITLE: Prisma Data Models\nDESCRIPTION: Definition of User and Post models with their relationships in Prisma schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\nmodel User {\n  id    Int     @default(autoincrement()) @id\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n\nmodel Post {\n  id        Int      @default(autoincrement()) @id\n  title     String\n  content   String?\n  published Boolean? @default(false)\n  author    User?    @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Error Example in JSON Format\nDESCRIPTION: Sample JSON structure showing how AJV validation errors are formatted, including details about the validation failure, property path, and validation rule.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"keyword\": \"minLength\",\n    \"dataPath\": \".password\",\n    \"schemaPath\": \"#/properties/password/minLength\",\n    \"params\": {\"limit\": 6},\n    \"message\": \"should NOT be shorter than 6 characters\",\n    \"modelName\": \"User\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Configuration\nDESCRIPTION: Basic server configuration for cache implementation with memory store and default TTL.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  cache: {\n    ttl: 300, // default TTL\n    store: \"memory\",\n    prefix: \"myPrefix\" // to namespace all keys related to the cache\n    // options options depending on the choosen storage type\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Koa BodyParser in Ts.ED\nDESCRIPTION: Configuration snippet for setting up the bodyParser middleware in Koa.js through Ts.ED decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/koa.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  koa: {\n    bodyParser: {\n      // See koa-bodyparser options\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Redis Adapter for OIDC\nDESCRIPTION: TypeScript code showing the configuration of a Ts.ED server with Redis adapter for OIDC provider.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OIDCRedisAdapter, RedisAdapter} from \"@tsed/adapters-redis\";\nimport {Configuration} from \"@tsed/di\";\nimport {Accounts} from \"./services/Accounts\";\nimport {InteractionsCtrl} from \"./controllers/oidc/InteractionsCtrl\";\n\n@Configuration({\n  httpPort: 8083,\n  mount: {\n    \"/\": [InteractionsCtrl]\n  },\n  redis: [\n    {\n      name: \"default\"\n      // add redis configuration\n    }\n  ],\n  adapters: {\n    Adapter: RedisAdapter,\n    connectionName: \"default\"\n  },\n  oidc: {\n    Adapter: OIDCRedisAdapter,\n    connectionName: \"default\"\n    /// other options\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing BeforeTransactionCommit Hook\nDESCRIPTION: Example of implementing a hook that executes before transaction commit using the BeforeTransactionCommit interface.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BeforeTransactionCommit} from \"@tsed/mikro-orm\";\nimport {EntityManager} from \"@mikro-orm/core\";\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class Hooks implements BeforeTransactionCommit {\n  $beforeTransactionCommit(em: EntityManager): Promise<unknown> | unknown {\n    // Custom code executed before committing data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .swcrc for TypeScript Compilation\nDESCRIPTION: Shows the configuration for .swcrc file to compile TypeScript with appropriate settings for ESM.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceMaps\": \"inline\",\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"tsx\": true\n    },\n    \"target\": \"es2022\",\n    \"externalHelpers\": true,\n    \"keepClassNames\": true,\n    \"transform\": {\n      \"useDefineForClassFields\": false,\n      \"legacyDecorator\": true,\n      \"decoratorMetadata\": true\n    }\n  },\n  \"module\": {\n    \"type\": \"es6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AJV Validation Error Format in Ts.ED\nDESCRIPTION: Example of JSON output produced by AJV validation errors. Shows the structure of error objects with details about the validation failure.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"keyword\": \"minLength\",\n    \"dataPath\": \".password\",\n    \"schemaPath\": \"#/properties/password/minLength\",\n    \"params\": {\"limit\": 6},\n    \"message\": \"should NOT be shorter than 6 characters\",\n    \"modelName\": \"User\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with ResourceNotFoundFilter in Ts.ED\nDESCRIPTION: Server configuration code that imports and implements a custom ResourceNotFoundFilter for handling 404 errors. This snippet shows how to set up the server class with the necessary filter import.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/not-found-page.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"./filters/ResourceNotFoundFilter\"; // Importing filter with ES6 import is enough\n\n@Configuration({\n  // ...\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Multi-Cache Configuration in Ts.ED\nDESCRIPTION: Shows how to configure multiple caches in Ts.ED using the cache-manager with multiple storage options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  cache: {\n    ttl: 300, // default TTL\n    caches: [memoryCache, someOtherCache]\n    // options options depending on the choosen storage type\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with GraphQL\nDESCRIPTION: TypeScript configuration for setting up a Ts.ED server with GraphQL support. Demonstrates how to configure the GraphQL endpoint path and schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/graphql-ws/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/apollo\";\n\n@Configuration({\n  graphql: {\n    server1: {\n      path: \"/\",\n      schema: {},\n      resolvers: []\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Response Filter for JSON Content in TypeScript\nDESCRIPTION: Implementation of a response filter for the 'application/json' content type. This filter wraps the response data in an object with additional properties for errors and links.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-response-filter/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResponseFilter, ResponseFilterMethods} from \"@tsed/platform-response-filter\";\nimport {Context} from \"@tsed/platform-params\";\n\n@ResponseFilter(\"application/json\")\nexport class WrapperResponseFilter implements ResponseFilterMethods {\n  transform(data: any, ctx: Context) {\n    return {data, errors: [], links: {}};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status in Ts.ED Controller\nDESCRIPTION: Demonstrates how to change the default response status using the @Status decorator in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, Status} from \"@tsed/common\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  @Status(206)\n  get() {\n    return \"hello\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonMapper in Ts.ED Application\nDESCRIPTION: Configuration options for the JsonMapper including additionalProperties, disableUnsecureConstructor, and strictGroups settings. These control how the mapper handles data transformation and security aspects.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  jsonMapper: {\n    additionalProperties: false,\n    disableUnsecureConstructor: false,\n    strictGroups: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring an Injectable Service in TypeScript\nDESCRIPTION: Example of creating an injectable CalendarsService using the @Injectable decorator from @tsed/di.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/di/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {Calendar} from \"./models/calendar.js\";\n\n@Injectable()\nexport class CalendarsService {\n  private readonly calendars: Calendar[] = [];\n\n  create(calendar: Calendar) {\n    this.calendars.push(calendar);\n  }\n\n  findAll(): Calendar[] {\n    return this.calendars;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Context and Event Handler\nDESCRIPTION: Example showing how to access AWS Lambda context and event objects within a handler\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {QueryParams, ServerlessContext} from \"@tsed/platform-serverless\";\nimport {TimeslotsService} from \"../services/TimeslotsService\";\nimport {ServerlessContext} from \"./ServerlessContext\";\n\n@Injectable()\nexport class TimeslotsLambda {\n  get(@Context() $ctx: ServerlessContext) {\n    console.log($ctx.context);\n    console.log($ctx.event);\n    console.log($ctx.response);\n    console.log($ctx.request);\n\n    $ctx.response.setHeader(\"x-test\", \"test\");\n\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AJV with npm/yarn/pnpm/bun for Ts.ED\nDESCRIPTION: Commands to install AJV and the Ts.ED AJV integration module using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save ajv @tsed/ajv\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add ajv @tsed/ajv\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add ajv @tsed/ajv\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add ajv @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL type using TypeGraphQL decorators\nDESCRIPTION: TypeScript code demonstrating how to define a GraphQL type (Recipe) using TypeGraphQL decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/typegraphql/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ObjectType, ID, Field} from \"type-graphql\";\n\n@ObjectType()\nexport class Recipe {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({nullable: true})\n  description?: string;\n\n  @Field()\n  creationDate: Date;\n\n  @Field((type) => [String])\n  ingredients: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Custom URI Format in Ts.ED\nDESCRIPTION: Shows how to import and configure a custom URI format validator in the Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\nimport \"./formats/UriFormat.js\"; // just import the class, then Ts.ED will mount automatically the new format\n\n@Configuration({\n  ajv: {\n    // ajv options\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using MongooseService\nDESCRIPTION: Example of using MongooseService to retrieve Mongoose.Connection instances\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mongoose/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Service} from \"@tsed/di\";\nimport {MongooseService} from \"@tsed/mongoose\";\n\n@Service()\nexport class MyService {\n  constructor(mongooseService: MongooseService) {\n    mongooseService.get();\n    mongooseService.get(\"default\");\n    mongooseService.get(\"db2\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom URI Format in Server\nDESCRIPTION: Shows how to import and configure the custom URI format validator in a Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\nimport \"./formats/UriFormat\"; // just import the class, then Ts.ED will mount automatically the new format\n\n@Configuration({\n  ajv: {\n    // ajv options\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining Activities Interface\nDESCRIPTION: TypeScript interface definition for activities to ensure type safety in workflows.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUserOnboardingActivities {\n  sendVerificationEmail(email: string): Promise<void>;\n  activateUser(email: string): Promise<void>;\n  sendWelcomeEmail(email: string): Promise<void>;\n  sendFollowUpEmail(email: string): Promise<void>;\n  deleteUser(email: string): Promise<void>;\n}\n\nexport type Activities = IGreetingActivity;\n```\n\n----------------------------------------\n\nTITLE: Configuration Usage Example - TypeScript\nDESCRIPTION: Example showing the correct way to access configuration values in both v7 and v8.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\nclass MyService {\n  constructor(settings: PlatformConfiguration) {\n    console.log(settings.get<string>(\"prop\")); // Works in v7 and v8\n    console.log(settings.prop); // Works in v7 but not in v8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Engine Override Implementation\nDESCRIPTION: Demonstrates how to override an existing template engine implementation with custom functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PugEngine} from \"@tsed/engines\";\n\n@ViewEngine(\"pug\", {\n  requires: [\"pug\", \"then-pug\"] // multiple require is possible. Ts.ED will use the first module resolved from node_modules\n})\nexport class CustomePugEngine extends PugEngine {\n  protected $compile(template: string, options: any) {\n    return super.$compile(template, options);\n  }\n\n  protected async $compileFile(file: string, options: any) {\n    return super.$compileFile(file, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI with JavaScript\nDESCRIPTION: JavaScript code snippet showing how to access Swagger UI configuration and instance for customization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(SwaggerUIBuilder.config); //Swagger-ui config\n\ndocument.addEventListener(\"swagger.init\", (evt) => {\n  console.log(SwaggerUIBuilder.ui); //Swagger-ui instance\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Cron Job\nDESCRIPTION: Example of creating a job that runs on a schedule using cron pattern configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"my-cron-job\", \"default\", {\n  repeat: {\n    pattern: \"* * * * *\"\n  }\n})\nclass MyCronJob implements JobMethods {\n  public handle() {\n    console.info(\"I run every minute!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Logger Fields in Ts.ED\nDESCRIPTION: Demonstrates how to configure the displayed fields for request logging in the server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  logger: {\n    requestFields: [\"reqId\", \"method\", \"url\", \"headers\", \"body\", \"query\", \"params\", \"duration\"]\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Creating Joi Schema Decorator in Ts.ED\nDESCRIPTION: Demonstrates how to create a custom decorator to store Joi schemas for parameters in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {UseParam} from \"@tsed/common\";\nimport {JoiValidationPipe} from \"./joi-validation.pipe\";\nimport Joi from \"joi\";\n\nexport function JoiSchema(schema: Joi.Schema) {\n  return UseParam(JoiValidationPipe, schema);\n}\n```\n\n----------------------------------------\n\nTITLE: SymbolMapper Implementation for Symbol Conversion\nDESCRIPTION: The implementation of SymbolMapper that handles conversion between Strings and Symbols during serialization and deserialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonMapper} from \"../decorators/jsonMapper\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\n@JsonMapper([Symbol] as any[])\nexport class SymbolMapper implements JsonMapperMethods {\n  deserialize<T>(obj: any, targetType: T): any {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    return Symbol(String(obj));\n  }\n\n  serialize(object: any): any {\n    return String(object).replace(/^Symbol\\((.*)\\)$/, \"$1\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Component Decorator Example\nDESCRIPTION: Shows how to use the Component decorator to add custom Formio metadata to a property.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Form, Component} from \"@tsed/schema-formio\";\n\n@Form()\nexport class Model {\n  @Component({\n    tooltip: \"MyTooltip\"\n  })\n  tags: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Context Injection in Resolver\nDESCRIPTION: Examples of injecting Ts.ED context in resolvers using different approaches.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, InjectContext} from \"@tsed/di\";\nimport {PLatformContext} from \"@tsed/platform-http\";\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Arg, Args, Query} from \"type-graphql\";\nimport {Recipe} from \"../types/Recipe\";\n\n@ResolverController(Recipe)\nexport class RecipeResolver {\n  @InjectContext()\n  private $ctx: PLatformContext;\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string) {\n    this.$ctx.logger.info(\"Hello world\");\n    console.log(this.$ctx.request.headers);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Arg, Ctx, Query} from \"type-graphql\";\nimport {Recipe} from \"../types/Recipe\";\n\n@ResolverController(Recipe)\nexport class RecipeResolver {\n  @InjectContext()\n  private $ctx: Context;\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string, @Ctx(\"req.$ctx\") $ctx: PlatformContext) {\n    $ctx.logger.info(\"Hello world\");\n    console.log($ctx.request.headers);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Swagger Documentations\nDESCRIPTION: Example of setting up multiple Swagger documentations in Ts.ED, each with different paths and document keys.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  swagger: [\n    {\n      path: \"/api-docs\",\n      specVersion: \"3.0.1\",\n      spec: {\n        components: {\n          securitySchemes: {\n            bearer: {\n              type: \"http\",\n              scheme: \"bearer\"\n            }\n          }\n        }\n      },\n      doc: \"api-v1\"\n    },\n    {\n      path: \"/api-docs-v2\",\n      specVersion: \"3.0.1\",\n      doc: \"api-v2\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recipe Resolver\nDESCRIPTION: GraphQL resolver implementation for Recipe queries with Ts.ED dependency injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject} from \"@tsed/di\";\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Arg, Args, Query} from \"type-graphql\";\nimport {RecipeNotFoundError} from \"../errors/RecipeNotFoundError\";\nimport {RecipesService} from \"../services/RecipesService\";\nimport {Recipe} from \"../types/Recipe\";\nimport {RecipesArgs} from \"../types/RecipesArgs\";\n\n@ResolverController(Recipe)\nexport class RecipeResolver {\n  @Inject()\n  private recipesService: RecipesService;\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string) {\n    const recipe = await this.recipesService.findById(id);\n    if (recipe === undefined) {\n      throw new RecipeNotFoundError(id);\n    }\n    return recipe;\n  }\n\n  @Query((returns) => [Recipe])\n  recipes(@Args() {skip, take}: RecipesArgs) {\n    return this.recipesService.findAll({skip, take});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lambda Handler Configuration\nDESCRIPTION: AWS Lambda handler setup using PlatformServerlessHttp.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerlessHttp} from \"@tsed/platform-serverless-http\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server\";\n\nconst platform = PlatformServerlessHttp.bootstrap(Server, {\n  adapter: PlatformExpress\n});\n\nexport const handler = platform.handler();\n```\n\n----------------------------------------\n\nTITLE: Installing Template Engine Packages (NPM)\nDESCRIPTION: Examples of npm install commands for various template engines supported by @tsed/engines. These commands demonstrate how to install specific template engine packages using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install atpl\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install bracket-template\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dot\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dustjs-helpers\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dustjs-linkedin\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ect\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ejs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hamlet\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hamljs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install haml-coffee\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install handlebars\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hogan.js\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install htmling\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install jazz\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install just\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install liquor\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lodash\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install marko\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mote\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mustache\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nunjucks\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install plates\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pug\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ractive\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install slm\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install squirrelly\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install swig-templates\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install teacup\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install templayed\n```\n\n----------------------------------------\n\nTITLE: Declaring Lazy Injectable Provider with Decorators in Ts.ED\nDESCRIPTION: Example showing how to create a custom lazy injectable provider using the Injectable decorator with a default export. This allows the service to be lazy-loaded by other components.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inject, Injectable } from \"@tsed/di\";\n\n@Injectable()\nexport default class MyLazyService {\n  test() {\n    console.log(\"MyLazyService\");\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Swagger Documentations\nDESCRIPTION: Example of setting up multiple Swagger documentations with different paths and doc options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/swagger\"; // import swagger Ts.ED module\n\n@Configuration({\n  swagger: [\n    {\n      path: \"/api-docs-v1\",\n      doc: \"api-v1\"\n    },\n    {\n      path: \"/api-docs-v2\",\n      doc: \"api-v2\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Integrating Agendash with Ts.ED\nDESCRIPTION: TypeScript code to create an AgendashModule that exposes the Agendash dashboard as middleware in a Ts.ED application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterRoutesInit, PlatformApplication} from \"@tsed/platform-http\";\nimport {Configuration, Inject, Module} from \"@tsed/di\";\nimport {Agenda} from \"agenda\";\n\nconst Agendash = require(\"agendash\");\n\n@Module()\nexport class AgendashModule implements AfterRoutesInit {\n  @Configuration()\n  config: Configuration;\n\n  @Inject()\n  agenda: Agenda;\n\n  @Inject()\n  app: PlatformApplication;\n\n  $afterRoutesInit() {\n    if (this.config.agenda?.enabled) {\n      this.app.use(\"/agendash\", Agendash(this.agenda));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework Configuration\nDESCRIPTION: YAML configuration for Serverless framework defining AWS Lambda functions and HTTP endpoints\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: timeslots\n\nframeworkVersion: \"3.21.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  lambdaHashingVersion: \"20201221\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  timeslots:\n    handler: dist/handler.getTimeslots\n    events:\n      - http:\n          path: /timeslots\n          method: get\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Interface\nDESCRIPTION: TypeScript interface definition for activity types used in workflows\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IUserOnboardingActivities {\n  sendVerificationEmail(email: string): Promise<void>;\n  activateUser(email: string): Promise<void>;\n  sendWelcomeEmail(email: string): Promise<void>;\n  sendFollowUpEmail(email: string): Promise<void>;\n  deleteUser(email: string): Promise<void>;\n}\n\nexport type Activities = IGreetingActivity;\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Handlers for Same Route in Express.js\nDESCRIPTION: Demonstrates how to register multiple handlers for the same route in Express.js, which is no longer supported in Ts.ED v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\"/mypath\", myHandler1);\napp.get(\"/mypath\", myHandler2);\n```\n\n----------------------------------------\n\nTITLE: Integrating Agendash with Ts.ED\nDESCRIPTION: Demonstrates how to set up Agendash, a dashboard for Agenda, as a middleware in a Ts.ED application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterRoutesInit, PlatformApplication} from \"@tsed/platform-http\";\nimport {Inject, Configuration, Module} from \"@tsed/di\";\nimport {Agenda} from \"agenda\";\n\nconst Agendash = require(\"agendash\");\n\n@Module()\nexport class AgendashModule implements AfterRoutesInit {\n  @Configuration()\n  config: Configuration;\n\n  @Inject()\n  agenda: Agenda;\n\n  @Inject()\n  app: PlatformApplication;\n\n  $afterRoutesInit() {\n    if (this.config.agenda?.enabled) {\n      this.app.use(\"/agendash\", Agendash(this.agenda));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mongoose Cache Store Configuration\nDESCRIPTION: Configuration example using mongoose as cache store with custom model options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport mongoose from \"mongoose\";\n\nconst mongooseStore = require(\"cache-manager-mongoose\");\n\n@Configuration({\n  cache: {\n    ttl: 300, // default TTL\n    store: mongooseStore,\n    mongoose,\n    modelOptions: {\n      collection: \"caches\",\n      versionKey: false\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Client - Bash Command\nDESCRIPTION: Command to install Prisma Client package using npm\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @prisma/client\n```\n\n----------------------------------------\n\nTITLE: Declaring Lazy Injectable Provider with Functional API in Ts.ED\nDESCRIPTION: Example showing how to create a custom lazy injectable provider using the functional API with a default export. This provides the same lazy-loading capability as the decorator approach.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createProvider } from \"@tsed/di\";\n\nexport default createProvider({\n  name: \"MyLazyService\",\n  useValue: {\n    test() {\n      console.log(\"MyLazyService\");\n    }\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket Service with Namespace\nDESCRIPTION: Example of a Socket service implementation with namespace configuration and lifecycle hooks\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as SocketIO from \"socket.io\";\nimport {SocketService, IO, Nsp, Socket, SocketSession} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Nsp nsp: SocketIO.Namespace;\n\n  @Nsp(\"/my-other-namespace\")\n  nspOther: SocketIO.Namespace;\n\n  constructor(@IO private io: SocketIO.Server) {}\n\n  $onNamespaceInit(nsp: SocketIO.Namespace) {}\n\n  $onConnection(@Socket socket: SocketIO.Socket, @SocketSession session: SocketSession) {}\n\n  $onDisconnect(@Socket socket: SocketIO.Socket) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Source\nDESCRIPTION: Implementation of Apollo Data Source with Ts.ED integration for user data fetching.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DataSource} from \"@tsed/typegraphql\";\nimport {RESTDataSource} from \"@apollo/datasource-rest\";\nimport {User} from \"../models/User\";\nimport {DataSource, InjectApolloContext, ApolloContext, InjectApolloContext} from \"@tsed/apollo\";\nimport {Constant, Opts} from \"@tsed/di\";\nimport {RESTDataSource} from \"@apollo/datasource-rest\";\n\n@DataSource()\nexport class UserDataSource extends RESTDataSource {\n  @InjectContext()\n  protected $ctx: PlatformContext;\n\n  @Constant(\"envs.USERS_URL\", \"https://myapi.com/api/users\")\n  protected baseURL: string;\n\n  @InjectApolloContext()\n  protected context: CustomApolloContext;\n\n  constructor(server: ApolloServer, logger: Logger) {\n    super({\n      logger,\n      cache: server.cache\n    });\n  }\n\n  willSendRequest(path, request) {\n    request.headers[\"authorization\"] = this.context.token;\n  }\n\n  getUserById(id: string) {\n    return this.get(`/${id}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Response in Ts.ED Lambda Function\nDESCRIPTION: This snippet shows how to implement a stream response in a Ts.ED Lambda function. It demonstrates configuring a controller method to return a binary stream response using the Readable.from() method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {BodyParams} from \"@tsed/platform-params\";\nimport {ServerlessContext} from \"@tsed/platform-serverless\";\n\n@Controller()\nclass StreamLambda {\n  @Post(\"/scenario-1/:id\")\n  @(Returns(200, String).Binary())\n  scenario1(@BodyParams(\"id\") id: string) {\n    return Readable.from(\n      Buffer.from(\n        JSON.stringify({\n          id: \"HELLO\"\n        })\n      )\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Hooks in TypeScript\nDESCRIPTION: Implementation of before and after transaction commit hooks for customizing transaction behavior in MikroORM.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {BeforeTransactionCommit} from \"@tsed/mikro-orm\";\nimport {EntityManager} from \"@mikro-orm/core\";\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class Hooks implements BeforeTransactionCommit {\n  $beforeTransactionCommit(em: EntityManager): Promise<unknown> | unknown {\n    // Custom code executed before committing data\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterTransactionCommit} from \"@tsed/mikro-orm\";\nimport {EntityManager} from \"@mikro-orm/core\";\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class Hooks implements AfterTransactionCommit {\n  $afterTransactionCommit(em: EntityManager): Promise<unknown> | unknown {\n    // Custom code executed after committing data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Job Processors in Ts.ED\nDESCRIPTION: Demonstrates how to manually define job processors in Ts.ED, including fetching data and dynamically building job names and options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Agenda, AgendaModule, Define} from \"@tsed/agenda\";\n\n@Agenda({namespace: \"email\"})\nexport class EmailJobService {\n  @Inject()\n  agenda: AgendaModule;\n\n  @Inject()\n  httpClient: HttpClient;\n\n  cache: Map<string, Job[]> = new Map();\n\n  @Define({\n    name: \"sendWelcomeEmail\",\n    concurrency: 3\n    /*  ... and any option you would normally pass to agenda.define(...) */\n  })\n  async sendWelcomeEmail(job: Job) {\n    // implement something here\n    console.log(job.attrs.data.locale);\n  }\n\n  async $beforeAgendaStart() {\n    const locales = await this.httpClient.get(\"/locales\");\n\n    this.cache.set(\n      \"sendWelcomeEmail\",\n      locales.map((locale) => {\n        return this.agenda.create(\"email.sendWelcomeEmail\", {locale});\n      })\n    );\n  }\n\n  async $afterAgendaStart() {\n    const jobs = this.cache.get(\"sendWelcomeEmail\");\n\n    await Promise.all(jobs.map((job) => job.repeatEvery(\"1 week\").save()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Middleware Implementation\nDESCRIPTION: Implementation of Socket middleware for user conversion and error handling\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {SocketMiddleware, Args} from \"@tsed/socketio\";\nimport {User} from \"../models/User.js\";\n\n@SocketMiddleware()\nexport class UserConverterSocketMiddleware {\n  async use(@Args() args: any[]) {\n    let [user] = args;\n    user = deserialize(user, {type: User});\n    return [user];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Integration with Template Engines\nDESCRIPTION: Shows how to integrate template engines with Express framework including route handling and view rendering.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport {getEngine} from \"@tsed/engines\";\n\n// assign the swig engine to .html files\napp.engine(\"html\", getEngine(\"swig\"));\n\n// set .html as the default extension\napp.set(\"view engine\", \"html\");\napp.set(\"views\", __dirname + \"/views\");\n\nvar users = [];\nusers.push({name: \"tobi\"});\nusers.push({name: \"loki\"});\nusers.push({name: \"jane\"});\n\napp.get(\"/\", function (req, res) {\n  res.render(\"index\", {\n    title: \"Ts.ED EnginesContainer\"\n  });\n});\n\napp.get(\"/users\", function (req, res) {\n  res.render(\"users\", {\n    title: \"Users\",\n    users: users\n  });\n});\n\napp.listen(3000);\nconsole.log(\"Express server listening on port 3000\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-loading with Functional API in Ts.ED\nDESCRIPTION: Example demonstrating how to use lazy injection with the functional API. This approach provides the same on-demand loading benefits as the decorator approach but uses a different syntax.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createModule, useLazyInject } from \"@tsed/di\";\n\nexport const MyModule = createModule({\n  name: \"myModule\",\n  imports: [],\n  providers: [\n    {\n      token: \"MY_SERVICE\",\n      useFactory() {\n        // lazy-load the PlatformExceptions\n        const [exception] = useLazyInject([\"@tsed/platform-exceptions:PlatformExceptions\"]);\n\n        return {\n          method() {\n            // exception is instantiated only when the code reaches this line\n            throw exception().badRequest(\"message\");\n          }\n        };\n      }\n    }\n  ]\n});\n\n```\n\n----------------------------------------\n\nTITLE: Multi-Documentation Configuration - TypeScript Server Setup\nDESCRIPTION: Configuration example showing how to set up multiple API documentation versions\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/swagger\";\n\n@Configuration({\n  swagger: [\n    {\n      path: \"/api-docs-v1\",\n      doc: \"api-v1\"\n    },\n    {\n      path: \"/api-docs-v2\",\n      doc: \"api-v2\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for ESM in TypeScript\nDESCRIPTION: Demonstrates the necessary changes in tsconfig.json to use ESM in a TypeScript project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MikroORM Integration with TestContainers Mongo\nDESCRIPTION: Example of configuring MikroORM with TestContainers Mongo connection options\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/testcontainers-mongo/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EntityManager, MikroORM} from \"@mikro-orm/core\";\nimport {defineConfig} from \"@mikro-orm/mongodb\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {TestContainersMongo} from \"@tsed/testcontainers-mongo\";\n\nbeforeEach(async () => {\n  const mongoSettings = TestContainersMongo.getMongoConnectionOptions();\n  const bstrp = PlatformTest.bootstrap(Server, {\n    disableComponentScan: true,\n    imports: [MikroOrmModule],\n    mikroOrm: [\n      defineConfig({\n        clientUrl: mongoSettings.url,\n        driverOptions: mongoSettings.connectionOptions,\n        entities: [User],\n        subscribers: [UnmanagedEventSubscriber1, new UnmanagedEventSubscriber2()]\n      })\n    ]\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Exceptions Package\nDESCRIPTION: Commands to install the @tsed/exceptions package using different package managers (npm, yarn, pnpm, bun).\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/exceptions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/exceptions\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tsed/exceptions\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tsed/exceptions\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/exceptions\n```\n\n----------------------------------------\n\nTITLE: Using ConverterService in Ts.ED v6\nDESCRIPTION: Shows how to use the ConverterService for serialization and deserialization in Ts.ED v6, which is deprecated in v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ConverterService} from \"@tsed/common\";\nimport {Inject, Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass MyClass {\n  @Inject()\n  mapper: ConverterService;\n\n  doSomething1(client: Client): any {\n    return this.mapper.serialize(client, {type: Client});\n  }\n\n  doSomething2(client: any): Client {\n    return this.mapper.deserialize(client, {type: Client});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Stripe in a Service\nDESCRIPTION: Example of injecting and using the Stripe instance in a Ts.ED service class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nclass MyStripeService {\n  @Inject()\n  stripe: Stripe;\n\n  $onInit() {\n    // do something with stripe\n    this.stripe.on(\"request\", this.onRequest.bind(this));\n  }\n\n  protected onRequest(request: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Integration\nDESCRIPTION: Unit tests for Redis integration using IORedisTest utility\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ClientRepository} from \"./ClientRepository\";\nimport {REDIS_CONNECTION} from \"./RedisConnection\";\nimport {ClientModel} from \"./ClientModel\";\n\ndescribe(\"IORedisTest\", () => {\n  beforeEach(() => IORedisTest.create());\n  afterEach(() => IORedisTest.reset());\n\n  it(\"should return nothing\", async () => {\n    const service = IORedisTest.get<MyRepository>(MyRepository);\n\n    const client = await service.get(\"uid\");\n\n    expect(client).toEqual(undefined);\n  });\n\n  it(\"should return all keys\", async () => {\n    const service = IORedisTest.get<MyRepository>(MyRepository);\n    const client = new ClientModel();\n    client.name = \"name\";\n\n    const newClient = await service.save(client);\n\n    expect(newClient.id).toBeInstanceOf(String);\n    expect(newClient.name).toEqual(\"name\");\n\n    const clientFound = await service.get(newClient.id);\n\n    expect(clientFound).toBeInstanceOf(ClientModel);\n    expect(clientFound.id).toEqual(newClient.id);\n    expect(clientFound.name).toEqual(\"name\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Ts.ED Ajv module in Server configuration\nDESCRIPTION: TypeScript code to import and configure the Ts.ED Ajv module in the server setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/ajv/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Log Request Module\nDESCRIPTION: Example of configuring a Ts.ED server with the platform-log-request module. It shows how to import the module and set optional configuration options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-log-request\";\nimport {levels} from \"@tsed/logger\";\n\n@Configuration({\n  /**\n   * Log all incoming request. By default, is true and print the configured `logger.requestFields`.\n   * @optional\n   */\n  // logRequest: true,\n  /**\n   * A function to alter the log object before it's logged.\n   * @optional\n   */\n  // alterLog: (level, data, $ctx) => {\n  //   /// see example above\n  // },\n  /**\n   * A function to alter the log object before it's logged.\n   * @optional\n   */\n  // onLogEnd? : ($ctx: BaseContext) => void;\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Generating JWKS Keys in TypeScript\nDESCRIPTION: Examples of generating JWKS keys directly or creating a keys.json file. Shows two methods: generating only JWKS and creating a keys file at a specified path.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/jwks/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {generateJwks} from \"./getJwks.js\";\n\n// Generate only jwks\nconst jwks = generateJwks();\n\n// Create keys.json file if not exists\nconst jwks = getJwks({\n  path: \"path/to/keys.json\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ESM in Node.js\nDESCRIPTION: Shows how to set the type field in package.json to enable ESM for a Node.js project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Ports in Ts.ED Server\nDESCRIPTION: Demonstrates how to configure random port assignment using string format with IP addresses.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: \"127.0.0.1:0\",\n  httpsPort: \"127.0.0.2:0\"\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Express.js Static File Configuration Options in Ts.ED\nDESCRIPTION: Definition of the Express.js-specific options for static file serving in Ts.ED. Includes caching, etag, dotfiles, and other Express-specific configuration parameters.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Express from \"express\";\n\nexport interface PlatformExpressStaticsOptions {\n  /**\n   * Enable or disable setting Cache-Control response header, defaults to true.\n   * Disabling this will ignore the immutable and maxAge options.\n   */\n  cacheControl?: boolean;\n  /**\n   * Set how \"dotfiles\" are treated when encountered. A dotfile is a file or directory that begins with a dot (\".\").\n   * Note this check is done on the path itself without checking if the path actually exists on the disk.\n   * If root is specified, only the dotfiles above the root are checked (i.e. the root itself can be within a dotfile when when set to \"deny\").\n   * The default value is 'ignore'.\n   * 'allow' No special treatment for dotfiles\n   * 'deny' Send a 403 for any request for a dotfile\n   * 'ignore' Pretend like the dotfile does not exist and call next()\n   */\n  dotfiles?: string;\n  /**\n   * Enable or disable etag generation, defaults to true.\n   */\n  etag?: boolean;\n  /**\n   * Set file extension fallbacks. When set, if a file is not found, the given extensions will be added to the file name and search for.\n   * The first that exists will be served. Example: ['html', 'htm'].\n   * The default value is false.\n   */\n  extensions?: string[] | false;\n  /**\n   * Let client errors fall-through as unhandled requests, otherwise forward a client error.\n   * The default value is true.\n   */\n  fallthrough?: boolean;\n  /**\n   * Enable or disable the immutable directive in the Cache-Control response header.\n   * If enabled, the maxAge option should also be specified to enable caching. The immutable directive will prevent supported clients from making conditional requests during the life of the maxAge option to check if the file has changed.\n   */\n  immutable?: boolean;\n  /**\n   * By default this module will send \"index.html\" files in response to a request on a directory.\n   * To disable this set false or to supply a new index pass a string or an array in preferred order.\n   */\n  index?: boolean | string | string[];\n  /**\n   * Enable or disable Last-Modified header, defaults to true. Uses the file system's last modified value.\n   */\n  lastModified?: boolean;\n  /**\n   * Provide a max-age in milliseconds for http caching, defaults to 0. This can also be a string accepted by the ms module.\n   */\n  maxAge?: number | string;\n  /**\n   * Redirect to trailing \"/\" when the pathname is a dir. Defaults to true.\n   */\n  redirect?: boolean;\n  /**\n   * Function to set custom headers on response. Alterations to the headers need to occur synchronously.\n   * The function is called as fn(res, path, stat), where the arguments are:\n   * res the response object\n   * path the file path that is being sent\n   * stat the stat object of the file that is being sent\n   */\n  setHeaders?: (res: Express.Response, path: string, stat: any) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Framework Configuration\nDESCRIPTION: YAML configuration for serverless framework defining AWS Lambda function settings and HTTP event triggers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice: timeslots\n\nframeworkVersion: \"2\"\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  lambdaHashingVersion: \"20201221\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  any:\n    handler: dist/handler.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: \"{proxy+}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Accounts Service for OIDC Provider\nDESCRIPTION: TypeScript code for the Accounts service, which manages account creation and retrieval for the OIDC provider.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Inject, Injectable} from \"@tsed/di\";\nimport {Adapter} from \"@tsed/adapters\";\nimport {OnInit} from \"@tsed/components\";\nimport {Account} from \"../models/Account\";\n\n@Injectable()\nexport class Accounts implements OnInit {\n  @Inject()\n  protected adapter: Adapter;\n\n  async $onInit() {\n    await this.adapter.create(\"accounts\", {\n      id: \"1\",\n      email: \"test@test.com\",\n      email_verified: true\n    });\n  }\n\n  async findAccount(id: string, token: any): Promise<Account | undefined> {\n    const account = await this.adapter.findById(\"accounts\", id);\n\n    if (!account) {\n      return undefined;\n    }\n\n    return new Account(account);\n  }\n\n  async createAccount(account: Account): Promise<Account> {\n    const item = await this.adapter.create(\"accounts\", account);\n\n    return new Account(item);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Error Middleware Implementation\nDESCRIPTION: Implementation of error handling middleware for Socket.io\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketMiddlewareError, SocketErr, Socket} from \"@tsed/socketio\";\n\n@SocketMiddlewareError()\nexport class ErrorHandlerSocketMiddleware {\n  async use(@SocketErr err: any, @Socket socket: SocketIO.Socket) {\n    console.error(err);\n    socket.emit(\"error\", {message: \"An error has occured\"});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model for Scalar Documentation\nDESCRIPTION: Example of defining a model using decorators for Scalar documentation, including property descriptions and validations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Generics(\"T\")\nexport class Product<T extends string> {\n  @Property()\n  id: string;\n\n  @Property()\n  @Description(\"Product title\")\n  title: string;\n\n  @Property()\n  @Description(\"Product description\")\n  description: string;\n\n  @Property()\n  @Description(\"Product category\")\n  category: T;\n\n  @CollectionOf(String)\n  @Description(\"List of tags\")\n  tags: string[];\n\n  @Property()\n  @Minimum(0)\n  @Maximum(100)\n  @Description(\"Product stock\")\n  stock: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Data Source\nDESCRIPTION: TypeScript code showing how to create a custom data source for GraphQL using Ts.ED's DataSourceService decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DataSourceService} from \"@tsed/typegraphql\";\nimport {RESTDataSource} from \"apollo-datasource-rest\";\n\n@DataSourceService()\nexport class MyCustomAPI extends RESTDataSource {\n  constructor() {\n    super();\n    this.baseURL = \"https://api.spacex.land/graphql/\";\n  }\n\n  async getAllUsers() {\n    return this.get(\"users\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cluster\nDESCRIPTION: Configuration example for Redis cluster setup with detailed options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/platform-cache\";\nimport \"@tsed/ioredis\";\n\n@Configuration({\n  ioredis: [\n    {\n      name: \"default\",\n      cache: true,\n      nodes: [\"...\"],\n      scaleReads: \"all\",\n      maxRedirections: 16,\n      retryDelayOnTryAgain: 100,\n      retryDelayOnFailover: 200,\n      retryDelayOnClusterDown: 1000,\n      slotsRefreshTimeout: 15000,\n      slotsRefreshInterval: 20000,\n      enableOfflineQueue: true,\n      enableReadyCheck: true,\n      redisOptions: {\n        noDelay: true,\n        connectTimeout: 15000,\n        autoResendUnfulfilledCommands: true,\n        maxRetriesPerRequest: 5,\n        enableAutoPipelining: true,\n        autoPipeliningIgnoredCommands: [\"scan\"]\n      }\n    }\n  ],\n  cache: {\n    ttl: 300\n  }\n})\nclass MyModule {}\n```\n\n----------------------------------------\n\nTITLE: Handling Modules without ESM Named Imports in TypeScript\nDESCRIPTION: Shows how to handle modules that don't support ESM named imports, using fs-extra as an example.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from \"fs-extra\";\n\nfs.readFile();\n```\n\n----------------------------------------\n\nTITLE: Dependency Management Example\nDESCRIPTION: JSON configuration showing how to properly manage Ts.ED package dependencies by keeping consistent versions across all @tsed packages to prevent version incompatibility issues.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tsed/platform-http\": \"8.0.0\",\n    \"@tsed/di\": \"8.0.0\",\n    \"@tsed/core\": \"8.0.0\",\n    \"@tsed/exceptions\": \"8.0.0\",\n    \"@tsed/platform-express\": \"8.0.0\",\n    \"@tsed/swagger\": \"8.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Dependencies with Package Managers\nDESCRIPTION: Commands to install required dependencies for serverless deployment using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tsed/platform-serverless-http serverless-http serverless-offline\nnpm install --save-dev @types/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Model with Missing Properties Example\nDESCRIPTION: Demonstrates how JsonMapper follows the JsonSchema generated by @tsed/schema, meaning undecorated properties won't appear in transformed objects.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass User {\n  @Property()\n  id: string;\n\n  firstName: string; // not decorated\n\n  @Property()\n  lastName: string;\n\n  // will be ignored during serialization/deserialization\n  password: string; // not decorated\n}\n```\n\n----------------------------------------\n\nTITLE: Custom View Engine Implementation TypeScript\nDESCRIPTION: Example demonstrating how to create a custom view engine using the new @tsed/engines package.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Engine, ViewEngine} from \"@tsed/engines\";\n\n@ViewEngine(\"pug\", {\n  requires: [\"pug\", \"then-pug\"] // multiple require is possible. Ts.ED will use the first module resolved from node_modules\n})\nexport class PugEngine extends Engine {\n  protected $compile(template: string, options: any) {\n    return this.engine.compile(template, options);\n  }\n\n  protected async $compileFile(file: string, options: any) {\n    return this.engine.compileFile(file, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nodemon.json for TypeScript ESM Development\nDESCRIPTION: Provides the configuration for nodemon.json to support TypeScript ESM development.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensions\": [\"ts\"],\n  \"watch\": [\"src\"],\n  \"ignore\": [\"**/*.spec.ts\"],\n  \"delay\": 100,\n  \"execMap\": {\n    \"ts\": \"node --import @swc-node/register/esm-register\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Body in Ts.ED\nDESCRIPTION: Shows how to access the raw request body using the @RawBodyParams decorator in Ts.ED controllers, which provides direct access to request.rawBody without validation or deserialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Post} from \"@tsed/schema\";\nimport {RawBodyParams} from \"@tsed/platform-params\";\n\n@Controller(\"/\")\nclass MyController {\n  @Post(\"/\")\n  post(@RawBodyParams() payload: string) {\n    return {payload};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Strategy in Original Passport.js\nDESCRIPTION: JavaScript code showing the configuration of JWT strategy in original Passport.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/tutorials/snippets/passport/OriginalJwtPassport.js\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Mapper in Server Configuration\nDESCRIPTION: This snippet demonstrates how to import a custom type mapper in the server configuration file.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\nimport \"./mappers/TheTypeMapper\";\n\n@Configuration({\n  mount: {\n    \"/rest\": []\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: SWC Configuration - JSON\nDESCRIPTION: Required SWC configuration settings for Ts.ED v8 compatibility.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sourceMaps\": \"inline\",\n  \"jsc\": {\n    \"parser\": {\n      \"syntax\": \"typescript\",\n      \"tsx\": true\n    },\n    \"target\": \"es2022\",\n    \"externalHelpers\": true,\n    \"keepClassNames\": true,\n    \"transform\": {\n      \"useDefineForClassFields\": false,\n      \"legacyDecorator\": true,\n      \"decoratorMetadata\": true\n    }\n  },\n  \"module\": {\n    \"type\": \"es6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Koa.js Static File Configuration Options in Ts.ED\nDESCRIPTION: Definition of the Koa.js-specific options for static file serving in Ts.ED. Includes caching, compression, and other Koa-specific configuration parameters.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KoaStaticsOptions {\n  /** Browser cache max-age in milliseconds. (defaults to 0) */\n  maxage?: number;\n  maxAge?: SendOptions[\"maxage\"];\n  /** Tell the browser the resource is immutable and can be cached indefinitely. (defaults to false) */\n  immutable?: boolean;\n  /** Allow transfer of hidden files. (defaults to false) */\n  hidden?: boolean;\n  /** Root directory to restrict file access. (defaults to '') */\n  root?: string;\n  /** Name of the index file to serve automatically when visiting the root location. (defaults to none) */\n  index?: string | false;\n  /** Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with .gz extension exists. (defaults to true). */\n  gzip?: boolean;\n  /** Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with .br extension exists. (defaults to true). */\n  brotli?: boolean;\n  /** If not false (defaults to true), format the path to serve static file servers and not require a trailing slash for directories, so that you can do both /directory and /directory/. */\n  format?: boolean;\n  /** Function to set custom headers on response. */\n  setHeaders?: SetHeaders;\n  /** Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served. (defaults to false) */\n  extensions?: string[] | false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Job Controller\nDESCRIPTION: Example of creating a basic job controller using the @JobController decorator with default queue settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/bullmq/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JobController, JobMethods} from \"@tsed/bullmq\";\n\n@JobController(\"example\")\nclass ExampleJob implements JobMethods {\n  public handle(payload: {msg: string}) {\n    console.info(\"New message incoming\", payload.msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom AJV Keyword with Native AJV API\nDESCRIPTION: Native AJV example of the 'even' validator for reference, showing how to implement the same functionality using AJV's direct API without Ts.ED decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport ajv, {_, KeywordCxt} from \"ajv\";\n\najv.addKeyword({\n  keyword: \"even\",\n  type: \"number\",\n  schemaType: \"boolean\",\n  // $data: true // to support [$data reference](./validation.html#data-reference), ...\n  code(cxt: KeywordCxt) {\n    const {data, schema} = cxt;\n    const op = schema ? _`!==` : _`===`;\n    cxt.fail(_`${data} %2 ${op} 0`); // ... the only code change needed is to use `cxt.fail$data` here\n  }\n});\n\nconst schema = {even: true};\nconst validate = ajv.compile(schema);\nconsole.log(validate(2)); // true\nconsole.log(validate(3)); // false\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex in Ts.ED Server\nDESCRIPTION: Example of adding Knex configuration to a Ts.ED server setup, using SQLite as the database.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Server} from \"@tsed/platform-http\";\nimport \"@tsed/objection\"; // don't forget to add this line!\n\n@Configuration({\n  // ...\n  knex: {\n    client: \"sqlite3\",\n    connection: \":memory:\"\n  }\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Stripe Webhooks with SuperTest\nDESCRIPTION: Integration test example using SuperTest to verify Stripe webhook handling in a Ts.ED application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {PlatformTestUtils} from \"@tsed/platform-test-utils\";\nimport {expect} from \"chai\";\nimport {Stripe} from \"stripe\";\nimport SuperTest from \"supertest\";\nimport {StripeWebhooksCtrl} from \"./StripWebhookCtrl\";\nimport {rootDir, Server} from \"../Server\";\n\nconst utils = PlatformTestUtils.create({\n  rootDir,\n  adapter: PlatformExpress,\n  server: Server,\n  logger: {\n    level: \"info\"\n  }\n});\n\ndescribe(\"Stripe\", () => {\n  let request: SuperTest.Agent;\n  beforeEach(\n    utils.bootstrap({\n      mount: {\n        \"/rest\": [StripWebhookCtrl]\n      }\n    })\n  );\n  beforeEach(() => {\n    request = SuperTest.agent(PlatformTest.callback());\n  });\n\n  afterEach(() => PlatformTest.reset());\n\n  it(\"should call the webhook\", async () => {\n    const stripe = PlatformTest.get<Stripe>(Stripe);\n    const payload = {\n      id: \"evt_test_webhook\",\n      object: \"event\"\n    };\n    const payloadString = JSON.stringify(payload, null, 2);\n\n    const signature = stripe.webhooks.generateTestHeaderString({\n      payload: payloadString,\n      secret: \"whsec_test_secret\"\n    });\n\n    const response = await request.post(\"/rest/webhooks/callback\").send(payloadString).set(\"stripe-signature\", signature).expect(200);\n\n    expect(response.body).to.deep.eq({\n      event: payload,\n      received: true\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Lambda Controller Testing\nDESCRIPTION: Unit testing setup for Lambda controllers using PlatformServerlessTest utility.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerless} from \"@tsed/platform-serverless-http\";\nimport {PlatformServerlessTest} from \"@tsed/platform-serverless-testing\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\n@Controller(\"/timeslots\")\nclass TimeslotsController {\n  @Get(\"/\")\n  getAll() {\n    return [];\n  }\n}\n\ndescribe(\"TimeslotsController\", () => {\n  beforeEach(\n    PlatformServerlessTest.bootstrap(PlatformServerlessHttp, {\n      server: Server,\n      mount: {\n        \"/\": [TimeslotsLambdaController]\n      }\n    })\n  );\n  afterEach(() => PlatformServerlessTest.reset());\n\n  it(\"should call getAll Lambda\", async () => {\n    const response = await PlatformServerlessTest.request.get(\"/timeslots\");\n\n    expect(response.statusCode).toEqual(200);\n    expect(JSON.parse(response.body)).toEqual([]);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Client Model Schema\nDESCRIPTION: Model class definition with schema decorators for Redis data structure.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Schema} from \"@tsed/schema\";\n\nexport class ClientModel {\n  @Property()\n  id: string;\n\n  @Property()\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AJV in Ts.ED Server\nDESCRIPTION: Basic configuration for integrating AJV in a Ts.ED server. Imports the module and sets the returnsCoercedValues option.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/ajv\"; // import ajv ts.ed module\n\n@Configuration({\n  ajv: {\n    returnsCoercedValues: true // returns coerced value to the next pipe instead of returns original value (See #2355)\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Ports with Numeric Values\nDESCRIPTION: Shows alternative way to configure random port assignment using numeric value 0 instead of string notation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: 0,\n  httpsPort: 0\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Stripe Package\nDESCRIPTION: Commands to install the required packages for Stripe integration in a Ts.ED project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/stripe/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/stripe\nnpm install --save stripe\n```\n\n----------------------------------------\n\nTITLE: TSConfig Settings - JSON\nDESCRIPTION: Required TypeScript configuration settings for Ts.ED v8 compatibility.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"useDefineForClassFields\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Formio Schema Example\nDESCRIPTION: Example of the Formio schema output generated from the basic model definition.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": [\n    {\n      \"disabled\": false,\n      \"input\": true,\n      \"key\": \"test\",\n      \"label\": \"Test\",\n      \"type\": \"textfield\",\n      \"validate\": {\n        \"required\": false\n      }\n    }\n  ],\n  \"display\": \"form\",\n  \"machineName\": \"model\",\n  \"name\": \"model\",\n  \"title\": \"Model\",\n  \"type\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing HTTP and HTTPS Server Address in Ts.ED\nDESCRIPTION: Example of changing the HTTP and HTTPS server addresses in a Ts.ED configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: \"127.0.0.1:8081\",\n  httpsPort: \"127.0.0.2:8082\"\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Using OpenSpec2 and OpenSpec3 Interfaces in TypeScript\nDESCRIPTION: Example of how to import and use the OpenSpec2 and OpenSpec3 interfaces from the @tsed/openspec package in a TypeScript application. It demonstrates creating basic spec objects for both OpenAPI 3.0.1 and Swagger 2.0.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openspec/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OpenSpec3, OpenSpec2} from \"@tsed/openspec\";\n\nconst spec3: OpenSpec3 = {openapi: \"3.0.1\", paths: {}};\nconst spec2: OpenSpec2 = {swagger: \"2.0\", paths: {}};\n```\n\n----------------------------------------\n\nTITLE: Configuring Express BodyParser in Ts.ED\nDESCRIPTION: Shows how to configure the default bodyParser middleware used by Ts.ED for parsing HTTP request bodies. The example demonstrates configuring text, JSON, and URL-encoded parsers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/express.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Configuration({\n  express: {\n    bodyParser: {\n      text: {},\n      json: {},\n      urlencoded: {\n        extended: true // required\n      }\n    }\n  }\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining UserInfo Model in TypeScript\nDESCRIPTION: TypeScript class definition for UserInfo model used for user serialization and deserialization in sessions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Format, Property} from \"@tsed/schema\";\n\nexport class UserInfo {\n  @Property()\n  id: string;\n\n  @Property()\n  @Format(\"email\")\n  email: string;\n\n  @Property()\n  password: string;\n}\n```\n\n----------------------------------------\n\nTITLE: InputTags Decorator Usage Example\nDESCRIPTION: Demonstrates using the InputTags decorator along with other schema decorators to create a tags input field.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getFormioSchema} from \"@tsed/schema-formio\";\n\nexport class Model {\n  @InputTags()\n  @Title(\"Tags for my model\")\n  @CollectionOf(String)\n  tags: string[];\n}\n\nconsole.log(await getFormioSchema(Model));\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Server in Ts.ED\nDESCRIPTION: Shows how to disable the HTTP server by setting httpPort to false in the configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: false\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Injecting Router in a Controller Constructor\nDESCRIPTION: Shows how to inject the router in a controller constructor to define routes programmatically. This is possible because Ts.ED attaches a router to the controller provider during instantiation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/hooks.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {PlatformRouter} from \"@tsed/platform-router\";\n\n@Controller(\"/\")\nexport class MyController {\n  constructor(private router: PlatformRouter) {\n    router.get(\"/programmatic\", this.programmatic.bind(this));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema with Ts.ED Decorators Example - Prisma\nDESCRIPTION: Simplified example showing how to use Ts.ED decorators in Prisma schema comments\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\nmodel User {\n  /// @TsED.Groups(\"!creation\")\n  /// Comment\n  id          Int      @id @default(autoincrement())\n  createdAt   DateTime @default(now())\n  /// @TsED.Email()\n  /// @TsED.Description(\"User email. This email must be unique!\")\n  email       String   @unique\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Source in Resolver\nDESCRIPTION: Example of using the UserDataSource in a GraphQL resolver.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Arg, Authorized, Ctx, Query} from \"type-graphql\";\nimport {UserDataSource} from \"../datasources/UserDataSource\";\nimport {User} from \"../models/User\";\n\n@ResolverController(User)\nexport class UserResolver {\n  @Authorized()\n  @Query(() => User)\n  public async user(@Arg(\"userId\") userId: string, @Ctx(\"dataSources\") dataSources: any): Promise<User> {\n    const userDataSource: UserDataSource = dataSources.userDataSource;\n    return userDataSource.getUserById(userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abort Interaction in TypeScript\nDESCRIPTION: This code snippet defines an AbortInteraction class that handles aborting the OIDC interaction process. It includes a method for executing the abort action.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Interaction({\n  name: \"abort\"\n})\nexport class AbortInteraction {\n  @Inject()\n  protected oidc: OidcService;\n\n  async $exec(oidcCtx: OidcCtx) {\n    const result = {\n      error: \"access_denied\",\n      error_description: \"End-User aborted interaction\"\n    };\n\n    return this.oidc.interactionFinished(oidcCtx, result, { mergeWithLastSubmission: false });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Health Check Response\nDESCRIPTION: JSON response example when calling the /health endpoint, showing the status and details of health checks.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/terminus/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"info\": [\n    {\n      \"mongo\": \"ok\"\n    },\n    {\n      \"redis\": \"ok\"\n    }\n  ],\n  \"details\": [\n    {\n      \"mongo\": \"ok\"\n    },\n    {\n      \"redis\": \"ok\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with SWC - TypeScript Configuration\nDESCRIPTION: Vitest configuration file that sets up testing globals and configures the SWC plugin for compiling TypeScript test files with proper decorator support and ES2022 targeting.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/vitest.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// vitest.config.ts\nimport swc from \"unplugin-swc\";\nimport {defineConfig} from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    globals: true,\n    root: \"./\"\n  },\n  plugins: [\n    // This is required to build the test files with SWC\n    swc.vite({\n      sourceMaps: \"inline\",\n\n      jsc: {\n        target: \"es2022\",\n        externalHelpers: true,\n        keepClassNames: true,\n        parser: {\n          syntax: \"typescript\",\n          tsx: true,\n          decorators: true,\n          dynamicImport: true,\n          importMeta: true,\n          preserveAllComments: true\n        },\n        transform: {\n          useDefineForClassFields: false,\n          legacyDecorator: true,\n          decoratorMetadata: true\n        }\n      },\n      module: {\n        type: \"es6\",\n        strictMode: true,\n        lazy: false,\n        noInterop: false\n      },\n      isModule: true\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Controller with Ts.ED CLI\nDESCRIPTION: Command to generate a new controller using Ts.ED CLI tool\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/create-your-first-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm -g @tsed/cli\ntsed g controller Calendars\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL WS Dependencies\nDESCRIPTION: Commands to install the required npm packages for GraphQL WebSocket functionality including the main module and type definitions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/graphql-ws/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/graphql-ws graphql-ws ws @types/ws\n```\n\n----------------------------------------\n\nTITLE: Installing Temporal Dependencies\nDESCRIPTION: Commands to install required Temporal packages and dependencies for Ts.ED integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/temporal/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/temporal\nnpm install --save @temporalio/client @temporalio/worker\n```\n\n----------------------------------------\n\nTITLE: Generated Barrel File TypeScript Example\nDESCRIPTION: Example of an automatically generated barrel file by Barrelsby containing controller exports.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from \"./HelloWorldController\";\nexport * from \"./UserController\";\n```\n\n----------------------------------------\n\nTITLE: Testing with Async Hook Context in Ts.ED v7\nDESCRIPTION: Shows how to test using the async hook context in Ts.ED v7, with changes in importing the runInContext function.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n- import {runInContext} from \"@tsed/async-hook-context\";\n+ import {runInContext} from \"@tsed/di\";\nimport {PlatformContext} from \"@tsed/common\";\nimport {CustomRepository} from \"./CustomRepository\";\n\ndescribe(\"CustomRepository\", () => {\n  beforeEach(() => PlatformTest.create());\n  afterEach(() => PlatformTest.reset());\n\n  it(\"should run method with the ctx\", async () => {\n    const ctx = PlatformTest.createRequestContext();\n    const service = PlatformTest.get<CustomRepository>(CustomRepository);\n\n    ctx.request.headers = {\n      \"x-api\": \"api\"\n    };\n\n    const result = await runInContext(ctx, () => service.findById(\"id\"));\n\n    expect(result).toEqual({\n      id: \"id\",\n      headers: {\n        \"x-api\": \"api\"\n      }\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe package for Ts.ED\nDESCRIPTION: Commands to install the required Stripe packages using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/stripe.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @tsed/stripe stripe\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tsed/stripe stripe\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tsed/stripe stripe\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tsed/stripe stripe\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with OIDC Provider\nDESCRIPTION: TypeScript code snippet demonstrating how to configure a Ts.ED server with OIDC provider integration. It includes imports, server configuration with OIDC options, and client setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/oidc-provider/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/oidc-provider\"; // import typeorm ts.ed module\nimport {Accounts} from \"../services/Accounts.js\";\nimport {MemoryAdapter} from \"../adapters/MemoryAdapter.js\";\n\n@Configuration({\n  oidc: {\n    jwksPath: `./../keys/jwks.json`, // don't forget add this path to .gitignore\n    Adapter: MemoryAdapter,\n    Accounts: Accounts,\n    allowHttpLocalhost: false, // by default. true in dev mode and false in production\n    // Clients: Clients,\n    clients: [\n      {\n        client_id: \"client_id\",\n        client_secret: \"client_secret\",\n        redirect_uris: [\"https://host.fr/\"]\n      }\n    ],\n    options: {\n      // Oidc-provider options See https://github.com/panva/node-oidc-provider/blob/master/docs/README.md\n      formats: {\n        AccessToken: \"jwt\"\n      },\n      features: {\n        encryption: {enabled: true},\n        introspection: {enabled: true},\n        revocation: {enabled: true}\n      }\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Generating JWKS from Certificates\nDESCRIPTION: Example showing how to generate JWKS keys from existing certificates, with options to specify algorithm, usage, and key IDs.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/jwks/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {generateJwks} from \"./getJwks.js\";\n\n// Generate only jwks\nconst jwks = generateJwks({\n  certificates: [\n    {path: \"path/keys/sig.rsa.pub.pem\", alg: \"RS256\", use: \"sig\", kid: \"key-0\"},\n    {path: \"path/keys/enc.rsa.pub.pem\", alg: \"RS256\", use: \"enc\", kid: \"key-1\"}\n  ]\n});\n\n// Create keys.json file if not exists\nconst jwks = getJwks({\n  path: \"path/to/keys.json\",\n  certificates: [\n    {path: \"path/keys/sig.rsa.pub.pem\", alg: \"RS256\", use: \"sig\", kid: \"key-0\"},\n    {path: \"path/keys/enc.rsa.pub.pem\", alg: \"RS256\", use: \"enc\", kid: \"key-1\"}\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Static Files Before or After Controllers in Ts.ED\nDESCRIPTION: Configuration showing how to control the loading order of static files relative to controllers. Using the hook option, static files can be loaded either before or after controllers are initialized.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/serve-files.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as process from \"process\";\n\n@Configuration({\n  statics: {\n    \"/before\": [\n      {\n        root: `${process.cwd()}/public`,\n        hook: \"$beforeRoutesInit\"\n        // ... statics options\n      }\n    ],\n    \"/after\": [\n      {\n        root: `${process.cwd()}/public`,\n        hook: \"$afterRoutesInit\"\n        // ... statics options\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Serverless Configuration\nDESCRIPTION: YAML configuration for serverless deployment with AWS Lambda.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless-http.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice: timeslots\n\nframeworkVersion: \"2\"\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  lambdaHashingVersion: \"20201221\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  any:\n    handler: dist/handler.handler\n    events:\n      - http:\n          method: ANY\n          path: /\n      - http:\n          method: ANY\n          path: \"{proxy+}\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Next Function in Ts.ED Controller\nDESCRIPTION: Shows how to inject and use the Next function in a Ts.ED controller, although it's not recommended.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, Next} from \"@tsed/common\";\n\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/\")\n  get(@Next() next: Next) {\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Auth in Original Passport.js\nDESCRIPTION: JavaScript code showing the configuration of Discord authentication with token refresh in original Passport.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<<< @/tutorials/snippets/passport/OriginalDiscordProtocol.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Ports in Ts.ED\nDESCRIPTION: Demonstrates how to configure random port assignment using string notation with IP addresses. Port 0 delegates port assignment to the operating system.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: \"127.0.0.1:0\",\n  httpsPort: \"127.0.0.2:0\"\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Koa Static Files Configuration Interface\nDESCRIPTION: TypeScript interface for configuring static file serving in Koa, including caching, compression, and file access options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/koa.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface KoaStaticsOptions {\n  /** Browser cache max-age in milliseconds. (defaults to 0) */\n  maxage?: number;\n  maxAge?: SendOptions[\"maxage\"];\n  /** Tell the browser the resource is immutable and can be cached indefinitely. (defaults to false) */\n  immutable?: boolean;\n  /** Allow transfer of hidden files. (defaults to false) */\n  hidden?: boolean;\n  /** Root directory to restrict file access. (defaults to '') */\n  root?: string;\n  /** Name of the index file to serve automatically when visiting the root location. (defaults to none) */\n  index?: string | false;\n  /** Try to serve the gzipped version of a file automatically when gzip is supported by a client and if the requested file with .gz extension exists. (defaults to true). */\n  gzip?: boolean;\n  /** Try to serve the brotli version of a file automatically when brotli is supported by a client and if the requested file with .br extension exists. (defaults to true). */\n  brotli?: boolean;\n  /** If not false (defaults to true), format the path to serve static file servers and not require a trailing slash for directories, so that you can do both /directory and /directory/. */\n  format?: boolean;\n  /** Function to set custom headers on response. */\n  setHeaders?: SetHeaders;\n  /** Try to match extensions from passed array to search for file when no extension is sufficed in URL. First found is served. (defaults to false) */\n  extensions?: string[] | false;\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Socket Response in Ts.ED\nDESCRIPTION: Demonstrates how to emit a response to a socket event using Ts.ED decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {SocketService, Input, Emit, Args, Socket, Nsp} from \"@tsed/socketio\";\n\n@SocketService(\"/my-namespace\")\nexport class MySocketService {\n  @Input(\"eventName\")\n  @Emit(\"responseEventName\") // or Broadcast or BroadcastOthers\n  async myMethod(@Args(0) userName: string, @Socket socket: SocketIO.Socket) {\n    return \"Message \" + userName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Terminus\nDESCRIPTION: TypeScript code showing how to import and configure the Ts.ED Terminus module in the Server class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/terminus/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/terminus\"; // import terminus Ts.ED module\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  terminus: {\n    // ... see Terminus configuration options on https://github.com/godaddy/terminus\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Defining Client Model\nDESCRIPTION: Model class definition for client data with schema properties\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Schema} from \"@tsed/schema\";\n\nexport class ClientModel {\n  @Property()\n  id: string;\n\n  @Property()\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Platform Log Middleware\nDESCRIPTION: TypeScript configuration for a Ts.ED server using the PlatformLogMiddleware. It includes logger settings and middleware configuration. Note that this configuration is only for Ts.ED v8.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-middleware/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformLogMiddleware} from \"@tsed/platform-log-middleware\";\n\n@Configuration({\n  logger: {\n    /**\n     * Fields displayed when a request is logged. Possible values: `reqId`, `method`, `url`, `headers`, `body`, `query`,`params`, `duration`.\n     */\n    requestFields: [\"reqId\", \"method\", \"url\", \"duration\", \"route\"],\n    /**\n     * Log all incoming request. By default, is true and print the configured `logger.requestFields`.\n     */\n    logRequest: true,\n    /**\n     * Log start of all incoming request. By default, is false\n     */\n    logStart: false,\n    /**\n     * Log end of all incoming request. By default, is true\n     */\n    logEnd: true\n  },\n  middlewares: [\n    \"cors\",\n    \"cookie-parser\",\n    {\n      use: \"compression\",\n      options: {\n        brotli: {\n          enabled: true,\n          zlib: {}\n        }\n      }\n    },\n    \"method-override\",\n    \"json-parser\",\n    {use: \"urlencoded-parser\", options: {extended: true}},\n    /// add the platform log middleware here\n    PlatformLogMiddleware\n  ]\n})\nclass Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing BullMQ Module for Ts.ED\nDESCRIPTION: Commands to install the BullMQ module for Ts.ED using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/bullmq.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tsed/bullmq bullmq\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/bullmq bullmq\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/bullmq bullmq\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/bullmq bullmq\n```\n\n----------------------------------------\n\nTITLE: Installing PubSub Dependencies\nDESCRIPTION: Command for installing the graphql-subscriptions package for PubSub functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-ws.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install graphql-subscriptions\n```\n\n----------------------------------------\n\nTITLE: NPM Script Configuration\nDESCRIPTION: JSON configuration for package.json defining the invoke command for local lambda testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"invoke\": \"yarn serverless invoke local -f any --data '{\\\"path\\\":\\\"/timeslots\\\", \\\"httpMethod\\\": \\\"GET\\\"}'\" \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Original AJV Example for 'even' Keyword Implementation\nDESCRIPTION: The equivalent code in plain AJV showing how to add a custom keyword. Demonstrates the same 'even' validator implementation without Ts.ED decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ajv.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport ajv, {_, KeywordCxt} from \"ajv\";\n\najv.addKeyword({\n  keyword: \"even\",\n  type: \"number\",\n  schemaType: \"boolean\",\n  // $data: true // to support [$data reference](./validation.html#data-reference), ...\n  code(cxt: KeywordCxt) {\n    const {data, schema} = cxt\n    const op = schema ? _`!==` : _`===`\n    cxt.fail(_`${data} %2 ${op} 0`) // ... the only code change needed is to use `cxt.fail$data` here\n  },\n})\n\nconst schema = {even: true}\nconst validate = ajv.compile(schema)\nconsole.log(validate(2)) // true\nconsole.log(validate(3)) // false\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Agenda Module\nDESCRIPTION: Commands to install the @tsed/agenda module and its dependency agenda using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/agenda\nnpm install --save agenda\n```\n\n----------------------------------------\n\nTITLE: Installing Agendash for Job Dashboard\nDESCRIPTION: Command to install Agendash, an optional dashboard for managing Agenda jobs.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/agenda/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save agendash\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger Integration\nDESCRIPTION: Swagger configuration for OAuth2 authentication with Keycloak.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nswagger: [\n  {\n    path: `/v3/docs`,\n    specVersion: \"3.0.1\",\n    spec: {\n      components: {\n        securitySchemes: {\n          oauth2: {\n            type: \"oauth2\",\n            flows: {\n              authorizationCode: {\n                authorizationUrl: \"https://<keycloak-url>/auth/realms/<my-realm>/protocol/openid-connect/auth\",\n                tokenUrl: \"https://<keycloak-url>/auth/realms/<my-realm>/protocol/openid-connect/token\",\n                refreshUrl: \"https://<keycloak-url>/auth/realms/<my-realm>/protocol/openid-connect/token\",\n                scopes: {openid: \"openid\", profile: \"profile\"}\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest with TestContainers Mongo\nDESCRIPTION: Vitest configuration setup for MongoDB test containers\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/testcontainers-mongo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    globalSetup: [import.meta.resolve(\"@tsed/testcontainers-mongo/vitest/setup\")]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Connection\nDESCRIPTION: Creates a Redis connection provider and exports connection type\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Redis from \"ioredis\";\nimport {registerConnectionProvider} from \"@tsed/ioredis\";\n\nexport const REDIS_CONNECTION = Symbol.for(\"REDIS_CONNECTION\");\nexport type REDIS_CONNECTION = Redis;\n\nregisterConnectionProvider({\n  provide: REDIS_CONNECTION,\n  name: \"default\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Ports Using Number Format\nDESCRIPTION: Shows alternative way to configure random port assignment using numeric zero values.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: 0,\n  httpsPort: 0\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Wrapper Response Filter\nDESCRIPTION: Shows how to test a controller using a wrapper response filter to verify the response is properly structured with the wrapped format.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/response-filter.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport * as SuperTest from \"supertest\";\nimport {UsersCtrl} from \"./UsersCtrl.js\";\nimport {Server} from \"../../Server.js\";\n\ndescribe(\"UserCtrl\", () => {\n  let request: SuperTest.Agent;\n\n  before(\n    PlatformTest.bootstrap(Server, {\n      mount: {\n        \"/rest\": [UsersCtrl]\n      },\n      responseFilters: [XmlResponseFilter]\n    })\n  );\n  before(() => {\n    request = SuperTest(PlatformTest.callback());\n  });\n  after(PlatformTest.reset);\n  it(\"should return the wrapped data\", async () => {\n    const response = await request.get(\"/rest/users/1\").expect(200);\n\n    expect(response.body).toEqual({data: {id: \"1\"}, errors: [], links: []});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Joi Schema Decorator in Ts.ED Controller\nDESCRIPTION: Shows how to apply the custom Joi schema decorator to a controller method parameter in Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Post} from \"@tsed/common\";\nimport {JoiSchema} from \"./joi-schema.decorator\";\nimport Joi from \"joi\";\n\n@Controller('/cats')\nexport class CatsController {\n  @Post('/)\n  async create(@JoiSchema(Joi.object({\n    name: Joi.string().required(),\n    age: Joi.number().required(),\n    breed: Joi.string().required()\n  })) createCatDto: any) {\n    // logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Objection.js and dependencies with package managers\nDESCRIPTION: Commands to install Objection.js, Knex, and Ts.ED Objection package using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @tsed/objection objection knex\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/objection objection knex\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/objection objection knex\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/objection objection knex\n```\n\n----------------------------------------\n\nTITLE: Basic Socket Service Implementation\nDESCRIPTION: Simple Socket service with emit functionality\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as SocketIO from \"socket.io\";\nimport {SocketService, Nsp} from \"@tsed/socketio\";\n\n@SocketService()\nexport class MySocketService {\n  @Nsp nsp: SocketIO.Namespace;\n\n  helloAll() {\n    this.nsp.emit(\"hi\", \"everyone!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformViewsSettings interface for Ts.ED\nDESCRIPTION: TypeScript interface definition for PlatformViewsSettings, which includes options for configuring views directory, caching, file extensions, default view engine, and engine-specific options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PlatformViewsSettings {\n  /**\n   * Views directory.\n   */\n  root?: string;\n  /**\n   * Enable cache. Ts.ED enables cache in PRODUCTION profile by default.\n   */\n  cache?: boolean;\n  /**\n   * Provide extensions mapping to match the expected engines.\n   */\n  extensions?: Partial<PlatformViewsExtensionsTypes>;\n  /**\n   * Default view engine extension.\n   * Allow omitting extension when using View decorator or render method.\n   */\n  viewEngine?: string;\n  /**\n   * Options mapping for each engine.\n   */\n  options?: Partial<PlatformViewsEngineOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Server Configuration in JSON\nDESCRIPTION: The default configuration for a Ts.ED server, including environment, ports, and upload directory settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": \"development\",\n  \"port\": 8080,\n  \"debug\": false,\n  \"httpsPort\": 8000,\n  \"uploadDir\": \"./uploads\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.io Dependencies\nDESCRIPTION: Command to install Socket.io and related TypeScript types for Ts.ED integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio-testing/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save socket.io @types/socket.io @tsed/socketio\n```\n\n----------------------------------------\n\nTITLE: Starting a Ts.ED project with yarn\nDESCRIPTION: Use yarn to start the Ts.ED project after initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Temporal Dependencies\nDESCRIPTION: Commands for installing required Temporal packages using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/temporal.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @tsed/temporal @temporalio/client @temporalio/worker\n```\n\n----------------------------------------\n\nTITLE: Local Function Invocation\nDESCRIPTION: Command to invoke the function locally for testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverless invoke local --function hello\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/schema-formio Package\nDESCRIPTION: NPM installation command for the @tsed/schema-formio package and its type definitions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/schema-formio\n```\n\n----------------------------------------\n\nTITLE: Importing Schema Decorators from @tsed/schema\nDESCRIPTION: Example showing the recommended way to import decorators for serverless applications from @tsed/schema instead of @tsed/common to optimize for serverless contexts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get} from \"@tsed/schema\";\n```\n\n----------------------------------------\n\nTITLE: Adding Vitest Scripts - Package.json Configuration\nDESCRIPTION: Test script configurations for package.json that enable running tests, watch mode, coverage reporting, and debugging with Vitest.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/vitest.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"vitest run\",\n    \"test:watch\": \"vitest\",\n    \"test:coverage\": \"vitest run --coverage\",\n    \"test:debug\": \"vitest --inspect-brk --inspect --logHeapUsage --threads=false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Docs Decorator for Multi-Documentation\nDESCRIPTION: Demonstrates how to use the @Docs decorator to specify which documentation a controller should be displayed in.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/admin\")\n@Docs(\"admin\")\nexport class AdminCtrl {\n  @Get(\"/\")\n  get() {}\n}\n\n@Controller(\"/users\")\n@Docs(\"api\")\nexport class UsersCtrl {\n  @Get(\"/\")\n  get() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Serverless Deployment Output\nDESCRIPTION: Example output showing the deployment process and resulting service information including endpoints and functions.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Creating Stack...\nServerless: Checking Stack create progress...\n........\nServerless: Stack create finished...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service aws-node-rest-api.zip file to S3 (711.23 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n.................................\nServerless: Stack update finished...\nService Information\nservice: aws-node-rest-api\nstage: dev\nregion: us-east-1\nstack: aws-node-rest-api-dev\nresources: 12\napi keys:\n  None\nendpoints:\n  ANY - https://xxxxxxx.execute-api.us-east-1.amazonaws.com/dev/\nfunctions:\n  api: aws-node-rest-api-dev-hello\nlayers:\n  None\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Fastify Package\nDESCRIPTION: Command to install the Ts.ED platform-fastify package and its peer dependency fastify using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-fastify/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-fastify fastify\n```\n\n----------------------------------------\n\nTITLE: Basic Client Connection Setup\nDESCRIPTION: HTML and JavaScript code for connecting a client to the Socket.io server.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/socket-io.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  const socket = io();\n  // basic emit example\n  socket.emit('eventName', 'data...', (response) => {\n    console.log(response);\n  });\n\n  // basic on example\n  socket.on('responseEventName', (data) => {\n    console.log(data);\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Templating in Ts.ED Controller\nDESCRIPTION: Shows how to use the @View decorator for templating in a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Get, PathParams, View} from \"@tsed/common\";\n\n@Controller(\"/pages\")\nexport class PagesController {\n  @Get(\"/:id\")\n  @View(\"pages/home.ejs\")\n  async get(@PathParams(\"id\") id: string): Promise<any> {\n    const startDate = new Date();\n\n    return {\n      name: id,\n      startDate: startDate.toDateString()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with Formio\nDESCRIPTION: TypeScript code snippet showing how to import and configure the @tsed/formio module in a Ts.ED server application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/formio/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport {PlatformApplication} from \"@tsed/platform-http\";\nimport \"@tsed/formio\";\n\n@Configuration({\n  formio: {}\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options\nDESCRIPTION: This snippet shows a TypeScript configuration file (tsconfig.json) with various compiler options set. It includes settings for ES6 modules, strict type checking, and source map generation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"sourceMap\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Dependencies\nDESCRIPTION: Command to install required Redis packages including ioredis and ioredis-mock for testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/ioredis/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @tsed/ioredis ioredis ioredis-mock\n```\n\n----------------------------------------\n\nTITLE: Installing Redis Adapter Dependencies with npm\nDESCRIPTION: Command to install Redis adapter and related packages for OIDC provider using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save @tsed/redis-adapters @tsed/ioredis ioredis\nnpm i --save-dev ioredis-mock\n```\n\n----------------------------------------\n\nTITLE: Barrelsby Configuration JSON\nDESCRIPTION: Configuration file for Barrelsby tool to generate barrel files for controllers, replacing the componentsScan functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"directory\": [\"./src/controllers/rest\"],\n  \"exclude\": [\"__mock__\", \"__mocks__\", \".spec.ts\"],\n  \"delete\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/di package with npm\nDESCRIPTION: Command to install the @tsed/di package and its type definitions using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/di/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/di\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Condition Function in Ts.ED\nDESCRIPTION: Shows how to implement a custom function to determine when values should be cached using the UseCache decorator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformContext} from \"@tsed/platform-http\";\nimport {PathParams} from \"@tsed/platform-params\";\nimport {Get} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\n\n@Controller(\"/my-path\")\nexport class MyController {\n  @Get(\"/:id\")\n  @UseCache({ttl: 500, canCache: (item: any) => item !== null})\n  get(@PathParams(\"id\") id: string) {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for TypeScript Projects\nDESCRIPTION: Jest configuration file that sets up testing environment for TypeScript projects, including coverage settings, file extensions, test patterns, and TypeScript transformation rules.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/jest.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // Automatically clear mock calls and instances between every test\n  clearMocks: true,\n\n  // Indicates whether the coverage information should be collected while executing the test\n  collectCoverage: true,\n\n  // An array of glob patterns indicating a set of files for which coverage information should be collected\n  // collectCoverageFrom: undefined,\n\n  // The directory where Jest should output its coverage files\n  coverageDirectory: \"coverage\",\n\n  // An array of regexp pattern strings used to skip coverage collection\n  coveragePathIgnorePatterns: [\"index.ts\", \"/node_modules/\"],\n\n  // An array of file extensions your modules use\n  moduleFileExtensions: [\"js\", \"json\", \"jsx\", \"ts\", \"tsx\", \"node\"],\n\n  // The test environment that will be used for testing\n  testEnvironment: \"node\",\n\n  // The glob patterns Jest uses to detect test files\n  testMatch: [\"**/src/**/__tests__/**/*.[jt]s?(x)\", \"**/src/**/?(*.)+(spec|test).[tj]s?(x)\"],\n  // A map from regular expressions to paths to transformers\n  transform: {\n    \"\\\\.(ts)$\": \"ts-jest\"\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS Server in Ts.ED\nDESCRIPTION: Example of how to disable HTTPS server by setting httpsPort to false in configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpsPort: false\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Database URL Configuration\nDESCRIPTION: Environment variable configuration for database connection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"file:./dev.db\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterTransactionCommit Hook\nDESCRIPTION: Example of implementing a hook that executes after transaction commit using the AfterTransactionCommit interface.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AfterTransactionCommit} from \"@tsed/mikro-orm\";\nimport {EntityManager} from \"@mikro-orm/core\";\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class Hooks implements AfterTransactionCommit {\n  $afterTransactionCommit(em: EntityManager): Promise<unknown> | unknown {\n    // Custom code executed after committing data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Invocation Example\nDESCRIPTION: Command to invoke the deployed API endpoint using curl.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://xxxxxxx.execute-api.us-east-1.amazonaws.com/dev/\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition\nDESCRIPTION: Example GraphQL schema definition for a Recipe type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Recipe {\n  id: ID!\n  title: String!\n  description: String\n  creationDate: Date!\n  ingredients: [String!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Ts.ED project with bun\nDESCRIPTION: Use bun to start the Ts.ED project after initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Defining Model Documentation\nDESCRIPTION: Example of a model class with swagger decorators for documentation\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/scalar/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {JsonProperty, Title, Description, Example} from \"@tsed/schema\";\n\nexport class CalendarModel {\n  @Title(\"iD\")\n  @Description(\"Description of calendar model id\")\n  @Example(\"Example value\")\n  @JsonProperty()\n  public id: string;\n\n  @JsonProperty()\n  public name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar in Server\nDESCRIPTION: Server configuration example showing how to set up the Scalar module with basic swagger documentation path and version\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/scalar/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/scalar\"; // import scalar Ts.ED module\nimport {resolve} from \"node:path\";\n\n@Configuration({\n  scalar: [\n    {\n      path: \"/v3/docs\",\n      specVersion: \"3.0.1\"\n    }\n  ]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/openspec Package with npm\nDESCRIPTION: Command to install the @tsed/openspec package and its type definitions using npm. This is typically run in a terminal or command prompt.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openspec/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/openspec\n```\n\n----------------------------------------\n\nTITLE: Accessing Injector Instance in Ts.ED v8 (TypeScript)\nDESCRIPTION: New utilities in Ts.ED v8 for accessing the injector instance on-demand, solving the issues with global variables and availability.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injector, inject} from \"@tsed/di\";\nimport {MyService} from \"./services/MyService.js\";\n\nconst myService = injector().get(MyService);\n// short version\nconst myService = inject(MyService);\n```\n\n----------------------------------------\n\nTITLE: Installing Agenda and Ts.ED Agenda Module\nDESCRIPTION: Commands to install the required dependencies for using Agenda with Ts.ED using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/agenda.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @tsed/agenda\nnpm install --save agenda\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @tsed/agenda\nyarn add agenda\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @tsed/agenda\npnpm add agenda\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @tsed/agenda\nbun add agenda\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless HTTP Dependencies\nDESCRIPTION: Commands to install required npm packages for Ts.ED serverless implementation including serverless-http, serverless-offline and AWS Lambda types.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-serverless-http serverless-http serverless-offline\nnpm install --save-dev @types/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Swagger Package\nDESCRIPTION: Command to install the @tsed/swagger package using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/swagger/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/swagger\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Parameter Decorators in Ts.ED\nDESCRIPTION: Shows advanced usage of parameter decorators in Ts.ED, demonstrating how to provide ParamOptions to change decorator behavior for validation and mapping.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Injectable} from \"@tsed/di\";\nimport {Post, BodyParams, Required} from \"@tsed/schema\";\n\nclass MyModel {\n  @Required()\n  name: string;\n}\n\n@Injectable()\nclass ValidatorService {\n  transform(model: unknown) {\n    return model instanceof MyModel ? model : Object.assign(new MyModel(), model);\n  }\n\n  validate(model: MyModel) {\n    if (!model.name) {\n      throw new Error(\"model.name is required\");\n    }\n\n    return model;\n  }\n}\n\n@Controller(\"/\")\nclass MyController {\n  constructor(private validatorService: ValidatorService) {}\n\n  @Post(\"/\")\n  post(\n    @BodyParams({\n      expression: \"model\",\n      useValidation: true,\n      useConverter: true,\n      validator: {\n        transform: true,\n        whitelist: true,\n        forbidNonWhitelisted: true\n      }\n    })\n    model: MyModel\n  ) {\n    return {status: \"ok\"};\n  }\n\n  @Post(\"/2\")\n  post2(\n    @BodyParams({\n      expression: \"model\",\n      useValidation: false,\n      useMapper: false,\n      resolver: (obj: any): any => {\n        return this.validatorService.transform(obj);\n      },\n      validate: (obj: MyModel): any => {\n        return this.validatorService.validate(obj);\n      }\n    })\n    model: MyModel\n  ) {\n    return {status: \"ok\"};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Request Scope Chaining in Ts.ED with Decorators\nDESCRIPTION: Demonstrates an incorrect implementation of request-scoped providers where the controller has REQUEST scope but the service has SINGLETON scope, which prevents the service from being recreated for each request.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Scope, ProviderScope, Get, Service, Inject} from \"@tsed/common\";\n\n@Service()\n@Scope(ProviderScope.SINGLETON)\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\n@Controller(\"/random\")\n@Scope(ProviderScope.REQUEST)\nexport class RandomController {\n  @Inject()\n  myService: MyService;\n\n  @Get(\"/\")\n  get() {\n    return this.myService.get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Async Hook Context Package\nDESCRIPTION: Command to install the @tsed/async-hook-context package for versions below v6.113.0 to enable AsyncLocalStorage functionality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/async-hook-context\n```\n\n----------------------------------------\n\nTITLE: Traditional Context Injection in Ts.ED Controller and Service\nDESCRIPTION: Example showing the traditional way of passing PlatformContext from a controller to a repository service, requiring explicit context forwarding through method parameters.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/request-context.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class CustomRepository {\n  async findById(id: string, ctx: PlatformContext) {\n    ctx.logger.info(\"Where are in the repository\");\n    return {\n      id,\n      headers: this.$ctx?.request.headers\n    };\n  }\n}\n\n@Controller(\"/async-hooks\")\nexport class AsyncHookCtrl {\n  @Inject()\n  repository: CustomRepository;\n\n  @Get(\"/:id\")\n  async get(@PathParams(\"id\") id: string, @Context() ctx: PlatformContext) {\n    return this.repository.findById(id, ctx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Scan Implementation TypeScript\nDESCRIPTION: Example showing how to use the new @tsed/components-scan module for legacy support of component scanning.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/common\";\nimport {importProviders} from \"@tsed/components-scan\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server\";\n\nasync function bootstrap() {\n  try {\n    const scannedProviders = await importProviders({\n      mount: {\n        \"/rest\": [__dirname + \"/**/controllers/**/*.ts\"]\n      },\n      imports: [__dirname + \"/**/services/**/*.ts\", __dirname + \"/**/protocols/**/*.ts\"]\n    });\n\n    const platform = await PlatformExpress.bootstrap(Server, {\n      ...scannedProviders\n    });\n\n    await platform.listen();\n\n    process.on(\"SIGINT\", () => {\n      platform.stop();\n    });\n  } catch (error) {\n    $log.error({event: \"SERVER_BOOTSTRAP_ERROR\", error});\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for ESM in TypeScript\nDESCRIPTION: Demonstrates how to update import statements to include .js extensions for ESM compatibility in TypeScript files.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- import {MyService} from \"./services/MyService\";\n+ import {MyService} from \"./services/MyService.js\";\n\n- import * as controllers from \"./controllers\";\n+ import * as controllers from \"./controllers/index.js\";\n```\n\n----------------------------------------\n\nTITLE: Testing Custom URI Format in Ts.ED\nDESCRIPTION: Demonstrates how to test the custom URI format validator using Ts.ED's testing utilities and AjvService.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Uri, getJsonSchema} from \"@tsed/schema\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport {AjvService} from \"@tsed/ajv\";\nimport \"./UriFormat.js\";\n\ndescribe(\"UriFormat\", () => {\n  beforeEach(() => PlatformTest.create());\n  afterEach(() => PlatformTest.reset());\n  it(\"should validate empty string when we load the our custom Formats for AJV\", async () => {\n    class MyModel {\n      @Uri() // or @Format(\"uri\")\n      uri: string;\n    }\n\n    const service = PlatformTest.get<AjvService>(AjvService);\n    const jsonSchema = getJsonSchema(MyModel);\n\n    expect(jsonSchema).to.deep.equal({\n      properties: {\n        uri: {\n          format: \"uri\",\n          type: \"string\"\n        }\n      },\n      type: \"object\"\n    });\n\n    const result = await service.validate({uri: \"\"}, {type: MyModel});\n\n    expect(result).to.deep.eq({uri: \"\"});\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS Server in Ts.ED\nDESCRIPTION: Shows how to disable the HTTPS server by setting httpsPort to false in the configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration/index.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpsPort: false\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Express Dependencies\nDESCRIPTION: Commands to install the required npm packages for Ts.ED Platform Express. Includes both the main package and Express type definitions for TypeScript support.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-express/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-express express\nnpm install --save-dev @types/express\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/jwks Package\nDESCRIPTION: Command to install the @tsed/jwks package using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/jwks/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/jwks\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Ts.ED Development\nDESCRIPTION: This command shows how to commit changes following the conventional commits format used in Ts.ED development.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"feat(domain): Your message\"\n```\n\n----------------------------------------\n\nTITLE: Installing database drivers with package managers\nDESCRIPTION: Commands to install database-specific drivers (PostgreSQL, SQLite, MySQL) using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/objection.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pg\nnpm install sqlite3\nnpm install mysql\nnpm install mysql2\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add pg\nyarn add sqlite3\nyarn add mysql\nyarn add mysql2\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add pg\npnpm add sqlite3\npnpm add mysql\npnpm add mysql2\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add pg\nbun add sqlite3\nbun add mysql\nbun add mysql2\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/cli-core module with bun\nDESCRIPTION: Command to install the @tsed/cli-core package using bun package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/cli-core\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/cli-core module with npm\nDESCRIPTION: Command to install the @tsed/cli-core package using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tsed/cli-core\n```\n\n----------------------------------------\n\nTITLE: Basic Ts.ED Schema to Formio Conversion Example\nDESCRIPTION: Demonstrates basic usage of @tsed/schema-formio by defining a simple model class and converting it to a Formio schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getFormioSchema, Form} from \"@tsed/schema-formio\";\n\n@Form()\nexport class Model {\n  @Property()\n  id: string;\n}\n\nconsole.log(await getFormioSchema(Model));\n```\n\n----------------------------------------\n\nTITLE: Running Command with Options Example\nDESCRIPTION: Example showing how to run a command with options in the command line.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ntsed run hello-command -o test\n```\n\n----------------------------------------\n\nTITLE: Importing Schema Decorators in TypeScript\nDESCRIPTION: Example showing the correct way to import decorators from @tsed/schema instead of @tsed/common for serverless applications.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get} from \"@tsed/schema\";\n```\n\n----------------------------------------\n\nTITLE: Installing IORedis Dependencies\nDESCRIPTION: Package installation commands for IORedis and its dependencies using different package managers\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/ioredis.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @tsed/ioredis ioredis\nnpm install --save-dev ioredis-mock\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/ioredis ioredis\nyarn add -D ioredis-mock\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/ioredis ioredis\npnpm add -D ioredis-mock\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/ioredis ioredis\nbun add -D ioredis-mock\n```\n\n----------------------------------------\n\nTITLE: Injecting Socket Service in Ts.ED Controller\nDESCRIPTION: Demonstrates how to inject and use a Socket service within a Ts.ED controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller} from \"@tsed/di\";\nimport {Get} from \"@tsed/schema\";\nimport {MySocketService} from \"../services/MySocketService.js\";\n\n@Controller(\"/\")\nexport class MyCtrl {\n  constructor(private mySocketService: MySocketService) {}\n\n  @Get(\"/allo\")\n  allo() {\n    this.mySocketService.helloAll();\n    return \"is sent\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeGraphQL dependencies for Ts.ED with Express.js\nDESCRIPTION: Command to install necessary npm packages for using TypeGraphQL with Ts.ED and Express.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/typegraphql/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo graphql type-graphql @apollo/server @apollo/datasource-rest graphql-scalars\nnpm install --save-dev apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Handler Configuration\nDESCRIPTION: Lambda handler setup using PlatformServerless to bootstrap the Ts.ED server with Express adapter.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformServerless} from \"@tsed/platform-serverless-http\";\nimport {PlatformExpress} from \"@tsed/platform-express\";\nimport {Server} from \"./Server.js\";\n\nconst platform = PlatformServerless.bootstrap(Server, {\n  adapter: PlatformExpress\n});\n\nexport const handler = platform.handler();\n```\n\n----------------------------------------\n\nTITLE: Importing PlatformLogMiddleware in Ts.ED Server\nDESCRIPTION: Shows how to import and use PlatformLogMiddleware in a Ts.ED server configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport {PlatformLogMiddleware} from \"@tsed/platform-log-middleware\";\n\n@Configuration({\n   middlewares: [\n      PlatformLogMiddleware\n   ]\n})\nexport class Server {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Engine Usage with TypeScript\nDESCRIPTION: Demonstrates how to use the getEngine function to render templates using different engines like swig and ejs.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getEngine} from \"@tsed/engines\";\n\ngetEngine(\"swig\")\n  .renderFile({user: \"tobi\"})\n  .then((html) => {\n    console.log(html);\n  });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getEngine} from \"@tsed/engines\";\n\ngetEngine(\"ejs\")\n  .render(\"<p><%= user.name %></p>\")\n  .then((html) => {\n    console.log(html);\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Ts.ED\nDESCRIPTION: TypeScript configuration (tsconfig.json) required for using Ts.ED, including necessary compiler options.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/di/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"lib\": [\"es2016\"],\n    \"typeRoots\": [\"./node_modules/@types\"],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ESM Development in Node.js\nDESCRIPTION: Shows the commands to install necessary dependencies for ESM development using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @swc-node/register @swc/core @swc/helpers\nnpm install --save-dev nodemon cross-env\n```\n\n----------------------------------------\n\nTITLE: Importing Decorators from @tsed/schema\nDESCRIPTION: Example showing the correct way to import decorators in Serverless context from @tsed/schema instead of @tsed/common\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/serverless.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get} from \"@tsed/schema\";\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Objection.js Dependencies\nDESCRIPTION: Command to install the required dependencies for using Objection.js with Ts.ED. This includes the @tsed/objection package, Objection.js, and Knex.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/objection/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/objection objection knex\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger Package - NPM Command\nDESCRIPTION: Command to install the Ts.ED Swagger package via NPM\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/swagger\n```\n\n----------------------------------------\n\nTITLE: Installing Vitest Dependencies - Package Manager Commands\nDESCRIPTION: Commands for installing Vitest and its dependencies (vitest, unplugin-swc, @swc/core, @vitest/coverage-v8) using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/vitest.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save-dev vitest unplugin-swc @swc/core @vitest/coverage-v8\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D vitest unplugin-swc @swc/core @vitest/coverage-v8\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -D vitest unplugin-swc @swc/core @vitest/coverage-v8\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add -D vitest unplugin-swc @swc/core @vitest/coverage-v8\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Ts.ED Controller\nDESCRIPTION: Demonstrates various ways to perform redirects using the @Redirect decorator in Ts.ED controllers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Redirect} from \"@tsed/schema\";\nimport {Controller} from \"@tsed/di\";\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"/foo/bar\")\n  @Redirect(301, \"http://example.com\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"http://google.com\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"/admin\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"post/new\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"..\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Redirect(\"back\")\n  myMethod() {}\n}\n\n@Controller(\"/\")\nclass MyCtrl {\n  @Get(\"/\")\n  myMethod(@Context() ctx: Context) {\n    return ctx.response.redirect(\"/path/to\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Ts.ED Serverless\nDESCRIPTION: Commands to install the necessary packages for developing Ts.ED serverless applications with AWS Lambda using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/platform-serverless.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-serverless serverless serverless-offline\nnpm install --save-dev @types/aws-lambda\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tsed/platform-serverless serverless serverless-offline\nyarn add -D @types/aws-lambda\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tsed/platform-serverless serverless serverless-offline\npnpm add -D @types/aws-lambda\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @tsed/platform-serverless serverless serverless-offline\nbun add -D @types/aws-lambda\n```\n\n----------------------------------------\n\nTITLE: Installing AJV validation package with npm\nDESCRIPTION: Command to install AJV validation package and its Ts.ED integration using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save ajv @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Using @Docs Decorator for Swagger Documentation\nDESCRIPTION: Demonstration of using the @Docs decorator to specify which Swagger documentation a controller should be included in.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/calendars\")\n@Docs(\"api-v2\")\nexport class CalendarCtrlV2 {\n  @Get(\"/\")\n  get() {}\n}\n\n@Controller(\"/users\")\n@Docs(\"api-v1\")\nexport class UsersCtrl {\n  @Get(\"/\")\n  get() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server for SSE\nDESCRIPTION: Server configuration to enable SSE by adding text/event-stream to accepted MIME types\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/sse/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\nimport \"@tsed/sse\";\n\n@Configuration({\n  acceptMimes: [\"application/json\", \"text/event-stream\"]\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Service Declaration with Decorators - TypeScript (v7)\nDESCRIPTION: Traditional way of declaring services using decorators in Ts.ED v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, Configuration, Constant, Inject} from \"@tsed/di\";\n\n@Injectable()\n// @Scope(ProviderScope.SINGLETON) // or Scope.REQUEST or Scope.INSTANcE\nexport class MyService {\n  @Configuration()\n  private settings: PlatformConfiguration;\n\n  @Constant(\"myConstant\", \"default\")\n  private myConstant: string;\n\n  @Inject()\n  private repository: MyReposity;\n\n  constructor() {\n    console.log(this.settings); // undefined available in v7 but defined in v8\n    console.log(this.myConstant); // undefined available in v7 but defined in v8\n    console.log(this.repository); // undefined available in v7 but defined in v8\n  }\n\n  $onInit() {\n    console.log(this.settings); // defined\n    console.log(this.myConstant); // defined\n    console.log(this.repository); // defined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Passport.js and Ts.ED Passport Package\nDESCRIPTION: Command to install the required npm packages for Passport.js integration with Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/passport/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/passport passport\nnpm install --save-dev @types/passport\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Server in Ts.ED\nDESCRIPTION: Example of how to disable HTTP server by setting httpPort to false in configuration.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/configuration.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/di\";\n\n@Configuration({\n  httpPort: false\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Installing Terminus and Ts.ED Terminus Module\nDESCRIPTION: Commands to install the required packages using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @godaddy/terminus @tsed/terminus\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @godaddy/terminus @tsed/terminus\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @godaddy/terminus @tsed/terminus\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @godaddy/terminus @tsed/terminus\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration - TypeScript\nDESCRIPTION: Required Vite configuration settings with SWC for Ts.ED v8 compatibility.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  plugins: [\n    swc.vite({\n      sourceMaps: \"inline\",\n      jsc: {\n        target: \"es2022\",\n        externalHelpers: true,\n        keepClassNames: true,\n        parser: {\n          syntax: \"typescript\",\n          tsx: true,\n          decorators: true,\n          dynamicImport: true,\n          importMeta: true,\n          preserveAllComments: true\n        },\n        transform: {\n          useDefineForClassFields: false,\n          legacyDecorator: true,\n          decoratorMetadata: true\n        }\n      },\n      module: {\n        type: \"es6\",\n        strict: false,\n        strictMode: true,\n        lazy: false,\n        noInterop: false\n      },\n      isModule: true\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing API Data in Vue Component\nDESCRIPTION: This snippet imports the API data from an external file and sets it up for use in the Vue component. It's using the Vue 3 script setup syntax to make the data available in the template.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/api.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {data} from './api.data';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED OIDC Provider Package\nDESCRIPTION: Commands to install the required npm packages for integrating OIDC provider functionality into a Ts.ED application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/oidc-provider/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/oidc-provider\nnpm install --save oidc-provider\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Engines via NPM\nDESCRIPTION: Command to install the @tsed/engines package using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tsed/engines\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/platform-log-request package\nDESCRIPTION: Command to install the @tsed/platform-log-request package using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-request/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-log-request\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ts.ED Development Environment\nDESCRIPTION: These commands clone the Ts.ED repository, install dependencies, and compile the TypeScript code. It's the initial setup required for contributing to the project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/tsed.git\nyarn\nyarn tsc --build\n```\n\n----------------------------------------\n\nTITLE: ParseService Implementation for Ts.ED\nDESCRIPTION: Implementation of a ParseService class that converts string values to numbers, used in the testing examples.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class ParseService {\n  toNumber(value: string) {\n    return Number(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check Response Example\nDESCRIPTION: Example JSON response from a health check endpoint.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/terminus.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"info\": [\n    {\n      \"mongo\": \"ok\"\n    },\n    {\n      \"redis\": \"ok\"\n    }\n  ],\n  \"details\": [\n    {\n      \"mongo\": \"ok\"\n    },\n    {\n      \"redis\": \"ok\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Command with Ts.ED CLI\nDESCRIPTION: Command to execute a custom command using the Ts.ED CLI runner.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntsed run hello-command\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/platform-router package\nDESCRIPTION: Command to install the @tsed/platform-router package using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-router/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-router\n```\n\n----------------------------------------\n\nTITLE: Installing TestContainers for Mongoose Testing\nDESCRIPTION: This snippet shows how to install the @tsed/testcontainers-mongo package for testing Mongoose code using TestContainers. It includes installation commands for npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mongoose.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add --dev @tsed/testcontainers-mongo\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Params Package\nDESCRIPTION: Command to install the @tsed/platform-params package using npm package manager\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-params/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-params\n```\n\n----------------------------------------\n\nTITLE: Serverless YAML Configuration\nDESCRIPTION: Serverless framework configuration for AWS Lambda setup with Node.js runtime and HTTP endpoints.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: timeslots\n\nframeworkVersion: \"2\"\n\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  lambdaHashingVersion: \"20201221\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  timeslots:\n    handler: dist/handler.getTimeslots\n    events:\n      - http:\n          path: /timeslots\n          method: get\n```\n\n----------------------------------------\n\nTITLE: Service Declaration with Functional API - TypeScript (v8)\nDESCRIPTION: New functional approach to declaring services in Ts.ED v8.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injectable, inject, configuration, constant} from \"@tsed/di\";\nimport {MyRepository} from \"./inject-model.js\";\nimport {injector} from \"./injector.js\";\n\nexport class MyService {\n  private settings = configuration();\n  private myConstant = constant(\"myConstant\", \"default\");\n  private repository = inject(MyRepository);\n\n  constructor() {\n    console.log(this.settings);\n    console.log(this.myConstant);\n    console.log(this.repository);\n  }\n}\n\ninjectable(MyService); // .scope(Scope.SINGLETON) by default\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Lazy-loading in Ts.ED\nDESCRIPTION: Required tsconfig.json configuration for using lazy-loading with Webpack. Sets the module to 'esnext' and moduleResolution to 'node' to enable dynamic imports.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/providers-lazy-loading.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ts.ED Test Suite\nDESCRIPTION: This command executes the test suite for the Ts.ED project. It's crucial to run tests before submitting a pull request to ensure code quality.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for ESM Development\nDESCRIPTION: Demonstrates how to update the scripts in package.json for ESM development with nodemon and swc.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"npm run barrels && nodemon src/index.ts\",\n    \"start:prod\": \"cross-env NODE_ENV=production node --import @swc-node/register/register-esm src/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Framework Benchmark Results Table\nDESCRIPTION: Markdown table showing performance metrics for various Node.js frameworks including Fastify, Koa, NestJS, Express, and Ts.ED. Metrics include version numbers, router presence, requests per second, latency, and throughput.\nSOURCE: https://github.com/tsedio/tsed/blob/production/benchmarks/ISSUE_COMMENT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                  | Version | Router | Requests/s | Latency | Throughput/Mb |\n| :--------------- | ------: | -----: | :--------: | ------: | ------------: |\n| fastify          |  3.29.4 |      ✓ |  71505.5   |   13.48 |         12.75 |\n| koa              |  2.13.4 |      ✗ |  60188.0   |   17.46 |         10.73 |\n| nest-fastify     |   8.4.3 |      ✓ |  55904.9   |   20.59 |          9.97 |\n| fastify-injector |  3.29.4 |      ✓ |  55235.2   |   17.60 |         12.59 |\n| express-injector |  4.18.1 |      ✗ |  18922.9   |   52.23 |          4.31 |\n| express          |  4.18.1 |      ✓ |  17795.2   |   55.56 |          3.17 |\n| nest             |   8.4.3 |      ✓ |  17642.8   |   71.10 |          4.24 |\n| fastify-big-json |  3.29.4 |      ✓ |  15840.7   |   62.44 |        182.26 |\n| express-morgan   |  4.18.1 |      ✗ |  13839.4   |   77.28 |          2.47 |\n| tsed-express     |  7.61.0 |      ✓ |    N/A     |     N/A |           N/A |\n| tsed-koa         |  7.61.0 |      ✓ |    N/A     |     N/A |           N/A |\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/schema package using npm\nDESCRIPTION: Command to install the @tsed/schema package and its type definitions using npm. This is the recommended way to add the package to your project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/schema/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/schema\n```\n\n----------------------------------------\n\nTITLE: Starting a Ts.ED project with npm\nDESCRIPTION: Use npm to start the Ts.ED project after initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/components-scan package with npm\nDESCRIPTION: This command installs the @tsed/components-scan package using npm. It adds the package as a dependency to the project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/components-scan/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/components-scan\n```\n\n----------------------------------------\n\nTITLE: Creating Serverless Lambda Controller\nDESCRIPTION: Example of a TypeScript controller class for handling timeslots in a serverless context using Ts.ED decorators and services.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\";\nimport {TimeslotsService} from \"../services/TimeslotsService.js\";\nimport {TimeslotModel} from \"../models/TimeslotModel.js\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsLambda {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  get(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Prisma Configuration\nDESCRIPTION: Prisma schema and environment configuration for MySQL database.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=\"mysql://USER:PASSWORD@HOST:PORT/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Middlewares Package\nDESCRIPTION: Command to install the @tsed/platform-middlewares package using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-middlewares/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-middlewares\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Vike Package and Dependencies\nDESCRIPTION: This command installs the Vike package for Ts.ED along with its required dependencies. It uses npm to install @tsed/vike, vite version 4, and vike.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/vike/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/vike vite@4 vike\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Ts.ED Logger\nDESCRIPTION: Shows how to properly shut down the Ts.ED logger when the program exits, ensuring all logs are written and resources are released.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {$log} from \"@tsed/logger\";\n\n$log.shutdown().then(() => {\n  console.log(\"Complete\");\n});\n```\n\n----------------------------------------\n\nTITLE: JWKS Output Structure\nDESCRIPTION: Example of the JSON structure output from JWKS key generation, showing the format of generated keys including cryptographic parameters.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/jwks/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"crv\": \"Ed25519\",\n      \"x\": \"qXJAZ8I51Jmg5f_yvhEqB2_CLC1XL9RJJa1YsKMLX5s\",\n      \"d\": \"nWIdnqq8OmeLLMyzCeVbjvw8rtrW-eD0PxnXueM_xSc\",\n      \"kty\": \"OKP\",\n      \"kid\": \"fmXsBOI3FalekeOAdCuHswQFds4bkrvj9YLeCjLaiBk\",\n      \"alg\": \"EdDSA\",\n      \"use\": \"sig\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Prisma Schema Configuration\nDESCRIPTION: Initial Prisma schema configuration with SQLite database and generators setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ngenerator tsed {\n  provider = \"tsed-prisma\"\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Ts.ED Documentation Locally\nDESCRIPTION: This command starts a local server to preview the Ts.ED documentation. It's useful when making changes to the project's documentation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn vuepress:docs:serve\n```\n\n----------------------------------------\n\nTITLE: Storing Global Injector Instance - TypeScript (v7)\nDESCRIPTION: Example of storing the injector instance globally in Ts.ED v7 during bootstrap (not recommended approach).\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  try {\n    const platform = await PlatformExpress.bootstrap(Server);\n    // Store the injector instance\n    global.injector = platform.injector;\n\n    await platform.listen();\n\n    process.on(\"SIGINT\", () => {\n      platform.stop();\n    });\n  } catch (error) {\n    $log.error({event: \"SERVER_BOOTSTRAP_ERROR\", message: error.message, stack: error.stack});\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Partner Link YAML Configuration\nDESCRIPTION: YAML configuration block defining properties for a partner link. Includes title, URL, logo source path and styling class.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- title: schnell.digital\n  href: https://schnell.digital/\n  src: /partners/schnell.svg\n  class: \"max-w-[120px]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED CLI with yarn\nDESCRIPTION: Use yarn to set the version and run the Ts.ED CLI to initialize a new project in the current directory.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn set version berry\nyarn dlx -p @tsed/cli tsed init .\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Nexus dependencies for Express.js\nDESCRIPTION: Command to install required packages for using GraphQL Nexus with Ts.ED and Express.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-nexus.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo nexus graphql @apollo/server\nnpm install --save-dev apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: Specifying Ts.ED package versions in package.json\nDESCRIPTION: Example of how to specify fixed versions for Ts.ED packages in package.json to prevent compatibility issues.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@tsed/common\": \"7.53.0\",\n    \"@tsed/di\": \"7.53.0\",\n    \"@tsed/core\": \"7.53.0\",\n    \"@tsed/exceptions\": \"7.53.0\",\n    \"@tsed/platform-express\": \"7.53.0\",\n    \"@tsed/swagger\": \"7.53.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URI Format for AJV in Ts.ED\nDESCRIPTION: Demonstrates how to create a custom URI format validator using the @Formats decorator in Ts.ED. This implementation allows empty strings as valid URIs, which is not allowed by the default validator.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Formats, FormatsMethods} from \"@tsed/ajv\";\n\nconst NOT_URI_FRAGMENT = /\\/|:/;\nconst URI =\n  /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@\\/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@\\/?]|%[0-9a-f]{2})*)?$/i;\n\n@Formats(\"uri\", {type: \"string\"})\nexport class UriFormat implements FormatsMethods<string> {\n  validate(str: string): boolean {\n    // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n    return str === \"\" ? true : NOT_URI_FRAGMENT.test(str) && URI.test(str);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript Integration - JavaScript Example\nDESCRIPTION: Example of customizing Swagger UI using JavaScript integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/openapi-utils/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(SwaggerUIBuilder.config);\n\ndocument.addEventListener(\"swagger.init\", (evt) => {\n  console.log(SwaggerUIBuilder.ui);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Project with Ts.ED CLI\nDESCRIPTION: Commands to initialize a new Ts.ED project with Prisma integration using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p @tsed/cli tsed init tsed-prisma\n\nyarn set version berry\nyarn dlx -p @tsed/cli tsed init tsed-prisma\n\npnpm --package=@tsed/cli dlx tsed init tsed-prisma\n\nbunx -p @tsed/cli tsed init tsed-prisma\n```\n\n----------------------------------------\n\nTITLE: Installing MikroORM for Ts.ED\nDESCRIPTION: Commands to install MikroORM core, Ts.ED integration, and database-specific drivers using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/mikroorm.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mongodb     # for mongo\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mysql       # for mysql/mariadb\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mariadb     # for mysql/mariadb\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/postgresql  # for postgresql\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/sqlite      # for sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Pulse Dependencies\nDESCRIPTION: Package installation commands for different package managers to add Pulse and its Ts.ED integration\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/pulse.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @tsed/pulse @pulsecron/pulse\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/pulse @pulsecron/pulse\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/pulse @pulsecron/pulse\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/pulse @pulsecron/pulse\n```\n\n----------------------------------------\n\nTITLE: Testing with Mocked Service using PlatformTest.create()\nDESCRIPTION: Example showing how to mock a service during unit testing using PlatformTest.create(). This approach allows testing a controller while providing a mock implementation for a database service to avoid actual database operations during tests.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MyCtrl} from \"../controllers/MyCtrl\";\nimport {DbService} from \"../services/DbService\";\n\ndescribe(\"MyCtrl\", () => {\n  // bootstrap your Server to load all endpoints before run your test\n  beforeEach(() =>\n    PlatformTest.create({\n      imports: [\n        {\n          token: DbService,\n          use: {\n            getData: () => {\n              return \"test\";\n            }\n          }\n        }\n      ]\n    })\n  );\n  afterEach(() => PlatformTest.reset());\n});\n```\n\n----------------------------------------\n\nTITLE: Importing UseCache Decorator in Ts.ED v7\nDESCRIPTION: Shows the change in importing the UseCache decorator in Ts.ED v7, which now requires installing @tsed/platform-cache.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\n- import {UseCache} from \"@tsed/common\";\n+ import {UseCache} from \"@tsed/platform-cache\";\n\n@Injectable()\nexport class MyService {\n  @UseCache()\n  method() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ajv and Ts.ED Ajv module\nDESCRIPTION: Commands to install the required npm packages for Ajv integration with Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/ajv/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save ajv\nnpm install --save @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/cli-core module with yarn\nDESCRIPTION: Command to install the @tsed/cli-core package using yarn package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add  @tsed/cli-core\n```\n\n----------------------------------------\n\nTITLE: Server Startup Output\nDESCRIPTION: Example output when starting a Ts.ED server, showing initialization logs and confirmation of successful server startup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/getting-started.md#2025-04-16_snippet_3\n\nLANGUAGE: ansi\nCODE:\n```\n@/introduction/snippets/start.ansi\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Response Filter Package\nDESCRIPTION: Command to install the necessary dependencies for using the @tsed/platform-response-filter package along with other required Ts.ED packages.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-response-filter/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/di @tsed/platform-views @tsed/schema @tsed/json-schema @tsed/platform-response-filter\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Scalar Package\nDESCRIPTION: Command to install the @tsed/scalar package via npm\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/scalar/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/scalar\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Pulse Module\nDESCRIPTION: Commands to install the required packages for using Ts.ED Pulse module.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/pulse/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/pulse\nnpm install --save @pulsecron/pulse\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Ts.ED Feature Changes\nDESCRIPTION: These commands demonstrate the process of committing changes, running tests, rebasing from the production branch, and pushing the feature branch. It's the workflow for submitting changes to the Ts.ED project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"feat(domain): Your message\"\nnpm run test\ngit fetch\ngit rebase origin/production\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.io dependencies for Ts.ED\nDESCRIPTION: Command to install the required npm packages for using Socket.io with Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/socketio/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save socket.io @types/socket.io @tsed/socketio\n```\n\n----------------------------------------\n\nTITLE: Installing AJV validation package with yarn\nDESCRIPTION: Command to install AJV validation package and its Ts.ED integration using yarn.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add ajv @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED engines with package managers\nDESCRIPTION: Commands to install @tsed/engines package using different package managers like npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @tsed/engines\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/engines\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/engines\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/engines\n```\n\n----------------------------------------\n\nTITLE: Accessing Injector Instance - TypeScript (v8)\nDESCRIPTION: New utility methods in Ts.ED v8 for accessing the injector instance directly.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {injector, inject} from \"@tsed/di\";\nimport {MyService} from \"./services/MyService.js\";\n\nconst myService = injector().get(MyService);\n// short version\nconst myService = inject(MyService);\n```\n\n----------------------------------------\n\nTITLE: Recipe Class Implementation\nDESCRIPTION: Basic TypeScript class implementation for Recipe type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-typegraphql.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Recipe {\n  id: string;\n  title: string;\n  description?: string;\n  creationDate: Date;\n  ingredients: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Setup Interaction\nDESCRIPTION: Example output of the Ts.ED CLI setup process, showing the interactive prompts for configuring a new project. It demonstrates selecting options for platform, architecture, database, and development tools.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/getting-started.md#2025-04-16_snippet_1\n\nLANGUAGE: ansi\nCODE:\n```\n@/introduction/snippets/init.ansi\n```\n\n----------------------------------------\n\nTITLE: Generated InputTags Formio Schema\nDESCRIPTION: Example of the Formio schema output generated for an InputTags field.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/schema-formio/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": [\n    {\n      \"key\": \"test\",\n      \"type\": \"tags\",\n      \"input\": true,\n      \"label\": \"Test\",\n      \"storeas\": \"array\",\n      \"tableView\": false,\n      \"disabled\": false,\n      \"validate\": {\n        \"required\": false\n      }\n    }\n  ],\n  \"display\": \"form\",\n  \"machineName\": \"model\",\n  \"name\": \"model\",\n  \"title\": \"Model\",\n  \"type\": \"form\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Core Package via NPM\nDESCRIPTION: Command to install the @tsed/core package as a project dependency using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/hooks/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/core\n```\n\n----------------------------------------\n\nTITLE: Building Ts.ED Packages for NPM\nDESCRIPTION: This command prepares all Ts.ED packages for publishing to the NPM registry. It generates a ./dist directory in the root of the repository.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Cloning Ts.ED Repository in Bash\nDESCRIPTION: This command clones the forked Ts.ED repository to the local machine. It's the first step in setting up the development environment for contributing to Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YOUR_USERNAME/tsed.git\n```\n\n----------------------------------------\n\nTITLE: Starting a Feature Branch in Ts.ED Development\nDESCRIPTION: These commands demonstrate how to start a new feature branch in Ts.ED development. It shows both the manual Git method and the Gflow method.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit branch --no-track -b feat-branch-name origin/production  # !IMPORTANT\nyarn\n\n## OR\ngflow new feat name_of_feat\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest with TestContainers Mongo\nDESCRIPTION: Jest configuration setup including global setup and teardown files for MongoDB test containers\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/testcontainers-mongo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  globalSetup: [\"jest.setup.js\"],\n  globalTeardown: [\"jest.teardown.js\"]\n};\n\n// jest.setup.js\nconst {TestContainersMongo} = require(\"@tsed/testcontainers-mongo\");\nmodule.exports = async () => {\n  await TestContainersMongo.startMongoServer();\n};\n\n// jest.teardown.js\nconst {TestContainersMongo} = require(\"@tsed/testcontainers-mongo\");\nmodule.exports = async () => {\n  await TestContainersMongo.stopMongoServer();\n};\n```\n\n----------------------------------------\n\nTITLE: Stubbing a Middleware Method in API Testing with Vitest\nDESCRIPTION: Example of stubbing a middleware method (like authentication) when testing an API endpoint with Vitest. Uses TestMongooseContext for database setup.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/testing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {it, expect, describe, beforeAll, afterAll, beforeEach} from \"vitest\";\nimport {PlatformTest} from \"@tsed/platform-http/testing\";\nimport SuperTest from \"supertest\";\nimport {TestMongooseContext} from \"@tsed/testing-mongoose\";\nimport {HelloWorldController} from \"./HelloWorldController.js\";\nimport {Server} from \"../../Server.js\";\nimport {AuthMiddleware} from \"../../middlewares/auth.middleware.js\";\n\ndescribe(\"HelloWorldController\", () => {\n  beforeAll(async () => {\n    await TestMongooseContext.bootstrap(Server)();\n\n    const authMiddleware = PlatformTest.get<AuthMiddleware>(AuthMiddleware);\n    jest.spyOn(authMiddleware, \"use\").mockResolvedValue(true);\n  });\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n  afterAll(TestMongooseContext.reset);\n\n  it(\"should return value\", async () => {\n    const request = SuperTest(PlatformTest.callback());\n    const response = await request.get(\"/rest/hello-world\").expect(200);\n    expect(response.text).toEqual(\"hello\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Template Engines via NPM\nDESCRIPTION: NPM install commands for various template engines supported by @tsed/engines. The package will attempt to load templates with the same key name according to their order number.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install atpl\nnpm install bracket-template\nnpm install dot\nnpm install dustjs-helpers\nnpm install dustjs-linkedin\nnpm install ect\nnpm install ejs\nnpm install hamlet\nnpm install hamljs\nnpm install haml-coffee\nnpm install handlebars\nnpm install hogan.js\nnpm install htmling\nnpm install jazz\nnpm install just\nnpm install liquor\nnpm install lodash\nnpm install marko\nnpm install mote\nnpm install mustache\nnpm install nunjucks\nnpm install plates\nnpm install pug\nnpm install ractive\nnpm install react\nnpm install slm\nnpm install squirrelly\nnpm install swig-templates\nnpm install teacup\nnpm install templayed\n```\n\n----------------------------------------\n\nTITLE: Installing Logger Package in Ts.ED\nDESCRIPTION: Commands to install the @tsed/logger package using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/logger.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @tsed/logger\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/logger\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/logger\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/logger\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Terminus Module\nDESCRIPTION: Command to install the @godaddy/terminus and @tsed/terminus modules using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/terminus/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @godaddy/terminus @tsed/terminus\n```\n\n----------------------------------------\n\nTITLE: Installing Platform Cache Package\nDESCRIPTION: Commands to install @tsed/platform-cache package using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @tsed/platform-cache\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @tsed/platform-cache\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/platform-cache\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @tsed/platform-cache\n```\n\n----------------------------------------\n\nTITLE: Installing SSE Module Dependencies\nDESCRIPTION: Package installation commands for @tsed/sse module using different package managers\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/server-sent-events.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @tsed/sse\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --save @tsed/sse\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --save @tsed/sse\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add --save @tsed/sse\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch in Ts.ED Development\nDESCRIPTION: These commands demonstrate the process of pushing a feature branch in Ts.ED development. It includes rebasing from the production branch and running tests before pushing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\ngit fetch\ngit rebase origin/production\ngit push -f\n\n# OR using gflow (run fetch, rebase and push for you)\ngflow push\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED CLI with Package Managers\nDESCRIPTION: Commands to install and initialize a Ts.ED project using different package managers (npm, yarn, pnpm, bun).\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-express.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx -p @tsed/cli tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn set version berry\nyarn dlx -p @tsed/cli tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm --package=@tsed/cli dlx tsed init .\n```\n\nLANGUAGE: sh\nCODE:\n```\nbnx -p @tsed/cli tsed init .\n```\n\n----------------------------------------\n\nTITLE: Installing TypeGraphQL dependencies for Ts.ED with Koa.js\nDESCRIPTION: Command to install necessary npm packages for using TypeGraphQL with Ts.ED and Koa.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/graphql/typegraphql/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo graphql type-graphql @apollo/server @as-integration/koa @apollo/datasource-rest graphql-scalars\nnpm install --save-dev apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Exceptions Package\nDESCRIPTION: Command to install the @tsed/platform-exceptions package using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-exceptions/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-exceptions\n```\n\n----------------------------------------\n\nTITLE: VitePress Homepage YAML Configuration\nDESCRIPTION: YAML configuration for Ts.ED framework's homepage using VitePress. Includes meta tags, hero section configuration, testimonials, feature list, supported frameworks list, and partner organizations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/index.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: home\nhead:\n  - - meta\n    - name: description\n      content: Ts.ED is a modern Bun.js/Node.js framework built with TypeScript on top of Express.js/Koa.js/Fastify.js. It offers a flexible structure with a fast learning curve, specifically designed to improve the developer experience. Ts.ED provides numerous decorators and guidelines to make your code more readable and less error-prone. It supports various platforms and tools, including Node.js/Bun.js, Express.js/Koa.js, CLI, and serverless architectures (e.g., AWS).\n  - - meta\n    - name: keywords\n      content: ts.ed framework express koa fastify aws cli di rest graphql typescript node.js bun.js javascript native ESM decorators jsonschema class models providers pipes middlewares testing developer\n\nhero:\n  name: \"Ts.ED\"\n  text: \"A modern framework written in TypeScript\"\n  tagline: \"A flexible framework on top of Express.js/Koa.js/Fastify.js with a fast learning curve, designed to enhance the developer experience\"\n  actions:\n    - theme: brand\n      text: What is Ts.ED?\n      link: /introduction/what-is-tsed\n    - theme: alt\n      text: Getting started\n      link: /introduction/getting-started\n    - theme: alt\n      text: Become sponsor\n      link: https://github.com/sponsors/Romakita\n```\n\n----------------------------------------\n\nTITLE: Insecure Constructor Pattern in Ts.ED Models\nDESCRIPTION: Demonstrates an insecure constructor pattern in Ts.ED models that could lead to prototype pollution. This behavior is disabled by default in v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyModel {\n  constructor(obj: any = {}) {\n    Object.assign(this, obj); // potential prototype pollution\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Handlers for Same Route in Ts.ED v6\nDESCRIPTION: Shows how to register multiple handlers for the same route using decorators in Ts.ED v6, which is no longer supported in v7.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v6.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Controller(\"/\")\nclass MyController {\n  @Get(\"/mypath\")\n  getA() {}\n\n  @Get(\"/mypath\")\n  getB() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/formio-types package using npm\nDESCRIPTION: This command installs the @tsed/formio-types package and its type definitions using npm. It's the recommended way to add this package to your project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/formio-types/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/formio-types\n```\n\n----------------------------------------\n\nTITLE: Installing Vike and Ts.ED Dependencies\nDESCRIPTION: Command to install Vike, @tsed/vike, and Vite v4 as project dependencies.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/vike.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install vike @tsed/vike vite@4 --save\n```\n\n----------------------------------------\n\nTITLE: Installing Database-Specific Drivers\nDESCRIPTION: Commands to install database-specific drivers for different supported databases (PostgreSQL, SQLite, MySQL).\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/objection/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg\nnpm install sqlite3\nnpm install mysql\nnpm install mysql2\n```\n\n----------------------------------------\n\nTITLE: Recompiling Ts.ED Source Code\nDESCRIPTION: This command recompiles the TypeScript source code of the Ts.ED project. It's useful when making changes to the source and need to rebuild the project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn tsc --build\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Members and Contributors in Vue Template\nDESCRIPTION: This template displays the team members using the VPTeamMembers component and includes a section for GitHub contributors. It utilizes responsive design with Tailwind CSS classes for layout adjustments between mobile and desktop views.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/more/team.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"text-2xl sm:text-5xl text-center pb-5\">Team members</div>\n\n<VPTeamMembers animate size=\"small\" :members=\"members\" />\n\n<HomeContainer animate>\n<div class=\"flex flex-col sm:flex-row pt-10 sm:pt-20 gap-10\">\n<div class=\"flex items-center order-first sm:order-last\">\n    <div class=\"flex sm:block\">\n      <div class=\"text-2xl sm:text-5xl flex items-center pb-5\">\n        <div>Our awesome <strong>contributors</strong></div>\n      </div>\n      <div class=\"max-w-[100px] relative\">\n        <div\n          class=\"animate-[ping_3s_infinite] absolute inline-flex h-full rounded-full bg-red-400 opacity-75 w-[100px]\"\n        />\n        <MessageCircleHeart class=\"w-[100px] z-2 relative\" />\n      </div>\n    </div>\n  </div>\n\n  <GithubContributors />\n  \n</div>\n</HomeContainer>\n```\n\n----------------------------------------\n\nTITLE: Serving Ts.ED Documentation Locally\nDESCRIPTION: This command starts a local server to preview the Ts.ED documentation, including API docs generated from code comments.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run doc:serve\n```\n\n----------------------------------------\n\nTITLE: Installing OIDC Provider Wildcard Redirect URI Plugin with npm\nDESCRIPTION: Command to install the OIDC Provider Wildcard Redirect URI plugin using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/security/oidc-provider-plugin-wildcard-redirect-uri/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/oidc-provider-plugin-wildcard-redirect-uri\n```\n\n----------------------------------------\n\nTITLE: Building Project Dependencies with Yarn\nDESCRIPTION: Commands to build project dependencies and current package using Yarn package manager\nSOURCE: https://github.com/tsedio/tsed/blob/production/tools/integration/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Unsecure Constructor Pattern in Models\nDESCRIPTION: An example of a potentially insecure constructor pattern that could lead to prototype pollution when the disableUnsecureConstructor option is disabled.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/json-mapper.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyModel {\n  constructor(obj: any = {}) {\n    Object.assign(this, obj); // potential prototype pollution\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED JSON Mapper Dependencies\nDESCRIPTION: Command to install the required Ts.ED packages for JSON mapping functionality including schema and json-mapper modules via npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/json-mapper/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/schema @tsed/json-mapper\n```\n\n----------------------------------------\n\nTITLE: Installing Passport.js with npm/yarn/pnpm/bun\nDESCRIPTION: Commands to install Passport.js using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/passport.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save passport\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add passport\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add passport\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add passport\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Core Package\nDESCRIPTION: Command to install the core package of Ts.ED framework using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-views/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/core\n```\n\n----------------------------------------\n\nTITLE: Installing Serverless Offline Plugin\nDESCRIPTION: Command to install the serverless-offline plugin for local API Gateway and Lambda emulation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverless plugin install -n serverless-offline\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/core package using npm\nDESCRIPTION: This command installs the @tsed/core package as a dependency in your project using npm. It's the primary way to add the Ts.ED core functionality to your application.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/normalize-path/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/core\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents (search engine crawlers and bots) to access the entire website. The wildcard user-agent (*) targets all bots, and the Allow directive permits access to all paths.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Injecting Router in Ts.ED Controller\nDESCRIPTION: Demonstrates how to inject and use the PlatformRouter in a Ts.ED controller to add custom routes.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/controllers.md#2025-04-16_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Injectable, PlatformRouter} from \"@tsed/common\";\n\n@Controller(\"/\")\n@Injectable()\nclass MyController {\n  constructor(router: PlatformRouter) {\n    router.get(\"/my-middleware\", this.customMiddleware);\n  }\n\n  protected customMiddleware(req: any, res: any, next: any) {\n    next();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Files in ESM TypeScript\nDESCRIPTION: Demonstrates how to import JSON files in ESM-compatible TypeScript code using the assert syntax.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/migrate-from-v7.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from \"./config.json.js\" assert {type: \"json\"};\n```\n\n----------------------------------------\n\nTITLE: Starting Local Emulation\nDESCRIPTION: Command to start the local emulation of API Gateway and Lambda.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverless offline\n```\n\n----------------------------------------\n\nTITLE: Storing Injector Instance Globally in Ts.ED v7 (TypeScript)\nDESCRIPTION: Example of storing the injector instance in a global variable during bootstrap in Ts.ED v7. This approach is not recommended due to potential issues with global variables and availability.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function bootstrap() {\n  try {\n    const platform = await PlatformExpress.bootstrap(Server);\n    // Store the injector instance\n    global.injector = platform.injector;\n\n    await platform.listen();\n\n    process.on(\"SIGINT\", () => {\n      platform.stop();\n    });\n  } catch (error) {\n    $log.error({event: \"SERVER_BOOTSTRAP_ERROR\", message: error.message, stack: error.stack});\n  }\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Request Scope Chaining in Ts.ED with Functional API\nDESCRIPTION: Demonstrates an incorrect implementation of request-scoped providers using the functional API where the controller has request scope but the service has singleton scope, preventing request-specific behavior.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/injection-scopes.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Get, registerProvider} from \"@tsed/common\";\nimport {inject} from \"@tsed/di\";\nimport {useDecorators} from \"@tsed/core\";\n\nexport class MyService {\n  random = Math.random();\n\n  get() {\n    return this.random;\n  }\n}\n\nregisterProvider({\n  provide: MyService,\n  scope: \"singleton\"\n});\n\nfunction RandomController() {\n  const myService = inject(MyService);\n\n  return useDecorators(\n    Get(\"/\"),\n    () => {\n      return myService.get();\n    }\n  );\n}\n\nregisterProvider({\n  provide: RandomController,\n  type: \"controller\",\n  use: [RandomController], // function and endpoint\n  scope: \"request\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing MikroORM Dependencies with NPM/Yarn\nDESCRIPTION: Command-line instructions for installing MikroORM and its database-specific drivers using either NPM or Yarn package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/mikro-orm/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mongodb     # for mongo\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mysql       # for mysql/mariadb\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/mariadb     # for mysql/mariadb\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/postgresql  # for postgresql\nnpm install @mikro-orm/core @tsed/mikro-orm @mikro-orm/sqlite      # for sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing OIDC Provider Dependencies with npm\nDESCRIPTION: Command to install required packages for OIDC provider integration using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save oidc-provider\nnpm install --save @tsed/oidc-provider @tsed/jwks @tsed/adapters\n```\n\n----------------------------------------\n\nTITLE: Factory Declaration with Old API in Ts.ED v7 (TypeScript)\nDESCRIPTION: Example of declaring a factory using the old API in Ts.ED v7 for comparison with the new functional API in v8.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration, registerProvider} from \"@tsed/di\";\nimport {DatabaseConnection} from \"connection-lib\";\n\nexport const CONNECTION = Symbol.for(\"CONNECTION\");\n\nregisterProvider<DatabaseConnection>({\n  provide: CONNECTION,\n  deps: [Configuration],\n  useFactory(configuration: Configuration) {\n    const options = configuration.get<any>(\"myOptions\");\n\n    return new DatabaseConnection(options);\n  },\n  hooks: {\n    $onDestroy(connection) {\n      return connection.close();\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Jest Test Scripts to Package.json\nDESCRIPTION: Test script configurations for package.json that enable various testing scenarios including standard tests, watch mode, coverage reports, debugging, and end-to-end testing.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/jest.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage\",\n    \"test:debug\": \"node --inspect-brk -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./jest.config.e2e.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/exceptions package with npm\nDESCRIPTION: This command installs the @tsed/exceptions package as a project dependency using npm. The package provides classes for throwing standard HTTP exceptions in Ts.ED framework or pure Express applications.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/specs/exceptions/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/exceptions\n```\n\n----------------------------------------\n\nTITLE: Installing Keycloak Dependencies\nDESCRIPTION: Package installation commands for keycloak-connect and express-session using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/keycloak.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save keycloak-connect express-session\nnpm install --save-dev @types/express-session\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add keycloak-connect express-session\nyarn add -D @types/express-session\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add keycloak-connect express-session\npnpm add -D @types/express-session\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add keycloak-connect express-session\nbun add -D @types/express-session\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger dependencies for Ts.ED\nDESCRIPTION: Command to install the required Swagger dependencies for use with Ts.ED framework.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/swagger.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/swagger\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript in Ts.ED Project\nDESCRIPTION: These commands compile the TypeScript code in the Ts.ED project. They can be run using yarn, npm, or directly with tsc.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsc\n# or\nyarn tsc\n# or\nnpm run tsc\n```\n\n----------------------------------------\n\nTITLE: Finishing a Feature in Ts.ED Repository\nDESCRIPTION: This command, used by repo owners and maintainers, finalizes a feature by merging it into the production branch of the Ts.ED repository.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngflow finish\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Queries with Mocha in TypeScript\nDESCRIPTION: This snippet shows how to set up and run tests for a GraphQL server using Mocha and TypeScript. It includes creating a test server, defining a test query, and asserting the expected results.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect } from \"chai\";\nimport { PlatformTest } from \"@tsed/common\";\nimport { ApolloServer } from \"apollo-server\";\nimport { buildSchema } from \"type-graphql\";\nimport { RecipeResolver } from \"./RecipeResolver\";\nimport { RecipesService } from \"./RecipesService\";\n\ndescribe(\"GraphQLServer\", () => {\n  beforeEach(() => PlatformTest.create());\n  afterEach(() => PlatformTest.reset());\n\n  it(\"should run a graphql query\", async () => {\n    const recipesService = await PlatformTest.invoke<RecipesService>(RecipesService);\n\n    const schema = await buildSchema({\n      resolvers: [RecipeResolver],\n      container: {\n        get(token: any) {\n          return PlatformTest.get(token);\n        }\n      }\n    });\n\n    const server = new ApolloServer({ schema });\n\n    const result = await server.executeOperation({\n      query: `query {\n        recipes {\n          title\n          description\n        }\n      }`\n    });\n\n    expect(result.errors).to.be.undefined;\n    expect(result.data).to.deep.equal({\n      recipes: await recipesService.findAll()\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Queries with Jest in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up and run tests for a GraphQL server using Jest and TypeScript. It includes creating a test server, defining a test query, and asserting the expected results.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlatformTest } from \"@tsed/common\";\nimport { ApolloServer } from \"apollo-server\";\nimport { buildSchema } from \"type-graphql\";\nimport { RecipeResolver } from \"./RecipeResolver\";\nimport { RecipesService } from \"./RecipesService\";\n\ndescribe(\"GraphQLServer\", () => {\n  beforeEach(() => PlatformTest.create());\n  afterEach(() => PlatformTest.reset());\n\n  it(\"should run a graphql query\", async () => {\n    const recipesService = await PlatformTest.invoke<RecipesService>(RecipesService);\n\n    const schema = await buildSchema({\n      resolvers: [RecipeResolver],\n      container: {\n        get(token: any) {\n          return PlatformTest.get(token);\n        }\n      }\n    });\n\n    const server = new ApolloServer({ schema });\n\n    const result = await server.executeOperation({\n      query: `query {\n        recipes {\n          title\n          description\n        }\n      }`\n    });\n\n    expect(result.errors).toBeUndefined();\n    expect(result.data).toEqual({\n      recipes: await recipesService.findAll()\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a Ts.ED project with pnpm\nDESCRIPTION: Use pnpm to start the Ts.ED project after initialization.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/getting-started.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Dependencies using Package Managers\nDESCRIPTION: Commands to install Jest and its TypeScript dependencies using different package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/jest.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev jest ts-jest @types/jest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D jest ts-jest @types/jest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D jest ts-jest @types/jest\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D jest ts-jest @types/jest\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED SSE Package\nDESCRIPTION: Command to install the @tsed/sse package as a project dependency\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/sse/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/sse\n```\n\n----------------------------------------\n\nTITLE: Rendering API Component with Data\nDESCRIPTION: This snippet renders the Api component, passing in the modules and symbolTypes from the imported data. It demonstrates how to use dynamic props in a Vue component.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/api.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Api :modules=\"data.modules\" :symbol-types=\"data.symbolTypes\"  />\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL WebSocket Module\nDESCRIPTION: TypeScript code for a GraphQL WebSocket module that creates a WebSocket server and integrates it with Apollo Server plugins.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Constant, Inject, InjectorService, Module} from \"@tsed/di\";\nimport {useServer} from \"graphql-ws/lib/use/ws\";\nimport Http from \"node:http\";\nimport Https from \"node:https\";\nimport {WebSocketServer} from \"ws\";\nimport {GraphQLWSOptions} from \"./GraphQLWSOptions\";\n\n@Module()\nexport class GraphQLWSModule {\n  @Constant(\"graphqlWs\", {})\n  private settings: GraphQLWSOptions;\n\n  @Inject(Http.Server)\n  private httpServer: Http.Server | null;\n\n  @Inject(Https.Server)\n  private httpsServer: Https.Server | null;\n\n  @Inject()\n  private injector: InjectorService;\n\n  createWSServer(settings: GraphQLWSOptions) {\n    const wsServer = new WebSocketServer({\n      ...(this.settings.wsServerOptions || {}),\n      ...settings.wsServerOptions,\n      server: this.httpsServer || this.httpServer!,\n      path: settings.path\n    });\n\n    return useServer(\n      {\n        ...(this.settings.wsUseServerOptions || {}),\n        ...settings.wsUseServerOptions,\n        schema: settings.schema\n      },\n      wsServer\n    );\n  }\n\n  async $alterApolloServerPlugins(plugins: any[], settings: GraphQLWSOptions) {\n    const wsServer = await this.createWSServer(settings);\n\n    this.injector.logger.info(`Create GraphQL WS server on: ${settings.path}`);\n\n    return plugins.concat({\n      serverWillStart() {\n        return {\n          async drainServer() {\n            await wsServer.dispose();\n          }\n        };\n      }\n    } as any);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: NPM script configuration for running Prisma migrations.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prisma:migrate\": \"npx prisma migrate dev --name init\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration - JSON\nDESCRIPTION: Script configuration to add Prisma generate command in package.json\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prisma:generate\": \"npx prisma generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Formio and dependencies\nDESCRIPTION: Command to install the @tsed/formio package along with its required dependencies using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/formio/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/formio @tsed/mongoose\nnpm install --save formio mongoose\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Application\nDESCRIPTION: Commands for logging into Serverless Framework and deploying the application to AWS.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverless login\n$ serverless deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Resolver with TypeGraphQL\nDESCRIPTION: TypeScript code for a GraphQL resolver using TypeGraphQL decorators, demonstrating CRUD operations for a Recipe type.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Arg, Mutation, Query, Resolver} from \"type-graphql\";\nimport {Inject} from \"@tsed/di\";\nimport {ResolverController} from \"@tsed/typegraphql\";\nimport {Recipe} from \"../types/Recipe\";\nimport {RecipeService} from \"../services/RecipeService\";\nimport {RecipeInput} from \"./types/RecipeInput\";\n\n@ResolverController(Recipe)\n@Resolver((of) => Recipe)\nexport class RecipeResolver {\n  @Inject()\n  private recipeService: RecipeService;\n\n  @Query((returns) => Recipe)\n  async recipe(@Arg(\"id\") id: string) {\n    const recipe = await this.recipeService.findById(id);\n    if (recipe === undefined) {\n      throw new Error(\"Recipe not found\");\n    }\n    return recipe;\n  }\n\n  @Query((returns) => [Recipe])\n  recipes(): Promise<Recipe[]> {\n    return this.recipeService.findAll();\n  }\n\n  @Mutation((returns) => Recipe)\n  addRecipe(@Arg(\"recipe\") recipeInput: RecipeInput): Promise<Recipe> {\n    return this.recipeService.add(recipeInput);\n  }\n\n  @Mutation((returns) => Boolean)\n  async removeRecipe(@Arg(\"id\") id: string) {\n    try {\n      await this.recipeService.removeById(id);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Event Emitter Module for Ts.ED\nDESCRIPTION: Commands to install the Event Emitter module and its dependency using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/third-parties/event-emitter/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/event-emitter\nnpm install --save eventemitter2\n```\n\n----------------------------------------\n\nTITLE: Local Function Response\nDESCRIPTION: Example response when invoking the function locally.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCode\": 200,\n  \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v2.0! Your function executed successfully!\\\",\\n  \\\"input\\\": \\\"\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Nexus dependencies for Koa.js\nDESCRIPTION: Command to install required packages for using GraphQL Nexus with Ts.ED and Koa.js.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/graphql-nexus.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/apollo nexus graphql @apollo/server @as-integration/koa\nnpm install --save-dev apollo-server-testing\n```\n\n----------------------------------------\n\nTITLE: Configuring Ts.ED Server with GraphQL WebSocket Support\nDESCRIPTION: TypeScript code to configure a Ts.ED server with Apollo and GraphQL WebSocket support, including options for multiple GraphQL servers and WebSocket settings.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Configuration} from \"@tsed/common\";\nimport \"@tsed/platform-express\";\nimport \"@tsed/apollo\";\nimport \"@tsed/graphql-ws\";\nimport {join} from \"node:path\";\n\n@Configuration({\n  apollo: {\n    server1: {\n      // GraphQL server configuration\n      path: \"/\",\n      playground: true, // enable playground GraphQL IDE. Set false to use Apollo Studio\n      plugins: [], // Apollo plugins\n\n      wsServerOptions: {\n        // See options descriptions on\n      },\n      wsUseServerOptions: {\n        // See options descriptions on GraphQL WS\n      }\n\n      // Give custom server instance\n      // server?: (config: Config) => ApolloServer;\n\n      // ApolloServer options\n      // ...\n      // See options descriptions on https://www.apollographql.com/docs/apollo-server/api/apollo-server.html\n    }\n  },\n  graphqlWs: {\n    // global options\n    wsServerOptions: {\n      // See options descriptions on\n    },\n    wsUseServerOptions: {\n      // See options descriptions on\n    }\n  }\n})\nexport class Server {}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Ts.ED Project\nDESCRIPTION: These commands run the test suite for the Ts.ED project. They can be executed using either yarn or npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n# or\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Plugin Documentation Page\nDESCRIPTION: YAML front matter configuration for a documentation page that sets up meta tags for SEO, including description and keywords related to Ts.ED framework and its ecosystem.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/warehouse/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: page\nhead:\n  - - meta\n    - name: description\n      content: Discover our list of plugins to extends your Ts.ED project. Created by the Ts.ED team and community.\n  - - meta\n    - name: keywords\n      content: Ts.ED nodejs express typescript javascript es6 decorators mvc model ioc service model middleware socket.io swagger typeorm mongoose ajv\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeslots Controller\nDESCRIPTION: Example of a Ts.ED controller implementation with GET endpoint for retrieving timeslots, demonstrating parameter decoration and service injection.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\nimport {QueryParams} from \"@tsed/platform-params\";\nimport {TimeslotsService} from \"../services/TimeslotsService.js\";\nimport {TimeslotModel} from \"../models/TimeslotModel.js\";\n\n@Controller(\"/timeslots\")\nexport class TimeslotsController {\n  @Inject()\n  protected timeslotsService: TimeslotsService;\n\n  @Get(\"/\")\n  @Summary(\"Return a list of timeslots\")\n  @(Returns(200, Array).Of(TimeslotModel))\n  get(@QueryParams(\"date_start\") dateStart: Date, @QueryParams(\"date_end\") dateEnd: Date) {\n    return this.timeslotsService.find({\n      dateStart,\n      dateEnd\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from TsED Platform HTTP in TypeScript\nDESCRIPTION: This code snippet demonstrates how to import modules from the @tsed/platform-http package in a TypeScript file. It's provided as an example for documenting usage of new features.\nSOURCE: https://github.com/tsedio/tsed/blob/production/PULL_REQUEST_TEMPLATE.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {} from \"@tsed/platform-http\";\n```\n\n----------------------------------------\n\nTITLE: Installing AJV validation package with pnpm\nDESCRIPTION: Command to install AJV validation package and its Ts.ED integration using pnpm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add ajv @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Installing Session Dependencies\nDESCRIPTION: Commands to install session management packages for Express.js and Koa.js using different package managers.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/session.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save express-session\nyarn add express-session\npnpm add express-session\nbun add express-session\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save koa-session\nyarn add koa-session\npnpm add koa-session\nbun add koa-session\n```\n\n----------------------------------------\n\nTITLE: Service Declaration with Decorators in Ts.ED v7 (TypeScript)\nDESCRIPTION: Example of declaring a service using decorators in Ts.ED v7, demonstrating property injection and lifecycle hooks.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/introduction/what-is-news-v8.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable, Configuration, Constant, Inject} from \"@tsed/di\";\n\n@Injectable()\n// @Scope(ProviderScope.SINGLETON) // or Scope.REQUEST or Scope.INSTANcE\nexport class MyService {\n  @Configuration()\n  private settings: PlatformConfiguration;\n\n  @Constant(\"myConstant\", \"default\")\n  private myConstant: string;\n\n  @Inject()\n  private repository: MyReposity;\n\n  constructor() {\n    console.log(this.settings); // undefined available in v7 but defined in v8\n    console.log(this.myConstant); // undefined available in v7 but defined in v8\n    console.log(this.repository); // undefined available in v7 but defined in v8\n  }\n\n  $onInit() {\n    console.log(this.settings); // defined\n    console.log(this.myConstant); // defined\n    console.log(this.repository); // defined\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Feed Controller with Ts.ED and Prisma\nDESCRIPTION: This snippet shows the implementation of a FeedsController using Ts.ED decorators and Prisma repository. It includes a method for fetching all published posts.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/prisma.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Controller, Inject} from \"@tsed/di\";\nimport {PostModel, PostsRepository} from \"@tsed/prisma\";\nimport {Get, Returns, Summary} from \"@tsed/schema\";\n\n@Controller(\"/feeds\")\nexport class FeedsController {\n  @Inject()\n  protected service: PostsRepository;\n\n  @Get(\"/\")\n  @Summary(\"Fetch all published posts\")\n  @(Returns(200, Array).Of(PostModel))\n  getFeeds(): Promise<PostModel[]> {\n    return this.service.findMany({\n      where: {published: true}\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Recipe Type for GraphQL in TypeScript\nDESCRIPTION: This snippet defines the Recipe class using TypeGraphQL decorators. It represents the structure of a recipe in the GraphQL schema, including fields for id, title, description, and creation date.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Field, ID, ObjectType } from \"type-graphql\";\n\n@ObjectType()\nexport class Recipe {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({\n    description: \"The recipe description with preparation info\"\n  })\n  description: string;\n\n  @Field()\n  creationDate: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AJV validation package with bun\nDESCRIPTION: Command to install AJV validation package and its Ts.ED integration using bun.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add ajv @tsed/ajv\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe Arguments for GraphQL in TypeScript\nDESCRIPTION: This snippet defines the RecipeArgs class using TypeGraphQL decorators. It represents the arguments that can be passed to queries or mutations related to recipes in the GraphQL schema.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Min, Max } from \"class-validator\";\nimport { Field, ArgsType, Int } from \"type-graphql\";\n\n@ArgsType()\nexport class RecipeArgs {\n  @Field((type) => Int)\n  @Min(0)\n  skip: number = 0;\n\n  @Field((type) => Int)\n  @Min(1)\n  @Max(50)\n  take: number = 25;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Core Package using NPM\nDESCRIPTION: Command to install the @tsed/core package as a project dependency using npm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/core/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/core\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn in Bash\nDESCRIPTION: This command installs the necessary npm dependencies using Yarn. It's crucial to use Yarn instead of npm for this project. After installation, it runs a postinstall hook to set up the project.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: AWS Context and Event Handler\nDESCRIPTION: Example showing how to access AWS Lambda context and event objects within a Ts.ED serverless controller.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Injectable} from \"@tsed/di\";\nimport {QueryParams, ServerlessContext} from \"@tsed/platform-serverless\";\nimport {TimeslotsService} from \"../services/TimeslotsService.js\";\nimport {ServerlessContext} from \"./ServerlessContext.js\";\n\n@Injectable()\nexport class TimeslotsLambda {\n  get(@Context() $ctx: ServerlessContext) {\n    console.log($ctx.context);\n    console.log($ctx.event);\n    console.log($ctx.response);\n    console.log($ctx.request);\n\n    $ctx.response.setHeader(\"x-test\", \"test\");\n\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/platform-serverless-testing package using npm\nDESCRIPTION: This command installs the @tsed/platform-serverless-testing package as a development dependency in your project. This package is used for testing serverless functions with the Ts.ED framework.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-testing/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @tsed/platform-serverless-testing\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Log Middleware Package\nDESCRIPTION: Command to install the @tsed/platform-log-middleware package using npm. This package is part of the Ts.ED framework.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-log-middleware/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-log-middleware\n```\n\n----------------------------------------\n\nTITLE: Koa Integration with Template Engines\nDESCRIPTION: Demonstrates how to integrate template engines with Koa framework using koa-views middleware.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/engines/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getEngines} from \"./getEngines.js\";\n\nvar views = require(\"koa-views\");\n\nconst render = views(__dirname + \"/views\", {\n  engineSource: getEngines(),\n  map: {\n    html: \"underscore\"\n  }\n});\n\n// Must be used before any router is used\napp.use(render);\n\napp.use(async function (ctx) {\n  ctx.state = {\n    session: this.session,\n    title: \"app\"\n  };\n\n  await ctx.render(\"user\", {\n    user: \"John\"\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Login View in HTML/EJS\nDESCRIPTION: This code snippet shows the HTML template for the login page using EJS templating engine. It includes the structure for displaying the login form and related information.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/oidc.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<%- include('partials/header') %>\n<div class=\"login-client-image\">\n  <% if (client.logoUri) { %>\n  <img src=\"<%= client.logoUri %>\">\n  <% } %>\n</div>\n<div class=\"login-panel panel panel-default\">\n  <div class=\"panel-body\">\n    <form role=\"form\" action=\"/interaction/<%= uid %>/login\" method=\"post\">\n      <fieldset>\n        <div class=\"col-sm-12 controls\">\n          <h3>Sign-in</h3>\n        </div>\n        <%- include('forms/login-form') %>\n        <button class=\"btn btn-lg btn-success btn-block\">\n          Sign In\n        </button>\n      </fieldset>\n    </form>\n  </div>\n  <%- include('partials/login-help') %>\n</div>\n<%- include('partials/footer') %>\n```\n\n----------------------------------------\n\nTITLE: Installing Scalar dependencies for Ts.ED\nDESCRIPTION: Command to install the required dependencies for using Scalar with Ts.ED.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/scalar.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/scalar\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Schema with Nexus\nDESCRIPTION: TypeScript code to create a GraphQL schema using Nexus, including configuration for schema output and type generation.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeSchema} from \"nexus\";\nimport {join} from \"node:path\";\n\nexport const schema = makeSchema({\n  types: [], // 1\n  outputs: {\n    typegen: join(process.cwd(), \"..\", \"..\", \"nexus-typegen.ts\"), // 2\n    schema: join(process.cwd(), \"..\", \"..\", \"schema.graphql\") // 3\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Gflow CLI Tool for Ts.ED Development\nDESCRIPTION: This command installs Gflow, a command-line tool that helps with Git workflow in Ts.ED development. It's installed globally using npm.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/contributing.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g gflow\n```\n\n----------------------------------------\n\nTITLE: Starting a New Feature Branch in Ts.ED\nDESCRIPTION: These commands create a new feature branch based on the production branch. It's the recommended way to start working on a new feature or bug fix.\nSOURCE: https://github.com/tsedio/tsed/blob/production/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit checkout --no-track -b feat-branch-name origin/production  # !IMPORTANT\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing @tsed/cli-core module with pnpm\nDESCRIPTION: Command to install the @tsed/cli-core package using pnpm package manager.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @tsed/cli-core\n```\n\n----------------------------------------\n\nTITLE: Using a Data Source in a GraphQL Resolver\nDESCRIPTION: TypeScript code demonstrating how to use a custom data source within a GraphQL resolver.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Arg, Ctx, Query, Resolver} from \"type-graphql\";\nimport {ResolverController} from \"@tsed/typegraphql\";\n\n@ResolverController()\n@Resolver((of) => User)\nexport class UserResolver {\n  @Query((returns) => [User])\n  async users(@Ctx() { dataSources }: DataSourceContext) {\n    return dataSources.userAPI.getAllUsers();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type with TypeGraphQL\nDESCRIPTION: TypeScript code demonstrating how to define a GraphQL type (Recipe) using TypeGraphQL decorators.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Field, ID, ObjectType} from \"type-graphql\";\n\n@ObjectType()\nexport class Recipe {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({nullable: true})\n  description?: string;\n\n  @Field()\n  creationDate: Date;\n\n  @Field((type) => [String])\n  ingredients: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ts.ED Platform Cache Package\nDESCRIPTION: Command to install the @tsed/platform-cache package using npm package manager\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-cache/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/platform-cache\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL WebSocket Dependencies\nDESCRIPTION: Commands to install the required packages for GraphQL WebSocket support in a Ts.ED application using npm or yarn.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/snippets/graphql/graphql-ws.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @tsed/graphql-ws graphql-ws\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @tsed/graphql-ws graphql-ws\n```\n\n----------------------------------------\n\nTITLE: API Response Format\nDESCRIPTION: Example JSON response from the API endpoint showing successful execution.\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/platform/platform-serverless-http/test/integration/aws-basic/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Go Serverless v2.0! Your function executed successfully!\",\n  \"input\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TestContainers Mongo Package\nDESCRIPTION: Commands for installing @tsed/testcontainers-mongo package using different package managers\nSOURCE: https://github.com/tsedio/tsed/blob/production/packages/orm/testcontainers-mongo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add --dev @tsed/testcontainers-mongo\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add --dev @tsed/testcontainers-mongo\n```\n\n----------------------------------------\n\nTITLE: Running Command with Arguments Example\nDESCRIPTION: Example showing how to run a command with arguments in the command line.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/docs/command.md#2025-04-16_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ntsed run hello-command create user\n```\n\n----------------------------------------\n\nTITLE: Importing and Transforming Team Members Data in Vue\nDESCRIPTION: This script imports team data from a JSON file and transforms it into a format suitable for the VPTeamMembers component. It maps each team member's information including avatar, name, title, and social links (GitHub and Twitter).\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/more/team.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VPTeamMembers } from 'vitepress/theme';\nimport team from '../team.json';\n\nconst members = team.map((member) => {\n   return {\n     avatar: member.src,\n     name: member.title,\n     title: member.role + ' - ' + member.job,\n     links: [\n        { icon: 'github', link: 'https://github.com/' + member.github },\n        member.twitter && { icon: 'twitter', link: 'https://x.com/' + member.twitter }\n     ].filter(Boolean)\n   }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including Warehouse Component in Markdown\nDESCRIPTION: A Vue component inclusion within a markdown file. The Warehouse component likely displays a list of plugins available for Ts.ED projects.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/plugins/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Warehouse />\n```\n\n----------------------------------------\n\nTITLE: Displaying Maintainer Content in Markdown/HTML\nDESCRIPTION: A combined markdown and HTML layout showing project maintainers section with a help wanted badge, GitHub contributors component, and a call-to-action button for becoming a maintainer.\nSOURCE: https://github.com/tsedio/tsed/blob/production/docs/tutorials/typeorm.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Maintainers <Badge text=\"Help wanted\" />\n\n<GithubContributors :users=\"['Romakita']\"/>\n\n<div class=\"flex items-center justify-center p-5\">\n<Button href=\"/contributing.html\" class=\"rounded-medium\">\n Become maintainer\n</Button>\n</div>\n```"
  }
]