[
  {
    "owner": "activelogin",
    "repo": "activelogin.authentication",
    "content": "TITLE: Configuring BankID in Development Mode with Simulated Environment\nDESCRIPTION: Example of setting up BankID authentication in a development environment using a simulated implementation. This configuration doesn't require certificates and is useful for development and testing.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId\n            .AddDebugEventListener()\n            .UseSimulatedEnvironment();\n    });\n\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .AddSameDevice();\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Global BankID Authentication Options\nDESCRIPTION: Configures global options that apply to all BankID authentication schemes. This approach allows setting common requirements across different authentication flows.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n.Configure<BankIdAuthOptions>(options =>\n{\n    options.BankIdRequireMrtd = true;\n    options.BankIdReturnRisk = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding BankID Authentication Schemes\nDESCRIPTION: Adds BankID authentication schemes for same-device and other-device flows. Same-device launches BankID app on the current device, while other-device supports scanning a QR code with a smartphone.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .AddSameDevice()\n            .AddOtherDevice();\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Client Certificate from Azure KeyVault for BankID\nDESCRIPTION: Configures BankID to use a client certificate stored in Azure KeyVault. This is a recommended approach for production environments to securely store and access certificates.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddBankId(bankId =>\n    {\n        bankId\n            .UseProductionEnvironment()\n            .UseClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate\"))\n            ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Complete BankID Production Configuration with Azure KeyVault Integration\nDESCRIPTION: Comprehensive setup for BankID in production, including Azure KeyVault for client certificate storage, QR code generation, and device detection. Also configures authentication schemes for same-device and other-device flows.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        .UseProductionEnvironment()\n        .UseClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate\"))\n        .UseQrCoderQrCodeGenerator()\n        .UseUaParserDeviceDetection();\n    });\n\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .AddSameDevice()\n            .AddOtherDevice();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Services for API-only Usage\nDESCRIPTION: Configures BankID services for API-only usage without the full UI components. This enables using just the BankID API wrapper in custom scenarios with debug logging and test environment configuration.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId\n            .AddDebugEventListener()\n            .UseTestEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Digital ID Card Verification in a Controller\nDESCRIPTION: Creates an API endpoint for verifying digital ID cards using the BankID verification API. This controller accepts QR code content from a client and returns the personal identity number after verification.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\npublic class VerifyRequestModel\n{\n    public string QrCodeContent { get; set; } = string.Empty;\n}\n\npublic class VerifyController : Controller\n{\n    private readonly IBankIdVerifyApiClient _bankIdVerifyApiClient;\n\n    public VerifyController(IBankIdVerifyApiClient bankIdVerifyApiClient)\n    {\n        _bankIdVerifyApiClient = bankIdVerifyApiClient;\n    }\n\n    [HttpPost(\"/verify/api\")]\n    public async Task<ActionResult<string>> Verify([FromBody] VerifyRequestModel model)\n    {\n        // Minimalistic sample implementation\n\n        ArgumentNullException.ThrowIfNull(model, nameof(model));\n        if (string.IsNullOrEmpty(model.QrCodeContent))\n        {\n            throw new ArgumentNullException(nameof(model.QrCodeContent));\n        }\n\n        var verifyResult = await _bankIdVerifyApiClient.VerifyAsync(model.QrCodeContent);\n        return verifyResult.User.PersonalIdentityNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Authentication for Production Environment\nDESCRIPTION: Production setup for BankID authentication including Application Insights monitoring, Azure Key Vault certificate management, QR code generation, and multiple authentication flows (same-device and other-device).\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AspNetCore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId\n            .AddApplicationInsightsEventListener(options =>\n            {\n                options.LogUserPersonalIdentityNumberHints = true;\n                options.LogCertificateDates = true;\n            })\n            .UseProductionEnvironment()\n            .UseClientCertificateFromAzureKeyVault(Configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate\"))\n            .UseQrCoderQrCodeGenerator();\n    });\n\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .AddSameDevice()\n            .AddOtherDevice();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom BankID Message Localizer in ASP.NET Core\nDESCRIPTION: Demonstrates how to register a custom implementation of IBankIdUserMessageLocalizer for localizing BankID user messages. This allows customization of displayed messages in the authentication flow.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdUserMessageLocalizer, CustomBankIdUserMessageLocalizer>();\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Services for Digital ID Card Verification\nDESCRIPTION: Configures BankID services for the digital ID card verification API. This sets up the required dependencies and configures the environment for BankID verification.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId\n            .AddDebugEventListener()\n            .UseTestEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Sign Controller in ASP.NET MVC\nDESCRIPTION: A controller implementation that handles BankID signing operations including initiation and callback processing. It demonstrates how to use the IBankIdSignService to manage the signing flow.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[AllowAnonymous]\npublic class SignController : Controller\n{\n    private readonly IBankIdSignConfigurationProvider _bankIdSignConfigurationProvider;\n    private readonly IBankIdSignService _bankIdSignService;\n\n    public SignController(IBankIdSignConfigurationProvider bankIdSignConfigurationProvider, IBankIdSignService bankIdSignService)\n    {\n        _bankIdSignConfigurationProvider = bankIdSignConfigurationProvider;\n        _bankIdSignService = bankIdSignService;\n    }\n\n    public async Task<IActionResult> Index()\n    {\n        var configurations = await _bankIdSignConfigurationProvider.GetAllConfigurationsAsync();\n        var providers = configurations\n            .Where(x => x.DisplayName != null)\n            .Select(x => new ExternalProvider(x.DisplayName ?? x.Key, x.Key));\n        var viewModel = new BankIdViewModel(providers, \"~/\");\n\n        return View(viewModel);\n    }\n\n    public IActionResult Sign(string provider)\n    {\n        var props = new BankIdSignProperties(\"The info displayed for the user\") // The user visible data\n        {\n            UserNonVisibleData = new byte[1024], // Whataver data you want to sign\n            UserVisibleDataFormat = BankIdUserVisibleDataFormats.SimpleMarkdownV1, // The format of the user visible data, use empty or the markwodn constant\n            Items =\n            {\n                {\"returnUrl\", \"~/\"},\n                {\"scheme\", provider}\n            }\n\n            RequirePinCode = true,\n            RequireMrtd = true\n            RequiredPersonalIdentityNumber = new PersonalIdentityNumber(1999, 8, 7, 239, 1)\n        };\n        var returnPath = $\"{Url.Action(nameof(Callback))}?provider={provider}\";\n        return this.BankIdInitiateSign(props, returnPath, provider);\n    }\n\n    [HttpPost]\n    public async Task<IActionResult> Callback(string provider)\n    {\n        var result = await _bankIdSignService.GetSignResultAsync(provider);\n        if (result?.Succeeded != true)\n        {\n            throw new Exception(\"Sign error\");\n        }\n\n        // Parse these to store the signed values\n        var ocspResponse = result.BankIdCompletionData?.OcspResponse;\n        var signature = result.BankIdCompletionData?.Signature;\n\n        return Redirect(result.Properties?.Items[\"returnUrl\"] ?? \"~/\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID for Production Environment with Azure KeyVault\nDESCRIPTION: Configuration example for a production BankID setup using a client certificate stored in Azure KeyVault. Includes additional features like QR code generation, device detection, and application insights monitoring.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId\n            .AddApplicationInsightsEventListener(options =>\n            {\n                options.LogUserPersonalIdentityNumberHints = true;\n            })\n            .UseProductionEnvironment()\n            .UseClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate\"))\n            .AddSameDevice()\n            .AddOtherDevice()\n            .UseQrCoderQrCodeGenerator()\n            .UseUaParserDeviceDetection();\n    });\n\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .UseProductionEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Sign Services\nDESCRIPTION: Registers both common BankID logic and sign-specific configuration. This sets up the BankID signing capability with same-device and other-device options in a simulated environment.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Add Active Login - BankID\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddDebugEventListener();\n        bankId.UseQrCoderQrCodeGenerator();\n        bankId.UseUaParserDeviceDetection();\n        bankId.UseSimulatedEnvironment();\n    });\n\n// Add Active Login - Sign\nservices\n    .AddBankIdSign(bankId =>\n    {\n        bankId.AddSameDevice(BankIdSignDefaults.SameDeviceConfigKey, \"BankID (SameDevice)\", options => { });\n        bankId.AddOtherDevice(BankIdSignDefaults.OtherDeviceConfigKey, \"BankID (OtherDevice)\", options => { });\n    });\n```\n\n----------------------------------------\n\nTITLE: Extracting Birthdate and Gender Claims in C#\nDESCRIPTION: Custom claims transformer that extracts and adds birthdate and gender information from Swedish personal identity numbers.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdPinHintClaimsTransformer : IBankIdClaimsTransformer\n{\n    private const string GenderJwtType = \"gender\";\n    private const string BirthdateJwtType = \"birthdate\";\n\n    public Task TransformClaims(BankIdClaimsTransformationContext context)\n    {\n        var personalIdentityNumber = PersonalIdentityNumber.Parse(context.PersonalIdentityNumber);\n\n        var jwtGender = GetJwtGender(personalIdentityNumber.GetGenderHint());\n        if (!string.IsNullOrEmpty(jwtGender))\n        {\n            context.AddClaim(GenderJwtType, jwtGender);\n        }\n\n        var jwtBirthdate = GetJwtBirthdate(personalIdentityNumber.GetDateOfBirthHint());\n        context.AddClaim(BirthdateJwtType, jwtBirthdate);\n\n        return Task.CompletedTask;\n    }\n\n    private static string GetJwtGender(Gender gender)\n    {\n        return gender switch\n        {\n            Gender.Female => \"female\",\n            Gender.Male => \"male\",\n\n            _ => string.Empty,\n        };\n    }\n\n    private static string GetJwtBirthdate(DateTime birthdate)\n    {\n        return birthdate.Date.ToString(\"yyyy-MM-dd\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction ID to Claims in C#\nDESCRIPTION: Custom claims transformer implementation that adds the BankID order reference as a transaction ID claim.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdTxnClaimsTransformer : IBankIdClaimsTransformer\n{\n    public Task TransformClaims(BankIdClaimsTransformationContext context)\n    {\n        context.AddClaim(\"txn\", context.BankIdOrderRef);\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Auth Requirements Resolver\nDESCRIPTION: Service registration for custom dynamic authentication requirements resolver.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdAuthRequestRequirementsResolver, BankIdAuthRequestDynamicRequirementsResolver>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic User Data Resolver for BankID Authentication in C#\nDESCRIPTION: Creates a custom implementation of IBankIdAuthRequestUserDataResolver that dynamically generates user data for BankID authentication. This example shows how to include the current time in the authentication message with markdown formatting.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdAuthRequestDynamicUserDataResolver : IBankIdAuthRequestUserDataResolver\n{\n    public Task<BankIdAuthUserData> GetUserDataAsync(BankIdAuthRequestContext authRequestContext, HttpContext httpContext)\n    {\n        return Task.FromResult(new BankIdAuthUserData()\n        {\n            UserVisibleData = \"*Time:* \" + DateTime.Now.ToLongTimeString(),\n            UserVisibleDataFormat = BankIdUserVisibleDataFormats.SimpleMarkdownV1\n        });;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BankID App API Client Interface Implementation in C#\nDESCRIPTION: This snippet shows the implementation of the BankIdAppApiClient class which implements the IBankIdAppApiClient interface. It provides methods for authentication, signing, phone authentication, phone signing, collecting responses, and canceling operations.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.Api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdAppApiClient : IBankIdAppApiClient\n{\n    public Task<AuthResponse> AuthAsync(AuthRequest request) { ... }\n    public Task<SignResponse> SignAsync(SignRequest request) { ... }\n    public Task<PhoneAuthResponse> PhoneAuthAsync(PhoneAuthRequest request) { ... }\n    public Task<PhoneSignResponse> PhoneSignAsync(PhoneSignRequest request) { ... }\n    public Task<CollectResponse> CollectAsync(CollectRequest request) { ... }\n    public Task<CancelResponse> CancelAsync(CancelRequest request) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic User Data Resolver for BankID Authentication in C#\nDESCRIPTION: Registers a custom implementation of IBankIdAuthRequestUserDataResolver as a transient service in the dependency injection container. This connects the custom resolver to the BankID authentication flow.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdAuthRequestUserDataResolver, BankIdAuthRequestDynamicUserDataResolver>();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom QR Code Generator for BankID Authentication in C#\nDESCRIPTION: Registers a custom implementation of IBankIdQrCodeGenerator as a transient service in the dependency injection container. This allows for customizing the QR code generation logic used during BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdQrCodeGenerator, CustomQrCodeGenerator>();\n```\n\n----------------------------------------\n\nTITLE: BankID App API Client Interface in C#\nDESCRIPTION: Defines the BankIdAppApiClient class that implements IBankIdAppApiClient interface for interacting with the BankID API. This client provides methods for authentication, signing, phone operations, collecting status, and canceling BankID requests.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdAppApiClient : IBankIdAppApiClient\n{\n    public Task<AuthResponse> AuthAsync(AuthRequest request) { ... }\n    public Task<SignResponse> SignAsync(SignRequest request) { ... }\n    public Task<PhoneAuthResponse> PhoneAuthAsync(PhoneAuthRequest request) { ... }\n    public Task<PhoneSignResponse> PhoneSignAsync(PhoneSignRequest request) { ... }\n    public Task<CollectResponse> CollectAsync(CollectRequest request) { ... }\n    public Task<CancelResponse> CancelAsync(CancelRequest request) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom BankID Launcher in C#\nDESCRIPTION: Registers a custom implementation of IBankIdLauncher as a transient service in the dependency injection container. This allows for customizing how the BankID app is launched across different devices and platforms.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdLauncher, CustomBankIdLauncher>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Browser Support for Social Media Apps in BankID Authentication\nDESCRIPTION: Adds support for Instagram and Facebook in-app browsers by configuring custom URL schemes. This helps ensure proper BankID app launching when users authenticate from within these social media apps.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        // ...\n\n        bankId.AddCustomBrowserByUserAgent(userAgent => userAgent.Contains(\"Instagram\"), \"instagram://\");\n        bankId.AddCustomBrowserByUserAgent(userAgent => userAgent.Contains(\"FBAN\") || userAgent.Contains(\"FBAV\"), \"fb://\");\n\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Browser with Reload Behavior for BankID Authentication\nDESCRIPTION: Adds support for Instagram in-app browser with specific reload behavior settings. This extends the custom browser configuration by controlling how the browser should behave when returning from the BankID app.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        // ...\n\n        bankId.AddCustomBrowserByUserAgent(userAgent => userAgent.Contains(\"Instagram\"), new BankIdLauncherUserAgentCustomBrowser(\"instagram://\", BrowserReloadBehaviourOnReturnFromBankIdApp.Never));\n\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: BankID Verify API Client Interface in C#\nDESCRIPTION: Defines the BankIdVerifyApiClient class that implements IBankIdVerifyApiClient interface for verifying digital ID cards. This client provides a method for verifying QR code content from digital ID cards.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdVerifyApiClient : IBankIdVerifyApiClient\n{\n    public Task<VerifyResponse> VerifyAsync(VerifyRequest request) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Device Data for BankID\nDESCRIPTION: Default configuration for web-based device data resolution in BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseDeviceData(config =>\n        {\n            config.DeviceType = BankIdEndUserDeviceType.Web;\n            config.UseResolverFactory<BankIdDefaultEndUserDeviceDataResolverFactory>();\n            config.AddDeviceResolver<BankIdDefaultEndUserWebDeviceDataResolver>();\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Authentication Requirements per Scheme\nDESCRIPTION: Sets specific requirements for a BankID authentication scheme including MRTD document verification, PIN code requirement, certificate policies, and risk indication. These options control the authentication flow behavior.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n.AddOtherDevice(options =>\n{\n    // If the client needs to provide MRTD (Machine readable travel document) information to complete the order.\n    // Only Swedish passports and national ID cards are supported.\n    options.BankIdRequireMrtd = true;\n\n    // Users are required to sign the transaction with their PIN code, even if they have biometrics activated.\n    options.BankIdRequirePinCode = true;\n\n    // Limit possible login methods to, for example, only allow BankID on smartcard.\n    // If no policy is set, it will fall back to require mobile BankID for OtherDevice flow\n    options.BankIdCertificatePolicies = [ BankIdCertificatePolicy.BankIdOnFile, BankIdCertificatePolicy.BankIdOnSmartCard ];\n\n    // If this is set to true a risk indicator will be included in the collect response when the order completes.\n    // If a risk indicator is required for the order to complete, for example, if a risk requirement is applied,\n    // the returnRisk property is ignored, and a risk indicator is always included; otherwise a default value of\n    // false is used. The risk indication requires that the endUserIp is correct. Please note that the assessed\n    // risk will not be returned if the order was blocked, which may happen if a risk requirement is set.\n    options.BankIdReturnRisk = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom IP Resolver for BankID\nDESCRIPTION: Example of registering a custom end user IP resolver implementation for BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdEndUserIpResolver, EndUserIpResolver>();\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Client Certificate Format for BankID\nDESCRIPTION: Configures the BankID test environment with a specific client certificate format (P12). Different formats are available depending on the application's requirements and environment.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseTestEnvironment(clientCertificateFormat: TestCertificateFormat.P12);\n    });\n```\n\n----------------------------------------\n\nTITLE: Azure KeyVault Configuration with Client Credentials for BankID\nDESCRIPTION: JSON configuration for BankID client certificate using Azure KeyVault with client credentials (client ID and secret). This approach uses ClientSecretCredential for authentication to Azure KeyVault.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AzureKeyVault/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActiveLogin:BankId:ClientCertificate\" {\n        \"AzureKeyVaultUri\": \"TODO-ADD-YOUR-VALUE\",\n        \"AzureKeyVaultSecretName\": \"TODO-ADD-YOUR-VALUE\",\n\n        \"AzureAdTenantId\": \"\",\n        \"AzureAdClientId\": \"\",\n        \"AzureAdClientSecret\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID with Application Insights in C#\nDESCRIPTION: This code snippet demonstrates how to add an Application Insights event listener to the BankID configuration in a .NET application. It allows for logging of BankID authentication events and optionally includes metadata such as personal identity number, age, and IP.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AzureMonitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddApplicationInsightsEventListener();\n    });\n```\n\n----------------------------------------\n\nTITLE: Azure KeyVault Configuration with Managed Identity for BankID\nDESCRIPTION: JSON configuration for BankID client certificate using Azure KeyVault with a specific managed identity client ID. This overrides the default managed identity that would be used.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AzureKeyVault/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActiveLogin:BankId:ClientCertificate\" {\n        \"AzureKeyVaultUri\": \"TODO-ADD-YOUR-VALUE\",\n        \"AzureKeyVaultSecretName\": \"TODO-ADD-YOUR-VALUE\",\n\n        \"AzureManagedIdentityClientId\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID with QRCoder QR Code Generator in C#\nDESCRIPTION: This snippet demonstrates how to use the UseQrCoderQrCodeGenerator extension method to configure BankID authentication with QRCoder as the QR code generator. It's part of the service configuration in a .NET application.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.QRCoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseQrCoderQrCodeGenerator();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Built-in BankID Event Listeners in C#\nDESCRIPTION: Shows how to set up built-in event listeners for debugging and Application Insights integration. Includes options for customizing logged data in Application Insights.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddDebugEventListener();\n    });\n\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddApplicationInsightsEventListener(options =>\n            {\n                options.LogUserPersonalIdentityNumber = false;\n                options.LogUserPersonalIdentityNumberHints = true;\n\n                options.LogUserNames = false;\n\n                options.LogDeviceIpAddress = false;\n                options.LogDeviceUniqueHardwareId = true;\n                options.LogUserBankIdIssueDate = true;\n\n                // And more...\n            });\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Authentication with UA Parser Device Detection in C#\nDESCRIPTION: This snippet demonstrates how to add BankID authentication to a .NET application and configure it to use the UA Parser library for device detection. It utilizes the UseUaParserDeviceDetection() extension method.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.UAParser/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddAuthentication()\n    .AddBankId(bankId =>\n    {\n        bankId.UseUaParserDeviceDetection();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Authentication for Development Environment\nDESCRIPTION: Basic setup for BankID authentication in development environment using simulated BankID environment and same-device authentication flow.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AspNetCore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseSimulatedEnvironment();\n    });\n\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId.AddSameDevice();\n    });\n```\n\n----------------------------------------\n\nTITLE: BankID Verify API Client Interface Implementation in C#\nDESCRIPTION: This snippet demonstrates the BankIdVerifyApiClient class implementation of the IBankIdVerifyApiClient interface. It provides a method for verifying BankID authentication responses.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.Api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdVerifyApiClient : IBankIdVerifyApiClient\n{\n    public Task<VerifyResponse> VerifyAsync(VerifyRequest request) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing BankID Authentication Schemes\nDESCRIPTION: Demonstrates how to customize BankID authentication schemes with custom scheme names and display names. This allows for custom branding and multiple authentication options.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddAuthentication()\n    .AddBankIdAuth(bankId =>\n    {\n        bankId\n            .AddSameDevice(\"custom-auth-scheme\", \"Custom display name\", options => { ... })\n            .AddOtherDevice(BankIdDefaults.OtherDeviceAuthenticationScheme, \"Custom display name\", options => { ... });\n    });\n```\n\n----------------------------------------\n\nTITLE: Authentication Flow Diagram Using Mermaid\nDESCRIPTION: A mermaid graph diagram illustrating the BankID authentication flow from the application's login controller through the authentication process and back to the application.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid-architechture.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  App-->A\n  A[AccountController.Login] -->B\n\n  B[AccountController.ExternalLogin] -->|Challange|C\n  C[BankIdUiAuthController.Init] --> D\n  D([BankIdUiAuth/Init.cshtml])\n  E[BankIdUiAuthApiController.Initialize]\n  F[BankIdUiAuthApiController.QrCode]-->D\n  G[BankIdUiAuthApiController.Status]-->D\n  D-->E\n  D-->F\n  D-->G\n  D-->H\n  H[AccountController.ExternalLoginCallback] -->|HttpContext.AuthenticateAsync|App\n```\n\n----------------------------------------\n\nTITLE: Signing Flow Diagram Using Mermaid\nDESCRIPTION: A mermaid graph diagram illustrating the BankID signing flow from the application's sign controller through the signing process and back to the application.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid-architechture.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  App-->A\n  A[SignController.Index] -->B\n\n  B[SignController.Sign] -->|IBankIdSignService.InitiateSignAsync|C\n  C[BankIdUiSignController.Init] --> D\n  D([BankIdUiSign/Init.cshtml])\n  E[BankIdUiSignApiController.Initialize]\n  F[BankIdUiSignApiController.QrCode]-->D\n  G[BankIdUiSignApiController.Status]-->D\n  D-->E\n  D-->F\n  D-->G\n  D-->H\n  H[SignController.Callback] -->|IBankIdSignService.GetSignResultAsync|App\n```\n\n----------------------------------------\n\nTITLE: Querying All Active Login BankID Events in Application Insights\nDESCRIPTION: This KQL query extracts and displays all Active Login BankID events with comprehensive details including timestamps, client information, event types, user details, device information, and error data. The query provides a complete overview of all authentication attempts.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_0\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    client_City,\n    client_CountryOrRegion,\n    Event_Name = name,\n    Event_TypeId = tostring(customDimensions.AL_Event_TypeId),\n    Event_Severity = tostring(customDimensions.AL_Event_Severity),\n    Error_ErrorReason = tostring(customDimensions.AL_Error_ErrorReason),\n    BankId_BankId_Options_LaunchType = tostring(customDimensions.AL_BankId_Options_LaunchType),\n    BankId_Options_UseQrCode = tostring(customDimensions.AL_BankId_Options_UseQrCode),\n    BankId_ErrorCode = tostring(customDimensions.AL_BankId_ErrorCode),\n    BankId_ErrorDetails = tostring(customDimensions.AL_BankId_ErrorDetails),\n    BankId_OrderRef = tostring(customDimensions.AL_BankId_OrderRef),\n    BankId_CollectHintCode = tostring(customDimensions.AL_BankId_CollectHintCode),\n    BankId_User_CertNotBefore = tostring(customDimensions.AL_BankId_User_CertNotBefore),\n    BankId_User_CertNotAfter = tostring(customDimensions.AL_BankId_User_CertNotAfter),\n    BankId_User_DeviceIpAddress = tostring(customDimensions.AL_BankId_User_DeviceIpAddress),\n    User_Device_Browser = tostring(customDimensions.AL_User_Device_Browser),\n    User_Device_Os = tostring(customDimensions.AL_User_Device_Os),\n    User_Device_Type = tostring(customDimensions.AL_User_Device_Type),\n    User_Device_OsVersion = tostring(customDimensions.AL_User_Device_OsVersion),\n    User_Name = tostring(customDimensions.AL_User_Name),\n    User_GivenName = tostring(customDimensions.AL_User_GivenName),\n    User_Surname = tostring(customDimensions.AL_User_Surname),\n    User_SwedishPersonalIdentityNumber = tostring(customDimensions.AL_User_SwedishPersonalIdentityNumber),\n    User_DateOfBirthHint = tostring(customDimensions.AL_User_DateOfBirthHint),\n    User_AgeHint = tostring(customDimensions.AL_User_AgeHint),\n    User_GenderHint = tostring(customDimensions.AL_User_GenderHint),\n    ProductName = tostring(customDimensions.AL_ProductName),\n    ProductVersion = tostring(customDimensions.AL_ProductVersion),\n    BankId_ApiEnvironment = tostring(customDimensions.AL_BankId_ApiEnvironment),\n    BankId_ApiVersion = tostring(customDimensions.AL_BankId_ApiVersion)\n| order by timestamp desc\n| render table\n```\n\n----------------------------------------\n\nTITLE: Querying BankID Authentication Error Details in KQL\nDESCRIPTION: This KQL query extracts detailed error information from BankID authentication events, including error reasons, BankID error codes, user details, and device information. The query filters for events with 'Failure' or 'Error' severity and displays results in a table format ordered by timestamp.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_14\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    Event_ShortName = substring(name, 19),\n    Event_TypeId = tostring(customDimensions.AL_Event_TypeId),\n    Event_Severity = tostring(customDimensions.AL_Event_Severity),\n    Error_ErrorReason = tostring(customDimensions.AL_Error_ErrorReason),\n    BankId_Options_LaunchType = tostring(customDimensions.AL_BankId_Options_LaunchType),\n    BankId_Options_UseQrCode = tostring(customDimensions.AL_BankId_Options_UseQrCode),\n    BankId_ErrorCode = tostring(customDimensions.AL_BankId_ErrorCode),\n    BankId_ErrorDetails = tostring(customDimensions.AL_BankId_ErrorDetails),\n    BankId_OrderRef = tostring(customDimensions.AL_BankId_OrderRef),\n    BankId_CollectHintCode = tostring(customDimensions.AL_BankId_CollectHintCode),\n    BankId_User_CertNotBefore = tostring(customDimensions.AL_BankId_User_CertNotBefore),\n    BankId_User_CertNotAfter = tostring(customDimensions.AL_BankId_User_CertNotAfter),\n    BankId_User_DeviceIpAddress = tostring(customDimensions.AL_BankId_User_DeviceIpAddress),\n    User_Device_Browser = tostring(customDimensions.AL_User_Device_Browser),\n    User_Device_Os = tostring(customDimensions.AL_User_Device_Os),\n    User_Device_Type = tostring(customDimensions.AL_User_Device_Type),\n    User_Device_OsVersion = tostring(customDimensions.AL_User_Device_OsVersion),\n    User_Name = tostring(customDimensions.AL_User_Name),\n    User_GivenName = tostring(customDimensions.AL_User_GivenName),\n    User_Surname = tostring(customDimensions.AL_User_Surname),\n    User_SwedishPersonalIdentityNumber = tostring(customDimensions.AL_User_SwedishPersonalIdentityNumber),\n    User_DateOfBirthHint = tostring(customDimensions.AL_User_DateOfBirthHint),\n    User_AgeHint = tostring(customDimensions.AL_User_AgeHint),\n    User_GenderHint = tostring(customDimensions.AL_User_GenderHint),\n    ProductName = tostring(customDimensions.AL_ProductName),\n    ProductVersion = tostring(customDimensions.AL_ProductVersion),\n    BankId_ApiEnvironment = tostring(customDimensions.AL_BankId_ApiEnvironment),\n    BankId_ApiVersion = tostring(customDimensions.AL_BankId_ApiVersion)\n| where Event_Severity == \"Failure\" or Event_Severity == \"Error\"\n| order by timestamp desc\n| render table\n```\n\n----------------------------------------\n\nTITLE: Visualizing BankID Errors by Error Code Only\nDESCRIPTION: This KQL query aggregates and visualizes BankID authentication errors by error code, regardless of the specific event. It provides a simplified view of error frequencies over time in a column chart format.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_13\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    ErrorCode = tostring(customDimensions.AL_BankId_ErrorCode),\n    EventSeverity = tostring(customDimensions.AL_Event_Severity)\n| where EventSeverity == \"Failure\" or EventSeverity == \"Error\"\n| summarize count() by bin(timestamp, 1d), ErrorCode\n| render columnchart\n```\n\n----------------------------------------\n\nTITLE: Displaying Successful BankID Authentication Details\nDESCRIPTION: This KQL query extracts detailed information about successful BankID authentication events. It includes event types, device information, user details, and product metadata to provide a comprehensive view of successful authentications.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_11\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    Event_ShortName = substring(name, 19),\n    Event_TypeId = tostring(customDimensions.AL_Event_TypeId),\n    Event_Severity = tostring(customDimensions.AL_Event_Severity),\n    BankId_Options_LaunchType = tostring(customDimensions.AL_BankId_Options_LaunchType),\n    BankId_Options_UseQrCode = tostring(customDimensions.AL_BankId_Options_UseQrCode),\n    BankId_OrderRef = tostring(customDimensions.AL_BankId_OrderRef),\n    BankId_CollectHintCode = tostring(customDimensions.AL_BankId_CollectHintCode),\n    BankId_User_CertNotBefore = tostring(customDimensions.AL_BankId_User_CertNotBefore),\n    BankId_User_CertNotAfter = tostring(customDimensions.AL_BankId_User_CertNotAfter),\n    BankId_User_DeviceIpAddress = tostring(customDimensions.AL_BankId_User_DeviceIpAddress),\n    User_Device_Browser = tostring(customDimensions.AL_User_Device_Browser),\n    User_Device_Os = tostring(customDimensions.AL_User_Device_Os),\n    User_Device_Type = tostring(customDimensions.AL_User_Device_Type),\n    User_Device_OsVersion = tostring(customDimensions.AL_User_Device_OsVersion),\n    User_Name = tostring(customDimensions.AL_User_Name),\n    User_GivenName = tostring(customDimensions.AL_User_GivenName),\n    User_Surname = tostring(customDimensions.AL_User_Surname),\n    User_SwedishPersonalIdentityNumber = tostring(customDimensions.AL_User_SwedishPersonalIdentityNumber),\n    User_DateOfBirthHint = tostring(customDimensions.AL_User_DateOfBirthHint),\n    User_AgeHint = tostring(customDimensions.AL_User_AgeHint),\n    User_GenderHint = tostring(customDimensions.AL_User_GenderHint),\n    ProductName = tostring(customDimensions.AL_ProductName),\n    ProductVersion = tostring(customDimensions.AL_ProductVersion),\n    BankId_ApiEnvironment = tostring(customDimensions.AL_BankId_ApiEnvironment),\n    BankId_ApiVersion = tostring(customDimensions.AL_BankId_ApiVersion)\n| where Event_Severity == \"Success\"\n| order by timestamp desc\n| render table\n```\n\n----------------------------------------\n\nTITLE: Configuring Formatted User Visible Data for BankID Authentication in C#\nDESCRIPTION: Sets a formatted text message using SimpleMarkdownV1 format to be displayed during BankID authentication. This example constructs a multi-line message with markdown formatting and configures both the content and format properties.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nbankId.UseAuthRequestUserData(authUserData =>\n{\n    var message = new StringBuilder();\n    message.AppendLine(\"# Active Login\");\n    message.AppendLine();\n    message.AppendLine(\"Welcome to the *Active Login* demo.\");\n\n    authUserData.UserVisibleData = message.ToString();\n    authUserData.UserVisibleDataFormat = BankIdUserVisibleDataFormats.SimpleMarkdownV1;\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Successful BankID Logins Over Time\nDESCRIPTION: This KQL query counts successful BankID authentications and displays them in a chart grouped by day. It provides a visual representation of authentication volume trends over time.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_8\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetAuthenticateSuccess\"\n| project\n    timestamp\n| summarize Logins = count() by bin(timestamp, 1d)\n| render columnchart\n```\n\n----------------------------------------\n\nTITLE: Calculating Average User Age for BankID Authentication\nDESCRIPTION: This KQL query calculates the average age of users who have completed the BankID collection process. It uses the age hint data from completed authentication sessions to provide demographic insights.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_7\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_CollectCompleted\"\n| project\n    UserAgeHint = toint(customMeasurements.AL_User_AgeHint)\n| summarize AverageUserAge = avg(UserAgeHint)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom BankID Event Listener in C#\nDESCRIPTION: Demonstrates how to create and register a custom event listener for BankID authentication events. This example logs event information to the console.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdSampleEventListener : IBankIdEventListener\n{\n    public Task HandleAsync(BankIdEvent bankIdEvent)\n    {\n        Console.WriteLine($\"{bankIdEvent.EventTypeName}: {bankIdEvent.EventSeverity}\");\n        return Task.CompletedTask;\n    }\n}\n\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddEventListener<BankIdSampleEventListener>();\n    });\n```\n\n----------------------------------------\n\nTITLE: Analyzing Device Type and OS Distribution for BankID Authentication\nDESCRIPTION: This KQL query combines device type and operating system information from successful BankID challenges. It provides insights into the hardware and software combinations used for authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_5\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project\n    DeviceType = tostring(customDimensions.AL_User_Device_Type),\n    DeviceOs = tostring(customDimensions.AL_User_Device_Os)\n| project DeviceAndDeviceOs = strcat(DeviceType, ' - ', DeviceOs)\n| summarize count() by DeviceAndDeviceOs\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Displaying Active Login Version Distribution in Application Insights\nDESCRIPTION: This KQL query extracts the Active Login product version from successful BankID challenges and visualizes the distribution of versions as a pie chart. It helps identify which versions of Active Login are being used in the environment.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_1\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project ActiveLogin_ProductVersion = tostring(customDimensions.AL_ProductVersion)\n| summarize count() by ActiveLogin_ProductVersion\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant BankID Client Certificates in C#\nDESCRIPTION: Demonstrates how to set up multiple BankID client certificates for different tenants and select the appropriate certificate at runtime. This approach disables connection pooling, which may impact performance.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static class BankIdBuilderExtensions\n{\n    public static IBankIdBuilder UseClientCertificateResolver(this IBankIdBuilder builder, Func<ServiceProvider, X509CertificateCollection, string, X509Certificate> configureClientCertificateResolver)\n    {\n        builder.ConfigureHttpClientHandler((serviceProvider, httpClientHandler) =>\n        {\n            httpClientHandler.PooledConnectionLifetime = TimeSpan.Zero;\n            httpClientHandler.SslOptions.LocalCertificateSelectionCallback =\n                (sender, host, certificates, certificate, issuers) => configureClientCertificateResolver(serviceProvider, certificates, host);\n        });\n\n        return builder;\n    }\n}\n\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // ...\n        services\n            .AddBankId(bankId =>\n            {\n                bankId\n                    .AddClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate1\"))\n                    .AddClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate2\"))\n                    .AddClientCertificateFromAzureKeyVault(configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate3\"))\n                    .UseClientCertificateResolver((serviceCollection, certificates, hostname) =>\n                    {\n                        // Apply logic here to select the correct certificate\n                        return certificates[0];\n                    });\n\n                // ...\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID with Azure KeyVault Client Certificate in C#\nDESCRIPTION: This snippet demonstrates how to configure BankID authentication to use client certificates stored in Azure KeyVault using the UseClientCertificateFromAzureKeyVault extension method.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AzureKeyVault/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseClientCertificateFromAzureKeyVault(Configuration.GetSection(\"ActiveLogin:BankId:ClientCertificate\"));\n    });\n```\n\n----------------------------------------\n\nTITLE: Simulating BankID API Errors in C#\nDESCRIPTION: Shows how to configure Active Login to simulate BankID API errors for testing purposes. This example sets up a 20% error rate with varied error types.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseSimulatedEnvironment();\n        bankId.AddSimulatedApiErrors(\n            errorRate: 0.2,\n            errors: new Dictionary<ErrorCode, string>()\n            {\n                { ErrorCode.RequestTimeout, \"Timeout in API\" },\n                { ErrorCode.InternalError, \"Internal error in API\" }\n            },\n            varyErrorTypes: true);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Production Environment\nDESCRIPTION: Sets up BankID authentication for the production environment. This configuration requires proper client certificates for connecting to the live BankID system.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseProductionEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Result Store Logger in C#\nDESCRIPTION: Sample implementation of IBankIdResultStore interface that logs completion data to trace logs. Includes service registration with dependency injection.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdResultSampleLoggerStore : IBankIdResultStore\n{\n    private readonly EventId _eventId = new EventId(101, \"StoreCollectCompletedCompletionData\");\n    private readonly ILogger<BankIdResultTraceLoggerStore> _logger;\n\n    public BankIdResultSampleLoggerStore(ILogger<BankIdResultTraceLoggerStore> logger)\n    {\n        _logger = logger;\n    }\n\n    public Task StoreCollectCompletedCompletionData(string orderRef, CompletionData completionData)\n    {\n        _logger.LogTrace(_eventId, \"Storing completion data for OrderRef '{OrderRef}' (UserPersonalIdentityNumber: '{UserPersonalIdentityNumber}')\", orderRef, completionData.User.PersonalIdentityNumber);\n\n        return Task.CompletedTask;\n    }\n}\n\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.AddResultStore<BankIdResultSampleLoggerStore>();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Test Environment in C#\nDESCRIPTION: Sets up BankID authentication using the test environment with automatic root and client certificate registration. This is used for development and testing purposes.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseTestEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Production Environment Without Root Certificate\nDESCRIPTION: Sets up BankID production environment without automatically adding the root certificate. This allows for custom certificate handling in production scenarios.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseProductionEnvironment(useBankIdRootCertificate: false);\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Custom Client Certificate Source for BankID\nDESCRIPTION: Configures BankID to use a client certificate from a custom source via a delegate. This allows integration with custom certificate providers or stores.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddBankId(bankId =>\n    {\n        bankId\n            .UseProductionEnvironment()\n            .UseClientCertificate(() => new X509Certificate2( ... ))\n            ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Analyzing BankID Launch Type Distribution in Application Insights\nDESCRIPTION: This KQL query visualizes the distribution of BankID launch types (SameDevice/OtherDevice) from successful challenges. This data helps understand how users are accessing the authentication service across different devices.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_2\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project LaunchType = tostring(customDimensions.AL_BankId_Options_LaunchType)\n| summarize count() by LaunchType\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Test Environment with Custom Certificate Options\nDESCRIPTION: Disables automatic certificate addition when configuring BankID test environment. Useful when you want to manually provide certificates or test certificate handling.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseTestEnvironment(useBankIdRootCertificate: false, useBankIdClientCertificate: false);\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Auth Requirements Resolver\nDESCRIPTION: Custom implementation of IBankIdAuthRequestRequirementsResolver for dynamic authentication requirements.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdAuthRequestDynamicRequirementsResolver : IBankIdAuthRequestRequirementsResolver\n{\n    public Task<BankIdAuthRequirements> GetRequirementsAsync()\n    {\n        return Task.FromResult(new BankIdAuthRequirements()\n        {\n            RequireMrtd = true,\n            RequirePinCode = true,\n            RequiredPersonalIdentityNumber = new PersonalIdentityNumber(1999, 8, 7, 239, 1)\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static User Visible Data for BankID Authentication in C#\nDESCRIPTION: Sets a static text message to be displayed during BankID authentication without any formatting. This configures the UserVisibleData property which appears in the BankID app during the authentication process.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nbankId.UseAuthRequestUserData(authUserData =>\n{\n    authUserData.UserVisibleData = \"Login to your account at Active Login\";\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Device Detector for BankID Authentication in C#\nDESCRIPTION: Registers a custom implementation of IBankIdSupportedDeviceDetector as a transient service in the dependency injection container. This allows for customizing how client devices are detected during BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient<IBankIdSupportedDeviceDetector, CustomBankIdSupportedDeviceDetector>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Facebook App Browser Configuration for BankID Authentication\nDESCRIPTION: Creates a custom implementation for handling Facebook in-app browser detection and configuration. This class determines if the current request is from a Facebook app browser and provides the appropriate return URL and behavior settings.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\npublic class BankIdFacebookAppBrowserConfig : IBankIdLauncherCustomAppCallback\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public BankIdFacebookAppCallback(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    public Task<bool> IsApplicable(BankIdLauncherCustomAppCallbackContext context)\n    {\n        var userAgent = _httpContextAccessor.HttpContext?.Request.Headers.UserAgent.FirstOrDefault();\n        if (string.IsNullOrWhiteSpace(userAgent))\n        {\n            return Task.FromResult(false);\n        }\n\n        var isFacebook = userAgent.Contains(\"FBAN\") || userAgent.Contains(\"FBAV\");\n        return Task.FromResult(isFacebook);\n    }\n\n    public Task<string> GetCustomAppReturnUrl(BankIdLauncherCustomAppCallbackContext context)\n    {\n        return Task.FromResult(\n            new BankIdLauncherCustomAppCallbackResult(\"fb://\", BrowserReloadBehaviourOnReturnFromBankIdApp.Never, BrowserMightRequireUserInteractionToLaunch.Default)\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Browser Implementation for BankID Authentication\nDESCRIPTION: Registers a custom browser implementation for more complex browser detection scenarios. This approach allows more control through a fully custom implementation of IBankIdLauncherCustomBrowser.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        // ...\n\n        bankId.AddCustomBrowser<BankIdFacebookAppBrowserConfig>();\n\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Analyzing BankID Authentication Errors by Event Type in KQL\nDESCRIPTION: This KQL query aggregates authentication errors by event type (derived from event name) and visualizes the distribution as a pie chart. It focuses on events with 'Failure' or 'Error' severity to help identify which authentication steps are failing most frequently.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_16\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    Event_ShortName = substring(name, 19),\n    Event_Severity = tostring(customDimensions.AL_Event_Severity)\n| where Event_Severity == \"Failure\" or Event_Severity == \"Error\"\n| summarize count() by Event_ShortName\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Visualizing BankID Authentication Errors by Error Code in KQL\nDESCRIPTION: This KQL query summarizes authentication errors by BankID error codes and renders the results as a pie chart. It filters events with 'Failure' or 'Error' severity to provide a visual distribution of different error types.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_15\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    ErrorCode = tostring(customDimensions.AL_BankId_ErrorCode),\n    EventSeverity = tostring(customDimensions.AL_Event_Severity)\n| where EventSeverity == \"Failure\" or EventSeverity == \"Error\"\n| summarize count() by ErrorCode\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Visualizing BankID Errors by Event and Error Code\nDESCRIPTION: This KQL query visualizes BankID authentication errors by combining event types and error codes. It helps identify specific error patterns and their frequency over time using a column chart representation.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_12\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    Event_ShortName = substring(name, 19),\n    BankId_ErrorCode = tostring(customDimensions.AL_BankId_ErrorCode),\n    EventSeverity = tostring(customDimensions.AL_Event_Severity)\n| where EventSeverity == \"Failure\" or EventSeverity == \"Error\"\n| extend\n    EventAndErrorCode = strcat(Event_ShortName, ' - ', BankId_ErrorCode)\n| summarize count() by bin(timestamp, 1d), EventAndErrorCode\n| render columnchart\n```\n\n----------------------------------------\n\nTITLE: Setting Up BankID Simulated Environment with Custom Person Information\nDESCRIPTION: Configuring the simulated BankID environment with custom person information including first name, last name, and personal identity number for testing different user scenarios.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseSimulatedEnvironment(\"Alice\", \"Smith\", \"199908072391\")\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Up BankID Simulated Environment with No Configuration\nDESCRIPTION: The simplest way to configure the simulated BankID environment without any customization. This approach uses default values for the simulated user information.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseSimulatedEnvironment();\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Web Device Data Resolution\nDESCRIPTION: Example of custom web device data resolution configuration for BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseDeviceData(config =>\n        {\n            config.DeviceType = BankIdEndUserDeviceType.Web;\n            config.UseResolverFactory<MyCustomResolverFactory>();\n            config.AddDeviceResolver<MyCustomWebDeviceDataResolver>();\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Mobile App Device Data for BankID\nDESCRIPTION: Configuration example for mobile app device data resolution in BankID authentication, including device-specific information.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\nservices\n    .AddBankId(bankId =>\n    {\n        bankId.UseDeviceData(config =>\n        {\n            config.DeviceType = BankIdEndUserDeviceType.App;\n            config.UseResolverFactory<BankIdDefaultEndUserDeviceDataResolverFactory>();\n            config.AddDeviceResolver(s => new BankIdDefaultEndUserAppDeviceDataResolver()\n            {\n                AppIdentifier = \"com.example.app\",\n                DeviceOs = \"iOS 16.7.7\",\n                DeviceModelName = \"Apple iPhone14,3\",\n                DeviceIdentifier = \"1234567890\"\n            });\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Tracking BankID Authentication Events by Severity Over Time in KQL\nDESCRIPTION: This KQL query visualizes authentication events by severity level over time using a column chart. It groups events by day and severity, providing a timeline view of authentication system health and error patterns.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_17\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name startswith \"ActiveLogin_BankId_\"\n| project\n    timestamp,\n    Severity = tostring(customDimensions.AL_Event_Severity)\n| summarize count() by bin(timestamp, 1d), Severity\n| render columnchart\n```\n\n----------------------------------------\n\nTITLE: Analyzing Device Type and Launch Type Correlation for BankID\nDESCRIPTION: This KQL query examines the relationship between device types and launch types during successful BankID challenges. It combines the two dimensions to provide insights on which launch types are used with different device types.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_4\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project\n    DeviceType = tostring(customDimensions.AL_User_Device_Type),\n    LaunchType = tostring(customDimensions.AL_BankId_Options_LaunchType)\n| project DeviceTypeAndLaunchType = strcat(DeviceType, ' - ', LaunchType)\n| summarize count() by DeviceTypeAndLaunchType\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Analyzing Device Type Distribution for BankID in Application Insights\nDESCRIPTION: This KQL query extracts and visualizes the distribution of device types used in successful BankID challenges. It provides insights into which types of devices users prefer for authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_3\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project DeviceType = tostring(customDimensions.AL_User_Device_Type)\n| summarize count() by DeviceType\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Analyzing OS and Browser Distribution for BankID Authentication\nDESCRIPTION: This KQL query examines the relationship between operating systems and browsers used during successful BankID challenges. It helps identify popular browser and OS combinations for authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_6\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetChallengeSuccess\"\n| project\n    DeviceOs = tostring(customDimensions.AL_User_Device_Os),\n    DeviceBrowser = tostring(customDimensions.AL_User_Device_Browser)\n| project DeviceOsAndDeviceBrowser = strcat(DeviceOs, ' - ', DeviceBrowser)\n| summarize count() by DeviceOsAndDeviceBrowser\n| render piechart\n```\n\n----------------------------------------\n\nTITLE: Using AddClientCertificate Methods for Multi-tenant Scenarios\nDESCRIPTION: Example showing how to use AddClientCertificate methods instead of UseClientCertificate for multi-tenant scenarios where multiple client certificates need to be registered. UseClientCertificate methods will remove previously registered certificates.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/BREAKINGCHANGES.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n.AddClientCertificate()\n```\n\nLANGUAGE: csharp\nCODE:\n```\n.AddClientCertificateFromAzureKeyVault()\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Return Risk in .NET\nDESCRIPTION: Sets up BankID authentication options to enable return risk functionality. This replaces the previous allowed risk level configuration which is no longer supported by BankID.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/BREAKINGCHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<BankIdAuthOptions>(options =>\n{\n    options.BankIdReturnRisk = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Application Insights Connection Method\nDESCRIPTION: Example showing the updated method for connecting to Application Insights using a connection string instead of an instrumentation key, following Microsoft's recommended approach.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/BREAKINGCHANGES.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nAddApplicationInsightsEventListener()\n```\n\n----------------------------------------\n\nTITLE: Configuring BankID Test Environment Certificate Format in .NET\nDESCRIPTION: Specifies the client certificate format to use for the BankID test environment. This allows switching to an alternative certificate format if needed.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/BREAKINGCHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n.AddBankId(bankId =>\n{\n    bankId.UseTestEnvironment(clientCertificateFormat: TestCertificateFormat.PFX);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Invalid State Handler Implementation in C#\nDESCRIPTION: Sample implementation of an invalid state handler for BankID authentication that returns a 500 status code.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SampleInvalidStateHandler : IBankIdInvalidStateHandler\n{\n    public Task HandleAsync(HttpContext httpContext, BankIdInvalidStateContext invalidStateContext)\n    {\n        httpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing BankID Result Store Implementation\nDESCRIPTION: Code snippet showing how to remove all IBankIdResultStore implementations from the service collection.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nservices.RemoveAll(typeof(IBankIdResultStore));\n```\n\n----------------------------------------\n\nTITLE: Basic Azure KeyVault Configuration for BankID Client Certificate\nDESCRIPTION: Minimal JSON configuration for BankID client certificate using Azure KeyVault with DefaultAzureCredential. Specifies the KeyVault URI and secret name that contains the certificate.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/src/ActiveLogin.Authentication.BankId.AzureKeyVault/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActiveLogin:BankId:ClientCertificate\" {\n        \"AzureKeyVaultUri\": \"TODO-ADD-YOUR-VALUE\",\n        \"AzureKeyVaultSecretName\": \"TODO-ADD-YOUR-VALUE\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure KeyVault Certificate Settings in JSON\nDESCRIPTION: Basic configuration for Azure KeyVault certificate integration with BankID client certificate settings.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ActiveLogin:BankId:ClientCertificate\": {\n        \"AzureKeyVaultUri\": \"TODO-ADD-YOUR-VALUE\",\n        \"AzureKeyVaultSecretName\": \"TODO-ADD-YOUR-VALUE\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Successful BankID Logins by Week\nDESCRIPTION: This KQL query aggregates successful BankID authentications by year and week. It provides a tabular view of authentication volumes that can be used to identify weekly patterns or trends.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_9\n\nLANGUAGE: kql\nCODE:\n```\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetAuthenticateSuccess\"\n| project\n    timestamp,\n    Year = datetime_part(\"Year\", timestamp),\n    Week = week_of_year(timestamp)\n| extend\n    YearAndWeek = strcat(Year, ' ' , Week)\n| order by Year, Week\n| summarize Logins = count() by YearAndWeek\n| render table\n```\n\n----------------------------------------\n\nTITLE: Counting Successful BankID Logins by Month\nDESCRIPTION: This KQL query aggregates successful BankID authentications by year and month, with month names for readability. It provides a tabular view of monthly authentication volumes for trend analysis.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/monitor.md#2025-04-23_snippet_10\n\nLANGUAGE: kql\nCODE:\n```\nlet MonthNames = dynamic([\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]);\ncustomEvents\n| where name == \"ActiveLogin_BankId_AspNetAuthenticateSuccess\"\n| project\n    timestamp,\n    Year = datetime_part(\"Year\", timestamp),\n    Month = datetime_part(\"Month\", timestamp)\n| extend\n    YearAndMonth = strcat(Year, ' ' , tostring(MonthNames[Month]))\n| order by Year, Month\n| summarize Logins = count() by YearAndMonth\n| render table\n```\n\n----------------------------------------\n\nTITLE: Installing ActiveLogin.Authentication.BankId.AspNetCore Package with dotnet CLI\nDESCRIPTION: Command to install the ActiveLogin.Authentication.BankId.AspNetCore NuGet package using the dotnet CLI. This is the core package needed to integrate BankID authentication.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/articles/bankid.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet add package ActiveLogin.Authentication.BankId.AspNetCore\n```\n\n----------------------------------------\n\nTITLE: Responsive Container Styling with CSS Media Queries\nDESCRIPTION: CSS media queries that adjust the width of the container.body-content element based on different screen size breakpoints. The styling provides responsive layout with specific widths for small (768px), medium (992px), and large (1200px) screens.\nSOURCE: https://github.com/activelogin/activelogin.authentication/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@media (min-width: 768px) {\n    .container.body-content {\n        width: 750px;\n    }\n}\n\n@media (min-width: 992px) {\n    .container.body-content {\n        width: 970px;\n    }\n}\n\n@media (min-width: 1200px) {\n    .container.body-content {\n        width: 1170px;\n    }\n}\n```"
  }
]