[
  {
    "owner": "oracle",
    "repo": "docker-images",
    "content": "TITLE: Pulling Oracle RAC Container Image from Registry\nDESCRIPTION: Commands to pull the Oracle RAC container image from Oracle Container Registry and tag it for local use. Uses Podman to manage containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Oracle RAC Container Image\npodman pull container-registry.oracle.com/database/rac_ru:latest\npodman tag container-registry.oracle.com/database/rac_ru:latest localhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Building Patched Container with Updates\nDESCRIPTION: Command for building an Oracle Database container image with release updates and one-off patches applied.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -e -v 21.3.0 -p\n```\n\n----------------------------------------\n\nTITLE: Creating True Cache Network\nDESCRIPTION: Podman commands for setting up network infrastructure for True Cache communication\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npodman network create tc_net\npodman inspect tc_net | grep -iw 'subnet'\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Database Container Slim Image\nDESCRIPTION: Command to build an Oracle RAC Database Container Slim Image without Oracle Grid Infrastructure and Oracle Database Software Binaries. The example builds version 21.3.0 and retags it for further use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0 -i -o '--build-arg SLIMMING=true'\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman tag localhost/oracle/database-rac:21.3.0-slim localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep1 with NFS Storage\nDESCRIPTION: Podman command to create the first Oracle RAC container named 'racnodep1' using NFS storage. It sets various environment variables, mounts volumes, and configures system parameters for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.170 \\\n-e CRS_PRIVATE_IP2=192.168.18.170 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--volume racstorage:/oradata \\\n-e CRS_ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n-e CRS_ASM_DISCOVERY_STRING=\"/oradata/asm_disk*\" \\\n-e OP_TYPE=setuprac \\\n-e ASM_ON_NAS=True \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table for Oracle RAC on Podman\nDESCRIPTION: A markdown table listing all environment variables, their usage, and descriptions for setting up Oracle RAC on Podman containers. It includes variables for DNS configuration, operation type, CRS nodes, SCAN name, ASM devices, and various database-related settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/ENVIRONMENTVARIABLES.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable     | Mandatory/Optional | Usage      | Description                                                  |\n|--------------------------|---------------------|------------|--------------------------------------------------------------|\n| DNS_SERVERS              | Mandatory           | All        | Specify the comma-separated list of DNS server IP addresses where both Oracle RAC nodes are resolved. |\n| OP_TYPE                  | Mandatory           | All        | Specify the operation type. It can accept setuprac/setupgrid/addgridnode/racaddnode/setupracstandby. |\n| CRS_NODES                | Mandatory           | All        | Specify the CRS nodes in the format pubhost:pubhost1,viphost:viphost1;pubhost:pubhost2,viphost:viphost2. You can add as many hosts separated by semicolon. publhost and viphost are separated by comma. |\n| SCAN_NAME                | Mandatory           | All        | Specify the SCAN name.                                        |\n| CRS_ASM_DEVICE_LIST      | Mandatory           | All        | Specify the ASM disk lists.                                   |\n| PUBLIC_HOSTS_DOMAIN      | Optional            | All        | Specify public domain where RAC Containers are resolving to. |\n| CRS_ASM_DISCOVERY_STRING | Optional           | All        | Specify the discovery string for ASM.                        |\n| ORACLE_SID               | Optional            | All        | Default value set to ORCLCDB.                                 |\n| ORACLE_PDB               | Optional            | All        | Default value set to ORCLPDB.                                 |\n| ORACLE_CHARACTERSET      | Optional            | All        | Default value set to AL32UTF8.                                |\n| PWD_KEY                  | Mandatory           | All        | Pass the podman secret name for the key used while generating podman secrets. Default set to keysecret. |\n| DB_PWD_FILE              | Mandatory           | All        | Pass the podman secret name for the Oracle RAC Database to be used while generating podman secrets. Default set to pwdsecret. |\n| INIT_SGA_SIZE            | Optional            | All        | Set this environment variable when you want to set the size of SGA for RAC containers. |\n| INIT_PGA_SIZE            | Optional            | All        | Set this environment variable when you want to set the size of PGA for RAC containers. |\n| CRS_PRIVATE_IP1          | Mandatory           | All        | Set this environment variable when you want to set the private IP for the first private network for RAC container. |\n| CRS_PRIVATE_IP2          | Mandatory           | All        | Set this environment variable when you want to set the private IP for the second private network for RAC container. |\n| INSTALL_NODE             | Mandatory           | All        | Set this environment variable to the new Oracle node where the actual RAC cluster installation will happen. e.g., racnodep1/racnodep3 etc. |\n| EXISTING_CLS_NODE        | Mandatory           | Mandatory only during Node Addition to existing RAC Cluster | This is set during addition of node to Existing RAC Cluster. Set this environment variable to existing Oracle RAC node e.g., racnodep1, racnodep2. |\n| DB_ASM_DEVICE_LIST       | Optional           | All        | Comma-separated list of ASM disk names with their full paths.  |\n| RECO_ASM_DEVICE_LIST     | Optional           | All        | Comma-separated list of ASM disk names with their full paths.  |\n| DB_DATA_FILE_DEST        | Optional           | All        | Name of the diskgroup where database data files will be stored. |\n| DB_RECOVERY_FILE_DEST    | Optional           | All        | Name of the diskgroup where database recovery files (archivelogs) will be stored. |\n| CMAN_HOST                | Optional           | All        | Specify the host for Oracle Connection Manager (CMAN). Default value is set to racnodepc1-cman. |\n| CMAN_PORT                | Optional           | All        | Specify the port for Oracle Connection Manager (CMAN). Default port is set to 1521. |\n| DB_UNIQUE_NAME           | Mandatory           | Standby (DG Setup) | Specify the unique name for the standby database. |\n| PRIMARY_DB_SCAN_NAME     | Mandatory           | Standby (DG Setup) | Specify the SCAN name of the primary database. |\n| CRS_ASM_DISKGROUP        | Mandatory           | Standby (DG Setup) | Specify the ASM diskgroup for the standby database. |\n| PRIMARY_DB_UNIQUE_NAME   | Mandatory           | Standby (DG Setup) | Specify the unique name of the primary database. |\n| PRIMARY_DB_NAME          | Mandatory           | Standby (DG Setup) | Specify the name of the primary database. |\n| DB_BLOCK_CHECKSUM        | Mandatory           | Primary and Standby (DG Setup) | Specify the type of DB block checksum to use. |\n| DB_SERVICE               | Optional           | All        | Specify the database service. Format: service:soepdb. |\n| GRID_HOME                | Mandatory           | Setup using Slim Image | Path to Oracle Grid Infrastructure home directory. Default value is `/u01/app/21c/grid`. |\n| GRID_BASE                | Mandatory           | Setup using Slim Image | Path to the base directory of Oracle Grid Infrastructure. Default value is `/u01/app/grid`. |\n| DB_HOME                  | Mandatory           | Setup using Slim Image | Path to Oracle Database home directory. Default value is `/u01/app/oracle/product/21c/dbhome_1`. |\n| DB_BASE                  | Mandatory           | Setup using Slim Image | Path to the base directory of Oracle Database. Default value is `/u01/app/oracle`. |\n| INVENTORY                | Mandatory           | Setup using Slim Image | Path to the Oracle Inventory directory. Default value is `/u01/app/oraInventory`. |\n| STAGING_SOFTWARE_LOC     | Mandatory           | Setup using Slim Image | Location where the Oracle software zip files are staged. Default value is `/scratch/software/21c/goldimages/`. |\n| GRID_SW_ZIP_FILE         | Mandatory           | Setup using Slim Image | Name of the Oracle Grid Infrastructure software zip file. Default value is `LINUX.X64_213000_grid_home.zip`. |\n| DB_SW_ZIP_FILE           | Mandatory           | Setup using Slim Image | Name of the Oracle Database software zip file. Default value is `LINUX.X64_213000_db_home.zip`. |\n| GRID_RESPONSE_FILE       | Mandatory           | Setup using User Defined Response Files | Path to the Oracle Grid Infrastructure response file. Default value is `/tmp/grid_21c.rsp`. |\n| DBCA_RESPONSE_FILE       | Mandatory           | Setup using User Defined Response Files | Path to the Oracle Database Configuration Assistant (DBCA) response file. Default value is `/tmp/dbca_21c.rsp`. |\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database 21c/18c XE Container\nDESCRIPTION: Docker command to run Oracle Database 21c/18c Express Edition container with configurable parameters for ports, passwords, character sets, and volume mounts\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n-p <host port>:1521 -p <host port>:5500 \\\n-e ORACLE_PWD=<your database passwords> \\\n-e ORACLE_CHARACTERSET=<your character set> \\\n-v [<host mount point>:]/opt/oracle/oradata \\\noracle/database:21.3.0-xe\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container with Docker\nDESCRIPTION: Docker run command to start an Oracle Database container with configuration options for ports, resource limits, database parameters, and volume mounts. Includes detailed parameter descriptions for customizing the database instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n-p <host port>:1521 -p <host port>:5500 -p <host port>:2484 \\\n--ulimit nofile=1024:65536 --ulimit nproc=2047:16384 --ulimit stack=10485760:33554432 --ulimit memlock=3221225472 \\\n-e ORACLE_SID=<your SID> \\\n-e ORACLE_PDB=<your PDB name> \\\n-e ORACLE_PWD=<your database passwords> \\\n-e INIT_SGA_SIZE=<your database SGA memory in MB> \\\n-e INIT_PGA_SIZE=<your database PGA memory in MB> \\\n-e INIT_CPU_COUNT=<cpu_count init-parameter> \\\n-e INIT_PROCESSES=<processes init-parameter> \\\n-e ORACLE_EDITION=<your database edition> \\\n-e ORACLE_CHARACTERSET=<your character set> \\\n-e ENABLE_ARCHIVELOG=true \\\n-e ENABLE_FORCE_LOGGING=true \\\n-e ENABLE_TCPS=true \\\n-v [<host mount point>:]/opt/oracle/oradata \\\n oracle/database:21.3.0-ee\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Container Image Build Script Usage\nDESCRIPTION: Shows the usage instructions for buildContainerImage.sh script which builds Oracle Database container images. The script supports building different editions (Enterprise, Standard, Express) across multiple versions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[oracle@localhost dockerfiles]$ ./buildContainerImage.sh -h\n\nUsage: buildContainerImage.sh -v [version] -t [image_name:tag] [-e | -s | -x | -f] [-i] [-p] [-b] [-o] [container build option]\nBuilds a container image for Oracle Database.\n\nParameters:\n   -v: version to build\n       Choose one of: 11.2.0.2  12.1.0.2  12.2.0.1  18.3.0  18.4.0  19.3.0  21.3.0 23.6.0\n   -t: image_name:tag for the generated docker image\n   -e: creates image based on 'Enterprise Edition'\n   -s: creates image based on 'Standard Edition 2'\n   -x: creates image based on 'Express Edition'\n   -f: creates image based on Database 'Free'\n   -i: ignores the MD5 checksums\n   -p: creates and extends image using the patching extension\n   -b: build base stage only (Used by extensions)\n   -o: passes on container build option\n\n* select one edition only: -e, -s, -x, or -f\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database 23ai Free Container\nDESCRIPTION: SQL*Plus commands to connect to an Oracle Database 23ai Free container as different users (SYS, SYSTEM, PDBADMIN) after the container has been started and the database created.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus sys/<your password>@//localhost:1521/FREE as sysdba\n```\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus system/<your password>@//localhost:1521/FREE\n```\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus pdbadmin/<your password>@//localhost:1521/FREEPDB1\n```\n\n----------------------------------------\n\nTITLE: Database Maintenance Operations in K8s\nDESCRIPTION: Scripts for safely performing database shutdown and startup operations in Kubernetes pods without causing pod termination. These scripts should be used instead of direct 'shutdown immediate' and 'startup' commands.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/k8s/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/home/oracle/shutDown.sh\n/home/oracle/startUp.sh\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic 14.1.1.0 Docker Image\nDESCRIPTION: This command builds a Docker image for WebLogic Server 14.1.1.0 using the developer distribution and JDK 11.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.1.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 14.1.1.0 -d -j 11\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for RAC Container Setup\nDESCRIPTION: Sets up all required environment variables used by the podman-compose.yml file including container names, IP addresses, network configuration, and database parameters for Oracle RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c-slim\nexport STAGING_SOFTWARE_LOC=\"/scratch/software/21c/goldimages/\"\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport CRS_ASM_DISCOVERY_STRING=\"/oradata\"\nexport CRS_ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"localhost/oracle/rac-storage-server:latest\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PUBLIC_IP=10.0.20.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\nexport PWD_SECRET_FILE=/opt/.secrets/pwdfile.enc\nexport KEY_SECRET_FILE=/opt/.secrets/key.pem\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Disabling TCPS Connections in Oracle Database Docker Container\nDESCRIPTION: Command to disable TCPS connections for an Oracle Database Docker container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container name> /opt/oracle/configTcps.sh disable\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container with Storage Volume on Podman\nDESCRIPTION: Command to create the first Oracle RAC container using a storage volume on Podman. This sets up hostname, network settings, resource limits, and environment variables necessary for Oracle RAC installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.200 \\\n  -e VIP_HOSTNAME=racnodep1-vip  \\\n  -e PRIV_IP=192.168.17.170 \\\n  -e PRIV_HOSTNAME=racnodep1-priv \\\n  -e PUBLIC_IP=172.16.1.170 \\\n  -e PUBLIC_HOSTNAME=racnodep1  \\\n  -e SCAN_NAME=racnodepc1-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n  -e CMAN_HOSTNAME=racnodepc1-cman \\\n  -e CMAN_IP=172.16.1.166 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e DEFAULT_GATEWAY=\"172.16.1.1\" \\\n  -e TMPDIR=/var/tmp \\\n  --restart=always \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnodep1 \\\n  localhost/oracle/database-rac:21.3.0-21.13.0\n```\n\n----------------------------------------\n\nTITLE: Creating Podman RAC Node 1 with Block Devices\nDESCRIPTION: Podman command to create the first RAC node container using block devices for storage. Includes system resource limits, network configuration, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --dns 172.16.1.25 \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/containers/common_scripts:/common_scripts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns-search=example.info \\\n  --device=/dev/xvde:/dev/asm_disk1 \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e NODE_VIP=172.16.1.160 \\\n  -e VIP_HOSTNAME=racnode1-vip \\\n  -e PRIV_IP=192.168.17.150 \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1 \\\n  -e SCAN_NAME=\"racnode-scan\" \\\n  -e SCAN_IP=172.16.1.70 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e DOMAIN=example.com \\\n  -e DEFAULT_GATEWAY=172.16.1.1 \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e TMPDIR=/var/tmp \\\n  -e CRS_NODES=\"racnodep1,racnodep2\" \\\n  -e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n  -e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n  -e OP_TYPE=\"INSTALL\" \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e ORACLE_SID=ORCLCDB \\\n  --restart=always \\\n  --systemd=always \\\n  --ulimit rtprio=99  \\\n  --name racnodep1 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Docker Image Command Usage\nDESCRIPTION: Shell script usage instructions for building Oracle WebLogic Server Docker image, showing available parameters and options for version selection and distribution type.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../../OracleWebLogic/dockerfiles\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version] [-d | -g ] [-s]\nBuilds a Docker Image for Oracle WebLogic Server.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.3\n   -d: creates image based on 'developer' distribution\n   -g: creates image based on 'generic' distribution\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n\n* select one distribution only: -d, or -g\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Storage Placeholder for Oracle RAC\nDESCRIPTION: Creates an empty directory structure for NFS storage that will be used by Oracle RAC database. This ensures a clean starting point for the database setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Docker Container\nDESCRIPTION: Docker run command to start an Oracle database container with custom SID and PDB name. Includes port mapping for Oracle Listener (1521) and OEM Express (5500), along with volume mounting for data persistence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/customdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n-p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=<your SID> \\\n-e ORACLE_PDB=<your PDB name> \\\n-v <host mount point>:/opt/oracle/oradata \\\noracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database\nDESCRIPTION: SQL command to connect to the newly created Oracle database using the system account. Requires the configured password, hostname, port, and SID/PDB name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/customdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsql system/<your new db password>@//localhost:1521/<your new SID/PDB name>\n```\n\n----------------------------------------\n\nTITLE: Pulling and Tagging Oracle RAC Container Images\nDESCRIPTION: Commands to pull the Oracle RAC container image from Oracle Container Registry and tag it for local use in deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For Oracle RAC Container Image-\npodman pull container-registry.oracle.com/database/rac_ru:latest\npodman tag container-registry.oracle.com/database/rac_ru:latest localhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Network Configuration for Oracle RAC Node\nDESCRIPTION: Commands to configure networking for a new Oracle RAC node. This includes disconnecting from the default network and connecting to the RAC-specific networks with proper IP addresses for public and private interfaces.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep3\npodman network connect rac_pub1_nw --ip 10.0.20.172 racnodep3\npodman network connect rac_priv1_nw --ip 192.168.17.172  racnodep3\npodman network connect rac_priv2_nw --ip 192.168.18.172  racnodep3\npodman start racnodep3\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Container (Bash)\nDESCRIPTION: Creates the first Oracle RAC container using Podman with specified configuration options, volumes, and resource limits. This command sets up the container named 'racnodep1'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--volume /scratch/rac/cluster01/node1:/u01 \\\n--volume /scratch:/scratch \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep1:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--volume racstorage:/oradata \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database 23ai Free in a Container\nDESCRIPTION: Command to run Oracle Database 23ai Free in a container using podman. This command includes options for setting the container name, port mapping, database password, character set, archive log mode, force logging mode, and data volume.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npodman run --name <container name> \\\n-p <host port>:1521 \\\n-e ORACLE_PWD=<your database passwords> \\\n-e ORACLE_CHARACTERSET=<your character set> \\\n-e ENABLE_ARCHIVELOG=true \\\n-e ENABLE_FORCE_LOGGING=true \\\n-v [<host mount point>:]/opt/oracle/oradata \\\noracle/database:23.6.0-free\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates three Podman networks: a public network and two private networks for Oracle RAC communication. The private networks are configured with DNS disabled and set as internal networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns --internal\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Analytics Server Docker Image with buildContainerImage.sh\nDESCRIPTION: Uses the provided script to build the Oracle Analytics Server Docker image, specifying version 6.4. This is the recommended approach for building the image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd OracleAnalytics/dockerfiles\n./buildContainerImage.sh -v 6.4\n```\n\n----------------------------------------\n\nTITLE: Assigning Networks to Oracle RAC Container on Podman\nDESCRIPTION: Commands to disconnect the default Podman network and connect the container to the previously created public and private RAC networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep1\npodman network connect rac_pub1_nw --ip 172.16.1.170 racnodep1\npodman network connect rac_priv1_nw --ip 192.168.17.170  racnodep1\n```\n\n----------------------------------------\n\nTITLE: Creating Docker RAC Node 1 with NFS Volume\nDESCRIPTION: Docker command to create the first RAC node (Racnoded1) container with NFS volume configuration. Sets up hostname, volumes, network parameters, and environment variables required for RAC installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n--hostname Racnoded1 \\\n--volume /boot:/boot:ro \\\n--volume /dev/shm \\\n--volume /opt/.secrets:/run/secrets \\\n--volume /opt/containers/common_scripts:/common_scripts \\\n--volume /opt/containers/rac_host_file:/etc/hosts \\\n--volume racstorage:/oradata \\\n--tmpfs /dev/shm:rw,exec,size=4G \\\n--dns-search=example.com \\\n--privileged=false \\\n--cap-add=SYS_NICE \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n-e NODE_VIP=172.16.1.160 \\\n-e VIP_HOSTNAME=Racnoded1-vip \\\n-e PRIV_IP=192.168.17.150 \\\n-e PRIV_HOSTNAME=Racnoded1-priv \\\n-e PUBLIC_IP=172.16.1.150 \\\n-e PUBLIC_HOSTNAME=Racnoded1 \\\n-e SCAN_NAME=\"racnode-scan\" \\\n-e SCAN_IP=172.16.1.70 \\\n-e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n-e DOMAIN=example.com \\\n-e DEFAULT_GATEWAY=172.16.1.1 \\\n-e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n-e ASM_DISCOVERY_DIR=/oradata \\\n-e CRS_NODES=\"Racnoded1,Racnoded2\" \\\n-e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n-e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n-e OP_TYPE=\"INSTALL\" \\\n--restart=always \\\n--tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n--cpu-rt-runtime=95000 \\\n--ulimit rtprio=99 \\\n--name Racnoded1 oracle/database-rac:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Running Second Managed Server Container\nDESCRIPTION: Docker run command to start the second Managed Server (MS2) container that self-registers with the Admin server\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-deploy-application/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name MS2 --link wlsadmin:wlsadmin -p 8002:8001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n          -e MANAGED_SERV_NAME=managed-server2 12213-domain-with-app startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for Oracle RAC\nDESCRIPTION: Creates a podman volume that mounts the NFS share from the storage container. This volume will be used by the RAC containers to access shared storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=10.0.20.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=10.0.20.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Docker Container\nDESCRIPTION: Docker command to start a new Oracle Database container with custom SID, PDB name, and volume mapping for data persistence\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/startersetcontainer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name starterset \\\n-p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=ORCLSTARTER \\\n-e ORACLE_PDB=STARTERSET \\\n-v /home/oracle/oradata:/opt/oracle/oradata \\\noracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secrets for Database Password\nDESCRIPTION: Commands to create and use Podman secrets for securely passing database passwords to the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"<Your Password>\" | podman secret create oracle_pwd -\n\npodman run -d --name=<container_name> --secret=oracle_pwd oracle/database:21.3.0-xe\n```\n\n----------------------------------------\n\nTITLE: Deploying RAC Node 1 Container\nDESCRIPTION: Starts the first RAC node container, configures its network connections, and monitors its startup log.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} && \\\npodman-compose stop ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE_NETWORK_NAME} --ip ${RACNODE1_PRIV_IP} ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Starting Connection Manager (CMAN) Container\nDESCRIPTION: Optional step to deploy a Connection Manager container that provides connection pooling and filtering for the RAC database. Includes command to monitor the startup logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n################################################\n  CONNECTION MANAGER IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on Docker\nDESCRIPTION: Complete Docker create command with all necessary parameters and environment variables for deploying an Oracle RAC container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n  --hostname racnode1 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/xvde:/dev/asm_disk1  \\\n  --device=/dev/xvdf:/dev/asm_disk2 \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.160 \\\n  -e VIP_HOSTNAME=racnode1-vip  \\\n  -e PRIV_IP=192.168.17.150 \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1  \\\n  -e SCAN_NAME=racnode-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e CMAN_HOSTNAME=racnode-cman1 \\\n  -e CMAN_IP=172.16.1.15 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --restart=always --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 --ulimit rtprio=99  \\\n  --name racnode1 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Building Oracle WebLogic Server Docker Image\nDESCRIPTION: This bash script builds a Docker image for Oracle WebLogic Server. It supports different versions, distributions, and Java versions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.1.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version] [-d | -g | -m] [-s] [-j]\nBuilds a Docker Image for Oracle WebLogic Server.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 14.1.1.0\n   -d: creates image based on 'developer' distribution\n   -g: creates image based on 'generic' distribution\n   -m: creates image based on 'slim' distribution\n   -j: choose '8' to create a 14.1.1.0 image with JDK 8 or '11' to create a 14.1.1.0 image with JDK 11. \n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n\n* select one distribution only: -d, -g, or -m\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014, 2020, Oracle and/or its affiliates\n```\n\n----------------------------------------\n\nTITLE: Pulling and Tagging Oracle RAC Image from Oracle Container Registry\nDESCRIPTION: Commands to pull the Oracle RAC image from the Oracle Container Registry and tag it for local use. This allows users to obtain pre-built images instead of building them locally.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Oracle RAC Container Image\npodman pull container-registry.oracle.com/database/rac_ru:latest\npodman tag container-registry.oracle.com/database/rac_ru:latest localhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Building Oracle JDK Server JRE Base Image\nDESCRIPTION: Commands to build the Oracle Server JRE base image required for the FMW Infrastructure image. Includes steps to either build from source or pull and retag from official registries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n\n$ docker tag container-registry.oracle.com/java/serverjre:8 oracle/serverjre:8\n$ docker tag store/oracle/serverjre:8 oracle/serverjre:8\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Node Container with Podman\nDESCRIPTION: Creates the first RAC node container using Podman with user-defined response files and block devices. This command configures necessary resources like memory, CPU, volumes, devices, and capabilities for the first RAC node with hostname racnodep1.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--volume /scratch/rac/cluster01/node1:/u01 \\\n--volume /scratch:/scratch \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep1:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for BI and Database Containers\nDESCRIPTION: Creates a Docker user-defined network and runs both the database and BI containers on this network. This allows the containers to communicate using container names as hostnames.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge bi_net\n\n$ docker run --name database --network=bi_net ...... oracle/database:12.1.0.2-ee\n\n$ docker run --name bi --network=bi_net -e DB_HOST=database ...... oracle/analyticsserver:6.4-patch\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for RAC Response Files\nDESCRIPTION: Sets the appropriate SELinux context for the response files used in Oracle RAC installation. This ensures the containers can access these files without permission issues when SELinux is enabled.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Creating Racnodep2 RAC Node Container with Podman\nDESCRIPTION: Creates the second node (racnodep2) of an Oracle RAC cluster using Podman with similar configuration to the first node, but with different network settings and hostname. This container will function as the second node in a two-node RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep2 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets1:/run/secrets:ro \\\n  --dns-search \"example.info\" \\\n  --volume racstorage:/oradata \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e NODE_VIP=172.16.1.161 \\\n  -e VIP_HOSTNAME=racnode2-vip \\\n  -e PRIV_IP=192.168.17.151 \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151 \\\n  -e PUBLIC_HOSTNAME=racnode2 \\\n  -e SCAN_NAME=\"racnode-scan\" \\\n  -e SCAN_IP=172.16.1.70 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e DOMAIN=example.com \\\n  -e DEFAULT_GATEWAY=172.16.1.1 \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e CRS_NODES=\"racnode1,racnode2\" \\\n  -e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n  -e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n  --restart=always \\\n  --systemd=always \\\n  --ulimit rtprio=99  \\\n  --name racnodep2 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Managed Server Container\nDESCRIPTION: This command starts a containerized WebLogic Managed Server that self-registers with the Admin Server. It links to the 'wlsadmin' container, maps port 7002, and runs the 'createServer.sh' script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-domain-online-config/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --link wlsadmin:wlsadmin -p 7002:7002 1221-domain-online-config createServer.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle RAC Containers in Podman\nDESCRIPTION: Starts the Oracle RAC containers after they have been created and configured with the appropriate networks. This initiates the Oracle RAC setup process, which can take approximately 20 minutes or longer to complete.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npodman start racnodep1\npodman start racnodep2\n```\n\n----------------------------------------\n\nTITLE: Deploying Oracle RAC Containers\nDESCRIPTION: Sets up and configures RAC node containers with specified resource limits and network configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up  -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\nrm -rf /scratch/rac/cluster01/node1/*\nrm -rf /scratch/rac/cluster01/node2/*\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating Racnodep1 RAC Node Container with Podman\nDESCRIPTION: Creates the first node (racnodep1) of an Oracle RAC cluster using Podman with proper resource allocation, volume mounts for data persistence, and necessary environment variables for RAC configuration. This container will function as the first node in a two-node RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/containers/common_scripts:/common_scripts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns-search=example.info \\\n  --volume racstorage:/oradata \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e NODE_VIP=172.16.1.160 \\\n  -e VIP_HOSTNAME=racnode1-vip \\\n  -e PRIV_IP=192.168.17.150 \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1 \\\n  -e SCAN_NAME=\"racnode-scan\" \\\n  -e SCAN_IP=172.16.1.70 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e DOMAIN=example.com \\\n  -e DEFAULT_GATEWAY=172.16.1.1 \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e TMPDIR=/var/tmp \\\n  -e CRS_NODES=\"racnodep1,racnodep2\" \\\n  -e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n  -e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n  -e OP_TYPE=\"INSTALL\" \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e ORACLE_SID=ORCLCDB \\\n  --restart=always \\\n  --systemd=always \\\n  --ulimit rtprio=99  \\\n  --name racnodep1 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0 \n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RAC with NFS Storage\nDESCRIPTION: Bash commands to export necessary environment variables for setting up Oracle RAC on Docker with NFS Storage using Docker Compose. These variables are used in the docker-compose.yml file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=rac-dns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport RAC_NODE_NAME_PREFIXD=\"racnoded\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_pzriv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport DNS_PRIVATE_IP=192.168.17.25\nexport INSTALL_NODE=racnoded1\nexport SCAN_NAME=\"racnodedc1-scan\"\nexport SCAN_IP=172.16.1.230\nexport PWD_KEY=\"pwd.key\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport RACNODE1_CONTAINER_NAME=racnoded1\nexport RACNODE1_HOST_NAME=racnoded1\nexport RACNODE_IMAGE_NAME=\"oracle/database-rac:19.3.0\"\nexport RACNODE1_NODE_VIP=172.16.1.130\nexport RACNODE1_VIP_HOSTNAME=\"racnoded1-vip\"\nexport RACNODE1_PRIV_IP=192.168.17.100\nexport RACNODE1_PRIV_HOSTNAME=\"racnoded1-priv\"\nexport RACNODE1_PUBLIC_IP=172.16.1.100\nexport RACNODE1_PUBLIC_HOSTNAME=\"racnoded1\"\nexport CMAN_CONTAINER_NAME=racnodedc1-cman\nexport CMAN_PUBLIC_IP=172.16.1.164\nexport CMAN_HOSTNAME=\"racnodedc1-cman\"\nexport CMAN_IMAGE_NAME=\"oracle/client-cman:19.3.0\"\nexport DNS_DOMAIN=\"example.com\"\nexport CMAN_PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport CMAN_PUBLIC_HOSTNAME=\"racnodec1-cman\"\nexport CMAN_VERSION=\"19.3.0\"\nexport ORACLE_HOME=/u01/app/oracle/product/${CMAN_VERSION}/client_1\nexport ASM_DISCOVERY_DIR=\"/oradata\"\nexport ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"oracle/rac-storage-server:19.3.0\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PRIVATE_IP=192.168.17.80\nexport NFS_STORAGE_VOLUME=\"/docker_volumes/asm_vol/$ORACLE_DBNAME\"\n```\n\n----------------------------------------\n\nTITLE: Changing Admin Password in Oracle Database Docker Container\nDESCRIPTION: Command to change the password for admin accounts in a running Oracle Database Docker container. This should be done after the initial container setup and when the container is in a healthy state.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container name> ./setPassword.sh <your password>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle WebLogic Server Docker Image\nDESCRIPTION: This bash script builds a Docker image for Oracle WebLogic Server. It allows specifying the version, distribution type, JDK version, and other build options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v [version] [-d | -g | -m ] [-j] [-s] [-c]\n```\n\n----------------------------------------\n\nTITLE: Cleanup RAC Environment with NFS Storage\nDESCRIPTION: Commands to clean up an Oracle RAC environment using NFS storage, including container removal, volume cleanup, and network/image removal.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f racnoded1 racnoded2 rac-dnsserver racnode-storage racnodedc1-cman \nrm -rf /opt/containers /opt/.secrets\nexport ORACLE_DBNAME=ORCLCDB\nrm -rf /docker_volumes/asm_vol/$ORACLE_DBNAME/asm_disk0*\ndocker volume -f racstorage\ndocker network rm -f rac_pub1_nw rac_pzriv1_nw\ndocker rmi -f oracle/rac-dnsserver:latest oracle/rac-storage-server:19.3.0 oracle/database-rac:19.3.0 oracle/client-cman:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RAC Container Setup\nDESCRIPTION: Exports environment variables required by the podman-compose.yml file, including network configurations, hostnames, IP addresses, and paths to resources. These variables are essential for the proper setup of the RAC cluster containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c-slim\nexport STAGING_SOFTWARE_LOC=\"/scratch/software/21c/goldimages/\"\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport SCAN_NAME=racnodepc1-scan\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"localhost/oracle/rac-storage-server:latest\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PUBLIC_IP=10.0.20.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\nexport GRID_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\"\nexport DB_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/dbca_21c.rsp\"\nexport PWD_SECRET_FILE=/opt/.secrets/pwdfile.enc\nexport KEY_SECRET_FILE=/opt/.secrets/key.pem\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Enabling TCPS with Self-Signed Certificates in Oracle Database Docker Container\nDESCRIPTION: Command to enable TCPS connections with self-signed certificates for an Oracle Database Docker container after the database is created.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container name> /opt/oracle/configTcps.sh\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Container with Custom Scripts\nDESCRIPTION: Docker command to run an Oracle database container with mounted volumes for custom startup scripts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_28\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --name oracle-ee -p 1521:1521 -v /home/oracle/myScripts:/opt/oracle/scripts/startup -v /home/oracle/oradata:/opt/oracle/oradata oracle/database:19.3.0-ee\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Macvlan Networks for Oracle RAC\nDESCRIPTION: Commands to create Podman Macvlan networks for public and private communications in Oracle RAC on multiple hosts. These networks allow containers to have their own MAC addresses on the physical network.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d macvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\npodman network create -d macvlan --subnet=192.168.17.0/24 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d macvlan --subnet=192.168.18.0/24 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Container with Shared Storage Volume\nDESCRIPTION: Command to create the first Oracle RAC container using the Oracle RAC image with a shared storage volume. This configures hostname, networking, privileges, volumes, and environment variables required for installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# docker create -t -i \\\n  --hostname racnode1 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.160  \\\n  -e VIP_HOSTNAME=racnode1-vip  \\\n  -e PRIV_IP=192.168.17.150  \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1  \\\n  -e SCAN_NAME=racnode-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n  -e CMAN_HOSTNAME=racnode-cman1 \\\n  -e CMAN_IP=172.16.1.15 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --restart=always \\\n  --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnode1 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Container on Podman\nDESCRIPTION: Complete Podman command to create the first Oracle RAC container (racnodep1) with required system resources, environment variables, shared storage devices, and security settings for a two-node RAC configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.170 \\\n-e CRS_PRIVATE_IP2=192.168.18.170 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n-e CRS_ASM_DEVICE_LIST=/dev/asm-disk1,/dev/asm-disk2 \\\n-e OP_TYPE=setuprac \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Creating Second Oracle RAC Container (Bash)\nDESCRIPTION: Creates the second Oracle RAC container using Podman with similar configuration as the first node, but with a different hostname and environment file. This command sets up the container named 'racnodep2'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--volume /scratch/rac/cluster01/node2:/u01 \\\n--volume /scratch:/scratch \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep2:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--volume racstorage:/oradata \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Creating Docker RAC Node 2 with NFS Volume\nDESCRIPTION: Docker command to create the second RAC node (Racnoded2) container with NFS volume configuration. Similar to Node 1 but with different network and hostname parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n--hostname Racnoded2 \\\n--volume /boot:/boot:ro \\\n--volume /dev/shm \\\n--volume /opt/.secrets:/run/secrets \\\n--volume /opt/containers/common_scripts:/common_scripts \\\n--volume /opt/containers/rac_host_file:/etc/hosts \\\n--volume racstorage:/oradata \\\n--tmpfs /dev/shm:rw,exec,size=4G \\\n--dns-search=example.com \\\n--privileged=false \\\n--cap-add=SYS_NICE \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n-e NODE_VIP=172.16.1.161 \\\n-e VIP_HOSTNAME=Racnoded2-vip \\\n-e PRIV_IP=192.168.17.151 \\\n-e PRIV_HOSTNAME=Racnoded2-priv \\\n-e PUBLIC_IP=172.16.1.151 \\\n-e PUBLIC_HOSTNAME=Racnoded2 \\\n-e SCAN_NAME=\"racnode-scan\" \\\n-e SCAN_IP=172.16.1.70 \\\n-e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n-e DOMAIN=example.com \\\n-e DEFAULT_GATEWAY=172.16.1.1 \\\n-e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n-e ASM_DISCOVERY_DIR=/oradata \\\n-e CRS_NODES=\"Racnoded1,Racnoded2\" \\\n-e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n-e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n--restart=always \\\n--tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n--cpu-rt-runtime=95000 \\\n--ulimit rtprio=99 \\\n--name Racnoded2 oracle/database-rac:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Container\nDESCRIPTION: Docker run command for starting a WebLogic Server container with customizable domain parameters and administration port settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-wls-for-k8s/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$docker run -d -p 7001:7001 -p 9002:9002  -v HOST PATH where the domain.properties file is :/u01/oracle/properties -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_HOME=/u01/oracle/user_projects/domains/abc_domain -e DOMAIN_NAME=abc_domain oracle/weblogic:12213-opatch-update\n```\n\n----------------------------------------\n\nTITLE: Creating Racnoded2 Docker Container for Oracle RAC\nDESCRIPTION: Creates the second RAC node container (Racnoded2) with block devices, specifying various configuration parameters and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n--hostname Racnoded2 \\\n--volume /boot:/boot:ro \\\n--volume /dev/shm \\\n--volume /opt/.secrets:/run/secrets \\\n--volume /opt/containers/common_scripts:/common_scripts \\\n--volume /opt/containers/rac_host_file:/etc/hosts \\\n--tmpfs /dev/shm:rw,exec,size=4G \\\n--dns-search=example.com \\\n--device=/dev/xvde:/dev/asm_disk1 \\\n--privileged=false \\\n--cap-add=SYS_NICE \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n-e NODE_VIP=172.16.1.161 \\\n-e VIP_HOSTNAME=Racnoded2-vip \\\n-e PRIV_IP=192.168.17.151 \\\n-e PRIV_HOSTNAME=Racnoded2-priv \\\n-e PUBLIC_IP=172.16.1.151 \\\n-e PUBLIC_HOSTNAME=Racnoded2 \\\n-e SCAN_NAME=\"racnode-scan\" \\\n-e SCAN_IP=172.16.1.70 \\\n-e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n-e DOMAIN=example.com \\\n-e DEFAULT_GATEWAY=172.16.1.1 \\\n-e ASM_DEVICE_LIST=/dev/asm_disk1 \\\n-e ASM_DISCOVERY_DIR=/dev \\\n-e CRS_NODES=\"Racnoded1,Racnoded2\" \\\n-e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n-e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n--restart=always \\\n--tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n--cpu-rt-runtime=95000 \\\n--ulimit rtprio=99 \\\n--name Racnoded2 oracle/database-rac:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep1 with Block Devices and User-Defined Response Files\nDESCRIPTION: Podman command to create the first Oracle RAC container named 'racnodep1' using block devices and user-defined response files. It mounts response files, sets environment variables, and configures system parameters for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e GRID_RESPONSE_FILE=/tmp/grid_21c.rsp \\\n-e DBCA_RESPONSE_FILE=/tmp/dbca_21c.rsp \\\n-e CRS_PRIVATE_IP1=192.168.17.170 \\\n-e CRS_PRIVATE_IP2=192.168.18.170 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n-e CRS_ASM_DEVICE_LIST=/dev/asm-disk1,/dev/asm-disk2 \\\n-e OP_TYPE=setuprac \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Unified Directory Services Manager Image\nDESCRIPTION: Usage instructions for the buildDockerImage.sh script, which builds the Oracle Unified Directory Services Manager Docker image. The script allows specifying the version and includes options for enabling layer caching and skipping MD5 checks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle Unified Directory Services Manager\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.4.0\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n```\n\n----------------------------------------\n\nTITLE: Creating Racnoded1 Docker Container for Oracle RAC\nDESCRIPTION: Creates the first RAC node container (Racnoded1) with block devices, specifying various configuration parameters and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n--hostname Racnoded1 \\\n--volume /boot:/boot:ro \\\n--volume /dev/shm \\\n--volume /opt/.secrets:/run/secrets \\\n--volume /opt/containers/common_scripts:/common_scripts \\\n--volume /opt/containers/rac_host_file:/etc/hosts \\\n--tmpfs /dev/shm:rw,exec,size=4G \\\n--dns-search=example.com \\\n--device=/dev/xvde:/dev/asm_disk1 \\\n--privileged=false \\\n--cap-add=SYS_NICE \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n-e NODE_VIP=172.16.1.160 \\\n-e VIP_HOSTNAME=Racnoded1-vip \\\n-e PRIV_IP=192.168.17.150 \\\n-e PRIV_HOSTNAME=Racnoded1-priv \\\n-e PUBLIC_IP=172.16.1.150 \\\n-e PUBLIC_HOSTNAME=Racnoded1 \\\n-e SCAN_NAME=\"racnode-scan\" \\\n-e SCAN_IP=172.16.1.70 \\\n-e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n-e DOMAIN=example.com \\\n-e DEFAULT_GATEWAY=172.16.1.1 \\\n-e ASM_DEVICE_LIST=/dev/asm_disk1 \\\n-e ASM_DISCOVERY_DIR=/dev \\\n-e CRS_NODES=\"Racnoded1,Racnoded2\" \\\n-e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n-e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n-e OP_TYPE=\"INSTALL\" \\\n--restart=always \\\n--tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n--cpu-rt-runtime=95000 \\\n--ulimit rtprio=99 \\\n--name Racnoded1 oracle/database-rac:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Validating Node Deletion\nDESCRIPTION: Command to verify successful node deletion by checking the remaining nodes in the cluster using the olsnodes utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/DELETION.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -it racnodep1 bash\n[root@racnodep1 bin]# /u01/app/21c/grid/bin/olsnodes -n\nracnodep1       1\nracnodep2       2\n```\n\n----------------------------------------\n\nTITLE: Encrypting Database Password with OpenSSL\nDESCRIPTION: Series of OpenSSL commands to generate key pairs, encrypt password file, and run container with encrypted credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out key.pem\nopenssl rsa -in key.pem -out key.pub -pubout\necho \"<Your Password>\" > pwd.txt\nopenssl pkeyutl -in pwd.txt -out encrypted_pwd.txt -pubin -inkey key.pub -encrypt\npodman secret create oracle_pwd encrypted_pwd.txt\npodman secret create oracle_pwd_privkey key.pem\npodman run -td --name=<container_name> --secret=oracle_pwd --secret=oracle_pwd_privkey oracle/database:23.6.0-free\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Docker Image\nDESCRIPTION: Use this command to build the Oracle RAC Docker image. It specifies the software version, base Oracle Linux image, and includes the -i flag for interactive mode. This creates a Docker image containing Oracle Grid Infrastructure and RAC Database binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0 -o '--build-arg  BASE_OL_IMAGE=oraclelinux:7' -i\n```\n\n----------------------------------------\n\nTITLE: Docker Run Commands for WLS Servers\nDESCRIPTION: Commands to run WebLogic Admin and Managed Servers in Docker containers with proper linking and port mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image-wdt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 -v <sample-directory>/properties/docker-run:/u01/oracle/properties 12213-domain-home-in-image-wdt\n\n$ docker run -d --name managed-server-1 --link wlsadmin:wlsadmin -p 8001:8001 -v <sample-directory>/properties/docker-run:/u01/oracle/properties -e MANAGED_SERVER_NAME=managed-server-1 12213-domain-home-in-image-wdt startManagedServer.sh\n\n$ docker run -d --name managed-server-2 --link wlsadmin:wlsadmin -p 8002:8001 -v <sample-directory>/properties/docker-run/:/u01/oracle/properties -e MANAGED_SERVER_NAME=managed-server-2 12213-domain-home-in-image-wdt startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Administration Server Container\nDESCRIPTION: Docker command to run the Administration Server container. It maps the properties file from the host to the container and exposes the necessary port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n          12213-domain-home-in-image\n```\n\n----------------------------------------\n\nTITLE: Enabling TCPS with User-Provided SSL Certificates in Oracle Database Docker Container\nDESCRIPTION: Commands to enable TCPS connections with user-provided SSL certificates for an Oracle Database Docker container after the database is created. This involves copying the certificates into the container and then configuring TCPS.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp cert.crt client.key <container name>:<TCPS_CERTS_LOCATION>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container name> env TCPS_CERTS_LOCATION=<location of certs in container>  /opt/oracle/configTcps.sh\n```\n\n----------------------------------------\n\nTITLE: Building Patched Oracle Database Container\nDESCRIPTION: Command example for building an Oracle Database container image with patching support. Shows how to disable SLIMMING and build a 21.3.0 Enterprise Edition container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -e -v 21.3.0 -o '--build-arg SLIMMING=false'\n```\n\n----------------------------------------\n\nTITLE: Running Pre-built Oracle Database Docker Image\nDESCRIPTION: This command runs a new container using the pre-built Oracle Database image, exposing ports 1521 and 5500. Replace <container-name> with the desired container name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container-name> -p 1521:1521 -p 5500:5500 oracle/db-prebuilt:19.3.0-ee\n```\n\n----------------------------------------\n\nTITLE: Building JDK Container Image Using build.sh Script\nDESCRIPTION: This snippet shows how to use the provided build.sh script to build container images for NFTC releases (JDK 24 and 21). The script contains the correct build command.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleJava/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash build.sh\n```\n\n----------------------------------------\n\nTITLE: Downloading WebLogic Deploy Tooling in Bash\nDESCRIPTION: This command downloads the WebLogic Deploy Tooling ZIP file, which is required to build the Docker image. It uses curl to fetch version 1.3.0 of the tooling.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl  -Lo ./weblogic-deploy.zip https://github.com/oracle/weblogic-deploy-tooling/releases/download/weblogic-deploy-tooling-1.3.0/weblogic-deploy.zip\n```\n\n----------------------------------------\n\nTITLE: Setting Up DNS Container for RAC Cluster\nDESCRIPTION: Launches and configures the DNS container required for the RAC cluster. This involves starting the container, disconnecting it from default networks, and reconnecting it with specific IP addresses on each network.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${DNS_PRIVATE1_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${DNS_PRIVATE2_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Second Oracle RAC Container (racnodep2) in Podman\nDESCRIPTION: Creates the second Oracle RAC container with hostname racnodep2, configuring system resources, volumes, network settings, and environment variables. This container will be the second node in the RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e GRID_RESPONSE_FILE=/tmp/grid_21c.rsp \\\n-e DBCA_RESPONSE_FILE=/tmp/dbca_21c.rsp \\\n-e CRS_PRIVATE_IP1=192.168.17.171 \\\n-e CRS_PRIVATE_IP2=192.168.18.171 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--volume racstorage:/oradata \\\n-e CRS_ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n-e CRS_ASM_DISCOVERY_STRING=\"/oradata/asm_disk*\" \\\n-e OP_TYPE=setuprac \\\n-e ASM_ON_NAS=True \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Directory for Password Management\nDESCRIPTION: Creates a directory to store password-related secret files for Oracle RAC container deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/.secrets/\n```\n\n----------------------------------------\n\nTITLE: Configuring Network for Racnodep2 Container\nDESCRIPTION: Configures the network for the second RAC node by disconnecting from the default bridge network and connecting to the public and private RAC networks with specific IP addresses. These network connections match the environment variables set during container creation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# podman network disconnect bridge racnodep2\n# podman network connect rac_pub1_nw --ip 172.16.1.151 racnodep2\n# podman network connect rac_priv1_nw --ip 192.168.17.151  racnodep2\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Managed Server Container\nDESCRIPTION: Command to start a WebLogic Managed Server in a Docker container. It links to the Admin Server container, maps port 7002, and runs a script to self-register with the Admin Server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/1213-domain/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --link wlsadmin:wlsadmin -p 7002:7002 1213-domain createServer.sh\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Oracle RAC Container on Podman\nDESCRIPTION: Commands to start the Oracle RAC container and monitor its logs. This includes starting the container and tailing the log file to check for successful database creation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# podman start racnode2\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnode2 /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for Oracle RAC Storage\nDESCRIPTION: Creates a podman volume that maps to the NFS server provided by the storage container. This volume is configured with specific NFS mount options for optimal performance with Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=10.0.20.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=10.0.20.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle Grid Infrastructure\nDESCRIPTION: Commands to verify the status of Oracle Grid Infrastructure stack within the container, including cluster status and resource state.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Verify the status of Oracle Restart stack:\nsu - grid\n#Verify the status of Oracle Clusterware stack:\n[grid@dbmc1 ~]$ crsctl check cluster -all\n**************************************************************\ndbmc1:\nCRS-4537: Cluster Ready Services is online\nCRS-4529: Cluster Synchronization Services is online\nCRS-4533: Event Manager is online\n**************************************************************\n\n[grid@dbmc1 u01]$ crsctl check crs\nCRS-4638: Oracle High Availability Services is online\nCRS-4537: Cluster Ready Services is online\nCRS-4529: Cluster Synchronization Services is online\nCRS-4533: Event Manager is online\n\n[grid@dbmc1 u01]$ crsctl stat res -t\n--------------------------------------------------------------------------------\nName           Target  State        Server                   State details       \n--------------------------------------------------------------------------------\nLocal Resources\n--------------------------------------------------------------------------------\nora.LISTENER.lsnr\n               ONLINE  ONLINE       dbmc1                STABLE\nora.net1.network\n               ONLINE  ONLINE       dbmc1                STABLE\nora.ons\n               ONLINE  ONLINE       dbmc1                STABLE\n--------------------------------------------------------------------------------\nCluster Resources\n--------------------------------------------------------------------------------\nora.ASMNET1LSNR_ASM.lsnr(ora.asmgroup)\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.DATA.dg(ora.asmgroup)\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.asm(ora.asmgroup)\n      1        ONLINE  ONLINE       dbmc1                Started,STABLE\nora.asmnet1.asmnetwork(ora.asmgroup)\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.cvu\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.orclcdb.db\n      1        ONLINE  ONLINE       dbmc1                Open,HOME=/u01/app/o\n                                                             racle/product/21c/d\n                                                             bhome_1,STABLE\nora.orclcdb.orclcdb_orclpdb.svc\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.orclcdb.orclpdb.pdb\n      1        ONLINE  ONLINE       dbmc1                READ WRITE,STABLE\nora.orclcdb.soepdb.svc\n      1        ONLINE  ONLINE       dbmc1                STABLE\nora.dbmc1.vip\n      1        ONLINE  ONLINE       dbmc1                STABLE\n--------------------------------------------------------------------------------\n\n[grid@dbmc1 ~]$ /u01/app/21c/grid/bin/olsnodes -n\ndbmc1       1\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Block Device Configuration\nDESCRIPTION: Sets up environment variables for adding a node to Oracle RAC cluster using block devices. Configures container names, network settings, and storage parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE3_CONTAINER_NAME=racnodep3\n# ... remaining exports\n```\n\n----------------------------------------\n\nTITLE: Deploying Oracle RAC Storage Container\nDESCRIPTION: Command to deploy the Oracle RAC storage container with specific network, volume, and system capabilities. This container provides NFS storage for Oracle RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\npodman run -d -t \\\n --hostname racnode-storage \\\n --dns-search=example.info  \\\n --dns 10.0.20.25 \\\n --cap-add SYS_ADMIN \\\n --cap-add AUDIT_WRITE \\\n --cap-add NET_ADMIN \\\n -e DNS_SERVER=10.0.20.25 \\\n -e DOMAIN=example.info \\\n --volume /scratch/stage/rac-storage/$ORACLE_DBNAME:/oradata \\\n --network=rac_pub1_nw --ip=10.0.20.80 \\\n --systemd=always \\\n --restart=always \\\n --name racnode-storage \\\n localhost/oracle/rac-storage-server:latest\n```\n\n----------------------------------------\n\nTITLE: Deploying DNS Container\nDESCRIPTION: Deploys and configures DNS container with proper network settings\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Storage Container Setup Logs\nDESCRIPTION: Command to monitor the logs during Oracle RAC storage container setup. This helps track the progress of container initialization and troubleshoot any issues.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnode-storage tail -f /tmp/storage_setup.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet Password for TCPS in Oracle Database Docker Container\nDESCRIPTION: Command to configure the wallet password for TCPS connections in an Oracle Database Docker container. This example sets up TCPS for port 16002 and passes the wallet password as an argument.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec <container name> /opt/oracle/configTcps.sh 16002 localhost <WALLET_PWD>\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Domain Docker Image\nDESCRIPTION: Command to build the WebLogic 12.2.1.3 domain Docker image with custom resources.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-with-resources/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12213-domain-with-resources .\n```\n\n----------------------------------------\n\nTITLE: Deploying and Configuring RAC Containers\nDESCRIPTION: Deploys both RAC node containers with resource constraints (CPU and memory), stops them temporarily to reconfigure network connections, and then restarts them with proper IP configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node with NFS Storage on Podman\nDESCRIPTION: Command to create an additional Oracle RAC node container using Podman with NFS storage. This includes configuration for using the racstorage volume and various environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# podman create -t -i \\\n  --hostname racnode2 \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnode1 \\\n  -e NODE_VIP=172.16.1.161  \\\n  -e VIP_HOSTNAME=racnode2-vip  \\\n  -e PRIV_IP=192.168.17.151  \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151  \\\n  -e PUBLIC_HOSTNAME=racnode2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnode-scan \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnode2 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates three Podman networks: public, private1, and private2 with specific subnet configurations for RAC communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns --internal\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Preparing NFS Storage for Oracle RAC Database\nDESCRIPTION: Creates placeholder directories for NFS storage and cleans up any existing disk files for the Oracle database named ORCLCDB.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Deploying and Configuring RAC Node Containers\nDESCRIPTION: Brings up both RAC node containers, configures their network connections with specific IPs, and monitors the setup log to verify successful deployment of the first RAC node.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up  -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container for SOA RCU Schemas\nDESCRIPTION: This command runs an Oracle Database container to host the RCU schemas required for Oracle SOA Suite, using environment variables and volume mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name soadb --network=SOANet -p 1521:1521 -p 5500:5500 -v $data_volume/DB:/ORCL --env-file ./db.env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Monitoring RAC Setup Progress (Bash)\nDESCRIPTION: Displays the real-time logs of the RAC setup process, allowing users to monitor the progress and check for any errors.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnodep1 /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Building JDK 24 Container Image with Oracle Linux 9\nDESCRIPTION: This snippet demonstrates how to build a Docker image for JDK 24 using Oracle Linux 9 as the base image. The JDK binaries are downloaded automatically during the build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleJava/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../OracleJava/24\ndocker build --file Dockerfile.ol9 --tag oracle/jdk:24 .\n```\n\n----------------------------------------\n\nTITLE: Verifying Oracle RAC Database Container Image\nDESCRIPTION: Command to check if the Oracle RAC database slim image is present in the local Podman registry, showing the image name, tag, ID, age, and size.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman images|grep database-rac\nlocalhost/oracle/database-rac                         21c-slim  bf6ae21ccd5a  8 hours ago    517 MB\n```\n\n----------------------------------------\n\nTITLE: Assigning Networks to Additional RAC Node\nDESCRIPTION: Commands to configure networking for additional RAC node by connecting to custom RAC public and private networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect bridge racnoded2\ndocker network connect rac_pub1_nw --ip 172.16.1.101 racnoded2\ndocker network connect rac_priv1_nw --ip 192.168.17.101 racnoded2\n```\n\n----------------------------------------\n\nTITLE: Building Oracle GoldenGate Container Image with Docker\nDESCRIPTION: Command to build a Docker container image for Oracle GoldenGate 23.4 using the provided installer ZIP file. The command tags the image and specifies the installer file as a build argument.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker build --tag=oracle/goldengate:23.4 \\\n               --build-arg INSTALLER=234000_fbo_ggs_Linux_x64_Oracle_services_shiphome.zip .\n```\n\n----------------------------------------\n\nTITLE: Initializing NFS Storage for Oracle RAC\nDESCRIPTION: Creates placeholder directories for NFS storage to be used by the Oracle RAC cluster. This command sets up the storage location and cleans any existing disk files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Docker Build\nDESCRIPTION: Sets up proxy environment variables needed for Docker to access yum.oracle.com during the build process. These variables define HTTP and HTTPS proxy settings and specific domains to exclude from proxy routing.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport http_proxy=myproxy.example.com:80\nexport https_proxy=myproxy.example.com:80\nexport no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Free Primary Container\nDESCRIPTION: Podman command to run Oracle Database Free Primary container with True Cache support\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npodman run -td --name pri-db-free \\\n--hostname pri-db-free \\\n--net=tc_net \\\n--ip <PRI_DB_FREE_IP> \\\n-p :1521 \\\n--secret=oracle_pwd \\\n-e ENABLE_ARCHIVELOG=true \\\n-e ENABLE_FORCE_LOGGING=true \\\n-v [<host mount point>:]/opt/oracle/oradata \\\noracle/database:23.6.0-free\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Image with Pre-built Oracle Database\nDESCRIPTION: This command creates a new Docker image from the stopped container, including the pre-built database. The new image is tagged as oracle/db-prebuilt:19.3.0-ee.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker commit -m \"Image with prebuilt database\" oracle-build oracle/db-prebuilt:19.3.0-ee\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Overlay Network for Multinode Deployment\nDESCRIPTION: This command creates an attachable overlay network for multinode deployment of Oracle SOA Suite containers using Docker Swarm.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create --driver=overlay --attachable SOANet\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Domain Docker Image\nDESCRIPTION: Bash commands for setting environment variables and building the Docker image for a WebLogic domain. It uses the setEnv.sh script and docker build command with specific arguments.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ . container-scripts/setEnv.sh ./properties/docker-build/domain.properties\n$ docker build --force-rm=true --no-cache=true $BUILD_ARG -t 12213-domain-home-in-image .\n```\n\n----------------------------------------\n\nTITLE: Building Patched WebLogic Docker Image\nDESCRIPTION: Docker build command to create a patched WebLogic image using patch p27117282.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --force-rm=true --no-cache=true -t oracle/weblogic:12213-p27117282 .\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Fusion Middleware Infrastructure Image\nDESCRIPTION: Commands to pull the Oracle Fusion Middleware infrastructure base image from the Oracle Container Registry and tag it for local use. Requires login to the container registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login container-registry.oracle.com\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222 oracle/fmw-infrastructure:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Oracle RAC Response Files\nDESCRIPTION: Sets proper SELinux file contexts for Oracle RAC configuration files to allow container access. These commands ensure the response files and environment configuration files have the correct SELinux context (container_file_t) required for Podman containers to access them.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep1\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep1\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep2\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep2\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep2 with NFS Storage\nDESCRIPTION: This command creates a second Oracle RAC container on racnodep2 using Podman with NFS storage. It uses similar parameters as the first NFS container but with a different hostname and environment file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/rac/cluster01/node2:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep2:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--volume racstorage:/oradata \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Installing NFS Utils for RAC Storage\nDESCRIPTION: Command to install nfs-utils package required for Oracle RAC with NFS storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install nfs-utils\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Oracle RAC Deployment\nDESCRIPTION: Exports all required environment variables for the podman-compose.yml file, including container names, network configurations, IP addresses, and storage settings for a 2-node RAC deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport CRS_ASM_DISCOVERY_STRING=\"/oradata\"\nexport CRS_ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DNS_PRIVATE1_IP=192.168.17.25\nexport DNS_PRIVATE2_IP=192.168.18.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"localhost/oracle/rac-storage-server:latest\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PUBLIC_IP=10.0.20.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Deploying RAC Containers\nDESCRIPTION: Deploys and configures RAC node containers with specified resource limits and network settings\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Database Container Base Image\nDESCRIPTION: Command to build an Oracle RAC Database Container Base Image without Oracle Grid Infrastructure and Oracle Database Software Binaries. This image can be extended to build patched images or extensions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0 -b\n```\n\n----------------------------------------\n\nTITLE: Building Oracle OpenJDK 24 Docker Image\nDESCRIPTION: Commands to build a Docker image for Oracle OpenJDK 24 using Oracle Linux 9 as the base image. The command specifies the Dockerfile location, tags the image with version 24.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleOpenJDK/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../OracleOpenJDK/24\ndocker build --file Dockerfile.ol9 --tag oracle/openjdk:24 .\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Instant Client 23 Image\nDESCRIPTION: Command to build an Oracle Instant Client 23 image using Docker. This process installs Instant Client using RPMs from the Oracle Instant Client repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull -t oracle/instantclient:23 .\n```\n\n----------------------------------------\n\nTITLE: Copying Client Wallet from Oracle Database Docker Container\nDESCRIPTION: Command to copy the client wallet from an Oracle Database Docker container to the host machine. This wallet can be used with SQL*Plus to connect to the database via TCPS.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp <container name>:/opt/oracle/oradata/clientWallet/<ORACLE_SID> <destination wallet directory>\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Managed Server Containers\nDESCRIPTION: Commands to start WebLogic Managed Server containers with specific names and port mappings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sh run_managed_server.sh MS1 98001\n$ sh run_managed_server.sh MS2 98002\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Network for NFS Storage Container\nDESCRIPTION: Command to create a bridge network with a specific subnet for the NFS storage container. This network will be used to connect Oracle RAC containers with the storage container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=10.0.20.0/24 rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Clearing Existing Filesystems from ASM Block Devices\nDESCRIPTION: Command to clear any existing filesystem from ASM devices that will be used for Oracle RAC storage, ensuring they are prepared for Oracle ASM.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Creating Admin Server Container with Docker\nDESCRIPTION: Docker command to create and run the WebCenter Content Admin Server container with network, port mapping, and volume configuration. Includes RCU schema creation and domain setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name WCCAdminContainer --network=WCContentNET -p 7001:7001 -v $DATA_VOLUME:/u01/oracle/user_projects --env-file <PATH_TO_ENV_FILE>/webcenter.env.list oracle/wccontent:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Running FMW Infrastructure Administration Server Container\nDESCRIPTION: Docker run command to start the Administration Server container. Includes port mappings, network configuration, and volume mounts for properties and domain persistence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 9001:7001 -p 9002:9002 --name ${adminhost} --network=InfraNET -v ${scriptDir}/properties:/u01/oracle/properties -v ${DOMAIN_HOST_VOLUME}:/u01/oracle/user_projects/domains ${ENV_ARG} container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container with Block Devices\nDESCRIPTION: Creates and configures a new Oracle RAC container node using block devices for storage, including network setup and container parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep3 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/rac/cluster01/node3:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep3:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep3 \\\nlocalhost/oracle/database-rac:21c-slim\n\npodman network disconnect podman racnodep3\npodman network connect rac_pub1_nw --ip 10.0.20.172 racnodep3\npodman network connect rac_priv1_nw --ip 192.168.17.172  racnodep3\npodman network connect rac_priv2_nw --ip 192.168.18.172  racnodep3\npodman start racnodep3\npodman exec racnodep3 /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database Container\nDESCRIPTION: SQL*Plus connection commands to connect to the database container as different users including SYSDBA, SYSTEM, and PDBADMIN.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus sys/<your password>@//localhost:1521/<your service name> as sysdba\nsqlplus system/<your password>@//localhost:1521/<your service name>\nsqlplus pdbadmin/<your password>@//localhost:1521/<Your PDB name>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle NoSQL Community Edition Docker image\nDESCRIPTION: This command builds a Docker image for Oracle NoSQL Community Edition with the latest version and tags it as 'oracle/nosql-ce:latest'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/nosql-ce:latest .\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database via TCPS using SQL*Plus\nDESCRIPTION: Example SQL*Plus command to connect to an Oracle Database via TCPS using the client wallet. This requires the host, port, service name, and wallet location to be specified.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus sys@tcps://<host>:<port>/<service_name>?wallet_location=<destination wallet directory> as sysdba\n```\n\n----------------------------------------\n\nTITLE: Configuring OUD Directory Server Container Parameters\nDESCRIPTION: This snippet shows the contents of a parameter file used to configure an OUD Directory Server container. It includes settings for instance type, name, hostname, base DN, and runtime options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ninstanceType=Directory\nOUD_INSTANCE_NAME=myoudautotune\nhostname=myoudds1\nbaseDN=dc=example1,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\ndstune_1=set-runtime-options --value autotune --targetTool server\n```\n\n----------------------------------------\n\nTITLE: Creating RAC Container with Storage Volume on Podman\nDESCRIPTION: This command creates an Oracle RAC container on Podman using a storage volume instead of block devices. It mounts the 'racstorage' volume to provide ASM disk images for Oracle RAC storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnode1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.160  \\\n  -e VIP_HOSTNAME=racnode1-vip  \\\n  -e PRIV_IP=192.168.17.150  \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1  \\\n  -e SCAN_NAME=racnode-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img  \\\n  -e CMAN_HOSTNAME=racnode-cman1 \\\n  -e CMAN_IP=172.16.1.15 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --restart=always \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnode1 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Docker Database Container Run Command\nDESCRIPTION: Command to run Oracle database container with custom configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name InfraDB --network=InfraNET -p 1521:1521 -p 5500:5500 --env-file env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Deploying DNS Container\nDESCRIPTION: Launches and configures the DNS container with proper network connections for RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${DNS_PRIVATE1_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${DNS_PRIVATE2_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secrets\nDESCRIPTION: Commands to create Podman secrets using the encrypted password file and key for secure container access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman secret create pwdsecret /opt/.secrets/pwdfile.enc\npodman secret create keysecret /opt/.secrets/key.pem\n```\n\n----------------------------------------\n\nTITLE: Deploying RAC Containers\nDESCRIPTION: Launches and configures RAC node containers with specified resource limits and network connections.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\nrm -rf /scratch/rac/cluster01/node1/*\nrm -rf /scratch/rac/cluster01/node2/*\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Running First Managed Server Container\nDESCRIPTION: Docker run command to start the first Managed Server (MS1) container that self-registers with the Admin server\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-deploy-application/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name MS1 --link wlsadmin:wlsadmin -p 8001:8001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n          -e MANAGED_SERV_NAME=managed-server1 12213-domain-with-app startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Secret in Kubernetes\nDESCRIPTION: Command to create Kubernetes secret for Oracle Container Registry authentication to pull Docker images.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret docker-registry regcred --docker-server=container-registry.oracle.com --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>\n```\n\n----------------------------------------\n\nTITLE: Running SQL*Plus in a Container\nDESCRIPTION: Example command to run SQL*Plus interactively in a container, connecting to a remote Oracle database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -ti --rm oracle/instantclient:19 sqlplus hr@example.com/orclpdb1\n```\n\n----------------------------------------\n\nTITLE: Creating Second Oracle RAC Container on Podman\nDESCRIPTION: Complete Podman command to create the second Oracle RAC container (racnodep2) with required system resources, environment variables, shared storage devices, and security settings for a two-node RAC configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.171 \\\n-e CRS_PRIVATE_IP2=192.168.18.171 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n-e CRS_ASM_DEVICE_LIST=/dev/asm-disk1,/dev/asm-disk2 \\\n-e OP_TYPE=setuprac \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Analytics Server Container\nDESCRIPTION: Creates and starts an Oracle Analytics Server container with all required configuration parameters including admin credentials, database connection details, and schema settings. Maps required ports for accessing the various services.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name bi -p 9500:9500 -p 9502:9502 -e ADMIN_USERNAME=weblogic -e ADMIN_PASSWORD=<admin_password> -e DB_HOST=database -e DB_PORT=1521 -e DB_SERVICE=ORCLPDB1 -e DB_USERNAME=sys -e DB_PASSWORD=<db_password> -e SCHEMA_PREFIX=DEV -e SCHEMA_PASSWORD=<schema_password> oracle/analyticsserver:6.4-patch\n```\n\n----------------------------------------\n\nTITLE: Creating Shell Alias for OCI CLI Container\nDESCRIPTION: Commands to create a shell alias for running the OCI CLI container with common parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ alias oci='docker run --rm -it -v \"$HOME/.oci:/oracle/.oci\" oci'\n$ oci os ns get\n{\n  \"data\": \"demo-tenancy\"\n}\n```\n\n----------------------------------------\n\nTITLE: WebLogic Admin Server Container Setup\nDESCRIPTION: Example of running WebLogic Admin Server container with custom configuration parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e ADMIN_USERNAME=weblogic \\\n                     -e ADMIN_PASSWORD=welcome1 \\\n                     -e DOMAIN_HOME=/u01/oracle/user_projects/domains/abc_domain \\\n                     -e DOMAIN_NAME=abc_domain \\\n                     -p 7001:7001 \\\n                     container-registry.oracle.com/middleware/weblogic:<version>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container with Custom Network\nDESCRIPTION: Example command to run an Oracle database container using the created network for ORDS communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name oracledb --network=<your network name> oracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for RAC with Block Devices\nDESCRIPTION: Export commands for setting up environment variables needed for RAC deployment with block devices, including network, DNS, and container configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=rac-dns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport DNS_PRIVATE_IP=192.168.17.25\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE_IMAGE_NAME=\"localhost/oracle/database-rac:21.3.0-21.13.0\"\nexport RACNODE1_NODE_VIP=172.16.1.200\nexport RACNODE1_VIP_HOSTNAME=\"racnodep1-vip\"\nexport RACNODE1_PRIV_IP=192.168.17.170\nexport RACNODE1_PRIV_HOSTNAME=\"racnodep1-priv\"\nexport RACNODE1_PUBLIC_IP=172.16.1.170\nexport RACNODE1_PUBLIC_HOSTNAME=\"racnodep1\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport INSTALL_NODE=racnodep1\nexport SCAN_NAME=\"racnodepc1-scan\"\nexport SCAN_IP=172.16.1.236\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport PWD_KEY=\"pwd.key\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ORACLE_SID=\"ORCLCDB\"\nexport CMAN_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_PUBLIC_IP=172.16.1.15\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"oracle/client-cman:21.3.0\"\nexport DNS_DOMAIN=\"example.com\"\nexport CMAN_PUBLIC_IP=172.16.1.166\nexport CMAN_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_VERSION=\"21.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Oracle TNS Configuration Entries\nDESCRIPTION: TNS connection string templates for accessing Oracle Database from external hosts. Defines connection parameters for both CDB and PDB databases.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nORCLCDB=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=<ip-address>)(PORT=<port>))\n    (CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=<ORACLE_SID>)))\nORCLPDB1=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=<ip-address>)(PORT=<port>))\n    (CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=<ORACLE_PDB>)))\n```\n\n----------------------------------------\n\nTITLE: Oracle Database 21c/18c XE SQL Connection Commands\nDESCRIPTION: SQL Plus connection strings for connecting to the Oracle 21c/18c XE database as different users\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nsqlplus sys/<your password>@//localhost:1521/XE as sysdba\nsqlplus system/<your password>@//localhost:1521/XE\nsqlplus pdbadmin/<your password>@//localhost:1521/XEPDB1\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring RAC Container on Podman\nDESCRIPTION: These commands start the RAC container and monitor the installation logs to track the deployment progress until the Oracle RAC database is ready to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npodman start racnode1\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnode1 /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating Container for New Oracle RAC Node with Direct Devices\nDESCRIPTION: Command for creating a new container for an Oracle RAC Database node with direct device storage. This creates a container named 'racnodep3' with specific memory, CPU, and networking configurations required for Oracle RAC operation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep3 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.172 \\\n-e CRS_PRIVATE_IP2=192.168.18.172 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep3,viphost:racnodep3-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n-e CRS_ASM_DEVICE_LIST=/dev/asm-disk1,/dev/asm-disk2 \\\n-e OP_TYPE=racaddnode \\\n-e EXISTING_CLS_NODE=\"racnodep1,racnodep2\" \\\n-e INSTALL_NODE=racnodep3 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep3 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Executing Node Deletion Script\nDESCRIPTION: Python script execution to delete both RAC home and grid node from the cluster. This is the general command format.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/DELETION.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/scripts/startup/scripts/\npython3 main.py --delracnode=\"del_rachome=true;del_gridnode=true\"\n```\n\n----------------------------------------\n\nTITLE: Building specific version of Oracle NoSQL Docker image\nDESCRIPTION: This command builds a Docker image for a specific version of Oracle NoSQL Community Edition, using the version number as the image tag.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nKV_VERSION=24.4.9 docker build --build-arg \"$KV_VERSION\" --tag \"oracle/nosql-ce:$KV_VERSION\" .\n```\n\n----------------------------------------\n\nTITLE: Building Oracle FMW Infrastructure Docker Image\nDESCRIPTION: Usage instructions for the buildDockerImage.sh script to create the Oracle FMW Infrastructure Docker image. Specifies required parameters and options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle FMW Infrastructure.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.x\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014,2019 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate with Custom SSL Certificate\nDESCRIPTION: Command to run Oracle GoldenGate container with custom SSL certificate mounted from local directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -v ${PWD}/cert:/etc/nginx/cert:ro -p 8443:443 oracle/goldengate:23.4\n```\n\n----------------------------------------\n\nTITLE: Deploying Additional RAC Node with Block Devices\nDESCRIPTION: Commands to deploy and configure an additional RAC node using Podman Compose with block devices. Includes container startup, network configuration, and status monitoring.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME} && \\\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE_NETWORK_NAME} --ip ${RACNODE2_PRIV_IP} ${RACNODE2_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman-compose exec ${RACNODE2_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for Oracle RAC\nDESCRIPTION: Creates a Podman volume mapped to an NFS share with specific performance tuning parameters for Oracle RAC storage requirements.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=10.0.20.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=10.0.20.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Assigning Docker Networks to Oracle RAC Container\nDESCRIPTION: Commands to disconnect the default bridge network and connect the Oracle RAC container to custom public and private networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# docker network disconnect bridge racnode1\n# docker network connect rac_pub1_nw --ip 172.16.1.150 racnode1\n# docker network connect rac_priv1_nw --ip 192.168.17.150  racnode1\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates three Podman networks: a public network and two private networks for Oracle RAC communication. The private networks have DNS disabled.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns\n```\n\n----------------------------------------\n\nTITLE: Starting CMAN Container for Oracle RAC\nDESCRIPTION: Optionally deploys a Connection Manager (CMAN) container for the Oracle RAC setup and displays its logs to confirm successful startup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Business Intelligence Container\nDESCRIPTION: Docker command to start a new Oracle BI container with database connection parameters and required credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it -p 9500:9500 -p 9502:9502 -e ADMIN_USERNAME=weblogic -e ADMIN_PASSWORD=<admin_password> -e DB_HOST=database -e DB_PORT=1521 -e DB_SERVICE=ORCLPDB1 -e DB_USERNAME=sys -e DB_PASSWORD=<db_password> -e SCHEMA_PREFIX=DEV -e SCHEMA_PASSWORD=<schema_password> oracle/biplatform:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating Podman RAC Cgroup Service Configuration for Real-time CPU Budgeting\nDESCRIPTION: This snippet defines a systemd service configuration for populating cgroups with real-time CPU chunks required for Oracle RAC processes. The service ensures proper CPU budget allocation for real-time processes in containers after system restarts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_21\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Populate Cgroups with real time chunk on machine restart\nAfter=multi-user.target\n[Service]\nType=oneshot\nExecStart=/bin/bash -c \"/bin/echo 950000 > /sys/fs/cgroup/cpu,cpuacct/machine.slice/cpu.rt_runtime_us && /bin/systemctl restart Podman-restart.service\"\nStandardOutput=journal\nCPUAccounting=yes\nSlice=machine.slice\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on Docker\nDESCRIPTION: Complete Docker create command with all necessary parameters for deploying an Oracle RAC container including volume mounts, network settings, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n  --hostname racnoded1 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/oracleoci/oraclevdd:/dev/asm_disk1  \\\n  --device=/dev/oracleoci/oraclevde:/dev/asm_disk2 \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.130 \\\n  -e VIP_HOSTNAME=racnoded1-vip  \\\n  -e PRIV_IP=192.168.17.100 \\\n  -e PRIV_HOSTNAME=racnoded1-priv \\\n  -e PUBLIC_IP=172.16.1.100 \\\n  -e PUBLIC_HOSTNAME=racnoded1  \\\n  -e SCAN_NAME=racnodedc1-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e CMAN_HOSTNAME=racnodedc1-cman \\\n  -e CMAN_IP=172.16.1.164 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  --restart=always --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 --ulimit rtprio=99  \\\n  --name racnoded1 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Container on Podman\nDESCRIPTION: Command to execute an interactive bash shell within the Oracle RAC container, useful for checking logs or troubleshooting installation issues.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t racnodep1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose on Linux\nDESCRIPTION: Commands to download and install the Docker Compose executable v2.23.1 from GitHub. This setup is required for deploying RAC on Docker with Docker Compose.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}\nmkdir -p $DOCKER_CONFIG/cli-plugins\nls -lrt $DOCKER_CONFIG/cli-plugins\ncurl -SL https://github.com/docker/compose/releases/download/v2.23.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose\nls -lrt $DOCKER_CONFIG/cli-plugins\nchmod +x $DOCKER_CONFIG/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Initializing Oracle Database Docker Container\nDESCRIPTION: Docker run command to start a container using oracle/database:12.2.0.1-ee image with volume mounting and port mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/plugpdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name plugpdb \\\n-p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=DEVOPSUATCDB \\\n-v /home/oracle/oradata:/opt/oracle/oradata \\\noracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic 14.1.2.0 Image with JDK 17\nDESCRIPTION: This command demonstrates how to build a WebLogic 14.1.2.0 image using the developer distribution and JDK 17.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 14.1.2.0 -d -j 17\n```\n\n----------------------------------------\n\nTITLE: Creating WebCenter Content Managed Server Container\nDESCRIPTION: Docker command to create and run the WebCenter Content Managed Server container with multiple port mappings for UCM and IBR servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name WCContentContainer --network=WCContentNET -p 16200:16200 -p 16250:16250 -p 4444:4444 -p 5555:5555 --volumes-from WCCAdminContainer --env-file <PATH_TO_ENV_FILE>/webcenter.env.list oracle/wccontent:12.2.1.4 configureOrStartWebCenterContent.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume in Shell\nDESCRIPTION: Creates a Docker volume to share configurations with the Management Agent container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> docker volume create mgmtagent-volume\n\n# identify the mount point location to use in next steps\n> docker volume inspect mgmtagent-volume|grep Mountpoint\n    \"Mountpoint\": \"/var/lib/docker/volumes/mgmtagent-volume/_data\",\n```\n\n----------------------------------------\n\nTITLE: Changing Password in Oracle Database 23ai Free Container\nDESCRIPTION: Command to change the password for database accounts in a running Oracle Database 23ai Free container using podman exec.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npodman exec <container name> /opt/oracle/setPassword.sh <your password>\n```\n\n----------------------------------------\n\nTITLE: Starting KVLite in a Docker Container\nDESCRIPTION: Command to start an Oracle NoSQL Database KVLite container with appropriate hostname and port configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=kvlite --hostname=kvlite --env KV_PROXY_PORT=8080 -p 8080:8080 oracle/nosql:ce\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle Restart Container with Block Devices\nDESCRIPTION: Podman command to create a container for Oracle Restart using block devices. Configures system resources, capabilities, and environment variables needed for Oracle Database deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname ${GPCNODE} \\\n--dns-search ${DOMAIN} \\\n--dns ${DNS_SERVER_IP} \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n-e DNS_SERVERS=${DNS_SERVER_IP} \\\n-e DB_SERVICE=\"service:soepdb\" \\\n-e PUBLIC_HOSTS_DOMAIN=${DOMAIN} \\\n-e DB_NAME=ORCLCDB \\\n-e ORACLE_PDB_NAME=ORCLPDB \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=${GPCNODE} \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n${DEVICE} \\\n-e CRS_ASM_DEVICE_LIST=${CRS_ASM_DEVICE_LIST} \\\n-e OP_TYPE=setuprac \\\n-e CRS_GPC=\"true\" \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name ${GPCNODE} \\\n${IMAGE_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node Container on Podman\nDESCRIPTION: Command to create an additional Oracle RAC node container using Podman, specifying various configuration options like hostname, volumes, network settings, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep2 \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnodep1 \\\n  -e NODE_VIP=172.16.1.201  \\\n  -e VIP_HOSTNAME=racnodep2-vip  \\\n  -e PRIV_IP=192.168.17.171  \\\n  -e PRIV_HOSTNAME=racnodep2-priv \\\n  -e PUBLIC_IP=172.16.1.171  \\\n  -e PUBLIC_HOSTNAME=racnodep2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnodepc1-scan \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e DEFAULT_GATEWAY=\"172.16.1.1\" \\\n  -e TMPDIR=/var/tmp \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnodep2 \\\n  localhost/oracle/database-rac:21.3.0-21.13.0\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Container Image for Docker\nDESCRIPTION: Command to build Oracle RAC container image for Docker deployment, specifying version and build arguments for base image and slimming options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleRealApplicationClusters/dockerfiles\n./buildContainerImage.sh -v <Software Version> -o '--build-arg  BASE_OL_IMAGE=oraclelinux:7 --build-arg SLIMMING=true|false'\n\n#  for example ./buildContainerImage.sh -v 21.3.0 -o '--build-arg  BASE_OL_IMAGE=oraclelinux:7 --build-arg SLIMMING=false'\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle SOA Suite Admin Server container with Docker Compose\nDESCRIPTION: Commands to start the SOA Admin Server container in detached mode and view its logs. The first run will execute RCU, create SOA schemas, and set up the domain.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d soaas\ndocker logs -f soaas\n```\n\n----------------------------------------\n\nTITLE: Domain Security Properties Configuration\nDESCRIPTION: Configuration file format for WebLogic Administration Server authentication credentials\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Clearing Block Devices for ASM\nDESCRIPTION: Command to clear existing file systems from block devices before using them for Oracle ASM.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/xvde  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Creating RAC DNS Server Container on Podman Host\nDESCRIPTION: Command to create a container for the RAC DNS server on a Podman host with specific hostname, domain, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman create --hostname racdns \\\n  --dns-search=example.com \\\n  --cap-add=AUDIT_WRITE \\\n  -e DOMAIN_NAME=\"example.com\" \\\n  -e WEBMIN_ENABLED=false \\\n  -e RAC_NODE_NAME_PREFIXP=\"racnodep\" \\\n  -e SETUP_DNS_CONFIG_FILES=\"setup_true\"  \\\n  --privileged=false \\\n  --name rac-dnsserver \\\n oracle/rac-dnsserver:latest\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Restart Container\nDESCRIPTION: Command to connect to the running Oracle Restart container via interactive shell.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t  ${GPCNODE} /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Networks for Oracle RAC\nDESCRIPTION: Commands to create bridge networks for public (172.16.1.0/24) and private (192.168.17.0/24) communication between RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver=bridge --subnet=172.16.1.0/24 rac_pub1_nw\ndocker network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Deploying CMAN Container\nDESCRIPTION: Launches the Connection Manager container for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Running Veridata Admin Server Container\nDESCRIPTION: Docker command to run the Veridata Admin Server container with network, port mapping, and volume configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleVeridata/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name ${ADMIN_CONTAINER_NAME} -it --network=VdtBridge -p 7001:7001 --env-file vdt.env -v ${DOMAIN_HOST_VOLUME}:/u01/oracle/user_projects oracle/oggvdt:12.2.1.4.0 createOrStartVdtDomain.sh\n```\n\n----------------------------------------\n\nTITLE: Setting sysctl Parameters for Oracle RAC in /etc/sysctl.conf\nDESCRIPTION: Configure system control parameters required for Oracle RAC by adding these settings to the /etc/sysctl.conf file. These parameters optimize system performance for Oracle RAC database operations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nfs.aio-max-nr = 1048576\nfs.file-max = 6815744\nnet.core.rmem_max = 4194304\nnet.core.rmem_default = 262144\nnet.core.wmem_max = 1048576\nnet.core.wmem_default = 262144\nnet.core.rmem_default = 262144\n```\n\n----------------------------------------\n\nTITLE: Unplugging PDB from Oracle Database using SQL Commands\nDESCRIPTION: This SQL script connects to the database as SYSDBA, closes the PDB, unplugs it into an XML file, and drops the PDB while keeping the datafiles.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/unplugpdb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nsql sys/unplug@//localhost:1521/DEVOPSCDB as sysdba\n\nSQLcl: Release 4.2.0 Production on Mon Mar 06 11:54:13 2017\n\nCopyright (c) 1982, 2017, Oracle.  All rights reserved.\n\nConnected to:\nOracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n\nSQL> ALTER PLUGGABLE DATABASE MYPDB CLOSE IMMEDIATE;\n\nPluggable database MYPDB altered.\n\nSQL> ALTER PLUGGABLE DATABASE MYPDB UNPLUG INTO '/opt/oracle/oradata/DEVOPSCDB/MYPDB/mypdb.xml';\n\nPluggable database MYPDB altered.\n\nSQL> DROP PLUGGABLE DATABASE MYPDB KEEP DATAFILES;\n\nPluggable database MYPDB dropped.\n\nSQL> exit;\n\nDisconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n```\n\n----------------------------------------\n\nTITLE: SOA Admin Server Container Launch\nDESCRIPTION: Docker command to start the SOA Administration Server container with environment configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t  --name soaas --network=SOANet -p 7001:7001  -v /u01/DockerVolume/SOAVolume/SOA:/u01/oracle/user_projects   --env-file ./adminserver.env.list oracle/soasuite:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Database Container Image\nDESCRIPTION: Command to build a container image using a gold image backup. Specifies the version and installation file parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -i -e -v 19.3.0 -t oracle/database:19-onprem -o '--build-arg INSTALL_FILE_1=db_home_2022-03-25_12-43-21PM.zip'\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Database Container Image with Patch Support\nDESCRIPTION: Command to build an Oracle Database container image with patching support enabled. Uses buildContainerImage.sh script with SLIMMING parameter set to false to ensure successful patching operation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/patching/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -i -e -v 19.3.0 -o '--build-arg SLIMMING=false'\n```\n\n----------------------------------------\n\nTITLE: Sample Administration Server Environment Configuration\nDESCRIPTION: Example configuration for Administration Server environment variables with sample values for database connection and domain settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=soadb:1521/soapdb.example.com\nRCUPREFIX=SOA1\nDB_PASSWORD=Welcome1\nDB_SCHEMA_PASSWORD=Welcome1\nADMIN_PASSWORD=Welcome1\nDOMAIN_NAME=soainfra\nDOMAIN_TYPE=soa\nADMIN_HOST=<Administration Server hostname>\nADMIN_PORT=7001\nPERSISTENCE_STORE=jdbc\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server Container\nDESCRIPTION: Command to start the WebLogic Admin Server container with port 7001 exposed.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-with-resources/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 7001:7001 1221-domain-with-resources\n```\n\n----------------------------------------\n\nTITLE: Creating OUD Replication Server Docker Container\nDESCRIPTION: Docker run command to create and start an OUD Replication Server container with network configuration and environment file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --network=OUDNet \\\n--name=myoudrs1 \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env-file ~/oud-add-replication.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Allocating Shared Memory for Oracle XE Container (Bash)\nDESCRIPTION: Shows how to allocate sufficient shared memory for an Oracle Database XE container using the --shm-size option.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/FAQ.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ... --shm-size=1g oracle/database:11.2.0.2-xe\n```\n\n----------------------------------------\n\nTITLE: Deploying RAC Containers with Network Configuration\nDESCRIPTION: Brings up RAC node containers with specific CPU and memory allocations, configures their network connections with dedicated IP addresses, and starts the containers. The logs are monitored to track the setup progress.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\nrm -rf /scratch/rac/cluster01/node1/*\nrm -rf /scratch/rac/cluster01/node2/*\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Building Oracle SOA Suite 12.2.1.4 Docker Image\nDESCRIPTION: Command to build the Oracle SOA Suite 12.2.1.4 Docker image using the provided build script. This assumes all necessary binaries and patches have been placed in the correct directories.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic with Persistent JMS Store\nDESCRIPTION: Command to run WebLogic container with JMS persistence enabled by mapping a host volume to the container's persistent store directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-with-resources/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -v host-volume:/u01/oracle/user_projects/domains/base_domain/PersistentStore-directory -p 7001:7001 1221-domain-with-resources\n```\n\n----------------------------------------\n\nTITLE: Building Oracle JDK Base Image in Bash\nDESCRIPTION: Commands to navigate to the OracleJava directory and build the Oracle JDK (Server JRE) base image using a shell script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle RAC Container Health with Podman\nDESCRIPTION: Command to check the status of Oracle RAC containers using podman. This shows container IDs, images, creation time, status, ports, and names with health information.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n\nCONTAINER ID  IMAGE                                        COMMAND                                       CREATED         STATUS                     PORTS                    NAMES\n598385416fd7  localhost/oracle/rac-dnsserver:latest        /bin/sh -c exec $...                          55 minutes ago  Up 55 minutes (healthy)                            rac-dnsserver\n835e3d113898  localhost/oracle/rac-storage-server:latest                                                55 minutes ago  Up 55 minutes (healthy)                            racnode-storage\n9ba7bbee9095  localhost/oracle/database-rac:21c                                                      52 minutes ago  Up 52 minutes (healthy)                            racnodep1\nebbf520b0c95  localhost/oracle/database-rac:21c                                                      52 minutes ago  Up 52 minutes (healthy)                            racnodep2\n36df843594d9  localhost/oracle/client-cman:21.3.0          /bin/sh -c exec $...                          12 minutes ago  Up 12 minutes (healthy)  0.0.0.0:1521->1521/tcp  racnodepc1-cman\n```\n\n----------------------------------------\n\nTITLE: Launching OUD Directory Server Container\nDESCRIPTION: Docker command to create and run an OUD Directory Server container with volume mounting and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --network=OUDNet \\\n--name=myoudds1 \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env-file ~/oud-dir.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Building Oracle WebCenter Portal Docker Image\nDESCRIPTION: Command to build the Oracle WebCenter Portal Docker image using the provided build script. The script takes the version number as a parameter.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle SOA Suite Managed Server container with Docker Compose\nDESCRIPTION: Commands to start the SOA Managed Server container in detached mode and view its logs. Requires the Admin Server to be running first.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/samples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d soams\ndocker logs -f soams\n```\n\n----------------------------------------\n\nTITLE: Clearing Existing Filesystems from ASM Devices\nDESCRIPTION: Command to remove any existing file system from ASM devices using dd. This ensures the devices are clean before being used by Oracle ASM for RAC database storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Encrypting Password File\nDESCRIPTION: Encrypts the common password file for grid, oracle, and database users using AES-256-CBC encryption.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl enc -aes-256-cbc -salt -in /opt/.secrets/common_os_pwdfile -out /opt/.secrets/common_os_pwdfile.enc -pass file:/opt/.secrets/pwd.key\nrm -f /opt/.secrets/common_os_pwdfile\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: Command to check the status of Docker containers and view the container details including ID, image, command, creation time, status, ports, and names.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Monitoring Oracle Restart Setup Logs\nDESCRIPTION: Command to monitor the setup logs to track the progress of Oracle Restart configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman exec ${GPCNODE} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Podman Image\nDESCRIPTION: This command builds the Oracle RAC Podman image. It specifies the software version, base Oracle Linux 8 image, and includes the -i flag for interactive mode. Use this to create a Podman image with Oracle Grid Infrastructure and RAC Database binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0 -o '--build-arg  BASE_OL_IMAGE=oraclelinux:8' -i\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep2 with Block Devices\nDESCRIPTION: This command creates a second Oracle RAC container on the host racnodep2 using Podman. It uses similar parameters as the first container but with a different hostname and environment file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/rac/cluster01/node2:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep2:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Running Apache Container with Auto-Generated SSL Certificates\nDESCRIPTION: Docker command to run Apache container with automatic SSL certificate generation. Uses volume mounting to persist certificates and configures virtual host settings for WebLogic proxy.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name apache \\\n                     -e VIRTUAL_HOST_NAME=<virtual_host_name> \\\n                     -e WEBLOGIC_HOST=<admin_host> \\\n                     -e WEBLOGIC_PORT=7001 \\\n                     -p 4433:4433 \\\n                     --volume-driver local \\\n                     -v <host-config-dir>:/config \\\n                     -w /config \\\n                     oracle/apache:<version>\n```\n\n----------------------------------------\n\nTITLE: Monitoring RAC Cluster Creation Progress\nDESCRIPTION: Displays the logs of the racnodep1 container to monitor the progress of RAC installation and database creation. This allows tracking the setup process until completion is indicated by a success message.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# podman logs -f racnodep1\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Managed Server Containers\nDESCRIPTION: Docker commands to run Managed Server containers. These commands link to the Administration Server, map properties files, and set environment variables for server names.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name MS1 --link wlsadmin:wlsadmin -p 8001:8001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n          -e MANAGED_SERV_NAME=managed-server1 12213-domain-home-in-image startManagedServer.sh\n\n$ docker run -d --name MS2 --link wlsadmin:wlsadmin -p 8002:8001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n          -e MANAGED_SERV_NAME=managed-server2 12213-domain-home-in-image startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Macvlan Network for NFS Storage Container\nDESCRIPTION: Command to create a macvlan network with a specific subnet and parent interface for the NFS storage container. This provides an alternative network configuration option.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d macvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Containers for Oracle SOA Suite\nDESCRIPTION: Commands to stop and remove running Oracle SOA Suite containers. This needs to be executed for each container including the database, admin server, and managed servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop \\<container name\\>\n\n$ docker rm \\<container name\\>\n```\n\n----------------------------------------\n\nTITLE: Running Container with Fixed Hostname for Node Manager Compatibility\nDESCRIPTION: Docker run command that specifies a fixed hostname for the container. This is necessary when reusing an existing data volume to ensure the node manager can connect correctly.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --hostname original_hostname ......\n```\n\n----------------------------------------\n\nTITLE: Creating OUD LDAP Container with Docker Compose\nDESCRIPTION: This command uses docker-compose to create and start the OUD LDAP container in detached mode. The container will create a default instance on first start, with persistent data stored on a volume.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/samples/122140-simple-ldap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep2 with Block Devices and User-Defined Response Files\nDESCRIPTION: Podman command to create the second Oracle RAC container named 'racnodep2' using block devices and user-defined response files. It uses similar configurations as the first container but with different network settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e GRID_RESPONSE_FILE=/tmp/grid_21c.rsp \\\n-e DBCA_RESPONSE_FILE=/tmp/dbca_21c.rsp \\\n-e CRS_PRIVATE_IP1=192.168.17.171 \\\n-e CRS_PRIVATE_IP2=192.168.18.171 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n-e CRS_ASM_DEVICE_LIST=/dev/asm-disk1,/dev/asm-disk2 \\\n-e OP_TYPE=setuprac \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Running SQL*Plus in Separate Container\nDESCRIPTION: Docker command to run SQL*Plus in a new container to connect to an existing database container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_26\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --rm -ti oracle/database:19.3.0-ee sqlplus pdbadmin/<yourpassword>@//<db-container-ip>:1521/ORCLPDB1\n```\n\n----------------------------------------\n\nTITLE: Building Patched Oracle Database Docker Image Using Script\nDESCRIPTION: Usage example of the buildPatchedDockerImage.sh utility script that helps build patched Oracle Database Docker images. The script supports building images for different Oracle versions and editions with specified patch labels.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/applypatch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[oracle@localhost applypatch]# ./buildPatchedDockerImage.sh -h\n\nUsage: ./buildPatchedDockerImage.sh -v [version] [-e | -s] -p [patch label]\nBuilds a patched Docker Image for Oracle Database.\n\nParameters:\n   -v: version to build\n       Choose one of: 12.1.0.2, 12.2.0.1\n   -e: creates a patched image based on 'Enterprise Edition'\n   -s: creates a patched image based on 'Standard Edition 2'\n   -p: patch label to be used for the tag\n\n* select one edition only: -e or -s\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014-2017 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Tuxedo Container Image with Bash Script\nDESCRIPTION: This command builds the Oracle Tuxedo container image using a provided bash script. It specifies the version, installer file, and silent installation mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 22.1.0.0.0 -i tuxedo221000_64_Linux_01_x86.zip -s\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server Container\nDESCRIPTION: Command to start the WebLogic Administration Server container using the provided script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sh run_admin_server.sh\n```\n\n----------------------------------------\n\nTITLE: Build Script Usage Example\nDESCRIPTION: Example showing the usage of buildDockerImage.sh script which builds the Docker image for Oracle Unified Directory Services Manager. The script accepts version number as a required parameter and has optional flags for enabling cache and skipping MD5 checks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle Unified Directory Services Manager\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.4.0\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Storage for RAC\nDESCRIPTION: Sets up NFS storage directory for RAC deployment with NFS storage option.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Inspecting WebLogic Server Container IP (Bash)\nDESCRIPTION: This command retrieves the IP address of a running WebLogic Server container. It's useful for accessing the WebLogic Administration Console through a web browser.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Connecting to RAC Container\nDESCRIPTION: Command to establish an interactive shell connection to the RAC container for maintenance or troubleshooting purposes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t racnoded1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Preparing Host Environment for Oracle RAC Containers\nDESCRIPTION: Command to execute the setup script for preparing the Podman host environment with all prerequisites for Oracle RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./setup_rac_host.sh -prepare-rac-env\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate Container\nDESCRIPTION: Docker run command template showing all available configuration options for starting an Oracle GoldenGate container, including port mapping, environment variables, and volume mounts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/21c/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n    --name <container name> \\\n    -p <host port>:443 \\\n    -e OGG_ADMIN=<admin user name> \\\n    -e OGG_ADMIN_PWD=<admin password> \\\n    -e OGG_DEPLOYMENT=<deployment name> \\\n    -v [<host mount point>:]/u01/ogg/scripts \\\n    -v [<host mount point>:]/u02 \\\n    -v [<host mount point>:]/u03 \\\n    -v [<host mount point>:]/etc/nginx/cert \\\n    oracle/goldengate:21.3.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Container Communication\nDESCRIPTION: Commands to create a user-defined Docker network and run database and BI containers within it for communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge bi_net\n$ docker run --name database --network=bi_net ...... oracle/database:12.1.0.2-ee\n$ docker run --name bi --network=bi_net -e DB_HOST=database ...... oracle/biplatform:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle Grid Infrastructure Cluster Status\nDESCRIPTION: Commands to verify Oracle Clusterware stack status within the container. These commands check if all essential Grid Infrastructure services are online across all nodes in the cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsu - grid\n#Verify the status of Oracle Clusterware stack:\n[grid@racnodep1 ~]$ crsctl check cluster -all\n**************************************************************\nracnodep1:\nCRS-4537: Cluster Ready Services is online\nCRS-4529: Cluster Synchronization Services is online\nCRS-4533: Event Manager is online\n**************************************************************\nracnodep2:\nCRS-4537: Cluster Ready Services is online\nCRS-4529: Cluster Synchronization Services is online\nCRS-4533: Event Manager is online\n**************************************************************\n\n[grid@racnodep1 u01]$ crsctl check crs\nCRS-4638: Oracle High Availability Services is online\nCRS-4537: Cluster Ready Services is online\nCRS-4529: Cluster Synchronization Services is online\nCRS-4533: Event Manager is online\n\n[grid@racnodep1 u01]$ crsctl stat res -t\n--------------------------------------------------------------------------------\nName           Target  State        Server                   State details       \n--------------------------------------------------------------------------------\nLocal Resources\n--------------------------------------------------------------------------------\nora.LISTENER.lsnr\n               ONLINE  ONLINE       racnodep1                STABLE\n               ONLINE  ONLINE       racnodep2                STABLE\nora.chad\n               ONLINE  ONLINE       racnodep1                STABLE\n               ONLINE  ONLINE       racnodep2                STABLE\nora.helper\n               OFFLINE OFFLINE      racnodep1                STABLE\n               OFFLINE OFFLINE      racnodep2                STABLE\nora.net1.network\n               ONLINE  ONLINE       racnodep1                STABLE\n               ONLINE  ONLINE       racnodep2                STABLE\nora.ons\n               ONLINE  ONLINE       racnodep1                STABLE\n               ONLINE  ONLINE       racnodep2                STABLE\n--------------------------------------------------------------------------------\nCluster Resources\n--------------------------------------------------------------------------------\nora.ASMNET1LSNR_ASM.lsnr(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.ASMNET2LSNR_ASM.lsnr(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.DATA.dg(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.LISTENER_SCAN1.lsnr\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.LISTENER_SCAN2.lsnr\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.LISTENER_SCAN3.lsnr\n      1        ONLINE  ONLINE       racnodep2                STABLE\nora.asm(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                Started,STABLE\n      2        ONLINE  ONLINE       racnodep2                Started,STABLE\nora.asmnet1.asmnetwork(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.asmnet2.asmnetwork(ora.asmgroup)\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.cdp1.cdp\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.cdp2.cdp\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.cdp3.cdp\n      1        ONLINE  ONLINE       racnodep2                STABLE\nora.cvu\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.orclcdb.db\n      1        ONLINE  ONLINE       racnodep1                Open,HOME=/u01/app/o\n                                                             racle/product/23ai/db\n                                                             home_1,STABLE\n      2        ONLINE  ONLINE       racnodep2                Open,HOME=/u01/app/o\n                                                             racle/product/23ai/db\n                                                             home_1,STABLE\nora.orclcdb.orclpdb.pdb\n      1        ONLINE  ONLINE       racnodep1                READ WRITE,STABLE\n      2        ONLINE  ONLINE       racnodep2                READ WRITE,STABLE\nora.orclcdb.soepdb.svc\n      1        ONLINE  ONLINE       racnodep1                STABLE\n      2        ONLINE  ONLINE       racnodep2                STABLE\nora.racnodep1.vip\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.racnodep2.vip\n      1        ONLINE  ONLINE       racnodep2                STABLE\nora.rhpserver\n      1        OFFLINE OFFLINE                               STABLE\nora.scan1.vip\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.scan2.vip\n      1        ONLINE  ONLINE       racnodep1                STABLE\nora.scan3.vip\n      1        ONLINE  ONLINE       racnodep2                STABLE\n--------------------------------------------------------------------------------\n\n/u01/app/21c/grid/bin/olsnodes -n\nracnodep1       1\nracnodep2       2\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for WebCenter Sites\nDESCRIPTION: Docker command to create a user-defined bridge network for communication between containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge WCSitesNet\n```\n\n----------------------------------------\n\nTITLE: Account Transfer Request\nDESCRIPTION: cURL command to transfer funds between two accounts, with example JSON response showing updated balances.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-type:application/json\" http://${TUX_HOSTNAME}:5955/TRANSFER -d '{\"ACCOUNT_ID\":[10001,10002],\"SAMOUNT\":\"1\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ACCOUNT_ID\":   [10001, 10002],\n        \"STATLIN\":      \"\",\n        \"FORMNAM\":      \"CTRANSFER\",\n        \"SBALANCE\":     [\"$5568.00\", \"$904.00\"],\n        \"SAMOUNT\":      \"$1.00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connections for RAC Container on Podman\nDESCRIPTION: These commands disconnect the default bridge network and connect the Oracle RAC container to the public and private RAC networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect bridge racnode1\npodman network connect rac_pub1_nw --ip 172.16.1.150 racnode1\npodman network connect rac_priv1_nw --ip 192.168.17.150  racnode1\n```\n\n----------------------------------------\n\nTITLE: Cleaning ASM Disks for Block Device Setup\nDESCRIPTION: Commands to clean up ASM Disks by zeroing out the block devices used in the Oracle RAC setup. Uses dd command to write zeros to the disk devices.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CLEANUP.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000 \ndd if=/dev/zero of=/dev/oracleoci/oraclevde  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Environment Variables\nDESCRIPTION: Commands to create .env file with required environment variables for Docker Compose\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho \"mgmtagent_hostname=mgmtagentcontainer1\" > .env\necho \"DOCKER_BASE_DIR=/oracle-management-agent\" >> .env\necho \"USERID=$(id -u orclmgmtagntusr)\" >> .env\necho \"GROUPID=$(id -g orclmgmtagntusr)\" >> .env\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Docker Volumes in Bash\nDESCRIPTION: Creates a directory to mount as a volume in the Docker container and sets appropriate ownership. This ensures the oracle user in the container has access to the mounted filesystem.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo mkdir -p /scratch/wcpdocker/volumes/wcpportal\n$ sudo chown 1000:1000 /scratch/wcpdocker/volumes/wcpportal\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for Oracle Database Container (Bash)\nDESCRIPTION: Demonstrates how to set the timezone for an Oracle Database container using the TZ environment variable or volume mounts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ... -e TZ=\"Europe/Vienna\" oracle/database:12.2.0.1-ee\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ... -v /etc/timezone:/etc/timezone:ro -v /etc/localtime:/etc/localtime:ro oracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates the necessary Podman networks (public and private) for Oracle RAC cluster communication with specific subnet configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns\n```\n\n----------------------------------------\n\nTITLE: Running Terraform in Docker Container\nDESCRIPTION: Command to run the Terraform container with the current directory mounted as a volume. This allows Terraform operations on configuration files in the current directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/terraform-oci/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --interactive --tty --rm \\\n  --volume \"$PWD\":/data \\\n  oracle/terraform-oci:2.0.6 \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network Bridges for RAC\nDESCRIPTION: Commands to create public and private network bridges for container communication using the bridge driver with specific subnets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver=bridge --subnet=172.16.1.0/24 rac_pub1_nw\ndocker network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Adding Additional RAC Node with Block Devices\nDESCRIPTION: Docker commands to add a new node to an existing RAC cluster using block devices. Includes container creation, network configuration, and startup sequence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d ${RACNODE2_CONTAINER_NAME} && docker compose stop ${RACNODE2_CONTAINER_NAME}\ndocker network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\ndocker network disconnect ${PRIVATE_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\ndocker network connect ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\ndocker network connect ${PRIVATE_NETWORK_NAME} --ip ${RACNODE2_PRIV_IP} ${RACNODE2_CONTAINER_NAME}\ndocker compose start ${RACNODE2_CONTAINER_NAME}\ndocker compose logs -f ${RACNODE2_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle RAC Environment Status\nDESCRIPTION: Command to check the status of Oracle RAC containers and verify they are healthy. Shows the proper output format with healthy status indicators.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\nCONTAINER ID  IMAGE                                  COMMAND               CREATED         STATUS                   PORTS       NAMES\nf1345fd4047b  localhost/oracle/rac-dnsserver:latest  /bin/sh -c exec $...  8 hours ago     Up 8 hours (healthy)                 rac-dnsserver\n2f42e49758d1  localhost/oracle/database-rac:21c                        46 minutes ago  Up 37 minutes (healthy)              racnodep1\na27fceea9fe6  localhost/oracle/database-rac:21c                        46 minutes ago  Up 37 minutes (healthy)              racnodep2\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Production Mode Container\nDESCRIPTION: Docker command to run a WebLogic container in production mode with administration port enabled and secured mode disabled. Maps ports 7001 and 9002.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 7001:7001 -p 9002:9002  -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e PRODUCTION_MODE=prod -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_NAME=docker_domain -e ADMIN_NAME=docker-AdminServer oracle/weblogic:14.1.2.0-17\n```\n\n----------------------------------------\n\nTITLE: Verifying Patch Installation\nDESCRIPTION: Commands to verify the correct application of WebLogic patch using opatch utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name verify_patch oracle/weblogic:12213-p27117282\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it verify_patch /bin/bash\n```\n\nLANGUAGE: bash\nCODE:\n```\n./opatch lsinventory\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Business Intelligence Docker Image\nDESCRIPTION: Commands to build the Oracle Business Intelligence image after downloading the required installation binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OracleBI/dockerfiles\n$ ./buildDockerImage.sh -v 12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for Oracle RAC\nDESCRIPTION: Command to create an NFS volume that can be used by Oracle RAC containers. This mounts the exported NFS share from the storage container with appropriate mount options for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=10.0.20.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=10.0.20.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Validating OUD Replication Status with dsreplication in Docker Container\nDESCRIPTION: Command to validate replication status between Oracle Unified Directory servers by executing the dsreplication command within a Docker container. This checks the replication status between directory servers by connecting to the admin port and displaying compatibility view and replication server connections.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it myoudds2 \\\n/u01/oracle/user_projects/myoudrs1/OUD/bin/dsreplication status \\\n--trustAll \\\n--hostname myoudds2 \\\n--port 1444 \\\n--adminUID admin \\\n--dataToDisplay compat-view \\\n--dataToDisplay rs-connections\n\nEnter the admin password when prompted:\n\n>>>> Specify Oracle Unified Directory LDAP connection parameters\n\nPassword for user 'admin': Oracle123\n```\n\n----------------------------------------\n\nTITLE: Starting and Monitoring Oracle RAC Container on Podman\nDESCRIPTION: Commands to start the Oracle RAC container and monitor its logs for successful database creation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\npodman start racnodep2\npodman exec racnodep2 /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Installing NFS Server on Podman Host\nDESCRIPTION: Command to install the necessary NFS server packages on the Podman host to enable NFS volumes in containers for Oracle RAC storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndnf install -y nfs-utils\n```\n\n----------------------------------------\n\nTITLE: Validating RAC Environment\nDESCRIPTION: Shows command to verify RAC container health status\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Oracle RAC Database Patches\nDESCRIPTION: Illustrates the required directory structure for organizing Oracle RAC Database patches, including Grid Infrastructure, Oracle RAC, and OPatch files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/applypatch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    latest \n       patches\n         grid\n           001 (patch directory)\n              pNNNNNN_RRRRRR.zip  (patch zip file)\n           002 (optional)\n           00N (optional, Nth patch directory)\n         oracle \n           001 (patch directory)\n              pNNNNNN_RRRRRR.zip  (patch zip file)\n           002 (optional)\n           00N (optional, Nth patch directory)\n         opatch\n           p6880880*.zip (optional, OPatch zip file)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Oracle RAC Container Setup\nDESCRIPTION: Configures environment variables required for Oracle RAC container deployment including network settings, container names, and storage configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c-slim\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport CRS_ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport CRS_ASM_DISCOVERY_STRING=\"/dev/asm*\"\nexport STAGING_SOFTWARE_LOC=\"/scratch/software/21c/goldimages/\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DNS_PRIVATE1_IP=192.168.17.25\nexport DNS_PRIVATE2_IP=192.168.18.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport PWD_SECRET_FILE=/opt/.secrets/pwdfile.enc\nexport KEY_SECRET_FILE=/opt/.secrets/key.pem\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Essbase Container Image\nDESCRIPTION: Command and usage information for building the Oracle Essbase container image using the build script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleEssbase/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildContainerImage.sh -v 21.1.0\n\nUsage: buildContainerImage.sh -v [version]\nBuilds a Container Image for Oracle Essbase.\n```\n\n----------------------------------------\n\nTITLE: Configuring Jumbo Frames MTU Networks for Oracle RAC\nDESCRIPTION: Commands to create Podman networks with Jumbo Frames MTU (9000) for enhanced network performance in Oracle RAC. Examples are provided for bridge, macvlan, and ipvlan network types.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#Podman bridge networks\npodman network create --driver=bridge --subnet=10.0.20.0/24 --opt mtu=9000 rac_pub1_nw\npodman network create --driver=bridge --subnet=192.168.17.0/24 --opt mtu=9000 rac_priv1_nw --disable-dns --internal\npodman network create --driver=bridge --subnet=192.168.18.0/24 --opt mtu=9000 rac_priv2_nw --disable-dns --internal\n\n# Podman macvlan networks\npodman network create -d macvlan --subnet=10.0.20.0/24 --opt mtu=9000 -o parent=ens5 rac_pub1_nw\npodman network create -d macvlan --subnet=192.168.17.0/24 --opt mtu=9000 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d macvlan --subnet=192.168.18.0/24 --opt mtu=9000 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n\n#Podman ipvlan networks\npodman network create -d ipvlan --subnet=10.0.20.0/24 --opt mtu=9000 -o parent=ens5 rac_pub1_nw\npodman network create -d ipvlan --subnet=192.168.17.0/24 --opt mtu=9000 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d ipvlan --subnet=192.168.18.0/24 --opt mtu=9000 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Setting Up NFS Storage Container for Oracle RAC\nDESCRIPTION: Launches and configures the storage container that provides NFS services to the RAC cluster. This command starts the container with systemd support and monitors the setup progress through logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always\" up -d ${STORAGE_CONTAINER_NAME}\npodman-compose exec ${STORAGE_CONTAINER_NAME} tail -f /tmp/storage_setup.log\n\nExport list for racnode-storage:\n/oradata *\n#################################################\n Setup Completed                                 \n#################################################\n```\n\n----------------------------------------\n\nTITLE: Creating OUD Directory Server Docker Container with Replication\nDESCRIPTION: Docker command to create a new OUD Directory Server container and add it to an existing replication configuration. The command uses environment variables and a mounted volume to configure the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --network=OUDNet \\\n--name=myoudds2b \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env OUD_INSTANCE_NAME=myoudds2b \\\n--env hostname=myoudds2b \\\n--env-file ~/oud-add-ds_rs.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server Container\nDESCRIPTION: Docker run command to start the Administration Server container with proper volume mounting and port mapping\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-deploy-application/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 \\\n          -v <HOST DIRECTORY TO PROPERTIES FILE>/properties/docker-run:/u01/oracle/properties \\\n         12213-domain-with-app\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container IP Address in Bash\nDESCRIPTION: Command to inspect a Docker container and retrieve its IP address using a formatted output.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container\nDESCRIPTION: Launches an Oracle Database container with specified network, ports, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name InfraDB --network=SampleNET -p 1521:1521 -p 5500:5500 --env-file env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Interactive Development with Runit Docker Image\nDESCRIPTION: Commands to start a detached container and connect to it interactively, enabling direct experimentation with runit and service configuration in a running container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/runit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name good_idea occs/runit:0.1\ndocker exec -it good_idea sh\n```\n\n----------------------------------------\n\nTITLE: Oracle Service Bus Server Environment Configuration\nDESCRIPTION: Environment variable template for configuring Oracle Service Bus Managed Server containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nMANAGED_SERVER=<Managed Server name, either osb_server1 or osb_server2>\nDOMAIN_NAME=soainfra\nADMIN_HOST=<Administration Server hostname>\nADMIN_PORT=<Node port number mapping Administration Server container port `7001`>\nADMIN_PASSWORD=<admin_password>\nMANAGED_SERVER_CONTAINER=true\nMANAGEDSERVER_PORT=<Container port number where Managed Server is running>\n```\n\n----------------------------------------\n\nTITLE: Configuring Confd Template Resource in TOML\nDESCRIPTION: TOML configuration file that defines the template source, destination, and keys to watch in the key-value store. The template resource watches for changes in the hello-world container configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[template]\nsrc = \"hello-world.conf.template\"\ndest = \"/hello-world.conf\"\n\n# The key below must be changed to match how you named your\n# service in Container Cloud Service.\nkeys = [\n\"apps/hello-world/containers\"\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Database via Connection Manager\nDESCRIPTION: Example connection string for connecting to Oracle RAC database through a connection manager. This method is used when the host port 1521 is exposed to external clients.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystem/<password>@//<container_host>:1521/<ORACLE_SID>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Instant Client 19 Image\nDESCRIPTION: Command to build an Oracle Instant Client 19 image using Docker. This process installs Instant Client using RPMs from the Oracle Instant Client repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull -t oracle/instantclient:19 .\n```\n\n----------------------------------------\n\nTITLE: Creating Network Configurations for Oracle RAC\nDESCRIPTION: Examples of creating different types of container networks (bridge, macvlan, ipvlan) for the RAC environment using podman.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=10.0.20.0/24 rac_pub1_nw\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d macvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d ipvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container with Docker\nDESCRIPTION: Command to initialize and run the Oracle Database container with specified network, ports and environment configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name <container_name> --network=<network_name> -p <database_listener_port>:1521 -p <enterprise_manager_port>:5500 --env-file <environment_file> <repo_name:tag_name>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle FMW Infrastructure Image with Bash Script\nDESCRIPTION: Usage instructions for the buildDockerImage.sh script, which builds the Oracle FMW Infrastructure Docker image. It shows the available parameters and options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle FMW Infrastructure.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.x\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014,2019 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Building with Specific Terraform and OCI Provider Versions\nDESCRIPTION: Command to build a Docker image with specific versions of Terraform and the OCI Provider using build arguments. This allows customizing which versions are installed in the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/terraform-oci/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# docker build -t oracle/terraform-oci:2.0.6 \\\n  --build-arg TERRAFORM_VERSION=\"-0.11.2-1.el7\" \\\n  --build-arg OCI_PROVIDER_VERSION=\"-2.0.5-1.el7\" \\\n  .\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle SOA Suite database container with Docker Compose\nDESCRIPTION: Commands to start the SOA database container in detached mode and view its logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d soadb\ndocker logs -f soadb\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Bridge Networks\nDESCRIPTION: Commands to create bridge networks for RAC public and private communication with specific subnets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=10.0.20.0/24 rac_pub1_nw\npodman network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw --disable-dns --internal\npodman network create --driver=bridge --subnet=192.168.18.0/24 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Installing NFS Server on Host Machine\nDESCRIPTION: Command to install the NFS server packages on the host machine to support NFS volumes in containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install nfs-utils\n```\n\n----------------------------------------\n\nTITLE: Oracle RAC Database Startup Success Message\nDESCRIPTION: Example of successful database creation log output from an Oracle RAC container, showing the database is up and running.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n#################################################################\nOracle Database ORCLCDB is up and running on racnoded2    \n#################################################################\nRunning User Script for  oracle user\nSetting Remote Listener\n####################################\nORACLE RAC DATABASE IS READY TO USE!\n####################################\n```\n\n----------------------------------------\n\nTITLE: Encrypting Common Password File\nDESCRIPTION: Command to encrypt the common password file using AES-256-CBC encryption with a salt and key file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nopenssl enc -aes-256-cbc -salt -in /opt/.secrets/common_os_pwdfile -out /opt/.secrets/common_os_pwdfile.enc -pass file:/opt/.secrets/pwd.key\nrm -f /opt/.secrets/common_os_pwdfile\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Oracle RAC Node Addition with NFS Storage\nDESCRIPTION: Defines environment variables needed for adding a node to an Oracle RAC cluster using NFS storage. Sets container names, network configurations, host parameters, and NFS storage specifications.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE3_CONTAINER_NAME=racnodep3\nexport RACNODE3_HOST_NAME=racnodep3\nexport RACNODE3_PUBLIC_IP=10.0.20.172\nexport RACNODE3_CRS_PRIVATE_IP1=192.168.17.172\nexport RACNODE3_CRS_PRIVATE_IP2=192.168.18.172\nexport INSTALL_NODE=racnodep3\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep3,viphost:racnodep3-vip\\\"\"\nexport EXISTING_CLS_NODE=\"racnodep1,racnodep2\"\nexport SCAN_NAME=racnodepc1-scan\nexport CRS_ASM_DISCOVERY_STRING=\"/oradata\"\nexport CRS_ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Infrastructure Server\nDESCRIPTION: Command to create a Docker network for the FMW Infrastructure server to run on.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge InfraNET\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Pre-built Extension Container\nDESCRIPTION: Docker command to run a container using the extended pre-built database image. It maps ports 1521 and 5500, and uses the oracle/database:ext image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/prebuiltdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dt --name <container-name> -p :1521 -p :5500 oracle/database:ext\n```\n\n----------------------------------------\n\nTITLE: Environment Validation\nDESCRIPTION: Command to validate the Oracle RAC environment by checking container status and health.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n```\n\n----------------------------------------\n\nTITLE: Running WebCenter Sites Admin Container\nDESCRIPTION: Docker command to run the WebCenter Sites admin container with volume mounts and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name <container_name> --network=<network_name> -p <weblogic_port>:7001 -p <weblogic_ssl_port>:9001 -v <user_projects_volume_dir>:/u01/oracle/user_projects -v <sites_shared_volume_dir>:/u01/oracle/sites-shared --env-file <environment_file> <repo_name:tag_name>\n```\n\n----------------------------------------\n\nTITLE: Running MedRec Docker Container\nDESCRIPTION: Command to run the MedRec Docker container in detached mode, mapping port 7011 from container to host for accessing the MedRec application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-medrec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 7011:7011 12212-medrec\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform with OCI Provider\nDESCRIPTION: Example showing Terraform initialization inside the container. The output shows the OCI provider being initialized without version constraints.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/terraform-oci/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsh-4.2# terraform init\n\nInitializing provider plugins…\n\nThe following providers do not have any version constraints in configuration,\nso the latest version was installed.\n\nTo prevent automatic upgrades to new major versions that may contain breaking\nchanges, it is recommended to add version = \"…\" constraints to the\ncorresponding provider blocks in configuration, with the constraint strings\nsuggested below.\n\n* provider.oci: version = \"~> 2.0\"\n\nTerraform has been successfully initialized!\n```\n\n----------------------------------------\n\nTITLE: Applying sysctl Parameters for Oracle RAC\nDESCRIPTION: After modifying the /etc/sysctl.conf file, use these commands to list all parameters and apply the changes. This ensures that the new settings take effect for Oracle RAC operation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -a\nsysctl -p\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Instant Client 12.2 Image for Oracle Linux 7\nDESCRIPTION: Command to build an Oracle Instant Client 12.2 image for Oracle Linux 7 using Docker. This requires downloading specific RPMs beforehand.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull -t oracle/instantclient:12.2.0.1 .\n```\n\n----------------------------------------\n\nTITLE: Configuring WebLogic Administration Server Credentials\nDESCRIPTION: This properties file format is used to specify the username and password for the WebLogic Server Administration Server. It should be placed in a mapped volume at runtime.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container with NFS Storage\nDESCRIPTION: Creates and configures a new Oracle RAC container node using NFS storage, including network setup and container parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep3 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/rac/cluster01/node3:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep3:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--volume racstorage:/oradata \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep3 \\\nlocalhost/oracle/database-rac:21c-slim\n\npodman network disconnect podman racnodep3\npodman network connect rac_pub1_nw --ip 10.0.20.172 racnodep3\npodman network connect rac_priv1_nw --ip 192.168.17.172  racnodep3\npodman network connect rac_priv2_nw --ip 192.168.18.172  racnodep3\npodman start racnodep3\npodman exec racnodep3 /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Pulling and Tagging Oracle FMW Infrastructure Image from Oracle Container Registry\nDESCRIPTION: Commands to authenticate with Oracle Container Registry, pull the FMW Infrastructure base image, and tag it for use with OAM Dockerfiles. This is a prerequisite step for building the OAM image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login container-registry.oracle.com\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222 oracle/fmw-infrastructure:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database with Custom Parameters (Helm 3.x)\nDESCRIPTION: Command to install Oracle Database with custom SID and PDB name using Helm 3.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install db19c --set oracle_sid=ORCL,oracle_pdb=prod oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Testing Database Connectivity and Container Information\nDESCRIPTION: Commands to create a temporary database client pod and test connectivity to both CDB and PDB, including SQL commands to verify container setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run --namespace example-namespace \\\n                 -i --tty --generator=run-pod/v1 temporary \\\n                 --image=local-repo.com/oracle/instantclient:19 \\\n                 -- sh\n```\n\n----------------------------------------\n\nTITLE: Running SQL*Plus in Existing Container\nDESCRIPTION: Docker exec command to run SQL*Plus within an existing database container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_27\n\nLANGUAGE: docker\nCODE:\n```\ndocker exec -ti <container name> sqlplus pdbadmin@ORCLPDB1\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Unified Directory Docker Container\nDESCRIPTION: Docker run command to create and start a container running an Oracle Unified Directory instance. The command includes volume mounting, network configuration, and environment variable settings for instance customization.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -P \\\n--network=OUDNet \\\n--name=<container name> \\\n--volume <Path for the directory on Host which is to be mounted in container for user_projects>:/u01/oracle/user_projects \\\n--env OUD_INSTANCE_NAME=<name for the instance> \\\n--env instanceType=<Type of OUD instance to create and start>\n--env hostname=<hostname for the instance in container> \\\n--env-file <Path for the file containing environment variables> \\\noracle/oud:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Deploying Storage Container for NFS\nDESCRIPTION: Starts the storage container for NFS-based RAC deployment and monitors its setup log.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always\" up -d ${STORAGE_CONTAINER_NAME}\npodman-compose exec ${STORAGE_CONTAINER_NAME} tail -f /tmp/storage_setup.log\n```\n\n----------------------------------------\n\nTITLE: Starting Pre-built Oracle Database with Docker Compose\nDESCRIPTION: This command starts the Docker Compose service defined in the docker-compose.yml file, launching the pre-built Oracle Database container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Root User Credentials for OUD Container\nDESCRIPTION: This snippet demonstrates how to set the root user DN and password in the OUD container configuration file. These credentials are used for administrative access to the directory server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nrootUserDN=cn=Directory Manager\nrootUserPassword=Oracle123\n```\n\n----------------------------------------\n\nTITLE: Building Patched FMW Infrastructure Docker Image\nDESCRIPTION: Docker build command to create a patched FMW Infrastructure image with patch p29135930 applied.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch-fmw-for-k8s/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --force-rm=true --no-cache=true -t oracle/fmw-infrastructure:12213-update-k8s .\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for OSB Managed Server\nDESCRIPTION: This snippet illustrates the Docker run command to start an OSB Managed Server container. It specifies network settings, port mapping, volume sharing, and environment file usage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t  --name soams --network=SOANet -p 9001:9001  --volumes-from soaas  --env-file ./osbserver.env.list oracle/soasuite:12.2.1.3 \"/u01/oracle/container-scripts/startMS.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating OUD Directory Server Container with Docker\nDESCRIPTION: This command creates an OUD Directory Server container using Docker. It specifies network settings, volume mapping, environment file, and the OUD image to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --network=OUDNet \\\n--name=myoudautotune \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env-file ~/oud-dir-dstune-autotune.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: OUD Replication Status Output\nDESCRIPTION: Example output from the dsreplication status command showing replication configuration details. The output displays server connections, replication status, and the configuration of directory servers in the replication topology.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nEstablishing connections and reading configuration ..... Done.\n\ndc=example1,dc=com - Replication Enabled\n========================================\n\nServer          : Entries  : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10]\n----------------:----------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:-----------------------\nmyoudrs1:1444   : -- [11]  : 0        : --           : 1898     : Disabled       : --        : --       : Up         : --            : 1            : --\nmyoudds1:1444   : 102      : 0        : 0            : -- [12]  : Disabled       : Trusted   : --       : Normal     : Enabled       : 1            : myoudrs1:1898 (GID=1)\nmyoudds1b:1444  : 102      : 0        : 0            : -- [12]  : Disabled       : Trusted   : --       : Normal     : Enabled       : 1            : myoudrs1:1898 (GID=1)\n\n[1] The number of changes that are still missing on this element (and that have been applied to at least one other server).\n[2] Age of oldest missing change: the age (in seconds) of the oldest change that has not yet arrived on this element.\n[3] The replication port used to communicate between the servers whose contents are being replicated.\n[4] Whether the replication communication initiated by this element is encrypted or not.\n[5] Whether the directory server is trusted or not. Updates coming from an untrusted server are discarded and not propagated.\n[6] The number of untrusted changes. These are changes generated on this server while it is untrusted.\n    Those changes are not propagated to the rest of the topology but are effective on the untrusted server.\n[7] The status of the replication on this element.\n[8] Whether the external change log is enabled for the base DN on this server or not.\n[9] The ID of the replication group to which the server belongs.\n[10] The replication server this server is connected to with its group ID between brackets.\n[11] Server does not contain replicated data for the suffix.\n[12] Server not configured as a replication server (no replication change log).\n```\n\n----------------------------------------\n\nTITLE: Viewing DNS Container Logs for Oracle RAC\nDESCRIPTION: Displays logs from the DNS container to verify successful deployment, showing readiness for use in the Oracle RAC environment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose logs ${DNS_CONTAINER_NAME}\n################################################\n DNS Server IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Building Oracle GoldenGate Docker Image\nDESCRIPTION: Command to build a Docker image for Oracle GoldenGate using the installer ZIP file. The command tags the image and specifies the installer file as a build argument.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/21c/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ docker build --tag=oracle/goldengate:21.3.0.0.0 \\\n               --build-arg INSTALLER=213000_fbo_ggs_Linux_x64_Oracle_services_shiphome.zip .\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for NFS Storage on Docker Host\nDESCRIPTION: Commands to set the Oracle database name, create a directory for NFS storage, and clean any existing ASM disk files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /docker_volumes/asm_vol/$ORACLE_DBNAME\nrm -rf /docker_volumes/asm_vol/$ORACLE_DBNAME/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle RAC Database Instances\nDESCRIPTION: Commands to verify Oracle RAC Database instances and scan listener configuration. These commands check the status of database instances and display network configuration details for client connectivity.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsu - oracle\n\n#Confirm the status of Oracle Database instances:\n[oracle@racnodep1 ~]$  srvctl status database -d  ORCLCDB\nInstance ORCLCDB1 is running on node racnodep1\nInstance ORCLCDB2 is running on node racnodep2\n\n# Validate network configuration and connectivity:\n[oracle@racnodep1 ~]$ srvctl config scan\nSCAN name: racnodepc1-scan, Network: 1\nSubnet IPv4: 10.0.20.0/255.255.255.0/eth0, static\nSubnet IPv6: \nSCAN 1 IPv4 VIP: 10.0.20.237\nSCAN VIP is enabled.\nSCAN 2 IPv4 VIP: 10.0.20.238\nSCAN VIP is enabled.\nSCAN 3 IPv4 VIP: 10.0.20.236\nSCAN VIP is enabled.\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for RAC Storage\nDESCRIPTION: Creates a Podman volume for NFS storage to be used by RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=192.168.17.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=192.168.17.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Security Properties\nDESCRIPTION: Example of the domain_security.properties file used to configure authentication for the WebLogic Administration Server and database. Includes username, password, and database credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nusername=myusername\npassword=welcome1\ndb_user=sys\ndb_pass=Oradoc_db1\ndb_schema=Oradoc_db1\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Docker Image Extensions Using buildExtensions.sh\nDESCRIPTION: Command-line usage for buildExtensions.sh script that builds Docker image extensions. Shows available parameters including options for building all or specific extensions, specifying base image, version, and custom Docker build options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[oracle@localhost dockerfiles]$ ./buildExtensions.sh -h\n\nUsage: buildExtensions.sh -a -x [extensions] -b [base image]  -t [image name] -v [version] [-o] [Docker build option]\nBuilds one of more Docker Image Extensions.\n\nParameters:\n   -a: Build all extensions\n   -x: Space separated extensions to build. Defaults to all\n       Choose from : patching\n   -b: Base image to use\n   -v: Base version to extend (example 21.3.0)\n   -t: name:tag for the extended image\n   -o: passes on Docker build option\n```\n\n----------------------------------------\n\nTITLE: Using Oracle Wallet with Instant Client Container\nDESCRIPTION: Example command to run a container with Oracle Wallet files mounted for secure database connections.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v /my/host/wallet_dir:/usr/lib/oracle/21/client64/lib/network/admin:Z,ro . . .\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for SOA and OSB Managed Servers\nDESCRIPTION: This snippet shows the structure of environment variables file for SOA and OSB Managed Servers. It includes essential parameters like server name, domain type, and admin server details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMANAGED_SERVER=<Managed Server name. Must be either soa_server1 or osb_server1>\nDOMAIN_TYPE=<soa/osb>\nDOMAIN_NAME=soainfra\nADMIN_HOST=<Administration Server container name Or hostname>\nADMIN_PORT=<port number where Administration Server is running>\nADMIN_PASSWORD=<admin_password>\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux File Context for RAC Response Files\nDESCRIPTION: Sets up SELinux file context for grid setup and database configuration response files in the shared location\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Connecting to KVLite from Node.js\nDESCRIPTION: JavaScript code snippet showing how to connect to a KVLite instance from a Node.js application using the NoSQL client with secure authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn new NoSQLClient({\n  serviceType: ServiceType.KVSTORE,\n  endpoint: 'https://kvlite:8080',\n  auth: {\n        kvstore: {\n            user: \"driver_user\",\n            password: \"DriverPass@@123\"\n        }\n   }  \n});\n```\n\n----------------------------------------\n\nTITLE: SOA Managed Server Environment Configuration\nDESCRIPTION: Environment variable template for configuring SOA Managed Server containers with server-specific settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMANAGED_SERVER=<Managed Server name, either soa_server1 or soa_server2>\nDOMAIN_NAME=soainfra\nADMIN_HOST=<Administration Server hostname>\nADMIN_PORT=<Node port number mapping Administration Server container port `7001`>\nADMIN_PASSWORD=<admin_password>\nMANAGED_SERVER_CONTAINER=true\nMANAGEDSERVER_PORT=<Container port number where Managed Server is running>\n```\n\n----------------------------------------\n\nTITLE: Domain Security Properties Configuration\nDESCRIPTION: Properties file configuration for WebLogic Administration Server authentication\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Group Membership in Bash\nDESCRIPTION: Command to check if a user is part of the Docker group, which is required for Docker access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ id -Gn <userid>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database 11gR2 XE Container\nDESCRIPTION: Docker command to run Oracle Database 11gR2 Express Edition container with shared memory configuration and APEX port exposure\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n--shm-size=1g \\\n-p 1521:1521 -p 8080:8080 \\\n-e ORACLE_PWD=<your database passwords> \\\n-v [<host mount point>:]/u01/app/oracle/oradata \\\noracle/database:11.2.0.2-xe\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Oracle RAC Additional Nodes\nDESCRIPTION: Defines the required environment variables for configuring additional nodes in an existing Oracle RAC cluster. These variables control node configuration, networking, storage, and authentication settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nOP_TYPE=###Specify the Operation TYPE. It can accept 2 values INSTALL OR ADDNODE###\nEXISTING_CLS_NODES=###Specify the Existing Node of the cluster which you want to join. If you have 2 nodes in the cluster and you are trying to add the third node then specify existing 2 nodes of the clusters and separate them by comma.####\nNODE_VIP=###Specify the Node VIP###\nVIP_HOSTNAME=###Specify the VIP hostname###\nPRIV_IP=###Specify the Private IP###\nPRIV_HOSTNAME=###Specify the Private Hostname###\nPUBLIC_IP=###Specify the public IP###\nPUBLIC_HOSTNAME=###Specify the public hostname###\nSCAN_NAME=###Specify the scan name###\nSCAN_IP=###Specify this if you do not have DNS server###\nASM_DEVICE_LIST=###Specify the ASM Disk lists.\nDOMAIN=###Default value set to example.com###\nORACLE_SID=###Default value set to ORCLCDB###\nDEFAULT_GATEWAY=###Default gateway. You need this env variable if containers will be running on multiple hosts.####\nCMAN_HOSTNAME=###Connection Manager Host Name###\nCMAN_IP=###Connection manager Host IP###\nASM_DISCOVERY_DIR=####ASM disk location inside the container. By default it is /dev######\nCOMMON_OS_PWD_FILE=###You need to pass the file name to setup grid and oracle user password. If you specify ORACLE_PWD_FILE, GRID_PWD_FILE, and DB_PWD_FILE then you do not need to specify this env variable###\nORACLE_PWD_FILE=###You need to pass the file name to set the password for oracle user.###\nGRID_PWD_FILE=###You need to pass the file name to set the password for grid user.###\nDB_PWD_FILE=###You need to pass the file name to set the password for DB user i.e. sys.###\nREMOVE_OS_PWD_FILES=###You need to set this to true to remove pwd key file and password file after resetting password.###\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container with Cloning\nDESCRIPTION: Docker command to run an Oracle database container with database cloning enabled. Includes environment variables for authentication and connection settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_25\n\nLANGUAGE: docker\nCODE:\n```\ndocker run --name <container-name> -e CLONE_DB=true \\\n-e ORACLE_PWD='<sys password of the on-prem database>' \\\n-e PRIMARY_DB_CONN_STR='<the on-prem database connection string in <HOST>:<PORT>/<SERVICE_NAME> format>' \\\noracle/database:19-onprem\n```\n\n----------------------------------------\n\nTITLE: Running Apache Backend Container with Docker\nDESCRIPTION: Command to start the Apache backend container and publish its port 80 to a dynamic port on the host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/apache-backend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p :80 occs/apache-backend\n```\n\n----------------------------------------\n\nTITLE: Validating OUD Replication with dsreplication Command\nDESCRIPTION: Commands to validate the replication server configuration by executing the dsreplication status command inside the myoudrs1 container. This command shows the status of the replication configuration and connections between servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it myoudrs1 \\\n/u01/oracle/user_projects/myoudrs1/OUD/bin/dsreplication status \\\n--trustAll \\\n--hostname myoudrs1 \\\n--port 1444 \\\n--adminUID admin \\\n--dataToDisplay compat-view \\\n--dataToDisplay rs-connections\n\nEnter the admin password when prompted:\n\n>>>> Specify Oracle Unified Directory LDAP connection parameters\n\nPassword for user 'admin': Oracle123\n```\n\n----------------------------------------\n\nTITLE: Deploying DNS Container for Oracle RAC\nDESCRIPTION: Deploys the DNS container required for Oracle RAC setup, stops it temporarily to reconfigure network settings, and restarts it with proper IP configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Container with Podman\nDESCRIPTION: Command to connect to a specific Oracle RAC container using podman exec. This allows you to access the container's shell for further validation and troubleshooting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t racnodep1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Building Oracle GoldenGate Docker Image with Custom Base Image (Bash)\nDESCRIPTION: Docker build command to create an Oracle GoldenGate image using a custom base image. This example uses an Oracle Database 12c Release 2 Enterprise Edition image as the base.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --build-arg BASE_IMAGE=\"oracle/database:12.2.0.1-ee\" \\\n               --build-arg OGG_VERSION=\"12.3.0.1.4\" \\\n               --build-arg OGG_EDITION=\"microservices\" \\\n               --build-arg OGG_TARFILE=\"123014_fbo_ggs_Linux_x64_services_shiphome.tar\" \\\n               --tag oracle/goldengate-microservices:12.3.0.1.4 --no-cache .\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database with Custom Parameters (Helm 2.x)\nDESCRIPTION: Command to install Oracle Database with custom SID and PDB name using Helm 2.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name db19c --set oracle_sid=ORCL,oracle_pdb=prod oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Monitoring Oracle RAC Container Logs\nDESCRIPTION: Command to tail the Oracle RAC installation log file to monitor the progress of the database creation process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnodep1 /bin/bash -c \"tail -f /tmp/orod.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for Oracle RAC Storage\nDESCRIPTION: Creates a Podman volume using the NFS driver to mount the storage container's exported NFS share. The volume is configured with specific NFS options for optimal performance with Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npodman volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=10.0.20.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=10.0.20.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: WebLogic Domain Properties Configuration\nDESCRIPTION: Properties file format for configuring WebLogic admin credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-opatch-update/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Starting KVLite Container with Remote Access\nDESCRIPTION: Launches a KVLite container with necessary port mappings and security configurations for remote access. Uses hostname matching for proper network resolution.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=kvlite --hostname=$HOSTNAME \\\n  -v secfiles:/shared_conf \\\n  --env KV_DRIVER_USER_PWD=\"DriverPass@@123\" \\\n  --env KV_PROXY_PORT=8080 \\\n  -p 8080:8080 \\\n  -p 5000:5000 \\\n  -p 5010-5020:5010-5020 \\\n  -p 5021-5049:5021-5049 \\\n  -p 5999:5999 \\\n  oracle/nosql:ce-sec\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Docker Image with Patch\nDESCRIPTION: Docker build command to create a WebLogic image with updated OPatch and patches applied.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-opatch-update/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/weblogic:12213-opatch-update .\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RAC Deployment\nDESCRIPTION: Exports required environment variables for configuring RAC nodes, networks, and containers including health checks, IP addresses, and storage settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c-slim\nexport STAGING_SOFTWARE_LOC=\"/scratch/software/21c/goldimages/\"\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport CRS_ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport GRID_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\"\nexport DB_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/dbca_21c.rsp\"\nexport PWD_SECRET_FILE=/opt/.secrets/pwdfile.enc\nexport KEY_SECRET_FILE=/opt/.secrets/key.pem\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Starting KVLite in a Docker Container\nDESCRIPTION: Command to start a KVLite instance in a Docker container with secure configuration. It mounts a volume for shared configuration files and sets environment variables for the driver user password and proxy port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=kvlite --hostname=kvlite -v secfiles:/shared_conf \\\n--env KV_DRIVER_USER_PWD=\"DriverPass@@123\" --env KV_PROXY_PORT=8080 -p 8080:8080 oracle/nosql:ce-sec\n```\n\n----------------------------------------\n\nTITLE: Installing podman-docker Package on OL8\nDESCRIPTION: Command to install the podman-docker package on Oracle Linux 8, which allows running docker commands on a Podman host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf install podman-docker -y\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP Address\nDESCRIPTION: This command retrieves the IP address of the running Docker container, which can be used to access the WebLogic Server Administration Console.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.1.0/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker NFS Volume\nDESCRIPTION: Creates a Docker volume with NFS driver and specific mount options for RAC storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --driver local \\\n  --opt type=nfs \\\n  --opt o=addr=192.168.17.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n  --opt device=192.168.17.80:/oradata \\\n  racstorage\n```\n\n----------------------------------------\n\nTITLE: Starting WebLogic Administration Server in Docker\nDESCRIPTION: This command runs a Docker container for the WebLogic Administration Server. It maps port 7001 and mounts a volume for properties.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 -v $COH_SAMPLE_DIR/properties/docker-run:/u01/oracle/properties coherence-12213-domain-home-in-image-wdt\n```\n\n----------------------------------------\n\nTITLE: Basic TSAM Plus Docker Compose Configuration\nDESCRIPTION: Docker compose configuration for running TSAM Plus with new database schema creation. Includes essential environment variables for database and WebLogic configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservices:\n  tsam:\n    image: oracle/tsam:12.2.2\n    hostname: tsam.docker\n    ports:\n      - 7001/tcp\n      - 22/tcp\n    privileged: true\n    environment:\n      - \"DB_CONNSTR=db.box:1521/orcl\"\n      - \"DB_TSAM_USER=tsam\"\n      - \"DB_TSAM_PASSWD=tsam\"\n      - \"TSAM_CONSOLE_ADMIN_PASSWD=admin1\"\n      - \"DBA_USER=sys\"\n      - \"DBA_PASSWD=welcome1\"\n      - \"DB_TSAM_TBLSPACE=users\"\n      - \"WLS_PW=weblogic1\"\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Instant Client 18 Image for Oracle Linux 7\nDESCRIPTION: Command to build an Oracle Instant Client 18 image for Oracle Linux 7 using Docker. This process installs Instant Client using RPMs from the Oracle Instant Client repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull -t oracle/instantclient:18 .\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database with Values File (Helm 3.x)\nDESCRIPTION: Command to install Oracle Database using a custom values YAML file with Helm 3.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install db19c -f values.yaml oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Creating a Terraform OCI Alias\nDESCRIPTION: Command to create a shell alias for the Terraform OCI container, allowing it to be used as if it were installed locally on the machine. This simplifies the command needed to run Terraform operations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/terraform-oci/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ alias terraform-oci=\"docker run \\\n   --interactive --tty --rm \\\n   --volume \\\"$PWD\\\":/data \\\n   oracle/terraform-oci:2.0.6 terraform\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Administrative Password from Docker Logs\nDESCRIPTION: Command to retrieve the auto-generated administrative password for the 'oggadmin' user from the Docker container logs. This password is generated on first startup if not specified via OGG_ADMIN_PWD environment variable.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs <container name> 2>/dev/null | head -3\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm for Multinode Deployment\nDESCRIPTION: This command initializes a Docker Swarm on the manager node, enabling multinode deployment of Oracle SOA Suite containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for NFS Storage RAC Node\nDESCRIPTION: Sets up environment variables for adding a new node to Oracle RAC cluster using NFS storage. Includes NFS volume paths and network configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_HOST_NAME=rac-dns\nexport DNS_DOMAIN=\"example.com\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport INSTALL_NODE=racnodep1\nexport SCAN_NAME=\"racnodepc1-scan\"\nexport SCAN_IP=172.16.1.236\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport ASM_DISCOVERY_DIR=\"/oradata\"\nexport ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport ORACLE_SID=\"ORCLCDB\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport STORAGE_PRIVATE_IP=192.168.17.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE_IMAGE_NAME=\"localhost/oracle/database-rac:21.3.0-21.13.0\"\nexport RACNODE2_NODE_VIP=172.16.1.201\nexport RACNODE2_VIP_HOSTNAME=\"racnodep2-vip\"\nexport RACNODE2_PRIV_IP=192.168.17.171\nexport RACNODE2_PRIV_HOSTNAME=\"racnodep2-priv\"\nexport RACNODE2_PUBLIC_IP=172.16.1.171\nexport RACNODE2_PUBLIC_HOSTNAME=\"racnodep2\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Container (racnodep1) in Podman\nDESCRIPTION: Creates the first Oracle RAC container with hostname racnodep1, configuring system resources, volumes, network settings, and environment variables. This container will be the first node in the RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e GRID_RESPONSE_FILE=/tmp/grid_21c.rsp \\\n-e DBCA_RESPONSE_FILE=/tmp/dbca_21c.rsp \\\n-e CRS_PRIVATE_IP1=192.168.17.170 \\\n-e CRS_PRIVATE_IP2=192.168.18.170 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--volume racstorage:/oradata \\\n-e CRS_ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n-e CRS_ASM_DISCOVERY_STRING=\"/oradata/asm_disk*\" \\\n-e OP_TYPE=setuprac \\\n-e ASM_ON_NAS=True \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Volume for RAC Storage\nDESCRIPTION: Docker command to create an NFS volume for RAC storage, specifying the NFS server address, mount options, and volume name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --driver local \\\n--opt type=nfs \\\n--opt   o=addr=192.168.17.80,rw,bg,hard,tcp,vers=3,timeo=600,rsize=32768,wsize=32768,actimeo=0 \\\n--opt device=192.168.17.80:/oradata \\\nracstorage\n```\n\n----------------------------------------\n\nTITLE: Building OHS Docker Image\nDESCRIPTION: Command to build the Oracle HTTP Server Docker image using the build script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Container Configuration\nDESCRIPTION: Database environment configuration and container launch command\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name soadb --network=SOANet -p 1521:1521 -p 5500:5500 --env-file ./db.env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuring WebLogic Domain Properties\nDESCRIPTION: Example of domain properties file content for customizing WebLogic domain configuration. The file contains key-value pairs for various domain parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nADMIN_NAME=admin-server\nADMIN_HOST=wlsadmin\nMANAGED_SERVER_NAME_BASE=managed-server\nCONFIGURED_MANAGED_SERVER_COUNT=2\nCLUSTER_NAME=cluster-1\nDEBUG_FLAG=true\nPRODUCTION_MODE_ENABLED=true\nCLUSTER_TYPE=DYNAMIC\nCLUSTER_NAME=cluster1\n```\n\n----------------------------------------\n\nTITLE: Creating Second Oracle RAC Node Container with Podman\nDESCRIPTION: Creates the second RAC node container using Podman with user-defined response files and block devices. This command mirrors the first node configuration but with node-specific settings including different hostname (racnodep2) and storage path.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp:/tmp/grid_21c.rsp \\\n--volume /scratch/common_scripts/podman/rac/dbca_21c.rsp:/tmp/dbca_21c.rsp \\\n--volume /scratch/rac/cluster01/node2:/u01 \\\n--volume /scratch:/scratch \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep2:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Database via SCAN Listener\nDESCRIPTION: Example connection string for connecting to Oracle RAC database using the SCAN listener. This method is for clients on networks configured with MACVLAN driver and properly configured DNS.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CONNECTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsystem/<password>@//<scan_name>:1521/<ORACLE_SID>\n```\n\n----------------------------------------\n\nTITLE: Removing Kubernetes Deployment\nDESCRIPTION: Command to remove all deployed Kubernetes objects including namespace, PVC, ConfigMap, Deployment, and Service.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f kubernetes-example.yaml\nnamespace \"example-namespace\" deleted\npersistentvolumeclaim \"oracle-rdbms-oradata\" deleted\nconfigmap \"oracle-rdbms-config\" deleted\ndeployment.apps \"oracle-rdbms\" deleted\nservice \"database\" deleted\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Oracle Database Chart with Helm 2.x\nDESCRIPTION: Command to uninstall Oracle Database deployment using Helm 2.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete db19c\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Database Using SCAN Listener\nDESCRIPTION: Connection string for connecting to an Oracle RAC database using the public Single Client Access (SCAN) listener with configured DNS.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nsystem/<password>@//<scan_name>:1521/<ORACLE_SID>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP\nDESCRIPTION: Command to retrieve the IP address of the running WebLogic container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Extracting Oracle GoldenGate Installation Media (Bash)\nDESCRIPTION: Commands to extract Oracle GoldenGate installation media for non-Oracle databases from a ZIP file and optionally rebuild the TAR file with specific group and user identifiers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip -lv ~/Downloads/123011_ggs_Linux_x64_MySQL_64bit.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip ~/Downloads/123011_ggs_Linux_x64_MySQL_64bit.zip ggs_Linux_x64_MySQL_64bit.tar\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ./oggcore && \\\n  tar Cxf ./oggcore ggs_Linux_x64_MySQL_64bit.tar && \\\n  tar Ccf ./oggcore ggs_Linux_x64_MySQL_64bit.tar --owner=54321 --group=54321 . && \\\n  rm -fr  ./oggcore\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container with Block Devices in Podman\nDESCRIPTION: Comprehensive Podman command to create an Oracle RAC container with block devices, setting up necessary resources, privileges, and environment variables for RAC installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/oracleoci/oraclevdd:/dev/asm_disk1  \\\n  --device=/dev/oracleoci/oraclevde:/dev/asm_disk2 \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.200 \\\n  -e VIP_HOSTNAME=racnodep1-vip  \\\n  -e PRIV_IP=192.168.17.170 \\\n  -e PRIV_HOSTNAME=racnodep1-priv \\\n  -e PUBLIC_IP=172.16.1.170 \\\n  -e PUBLIC_HOSTNAME=racnodep1  \\\n  -e SCAN_NAME=racnodepc1-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e CMAN_HOSTNAME=racnodepc1-cman \\\n  -e CMAN_IP=172.16.1.166 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e ORACLE_SID=ORCLCDB \\\n -e RESET_FAILED_SYSTEMD=\"true\" \\\n -e DEFAULT_GATEWAY=\"172.16.1.1\" \\\n -e TMPDIR=/var/tmp \\\n  --restart=always \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnodep1 \\\n  localhost/oracle/database-rac:21.3.0-21.13.0\n```\n\n----------------------------------------\n\nTITLE: Cleanup RAC Environment with Block Devices\nDESCRIPTION: Commands to clean up an Oracle RAC environment using block devices, including container removal, disk cleanup, and network/image removal.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f racnoded1 racnoded2 rac-dnsserver racnodedc1-cman \ndd if=/dev/zero of=/dev/oracleoci/oraclevde  bs=8k count=10000 status=progress && dd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000 status=progress\nrm -rf /opt/containers /opt/.secrets\ndocker network rm -f rac_pub1_nw rac_pzriv1_nw\ndocker rmi -f oracle/rac-dnsserver:latest oracle/database-rac:19.3.0 oracle/client-cman:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Shell\nDESCRIPTION: Docker commands for getting shell access to various WebCenter Content containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it WCContentContainer /bin/bash\ndocker exec -it IPMContainer /bin/bash\ndocker exec -it CaptureContainer /bin/bash\ndocker exec -it WCCADFContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting Managed Server Container in Bash\nDESCRIPTION: Command to run a Docker container for a Managed Server, setting up network, mounting properties, and using volumes from the Administration Server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d -p 9802:8002 --network=InfraNET -v ${scriptDir}/properties:/u01/oracle/properties ${ENV_ARG} --volumes-from ${adminhost} --name ${managedname}  oracle/fmw-infrastructure:12.2.1.4 startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to All Deployments\nDESCRIPTION: Shows how to add an HTTPS certificate to all deployments' client wallets using addCertificate utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naddCertificate localhost:443\n```\n\n----------------------------------------\n\nTITLE: Monitoring Oracle RAC Node Setup\nDESCRIPTION: Command to monitor the setup process of a new Oracle RAC node by following the setup log file. This helps track the progress and troubleshoot any issues during node addition.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnodep3 /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Oracle Restart Container\nDESCRIPTION: Command to start the Oracle Restart container after creation and network configuration. Also shows how to monitor the setup process by checking logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman start ${GPCNODE}\n```\n\n----------------------------------------\n\nTITLE: Converting filegroup1.jar to TAR File for Docker Build\nDESCRIPTION: Demonstrates the process of converting the extracted filegroup1.jar to a TAR file that can be used in the Docker build process. This step is necessary for manually building the Oracle GoldenGate Docker image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip -q filegroup1.jar -d ./oggcore && \\\n      tar Ccf ./oggcore 123014_fbo_ggs_Linux_x64_services_shiphome.tar --owner=54321 --group=54321 . && \\\n      rm -fr  ./oggcore\n```\n\n----------------------------------------\n\nTITLE: Creating Container for New Oracle RAC Node with NFS Storage\nDESCRIPTION: Command for creating a new container for an Oracle RAC Database node using NFS storage. This example configures a container to use shared volume storage for ASM disks instead of direct device mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep3 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.172 \\\n-e CRS_PRIVATE_IP2=192.168.18.172 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep3,viphost:racnodep3-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n--volume racstorage:/oradata \\\n-e CRS_ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n-e CRS_ASM_DISCOVERY_STRING=\"/oradata/asm_disk*\" \\\n-e OP_TYPE=racaddnode \\\n-e EXISTING_CLS_NODE=\"racnodep1,racnodep2\" \\\n-e INSTALL_NODE=racnodep3 \\\n-e ASM_ON_NAS=True \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep3 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Displaying GoldenGate Service Configuration\nDESCRIPTION: Example showing how to display configuration data for Distribution Server in a local deployment using oggServiceConfig utility with authentication credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noggServiceConfig http://localhost:11000 Local distsrvr \\\n                 --user oggadmin --password oggadmin-A1\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Oracle RAC Environment Files\nDESCRIPTION: Commands to set the appropriate SELinux context for environment files used by Oracle RAC containers to ensure proper access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep1\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep1\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep2\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep2\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Instant Client 21 Image\nDESCRIPTION: Command to build an Oracle Instant Client 21 image using Docker. This process installs Instant Client using RPMs from the Oracle Instant Client repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --pull -t oracle/instantclient:21 .\n```\n\n----------------------------------------\n\nTITLE: Configuring Network for Racnodep1 Container\nDESCRIPTION: Configures the network for the first RAC node by disconnecting from the default bridge network and connecting to the public and private RAC networks with specific IP addresses. These network connections are essential for RAC node communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# podman network disconnect bridge racnodep1\n# podman network connect rac_pub1_nw --ip 172.16.1.150 racnodep1\n# podman network connect rac_priv1_nw --ip 192.168.17.150  racnodep1\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Network for NFS Storage Container\nDESCRIPTION: Docker command to create a bridge network with the specified subnet for the NFS storage container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RAC Configuration\nDESCRIPTION: Defines environment variables for container configuration including network settings, hostnames, IP addresses and storage device paths\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport CRS_ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DNS_PRIVATE1_IP=192.168.17.25\nexport DNS_PRIVATE2_IP=192.168.18.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport GRID_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\"\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Building NFS Storage Container Image for Docker\nDESCRIPTION: Commands to navigate to the dockerfiles directory and build the NFS Storage Container image using the provided build script with version 19.3.0.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleRACStorageServer/dockerfiles\n./buildDockerImage.sh -v 19.3.0\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Podman Compose\nDESCRIPTION: Sets up environment variables required by the podman-compose.yml file for Oracle RAC container configuration. These variables define container names, hostnames, IP addresses, and other essential parameters for the RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport CRS_ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXD=\"racnoded\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DNS_PRIVATE1_IP=192.168.17.25\nexport DNS_PRIVATE2_IP=192.168.18.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data Volume for Oracle SOA Suite Containers\nDESCRIPTION: These commands create and configure the necessary directories for the data volume used by Oracle SOA Suite containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# mkdir -p /u01/DockerVolume/SOAVolume/DB\n# mkdir -p /u01/DockerVolume/SOAVolume/SOA\n# chown -R 1000:0 /u01/DockerVolume/SOAVolume/\n# chmod -R 777 /u01/DockerVolume/SOAVolume/\n```\n\n----------------------------------------\n\nTITLE: Building Patched Oracle RAC Database Container Image\nDESCRIPTION: Shows an example command for building a patched Oracle RAC Database container image using the buildPatchedContainerImage.sh script, specifying the version and patch label.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/applypatch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n ./buildPatchedContainerImage.sh -v 21.3.0 -p 21.16.0\n```\n\n----------------------------------------\n\nTITLE: Verifying WebLogic Patches\nDESCRIPTION: Commands to verify the installed patches and OPatch version in the WebLogic container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-wls-for-k8s/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name verify_patch -it oracle/weblogic:12213-patch-wls-for-k8s /bin/bash\n$ cd OPatch\n$ ./opatch version\n$ ./opatch lspatches\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Connection Manager Container Image\nDESCRIPTION: Commands to build the container image using the buildContainerImage.sh script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/OracleConnectionManager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v (Software Version)\n./buildContainerImage.sh -v 23.5.0\n```\n\n----------------------------------------\n\nTITLE: Storage Container Startup Logs\nDESCRIPTION: Sample logs showing successful initialization of the storage server container that provides NFS-shared storage for the RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nExport list for racnode-storage:\n/oradata *\n#################################################\n Setup Completed                                 \n#################################################\n```\n\n----------------------------------------\n\nTITLE: Clearing Existing Filesystems from ASM Devices\nDESCRIPTION: Uses dd command to clear any existing filesystem from ASM devices before RAC deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/xvde  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Running LDAPSEARCH CLI Command Against OUD Docker Container\nDESCRIPTION: Command to execute an LDAP search against an Oracle Unified Directory container using a temporary client container. This example demonstrates how to search for the naming contexts in the directory server by using a base-level search.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/oud/bin/ldapsearch \\\n--hostname myoudp \\\n--port 1389 \\\n--bindDN \"cn=Directory Manager\" \\\n--bindPassword \"Oracle123\" \\\n--baseDN \"\" \\\n--searchScope base \\\n\"(objectClass=*)\" dn + | grep naming\n```\n\n----------------------------------------\n\nTITLE: Configuring Healthcheck and Startup Command for OUDSM Docker Image\nDESCRIPTION: This snippet sets up a healthcheck command and defines the startup command for the OUDSM Docker image. It uses a custom health check script and starts the domain creation process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nUSER oracle\nHEALTHCHECK --start-period=5m --interval=1m CMD curl -k -s --fail `$HEALTH_SCRIPT_FILE` || exit 1\nCMD [\"sh\", \"-c\", \"${SCRIPT_DIR}/createDomainAndStart.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password\nDESCRIPTION: Execute password change script inside the container to set admin account passwords\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/startersetcontainer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec starterset ./setPassword.sh starterset\n```\n\n----------------------------------------\n\nTITLE: Starting the First Oracle RAC Container on Podman\nDESCRIPTION: Command to start the first Oracle RAC container after it has been created and configured with the appropriate networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npodman start racnodep1\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server Container\nDESCRIPTION: This command starts a containerized WebLogic Admin Server named 'wlsadmin' using the '1221-domain-online-config' image. It maps port 7001 and runs in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-domain-online-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 1221-domain-online-config\n```\n\n----------------------------------------\n\nTITLE: Setting up Proxy Environment Variables\nDESCRIPTION: Export commands to set up proxy environment variables for Docker to access external registries when building images. Helps resolve connectivity issues with yum.oracle.com.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nexport http_proxy=http://www-yourcompany.com:80 \nexport https_proxy=http://www-yourcompany.com:80 \nexport HTTP_PROXY=http://www-yourcompany.com:80 \nexport HTTPS_PROXY=http://www-yourcompany.com:80 \nexport NO_PROXY=localhost,.yourcompany.com \n```\n\n----------------------------------------\n\nTITLE: Building the Terraform OCI Docker Image\nDESCRIPTION: Command to build a Docker image containing Terraform with the OCI provider. This creates a container tagged as oracle/terraform-oci:2.0.6.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/terraform-oci/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# docker build -t oracle/terraform-oci:2.0.6 .\n```\n\n----------------------------------------\n\nTITLE: Checking Oracle RAC Database Container Images in Podman\nDESCRIPTION: Command to verify the Oracle RAC Database container image is available in the local Podman repository. This shows the image name, version, ID, age, and size.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman images|grep database-rac\nlocalhost/oracle/database-rac        21c          41239091d2ac  16 minutes ago  20.2 GB\n```\n\n----------------------------------------\n\nTITLE: LDAP Search Query for Directory Validation\nDESCRIPTION: Docker command to execute an LDAP search query against the OUD container to validate the directory server setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/oud/bin/ldapsearch \\\n--hostname myoudds1 \\\n--port 1389 \\\n--bindDN \"cn=Directory Manager\" \\\n--bindPassword \"Oracle123\" \\\n--baseDN \"dc=example1,dc=com\" \\\n\"(objectClass=person)\" dn\n```\n\n----------------------------------------\n\nTITLE: Configuring Ready End Point for Oracle Identity Management\nDESCRIPTION: Checks for specific patches and configures the Ready End Point in the weblogic-application.xml file if necessary.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nUSER oracle\nRUN if $ORACLE_HOME/OPatch/opatch lsinventory  -oh $ORACLE_HOME -jre $JAVA_HOME | egrep -q '23855729|24204843|24325050'; then \\\n     echo \"Ready End Point already Configured.\"; \\\n    else \\\n      sed -i 's|true</ready|false</ready|g' /u01/oracle/idm/server/apps/oim.ear/META-INF/weblogic-application.xml; \\\n    fi\n```\n\n----------------------------------------\n\nTITLE: Running DSCONFIG CLI Command for OUD Container Configuration\nDESCRIPTION: Command to execute the dsconfig tool against an Oracle Unified Directory container using a temporary client container. This example demonstrates how to launch the interactive configuration console for managing OUD settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/oud/bin/dsconfig \\\n--hostname myoudp \\\n--port 1444 \\\n--portProtocol LDAP \\\n--bindDN \"cn=Directory Manager\" \\\n--bindPassword \"Oracle123\" \\\n--trustAll --advanced --displayCommand\n\nEnter the admin password when prompted:\n\n>>>> Specify Oracle Unified Directory LDAP connection parameters\n\nPassword for user 'admin': Oracle123\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Docker Container with Custom Scripts\nDESCRIPTION: This command starts an Oracle Database Docker container, mapping volumes for data persistence and custom scripts execution. It sets environment variables for the Oracle SID and PDB name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/customscripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name customscripts \\\n-p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=ORCLSCRIPT \\\n-e ORACLE_PDB=CUSTOMSCRIPTS \\\n-v /home/oracle/oradata:/opt/oracle/oradata \\\n-v /home/oracle/docker/samples/customscripts:/opt/oracle/scripts/setup \\\noracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Configuring Network for Oracle RAC Container on Podman\nDESCRIPTION: Commands to configure the network for an Oracle RAC container on Podman. This includes disconnecting from the default bridge network and connecting to custom public and private networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n# podman network disconnect bridge racnode2\n# podman network connect rac_pub1_nw --ip 172.16.1.151 racnode2\n# podman network connect rac_priv1_nw --ip 192.168.17.151 racnode2\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database with SQLPlus\nDESCRIPTION: Runs a SQLPlus container to connect to the Oracle Database for password changes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --network=SampleNET --rm store/oracle/database-instantclient:12.2.0.1 sqlplus sys/Oradoc_db1@InfraDB:1521/InfraDB.us.oracle.com AS SYSDBA\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate Docker Container (Bash)\nDESCRIPTION: Docker run command to start an Oracle GoldenGate container. This command includes environment variables for configuration, port mapping, and volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name <container name> \\\n    --cap-add SYS_RESOURCE \\\n    -e OGG_SCHEMA=<schema for OGG> \\\n    -e OGG_ADMIN=<admin user name> \\\n    -e OGG_ADMIN_PWD=<admin password> \\\n    -e OGG_DEPLOYMENT=<deployment name for Microservices Architecture> \\\n    -e PORT_BASE=11000 \\\n    -p 8443:443 \\\n    -v <host mount point>:<container-mount-point> ... \\\n    <image name>\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep2 with NFS Storage\nDESCRIPTION: Podman command to create the second Oracle RAC container named 'racnodep2' using NFS storage. It sets similar environment variables and configurations as the first container, but with different network settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep2 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--secret pwdsecret \\\n--secret keysecret \\\n-e DNS_SERVERS=\"10.0.20.25\" \\\n-e DB_SERVICE=service:soepdb \\\n-e CRS_PRIVATE_IP1=192.168.17.171 \\\n-e CRS_PRIVATE_IP2=192.168.18.171 \\\n-e CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\" \\\n-e SCAN_NAME=racnodepc1-scan \\\n-e INIT_SGA_SIZE=3G \\\n-e INIT_PGA_SIZE=2G \\\n-e INSTALL_NODE=racnodep1 \\\n-e DB_PWD_FILE=pwdsecret \\\n-e PWD_KEY=keysecret \\\n--volume racstorage:/oradata \\\n-e CRS_ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n-e CRS_ASM_DISCOVERY_STRING=\"/oradata/asm_disk*\" \\\n-e OP_TYPE=setuprac \\\n-e ASM_ON_NAS=True \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep2 \\\nlocalhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Server Docker Container\nDESCRIPTION: This command starts a Docker container from the built WebLogic Server image, mapping ports and volumes, and setting environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.1.0/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 7001:7001 -p 9002:9002  -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_NAME=docker_domain -e ADMIN_NAME=docker-AdminServer oracle/weblogic:14.1.1.0-developer-11\n```\n\n----------------------------------------\n\nTITLE: Assigning Networks to Additional Oracle RAC Container\nDESCRIPTION: Commands to disconnect the default bridge network and connect the additional Oracle RAC container to custom public and private networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# docker network disconnect bridge racnode2\n# docker network connect rac_pub1_nw --ip 172.16.1.151 racnode2\n# docker network connect rac_priv1_nw --ip 192.168.17.151 racnode2\n```\n\n----------------------------------------\n\nTITLE: Configuring OUD Proxy Server Environment Variables\nDESCRIPTION: Environment configuration file for OUD Proxy Server setup containing instance parameters, network settings, and workflow configurations for multiple backend servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ninstanceType=Proxy\nOUD_INSTANCE_NAME=myoudp\nhostname=myoudp\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\ndsconfig_1=create-extension --set enabled:true --set remote-ldap-server-address:myoudds1 --set remote-ldap-server-port:1389 --set remote-ldap-server-ssl-port:1636 --extension-name ldap_extn_1 --type ldap-server\ndsconfig_2=create-workflow-element --set client-cred-mode:use-client-identity --set enabled:true --set ldap-server-extension:ldap_extn_1 --type proxy-ldap --element-name proxy_ldap_wfe_1\ndsconfig_3=create-workflow --set base-dn:dc=example1,dc=com --set enabled:true --set workflow-element:proxy_ldap_wfe_1 --type generic --workflow-name wf_1\ndsconfig_4=set-network-group-prop --group-name network-group --add workflow:wf_1\ndsconfig_5=create-extension --set enabled:true --set remote-ldap-server-address:myoudds2 --set remote-ldap-server-port:1389 --set remote-ldap-server-ssl-port:1636 --extension-name ldap_extn_2 --type ldap-server\ndsconfig_6=create-workflow-element --set client-cred-mode:use-client-identity --set enabled:true --set ldap-server-extension:ldap_extn_2 --type proxy-ldap --element-name proxy_ldap_wfe_2\ndsconfig_7=create-workflow --set base-dn:dc=example2,dc=com --set enabled:true --set workflow-element:proxy_ldap_wfe_2 --type generic --workflow-name wf_2\ndsconfig_8=set-network-group-prop --group-name network-group --add workflow:wf_2\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Pre-built Oracle Database\nDESCRIPTION: This YAML configuration defines a Docker Compose service for running the pre-built Oracle Database image, exposing ports 1521 and 5500.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  orcl-node:\n    image: oracle/db-prebuilt:19.3.0-ee\n    ports:\n      - \"1521:1521\"\n      - \"5500:5500\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Networks to Second Oracle RAC Node (racnodep2)\nDESCRIPTION: Configures network connectivity for the second RAC node by connecting it to public and private networks. This includes disconnecting from the default podman network and connecting to the dedicated RAC networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep2\npodman network connect rac_pub1_nw --ip 10.0.20.171 racnodep2\npodman network connect rac_priv1_nw --ip 192.168.17.171 racnodep2\npodman network connect rac_priv2_nw --ip 192.168.18.171 racnodep2\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for NFS Storage Container\nDESCRIPTION: Series of commands to create and install a custom SELinux module to enable proper permissions for the NFS storage container when SELinux is enabled on the Podman host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/opt\nmake -f /usr/share/selinux/devel/Makefile rac-storage.pp\nsemodule -i rac-storage.pp\nsemodule -l | grep rac-storage\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Domain Docker Image\nDESCRIPTION: Command to build the Docker image for a WebLogic domain. It extends the oracle/weblogic:12.1.3-developer image and requires setting an admin password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/1213-domain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker build -t 1213-domain --build-arg ADMIN_PASSWORD=<define> .\n```\n\n----------------------------------------\n\nTITLE: Running ORDS Docker Container with Configuration Options\nDESCRIPTION: Comprehensive docker run command for starting an ORDS container, including network settings, port mapping, environment variables for database connection, and volume mounting for configuration persistence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n--network=<name of your created network> \\\n-p <host port>:8888 \\\n-e ORACLE_HOST=<Your Oracle DB host (default: localhost)> \\\n-e ORACLE_PORT=<Your Oracle DB port (default: 1521)> \\\n-e ORACLE_SERVICE=<your Oracle DB Service name (default: ORCLPDB1)> \\\n-e ORACLE_PWD=<your database SYS password> \\\n-e ORDS_PWD=<your ORDS password> \\\n-e CONTEXT_ROOT=<http context-root to use (default: ords)> \\\n-v [<host mount point>:]/opt/oracle/ords/config/ords \\\noracle/restdataservices:3.0.12\n```\n\n----------------------------------------\n\nTITLE: Clearing Block Devices for RAC\nDESCRIPTION: Command to clear existing filesystems from block devices before using them with RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/xvde  bs=8k count=100000\n```\n\n----------------------------------------\n\nTITLE: Launching and Configuring RAC Node Containers\nDESCRIPTION: Sets up the RAC node containers with specific resource allocations, stops them, reconfigures their network connections with designated IP addresses, and starts them again. This process ensures proper container initialization.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\nrm -rf /scratch/rac/cluster01/node1/*\nrm -rf /scratch/rac/cluster01/node2/*\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Create Elasticsearch Data Directory\nDESCRIPTION: Commands to create and set permissions for Elasticsearch data directory on host system.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /scratch/wcpdocker/volumes/es\nsudo chown 1000:1000 /scratch/wcpdocker/volumes/es\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Database Container\nDESCRIPTION: This command runs a Docker container with Oracle Database 19.3.0 Enterprise Edition, exposing ports 1521 and 5500.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name oracle-build -p 1521:1521 -p 5500:5500 oracle/database:19.3.0-ee\n```\n\n----------------------------------------\n\nTITLE: Building Apache Docker Image\nDESCRIPTION: Command to build the Apache Docker image with WebLogic Server Proxy Plugin using the provided build script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v <Verion of the image to be built>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Oracle Access Management in Dockerfile\nDESCRIPTION: Defines environment variables for Oracle Access Management setup, including paths, domain settings, and database connection details. These variables are crucial for configuring the OAM environment within the Docker container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV FMW_IDM_JAR=fmw_12.2.1.4.0_idm_generic.jar \\\n    BASE_DIR=/u01 \\\n    ORACLE_HOME=/u01/oracle \\\n    SCRIPT_DIR=/u01/oracle/dockertools \\\n    PROPS_DIR=/u01/oracle/properties \\\n    USER_PROJECTS_DIR=/u01/oracle/user_projects \\\n    DOMAIN_ROOT=/u01/oracle/user_projects/domains \\\n    DOMAIN_NAME=\"${DOMAIN_NAME:-oam_domain}\" \\\n    DOMAIN_HOME=\"${DOMAIN_ROOT}\"/\"${DOMAIN_NAME}\" \\\n    ADMIN_USER=\"${ADMIN_USER:-}\" \\\n    ADMIN_PASSWORD=\"${ADMIN_PASSWORD:-}\" \\\n    CONNECTION_STRING=\"${CONNECTION_STRING:-OamDB:1521/orclpdb1.localdomain}\" \\\n    CONTAINER_DIR=/u01/oracle/user_projects/container \\\n    ADMIN_LISTEN_HOST=\"${ADMIN_LISTEN_HOST:-}\" \\\n    ADMIN_NAME=\"${ADMIN_NAME:-AdminServer}\" \\\n    ADMIN_LISTEN_PORT=\"${ADMIN_LISTEN_PORT:-7001}\" \\\n    DOMAIN_TYPE=\"${DOMAIN_TYPE:-oam}\" \\\n    RCUPREFIX=${RCUPREFIX:-OAM01} \\\n    DB_USER=${DB_USER:-} \\\n    DB_PASSWORD=${DB_PASSWORD:-} \\\n    DB_SCHEMA_PASSWORD=${DB_SCHEMA_PASSWORD:-} \\\n    USER_MEM_ARGS=${USER_MEM_ARGS:-\"-Djava.security.egd=file:/dev/./urandom\"} \\\n    JAVA_OPTIONS=\"${JAVA_OPTIONS} -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" \\\n    PATH=$PATH:/usr/java/default/bin:$ORACLE_HOME/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/dockertools \\\n    HEALTH_SCRIPT_FILE=/u01/oracle/dockertools/get_healthcheck_url.sh\n```\n\n----------------------------------------\n\nTITLE: Attaching Networks to RAC Containers (Bash)\nDESCRIPTION: Configures network connections for both RAC containers, including public and private networks. This ensures proper communication between the RAC nodes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep1\npodman network connect rac_pub1_nw --ip 10.0.20.170 racnodep1\npodman network connect rac_priv1_nw --ip 192.168.17.170  racnodep1\npodman network connect rac_priv2_nw --ip 192.168.18.170  racnodep1\n\npodman network disconnect podman racnodep2\npodman network connect rac_pub1_nw --ip 10.0.20.171 racnodep2\npodman network connect rac_priv1_nw --ip 192.168.17.171  racnodep2\npodman network connect rac_priv2_nw --ip 192.168.18.171  racnodep2\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic MedRec Docker Image\nDESCRIPTION: Command to build the Docker image for WebLogic with MedRec sample. Requires the base weblogic:12.2.1.2-developer image and supplemental package zip file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-medrec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 12212-oradb-medrec .\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate Container with Configuration\nDESCRIPTION: Docker run command template showing all available configuration options including port mapping, environment variables, and volume mounts for running Oracle GoldenGate container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n    --name <container name> \\\n    -p <host port>:443 \\\n    -e OGG_ADMIN=<admin user name> \\\n    -e OGG_ADMIN_PWD=<admin password> \\\n    -e OGG_DEPLOYMENT=<deployment name> \\\n    -v [<host mount point>:]/u01/ogg/scripts \\\n    -v [<host mount point>:]/u02 \\\n    -v [<host mount point>:]/u03 \\\n    -v [<host mount point>:]/etc/nginx/cert \\\n    oracle/goldengate:23.4\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Docker Container\nDESCRIPTION: Docker run command with volume mapping and environment variable configuration for WebLogic domain setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 7001:7001 -p 9002:9002  -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_HOME=/u01/oracle/user_projects/domains/abc_domain -e DOMAIN_NAME=abc_domain oracle/weblogic:12213-p27117282\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Starter Set Script\nDESCRIPTION: Command to execute the starter set SQL script using SQLcl to create test data\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/startersetcontainer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsql sys/starterset@//localhost:1521/STARTERSET as sysdba @starterset.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSL Certificate for NoSQL Proxy\nDESCRIPTION: Commands to copy the SSL certificate from the KVLite container and set it up for use with Node.js applications connecting to the NoSQL Proxy.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp kvlite:/kvroot/proxy/certificate.pem /mylocalpath\nexport NODE_EXTRA_CA_CERTS=/mylocalpath/certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring OUD Replication Server Environment Variables\nDESCRIPTION: Environment configuration file for OUD Replication Server setup containing replication parameters and dsreplication commands.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ninstanceType=Replication\nOUD_INSTANCE_NAME=myoudrs1\nhostname=myoudrs1\nbaseDN=dc=example1,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\nadminUID=admin\nadminPassword=<Password>\nbindDN1=<rootUserDN>\nbindPassword1=<Password>\nbindDN2=<rootUserDN>\nbindPassword2=<Password>\nsourceHost=myoudds1\ndsreplication_1=disable --disableAll --hostname ${sourceHost} --port ${adminConnectorPort}\ndsreplication_2=enable --host1 ${sourceHost} --port1 ${adminConnectorPort} --noReplicationServer1 --host2 ${hostname} --port2 ${adminConnectorPort} --replicationPort2\t${replicationPort} --onlyReplicationServer2 --baseDN ${baseDN}\ndsreplication_3=status --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN} --dataToDisplay compat-view \ndsreplication_4=verify --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node with Block Devices on Podman\nDESCRIPTION: Command to create an additional Oracle RAC node container using Podman with block devices for storage. This includes various configuration parameters and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# podman create -t -i \\\n  --hostname racnode2 \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/xvde:/dev/asm_disk1 \\\n  --device=/dev/zvdf:/dev/asm_disk2 \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_CONTROL \\\n  --cap-add=AUDIT_WRITE \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnode1 \\\n  -e NODE_VIP=172.16.1.161  \\\n  -e VIP_HOSTNAME=racnode2-vip  \\\n  -e PRIV_IP=192.168.17.151  \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151  \\\n  -e PUBLIC_HOSTNAME=racnode2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnode-scan \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnode2 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Coherence-Enabled WebLogic Domain\nDESCRIPTION: This Docker build command creates an image with a WebLogic domain and Coherence cluster. It uses WDT model files and archives to configure the domain, and sets various build arguments for customization.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker build -f Dockerfile --no-cache  \\\n  --build-arg CUSTOM_DOMAIN_NAME=sample-domain1 \\\n  --build-arg WDT_MODEL=cohModel.yaml \\\n  --build-arg WDT_ARCHIVE=archive.zip \\\n  --build-arg WDT_VARIABLE=properties/docker-build/domain.properties  \\\n  --force-rm=true   \\\n   -t coherence-12213-domain-home-in-image-wdt .\n```\n\n----------------------------------------\n\nTITLE: Running WebCenter Portal Managed Server Container in Bash\nDESCRIPTION: Docker command to create and run the WebCenter Portal Managed Server container. It uses the same network and volume as the Admin container and executes a script to configure or start WebCenter Portal.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t --name WCPortalContainer --network=WCPortalNET -p 8888:8888 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartWebCenterPortal.sh\n```\n\n----------------------------------------\n\nTITLE: Running Oracle WebLogic Server Container (Bash)\nDESCRIPTION: This command starts a Docker container running Oracle WebLogic Server. It demonstrates how to set environment variables, map volumes, and expose ports. The command also shows how to provide admin credentials through a properties file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d -p 7001:7001 -p 9002:9002  -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_NAME=docker_domain -e ADMIN_NAME=docker-AdminServer oracle/weblogic:12.2.1.4-developer\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Network for OUD Container Communication\nDESCRIPTION: Creates a Docker bridge network named OUDNet to enable communication between OUD containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge OUDNet\n```\n\n----------------------------------------\n\nTITLE: Configuring Administration Server Environment Variables\nDESCRIPTION: Environment variable template for configuring the Administration Server container. Includes database connection, credentials, and domain configuration settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=<Database container name>:<port#>/<ORACLE_PDB>\nRCUPREFIX=<RCU_Prefix>\nDB_PASSWORD=<database_sys_password>\nDB_SCHEMA_PASSWORD=<soa-infra schema password>\nADMIN_PASSWORD=<admin_password>\nDOMAIN_NAME=soainfra\nDOMAIN_TYPE=<soa/osb/soaosb>\nADMIN_HOST=<Administration Server hostname>\nADMIN_PORT=<Node port number mapping Administration Server container port `7001`>\nPERSISTENCE_STORE=<jdbc | file>\n```\n\n----------------------------------------\n\nTITLE: Running WebCenter Sites Managed Server Container\nDESCRIPTION: Command to run a WebLogic Managed Server container for WebCenter Sites. It demonstrates how to use docker run with network configuration, volume mounting from admin container, and port mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -t --name <container_name> --network=<network_name> --volumes-from <admin_container_name> -p <sites_port>:7002 -p <sites_ssl_port>:9002 --env-file <environment_file> <repo_name:tag_name> /bin/bash -c \"/u01/oracle/sites-container-scripts/startSitesServer.sh; /bin/bash\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Application\nDESCRIPTION: Docker build command that extends the WebLogic domain image and deploys the sample application using build arguments for application name and package\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-deploy-application/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --build-arg APPLICATION_NAME=sample --build-arg APPLICATION_PKG=archive.zip -t 12213-domain-with-app .\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for ORDS Docker Image Build Script\nDESCRIPTION: Output of the help command for the buildContainerImage.sh script, showing available options and usage instructions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[oracle@localhost dockerfiles]$ ./buildContainerImage.sh -h\n\nUsage: buildContainerImage.sh [-i] [-o] [Docker build option]\nBuilds a Docker Image for Oracle Rest Data Services\n\nParameters:\n   -i: ignores the MD5 checksums\n   -o: passes on Docker build option\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014-2017 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Setting up SELinux Contexts\nDESCRIPTION: Commands to configure SELinux context for RAC node directories and software locations when SELinux is enabled on the host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/rac/cluster01/node1\\nrestorecon -v /scratch/rac/cluster01/node1\\nsemanage fcontext -a -t container_file_t /scratch/rac/cluster01/node2\\nrestorecon -v /scratch/rac/cluster01/node2\\nsemanage fcontext -a -t container_file_t /scratch/software/21c/goldimages/LINUX.X64_213000_grid_home.zip\\nrestorecon -v /scratch/software/21c/goldimages/LINUX.X64_213000_grid_home.zip\\nsemanage fcontext -a -t container_file_t /scratch/software/21c/goldimages/LINUX.X64_213000_db_home.zip\\nrestorecon -v /scratch/software/21c/goldimages/LINUX.X64_213000_db_home.zip\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Database Using Connection Manager\nDESCRIPTION: Connection string for connecting to an Oracle RAC database using a connection manager with exposed port 1521 on the host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nsystem/<password>@//<container_host>:1521/<ORACLE_SID>\n```\n\n----------------------------------------\n\nTITLE: Data Volume Setup\nDESCRIPTION: Commands to set up a data volume for WebLogic domain files with proper permissions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/sbin/useradd -u 1000 <userid>\\nmkdir -p /<YOUR_HOST_DIRECTORY_PATH>/wccontent\\nsudo chown 1000:0 /<YOUR_HOST_DIRECTORY_PATH>/wccontent\\nexport DATA_VOLUME=/<YOUR_HOST_DIRECTORY_PATH>/wccontent\n```\n\n----------------------------------------\n\nTITLE: Setting Up DNS Container for Oracle RAC\nDESCRIPTION: Brings up the DNS container, configures network connections with specific IP addresses for public and private networks, and restarts the container to apply the network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${DNS_PRIVATE1_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${DNS_PRIVATE2_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Bridges for RAC Environment\nDESCRIPTION: Commands to create the necessary network bridges with specific subnets for the public and private networks required by Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver=bridge --subnet=172.16.1.0/24 rac_pub1_nw\ndocker network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle RAC Container in Docker\nDESCRIPTION: Command to start an existing Oracle RAC container named 'racnoded2' in Docker.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker start racnoded2\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate with Custom SSL Certificate (Bash)\nDESCRIPTION: Docker run command to start an Oracle GoldenGate Microservices container with a custom SSL certificate. The certificate file must contain the full certificate chain including private key and CA certificates.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name ogg-test \\\n    -e OGG_SCHEMA=ggadmin \\\n    -e OGG_ADMIN=oggadmin \\\n    -v /path/to/certificate.pem:/etc/nginx/ogg.pem \\\n    oracle/goldengate-microservices:12.3.0.1.4\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Tuxedo WS SSL Server Docker Image\nDESCRIPTION: Command to build the Docker container image for Oracle Tuxedo workstation SSL server. Requires oracle/tuxedo:latest base image to be available.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/ws_ssl_svr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/tuxedows_svr .\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Image for Version 21.3.0\nDESCRIPTION: Example command for building an Oracle RAC image specifically for version 21.3.0 using the build script. This creates an image with Oracle Grid Infrastructure and Oracle RAC Database software.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n ./buildContainerImage.sh -v 21.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for WebCenter Portal in Bash\nDESCRIPTION: Creates a user-defined bridge network to enable communication between containers. This network will be used for the WebCenter Portal containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge WCPortalNET\n```\n\n----------------------------------------\n\nTITLE: Identifying Container's Published Port with Docker PS\nDESCRIPTION: Command to list running containers and identify which port on the host is mapped to the container's port 80.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/apache-backend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n# b139cd126fb7        occs/apache-backend   \"/start.sh\"         5 seconds ago       Up 4 minutes        443/tcp, 0.0.0.0:32790->80/tcp   angry_leakey`\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tables in KVLite\nDESCRIPTION: Command to list the available tables in KVLite using the SQL interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti -v secfiles:/shared_conf:ro --link kvlite:store oracle/nosql:ce-sec \\\n  java -jar lib/sql.jar -helper-hosts store:5000 -store kvstore \\\n  -security /shared_conf/user.security\n\n  sql-> show tables\ntables\n  SYS$IndexStatsLease\n  SYS$MRTableAgentStat\n  SYS$MRTableInfo\n  SYS$MRTableInitCheckpoint\n  SYS$PartitionStatsLease\n  SYS$SGAttributesTable\n  SYS$StreamRequest\n  SYS$StreamResponse\n  SYS$TableMetadata\n  SYS$TableStatsIndex\n  SYS$TableStatsPartition\n  SYS$TopologyHistory\n\n  sql-> exit\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container IP\nDESCRIPTION: Command to retrieve the IP address of a running Docker container for accessing the WebLogic Admin Console.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle Database and Querying Custom Table\nDESCRIPTION: This SQL snippet demonstrates connecting to the Oracle Database using the newly created TEST user and querying the PEOPLE table that was created by the custom scripts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/customscripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsql test/test@//localhost:1521/CUSTOMSCRIPTS\n\nSQLcl: Release 4.2.0 Production on Mon Jul 10 08:31:37 2017\n\nCopyright (c) 1982, 2017, Oracle.  All rights reserved.\n\nConnected to:\nOracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n\n\nSQL> SELECT name FROM people;\n\nNAME\n----------\nLarry\nBruno\nGerald\n\nSQL> exit\n\nDisconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n```\n\n----------------------------------------\n\nTITLE: Assigning Networks to First RAC Container\nDESCRIPTION: Commands to configure networking for the first RAC container by disconnecting from default bridge network and connecting to custom RAC public and private networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect bridge racnoded1\ndocker network connect rac_pub1_nw --ip 172.16.1.100 racnoded1\ndocker network connect rac_priv1_nw --ip 192.168.17.100  racnoded1\n```\n\n----------------------------------------\n\nTITLE: Starting the First Oracle RAC Container\nDESCRIPTION: Command to start the first Oracle RAC container after creation and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# docker start racnode1\n```\n\n----------------------------------------\n\nTITLE: Running SQL Shell from Remote Host\nDESCRIPTION: Command to run the Oracle NoSQL SQL Shell from a remote host to access a containerized KVLite instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/sql.jar -helper-hosts $HOSTNAME:5000 -store kvstore\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tuxedo Container Image\nDESCRIPTION: This command starts a Docker container based on the Oracle Tuxedo 22.1.0.0.0 image. It runs the container in detached mode and mounts a local directory to store data inside the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v \"${LOCAL_DIR}:/u01/oracle/user_projects\" oracle/tuxedo:22.1.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Docker Network Creation Command\nDESCRIPTION: Creates a Docker bridge network named InfraNET for the infrastructure server\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge InfraNET\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database Chart with Helm 3.x\nDESCRIPTION: Command to install Oracle Database using Helm 3.x with release name db19c.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install db19c oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container with Custom Configuration in Bash\nDESCRIPTION: Command to run an Oracle database container with custom configuration parameters defined in an env.txt file. It sets up network, ports, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name InfraDB --network=InfraNET -p 1521:1521 -p 5500:5500 --env-file env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Container Image Using Build Script\nDESCRIPTION: Generic command for building an Oracle RAC image using the provided build script. Users need to specify the software version they want to build.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n ./buildContainerImage.sh -v <Software Version>\n```\n\n----------------------------------------\n\nTITLE: Verifying OIG Docker Image Build\nDESCRIPTION: Command to verify that the OIG Docker image has been successfully built and is available in the local repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Building Oracle WebLogic Server Docker Image (Bash)\nDESCRIPTION: This script builds a Docker image for Oracle WebLogic Server. It accepts parameters for version, distribution type, and build options. The script performs MD5 checks and simplifies the build process for beginners.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version] [-d | -g | -m] [-s]\nBuilds a Docker Image for Oracle WebLogic Server.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.4\n   -d: creates image based on 'developer' distribution\n   -g: creates image based on 'generic' distribution\n   -m: creates image based on 'slim' distribution\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n\n* select one distribution only: -d, -g, or -m\n\nLICENSE UPL 1.0\n\nCopyright (c) 2014-2019 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for WLS Domain\nDESCRIPTION: Docker build command to create a WebLogic Server domain image using WDT model, archive, and variable files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image-wdt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build \\\n      --build-arg WDT_MODEL=simple-topology.yaml \\\n      --build-arg WDT_ARCHIVE=archive.zip \\\n      --build-arg WDT_VARIABLE=properties/docker-build/domain.properties \\\n      --force-rm=true \\\n      --no-cache=true \\\n      -t 12213-domain-home-in-image-wdt .\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Oracle RAC Block Device Setup\nDESCRIPTION: Sets up environment variables for adding a node to an Oracle RAC cluster using block devices. Includes network configuration, node naming, and ASM disk settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_HOST_NAME=rac-dnsserver\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_pzriv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport INSTALL_NODE=racnoded1\nexport SCAN_NAME=\"racnodedc1-scan\"\nexport SCAN_IP=172.16.1.230\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport RACNODE2_CONTAINER_NAME=racnoded2\nexport RACNODE2_HOST_NAME=racnoded2\nexport RACNODE_IMAGE_NAME=\"oracle/database-rac:19.3.0\"\nexport RACNODE2_NODE_VIP=172.16.1.131\nexport RACNODE2_VIP_HOSTNAME=\"racnoded2-vip\"\nexport RACNODE2_PRIV_IP=192.168.17.101\nexport RACNODE2_PRIV_HOSTNAME=\"racnoded2-priv\"\nexport RACNODE2_PUBLIC_IP=172.16.1.101\nexport RACNODE2_PUBLIC_HOSTNAME=\"racnoded2\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Files with OCI CLI Container\nDESCRIPTION: Example of mounting a local directory to upload files to OCI Object Storage using the CLI container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  -v \"$HOME/.oci:/oracle/.oci\" \\\n  -v \"$HOME/scratch:/oracle/scratch\" \\\n  ghcr.io/oracle/oci-cli os object bulk-upload -ns <namespace> -bn <bucket name> --src-dir /oracle/scratch/\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby on Rails in Oracle Linux Docker Image\nDESCRIPTION: This snippet demonstrates how to install Ruby on Rails in an Oracle Linux Docker image. It uses npm to install yarn globally and then uses gem to install Rails.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleLinuxDevelopers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN npm install -g yarn && \\\n    gem install rails\n```\n\n----------------------------------------\n\nTITLE: Checking RAC Storage Container Logs\nDESCRIPTION: Docker command to check the logs of the RAC storage container to verify successful creation and configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f racnode-storage\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for RAC\nDESCRIPTION: Creates required podman networks for public and private interconnects with specified subnets\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Bridge Networks for Oracle RAC\nDESCRIPTION: Commands to create Podman Bridge networks for public and private communications in Oracle RAC on a single host. These networks are essential for inter-container communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=10.0.20.0/24 rac_pub1_nw\npodman network create --driver=bridge --subnet=192.168.17.0/24 rac_priv1_nw --disable-dns --internal\npodman network create --driver=bridge --subnet=192.168.18.0/24 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Changing Admin Account Passwords in Oracle Database Container\nDESCRIPTION: This command executes a script inside the Docker container to change the password for admin accounts to 'unplug'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/unplugpdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker exec unplugpdb ./setPassword.sh unplug\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Database Container\nDESCRIPTION: Command to run the Oracle Database container with specified network, ports and environment configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name <container_name> --network=<network_name> -p <database_listener_port>:1521 -p <enterprise_manager_port>:5500 --env-file <environment_file> <repo_name:tag_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name WCSites12212Database --network=WCSitesNet -p 1521:1521 -p 5500:5500 --env-file ./db.env.list database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Create Persistent Storage Directory\nDESCRIPTION: Commands to create and prepare the host directory for persistent storage\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf /oracle-management-agent\nmkdir -p /oracle-management-agent\n```\n\n----------------------------------------\n\nTITLE: Connecting Networks to Oracle RAC Container on Podman\nDESCRIPTION: Commands to disconnect the default Podman network and connect custom public and private networks to the Oracle RAC container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep2\npodman network connect rac_pub1_nw --ip 172.16.1.171 racnodep2\npodman network connect rac_priv1_nw --ip 192.168.17.171 racnodep2\n```\n\n----------------------------------------\n\nTITLE: Checking Container User Permissions\nDESCRIPTION: Commands to verify the user context and set appropriate permissions for the external storage directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_runtime/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -ti --rm --entrypoint=\"/bin/bash\" oracle/tuxedoartrt -c \"whoami && id\" tuxedoartrt\noracle\nuid=1000(oracle) gid=1000(oracle) groups=1000(oracle)\n$ sudo chown -R 1000 ${LOCAL_DIR}\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Unified Directory and OUDSM (Bash)\nDESCRIPTION: This script installs Oracle Unified Directory 11g, 12c, and 12c OUDSM. The installation type is defined by the OUD_TYPE environment variable. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n10_setup_oud\n```\n\n----------------------------------------\n\nTITLE: Monitoring Oracle RAC Container Logs\nDESCRIPTION: Command to follow the logs of the Oracle RAC container to monitor the installation and configuration progress.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# docker logs -f racnode1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Password Management\nDESCRIPTION: Creates secret volume and encryption key for managing grid, oracle, and database user passwords.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/.secrets/\nopenssl rand -out /opt/.secrets/pwd.key -hex 64\n```\n\n----------------------------------------\n\nTITLE: Running WebCenter Portal Admin Container in Bash\nDESCRIPTION: Docker command to create and run the WebCenter Portal Administration Server container. It mounts a volume, sets up networking, and uses the environment file for configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t --name WCPAdminContainer --network=WCPortalNET -p 7001:7001 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Infrastructure Server in Bash\nDESCRIPTION: Command to create a Docker bridge network named InfraNET for the infrastructure server to run on.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker network create -d bridge InfraNET\n```\n\n----------------------------------------\n\nTITLE: Viewing Usage Instructions for dockerBuild.sh Script\nDESCRIPTION: Demonstrates how to run the dockerBuild.sh script without arguments to view its usage instructions. This script is used to automate the process of building Oracle GoldenGate Docker images.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dockerBuild.sh\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for SOA Managed Server\nDESCRIPTION: This snippet demonstrates the Docker run command to start a SOA Managed Server container. It specifies network settings, port mapping, volume sharing, and environment file usage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t  --name soams --network=SOANet -p 8001:8001  --volumes-from soaas  --env-file ./soaserver.env.list oracle/soasuite:12.2.1.3 \"/u01/oracle/container-scripts/startMS.sh\"\n```\n\n----------------------------------------\n\nTITLE: Changing Base Image for Oracle GoldenGate Build\nDESCRIPTION: Command demonstrating how to specify a custom base image when building the Oracle GoldenGate container using the BUILD_IMAGE argument.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/21c/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker build --tag=oracle/goldengate:21.3.0.0.0 \\\n             --build-arg BASE_IMAGE=\"localregistry/oraclelinux:8\" \\\n             --build-arg INSTALLER=213000_fbo_ggs_Linux_x64_Oracle_services_shiphome.zip .\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Docker Image\nDESCRIPTION: Builds a Docker image for WebLogic with the domain, Admin Server, Data Source, and deployed application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12212-oradb-wlsstore .\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Oracle GoldenGate 21.3 Microservices\nDESCRIPTION: This Docker Compose configuration file is used to build and run the Oracle GoldenGate 21.3 Microservices Edition Docker image. It defines the services, network settings, and other parameters required for containerized deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/21c/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Setting Up User and Directories for Docker Volumes\nDESCRIPTION: Bash commands to create a user, directories, and set permissions for Docker volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /usr/sbin/useradd -u 1000 -g 1000 <new_userid>\n$ mkdir -p /scratch/WCSitesVolume/WCSites /scratch/WCSitesVolume/WCSitesShared\n$ sudo chown 1000:1000 /scratch/WCSitesVolume/WCSites /scratch/WCSitesVolume/WCSitesShared\n```\n\n----------------------------------------\n\nTITLE: Starting Administration Server Container in Bash\nDESCRIPTION: Command to run a Docker container for the Administration Server, mapping ports, setting up network, and mounting volumes for properties and domain data.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d -p 9001:7001 -p 9002:9002 --name ${adminhost} --network=InfraNET -v ${scriptDir}/properties:/u01/oracle/properties -v ${DOMAIN_HOST_VOLUME}:/u01/oracle/user_projects/domains ${ENV_ARG} oracle/fmw-infrastructure:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Verifying Oracle SOA Suite Docker Image Creation\nDESCRIPTION: Command to verify that the Oracle SOA Suite Docker image has been successfully created and is available in the local Docker repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images | grep \"soa\"\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Development Mode Container\nDESCRIPTION: Docker command to run a WebLogic container in development mode with configurable domain parameters. Maps port 7001 and mounts a domain properties file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 7001:7001 -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e DOMAIN_NAME=docker_domain -e ADMIN_NAME=docker-AdminServer oracle/weblogic:14.1.2.0-17\n```\n\n----------------------------------------\n\nTITLE: Deploying Connection Manager with Custom Configuration\nDESCRIPTION: Command to create and run the Oracle Connection Manager container with a custom cman.ora configuration file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/OracleConnectionManager/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman run -d \\\n    --hostname racnodepc1-cman \\\n    --dns-search=example.info \\\n    --dns 10.0.20.25 \\\n    --network=rac_pub1_nw \\\n    --ip=10.0.20.166 \\\n    --cap-add=AUDIT_WRITE \\\n    --cap-add=NET_RAW \\\n    -v /opt/containers/cman.ora:/var/tmp/cman.ora \\\n    -e USER_CMAN_FILE=/var/tmp/cman.ora \\\n    -e DOMAIN=example.info \\\n    -e PUBLIC_IP=10.0.20.166 \\\n    -e DNS_SERVER=10.0.20.25 \\\n    -e PUBLIC_HOSTNAME=racnodepc1-cman \\\n    --privileged=false \\\n    -p 1521:1521 \\\n    --name racnodepc1-cman \\\n    oracle/client-cman:23.5.0\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Oracle RAC Response Files\nDESCRIPTION: Sets the appropriate SELinux context on the response files needed for Oracle RAC setup to allow container access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Checking Docker User Permissions\nDESCRIPTION: Command to check the user and group ID of the Oracle user in the Docker container. This information is used to set correct permissions on the external storage directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --rm --entrypoint=\"/bin/bash\" oracle/tuxedoall -c \"whoami && id\" tuxedoall\n```\n\n----------------------------------------\n\nTITLE: Native PL/SQL Compilation (SQL)\nDESCRIPTION: Example of enabling native compilation for PL/SQL, which requires exec rights on /dev/shm in the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/FAQ.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter session set plsql_code_type='NATIVE';\n\ncreate or replace procedure test as\nbegin\n   null;\nend;\n/\n```\n\n----------------------------------------\n\nTITLE: Verifying Built Docker Image\nDESCRIPTION: This command lists Docker images, allowing you to verify that the WebLogic image was built successfully.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Ipvlan Networks for Oracle RAC\nDESCRIPTION: Commands to create Podman Ipvlan networks for public and private communications in Oracle RAC on multiple hosts. These networks allow containers to share the MAC address of the host interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d ipvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\npodman network create -d ipvlan --subnet=192.168.17.0/24 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d ipvlan --subnet=192.168.18.0/24 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle NoSQL Community Edition Docker Image\nDESCRIPTION: Commands to pull the Oracle NoSQL Community Edition image from GitHub Container Registry and tag it for local use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/oracle/nosql:latest-ce\ndocker tag ghcr.io/oracle/nosql:latest-ce oracle/nosql:ce\n```\n\n----------------------------------------\n\nTITLE: Generating Encrypted Password Files\nDESCRIPTION: Series of commands to generate and encrypt password files using OpenSSL for secure password management in Oracle RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/.secrets\nopenssl genrsa -out key.pem\nopenssl rsa -in key.pem -out key.pub -pubout\nopenssl pkeyutl -in pwdfile.txt -out pwdfile.enc -pubin -inkey key.pub -encrypt\nrm -rf /opt/.secrets/pwdfile.txt\n```\n\n----------------------------------------\n\nTITLE: Building Oracle GoldenGate Docker Image with Custom Tag\nDESCRIPTION: Shows how to use the dockerBuild.sh script to build an Oracle GoldenGate Docker image with a custom tag. This example creates a Microservices image named 'devops/goldengate-microservices:production'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dockerBuild.sh ~/Downloads/123014_fbo_ggs_Linux_x64_services_shiphome.zip --tag devops/goldengate-microservices:production --quiet\n```\n\n----------------------------------------\n\nTITLE: Running SQL Plus Container to Change Database Password in Bash\nDESCRIPTION: Command to run an Oracle Instant Client container with SQL Plus to change the database password. It connects to the InfraDB database using the default password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -ti --network=InfraNET --rm store/oracle/database-instantclient:12.2.0.1 sqlplus sys/Oradoc_db1@InfraDB:1521/InfraDB.us.oracle.com AS SYSDBA\n```\n\n----------------------------------------\n\nTITLE: Creating Secret Directory\nDESCRIPTION: Command to create directory for storing password secrets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/.secrets/\n```\n\n----------------------------------------\n\nTITLE: Referencing WebCenter Sites 12.2.1.4 Setup in Markdown\nDESCRIPTION: A Markdown link pointing to the setup instructions for Oracle WebCenter Sites version 12.2.1.4.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- Refer [Oracle WebCenter Sites 12.2.1.4.0](dockerfiles/12.2.1.4) for detail set up.\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Database Pre-built Extension Image\nDESCRIPTION: Command for building the pre-built database extension image. It uses the buildExtensions.sh script with various configurable parameters like ORACLE_SID, ENABLE_ARCHIVELOG, ENABLE_FORCE_LOGGING, and ORACLE_PWD.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/prebuiltdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildExtensions.sh -b <base-image> -t <target-image> -x 'prebuiltdb' -o '--build-arg ORACLE_SID=<Database SID> --build-arg ENABLE_ARCHIVELOG=true --build-arg ENABLE_FORCE_LOGGING=true --build-arg ORACLE_PWD=<database-password>'\n```\n\n----------------------------------------\n\nTITLE: Running Management Agent Container with Docker CLI in Shell\nDESCRIPTION: Starts the Management Agent container using Docker CLI with various parameters for configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> docker run -d --name mgmtagent-container --hostname mgmtagent1 -v mgmtagent-volume:/opt/oracle:rw --restart unless-stopped oracle/mgmtagent-container:latest\n```\n\n----------------------------------------\n\nTITLE: Connecting Networks to DNS Container on Docker Host\nDESCRIPTION: Commands to disconnect the default bridge network and connect the DNS container to the previously created RAC networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect bridge rac-dnsserver\ndocker network connect rac_pub1_nw --ip 172.16.1.25 rac-dnsserver\ndocker network connect rac_priv1_nw --ip 192.168.17.25 rac-dnsserver\ndocker start rac-dnsserver\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Database Docker Container for PDB Unplugging\nDESCRIPTION: This command starts a Docker container with Oracle Database 12.2.0.1-ee, setting up environment variables and volume mapping for the PDB unplugging process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/unplugpdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --name unplugpdb \\\n-p 1521:1521 -p 5500:5500 \\\n-e ORACLE_SID=DEVOPSCDB \\\n-e ORACLE_PDB=MYPDB \\\n-v /home/oracle/oradata:/opt/oracle/oradata \\\noracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Creating WebCenter ADFUI Container\nDESCRIPTION: Docker command to create and run the WebCenter ADFUI Managed Server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name WCCADFContainer --network=WCContentNET -p 16225:16225 --volumes-from WCCAdminContainer --env-file <PATH_TO_ENV_FILE>/webcenter.env.list oracle/wccontent:12.2.1.4 configureOrStartWCCADF.sh\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Command for WebCenter Sites Managed Container\nDESCRIPTION: Sample command demonstrating how to run a WebCenter Sites Managed container with specific port mappings, network configuration, and environment settings using the oracle/wcsites image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -t --name WCSitesManagedContainer --network=WCSitesNet --volumes-from WCSitesAdminContainer -p 7002:7002 -p 9002:9002 --env-file ./wcsitesserver.env.list oracle/wcsites:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Cipher Suites for Admin Server\nDESCRIPTION: Configures secure TLS cipher suites for the Administration Server using oggServiceConfig utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\noggServiceConfig http://localhost:11000 Local adminsrvr \\\n                 --user oggadmin --password oggadmin-A1 \\\n                 --path /securityDetails/network/inbound/cipherSuites \\\n                 --value '[ \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n                            \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\n                            \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n                            \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\n                            \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\" ]'\n```\n\n----------------------------------------\n\nTITLE: Pull Oracle SOA Suite Image\nDESCRIPTION: Command to pull the Oracle SOA Suite image from the container registry\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull container-registry.oracle.com/middleware/soasuite:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Starting Storage Container for Oracle RAC\nDESCRIPTION: Brings up the storage container that provides NFS service for RAC shared storage. Uses systemd in the container and monitors the setup log.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always\" up -d ${STORAGE_CONTAINER_NAME}\npodman-compose exec ${STORAGE_CONTAINER_NAME} tail -f /tmp/storage_setup.log\n```\n\n----------------------------------------\n\nTITLE: Creating RAC Container with Block Devices on Podman\nDESCRIPTION: This command creates an Oracle RAC container on Podman using block devices for storage. It configures various network and system parameters required for Oracle RAC, including hostnames, IPs, ASM devices, and security settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnode1 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/xvde:/dev/asm_disk1  \\\n  --device=/dev/xvdf:/dev/asm_disk2 \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.160 \\\n  -e VIP_HOSTNAME=racnode1-vip  \\\n  -e PRIV_IP=192.168.17.150 \\\n  -e PRIV_HOSTNAME=racnode1-priv \\\n  -e PUBLIC_IP=172.16.1.150 \\\n  -e PUBLIC_HOSTNAME=racnode1  \\\n  -e SCAN_NAME=racnode-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e CMAN_HOSTNAME=racnode-cman1 \\\n  -e CMAN_IP=172.16.1.15 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --restart=always \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnode1 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Database Container Launch Command\nDESCRIPTION: Docker command to run Oracle database container with custom configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name InfraDB --network=InfraNET -p 1521:1521 -p 5500:5500 --env-file env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Running OpenJDK Build Script\nDESCRIPTION: Alternative command to build the Oracle OpenJDK Docker image using a pre-configured build script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleOpenJDK/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash build.sh\n```\n\n----------------------------------------\n\nTITLE: Inspecting WebLogic Container IP Address\nDESCRIPTION: Docker command to retrieve the internal IP address of the WebLogic Admin server container for Remote Console connection.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.2.0/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Deploying Oracle Connection Manager Container\nDESCRIPTION: Command to create and run the Oracle Connection Manager container with standard configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/OracleConnectionManager/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman run -d \\\n  --hostname racnodepc1-cman \\\n  --dns-search=example.info \\\n  --dns 10.0.20.25 \\\n  --network=rac_pub1_nw \\\n  --ip=10.0.20.166 \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=NET_RAW \\\n  -e DOMAIN=example.info \\\n  -e PUBLIC_IP=10.0.20.166 \\\n  -e DNS_SERVER=10.0.20.25 \\\n  -e PUBLIC_HOSTNAME=racnodepc1-cman \\\n  -e DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\" \\\n  --privileged=false \\\n  -p 1521:1521 \\\n  --name racnodepc1-cman \\\n  oracle/client-cman:23.5.0\n```\n\n----------------------------------------\n\nTITLE: Setting up environment for Oracle SOA Suite in Bash\nDESCRIPTION: Commands to navigate to the correct directory and source the environment variables file for Oracle SOA Suite setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# cd OracleSOASuite/samples\n# source ../setenv.sh\n```\n\n----------------------------------------\n\nTITLE: Cleaning User Defined Response Files\nDESCRIPTION: Command to remove user-defined response files used in the RAC container setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CLEANUP.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /scratch/common_scripts/podman/rac/*\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database Chart with Helm 2.x\nDESCRIPTION: Command to install Oracle Database using Helm 2.x with release name db19c.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name db19c oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Starting WebLogic Managed Server with Coherence Proxy in Docker\nDESCRIPTION: This command starts a Managed Server container, linking it to the admin server and exposing ports for WebLogic (8001) and Coherence proxy (9000).\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d --name managed-server-1 --link wlsadmin:wlsadmin  -p 8001:8001 -p 9000:9000 -v $COH_SAMPLE_DIR/properties/docker-run:/u01/oracle/properties -e MANAGED_SERVER_NAME=managed-server-1 coherence-12213-domain-home-in-image-wdt startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Extracting and Copying OAM Installation Files\nDESCRIPTION: Commands to unzip the downloaded OAM installation package and copy the JAR file to the appropriate Docker build location. The file must be renamed to a specific filename expected by the Dockerfile.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip fmw_12.2.1.4.0_idm_Disk1_1of1.zip\n$ cp fmw_12.2.1.4.0_idm.jar <work directory>/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/fmw_12.2.1.4.0_idm_generic.jar\n```\n\n----------------------------------------\n\nTITLE: Running Veridata Managed Server Container\nDESCRIPTION: Docker command to run the Veridata Managed Server container with network and volume sharing from Admin Server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleVeridata/12.2.1.4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name ${VERIDATA_CONTAINER_NAME} -it --network=VdtBridge -p 7003:7003 --env-file vdt.env --volumes-from ${adminhost} oracle/oggvdt:12.2.1.4.0 startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy Backend Template with confd\nDESCRIPTION: HAProxy configuration template showing how to set up dynamic backend servers using confd templating. This snippet demonstrates the backend configuration that will be populated with server entries based on key-value store data.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/haproxy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nbackend nginx_80\n    balance roundrobin\n    mode http\n    option httpchk HEAD / HTTP/1.1\\r\\nHost:localhost\n\n    {{range gets \"/apps/myapp/containers/*\"}}\n    server {{base .Key}} {{.Value}} check{{end}}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Oracle RAC Container Resources with Podman\nDESCRIPTION: Commands to remove containers, networks and volumes related to Oracle RAC setup using Podman. Includes cleanup of DNS server, storage nodes, RAC nodes, networks and volumes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CLEANUP.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman inspect rac-dnsserver &> /dev/null && podman rm -f rac-dnsserver\npodman inspect racnode-storage &> /dev/null && podman rm -f racnode-storage\npodman inspect racnodep1 &> /dev/null && podman rm -f racnodep1\npodman inspect racnodep2 &> /dev/null && podman rm -f racnodep2\npodman inspect racnodepc1-cman &> /dev/null && podman rm -f racnodepc1-cman\npodman network inspect rac_pub1_nw &> /dev/null && podman network rm rac_pub1_nw \npodman network inspect rac_priv1_nw &> /dev/null && podman network rm rac_priv1_nw \npodman network inspect rac_priv2_nw &> /dev/null && podman network rm rac_priv2_nw\npodman volume inspect racstorage &> /dev/null && podman volume rm racstorage\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Host File for RAC Containers in Bash\nDESCRIPTION: Creates a shared host file that will be used by all RAC containers for name resolution.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# mkdir /opt/containers\n# touch /opt/containers/rac_host_file\n```\n\n----------------------------------------\n\nTITLE: Starting First RAC Container\nDESCRIPTION: Commands to start the first RAC container and monitor its logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker start racnoded1\ndocker logs -f racnoded1\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Logs\nDESCRIPTION: Command to view detailed logs of the Oracle HTTP Server container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/samples/12214-patch/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs --details <Container id>\n```\n\n----------------------------------------\n\nTITLE: Tuxedo Components Directory Structure\nDESCRIPTION: Markdown formatted listing of Tuxedo components available as Docker images, including core binaries, monitoring tools, performance packs, and specialized modules.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Tuxedo Core](./core)                                  `Tuxedo core including server binaries, client libraries`\n* [TSAM Plus](./tsam)                                    `Tuxedo System and Applications Monitor Plus`\n* [Tuxedo Performance Pack](./performance_pack)          `Tuxedo Performance Pack and a sample application`\n* [Tuxedo Message Queue](./tuxedo_message_q)             `Tuxedo Message Queue`\n* [Tuxedo Full](./tuxedo_full)                           `Tuxedo Full Set`\n* [Tuxedo Jolt](./jolt)                                  `Tuxedo Jolt Client`\n* [Tuxedo SALT and TMA](./salt_tma)                      `Tuxedo SALT and TMA`\n* [Tuxedo ART Runtime](./art_runtime)                    `Tuxedo Application Rehosting Runtime`\n* [Tuxedo ART WB&Test Manager](./art_workbench_tm)       `Tuxedo Application Rehosting Workbench & TestManager`\n* [Tuxedo ART SALT and TMA](./art_salt_tma)              `Tuxedo ART SALT and TMA`\n```\n\n----------------------------------------\n\nTITLE: Creating OUD Proxy Server Docker Container\nDESCRIPTION: Docker run command to create and start an OUD Proxy Server container with network configuration and environment file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --network=OUDNet \\\n--name=myoudp \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env-file ~/oud-proxy.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Pulling and Viewing OCI CLI Docker Image\nDESCRIPTION: Commands to pull the OCI CLI container image from GitHub Container Registry and view it in the local Docker registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull ghcr.io/oracle/oci-cli:latest\n$ docker images\nREPOSITORY                              TAG               IMAGE ID       CREATED        SIZE\nghcr.io/oracle/oci-cli                  latest            387639e80a9a   3 days ago     711MB\n```\n\n----------------------------------------\n\nTITLE: Building OUD Docker Image using COPY method\nDESCRIPTION: Docker build command for creating OUD image using local files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd OracleUnifiedDirectory/dockerfiles/12.2.1.3\ndocker build -t oracle/oud:12.2.1.3 .\n```\n\n----------------------------------------\n\nTITLE: Running FMW Infrastructure Managed Server Container\nDESCRIPTION: Docker run command to start a Managed Server container. Includes network configuration, volume mounts, and environment variable setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 9802:8002 --network=InfraNET -v ${scriptDir}/properties:/u01/oracle/properties ${ENV_ARG} --volumes-from ${adminhost} --name ${managedname}  container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3 startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container as Root for R Installation\nDESCRIPTION: Docker command to execute a bash shell as root user in the Business Intelligence container for R installation purposes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it -u root bi bash\n```\n\n----------------------------------------\n\nTITLE: Joining Docker Swarm as a Worker Node\nDESCRIPTION: This command allows a worker node to join the Docker Swarm for multinode deployment of Oracle SOA Suite containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm join --token SWMTKN-1-1r8ap4o4fl5vbt3rtfanh7tr42t8h8lvempi1mmri745bcketd-24av3jhw8etrlf7m1toc8ek9j 100.111.150.225:2377\n```\n\n----------------------------------------\n\nTITLE: Running Oracle BI Container with OBI Server Access\nDESCRIPTION: Extended Docker run command that exposes the OBI Server component port (9514) for access by admin tools.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it -p 9500:9500 -p 9502:9502 -p 9514:9514 -e ADMIN_USERNAME=weblogic -e ADMIN_PASSWORD=<admin_password> -e DB_HOST=database -e DB_PORT=1521 -e DB_SERVICE=ORCLPDB1 -e DB_USERNAME=sys -e DB_PASSWORD=<db_password> -e SCHEMA_PREFIX=DEV -e SCHEMA_PASSWORD=<schema_password> oracle/biplatform:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Account Inquiry Request\nDESCRIPTION: cURL command to send an INQUIRY request for checking account balance, with example JSON response showing account details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-type:application/json\" http://${TUX_HOSTNAME}:5955/INQUIRY -d '{\"ACCOUNT_ID\":10000}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ACCOUNT_ID\":   10000,\n        \"FORMNAM\":      \"CBALANCE\",\n        \"SBALANCE\":     \"$1456.00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Environment variables configuration for Oracle database container setup\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman RAC Cgroup Service for Oracle RAC\nDESCRIPTION: These commands reload systemd configuration, enable the Podman RAC cgroup service and Podman restart service, and start the cgroup service to ensure proper real-time CPU budgeting for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable Podman-rac-cgroup.service\nsystemctl enable Podman-restart.service \nsystemctl start Podman-rac-cgroup.service\n```\n\n----------------------------------------\n\nTITLE: Building with Custom Number of Managed Servers\nDESCRIPTION: Command to build the image with a specific number of managed servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12212-msiserver --build-arg number_of_ms=15 .\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for Block Device RAC Environment\nDESCRIPTION: Commands to clean up RAC environment using block devices, including container removal, disk cleanup, and network removal.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npodman rm -f racnodep1 racnodep2 rac-dnsserver racnodepc1-cman \ndd if=/dev/zero of=/dev/oracleoci/oraclevde  bs=8k count=10000 status=progress && dd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000 status=progress\nrm -rf /opt/containers /opt/.secrets\npodman network rm -f rac_pub1_nw rac_zriv1_nw\npodman rmi -f localhost/oracle/rac-dnsserver:latest localhost/oracle/database-rac:21.3.0-21.13.0 localhost/oracle/client-cman:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Checking port availability for Oracle database in Bash\nDESCRIPTION: Command to check if port 1521 is available for use by the Oracle database container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -an | grep 1521\n```\n\n----------------------------------------\n\nTITLE: Viewing MSI Server Logs\nDESCRIPTION: Command to examine the container logs for the MSI server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs msi-server\n```\n\n----------------------------------------\n\nTITLE: Building Oracle FMW Infrastructure Docker Image\nDESCRIPTION: Commands to build the Oracle Fusion Middleware Infrastructure image which is required for the Business Intelligence image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OracleFMWInfrastructure/dockerfiles\n$ ./buildDockerImage.sh -v 12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Macvlan Networks for Multi-host RAC\nDESCRIPTION: Commands to create macvlan networks for Oracle RAC deployment across multiple hosts, specifying subnets and gateways for both public and private networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan --subnet=172.16.1.0/24 --gateway=172.16.1.1 -o parent=eth0 rac_pub1_nw\ndocker network create -d macvlan --subnet=192.168.17.0/24 --gateway=192.168.17.1 -o parent=eth1 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Oracle RAC Container Directories\nDESCRIPTION: Commands to set the appropriate SELinux context for directories and files used by Oracle RAC containers to ensure proper access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/rac/cluster01/node1\nrestorecon -v /scratch/rac/cluster01/node1\nsemanage fcontext -a -t container_file_t /scratch/rac/cluster01/node2\nrestorecon -v /scratch/rac/cluster01/node2\nsemanage fcontext -a -t container_file_t /scratch/software/21c/goldimages/LINUX.X64_213000_grid_home.zip\nrestorecon -v /scratch/software/21c/goldimages/LINUX.X64_213000_grid_home.zip\nsemanage fcontext -a -t container_file_t /scratch/software/21c/goldimages/LINUX.X64_213000_db_home.zip\nrestorecon -v /scratch/software/21c/goldimages/LINUX.X64_213000_db_home.zip\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for WebLogic and Database\nDESCRIPTION: Creates a Docker bridge network named SampleNET for communication between WebLogic and Database containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge SampleNET\n```\n\n----------------------------------------\n\nTITLE: Checking KVLite Version with Command Line Interface\nDESCRIPTION: Command to check the version of Oracle NoSQL Database KVLite using the command line interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm -ti --link kvlite:store oracle/nosql:ce  java -Xmx64m -Xms64m -jar lib/kvstore.jar version\n24.4.9 2024-11-21 17:06:06 UTC  Build id: 95fa28ea4441 Edition: Community\n```\n\n----------------------------------------\n\nTITLE: Validating OUD Replication Status\nDESCRIPTION: Command to check the replication status using dsreplication command. Connects to the replication server and displays status of replication configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it myoudrs1 \\\n/u01/oracle/user_projects/myoudrs1/OUD/bin/dsreplication status \\\n--trustAll \\\n--hostname myoudrs1 \\\n--port 1444 \\\n--adminUID admin \\\n--dataToDisplay compat-view \\\n--dataToDisplay rs-connections\n```\n\n----------------------------------------\n\nTITLE: Displaying Stack YAML Configuration\nDESCRIPTION: This command displays the contents of the stack.yml file, which defines the configuration for the HAProxy and NGINX load balancing stack. The output can be copied and pasted into the Container Cloud Service advanced editor.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat stack.yml\n```\n\n----------------------------------------\n\nTITLE: Running Oracle True Cache Container\nDESCRIPTION: Podman command to run Oracle True Cache container with connection to primary database\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npodman run -td --name tru-cc-free \\\n--hostname tru-cc-free \\\n--net=tc_net \\\n--ip <TRU_CC_FREE_IP> \\\n-p :1521 \\\n--secret=oracle_pwd \\\n-e TRUE_CACHE=true \\\n-e PRIMARY_DB_PWD_FILE=/var/tmp/orapwFREE \\\n-e PRIMARY_DB_CONN_STR=<PRI_DB_FREE_IP>:1521/FREE \\\n-v [<host mount point>:]/opt/oracle/oradata \\\noracle/database:23.6.0-free\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Container\nDESCRIPTION: Commands to set up and run the Oracle database container for hosting RCU schemas. Includes environment variable configuration and docker run command.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDB_SID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n\n$ docker run -d --name InfraDB --network=InfraNET -p 1521:1521 -p 5500:5500 --env-file env.txt -it --shm-size=\"8g\" container-registry.oracle.com/database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Database Pre-built Extension with Memory Allocation\nDESCRIPTION: Docker build command to create the pre-built database image with specific memory allocation. It uses DOCKER_BUILDKIT=0 to support the --memory option and sets AUTO_MEM_CALCULATION to true.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/prebuiltdb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_BUILDKIT=0 docker build --memory=4096m --build-arg AUTO_MEM_CALCULATION=true\n```\n\n----------------------------------------\n\nTITLE: Creating WebCenter Capture Container\nDESCRIPTION: Docker command to create and run the WebCenter Capture Managed Server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name CaptureContainer --network=WCContentNET -p 16400:16400 --volumes-from WCCAdminContainer --env-file <PATH_TO_ENV_FILE>/webcenter.env.list oracle/wccontent:12.2.1.4 configureOrStartCapture.sh\n```\n\n----------------------------------------\n\nTITLE: Running Administration Server Container\nDESCRIPTION: Docker command to start the Administration Server container with necessary volume mounts and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t  --name soaas --network=SOANet -p 7001:7001  -v $data_volume/SOA:/u01/oracle/user_projects   --env-file ./adminserver.env.list oracle/soasuite:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Running WebCenter Sites Managed Server Container with Docker\nDESCRIPTION: Command to run a WebCenter Sites Managed Server container with network configuration, volume mapping, and port exposure. This connects to an existing Admin container and uses environment variables from a specified file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -t --name <container_name> --network=<network_name> --volumes-from <admin_container_name> -p <sites_port>:7002 -p <sites_ssl_port>:9002 --env-file <environment_file> <repo_name:tag_name>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Analytics Server Container with BI Server Component Access\nDESCRIPTION: Similar to the standard container run command but additionally exposes port 9514 to enable access to the OBI Server component, which is needed for tools like the BI Administration Tool.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -p 9500:9500 -p 9502:9502 -p 9514:9514 -e ADMIN_USERNAME=weblogic -e ADMIN_PASSWORD=<admin_password> -e DB_HOST=database -e DB_PORT=1521 -e DB_SERVICE=ORCLPDB1 -e DB_USERNAME=sys -e DB_PASSWORD=<db_password> -e SCHEMA_PREFIX=DEV -e SCHEMA_PASSWORD=<schema_password> oracle/analyticsserver:6.4-patch\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Schema in Database Container\nDESCRIPTION: Runs the createSchema.sql script inside the Database container to create necessary tables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$docker exec -ti InfraDB /u01/app/oracle/product/12.2.0/dbhome_1/bin/sqlplus system/MYDBPasswd@InfraDB:1521/InfraPDB1.us.oracle.com @/u01/app/oracle/createSchema.sql\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Specific Hostname\nDESCRIPTION: Command to run a Docker container while ensuring the same hostname is used for nodemanager compatibility when using existing data volumes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --hostname original_hostname ......\n```\n\n----------------------------------------\n\nTITLE: Deploying CMAN Container\nDESCRIPTION: Deploys the Connection Manager (CMAN) container for Oracle RAC.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Running Apache Container for Single Server\nDESCRIPTION: Commands to run Apache container connecting to a single WebLogic server on standard and non-privileged ports.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e WEBLOGIC_HOST=<host> -e WEBLOGIC_PORT=<port> -p 80:80 oracle/apache:<version>\n$ docker run -d -e WEBLOGIC_HOST=<host> -e WEBLOGIC_PORT=<port> -e NonPriviledgedPorts=true -p 8080:8080 oracle/apache:<version>\n```\n\n----------------------------------------\n\nTITLE: Enabling Podman Real-time CPU Service\nDESCRIPTION: Commands to reload systemd configuration and enable the Podman real-time CPU service for Oracle RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\nsystemctl enable podman-rac-cgroup.service\nsystemctl enable podman-restart.service \nsystemctl start podman-rac-cgroup.service\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Swarm Service\nDESCRIPTION: Command to create a Docker service with 3 replicas using WebLogic image. Configures hostname, environment variables, and port mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create --name city_activity_guide -p 8011:8011 --hostname \"msihost\" --host \"msihost:127.0.0.1\" --env \"MS_NAME=ms{{.Task.Slot}}\" --replicas 3 localhost:5000/12212-summercamps-msiserver:latest\n```\n\n----------------------------------------\n\nTITLE: RAC Database Completion Message\nDESCRIPTION: The success message displayed when the Oracle RAC database setup is completed successfully and ready for use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n===================================\nORACLE RAC DATABASE IS READY TO USE\n===================================\n```\n\n----------------------------------------\n\nTITLE: Running Apache Container for Clustered Servers\nDESCRIPTION: Commands to run Apache container with load balancing for WebLogic server clusters using host lists or cluster URLs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e WEBLOGIC_CLUSTER=host1:port,host2:port,host3:port -p 80:80 oracle/apache:<version>\n$ docker run -d -e WEBLOGIC_CLUSTER=<cluster-url> -p 80:80 oracle/apache:<version>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle FMW Infrastructure Docker Image\nDESCRIPTION: Commands to build the Oracle FMW Infrastructure Docker image for version 12.2.1.3, another prerequisite for the EDQ image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OracleFMWInfrastructure/dockerfiles\n$ ./buildDockerImage.sh -v 12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Resetting Grid and Oracle Passwords in Racnodep2\nDESCRIPTION: Resets the passwords for the grid and oracle users in the second RAC node using the encrypted password file. This step is only executed on racnodep2 before starting racnodep1.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnodep2 /bin/bash -c \"sudo /opt/scripts/startup/resetOSPassword.sh --op_type reset_grid_oracle --pwd_file common_os_pwdfile.enc --pwd_key_file pwd.key\"\n```\n\n----------------------------------------\n\nTITLE: Container IP Address Inspection\nDESCRIPTION: Docker command to inspect and retrieve the container's IP address for accessing the WebLogic Admin Console.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-wls-for-k8s/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Starting RAC Containers (Bash)\nDESCRIPTION: Starts the previously created RAC containers to begin the Oracle RAC setup process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npodman start racnodep1\npodman start racnodep2\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Command to list all Docker networks, including the newly created one for ORDS and database communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network ls\n```\n\n----------------------------------------\n\nTITLE: Checking Oracle RAC Database Image\nDESCRIPTION: Command to verify the presence of Oracle RAC database slim image in the local container registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman images|grep database-rac\\nlocalhost/oracle/database-rac                         21.3.0-slim  bf6ae21ccd5a  8 hours ago    517 MB\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Oracle Unified Directory Docker Build Context\nDESCRIPTION: This markdown table outlines the file and directory structure for building the Oracle Unified Directory Docker image. It describes the purpose of each component in the build context.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| File / Directory         | Type        | Description                                                                     |\n|--------------------------|-------------|---------------------------------------------------------------------------------|\n| [config](config)         | directory   | Local configuration files used to build and run the OUD Docker image/container. |\n| [scripts](scripts)       | directory   | Local setup scripts to build and run the OUD Docker image/container.            |\n| [software](software)     | directory   | Local software and patch used to build the OUD Docker image.                    |\n| [Dockerfile](Dockerfile) | Docker file | Dockerfile to build the Oracle Unified Directory 11.1.2.3.0 image.              |\n```\n\n----------------------------------------\n\nTITLE: Docker Network Creation\nDESCRIPTION: Commands to create a user-defined bridge network for container communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge <network_name>\\n$ docker network create -d bridge WCContentNET\n```\n\n----------------------------------------\n\nTITLE: Verifying Oracle Essbase Image Creation\nDESCRIPTION: Command to verify the successful creation of the Oracle Essbase image using docker images.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleEssbase/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images | grep \"essbase\"\n```\n\n----------------------------------------\n\nTITLE: WebCenter Content Image Build\nDESCRIPTION: Commands to build the WebCenter Content Docker image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#To build image\\nsh buildDockerImage.sh -v 12.2.1.4\\n\\n#Verify you now have the image\\ndocker images\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Rootless Containers (Bash)\nDESCRIPTION: Demonstrates how to set the correct permissions for a data directory when using rootless containers with Podman.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/FAQ.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman unshare chown 54321:54321 ~/data/my_db\n```\n\n----------------------------------------\n\nTITLE: Building Container Image Script Usage\nDESCRIPTION: Shell script for building Oracle GoldenGate Veridata container images with support for version specification and patch application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleVeridata/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nUsage: buildContainerImage.sh -v [version]\nBuilds a container Image for Oracle GoldenGate Veridata.\n\nParameters:\n-v: Release version to build. Default is 12.2.1.4.0\n-i: OGG Veridata Installer zip file location\n-f: FMW Release version.Default is 12.2.1.4-210701\n-p: Patch file\n-h: Help\n```\n\n----------------------------------------\n\nTITLE: Building Oracle GoldenGate Docker Image (Bash)\nDESCRIPTION: Docker build command to create an Oracle GoldenGate image, specifying version, edition, and TAR file. This command requires build arguments for OGG_VERSION, OGG_EDITION, and OGG_TARFILE.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --build-arg OGG_VERSION=\"12.3.0.1.4\" \\\n               --build-arg OGG_EDITION=\"microservices\" \\\n               --build-arg OGG_TARFILE=\"123014_fbo_ggs_Linux_x64_services_shiphome.tar\" \\\n               --tag oracle/goldengate-microservices:12.3.0.1.4 --no-cache .\n```\n\n----------------------------------------\n\nTITLE: Viewing OUD Container Logs\nDESCRIPTION: Command to view the logs of the OUD Docker container to monitor the startup process. The -f flag follows the log output as new log entries are added.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f myoudds2b\n```\n\n----------------------------------------\n\nTITLE: Verifying Applied Patches in Oracle SOA Suite Docker Image\nDESCRIPTION: Command to list the patches applied to the Oracle SOA Suite Docker image, useful when building the image with additional patches.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run oracle/soasuite:12.2.1.4 sh -c '$ORACLE_HOME/OPatch/opatch lspatches'\n```\n\n----------------------------------------\n\nTITLE: RAC Setup Completion Message\nDESCRIPTION: The success message displayed when the Oracle RAC database setup is complete and ready to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n===================================\nORACLE RAC DATABASE IS READY TO USE\n===================================\n```\n\n----------------------------------------\n\nTITLE: Running Apache Container with Custom SSL Certificates\nDESCRIPTION: Docker command to run Apache container with custom SSL certificates. Mounts certificate files from host and configures virtual host settings for production use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name apache \\\n                     -e VIRTUAL_HOST_NAME=<virtual_host_name> \\\n                     -e SSL_CERT_FILE=/config/<ssl-certificate-file> \\\n                     -e SSL_CERT_KEY_FILE=/config/<ssl-certificate-key-file> \\\n                     -e WEBLOGIC_HOST=<admin_host> \\\n                     -e WEBLOGIC_PORT=7001 \\\n                     -p 4433:4433 \\\n                     -v <host-config-dir>:/config \\\n                     -w /config \\\n                     oracle/apache:<version>\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle Restart Container Status\nDESCRIPTION: Command to check the status of the Oracle Restart container and ensure it's running in a healthy state.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n\nCONTAINER ID  IMAGE                                  COMMAND                CREATED      STATUS                PORTS       NAMES\n131b86004040  localhost/oracle/rac-dnsserver:latest  /bin/sh -c exec $...   3 days ago   Up 3 days (healthy)               rac-dnsserver\ne010e1122e99  localhost/oracle/database-rac:21.16.0   podman network di...  3 hours ago  Up 3 hours (healthy)              dbmc1\n```\n\n----------------------------------------\n\nTITLE: Viewing Service Logs\nDESCRIPTION: Command to view logs for all service replicas using experimental feature in Docker 17.03.1-ce.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker service logs city_activity_guide\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Service Name\nDESCRIPTION: Sets the database service name for RAC configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport DB_SERVICE=service:<service-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Compose on Oracle Linux 8\nDESCRIPTION: Commands to enable the Oracle Linux 8 EPEL developer repository and install podman-compose package for container orchestration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf config-manager --enable ol8_developer_EPEL\nsudo dnf install -y podman-compose\n```\n\n----------------------------------------\n\nTITLE: OUD Directory Server Environment Configuration\nDESCRIPTION: Environment configuration file for OUD Directory Server instance defining core parameters like instance name, hostname, base DN, and root user credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ninstanceType=Directory\nOUD_INSTANCE_NAME=myoudds1\nhostname=myoudds1\nbaseDN=dc=example1,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\nsampleData=100\n```\n\n----------------------------------------\n\nTITLE: Deploying CMAN Container for Connection Management\nDESCRIPTION: Brings up the Connection Manager (CMAN) container for Oracle RAC and monitors the logs to verify successful deployment. CMAN provides connection management capabilities for the Oracle RAC database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n################################################\n  CONNECTION MANAGER IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Context for NFS Storage Directory\nDESCRIPTION: Commands to set appropriate SELinux context for the NFS storage directory when SELinux is enabled on the Podman host. This ensures proper permissions for container access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/stage/rac-storage/$ORACLE_DBNAME\nrestorecon -v /scratch/stage/rac-storage/$ORACLE_DBNAME\n```\n\n----------------------------------------\n\nTITLE: Network Configuration for RAC Node 1\nDESCRIPTION: Commands to configure network connectivity for the first RAC node by disconnecting from bridge network and connecting to public and private RAC networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect bridge Racnoded1\ndocker network connect rac_pub1_nw --ip 172.16.1.150 Racnoded1\ndocker network connect rac_priv1_nw --ip 192.168.17.150  Racnoded1\n```\n\n----------------------------------------\n\nTITLE: Building FMW Infrastructure Image with Specific Version in Bash\nDESCRIPTION: Command to build the Oracle FMW Infrastructure Docker image for version 12.2.1.4 using the buildDockerImage.sh script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Building ODI Docker Image Using Shell Script\nDESCRIPTION: Usage instructions and example command for running the buildDockerImage.sh script to create an ODI Docker image. This script builds the image based on the specified ODI version.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -h\n\nUsage: buildDockerImage.sh -v [version] [-s]\nBuilds a Docker Image for Oracle Data Integrator.\n\nParameters:\n   -v: Release version to build. Required.\n        Choose one of: 12.2.1.2.6  12.2.1.3.0\n   -s: skips the MD5 check of packages\n\nCopyright (c) 2017, Oracle and/or its affiliates. All rights reserved.\nLicensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.\n\n$ sh buildDockerImage.sh -v 12.2.1.3.0\n```\n\n----------------------------------------\n\nTITLE: Deploying Oracle RAC Containers\nDESCRIPTION: Deploys two Oracle RAC containers, stops them, reconfigures their network connections, and then restarts them. This process ensures proper network setup for the RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up  -d ${RACNODE1_CONTAINER_NAME} \npodman-compose stop ${RACNODE1_CONTAINER_NAME}\n\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE2_CONTAINER_NAME}\npodman-compose stop ${RACNODE2_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE1_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE2_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE1_PUBLIC_IP} ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP1}  ${RACNODE1_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE1_CRS_PRIVATE_IP2}  ${RACNODE1_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE2_PUBLIC_IP} ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP1}  ${RACNODE2_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE2_CRS_PRIVATE_IP2}  ${RACNODE2_CONTAINER_NAME}\n\npodman-compose start ${RACNODE1_CONTAINER_NAME}\npodman-compose start ${RACNODE2_CONTAINER_NAME}\npodman exec ${RACNODE1_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Docker Proxy Configuration\nDESCRIPTION: Environment variable exports for configuring proxy settings to allow Docker to access external registries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport http_proxy=http://proxy.example.com:80 \\nexport https_proxy=http://proxy.example.com:80 \\nexport HTTP_PROXY=http://proxy.example.com:80 \\nexport HTTPS_PROXY=http://proxy.example.com:80 \\nexport NO_PROXY=localhost,.example.com\n```\n\n----------------------------------------\n\nTITLE: Docker Image Retagging for Oracle FMW Infrastructure\nDESCRIPTION: Command to retag the Oracle FMW Infrastructure image from the container registry to the required local format.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleEssbase/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Building FMW Infrastructure Image\nDESCRIPTION: Commands to build the FMW Infrastructure image for version 12.2.1.3 and verify the image creation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.3\n\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Usage of buildDockerImage.sh Script\nDESCRIPTION: Displays the usage information for the buildDockerImage.sh script, including available parameters and their descriptions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n   $ sh buildDockerImage.sh\n   Usage: buildDockerImage.sh -v [version]\n   Builds a Docker Image for Oracle WebCenter Portal.\n   Parameters:\n      -v: version to build. Required.\n   Choose: 12.2.1.x\n      -c: enables Docker image layer cache during build\n      -s: skips the MD5 check of packages\n      \n   LICENSE UPL 1.0\n Copyright (c) 2017, 2021, Oracle and/or its affiliates. \n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Oracle RAC Response Files in Podman\nDESCRIPTION: Sets the proper SELinux context for Oracle RAC response files to make them accessible within containers. These commands set the container_file_t context on the grid and database response files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands in Oracle RAC Container\nDESCRIPTION: Command to execute a shell inside the Oracle RAC container for troubleshooting purposes. This allows access to log files and configuration details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# podman exec -i -t racnode1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Checking OUD Container Status with Docker\nDESCRIPTION: This command lists running Docker containers, which can be used to verify the status of the newly created OUD container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Oracle RAC NFS Setup\nDESCRIPTION: Sets up environment variables for adding a node to an Oracle RAC cluster using NFS storage. Includes network configuration and NFS-specific ASM settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_HOST_NAME=rac-dnsserver\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_pzriv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport INSTALL_NODE=racnoded1\nexport SCAN_NAME=\"racnodedc1-scan\"\nexport SCAN_IP=172.16.1.230\nexport ASM_DISCOVERY_DIR=\"/oradata\"\nexport ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport RACNODE2_CONTAINER_NAME=racnoded2\nexport RACNODE2_HOST_NAME=racnoded2\nexport RACNODE_IMAGE_NAME=\"oracle/database-rac:19.3.0\"\nexport RACNODE2_NODE_VIP=172.16.1.131\nexport RACNODE2_VIP_HOSTNAME=\"racnoded2-vip\"\nexport RACNODE2_PRIV_IP=192.168.17.101\nexport RACNODE2_PRIV_HOSTNAME=\"racnoded2-priv\"\nexport RACNODE2_PUBLIC_IP=172.16.1.101\nexport RACNODE2_PUBLIC_HOSTNAME=\"racnoded2\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\n```\n\n----------------------------------------\n\nTITLE: Creating Portlet Container with Docker Run Command\nDESCRIPTION: Command to create and run a WebCenter Portlet Managed Server container with network configuration, port mapping and volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name <WCPORTLET_CONTAINER_NAME> --network=<NETWORK_NAME> -p <HostFreePort>:<MANAGED_SERVER_PORTLET_PORT> -v <DATA_VOLUME>:/u01/oracle/user_projects --env-file webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartWebCenterPortlet.sh\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Server Container\nDESCRIPTION: Docker run command with environment variables for customizing WebLogic domain configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-opatch-update/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 7001:7001 -p 9002:9002  -v `HOST PATH where the domain.properties file is`:/u01/oracle/properties -e ADMINISTRATION_PORT_ENABLED=true -e DOMAIN_HOME=/u01/oracle/user_projects/domains/abc_domain -e DOMAIN_NAME=abc_domain oracle/weblogic:12213-opatch-update\n```\n\n----------------------------------------\n\nTITLE: Instance Principal Authentication Examples\nDESCRIPTION: Commands showing two methods to use instance principal authentication with OCI CLI.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it ghcr.io/oracle/oci-cli --auth instance_principal os ns get\n\ndocker run --rm -it -e OCI_CLI_AUTH=instance_principal ghcr.io/oracle/oci-cli os ns get\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server Container\nDESCRIPTION: Command to start the WebLogic Admin Server in a Docker container. It maps port 7001 and sets the container name and hostname.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/1213-domain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 1213-domain\n```\n\n----------------------------------------\n\nTITLE: Configuring ASM Disks\nDESCRIPTION: Sets up ASM disk paths for block device configuration\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\n```\n\n----------------------------------------\n\nTITLE: Removing Oracle SOA Suite Docker Network\nDESCRIPTION: Command to remove the Docker network used for communication between SOA Suite containers. This removes the virtual network infrastructure created for the SOA containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network rm SOANet\n```\n\n----------------------------------------\n\nTITLE: Oracle RAC Node Setup Completion Message\nDESCRIPTION: The success message displayed when a new Oracle RAC node has been successfully added to the cluster. This indicates that the database instance is up and running on the new node.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n========================================================\nOracle Database ORCLCDB3 is up and running on racnodep3.\n========================================================\n```\n\n----------------------------------------\n\nTITLE: Changing Oracle Database Password Using SQLPlus\nDESCRIPTION: This SQL command changes the password for the 'sys' user in the Oracle Database container used for SOA RCU schemas.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSQL> alter user sys identified by Welcome1 container=all;\n```\n\n----------------------------------------\n\nTITLE: Start Portlet Container\nDESCRIPTION: Command to start a stopped WebCenter Portlet container in interactive mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker container start -i <WCPORTLET_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Building Patched FMW Infrastructure Docker Image\nDESCRIPTION: This Dockerfile command builds a new image based on the oracle/fmw-infrastructure:12.2.1.3 image and applies the p27117282 patch. It uses the --force-rm and --no-cache options for a clean build.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n$ docker build --force-rm=true --no-cache=true -t oracle/fmw-infra:12213-p27117282 .\n```\n\n----------------------------------------\n\nTITLE: Extracting and Copying OAM Installation Files\nDESCRIPTION: Commands to unzip and copy the Oracle Identity and Access Management installation files to the correct directory\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip fmw_12.2.1.4.0_idm_Disk1_1of1.zip\n$ cp fmw_12.2.1.4.0_idm.jar <work directory>/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/fmw_12.2.1.4.0_idm_generic.jar\n```\n\n----------------------------------------\n\nTITLE: Setting Prometheus Environment Variables for cAdvisor Integration\nDESCRIPTION: This snippet defines the necessary environment variables for Prometheus to scrape metrics from cAdvisor. It includes authentication token, key/value endpoint details, and the key prefix for looking up cAdvisor's IP and port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/prometheus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nOCCS_API_TOKEN={{api_token}}\nKV_IP=172.17.0.1\nKV_PORT=9109\nOCCS_BACKEND_KEY={{sd_deployment_containers_path \"cadvisor\" 8080}}\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Patched Docker Image\nDESCRIPTION: Docker build commands for creating patched WebLogic Server images. Two options are provided - one for basic patches and another for PSU updates.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-wls-for-k8s/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --force-rm=true --no-cache=true -t oracle/weblogic:12213-patch-wls-for-k8s -f Dockerfile.patch-ontop-12213 .\n$ docker build --force-rm=true --no-cache=true -t oracle/weblogic:12213-patch-wls-for-k8s -f Dockerfile.patch-ontop-12213-psu .\n```\n\n----------------------------------------\n\nTITLE: Running SOA Managed Server Container\nDESCRIPTION: Docker command to start SOA Managed Server containers with appropriate port mappings and volume mounts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t  --name soams1 --network=SOANet -p 8001:8001  -v $data_volume/SOA:/u01/oracle/user_projects  --env-file ./soaserver1.env.list oracle/soasuite:12.2.1.4 \"/u01/oracle/container-scripts/startMS.sh\"\n```\n\n----------------------------------------\n\nTITLE: Building Oracle JDK Base Image\nDESCRIPTION: Commands to build the Oracle JDK base image required for OHS container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\n----------------------------------------\n\nTITLE: Node Manager Properties Configuration\nDESCRIPTION: Example of domain.properties file format for Node Manager authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nusername=mynodemanagerusername\npassword=mynodemanagerpassword\n```\n\n----------------------------------------\n\nTITLE: Checking Oracle RAC Database Image in Podman\nDESCRIPTION: Command to verify the Oracle RAC database image is present in the local Podman registry. Shows how to list images filtered for database-rac.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# podman images|grep database-rac\nlocalhost/oracle/database-rac        21c          41239091d2ac  16 minutes ago  20.2 GB\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Configuration\nDESCRIPTION: Sample Docker Compose environment configuration showing how to set a timeout for the BI container to wait for the database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - DB_WAIT_TIMEOUT=240\n```\n\n----------------------------------------\n\nTITLE: Download WebLogic Deploy Tool\nDESCRIPTION: Command to download the WebLogic Deploy Tooling zip file required for building the Docker image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image-wdt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://github.com/oracle/weblogic-deploy-tooling/releases/download/weblogic-deploy-tooling-0.14/weblogic-deploy.zip\n```\n\n----------------------------------------\n\nTITLE: Running Coherence Proxy Client to Load Cache in Java\nDESCRIPTION: This Java command executes the proxy client JAR to load 10,000 entries into the Coherence cache.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\njava -jar target/proxy-client-1.0.jar load\n```\n\n----------------------------------------\n\nTITLE: Verifying Oracle RAC Setup Completion\nDESCRIPTION: Shows the successful completion message when Oracle RAC database is fully configured and ready to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n===================================\nORACLE RAC DATABASE IS READY TO USE\n===================================\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for ORDS and Database Communication\nDESCRIPTION: Command to create a user-defined Docker network for communication between ORDS and the Oracle database containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create <your network name>\n```\n\n----------------------------------------\n\nTITLE: Verifying Applied Patches in FMW Infrastructure Container\nDESCRIPTION: This command uses the OPatch utility to list all applied patches in the FMW Infrastructure container, confirming the successful application of the patch.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n./opatch lspatches\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic MedRec Container\nDESCRIPTION: Command to run the MedRec container with port 7011 exposed. Requires Oracle DB container to be running first with demo_oracle.ddl tables created.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-medrec/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 7011:7011 12212-oradb-medrec\n```\n\n----------------------------------------\n\nTITLE: Resetting RAC Node Passwords\nDESCRIPTION: Commands to reset passwords for grid and oracle users on an existing RAC node.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t -u root racnode1 /bin/bash\nsh  /opt/scripts/startup/resetOSPassword.sh --help\nsh /opt/scripts/startup/resetOSPassword.sh --op_type reset_grid_oracle --pwd_file common_os_pwdfile.enc --secret_volume /run/secrets --pwd_key_file pwd.key\n```\n\n----------------------------------------\n\nTITLE: Validating Coherence Cache Entries with Proxy Client in Java\nDESCRIPTION: This Java command runs the proxy client to read and validate each entry in the Coherence cache, ensuring correct values.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\njava -jar target/proxy-client-1.0.jar validate\n```\n\n----------------------------------------\n\nTITLE: OUD Replication Configuration Environment Parameters\nDESCRIPTION: Environment parameter file for configuring a new OUD Directory Server to be added to an existing replication group. The file contains parameters for server configuration, replication setup, and post-replication dsconfig commands.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ninstanceType=AddDS2RS\nOUD_INSTANCE_NAME=myoudds2b\nhostname=myoudds2b\nbaseDN=dc=example2,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\nadminUID=admin\nadminPassword=<Password>\nbindDN1=<rootUserDN>\nbindPassword1=<Password>\nbindDN2=<rootUserDN>\nbindPassword2=<Password>\nsourceHost=myoudds2\ndsreplication_1=verify --hostname ${sourceHost} --port ${adminConnectorPort} --baseDN ${baseDN} --serverToRemove ${hostname}:${adminConnectorPort}\ndsreplication_2=enable --host1 ${sourceHost} --port1 ${adminConnectorPort} --replicationPort1 ${replicationPort} --host2 ${hostname} --port2 ${adminConnectorPort} --replicationPort2 ${replicationPort} --baseDN ${baseDN}\ndsreplication_3=initialize --hostSource ${initializeFromHost} --portSource ${adminConnectorPort} --hostDestination ${hostname} --portDestination ${adminConnectorPort} --baseDN ${baseDN}\ndsreplication_4=verify --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN}\ndsreplication_5=status --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN} --dataToDisplay compat-view\npost_dsreplication_dsconfig_1=set-replication-domain-prop --domain-name ${baseDN} --set group-id:2\npost_dsreplication_dsconfig_2=set-replication-server-prop --set group-id:2\n```\n\n----------------------------------------\n\nTITLE: Configuring WebLogic Security Properties\nDESCRIPTION: Example of security properties file content for configuring WebLogic Server authentication. The file should contain key-value pairs for username and password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs for Password Retrieval\nDESCRIPTION: Command to view the detailed logs of an Admin Container, which is useful for finding auto-generated passwords for WebLogic Administrator, Database schema, and Oracle WebCenter Sites accounts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs --details <Admin-Container-Id>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle GoldenGate with Custom Scripts\nDESCRIPTION: Example showing how to mount a local directory containing custom scripts for the Oracle GoldenGate container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -v \"${PWD}/myScripts:/u01/ogg/scripts\" oracle/goldengate:23.4\n```\n\n----------------------------------------\n\nTITLE: Oracle WebCenter Sites Docker Image Build Script Usage\nDESCRIPTION: Help output showing the usage of the buildDockerImage.sh script which builds Docker images for Oracle WebCenter Sites. It supports different versions and various build options like enabling cache or skipping MD5 checks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n-bash-4.2$ sh buildDockerImage.sh -h\n\nUsage: buildDockerImage.sh -v [version] [-s] [-c]\nBuilds a Docker Image for Oracle WebCenter Sites.\n\nParameters:\n\t-v: version to build. Required.\n\t\tChoose one of: 12.2.1.3  12.2.1.4\n\t-c: enables Docker image layer cache during build\n\t-s: skips the MD5 check of packages\n\nCopyright (c) 2019, 2020 Oracle and/or its affiliates.\n\nLicensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle NoSQL on a Remote Host\nDESCRIPTION: Shell commands to download and install Oracle NoSQL on a remote host for connecting to a containerized KVLite instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nKV_VERSION=24.4.9\nrm -rf kv-$KV_VERSION\nDOWNLOAD_ROOT=http://download.oracle.com/otn-pub/otn_software/nosql-database\nDOWNLOAD_FILE=\"kv-ce-${KV_VERSION}.zip\"\nDOWNLOAD_LINK=\"${DOWNLOAD_ROOT}/${DOWNLOAD_FILE}\"\ncurl -OLs $DOWNLOAD_LINK\njar tf $DOWNLOAD_FILE | grep \"kv-$KV_VERSION/lib\" > extract.libs\njar xf $DOWNLOAD_FILE @extract.libs\nrm -f $DOWNLOAD_FILE extract.libs\nKVHOME=$PWD/kv-$KV_VERSION\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Container Images for Oracle RAC Deployment\nDESCRIPTION: Command to list all the locally available container images needed for Oracle RAC deployment, including database, DNS server, storage server, and connection manager.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman images\nlocalhost/oracle/client-cman                    21.3.0      7b095637d7b6  About a minute ago  2.08 GB\nlocalhost/oracle/database-rac                   21c         dcda5cf71b23  12 hours ago        9.33 GB\nlocalhost/oracle/rac-storage-server             latest      d233b08a8aed  12 hours ago        443 MB\nlocalhost/oracle/rac-dnsserver                  latest      7d2301d7ea53  13 hours ago        279 MB\n```\n\n----------------------------------------\n\nTITLE: Launching RAC Node Container with NFS Storage Configuration\nDESCRIPTION: Commands to start, configure network connections, and initialize a new RAC node container with NFS storage. Includes steps to disconnect and reconnect network interfaces with proper IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE3_CONTAINER_NAME} \npodman-compose stop ${RACNODE3_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE3_PUBLIC_IP} ${RACNODE3_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE3_CRS_PRIVATE_IP1}  ${RACNODE3_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE3_CRS_PRIVATE_IP2}  ${RACNODE3_CONTAINER_NAME}\n\npodman-compose start ${RACNODE3_CONTAINER_NAME}\npodman exec ${RACNODE3_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Creating Work Directory and Cloning Repository\nDESCRIPTION: Commands to create a working directory and clone the Oracle Docker images repository\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir <work directory>\n$ cd <work directory>\n$ git clone https://github.com/oracle/docker-images\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Domain Docker Image with Online Configuration\nDESCRIPTION: This command builds a Docker image named '12212-domain-online-config' using the current directory's Dockerfile. The image extends the '12212-domain' WebLogic image and includes JMS artifact deployments.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-domain-online-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker build -t 12212-domain-online-config .\n```\n\n----------------------------------------\n\nTITLE: Pinging KVLite Store from Remote Host\nDESCRIPTION: Tests connectivity to the KVLite store using the Java-based ping command with security credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/kvstore.jar ping -host $HOSTNAME -port 5000 -security /mylocalpath/security/user.security\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic MSI Server Container\nDESCRIPTION: Command to run the MSI server container exposing port 8011.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 8011:8011 --name msi-server 12212-msiserver\n```\n\n----------------------------------------\n\nTITLE: Attaching Network to the Oracle Restart Container\nDESCRIPTION: Commands to disconnect the default network and connect the container to a specified bridge network with a static IP address.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman ${GPCNODE}\npodman network connect ${PUB_BRIDGE} --ip ${GPCNODE_PUB_IP} ${GPCNODE}\n```\n\n----------------------------------------\n\nTITLE: Building Individual Stack Components\nDESCRIPTION: These commands demonstrate how to build individual components of a stack, specifically the HAProxy and NGINX load balancing stack. It builds the runit and confd dependencies first, then the main stack.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd images/runit\nmake\ncd ../confd\nmake\ncd ../../stacks/haproxy-lb-to-nginx\nmake\n```\n\n----------------------------------------\n\nTITLE: Deploying Connection Manager (CMAN) Container\nDESCRIPTION: Optional step to deploy a Connection Manager container for Oracle RAC to facilitate client connectivity and monitor its deployment logs for completion.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n################################################\n  CONNECTION MANAGER IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Running Container from Patched FMW Infrastructure Image\nDESCRIPTION: This command runs a new container named 'verify_patch' from the patched FMW Infrastructure image to verify the patch application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --name verify_patch oracle/fmw-infra:12213-p27117282\n```\n\n----------------------------------------\n\nTITLE: Preparing for RAC Node Addition\nDESCRIPTION: Creates and cleans the directory structure required for adding an additional node to the existing RAC cluster. This prepares the filesystem for the new node's configuration files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /scratch/rac/cluster01/node3\nrm -rf /scratch/rac/cluster01/node3/*\n```\n\n----------------------------------------\n\nTITLE: Building ORDS Docker Image with Custom Base Image\nDESCRIPTION: Command to build the ORDS Docker image using a locally built base image instead of the default one from the container registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleRestDataServices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -o '--build-arg BASE_IMAGE=<local-image>'\n```\n\n----------------------------------------\n\nTITLE: Changing Oracle Database Password\nDESCRIPTION: Commands to run sqlplus in a container to change the default database password. Uses Oracle Instant Client image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --network=InfraNET --rm store/oracle/database-instantclient:12.2.0.1 sqlplus sys/Oradoc_db1@InfraDB:1521/InfraDB.us.oracle.com AS SYSDBA\n\nSQL> alter user sys identified by MYDBPasswd container=all;\n```\n\n----------------------------------------\n\nTITLE: Usage of buildDockerImage.sh Script\nDESCRIPTION: Help output showing parameters and options for the buildDockerImage.sh script used to build Docker images for Oracle WebCenter Sites. Includes version selection and caching options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle WebCenter Sites.\nParameters:\n   -v: version to build. Required.\nChoose: 12.2.1.x\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n   \nLICENSE UPL 1.0\nCopyright (c) 2017 Oracle and/or its affiliates. All rights reserved.\n```\n\n----------------------------------------\n\nTITLE: Resetting Passwords on Existing Oracle RAC Node\nDESCRIPTION: Commands to reset passwords for grid and oracle users on an existing RAC node before adding a new node to the cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t -u root racnode1 /bin/bash\nsh  /opt/scripts/startup/resetOSPassword.sh --help\nsh /opt/scripts/startup/resetOSPassword.sh --op_type reset_grid_oracle --pwd_file common_os_pwdfile.enc --secret_volume /run/secrets --pwd_key_file pwd.key\n```\n\n----------------------------------------\n\nTITLE: Tag SOA Suite Docker Image\nDESCRIPTION: Command to tag the pulled SOA Suite image with a local reference name\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag container-registry.oracle.com/middleware/soasuite:12.2.1.4 fmw-soa:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Building the OAM Docker Image\nDESCRIPTION: Commands to navigate to the OAM Dockerfiles directory and run the build script to create the OAM Docker image for version 12.2.1.4.0.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <work directory>/docker-images/OracleAccessManagement/dockerfiles\n$ sh buildDockerImage.sh -v 12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Apache Container with Custom Plugin Configuration\nDESCRIPTION: Commands to run Apache container with custom WebLogic plugin configuration using volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v <host-config-dir>:/config -w /config \\\n                     -d -e WEBLOGIC_HOST=<admin-host> \\\n                     -e WEBLOGIC_PORT=7001 \\\n                     -p 80:80 oracle/apache:<version>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Password Secret Volume\nDESCRIPTION: Commands to create and configure a secret volume for storing encrypted passwords used by grid, oracle, and database users.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/.secrets/\nopenssl rand -out /opt/.secrets/pwd.key -hex 64\n```\n\n----------------------------------------\n\nTITLE: Running Basic OHS Container\nDESCRIPTION: Command to run OHS container without mod_weblogic configuration, mapping the domain properties file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v `HOST PATH where the domain.properties file is`:/u01/oracle/bootdir -it --name ohs -p 7777:7777 oracle/ohs:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Retrieve Oracle Database Details\nDESCRIPTION: Kubernetes commands to retrieve Oracle Database SID and PDB name from deployment configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/templates/NOTES.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nORACLE_SID=$(kubectl get  -o jsonpath=\"{.spec.template.spec.containers[?(.name == 'oracle-db')].env[?(.name == 'ORACLE_SID')].value }\" deploy {{ template \"fullname\" . }})\nORACLE_PDB=$(kubectl get  -o jsonpath=\"{.spec.template.spec.containers[?(.name == 'oracle-db')].env[?(.name == 'ORACLE_PDB')].value }\" deploy {{ template \"fullname\" . }})\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Volume with Docker Compose in Shell\nDESCRIPTION: Removes the Docker volume using Docker Compose.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n> docker-compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Docker Container Creation Command\nDESCRIPTION: Command to create and run OUD container with network, volume mapping and environment configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --network=OUDNet \\\n--name=myouddstune \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env-file ~/oud-dir-dstune.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo Docker Container with Volume Mapping\nDESCRIPTION: Command to start a Tuxedo Docker container with a specified version, mapping a local directory to the container for persistent storage of user projects.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/core/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedo:<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Containers\nDESCRIPTION: Docker command to forcefully remove containers by their ID. Used for cleanup and container management.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rm –f <container_id>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Container Logs for WebCenter Sites\nDESCRIPTION: Command to monitor the logs of a running WebCenter Sites container. This helps to verify if the server has started properly before accessing the console.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f --tail 900 WCSitesManagedContainer\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for RAC with Block Devices\nDESCRIPTION: Bash commands to export necessary environment variables for setting up Oracle RAC on Docker with Block Devices using Docker Compose. These variables are used in the docker-compose.yml file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=rac-dns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport RAC_NODE_NAME_PREFIXD=\"racnoded\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_pzriv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport DNS_PRIVATE_IP=192.168.17.25\nexport INSTALL_NODE=racnoded1\nexport SCAN_NAME=\"racnodedc1-scan\"\nexport SCAN_IP=172.16.1.230\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport PWD_KEY=\"pwd.key\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport RACNODE1_CONTAINER_NAME=racnoded1\nexport RACNODE1_HOST_NAME=racnoded1\nexport RACNODE_IMAGE_NAME=\"oracle/database-rac:19.3.0\"\nexport RACNODE1_NODE_VIP=172.16.1.130\nexport RACNODE1_VIP_HOSTNAME=\"racnoded1-vip\"\nexport RACNODE1_PRIV_IP=192.168.17.100\nexport RACNODE1_PRIV_HOSTNAME=\"racnoded1-priv\"\nexport RACNODE1_PUBLIC_IP=172.16.1.100\nexport RACNODE1_PUBLIC_HOSTNAME=\"racnoded1\"\nexport CMAN_CONTAINER_NAME=racnodedc1-cman\nexport CMAN_IMAGE_NAME=\"oracle/client-cman:19.3.0\"\nexport DNS_DOMAIN=\"example.com\"\nexport CMAN_PUBLIC_IP=172.16.1.164\nexport CMAN_HOSTNAME=\"racnodedc1-cman\"\nexport CMAN_PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport CMAN_PUBLIC_HOSTNAME=\"racnodec1-cman\"\nexport CMAN_VERSION=\"19.3.0\"\nexport ORACLE_HOME=/u01/app/oracle/product/${CMAN_VERSION}/client_1\n```\n\n----------------------------------------\n\nTITLE: Configuring Logspout Environment Variables for Docker\nDESCRIPTION: This snippet lists the required environment variables for the Logspout container to connect with Logstash and the key/value store. It includes API token, IP address, port, and key prefix for service discovery.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/elk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `OCCS_API_TOKEN={{api_token}}` - the token for authenticating against the key/value endpoint\n* `KV_IP=172.17.0.1` - the IP address which provides the key/value endpoint, in this case the host running the container\n* `KV_PORT=9109` - the port on which the key/value endpoint is listening\n* `OCCS_LOGSTASH_KEY={{sd_deployment_containers_path \"logstash\" 5000}}` - the key prefix in the key/value store that can be used to lookup the IP and published port of logstash\n```\n\n----------------------------------------\n\nTITLE: Checking DNS Server Container Logs\nDESCRIPTION: Commands to monitor the DNS server container startup and service creation logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman logs rac-dnsserver\n```\n\nLANGUAGE: bash\nCODE:\n```\n#################################################\n DNS Server IS READY TO USE!\n#################################################\n```\n\n----------------------------------------\n\nTITLE: Creating Podman RAC Node 2 with Block Devices\nDESCRIPTION: Podman command to create the second RAC node container using block devices for storage. Similar configuration to Node 1 but with different network and hostname parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep2 \\\n  --volume /boot:/boot:ro \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets1:/run/secrets:ro \\\n   --volume /opt/containers/common_scripts:/common_scripts \\\n   --dns 172.16.1.25 \\\n  --dns-search \"example.info\" \\\n  --device=/dev/xvde:/dev/asm_disk1 \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_WRITE \\\n  --cap-add=AUDIT_CONTROL \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e NODE_VIP=172.16.1.161 \\\n  -e VIP_HOSTNAME=racnode2-vip \\\n  -e PRIV_IP=192.168.17.151 \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151 \\\n  -e PUBLIC_HOSTNAME=racnode2 \\\n  -e SCAN_NAME=\"racnode-scan\" \\\n  -e SCAN_IP=172.16.1.70 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e DOMAIN=example.com \\\n  -e DEFAULT_GATEWAY=172.16.1.1 \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1 \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e CRS_NODES=\"racnode1,racnode2\" \\\n  -e GRID_RESPONSE_FILE=\"grid_sample.rsp\" \\\n  -e DBCA_RESPONSE_FILE=\"dbca_sample.rsp\" \\\n  -e TMPDIR=/var/tmp \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e ORACLE_SID=ORCLCDB \\\n  --restart=always \\\n  --systemd=always \\\n  --ulimit rtprio=99  \\\n  --name racnodep2 \\\n  localhost/oracle/database-rac:21.3.0-21.7.0\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Real-time CPU Service Configuration\nDESCRIPTION: Systemd service configuration file to enable real-time CPU scheduling for Oracle RAC containers in Podman, necessary for certain Oracle RAC processes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_24\n\nLANGUAGE: INI\nCODE:\n```\n[Unit]\nDescription=Populate Cgroups with real time chunk on machine restart\nAfter=multi-user.target\n[Service]\nType=oneshot\nExecStart=/bin/bash -c \"/bin/echo 950000 > /sys/fs/cgroup/cpu,cpuacct/machine.slice/cpu.rt_runtime_us && /bin/systemctl restart podman-restart.service\"\nStandardOutput=journal\nCPUAccounting=yes\nSlice=machine.slice\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Create Containers with Existing Domain\nDESCRIPTION: Sequence of commands to create all WebCenter Portal containers using an existing domain.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name WCPAdminContainer --network=WCPortalNET -p 7001:7001 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4\n\ndocker run -i -t --name WCPortalContainer --network=WCPortalNET -p 8888:8888 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartWebCenterPortal.sh\n\ndocker run -i -t --name WCPortletContainer --network=WCPortalNET -p 7777:7777 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartWebCenterPortlet.sh\n\ndocker run -i -t --name ESContainer --network=WCPortalNET -p 9200:9200 --volumes-from WCPortalContainer -v /scratch/wcpdocker/volumes/es:/u01/esHome/esNode/data --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartElasticsearch.sh\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebCenter Sites Admin Container\nDESCRIPTION: Commands for monitoring WebCenter Sites Admin container logs and accessing the container shell\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f --tail 900 WCSitesAdminContainer\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it WCSitesAdminContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder for NFS Storage\nDESCRIPTION: Commands to create a directory structure for NFS storage and ensure it's empty before deploying the storage container. This directory will be mounted inside the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/$ORACLE_DBNAME/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Setting Up BlockDevices Environment\nDESCRIPTION: Configures environment variables for block device-based RAC deployment\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsource ./setup_rac_host.sh -blockdevices-env\n```\n\n----------------------------------------\n\nTITLE: Managed Server Container Management Commands\nDESCRIPTION: Docker commands for stopping and starting the various WebCenter Content Managed Server containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop WCContentContainer\ndocker stop IPMContainer\ndocker stop CaptureContainer\ndocker stop WCCADFContainer\n\ndocker start -i WCContentContainer\ndocker start -i IPMContainer\ndocker start -i CaptureContainer\ndocker start -i WCCADFContainer\n```\n\n----------------------------------------\n\nTITLE: Running All Oracle Database Docker Image Tests with Bash\nDESCRIPTION: This snippet describes the process of running all tests for Oracle Database Docker images. It involves copying necessary binaries to the 'bin' folder and executing the 'runAllTests.sh' script. A successful test run will complete without any errors.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./runAllTests.sh\n```\n\n----------------------------------------\n\nTITLE: Building Application Image\nDESCRIPTION: Command to build an image with a custom application deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12212-summercamps-msiserver -f Dockerfile.addapp --build-arg name=summercamps  --build-arg source=apps/summercamps.ear --build-arg simple_filename=summercamps.ear .\n```\n\n----------------------------------------\n\nTITLE: Running Patched OHS Container\nDESCRIPTION: Command to start the Oracle HTTP Server container with mounted properties file and port mapping\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/samples/12214-patch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v `HOST PATH where the domain.properties file is`:/u01/oracle/bootdir -it --name ohs -p 7777:7777 oracle/ohs:12214-patch\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Bridge Network for Single Node Deployment\nDESCRIPTION: This command creates a user-defined Docker network using the bridge driver for single node deployment of Oracle SOA Suite containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge SOANet\n```\n\n----------------------------------------\n\nTITLE: RCU Security Properties Configuration\nDESCRIPTION: Configuration file format for database authentication and schema settings\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndb_user=sys\ndb_pass=Oradoc_db1\ndb_schema=Oradoc_db1\n```\n\n----------------------------------------\n\nTITLE: Deploying DNS Container for RAC\nDESCRIPTION: Starts the DNS container and configures its network connections for RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME} && podman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE_NETWORK_NAME} --ip ${DNS_PRIVATE_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\npodman-compose logs ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Configuring System Parameters for Oracle RAC\nDESCRIPTION: Essential system parameters that must be set in /etc/sysctl.conf for Oracle RAC operation, including file descriptors, network buffer sizes, and AIO limits.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nfs.aio-max-nr = 1048576\nfs.file-max = 6815744\nnet.core.rmem_max = 4194304\nnet.core.rmem_default = 262144\nnet.core.wmem_max = 1048576\nnet.core.wmem_default = 262144\nnet.core.rmem_default = 262144\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo ART Container\nDESCRIPTION: Command to run the Tuxedo ART Runtime container with volume mounting for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_runtime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoartrt:12.2.2\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Containers\nDESCRIPTION: Docker command to inspect container details. Provides comprehensive information about container configuration, network settings, and more.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect <container name>\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Deployment Status\nDESCRIPTION: Command to verify the status of deployed Kubernetes objects including pods, services, deployments, and replicasets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get all\nNAME                                READY   STATUS    RESTARTS   AGE\npod/oracle-rdbms-68ccc67545-6g5sb   1/1     Running   0          15m\n\nNAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nservice/database   ClusterIP   10.111.69.145   <none>        1521/TCP   15m\n\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/oracle-rdbms   1/1     1            1           15m\n\nNAME                                      DESIRED   CURRENT   READY   AGE\nreplicaset.apps/oracle-rdbms-68ccc67545   1         1         1       15m\n```\n\n----------------------------------------\n\nTITLE: Sample Command for Running WebCenter Sites Managed Container\nDESCRIPTION: Example of the docker run command with specific parameter values for creating a WebCenter Sites managed container. Shows actual port numbers, container naming, and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -t --name WCSitesManagedContainer --network=WCSitesNet --volumes-from WCSitesAdminContainer -p 7002:7002 -p 9002:9002 --env-file ./wcsitesserver.env.list oracle/wcsites:12.2.1.3 /bin/bash -c \"/u01/oracle/sites-container-scripts/startSitesServer.sh; /bin/bash\"\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Managed Server Configuration\nDESCRIPTION: Environment variables for configuring the WebCenter Sites managed server instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\nWCSITES_ADMIN_HOSTNAME=<WCSites Admin Container Name>\nDOMAIN_NAME=<Weblogic_Domain Name>\nSITES_SERVER_NAME=<Sites Server Name>\n```\n\n----------------------------------------\n\nTITLE: Running Admin CLI from Remote Host\nDESCRIPTION: Command to run the Oracle NoSQL Admin CLI from a remote host to access a containerized KVLite instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/kvstore.jar runadmin -host $HOSTNAME -port 5000 -store kvstore\n```\n\n----------------------------------------\n\nTITLE: Container Management Commands\nDESCRIPTION: Commands to manage and monitor the running container, including checking container logs and listing containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/samples/shm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs <container_id>\\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Attaching Networks to First Oracle RAC Node (racnodep1)\nDESCRIPTION: Configures network connectivity for the first RAC node by connecting it to public and private networks. This includes disconnecting from the default podman network and connecting to the dedicated RAC networks with specific IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman racnodep1\npodman network connect rac_pub1_nw --ip 10.0.20.170 racnodep1\npodman network connect rac_priv1_nw --ip 192.168.17.170 racnodep1\npodman network connect rac_priv2_nw --ip 192.168.18.170 racnodep1\n```\n\n----------------------------------------\n\nTITLE: Running OCI CLI Setup Configuration\nDESCRIPTION: Command to start the interactive OCI CLI configuration process in the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  -v \"$HOME/.oci:/oracle/.oci\" \\\n  ghcr.io/oracle/oci-cli setup config\n```\n\n----------------------------------------\n\nTITLE: Viewing Oracle RAC Container Logs in Docker\nDESCRIPTION: Command to follow (tail) the logs of an Oracle RAC container in Docker to monitor database creation progress.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f racnoded2\n```\n\n----------------------------------------\n\nTITLE: Clean Up Existing Containers\nDESCRIPTION: Commands to stop and remove all WebCenter Portal related containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker container stop ESContainer\ndocker container stop WCPortletContainer\ndocker container stop WCPortalContainer\ndocker container stop WCPAdminContainer\n\ndocker container rm ESContainer\ndocker container rm WCPortletContainer\ndocker container rm WCPortalContainer\ndocker container rm WCPAdminContainer\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Database Enterprise Edition Docker Image\nDESCRIPTION: Docker command to download the Oracle Database Enterprise Edition image from Oracle Container Registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Database Docker Container\nDESCRIPTION: Docker command to start an Oracle Database container with specified environment variables, port mappings, and volume mounting for data persistence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name ODIDatabase  -p 1521:1521 -p 5500:5500 -v /scratch/DockerVolume/ODIVolume/DB:/opt/oracle/oradata --env-file ./db.env.list  oracle/database:12.2.0.1-ee\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Tuxedo SHM Docker Image\nDESCRIPTION: Command to build a Docker container image for Oracle Tuxedo SHM sample domain. Requires the oracle/tuxedo:latest base image to be pre-built.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/shm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/tuxedoshm .\n```\n\n----------------------------------------\n\nTITLE: Admin Server Container Management Commands\nDESCRIPTION: Basic Docker commands for stopping and starting the WebCenter Content Admin Server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop WCCAdminContainer\ndocker start -i WCCAdminContainer\n```\n\n----------------------------------------\n\nTITLE: Querying Starter Set Data\nDESCRIPTION: SQL command and example output showing how to connect as TEST user and query the PEOPLE table\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/startersetcontainer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsql test/test@//localhost:1521/STARTERSET\n\nSQLcl: Release 4.2.0 Production on Mon Mar 06 11:39:18 2017\n\nCopyright (c) 1982, 2017, Oracle.  All rights reserved.\n\nConnected to:\nOracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n\nSQL> SELECT name FROM people;\n\nNAME\n----------\nLarry\nBruno\nGerald\n\nSQL> exit\n\nDisconnected from Oracle Database 12c Enterprise Edition Release 12.2.0.1.0 - 64bit Production\n```\n\n----------------------------------------\n\nTITLE: Creating WebCenter Imaging Container\nDESCRIPTION: Docker command to create and run the WebCenter Imaging (IPM) Managed Server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --name IPMContainer --network=WCContentNET -p 16000:16000 --volumes-from WCCAdminContainer --env-file <PATH_TO_ENV_FILE>/webcenter.env.list oracle/wccontent:12.2.1.4 configureOrStartIPM.sh\n```\n\n----------------------------------------\n\nTITLE: Verifying Built Docker Image\nDESCRIPTION: This command lists the Docker images, allowing you to verify that the WebLogic Server image was built successfully.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/dockerfiles/14.1.1.0/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for RAC with NFS Storage\nDESCRIPTION: Export commands for setting up environment variables needed for RAC deployment with NFS storage, including storage container and volume configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=rac-dns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport DNS_DOMAIN=\"example.com\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport DNS_PRIVATE_IP=192.168.17.25\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE_IMAGE_NAME=\"localhost/oracle/database-rac:21.3.0-21.13.0\"\nexport RACNODE1_NODE_VIP=172.16.1.200\nexport RACNODE1_VIP_HOSTNAME=\"racnodep1-vip\"\nexport RACNODE1_PRIV_IP=192.168.17.170\nexport RACNODE1_PRIV_HOSTNAME=\"racnodep1-priv\"\nexport RACNODE1_PUBLIC_IP=172.16.1.170\nexport RACNODE1_PUBLIC_HOSTNAME=\"racnodep1\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport INSTALL_NODE=racnodep1\nexport SCAN_NAME=\"racnodepc1-scan\"\nexport SCAN_IP=172.16.1.236\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport PWD_KEY=\"pwd.key\"\nexport ASM_DISCOVERY_DIR=\"/oradata\"\nexport ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport ORACLE_SID=\"ORCLCDB\"\nexport CMAN_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_PUBLIC_IP=172.16.1.15\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"oracle/client-cman:21.3.0\"\nexport DNS_DOMAIN=\"example.com\"\nexport CMAN_PUBLIC_IP=172.16.1.166\nexport CMAN_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport CMAN_VERSION=\"21.3.0\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"localhost/oracle/rac-storage-server:latest\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PRIVATE_IP=192.168.17.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\n```\n\n----------------------------------------\n\nTITLE: WebLogic Domain Security Properties Configuration\nDESCRIPTION: Example of domain security properties file format for configuring WebLogic admin credentials, which should be mounted as a volume at runtime.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Admin Container Environment Configuration\nDESCRIPTION: Environment variable configuration for the WebCenter Sites Admin Server container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_HOST=<IP or Hostname of Docker Host. Should not use 'localhost' as IP or hostname of docker host.>\nDB_CONNECTSTRING=<Hostname/ContainerName>:<Database Port>/<DB_PDB>.<DB_DOMAIN>\nDB_USER=<By default: sys>\nDB_PASSWORD=<Database Password>\nRCU_PREFIX=<RCU_PREFIX>\nDB_SCHEMA_PASSWORD=<database_schema_password: if not provided, it gets auto generated>\nSAMPLES=<To install sample Sites, set samples as true, else set as false>\nDOMAIN_NAME=<Weblogic Domain Name optional>\nSITES_SERVER_NAME=<Sites Server Name optional>\nADMIN_USERNAME=<Weblogic Admin UserName, default: weblogic>\nADMIN_PASSWORD=<Weblogic Admin Password: if not provided, it gets auto generated>\nSITES_ADMIN_USERNAME=<Sites Admin UserName, default: ContentServer>\nSITES_ADMIN_PASSWORD=<Sites Admin Password: if not provided, it gets auto generated>\nSITES_APP_USERNAME=<Sites Application UserName, default: fwadmin>\nSITES_APP_PASSWORD=<Sites Application Password: if not provided, it gets auto generated>\nSITES_SS_USERNAME=<Sites SatelliteServer UserName, default: SatelliteServer>\nSITES_SS_PASSWORD=<Sites SatelliteServer Password: if not provided, it gets auto generated>\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Group Membership\nDESCRIPTION: Command to verify if a user belongs to the Docker group\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ id -Gn <userid>\n```\n\n----------------------------------------\n\nTITLE: Creating Host Directory for Persistent Storage\nDESCRIPTION: Commands to set up a host directory for persistent data storage and mount it as a volume in the BI container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p /scratch/bi && chmod 777 /scratch/bi\n$ docker run -v /scratch/bi:/u01/oracle/user_projects ......\n```\n\n----------------------------------------\n\nTITLE: Listing and Inspecting Podman Secrets\nDESCRIPTION: Commands to view and inspect Podman secrets created for Oracle RAC container deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman secret ls\nID                         NAME        DRIVER      CREATED       UPDATED\n7eb7f573905283c808bdabaff  keysecret   file        13 hours ago  13 hours ago\ne3ac963fd736d8bc01dcd44dd  pwdsecret   file        13 hours ago  13 hours ago\n\npodman secret inspect <secret_name>\n```\n\n----------------------------------------\n\nTITLE: Building Server JRE 8 Container Image with Oracle Linux 8\nDESCRIPTION: This snippet demonstrates how to build a Docker image for Server JRE 8 using Oracle Linux 8 as the base image. It requires a JDK 8 download token and OCI region to be provided as build arguments.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleJava/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ../OracleJava/8/serverjre\ndocker build --file Dockerfile.ol8 --tag oracle/serverjre:8 --build-arg JDK8_TOKEN=<$token> --build-arg OCI_REGION=<$region> .\n```\n\n----------------------------------------\n\nTITLE: Accessing WebCenter Sites Admin Container\nDESCRIPTION: Docker command to establish an interactive shell session with the WebCenter Sites Admin container for performing operations on WebLogic Server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it WCSitesAdminContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep1 with NFS Storage\nDESCRIPTION: This command creates an Oracle RAC container on racnodep1 using Podman with NFS storage. It includes similar parameters as the block device setup but uses a volume for NFS storage instead of device mappings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--secret pwdsecret \\\n--secret keysecret \\\n--volume /scratch/rac/cluster01/node1:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep1:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--volume racstorage:/oradata \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Bridge Network for SOA\nDESCRIPTION: Commands to create a user-defined bridge network for container communication\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge <some name>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge SOANet\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle FMW Infrastructure Docker Image\nDESCRIPTION: Commands to download and retag the Oracle Fusion Middleware Infrastructure Docker image\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.3 oracle/fmw-infrastructure:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Tagging Oracle Database Enterprise Edition Docker Image\nDESCRIPTION: Docker command to retag the downloaded Oracle Database Enterprise Edition image for local use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag container-registry.oracle.com/database/enterprise:12.2.0.1-slim database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Using Oracle FMW Infrastructure Docker Samples\nDESCRIPTION: Repository contains two main samples: 1) Creating an FMW Infrastructure domain in a volume with RCU schema creation and domain setup, 2) Applying patches to an FMW Infrastructure image using a Dockerfile extension.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## FMW Infrastructure domain in volume\nThis project creates a Docker image which contains an Oracle Fusion Middleware Infrastructure domain image. The image extends the FMW Infrastructure binary image and builds an FMW Infrastructure domain persisted to a host volume.\nThere are two images in this sample, one to create the RCU schema and one to create the FMW Infrastructure domain.\n\n## 12.2.1.3 Patch\nThis Dockerfile extends the Oracle FMW Infrastructure image and applies a patch.\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for Oracle Database Docker Container\nDESCRIPTION: Sample content for the db.env.list file, which defines environment variables for the Oracle Database Docker container. This includes database SID, PDB name, and password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nORACLE_SID=odidb\nORACLE_PDB=odipdb\nORACLE_PWD=Welcome1\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tuxedo SHM Container\nDESCRIPTION: Command to create and run a container from the Oracle Tuxedo SHM image. Mounts a local directory for user projects and sets the hostname to 'tuxhost'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/shm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -h tuxhost -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoshm\n```\n\n----------------------------------------\n\nTITLE: Creating OUD Directory Server Docker Container\nDESCRIPTION: Docker command to create and run a new OUD directory server container that will be added to existing replication group.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --network=OUDNet \\\n--name=myoudds1b \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\n--env OUD_INSTANCE_NAME=myoudds1b \\\n--env hostname=myoudds1b \\\n--env-file ~/oud-add-dir-to-rs.env \\\noud-with-patch:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node with Shared Storage Volume\nDESCRIPTION: Command to create an additional Oracle RAC container using the shared storage volume. This container is configured to join an existing RAC cluster by using the same shared storage volume.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# docker create -t -i \\\n  --hostname racnode2 \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnode1 \\\n  -e NODE_VIP=172.16.1.161  \\\n  -e VIP_HOSTNAME=racnode2-vip  \\\n  -e PRIV_IP=192.168.17.151  \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151  \\\n  -e PUBLIC_HOSTNAME=racnode2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnode-scan \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnode2 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: User and Directory Setup Commands\nDESCRIPTION: System commands for creating necessary users and directories with proper permissions\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# getent passwd 1000\n# useradd -u 1000 -g 1000 oracle\n# mkdir -p /u01/DockerVolume/SOAVolume/SOA\n# chown -R 1000:1000 /u01/DockerVolume/SOAVolume/\n# chmod -R 750 /u01/DockerVolume/SOAVolume/\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebCenter Sites Container Shell\nDESCRIPTION: Command to access the shell inside a running WebCenter Sites Managed Container. This is useful for monitoring logs, checking server status, or performing operations within the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it WCSitesManagedContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Network Configuration for RAC Node 2\nDESCRIPTION: Commands to configure network connectivity for the second RAC node by disconnecting from bridge network and connecting to public and private RAC networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect bridge Racnoded2\ndocker network connect rac_pub1_nw --ip 172.16.1.151 Racnoded2\ndocker network connect rac_priv1_nw --ip 192.168.17.151  Racnoded2\n```\n\n----------------------------------------\n\nTITLE: Verifying Patch Installation\nDESCRIPTION: Commands to verify OPatch version and applied patches in the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-opatch-update/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name verify_patch -it oracle/weblogic:12213-opatch-update /bin/bash\n./opatch version\n./opatch lspatches\n```\n\n----------------------------------------\n\nTITLE: Copying and Configuring Container Scripts for Oracle Identity Management\nDESCRIPTION: Copies container scripts to the Docker image and sets appropriate permissions and ownership for Oracle Identity Management files and directories.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY --chown=oracle:root files/container-scripts/ /u01/oracle/dockertools/\n\nRUN chmod a+xr /u01/oracle/dockertools/* && \\\n    chown -R oracle:root /u01/oracle/idm/server/ConnectorDefaultDirectory_orig && \\\n    chown -h oracle:root /u01/oracle/idm/server/ConnectorDefaultDirectory && \\\n    chown -R oracle:root /u01/oracle/dockertools\n```\n\n----------------------------------------\n\nTITLE: Running Oracle RAC DNS Server Container\nDESCRIPTION: Command to launch the RAC DNS server container with required configuration parameters, network settings, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman run -d -t \\\n  --hostname racdns \\\n  --dns-search=example.info \\\n   --cap-add=AUDIT_WRITE \\\n  -e DOMAIN_NAME=\"example.info\" \\\n  -e WEBMIN_ENABLED=false \\\n  -e RAC_NODE_NAME_PREFIXP=\"racnodep\" \\\n  -e SETUP_DNS_CONFIG_FILES=\"setup_true\"  \\\n  --network=rac_pub1_nw --ip=10.0.20.25 \\\n  --privileged=false \\\n  --name rac-dnsserver \\\n  localhost/oracle/rac-dnsserver:latest\n```\n\n----------------------------------------\n\nTITLE: Specifying Working Directory and Startup Command for OIM Docker Container\nDESCRIPTION: Sets the working directory to ORACLE_HOME and specifies the command to create the domain and start the Oracle Identity Management service.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nWORKDIR $ORACLE_HOME\nCMD [\"/u01/oracle/dockertools/createDomainAndStart.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Viewing DNS Server Container Logs\nDESCRIPTION: Command to view the logs of the DNS server container to verify successful startup, which typically takes up to 2 minutes to complete.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f rac-dnsserver\n```\n\n----------------------------------------\n\nTITLE: Starting Additional WebLogic Managed Server in Docker\nDESCRIPTION: This command starts another Managed Server container, similar to the previous one but without exposing the Coherence proxy port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-coherence-domain-in-image-wdt/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d --name managed-server-2 --link wlsadmin:wlsadmin -p 8002:8001 -v $COH_SAMPLE_DIR/properties/docker-run:/u01/oracle/properties -e MANAGED_SERVER_NAME=managed-server-2 coherence-12213-domain-home-in-image-wdt startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Resetting Oracle Database Passwords\nDESCRIPTION: This command executes a script inside the running container to reset the database passwords. Replace <newPassword> with the desired password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec oracle-build ./setPassword.sh <newPassword>\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebCenter Sites Docker Container Logs\nDESCRIPTION: Command to monitor the logs of a running WebCenter Sites container. The command follows the logs in real-time and displays the last 900 lines, which is useful for checking server startup status.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f --tail 900 WCSitesManagedContainer\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in KVLite with SQL CLI\nDESCRIPTION: Command to start a SQL CLI session and list available tables in the KVLite database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n  java -jar lib/sql.jar -helper-hosts store:5000 -store kvstore\n\n  sql-> show tables\ntables\n  SYS$IndexStatsLease\n  SYS$MRTableAgentStat\n  SYS$MRTableInfo\n  SYS$MRTableInitCheckpoint\n  SYS$PartitionStatsLease\n  SYS$SGAttributesTable\n  SYS$StreamRequest\n  SYS$StreamResponse\n  SYS$TableMetadata\n  SYS$TableStatsIndex\n  SYS$TableStatsPartition\n  SYS$TopologyHistory\n\n  sql-> exit\n```\n\n----------------------------------------\n\nTITLE: DNS Container Startup Logs\nDESCRIPTION: Sample logs showing successful initialization of the DNS server container, indicating it's ready to serve the RAC environment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n04-03-2024 13:22:54 UTC :  : ################################################\n04-03-2024 13:22:54 UTC :  :  DNS Server IS READY TO USE!            \n04-03-2024 13:22:54 UTC :  : #####################################\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo TMA Docker Image\nDESCRIPTION: Docker build command to create the Tuxedo TMA image with version 12.2.2.1.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/dockerfiles/12.2.2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tuxedoalltma:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Building Sample Application Archive\nDESCRIPTION: Command to build the application archive that will be deployed to WebLogic\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-deploy-application/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./build-archive.sh\n```\n\n----------------------------------------\n\nTITLE: Docker Container Log Check Command\nDESCRIPTION: Command to monitor container logs during creation process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f myouddstune\n```\n\n----------------------------------------\n\nTITLE: Removing Oracle WebCenter Sites Docker Image\nDESCRIPTION: Bash command to remove an existing Oracle WebCenter Sites Docker image. This step is typically performed before building a new image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/wcs-wls-docker-install/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi oracle/wcsites:12.2.1.x\n```\n\n----------------------------------------\n\nTITLE: Sample Portlet Container Creation Command\nDESCRIPTION: Example command showing actual values for creating a WebCenter Portlet container with specific port and volume mappings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name WCPortletContainer --network=WCPortalNET -p 7777:7777 -v /scratch/wcpdocker/volumes/wcpportal:/u01/oracle/user_projects --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartWebCenterPortlet.sh\n```\n\n----------------------------------------\n\nTITLE: Building Oracle JDK Base Image in Bash\nDESCRIPTION: Commands to navigate to the OracleJava directory and build the Oracle JDK (Server JRE) base image using a shell script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Analytics Server Docker Image with Docker CLI\nDESCRIPTION: Alternative Docker commands for building the Oracle Analytics Server image without using the provided script. Shows both standard build and build with proxy configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# without proxy\ndocker build --force-rm=true --no-cache=true -t oracle/analyticsserver:6.4 -f Dockerfile .\n\n# with proxy\ndocker build --force-rm=true --no-cache=true --build-arg http_proxy=http://myproxy.example.com:80 --build-arg https_proxy=https://myproxy.example.com:80 -t oracle/analyticsserver:6.4 -f Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo SHM Container\nDESCRIPTION: Command to run the Tuxedo SHM container with volume mounting for user projects. Uses host name 'tuxhost' and runs in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/samples/shm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -h tuxhost -v ${Local_volumes_dir}:/u01/oracle/user_projects oracle/tuxedoshm\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Managed Server Environment Configuration\nDESCRIPTION: Environment variable configuration for the WebCenter Sites Managed Server container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nWCSITES_ADMIN_HOSTNAME=<WCSites Admin Container Name>\nDOMAIN_NAME=<Weblogic_Domain Name>\nSITES_SERVER_NAME=<Sites Server Name>\n```\n\n----------------------------------------\n\nTITLE: Getting Container IP Address\nDESCRIPTION: Docker command to retrieve the container's IP address for accessing WebLogic console.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch-opatch-update/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Password Encryption for RAC Users\nDESCRIPTION: Commands to set up and encrypt passwords for grid, oracle, and database users using OpenSSL encryption.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl enc -aes-256-cbc -salt -in /opt/.secrets/common_os_pwdfile -out /opt/.secrets/common_os_pwdfile.enc -pass file:/opt/.secrets/pwd.key\nrm -f /opt/.secrets/common_os_pwdfile\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables for SOA Managed Server\nDESCRIPTION: This snippet provides a sample configuration of environment variables for a SOA Managed Server. It includes specific values for server name, domain type, and admin server details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMANAGED_SERVER=soa_server1\nDOMAIN_TYPE=soa\nDOMAIN_NAME=soainfra\nADMIN_HOST=soaas\nADMIN_PORT=7001\nADMIN_PASSWORD=Welcome1\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Networks\nDESCRIPTION: Docker command to inspect network details. Provides information about network configuration, connected containers, and IP addressing.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect <network name>\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle Fusion Middleware Infrastructure Docker Image\nDESCRIPTION: Command to retag the Oracle Fusion Middleware Infrastructure image downloaded from Oracle Container Registry with the appropriate version for use in building the SOA image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Check\nDESCRIPTION: Command to verify container creation and status.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Managing OHS Container\nDESCRIPTION: Commands for stopping the OHS container and viewing container logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop <Container name>\n$ docker logs --details <Container-id>\n```\n\n----------------------------------------\n\nTITLE: Resetting Oracle RAC Node Passwords\nDESCRIPTION: Commands to reset passwords for grid and oracle users on an existing Oracle RAC node. This is necessary for SSH setup between existing and new nodes in the cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t -u root racnode1 /bin/bash\nsh  /opt/scripts/startup/resetOSPassword.sh --help\nsh /opt/scripts/startup/resetOSPassword.sh --op_type reset_grid_oracle --pwd_file common_os_pwdfile.enc --secret_volume /run/secrets --pwd_key_file pwd.key\n```\n\n----------------------------------------\n\nTITLE: Monitoring Additional Oracle RAC Container Logs\nDESCRIPTION: Command to follow the logs of the additional Oracle RAC container to monitor the node addition progress.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# docker logs -f racnode2\n```\n\n----------------------------------------\n\nTITLE: OUD Container Startup Log Output\nDESCRIPTION: Example log output showing the OUD Directory Server startup process in the Docker container. The logs show environment variables, server configuration, and successful startup messages.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n$ docker logs -f myoudds2b\n[Fri Sep 18 15:38:32 UTC 2020] - Create and Start OUD Instance - Initializing...\n[Fri Sep 18 15:38:32 UTC 2020] - Environment Variables which would influence OUD Instance setup and configuration\ninstanceType [AddDS2RS]\nhostname [myoudds2b]\nldapPort [1389]\nldapsPort [1636]\nrootUserDN [cn=Directory Manager]\nbaseDN [dc=example2,dc=com]\nadminConnectorPort [1444]\nhttpAdminConnectorPort [1888]\nhttpPort [1080]\nhttpsPort [1081]\n...\n[18/Sep/2020:15:39:04 +0000] category=PROTOCOL severity=NOTICE msgID=2556180 msg=Started listening for new connections on HTTP Connection Handler 0.0.0.0 port 1081\n[18/Sep/2020:15:39:04 +0000] category=CORE severity=NOTICE msgID=458887 msg=The Directory Server has started successfully\n[18/Sep/2020:15:39:04 +0000] category=CORE severity=NOTICE msgID=458891 msg=The Directory Server has sent an alert notification generated by class org.opends.server.core.DirectoryServer (alert type org.opends.server.DirectoryServerStarted, alert ID 458887):  The Directory Server has started successfully\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Oracle Database Restart\nDESCRIPTION: Script to set necessary environment variables for Oracle Restart deployment, including device paths, network settings, and container configuration parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#######COMMON VARIABLE######\nexport CRS_ASM_DEVICE_LIST=/dev/asm-disk1\nexport DB_ASM_DEVICE_LIST=/dev/asm-disk2\nexport RECO_ASM_DEVICE_LIST=/dev/asm-disk3\nexport DEVICE=\"--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1\"\nexport DOMAIN=example.info\nexport DNS_SERVER_IP=10.0.20.25\nexport IMAGE_NAME=oracle/database-rac:21.16.0\nexport PUB_BRIDGE=rac_pub1_nw\n\n######ORACLE RESTART Variable######\nexport GPCNODE=dbmc1\nexport GPCNODE_PUB_IP=10.0.20.195\n```\n\n----------------------------------------\n\nTITLE: Checking Oracle RAC Setup Logs\nDESCRIPTION: Monitors the progress of the Oracle RAC setup by tailing the setup log file. This helps track the installation process and identify any potential issues during the setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnodep1 /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Accessing WebLogic Administration Console\nDESCRIPTION: Commands to retrieve the container IP address and access the WebLogic Administration Console through a web browser.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>\n```\n\n----------------------------------------\n\nTITLE: Extracting filegroup1.jar for Oracle RDBMS 12c\nDESCRIPTION: Shows how to extract the filegroup1.jar file for Oracle RDBMS 12c from the downloaded Oracle GoldenGate ZIP archive. This file is needed for the Docker image build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip -j ~/Downloads/123014_fbo_ggs_Linux_x64_services_shiphome.zip \\\n               fbo_ggs_Linux_x64_services_shiphome/Disk1/stage/Components/oracle.oggcore.services.ora12c/12.3.0.1.2/1/DataFiles/filegroup1.jar\n```\n\n----------------------------------------\n\nTITLE: Changing Database User Password\nDESCRIPTION: SQL command to change the password for the 'system' user in all containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSQL> alter user system identified by MYDBPasswd container=all;\n```\n\n----------------------------------------\n\nTITLE: Building and Running with Docker Compose in Shell\nDESCRIPTION: Uses Docker Compose to build and run the Management Agent container in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> docker-compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Building OCI CLI Container Image Locally\nDESCRIPTION: Command to build the OCI CLI container image from source locally using Docker.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --tag oci .\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Tuxedo Workstation Sample Docker Image\nDESCRIPTION: This command builds a Docker image for the Oracle Tuxedo workstation sample application. It assumes the base oracle/tuxedo:latest image has already been created.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/ws/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/tuxedows .\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Analytics Server 6.4 Patched Docker Image\nDESCRIPTION: This command builds a Docker image for Oracle Analytics Server 6.4 with applied patches. It uses the --force-rm and --no-cache options for a clean build and tags the resulting image as 'oracle/analyticsserver:6.4-patch'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/patches/6.4-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --force-rm=true --no-cache=true -t oracle/analyticsserver:6.4-patch .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Command Usage\nDESCRIPTION: Shell script usage instructions for building Oracle FMW Infrastructure Docker image, showing available parameters and options\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../../OracleFMWInfrastructure/dockerfiles\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle FMW Infrastructure.\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.3\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Connection Manager Image from Registry\nDESCRIPTION: Commands to pull and tag the Oracle Connection Manager image from Oracle Container Registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/OracleConnectionManager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npodman pull container-registry.oracle.com/database/cman:23.5.0.0\npodman tag container-registry.oracle.com/database/cman:23.5.0.0 localhost/oracle/client-cman:23.5.0\n```\n\n----------------------------------------\n\nTITLE: Oracle FMW Infrastructure Image Setup\nDESCRIPTION: Docker commands to pull and tag the Oracle Fusion Middleware Infrastructure base image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker login container-registry.oracle.com\\ndocker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407\\ndocker tag  container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407 oracle/fmw-infrastructure:12.2.1.4.0\\ndocker rmi container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407\n```\n\n----------------------------------------\n\nTITLE: OUD Replication Status Output\nDESCRIPTION: Sample output showing replication status between servers, including connection details, change logs, and trust status.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nEstablishing connections and reading configuration ..... Done.\n\ndc=example1,dc=com - Replication Enabled\n========================================\n\nServer         : Entries  : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10]\n---------------:----------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:-----------------------\nmyoudrs1:1444  : -- [11]  : 0        : --           : 1898     : Disabled       : --        : --       : Up         : --            : 1            : --\nmyoudds1:1444  : 102      : 0        : 0            : -- [12]  : Disabled       : Trusted   : --       : Normal     : Enabled       : 1            : myoudrs1:1898 (GID=1)\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Images\nDESCRIPTION: Docker command to remove images by their ID. Used for cleanup and image management.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rmi <image_id>\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Instant Client 21c Image for Oracle Linux 8\nDESCRIPTION: Command to pull a pre-built Oracle Linux 8 image with Oracle Instant Client 21c installed from the GitHub Container Registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleInstantClient/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/oracle/oraclelinux8-instantclient:21\n```\n\n----------------------------------------\n\nTITLE: Creating OCI Config Directory\nDESCRIPTION: Command to create the OCI configuration directory for first-time setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/.oci\n```\n\n----------------------------------------\n\nTITLE: Pinging KVLite from Remote Host\nDESCRIPTION: Command to ping a KVLite instance from a remote host using the installed Oracle NoSQL software.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/kvstore.jar ping -host $HOSTNAME -port 5000\n```\n\n----------------------------------------\n\nTITLE: Clearing Existing File Systems from ASM Devices\nDESCRIPTION: Command to clear any existing file system from devices before using them with Oracle Restart. This ensures the block devices are properly prepared for ASM storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Docker User Group Verification Commands\nDESCRIPTION: Commands to verify and add a user to the Docker group for container access permissions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo id -Gn <userid>\\n$ sudo /sbin/usermod -a -G docker <userid>\n```\n\n----------------------------------------\n\nTITLE: Node Port Service Configuration\nDESCRIPTION: Kubernetes commands to retrieve node port service configuration for Oracle Database access. Exports listener and XDB ports along with node IP.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/templates/NOTES.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ template \"fullname\" . }})\nexport NODE_XDB_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[1].nodePort}\" services {{ template \"fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho listener at $NODE_IP:$NODE_PORT\necho XDB at $NODE_IP:$NODE_XDB_PORT\n```\n\n----------------------------------------\n\nTITLE: SQLPlus Container Run Command\nDESCRIPTION: Command to run SQLPlus container for database password modification\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --network=InfraNET --rm store/oracle/database-instantclient:12.2.0.1 sqlplus sys/Oradoc_db1@InfraDB:1521/InfraDB.us.oracle.com AS SYSDBA\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Container Port Mapping\nDESCRIPTION: Command to view the container's port mapping, showing which host port is linked to the container's port 80.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/nginx-backend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n# b139cd126fb7        occs/nginx-backend   \"/start.sh\"         5 seconds ago       Up 4 minutes        443/tcp, 0.0.0.0:32790->80/tcp   angry_leakey`\n```\n\n----------------------------------------\n\nTITLE: Building MedRec Docker Image\nDESCRIPTION: Command to build the Docker image for WebLogic MedRec using the Dockerfile in current directory. Tags the image as 12212-medrec.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-medrec/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 12212-medrec .\n```\n\n----------------------------------------\n\nTITLE: Clearing File Systems from ASM Devices\nDESCRIPTION: Command to clear any existing file systems from block devices before using them for Oracle ASM in RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/xvde  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Running Container for Patch Verification\nDESCRIPTION: Docker command to run a container from the patched image for verification purposes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch-fmw-for-k8s/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name verify_patch -it oracle/fmw-infrastructure:12213-update-k8s /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Copying SQL Schema to Database Container\nDESCRIPTION: Copies the createSchema.sql file into the running Database container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker cp createSchema.sql InfraDB:/u01/app/oracle\n```\n\n----------------------------------------\n\nTITLE: Starting Management Agent Container in Shell\nDESCRIPTION: Starts a stopped Management Agent container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n> docker start mgmtagent-container\n```\n\n----------------------------------------\n\nTITLE: Creating Patch Directories\nDESCRIPTION: Commands to create directories for OAM patches and Opatch patches\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p <work directory>/OracleAccessManagement/dockerfiles/12.2.1.4.0/patches\n$ mkdir -p <work directory>/OracleAccessManagement/dockerfiles/12.2.1.4.0/opatch_patch\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tuxedo Workstation Sample Container\nDESCRIPTION: This command runs a Docker container using the oracle/tuxedows image. It sets the hostname, mounts a local directory to /u01/oracle/user_projects in the container, and runs the container in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/ws/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -h tuxhost -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedows\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Unified Directory Docker Image using Build Script\nDESCRIPTION: Usage instructions for the buildDockerImage.sh script which builds the Oracle Unified Directory Docker image\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh\nUsage: buildDockerImage.sh -v [version]\nBuilds a Docker Image for Oracle Unified Directory\n\nParameters:\n   -v: version to build. Required.\n   Choose : 12.2.1.4.0\n   -c: enables Docker image layer cache during build\n   -s: skips the MD5 check of packages\n```\n\n----------------------------------------\n\nTITLE: Setting RAC Secret Password Environment Variable in Bash\nDESCRIPTION: Command to set the RAC secret password as an environment variable, which will be used for Oracle RAC container environment authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport RAC_SECRET=<secret-password>\n```\n\n----------------------------------------\n\nTITLE: Create Local User Account\nDESCRIPTION: Commands to create a dedicated user and group for running the Management Agent container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngroupadd -g 9100 orclmgmtagntgrp\nuseradd orclmgmtagntusr -u 9200 -g 9100 -m -s /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for OUD Docker Image\nDESCRIPTION: Sets up environment variables including base directory paths, Oracle home, script locations, and PATH modifications for OUD installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV BASE_DIR=/u01 \\\n    ORACLE_HOME=/u01/oracle \\\n    SCRIPT_DIR=/u01/oracle/container-scripts \\\n    USER_PROJECTS_DIR=/u01/oracle/user_projects \\\n\tOUD_INSTANCE_NAME=${OUD_INSTANCE_NAME:-asinst_1} \\\t\n    PATH=$PATH:${JAVA_HOME}/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/container-scripts\n```\n\n----------------------------------------\n\nTITLE: Usage of buildPatchedContainerImage.sh Script for Oracle RAC\nDESCRIPTION: Demonstrates the usage of the buildPatchedContainerImage.sh script, which is used to build a patched Oracle RAC Database container image. It shows the available options and parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/applypatch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n     [oracle@localhost applypatch]# ./buildPatchedContainerImage.sh -h\n      Usage: buildPatchedContainerImage.sh -v [version] -t [image_name:tag] -p [patch version] [-o] [container build option]\n      It builds a container image for RAC patched image\n\n      Parameters:\n       -v: version to build\n        Choose one of: latest\n       -o: passes on container build option\n       -p: patch label to be used for the tag\n```\n\n----------------------------------------\n\nTITLE: Cloning Oracle Docker Images Repository\nDESCRIPTION: Git command to clone the Oracle Docker images repository containing RAC configuration files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:oracle/docker-images.git\n```\n\n----------------------------------------\n\nTITLE: Stopping OHS Container\nDESCRIPTION: Command to stop the running Oracle HTTP Server container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/samples/12214-patch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop <Container name>\n```\n\n----------------------------------------\n\nTITLE: Pinging KVLite from Another Container\nDESCRIPTION: Command to ping a KVLite instance from another container using container linking.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n  java -jar lib/kvstore.jar ping -host store -port 5000\n```\n\n----------------------------------------\n\nTITLE: Container Connection Command\nDESCRIPTION: Command to connect to a running RAC container for management and troubleshooting purposes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -i -t racnodep1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Password Encryption Commands\nDESCRIPTION: Series of commands to generate and encrypt password file using OpenSSL.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/.secrets\nopenssl genrsa -out key.pem\nopenssl rsa -in key.pem -out key.pub -pubout\nopenssl pkeyutl -in pwdfile.txt -out pwdfile.enc -pubin -inkey key.pub -encrypt\nrm -rf /opt/.secrets/pwdfile.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Build\nDESCRIPTION: Commands to set up proxy environment variables needed for accessing yum.oracle.com during the build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleEssbase/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=myproxy.example.com:80\n$ export https_proxy=myproxy.example.com:80\n$ export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Networks to DNS Container on Podman Host\nDESCRIPTION: Commands to disconnect the default network and connect the DNS container to the previously created RAC networks with specific IP addresses on a Podman host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman network disconnect podman rac-dnsserver\npodman network connect rac_pub1_nw --ip 172.16.1.25 rac-dnsserver\npodman network connect rac_priv1_nw --ip 192.168.17.25 rac-dnsserver\npodman start rac-dnsserver\n```\n\n----------------------------------------\n\nTITLE: Starting Additional Oracle RAC Container\nDESCRIPTION: Command to start the additional Oracle RAC container after creation and network configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# docker start racnode2\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy for OIG Docker Build\nDESCRIPTION: Commands to set proxy server settings for the Docker build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n$ export https_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n```\n\n----------------------------------------\n\nTITLE: Running Application Container\nDESCRIPTION: Command to run the container with the deployed application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 8011:8011 12212-summercamps-msiserver\n```\n\n----------------------------------------\n\nTITLE: Creating Work Directory for OIG Docker Files\nDESCRIPTION: Commands to create a work directory and clone the OIG Docker files repository.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir <work directory>\n$ cd <work directory>\n$ git clone https://github.com/oracle/docker-images/\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Configuration\nDESCRIPTION: Commands to set HTTP and HTTPS proxy server configurations for package downloads\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n$ export https_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n```\n\n----------------------------------------\n\nTITLE: Running Oracle Tuxedo WS SSL Server Container\nDESCRIPTION: Command to run the Tuxedo WS SSL server container with volume mounting for user projects. Sets the hostname to 'tuxhost' and runs in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/core/samples/ws_ssl_svr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -h tuxhost -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedows_svr\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data Volume Mount\nDESCRIPTION: Commands to create user, directories and set permissions for WebCenter Sites data volume\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /usr/sbin/useradd -u 1000 -g 1000 <new_userid>\n$ mkdir -p /scratch/WCSitesVolume/WCSites /scratch/WCSitesVolume/WCSitesShared\n$ sudo chown 1000:1000 /scratch/WCSitesVolume/WCSites /scratch/WCSitesVolume/WCSitesShared\n```\n\n----------------------------------------\n\nTITLE: Building JDK 21 Container Image with Oracle Linux 9\nDESCRIPTION: This snippet demonstrates how to build a Docker image for JDK 21 using Oracle Linux 9 as the base image, which is an optional alternative to the default Oracle Linux 8.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleJava/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../OracleJava/21\ndocker build --file Dockerfile.ol9 --tag oracle/jdk:11-oraclelinux9 .\n```\n\n----------------------------------------\n\nTITLE: Starting an Oracle Unified Directory Instance (Bash)\nDESCRIPTION: This script starts an Oracle Unified Directory instance. It should be executed as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n60_start_oud_instance.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Database Environment Variables\nDESCRIPTION: Defines environment variables for the Oracle Database container, including SID, PDB, domain, and feature bundle.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDB_SID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates the required network infrastructure for the RAC cluster, including public and private networks. The private networks are configured without DNS and set as internal to isolate cluster communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns --internal\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Common Scripts in Bash\nDESCRIPTION: Creates a directory to store common scripts for Oracle RAC setup on the container host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /opt/containers/common_scripts\n```\n\n----------------------------------------\n\nTITLE: Building Patched OHS Docker Image\nDESCRIPTION: Command to build a new Docker image with the applied patch for Oracle HTTP Server 12.2.1.4.0\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/samples/12214-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build  -t oracle/ohs:12214-patch .\n```\n\n----------------------------------------\n\nTITLE: Building JDK 17 Container Image with Oracle Linux 8\nDESCRIPTION: This snippet shows how to build a Docker image for JDK 17 using Oracle Linux 8 as the base image. It requires a download token and OCI region to be provided as build arguments.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleJava/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ../OracleJava/17\ndocker build --file Dockerfile.ol8 --tag oracle/jdk:17 --build-arg JDK17_TOKEN=<$token> --build-arg OCI_REGION=<$region> .\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Configuration\nDESCRIPTION: Command to view the contents of the generated configuration file inside the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat /hello-world.conf\n```\n\n----------------------------------------\n\nTITLE: Creating Directories and Symbolic Links for Oracle Identity Management\nDESCRIPTION: Creates necessary directories and symbolic links for Oracle Identity Management setup, including Java and connector directories.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nUSER root\n\nRUN mkdir -p /u01/oracle/dockertools && \\\n\tmkdir /usr/java && \\\n\tln -s /u01/jdk /usr/java/latest \n\nRUN cp -rf /u01/oracle/idm/server/ConnectorDefaultDirectory /u01/oracle/idm/server/ConnectorDefaultDirectory_orig && \\\n    rm -rf /u01/oracle/idm/server/ConnectorDefaultDirectory && \\\n    ln -s  /u01/oracle/user_projects/domains/ConnectorDefaultDirectory /u01/oracle/idm/server/ConnectorDefaultDirectory\n```\n\n----------------------------------------\n\nTITLE: Environment File for WebCenter Portal Docker Setup\nDESCRIPTION: Sample environment file (webcenter.env.list) containing configuration parameters for the WebCenter Portal Docker setup. This file defines database, server, and integration settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Database Configuration details\nDB_DROP_AND_CREATE=<true or false>\nDB_CONNECTION_STRING=<Hostname/ContainerName>:<Database Port>/<DB_PDB>.<DB_DOMAIN>\nDB_RCUPREFIX=<RCU Prefix>\nDB_PASSWORD=<Database Password>\nDB_SCHEMA_PASSWORD=<Schema Password>\n\n# Admin Server Configuration details\nADMIN_SERVER_CONTAINER_NAME=<Admin Server Container Name>\nADMIN_PORT=<Admin Server Port>\nADMIN_PASSWORD=<Admin Server Password>\nADMIN_USERNAME=<Admin Server User Name>\nMANAGED_SERVER_PORT=<Managed Server Port>\n\n# Portlet Server Configuration details\nMANAGED_SERVER_PORTLET_PORT=<Portlet Server Port>\n\n# Content Server Connection Configuration details\nCONFIGURE_UCM_CONNECTION=<true or false>\n# Valid option for connection type are socket,jaxws \nUCM_SOCKET_TYPE=<UCM Socket Type >\n# Set to true if UCM is using SSL or else false\nUCM_USING_SSL=<true or false>\nUCM_HOST=<UCM Host>\nUCM_PORT=<UCM Port>\nUCM_ADMIN_USER=<UCM Admin User>\nUCM_INTRADOC_SERVER_PORT=<required if socket>\nUCM_CLIENT_SECURITY_POLICY=<required if jaxws>\n\n# Elasticsearch Server Configuration details\nSEARCH_APP_USERNAME=<Search User Name>\nSEARCH_APP_USER_PASSWORD=<Search User Password>\nELASTIC_SEARCH_INSTALLER_FILE_NAME=<Elasticsearch Installer File Name>\nELASTIC_SEARCH_VERSION=<Elasticsearch Version>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Database Container Logs\nDESCRIPTION: Command to monitor the database container logs in real-time\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f --tail 900 WCSites12212Database\n```\n\n----------------------------------------\n\nTITLE: Running RAC Storage Container on Podman Host\nDESCRIPTION: Podman command to run the NFS storage container for RAC with the necessary configuration settings, including network, volume mounts, and capabilities.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\npodman run -d -t \\\n --hostname racnode-storage \\\n --dns-search=example.com  \\\n --cap-add SYS_ADMIN \\\n --cap-add AUDIT_WRITE \\\n --cap-add NET_ADMIN \\\n --volume /scratch/stage/rac-storage/$ORACLE_DBNAME:/oradata \\\n --network=rac_priv1_nw \\\n --ip=192.168.17.80 \\\n --systemd=always \\\n --restart=always \\\n --name racnode-storage \\\n localhost/oracle/rac-storage-server:latest\n```\n\n----------------------------------------\n\nTITLE: Running Logspout Docker Container with Socket Mount\nDESCRIPTION: Example command showing how to run the Logspout container with the required Docker socket volume mount for accessing Docker engine metrics.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/logspout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -e ... -v /var/run/docker.sock:/var/run/docker.sock ...\n```\n\n----------------------------------------\n\nTITLE: Update Database Configuration\nDESCRIPTION: Configuration update in environment file to reuse existing database schema.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nDB_DROP_AND_CREATE=false\n```\n\n----------------------------------------\n\nTITLE: Curling NGINX Backend Container\nDESCRIPTION: Example of sending a request to the NGINX backend container and receiving an HTML response containing the container's hostname.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/nginx-backend/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:32790\n# <h1>b139cd126fb7</h1>\n```\n\n----------------------------------------\n\nTITLE: Create Work Directory and Clone Repository\nDESCRIPTION: Commands to create a working directory and clone the Oracle Docker images repository\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir <work directory>\n$ cd <work directory>\n$ git clone https://github.com/oracle/docker-images/\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network Bridge for Veridata\nDESCRIPTION: Creates a bridge network for communication between Admin Server, Managed Server and database containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleVeridata/12.2.1.4/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d bridge VdtBridge\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Oracle Identity Management Docker Container\nDESCRIPTION: Defines environment variables for Oracle Home, Java security, domain configuration, ports, and file paths essential for OIM setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nENV ORACLE_HOME=/u01/oracle \\\n    USER_MEM_ARGS=\"-Djava.security.egd=file:/dev/./urandom\" \\\n    PATH=$PATH:$JAVA_HOME/bin:$ORACLE_HOME/oracle_common/common/bin \\\n    DOMAIN_NAME=\"${DOMAIN_NAME:-base_domain}\" \\\n    DOMAIN_ROOT=\"${DOMAIN_ROOT:-/u01/oracle/user_projects/domains}\" \\\n    DOMAIN_HOME=\"${DOMAIN_ROOT:-/u01/oracle/user_projects/domains}\"/\"${DOMAIN_NAME:-base_domain}\" \\\n    ADMIN_PORT=\"${ADMIN_PORT:-7001}\" \\\n    SOA_PORT=\"${SOA_PORT:-8001}\" \\\n    OIM_PORT=\"${OIM_PORT:-14000}\" \\\n    OIM_SSL_PORT=\"${OIM_SSL_PORT:-14002}\" \\\n    PATH=$PATH:/u01/oracle \\\n    DOMAIN_TYPE=\"oim\" \\\n    PATH=$PATH:/usr/java/default/bin:$ORACLE_HOME/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/dockertools \\\n    HEALTH_SCRIPT_FILE=/u01/oracle/dockertools/get_healthcheck_url.sh\n```\n\n----------------------------------------\n\nTITLE: Scaling Service\nDESCRIPTION: Commands to scale the service up to 5 replicas or down to 1 replica.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker service scale city_activity_guide=5\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker service scale city_activity_guide=1\n```\n\n----------------------------------------\n\nTITLE: Downloading and Preparing OIG Installation Files\nDESCRIPTION: Commands to download, unzip, and copy the OIG installation JAR file to the correct location.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip fmw_12.2.1.4.0_idm_Disk1_1of1.zip\n$ cp fmw_12.2.1.4.0_idm.jar <work directory>/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/fmw_12.2.1.4.0_idm_generic.jar\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo SHM Docker Image\nDESCRIPTION: Commands to build the Tuxedo SHM sample Docker image. The image extends the base oracle/tuxedo:12.2.2 image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/samples/shm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tuxedoshm .\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo Message Queue Docker Image\nDESCRIPTION: Command to build the Docker image for Tuxedo Message Queue 12.1.3. This script processes the Dockerfile and creates a Docker image tagged as oracle/tuxedotmq:12.1.3.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_message_q/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildDockerImage.sh -v 12.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for OIG Patches\nDESCRIPTION: Commands to create directories for storing OIG patches and Opatch updates.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p <work directory>/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/patches\n$ mkdir -p <work directory>/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/opatch_patch\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Container Image for Podman\nDESCRIPTION: Command to build Oracle RAC container image for Podman deployment, specifying version and build arguments for base image and slimming options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleRealApplicationClusters/dockerfiles\n./buildContainerImage.sh -v <Software Version> -o '--build-arg  BASE_OL_IMAGE=oraclelinux:8 --build-arg SLIMMING=true|false'\n\n#  for example ./buildContainerImage.sh -v 21.3.0 -o '--build-arg  BASE_OL_IMAGE=oraclelinux:8 --build-arg SLIMMING=false'\n```\n\n----------------------------------------\n\nTITLE: Load Balancer Service Port Configuration\nDESCRIPTION: Kubernetes commands to retrieve load balancer service ports and IP address for Oracle Database access. Exports listener and XDB ports along with load balancer IP.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/templates/NOTES.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport LOAD_BALANCER_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].port}\" services {{ template \"fullname\" . }})\nexport LOAD_BALANCER_XDB_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[1].port}\" services {{ template \"fullname\" . }})\nexport LOAD_BALANCER_IP=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.status.loadBalancer.ingress[0].ip}\" services {{ template \"fullname\" . }})\necho listener at $LOAD_BALANCER_IP:$LOAD_BALANCER_PORT\necho XDB at $LOAD_BALANCER_IP:$LOAD_BALANCER_XDB_PORT\n```\n\n----------------------------------------\n\nTITLE: Creating Ipvlan Network for NFS Storage Container\nDESCRIPTION: Command to create an ipvlan network with a specific subnet and parent interface for the NFS storage container. This provides another alternative network configuration option.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d ipvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Deploying Storage Container for Oracle RAC\nDESCRIPTION: Deploys the storage container for Oracle RAC with systemd support and monitors its setup logs to ensure proper initialization.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always\" up -d ${STORAGE_CONTAINER_NAME}\npodman-compose exec ${STORAGE_CONTAINER_NAME} tail -f /tmp/storage_setup.log\n\nExport list for racnode-storage:\n/oradata *\n#################################################\n Setup Completed                                 \n#################################################\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output for Managed Server Readiness\nDESCRIPTION: Example log output showing that the Admin server is running and ready to start the Managed server. This indicates a successful initialization phase.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nAdmin server running, ready to start Managed server\n```\n\n----------------------------------------\n\nTITLE: Deploying Connection Manager (CMAN) Container\nDESCRIPTION: Starts the Connection Manager container for the RAC setup and displays its logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\npodman-compose logs ${CMAN_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node with Block Devices\nDESCRIPTION: Command to create an additional Oracle RAC container using block devices for shared storage. This configures the container to join an existing RAC cluster by specifying the existing node name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# docker create -t -i \\\n  --hostname racnode2 \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/xvde:/dev/asm_disk1 \\\n  --device=/dev/zvdf:/dev/asm_disk2 \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnode1 \\\n  -e NODE_VIP=172.16.1.161  \\\n  -e VIP_HOSTNAME=racnode2-vip  \\\n  -e PRIV_IP=192.168.17.151  \\\n  -e PRIV_HOSTNAME=racnode2-priv \\\n  -e PUBLIC_IP=172.16.1.151  \\\n  -e PUBLIC_HOSTNAME=racnode2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnode-scan \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnode2 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting NFS Storage Configuration\nDESCRIPTION: Configures NFS storage path and database name variables\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\n```\n\n----------------------------------------\n\nTITLE: Checking Replication Status with DSREPLICATION Command\nDESCRIPTION: Command to check replication status between Oracle Unified Directory servers using the dsreplication CLI with a temporary client container. This connects to a directory server to display the replication status of all replicated suffixes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/oud/bin/dsreplication status \\\n--hostname myoudds1b \\\n--port 1444 \\\n--portProtocol LDAP \\\n--bindDN \"cn=Directory Manager\" \\\n--trustAll\n\nEnter the admin password when prompted:\n\n>>>> Specify Oracle Unified Directory LDAP connection parameters\n\nPassword for user 'admin': Oracle123\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Shell for Patch Verification\nDESCRIPTION: This command provides interactive shell access to the running 'verify_patch' container for further verification steps.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker exec -it verify_patch /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Block Device RAC Node\nDESCRIPTION: Sets up environment variables needed for adding a new node to Oracle RAC cluster using block devices. Defines network configurations, ASM disk locations, and container specifications.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=30s\nexport HEALTHCHECK_TIMEOUT=3s\nexport HEALTHCHECK_RETRIES=240\nexport DNS_HOST_NAME=rac-dns\nexport DNS_DOMAIN=\"example.com\"\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"172.16.1.0/24\"\nexport PRIVATE_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport DNS_PUBLIC_IP=172.16.1.25\nexport INSTALL_NODE=racnodep1\nexport SCAN_NAME=\"racnodepc1-scan\"\nexport SCAN_IP=172.16.1.236\nexport ASM_DISCOVERY_DIR=\"/dev/\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport COMMON_OS_PWD_FILE=\"common_os_pwdfile.enc\"\nexport PWD_KEY=\"pwd.key\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE_IMAGE_NAME=\"localhost/oracle/database-rac:21.3.0-21.13.0\"\nexport RACNODE2_NODE_VIP=172.16.1.201\nexport RACNODE2_VIP_HOSTNAME=\"racnodep2-vip\"\nexport RACNODE2_PRIV_IP=192.168.17.171\nexport RACNODE2_PRIV_HOSTNAME=\"racnodep2-priv\"\nexport RACNODE2_PUBLIC_IP=172.16.1.171\nexport RACNODE2_PUBLIC_HOSTNAME=\"racnodep2\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\n```\n\n----------------------------------------\n\nTITLE: Installing Podman Compose on OL8\nDESCRIPTION: Commands to install the latest podman-compose package from EPEL repository on Oracle Linux 8.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf config-manager --enable ol8_developer_EPEL\ndnf install podman-compose -y\n```\n\n----------------------------------------\n\nTITLE: Creating RAC DNS Server Container on Docker Host\nDESCRIPTION: Command to create a container for the RAC DNS server on a Docker host with specific hostname, domain, and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker create --hostname racdns \\\n  --dns-search=example.com \\\n  --cap-add=AUDIT_WRITE \\\n  -e DOMAIN_NAME=\"example.com\" \\\n  -e WEBMIN_ENABLED=false \\\n  -e RAC_NODE_NAME_PREFIXD=\"racnoded\" \\\n  -e SETUP_DNS_CONFIG_FILES=\"setup_true\"  \\\n  --privileged=false \\\n  --name rac-dnsserver \\\n oracle/rac-dnsserver:latest\n```\n\n----------------------------------------\n\nTITLE: Viewing OUD Container Creation Logs\nDESCRIPTION: This command tails the logs of the OUD container, allowing you to monitor the progress of container creation and startup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs -f myoudautotune\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Container\nDESCRIPTION: Command to open an interactive bash shell in the Oracle RAC container for administrative tasks or troubleshooting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# docker exec -i -t racnode1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Specifying Oracle Unified Directory Services Manager Docker Image\nDESCRIPTION: Defines the Docker image name and tag for Oracle Unified Directory Services Manager version 12.2.1.4.0.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n***Image***: `oracle/oudsm:12.2.1.4.0`\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Oracle Tuxedo 12.2.2 Rolling Patch\nDESCRIPTION: This command builds a Docker image with Oracle Tuxedo 12.2.2 rolling patch applied. It tags the new image as oracle/tuxedoall:12.2.2.1. Ensure the patch package is in the same directory as the Dockerfile before running this command.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/samples/apply-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndocker build -t oracle/tuxedoall:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo Docker Container\nDESCRIPTION: Command to run the Tuxedo Docker container with a mounted volume for external storage. The LOCAL_DIR variable should be set to a local directory path.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoall\n```\n\n----------------------------------------\n\nTITLE: Creating RAC Host File Directory\nDESCRIPTION: Commands to create directory and host file for RAC configuration on both Podman and Docker hosts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/containers/\ntouch /opt/containers/rac_host_file\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Admin Environment Configuration\nDESCRIPTION: Environment variables configuration for WebCenter Sites admin server including database connection, credentials and site parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\nDOCKER_HOST=<IP or Hostname of Docker Host. Should not use 'localhost' as IP or hostname of docker host.>\nDB_CONNECTSTRING=<Hostname/ContainerName>:<Database Port>/<DB_PDB>.<DB_DOMAIN>\nDB_USER=<By default: sys>\nDB_PASSWORD=<Database Password>\nRCU_PREFIX=<RCU_PREFIX>\nDB_SCHEMA_PASSWORD=<database_schema_password: if not provided, it gets auto generated>\nSAMPLES=<To install sample Sites, set samples as true, else set as false>\nDOMAIN_NAME=<Weblogic Domain Name optional>\nSITES_SERVER_NAME=<Sites Server Name optional>\nADMIN_USERNAME=<Weblogic Admin UserName, default: weblogic>\nADMIN_PASSWORD=<Weblogic Admin Password: if not provided, it gets auto generated>\nSITES_ADMIN_USERNAME=<Sites Admin UserName, default: ContentServer>\nSITES_ADMIN_PASSWORD=<Sites Admin Password: if not provided, it gets auto generated>\nSITES_APP_USERNAME=<Sites Application UserName, default: fwadmin>\nSITES_APP_PASSWORD=<Sites Application Password: if not provided, it gets auto generated>\nSITES_SS_USERNAME=<Sites SatelliteServer UserName, default: SatelliteServer>\nSITES_SS_PASSWORD=<Sites SatelliteServer Password: if not provided, it gets auto generated>\n```\n\n----------------------------------------\n\nTITLE: Creating Helm Package for Oracle Database\nDESCRIPTION: Command to package Oracle Database Helm chart into a deployable archive.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm package helm-charts/oracle-db\n```\n\n----------------------------------------\n\nTITLE: Adding Certificate to Specific Deployment\nDESCRIPTION: Example of using addCertificate utility to add an HTTPS certificate to a specific deployment's client wallet.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naddCertificate localhost:443 Target\n```\n\n----------------------------------------\n\nTITLE: Starting Racnodep1 Container\nDESCRIPTION: Starts the first RAC node container (racnodep1) after starting and configuring racnodep2. This begins the RAC cluster creation process which can take at least 40 minutes to complete.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n# podman start racnodep1\n```\n\n----------------------------------------\n\nTITLE: Setting Hostname Environment Variable\nDESCRIPTION: Command to set the TUX_HOSTNAME environment variable for testing the application locally.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport TUX_HOSTNAME=\"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Oracle GoldenGate Container Launch\nDESCRIPTION: Minimal command to run Oracle GoldenGate container with default settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run oracle/goldengate:23.4\n```\n\n----------------------------------------\n\nTITLE: Example Oracle RAC Slim Image Build Command\nDESCRIPTION: Specific example showing how to build a version 21.3.0 Oracle RAC slim image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0 -i -o '--build-arg SLIMMING=true'\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Oracle RAC Podman Compose Setup\nDESCRIPTION: Sets all the necessary environment variables required by the podman-compose.yml file for Oracle RAC configuration, including network addresses, container names, and storage parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE1_CONTAINER_NAME=racnodep1\nexport RACNODE1_HOST_NAME=racnodep1\nexport RACNODE1_PUBLIC_IP=10.0.20.170\nexport RACNODE1_CRS_PRIVATE_IP1=192.168.17.170\nexport RACNODE1_CRS_PRIVATE_IP2=192.168.18.170\nexport INSTALL_NODE=racnodep1\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep1,viphost:racnodep1-vip;pubhost:racnodep2,viphost:racnodep2-vip\\\"\"\nexport SCAN_NAME=racnodepc1-scan\nexport CRS_ASM_DISCOVERY_STRING=\"/oradata\"\nexport CRS_ASM_DEVICE_LIST=\"/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img\"\nexport RACNODE2_CONTAINER_NAME=racnodep2\nexport RACNODE2_HOST_NAME=racnodep2\nexport RACNODE2_PUBLIC_IP=10.0.20.171\nexport RACNODE2_CRS_PRIVATE_IP1=192.168.17.171\nexport RACNODE2_CRS_PRIVATE_IP2=192.168.18.171\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DNS_PRIVATE1_IP=192.168.17.25\nexport DNS_PRIVATE2_IP=192.168.18.25\nexport CMAN_CONTAINER_NAME=racnodepc1-cman\nexport CMAN_HOST_NAME=racnodepc1-cman\nexport CMAN_IMAGE_NAME=\"localhost/oracle/client-cman:23.5.0\"\nexport CMAN_PUBLIC_IP=10.0.20.166\nexport CMAN_PUBLIC_HOSTNAME=\"racnodepc1-cman\"\nexport DB_HOSTDETAILS=\"HOST=racnodepc1-scan:RULE_ACT=accept,HOST=racnodep1:IP=10.0.20.170\"\nexport STORAGE_CONTAINER_NAME=\"racnode-storage\"\nexport STORAGE_HOST_NAME=\"racnode-storage\"\nexport STORAGE_IMAGE_NAME=\"localhost/oracle/rac-storage-server:latest\"\nexport ORACLE_DBNAME=\"ORCLCDB\"\nexport STORAGE_PUBLIC_IP=10.0.20.80\nexport NFS_STORAGE_VOLUME=\"/scratch/stage/rac-storage/$ORACLE_DBNAME\"\nexport GRID_RESPONSE_FILE=\"/scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\"\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Default Docker Build Arguments Configuration\nDESCRIPTION: Default configuration values for Docker build arguments including admin server name, host, ports, and domain name settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-domain-home-in-image-wdt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nCUSTOM_ADMIN_NAME = admin-server\nCUSTOM_ADMIN_HOST = wlsadmin\nCUSTOM_ADMIN_PORT = 7001\nCUSTOM_MANAGED_SERVER_PORT = 8001\nCUSTOM_DEBUG_PORT = 8453\nCUSTOM_DOMAIN_NAME = base_domain\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo Bankapp Container\nDESCRIPTION: Command to create and run a container from the Tuxedo bankapp image, exposing port 5955.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name tuxedo-bankapp -d -p 5955:5955 tuxedo-bankapp\n```\n\n----------------------------------------\n\nTITLE: Listing OUD Instance Tuning Parameters\nDESCRIPTION: This command runs the dstune utility inside the OUD container to list the current tuning parameters for the OUD instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/user_projects/myoudautotune/OUD/bin/dstune list\n```\n\n----------------------------------------\n\nTITLE: Running with Custom Server Name\nDESCRIPTION: Command to run the container with a specific managed server name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name msiserver --env MS_NAME=managedServer1 12212-msiserver\n```\n\n----------------------------------------\n\nTITLE: Listing and Moving Unplugged PDB Files\nDESCRIPTION: These Bash commands list the contents of the unplugged PDB directory and move it to a new location.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/unplugpdb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n[oracle@localhost ~]$ ls -al /home/oracle/oradata/DEVOPSCDB/MYPDB/\ntotal 711724\ndrwxrwxrwx. 2 500 500        98 Mar  6 11:55 .\ndrwxrwxrwx. 4 500 500      4096 Mar  6 11:46 ..\n-rwxrwxrwx. 1 500 500      7344 Mar  6 11:55 mypdb.xml\n-rwxrwxrwx. 1 500 500 356524032 Mar  6 11:55 sysaux01.dbf\n-rwxrwxrwx. 1 500 500 262152192 Mar  6 11:55 system01.dbf\n-rwxrwxrwx. 1 500 500 104865792 Mar  6 11:55 undotbs01.dbf\n-rwxrwxrwx. 1 500 500   5251072 Mar  6 11:55 users01.dbf\n\n[oracle@localhost ~]$ mv /home/oracle/oradata/DEVOPSCDB/MYPDB .\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Oracle RAC Nodes\nDESCRIPTION: Commands to create and clean the directory paths for mounting to Oracle RAC containers. These directories will store the Oracle RAC software binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /scratch/rac/cluster01/node1\nrm -rf /scratch/rac/cluster01/node1/*\n\nmkdir -p /scratch/rac/cluster01/node2\nrm -rf /scratch/rac/cluster01/node2/*\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for RAC Storage\nDESCRIPTION: Commands to set SELinux policy to permissive mode for allowing container access to ASM disks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsed -i 's/^SELINUX=.*/SELINUX=permissive/' /etc/selinux/config\nreboot\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo Docker Image\nDESCRIPTION: Commands to build the Tuxedo Docker image using a shell script or direct Docker command. Requires the base Tuxedo image to be built first.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./buildDockerImage.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t oracle/tuxedoall 12.2.2/\n```\n\n----------------------------------------\n\nTITLE: Configuring an Oracle Unified Directory Instance (Bash)\nDESCRIPTION: This script configures an existing Oracle Unified Directory instance. It should be executed as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n63_config_oud_instance.sh\n```\n\n----------------------------------------\n\nTITLE: Installing NFS Utils for RAC with NFS Storage\nDESCRIPTION: Command to install the nfs-utils package on the Docker host machine, which is required for setting up Oracle RAC with NFS storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum -y install nfs-utils\n```\n\n----------------------------------------\n\nTITLE: Pulling and Tagging Oracle FMW Infrastructure Image\nDESCRIPTION: Commands to pull the Oracle FMW Infrastructure 12.2.1.4.x image from Oracle Container Registry and tag it for use with the OUDSM Dockerfile.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login container-registry.oracle.com\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-191222 oracle/fmw-infrastructure:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Java 8 Server JRE Docker Image\nDESCRIPTION: Commands to build the Oracle Java 8 Server JRE Docker image, which is a prerequisite for the EDQ image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OracleJava/java-8\n$ docker build -t oracle/serverjre:8 .\n```\n\n----------------------------------------\n\nTITLE: Account Deposit Request\nDESCRIPTION: cURL command to deposit funds into an account, with example JSON response showing updated balance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-type:application/json\" http://${TUX_HOSTNAME}:5955/DEPOSIT -d '{\"ACCOUNT_ID\":10001,\"SAMOUNT\":\"1\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ACCOUNT_ID\":   10001,\n        \"BALANCE\":      5569,\n        \"STATLIN\":      \"\",\n        \"FORMNAM\":      \"CDEPOSIT\",\n        \"SBALANCE\":     \"$5569.00\",\n        \"SAMOUNT\":      \"$1.00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Elasticsearch Container Creation\nDESCRIPTION: Example command with actual values for creating Elasticsearch container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name ESContainer --network=WCPortalNET -p 9200:9200 --volumes-from WCPortalContainer -v /scratch/wcpdocker/volumes/es:/u01/esHome/esNode/data --env-file /scratch/<userid>/docker/webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartElasticsearch.sh\n```\n\n----------------------------------------\n\nTITLE: Building OIG Docker Image\nDESCRIPTION: Command to build the Oracle Identity Governance Docker image using the provided script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <work directory>/docker-images/OracleIdentityGovernance/dockerfiles\n$ sh buildDockerImage.sh -v 12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Oracle Database Chart with Helm 3.x\nDESCRIPTION: Command to uninstall Oracle Database deployment using Helm 3.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall db19c\n```\n\n----------------------------------------\n\nTITLE: Defining Oracle Database Environment Variables in Shell\nDESCRIPTION: Sets environment variables for Oracle Database configuration, including the SID, PDB name, domain, and bundle type. These variables are crucial for initializing and connecting to the database instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/env.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nDB_SID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Setting Up Persistent Storage for Oracle Analytics Server Container\nDESCRIPTION: Creates a host directory for persistent storage and mounts it to the container's /u01/oracle/user_projects directory. This ensures that domain configurations and data are preserved even if the container is removed.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /scratch/bi && chmod 700 /scratch/bi && chown 1000:1000 /scratch/bi\ndocker run -v /scratch/bi:/u01/oracle/user_projects ......\n```\n\n----------------------------------------\n\nTITLE: Clearing Existing File Systems from ASM Devices in Bash\nDESCRIPTION: Uses the dd command to clear any existing file systems from ASM devices before using them for RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# dd if=/dev/zero of=/dev/xvde  bs=8k count=100000\n```\n\n----------------------------------------\n\nTITLE: Building NFS Storage Container Image for Podman\nDESCRIPTION: Commands to navigate to the dockerfiles directory and build the NFS Storage Container image for Podman using the provided build script with the latest version.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleRACStorageServer/dockerfiles\n./buildDockerImage.sh -v latest\n```\n\n----------------------------------------\n\nTITLE: Deploying Connection Manager Container\nDESCRIPTION: Deploys and starts the Oracle Connection Manager (CMAN) container\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\n\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Build Script Usage Options\nDESCRIPTION: Description of buildContainerImage.sh script parameters including version, MD5 checksum, image naming, and build options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-v: version to build\n-i: ignore the MD5 checksums\n-t: user-defined image name and tag (e.g., image_name:tag). Default is set to `oracle/database-rac:<VERSION>` for  RAC Image and `oracle/database-rac:<VERSION>-slim` for RAC slim image.\n-o: passes on container build option (e.g., --build-arg SLIMMIMG=true for slim,--build-arg  BASE_OL_IMAGE=oraclelinux:9 to change base image). The default is \"--build-arg SLIMMING=false\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to RAC Container\nDESCRIPTION: Command to connect to the RAC container shell for troubleshooting and log inspection.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t racnoded1 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: OUD Java Properties Configuration\nDESCRIPTION: Configures Java properties for various OUD commands to disable endpoint identification, allowing connections with any hostname.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER oracle\nRUN echo \"\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"dsconfig.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"dsreplication.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"uninstall.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"status.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"import-ldif.online.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"manage-suffix.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"ldapmodify.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    echo \"ldapsearch.java-args=-client -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n\techo \"start-ds.java-args=-server -Xms256m -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" >> ${ORACLE_HOME}/oud/config/java.properties && \\\n    ${ORACLE_HOME}/oud/bin/dsjavaproperties\n```\n\n----------------------------------------\n\nTITLE: Creating Additional RAC Node with Block Devices\nDESCRIPTION: Docker create command to set up additional RAC node using block devices for storage. Configures hostname, devices, networks and environment variables.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n  --hostname racnoded2 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/oracleoci/oraclevdd:/dev/asm_disk1  \\\n  --device=/dev/oracleoci/oraclevde:/dev/asm_disk2 \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnoded1 \\\n  -e NODE_VIP=172.16.1.131  \\\n  -e VIP_HOSTNAME=racnoded2-vip  \\\n  -e PRIV_IP=192.168.17.101  \\\n  -e PRIV_HOSTNAME=racnoded2-priv \\\n  -e PUBLIC_IP=172.16.1.101  \\\n  -e PUBLIC_HOSTNAME=racnoded2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnodedc1-scan \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  --restart=always --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 --ulimit rtprio=99  \\\n  --name racnoded2 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Volume with Docker CLI in Shell\nDESCRIPTION: Removes the Docker volume using Docker CLI.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n> docker volume rm mgmtagent-volume\n```\n\n----------------------------------------\n\nTITLE: Running Interactive CLI Session with KVLite\nDESCRIPTION: Commands for an interactive CLI session with KVLite, demonstrating basic operations like ping, put, and get.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti -v secfiles:/shared_conf:ro --link kvlite:store oracle/nosql:ce-sec \\\n  java -jar lib/kvstore.jar runadmin -host store -port 5000 -store kvstore \\\n  -security /shared_conf/user.security\n\n  kv-> ping\n\nPinging components of store kvstore based upon topology sequence #14\n10 partitions and 1 storage nodes\nTime: 2025-03-17 09:08:59 UTC   Version: 24.4.9\nShard Status: healthy: 1 writable-degraded: 0 read-only: 0 offline: 0 total: 1\nAdmin Status: healthy\nZone [name=KVLite id=zn1 type=PRIMARY allowArbiters=false masterAffinity=false]   RN Status: online: 1 read-only: 0 offline: 0\nStorage Node [sn1] on kvlite: 5000    Zone: [name=KVLite id=zn1 type=PRIMARY allowArbiters=false masterAffinity=false]    Status: RUNNING   Ver: 24.4.9 2024-11-21 17:06:06 UTC  Build id: 95fa28ea4441 Edition: Community    isMasterBalanced: true     serviceStartTime: 2025-03-17 09:08:18 UTC\n        Admin [admin1]          Status: RUNNING,MASTER  serviceStartTime: 2025-03-17 09:08:22 UTC       stateChangeTime: 2025-03-17 09:08:22 UTC        availableStorageSize: 2 GB\n        Rep Node [rg1-rn1]      Status: RUNNING,MASTER sequenceNumber: 121 haPort: 5011 availableStorageSize: 9 GB storageType: HD      serviceStartTime: 2025-03-17 09:08:24 UTC       stateChangeTime: 2025-03-17 09:08:25 UTC\n\n\n  kv-> put kv -key /SomeKey -value SomeValue\n  Operation successful, record inserted.\n  kv-> get kv -key /SomeKey\n  SomeValue\n  kv-> exit\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Server JRE 8 Base Image\nDESCRIPTION: Commands to build the Oracle Server JRE 8 base image required for the Oracle Unified Directory image. This involves either building from source or pulling and retagging an existing image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag container-registry.oracle.com/java/serverjre:8 oracle/serverjre:8\n$ docker tag store/oracle/serverjre:8 oracle/serverjre:8\n```\n\n----------------------------------------\n\nTITLE: Creating Host File Directory for RAC\nDESCRIPTION: Creates required directory and host file for name resolution between RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/containers\ntouch /opt/containers/rac_host_file\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for OUDSM Docker Image\nDESCRIPTION: This snippet creates the necessary directory structure for the OUDSM Docker image and sets appropriate permissions. It creates volumes, script directories, and property directories.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nUSER root\n\nRUN mkdir -p ${VOLUME_DIR} && \\\n      chown -R oracle:root ${BASE_DIR} && \\\n    chown -R oracle:root ${VOLUME_DIR} && chmod -R 770 ${VOLUME_DIR} && \\\n    mkdir -p ${SCRIPT_DIR} && chown oracle:root  ${SCRIPT_DIR} && \\\n    mkdir -p ${PROPS_DIR} && chown oracle:root ${PROPS_DIR}\n```\n\n----------------------------------------\n\nTITLE: Installing Make for R Installer\nDESCRIPTION: Command to install the make utility required for Oracle BI R Installer functionality.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y make\n```\n\n----------------------------------------\n\nTITLE: Account Withdrawal Request\nDESCRIPTION: cURL command to withdraw funds from an account, with example JSON response showing transaction details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-type:application/json\" http://${TUX_HOSTNAME}:5955/WITHDRAWAL -d '{\"ACCOUNT_ID\":10001,\"SAMOUNT\":\"10\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ACCOUNT_ID\":   10001,\n        \"STATLIN\":      \" \",\n        \"FORMNAM\":      \"CWITHDRAW\",\n        \"SBALANCE\":     \"$5568.00\",\n        \"SAMOUNT\":      \"$10.00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting OUD Container Configuration\nDESCRIPTION: This command uses Docker inspect to retrieve configuration parameters from the OUD container. It can be used to get specific information like IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect --format '{{.NetworkSettings.Networks.OUDNet.IPAddress}}' myoudds1 myoudds2 myoudds1b myoudds2b\n```\n\n----------------------------------------\n\nTITLE: Creating .env File for Docker Compose in Shell\nDESCRIPTION: Creates a .env file to set the hostname for the Management Agent container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> echo \"mgmtagent_hostname=mgmtagent912\" > .env\n```\n\n----------------------------------------\n\nTITLE: Setting Up NFS Environment Variables\nDESCRIPTION: Configures environment variables required for NFS-based RAC deployment\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ./setup_rac_host.sh -nfs-env\n```\n\n----------------------------------------\n\nTITLE: Directory Setup and Permissions Configuration\nDESCRIPTION: Creates necessary directories and sets appropriate ownership and permissions for OUD operation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER root\n\nRUN mkdir -p ${USER_PROJECTS_DIR} && \\\n    chown -R oracle:root ${USER_PROJECTS_DIR} && chmod -R 770 ${USER_PROJECTS_DIR} && \\\n    mkdir -p ${SCRIPT_DIR} && chown oracle:root ${SCRIPT_DIR} \n    \n\nCOPY --chown=oracle:root files/container-scripts/ ${SCRIPT_DIR}/\nRUN chmod a+xr ${SCRIPT_DIR}/* && \\\n     chown -R oracle:root ${SCRIPT_DIR} && \\\n     chown -R oracle:root ${BASE_DIR}\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for RAC\nDESCRIPTION: Creates the required podman networks for public and private interconnects with specified subnets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns --internal\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Configuration Example\nDESCRIPTION: Example SSL certificate chain format required for Oracle GoldenGate container HTTPS configuration, including both leaf certificate and certificate authority chain.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/21c/README.md#2025-04-23_snippet_3\n\nLANGUAGE: pem\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIIFBTCCA+2gAwIBAgISBJSzNXE+Ha5eDw76N5lgHhTpMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\n...\ndr7wTE+AQwcOLAGjIvFOL7GK8JrhKvuFvnSoys/1O2CK3vVhBgS+mEF6D+QjIGTv\nVC01LCPT51q58INy4RtDBPSqlJwrzz+pOOWd5rBWhu2UPktVHz3AtYE=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\n...\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Docker Image Build Script\nDESCRIPTION: Commands to navigate to the dockerfiles directory and display the help information for the buildDockerImage.sh script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleRACStorageServer/dockerfiles\n./buildDockerImage.sh -h\n```\n\n----------------------------------------\n\nTITLE: Viewing Build Script Usage Information\nDESCRIPTION: Command to display help information for the buildContainerImage.sh script, showing available options for building the Oracle RAC storage container image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -h\n```\n\n----------------------------------------\n\nTITLE: Setting Up Secret Volume for User Passwords\nDESCRIPTION: Creates a secret volume and generates an encrypted password file for grid, oracle, and database users.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/.secrets/\nopenssl rand -out /opt/.secrets/pwd.key -hex 64 \nopenssl enc -aes-256-cbc -salt -in /opt/.secrets/common_os_pwdfile -out /opt/.secrets/common_os_pwdfile.enc -pass file:/opt/.secrets/pwd.key\nrm -f /opt/.secrets/common_os_pwdfile\n```\n\n----------------------------------------\n\nTITLE: Performing Rolling Update\nDESCRIPTION: Command to perform a rolling update of the service with a new image version, including update delay.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update --update-delay 10s --image localhost:5000/12212-summercamps-msiserver:1.1 city_activity_guide\n```\n\n----------------------------------------\n\nTITLE: Building Oracle WebCenter Sites Docker Image\nDESCRIPTION: Shell command to build the Oracle WebCenter Sites Docker image using the provided build script.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Podman RAC Storage\nDESCRIPTION: Commands to change SELinux policy to permissive mode and reboot the host to allow permissions for writing to ASM disks in Podman containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsed -i 's/^SELINUX=.*/SELINUX=permissive/' /etc/selinux/config\nreboot\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for RAC Files (Bash)\nDESCRIPTION: Sets the appropriate SELinux context for RAC configuration files to allow container access. This step is necessary if SELinux is enabled on the host machine.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep1\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep1\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep2\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep2\n```\n\n----------------------------------------\n\nTITLE: Starting DNS Container for Oracle RAC\nDESCRIPTION: Brings up the DNS container using Podman Compose and displays its logs to confirm successful startup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose logs ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Clearing Block Devices\nDESCRIPTION: Clears existing file systems from ASM devices using dd command.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# dd if=/dev/zero of=/dev/xvde  bs=8k count=100000\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Server JRE Base Image using Docker\nDESCRIPTION: Commands to pull and tag the Oracle Server JRE 8 base image from Oracle Container Registry\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login container-registry.oracle.com\n$ docker pull container-registry.oracle.com/java/serverjre:8\n$ docker tag container-registry.oracle.com/java/serverjre:8 oracle/serverjre:8\n```\n\n----------------------------------------\n\nTITLE: Connecting to KVLite with Node.js Client\nDESCRIPTION: JavaScript code snippet showing how to connect to an Oracle NoSQL Database KVLite instance from a Node.js application.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nreturn new NoSQLClient({\n  serviceType: ServiceType.KVSTORE,\n  endpoint: 'nosql-container-host:8080'\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Service\nDESCRIPTION: Command to remove the Docker service.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker service rm city_activity_guide\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle Fusion Middleware Infrastructure Image\nDESCRIPTION: Docker command to retag the Oracle Fusion Middleware infrastructure image downloaded from Docker Store to match the expected repository name for WebCenter Sites deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag store/oracle/fmw-infrastructure:12.2.1.3 oracle/fmw-infrastructure:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Build OIG Docker Image\nDESCRIPTION: Command to build the Oracle Identity Governance Docker image using the build script\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <work directory>/docker-images/OracleIdentityGovernance/dockerfiles\n$ sh buildDockerImage.sh -v 12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network Bridge\nDESCRIPTION: Commands to create a user-defined network bridge for container communication\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge <network_name>\n$ docker network create -d bridge WCSitesNet\n```\n\n----------------------------------------\n\nTITLE: Configuring User, Healthcheck, and Startup Command for OAM Container in Dockerfile\nDESCRIPTION: Sets the user to 'oracle', configures a healthcheck command, sets the working directory, and specifies the startup command for the OAM container. These instructions finalize the Dockerfile configuration for running the OAM service.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER oracle\nHEALTHCHECK --start-period=5m --interval=1m CMD curl -k -s --fail `$HEALTH_SCRIPT_FILE` || exit 1\nWORKDIR $ORACLE_HOME\nCMD [\"sh\", \"-c\", \"${SCRIPT_DIR}/createDomainAndStart.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Macvlan Networks for Multi-host RAC\nDESCRIPTION: Commands to create macvlan networks for Oracle RAC deployment across multiple hosts with specific subnet and gateway configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan --subnet=172.16.1.0/24 --gateway=172.16.1.1 -o parent=eth0 rac_pub1_nw\ndocker network create -d macvlan --subnet=192.168.17.0/24 --gateway=192.168.17.1 -o parent=eth1 rac_priv1_nw\n```\n\n----------------------------------------\n\nTITLE: Disabling Out Of Band Breaks (Bash)\nDESCRIPTION: Shows how to disable Out Of Band breaks by setting DISABLE_OOB in the sqlnet.ora file to resolve ORA-12637 errors.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/FAQ.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"DISABLE_OOB=ON\" >> ~/.sqlnet.ora\n```\n\n----------------------------------------\n\nTITLE: Building Oracle NoSQL CE Docker Image\nDESCRIPTION: Commands for building Docker images for Oracle NoSQL CE, with options for latest or specific versions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/nosql-ce-sec:latest .\n\nKV_VERSION=24.3.9 docker build --build-arg \"$KV_VERSION\" --tag \"oracle/nosql-ce-sec:$KV_VERSION\" .\n```\n\n----------------------------------------\n\nTITLE: Copying Security Certificates from Container\nDESCRIPTION: Copies required security certificates from the KVLite container to the local filesystem for authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp kvlite:/kvroot/proxy/certificate.pem /mylocalpath\ndocker cp kvlite:/kvroot/security/ /mylocalpath\n```\n\n----------------------------------------\n\nTITLE: Removing Temporary Oracle Database Container\nDESCRIPTION: This command removes the temporary container used to create the pre-built database image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm oracle-build\n```\n\n----------------------------------------\n\nTITLE: Branch Balance Request\nDESCRIPTION: cURL command to query the total balance for a specific branch, with example JSON response showing branch details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"Content-type:application/json\" http://${TUX_HOSTNAME}:5955/ABAL -d '{\"b_id\":10}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"b_id\":         10,\n        \"balance\":      219216,\n        \"ermsg\":        \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: OUD Tuning Parameters Check Command\nDESCRIPTION: Command to list tuning parameters for the OUD instance using dstune utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm --network=OUDNet \\\n--name=MyOUDClient \\\n--volume /scratch/user_projects:/u01/oracle/user_projects \\\noud-with-patch:12.2.1.4.0 \\\n/u01/oracle/user_projects/myouddstune/OUD/bin/dstune list\n```\n\n----------------------------------------\n\nTITLE: Setting Up Connection Manager (CMAN) Container\nDESCRIPTION: Launches and configures the Connection Manager container, which provides connection routing and management for the RAC cluster. The logs show when the CMAN is successfully initialized.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${CMAN_CONTAINER_NAME}\npodman-compose logs -f ${CMAN_CONTAINER_NAME}\n################################################\n  CONNECTION MANAGER IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Patching Oracle Unified Directory Binaries (Bash)\nDESCRIPTION: This script patches Oracle Unified Directory binaries. It is called by 10_setup_oud.sh if necessary and should be executed as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n11_setup_oud_patch.sh\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle Restart Database\nDESCRIPTION: Commands to verify the status of the Oracle Database instances within the Oracle Restart environment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsu - oracle\n\n#Confirm the status of Oracle Database instances:\n[oracle@dbmc1 ~]$ srvctl status database -d ORCLCDB\nInstance ORCLCDB is running on node dbmc1\n```\n\n----------------------------------------\n\nTITLE: Building the Oracle Server JRE Base Image for Tuxedo\nDESCRIPTION: Commands to navigate to the Oracle Java directory and build the Server JRE base image required for the Tuxedo Docker image. This is a prerequisite step before building the Tuxedo image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/core/dockerfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Shard Size with Command Line Interface\nDESCRIPTION: Command to check the size of the KVLite storage shard using the command line interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n    java -jar lib/kvstore.jar runadmin -host store -port 5000 \\\n    -store kvstore show parameters -service sn1 | grep GB\npath=/kvroot/kvstore/sn1 size=10 GB\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts file for Oracle NoSQL container alias\nDESCRIPTION: This snippet shows how to add entries to the /etc/hosts file to enable hostname resolution for the Oracle NoSQL container, both from the host itself and remote hosts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /etc/hosts\n10.0.0.143 nosql-container-host\n10.0.0.143 kvlite-nosql-container-host\n```\n\n----------------------------------------\n\nTITLE: Container Health Check Configuration\nDESCRIPTION: Defines Docker health check command to monitor OUD instance status at regular intervals.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nHEALTHCHECK --interval=1m --start-period=5m \\\n   CMD \"${SCRIPT_DIR}/checkOUDInstance.sh\" > /dev/null || exit 1\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Server URL\nDESCRIPTION: The URL format to access the WebCenter Sites server running in the Docker container. Requires replacing DOCKER_HOST with the actual host address.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nhttp://DOCKER_HOST:7002/sites\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo Message Queue Docker Container\nDESCRIPTION: Command to run the Tuxedo Message Queue Docker image in a new container. It mounts a local directory as external storage in the container and runs the container in detached mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_message_q/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedotmq:12.1.3\n```\n\n----------------------------------------\n\nTITLE: Database Connection String Format\nDESCRIPTION: Connection string format for connecting to the Oracle database PDB.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\nDB_CONNECTSTRING=<hostname/containername>:1521/ORCLPDB1.localdomain\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux Context on Container Files\nDESCRIPTION: Example of setting the proper SELinux context on files that will be mounted into containers. This ensures files are accessible within the container with the correct security context.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -vF  /scratch/common_scripts/podman/rac/dbca_21c.rsp\nls -lZ /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Creating First Oracle RAC Container with Storage Container\nDESCRIPTION: Docker create command to set up the first RAC node container with Oracle RAC Storage Container. Configures hostname, volumes, networks, and environment variables required for RAC installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n  --hostname racnoded1 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --privileged=false \\\n  --volume racstorage:/oradata \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e NODE_VIP=172.16.1.130  \\\n  -e VIP_HOSTNAME=racnoded1-vip  \\\n  -e PRIV_IP=192.168.17.100  \\\n  -e PRIV_HOSTNAME=racnoded1-priv \\\n  -e PUBLIC_IP=172.16.1.100 \\\n  -e PUBLIC_HOSTNAME=racnoded1  \\\n  -e SCAN_NAME=racnodedc1-scan \\\n  -e OP_TYPE=INSTALL \\\n  -e DOMAIN=example.com \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n  -e CMAN_HOSTNAME=racnodedc1-cman \\\n  -e CMAN_IP=172.16.1.164 \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  --restart=always \\\n  --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --name racnoded1 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Oracle Unified Directory Docker Image\nDESCRIPTION: This snippet defines the Docker image tag for Oracle Unified Directory version 12.2.1.4.0. It specifies the image name and version to be used when running Oracle Unified Directory in a container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n***Image***: `oracle/oud:12.2.1.4.0`\n```\n\n----------------------------------------\n\nTITLE: Running GGSCI in Standard Edition Container\nDESCRIPTION: Command to launch the GGSCI (GoldenGate Software Command Interface) utility within a Standard Edition Docker container. This utility is not available in Microservices Architecture containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti --user oracle <container name> ggsci\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux for Additional RAC Node\nDESCRIPTION: Sets the appropriate SELinux context for the directory that will hold the additional RAC node's files. This ensures proper permissions when SELinux is enabled on the host system.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/rac/cluster01/node3\nrestorecon -v /scratch/rac/cluster01/node3\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Configuration\nDESCRIPTION: Commands to verify the SSL certificate configuration using curl and openssl, demonstrating hostname matching requirements.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl --cacert /mylocalpath/certificate.pem  https://kvlite:8080\n\ncurl --cacert /mylocalpath/certificate.pem  https://proxy-nosql:8080\ncurl: (51) Unable to communicate securely with peer: requested domain name does not match the server's certificate.\n\nopenssl x509 -text -noout -in /mylocalpath/certificate.pem | grep CN\n        Issuer: CN=kvlite\n        Subject: CN=kvlite\n```\n\n----------------------------------------\n\nTITLE: OUD Directory Server Environment Configuration\nDESCRIPTION: Environment variables configuration file for OUD directory server setup including instance type, name, hostname, base DN and performance tuning parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_29\n\nLANGUAGE: properties\nCODE:\n```\ninstanceType=Directory\nOUD_INSTANCE_NAME=myouddstune\nhostname=myoudds1\nbaseDN=dc=example1,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\nsampleData=100\ndstune_1=mem-based --memory 2.5g --targetTool server\ndstune_2=data-based --entryNumber 10000 --entrySize 40\n```\n\n----------------------------------------\n\nTITLE: Retrieving Oracle Database Password\nDESCRIPTION: Command to retrieve the SYS user password from the Kubernetes secret.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get secret --namespace example-namespace oracle-rdbms-credentials \\\n                         -o jsonpath={.data.ORACLE_PWD} | base64 --decode; echo\n```\n\n----------------------------------------\n\nTITLE: Pinging Oracle NoSQL container from another container\nDESCRIPTION: This command shows how to ping the Oracle NoSQL container from another Docker container using the --link option to establish network connectivity.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n    java -jar lib/kvstore.jar ping -host store -port 5000\n```\n\n----------------------------------------\n\nTITLE: Resetting Oracle RAC Node Passwords\nDESCRIPTION: Commands to reset the OS password for grid and oracle users on an existing RAC node. This ensures SSH setup between existing nodes and new nodes works correctly.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t -u root racnode1 /bin/bash\nsh  /opt/scripts/startup/resetOSPassword.sh --help\nsh /opt/scripts/startup/resetOSPassword.sh --op_type reset_grid_oracle --pwd_file common_os_pwdfile.enc --secret_volume /run/secrets --pwd_key_file pwd.key\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebCenter Sites Container\nDESCRIPTION: Command to establish an interactive shell session with the WebCenter Sites managed container. Useful for directly accessing logs or performing administrative tasks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it WCSitesManagedContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo TMA Docker Container\nDESCRIPTION: Command to run a Docker container based on the Tuxedo TMA image. It mounts a local directory as external storage in the container at /u01/oracle/user_projects.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_salt_tma/dockerfiles/12.2.2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoartrttma:12.2.2.1\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle NoSQL CE on Remote Host\nDESCRIPTION: Downloads and extracts the specified version of Oracle NoSQL CE onto a remote host. Sets up the KVHOME environment variable for further use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nKV_VERSION=24.4.9\nrm -rf kv-$KV_VERSION\nDOWNLOAD_ROOT=http://download.oracle.com/otn-pub/otn_software/nosql-database\nDOWNLOAD_FILE=\"kv-ce-${KV_VERSION}.zip\"\nDOWNLOAD_LINK=\"${DOWNLOAD_ROOT}/${DOWNLOAD_FILE}\"\ncurl -OLs $DOWNLOAD_LINK\njar tf $DOWNLOAD_FILE | grep \"kv-$KV_VERSION/lib\" > extract.libs\njar xf $DOWNLOAD_FILE @extract.libs\nrm -f $DOWNLOAD_FILE extract.libs\nKVHOME=$PWD/kv-$KV_VERSION\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions for Docker Volume\nDESCRIPTION: Commands to check the user ID inside the Docker container and set the appropriate permissions for the local directory used as external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/jolt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --rm --entrypoint=\"/bin/bash\" oracle/tuxedojolt -c \"whoami && id\" tuxedojolt\n  oracle\n  uid=1000(oracle) gid=1000(oracle) groups=1000(oracle)\n$ sudo chown -R 1000 ${LOCAL_DIR}\n```\n\n----------------------------------------\n\nTITLE: Verifying hostname resolution for Oracle NoSQL container\nDESCRIPTION: This snippet demonstrates how to use the ping command to verify that the container host can resolve its own alias, which is crucial for proper network connectivity.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ ping kvlite-nosql-container-host\nPING kvlite-nosql-container-host (10.0.0.143) 56(84) bytes of data.\n64 bytes from nosql-container-host (10.0.0.143): icmp_seq=1 ttl=64 time=0.259 ms\n64 bytes from nosql-container-host (10.0.0.143): icmp_seq=2 ttl=64 time=0.241 ms\n64 bytes from nosql-container-host (10.0.0.143): icmp_seq=3 ttl=64 time=0.192 ms\n```\n\n----------------------------------------\n\nTITLE: Setting Jolt Client Connection Address\nDESCRIPTION: Java code snippet showing how to configure the APPADDRESS attribute in a Jolt client application to connect to the Tuxedo Jolt service running in the Docker container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/jolt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nsattr.setString(sattr.APPADDRESS, \"//$host_machine:11304\");  //$host_machine is the machine name of the docker host machine\n```\n\n----------------------------------------\n\nTITLE: Initializing OradbaInit Scripts for OUD/OUDSM Setup (Bash)\nDESCRIPTION: This script initializes and installs oradba init scripts, defining common functions for the OUD/OUDSM setup process. It is intended to be run as root.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n00_setup_oradba_init.sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs for Password Retrieval\nDESCRIPTION: Command to view Docker container logs with detailed information, useful for finding auto-generated passwords for WebLogic, Database, and WebCenter Sites accounts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ docker logs --details <Admin-Container-Id>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for DB Wait Timeout\nDESCRIPTION: YAML configuration example for docker-compose.yml that sets the DB_WAIT_TIMEOUT environment variable. This configures how long the BI container will wait for the database to become available when starting the containers in parallel.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAnalytics/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - DB_WAIT_TIMEOUT=240\n```\n\n----------------------------------------\n\nTITLE: Copy Elasticsearch Installer\nDESCRIPTION: Command to copy Elasticsearch installer to the WebCenter Portal volume mount location.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncp elasticsearch-7.17.x-linux-x86_64.tar.gz /scratch/wcpdocker/volumes/wcpportal\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Modes for Admin Server\nDESCRIPTION: Demonstrates setting authentication modes for Administration Server to use Digest and x-Cert authentication methods.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\noggServiceConfig http://localhost:11000 Local adminsrvr \\\n                 --user oggadmin --password oggadmin-A1 \\\n                 --path /authorizationDetails/common/allow \\\n                 --value '[\"Digest\",\"x-Cert\"]'\n```\n\n----------------------------------------\n\nTITLE: Creating Additional RAC Node with Storage Container\nDESCRIPTION: Docker create command to set up additional RAC node using Oracle RAC Storage Container. Uses existing racstorage volume and configures required parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker create -t -i \\\n  --hostname racnoded2 \\\n  --volume /boot:/boot:ro \\\n  --volume /dev/shm \\\n  --tmpfs /dev/shm:rw,exec,size=4G \\\n  --volume /opt/containers/rac_host_file:/etc/hosts  \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --volume racstorage:/oradata \\\n  --privileged=false  \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnoded1 \\\n  -e NODE_VIP=172.16.1.131  \\\n  -e VIP_HOSTNAME=racnoded2-vip  \\\n  -e PRIV_IP=192.168.17.101  \\\n  -e PRIV_HOSTNAME=racnoded2-priv \\\n  -e PUBLIC_IP=172.16.1.101  \\\n  -e PUBLIC_HOSTNAME=racnoded2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnodedc1-scan \\\n  -e ASM_DISCOVERY_DIR=/oradata \\\n  -e ASM_DEVICE_LIST=/oradata/asm_disk01.img,/oradata/asm_disk02.img,/oradata/asm_disk03.img,/oradata/asm_disk04.img,/oradata/asm_disk05.img \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  --restart=always --tmpfs=/run -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  --cpu-rt-runtime=95000 --ulimit rtprio=99  \\\n  --name racnoded2 \\\n  oracle/database-rac:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Running Interactive CLI Session with KVLite\nDESCRIPTION: Commands to start an interactive CLI session with KVLite and perform basic operations like ping and key-value manipulation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n  java -jar lib/kvstore.jar runadmin -host store -port 5000 -store kvstore\n\n  kv-> ping\n  \nPinging components of store kvstore based upon topology sequence #14\n10 partitions and 1 storage nodes\nTime: 2025-03-17 09:05:10 UTC   Version: 24.4.9\nShard Status: healthy: 1 writable-degraded: 0 read-only: 0 offline: 0 total: 1\nAdmin Status: healthy\nZone [name=KVLite id=zn1 type=PRIMARY allowArbiters=false masterAffinity=false]   RN Status: online: 1 read-only: 0 offline: 0\nStorage Node [sn1] on kvlite: 5000    Zone: [name=KVLite id=zn1 type=PRIMARY allowArbiters=false masterAffinity=false]    Status: RUNNING   Ver: 24.4.9 2024-11-21 17:06:06 UTC  Build id: 95fa28ea4441 Edition: Community    isMasterBalanced: true     serviceStartTime: 2025-03-17 09:04:40 UTC\n        Admin [admin1]          Status: RUNNING,MASTER  serviceStartTime: 2025-03-17 09:04:43 UTC       stateChangeTime: 2025-03-17 09:04:43 UTC        availableStorageSize: 2 GB\n        Rep Node [rg1-rn1]      Status: RUNNING,MASTER sequenceNumber: 86 haPort: 5011 availableStorageSize: 9 GB storageType: HD       serviceStartTime: 2025-03-17 09:04:44 UTC       stateChangeTime: 2025-03-17 09:04:45 UTC\n  \n  kv-> put kv -key /SomeKey -value SomeValue\n  Operation successful, record inserted.\n  kv-> get kv -key /SomeKey\n  SomeValue\n  kv-> exit\n```\n\n----------------------------------------\n\nTITLE: Running RAC Storage Container on Docker Host\nDESCRIPTION: Docker command to run the NFS storage container for RAC with the necessary configuration settings, including network, volume mounts, and capabilities.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\ndocker run -d -t --hostname racnode-storage \\\n--dns-search=example.com  --cap-add SYS_ADMIN --cap-add AUDIT_WRITE \\\n--volume /docker_volumes/asm_vol/$ORACLE_DBNAME:/oradata --init \\\n--network=rac_priv1_nw --ip=192.168.17.80 --tmpfs=/run  \\\n--volume /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n--name racnode-storage oracle/rac-storage-server:19.3.0\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic MSI Base Image\nDESCRIPTION: Command to build the base MSI server Docker image from the Dockerfile.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12212-msiserver .\n```\n\n----------------------------------------\n\nTITLE: Accessing HAProxy Stats via curl\nDESCRIPTION: Command to retrieve HAProxy statistics using curl with basic authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/haproxy/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u occsdemo:occspass http://mesh-host:1936/haproxy?stats\n```\n\n----------------------------------------\n\nTITLE: DSREPLICATION Status Output Example\nDESCRIPTION: Example output from the dsreplication status command showing the replication status of the dc=example1,dc=com suffix. It displays information about the replication topology, including the number of entries, missing changes, and replication status of each server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nEstablishing connections and reading configuration ...... Done.\n\ndc=example1,dc=com - Replication Enabled\n========================================\n\nServer          : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Status [4] : Conflicts [5]\n----------------:---------:----------:--------------:----------:------------:--------------\nmyoudrs1:1444   : -- [6]  : 0        : --           : 1898     : Up         : --\nmyoudds1:1444   : 102     : 0        : 0            : -- [7]   : Normal     : 0\nmyoudds1b:1444  : 102     : 0        : 0            : -- [7]   : Normal     : 0\n\n[1] The number of changes that are still missing on this element (and that have been applied to at least one other server).\n[2] Age of oldest missing change: the age (in seconds) of the oldest change that has not yet arrived on this element.\n[3] The replication port used to communicate between the servers whose contents are being replicated.\n[4] The status of the replication on this element.\n[5] The number of currently unresolved replication conflicts.\n[6] Server does not contain replicated data for the suffix.\n[7] Server not configured as a replication server (no replication change log).\n```\n\n----------------------------------------\n\nTITLE: Stop Elasticsearch Container\nDESCRIPTION: Command to stop a running Elasticsearch container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker container stop <ES_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle Database Gold Image\nDESCRIPTION: Command to create a gold image from an on-premise Oracle database installation. This is required for containerizing an existing database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncd $ORACLE_HOME && ./runInstaller -silent -createGoldImage -destinationLocation '<location to store the gold image>'\n```\n\n----------------------------------------\n\nTITLE: Accessing WebCenter Sites Managed Container\nDESCRIPTION: Docker command to establish an interactive shell session with the WebCenter Sites Managed container for performing operations on the WebCenter Sites server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it WCSitesManagedContainer /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Building Oracle TSAM Docker Image with Rolling Patch\nDESCRIPTION: Command to build a Docker image for Oracle TSAM 12.2.2 with applied rolling patch. The resulting image will be tagged as version 12.2.2.1.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/samples/apply-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tsam:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Checking KVLite Version\nDESCRIPTION: Command to check the version of the KVLite installation using the Oracle NoSQL command-line interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti --link kvlite:store oracle/nosql:ce-sec  java -Xmx64m -Xms64m -jar lib/kvstore.jar version\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Tuxedo ART\nDESCRIPTION: Commands to build the Docker image for Tuxedo ART Workbench and Test Manager. Includes version specification and proxy configuration options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_workbench_tm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./buildDockerImage.sh -v 12.2.2\n```\n\n----------------------------------------\n\nTITLE: Running NoSQL Shell CLI\nDESCRIPTION: This command shows how to start the NoSQL Shell CLI to interact with the Oracle NoSQL container using the configured alias and port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/sql.jar -helper-hosts kvlite-nosql-container-host:5000 -store kvstore\n```\n\n----------------------------------------\n\nTITLE: Changing Oracle Database Password Using SQL\nDESCRIPTION: SQL command to alter the sys user password for all containers in the Oracle database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSQL> alter user sys identified by MYDBPasswd container=all;\n```\n\n----------------------------------------\n\nTITLE: Copying Oracle Grid and Database Response Files in Bash\nDESCRIPTION: Copies pre-populated Oracle grid and database response files to the common scripts directory for use in RAC setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp docker-images/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/<version/grid_sample.rsp /opt/containers/common_scripts\ncp docker-images/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/<version>/dbca_sample.rsp /opt/containers/common_scripts\n```\n\n----------------------------------------\n\nTITLE: RAC Setup Completion Message\nDESCRIPTION: Shows the successful completion message displayed when the RAC setup is complete. This message indicates that the Oracle RAC database is fully configured and ready to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n===================================\nORACLE RAC DATABASE IS READY TO USE\n===================================\n```\n\n----------------------------------------\n\nTITLE: Customizing Base Image for Oracle GoldenGate Build\nDESCRIPTION: Example showing how to specify a custom base image when building the Oracle GoldenGate container using the BUILD_IMAGE argument.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build --tag=oracle/goldengate:23.4 \\\n             --build-arg BASE_IMAGE=\"localregistry/oraclelinux:8\" \\\n             --build-arg INSTALLER=234000_fbo_ggs_Linux_x64_Oracle_services_shiphome.zip .\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Fusion Middleware Infrastructure Docker Image\nDESCRIPTION: Docker command to download the Oracle Fusion Middleware Infrastructure image from Oracle Container Registry.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Sample Environment Variables for OSB Managed Server\nDESCRIPTION: This snippet shows a sample configuration of environment variables for an OSB Managed Server. It includes specific values for server name, domain type, and admin server details.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nMANAGED_SERVER=osb_server1\nDOMAIN_TYPE=osb\nDOMAIN_NAME=soainfra\nADMIN_HOST=soaas\nADMIN_PORT=7001\nADMIN_PASSWORD=Welcome1\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for OAM Patches\nDESCRIPTION: Commands to create directories for storing OAM patches and OPatch patches if you're building an OAM image with additional patches applied.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p <work directory>/OracleAccessManagement/dockerfiles/12.2.1.4.0/patches\n$ mkdir -p <work directory>/OracleAccessManagement/dockerfiles/12.2.1.4.0/opatch_patch\n```\n\n----------------------------------------\n\nTITLE: Running Admin Client in Microservices Architecture Container\nDESCRIPTION: Command to launch the Admin Client utility within a Microservices Architecture Docker container. This utility is exclusively available in Microservices Architecture containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti --user oracle <container name> adminclient\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo TMA Docker Image\nDESCRIPTION: Command to build the Docker image for Oracle Tuxedo ART TMA version 12.2.2.1. This requires the Tuxedo TMA SNA and TCP installers to be present in the build context.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_salt_tma/dockerfiles/12.2.2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndocker build -t oracle/tuxedoartrttma:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: WebCenter Environment Configuration\nDESCRIPTION: Environment variable configuration file for WebCenter Content container setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterContent/dockerfiles/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n#Database Configuration\\nDB_DROP_AND_CREATE=<true or false>\\nDB_CONNECTION_STRING=<Hostname>:<Database Port>/<Database Service>\\nDB_RCUPREFIX=<RCU Prefix>\\nDB_PASSWORD=<Database Password>\\nDB_SCHEMA_PASSWORD=<Schema Password>\\n\\n#configure container\\nADMIN_SERVER_CONTAINER_NAME=<Admin Server Container Name>\\nADMIN_PORT=<Admin Server Port>\\nADMIN_PASSWORD=<Admin Server Password>\\nADMIN_USERNAME=<Admin Server User Name>\\n\\nDOMAIN_NAME=<domain directory-name>\\nUCM_PORT=<port to be used for UCM managed server on container>\\nIBR_PORT=<port to be used for IBR managed server on container>\\nUCM_HOST_PORT=<host port to access UCM managed server>\\nIBR_HOST_PORT=<host port to access IBR managed server>\\nUCM_INTRADOC_PORT=<UCM intradoc port on container>\\nIBR_INTRADOC_PORT=<IBR intradoc port on container>\\nIPM_PORT=<port to be used for IPM managed server on container>\\nIPM_HOST_PORT=<host port to access IPM managed server>\\nCAPTURE_PORT=<port to be used for Capture managed server on container>\\nCAPTURE_HOST_PORT=<host port to access Capture managed server>\\nWCCADF_PORT=<port to be used for WCC ADFUI managed server on container>\\nWCCADF_HOST_PORT=<host port to access WCC ADFUI managed server>\\n\\n#component\\ncomponent=IPM,Capture,ADFUI\\n\\n#HOSTNAME\\nHOSTNAME=<provide your host name>\\n\\n#Keep Container alive\\nKEEP_CONTAINER_ALIVE=true\n```\n\n----------------------------------------\n\nTITLE: Building Oracle TMA Docker Image with Docker Build Command\nDESCRIPTION: Command to build the Docker image for Oracle Tuxedo ART+TMA version 12.2.2.1. The command should be run from the directory containing the Dockerfile after providing all required installation binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_salt_tma/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t oracle/tuxedoartrttma:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Upstream Servers with confd in NGINX Configuration\nDESCRIPTION: This snippet demonstrates how confd dynamically generates the NGINX configuration file to include backend servers. It uses a template to iterate over key-value pairs and create server entries in the upstream block.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/nginx-lb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream myapp1 {\n    {{range gets \"/apps/myapp/containers/*\"}}\n    server {{.Value}};{{end}}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group\nDESCRIPTION: Command to add a user to the Docker group to allow access to the Docker daemon without using sudo. Resolves permission denied errors when connecting to the Docker daemon socket.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo /sbin/usermod -a -G docker <userid>\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle Database Environment Variables in Shell\nDESCRIPTION: This snippet defines environment variables for configuring an Oracle database instance. It sets the database SID, PDB name, domain, and bundle type. These variables are typically used in scripts or Docker configurations to customize the database setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/dockerfiles/12.2.1.3/env.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nDB_SID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Stop Portlet Container\nDESCRIPTION: Command to stop a running WebCenter Portlet container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker container stop <WCPORTLET_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scraper Job with Confd Template\nDESCRIPTION: This YAML snippet from the prometheus.yml.template shows how confd dynamically generates target configurations based on key/value store data. It establishes a scraper job that collects metrics from backend cAdvisor containers every 5 seconds.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/prometheus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: prometheus-scraper\n  scrape_interval: 5s\n  target_groups:\n    - targets: [\n    {{range gets \"/apps/myapp/containers/*\"}}\n    '{{.Value}}',{{end}}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Authentication with Session Token\nDESCRIPTION: Command to run OCI CLI with session token authentication and port mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  -v \"$HOME/.oci:/oracle/.oci\" \\\n  -p 8181:8181 \\\n  ghcr.io/oracle/oci-cli session authenticate\n```\n\n----------------------------------------\n\nTITLE: Building Oracle TSAM Plus Docker Image with Proxy\nDESCRIPTION: Docker build command with HTTP proxy configuration for environments behind a proxy server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build \\\n   --build-arg http_proxy=http://<hostname>:<port> \\\n   --build-arg https_proxy=http://<hostname>:<port> \\\n   -t oracle/tsam:12.2.2 .\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle NoSQL Community Edition Docker Image\nDESCRIPTION: Commands to pull the Oracle NoSQL Database Community Edition image from GitHub Container Registry and tag it for local use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull ghcr.io/oracle/nosql:latest-ce-sec\ndocker tag ghcr.io/oracle/nosql:latest-ce-sec oracle/nosql:ce-sec\n```\n\n----------------------------------------\n\nTITLE: Plugging PDB into Container Database\nDESCRIPTION: SQL commands to create and configure a pluggable database using an existing PDB's files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/plugpdb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PLUGGABLE DATABASE MYPDB USING '/opt/oracle/oradata/DEVOPSUATCDB/MYPDB/mypdb.xml'\nSOURCE_FILE_DIRECTORY='/opt/oracle/oradata/DEVOPSUATCDB/MYPDB'\nNOCOPY;\n\nALTER PLUGGABLE DATABASE MYPDB OPEN;\n\nALTER PLUGGABLE DATABASE MYPDB SAVE STATE;\n```\n\n----------------------------------------\n\nTITLE: Make Stack Build Command Structure\nDESCRIPTION: Example of Make command equivalence for building Docker stacks. Running make in a stack directory executes the default rule which is equivalent to 'make stack' or 'make images generate-stack-yml'\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake\nmake stack\nmake images generate-stack-yml\n```\n\n----------------------------------------\n\nTITLE: OUD Replication Status Output Example\nDESCRIPTION: Example output from the dsreplication status command showing the replication status between Oracle Unified Directory servers. It displays information about entries, replication ports, encryption status, and connections between replication servers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nEstablishing connections and reading configuration ..... Done.\n\ndc=example2,dc=com - Replication Enabled\n========================================\n\nServer          : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10]\n----------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------\nmyoudds2:1444   : 102     : 0        : 0            : 1898     : Disabled       : Trusted   : --       : Normal     : Enabled       : 1            : myoudds2:1898 (GID=1)\nmyoudds2b:1444  : 102     : 0        : 0            : 1898     : Disabled       : Trusted   : --       : Normal     : Enabled       : 2            : myoudds2b:1898 (GID=2)\n\nReplication Server [11] : RS #1 : RS #2\n------------------------:-------:------\nmyoudds2:1898 (#1)      : --    : Yes\nmyoudds2b:1898 (#2)     : Yes   : --\n\n[1] The number of changes that are still missing on this element (and that have been applied to at least one other server).\n[2] Age of oldest missing change: the age (in seconds) of the oldest change that has not yet arrived on this element.\n[3] The replication port used to communicate between the servers whose contents are being replicated.\n[4] Whether the replication communication initiated by this element is encrypted or not.\n[5] Whether the directory server is trusted or not. Updates coming from an untrusted server are discarded and not propagated.\n[6] The number of untrusted changes. These are changes generated on this server while it is untrusted.\n    Those changes are not propagated to the rest of the topology but are effective on the untrusted server.\n[7] The status of the replication on this element.\n[8] Whether the external change log is enabled for the base DN on this server or not.\n[9] The ID of the replication group to which the server belongs.\n[10] The replication server this server is connected to with its group ID between brackets.\n[11] This table represents the connections between the replication servers.  The headers of the columns use a number as identifier for each replication server.  See the values of the first column to identify the corresponding replication server for each number.\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Tuxedo ART\nDESCRIPTION: Commands to build the Tuxedo ART Runtime Docker image. Includes proxy configuration option and version specification.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_runtime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./buildDockerImage.sh -v 12.2.2\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t oracle/tuxedoartrt:12.2.2 .\n```\n\n----------------------------------------\n\nTITLE: Docker Network Creation Command\nDESCRIPTION: Command to create a Docker bridge network for the infrastructure server\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d bridge InfraNET\n```\n\n----------------------------------------\n\nTITLE: Building WebCenter Sites Docker Image\nDESCRIPTION: Command to build the Oracle WebCenter Sites Docker image\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sh buildDockerImage.sh -v 12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Checking an Oracle Unified Directory Services Manager Console (Bash)\nDESCRIPTION: This script checks the status and configuration of an Oracle Unified Directory Services Manager (OUDSM) console. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n74_check_oudsm_console.sh\n```\n\n----------------------------------------\n\nTITLE: Example of Successful Database Creation Log Output\nDESCRIPTION: Sample log output showing the successful creation of an Oracle RAC database, including completion messages and remote listener configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n01-31-2024 12:31:20 UTC :  : #################################################################\n01-31-2024 12:31:20 UTC :  :  Oracle Database ORCLCDB is up and running on racnodep1    \n01-31-2024 12:31:20 UTC :  : #################################################################\n01-31-2024 12:31:20 UTC :  : Running User Script\n01-31-2024 12:31:20 UTC :  : Setting Remote Listener\n01-31-2024 12:31:27 UTC :  : 172.16.1.166\n01-31-2024 12:31:27 UTC :  : Executing script to set the remote listener\n01-31-2024 12:31:28 UTC :  : ####################################\n01-31-2024 12:31:28 UTC :  : ORACLE RAC DATABASE IS READY TO USE!\n01-31-2024 12:31:28 UTC :  : ####################################\n```\n\n----------------------------------------\n\nTITLE: Stopping Oracle Database Container\nDESCRIPTION: This command stops the running container with a timeout of 600 seconds, allowing for a graceful shutdown of the database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/prebuiltdb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop -t 600 oracle-build\n```\n\n----------------------------------------\n\nTITLE: Deploying Oracle Database Pre-built Extension on Kubernetes\nDESCRIPTION: Helm command to deploy the pre-built database image on Kubernetes. It sets the image URL and explicitly sets persistence to null.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/prebuiltdb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install db21c --set image=<image-url>,persistence=null oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Copying Management Agent Software in Shell\nDESCRIPTION: Copies the downloaded Oracle Management Agent software bundle to the Dockerfile directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> cp oracle.mgmt_agent.zip OracleManagementAgent/dockerfiles/1.0.0/\n```\n\n----------------------------------------\n\nTITLE: WebCenter Sites Admin Server Running Status Message\nDESCRIPTION: Sample log output indicating that the Admin server is running and ready to start the Managed server. This message confirms that the WebCenter Sites container is properly initialized.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nAdmin server running, ready to start Managed server\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Ipvlan Networks\nDESCRIPTION: Commands to create ipvlan networks for multi-host Oracle RAC deployment with specific network interfaces.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d ipvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\npodman network create -d ipvlan --subnet=192.168.17.0/24 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d ipvlan --subnet=192.168.18.0/24 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Volume Mount\nDESCRIPTION: Command to run the Tuxedo TMA Docker container with a mounted volume for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/dockerfiles/12.2.2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoalltma:12.2.2.1\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for Tuxedo Bankapp\nDESCRIPTION: Command to build the Docker image for the bankapp sample application using the Dockerfile in the current directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleTuxedo/salt/samples/bankapp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t tuxedo-bankapp .\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version for Admin Server\nDESCRIPTION: Shows how to set the TLS version to 1.2 for the Administration Server using oggServiceConfig utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/bin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\noggServiceConfig http://localhost:11000 Local adminsrvr \\\n                 --user oggadmin --password oggadmin-A1 \\\n                 --path /securityDetails/network/inbound/protocolVersion \\\n                 --value '\"1_2\"'\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password\nDESCRIPTION: Execute setPassword.sh script inside the container to set admin account passwords.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/plugpdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec plugpdb ./setPassword.sh plug\n```\n\n----------------------------------------\n\nTITLE: HAProxy Environment Configuration\nDESCRIPTION: Required environment variables for HAProxy container configuration to enable dynamic backend discovery and load balancing. These variables configure authentication, key-value store connection, backend service discovery, and health checking.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/haproxy-lb-to-apache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOCCS_API_TOKEN={{api_token}}\nKV_IP=172.17.0.1\nKV_PORT=9109\nOCCS_BACKEND_KEY={{sd_deployment_containers_path \"backend\" 80}}\nOCCS_HEALTHCHECK_HTTP=http://:8886/?timeout=10s&interval=30s\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Sample database environment configuration parameters\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nDB_SID=ORCLCDB\nDB_PDB=ORCLPDB1\nDB_DOMAIN=localdomain\n```\n\n----------------------------------------\n\nTITLE: CMAN Setup Success Message\nDESCRIPTION: Success message displayed when Connection Manager setup is complete.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n################################################\nCONNECTION MANAGER IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle Fusion Middleware Infrastructure Docker Image\nDESCRIPTION: Command to retag an Oracle Fusion Middleware infrastructure image downloaded from Docker Store to the expected repository name for WebCenter Sites deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag store/oracle/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Environment variables configuration for Oracle database container setup\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nDB_SID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle Database Enterprise Image\nDESCRIPTION: Docker command to retag the Oracle Database Enterprise image downloaded from Docker Store to match the expected repository name for WebCenter Sites deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag store/oracle/database-enterprise:12.2.0.1 database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Build and Run Container using Docker\nDESCRIPTION: Commands to build the container image and run it with proper mounts and user context\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t oracle/mgmtagent-container .\n\nexport USERID=$(id -u orclmgmtagntusr)\nexport GROUPID=$(id -g orclmgmtagntusr)\ndocker run --user $USERID:$GROUPID -d --name mgmtagentcontainer1 --hostname mgmtagentcontainer1 -v /oracle-management-agent/:/opt/oracle:rw --restart unless-stopped oracle/mgmtagent-container:latest\n```\n\n----------------------------------------\n\nTITLE: DSCONFIG Interactive Console Menu Output\nDESCRIPTION: Example output showing the Oracle Unified Directory configuration console main menu after successfully connecting with dsconfig. It displays the various configuration categories available for managing OUD settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\n>>>> Oracle Unified Directory configuration console main menu\n\nWhat do you want to configure?\n\n    1)  General Configuration             7)   Virtualization\n    2)  Authentication and authorization  8)   Load Balancing\n    3)  Schema                            9)   Distribution\n    4)  Replication                       10)  Integration\n    5)  Local Data Source                 11)  Http\n    6)  Remote Data Source\n\n    q)  quit\n\nEnter choice:\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Properties for Docker Container\nDESCRIPTION: Defines essential database properties including the database ID, PDB name, domain name and database bundle type. These parameters are used to configure the Oracle database instance during container initialization.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-home-in-image/env.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Setting SELinux Context for Environment Files\nDESCRIPTION: These commands set the SELinux context for the environment files used by the Oracle RAC containers. This step is necessary if SELinux is enabled on the host machine.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep1\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep1\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/envfile_racnodep2\nrestorecon -v /scratch/common_scripts/podman/rac/envfile_racnodep2\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OUDSM Docker Image\nDESCRIPTION: This snippet defines essential environment variables for the OUDSM Docker image, including directory paths, domain settings, and Java options.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nENV BASE_DIR=/u01 \\\n    ORACLE_HOME=/u01/oracle \\\n    SCRIPT_DIR=/u01/oracle/container-scripts \\\n    PROPS_DIR=/u01/oracle/properties \\\n    VOLUME_DIR=/u01/oracle/user_projects \\\n    DOMAIN_NAME=\"${DOMAIN_NAME:-base_domain}\" \\\n    ADMIN_USER=\"${ADMIN_USER:-}\" \\\n    ADMIN_PASS=\"${ADMIN_PASS:-}\" \\\n    DOMAIN_ROOT=\"${DOMAIN_ROOT:-/u01/oracle/user_projects/domains}\" \\\n    DOMAIN_HOME=\"${DOMAIN_ROOT:-/u01/oracle/user_projects/domains}\"/\"${DOMAIN_NAME:-base_domain}\" \\\n    ADMIN_PORT=\"${ADMIN_PORT:-7001}\" \\\n    ADMIN_SSL_PORT=\"${ADMIN_SSL_PORT:-7002}\" \\\n    DOMAIN_TYPE=\"oudsm\" \\\n    USER_MEM_ARGS=${USER_MEM_ARGS:-\"-Djava.security.egd=file:/dev/./urandom\"} \\\n    JAVA_OPTIONS=\"${JAVA_OPTIONS} -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true\" \\\n    PATH=$PATH:/usr/java/default/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/container-scripts \\\n    HEALTH_SCRIPT_FILE=/u01/oracle/container-scripts/get_healthcheck_url.sh\n```\n\n----------------------------------------\n\nTITLE: Copying Install Key in Shell\nDESCRIPTION: Copies the generated install key (input.rsp) to the Dockerfile directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> cp input.rsp OracleManagementAgent/dockerfiles/1.0.0/\n```\n\n----------------------------------------\n\nTITLE: Successful RAC Node Addition Message\nDESCRIPTION: Success message shown when an Oracle RAC node is successfully added to the cluster and the database instance is operational.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n========================================================\nOracle Database ORCLCDB3 is up and running on racnodep3.\n========================================================\n```\n\n----------------------------------------\n\nTITLE: RCU Security Properties Configuration\nDESCRIPTION: Database security properties configuration for Repository Creation Utility\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/README.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndb_user=sys\ndb_pass=Oradoc_db1\ndb_schema=Oradoc_db1\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables Configuration\nDESCRIPTION: Environment variables needed to configure the router image for service discovery and authentication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/rolling-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nKV_IP: \"172.17.0.1\"           # Key/value endpoint IP address\nKV_PORT: \"9109\"              # Key/value endpoint port\nOCCS_API_TOKEN: \"{{api_token}}\" # Authentication token\nAPP_NAME: \"<app-name>\"         # Application identifier\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Containers for Oracle WebCenter Sites\nDESCRIPTION: Bash command to remove running WebCenter Sites containers. This step is necessary before creating new instances and will result in data loss for previous installations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/wcs-wls-docker-install/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f WCSitesAdminContainer WCSitesManagedContainer\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Shell\nDESCRIPTION: Docker command to execute an interactive shell inside the container named 'foo' for inspection and debugging purposes.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it foo /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle Database Password Secret\nDESCRIPTION: Commands to generate a random password and create a Kubernetes secret for Oracle Database credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ PASS=$(head /dev/urandom | tr -dc [:alnum:][:graph:] | head -c15) \n$ kubectl create secret generic oracle-rdbms-credentials --namespace example-namespace \\\n                            --from-literal=ORACLE_PWD=\"$PASS\" \nsecret/oracle-rdbms-credentials created\n```\n\n----------------------------------------\n\nTITLE: Generated NGINX Configuration with Dynamic Upstream Servers\nDESCRIPTION: This snippet shows the result of confd processing the template and generating the actual NGINX configuration. It includes multiple server entries in the upstream block based on the key-value pairs provided.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/nginx-lb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream myapp1 {\n    {{range gets \"/apps/myapp/containers/*\"}}\n    server 10.9.1.1:32001;\n    server 10.9.1.2:32002;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Database with Values File (Helm 2.x)\nDESCRIPTION: Command to install Oracle Database using a custom values YAML file with Helm 2.x.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/helm-charts/oracle-db/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --name db19c -f values.yaml oracle-db-1.0.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Oracle Tuxedo 12.2.2 Rolling Patch\nDESCRIPTION: Command to build a Docker image with Oracle Tuxedo 12.2.2 rolling patch applied. The command tags the resulting image as oracle/tuxedoartrttma:12.2.2.1 and builds using the Dockerfile in the current directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_salt_tma/samples/apply-patch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tuxedoartrttma:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Hub Registry in Makefile\nDESCRIPTION: This snippet demonstrates how to set the Docker Hub registry name in the build configuration file. It requires editing the vars.mk file to set the REGISTRY_NAME variable to the user's Docker Hub username.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/README.md#2025-04-23_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nREGISTRY_NAME ?= your_docker_hub_username\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Context for Response Files\nDESCRIPTION: Sets up SELinux file contexts for RAC response files when SELinux is enabled on the host system.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/grid_setup_new_21c.rsp\nsemanage fcontext -a -t container_file_t /scratch/common_scripts/podman/rac/dbca_21c.rsp\nrestorecon -v /scratch/common_scripts/podman/rac/dbca_21c.rsp\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC DNS Server Container Image\nDESCRIPTION: Commands to build the DNS server container image using buildContainerImage.sh script, including proxy configuration if required.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport https_proxy=<https://PROXY_HOST:PROXY_PORT>\nexport http_proxy=<http://PROXY_HOST:PROXY_PORT>\n\n./buildContainerImage.sh-v <Software Version>\n./buildContainerImage.sh -v latest\n```\n\n----------------------------------------\n\nTITLE: Create Elasticsearch Container\nDESCRIPTION: Command to create and run Elasticsearch container with network, port and volume configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t --name <ES_CONTAINER_NAME> --network=<NETWORK_NAME> -p <HostFreePort>:9200 --volumes-from <WCP_CONTAINER_NAME> -v <ES_DATA_MOUNT>:/u01/esHome/esNode/data --env-file webcenter.env.list oracle/wcportal:12.2.1.4 configureOrStartElasticsearch.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Podman-Docker Package on OL8\nDESCRIPTION: Command to install the podman-docker package on Oracle Linux 8, which allows running Docker commands on a Podman host.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf install podman-docker -y\n```\n\n----------------------------------------\n\nTITLE: Removing an OUD Container\nDESCRIPTION: This command removes a stopped OUD container from the Docker environment. It should be used after stopping the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rm <containername>\n```\n\n----------------------------------------\n\nTITLE: Copying and Setting Permissions for Container Scripts\nDESCRIPTION: This snippet copies container scripts to the designated directory and sets the appropriate permissions for execution.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY --chown=oracle:root  files/container-scripts/ ${SCRIPT_DIR}/\nRUN chmod a+xr ${SCRIPT_DIR}/* && \\\n     chown -R oracle:root  ${SCRIPT_DIR}\n```\n\n----------------------------------------\n\nTITLE: Copying Scripts and Modifying SQL Files for OAM Setup in Dockerfile\nDESCRIPTION: Copies container scripts, sets execute permissions, and modifies SQL files to comment out specific lines. This step prepares the environment for OAM domain creation and startup within the Docker container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY --chown=oracle:root files/container-scripts/ ${SCRIPT_DIR}/\nRUN chmod a+xr ${SCRIPT_DIR}/* && \\\n     chown -R oracle:root ${SCRIPT_DIR} && \\\n     sed -i '/@@audit\\/createCASBAudit.sql/s/@@audit\\/createCASBAudit.sql/--@@audit\\/createCASBAudit.sql/g' /u01/oracle/idm/common/sql/oam/sql/oam.sql && \\\n    sed -i '/@@diagnostic\\/createIdmDiagnosticLogRecord.sql/s/@@diagnostic\\/createIdmDiagnosticLogRecord.sql/--@@diagnostic\\/createIdmDiagnosticLogRecord.sql/g' /u01/oracle/idm/common/sql/oam/sql/oam.sql\n```\n\n----------------------------------------\n\nTITLE: Container Deployment with NFS Storage\nDESCRIPTION: Commands to deploy and configure the new RAC node container using Podman Compose with NFS storage. Includes network configuration and container startup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE3_CONTAINER_NAME}\npodman-compose stop ${RACNODE3_CONTAINER_NAME}\n# ... remaining commands\n```\n\n----------------------------------------\n\nTITLE: TSAM Plus Docker Compose with Database Container\nDESCRIPTION: Docker compose configuration for running TSAM Plus with a linked Oracle Database container. Includes service linking and complete environment setup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservices:\n  db:\n    image: oracle-database-image\n    hostname: db.box\n    ports:\n      - 1521/tcp\n  tsam:\n    image: oracle/tsam:12.2.2\n    hostname: tsam.docker\n    ports:\n      - 7001/tcp\n      - 22/tcp\n    environment:\n      - \"DB_CONNSTR=db.box:1521/orcl\"\n      - \"DB_TSAM_USER=tsam\"\n      - \"DB_TSAM_PASSWD=tsam\"\n      - \"TSAM_CONSOLE_ADMIN_PASSWD=admin1\"\n      - \"DBA_USER=sys\"\n      - \"DBA_PASSWD=welcome1\"\n      - \"DB_TSAM_TBLSPACE=users\"\n      - \"WLS_PW=weblogic1\"\n  links:\n      - db:db.box\n```\n\n----------------------------------------\n\nTITLE: Logspout Syslog Configuration Command\nDESCRIPTION: Command used in the entrypoint script to start Logspout with the configured syslog endpoint using the discovered Logstash IP address.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/logspout/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/logspout syslog://$OCCS_LOGSTASH_IP\n```\n\n----------------------------------------\n\nTITLE: Running NGINX Backend Docker Container\nDESCRIPTION: Command to start the NGINX backend container, publishing port 80 to a dynamic host port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/nginx-backend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p :80 occs/nginx-backend\n```\n\n----------------------------------------\n\nTITLE: Building All Stacks using Make\nDESCRIPTION: This command builds all the dependencies and stacks at once, pushing the resulting images to the user's Docker Hub account. It should be run from the 'stacks' directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Creating an Oracle Unified Directory Services Manager Domain (Bash)\nDESCRIPTION: This script creates a new Oracle Unified Directory Services Manager (OUDSM) domain. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n72_create_oudsm_domain.sh\n```\n\n----------------------------------------\n\nTITLE: Generated HAProxy Backend Configuration\nDESCRIPTION: Example of the generated HAProxy configuration after confd processes the template with actual backend server values from the key-value store.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/haproxy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nbackend nginx_80\n    balance roundrobin\n    mode http\n    option httpchk HEAD / HTTP/1.1\\r\\nHost:localhost\n\n    server one 10.9.1.1:32001 check\n    server two 10.9.1.2:32002 check\n```\n\n----------------------------------------\n\nTITLE: OUD Root User Credentials Configuration\nDESCRIPTION: Example of root user credentials configuration for OUD directory server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_30\n\nLANGUAGE: properties\nCODE:\n```\nrootUserDN=cn=Directory Manager\nrootUserPassword=Oracle123\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Enterprise Data Quality Docker Image\nDESCRIPTION: Command to build the Oracle Enterprise Data Quality Docker image for version 12.2.1.3.0.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OEDQ/dockerfiles\n$ ./buildDockerImage.sh -v 12.2.1.3.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Oracle EBS HRMS Scripts in Markdown\nDESCRIPTION: This snippet describes the location and purpose of scripts for creating a service account in Oracle EBS HRMS target.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/samples/scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Oracle EBS HRMS\n\nDirectory Oracle_EBS_HRMS contains script files for creating a service account in EBS target For HRMS\n```\n\n----------------------------------------\n\nTITLE: Extracting Oracle GoldenGate Installation Files\nDESCRIPTION: Demonstrates the process of extracting Oracle GoldenGate installation files from a downloaded ZIP archive. This is a prerequisite step for manually building the Docker image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/12c-19c/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ unzip -l ~/Downloads/123014_fbo_ggs_Linux_x64_services_shiphome.zip | grep 'oracle.oggcore.*.ora.*filegroup1.jar'\n```\n\n----------------------------------------\n\nTITLE: Building NFS Storage Container Image for Oracle RAC\nDESCRIPTION: Script command to build the NFS storage container image for Oracle RAC. The script accepts a version parameter and performs MD5 checks before building the image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v (Software Version)\n./buildContainerImage.sh -v latest\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Host File for RAC Containers\nDESCRIPTION: Creates a directory and shared host file for name resolution across RAC containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/containers\ntouch /opt/containers/rac_host_file\n```\n\n----------------------------------------\n\nTITLE: Copying Install Key to Docker Volume in Shell\nDESCRIPTION: Copies the install key (input.rsp) to the shared Docker volume mountpoint.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> mkdir -p /var/lib/docker/volumes/mgmtagent-volume/_data/mgmtagent_secret\n> cp input.rsp /var/lib/docker/volumes/mgmtagent-volume/_data/mgmtagent_secret/\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Docker Containers for Oracle WebCenter Sites\nDESCRIPTION: This command removes running Docker containers for WebCenter Sites. It targets both the admin and managed containers. Note that this action will result in data loss for existing Sites instances.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/wcs-wls-docker-install/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f WCSitesAdminContainer WCSitesManagedContainer\n```\n\n----------------------------------------\n\nTITLE: Setting Up OUD Base Environment Scripts (Bash)\nDESCRIPTION: This script sets up and configures OUD Base Environment scripts from the oehrlis/oudbase repository. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n20_setup_oudbase.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Container with Host's Hostname\nDESCRIPTION: Command to start a container using the host's hostname for both container name and hostname to facilitate direct remote access.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=$HOSTNAME --hostname=$HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Defining Confd Template Format\nDESCRIPTION: Template file that defines how the configuration will be generated based on key-value store data. It creates a cluster configuration with targets based on container information.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  cluster:\n    targets:\n        [ {{$service := \"/apps/hello-world/containers/*\"}}\n        {{range gets (print $service)}}\n        '{{.Value}}',{{end}}\n        ]\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Storage Directory\nDESCRIPTION: Creates and prepares NFS storage directory for Oracle RAC database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racdockercompose_1/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /docker_volumes/asm_vol/$ORACLE_DBNAME\nrm -rf /docker_volumes/asm_vol/$ORACLE_DBNAME/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Java Manifest Configuration for WebCenter Sites Installation\nDESCRIPTION: Manifest file that defines the Java classpath dependencies including Ant libraries, JDBC drivers, and Groovy runtime. Sets the main class to InstallScript for WebCenter Sites installation process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/wcs-wls-docker-install/Manifest.txt#2025-04-23_snippet_0\n\nLANGUAGE: manifest\nCODE:\n```\nManifest-Version: 1.0\nClass-Path: /u01/oracle/wcsites/common/bin/config-silent-wcsites/config-silent-wcsites.jar\n  /u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/lib/ant.jar\n  /u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/lib/ant-junit.jar\n  /u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/lib/ant-launcher.jar\n  /u01/oracle/oracle_common/modules/oracle.jdbc/ojdbc8.jar\n  /u01/oracle/oracle_common/modules/thirdparty/features/groovy-all.jar\nMain-Class: com.oracle.wcsites.install.InstallScript\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo Jolt Docker Container\nDESCRIPTION: Command to start a Docker container with Tuxedo Jolt. It maps port 11304 to container port 1304, sets the hostname to 'jolthost', and mounts a volume for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/jolt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -h jolthost -p 11304:1304 -v ${LOCAL_DIR}:/u01/oracle/user_projects --name tuxedojolt oracle/tuxedojolt\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Images\nDESCRIPTION: Docker command to list all images available on the host. Helps manage Docker images and identify available versions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ docker images \n```\n\n----------------------------------------\n\nTITLE: Testing Apache Backend Response with Curl\nDESCRIPTION: Command to test the Apache backend container's response, which returns HTML containing the container's hostname.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/apache-backend/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:32790\n# <h1>b139cd126fb7</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Directories and Setting Permissions for OAM in Dockerfile\nDESCRIPTION: Creates necessary directories for Oracle Access Management and sets appropriate ownership and permissions. This ensures that the OAM container has the correct directory structure and access rights for proper operation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nUSER root\n\nRUN mkdir -p ${USER_PROJECTS_DIR} && \\\n    chown -R oracle:root ${USER_PROJECTS_DIR} && chmod -R 775 ${USER_PROJECTS_DIR} && \\\n    chown -R oracle:root ${BASE_DIR} && \\\n    mkdir -p ${CONTAINER_DIR} && \\\n    chown -R oracle:root ${CONTAINER_DIR} && chmod -R 775 ${CONTAINER_DIR} && \\\n    mkdir -p ${SCRIPT_DIR} && chown oracle:root ${SCRIPT_DIR} && \\\n    mkdir -p ${PROPS_DIR} && chown oracle:root ${PROPS_DIR}\n```\n\n----------------------------------------\n\nTITLE: Creating an Oracle Unified Directory Instance (Bash)\nDESCRIPTION: This script creates a new Oracle Unified Directory instance. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n62_create_oud_instance.sh\n```\n\n----------------------------------------\n\nTITLE: Container Response Example\nDESCRIPTION: Example output displayed when accessing the frontend of the HAProxy load balancer.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/haproxy/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nContainer Hash: 0.backend.myapp-20160715-103608\n```\n\n----------------------------------------\n\nTITLE: Stopping and Starting Docker Containers\nDESCRIPTION: Docker commands to stop and start containers by name. Essential for container management and maintenance operations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop <container name>\n$ docker start <container name>\n```\n\n----------------------------------------\n\nTITLE: Running ODI Docker Container\nDESCRIPTION: Docker command to start an ODI container with specified environment variables, volume mounting, and port mapping. This command creates an ODI domain and starts the ODI agent.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -t -i --name ODIContainer --env-file ./odi.env.list -v /scratch/DockerVolume/ODIVolume/ODI:/u01/oracle/user_projects -p 20910:20910 oracle/odi:12.2.1.3.0\n```\n\n----------------------------------------\n\nTITLE: Referencing WebCenter Sites 12.2.1.3 Setup in Markdown\nDESCRIPTION: A Markdown link pointing to the setup instructions for Oracle WebCenter Sites version 12.2.1.3.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- Refer [Oracle WebCenter Sites 12.2.1.3.0](dockerfiles/12.2.1.3) for detail set up.\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for OIG Patch Files\nDESCRIPTION: Commands to set the correct permissions for the downloaded patch files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ chmod 644 <work directory>/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/patches/*\n$ chmod 644 <work directory>/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/opatch_patch/*\n```\n\n----------------------------------------\n\nTITLE: Creating Network Bridge for Container\nDESCRIPTION: Commands to create different types of network bridges (standard bridge, macvlan, ipvlan) for the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/OracleConnectionManager/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=10.0.20.0/24 rac_pub1_nw\n\npodman network create -d macvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n\npodman network create -d ipvlan --subnet=10.0.20.0/24 -o parent=ens5 rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Documenting Oracle EBS UM Scripts in Markdown\nDESCRIPTION: This snippet describes the location and purpose of scripts for creating a service account in Oracle EBS UM target.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/samples/scripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## Oracle EBS UM\n\nDirectory Oracle_EBS_UM contains script files for creating a service account in EBS target For UM\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Oracle Restart Container Environment in Bash\nDESCRIPTION: This snippet provides commands to remove the Oracle Restart container and the associated network. It uses Podman to manage containers and networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npodman rm -f ${GPCNODE}\npodman network inspect rac_pub1_nw &> /dev/null && podman network rm rac_pub1_nw\n```\n\n----------------------------------------\n\nTITLE: Hardware Requirements Table in Markdown\nDESCRIPTION: Markdown table defining the minimum hardware requirements for running OIG Docker images, specifying RAM and disk space requirements.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Hardware  | Size                                                      |\n| :-------- | :---------------------------------------------------------|\n| RAM       | Min 16GB                                                  |\n| Disk Space| Min 50GB (ensure 10G+ available in the Docker Root Dir)   |\n```\n\n----------------------------------------\n\nTITLE: Database Connection String Format\nDESCRIPTION: Format for the database connection string used to connect to the Oracle container database\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTSTRING=<hostname/containername>:1521/ORCLPDB1.localdomain\n```\n\n----------------------------------------\n\nTITLE: Defining Manifest for Oracle WebCenter Sites Installation Script\nDESCRIPTION: This manifest file specifies the main class and classpath for the Oracle WebCenter Sites installation script. It includes references to the configuration JAR and Oracle JDBC driver.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/wcs-wls-docker-install/Manifest.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nManifest-Version: 1.0\nClass-Path: /u01/oracle/wcsites/common/bin/config-silent-wcsites/config-silent-wcsites.jar /u01/oracle/oracle_common/modules/oracle.jdbc/ojdbc8.jar\nMain-Class: com.oracle.wcsites.install.InstallScript\n```\n\n----------------------------------------\n\nTITLE: Setting External Storage Permissions\nDESCRIPTION: Command to set the correct ownership on the external storage directory to match the Oracle user in the Docker container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tuxedo_full/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo chown -R 1000 ${LOCAL_DIR}\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Container\nDESCRIPTION: Starts the WebLogic container with the configured domain and application, connected to the SampleNET network.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-oradb-wlsstore/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -i -t -p 7001:7001 --network=SampleNET --name WLSStoreContainer 12212-oradb-wlsstore:latest\n```\n\n----------------------------------------\n\nTITLE: Creating an OUDSM Console Domain (Python)\nDESCRIPTION: This Python script creates an Oracle Unified Directory Services Manager (OUDSM) console domain. It should be executed as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n72_create_oudsm_domain.py\n```\n\n----------------------------------------\n\nTITLE: Moving Software to HTTP Server Volume\nDESCRIPTION: Commands to move installation files to HTTP server volume and cleanup build context.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd OracleUnifiedDirectory/dockerfiles/12.2.1.3\ncp p26270957_122130_Generic.zip /Volumes/orarepo\nrm p26270957_122130_Generic.zip\n```\n\n----------------------------------------\n\nTITLE: Alternative Docker Build Command\nDESCRIPTION: Direct docker build command to create Tuxedo ART image with specific version tag.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_workbench_tm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t oracle/tuxedoartwkbtm:12.2.2 .\n```\n\n----------------------------------------\n\nTITLE: Defining Labels for Oracle Database XE Docker Image\nDESCRIPTION: This Dockerfile snippet demonstrates how to effectively use LABEL instructions to provide metadata for an Oracle Database XE image. It includes information about the provider, issue tracking, volumes, and ports.\nSOURCE: https://github.com/oracle/docker-images/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL \"provider\"=\"Oracle\"                                   \\\n      \"issues\"=\"https://github.com/oracle/docker-images/issues\"         \\\n      \"volume.data\"=\"/opt/oracle/oradata\"                               \\\n      \"volume.setup.location1\"=\"/opt/oracle/scripts/setup\"              \\\n      \"volume.setup.location2\"=\"/docker-entrypoint-initdb.d/setup\"      \\\n      \"volume.startup.location1\"=\"/opt/oracle/scripts/startup\"          \\\n      \"volume.startup.location2\"=\"/docker-entrypoint-initdb.d/startup\"  \\\n      \"port.listener\"=\"1521\"                                            \\\n      \"port.oemexpress\"=\"5500\"                                          \\\n      \"port.apex\"=\"8080\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Patch Installation\nDESCRIPTION: Commands to verify the patch installation inside the container using OPatch utility.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-patch-fmw-for-k8s/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd OPatch\n./opatch version\n./opatch lspatches\n```\n\n----------------------------------------\n\nTITLE: Container Startup Command Configuration\nDESCRIPTION: Specifies the command to create and start the OUD instance when the container launches.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"sh\", \"-c\", \"${SCRIPT_DIR}/createAndStartOUDInstance.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Building Container Image with Docker CLI in Shell\nDESCRIPTION: Builds the Management Agent container image using the Docker CLI.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> docker build -t oracle/mgmtagent-container .\n```\n\n----------------------------------------\n\nTITLE: Accessing Kibana URL Example\nDESCRIPTION: Example URL format for accessing the Kibana UI, where mesh-host represents the host machine's hostname or IP address running the container, and 5601 is the configured port number.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/kibana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://mesh-host:5601\n```\n\n----------------------------------------\n\nTITLE: WebLogic Domain Properties Configuration\nDESCRIPTION: Properties file format for specifying WebLogic admin credentials.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-patch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nusername=myadminusername\npassword=myadminpassword\n```\n\n----------------------------------------\n\nTITLE: Launching Administration Client in Container\nDESCRIPTION: Command to execute the Administration Client utility inside a running Oracle GoldenGate container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -ti --user ogg <container name> adminclient\n```\n\n----------------------------------------\n\nTITLE: Removing Container\nDESCRIPTION: Final command to remove the container of the deleted node from the system.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/DELETION.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npodman rm -f racnodep3\n```\n\n----------------------------------------\n\nTITLE: Pulling Oracle Database Docker Image\nDESCRIPTION: Commands to download and retag the Oracle Database Enterprise Edition Docker image\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull container-registry.oracle.com/database/enterprise:12.2.0.1\n$ docker tag container-registry.oracle.com/database/enterprise:12.2.0.1 database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Example for Oracle GoldenGate 23ai\nDESCRIPTION: Docker Compose configuration file referenced as an example for building and running Oracle GoldenGate Docker images. The file is mentioned as a sample but actual code is not provided in the text.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleGoldenGate/23/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying NGINX Docker Container\nDESCRIPTION: Commands for building a Docker image with NGINX, running it with port 80 exposed, and pushing it to Docker Hub. Requires Docker Hub credentials and replacing the registry placeholder with actual username.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/docker-hello-world/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREGISTRY=YOUR_DOCKER_HUB_USERNAME\ndocker build --rm -t ${REGISTRY}/docker-hello-world .\ndocker run -d -p 80 ${REGISTRY}/docker-hello-world\ndocker push ${REGISTRY}/docker-hello-world\n```\n\n----------------------------------------\n\nTITLE: Cleaning Data Folders for Slim Image Setup\nDESCRIPTION: Commands to remove data directories when using Oracle Slim Image setup. Removes all contents from the node-specific directories.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/CLEANUP.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /scratch/rac/cluster01/node1/*\nrm -rf /scratch/rac/cluster01/node2/*\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific RAC Node Example\nDESCRIPTION: Example of deleting racnodep3 from a 3-node cluster by executing the deletion script within the target container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/DELETION.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman exec -it racnodep3 bash\ncd /opt/scripts/startup/scripts/\npython3 main.py --delracnode=\"del_rachome=true;del_gridnode=true\"\n```\n\n----------------------------------------\n\nTITLE: Generated Configuration Output\nDESCRIPTION: Example of the final configuration file generated by Confd after processing the template with the provided key-value pairs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  cluster:\n    targets:\n        [\n        gratuitous text = <no value>\n\n        '10.9.1.2:32770',\n        '10.9.1.2:32771',\n        ]\n```\n\n----------------------------------------\n\nTITLE: Building OUD Docker Image using HTTP Server\nDESCRIPTION: Docker build command using local HTTP server for software download.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd OracleUnifiedDirectory/dockerfiles/12.2.1.3\ndocker build --add-host=orarepo:${orarepo_ip} -t oracle/oud:12.2.1.3.0 .\n```\n\n----------------------------------------\n\nTITLE: Starting Local HTTP Server for Build\nDESCRIPTION: Docker commands to setup and run a local HTTP server for software download during build.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull httpd:alpine\ndocker run -dit --hostname orarepo --name orarepo \\\n    -p 8080:80 \\\n    -v /Volumes/orarepo:/usr/local/apache2/htdocs/ \\\n    httpd:alpine\n```\n\n----------------------------------------\n\nTITLE: Building with Custom Server Name Prefix\nDESCRIPTION: Command to build the image with a custom managed server name prefix.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t 12212-msiserver --build-arg ms_name_prefix=managedServer .\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration for OUD Docker Image\nDESCRIPTION: Specifies required system packages for the OUD installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlibaio hostname vi perl\n```\n\n----------------------------------------\n\nTITLE: Checking Applied Patches in Essbase Image\nDESCRIPTION: Command to verify the patches applied to the Oracle Essbase image using OPatch.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleEssbase/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run oracle/essbase:21.1.0 sh -c '$ORACLE_HOME/OPatch/opatch lspatches'\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image from Runit Base\nDESCRIPTION: Example Dockerfile showing how to build a custom image using occs/runit:0.1 as the base image. This is the starting point for creating a multiprocess container with runit as the init system.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/runit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM occs/runit:0.1\n# Lot's of cool stuff here\n```\n\n----------------------------------------\n\nTITLE: Removing Install Key from Docker Volume in Shell\nDESCRIPTION: Removes the install key (input.rsp) from the shared Docker volume mountpoint after verification.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n> rm  /var/lib/docker/volumes/mgmtagent-volume/_data/mgmtagent_secret/input.rsp\n```\n\n----------------------------------------\n\nTITLE: Docker Path Reference for Sharding Extension\nDESCRIPTION: File path reference to the sharding deployment documentation and implementation scripts\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/extensions/sharding/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndb-sharding/docker-based-sharding-deployment\n```\n\n----------------------------------------\n\nTITLE: Documenting PeopleSoft View Definitions in Markdown\nDESCRIPTION: This snippet describes the location of view definitions for PeopleSoft targets.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/samples/scripts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## PEOPLESOFT\n\nDirectory PEOPLESOFT contains views definitions for peoplesoft target\n```\n\n----------------------------------------\n\nTITLE: Generated Prometheus Configuration with Target Endpoints\nDESCRIPTION: This YAML snippet shows the resulting prometheus.yml configuration after confd processes the template with actual backend container endpoints. It lists the specific IP addresses and ports of cAdvisor instances to be monitored.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/prometheus/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: prometheus-scraper\n  scrape_interval: 5s\n  target_groups:\n    - targets: [\n    '10.9.1.1:32001',\n    '10.9.1.2:32002',\n    ]\n```\n\n----------------------------------------\n\nTITLE: RAC Setup Success Message\nDESCRIPTION: Success message displayed when Oracle RAC database setup is complete.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n===================================\nORACLE RAC DATABASE IS READY TO USE\n===================================\n```\n\n----------------------------------------\n\nTITLE: Starting an Oracle Unified Directory Services Manager Console (Bash)\nDESCRIPTION: This script starts an Oracle Unified Directory Services Manager (OUDSM) console. It should be executed as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n70_start_oudsm_domain.sh\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Proxy for Docker Build Environment\nDESCRIPTION: Commands to set HTTP and HTTPS proxy environment variables if your environment requires a proxy server to access the internet during the Docker build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n$ export https_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n```\n\n----------------------------------------\n\nTITLE: Running OHS Container with Custom Configuration\nDESCRIPTION: Command to run OHS container with custom mod_weblogic configuration, mounting both domain properties and configuration files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v `HOST PATH where the domain.properties file is`:/u01/oracle/bootdir -v /scratch/DockerVolume/OHSVolume:/config -w /config -d --name ohs -p 7777:7777  oracle/ohs:12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Checking Container User Permissions\nDESCRIPTION: Commands to verify the container user identity and set appropriate permissions for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_workbench_tm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --rm --entrypoint=\"/bin/bash\" oracle/tuxedoartwkbtm -c \"whoami && id\" tuxedoartwkbtm\n$ sudo chown -R 1000 ${LOCAL_DIR}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for New RAC Node\nDESCRIPTION: Creates and cleans the directory structure required for an additional Oracle RAC node.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /scratch/rac/cluster01/node3\nrm -rf /scratch/rac/cluster01/node3/*\n```\n\n----------------------------------------\n\nTITLE: Starting WebCenter Sites Admin Container\nDESCRIPTION: Command to run the WebCenter Sites Admin Server container with specified network, ports and volume mounts\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name <container_name> --network=<network_name> -p <weblogic_port>:7001 -p <weblogic_ssl_port>:9001 -v <user_projects_volume_dir>:/u01/oracle/user_projects -v <sites_shared_volume_dir>:/u01/oracle/sites-shared --env-file <environment_file> <repo_name:tag_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name WCSitesAdminContainer --network=WCSitesNet -p 7001:7001 -p 9001:9001 -v /scratch/WCSitesVolume/WCSites:/u01/oracle/user_projects -v /scratch/WCSitesVolume/WCSitesShared:/u01/oracle/sites-shared --env-file ./wcsitesadminserver.env.list oracle/wcsites:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers\nDESCRIPTION: Docker command to list all containers, including those that have exited. Useful for container management and troubleshooting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps –a \n```\n\n----------------------------------------\n\nTITLE: Listing Community Contribution for Oracle Unified Directory in Markdown\nDESCRIPTION: This snippet provides a list of community contributions, specifically mentioning Oracle Unified Directory with a link to its directory and crediting the contributor with their GitHub username.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [Oracle Unified Directory](OracleUnifiedDirectory/) contributed by [@oehrlis](https://github.com/oehrlis).\n```\n\n----------------------------------------\n\nTITLE: NGINX Environment Configuration Variables\nDESCRIPTION: Required environment variables for NGINX load balancer configuration including API token, key/value store connection details, backend discovery, and healthcheck settings.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/nginx-lb-to-nginx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOCCS_API_TOKEN={{api_token}}\nKV_IP=172.17.0.1\nKV_PORT=9109\nOCCS_BACKEND_KEY={{sd_deployment_containers_path \"backend\" 80}}\nOCCS_HEALTHCHECK_HTTP=http://:8885/?timeout=10s&interval=30s\n```\n\n----------------------------------------\n\nTITLE: Stopping Apache Container\nDESCRIPTION: Commands for stopping Apache container and viewing container logs.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12213-webtier-apache/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop apache\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs --details <Container-id>\n```\n\n----------------------------------------\n\nTITLE: Building TuxedoTMA Docker Image\nDESCRIPTION: Command to build the Oracle Tuxedo SALT+TMA Docker image with version 12.2.2.1 after applying required patches and providing installation binaries.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tuxedoalltma:12.2.2.1 .\n```\n\n----------------------------------------\n\nTITLE: Creating Work Directory for OAM Docker Files\nDESCRIPTION: Command to create a working directory where OAM Docker files will be placed.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir <work directory>\n```\n\n----------------------------------------\n\nTITLE: Configuring cAdvisor Volume Mounts for Docker Metrics\nDESCRIPTION: This snippet shows the required volume mounts for cAdvisor to gather metrics about the Docker engine. It includes access to Docker's runtime information, system information, and Docker's library.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/prometheus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n/var/run:/var/run\n/sys/:/sys:ro\n/var/lib/docker/:/var/lib/docker:ro\n```\n\n----------------------------------------\n\nTITLE: Stopping an OUD Container\nDESCRIPTION: This command stops a running OUD container. It's the first step in removing a container from the Docker environment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop <containername>\n```\n\n----------------------------------------\n\nTITLE: HTML License Comment\nDESCRIPTION: Copyright notice and license information for Oracle's Universal Permissive License v 1.0\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCoherence/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n    Copyright (c) 2015, 2022, Oracle and/or its affiliates.\n    Licensed under the Universal Permissive License v 1.0 as shown at\n    https://oss.oracle.com/licenses/upl.\n-->\n```\n\n----------------------------------------\n\nTITLE: Viewing Management Agent Container Logs in Shell\nDESCRIPTION: Displays the logs of the Management Agent container for validation and troubleshooting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> docker logs mgmtagent-container\n```\n\n----------------------------------------\n\nTITLE: Building Tuxedo Docker Image with buildDockerImage.sh Script\nDESCRIPTION: Example command to build a Docker image for Tuxedo 12.1.3 using the buildDockerImage.sh script. The command specifies the version, installer file, and uses the '-s' flag for silent installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/core/dockerfiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./buildDockerImage.sh -v 12.1.3 -i tuxedo121300_64_Linux_01_x86.zip -s\n```\n\n----------------------------------------\n\nTITLE: Configure Proxy Settings for Build\nDESCRIPTION: Commands to set HTTP and HTTPS proxy settings for the Docker build process\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n$ export https_proxy=http://<proxy_server_hostname>:<proxy_server_port>\n```\n\n----------------------------------------\n\nTITLE: Getting HTTP Server IP Address\nDESCRIPTION: Command to retrieve the IP address of the local HTTP server container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\norarepo_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' orarepo)\n```\n\n----------------------------------------\n\nTITLE: LDAPSEARCH Output for Naming Contexts\nDESCRIPTION: Example output from the ldapsearch command showing the naming contexts available in the Oracle Unified Directory server. It displays both the private naming contexts and the user-visible naming contexts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nds-private-naming-contexts: cn=schema\nnamingContexts: dc=example1,dc=com\nnamingContexts: dc=example2,dc=com\n```\n\n----------------------------------------\n\nTITLE: Validating RAC Environment (Bash)\nDESCRIPTION: Checks the status of all containers in the RAC setup to ensure they are running and healthy.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n```\n\n----------------------------------------\n\nTITLE: Tagging Oracle Fusion Middleware Infrastructure Docker Image\nDESCRIPTION: Docker command to retag the downloaded Oracle Fusion Middleware Infrastructure image for local use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4\n```\n\n----------------------------------------\n\nTITLE: Listing Archived Oracle Docker Image Projects in Markdown\nDESCRIPTION: This Markdown snippet lists four archived Oracle Docker image projects with links to their respective directories. It includes a note about outdated documentation and potentially invalid paths.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Archived content\n\nThe projects in this section have been archived and should be used for\nreference purposes only.\n\nNote that documentation in each project has not been updated, so some paths\nmay now be invalid.\n\n- [ContainerCloud](./ContainerCloud)\n- [Oracle Data Integrator](./OracleDataIntegrator)\n- [Oracle Enterprise Data Quality](./OracleEDQ)\n- [Oracle Tuxedo](./OracleTuxedo)\n```\n\n----------------------------------------\n\nTITLE: Cloning Oracle Docker Images Repository\nDESCRIPTION: Commands to navigate to the work directory and clone the Oracle docker-images repository which contains the necessary Dockerfiles and scripts for OAM.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <work directory>\n$ git clone https://github.com/oracle/docker-images\n```\n\n----------------------------------------\n\nTITLE: Setting Up Health Check for Oracle Identity Management Docker Container\nDESCRIPTION: Configures a health check command that runs periodically to ensure the Oracle Identity Management service is functioning correctly.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt#2025-04-23_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK --start-period=5m --interval=1m CMD curl -k -s --fail `$HEALTH_SCRIPT_FILE` || exit 1\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Store Entries\nDESCRIPTION: Example of key-value pairs that need to be added to the store for container configuration. These entries define the container endpoints.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/confd/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napps/hello-world/containers/one=10.9.1.2:32270\napps/hello-world/containers/two=10.9.1.2:32271\n```\n\n----------------------------------------\n\nTITLE: Stopping Management Agent Container in Shell\nDESCRIPTION: Stops a running Management Agent container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n> docker stop mgmtagent-container\n```\n\n----------------------------------------\n\nTITLE: Confirming User Group Membership\nDESCRIPTION: Command to verify that a user is part of the Docker group. Should be run after adding a user to the Docker group to ensure proper permissions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ id -Gn <userid>\n```\n\n----------------------------------------\n\nTITLE: Building Oracle Server JRE Docker Image\nDESCRIPTION: Commands to build the Oracle Server JRE image which is a prerequisite for FMW Infrastructure and Business Intelligence images.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd OracleJava/java-8\n$ docker build -t oracle/serverjre:8 .\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Docker Build\nDESCRIPTION: Environment variable configuration for proxy settings needed when building Docker images behind a corporate proxy.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=myproxy.example.com:80\n$ export https_proxy=myproxy.example.com:80\n$ export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n```\n\n----------------------------------------\n\nTITLE: Node Manager Properties Configuration\nDESCRIPTION: Example of domain.properties file format for configuring Node Manager authentication credentials\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleHTTPServer/samples/12214-patch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nusername=mynodemanagerusername\npassword=mynodemanagerpassword\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Output\nDESCRIPTION: Example output of the docker ps command showing the newly created OUD container in starting status. The output includes container ID, image name, command, creation time, status, and container name.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                            PORTS               NAMES\n4ac271b366ff        oud-with-patch:12.2.1.4.0          \"sh -c ${SCRIPT_DIR}…\"   3 seconds ago       Up 2 seconds (health: starting)                       myoudds2b\n```\n\n----------------------------------------\n\nTITLE: Launching RAC Node Container with BlockDevices Configuration\nDESCRIPTION: Commands to start, configure network connections, and initialize a new RAC node container. Includes steps to disconnect and reconnect network interfaces with proper IP addresses.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE3_CONTAINER_NAME} \npodman-compose stop ${RACNODE3_CONTAINER_NAME}\n\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${RACNODE3_CONTAINER_NAME}\n\npodman network connect  ${PUBLIC_NETWORK_NAME} --ip ${RACNODE3_PUBLIC_IP} ${RACNODE3_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${RACNODE3_CRS_PRIVATE_IP1}  ${RACNODE3_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${RACNODE3_CRS_PRIVATE_IP2}  ${RACNODE3_CONTAINER_NAME}\n\npodman-compose start ${RACNODE3_CONTAINER_NAME}\npodman exec ${RACNODE3_CONTAINER_NAME} /bin/bash -c \"tail -f /tmp/orod/oracle_rac_setup.log\"\n```\n\n----------------------------------------\n\nTITLE: Build Logs for Patched Oracle RAC Database Container Image\nDESCRIPTION: Displays the output logs after building a patched Oracle RAC Database container image, showing the image name and build completion time.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/applypatch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n Oracle Database container image for Real Application Clusters (RAC) version 21.3.0 is ready to be extended:\n \n    --> oracle/database-rac:21.3.0-21.16.0\n \n  Build completed in 1419 seconds.\n```\n\n----------------------------------------\n\nTITLE: Healthy OUD Container Status Output\nDESCRIPTION: Docker ps output showing the OUD container in healthy status after successful startup. The output shows the transition from \"health: starting\" to \"healthy\" status.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                       PORTS               NAMES\n4ac271b366ff        oud-with-patch:12.2.1.4.0          \"sh -c ${SCRIPT_DIR}…\"   8 minutes ago       Up 8 minutes (healthy)                           myoudds2b\n```\n\n----------------------------------------\n\nTITLE: Running NoSQL Commands via Container\nDESCRIPTION: Executes NoSQL commands using a temporary container with proper security and networking configurations.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti  -v secfiles:/shared_conf:ro --link kvlite:store oracle/nosql:ce-sec \\\n  java -jar lib/kvstore.jar ping -host store -port 5000  -security /shared_conf/user.security\n```\n\n----------------------------------------\n\nTITLE: Pinging KVLite Store from a Second Container\nDESCRIPTION: Command to ping the KVLite store instance from a second container. It uses the shared configuration volume and links to the first container for hostname resolution.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti  -v secfiles:/shared_conf:ro --link kvlite:store oracle/nosql:ce-sec \\\n  java -jar lib/kvstore.jar ping -host store -port 5000  -security /shared_conf/user.security\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle RAC Database Container Image\nDESCRIPTION: Demonstrates how to retag the built Oracle RAC Database container image using podman, assigning it a new tag for easier reference.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/applypatch/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npodman tag localhost/oracle/database-rac:21.3.0-21.16.0 localhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Database Password Change via SQLPlus\nDESCRIPTION: Commands to connect to database and alter system password\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --network=SOANet --rm store/oracle/database-instantclient:12.2.0.1 sqlplus sys/Oradoc_db1@soadb:1521/soadb.us.oracle.com AS SYSDBA\n```\n\nLANGUAGE: sql\nCODE:\n```\nSQL> alter user sys identified by Welcome1 container=all;\n```\n\n----------------------------------------\n\nTITLE: Makefile Structure for Stack Configuration\nDESCRIPTION: Shows the organization of Makefiles used to configure stack builds, including version tags, registry names, and image dependencies across different directories\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nimages/build/vars.mk        # defines version tag and registry name\nimages/IMAGE_NAME/Makefile   # defines image name\nstacks/STACK_NAME/Makefile   # defines dependent images\n```\n\n----------------------------------------\n\nTITLE: HAProxy Environment Configuration for Dynamic NGINX Backend Discovery\nDESCRIPTION: Environment variables required for HAProxy to discover and connect to dynamic NGINX backends through a key/value endpoint. This configuration enables HAProxy to load balance between a variable number of NGINX instances by retrieving backend container information from a service discovery mechanism.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/haproxy-lb-to-nginx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `OCCS_API_TOKEN={{api_token}}` - the token for authenticating against the key/value endpoint\n* `KV_IP=172.17.0.1` - the IP address which provides the key/value endpoint, in this case the host running the container\n* `KV_PORT=9109` - the port on which the key/value endpoint is listening\n* `OCCS_BACKEND_KEY={{sd_deployment_containers_path \"backend\" 80}}` - the key prefix in the key/value store that can be used to lookup the IP and published port of each backend\n* `OCCS_HEALTHCHECK_HTTP=http://:8886/?timeout=10s&interval=30s` - the healthcheck URL to use\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables\nDESCRIPTION: Commands to set up environment variables for proxy servers to resolve yum.oracle.com connectivity issues when building Docker images.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=http://www-yourcompany.com:80 \n$ export https_proxy=http://www-yourcompany.com:80 \n$ export HTTP_PROXY=http://www-yourcompany.com:80 \n$ export HTTPS_PROXY=http://www-yourcompany.com:80 \n$ export NO_PROXY=localhost,.yourcompany.com \n```\n\n----------------------------------------\n\nTITLE: Checking Docker User Permissions\nDESCRIPTION: Commands to verify the user and group permissions inside the Docker container and set appropriate ownership for the local directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/dockerfiles/12.2.2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -ti --rm --entrypoint=\"/bin/bash\" oracle/tuxedoalltma -c \"whoami && id\" tuxedoalltma\noracle\nuid=1000(oracle) gid=1000(oracle) groups=1000(oracle)\nsudo chown -R 1000 ${LOCAL_DIR}\n```\n\n----------------------------------------\n\nTITLE: Building New Image Version\nDESCRIPTION: Command to build a new version of the WebLogic image with updated applications.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t 12212-summercamps-msiserver:1.1 -f Dockerfile.addapp --build-arg name=summercamps  --build-arg source=apps1.1/summercamps.ear --build-arg simple_filename=summercamps.ear .\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Examples for Oracle Database\nDESCRIPTION: Directory listing showing various examples for extending Oracle Database Docker images, including version-specific compose files, database customization, and container management scenarios.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 1830-docker-compose\\nProvides a Docker Compose example file for Oracle Database 18c 18.3.0\\n\\n# 12102-docker-compose\\nProvides a Docker Compose example file for Oracle Database 12.1.0.2\\n\\n# 12201-docker-compose\\nProvides a Docker Compose example file for Oracle Database 12.2.0.1\\n\\n# applypatch\\nExample of how to apply a custom patch or PSU to the image\\n\\n# customdb\\nExample of how to create a database with user defined names.\\n\\n# customscripts\\nExample of how to execute custom scripts on database setup/startup.\\n\\n# kubernetes\\nExample of how to deploy the database using native Kubernetes objects.\\n\\n# plugpdb\\nExample of how to plug an existing PDB into a CDB inside the container.\\n\\n# prebuiltdb\\nExample of how to create a prebuilt database inside a container.\\n\\n# startersetcontainer\\nExample of how to add starter set data to the database inside the container.\\nUseful for example to setup test environments.\\n\\n# unplugpdb\\nExample of how to unplug a PDB from a container's CDB.\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle Database Docker Image\nDESCRIPTION: Command to retag an Oracle Database image downloaded from Docker Store to the expected repository name for use with WebCenter Sites deployment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag store/oracle/database-enterprise:12.2.0.1 database/enterprise:12.2.0.1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up ASM Disks in Bash\nDESCRIPTION: This command zeroes out the first 80MB of the ASM disk to clean it up. It uses the dd command to write zeros to the disk device.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/orestart/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero of=/dev/oracleoci/oraclevdd  bs=8k count=10000\n```\n\n----------------------------------------\n\nTITLE: Building Oracle TSAM Plus Docker Image\nDESCRIPTION: Basic docker build command to create the TSAM Plus image. Requires oracle/serverjre:8 as a prerequisite.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t oracle/tsam:12.2.2 .\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for NFS Storage RAC Environment\nDESCRIPTION: Commands to clean up RAC environment using NFS storage, including container removal, volume cleanup, and network removal.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/racpodmancompose_1/README.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npodman rm -f racnodep1 racnodep2 rac-dnsserver racnode-storage racnodepc1-cman \nrm -rf /opt/containers /opt/.secrets\nexport ORACLE_DBNAME=ORCLCDB\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\npodman volume -f racstorage\npodman network rm -f rac_pub1_nw rac_priv1_nw\npodman rmi -f localhost/oracle/rac-dnsserver:latest localhost/oracle/rac-storage-server:latest localhost/oracle/database-rac:21.3.0-21.13.0 localhost/oracle/client-cman:21.3.0\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Shell\nDESCRIPTION: Changes the current working directory to the location of the Dockerfile.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/dockerfiles/1.0.0/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> cd OracleManagementAgent/dockerfiles/1.0.0/\n```\n\n----------------------------------------\n\nTITLE: Connecting to Plugged PDB\nDESCRIPTION: SQL connection command to verify access to the newly plugged PDB.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/plugpdb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsql pdbadmin/unplug@//localhost:1521/MYPDB\n```\n\n----------------------------------------\n\nTITLE: SQL Configuration for Oracle DB 12.2 Compatibility\nDESCRIPTION: SQLNet configuration parameter required in sqlnet.ora to resolve logon version compatibility issues between Oracle BI 12.2.1.2.0 and Oracle Database 12.2.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleBI/README.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSQLNET.ALLOWED_LOGON_VERSION_SERVER=11\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for NFS Configuration\nDESCRIPTION: Sets up environment variables for adding a node to Oracle RAC cluster using NFS storage. Configures container names, network settings, and NFS parameters.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE3_CONTAINER_NAME=racnodep3\n# ... remaining exports\n```\n\n----------------------------------------\n\nTITLE: Starting DNS Container for Oracle RAC\nDESCRIPTION: Brings up the DNS container using podman-compose and displays its logs to verify successful startup. This container provides DNS services for the RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose logs ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Validating Oracle RAC Environment with Podman\nDESCRIPTION: Checks the status of the Oracle RAC containers to ensure they are running properly. The output should show all containers as 'healthy', which indicates a properly functioning Oracle RAC environment.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racimage/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npodman ps -a\n\nCONTAINER ID  IMAGE                                  COMMAND               CREATED         STATUS                   PORTS       NAMES\nf1345fd4047b  localhost/oracle/rac-dnsserver:latest  /bin/sh -c exec $...  8 hours ago     Up 8 hours (healthy)                 rac-dnsserver\n2f42e49758d1  localhost/oracle/database-rac:21c                         46 minutes ago  Up 37 minutes (healthy)                 racnodep1\na27fceea9fe6  localhost/oracle/database-rac:21c                         46 minutes ago  Up 37 minutes (healthy)                 racnodep2\n```\n\n----------------------------------------\n\nTITLE: Checking DNS Container Logs\nDESCRIPTION: Displays logs from the DNS container to verify successful initialization. The logs should show a message indicating that the DNS server is ready to use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose logs ${DNS_CONTAINER_NAME}\n################################################\n DNS Server IS READY TO USE!            \n################################################\n```\n\n----------------------------------------\n\nTITLE: Docker Container Status Output\nDESCRIPTION: Example output showing container status after creation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                            PORTS               NAMES\ndbfabfa85fd0        oud-with-patch:12.2.1.4.0          \"sh -c ${SCRIPT_DIR}…\"   6 seconds ago       Up 2 seconds (health: starting)                       myouddstune\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle NoSQL KVLite container with custom hostname\nDESCRIPTION: This command starts an Oracle NoSQL KVLite container with a specific hostname and port mappings. It exposes various ports for different NoSQL services and uses the Community Edition image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=kvlite \\\n    --hostname=kvlite-nosql-container-host \\\n    --env KV_PROXY_PORT=8080 \\\n    -p 8080:8080 \\\n    -p 5000:5000 \\\n    -p 5010-5020:5010-5020 \\\n    -p 5021-5049:5021-5049 \\\n    -p 5999:5999 \\\n    oracle/nosql:ce\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Container for Oracle RAC\nDESCRIPTION: Deploys and configures DNS container with specific network settings for RAC cluster communication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose up -d ${DNS_CONTAINER_NAME}\npodman-compose stop ${DNS_CONTAINER_NAME}\npodman network disconnect ${PUBLIC_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE1_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network disconnect ${PRIVATE2_NETWORK_NAME} ${DNS_CONTAINER_NAME}\npodman network connect ${PUBLIC_NETWORK_NAME} --ip ${DNS_PUBLIC_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE1_NETWORK_NAME} --ip ${DNS_PRIVATE1_IP} ${DNS_CONTAINER_NAME}\npodman network connect ${PRIVATE2_NETWORK_NAME} --ip ${DNS_PRIVATE2_IP} ${DNS_CONTAINER_NAME}\npodman-compose start ${DNS_CONTAINER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Running the Oracle Tuxedo ART+TMA Docker Container\nDESCRIPTION: Command to run the Oracle Tuxedo ART+TMA Docker image in a new container. It mounts a local directory as an external storage to the container at /u01/oracle/user_projects.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_salt_tma/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoartrttma:12.2.2.1\n```\n\n----------------------------------------\n\nTITLE: Deploying Storage Container for Oracle RAC\nDESCRIPTION: Launches the storage container with systemd support and monitors its setup log to ensure proper initialization. This container will provide the NFS storage required for the RAC database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always\" up -d ${STORAGE_CONTAINER_NAME}\npodman-compose exec ${STORAGE_CONTAINER_NAME} tail -f /tmp/storage_setup.log\n\nExport list for racnode-storage:\n/oradata *\n#################################################\n Setup Completed                                 \n#################################################\n```\n\n----------------------------------------\n\nTITLE: TSAM Plus Docker Compose with Existing Schema\nDESCRIPTION: Docker compose configuration for running TSAM Plus with an existing database schema. Requires fewer environment variables as database setup is not needed.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/tsam/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservices:\n  tsam:\n    image: oracle/tsam:12.2.2\n    hostname: tsam.docker\n    ports:\n      - 7001/tcp\n      - 22/tcp\n    privileged: true\n    environment:\n      - \"DB_CONNSTR=db.box:1521/orcl\"\n      - \"DB_TSAM_USER=tsam\"\n      - \"DB_TSAM_PASSWD=tsam\"\n      - \"TSAM_CONSOLE_ADMIN_PASSWD=admin1\"\n      - \"WLS_PW=weblogic1\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for ODI Docker Container\nDESCRIPTION: Sample content for the odi.env.list file, which defines environment variables for the ODI Docker container. This includes database connection details, passwords, and repository information.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=<Database Host Name>:1521/odipdb\nRCUPREFIX=ODI1\nDB_PASSWORD=Welcome1\nDB_SCHEMA_PASSWORD=Welcome1\nSUPERVISOR_PASSWORD=Welcome1\nWORK_REPO_NAME=WORKREP\nWORK_REPO_PASSWORD=Welcome1\nHOST_NAME=<Hostname where ODI docker container is running>\n```\n\n----------------------------------------\n\nTITLE: Retagging Oracle RAC Database Image\nDESCRIPTION: Command to retag the Oracle RAC database image for consistent reference throughout the deployment process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npodman tag localhost/oracle/database-rac:21.3.0-slim localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Copy Management Agent Software\nDESCRIPTION: Command to copy the downloaded Oracle Management Agent software bundle to the Dockerfile directory\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleManagementAgent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp oracle.mgmt_agent.zip OracleManagementAgent/dockerfiles/latest/\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Networks for Oracle RAC\nDESCRIPTION: Creates three required network bridges for Oracle RAC: public network for client access, and two private networks for RAC internal communication with DNS disabled on private networks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npodman network create --driver=bridge --subnet=${PUBLIC_NETWORK_SUBNET} ${PUBLIC_NETWORK_NAME}\npodman network create --driver=bridge --subnet=${PRIVATE1_NETWORK_SUBNET} ${PRIVATE1_NETWORK_NAME} --disable-dns\npodman network create --driver=bridge --subnet=${PRIVATE2_NETWORK_SUBNET} ${PRIVATE2_NETWORK_NAME} --disable-dns\n```\n\n----------------------------------------\n\nTITLE: Container Deployment with Block Devices\nDESCRIPTION: Commands to deploy and configure the new RAC node container using Podman Compose with block device storage. Includes network configuration and container startup.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racslimimage/README.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\npodman-compose --podman-run-args=\"-t -i --systemd=always --cpuset-cpus 0-1 --memory 16G --memory-swap 32G\" up -d ${RACNODE3_CONTAINER_NAME}\npodman-compose stop ${RACNODE3_CONTAINER_NAME}\n# ... remaining commands\n```\n\n----------------------------------------\n\nTITLE: Starting KVLite Container for Remote Access\nDESCRIPTION: Command to start a KVLite container with proper port mappings for remote access, using the host's hostname for container networking.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name=kvlite --hostname=$HOSTNAME \\\n  --env KV_PROXY_PORT=8080 \\\n  -p 8080:8080 \\\n  -p 5000:5000 \\\n  -p 5010-5020:5010-5020 \\\n  -p 5021-5049:5021-5049 \\\n  -p 5999:5999 \\\n  oracle/nosql:ce\n```\n\n----------------------------------------\n\nTITLE: Starting Racnodep2 Container\nDESCRIPTION: Starts the second RAC node container (racnodep2) after network configuration. This is done before starting the first node as part of the proper RAC setup sequence.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/customracdb/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# podman start racnodep2\n```\n\n----------------------------------------\n\nTITLE: Building OAM Docker Image\nDESCRIPTION: Commands to build the Oracle Access Management Docker image using the build script\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleAccessManagement/dockerfiles/12.2.1.4.0/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd <work directory>/docker-images/OracleAccessManagement/dockerfiles\n$ sh buildDockerImage.sh -v 12.2.1.4.0\n```\n\n----------------------------------------\n\nTITLE: Creating Data Volume Directories for ODI Docker Setup\nDESCRIPTION: Commands to create and set permissions for data volume directories used by the ODI Docker containers. These directories will store database datafiles and ODI domain files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleDataIntegrator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /scratch/DockerVolume/ODIVolume/DB\n$ mkdir /scratch/DockerVolume/ODIVolume/ODI\n$ chmod -R 777 /scratch/DockerVolume/ODIVolume\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for NFS Storage on Podman Host\nDESCRIPTION: Commands to set the Oracle database name, create a directory for NFS storage on Podman, and clean any existing ASM disk files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/$ORACLE_DBNAME/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Building Oracle DNS Server Container Image\nDESCRIPTION: Commands to navigate to the build directory and execute the build script for the Oracle DNS Server image. The script performs MD5 checks and builds the image with the specified version.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd <git-cloned-path>/docker-images/OracleDatabase/RAC/OracleDNSServer/dockerfiles \n./buildContainerImage.sh-v <Software Version>\n./buildContainerImage.sh -v latest\n```\n\n----------------------------------------\n\nTITLE: Creating Oracle RAC Container on racnodep1 with Block Devices\nDESCRIPTION: This command creates an Oracle RAC container on the host racnodep1 using Podman. It sets various parameters including hostname, DNS, volumes, system controls, and device mappings for ASM disks.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n--hostname racnodep1 \\\n--dns-search \"example.info\" \\\n--dns 10.0.20.25 \\\n--shm-size 4G \\\n--volume /scratch/rac/cluster01/node1:/u01 \\\n--volume /scratch/common_scripts/podman/rac/envfile_racnodep1:/etc/rac_env_vars/envfile \\\n--health-cmd \"/bin/python3 /opt/scripts/startup/scripts/main.py --checkracstatus\" \\\n--volume /scratch:/scratch \\\n--secret pwdsecret \\\n--secret keysecret \\\n--sysctl 'net.ipv4.conf.eth1.rp_filter=2' \\\n--sysctl 'net.ipv4.conf.eth2.rp_filter=2' \\\n--cpuset-cpus 0-1 \\\n--memory 16G \\\n--memory-swap 32G \\\n--sysctl kernel.shmall=2097152  \\\n--sysctl \"kernel.sem=250 32000 100 128\" \\\n--sysctl kernel.shmmax=8589934592  \\\n--sysctl kernel.shmmni=4096 \\\n--cap-add=SYS_RESOURCE \\\n--cap-add=NET_ADMIN \\\n--cap-add=SYS_NICE \\\n--cap-add=AUDIT_WRITE \\\n--cap-add=AUDIT_CONTROL \\\n--cap-add=NET_RAW \\\n--device=/dev/oracleoci/oraclevdd:/dev/asm-disk1 \\\n--device=/dev/oracleoci/oraclevde:/dev/asm-disk2 \\\n--restart=always \\\n--ulimit rtprio=99  \\\n--systemd=always \\\n--name racnodep1 \\\n localhost/oracle/database-rac:21c-slim\n```\n\n----------------------------------------\n\nTITLE: Checking Storage Shard Size\nDESCRIPTION: Command to check the size of the storage shard in the KVLite instance using the Oracle NoSQL command-line interface.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README-sec.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti -v secfiles:/shared_conf:ro --link kvlite:store oracle/nosql:ce-sec \\\n    java -jar lib/kvstore.jar runadmin -host store -port 5000 \\\n    -security /shared_conf/user.security \\\n    -store kvstore show parameters -service sn1 | grep GB\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Database Container Image\nDESCRIPTION: Command to build an Oracle RAC Database Container Image with Oracle Grid Infrastructure and Oracle Database Software Binaries installed. The example builds version 21.3.0 and retags it for further use.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v 21.3.0\n```\n\nLANGUAGE: bash\nCODE:\n```\npodman tag localhost/oracle/database-rac:21.3.0 localhost/oracle/database-rac:21c\n```\n\n----------------------------------------\n\nTITLE: Running OUD Docker Container\nDESCRIPTION: Example docker run command with volume mapping and port exposure for OUD instance.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name <container name> \\\n--hostname <container hostname> \\\n-p 1389:1389 -p 1636:1636 -p 4444:4444 \\\n-e OUD_INSTANCE=<your oud instance name> \\\n--volume [<host mount point>:]/u01 \\\n--volume [<host mount point>:]/u01/scripts \\\noracle/oud:12.2.1.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating NFS Storage Directory for Oracle RAC\nDESCRIPTION: Creates a directory for NFS storage and cleans any existing disk files. Sets the ORACLE_DBNAME environment variable for the database.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport ORACLE_DBNAME=ORCLCDB\nmkdir -p /scratch/stage/rac-storage/$ORACLE_DBNAME\nrm -rf /scratch/stage/rac-storage/ORCLCDB/asm_disk0*\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Key Structure\nDESCRIPTION: Required key-value store entries for service discovery configuration including stable and candidate service routing.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/images/rolling-router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrolling/null: \"\"                                    # Empty placeholder\nrolling/APP_NAME/stable/id: \"rolling/null\"           # Stable backend service ID\nrolling/APP_NAME/candidate/id: \"rolling/null\"       # Candidate backend service ID\nrolling/APP_NAME/blendpercent: \"0\"                 # Traffic percentage to candidate\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Secrets\nDESCRIPTION: Commands to create and manage Podman secrets for password and key management.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npodman secret create pwdsecret /opt/.secrets/pwdfile.enc\npodman secret create keysecret /opt/.secrets/key.pem\n\npodman secret ls\npodman secret inspect <secret_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Context\nDESCRIPTION: Sets up SELinux context for RAC storage directory\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsemanage fcontext -a -t container_file_t /scratch/stage/rac-storage/$ORACLE_DBNAME\nrestorecon -v /scratch/stage/rac-storage/$ORACLE_DBNAME\n```\n\n----------------------------------------\n\nTITLE: Navigating to Oracle Java Directory and Building JDK Base Image\nDESCRIPTION: Commands to change to the Oracle Java directory and run the build script to create the JDK base image, which is a prerequisite for the Tuxedo Docker image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../OracleJava/java-8\n$ sh build.sh\n```\n\n----------------------------------------\n\nTITLE: Building Oracle RAC Slim Container Image\nDESCRIPTION: Command to build an Oracle RAC container slim image that excludes Oracle Grid Infrastructure and Database software installation.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -v <Software Version> -i -o '--build-arg SLIMMING=true'\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Managed Server in Docker\nDESCRIPTION: Docker commands to start containerized WebLogic Managed Servers (MS1 and MS2) that self-register with the Administration Server.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name MS1 --link wlsadmin:wlsadmin -p 8001:8001 --env-file ./container-scripts/domain.properties -e ADMIN_PASSWORD=<admin_password> -e MS_NAME=MS1 --volumes-from wlsadmin 12214-domain createServer.sh\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name MS2 --link wlsadmin:wlsadmin -p 8002:8001 --env-file ./container-scripts/domain.properties -e ADMIN_PASSWORD=<admin_password> -e MS_NAME=MS2 --volumes-from wlsadmin 12214-domain createServer.sh\n```\n\n----------------------------------------\n\nTITLE: Pinging Oracle NoSQL container from host\nDESCRIPTION: This command demonstrates how to use the Java-based kvstore.jar to ping the Oracle NoSQL container from the host machine using the configured alias.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/kvstore.jar ping -host kvlite-nosql-container-host -port 5000\n```\n\n----------------------------------------\n\nTITLE: NGINX Environment Variables Configuration\nDESCRIPTION: Required environment variables for NGINX container to discover and load balance Apache backends via key/value store.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/stacks/nginx-lb-to-apache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nOCCS_API_TOKEN={{api_token}}\nKV_IP=172.17.0.1\nKV_PORT=9109\nOCCS_BACKEND_KEY={{sd_deployment_containers_path \"backend\" 80}}\nOCCS_HEALTHCHECK_HTTP=http://:8885/?timeout=10s&interval=30s\n```\n\n----------------------------------------\n\nTITLE: Checking an Oracle Unified Directory Instance (Bash)\nDESCRIPTION: This script checks the status and configuration of an Oracle Unified Directory instance. It should be run as the oracle user.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n64_check_oud_instance.sh\n```\n\n----------------------------------------\n\nTITLE: Running NoSQL Admin CLI\nDESCRIPTION: This command demonstrates how to run the NoSQL Admin CLI to connect to the Oracle NoSQL container using the configured alias and port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\njava -jar $KVHOME/lib/kvstore.jar runadmin -host kvlite-nosql-container-host -port 5000 -store kvstore\n```\n\n----------------------------------------\n\nTITLE: Running Veridata Agent Container\nDESCRIPTION: Docker command to run the Veridata Agent container with port mapping and volume configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleVeridata/12.2.1.4/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p ${AGENT_PORT}:${AGENT_PORT} --env-file vdtagent.env -v ${AGENT_HOST_VOLUME}:/u01/oracle/vdt_agent --name ${agenthost} --network=VdtBridge oracle/oggvdt:12.2.1.4 createOrStartVdtAgent.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Objects\nDESCRIPTION: Command to deploy the Kubernetes YAML configuration that creates the namespace, ConfigMap, PVC, Deployment and Service.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/SingleInstance/samples/kubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f kubernetes-example.yaml\nnamespace/example-namespace created\npersistentvolumeclaim/oracle-rdbms-oradata created\nconfigmap/oracle-rdbms-config created\ndeployment.apps/oracle-rdbms created\nservice/database created\n```\n\n----------------------------------------\n\nTITLE: Creating Simple OUD Container\nDESCRIPTION: Example of creating a basic OUD container with volume mapping and port exposure.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --detach --name oudtest \\\n--hostname oudtest \\\n-p 1389:1389 -p 1636:1636 -p 4444:4444 \\\n--volume /Data/vm/docker/volumes/oudtest:/u01 \\\noracle/oud:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Creating Podman Macvlan Networks\nDESCRIPTION: Commands to create macvlan networks for multi-host Oracle RAC deployment with specific network interfaces.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/developers/OTHERS.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npodman network create -d macvlan --subnet=10.0.20.0/24 --gateway=10.0.20.1 -o parent=ens5 rac_pub1_nw\npodman network create -d macvlan --subnet=192.168.17.0/24 --gateway=192.168.17.1 -o parent=ens6 rac_priv1_nw --disable-dns --internal\npodman network create -d macvlan --subnet=192.168.18.0/24 --gateway=192.168.18.1 -o parent=ens7 rac_priv2_nw --disable-dns --internal\n```\n\n----------------------------------------\n\nTITLE: Docker Login to Oracle Container Registry\nDESCRIPTION: Commands to login to Oracle Container Registry using Docker CLI\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/README-OCR-Base.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login container-registry.oracle.com\nUsername: <username>\nPassword: <password>\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for EDQ Image Build\nDESCRIPTION: Commands to set proxy environment variables if needed for accessing yum.oracle.com during the EDQ image build process.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export http_proxy=myproxy.example.com:80\n$ export https_proxy=myproxy.example.com:80\n```\n\n----------------------------------------\n\nTITLE: Pinging KVLite Store from a Secondary Container\nDESCRIPTION: Command to run a ping operation against a KVLite store from a secondary container using container linking.\nSOURCE: https://github.com/oracle/docker-images/blob/main/NoSQL/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -ti --link kvlite:store oracle/nosql:ce \\\n  java -jar lib/kvstore.jar ping -host store -port 5000\n```\n\n----------------------------------------\n\nTITLE: Running WebLogic Admin Server in Docker\nDESCRIPTION: Docker command to start a containerized WebLogic Administration Server with specified environment variables and volume mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -d --name wlsadmin --hostname wlsadmin -p 7001:7001 --env-file ./container-scripts/domain.properties -e ADMIN_PASSWORD=<admin_password> -v <host directory>:/u01/oracle/user_projects 12214-domain\n```\n\n----------------------------------------\n\nTITLE: Cleaning Oracle SOA Suite Data Volume\nDESCRIPTION: Command to remove all SOA data from the configured data volume. This completely erases all persistent data from the SOA Suite containers.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleSOASuite/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf $data_volume/SOA/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Environment Variables\nDESCRIPTION: Sets up essential environment variables for an Oracle database instance, including the database identifier, pluggable database name, domain, and edition.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleFMWInfrastructure/samples/12213-domain-in-volume/env.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nID=InfraDB\nDB_PDB=InfraPDB1\nDB_DOMAIN=us.oracle.com\nDB_BUNDLE=basic\n```\n\n----------------------------------------\n\nTITLE: Checking RAC Storage Container Logs on Podman\nDESCRIPTION: Podman command to check the logs of the RAC storage container to verify successful creation and configuration.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRACStorageServer/README1.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npodman exec racnode-storage tail -f /tmp/storage_setup.log\n```\n\n----------------------------------------\n\nTITLE: Listing Oracle RAC Software Installation Files\nDESCRIPTION: Command to check if the required Oracle RAC software installation files are available in the staging location.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/rac-container/racslimimage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls /scratch/software/21c/goldimages\nLINUX.X64_213000_db_home.zip  LINUX.X64_213000_grid_home.zip\n```\n\n----------------------------------------\n\nTITLE: Building WebLogic Docker Image in Bash\nDESCRIPTION: Command to display usage information for the buildDockerImage.sh script, which is used to build Docker images for Oracle WebLogic.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ sh buildDockerImage.sh -h\n```\n\n----------------------------------------\n\nTITLE: Running OCI CLI with API Key Authentication\nDESCRIPTION: Example of running the OCI CLI container with API key authentication using volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it \\\n  -v \"$HOME/.oci:/oracle/.oci\" \\\n  ghcr.io/oracle/oci-cli os ns get\n{\n  \"data\": \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Oracle RAC Node Container with Block Devices on Podman\nDESCRIPTION: Command to create an additional Oracle RAC node container using block devices with the necessary configuration for joining an existing RAC cluster.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\npodman create -t -i \\\n  --hostname racnodep2 \\\n  --tmpfs /dev/shm:rw,exec,size=4G  \\\n  --volume /boot:/boot:ro \\\n  --dns-search=example.com  \\\n  --volume /opt/containers/rac_host_file:/etc/hosts \\\n  --volume /opt/.secrets:/run/secrets:ro \\\n  --dns=172.16.1.25 \\\n  --dns-search=example.com \\\n  --device=/dev/oracleoci/oraclevdd:/dev/asm_disk1 \\\n  --device=/dev/oracleoci/oraclevde:/dev/asm_disk2 \\\n  --privileged=false \\\n  --cap-add=SYS_NICE \\\n  --cap-add=SYS_RESOURCE \\\n  --cap-add=NET_ADMIN \\\n  --cap-add=AUDIT_CONTROL \\\n  --cap-add=AUDIT_WRITE \\\n  --memory 16G \\\n  --memory-swap 32G \\\n  --sysctl kernel.shmall=2097152 \\\n  --sysctl \"kernel.sem=250 32000 100 128\" \\\n  --sysctl kernel.shmmax=8589934592 \\\n  --sysctl kernel.shmmni=4096 \\\n  -e DNS_SERVERS=\"172.16.1.25\" \\\n  -e EXISTING_CLS_NODES=racnodep1 \\\n  -e NODE_VIP=172.16.1.201  \\\n  -e VIP_HOSTNAME=racnodep2-vip  \\\n  -e PRIV_IP=192.168.17.171  \\\n  -e PRIV_HOSTNAME=racnodep2-priv \\\n  -e PUBLIC_IP=172.16.1.171  \\\n  -e PUBLIC_HOSTNAME=racnodep2  \\\n  -e DOMAIN=example.com \\\n  -e SCAN_NAME=racnodepc1-scan \\\n  -e ASM_DISCOVERY_DIR=/dev \\\n  -e ASM_DEVICE_LIST=/dev/asm_disk1,/dev/asm_disk2 \\\n  -e ORACLE_SID=ORCLCDB \\\n  -e OP_TYPE=ADDNODE \\\n  -e COMMON_OS_PWD_FILE=common_os_pwdfile.enc \\\n  -e PWD_KEY=pwd.key \\\n  -e RESET_FAILED_SYSTEMD=\"true\" \\\n  -e DEFAULT_GATEWAY=\"172.16.1.1\" \\\n  -e TMPDIR=/var/tmp \\\n  --systemd=always \\\n  --cpu-rt-runtime=95000 \\\n  --ulimit rtprio=99  \\\n  --restart=always \\\n  --name racnodep2 \\\n  localhost/oracle/database-rac:21.3.0-21.13.0\n```\n\n----------------------------------------\n\nTITLE: Checking Container Passwords\nDESCRIPTION: Commands to retrieve generated passwords from container logs and instance files.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs --details oud|grep -i password\n```\n\n----------------------------------------\n\nTITLE: Copying OUD Software Files\nDESCRIPTION: Command to copy the Oracle Unified Directory installation files to the build directory.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp p26270957_122130_Generic.zip OracleUnifiedDirectory/12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle RAC Container Shell\nDESCRIPTION: Command to execute an interactive bash shell inside a running Oracle RAC container named 'racnoded2'.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i -t racnoded2 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Testing Service Endpoint\nDESCRIPTION: Command to test the service endpoint using curl to verify load balancing.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8011/\n```\n\n----------------------------------------\n\nTITLE: Tagging and Running OCI CLI Container\nDESCRIPTION: Commands to tag the OCI CLI image for easier use and demonstrate basic container execution with volume mounting.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleCloudInfrastructure/oci-cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag ghcr.io/oracle/oci-cli:latest oci\n$ docker images oci\nREPOSITORY   TAG       IMAGE ID       CREATED      SIZE\noci          latest    387639e80a9a   3 days ago   711MB\n$ docker run -v \"$HOME/.oci:/oracle/.oci\" oci os ns get\n{\n  \"data\": \"demo-tenancy\"\n}\n```\n\n----------------------------------------\n\nTITLE: OUD Directory Server Environment Configuration\nDESCRIPTION: Environment configuration file for adding a new directory server to an existing replication group. Defines parameters for server setup and replication.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleUnifiedDirectory/samples/README.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ninstanceType=AddDS2RS\nOUD_INSTANCE_NAME=myoudds1b\nhostname=myoudds1b\nbaseDN=dc=example1,dc=com\nrootUserDN=<rootUserDN>\nrootUserPassword=<Password>\nadminUID=admin\nadminPassword=<Password>\nbindDN1=<rootUserDN>\nbindPassword1=<Password>\nbindDN2=<rootUserDN>\nbindPassword2=<Password>\nsourceHost=myoudrs1\ninitializeFromHost=myoudds1\ndsreplication_1=verify --hostname ${sourceHost} --port ${adminConnectorPort} --baseDN ${baseDN} --serverToRemove ${hostname}:${adminConnectorPort}\ndsreplication_2=enable --host1 ${hostname} --port1 ${adminConnectorPort} --noReplicationServer1 --host2 ${sourceHost} --port2 ${adminConnectorPort} --replicationPort2 ${replicationPort} --onlyReplicationServer2 --baseDN ${baseDN}\ndsreplication_3=initialize --hostSource ${initializeFromHost} --portSource ${adminConnectorPort} --hostDestination ${hostname} --portDestination ${adminConnectorPort} --baseDN ${baseDN}\ndsreplication_4=verify --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN}\ndsreplication_5=status --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN} --dataToDisplay compat-view\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Service\nDESCRIPTION: Command to rollback service to previous version after failed update.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebLogic/samples/12212-msiserver/README.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update --rollback city_activity_guide\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Enterprise Linux for OUD Installation (Bash)\nDESCRIPTION: This script configures Oracle Enterprise Linux specifically for Oracle Unified Directory installations. It is designed to be executed with root privileges.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Contrib/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/scripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n01_setup_os_oud.sh\n```\n\n----------------------------------------\n\nTITLE: Start Elasticsearch Container\nDESCRIPTION: Command to start a stopped Elasticsearch container in interactive mode.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterPortal/dockerfiles/12.2.1.4/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker container start -i <ES_CONTAINER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Running TuxedoTMA Docker Container\nDESCRIPTION: Command to run the Tuxedo SALT+TMA container with volume mapping for external storage. LOCAL_DIR represents a local directory path that will be mounted to /u01/oracle/user_projects in the container.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/salt_tma/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoalltma:12.2.2.1\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Enterprise Data Quality Managed Server Container\nDESCRIPTION: Command to start an EDQ Managed Server container, specifying the Admin Server host and port.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -ti --name EDQMS -p 8001:8001 -e ADMIN_HOST=AdminHostName -e ADMIN_PORT=7010 --volumes-from EDQAS oracle/edq:12.2.1.3.0 startManagedServer.sh\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tuxedo Performance Pack Docker Image\nDESCRIPTION: Commands to build the Docker image for Tuxedo Advanced Performance Pack and run it in a container. The build script creates the image, and the docker run command starts a container with the performance pack, mounting a local directory for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/performance_pack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./buildDockerImage.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoperfpack\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Oracle RAC Node Addition with BlockDevices\nDESCRIPTION: Defines environment variables needed for adding a node to an Oracle RAC cluster using BlockDevices. Sets container names, network configurations, host parameters, and storage device specifications.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/samples/rac-compose/racimage/README.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nexport HEALTHCHECK_INTERVAL=60s\nexport HEALTHCHECK_TIMEOUT=120s\nexport HEALTHCHECK_RETRIES=240\nexport RACNODE3_CONTAINER_NAME=racnodep3\nexport RACNODE3_HOST_NAME=racnodep3\nexport RACNODE3_PUBLIC_IP=10.0.20.172\nexport RACNODE3_CRS_PRIVATE_IP1=192.168.17.172\nexport RACNODE3_CRS_PRIVATE_IP2=192.168.18.172\nexport INSTALL_NODE=racnodep3\nexport RAC_IMAGE_NAME=localhost/oracle/database-rac:21c\nexport DEFAULT_GATEWAY=\"10.0.20.1\"\nexport CRS_NODES=\"\\\"pubhost:racnodep3,viphost:racnodep3-vip\\\"\"\nexport EXISTING_CLS_NODE=\"racnodep1,racnodep2\"\nexport SCAN_NAME=racnodepc1-scan\nexport ASM_DEVICE1=\"/dev/asm-disk1\"\nexport ASM_DEVICE2=\"/dev/asm-disk2\"\nexport CRS_ASM_DEVICE_LIST=\"${ASM_DEVICE1},${ASM_DEVICE2}\"\nexport ASM_DISK1=\"/dev/oracleoci/oraclevdd\"\nexport ASM_DISK2=\"/dev/oracleoci/oraclevde\"\nexport DNS_CONTAINER_NAME=rac-dnsserver\nexport DNS_HOST_NAME=racdns\nexport DNS_IMAGE_NAME=\"oracle/rac-dnsserver:latest\"\nexport RAC_NODE_NAME_PREFIXD=\"racnoded\"\nexport RAC_NODE_NAME_PREFIXP=\"racnodep\"\nexport DNS_DOMAIN=example.info\nexport PUBLIC_NETWORK_NAME=\"rac_pub1_nw\"\nexport PUBLIC_NETWORK_SUBNET=\"10.0.20.0/24\"\nexport PRIVATE1_NETWORK_NAME=\"rac_priv1_nw\"\nexport PRIVATE1_NETWORK_SUBNET=\"192.168.17.0/24\"\nexport PRIVATE2_NETWORK_NAME=\"rac_priv2_nw\"\nexport PRIVATE2_NETWORK_SUBNET=\"192.168.18.0/24\"\nexport DNS_PUBLIC_IP=10.0.20.25\nexport DB_SERVICE=service:soepdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Jolt Client Environment\nDESCRIPTION: Series of commands to set up the environment for running a Jolt client outside the Docker container. Includes setting environment variables and the Java CLASSPATH required for Jolt connectivity.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/jolt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ source $TUXDIR/tux.env\n$ export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$TUXDIR/udataobj/jolt/jolt.jar:$TUXDIR/udataobj/jolt/joltadmin.jar\n$ javac joltclient.java\n$ java joltclient\n```\n\n----------------------------------------\n\nTITLE: Creating RAC Host File Directory\nDESCRIPTION: Commands to create the directory and file for RAC host configurations on both Podman and Docker hosts.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/docs/README_1.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /opt/containers/\ntouch /opt/containers/rac_host_file\n```\n\n----------------------------------------\n\nTITLE: Running Tuxedo ART Container\nDESCRIPTION: Command to run the Tuxedo ART container with volume mounting for external storage.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleTuxedo/art_workbench_tm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v ${LOCAL_DIR}:/u01/oracle/user_projects oracle/tuxedoartwkbtm:12.2.2\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Oracle WebCenter Sites Docker Image\nDESCRIPTION: This command removes the existing Docker image for Oracle WebCenter Sites version 12.2.1.3. This step is typically performed before building a new image.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleWebCenterSites/dockerfiles/12.2.1.3/wcs-wls-docker-install/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi oracle/wcsites:12.2.1.3\n```\n\n----------------------------------------\n\nTITLE: Starting Oracle Enterprise Data Quality Admin Server Container\nDESCRIPTION: Command to start a new EDQ Admin Server container, specifying necessary environment variables and volume mapping.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/OracleEDQ/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name EDQAS -it -p 7001:7001 --env-file ./12.2.1.3.0/edq.db_env.list -v /scratch/xyz:/u01/oracle/user_projects oracle/edq:12.2.1.3.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Script Usage Instructions\nDESCRIPTION: Command to show the help information for the buildContainerImage.sh script, providing detailed usage instructions.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleDNSServer/README1.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./buildContainerImage.sh -h\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Hub using CLI\nDESCRIPTION: This snippet shows how to authenticate with Docker Hub using the command line interface. It prompts the user for their Docker Hub username and password.\nSOURCE: https://github.com/oracle/docker-images/blob/main/Archive/ContainerCloud/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\n----------------------------------------\n\nTITLE: Applying System Parameters in Linux\nDESCRIPTION: Commands to list and reload system parameters after modifying the sysctl.conf file.\nSOURCE: https://github.com/oracle/docker-images/blob/main/OracleDatabase/RAC/OracleRealApplicationClusters/README1.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -a\nsysctl -p\n```"
  }
]