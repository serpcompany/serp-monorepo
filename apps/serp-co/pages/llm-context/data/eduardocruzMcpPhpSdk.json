[
  {
    "owner": "eduardocruz",
    "repo": "mcp-php-sdk",
    "content": "TITLE: Complete MCP Server Example in PHP\nDESCRIPTION: This code provides a full example of an MCP server using the PHP SDK. It includes all the basic server setup, registering resources (static and dynamic), tools (addition and weather), and prompts (introduction). The server is set up to listen for incoming MCP messages on standard input and output. This is a fully functional server capable of handling various client requests based on the functionality described.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/server-implementation.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Server\\McpServer;\nuse ModelContextProtocol\\Transport\\StdioTransport;\nuse ModelContextProtocol\\Utilities\\Logging\\ConsoleLogger;\nuse ModelContextProtocol\\Protocol\\Models\\ServerCapabilities;\nuse MCP\\Protocol\\Resources\\ResourceTemplate;\n\n// Create a logger\n$logger = new ConsoleLogger();\n\n// Create server capabilities\n$capabilities = new ServerCapabilities(\n    resources: [\n        'list' => true,\n        'listChanged' => true\n    ],\n    tools: [\n        'list' => true,\n        'listChanged' => true\n    ],\n    prompts: [\n        'list' => true\n    ]\n);\n\n// Create an MCP server with capabilities\n$server = new McpServer(\n    name: 'Example Server',\n    version: '1.0.0',\n    capabilities: $capabilities,\n    instructions: 'This server provides example resources and tools.',\n    logger: $logger\n);\n\n// Add resources\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n\n$greetingTemplate = new ResourceTemplate('greeting://{name}');\n$server->registerResourceTemplate('personalized-greeting', $greetingTemplate, function($uri, $params) {\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => \"Hello, {$params['name']}!\"\n            ]\n        ]\n    ];\n});\n\n// Add tools\n$server->registerTool('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b'],\n    'description' => 'Adds two numbers together'\n], function($params) {\n    $result = $params['a'] + $params['b'];\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => (string)$result\n            ]\n        ]\n    ];\n});\n\n// Add prompts\n$server->registerPrompt('introduction', [\n    'properties' => [\n        'name' => ['type' => 'string'],\n        'profession' => ['type' => 'string']\n    ],\n    'required' => ['name', 'profession'],\n    'description' => 'Creates an introduction message'\n], function($params) {\n    return [\n        'messages' => [\n            [\n                'role' => 'user',\n                'content' => [\n                    'type' => 'text',\n                    'text' => \"Please introduce {$params['name']}, who works as a {$params['profession']}.\"\n                ]\n            ]\n        ]\n    ];\n});\n\n// Connect to stdio transport\n$transport = new StdioTransport();\n$server->connect($transport);\n\n// The server is now running and will process messages from stdin\n```\n\n----------------------------------------\n\nTITLE: Initializing MCP Server in PHP\nDESCRIPTION: This snippet sets up the basic components for an MCP server.  It initializes a logger, defines server capabilities (listing resources, tools, and prompts), instantiates an `McpServer` with a name, version, capabilities, instructions, and logger, and finally connects to a `StdioTransport`.  Dependencies include the PHP SDK and related transport and utility classes.  The server is now set up to process messages from standard input.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/server-implementation.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Server\\McpServer;\nuse ModelContextProtocol\\Transport\\StdioTransport;\nuse ModelContextProtocol\\Utilities\\Logging\\ConsoleLogger;\nuse ModelContextProtocol\\Protocol\\Models\\ServerCapabilities;\n\n// Create a logger\n$logger = new ConsoleLogger();\n\n// Create server capabilities\n$capabilities = new ServerCapabilities(\n    resources: [\n        'list' => true,\n        'listChanged' => true\n    ],\n    tools: [\n        'list' => true,\n        'listChanged' => true\n    ],\n    prompts: [\n        'list' => true\n    ]\n);\n\n// Create an MCP server with capabilities\n$server = new McpServer(\n    name: 'Example Server',\n    version: '1.0.0',\n    capabilities: $capabilities,\n    instructions: 'This server provides example resources and tools.',\n    logger: $logger\n);\n\n// Connect to stdio transport\n$transport = new StdioTransport();\n$server->connect($transport);\n\n// The server is now running and will process messages from stdin\n```\n\n----------------------------------------\n\nTITLE: Registering Tools in PHP\nDESCRIPTION: This code registers two tools, `add` and `fetchWeather`, which perform server-side logic.  The `add` tool takes two number inputs (`a` and `b`) and returns their sum. The `fetchWeather` tool takes a location and optional units and returns weather data (simulated in this example). It defines the tool's properties, required parameters, and description, and then links them to the provided callback functions. The `fetchWeather` tool exemplifies handling parameters and provides examples of different content types. Requires the server instance to be running.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/server-implementation.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Add a simple addition tool\n$server->registerTool('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b'],\n    'description' => 'Adds two numbers together'\n], function($params) {\n    $result = $params['a'] + $params['b'];\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => (string)$result\n            ]\n        ]\n    ];\n});\n\n// Add a more complex tool\n$server->registerTool('fetchWeather', [\n    'properties' => [\n        'location' => ['type' => 'string'],\n        'units' => [\n            'type' => 'string',\n            'enum' => ['metric', 'imperial'],\n            'default' => 'metric'\n        ]\n    ],\n    'required' => ['location'],\n    'description' => 'Fetches weather information for a location'\n], function($params) {\n    $location = $params['location'];\n    $units = $params['units'] ?? 'metric';\n    \n    // In a real implementation, this would call a weather API\n    $weatherData = [\n        'location' => $location,\n        'temperature' => ($units === 'metric') ? 22 : 72,\n        'conditions' => 'Sunny',\n        'units' => $units\n    ];\n    \n    return [\n        'content' => [\n            [\n                'type' => 'application/json',\n                'data' => $weatherData\n            ]\n        ]\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Dynamic Resource with McpServer and Template (PHP)\nDESCRIPTION: Here, a dynamic resource is registered with the McpServer using a ResourceTemplate for URI resolution. The registerResourceTemplate method expects a resource name, an instance of ResourceTemplate, and an anonymous function serving as the handler. The handler has access to both the resolved URI and its parameters, returning the appropriate response. This method enables dynamic and parameterized resource delivery.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Create a resource template\n$template = new ResourceTemplate('greeting://{name}');\n\n// Register a dynamic resource with McpServer\n$server->registerResourceTemplate('personalized-greeting', $template, function($uri, $params) {\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => \"Hello, {$params['name']}!\"\n            ]\n        ]\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Registration and Server Notification with McpServer (PHP)\nDESCRIPTION: This code demonstrates how to manage resource registration and notifications with the McpServer class. It shows initializing resource capabilities, registering both static and dynamic resources (the latter with URI templates and handlers), and triggering resource list changed notifications. Requires a pre-instantiated $server and optionally the ResourceTemplate class.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Register resource capabilities\n$server->registerResourceCapabilities();\n\n// Register a static resource\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n\n// Register a dynamic resource with a template\n$template = new ResourceTemplate('greeting://{name}');\n$server->registerResourceTemplate('personalized-greeting', $template, function($uri, $params) {\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => \"Hello, {$params['name']}!\"\n            ]\n        ]\n    ];\n});\n\n// Notify clients of resource list changes\n$server->sendResourceListChanged();\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Resource with ResourceTemplate and DynamicResource (PHP)\nDESCRIPTION: This snippet shows how to build a dynamic resource that generates content based on URI parameters using ResourceTemplate and DynamicResource from the SDK. Prerequisites include MCP\\Protocol\\Resources\\ResourceTemplate and MCP\\Protocol\\Resources\\DynamicResource. The handler function receives the resolved URI and an associative array of parameters, and returns array-based content with tailored greeting text. Suitable for use cases requiring content that adapts to input.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse MCP\\Protocol\\Resources\\ResourceTemplate;\nuse MCP\\Protocol\\Resources\\DynamicResource;\n\n// Create a resource template\n$template = new ResourceTemplate('greeting://{name}');\n\n// Create a dynamic resource\n$resource = new DynamicResource(\n    'personalized-greeting',   // Resource name\n    $template,                 // Resource template\n    function($uri, $params) {  // Handler function\n        return [\n            'content' => [\n                [\n                    'type' => 'text',\n                    'text' => \"Hello, {$params['name']}!\"\n                ]\n            ]\n        ];\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Resources with ResourceManager (PHP)\nDESCRIPTION: This example demonstrates initializing a ResourceManager and registering both static and dynamic resources using the SDK. Each resource may include a name, template, URI, and a handler function. It also shows how to resolve a URI to a resource instance and extract parameters, as well as how to list all available resources. Requires MCP\\Protocol\\Resources\\ResourceManager and related resource classes.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse MCP\\Protocol\\Resources\\ResourceManager;\nuse MCP\\Protocol\\Resources\\StaticResource;\nuse MCP\\Protocol\\Resources\\ResourceTemplate;\n\n// Create a resource manager\n$manager = new ResourceManager();\n\n// Register a static resource\n$staticResource = $manager->registerStatic(\n    'greeting',             // Resource name\n    'greeting://hello',     // Resource URI\n    [                       // Resource content\n        [\n            'type' => 'text',\n            'text' => 'Hello, world!'\n        ]\n    ]\n);\n\n// Create a template and register a dynamic resource\n$template = new ResourceTemplate('greeting://{name}');\n$dynamicResource = $manager->registerDynamic(\n    'personalized-greeting', // Resource name\n    $template,              // Resource template\n    function($uri, $params) {\n        return [\n            'content' => [\n                [\n                    'type' => 'text',\n                    'text' => \"Hello, {$params['name']}!\"\n                ]\n            ]\n        ];\n    }\n);\n\n// Resolve a URI to a resource\n$result = $manager->resolve('greeting://John');\nif ($result !== null) {\n    $name = $result['name'];          // Resource name\n    $resource = $result['resource'];  // Resource object\n    $params = $result['params'];      // Extracted parameters\n    \n    // Handle the resource\n    $content = $resource->handle($uri, $params);\n}\n\n// List all listable resources\n$resources = $manager->list();\n```\n\n----------------------------------------\n\nTITLE: Registering Tools in PHP\nDESCRIPTION: This snippet illustrates how an MCP server registers a tool. Tools are functions executable via the protocol. This example registers an 'add' tool, specifying its required parameters ('a', 'b' as numbers) and providing a PHP closure for its execution logic.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/getting-started.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Register a tool\n$server->registerTool('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b']\n], function($params) {\n    return $params['a'] + $params['b'];\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Static Resource with McpServer (PHP)\nDESCRIPTION: This snippet illustrates direct registration of a static resource on the McpServer using the registerResource method. It assumes an initialized $server object and takes as arguments the resource name, URI, and a content array. This enables the resource to be discoverable and served by the server in static form, with content returned as structured text.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Register a static resource with McpServer\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Resources in PHP\nDESCRIPTION: This snippet demonstrates the registration of resources, which provide data to the client. It adds a static resource (`greeting`) that returns a simple text message and a dynamic resource (`personalized-greeting`) using a resource template.  It also adds a resource that serves content from a file (`readme.md`). The server uses the `registerResource` and `registerResourceTemplate` methods.  The `greetingTemplate` is used to dynamically generate resources based on the provided parameters.  Requires the server instance to be running and initialized.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/server-implementation.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Add a static resource\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n\n// Add a dynamic resource with a template\n$greetingTemplate = new MCP\\Protocol\\Resources\\ResourceTemplate('greeting://{name}');\n$server->registerResourceTemplate('personalized-greeting', $greetingTemplate, function($uri, $params) {\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => \"Hello, {$params['name']}!\"\n            ]\n        ]\n    ];\n});\n\n// Add a file resource\n$server->registerResource('readme', 'file://readme.md', [\n    [\n        'type' => 'text',\n        'text' => file_get_contents('README.md')\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Working with URI Templates via UriTemplate Class (PHP)\nDESCRIPTION: This snippet demonstrates how to utilize the UriTemplate class for managing RFC 6570-style URI templates. It covers creating templates, identifying templates, extracting variable names, expanding templates with values, and matching URIs to retrieve parameter values. The class methods facilitate dynamic routing and parameter extraction for resource handling, and depend on MCP\\Protocol\\Resources\\UriTemplate.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse MCP\\Protocol\\Resources\\UriTemplate;\n\n// Create a URI template\n$template = new UriTemplate('greeting://{name}');\n\n// Check if a string is a template\n$isTemplate = UriTemplate::isTemplate('greeting://{name}'); // true\n\n// Get variable names from a template\n$variables = $template->getVariableNames(); // ['name']\n\n// Expand a template with values\n$uri = $template->expand(['name' => 'John']); // 'greeting://John'\n\n// Match a URI against a template\n$values = $template->match('greeting://John'); // ['name' => 'John']\n```\n\n----------------------------------------\n\nTITLE: Creating an MCP Server in PHP\nDESCRIPTION: This snippet demonstrates how to initialize an MCP server, register various capabilities including static and dynamic resources, and define tools. It shows the use of the StdioTransport for communication, which is a blocking call once connected.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/getting-started.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Server\\McpServer;\nuse ModelContextProtocol\\Transport\\StdioTransport;\nuse MCP\\Protocol\\Resources\\ResourceTemplate;\nuse MCP\\Protocol\\Resources\\StaticResource;\n\n// Create an MCP server\n$server = new McpServer('Example Server', '1.0.0');\n\n// Register resource capabilities\n$server->registerResourceCapabilities();\n\n// Register a static resource\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n\n// Register a dynamic resource with a template\n$greetingTemplate = new ResourceTemplate('greeting://{name}');\n$server->registerResourceTemplate('personalized-greeting', $greetingTemplate, function($uri, $params) {\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => \"Hello, {$params['name']}!\"\n            ]\n        ]\n    ];\n});\n\n// Register a simple tool\n$server->registerTool('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b']\n], function($params) {\n    $result = $params['a'] + $params['b'];\n    return [\n        'content' => [\n            [\n                'type' => 'text',\n                'text' => (string)$result\n            ]\n        ]\n    ];\n});\n\n// Connect to stdio transport\n$transport = new StdioTransport();\n$server->connect($transport);\n\n// The server is now running and will process messages from stdin\n// This is a blocking call\n```\n\n----------------------------------------\n\nTITLE: Creating an MCP Client in PHP\nDESCRIPTION: This snippet shows how to create an MCP client, define its capabilities, and connect to a server using the HttpTransport. It includes examples of initializing the connection, listing resources, calling a registered tool, and shutting down the client.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/getting-started.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Client\\McpClient;\nuse ModelContextProtocol\\Transport\\HttpTransport;\nuse ModelContextProtocol\\Protocol\\Models\\ClientCapabilities;\n\n// Create a client\n$client = new McpClient('Example Client', '1.0.0');\n\n// Set up client capabilities\n$capabilities = new ClientCapabilities(\n    resources: ['list' => true],\n    tools: ['list' => true]\n);\n\n// Connect to an MCP server\n$transport = new HttpTransport('https://example.com/mcp');\n$client->connect($transport, $capabilities);\n\n// Initialize the connection\n$result = $client->initialize();\n\n// Get resources\n$resources = $client->listResources();\n\n// Call a tool\n$toolResult = $client->callTool('add', ['a' => 5, 'b' => 3]);\necho \"Result: \" . $toolResult['content'][0]['text'] . \"\\n\";\n\n// Clean up\n$client->shutdown();\n```\n\n----------------------------------------\n\nTITLE: Complete MCP Client Implementation in PHP\nDESCRIPTION: A comprehensive example combining all MCP features with proper error handling and cleanup, showing a typical client implementation flow with try/catch blocks.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Client\\McpClient;\nuse ModelContextProtocol\\Transport\\HttpTransport;\nuse ModelContextProtocol\\Protocol\\Models\\ClientCapabilities;\nuse ModelContextProtocol\\Utilities\\Logging\\ConsoleLogger;\n\n// Create a logger\n$logger = new ConsoleLogger();\n\n// Create client capabilities\n$capabilities = new ClientCapabilities(\n    resources: [\n        'list' => true\n    ],\n    tools: [\n        'list' => true\n    ],\n    prompts: [\n        'list' => true\n    ]\n);\n\n// Create a client\n$client = new McpClient(\n    name: 'Example Client',\n    version: '1.0.0',\n    logger: $logger\n);\n\ntry {\n    // Connect to an MCP server\n    $transport = new HttpTransport('https://example.com/mcp');\n    $client->connect($transport);\n\n    // Initialize the connection\n    $result = $client->initialize($capabilities);\n\n    // Check server capabilities\n    echo \"Connected to server: {$result->server->name} v{$result->server->version}\\n\";\n    echo \"Protocol version: {$result->protocolVersion}\\n\";\n    \n    // Work with resources\n    $resources = $client->listResources();\n    echo \"Available resources: \" . count($resources) . \"\\n\";\n    \n    $content = $client->getResource('greeting://hello');\n    echo \"Greeting: {$content->text}\\n\";\n    \n    // Work with tools\n    $tools = $client->listTools();\n    echo \"Available tools: \" . count($tools) . \"\\n\";\n    \n    $addResult = $client->callTool('add', ['a' => 10, 'b' => 5]);\n    echo \"10 + 5 = {$addResult->content[0]->text}\\n\";\n    \n    // Work with prompts\n    $prompts = $client->listPrompts();\n    echo \"Available prompts: \" . count($prompts) . \"\\n\";\n    \n    $promptResult = $client->getPrompt('introduction', [\n        'name' => 'Jane Smith',\n        'profession' => 'data scientist'\n    ]);\n    echo \"Introduction prompt: {$promptResult->messages[0]->content[0]->text}\\n\";\n    \n} catch (Exception $e) {\n    echo \"Error: {$e->getMessage()}\\n\";\n} finally {\n    // Clean up\n    if (isset($client)) {\n        $client->shutdown();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with MCP Prompts in PHP\nDESCRIPTION: Shows how to list available prompts and retrieve a specific prompt with parameters, then access the resulting message content.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// List available prompts\n$prompts = $client->listPrompts();\necho \"Available prompts:\\n\";\nforeach ($prompts as $prompt) {\n    echo \"- {$prompt->name}: {$prompt->description}\\n\";\n}\n\n// Get a prompt\n$promptParams = [\n    'name' => 'John Doe',\n    'profession' => 'software engineer'\n];\n$promptResult = $client->getPrompt('introduction', $promptParams);\necho \"Prompt message: {$promptResult->messages[0]->content[0]->text}\\n\";\n```\n\n----------------------------------------\n\nTITLE: Registering Static Resources in PHP\nDESCRIPTION: This snippet demonstrates how an MCP server registers a static resource. Static resources provide fixed, URI-addressable content to LLMs. The example registers a simple 'Hello, world!' text resource at 'greeting://hello'.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/getting-started.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Register a static resource\n$server->registerResource('greeting', 'greeting://hello', [\n    [\n        'type' => 'text',\n        'text' => 'Hello, world!'\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Working with MCP Resources in PHP\nDESCRIPTION: Shows how to list available resources, read resource content from a fixed URI, and access dynamic resources with parameterized URIs.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// List available resources\n$resources = $client->listResources();\necho \"Available resources:\\n\";\nforeach ($resources as $resource) {\n    echo \"- {$resource->name}: {$resource->uri}\\n\";\n}\n\n// Read a resource\n$resourceUri = 'greeting://hello';\n$content = $client->getResource($resourceUri);\necho \"Resource content: {$content->text}\\n\";\n\n// Read a dynamic resource\n$dynamicUri = 'greeting://John';\n$content = $client->getResource($dynamicUri);\necho \"Dynamic resource content: {$content->text}\\n\";\n```\n\n----------------------------------------\n\nTITLE: Working with MCP Tools in PHP\nDESCRIPTION: Demonstrates listing available tools, calling a simple tool with parameters, and handling responses from more complex tools that return structured data.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// List available tools\n$tools = $client->listTools();\necho \"Available tools:\\n\";\nforeach ($tools as $tool) {\n    echo \"- {$tool->name}: {$tool->description}\\n\";\n}\n\n// Call a tool\n$params = [\n    'a' => 5,\n    'b' => 3\n];\n$result = $client->callTool('add', $params);\necho \"Tool result: {$result->content[0]->text}\\n\";\n\n// Call a more complex tool\n$weatherParams = [\n    'location' => 'New York',\n    'units' => 'metric'\n];\n$weatherResult = $client->callTool('fetchWeather', $weatherParams);\necho \"Weather data: \" . json_encode($weatherResult->content[0]->data) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Installing PHP MCP SDK via Composer - Bash\nDESCRIPTION: This bash command uses Composer, the PHP dependency manager, to install the eduardocruz/mcp-php-sdk package and all its required dependencies. This is the recommended installation method. Requires Composer to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require eduardocruz/mcp-php-sdk\n```\n\n----------------------------------------\n\nTITLE: Verifying PHP MCP SDK Installation - PHP\nDESCRIPTION: This PHP script verifies the successful installation of the SDK. It includes the autoloader (typically via Composer's vendor/autoload.php), imports necessary classes (McpServer, ServerCapabilities), creates a simple instance of McpServer, and prints a success message. If this script runs without errors, the SDK is correctly installed and accessible.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/installation.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Server\\McpServer;\nuse ModelContextProtocol\\Protocol\\Models\\ServerCapabilities;\n\n// Create a server instance\n$server = new McpServer(\n    'Test Server',\n    '1.0.0',\n    new ServerCapabilities()\n);\n\necho \"PHP MCP SDK installed successfully!\\n\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Resource with MCP PHP SDK (PHP)\nDESCRIPTION: This snippet demonstrates how to instantiate a StaticResource object for use with the MCP PHP SDK. It requires the MCP\\Protocol\\Resources\\StaticResource class and expects three parameters: a resource name (string), a resource URI (string), and an array defining the content structure (in this case, a simple text message). The resource can be registered and later resolved for serving static, unchanging content as per the protocol.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MCP\\Protocol\\Resources\\StaticResource;\n\n// Create a static resource\n$resource = new StaticResource(\n    'greeting',                // Resource name\n    'greeting://hello',        // Resource URI\n    [                          // Resource content\n        [\n            'type' => 'text',\n            'text' => 'Hello, world!'\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Including PHP MCP SDK Autoloader Manually - PHP\nDESCRIPTION: This PHP code snippet includes the SDK's autoloader file. This step is necessary for manual installations to ensure that SDK classes can be automatically loaded when used. The path 'path/to/mcp-php-sdk' must be replaced with the actual file system path to the cloned repository's autoload.php file.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/installation.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once 'path/to/mcp-php-sdk/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: ToolManager Class Definition in PHP\nDESCRIPTION: Defines the `ToolManager` class, responsible for managing tool registration, discovery, and execution. It includes methods for registering, retrieving, executing, listing, and removing tools. It utilizes `ToolSchema` for schema validation and interacts with `Tool` objects. The class manages the lifecycle of tools within the system.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools;\n\nuse MCP\\Server\\Tools\\Schema\\ToolSchema;\nuse MCP\\Server\\Tools\\Schema\\Validator;\nuse MCP\\Server\\Tools\\Schema\\ValidationException;\n\nclass ToolManager\n{\n    // Methods\n    public function __construct();\n    public function register(string $name, array|ToolSchema $schema, callable $handler): Tool;\n    public function getTool(string $name): ?Tool;\n    public function getSchema(string $name): ?ToolSchema;\n    public function execute(string $name, array $params): mixed;\n    public function list(): array;\n    public function exists(string $name): bool;\n    public function count(): int;\n    public function remove(string $name): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Tool with ToolManager in PHP\nDESCRIPTION: This code snippet demonstrates how to register a tool with the ToolManager, defining its name, schema, and handler function. The schema specifies the expected parameters ('a' and 'b' as numbers) and marks them as required. The handler function performs the addition of these parameters. This showcases tool registration with parameter validation and custom logic.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$toolManager->register('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b']\n], function($params) {\n    return $params['a'] + $params['b'];\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Tool with McpServer in PHP\nDESCRIPTION: This snippet demonstrates how to register a tool directly with the McpServer, similar to using ToolManager. It showcases the registration of a tool named 'add' with a schema defining 'a' and 'b' as required number parameters. The handler function is a simple addition operation, mirroring the ToolManager example. This illustrates a high-level API for tool registration.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Register a tool\n$server->registerTool('add', [\n    'properties' => [\n        'a' => ['type' => 'number'],\n        'b' => ['type' => 'number']\n    ],\n    'required' => ['a', 'b']\n], function($params) {\n    return $params['a'] + $params['b'];\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Tool Manager from McpServer in PHP\nDESCRIPTION: This snippet demonstrates how to access the ToolManager instance associated with the McpServer. It calls the `getToolManager` method on the server object, assigning the returned ToolManager object to the `$toolManager` variable. This allows direct manipulation of tools through the ToolManager API.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Access the tool manager\n$toolManager = $server->getToolManager();\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Tool with McpServer in PHP\nDESCRIPTION: This code shows how to unregister a tool using the McpServer. It calls the `unregisterTool` method, passing the name of the tool ('add' in this case) to remove it from the server's tool registry. This action prevents the tool from being executed via the server's API.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Unregister a tool\n$server->unregisterTool('add');\n```\n\n----------------------------------------\n\nTITLE: ToolSchema Class Definition in PHP\nDESCRIPTION: Defines the `ToolSchema` class, which represents the schema for a tool. It specifies the tool's properties, required fields, and description. It allows conversion to and from an array representation. This class is essential for defining the structure and validation rules for tool parameters.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools\\Schema;\n\nclass ToolSchema\n{\n    // Methods\n    public function __construct(string $name, array $properties, array $required = [], ?string $description = null);\n    public function getName(): string;\n    public function getProperties(): array;\n    public function getRequired(): array;\n    public function getDescription(): ?string;\n    public function toArray(): array;\n    public static function fromArray(string $name, array $schema): self;\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Class Definition in PHP\nDESCRIPTION: Defines the `Validator` class, which validates parameters against a given `ToolSchema`. It provides a `validate` method that throws a `ValidationException` if the parameters do not conform to the schema. It centralizes the validation logic within the tool system.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools\\Schema;\n\nclass Validator\n{\n    // Methods\n    public function validate(array $params, ToolSchema $schema): void;\n}\n```\n\n----------------------------------------\n\nTITLE: ToolResponse Class Definition in PHP\nDESCRIPTION: Defines the `ToolResponse` class, which represents the response from a tool execution. It supports text, JSON, and error responses. It encapsulates the response content and provides methods for creating and accessing the content. This class allows for structured communication of tool results.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools;\n\nclass ToolResponse\n{\n    // Methods\n    public function __construct(array $content);\n    public static function text(string $text): self;\n    public static function json(mixed $data): self;\n    public static function error(string $message, ?string $code = null): self;\n    public function getContent(): array;\n    public function toArray(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: ValidationException Class Definition in PHP\nDESCRIPTION: Defines the `ValidationException` class, a custom exception thrown when schema validation fails. It contains an array of errors and an optional message. This exception provides structured error reporting for schema validation issues.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools\\Schema;\n\nclass ValidationException extends \\Exception\n{\n    // Methods\n    public function __construct(array $errors, string $message = \"Schema validation failed\");\n    public function getErrors(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Detailed Logging with ConsoleLogger (PHP)\nDESCRIPTION: This snippet demonstrates how to enable detailed logging within the PHP MCP SDK using a custom logger, specifically the `ConsoleLogger`. It initializes a `ConsoleLogger` with the debug level and then passes this logger to the `McpServer` constructor. This allows for detailed information about server operations to be logged to the console.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse ModelContextProtocol\\Utilities\\Logging\\ConsoleLogger;\n\n// Create a logger with debug level\n$logger = new ConsoleLogger(ConsoleLogger::LEVEL_DEBUG);\n\n// Use the logger when creating a server or client\n$server = new McpServer(\n    name: 'Example Server',\n    version: '1.0.0',\n    logger: $logger\n);\n```\n\n----------------------------------------\n\nTITLE: Running the MCP PHPStan Server with Bash\nDESCRIPTION: This snippet demonstrates how to start the MCP PHPStan server by executing the example script using the PHP CLI. To use this, ensure you have PHP installed and the mcp-php-sdk cloned to your local system. Adjust the path if your installation directory differs. No input is required; the command launches the server, which then communicates via STDIN/STDOUT using the MCP protocol.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp /path/to/mcp-php-sdk/examples/fixed-phpstan-mcp-server.php\n```\n\n----------------------------------------\n\nTITLE: Scanning PHP Code for Security Vulnerabilities (PHP)\nDESCRIPTION: This PHP code snippet demonstrates a basic user input handling and SQL query construction, highlighting classic security issues such as SQL injection. It assumes the presence of 'username' and 'password' GET parameters and concatenates them directly into a SQL query, then outputs the query. Tools analyzing this code should warn about improper input sanitization and the risk of SQL injection. No input validation or PDO parameterization is shown.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$username = $_GET['username'];\n$password = $_GET['password'];\n$query = \"SELECT * FROM users WHERE username = '$username' AND password = '$password'\";\necho $query;\n\n```\n\n----------------------------------------\n\nTITLE: PHP Code with User Input Query for Security Test (PHP)\nDESCRIPTION: This code snippet retrieves a user-supplied 'username' from GET parameters and constructs an SQL query using that unsanitized input. The example is meant for use with security analysis tools to identify potential vulnerabilities such as SQL injection. Inputs: $_GET['username']; output: echoes the SQL query. The pattern shown should trigger warnings about the risks of embedding raw user input into SQL.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$username = $_GET['username'];\n$query = \"SELECT * FROM users WHERE username = '$username'\";\necho $query;\n\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on PHP Code Example (PHP)\nDESCRIPTION: This snippet is an example of a simple PHP function to be analyzed by the PHPStan tool for potential errors. It requires PHPStan to be properly configured within the MCP server context. The function accepts two parameters and returns their sum. Inputs are '$a' and '$b', both parameters to the function, and it outputs their sum. No input validation or type constraints are enforced in this minimal example.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction add($a, $b) {\n  return $a + $b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP Function for Code Quality Parameter Limit Check (PHP)\nDESCRIPTION: This snippet illustrates another function with too many parameters, highlighting code quality and maintainability issues. The function, 'processData', is intended to be flagged by code analysis tools that check for excessive parameter counts. All input parameters are simply accepted and '$data' is returned unchanged. Recommended for testing code quality or documentation tools.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nfunction processData($data, $option1, $option2, $option3, $option4, $option5, $option6) {\n    // Function with too many parameters\n    return $data;\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP Function with Undefined Variable for Error Detection (PHP)\nDESCRIPTION: This PHP snippet presents a function deliberately using an undefined variable ('$c'), serving as a test case for static error detection tools such as PHPStan. The function 'add' returns '$a + $c', while only '$a' and '$b' are parameters. This is expected to trigger an error about the use of an undefined variable. Perfect for validating the error-finding capability of analysis pipelines.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction add($a, $b) {\n    return $a + $c; // Undefined variable $c\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using PHP's Built-in Debugging Functions (PHP)\nDESCRIPTION: This code demonstrates several built-in PHP functions useful for debugging, including `var_dump`, `print_r`, `var_export` for inspecting variable contents and structure, `microtime` for measuring execution time, and `memory_get_usage` for tracking memory usage.  These functions provide valuable insights into variable states and performance characteristics.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Print a variable's structure\nvar_dump($variable);\n\n// Print a human-readable representation of a variable\nprint_r($variable);\n\n// Get information about a variable\nvar_export($variable);\n\n// Track execution time\n$startTime = microtime(true);\n// ... code to time ...\n$endTime = microtime(true);\necho \"Execution time: \" . ($endTime - $startTime) . \" seconds\";\n\n// Get memory usage\n$memoryBefore = memory_get_usage();\n// ... code to measure ...\n$memoryAfter = memory_get_usage();\necho \"Memory used: \" . ($memoryAfter - $memoryBefore) . \" bytes\";\n```\n\n----------------------------------------\n\nTITLE: Debugging Tool Execution (PHP)\nDESCRIPTION: This code snippet demonstrates debugging tool execution by attempting to execute a tool with specific parameters using a `toolManager`, logging the tool name, parameters, and execution result. It catches `ValidationException` for validation errors and generic `Exception` for execution errors, logging the error messages and validation errors (if any).\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Debug tool execution\ntry {\n    $toolName = 'example';\n    $params = ['param1' => 'value1', 'param2' => 'value2'];\n    $logger->debug(\"Executing tool: $toolName\");\n    $logger->debug(\"Parameters: \" . json_encode($params));\n    \n    $result = $toolManager->execute($toolName, $params);\n    $logger->debug(\"Tool execution result: \" . json_encode($result));\n} catch (ValidationException $e) {\n    $logger->error(\"Tool validation error: \" . $e->getMessage());\n    $logger->error(\"Validation errors: \" . json_encode($e->getErrors()));\n} catch (Exception $e) {\n    $logger->error(\"Tool execution error: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Prompts in PHP\nDESCRIPTION: This snippet demonstrates how to register a prompt using the `registerPrompt` method.  The `introduction` prompt defines the properties (`name` and `profession`), specifies the required fields, and provides a description. The callback function returns a formatted user message for the defined prompt. The prompt functionality is designed to initiate communication and is part of the MCP specification for communication. The server instance must be running and initialized.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/server-implementation.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Add a prompt template\n$server->registerPrompt('introduction', [\n    'properties' => [\n        'name' => ['type' => 'string'],\n        'profession' => ['type' => 'string']\n    ],\n    'required' => ['name', 'profession'],\n    'description' => 'Creates an introduction message'\n], function($params) {\n    return [\n        'messages' => [\n            [\n                'role' => 'user',\n                'content' => [\n                    'type' => 'text',\n                    'text' => \"Please introduce {$params['name']}, who works as a {$params['profession']}.\"\n                ]\n            ]\n        ]\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSH Tunnel for Remote Debugging (Bash)\nDESCRIPTION: This bash command demonstrates how to set up an SSH tunnel for remote debugging. It forwards port 9003 from the remote server to the localhost, enabling the IDE on the local machine to connect to the Xdebug instance running on the remote server.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nssh -R 9003:localhost:9003 user@remote-server\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Templates with ResourceTemplate Class (PHP)\nDESCRIPTION: This snippet shows the use of ResourceTemplate for wrapping URI templates with additional resource-specific meta options. It demonstrates creating templates, checking URI matches, extracting parameters, expanding templates, and retrieving list options. Dependencies include MCP\\Protocol\\Resources\\ResourceTemplate and support for associative arrays for options, such as example values.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse MCP\\Protocol\\Resources\\ResourceTemplate;\n\n// Create a resource template\n$template = new ResourceTemplate(\n    'greeting://{name}',    // URI template\n    [                        // List options (optional)\n        'list' => [\n            'examples' => ['John', 'Jane', 'Bob']\n        ]\n    ]\n);\n\n// Check if a URI matches this template\n$matches = $template->matches('greeting://John'); // true\n\n// Extract parameters from a URI\n$params = $template->extract('greeting://John'); // ['name' => 'John']\n\n// Expand template with parameters\n$uri = $template->expand(['name' => 'John']); // 'greeting://John'\n\n// Get list options\n$options = $template->getListOptions();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Exception Handlers (PHP)\nDESCRIPTION: This snippet demonstrates how to set up a global exception handler using `set_exception_handler`. The handler logs uncaught exceptions, including the message and stack trace, using a provided logger. This ensures that all unhandled exceptions are captured and logged for debugging purposes, providing context about the error.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nset_exception_handler(function($exception) use ($logger) {\n    $logger->error(\"Uncaught exception: \" . $exception->getMessage());\n    $logger->error(\"Stack trace: \" . $exception->getTraceAsString());\n});\n```\n\n----------------------------------------\n\nTITLE: Tracing Method Calls with Logger (PHP)\nDESCRIPTION: This snippet illustrates how to add trace points within a method (`executeHandler`) to track its execution flow. It logs the method name, parameters, result, and any exceptions that occur. This helps in understanding the behavior and identifying potential issues in the method's logic, requiring a logger instance.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprivate function executeHandler($requestId, $methodName, $params)\n{\n    $this->logger->debug(\"Executing handler for method: $methodName\");\n    $this->logger->debug(\"Parameters: \" . json_encode($params));\n    \n    try {\n        $result = $this->handlers[$methodName]($params);\n        $this->logger->debug(\"Handler result: \" . json_encode($result));\n        return $result;\n    } catch (Exception $e) {\n        $this->logger->error(\"Handler exception: \" . $e->getMessage());\n        throw $e;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Debug Transport Wrapper (PHP)\nDESCRIPTION: This code defines a custom transport wrapper `DebugTransportWrapper` that intercepts JSON-RPC messages being sent and received.  It logs each message using a provided logger before forwarding it to the underlying transport. It requires a logger instance and a `TransportInterface` implementation. The wrapper allows inspection of raw messages for debugging purposes.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass DebugTransportWrapper implements TransportInterface\n{\n    private TransportInterface $transport;\n    private ConsoleLogger $logger;\n    \n    public function __construct(TransportInterface $transport, ConsoleLogger $logger)\n    {\n        $this->transport = $transport;\n        $this->logger = $logger;\n    }\n    \n    public function send(string $message): void\n    {\n        $this->logger->debug('>>> SEND: ' . $message);\n        $this->transport->send($message);\n    }\n    \n    public function receive(): ?string\n    {\n        $message = $this->transport->receive();\n        if ($message !== null) {\n            $this->logger->debug('<<< RECV: ' . $message);\n        }\n        return $message;\n    }\n    \n    public function close(): void\n    {\n        $this->transport->close();\n    }\n    \n    public function onMessage(callable $handler): void\n    {\n        $this->transport->onMessage(function($message) use ($handler) {\n            $this->logger->debug('<<< RECV (async): ' . $message);\n            $handler($message);\n        });\n    }\n    \n    public function startListening(): void\n    {\n        $this->transport->startListening();\n    }\n}\n\n// Usage\n$baseTransport = new StdioTransport();\n$debugTransport = new DebugTransportWrapper($baseTransport, $logger);\n$server->connect($debugTransport);\n```\n\n----------------------------------------\n\nTITLE: Debugging Transport Connection (PHP)\nDESCRIPTION: This code snippet demonstrates debugging transport connection issues by creating a `StdioTransport`, sending a test message, and receiving a message, logging each step with a logger. It catches any exceptions that occur during this process and logs the error message, allowing for identification of transport-related problems.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Debug transport connection\ntry {\n    $transport = new StdioTransport();\n    $logger->debug(\"Transport created successfully\");\n    \n    // Test sending a message\n    $transport->send('{\"test\": true}');\n    $logger->debug(\"Message sent successfully\");\n    \n    // Test receiving a message\n    $message = $transport->receive();\n    $logger->debug(\"Received message: \" . ($message ?? \"null\"));\n} catch (Exception $e) {\n    $logger->error(\"Transport error: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Resource Resolution (PHP)\nDESCRIPTION: This snippet demonstrates debugging resource resolution by attempting to resolve a URI using a `resourceManager`, logging the URI, resolved resource details (name and parameters), and any errors. It enables tracing the resource resolution process and identifying issues related to URI formatting or resource registration.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Debug resource resolution\ntry {\n    $uri = 'resource://example';\n    $logger->debug(\"Resolving URI: $uri\");\n    \n    $result = $resourceManager->resolve($uri);\n    if ($result !== null) {\n        $logger->debug(\"Resource resolved: \" . $result['name']);\n        $logger->debug(\"Parameters: \" . json_encode($result['params']));\n    } else {\n        $logger->warning(\"Resource not found for URI: $uri\");\n    }\n} catch (Exception $e) {\n    $logger->error(\"Resource resolution error: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug in php.ini (INI)\nDESCRIPTION: This snippet shows the configuration settings required in the `php.ini` file to enable and configure Xdebug.  Key settings include enabling the extension (`zend_extension`), setting the debug mode (`xdebug.mode`), specifying the client host and port (`xdebug.client_host`, `xdebug.client_port`), and enabling request-based debugging (`xdebug.start_with_request`).\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[xdebug]\nzend_extension=xdebug.so\nxdebug.mode=debug\nxdebug.client_host=127.0.0.1\nxdebug.client_port=9003\nxdebug.start_with_request=yes\n```\n\n----------------------------------------\n\nTITLE: Example Resource Content Structures for MCP Resources (PHP)\nDESCRIPTION: These code snippets illustrate the typical array structures for resource content returned by MCP PHP SDK. Examples include text, JSON, image (with base64-encoded data), and mixed content arrays. These structures are required for resource definition and response, setting the appropriate 'type' field for each content block. Such structures are expected when registering or serving resource content using the SDK.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/resource-development.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Example resource content\n$content = [\n    'content' => [\n        [\n            'type' => 'text',\n            'text' => 'Hello, world!'\n        ]\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n// Text content\n$textContent = [\n    'content' => [\n        [\n            'type' => 'text',\n            'text' => 'Hello, world!'\n        ]\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n// JSON content\n$jsonContent = [\n    'content' => [\n        [\n            'type' => 'application/json',\n            'data' => [\n                'greeting' => 'Hello',\n                'target' => 'world'\n            ]\n        ]\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n// Image content\n$imageContent = [\n    'content' => [\n        [\n            'type' => 'image/png',\n            'data' => 'base64,iVBORw0KGgoAAAANSUhEUgA...'\n        ]\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n// Mixed content\n$mixedContent = [\n    'content' => [\n        [\n            'type' => 'text',\n            'text' => 'Hello, world!'\n        ],\n        [\n            'type' => 'application/json',\n            'data' => ['greeting' => 'Hello']\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Remote Debugging Xdebug Configuration (INI)\nDESCRIPTION: This shows the configuration settings for enabling remote debugging with Xdebug. It sets the `zend_extension`, `xdebug.mode`, `xdebug.client_host` (to the local machine's IP), `xdebug.client_port`, `xdebug.start_with_request`, and `xdebug.discover_client_host` for dynamic IP discovery.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[xdebug]\nzend_extension=xdebug.so\nxdebug.mode=debug\nxdebug.client_host=your-local-ip\nxdebug.client_port=9003\nxdebug.start_with_request=yes\nxdebug.discover_client_host=true\n```\n\n----------------------------------------\n\nTITLE: Basic MCP Client Setup and Initialization in PHP\nDESCRIPTION: Demonstrates how to create an MCP client, connect to a server, and initialize the connection with capabilities. Includes basic error handling and shows how to access server information.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire_once 'vendor/autoload.php';\n\nuse ModelContextProtocol\\Client\\McpClient;\nuse ModelContextProtocol\\Transport\\HttpTransport;\nuse ModelContextProtocol\\Protocol\\Models\\ClientCapabilities;\nuse ModelContextProtocol\\Utilities\\Logging\\ConsoleLogger;\n\n// Create a logger\n$logger = new ConsoleLogger();\n\n// Create client capabilities\n$capabilities = new ClientCapabilities(\n    resources: [\n        'list' => true\n    ],\n    tools: [\n        'list' => true\n    ],\n    prompts: [\n        'list' => true\n    ]\n);\n\n// Create a client\n$client = new McpClient(\n    name: 'Example Client',\n    version: '1.0.0',\n    logger: $logger\n);\n\n// Connect to an MCP server\n$transport = new HttpTransport('https://example.com/mcp');\n$client->connect($transport);\n\n// Initialize the connection\n$result = $client->initialize($capabilities);\n\n// Check if initialization was successful\nif ($result->success) {\n    echo \"Connected to server: {$result->server->name} v{$result->server->version}\\n\";\n    echo \"Protocol version: {$result->protocolVersion}\\n\";\n    \n    // Access server capabilities\n    $serverCapabilities = $result->capabilities;\n    echo \"Server supports resources: \" . json_encode($serverCapabilities->resources) . \"\\n\";\n    echo \"Server supports tools: \" . json_encode($serverCapabilities->tools) . \"\\n\";\n    echo \"Server supports prompts: \" . json_encode($serverCapabilities->prompts) . \"\\n\";\n} else {\n    echo \"Failed to initialize connection\\n\";\n}\n\n// Clean up when done\n$client->shutdown();\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Client in PHP\nDESCRIPTION: Shows how to run the MCP PHP client from the command line after saving it to a file.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/examples/client-implementation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp client.php\n```\n\n----------------------------------------\n\nTITLE: Tool Class Definition in PHP\nDESCRIPTION: Defines the `Tool` class, representing an executable tool with a name, schema, and handler. It encapsulates the tool's metadata and execution logic. It allows accessing the tool's name, schema, and executing it with given parameters. This class models a single, registered tool.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/api-reference/tools.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace MCP\\Server\\Tools;\n\nuse MCP\\Server\\Tools\\Schema\\ToolSchema;\n\nclass Tool\n{\n    // Methods\n    public function __construct(string $name, ToolSchema $schema, callable $handler);\n    public function getName(): string;\n    public function getSchema(): ToolSchema;\n    public function execute(array $params);\n    public function getMetadata(): array;\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHP MCP SDK Verification Script - Bash\nDESCRIPTION: This bash command executes the PHP verification script (`test-mcp.php`) from the command line using the PHP command-line interpreter. This allows you to check if the script runs successfully and the SDK is correctly loaded and initialized. Requires PHP CLI to be installed and the script file to exist.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp test-mcp.php\n```\n\n----------------------------------------\n\nTITLE: Installing Xdebug (Bash)\nDESCRIPTION: This command demonstrates how to install Xdebug, a debugging extension for PHP, using the `pecl` command. This step is a prerequisite for using advanced debugging features like step debugging and profiling.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/troubleshooting/debugging-techniques.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npecl install xdebug\n```\n\n----------------------------------------\n\nTITLE: Cloning PHP MCP SDK Repository Manually - Bash\nDESCRIPTION: This bash command clones the official Git repository for the eduardocruz/mcp-php-sdk from GitHub. This step is part of the manual installation process. Requires Git to be installed and accessible.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/docs/guides/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/eduardocruz/mcp-php-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Checking Code Quality of Complex Function (PHP)\nDESCRIPTION: This snippet contains a PHP function with an excessive number of parameters, illustrating code quality concerns. The function, 'processData', is designed to pass through received data but exemplifies poor practice by having six parameters. It can be used with tools focused on code quality checks to flag functions that are too complex or violate style guidelines. The function has '$data' and six '$option' arguments as input and simply returns '$data'.\nSOURCE: https://github.com/eduardocruz/mcp-php-sdk/blob/main/examples/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nfunction processData($data, $option1, $option2, $option3, $option4, $option5, $option6) {\n  // Complex function with too many parameters\n  return $data;\n}\n\n```"
  }
]