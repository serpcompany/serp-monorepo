[
  {
    "owner": "pvlib",
    "repo": "pvlib-python.git",
    "content": "TITLE: Running a ModelChain with Custom Models\nDESCRIPTION: Demonstrates running a ModelChain with custom models and accessing the results. This example shows the complete workflow from model configuration to execution and result retrieval.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmc = mc.run_model(weather)\nmc.results.dc\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented PV System Energy Calculation in Python\nDESCRIPTION: Implements object-oriented calculation of PV system energy yield using Location, PVSystem, and ModelChain classes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/introtutorial.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pvlib.pvsystem import PVSystem, Array, FixedMount\nfrom pvlib.location import Location\nfrom pvlib.modelchain import ModelChain\n\nenergies = {}\nfor location, weather in zip(coordinates, tmys):\n    latitude, longitude, name, altitude, timezone = location\n    location = Location(\n        latitude,\n        longitude,\n        name=name,\n        altitude=altitude,\n        tz=timezone,\n    )\n    mount = FixedMount(surface_tilt=latitude, surface_azimuth=180)\n    array = Array(\n        mount=mount,\n        module_parameters=module,\n        temperature_model_parameters=temperature_model_parameters,\n    )\n    system = PVSystem(arrays=[array], inverter_parameters=inverter)\n    mc = ModelChain(system, location)\n    mc.run_model(weather)\n    annual_energy = mc.results.ac.sum()\n    energies[name] = annual_energy\n```\n\n----------------------------------------\n\nTITLE: Creating a PVSystem with Multiple Arrays at Different Orientations in Python\nDESCRIPTION: Shows how to create a PVSystem with multiple arrays, each with a different orientation. Arrays are created with FixedMount objects and then passed to the PVSystem constructor.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\narray_one = pvsystem.Array(pvsystem.FixedMount(surface_tilt=30, surface_azimuth=90))\nprint(array_one.mount.surface_tilt, array_one.mount.surface_azimuth)\narray_two = pvsystem.Array(pvsystem.FixedMount(surface_tilt=30, surface_azimuth=220))\nsystem = pvsystem.PVSystem(arrays=[array_one, array_two])\nsystem.num_arrays\nfor array in system.arrays:\n    print(array.mount)\n```\n\n----------------------------------------\n\nTITLE: Procedural PV System Energy Calculation in Python\nDESCRIPTION: Implements procedural calculation of PV system energy yield using solar position, irradiance, temperature, and system parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/introtutorial.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsystem = {'module': module, 'inverter': inverter,\n          'surface_azimuth': 180}\n\nenergies = {}\n\nfor location, weather in zip(coordinates, tmys):\n    latitude, longitude, name, altitude, timezone = location\n    system['surface_tilt'] = latitude\n    solpos = pvlib.solarposition.get_solarposition(\n        time=weather.index,\n        latitude=latitude,\n        longitude=longitude,\n        altitude=altitude,\n        temperature=weather[\"temp_air\"],\n        pressure=weather[\"pressure\"],\n    )\n    dni_extra = pvlib.irradiance.get_extra_radiation(weather.index)\n    airmass = pvlib.atmosphere.get_relative_airmass(solpos['apparent_zenith'])\n    pressure = pvlib.atmosphere.alt2pres(altitude)\n    am_abs = pvlib.atmosphere.get_absolute_airmass(airmass, pressure)\n    aoi = pvlib.irradiance.aoi(\n        system['surface_tilt'],\n        system['surface_azimuth'],\n        solpos[\"apparent_zenith\"],\n        solpos[\"azimuth\"],\n    )\n    total_irradiance = pvlib.irradiance.get_total_irradiance(\n        system['surface_tilt'],\n        system['surface_azimuth'],\n        solpos['apparent_zenith'],\n        solpos['azimuth'],\n        weather['dni'],\n        weather['ghi'],\n        weather['dhi'],\n        dni_extra=dni_extra,\n        model='haydavies',\n    )\n    cell_temperature = pvlib.temperature.sapm_cell(\n        total_irradiance['poa_global'],\n        weather[\"temp_air\"],\n        weather[\"wind_speed\"],\n        **temperature_model_parameters,\n    )\n    effective_irradiance = pvlib.pvsystem.sapm_effective_irradiance(\n        total_irradiance['poa_direct'],\n        total_irradiance['poa_diffuse'],\n        am_abs,\n        aoi,\n        module,\n    )\n    dc = pvlib.pvsystem.sapm(effective_irradiance, cell_temperature, module)\n    ac = pvlib.inverter.sandia(dc['v_mp'], dc['p_mp'], inverter)\n    annual_energy = ac.sum()\n    energies[name] = annual_energy\n```\n\n----------------------------------------\n\nTITLE: Calculating Extraterrestrial Radiation\nDESCRIPTION: This snippet calculates the extraterrestrial radiation for solar position and converts it to a pandas series. It visualizes the data in a plot, helping understand solar energy potential.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# the extraradiation function returns a simple numpy array\n# instead of a nice pandas series. We will change this\n# in a future version\ndni_extra = pvlib.irradiance.get_extra_radiation(tmy_data.index)\ndni_extra = pd.Series(dni_extra, index=tmy_data.index)\n\ndni_extra.plot()\nplt.ylabel('Extra terrestrial radiation (W/m**2)');\n```\n\n----------------------------------------\n\nTITLE: Loading Module and Inverter Parameters from SAM Database\nDESCRIPTION: This snippet demonstrates how to load module and inverter parameters from the SAM (System Advisor Model) database using `pvlib.pvsystem.retrieve_sam`. It retrieves parameters for a specific Canadian Solar module and ABB inverter, then creates a `PVSystem` instance using these parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n    # Load the database of CEC module model parameters\n    modules = pvsystem.retrieve_sam('cecmod')\n    # retrieve_sam returns a dict. the dict keys are module names,\n    # and the values are model parameters for that module\n    module_parameters = modules['Canadian_Solar_Inc__CS5P_220M']\n    # Load the database of CEC inverter model parameters\n    inverters = pvsystem.retrieve_sam('cecinverter')\n    inverter_parameters = inverters['ABB__MICRO_0_25_I_OUTD_US_208__208V_']\n    system_one_array = pvsystem.PVSystem(module_parameters=module_parameters,\n                                         inverter_parameters=inverter_parameters)\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Solar Position\nDESCRIPTION: This snippet calculates the solar position using the TMY index and location coordinates, producing a plot of the solar position data. It is a crucial step in irradiance modeling.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsolpos = pvlib.solarposition.get_solarposition(tmy_data.index, sand_point.latitude, sand_point.longitude)\n\nsolpos.plot();\n```\n\n----------------------------------------\n\nTITLE: Generating Clear Sky Irradiance Using Location Object in Python\nDESCRIPTION: Demonstrates how to create a Location object, generate a time series, and obtain clear sky irradiance data using the get_clearsky method. It shows examples with default settings and custom parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntus = Location(32.2, -111, 'US/Arizona', 700, 'Tucson')\ntimes = pd.date_range(start='2016-07-01', end='2016-07-04', freq='1min', tz=tus.tz)\ncs = tus.get_clearsky(times)  # ineichen with climatology table by default\ncs.plot()\nplt.ylabel('Irradiance $W/m^2$')\nplt.title('Ineichen, climatological turbidity')\n```\n\nLANGUAGE: python\nCODE:\n```\ncs = tus.get_clearsky(times, model='ineichen', linke_turbidity=3)\ncs.plot()\nplt.title('Ineichen, linke_turbidity=3')\nplt.ylabel('Irradiance $W/m^2$')\n```\n\nLANGUAGE: python\nCODE:\n```\ncs = tus.get_clearsky(times, model='simplified_solis', aod700=0.2, precipitable_water=3)\ncs.plot()\nplt.title('Simplfied Solis, aod700=0.2, precipitable_water=3')\nplt.ylabel('Irradiance $W/m^2$')\n```\n\n----------------------------------------\n\nTITLE: Reading and Preparing TMY Data\nDESCRIPTION: This snippet finds the absolute path of the pvlib installation and reads TMY data, coercing year values to a single year. It shifts the index for sun position calculations. Required dependencies include the os, inspect, and pvlib modules.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Find the absolute file path to your pvlib installation\npvlib_abspath = os.path.dirname(os.path.abspath(inspect.getfile(pvlib)))\n\n# absolute path to a data file\ndatapath = os.path.join(pvlib_abspath, 'data', '703165TY.csv')\n\n# read tmy data with year values coerced to a single year\ntmy_data, meta = pvlib.iotools.read_tmy3(datapath, coerce_year=2015)\ntmy_data.index.name = 'Time'\n\n# TMY data seems to be given as hourly data with time stamp at the end\n# shift the index 30 Minutes back for calculation of sun positions\ntmy_data = tmy_data.shift(freq='-30Min')['2015']\n```\n\n----------------------------------------\n\nTITLE: Calculating and Comparing Linke Turbidity Factors in Python\nDESCRIPTION: Calculates Linke turbidity factors using historical data and the Kasten formula, then compares and plots the results. It demonstrates how to use various pvlib functions for atmospheric calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npvlib_data = os.path.join(os.path.dirname(pvlib.__file__), 'data')\nmbars = 100  # conversion factor from mbars to Pa\ntmy_file = os.path.join(pvlib_data, '703165TY.csv')  # TMY file\ntmy_data, tmy_header = read_tmy3(tmy_file, coerce_year=1999, map_variables=True)\n\ntl_historic = clearsky.lookup_linke_turbidity(time=tmy_data.index,\n    latitude=tmy_header['latitude'], longitude=tmy_header['longitude'])\n\nsolpos = solarposition.get_solarposition(time=tmy_data.index,\n    latitude=tmy_header['latitude'], longitude=tmy_header['longitude'],\n    altitude=tmy_header['altitude'], pressure=tmy_data['pressure']*mbars,\n    temperature=tmy_data['temp_air'])\n\nam_rel = atmosphere.get_relative_airmass(solpos.apparent_zenith)\nam_abs = atmosphere.get_absolute_airmass(am_rel, tmy_data['pressure']*mbars)\nairmass = pd.concat([am_rel, am_abs], axis=1).rename(\n    columns={0: 'airmass_relative', 1: 'airmass_absolute'})\n\ntl_calculated = atmosphere.kasten96_lt(\n    airmass.airmass_absolute, tmy_data['precipitable_water'],\n    tmy_data['AOD (unitless)'])\n\ntl = pd.concat([tl_historic, tl_calculated], axis=1).rename(\n    columns={0:'Historic', 1:'Calculated'})\ntl.index = tmy_data.index.tz_convert(None)  # remove timezone\n\ntl.resample('W').mean().plot()\nplt.grid()\nplt.title('Comparison of Historic Linke Turbidity Factors vs. \\n'\n    'Kasten Pyrheliometric Formula at {name:s}, {state:s} ({usaf:d}TY)'.format(\n    name=tmy_header['Name'], state=tmy_header['State'], usaf=tmy_header['USAF']))\nplt.ylabel('Linke Turbidity Factor, TL')\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: PVWatts System Configuration\nDESCRIPTION: Shows how to configure a PVSystem using PVWatts parameters and create a ModelChain with specific AOI and spectral models. Demonstrates model customization and parameter overrides.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npvwatts_system = PVSystem(\n    module_parameters={'pdc0': 240, 'gamma_pdc': -0.004},\n    inverter_parameters={'pdc0': 240},\n    temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(pvwatts_system, location,\n                aoi_model='physical', spectral_model='no_loss')\n```\n\n----------------------------------------\n\nTITLE: Basic ModelChain Setup with Weather Data\nDESCRIPTION: Demonstrates setting up a basic ModelChain instance with required imports, PVSystem configuration, and weather data processing. Shows how to create Location and PVSystem objects and run a simple model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nimport pvlib\nfrom pvlib.pvsystem import PVSystem, FixedMount\nfrom pvlib.location import Location\nfrom pvlib.modelchain import ModelChain\n\nlocation = Location(latitude=32.2, longitude=-110.9)\nsystem = PVSystem(surface_tilt=20, surface_azimuth=200,\n                 module_parameters=sandia_module,\n                 inverter_parameters=cec_inverter,\n                 temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(system, location)\n\nweather = pd.DataFrame([[1050, 1000, 100, 30, 5]],\n                     columns=['ghi', 'dni', 'dhi', 'temp_air', 'wind_speed'],\n                     index=[pd.Timestamp('20170401 1200', tz='US/Arizona')])\n\nmc.run_model(weather)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Custom Models with ModelChain\nDESCRIPTION: Demonstrates how to set up a PVSystem with PVUSA parameters and initialize a ModelChain with custom models. The example shows the full workflow of configuring and running a ModelChain with user-defined functions.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmodule_parameters = {'a': 0.2, 'b': 0.00001, 'c': 0.001, 'd': -0.00005}\npvusa_system = PVSystem(module_parameters=module_parameters)\n\nmc = ModelChain(pvusa_system, location,\n                dc_model=pvusa_mc_wrapper, ac_model=pvusa_ac_mc,\n                temperature_model=no_loss_temperature,\n                aoi_model='no_loss', spectral_model='no_loss')\n```\n\n----------------------------------------\n\nTITLE: Retrieving TMY Weather Data using PVGIS in Python\nDESCRIPTION: Fetches Typical Meteorological Year (TMY) data from PVGIS for each location including irradiation, temperature and wind speed data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/introtutorial.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntmys = []\nfor location in coordinates:\n    latitude, longitude, name, altitude, timezone = location\n    weather = pvlib.iotools.get_pvgis_tmy(latitude, longitude)[0]\n    weather.index.name = \"utc_time\"\n    tmys.append(weather)\n```\n\n----------------------------------------\n\nTITLE: Time Series Data for Solar Position\nDESCRIPTION: This code snippet generates a date range for specified start and end dates and fetches the solar position data for the given latitude and longitude using pvlib's solarposition module.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntimes = pd.date_range(start='2014-09-01', end='2014-09-02', freq='1Min', tz=tz)\nsolpos = pvlib.solarposition.get_solarposition(times, latitude, longitude)\napparent_zenith = solpos['apparent_zenith']\n```\n\n----------------------------------------\n\nTITLE: Comparing Relative Air Mass Models in PVLib Python\nDESCRIPTION: This code calculates and plots relative air mass using different models available in PVLib. It compares the Kasten and Young 1989 model with zenith and apparent zenith angles, the Young 1994 model, and a simple model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npvlib.atmosphere.get_relative_airmass(solpos['zenith']).plot(label='kastenyoung1989, zenith')\npvlib.atmosphere.get_relative_airmass(solpos['apparent_zenith']).plot(label='kastenyoung1989, app. zenith')\npvlib.atmosphere.get_relative_airmass(solpos['zenith'], model='young1994').plot(label='young1994, zenith')\npvlib.atmosphere.get_relative_airmass(solpos['zenith'], model='simple').plot(label='simple, zenith')\nplt.legend()\nplt.ylabel('Airmass')\nplt.ylim(0,100);\n```\n\n----------------------------------------\n\nTITLE: Creating a PVSystem with a Single Array in Python\nDESCRIPTION: Demonstrates how to create a PVSystem object with a single array by directly specifying module and inverter parameters. The system automatically creates an Array object with these parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodule_parameters = {'pdc0': 5000, 'gamma_pdc': -0.004}\ninverter_parameters = {'pdc0': 5000, 'eta_inv_nom': 0.96}\nsystem = pvsystem.PVSystem(module_parameters=module_parameters,\n                           inverter_parameters=inverter_parameters)\nprint(system.arrays[0].module_parameters)\nprint(system.inverter_parameters)\n```\n\n----------------------------------------\n\nTITLE: Calculating Annual, Monthly, and Daily Sums of Diffuse Irradiance\nDESCRIPTION: This code calculates yearly, monthly, and daily sums of the diffuse irradiance data, converting the results into kilowatt-hours. The calculated values facilitate performance analysis of the different models over time.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nyearly = diffuse_irrad.resample('A').sum().dropna().squeeze() / 1000.0  # kWh\nmonthly = diffuse_irrad.resample('M', kind='period').sum() / 1000.0\ndaily = diffuse_irrad.resample('D').sum() / 1000.0\n```\n\n----------------------------------------\n\nTITLE: Creating Location Object for Solar Position Analysis\nDESCRIPTION: This code creates a pvlib Location object using meta data, specifying latitude, longitude, timezone, altitude, and location name. This object is essential for calculating solar position.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsurface_tilt = 30\nsurface_azimuth = 180 # pvlib uses 0=North, 90=East, 180=South, 270=West convention\nalbedo = 0.2\n\n# create pvlib Location object based on meta data\nsand_point = pvlib.location.Location(meta['latitude'], meta['longitude'], tz='US/Alaska', \n                                     altitude=meta['altitude'], name=meta['Name'].replace('\"',''))\nprint(sand_point)\n```\n\n----------------------------------------\n\nTITLE: Plotting Solar Position without Local Time\nDESCRIPTION: This snippet plots solar position data such as the apparent zenith, elevation, and azimuth against UTC time without time-zone localization. It requires the Pandas library for plotting and assumes data stored in a DataFrame `solar_position_notz`. The plot includes customization features such as legends, axis labels, and reference lines.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nax = solar_position_notz.loc[solar_position_notz.index[0:24], ['apparent_zenith', 'apparent_elevation', 'azimuth']].plot()\n\nax.legend(loc=1);\nax.axhline(0, color='darkgray');  # add 0 deg line for sunrise/sunset\nax.axhline(180, color='darkgray');  # add 180 deg line for azimuth at solar noon\nax.set_ylim(-60, 200);  # zoom in, but cuts off full azimuth range\nax.set_xlabel('Time (UTC)');\n@savefig solar-position-nolocal.png width=6in\nax.set_ylabel('(degrees)');\n```\n\n----------------------------------------\n\nTITLE: Generating and Plotting Solis Clear Sky Model\nDESCRIPTION: This snippet models clear sky irradiance using the Simplified Solis model based on parameters such as apparent elevation, AOD, and precipitable water while plotting the results.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsolis = clearsky.simplified_solis(apparent_elevation, aod700, precipitable_water, pressure, dni_extra)\nax = solis.plot();\nax.set_ylabel('Irradiance $W/m^2$');\naz.set_title('Simplified Solis Clear Sky Model');\nax.legend(loc=2);\n```\n\n----------------------------------------\n\nTITLE: Specifying PVSystem Tilt and Azimuth for a Single Array in Python\nDESCRIPTION: Demonstrates how to create a PVSystem with a single array by specifying the surface tilt and azimuth. This automatically creates an Array with a FixedMount at the specified orientation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# single south-facing array at 20 deg tilt\nsystem_one_array = pvsystem.PVSystem(surface_tilt=20, surface_azimuth=180)\nprint(system_one_array.arrays[0].mount)\n```\n\n----------------------------------------\n\nTITLE: Calculating Solar Position with pvlib in Python\nDESCRIPTION: This code shows how to calculate and plot solar position using pvlib, demonstrating the use of localized DatetimeIndex for accurate calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsolar_position = pvlib.solarposition.get_solarposition(tmy3_data.index,\n                                                   tmy3_metadata['latitude'],\n                                                   tmy3_metadata['longitude'])\n\nax = solar_position.loc[solar_position.index[0:24], ['apparent_zenith', 'apparent_elevation', 'azimuth']].plot()\n\nax.legend(loc=1)\nax.axhline(0, color='darkgray')  # add 0 deg line for sunrise/sunset\nax.axhline(180, color='darkgray')  # add 180 deg line for azimuth at solar noon\nax.set_ylim(-60, 200)  # zoom in, but cuts off full azimuth range\nax.set_xlabel('Local time ({})'.format(solar_position.index.tz))\nax.set_ylabel('(degrees)')\n```\n\n----------------------------------------\n\nTITLE: Initializing PV System Configuration Data in Python\nDESCRIPTION: Sets up initial configuration data including coordinates for different locations and retrieves module/inverter specifications from SAM database.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/introtutorial.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pvlib\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# latitude, longitude, name, altitude, timezone\ncoordinates = [\n    (32.2, -111.0, 'Tucson', 700, 'Etc/GMT+7'),\n    (35.1, -106.6, 'Albuquerque', 1500, 'Etc/GMT+7'),\n    (37.8, -122.4, 'San Francisco', 10, 'Etc/GMT+8'),\n    (52.5, 13.4, 'Berlin', 34, 'Etc/GMT-1'),\n]\n\n# get the module and inverter specifications from SAM\nsandia_modules = pvlib.pvsystem.retrieve_sam('SandiaMod')\nsapm_inverters = pvlib.pvsystem.retrieve_sam('cecinverter')\nmodule = sandia_modules['Canadian_Solar_CS5P_220M___2009_']\ninverter = sapm_inverters['ABB__MICRO_0_25_I_OUTD_US_208__208V_']\ntemperature_model_parameters = pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS['sapm']['open_rack_glass_glass']\n```\n\n----------------------------------------\n\nTITLE: Localizing and Plotting Solar Position Data\nDESCRIPTION: This snippet localizes UTC solar position data to a desired time zone using the pytz library, then plots it. The snippet requires data stored in `solar_position_notz` and a time zone offset accessible through `tmy3_metadata['TZ']`. Note that the plot customization features are retained, including legend, axis labels, and reference lines.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfixed_tz = pytz.FixedOffset(tmy3_metadata['TZ'] * 60)\nsolar_position_hack = solar_position_notz.tz_localize('UTC').tz_convert(fixed_tz)\n\nsolar_position_hack.index\n\nax = solar_position_hack.loc[solar_position_hack.index[0:24], ['apparent_zenith', 'apparent_elevation', 'azimuth']].plot()\n\nax.legend(loc=1);\nax.axhline(0, color='darkgray');  # add 0 deg line for sunrise/sunset\nax.axhline(180, color='darkgray');  # add 180 deg line for azimuth at solar noon\nax.set_ylim(-60, 200);  # zoom in, but cuts off full azimuth range\nax.set_xlabel('Local time ({})'.format(solar_position_hack.index.tz));\n@savefig solar-position-hack.png width=6in\nax.set_ylabel('(degrees)');\n```\n\n----------------------------------------\n\nTITLE: Calculating Spectral Mismatch in Python\nDESCRIPTION: New module for calculating spectral mismatch from field spectral measurements, including functions for example spectral response, AM1.5G spectrum, and spectral mismatch calculation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.3.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.spectrum import get_example_spectral_response, get_am15g, calc_spectral_mismatch_field\n```\n\n----------------------------------------\n\nTITLE: Scaling Voltage, Current, and Power Based on Module Strings\nDESCRIPTION: This snippet shows how to scale voltage, current, and power based on the number of modules per string and strings per inverter. It creates a `PVSystem` with specified `modules_per_string` and `strings_per_inverter` and uses the `scale_voltage_current_power` method to scale the data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n    system = pvsystem.PVSystem(modules_per_string=7, strings_per_inverter=5)\n    # crude numbers from a single module\n    data = pd.DataFrame({'v_mp': 8, 'v_oc': 10, 'i_mp': 5, 'i_x': 6,\n                         'i_xx': 4, 'i_sc': 7, 'p_mp': 40}, index=[0])\n    data_scaled = system.scale_voltage_current_power(data)\n    print(data_scaled)\n```\n\n----------------------------------------\n\nTITLE: Find Time for Specific Solar Angles\nDESCRIPTION: Demonstrates the use of the calc_time function from pvlib to determine the specific time a desired solar angle occurs, given a latitude and longitude.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# use calc_time to find the time at which a solar angle occurs.\npvlib.solarposition.calc_time(\n    datetime.datetime(2020, 9, 14, 12),\n    datetime.datetime(2020, 9, 14, 15),\n    32.2,\n    -110.9,\n    'alt',\n    0.05235987755982988,  # 3 degrees in radians\n)\n```\n\n----------------------------------------\n\nTITLE: Running pytest for pvlib-python Tests\nDESCRIPTION: Examples of how to run pytest for all tests, a single module, or a single test in the pvlib-python project. Also shows how to use the --pdb flag for debugging and --remote-data flag for network-dependent tests.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\npytest tests/test_clearsky.py\npytest tests/test_clearsky.py::test_ineichen_nans\npytest tests --pdb\npytest tests --remote-data\n```\n\n----------------------------------------\n\nTITLE: SAPM System Configuration\nDESCRIPTION: Demonstrates setting up a PVSystem using Sandia Array Performance Model (SAPM) parameters and creating a ModelChain with custom model selections.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsapm_system = PVSystem(\n    module_parameters=sandia_module,\n    inverter_parameters=cec_inverter,\n    temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(sapm_system, location, aoi_model='physical', spectral_model='no_loss')\n```\n\n----------------------------------------\n\nTITLE: Calculating POA Irradiance Components in Python\nDESCRIPTION: Example of using the new poa_components function that replaces globalinplane. This calculates plane of array irradiance components including sky and ground diffuse.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.irradiance import poa_components\n\npoa = poa_components(aoi, dni, ghi, dhi, albedo, surface_tilt, surface_azimuth)\n```\n\n----------------------------------------\n\nTITLE: Updating albedo input in ModelChain.run_model() method\nDESCRIPTION: Enhancement to allow albedo to be provided as a column in the 'weather' DataFrame input to the run_model() method of ModelChain class.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvlib.modelchain.ModelChain.run_model()\n```\n\n----------------------------------------\n\nTITLE: Using Perez Model for Diffuse Irradiance Calculation\nDESCRIPTION: This snippet calculates diffuse irradiance using the Perez model, passing in relevant parameters from the TMY dataset and solar position. The results are stored in the initialized DataFrame.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['Perez'] = pvlib.irradiance.perez(surface_tilt,\n                               surface_azimuth,\n                               dhi=tmy_data.DHI,\n                               dni=tmy_data.DNI,\n                               dni_extra=dni_extra,\n                               solar_zenith=solpos.apparent_zenith,\n                               solar_azimuth=solpos.azimuth,\n                               airmass=airmass)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Array PVSystem and ModelChain in Python\nDESCRIPTION: Illustrates the creation of a PVSystem with multiple arrays and a corresponding ModelChain, demonstrating how to handle systems with multiple module configurations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.pvsystem import Array\nlocation = Location(latitude=32.2, longitude=-110.9)\ninverter_parameters = {'pdc0': 10000, 'eta_inv_nom': 0.96}\nmodule_parameters = {'pdc0': 250, 'gamma_pdc': -0.004}\narray_one = Array(mount=FixedMount(surface_tilt=20, surface_azimuth=200),\n                  module_parameters=module_parameters,\n                  temperature_model_parameters=temperature_model_parameters,\n                  modules_per_string=10, strings=2)\narray_two = Array(mount=FixedMount(surface_tilt=20, surface_azimuth=160),\n                  module_parameters=module_parameters,\n                  temperature_model_parameters=temperature_model_parameters,\n                  modules_per_string=10, strings=2)\nsystem_two_arrays = PVSystem(arrays=[array_one, array_two],\n                             inverter_parameters={'pdc0': 8000})\nmc = ModelChain(system_two_arrays, location, aoi_model='no_loss',\n                spectral_model='no_loss')\n\nmc.run_model(weather)\n\nmc.results.dc\nmc.results.dc[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Environment with Python Libraries\nDESCRIPTION: This snippet imports necessary libraries for data analysis, plotting, and specific functions from the pvlib library. Dependencies include Python's built-in modules and scientific libraries like NumPy, pandas, and matplotlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# built-in python modules\nimport os\nimport inspect\n\n# scientific python add-ons\nimport numpy as np\nimport pandas as pd\n\n# plotting stuff\n# first line makes the plots appear in the notebook\n%matplotlib inline \nimport matplotlib.pyplot as plt\n\n# finally, we import the pvlib library\nimport pvlib\n```\n\n----------------------------------------\n\nTITLE: Using pvfactors_timeseries function for bifacial calculations in Python\nDESCRIPTION: This snippet demonstrates the use of the new pvfactors_timeseries function in the bifacial module. It uses the open-source pvfactors package to calculate back surface irradiance for bifacial solar panels.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.bifacial import pvfactors_timeseries\n\npvfactors_timeseries(...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Diffuse Irradiance DataFrame\nDESCRIPTION: This snippet initializes an empty pandas DataFrame for storing various diffuse irradiance model results. It sets up the structure needed to collect model outputs.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad = pd.DataFrame(index=tmy_data.index)\n```\n\n----------------------------------------\n\nTITLE: Using Haydavies Model with Component Return in Python\nDESCRIPTION: Illustrates the usage of the updated Haydavies function with the new return_components parameter to get individual diffuse irradiance components.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.irradiance import haydavies\n\nresult = haydavies(..., return_components=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Temperature Model for ModelChain\nDESCRIPTION: Implements a basic temperature model that sets the cell temperature equal to the ambient air temperature. This function demonstrates how to create a custom temperature model for ModelChain.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef no_loss_temperature(mc):\n    # keep it simple\n    mc.results.cell_temperature = mc.results.weather['temp_air']\n    return mc\n```\n\n----------------------------------------\n\nTITLE: Detecting Clear Sky Conditions in PVLib Python\nDESCRIPTION: Function to identify clear sky periods in a time series of irradiance data. This is useful for data quality control and analysis.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.detect_clearsky\n```\n\n----------------------------------------\n\nTITLE: Using Boland Diffuse Fraction Estimation in Python\nDESCRIPTION: The pvlib.irradiance.boland function implements a new diffuse fraction estimation method similar to Erbs but using a single logistic exponential correlation between diffuse fraction and clearness index.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvlib.irradiance.boland()\n```\n\n----------------------------------------\n\nTITLE: Using Hay-Davies Model for Diffuse Irradiance Calculation\nDESCRIPTION: This snippet utilizes the Hay-Davies model to calculate diffuse irradiance, using input parameters similar to the Perez model. This output is also stored in the DataFrame for comparison.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['Hay-Davies'] = pvlib.irradiance.haydavies(surface_tilt,\n                               surface_azimuth,\n                               dhi=tmy_data.DHI,\n                               dni=tmy_data.DNI,\n                               dni_extra=dni_extra,\n                               solar_zenith=solpos.apparent_zenith,\n                               solar_azimuth=solpos.azimuth)\n```\n\n----------------------------------------\n\nTITLE: Using Isotropic Model for Diffuse Irradiance Calculation\nDESCRIPTION: This snippet applies the Isotropic model for computing diffuse irradiance, focusing on the tilt of the surface and DHI data from the TMY. The calculated values are again saved in the DataFrame.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['Isotropic'] = pvlib.irradiance.isotropic(surface_tilt,\n                               dhi=tmy_data.DHI)\n```\n\n----------------------------------------\n\nTITLE: Calculate and Plot Solar Elevation and Zenith\nDESCRIPTION: This code calculates the solar elevation and zenith angles using pvlib's pyephem and spa_python methods, then visualizes these measurements for different time periods and locations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npyephemout = pvlib.solarposition.pyephem(times_loc, tus.latitude, tus.longitude)\nspaout = pvlib.solarposition.spa_python(times_loc, tus.latitude, tus.longitude)\n\npyephemout['elevation'].plot(label='pyephem')\npyephemout['apparent_elevation'].plot(label='pyephem apparent')\nspaout['elevation'].plot(label='spa')\nplt.legend(ncol=2)\nplt.title('elevation')\n\nprint('pyephem')\nprint(pyephemout.head())\nprint('spa')\nprint(spaout.head())\n```\n\n----------------------------------------\n\nTITLE: Creating Location Object from EPW File in Python\nDESCRIPTION: A new method to create a Location object from EPW (EnergyPlus Weather) file metadata. This allows easy initialization of Location objects when working with EPW weather data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlocation = pvlib.location.Location.from_epw(epw_metadata)\n```\n\n----------------------------------------\n\nTITLE: Retrieving TMY Data from PVGIS using pvlib-python\nDESCRIPTION: This snippet demonstrates how to fetch a Typical Meteorological Year (TMY) dataset from PVGIS using pvlib's iotools module. It returns a pandas DataFrame with hourly weather data and a metadata dictionary.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/weather_data.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# get_pvgis_tmy returns two additional values besides df and metadata\ndf, _, _, metadata = pvlib.iotools.get_pvgis_tmy(latitude, longitude, map_variables=True)\n```\n\n----------------------------------------\n\nTITLE: Recalculate Solar Position with Different Locations\nDESCRIPTION: Rotates through locations like Golden and Berlin to calculate solar positions and generate comparison plots for elevations using pyephem and ephemeris methods.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npyephemout = pvlib.solarposition.pyephem(times.tz_localize(golden.tz), golden.latitude, golden.longitude)\nspaout = pvlib.solarposition.spa_python(times.tz_localize(golden.tz), golden.latitude, golden.longitude)\n\npyephemout['elevation'].plot(label='pyephem')\npyephemout['apparent_elevation'].plot(label='pyephem apparent')\nspaout['elevation'].plot(label='spa')\nplt.legend(ncol=2)\nplt.title('elevation')\n\nprint('pyephem')\nprint(pyephemout.head())\nprint('spa')\nprint(spaout.head())\n```\n\n----------------------------------------\n\nTITLE: Using Klucher Model for Diffuse Irradiance Calculation\nDESCRIPTION: This snippet calculates diffuse irradiance using the Klucher model, which incorporates surface tilt, azimuth, DHI, GHI, and solar position metrics. The outputs are stored in the DataFrame for later use.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['Klucher'] = pvlib.irradiance.klucher(surface_tilt, surface_azimuth,\n                                                    dhi=tmy_data.DHI,\n                                                    ghi=tmy_data.GHI,\n                                                    solar_zenith=solpos.apparent_zenith,\n                                                    solar_azimuth=solpos.azimuth)\n```\n\n----------------------------------------\n\nTITLE: Using Reindl Model for Diffuse Irradiance Calculation\nDESCRIPTION: This snippet employs the Reindl model to compute diffuse irradiance, leveraging various parameters including DHI, DNI, GHI, and solar positions. It also contributes to the DataFrame for comparative analysis.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['Reindl'] = pvlib.irradiance.reindl(surface_tilt,\n                               surface_azimuth,\n                               dhi=tmy_data.DHI,\n                               dni=tmy_data.DNI,\n                               ghi=tmy_data.GHI,\n                               dni_extra=dni_extra,\n                               solar_zenith=solpos.apparent_zenith,\n                               solar_azimuth=solpos.azimuth)\n```\n\n----------------------------------------\n\nTITLE: Plotting Turbidity Maps Using HDF5 Data in Python\nDESCRIPTION: Creates a function to plot turbidity maps for different months using HDF5 data included with pvlib. It demonstrates how to access and visualize global turbidity data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport calendar\nimport os\nimport h5py\n\npvlib_path = os.path.dirname(os.path.abspath(pvlib.clearsky.__file__))\nfilepath = os.path.join(pvlib_path, 'data', 'LinkeTurbidities.h5')\n\ndef plot_turbidity_map(month, vmin=1, vmax=100):\n    plt.figure()\n    with h5py.File(filepath, 'r') as lt_h5_file:\n        ltdata = lt_h5_file['LinkeTurbidity'][:, :, month-1]\n    plt.imshow(ltdata, vmin=vmin, vmax=vmax)\n    # data is in units of 20 x turbidity\n    plt.title('Linke turbidity x 20, ' + calendar.month_name[month])\n    plt.colorbar(shrink=0.5)\n    plt.tight_layout()\n\nplot_turbidity_map(1)\nplot_turbidity_map(7)\n```\n\n----------------------------------------\n\nTITLE: Compare Elevation and Zenith with Different Methods\nDESCRIPTION: Demonstrates plotting elevations and zenith angles calculated using different pvlib methods on the same graph to visualize discrepancies or differences among them.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nplt.figure()\npyephemout['elevation'].plot(label='pyephem')\nspaout['elevation'].plot(label='spa')\n(pyephemout['elevation'] - spaout['elevation']).plot(label='diff')\nplt.legend(ncol=3)\nplt.title('elevation')\n\nplt.figure()\npyephemout['apparent_elevation'].plot(label='pyephem apparent')\nspaout['elevation'].plot(label='spa')\n(pyephemout['apparent_elevation'] - spaout['elevation']).plot(label='diff')\nplt.legend(ncol=3)\nplt.title('elevation')\n\nplt.figure()\npyephemout['apparent_zenith'].plot(label='pyephem apparent')\nspaout['zenith'].plot(label='spa')\n(pyephemout['apparent_zenith'] - spaout['zenith']).plot(label='diff')\nplt.legend(ncol=3)\nplt.title('zenith')\n\nplt.figure()\npyephemout['apparent_azimuth'].plot(label='pyephem apparent')\nspaout['azimuth'].plot(label='spa')\n(pyephemout['apparent_azimuth'] - spaout['azimuth']).plot(label='diff')\nplt.legend(ncol=3)\nplt.title('azimuth');\n```\n\n----------------------------------------\n\nTITLE: Calculating Ineichen Clear Sky Model\nDESCRIPTION: This snippet calculates the Ineichen clear sky model for the given meteorological parameters using pvlib's clearsky module. It utilizes apparent zenith, airmass, turbidity, altitude, and extra radiation as inputs.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nineichen = clearsky.ineichen(apparent_zenith, airmass, linke_turbidity, altitude, dni_extra)\n```\n\n----------------------------------------\n\nTITLE: Plotting Air Mass vs Zenith Angle for Different Models in PVLib Python\nDESCRIPTION: This snippet creates a plot comparing the relationship between zenith angle and air mass for the simple model and the default (Kasten and Young 1989) model. It helps visualize how different models calculate air mass based on solar zenith angle.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nplt.plot(solpos['zenith'], pvlib.atmosphere.get_relative_airmass(solpos['zenith'], model='simple'), label='simple')\nplt.plot(solpos['zenith'], pvlib.atmosphere.get_relative_airmass(solpos['apparent_zenith']), label='default')\nplt.xlim(0,100)\nplt.ylim(0,100)\nplt.xlabel('Zenith angle (deg)')\nplt.ylabel('Airmass')\nplt.legend();\n```\n\n----------------------------------------\n\nTITLE: Generating Location and Time Series Data for Clearsky Analysis in Python\nDESCRIPTION: Creates a Location object for Albuquerque and generates a time series for analysis. Sets up a 30-minute period with 1-minute frequency for clearsky data generation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nabq = Location(35.04, -106.62, altitude=1619)\n\ntimes = pd.date_range(start='2012-04-01 10:30:00', tz='Etc/GMT+7', periods=30, freq='1min')\n\ncs = abq.get_clearsky(times)\n```\n\n----------------------------------------\n\nTITLE: Using King Model for Diffuse Irradiance Calculation\nDESCRIPTION: This code snippet implements the King model to compute diffuse irradiance, combining GHI and DHI data with solar zenith values. The results contribute to the overall analysis of different models.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad['King'] = pvlib.irradiance.king(surface_tilt,\n                               dhi=tmy_data.DHI,\n                               ghi=tmy_data.GHI,\n                               solar_zenith=solpos.apparent_zenith)\n```\n\n----------------------------------------\n\nTITLE: Calculating DC Power with PVSystem's pvwatts_dc Method in Python\nDESCRIPTION: Uses the pvwatts_dc method of a PVSystem object to calculate DC power output based on effective plane-of-array irradiance and cell temperature. Demonstrates how PVSystem methods simplify function calls by using stored attributes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npdc = system.pvwatts_dc(g_poa_effective=1000, temp_cell=30)\nprint(pdc)\n```\n\n----------------------------------------\n\nTITLE: Plotting Ineichen Clear Sky Model\nDESCRIPTION: This snippet creates a figure to plot the Ineichen clear sky model irradiance, sets the y-label and title, and adds a legend to the plot. It visually represents how irradiance changes over time.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nplt.figure();\nax = ineichen.plot()\nax.set_ylabel('Irradiance $W/m^2$');\nax.set_title('Ineichen Clear Sky Model');\nax.legend(loc=2);\n```\n\n----------------------------------------\n\nTITLE: Retrieving PSM3 Data using pvlib-python\nDESCRIPTION: This snippet shows how to retrieve satellite/reanalysis data from the PSM3 dataset using pvlib's iotools module. It specifies the location using latitude and longitude coordinates.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/weather_data.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlatitude, longitude = 33.75, -84.39  # Atlanta, Georgia, United States\ndf, metadata = pvlib.iotools.get_psm3(latitude, longitude, map_variables=True, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating PVSystem and ModelChain Objects for PVWatts Model in Python\nDESCRIPTION: Illustrates the creation of PVSystem and ModelChain objects for use with the PVWatts model, including setting module and inverter parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# make the objects\npvwatts_system = PVSystem(\n    module_parameters={'pdc0': 240, 'gamma_pdc': -0.004},\n    inverter_parameters={'pdc0': 240},\n    temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(pvwatts_system, location,\n                aoi_model='no_loss', spectral_model='no_loss')\n\n# manually assign data to the attributes that ModelChain.pvwatts_dc will need.\n# for standard workflows, run_model would assign these attributes.\nmc.results.effective_irradiance = pd.Series(1000, index=[pd.Timestamp('20170401 1200-0700')])\nmc.results.cell_temperature = pd.Series(50, index=[pd.Timestamp('20170401 1200-0700')])\n\n# run ModelChain.pvwatts_dc and look at the result\nmc.pvwatts_dc();\nmc.results.dc\n```\n\n----------------------------------------\n\nTITLE: Plotting Measured GHI and Clearsky GHI Data in Python\nDESCRIPTION: Creates a plot comparing the synthetic GHI data with the clear sky model estimate. This visualization helps to identify the cloud and overirradiance events in the data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots()\n\nghi.plot(label='input');\n\ncs['ghi'].plot(label='ineichen clear');\n\nax.set_ylabel('Irradiance $W/m^2$');\n\n@savefig detect-clear-ghi.png width=10in\nplt.legend(loc=4);\n\n@suppress\nplt.close();\n```\n\n----------------------------------------\n\nTITLE: Displaying TMY2 Metadata and Data Preview in Python\nDESCRIPTION: This code prints the TMY2 metadata and displays the first few rows of the TMY2 data using pandas DataFrame methods.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(tmy2_metadata)\nprint(tmy2_data.head())\n```\n\n----------------------------------------\n\nTITLE: Calculating AOI for a Multi-Array PV System\nDESCRIPTION: This snippet illustrates how to work with a PV system consisting of multiple arrays. It defines two arrays with different surface azimuths, creates a `PVSystem` with both arrays, and calculates the AOI for the entire system using `get_aoi`.  The code prints the number of arrays and the resulting AOI values.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    array_two = pvsystem.Array(pvsystem.FixedMount(surface_tilt=30, surface_azimuth=220))\n    system_multiarray = pvsystem.PVSystem(arrays=[array_one, array_two])\n    print(system_multiarray.num_arrays)\n    # call get_aoi with solar_zenith, solar_azimuth\n    aoi = system_multiarray.get_aoi(solar_zenith=30, solar_azimuth=180)\n    print(aoi)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Temperature Reference in PVSystem Module Parameters in Python\nDESCRIPTION: Shows how to override the default temperature reference in the module parameters of a PVSystem object. This affects the DC power calculation, demonstrating lower output with a lower reference temperature.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsystem.arrays[0].module_parameters['temp_ref'] = 0\n# lower temp_ref should lead to lower DC power than calculated above\npdc = system.pvwatts_dc(1000, 30)\nprint(pdc)\n```\n\n----------------------------------------\n\nTITLE: Calculating Solar Position and Plotting Results with PVLib in Python\nDESCRIPTION: This snippet calculates the solar position for a specific date range in Tucson using PVLib. It then prints and plots the results, showing various solar angles over time.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntimes = pd.date_range(start=datetime.datetime(2014,6,24), end=datetime.datetime(2014,6,25), freq='1Min', tz=tus.tz)\n\nsolpos = pvlib.solarposition.get_solarposition(times, tus.latitude, tus.longitude)\nprint(solpos.head())\nsolpos.plot();\n```\n\n----------------------------------------\n\nTITLE: Calculating Angle of Incidence (AOI) for a Single Array\nDESCRIPTION: This snippet demonstrates how to calculate the angle of incidence (AOI) for a single PV array using the `pvlib` library. It defines a `FixedMount` and an `Array`, then calculates the AOI using `get_aoi`.  The code prints the resulting AOI value.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    # two arrays each at 30 deg tilt with different facing\n    array_one = pvsystem.Array(pvsystem.FixedMount(surface_tilt=30, surface_azimuth=90))\n    array_one_aoi = array_one.get_aoi(solar_zenith=30, solar_azimuth=180)\n    print(array_one_aoi)\n```\n\n----------------------------------------\n\nTITLE: Implementing Townsend-Powers Monthly Snow Loss Model in Python\nDESCRIPTION: Added function for calculating snow loss using the Townsend-Powers monthly model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.3.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.snow import loss_townsend\n```\n\n----------------------------------------\n\nTITLE: Using sun_rise_set_transit_spa function in Python\nDESCRIPTION: This snippet shows the use of the renamed sun_rise_set_transit_spa function, which replaces the deprecated get_rise_set_transit function. It requires the time input to be localized to the specified latitude/longitude.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.solarposition import sun_rise_set_transit_spa\n\nsun_rise_set_transit_spa(...)\n```\n\n----------------------------------------\n\nTITLE: Plotting Global Horizontal Irradiance from TMY3 Data in Python\nDESCRIPTION: This snippet creates a plot of the Global Horizontal Irradiance (GHI) data from the TMY3 dataset using pandas plotting functionality.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntmy3_data['GHI'].plot();\n```\n\n----------------------------------------\n\nTITLE: Calculating Angle of Incidence for a PVSystem in Python\nDESCRIPTION: Demonstrates how to use the get_aoi method of a PVSystem to calculate the angle of incidence. The method uses the system's surface tilt and azimuth, requiring only solar position as input.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# single south-facing array at 20 deg tilt\nsystem_one_array = pvsystem.PVSystem(surface_tilt=20, surface_azimuth=180)\nprint(system_one_array.arrays[0].mount)\n\n# call get_aoi with solar_zenith, solar_azimuth\naoi = system_one_array.get_aoi(solar_zenith=30, solar_azimuth=180)\nprint(aoi)\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Timestamps in pandas\nDESCRIPTION: This snippet illustrates various ways to create and manipulate timestamps in pandas, including localizing and converting between time zones.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npd.Timestamp('2015-1-1 00:00')\n\npd.Timestamp('2015-1-1 00:00', tz='America/Denver')\npd.Timestamp('2015-1-1 00:00').tz_localize('America/Denver')\n\nmidnight_mst = pd.Timestamp('2015-1-1 00:00', tz='America/Denver')\ncorresponding_utc = midnight_mst.tz_convert('UTC')  # returns a new Timestamp\ncorresponding_utc\n\nmidnight = pd.Timestamp('2015-1-1 00:00')\nmidnight.tz_convert('UTC')\n```\n\n----------------------------------------\n\nTITLE: Calculating Clear Sky Irradiance using Simplified Solis Model in PVLib Python\nDESCRIPTION: Function to compute clear sky irradiance using the simplified Solis model. This model is known for its computational efficiency.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.simplified_solis\n```\n\n----------------------------------------\n\nTITLE: Creating a PVSystem with Multiple Arrays in Python\nDESCRIPTION: Shows how to create a PVSystem with multiple arrays by instantiating Array objects and passing them to the PVSystem constructor. Each Array can have its own mount and module parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodule_parameters = {'pdc0': 5000, 'gamma_pdc': -0.004}\nmount = pvsystem.FixedMount(surface_tilt=20, surface_azimuth=180)\narray_one = pvsystem.Array(mount=mount, module_parameters=module_parameters)\narray_two = pvsystem.Array(mount=mount, module_parameters=module_parameters)\nsystem_two_arrays = pvsystem.PVSystem(arrays=[array_one, array_two],\n                                      inverter_parameters=inverter_parameters)\nprint([array.module_parameters for array in system_two_arrays.arrays])\nprint(system_two_arrays.inverter_parameters)\n```\n\n----------------------------------------\n\nTITLE: Using New Reference Spectra Function\nDESCRIPTION: Example showing how to use the new get_reference_spectra function to replace the deprecated get_am15g function for accessing ASTM G173-03 global spectrum data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.11.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old way (deprecated):\nspectrum = pvlib.spectrum.get_am15g()\n\n# New way:\nspectrum = pvlib.spectrum.get_reference_spectra(standard=\"ASTM G173-03\")[\"global\"]\n```\n\n----------------------------------------\n\nTITLE: Creating PVSystem and ModelChain Objects for SAPM Model in Python\nDESCRIPTION: Demonstrates the creation and use of PVSystem and ModelChain objects for the Sandia Array Performance Model (SAPM), including setting module and inverter parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# make the objects\nsapm_system = PVSystem(\n    module_parameters=sandia_module,\n    inverter_parameters=cec_inverter,\n    temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(sapm_system, location)\n\n# manually assign data to the attributes that ModelChain.sapm will need.\n# for standard workflows, run_model would assign these attributes.\nmc.results.effective_irradiance = pd.Series(1000, index=[pd.Timestamp('20170401 1200-0700')])\nmc.results.cell_temperature = pd.Series(50, index=[pd.Timestamp('20170401 1200-0700')])\n\n# run ModelChain.sapm and look at the result\nmc.sapm();\nmc.results.dc\n```\n\n----------------------------------------\n\nTITLE: Generate Time Range with Pandas\nDESCRIPTION: This snippet uses pandas to create a range of datetime objects from June 23 to 24, 2014 with one-minute intervals, and localizes the time to a specific location's timezone.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntimes = pd.date_range(start=datetime.datetime(2014,6,23), end=datetime.datetime(2014,6,24), freq='1Min')\ntimes_loc = times.tz_localize(tus.pytz)\n```\n\n----------------------------------------\n\nTITLE: Plotting Global Horizontal Irradiance (GHI)\nDESCRIPTION: This snippet plots the GHI data from the TMY dataset. It visualizes the irradiance values over time and uses matplotlib for the plotting functionality.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntmy_data.GHI.plot()\nplt.ylabel('Irradiance (W/m**2)');\n```\n\n----------------------------------------\n\nTITLE: Initializing PVSystem with Module and Inverter Parameters in Python\nDESCRIPTION: Creates a PVSystem object with specified module and inverter parameters. The module parameters include nominal DC power and temperature coefficient, while the inverter parameters include nominal DC power and nominal efficiency.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmodule_parameters = {'pdc0': 5000, 'gamma_pdc': -0.004}\ninverter_parameters = {'pdc0': 5000, 'eta_inv_nom': 0.96}\nsystem = pvsystem.PVSystem(inverter_parameters=inverter_parameters,\n                           module_parameters=module_parameters)\nprint(system.inverter_parameters)\n```\n\n----------------------------------------\n\nTITLE: Calculating Missing Irradiance Component in Python\nDESCRIPTION: Shows how to use the new complete_irradiance function to calculate one of GHI, DHI, or DNI from the other two components.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.irradiance import complete_irradiance\n```\n\n----------------------------------------\n\nTITLE: Defining Diffuse Irradiance Models List\nDESCRIPTION: This snippet defines a list of different diffuse irradiance models to be used later in calculations. These models will help analyze how various approaches affect the results.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmodels = ['Perez', 'Hay-Davies', 'Isotropic', 'King', 'Klucher', 'Reindl']\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Mean Deviation of Yearly Diffuse Irradiation\nDESCRIPTION: This code calculates the mean deviation from the measured values for each model, normalizing it and then plotting this comparison, helping to evaluate model performance.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmean_yearly = yearly.mean()\nyearly_mean_deviation = (yearly - mean_yearly) / yearly * 100.0\nyearly_mean_deviation.plot(kind='bar');\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Object for Tucson in PVLib Python\nDESCRIPTION: This snippet creates a Location object for Tucson, Arizona, specifying its latitude, longitude, timezone, altitude, and name. This object will be used for subsequent solar calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntus = Location(32.2, -111, 'US/Arizona', 700, 'Tucson')\n```\n\n----------------------------------------\n\nTITLE: Reading TMY3 and TMY2 Data Files using pvlib in Python\nDESCRIPTION: This snippet demonstrates how to read TMY3 and TMY2 data files using the pvlib.iotools module. It loads both data and metadata from the files.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntmy3_data, tmy3_metadata = pvlib.iotools.read_tmy3(os.path.join(pvlib_abspath, 'data', '703165TY.csv'))\ntmy2_data, tmy2_metadata = pvlib.iotools.read_tmy2(os.path.join(pvlib_abspath, 'data', '12839.tm2'))\n```\n\n----------------------------------------\n\nTITLE: Reading Local TMY3 File using pvlib-python\nDESCRIPTION: This snippet shows how to read a local TMY3 format file using pvlib's iotools module. It returns a pandas DataFrame with the weather data and a metadata dictionary.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/weather_data.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf, metadata = pvlib.iotools.read_tmy3(r\"C:\\path\\to\\file.csv\", map_variables=True)\n```\n\n----------------------------------------\n\nTITLE: Calculating Clear Sky Irradiance using Ineichen Model in PVLib Python\nDESCRIPTION: Function to compute clear sky irradiance using the Ineichen model. This model is widely used for its accuracy and simplicity.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.ineichen\n```\n\n----------------------------------------\n\nTITLE: Initialize Location Objects in Python\nDESCRIPTION: The snippet creates several Location objects for different cities and prints them to confirm their details. It uses latitude, longitude, timezone, altitude, and a descriptive name.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntus = Location(32.2, -111, 'US/Arizona', 700, 'Tucson')\nprint(tus)\ngolden = Location(39.742476, -105.1786, 'America/Denver', 1830, 'Golden')\nprint(golden)\ngolden_mst = Location(39.742476, -105.1786, 'MST', 1830, 'Golden MST')\nprint(golden_mst)\nberlin = Location(52.5167, 13.3833, 'Europe/Berlin', 34, 'Berlin')\nprint(berlin)\n```\n\n----------------------------------------\n\nTITLE: Calculating Clear Sky Irradiance using Bird Model in PVLib Python\nDESCRIPTION: Function to compute clear sky irradiance using the Bird model. This model is known for its physical basis and consideration of various atmospheric parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.bird\n```\n\n----------------------------------------\n\nTITLE: Contour Plot of Irradiance based on AOD and PW\nDESCRIPTION: This code snippet demonstrates how to produce a contour plot of irradiance with varying aerosol optical depth (AOD) and precipitable water (PW), providing a visual representation of the sensitivity of irradiance to these parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naod700, precipitable_water = np.meshgrid(aod700, precipitable_water)\n\nsolis = clearsky.simplified_solis(apparent_elevation, aod700, precipitable_water, pressure, dni_extra)\ndef plot_solis(key):\n    irrad = solis[key]\n    fig, ax = plt.subplots()\n    im = ax.contour(aod700, precipitable_water, irrad[:, :], n, vmin=vmin, vmax=vmax)\n    ax.set_xlabel('AOD')\n    ax.set_ylabel('Precipitable water (cm)')\n    fig.colorbar(imf, label='{} (W/m**2)'.format(key))\n    ax.set_title('{}, elevation={}'.format(key, apparent_elevation))\n```\n\n----------------------------------------\n\nTITLE: Plotting Coerced TMY3 Global Horizontal Irradiance Data in Python\nDESCRIPTION: This snippet plots the Global Horizontal Irradiance (GHI) data from the TMY3 dataset after coercing the year, using pandas plotting functionality.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntmy3_data['GHI'].plot();\n```\n\n----------------------------------------\n\nTITLE: Plotting Yearly Diffuse Irradiation\nDESCRIPTION: This snippet creates a horizontal bar plot for yearly diffuse irradiation values, providing an overview of irradiance data over the entire year.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nyearly.plot(kind='barh');\n```\n\n----------------------------------------\n\nTITLE: Generating Clear Sky Time Series Using Basic pvlib Functions in Python\nDESCRIPTION: Demonstrates how to create a clear sky time series using individual pvlib functions for solar position, air mass, pressure, and irradiance calculations. This example shows a more granular approach compared to using the Location object.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlatitude, longitude, tz, altitude, name = 32.2, -111, 'US/Arizona', 700, 'Tucson'\ntimes = pd.date_range(start='2014-01-01', end='2014-01-02', freq='1Min', tz=tz)\nsolpos = pvlib.solarposition.get_solarposition(times, latitude, longitude)\napparent_zenith = solpos['apparent_zenith']\nairmass = pvlib.atmosphere.get_relative_airmass(apparent_zenith)\npressure = pvlib.atmosphere.alt2pres(altitude)\nairmass = pvlib.atmosphere.get_absolute_airmass(airmass, pressure)\nlinke_turbidity = pvlib.clearsky.lookup_linke_turbidity(times, latitude, longitude)\ndni_extra = pvlib.irradiance.get_extra_radiation(times)\n```\n\n----------------------------------------\n\nTITLE: Passing Solar Position Method in ModelChain\nDESCRIPTION: Bug fix for modelchain.basic_chain to correctly pass the 'solar_position_method' argument to solarposition.get_solarposition. This ensures the correct solar position calculation method is used.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.5.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmodelchain.basic_chain(solar_position_method='method_name')\n```\n\n----------------------------------------\n\nTITLE: Aerosol Data and AOD Calculation\nDESCRIPTION: In this snippet, various parameters related to the atmosphere are calculated, including relative airmass, absolute airmass, and Linke turbidity. It's essential for deriving accurate measurements of solar irradiance.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nairmass = pvlib.atmosphere.get_relative_airmass(apparent_zenith)\npressure = pvlib.atmosphere.alt2pres(altitude)\nairmass = pvlib.atmosphere.get_absolute_airmass(airmass, pressure)\nlinke_turbidity = pvlib.clearsky.lookup_linke_turbidity(times, latitude, longitude)\nprint('climatological linke_turbidity = {}'.format(linke_turbidity.mean()))\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Airmass\nDESCRIPTION: This code snippet computes the relative airmass based on solar position and plots the resulting data. Airmass is important for understanding atmospheric effects on solar irradiance.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nairmass = pvlib.atmosphere.get_relative_airmass(solpos['apparent_zenith'])\nairmass.plot()\nplt.ylabel('Airmass');\n```\n\n----------------------------------------\n\nTITLE: Importing pvlib Modules in Python\nDESCRIPTION: Examples of importing various pvlib modules that have been updated or added in this release.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib import irradiance, spectrum, iotools, pvsystem, bifacial, shading\n```\n\n----------------------------------------\n\nTITLE: Correcting Solar Position Method in ModelChain Preparation\nDESCRIPTION: Bug fix for ModelChain.prepare_inputs and ModelChain.complete_irradiance to correctly pass the 'solar_position_method' argument to solarposition.get_solarposition.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.5.1.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nModelChain.prepare_inputs(solar_position_method='method_name')\nModelChain.complete_irradiance(solar_position_method='method_name')\n```\n\n----------------------------------------\n\nTITLE: Descriptive Statistics of Diffuse Irradiance Data\nDESCRIPTION: This snippet uses pandas to provide descriptive statistics for the diffuse irradiance data, helping to summarize key characteristics of the dataset.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad.describe()\n```\n\n----------------------------------------\n\nTITLE: Using New Irradiance Decomposition Models in Python\nDESCRIPTION: Demonstrates the usage of newly added irradiance decomposition models: Orgill-Hollands and Louche.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nghi = 800  # Example global horizontal irradiance\nzenith = 30  # Example solar zenith angle\n\n# Orgill-Hollands model\ndni_oh, dhi_oh = irradiance.orgill_hollands(ghi, zenith)\n\n# Louche model\ndni_louche, dhi_louche = irradiance.louche(ghi, zenith)\n```\n\n----------------------------------------\n\nTITLE: Comparing Turbidity Data with and without Interpolation in Python\nDESCRIPTION: Demonstrates how to lookup and plot Linke turbidity data for multiple locations, comparing raw data and interpolated data. It shows the spatial and temporal variability of turbidity.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntimes = pd.date_range(start='2015-01-01', end='2016-01-01', freq='1D')\nsites = [(32, -111, 'Tucson1'), (32.2, -110.9, 'Tucson2'),\n         (33.5, -112.1, 'Phoenix'), (35.1, -106.6, 'Albuquerque')]\n\nplt.figure()\nfor lat, lon, name in sites:\n    turbidity = pvlib.clearsky.lookup_linke_turbidity(times, lat, lon, interp_turbidity=False)\n    turbidity.plot(label=name)\nplt.legend()\nplt.title('Raw data (no interpolation)')\nplt.ylabel('Linke Turbidity')\n\nplt.figure()\nfor lat, lon, name in sites:\n    turbidity = pvlib.clearsky.lookup_linke_turbidity(times, lat, lon)\n    turbidity.plot(label=name)\nplt.legend()\nplt.title('Interpolated to the day')\nplt.ylabel('Linke Turbidity')\n```\n\n----------------------------------------\n\nTITLE: Plotting Density of Diffuse Irradiance\nDESCRIPTION: This code generates a density plot for the diffuse irradiance data, providing insights into its distribution over time. It aids in visualizing how the irradiance values behave.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndiffuse_irrad.dropna().plot(kind='density');\n```\n\n----------------------------------------\n\nTITLE: Plotting In-plane Diffuse Irradiance Results\nDESCRIPTION: This snippet creates a plot for the diffuse irradiance results, with a focus on presenting the data in a visually comprehensible format. It sets the y-axis limit to enhance readability.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nax = diffuse_irrad.plot(title='In-plane diffuse irradiance', alpha=.75, lw=1)\nax.set_ylim(0, 800)\nylabel = ax.set_ylabel('Diffuse Irradiance [W]')\nplt.legend();\n```\n\n----------------------------------------\n\nTITLE: Using Low Resolution Altitude Lookup in Python\nDESCRIPTION: New function for low resolution altitude lookup using the lookup_altitude function from pvlib.location module.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.3.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.location import lookup_altitude\n```\n\n----------------------------------------\n\nTITLE: Testing ModelChain with pytest-mock in Python\nDESCRIPTION: Shows how to use pytest-mock to test the ModelChain class. This test ensures that the correct PVSystem method is called through ModelChain.run_model and checks the resulting attributes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_modelchain_dc_model(mocker):\n    location = location.Location(32, -111)\n    system = pvsystem.PVSystem(module_parameters=some_sandia_mod_params,\n                               inverter_parameters=some_cecinverter_params)\n\n    m = mocker.spy(system, 'sapm')\n\n    mc = ModelChain(system, location,\n                    aoi_model='no_loss', spectral_model='no_loss')\n    times = pd.date_range('20160101 1200-0700', periods=2, freq='6H')\n    mc.run_model(times)\n\n    m.assert_called_once()\n\n    assert isinstance(mc.dc, (pd.Series, pd.DataFrame))\n```\n\n----------------------------------------\n\nTITLE: Using Hay-Davies Sky Diffuse Irradiance Model in Python\nDESCRIPTION: The get_irradiance and get_irradiance_poa functions in the pvlib.bifacial.infinite_sheds module now support the Hay-Davies sky diffuse irradiance model as an alternative to the default isotropic model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.5.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npvlib.bifacial.infinite_sheds.get_irradiance(model='hay-davies')\npvlib.bifacial.infinite_sheds.get_irradiance_poa(model='hay-davies')\n```\n\n----------------------------------------\n\nTITLE: Using Alternative ModelChain Interfaces in Python\nDESCRIPTION: Demonstrates the use of simplified ModelChain interfaces as alternatives to the deprecated basic_chain function.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.modelchain import ModelChain\n\n# Using with_pvwatts method\nmodel_chain_pvwatts = ModelChain.with_pvwatts()\n\n# Using with_sapm method\nmodel_chain_sapm = ModelChain.with_sapm()\n```\n\n----------------------------------------\n\nTITLE: Reading TMY3 Data with Year Coercion in Python\nDESCRIPTION: This code demonstrates how to read a TMY3 file while coercing all dates to a specific year (1987 in this case) using the coerce_year parameter.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntmy3_data, tmy3_metadata = pvlib.iotools.read_tmy3(os.path.join(pvlib_abspath, 'data', '703165TY.csv'), coerce_year=1987)\n```\n\n----------------------------------------\n\nTITLE: Plotting Diffuse Horizontal Irradiance (DHI)\nDESCRIPTION: This snippet generates a plot for the DHI data in the TMY dataset. It aims to visualize the diffuse irradiance values over time using matplotlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntmy_data.DHI.plot()\nplt.ylabel('Irradiance (W/m**2)');\n```\n\n----------------------------------------\n\nTITLE: Using ADR PV Module Efficiency Model in Python\nDESCRIPTION: Demonstrates the usage of the new ADR PV module efficiency model and its parameter fitting function for field or lab measurements.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.pvarray import pvefficiency_adr, fit_pvefficiency_adr\n```\n\n----------------------------------------\n\nTITLE: Testing PVSystem Method with pytest-mock in Python\nDESCRIPTION: Demonstrates how to use pytest-mock to test the PVSystem.ashraeiam method. The test ensures that the method correctly wraps the corresponding function call and passes the right parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_PVSystem_ashraeiam(mocker):\n    mocker.spy(pvsystem, 'ashraeiam')\n\n    module_parameters = {'b': 0.05}\n    system = pvsystem.PVSystem(module_parameters=module_parameters)\n    thetas = 1\n\n    iam = system.ashraeiam(thetas)\n\n    pvsystem.ashraeiam.assert_called_once_with(thetas, b=module_parameters['b'])\n\n    assert iam < 1.\n```\n\n----------------------------------------\n\nTITLE: Calculating Module Temperature with Radiative Losses in Python\nDESCRIPTION: Demonstrates the use of the new Faiman model that accounts for radiative losses to the sky when calculating module temperature.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.temperature import faiman_rad\n```\n\n----------------------------------------\n\nTITLE: Displaying TMY3 Metadata and Data Preview in Python\nDESCRIPTION: This code prints the TMY3 metadata and displays the first 5 rows of the TMY3 data using pandas DataFrame methods.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(tmy3_metadata)\ntmy3_data.head(5)\n```\n\n----------------------------------------\n\nTITLE: Importing TMY3 Data with pvlib in Python\nDESCRIPTION: This snippet demonstrates how to import TMY3 data using pvlib, including handling of time zones and metadata extraction.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport inspect\nimport pvlib\n\npvlib_abspath = os.path.dirname(os.path.abspath(inspect.getfile(pvlib)))\nfile_abspath = os.path.join(pvlib_abspath, 'data', '703165TY.csv')\ntmy3_data, tmy3_metadata = pvlib.iotools.read_tmy3(file_abspath, map_variables=True)\n\ntmy3_metadata\n\ntmy3_data.index.tz\n\ntmy3_data.loc[tmy3_data.index[0:3], ['ghi', 'dni', 'AOD (unitless)']]\n```\n\n----------------------------------------\n\nTITLE: Plotting Daily Diffuse Irradiation\nDESCRIPTION: This snippet creates a time-converted plot of daily diffuse irradiation values, showcasing data in a clear graphical representation over the specified time frame.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nax_daily = daily.tz_convert('UTC').plot(title='Daily diffuse irradiation')\nylabel = ax_daily.set_ylabel('Irradiation [kWh]')\n```\n\n----------------------------------------\n\nTITLE: Adding PVGIS TMY Dataset Retrieval Function - Python\nDESCRIPTION: This snippet describes the addition of the function to retrieve PVGIS TMY datasets, enhancing PVLIB's capabilities for obtaining time series data critical for solar energy assessments.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Added :py:func:`~pvlib.iotools.get_pvgis_tmy` to get PVGIS TMY datasets.\n  (:pull:`845`)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Working with Fixed Offset Time Zones in Python\nDESCRIPTION: This snippet shows various ways to specify fixed offset time zones in Python, including using Etc/GMT*, pytz.FixedOffset, and string formulations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npd.Timestamp('2015-1-1 00:00', tz='Etc/GMT-2')\n\npd.Timestamp('2015-1-1 00:00', tz=pytz.FixedOffset(120))\n\npd.Timestamp('2015-1-1 00:00', tz=7200)\n\npd.Timestamp('2015-1-1 00:00+0200')\n```\n\n----------------------------------------\n\nTITLE: Creating a ModelChain Wrapper for PVUSA Model\nDESCRIPTION: Implements a wrapper function to use the PVUSA model within ModelChain. This function handles single and multiple arrays, processes the required inputs from the ModelChain instance, and assigns the calculated DC power to the results attribute.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef pvusa_mc_wrapper(mc):\n    \"\"\"\n    Calculate the dc power and assign it to mc.results.dc\n    Set up to iterate over arrays and total_irrad. mc.system.arrays is\n    always a tuple. However, when there is a single array\n    mc.results.total_irrad will be a Series (if multiple arrays,\n    total_irrad will be a tuple). In this case we put total_irrad\n    in a list so that we can iterate. If we didn't put total_irrad\n    in a list, iteration will access each value of the Series, one\n    at a time.\n    The iteration returns a tuple. If there is a single array, the\n    tuple is of length 1. As a convenience, pvlib unwraps tuples of length 1\n    that are assigned to ModelChain.results attributes.\n    Returning mc is optional, but enables method chaining.\n    \"\"\"\n    if mc.system.num_arrays == 1:\n        total_irrads = [mc.results.total_irrad]\n    else:\n        total_irrads = mc.results.total_irrad\n    mc.results.dc = tuple(\n        pvusa(total_irrad['poa_global'], mc.results.weather['wind_speed'],\n              mc.results.weather['temp_air'], array.module_parameters['a'],\n              array.module_parameters['b'], array.module_parameters['c'],\n              array.module_parameters['d'])\n        for total_irrad, array\n        in zip(total_irrads, mc.system.arrays))\n    return mc\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated PSM3 Functions\nDESCRIPTION: Example of using the updated PSM3 functions with new default parameters. The leap_day parameter now defaults to True and map_variables defaults to True.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.11.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old way (pre v0.11.0):\npvlib.iotools.get_psm3(leap_day=False, map_variables=False)\n\n# New way (v0.11.0+):\npvlib.iotools.get_psm3()  # leap_day=True and map_variables=True by default\n```\n\n----------------------------------------\n\nTITLE: Printing Location Object Details in Python\nDESCRIPTION: This code prints the details of the previously created Location object for Tucson. It helps verify the correctness of the location information.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(tus)\n```\n\n----------------------------------------\n\nTITLE: Compute Ephemeris and Plot\nDESCRIPTION: Uses the pvlib ephemeris method to calculate solar position values and plots both ephemeris and pyephem calculated values for comparison, specifically focusing on elevation and azimuth over specified dates.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npyephemout = pvlib.solarposition.pyephem(times.tz_localize(golden.tz), golden.latitude, golden.longitude)\nephemout = pvlib.solarposition.ephemeris(times.tz_localize(golden.tz), golden.latitude, golden.longitude)\n\npyephemout['elevation'].plot(label='pyephem')\npyephemout['apparent_elevation'].plot(label='pyephem apparent')\nephemout['elevation'].plot(label='ephem')\nplt.legend(ncol=2)\nplt.title('elevation')\n\nprint('pyephem')\nprint(pyephemout.head())\nprint('ephem')\nprint(ephemout.head())\n```\n\n----------------------------------------\n\nTITLE: Using new read_tmy2 and read_tmy3 functions in Python\nDESCRIPTION: This snippet demonstrates the use of new functions for reading TMY2 and TMY3 data files. These functions replace the deprecated tmy, tmy.readtmy2, and tmy.readtmy3 functions.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.iotools import read_tmy2, read_tmy3\n```\n\n----------------------------------------\n\nTITLE: Handling Daylight Savings Time in Python\nDESCRIPTION: This code demonstrates the differences in handling daylight savings time between different time zones, showing UTC offsets in winter and summer.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npd.Timestamp('2015-1-1 00:00').tz_localize('US/Mountain')\npd.Timestamp('2015-1-1 00:00').tz_localize('Etc/GMT+7')\n\npd.Timestamp('2015-6-1 00:00').tz_localize('US/Mountain')\npd.Timestamp('2015-6-1 00:00').tz_localize('Etc/GMT+7')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple AC Model for PVUSA in ModelChain\nDESCRIPTION: Creates a simplified AC conversion model that simply sets the AC output equal to the DC output. This function is designed to be used as the ac_model parameter in ModelChain.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef pvusa_ac_mc(mc):\n    # keep it simple\n    mc.results.ac = mc.results.dc\n    return mc\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib Schlick IAM Model in Python\nDESCRIPTION: Demonstrates how to import the new Schlick IAM model functions added in this release. These functions can be used for direct and diffuse incident angle modifier calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.iam import schlick, marion_diffuse, schlick_diffuse\n```\n\n----------------------------------------\n\nTITLE: Retrieving Clear Sky Data in PVLib Python\nDESCRIPTION: Method to obtain clear sky irradiance data for a specific location. This is part of the Location class in PVLib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlocation.Location.get_clearsky\n```\n\n----------------------------------------\n\nTITLE: Setup Environment with Key Libraries in Python\nDESCRIPTION: This snippet demonstrates the setup of essential Python libraries, including pvlib for solar calculations and matplotlib for plotting results, within a Jupyter Notebook environment.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\n# scientific python add-ons\nimport numpy as np\nimport pandas as pd\n\n# plotting stuff\n# first line makes the plots appear in the notebook\n%matplotlib inline \nimport matplotlib.pyplot as plt\n\n# finally, we import the pvlib library\nimport pvlib\n```\n\n----------------------------------------\n\nTITLE: Importing pvlib Forecast Model in Python\nDESCRIPTION: Example of importing the ForecastModel class from pvlib.forecast module, which now requires tz-localized start and end arguments.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.forecast import ForecastModel\n```\n\n----------------------------------------\n\nTITLE: Inspecting ModelChain run_model Method in Python\nDESCRIPTION: Shows how to inspect the run_model method of a ModelChain instance using IPython's ?? syntax. This method is responsible for executing the PV system model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nmc.run_model??\n```\n\n----------------------------------------\n\nTITLE: DNI Estimation Model References in pvlib\nDESCRIPTION: Sphinx documentation autosummary listing the available DNI estimation model functions in the pvlib.irradiance module. Includes models like DISC, DIRINT, DirIndex, Erbs, Driesse, Orgill-Hollands, Boland, Campbell-Norman, GTI-DIRINT, and Louche.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/decomposition.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\n.. _dniestmodels:\n\nDNI estimation models\n---------------------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   irradiance.disc\n   irradiance.dirint\n   irradiance.dirindex\n   irradiance.erbs\n   irradiance.erbs_driesse\n   irradiance.orgill_hollands\n   irradiance.boland\n   irradiance.campbell_norman\n   irradiance.gti_dirint\n   irradiance.louche\n```\n\n----------------------------------------\n\nTITLE: Inspecting ModelChain infer_ac_model and Related Functions in Python\nDESCRIPTION: Shows how to inspect the infer_ac_model method and related functions in ModelChain, which are used to determine the appropriate AC model based on inverter parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nmc.infer_ac_model??\npvlib.modelchain._snl_params??\npvlib.modelchain._adr_params??\npvlib.modelchain._pvwatts_params??\n```\n\n----------------------------------------\n\nTITLE: Calculating Clear Sky Irradiance using Haurwitz Model in PVLib Python\nDESCRIPTION: Function to compute clear sky irradiance using the Haurwitz model. This is a simple empirical model based on solar elevation angle.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.haurwitz\n```\n\n----------------------------------------\n\nTITLE: Inspecting ModelChain infer_dc_model Method in Python\nDESCRIPTION: Demonstrates how to inspect the infer_dc_model method of ModelChain, which is used to automatically determine the appropriate DC model based on available parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nmc.infer_dc_model??\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib iotools subpackage in Python\nDESCRIPTION: This snippet shows the creation of the new pvlib.iotools subpackage. It's a significant API change that introduces new functionality for handling input/output operations in PVLib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pvlib.iotools\n```\n\n----------------------------------------\n\nTITLE: Updating PVSystem.pvwatts_ac Input in Python\nDESCRIPTION: Change to PVSystem.pvwatts_ac method to use inverter DC input limit instead of module nameplate capacity.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPVSystem.pvwatts_ac(PVSystem.inverter_parameters['pdc0'])\n```\n\n----------------------------------------\n\nTITLE: Adding Gueymard 2003 Airmass Model in Python\nDESCRIPTION: The get_relative_airmass function now supports the 'gueymard2003' model, which is used for REST and REST2 calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npvlib.atmosphere.get_relative_airmass(model='gueymard2003')\n```\n\n----------------------------------------\n\nTITLE: Importing Renamed IV Tools Functions in Python\nDESCRIPTION: Example of importing renamed IV tools functions from the reorganized subpackage structure in pvlib v0.8.0.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.8.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.ivtools.sdm import fit_cec_sam, fit_desoto\nfrom pvlib.ivtools.sde import fit_sandia_simple\n```\n\n----------------------------------------\n\nTITLE: Assessing Azimuth Comparatively\nDESCRIPTION: Calculates and compares azimuth values using pyephem and ephemeris functions, plotting the differences graphically to assess agreement between methods across different times.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nloc = berlin\ntimes = pd.date_range(start=datetime.date(2015,3,28), end=datetime.date(2015,3,29), freq='5min')\n\npyephemout = pvlib.solarposition.pyephem(times.tz_localize(loc.tz), loc.latitude, loc.longitude)\nephemout = pvlib.solarposition.ephemeris(times.tz_localize(loc.tz), loc.latitude, loc.longitude)\n\npyephemout['elevation'].plot(label='pyephem')\npyephemout['apparent_elevation'].plot(label='pyephem apparent')\nephemout['elevation'].plot(label='ephem')\nplt.legend(ncol=2)\nplt.title('elevation')\n\nplt.figure()\npyephemout['azimuth'].plot(label='pyephem')\nephemout['azimuth'].plot(label='ephem')\nplt.legend(ncol=2)\nplt.title('azimuth')\n\nprint('pyephem')\nprint(pyephemout.head())\nprint('ephem')\nprint(ephemout.head())\n```\n\n----------------------------------------\n\nTITLE: Retrieving BSRN Ground Station Data using pvlib-python\nDESCRIPTION: This snippet demonstrates how to fetch data from the BSRN ground station network using pvlib's iotools module. It specifies the location using a station ID and includes date range parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/weather_data.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf, metadata = pvlib.iotools.get_bsrn(station='cab', start='2020-01-01', end='2020-01-31', ...)\n```\n\n----------------------------------------\n\nTITLE: Changing PSM3 API Endpoint - Python\nDESCRIPTION: Details a change in the API endpoint related to the PSM3 function, reflecting updates in how data is accessed and enhancing the robustness of data retrieval.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Changed the PSM3 API endpoint for TMY requests in `iotools.get_psm3`.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: New Soiling Model Addition - Python\nDESCRIPTION: Introduces a new soiling model from Humboldt State University to allow a more accurate simulation of energy losses due to dust or debris on solar panels.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Added the Humboldt State University soiling model\n  :py:func:`~pvlib.losses.soiling_hsu`. (:issue:`739`)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Reading TMY3 Data in Python\nDESCRIPTION: Using the read_tmy3 function from pvlib.iotools to read TMY3 data, which now returns monotonically increasing indices when coerced to a single year.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.iotools import read_tmy3\n```\n\n----------------------------------------\n\nTITLE: Using New Relative Airmass Function in Python\nDESCRIPTION: Example of using the new get_relative_airmass function that replaces the deprecated relativeairmass function. This calculates relative air mass using a specified model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.atmosphere import get_relative_airmass\n\nairmass = get_relative_airmass(zenith, model='kastenyoung1989')\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib Functions in Python\nDESCRIPTION: This snippet demonstrates how to import specific functions from the PVLib Python library. It includes functions for single diode modeling and PV system modeling.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.singlediode import bishop88_mpp, bishop88_i_from_v, bishop88_v_from_i\nfrom pvlib.pvsystem import sapm, retrieve_sam\n```\n\n----------------------------------------\n\nTITLE: Retrieving PVGIS Horizon Data in Python\nDESCRIPTION: Shows how to use the new get_pvgis_horizon function to retrieve horizon data from PVGIS.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.iotools import get_pvgis_horizon\n\nlatitude, longitude = 45.0, 8.0\nhorizon_data = get_pvgis_horizon(latitude, longitude)\n```\n\n----------------------------------------\n\nTITLE: Switching from os.path to pathlib - Python\nDESCRIPTION: Indicates the transition from using `os.path` to `pathlib` for better path management in Python, ensuring compatibility with older versions of Python while enhancing code clarity.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* replace `os.path` with `pathlib` and stringify path objects for Python<=3.5\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating read_surfrad() function to accept HTTPS links\nDESCRIPTION: Enhancement to the read_surfrad() function to accept remote files with HTTPS links in addition to files on the SURFRAD FTP server.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npvlib.iotools.read_surfrad()\n```\n\n----------------------------------------\n\nTITLE: Calculating Spectral Mismatch Factors in Python\nDESCRIPTION: Demonstrates the use of the new spectral_factor_caballero function to estimate spectral mismatch modifiers.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.spectrum import spectral_factor_caballero\n\nairmass = 1.5\nprecipitable_water = 2.0\nspectral_factor = spectral_factor_caballero(airmass, precipitable_water)\n```\n\n----------------------------------------\n\nTITLE: Adding PSM3 File Reading and Parsing Functions - Python\nDESCRIPTION: Introduces functions to read and parse NSRDB PSM3 files with enhancements to handle file-like objects and a leap_day parameter. The functions streamline the process of obtaining and using solar radiation datasets from the NSRDB.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Added :py:func:`~pvlib.iotools.read_psm3` to read local NSRDB PSM3 files and\n  :py:func:`~pvlib.iotools.parse_psm3` to parse local NSRDB PSM3 file-like\n  objects. (:issue:`841`)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Looking Up Linke Turbidity in PVLib Python\nDESCRIPTION: Function to retrieve Linke turbidity values, which are used in clear sky models to account for atmospheric aerosols and water vapor.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/clearsky.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclearsky.lookup_linke_turbidity\n```\n\n----------------------------------------\n\nTITLE: Calculating Tracker Axis Tilt and Cross-Axis Tilt in Python\nDESCRIPTION: Example of using the new functions to calculate tracker axis tilt and cross-axis tilt angles.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.8.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.tracking import calc_axis_tilt, calc_cross_axis_tilt\n\naxis_tilt = calc_axis_tilt(...)\ncross_axis_tilt = calc_cross_axis_tilt(...)\n```\n\n----------------------------------------\n\nTITLE: Updating Testing Framework - Python\nDESCRIPTION: Updates and reorganizes the testing framework to improve maintainability and clarity, including creating subfolders for different modules within the test suite.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Change `pvlib/test` folder to `pvlib/tests` and reorganize tests into\n  subfolders, *e.g.*: created `pvlib/tests/iotools` (:pull:`859`)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Non-localized DatetimeIndex in Solar Position Calculations\nDESCRIPTION: This snippet illustrates how pvlib handles a non-localized DatetimeIndex when calculating solar position, assuming UTC time.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nindex = pd.date_range(start='1997-01-01 01:00', freq='1h', periods=24)\nindex\n\nsolar_position_notz = pvlib.solarposition.get_solarposition(index,\n```\n\n----------------------------------------\n\nTITLE: Extracting IV Curve Parameters using ASTM E1036 in Python\nDESCRIPTION: Shows how to use the new ASTM E1036 function for extracting IV curve parameters from measurement data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.4.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.ivtools.utils import astm_e1036\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib and Location Module in Python\nDESCRIPTION: This code imports the PVLib library and the Location class from the pvlib.location module, which are essential for solar calculations and location-based analysis.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pvlib\nfrom pvlib.location import Location\n```\n\n----------------------------------------\n\nTITLE: Checking Assigned DC Model in ModelChain in Python\nDESCRIPTION: Shows how to check which DC model is assigned to a ModelChain instance after its creation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npvwatts_system = PVSystem(\n    module_parameters={'pdc0': 240, 'gamma_pdc': -0.004},\n    inverter_parameters={'pdc0': 240},\n    temperature_model_parameters=temperature_model_parameters)\nmc = ModelChain(pvwatts_system, location,\n                aoi_model='no_loss', spectral_model='no_loss')\nmc.dc_model.__func__\n```\n\n----------------------------------------\n\nTITLE: Finding Time Zones using pytz in Python\nDESCRIPTION: This code shows how to retrieve a list of all valid time zones using pytz and how to filter them. It also demonstrates using the country_timezones function.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlen(pytz.all_timezones)\npytz.all_timezones[::20]\n\npytz.country_timezones('US')\n\nlist(filter(lambda x: 'GMT' in x, pytz.all_timezones))\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Clear Sky Modeling in Python\nDESCRIPTION: Imports necessary Python libraries including pandas, matplotlib, pvlib, and its submodules for clear sky modeling and data visualization.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport itertools\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pvlib\nfrom pvlib import clearsky, atmosphere, solarposition\nfrom pvlib.location import Location\nfrom pvlib.iotools import read_tmy3\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for PVLib Atmosphere Analysis in Python\nDESCRIPTION: This snippet imports necessary Python libraries for data manipulation, visualization, and PVLib functionality. It includes standard libraries like datetime and os, as well as third-party libraries like numpy, pandas, and matplotlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/atmosphere.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\n# built in python modules\nimport datetime\nimport logging\nimport os\nimport inspect\n\n# python add-ons\nimport numpy as np\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib Function Example\nDESCRIPTION: Example code snippet showing how to import and retrieve database from the SAM repository using pvlib.pvsystem.retrieve_sam function\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.11.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n~pvlib.pvsystem.retrieve_sam\n```\n\n----------------------------------------\n\nTITLE: Checking pvlib Version\nDESCRIPTION: Python code snippet to check the installed version of pvlib library\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/extras/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(pvlib.__version__)\n```\n\n----------------------------------------\n\nTITLE: Examining ModelChain pvwatts_dc Method in Python\nDESCRIPTION: Demonstrates how to inspect the pvwatts_dc method of a ModelChain instance. This method calculates DC power output using the PVWatts model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nmc.pvwatts_dc??\n```\n\n----------------------------------------\n\nTITLE: Using Native Python datetime Objects with pandas\nDESCRIPTION: This code demonstrates how to use native Python datetime.date and datetime.datetime objects with pandas Timestamp objects, including handling timezone awareness.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnaive_python_dt = datetime.datetime(2015, 6, 1, 0)\n\npd.Timestamp(naive_python_dt)\n\naware_python_dt = pytz.timezone('US/Mountain').localize(naive_python_dt)\n\npd.Timestamp(aware_python_dt)\n\nnaive_python_date = datetime.date(2015, 6, 1)\n\npd.Timestamp(naive_python_date)\n\npytz.timezone('US/Mountain').localize(naive_python_date)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for TMY Data Processing in Python\nDESCRIPTION: This snippet imports the necessary Python modules for working with TMY data, including built-in modules, data processing libraries, and visualization tools.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# built in python modules\nimport datetime\nimport os\nimport inspect\n\n# python add-ons\nimport numpy as np\nimport pandas as pd\n\n# plotting libraries\n%matplotlib inline\nimport matplotlib.pyplot as plt\ntry:\n    import seaborn as sns\nexcept ImportError:\n    pass\n\nimport pvlib\n```\n\n----------------------------------------\n\nTITLE: Referencing Irradiance Calculation Methods in PVLib Python\nDESCRIPTION: This code snippet uses autosummary to generate documentation links for three important methods in the PVSystem class: get_irradiance, get_aoi, and get_iam. These methods are crucial for calculating various aspects of solar irradiance in photovoltaic systems.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/class-methods.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: pvlib\n\nMethods for irradiance calculations\n-----------------------------------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   pvsystem.PVSystem.get_irradiance\n   pvsystem.PVSystem.get_aoi\n   pvsystem.PVSystem.get_iam\n```\n\n----------------------------------------\n\nTITLE: Retrieving SRML Data with Updated Function in Python\nDESCRIPTION: Shows how to use the new get_srml function to fetch multiple months of data from SRML.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.iotools import get_srml\n\ndata = get_srml(start='2023-01-01', end='2023-03-31', station='Burns')\n```\n\n----------------------------------------\n\nTITLE: Updating read_tmy3() function to handle midnight timestamps\nDESCRIPTION: Bug fix to allow read_tmy3() to accept midnight timestamps as either 24:00 (standard) or 00:00.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npvlib.iotools.read_tmy3()\n```\n\n----------------------------------------\n\nTITLE: Plotting Monthly Average Diffuse Irradiation\nDESCRIPTION: This code snippet generates a bar plot for the monthly average diffuse irradiation values, effectively summarizing the data for each month in a visually appealing way.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy_and_diffuse_irrad_models.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nax_monthly = monthly.plot(title='Monthly average diffuse irradiation', kind='bar')\nylabel = ax_monthly.set_ylabel('Irradiation [kWh]')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Time and Time Zone Handling in Python\nDESCRIPTION: This snippet demonstrates how to import the necessary libraries (datetime, pandas, and pytz) for working with time and time zones in Python and pvlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/timetimezones.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport pandas as pd\nimport pytz\n```\n\n----------------------------------------\n\nTITLE: Optimizing Polynomial Evaluation in Python\nDESCRIPTION: The pvlib.irradiance.disc function now uses Horner's Method to evaluate polynomials, potentially decreasing runtime by 20%.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.5.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npvlib.irradiance.disc()\n```\n\n----------------------------------------\n\nTITLE: PVLib Python Class Structure\nDESCRIPTION: Lists the main classes available in pvlib-python including Location, PVSystem, Array, FixedMount, SingleAxisTrackerMount, ModelChain, and ModelChainResult classes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/classes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlocation.Location\npvsystem.PVSystem\npvsystem.Array\npvsystem.FixedMount\npvsystem.SingleAxisTrackerMount\nmodelchain.ModelChain\nmodelchain.ModelChainResult\n```\n\n----------------------------------------\n\nTITLE: Adding calc_surface_orientation() function for single-axis tracker calculations\nDESCRIPTION: New function to calculate single-axis tracker surface_tilt and surface_azimuth from rotation angles.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npvlib.tracking.calc_surface_orientation()\n```\n\n----------------------------------------\n\nTITLE: Fixing sun_rise_set_transit_ephem() function for localized timezones\nDESCRIPTION: Bug fix for sun_rise_set_transit_ephem() to correctly handle localized timezones with large UTC offsets in recent versions of ephem.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npvlib.solarposition.sun_rise_set_transit_ephem()\n```\n\n----------------------------------------\n\nTITLE: Sphinx-Gallery Example Template in Python\nDESCRIPTION: Template for creating new examples in the documentation gallery using sphinx-gallery. Shows basic structure with matplotlib plotting.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/style_guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nPage Title\n==========\n\nA sentence describing the example.\n\"\"\"\n\n# %%\n# Explanatory text about the example, what it does, why it does it, etc.\n# Text in the comment block before the first line of code `import pvlib`\n# will be printed to the example's webpage.\n\nimport pvlib\nimport matplotlib.pyplot as plt\n\nplt.scatter([1, 2, 3], [4, 5, 6])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Enabling Vectorized Calculations in Python\nDESCRIPTION: The get_irradiance and get_irradiance_poa functions in pvlib.bifacial.infinite_sheds now support a 'vectorize' parameter for faster calculations with increased memory usage.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.5.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\npvlib.bifacial.infinite_sheds.get_irradiance(vectorize=True)\npvlib.bifacial.infinite_sheds.get_irradiance_poa(vectorize=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Transformer Loss Function in PVLib Python\nDESCRIPTION: This code snippet demonstrates how to import the simple_efficiency function from the transformer module in PVLib. This function is used to calculate losses in transformers using a simplified efficiency model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/transformer.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.transformer import simple_efficiency\n```\n\n----------------------------------------\n\nTITLE: Importing Soiling Functions from PVLib Python\nDESCRIPTION: This code snippet demonstrates how to import the hsu and kimber functions from the soiling module of PVLib Python. These functions are likely used for modeling soiling effects on photovoltaic systems.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/effects_on_pv_system_output/soiling.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.soiling import hsu, kimber\n```\n\n----------------------------------------\n\nTITLE: Examining ModelChain sapm Method in Python\nDESCRIPTION: Shows how to inspect the sapm method of a ModelChain instance. This method calculates DC power output using the Sandia Array Performance Model (SAPM).\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nmc.sapm??\n```\n\n----------------------------------------\n\nTITLE: Importing Soiling Module in Python\nDESCRIPTION: Example of importing the renamed soiling module (formerly losses) from pvlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.2.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib import soiling\n```\n\n----------------------------------------\n\nTITLE: Example Function Docstring in Python\nDESCRIPTION: Template for a function docstring in pvlib-python, demonstrating various sections including function summary, detailed description, version information, parameters, and returns. It also shows how to document different parameter types and units.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/style_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef example_function(poa_global, exponents, degree_symbol, time_ref='UT',\n                     optional_arg=None):\n    r\"\"\"\n    One-sentence summary of the function (no citations).\n\n    A longer description of the function. This can include citations\n    (references) to literature [1]_, websites [2]_, and other code elements\n    such as functions (:py:func:`pvlib.location.lookup_altitude`) and\n    classes (:py:class:`pvlib.location.Location`).\n\n    .. versionadded:: 0.0.1\n    There are many more purpose-specific directives, admonitions and such\n    available at `this link <admonitions>`_. E.g.: ``.. versionchanged::``,\n    ``.. deprecated::``,  ``.. note::`` and ``.. warning::``.\n\n    .. _admonitions: https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#admonitions-messages-and-warnings\n\n    Parameters\n    ----------\n    poa_global : numeric\n        Plane-of-array global irradiance, see :term:`poa_global`. [Wm⁻²].\n    exponents : array-like\n        A list of exponents. [x⁰¹²³⁴⁵⁶⁷⁸⁹⁻].\n    degree_symbol : pandas.Series or pandas.DataFrame\n        It's different from superscript zero. [°].\n    time_ref : ``'UT'`` or ``'TST'``, default: ``'UT'``\n        ``'UT'`` (universal time) or ``'TST'`` (True Solar Time).\n    optional_arg : integer, optional\n        A description of ``optional_arg``. [Unitless].\n\n        Specify a suitable datatype for each parameter. Other common\n        data types include ``str``, ``bool``, ``float``, ``numeric``\n        and ``pandas.DatetimeIndex``.\n\n    Returns\n    -------\n    name : numeric\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment with Conda\nDESCRIPTION: Commands for creating and configuring a conda environment for pvlib development with required dependencies\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name pvlibdev python pandas scipy\nconda activate pvlibdev\nconda install jupyter ipython matplotlib pytest flake8\n```\n\n----------------------------------------\n\nTITLE: Scaling Voltage, Current, and Power in PVLib Python\nDESCRIPTION: This function scales voltage, current, and power values for a PV system. It's typically used to adjust these parameters based on environmental conditions or system configurations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/pv_modeling/other.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npvsystem.scale_voltage_current_power\n```\n\n----------------------------------------\n\nTITLE: Import Location from pvlib Library\nDESCRIPTION: This snippet separately imports the Location class from pvlib, which is used to initialize geographic location objects for solar position calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pvlib\nfrom pvlib.location import Location\n```\n\n----------------------------------------\n\nTITLE: Accessing the Function of a ModelChain Component\nDESCRIPTION: Shows how to access the underlying function of a ModelChain component. This demonstrates that ModelChain uses Python's functools.partial to bind itself to user-supplied functions.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmc.dc_model.func\n```\n\n----------------------------------------\n\nTITLE: New Atmosphere Functions\nDESCRIPTION: New functions added for relative humidity and dew point temperature calculations\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.11.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n~pvlib.atmosphere.rh_from_tdew\n~pvlib.atmosphere.tdew_from_rh\n```\n\n----------------------------------------\n\nTITLE: Documenting Loss Model Functions in pvlib-python\nDESCRIPTION: This code snippet uses Sphinx's autosummary directive to generate documentation for two loss model functions in the pvlib.pvsystem module: combine_loss_factors and dc_ohms_from_percent.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/effects_on_pv_system_output/loss-models.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: pvlib\n\nLoss models\n-----------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   pvsystem.combine_loss_factors\n   pvsystem.dc_ohms_from_percent\n```\n\n----------------------------------------\n\nTITLE: Installing pvlib-python using Conda and Pip\nDESCRIPTION: Commands for installing pvlib-python using either conda package manager from conda-forge channel or pip package manager from PyPI. Includes options for installing with optional dependencies.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# get the package from the conda-forge conda channel\nconda create -n pvlib -c conda-forge pvlib; conda activate pvlib\n\n# get the package from the Python Package Index\npip install pvlib\n\n# get pvlib and optional dependencies from the Python Package Index\npip install pvlib[optional]  # on Mac:  pip install \"pvlib[optional]\"\n```\n\n----------------------------------------\n\nTITLE: Adding albedo input to PVSystem and Array get_irradiance() methods\nDESCRIPTION: Enhancement to make albedo available as an input to the get_irradiance() methods of PVSystem and Array classes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npvlib.pvsystem.PVSystem.get_irradiance()\n```\n\nLANGUAGE: Python\nCODE:\n```\npvlib.pvsystem.Array.get_irradiance()\n```\n\n----------------------------------------\n\nTITLE: Specifying time zones in pvlib-python\nDESCRIPTION: New method for specifying time zones in pvlib-python v0.1.0 using IANA Time Zone Database naming conventions or pytz.timezone objects. This replaces the previous method of using integer GMT offsets.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.1.0.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage (not provided in original text):\n# import pytz\n# timezone = pytz.timezone('America/New_York')\n# # or\n# timezone = 'America/New_York'\n```\n\n----------------------------------------\n\nTITLE: Using Hsu Soiling Function in Python\nDESCRIPTION: Example of using the renamed hsu function from the pvlib.soiling module.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.2.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.soiling import hsu\n```\n\n----------------------------------------\n\nTITLE: Using max_airmass parameter in disc function in Python\nDESCRIPTION: This snippet demonstrates the addition of the 'max_airmass' keyword argument to the disc function in the irradiance module. The default value is 12, consistent with the original paper describing the model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.irradiance import disc\n\ndisc(..., max_airmass=12)\n```\n\n----------------------------------------\n\nTITLE: Autosummary Generation for PVLib Shading Functions\nDESCRIPTION: This code snippet uses Sphinx's autosummary directive to generate documentation pages for various shading-related functions in the PVLib Python library. It specifies the output directory and lists the functions to be documented.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/effects_on_pv_system_output/shading.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/\n\n   shading.ground_angle\n   shading.masking_angle\n   shading.masking_angle_passias\n   shading.sky_diffuse_passias\n   shading.projected_solar_zenith_angle\n   shading.shaded_fraction1d\n   shading.direct_martinez\n```\n\n----------------------------------------\n\nTITLE: Installing pvlib-python Package\nDESCRIPTION: Commands to reinstall pvlib package after copying SPA files. This involves uninstalling the existing package and installing from the local directory.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/getting_started/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall pvlib\npip install .\n```\n\n----------------------------------------\n\nTITLE: Accepting Zero Series Resistance and Infinite Shunt Resistance in PV System Functions\nDESCRIPTION: API change allowing pvsystem.v_from_i and pvsystem.i_from_v functions to accept resistance_series = 0 and/or resistance_shunt = numpy.inf as inputs. This enables modeling of ideal devices in the single diode model.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.5.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvsystem.v_from_i(resistance_series=0, resistance_shunt=numpy.inf)\npvsystem.i_from_v(resistance_series=0, resistance_shunt=numpy.inf)\n```\n\n----------------------------------------\n\nTITLE: Using Location objects in pvlib-python\nDESCRIPTION: Change in how locations are represented in pvlib-python v0.1.0. Locations are now pvlib.location.Location objects instead of 'structs'. This provides a more structured and object-oriented approach to handling location data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.1.0.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage (not provided in original text):\n# location = pvlib.location.Location(latitude, longitude, altitude, name)\n```\n\n----------------------------------------\n\nTITLE: Updating get_total_irradiance() and spa_python() functions to raise errors\nDESCRIPTION: Bug fix to make get_total_irradiance() and spa_python() raise an error instead of silently ignoring unknown parameters.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\npvlib.irradiance.get_total_irradiance()\n```\n\nLANGUAGE: Python\nCODE:\n```\npvlib.solarposition.spa_python()\n```\n\n----------------------------------------\n\nTITLE: Using horizon parameter in pyephem and calc_time functions in Python\nDESCRIPTION: This snippet shows the addition of the 'horizon' keyword argument to the pyephem and calc_time functions in the solarposition module. The default value is '+0:00'.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.1.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.solarposition import pyephem, calc_time\n\npyephem(..., horizon='+0:00')\ncalc_time(..., horizon='+0:00')\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Related Functions\nDESCRIPTION: This reStructuredText directive summarizes additional functions related to ModelChain, specifically for getting orientation information.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_7\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.get_orientation\n```\n\n----------------------------------------\n\nTITLE: Building Cython Extension Setup\nDESCRIPTION: This shell command is used to compile the Cython code and create the Python extension for the solar position algorithm. It leverages the distutils for building the extension in-place.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/pvlib/spa_c_files/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python setup.py build_ext --inplace\n```\n\n----------------------------------------\n\nTITLE: Fixing PyEphem Solar Position Calculation\nDESCRIPTION: Bug fix for solarposition.get_solarposition when using the 'pyephem' method. This corrects the argument mismatch in the solarposition.pyephem call.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.5.1.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nsolarposition.get_solarposition(method='pyephem')\n```\n\n----------------------------------------\n\nTITLE: Accessing Klucher Model in irradiance.total_irrad (Python)\nDESCRIPTION: A bugfix for accessing the Klucher model in the total_irrad function. Both 'klucher' and 'klutcher' spellings will work for version 0.2.*, but the misspelled method will be removed in 0.3.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.2.2.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nirradiance.total_irrad(..., model='klucher')  # Correct spelling\nirradiance.total_irrad(..., model='klutcher')  # Misspelled, but works in 0.2.*\n```\n\n----------------------------------------\n\nTITLE: Using Updated ModelChain Factory Methods in Python\nDESCRIPTION: Example of using the new factory methods to create ModelChain objects configured for PVWatts or SAPM modeling paradigms.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.8.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.modelchain import ModelChain\n\npvwatts_model = ModelChain.with_pvwatts()\nsapm_model = ModelChain.with_sapm()\n```\n\n----------------------------------------\n\nTITLE: Updating PVSystem.sapm Docstring in Python\nDESCRIPTION: Removal of DataFrame option for 'module' input in pvsystem.sapm docstring due to untested functionality causing errors.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef sapm(module):\n    \"\"\"SAPM model for PV modules.\n    \n    Note: DataFrame option for 'module' input has been removed.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Current Module in RestructuredText for PVLib Python\nDESCRIPTION: This directive sets the current module context for the documentation to 'pvlib'. It ensures that all subsequent references in the document are relative to this module.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pvlib\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib Solar Position Module\nDESCRIPTION: This snippet shows how to import the current module for solar position calculations in PVLib Python. It sets up the namespace for accessing the solar position functions and classes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/solarposition.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: pvlib\n```\n\n----------------------------------------\n\nTITLE: Improving error messages for detect_clearsky() and prilliman() functions\nDESCRIPTION: Enhancement to improve error messages about uneven time intervals for the detect_clearsky() and prilliman() functions.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\npvlib.clearsky.detect_clearsky()\n```\n\nLANGUAGE: Python\nCODE:\n```\npvlib.temperature.prilliman()\n```\n\n----------------------------------------\n\nTITLE: Using logging module in tracking.singleaxis (Python)\nDESCRIPTION: Optimization of logging in the singleaxis function by replacing format calls with args, resulting in a 5x speed increase.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.2.2.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\n\nlogging.info(\"Some message with %s\", args)  # Optimized\n# Instead of:\n# logging.info(\"Some message with {}\".format(args))  # Slower\n```\n\n----------------------------------------\n\nTITLE: Detecting Clear Sky Periods Using PVLib's detect_clearsky Function in Python\nDESCRIPTION: Applies the clearsky detection algorithm to the synthetic GHI data and generates a binary time series indicating clear or cloudy periods. This demonstrates the core function of the clearsky detection module.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclear_samples = clearsky.detect_clearsky(ghi, cs['ghi'])\n\nfig, ax = plt.subplots()\n\nclear_samples.astype(int).plot();\n\n@savefig detect-clear-detected.png width=10in\nax.set_ylabel('Clear (1) or Cloudy (0)');\n\n@suppress\nplt.close();\n```\n\n----------------------------------------\n\nTITLE: Locating pvlib Installation Directory in Python\nDESCRIPTION: This code snippet finds the absolute file path to the pvlib installation directory, which is used to locate bundled TMY data files.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/tmy.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Find the absolute file path to your pvlib installation\npvlib_abspath = os.path.dirname(os.path.abspath(inspect.getfile(pvlib)))\n```\n\n----------------------------------------\n\nTITLE: Defining Glossary Terms in ReStructuredText\nDESCRIPTION: This code snippet demonstrates how to define glossary terms in ReStructuredText format. It includes various solar energy and meteorological terms with their explanations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/extras/nomenclature.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. glossary::\n\n    airmass\n        Airmass\n    \n    airmass_absolute\n        Absolute airmass\n    \n    airmass_relative\n        Relative airmass\n    \n    albedo\n        Ratio of reflected solar irradiance to global horizontal irradiance\n        [unitless]\n    \n    aoi\n        Angle of incidence. Angle between the surface normal vector and the\n        vector pointing towards the sun's center\n    \n    aoi_projection\n        cos(aoi)\n\n    ape\n        Average photon energy\n\n    apparent_zenith\n        Refraction-corrected solar zenith angle in degrees\n\n    bhi\n        Beam/direct horizontal irradiance\n\n    dhi\n        Diffuse horizontal irradiance\n\n    dni\n        Direct normal irradiance [Wm⁻²]. Irradiance received per unit area by a\n        surface perpendicular (normal) to the sun's rays that propagate in a\n        straight line from the sun.\n\n    dni_clear\n        Clear sky direct normal irradiance\n\n    dni_extra\n        Direct normal irradiance at top of atmosphere (extraterrestrial)\n\n    effective_irradiance\n        Effective irradiance\n\n    eta_inv\n        Inverter efficiency\n\n    eta_inv_nom\n        Nominal inverter efficiency\n\n    eta_inv_ref\n        Reference inverter efficiency\n\n    g_poa_effective\n        Broadband plane of array effective irradiance\n\n    gamma_pdc\n        Module temperature coefficient. Typically in units of 1/C.\n\n    ghi\n        Global horizontal irradiance\n\n    ghi_clear\n        Clearsky global horizontal irradiance [Wm⁻²]\n\n    ghi_extra\n        Horizontal irradiance at top of atmosphere (extraterrestrial)\n\n    gri\n        Ground-reflected irradiance\n\n    i_sc\n        Short circuit module current\n\n    i_x, i_xx\n        Sandia Array Performance Model IV curve parameters\n\n    latitude\n        Latitude\n\n    longitude\n        Longitude\n\n    pac, ac\n        AC power\n\n    pdc, dc\n        DC power\n\n    pdc0\n        Nameplate DC rating\n\n    photocurrent\n        Photocurrent\n\n    poa_diffuse\n        Total diffuse irradiance in plane [Wm⁻²]. Sum of ground and sky diffuse\n        components of global irradiance.\n\n    poa_direct\n        Direct/beam irradiance in plane [Wm⁻²].\n\n    poa_global\n        Global irradiance in plane.  Sum of diffuse and beam projection [Wm⁻²].\n\n    poa_ground_diffuse\n        In plane ground reflected irradiance [Wm⁻²].\n\n    poa_sky_diffuse\n        Diffuse irradiance in plane from scattered light in the atmosphere\n        (without ground reflected irradiance) [Wm⁻²].\n\n    precipitable_water\n        Total precipitable water contained in a column of unit cross section\n        from earth to top of atmosphere\n\n    pressure\n        Atmospheric pressure\n\n    relative_humidity\n        Relative humidity\n\n    resistance_series\n        Series resistance\n\n    resistance_shunt\n        Shunt resistance\n\n    saturation_current\n        Diode saturation current\n\n    solar_azimuth\n        Azimuth angle of the sun in degrees East of North\n\n    solar_zenith\n        Zenith angle of the sun in degrees\n\n    spectra\n    spectra_components\n        Spectral irradiance (components) [Wm⁻²nm⁻¹]. The amount of energy\n        incident on a unit area per unit time and per unit\n        wavelength. As with broadband irradiance, global spectral irradiance\n        is composed of direct and diffuse components.\n    \n    surface_azimuth\n        Azimuth angle of the surface\n\n    surface_tilt\n        Panel tilt from horizontal [°]. For example, a surface facing up = 0°,\n        surface facing horizon = 90°.\n\n    temp_air\n        Temperature of the air\n\n    temp_cell\n        Temperature of the cell\n\n    temp_dew\n        Dewpoint temperature\n\n    temp_module\n        Temperature of the module\n\n    tz\n        Timezone\n\n    v_mp, i_mp, p_mp\n        Module voltage, current, power at the maximum power point\n\n    v_oc\n        Open circuit module voltage\n\n    wind_direction\n        Wind direction\n\n    wind_speed\n        Wind speed\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for PV Modeling in pvlib-python\nDESCRIPTION: This RST (reStructuredText) snippet defines the documentation structure for PV modeling components of the pvlib-python package. It includes module definition, autosummary for the PVSystem class, and a table of contents for related topics.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/pv_modeling/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\nPV Modeling\n===========\n\nClasses\n-------\n\nThe :py:class:`~pvsystem.PVSystem` class provides many methods that\nwrap the functions listed below. See its documentation for details.\n\n.. autosummary::\n   :toctree: ../generated/\n\n   pvsystem.PVSystem\n\n\n.. toctree::\n   :maxdepth: 2\n\n   iam\n   temperature\n   sdm\n   inverter\n   system_models\n   parameters\n   other\n```\n\n----------------------------------------\n\nTITLE: Implementing PVUSA Power Model in Python\nDESCRIPTION: Defines the PVUSA power equation which calculates system power based on plane of array irradiance, wind speed, and temperature. The model uses four empirically derived parameters (a, b, c, d) to determine the power output.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/modelchain.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef pvusa(poa_global, wind_speed, temp_air, a, b, c, d):\n    \"\"\"\n    Calculates system power according to the PVUSA equation\n    P = I * (a + b*I + c*W + d*T)\n    where\n    P is the output power,\n    I is the plane of array irradiance,\n    W is the wind speed, and\n    T is the temperature\n    a, b, c, d are empirically derived parameters.\n    \"\"\"\n    return poa_global * (a + b*poa_global + c*wind_speed + d*temp_air)\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameter with Units in RST\nDESCRIPTION: Example of how to document a parameter with units in reStructuredText format for pvlib-python. It demonstrates the use of unicode superscripts and linking to the nomenclature section.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/style_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ndni : numeric\n    Direct normal irradiance, see :term:`dni`. [Wm⁻²]\n```\n\n----------------------------------------\n\nTITLE: Configuring PVSystem Losses in Python\nDESCRIPTION: Example of setting custom loss parameters on a PVSystem object for use in ModelChain calculations, using the new losses_parameters attribute.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib import pvsystem\n\nsystem = pvsystem.PVSystem()\nsystem.losses_parameters = {\n    'soiling': 2,\n    'shading': 3,\n    'snow': 0,\n    'mismatch': 2,\n    'wiring': 2,\n    'connections': 0.5,\n    'lid': 1.5,\n    'nameplate_rating': 1,\n    'age': 0,\n    'availability': 3\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SAM Data in PVLib Python\nDESCRIPTION: This function retrieves data from the System Advisor Model (SAM) database. It's likely used to access predefined PV system parameters or characteristics for modeling and simulation purposes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/pv_modeling/other.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvsystem.retrieve_sam\n```\n\n----------------------------------------\n\nTITLE: Referencing PVLib Class in Python\nDESCRIPTION: Example of how to reference the 'NDFD' class from the PVLib forecast module in Python documentation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n:py:class:`~pvlib.forecast.NDFD`\n```\n\n----------------------------------------\n\nTITLE: Referencing PVLib Scaling Functions in reStructuredText\nDESCRIPTION: This code snippet defines the structure of scaling module documentation in reStructuredText format, listing available functions for manipulating irradiance data for temporal or spatial considerations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/scaling.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\nScaling\n=======\n\nMethods for manipulating irradiance for temporal or spatial considerations\n\n.. autosummary::\n   :toctree: generated/\n\n   scaling.wvm\n   scaling.latlon_to_xy\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Properties\nDESCRIPTION: This reStructuredText directive summarizes the properties of ModelChain that serve as aliases for specific modeling functions, covering various aspects of PV system modeling.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain.dc_model\n   modelchain.ModelChain.ac_model\n   modelchain.ModelChain.aoi_model\n   modelchain.ModelChain.spectral_model\n   modelchain.ModelChain.temperature_model\n   modelchain.ModelChain.dc_ohmic_model\n   modelchain.ModelChain.losses_model\n   modelchain.ModelChain.effective_irradiance_model\n```\n\n----------------------------------------\n\nTITLE: Simple String Concatenation Example in Python\nDESCRIPTION: Basic function implementation showing string concatenation returning 'Something'\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/style_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\na = \"Some\"\nb = \"thing\"\nreturn a + b\n```\n\n----------------------------------------\n\nTITLE: Importing New Temperature Model Functions in Python\nDESCRIPTION: New class and functions for translating module temperature model parameters, including GenericLinearModel and generic_linear.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.temperature import GenericLinearModel, generic_linear\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoSummary Documentation for PVLib Irradiance Models\nDESCRIPTION: ReStructuredText documentation defining the available irradiance calculation and transposition model functions in the pvlib.irradiance module. Includes functions for total irradiance, sky diffuse calculations, and various transposition models.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/transposition.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\nTransposition models\n--------------------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   irradiance.get_total_irradiance\n   irradiance.get_sky_diffuse\n   irradiance.isotropic\n   irradiance.perez\n   irradiance.perez_driesse\n   irradiance.haydavies\n   irradiance.klucher\n   irradiance.reindl\n   irradiance.king\n   irradiance.ghi_from_poa_driesse_2023\n```\n\n----------------------------------------\n\nTITLE: Displaying Weather Measurement Data in CSV Format for PVLIB Python\nDESCRIPTION: A dataset of weather measurements taken at minute intervals, containing timestamp information (year, day, time), radiation measurements, temperature readings in Celsius, humidity percentage, atmospheric pressure, and wind information (speed and direction). Values of -7999.0 appear to represent missing or invalid data points.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,952,959.9789999999999,63.8361,649.625,639.0880000000001,-7999.0,-7999.0,-7999.0,22.71,13.31,20.46,41.92,928.4630000000001,2.0,0.34600000000000003,3.95\n0,2018,291,953,961.472,63.8359,652.49,641.874,-7999.0,-7999.0,-7999.0,22.73,13.31,20.56,42.01,928.455,1.6469999999999998,298.8,4.7\n0,2018,291,954,962.488,63.8358,655.128,644.403,-7999.0,-7999.0,-7999.0,22.75,13.31,20.64,41.76,928.4639999999999,1.9069999999999998,344.6,4.7\n0,2018,291,955,963.252,63.8356,657.482,646.807,-7999.0,-7999.0,-7999.0,22.78,13.31,20.7,41.54,928.459,2.312,13.29,4.7\n0,2018,291,956,963.993,63.8355,659.818,649.073,-7999.0,-7999.0,-7999.0,22.8,13.31,20.69,41.11,928.422,2.025,333.3,3.95\n0,2018,291,957,964.3589999999999,63.8353,662.1030000000001,651.373,-7999.0,-7999.0,-7999.0,22.83,13.31,20.69,40.83,928.448,2.55,308.1,6.95\n0,2018,291,958,964.943,63.8352,664.6619999999999,653.686,-7999.0,-7999.0,-7999.0,22.84,13.31,20.72,41.08,928.426,2.95,301.4,6.95\n0,2018,291,959,965.39,63.8352,666.77,655.8330000000001,-7999.0,-7999.0,-7999.0,22.87,13.31,20.7,40.81,928.4169999999999,3.037,310.2,4.7\n0,2018,291,1000,965.88,63.8832,669.2360000000001,658.071,-7999.0,-7999.0,-7999.0,22.9,13.31,20.68,40.97,928.432,2.074,314.8,4.7\n0,2018,291,1001,966.076,64.5144,671.315,660.288,-7999.0,-7999.0,-7999.0,22.92,13.31,20.7,40.54,928.383,3.662,320.6,5.45\n0,2018,291,1002,967.122,64.5563,673.829,662.794,-7999.0,-7999.0,-7999.0,22.95,13.31,20.67,40.57,928.3689999999999,3.487,314.2,6.2\n0,2018,291,1003,967.9069999999999,64.5562,676.3380000000001,665.158,-7999.0,-7999.0,-7999.0,22.96,13.31,20.66,40.74,928.37,4.3,306.0,6.2\n0,2018,291,1004,968.916,64.5561,678.686,667.6410000000001,-7999.0,-7999.0,-7999.0,22.99,13.31,20.61,41.05,928.3489999999999,3.812,303.0,6.2\n0,2018,291,1005,969.051,64.5559,680.663,669.655,-299.8,-246.8,-246.8,23.01,13.31,20.5,41.3,928.3610000000001,2.612,303.4,4.7\n0,2018,291,1006,968.8989999999999,64.5559,682.828,671.7689999999999,-292.9,-246.8,-246.8,23.04,13.31,20.59,41.49,928.3860000000001,2.662,302.9,4.7\n0,2018,291,1007,969.622,64.5799,685.2510000000001,673.9960000000001,-276.1,-246.8,-246.8,23.06,13.31,20.67,41.07,928.378,2.65,335.2,5.45\n0,2018,291,1008,970.784,64.604,687.921,676.492,-273.7,-246.9,-246.8,23.07,13.3,20.66,41.32,928.3480000000001,3.512,311.2,6.2\n0,2018,291,1009,971.5269999999999,64.5618,690.448,678.9019999999999,-287.9,-246.9,-246.8,23.09,13.3,20.73,40.94,928.3739999999999,3.562,319.8,6.2\n0,2018,291,1010,971.918,65.0127,692.5269999999999,681.0160000000001,-295.6,-246.8,-246.8,23.12,13.31,20.73,40.95,928.355,2.275,8.93,5.45\n0,2018,291,1011,971.926,65.2532,694.414,682.8330000000001,-304.1,-246.9,-246.8,23.13,13.3,20.76,41.3,928.3439999999999,3.125,290.9,6.95\n0,2018,291,1012,973.5010000000001,64.628,697.485,685.757,-288.2,-246.8,-246.8,23.15,13.3,20.77,41.14,928.3710000000001,2.3369999999999997,297.3,3.95\n0,2018,291,1013,973.9839999999999,64.61,699.6189999999999,687.819,-277.7,-246.8,-246.8,23.18,13.3,20.82,40.84,928.3389999999999,3.887,317.7,6.95\n0,2018,291,1014,973.9689999999999,65.0187,701.314,689.549,-299.6,-246.8,-246.8,23.18,13.3,20.83,41.51,928.3480000000001,3.475,300.9,7.7\n0,2018,291,1015,975.118,64.7842,704.2239999999999,692.337,-7999.0,-7999.0,-7999.0,23.2,13.3,20.94,41.64,928.3739999999999,2.193,273.7,4.7\n0,2018,291,1016,975.422,64.7903,706.198,694.171,-274.2,-246.8,-246.8,23.23,13.3,21.05,40.85,928.365,2.722,286.4,5.45\n0,2018,291,1017,975.755,64.7543,708.159,696.067,-285.6,-246.8,-246.8,23.24,13.3,21.1,40.88,928.367,2.575,315.2,4.7\n0,2018,291,1018,975.8860000000001,64.7123,710.078,697.9019999999999,-247.4,-246.9,-246.8,23.26,13.3,21.23,40.4,928.3860000000001,2.634,306.2,6.2\n0,2018,291,1019,976.393,65.067,711.9780000000001,699.765,-256.1,-246.8,-246.8,23.29,13.3,21.27,39.86,928.3789999999999,3.025,315.9,5.45\n0,2018,291,1020,976.581,65.2774,713.7660000000001,701.53,-262.8,-246.8,-246.8,23.3,13.3,21.26,40.07,928.3810000000001,2.072,294.9,6.2\n0,2018,291,1021,977.057,65.2773,715.8689999999999,703.563,-7999.0,-7999.0,-7999.0,23.32,13.3,21.3,39.98,928.39,3.33,309.6,6.95\n0,2018,291,1022,977.3810000000001,65.2773,717.78,705.3560000000001,-255.2,-246.8,-246.8,23.34,13.3,21.28,39.54,928.3860000000001,3.5,308.5,5.45\n0,2018,291,1023,976.908,65.2775,718.8489999999999,706.5060000000001,-265.0,-246.8,-246.8,23.36,13.3,21.22,39.47,928.332,3.762,302.9,5.45\n0,2018,291,1024,977.193,65.3323,720.7310000000001,708.331,-269.3,-246.8,-246.8,23.38,13.3,21.18,39.85,928.3510000000001,2.575,349.3,4.7\n0,2018,291,1025,977.8919999999999,65.8802,723.133,710.505,-279.8,-246.9,-246.8,23.41,13.3,21.24,39.75,928.355,1.8219999999999998,5.04,5.45\n0,2018,291,1026,978.967,66.0003,725.568,712.703,-275.0,-246.8,-246.8,23.41,13.3,21.32,39.75,928.34,2.575,289.3,5.45\n0,2018,291,1027,979.326,65.9946,727.564,714.643,-271.4,-246.8,-246.8,23.44,13.3,21.45,39.7,928.3539999999999,1.2329999999999999,275.3,4.7\n0,2018,291,1028,978.9739999999999,65.6411,729.087,716.135,-273.2,-246.9,-246.8,23.47,13.3,21.6,38.79,928.3489999999999,2.02,297.6,4.7\n0,2018,291,1029,979.565,65.5694,730.8430000000001,717.738,-277.4,-221.7,-246.8,23.48,13.3,21.53,38.56,928.308,2.875,298.4,4.7\n0,2018,291,1030,979.3,66.0018,732.307,719.123,-260.7,-246.8,-246.8,23.51,13.3,21.52,38.86,928.326,2.3369999999999997,313.7,4.7\n0,2018,291,1031,980.061,66.0015,734.529,721.3639999999999,-277.1,-246.9,-246.8,23.52,13.3,21.66,38.93,928.337,1.3619999999999999,316.1,2.45\n0,2018,291,1032,981.7539999999999,66.0012,737.2639999999999,723.88,-292.4,-246.8,-246.8,23.55,13.3,21.83,38.59,928.312,1.367,137.5,2.45\n0,2018,291,1033,982.123,66.0017,738.86,725.439,-270.3,-246.8,-246.8,23.58,13.3,21.87,38.47,928.31,1.881,261.8,4.7\n0,2018,291,1034,982.0169999999999,66.0014,740.202,726.738,-7999.0,-7999.0,-7999.0,23.6,13.3,21.86,38.18,928.31,3.8369999999999997,279.5,7.7\n0,2018,291,1035,982.3989999999999,66.0013,741.563,728.182,-7999.0,-7999.0,-7999.0,23.64,13.3,21.7,39.01,928.284,3.137,275.5,6.2\n0,2018,291,1036,983.046,66.0016,743.6439999999999,730.253,-240.1,-246.8,-235.9,23.64,13.3,21.65,38.89,928.305,2.0869999999999997,301.2,3.95\n0,2018,291,1037,982.845,66.0012,745.385,731.939,-271.6,-246.8,-246.8,23.68,13.3,21.75,38.9,928.325,1.798,251.2,4.7\n0,2018,291,1038,983.362,66.001,747.221,733.5419999999999,-262.5,-246.8,-264.2,23.7,13.3,21.84,38.47,928.31,2.347,264.2,3.95\n0,2018,291,1039,983.237,66.0133,748.513,735.0310000000001,-269.3,-246.9,-246.8,23.73,13.29,21.89,38.69,928.297,1.008,214.0,2.45\n0,2018,291,1040,983.804,66.2189,750.6419999999999,736.924,-254.8,-246.9,-246.8,23.75,13.29,22.05,39.32,928.299,0.9359999999999999,319.6,3.95\n0,2018,291,1041,984.755,66.5568,752.568,738.715,-254.0,-246.9,-246.8,23.78,13.29,22.11,38.42,928.2330000000001,2.45,134.7,5.45\n0,2018,291,1042,985.9780000000001,66.7253,754.284,740.602,-255.1,-246.9,-246.8,23.81,13.29,21.95,38.21,928.194,4.8,316.9,9.2\n0,2018,291,1043,987.11,66.7256,756.015,742.485,-260.5,-246.8,-246.8,23.84,13.29,21.7,38.77,928.209,4.6,309.7,8.45\n0,2018,291,1044,986.883,66.8767,757.4910000000001,744.03,-7999.0,-7999.0,-7999.0,23.87,13.29,21.7,39.01,928.25,3.159,5.902,7.7\n0,2018,291,1045,986.225,67.2915,758.842,745.195,-266.5,-246.9,-246.8,23.88,13.29,21.7,39.25,928.2289999999999,2.112,113.4,3.2\n0,2018,291,1046,986.096,67.4483,760.372,746.607,-7999.0,-7999.0,-7999.0,23.92,13.29,21.75,39.11,928.217,2.3,6.042000000000001,4.7\n0,2018,291,1047,986.2710000000001,67.4489,761.8889999999999,748.013,-7999.0,-7999.0,-7999.0,23.93,13.29,21.67,39.17,928.23,2.012,105.3,3.95\n0,2018,291,1048,986.887,67.4496,763.87,749.8939999999999,-7999.0,-7999.0,-7999.0,23.97,13.29,21.75,39.32,928.2280000000001,2.309,23.0,4.7\n0,2018,291,1049,986.7660000000001,67.4442,764.962,750.992,-7999.0,-7999.0,-7999.0,23.99,13.29,21.78,38.79,928.178,2.5869999999999997,63.92,5.45\n0,2018,291,1050,987.2130000000001,67.4506,766.2560000000001,752.293,-7999.0,-7999.0,-7999.0,24.0,13.29,21.72,39.29,928.17,2.8,90.1,4.7\n0,2018,291,1051,988.063,67.4509,768.172,754.1189999999999,-7999.0,-7999.0,-7999.0,24.03,13.29,21.71,39.23,928.207,2.412,90.4,6.2\n0,2018,291,1052,989.015,67.4513,770.414,756.2710000000001,-7999.0,-7999.0,-7999.0,24.05,13.29,21.78,38.92,928.2260000000001,2.5,102.5,6.2\n0,2018,291,1053,989.62,67.4516,772.04,757.88,-274.2,-246.8,-246.8,24.08,13.29,21.76,38.77,928.212,2.812,355.6,4.7\n0,2018,291,1054,989.687,67.4518,773.3989999999999,759.1669999999999,-278.2,-246.8,-246.8,24.1,13.29,21.79,39.02,928.193,2.412,86.3,5.45\n0,2018,291,1055,989.034,67.4516,774.143,759.971,-269.8,-246.9,-246.8,24.11,13.29,21.85,38.72,928.1489999999999,2.562,109.4,5.45\n0,2018,291,1056,989.3510000000001,67.4511,775.654,761.279,-275.1,-246.8,-246.8,24.17,13.29,21.88,38.86,928.105,3.187,53.96,5.45\n0,2018,291,1057,989.9630000000001,67.5536,777.138,762.7339999999999,-274.5,-246.8,-246.8,24.19,13.29,21.84,38.7,928.13,3.537,13.18,6.95\n0,2018,291,1058,989.937,67.4516,778.337,763.8610000000001,-7999.0,-7999.0,-7999.0,24.19,13.29,21.81,38.78,928.163,2.537,311.1,5.45\n0,2018,291,1059,990.041,67.4518,779.678,765.1039999999999,-272.3,-246.8,-246.8,24.2,13.29,21.86,38.63,928.125,3.137,338.3,6.2\n0,2018,291,1100,990.312,67.452,781.308,766.563,-267.4,-246.8,-246.8,24.22,13.29,21.96,38.68,928.137,2.362,63.99,5.45\n0,2018,291,1101,990.698,67.4522,782.939,768.056,-270.9,-246.9,-246.8,24.23,13.29,22.1,38.52,928.172,2.2,333.3,4.7\n0,2018,291,1102,990.618,67.4822,784.0980000000001,769.192,-275.3,-246.9,-246.8,24.27,13.29,22.23,38.1,928.172,2.29,334.8,4.7\n0,2018,291,1103,989.808,67.4521,784.763,769.563,-283.4,-246.9,-246.8,24.3,13.29,22.32,37.61,928.165,3.25,301.2,6.2\n0,2018,291,1104,990.48,67.4521,785.8919999999999,770.7289999999999,-7999.0,-7999.0,-7999.0,24.33,13.29,22.34,37.2,928.1569999999999,3.637,317.3,6.2\n0,2018,291,1105,992.395,67.4522,788.0260000000001,772.74,-7999.0,-7999.0,-7999.0,24.36,13.29,22.25,37.81,928.189,2.512,302.7,5.45\n0,2018,291,1106,993.284,67.4523,789.748,774.477,-7999.0,-7999.0,-7999.0,24.37,13.29,22.36,38.16,928.143,2.262,313.3,5.45\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Inference Methods\nDESCRIPTION: This reStructuredText directive summarizes the inference methods of ModelChain that automatically determine which models should be used based on the associated PVSystem object.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_6\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain.infer_dc_model\n   modelchain.ModelChain.infer_ac_model\n   modelchain.ModelChain.infer_aoi_model\n   modelchain.ModelChain.infer_temperature_model\n   modelchain.ModelChain.infer_losses_model\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation for PVLib Tracking Functions\nDESCRIPTION: reStructuredText documentation defining the tracking module's public API including functions for single-axis tracking and tilt calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/tracking.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\nTracking\n========\n\n.. autosummary::\n   :toctree: generated/\n\n   tracking.singleaxis\n   tracking.calc_axis_tilt\n   tracking.calc_cross_axis_tilt\n   tracking.calc_surface_orientation\n```\n\n----------------------------------------\n\nTITLE: Function References in Python\nDESCRIPTION: References to various Python functions and classes modified or added in this release, including solar position calculations, irradiance models, and data retrieval functions.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvlib.iotools.get_solargis\npvlib.shading.projected_solar_zenith_angle\npvlib.iotools.get_solrad\npvlib.iotools.read_solrad\npvlib.modelchain.ModelChain\npvlib.solarposition.get_solarposition\npvlib.solarposition.spa_python\npvlib.solarposition.sun_rise_set_transit_spa\npvlib.solarposition.nrel_earthsun_distance\npvlib.solarposition.hour_angle\npvlib.solarposition.sun_rise_set_transit_geometric\npvlib.irradiance.ghi_from_poa_driesse_2023\npvlib.irradiance.get_ground_diffuse\n```\n\n----------------------------------------\n\nTITLE: Listing Incident Angle Modifier Functions in pvlib Using RST Directives\nDESCRIPTION: This RST (reStructuredText) snippet defines the autosummary table for the incident angle modifier (IAM) functions available in the pvlib Python library. It includes various models like physical, ASHRAE, Martin-Ruiz, SAPM, and utility functions for diffuse radiation, interpolation, and conversion.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/pv_modeling/iam.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\n\nIncident angle modifiers\n------------------------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   iam.physical\n   iam.ashrae\n   iam.martin_ruiz\n   iam.martin_ruiz_diffuse\n   iam.sapm\n   iam.interp\n   iam.marion_diffuse\n   iam.marion_integrate\n   iam.schlick\n   iam.schlick_diffuse\n   iam.convert\n   iam.fit\n```\n\n----------------------------------------\n\nTITLE: Minute-by-Minute Weather Station Data (CSV Format)\nDESCRIPTION: Tabular weather station data collected at 1-minute intervals on day 291 of 2018. Each row contains timestamp information and various meteorological measurements including pressure, temperature, humidity, and wind data. The value -7999.0 appears to be used as a placeholder for missing measurements.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,1107,993.5160000000001,67.4523,790.446,775.21,-7999.0,-7999.0,-7999.0,24.4,13.29,22.4,37.57,928.1110000000001,2.412,74.25,4.7\n0,2018,291,1108,993.525,67.4524,790.915,775.77,-261.4,-246.8,-264.2,24.42,13.29,22.2,37.46,928.105,2.662,22.89,4.7\n0,2018,291,1109,993.7719999999999,67.4525,792.1439999999999,776.834,-7999.0,-7999.0,-7999.0,24.44,13.29,22.04,38.09,928.082,2.237,63.13,3.95\n0,2018,291,1110,993.8960000000001,67.4526,793.168,777.915,-7999.0,-7999.0,-7999.0,24.47,13.29,22.01,38.11,928.067,2.725,82.3,5.45\n0,2018,291,1111,994.033,67.5066,794.438,779.143,-7999.0,-7999.0,-7999.0,24.48,13.28,22.0,38.41,928.078,2.237,128.1,4.7\n0,2018,291,1112,994.029,68.0414,795.675,780.299,-7999.0,-7999.0,-7999.0,24.5,13.28,22.06,37.98,928.091,2.2840000000000003,85.2,5.45\n0,2018,291,1113,993.832,68.1736,796.66,781.143,-7999.0,-7999.0,-7999.0,24.52,13.28,22.07,38.52,928.087,2.487,119.3,3.95\n0,2018,291,1114,993.9760000000001,68.1735,797.862,782.3539999999999,-7999.0,-7999.0,-7999.0,24.54,13.28,22.22,38.33,928.081,2.024,117.2,5.45\n0,2018,291,1115,994.337,68.1735,799.2810000000001,783.3760000000001,-7999.0,-7999.0,-7999.0,24.57,13.28,22.27,38.01,928.077,1.4469999999999998,97.9,2.45\n0,2018,291,1116,994.0989999999999,68.1735,800.206,784.291,-7999.0,-7999.0,-7999.0,24.59,13.28,22.33,37.99,928.077,1.79,85.8,4.7\n0,2018,291,1117,994.454,68.1736,801.2180000000001,785.1310000000001,-7999.0,-7999.0,-7999.0,24.6,13.28,22.37,37.6,928.073,1.962,354.4,3.95\n0,2018,291,1118,994.238,68.2759,801.799,785.852,-7999.0,-7999.0,-7999.0,24.62,13.28,22.39,37.69,928.052,2.025,315.8,4.7\n0,2018,291,1119,994.304,68.1798,802.7560000000001,786.538,-7999.0,-7999.0,-7999.0,24.65,13.28,22.45,37.43,928.039,2.262,113.3,3.95\n0,2018,291,1120,995.44,67.6328,803.7739999999999,787.659,-7999.0,-7999.0,-7999.0,24.67,13.28,22.35,37.24,928.033,2.912,353.4,6.2\n0,2018,291,1121,996.12,67.452,804.732,788.665,-7999.0,-7999.0,-7999.0,24.69,13.28,22.25,37.69,927.988,2.425,53.42,3.95\n0,2018,291,1122,996.2260000000001,67.4518,805.8580000000001,789.817,-7999.0,-7999.0,-7999.0,24.72,13.28,22.2,37.36,928.069,3.562,317.5,6.2\n0,2018,291,1123,996.6289999999999,67.4517,806.825,790.696,-7999.0,-7999.0,-7999.0,24.73,13.28,22.14,37.69,928.02,2.525,70.11,4.7\n0,2018,291,1124,997.177,67.4877,808.0210000000001,791.758,-7999.0,-7999.0,-7999.0,24.75,13.28,22.17,38.01,927.9739999999999,1.712,99.3,2.45\n0,2018,291,1125,996.816,68.1611,809.0139999999999,792.6489999999999,-7999.0,-7999.0,-7999.0,24.78,13.28,22.29,37.7,927.934,2.262,86.4,4.7\n0,2018,291,1126,996.5139999999999,68.1732,809.6560000000001,793.039,-7999.0,-7999.0,-7999.0,24.8,13.28,22.33,37.65,927.927,2.162,99.0,3.95\n0,2018,291,1127,995.865,68.1732,809.7739999999999,793.245,-7999.0,-7999.0,-7999.0,24.82,13.28,22.37,37.75,927.928,2.45,10.29,4.7\n0,2018,291,1128,995.3389999999999,68.2515,810.294,793.6519999999999,-7999.0,-7999.0,-7999.0,24.84,13.28,22.41,37.76,927.9010000000001,1.725,155.1,2.45\n0,2018,291,1129,995.095,68.2156,811.029,794.2360000000001,-7999.0,-7999.0,-7999.0,24.85,13.28,22.49,37.55,927.908,1.4709999999999999,195.1,3.95\n0,2018,291,1130,996.21,68.1736,812.529,795.763,-7999.0,-7999.0,-7999.0,24.88,13.28,22.59,37.27,927.9,3.2,336.3,5.45\n0,2018,291,1131,997.143,68.1737,813.752,796.941,-7999.0,-7999.0,-7999.0,24.89,13.28,22.63,37.63,927.9069999999999,2.0869999999999997,119.7,3.95\n0,2018,291,1132,997.8380000000001,68.1678,815.079,798.062,-7999.0,-7999.0,-7999.0,24.92,13.28,22.83,37.27,927.913,1.75,92.6,4.7\n0,2018,291,1133,998.837,68.174,816.178,799.252,-7999.0,-7999.0,-7999.0,24.95,13.28,22.88,36.42,927.868,3.775,318.7,6.2\n0,2018,291,1134,999.265,68.174,816.482,799.653,-7999.0,-7999.0,-7999.0,24.96,13.28,22.75,36.26,927.8710000000001,3.875,311.4,6.2\n0,2018,291,1135,999.4110000000001,68.1741,816.952,800.0939999999999,-7999.0,-7999.0,-7999.0,24.99,13.28,22.63,36.86,927.8660000000001,2.8369999999999997,331.9,6.2\n0,2018,291,1136,999.318,68.1742,817.6619999999999,800.7410000000001,-7999.0,-7999.0,-7999.0,25.01,13.28,22.68,36.83,927.8439999999999,2.362,310.5,3.95\n0,2018,291,1137,999.551,68.1743,818.49,801.559,-7999.0,-7999.0,-7999.0,25.04,13.28,22.84,36.66,927.855,1.54,337.3,3.2\n0,2018,291,1138,999.227,68.1744,818.793,801.857,-7999.0,-7999.0,-7999.0,25.07,13.28,22.86,36.67,927.809,2.075,35.4,3.95\n0,2018,291,1139,1000.17,68.1985,819.83,802.8739999999999,-7999.0,-7999.0,-7999.0,25.07,13.28,22.9,37.28,927.802,2.122,118.9,4.7\n0,2018,291,1140,1001.15,68.1865,821.163,804.0,-7999.0,-7999.0,-7999.0,25.1,13.28,22.92,36.97,927.814,2.325,81.3,3.95\n0,2018,291,1141,1001.4,68.397,821.5089999999999,804.573,-7999.0,-7999.0,-7999.0,25.13,13.28,22.87,36.58,927.793,2.4,91.4,5.45\n0,2018,291,1142,1001.06,68.8299,821.553,804.585,-7999.0,-7999.0,-7999.0,25.15,13.28,22.69,37.02,927.76,2.75,79.25,5.45\n0,2018,291,1143,1000.8,68.7398,821.812,805.1160000000001,-7999.0,-7999.0,-7999.0,25.18,13.27,22.6,37.31,927.765,1.9180000000000001,51.74,3.95\n0,2018,291,1144,1000.89,68.5114,822.4169999999999,805.66,-7999.0,-7999.0,-7999.0,25.19,13.27,22.62,37.43,927.7810000000001,2.262,38.28,4.7\n0,2018,291,1145,1001.36,68.7455,823.4730000000001,806.752,-7999.0,-7999.0,-7999.0,25.21,13.27,22.67,37.3,927.7510000000001,3.647,319.4,6.95\n0,2018,291,1146,1001.84,68.1738,823.867,807.2539999999999,-7999.0,-7999.0,-7999.0,25.23,13.27,22.67,37.29,927.7819999999999,2.072,80.2,4.7\n0,2018,291,1147,1000.63,68.1733,823.596,807.065,-7999.0,-7999.0,-7999.0,25.25,13.27,22.74,37.61,927.82,1.66,52.6,4.7\n0,2018,291,1148,1000.14,68.1729,824.048,807.232,-7999.0,-7999.0,-7999.0,25.28,13.27,22.91,36.94,927.795,2.162,316.5,4.7\n0,2018,291,1149,1001.25,68.1723,825.477,808.298,-7999.0,-7999.0,-7999.0,25.3,13.27,23.01,36.16,927.814,1.306,315.5,3.2\n0,2018,291,1150,1001.61,68.172,826.091,808.798,-7999.0,-7999.0,-7999.0,25.31,13.27,23.18,36.29,927.79,1.59,81.4,3.2\n0,2018,291,1151,1000.43,68.1719,825.312,808.1110000000001,-7999.0,-7999.0,-7999.0,25.34,13.27,23.25,36.0,927.7330000000001,1.797,124.1,3.2\n0,2018,291,1152,1000.45,68.4303,825.188,808.058,-7999.0,-7999.0,-7999.0,25.37,13.27,23.28,36.09,927.7710000000001,1.75,106.3,3.95\n0,2018,291,1153,1000.91,68.8933,825.688,808.539,-7999.0,-7999.0,-7999.0,25.39,13.27,23.36,36.36,927.735,1.659,110.8,3.2\n0,2018,291,1154,1000.96,68.8934,826.059,809.0260000000001,-7999.0,-7999.0,-7999.0,25.42,13.27,23.42,36.15,927.696,1.5230000000000001,100.7,6.2\n0,2018,291,1155,1001.16,68.8935,826.456,809.273,-7999.0,-7999.0,-7999.0,25.43,13.27,23.48,35.44,927.683,2.374,101.8,6.2\n0,2018,291,1156,1000.66,68.8937,825.915,808.875,-7999.0,-7999.0,-7999.0,25.46,13.27,23.48,35.64,927.688,1.725,21.03,3.95\n0,2018,291,1157,999.6110000000001,68.8939,825.696,808.427,-7999.0,-7999.0,-7999.0,25.49,13.27,23.43,34.92,927.6510000000001,2.262,314.8,3.95\n0,2018,291,1158,1000.02,68.9118,825.9780000000001,808.677,-7999.0,-7999.0,-7999.0,25.52,13.26,23.4,35.66,927.623,1.909,54.69,3.95\n0,2018,291,1159,1000.31,69.0018,826.426,809.2230000000001,-7999.0,-7999.0,-7999.0,25.55,13.26,23.44,35.82,927.6189999999999,1.21,82.9,3.2\n0,2018,291,1200,1001.37,68.8931,827.419,810.057,-7999.0,-7999.0,-7999.0,25.56,13.26,23.51,35.48,927.5210000000001,2.025,100.0,4.7\n0,2018,291,1201,1001.52,69.0311,827.632,810.2660000000001,-7999.0,-7999.0,-7999.0,25.6,13.26,23.51,35.57,927.584,1.8840000000000001,92.4,3.2\n0,2018,291,1202,1002.56,68.8928,828.6,811.196,-7999.0,-7999.0,-7999.0,25.62,13.26,23.55,35.35,927.596,1.743,2.89,3.95\n0,2018,291,1203,1002.91,68.8928,828.921,811.768,-7999.0,-7999.0,-7999.0,25.65,13.26,23.62,35.53,927.563,1.599,101.8,3.2\n0,2018,291,1204,1002.83,68.893,828.867,811.855,-7999.0,-7999.0,-7999.0,25.67,13.26,23.59,35.24,927.585,1.456,68.02,3.2\n0,2018,291,1205,1002.44,68.8927,828.827,811.692,-7999.0,-7999.0,-7999.0,25.69,13.26,23.59,35.28,927.573,0.9570000000000001,124.1,1.7\n0,2018,291,1206,1002.1,68.8927,828.315,811.2410000000001,-7999.0,-7999.0,-7999.0,25.73,13.26,23.59,35.04,927.53,1.787,64.36,3.2\n0,2018,291,1207,1001.17,68.9828,827.753,810.6,-7999.0,-7999.0,-7999.0,25.75,13.26,23.49,34.99,927.528,2.1430000000000002,317.4,4.7\n0,2018,291,1208,1001.08,68.171,827.5219999999999,810.42,-7999.0,-7999.0,-7999.0,25.78,13.26,23.4,35.5,927.5210000000001,1.7469999999999999,58.1,4.7\n0,2018,291,1209,1001.27,68.5317,828.052,810.779,-7999.0,-7999.0,-7999.0,25.8,13.26,23.46,35.21,927.4889999999999,4.162,315.3,6.2\n0,2018,291,1210,1001.3,68.6339,827.942,810.803,-7999.0,-7999.0,-7999.0,25.84,13.26,23.45,35.37,927.4939999999999,2.937,349.5,6.95\n0,2018,291,1211,1001.92,68.171,828.133,811.0319999999999,-7999.0,-7999.0,-7999.0,25.85,13.26,23.45,35.17,927.4780000000001,3.475,331.9,6.2\n0,2018,291,1212,1001.05,68.1709,827.7239999999999,810.664,-7999.0,-7999.0,-7999.0,25.88,13.26,23.46,35.13,927.475,2.725,311.6,4.7\n0,2018,291,1213,1000.46,68.1705,827.2260000000001,810.1569999999999,-7999.0,-7999.0,-7999.0,25.92,13.26,23.52,35.05,927.482,2.05,312.6,4.7\n0,2018,291,1214,999.4789999999999,68.459,826.6260000000001,809.493,-7999.0,-7999.0,-7999.0,25.92,13.26,23.64,34.59,927.4810000000001,0.664,21.05,1.7\n0,2018,291,1215,999.383,68.1703,826.668,809.6569999999999,-7999.0,-7999.0,-7999.0,25.96,13.26,23.79,34.71,927.441,0.174,23.6,0.95\n0,2018,291,1216,999.069,68.8132,826.69,809.346,-7999.0,-7999.0,-7999.0,25.98,13.26,23.97,35.18,927.432,0.262,127.2,1.7\n0,2018,291,1217,998.837,68.8914,826.505,808.8430000000001,-7999.0,-7999.0,-7999.0,26.01,13.26,24.2,34.72,927.42,0.5589999999999999,153.0,1.7\n0,2018,291,1218,999.222,68.615,826.352,808.696,-246.8,-246.8,-246.8,26.04,13.26,24.22,33.85,927.375,2.275,328.1,4.7\n0,2018,291,1219,999.7280000000001,68.1702,826.007,808.5360000000001,-247.6,-256.1,-246.8,26.05,13.26,24.18,33.87,927.378,1.237,105.9,3.2\n0,2018,291,1220,999.467,68.2001,825.6419999999999,808.312,-7999.0,-7999.0,-7999.0,26.09,13.26,24.18,33.51,927.362,2.862,303.7,3.95\n0,2018,291,1221,999.953,68.1697,825.459,808.217,-7999.0,-7999.0,-7999.0,26.12,13.26,24.12,33.55,927.3439999999999,2.662,319.5,5.45\n0,2018,291,1222,1000.87,68.1694,825.535,808.447,-7999.0,-7999.0,-7999.0,26.15,13.25,24.08,33.87,927.3989999999999,1.7619999999999998,284.2,3.2\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Setup Assistance Functions\nDESCRIPTION: This reStructuredText directive summarizes helper functions for setting up ModelChains to run, including methods for completing irradiance data and preparing inputs.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain.complete_irradiance\n   modelchain.ModelChain.prepare_inputs\n   modelchain.ModelChain.prepare_inputs_from_poa\n```\n\n----------------------------------------\n\nTITLE: PVLib Snow Module Function References\nDESCRIPTION: Sphinx autodoc configuration showing the available snow-related functions in the pvlib Python library. Functions include snow coverage calculation, full coverage determination, and power loss estimation methods from NREL and Townsend models.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/effects_on_pv_system_output/snow.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pvlib\n\nSnow\n----\n\n.. autosummary::\n   :toctree: ../generated/\n\n   snow.coverage_nrel\n   snow.fully_covered_nrel\n   snow.dc_loss_nrel\n   snow.loss_townsend\n```\n\n----------------------------------------\n\nTITLE: Current Module Setting\nDESCRIPTION: Sphinx documentation directive to set the current module context to pvlib.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/iotools.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: pvlib\n```\n\n----------------------------------------\n\nTITLE: Creating Synthetic GHI Data with Cloud and Overirradiance Events in Python\nDESCRIPTION: Modifies clearsky GHI data by scaling and introducing artificial cloud and overirradiance events. This creates synthetic test data for demonstrating the clearsky detection algorithm.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/clearsky.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# scale clear sky data to account for possibility of different turbidity\nghi = cs['ghi']*.953\n\n# add a cloud event\nghi['2012-04-01 10:42:00':'2012-04-01 10:44:00'] = [500, 300, 400]\n\n# add an overirradiance event\nghi['2012-04-01 10:56:00'] = 950\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Model Definitions\nDESCRIPTION: This reStructuredText directive summarizes the various model definitions available in ModelChain, including DC models, inverter models, AOI loss models, spectral loss models, temperature models, and loss models.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain.sapm\n   modelchain.ModelChain.cec\n   modelchain.ModelChain.desoto\n   modelchain.ModelChain.pvsyst\n   modelchain.ModelChain.pvwatts_dc\n   modelchain.ModelChain.sandia_inverter\n   modelchain.ModelChain.adr_inverter\n   modelchain.ModelChain.pvwatts_inverter\n   modelchain.ModelChain.ashrae_aoi_loss\n   modelchain.ModelChain.physical_aoi_loss\n   modelchain.ModelChain.sapm_aoi_loss\n   modelchain.ModelChain.no_aoi_loss\n   modelchain.ModelChain.first_solar_spectral_loss\n   modelchain.ModelChain.sapm_spectral_loss\n   modelchain.ModelChain.no_spectral_loss\n   modelchain.ModelChain.sapm_temp\n   modelchain.ModelChain.pvsyst_temp\n   modelchain.ModelChain.faiman_temp\n   modelchain.ModelChain.fuentes_temp\n   modelchain.ModelChain.dc_ohmic_model\n   modelchain.ModelChain.no_dc_ohmic_loss\n   modelchain.ModelChain.pvwatts_losses\n   modelchain.ModelChain.no_extra_losses\n```\n\n----------------------------------------\n\nTITLE: Weather Data CSV Format with Time Series Measurements\nDESCRIPTION: CSV-formatted weather data with minute-by-minute observations. Each row contains a timestamp (year, day of year, hour/minute) followed by measurements of radiation, temperature, humidity, pressure, wind speed and direction, and other atmospheric parameters. Values of -7999.0 appear to represent missing or invalid data points.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,1337,975.972,68.1695,747.61,730.1410000000001,-7999.0,-7999.0,-7999.0,28.27,13.23,25.23,30.89,926.5160000000001,1.192,185.7,2.45\n0,2018,291,1338,975.1410000000001,68.5778,746.4019999999999,728.696,-7999.0,-7999.0,-7999.0,28.29,13.23,25.44,30.41,926.528,0.685,178.6,2.45\n0,2018,291,1339,974.177,68.8901,744.314,726.5219999999999,-7999.0,-7999.0,-7999.0,28.3,13.23,25.61,29.98,926.52,0.19,228.6,0.95\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Running Methods\nDESCRIPTION: This reStructuredText directive summarizes the methods available for running a ModelChain, including options for different starting points in the modeling process.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain.run_model\n   modelchain.ModelChain.run_model_from_poa\n   modelchain.ModelChain.run_model_from_effective_irradiance\n```\n\n----------------------------------------\n\nTITLE: Defining autosummary section for clearness index models in PVlib Python\nDESCRIPTION: A reStructuredText directive that creates an auto-generated summary of clearness index model functions in the PVlib Python library. It specifies that documentation should be generated in the '../generated/' directory for three functions related to clearness and clear sky indices.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/clearness-index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pvlib\n\nClearness index models\n----------------------\n\n.. autosummary::\n   :toctree: ../generated/\n\n   irradiance.clearness_index\n   irradiance.clearness_index_zenith_independent\n   irradiance.clearsky_index\n```\n\n----------------------------------------\n\nTITLE: Previewing ASV HTML Benchmark Reports\nDESCRIPTION: Command to start a local HTTP server to view the generated benchmark HTML reports in a web browser.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ asv preview\n```\n\n----------------------------------------\n\nTITLE: Function References in PVLib Python Documentation\nDESCRIPTION: References to new and updated Python functions in PVLib including irradiance models, bifacial calculations, and I/O tools. These are documentation references rather than actual code implementations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvlib.irradiance.perez_driesse\npvlib.irradiance.ghi_from_poa_driesse_2023\npvlib.bifacial.infinite_sheds.get_irradiance\npvlib.bifacial.infinite_sheds.get_irradiance_poa\npvlib.iotools.get_solcast_tmy\npvlib.iotools.get_solcast_historic\npvlib.iotools.get_solcast_forecast\npvlib.iotools.get_solcast_live\npvlib.iam.convert\npvlib.iam.fit\npvlib.iotools.read_solaranywhere\npvlib.iotools.get_solaranywhere\npvlib.iotools.get_cams\npvlib.iotools.get_psm3\npvlib.modelchain.ModelChain\npvlib.clearsky.detect_clearsky\n```\n\n----------------------------------------\n\nTITLE: Displaying Meteorological Data in CSV Format\nDESCRIPTION: This CSV data contains minute-by-minute meteorological measurements. Each row represents one minute of data with columns including year, day of year, time (HHMM format), various measurements (some using -7999.0 as missing data indicators), temperature, humidity, atmospheric pressure, wind speed, and wind direction.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_12\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,2328,-0.433433,0.0,-2.05966,-2.39911,-7999.0,-7999.0,-7999.0,20.65,13.33,17.47,60.79,927.173,1.892,315.1,3.2\n0,2018,291,2329,-0.433435,0.0,-1.8746599999999998,-2.39912,-7999.0,-7999.0,-7999.0,20.64,13.33,17.46,60.7,927.179,0.961,341.1,2.45\n0,2018,291,2330,-0.433435,0.0,-1.91783,-2.39912,-7999.0,-7999.0,-7999.0,20.61,13.33,17.46,60.75,927.1669999999999,0.978,333.3,2.45\n0,2018,291,2331,-0.433436,0.0,-1.98567,-2.39913,-7999.0,-7999.0,-7999.0,20.61,13.33,17.46,60.82,927.179,1.13,102.8,2.45\n0,2018,291,2332,-0.433435,0.0,-2.0041700000000002,-2.43911,-7999.0,-7999.0,-7999.0,20.6,13.33,17.43,61.0,927.194,0.895,97.0,1.7\n0,2018,291,2333,-0.43343400000000004,0.0,-2.2076599999999997,-2.45624,-7999.0,-7999.0,-7999.0,20.58,13.33,17.41,61.09,927.183,1.032,328.8,2.45\n0,2018,291,2334,-0.43343400000000004,0.0,-2.21999,-2.40483,-7999.0,-7999.0,-7999.0,20.56,13.33,17.42,61.1,927.177,1.2209999999999999,313.6,3.2\n0,2018,291,2335,-0.433433,0.0,-2.21999,-2.39911,-7999.0,-7999.0,-7999.0,20.56,13.33,17.4,61.14,927.186,1.085,4.224,2.45\n0,2018,291,2336,-0.433432,0.0,-2.21998,-2.40482,-7999.0,-7999.0,-7999.0,20.54,13.33,17.4,61.2,927.17,0.863,357.2,2.45\n0,2018,291,2337,-0.43343100000000007,0.0,-2.22614,-2.41052,-7999.0,-7999.0,-7999.0,20.52,13.33,17.38,61.34,927.173,0.787,301.3,2.45\n0,2018,291,2338,-0.43343000000000004,0.0,-2.18297,-2.41052,-7999.0,-7999.0,-7999.0,20.5,13.33,17.35,61.15,927.184,1.6019999999999999,333.8,3.2\n0,2018,291,2339,-0.43343000000000004,0.0,-2.13364,-2.39909,-7999.0,-7999.0,-7999.0,20.5,13.33,17.38,61.06,927.166,1.465,338.6,2.45\n0,2018,291,2340,-0.433432,0.0,-2.11515,-2.3991,-7999.0,-7999.0,-7999.0,20.49,13.33,17.38,61.15,927.164,1.056,296.7,3.2\n0,2018,291,2341,-0.433432,0.0,-1.8684900000000002,-2.39911,-7999.0,-7999.0,-7999.0,20.48,13.33,17.37,61.13,927.169,1.38,332.0,3.2\n0,2018,291,2342,-0.43343400000000004,0.0,-1.8623299999999998,-2.39911,-7999.0,-7999.0,-7999.0,20.45,13.33,17.38,61.07,927.176,2.031,320.1,3.95\n0,2018,291,2343,-0.433433,0.0,-1.8869900000000002,-2.39911,-7999.0,-7999.0,-7999.0,20.45,13.33,17.38,61.07,927.1569999999999,0.828,111.7,2.45\n0,2018,291,2344,-0.433429,0.0,-2.1213,-2.39909,-7999.0,-7999.0,-7999.0,20.43,13.33,17.37,61.17,927.185,1.354,319.6,3.2\n0,2018,291,2345,-0.433424,0.0,-2.02878,-2.39906,-7999.0,-7999.0,-7999.0,20.42,13.33,17.34,61.25,927.203,1.561,325.8,3.95\n0,2018,291,2346,-0.43342299999999995,0.0,-2.14594,-2.39905,-7999.0,-7999.0,-7999.0,20.4,13.33,17.33,61.43,927.195,1.2890000000000001,314.8,2.45\n0,2018,291,2347,-0.42619799999999997,0.0,-2.0966,-2.39905,-7999.0,-7999.0,-7999.0,20.4,13.33,17.31,61.07,927.186,2.4019999999999997,309.4,6.2\n0,2018,291,2348,-0.433421,0.0,-1.8499400000000001,-2.3990400000000003,-7999.0,-7999.0,-7999.0,20.4,13.33,17.39,60.61,927.202,1.661,47.47,3.95\n0,2018,291,2349,-0.433424,0.0,-1.84995,-2.39906,-7999.0,-7999.0,-7999.0,20.37,13.33,17.4,60.91,927.202,1.097,320.4,3.2\n0,2018,291,2350,-0.433425,0.0,-2.10895,-2.39907,-7999.0,-7999.0,-7999.0,20.36,13.33,17.37,61.11,927.184,1.183,16.72,3.2\n0,2018,291,2351,-0.433424,0.0,-2.20761,-2.39906,-7999.0,-7999.0,-7999.0,20.34,13.33,17.33,61.25,927.211,1.5959999999999999,324.2,4.7\n0,2018,291,2352,-0.43341999999999997,0.0,-2.21992,-2.41046,-7999.0,-7999.0,-7999.0,20.34,13.33,17.3,61.36,927.201,1.3430000000000002,314.5,3.2\n0,2018,291,2353,-0.43341499999999994,0.0,-2.2198900000000004,-2.3990099999999996,-7999.0,-7999.0,-7999.0,20.33,13.33,17.27,61.65,927.179,0.39799999999999996,168.0,1.7\n0,2018,291,2354,-0.433411,0.0,-2.21988,-2.39899,-7999.0,-7999.0,-7999.0,20.31,13.33,17.24,61.71,927.211,1.013,357.7,3.2\n0,2018,291,2355,-0.433409,0.0,-2.2198599999999997,-2.39898,-7999.0,-7999.0,-7999.0,20.29,13.33,17.23,61.75,927.178,1.367,320.7,3.2\n0,2018,291,2356,-0.433406,0.0,-2.21985,-2.3989599999999998,-7999.0,-7999.0,-7999.0,20.29,13.33,17.22,61.76,927.1439999999999,1.067,306.0,2.45\n0,2018,291,2357,-0.433409,0.0,-2.10887,-2.39898,-7999.0,-7999.0,-7999.0,20.29,13.33,17.22,61.56,927.143,1.504,307.2,3.95\n0,2018,291,2358,-0.43341,0.0,-2.04105,-2.39898,-7999.0,-7999.0,-7999.0,20.27,13.33,17.24,61.39,927.1519999999999,1.371,356.4,3.2\n0,2018,291,2359,-0.43341,0.0,-2.1890400000000003,-2.39898,-7999.0,-7999.0,-7999.0,20.26,13.33,17.25,61.51,927.1360000000001,1.4969999999999999,327.4,3.95\n```\n\n----------------------------------------\n\nTITLE: Importing PVLib Bifacial Module in Python\nDESCRIPTION: The pvlib.bifacial module is now automatically imported when importing pvlib. This allows easier access to bifacial PV modeling functionality.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pvlib\n```\n\n----------------------------------------\n\nTITLE: Deprecated Function Example\nDESCRIPTION: Examples of deprecated functions being replaced with new naming conventions\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.11.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n~pvlib.irradiance.dirindex\n~pvlib.irradiance.dni\n~pvlib.irradiance.clearsky_index\n```\n\n----------------------------------------\n\nTITLE: EPW Format Parsing Function Addition - Python\nDESCRIPTION: Adds the functionality to parse weather data in the EPW format, facilitating easier integration of external weather datasets into PVLIB workflows.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Added :py:func:`~pvlib.iotools.parse_epw` to parse a file-like buffer\n  containing weather data in the EPW format.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Autosummary for ModelChain Creation Methods\nDESCRIPTION: This reStructuredText directive generates a summary of ModelChain creation methods, including the base class and two specialized constructors.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autosummary::\n   :toctree: generated/\n\n   modelchain.ModelChain\n   modelchain.ModelChain.with_pvwatts\n   modelchain.ModelChain.with_sapm\n```\n\n----------------------------------------\n\nTITLE: Meteorological Time-Series Data in CSV Format\nDESCRIPTION: Time-series data with timestamps and environmental measurements. Each row contains a timestamp (year, day of year, hour, minute) followed by various measurements. The value -7999 appears to be used for missing data. This format is commonly used for environmental and solar monitoring data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n0,2019,319,605,11.36,0,0,13.03,0.016,-1.01605,0,-0.888191,0.178,14.28,355.7,0.132,-9.31,0.078,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,606,11.33,0,0,13.03,0.015,-1.01605,0,-0.769765,0.132,14.28,355.7,0.101,-9.33,0,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,607,11.37,0,0,13.03,0.009,-1.01605,0,-0.710553,0,14.26,355.7,0.106,-9.32,0.047,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,608,11.38,0,0,13.03,0.014,-1.01605,0,-0.710553,0,14.25,355.7,0.103,-9.33,0,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,609,11.37,0,0,13.04,0.016,-1.01605,0,-0.710553,0,14.24,355.7,0.152,-9.29,0.097,10.1,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,610,11.27,0,0,13.04,0.022,-1.01605,0,-0.710553,0,14.23,355.7,0.103,-9.33,0,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,611,11.39,0,0,13.02,0.016,-1.01605,0,-0.710553,0,14.23,355.6,0.109,-9.33,0,10.1,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,612,11.32,0,0,13.02,0.02,-1.01605,0,-0.710553,0,14.21,355.6,0.093,-9.33,0,10.09,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,613,11.35,0,0,13.03,0.017,-1.01605,0,-0.710553,0,14.21,355.6,0.1,-9.33,0,10.09,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,614,11.22,0,0,13.02,0.017,-1.01605,0,-0.710553,0,14.19,355.6,0.073,-9.33,0,10.09,0.014,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,615,11.35,0,0,13.01,0.017,-1.01605,0,-0.710553,0,14.18,355.6,0.102,-9.33,0,10.1,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,616,11.35,0,0,13.01,0.019,-1.01605,0,-0.710553,0,14.18,355.6,0.075,-9.33,0,10.09,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,617,11.38,0,0,13.02,0.021,-1.01605,0,-0.710553,0,14.16,355.6,0.102,-9.34,0.047,10.09,0.017,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,618,11.32,0,0,13.02,0.016,-1.01605,0,-0.710553,0,14.16,355.6,0.144,-9.39,0.11,10.09,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,619,11.32,0,0,13.03,0.024,-1.01605,0,-0.710553,0,14.15,355.5,0.141,-9.4,0.115,10.08,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,620,11.24,0,0,13.03,0.025,-1.01605,0,-0.710553,0,14.13,355.6,0.11,-9.34,0.047,10.09,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,621,11.24,0,0,13.03,0.023,-1.01605,0,-0.710553,0,14.13,355.5,0.163,-9.5,0.125,10.1,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,622,11.26,0,0,13.04,0.013,-1.01605,0,-0.710553,0,14.13,355.4,0.111,-9.59,0,10.1,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,623,11.35,0,0,13.04,0.016,-1.01605,0,-0.710553,0,14.11,355.5,0.141,-9.58,0.047,10.11,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,624,11.37,0,0,13.04,0.022,-1.01605,0,-0.710553,0,14.11,355.4,0.133,-9.59,0,10.11,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,625,11.35,0,0,13.03,0.022,-1.01605,0,-0.710553,0,14.1,355.4,0.116,-9.59,0,10.1,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,626,11.41,0,0,13.02,0.023,-1.01605,0,-0.698710,0.064,14.09,355.4,0.113,-9.59,0,10.1,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,627,11.31,0,0,13.03,0.022,-1.01605,0,-0.675025,0.107,14.09,355.5,0.132,-9.58,0.047,10.11,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,628,11.35,0,0,13.02,0.026,-1.01605,0,-0.686868,0.089,14.09,355.5,0.117,-9.59,0,10.11,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,629,11.45,0,0,13.02,0.021,-1.01605,0,-0.651340,0.132,14.08,355.5,0.109,-9.59,0,10.11,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,630,11.29,0,0,13,0.023,-1.01605,0,-0.698710,0.064,14.06,355.5,0.125,-9.56,0.088,10.1,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,631,11.36,0,0,13,0.021,-1.01605,0,-0.710553,0,14.06,355.5,0.12,-9.57,0.065,10.11,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,632,11.35,0,0,13.01,0.027,-1.01605,0,-0.686868,0.089,14.06,355.5,0.066,-9.59,0,10.11,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,633,11.22,0,0,12.98,0.02,-1.01605,0,-0.663183,0.121,14.05,355.5,0.095,-9.56,0.088,10.11,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,634,11.27,0,0,12.99,0.018,-1.01605,0,-0.615812,0.157,14.04,355.5,0.03,-9.59,0,10.11,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,635,11.26,0,0,12.97,0.016,-1.01605,0,-0.568442,0.174,14.04,355.5,0.136,-9.5,0.122,10.11,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,636,11.36,0,0,12.97,0.02,-1.01605,0,-0.450017,0.157,14.04,355.4,0.075,-9.59,0,10.1,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,637,11.3,0,0,12.97,0.014,-0.914449,0.155,-0.367119,0.064,14.04,355.4,0.1,-9.59,0,10.09,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,638,11.25,0,0,12.96,0.011,-0.722527,0.115,-0.355276,0,14.04,355.3,0.094,-9.59,0,10.09,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,639,11.35,0,0,12.95,0.009,-0.587054,0.15,-0.355276,0,14.04,355.4,0.075,-9.59,0,10.09,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,640,11.33,0,0,12.95,0.009,-0.406424,0.135,-0.355278,0,14.03,355.4,0.114,-9.56,0.078,10.09,0.017,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,641,11.34,0,0,12.95,0.008,-0.338687,0,-0.319751,0.107,14.02,355.3,0.097,-9.59,0,10.08,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,642,11.35,0,0,12.94,0.009,-0.338688,0,-0.153955,0.176,14.01,355.3,0.057,-9.59,0,10.09,0.011,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,643,11.28,0,0,12.94,0.01,-0.338688,0,0,0,14.01,355.3,0.078,-9.59,0,10.08,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,644,11.35,0,0,12.95,0.008,-0.316110,0.084,0.201326,0.176,14.01,355.4,0.056,-9.59,0,10.09,0.011,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,645,11.35,0,0,12.94,0.007,-0.079027,0.143,0.355281,0,14.01,355.4,0,-9.59,0,10.09,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,646,11.35,0,0,12.96,0.006,0.169345,0.169,0.355281,0,14.01,355.4,0.078,-9.62,0.078,10.11,0.003,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,647,11.37,0,0,12.96,0.005,0.338689,0,0.438180,0.15,14,355.2,0.11,-9.79,0.11,10.11,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,648,11.35,0,0,12.95,0.008,0.338689,0,0.675034,0.107,13.99,355.3,0.129,-9.73,0.129,10.1,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,649,11.25,0,0,12.95,0.009,0.440296,0.155,0.923731,0.174,13.99,355.1,0.006,-9.85,0,10.1,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,650,11.25,0,0,12.95,0.009,0.666089,0.163,1.06584,0,13.99,355.1,0.047,-9.84,0.047,10.09,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,651,11.37,0,0,12.95,0.009,1.00478,0.061,1.10137,0.107,13.99,355.1,0.066,-9.83,0.065,10.09,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,652,11.36,0,0,12.95,0.01,1.08380,0.135,1.46849,0.121,13.99,355.1,0,-9.85,0,10.09,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,653,11.39,0,0,12.95,0.009,1.41120,0.177,1.77640,0,13.99,355.1,0.007,-9.85,0,10.09,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,654,11.24,0,0,12.94,0.009,1.70473,0.061,1.95404,0.178,13.99,355.1,0.047,-9.84,0.047,10.09,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,655,11.24,0,0,12.95,0.013,2.09987,0.183,2.43959,0.121,13.99,355.1,0.048,-9.84,0.047,10.09,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,656,11.29,0,0,12.95,0.015,2.40469,0.102,2.67644,0.177,13.97,355.1,0.03,-9.85,0,10.09,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,657,11.35,0,0,12.95,0.017,2.68693,0.084,2.84224,0,13.97,355.1,0.005,-9.85,0,10.08,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,658,11.35,0,0,12.95,0.015,2.89014,0.19,3.13830,0.207,13.97,355.1,0.041,-9.85,0,10.09,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,659,11.36,0,0,12.96,0.015,3.42075,0.16,3.65938,0.163,13.97,355.1,0.082,-9.85,0,10.09,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,700,11.21,0,0,12.96,0.014,3.90620,0.169,4.19230,0.142,13.97,355.1,0.111,-9.85,0,10.1,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,701,11.36,0,0,12.96,0.016,4.23359,0.169,4.55941,0.161,13.96,355.2,0.097,-9.85,0,10.1,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,702,13.14,0,0,12.96,0.013,4.68517,0.177,5.00943,0.141,13.96,355.2,0.121,-9.85,0,10.11,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,703,13.25,0,0,12.96,0.015,5.22707,0.189,5.54235,0.174,13.95,355.3,0.089,-9.85,0,10.12,0.017,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,704,13.26,0,0,12.96,0.012,5.78026,0.23,6.05158,0.234,13.94,355.3,0.102,-9.85,0,10.13,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,705,13.22,0,0,12.97,0.014,6.28828,0.189,6.58449,0.2,13.94,355.3,0.097,-9.88,0.078,10.14,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,706,13.24,0,0,12.97,0.014,6.77373,0.124,7.08188,0.128,13.94,355.4,0.072,-9.87,0.065,10.14,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,707,13.23,0,0,12.97,0.018,7.21402,0.155,7.55558,0.157,13.94,355.3,0.116,-9.9,0.104,10.14,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,708,13.23,0,0,12.97,0.02,7.53013,0.143,7.88717,0.142,13.94,355.4,0.03,-9.85,0,10.14,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,709,13.21,0,0,12.98,0.017,7.99299,0.166,8.36087,0.177,13.94,355.4,0.063,-9.86,0.047,10.14,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,710,13.22,0,0,12.99,0.016,8.28652,0.169,8.65694,0.171,13.94,355.3,0.092,-9.88,0.088,10.14,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,711,13.22,0,0,12.99,0.01,8.73810,0.161,9.14248,0.157,13.95,355.2,0.134,-10.02,0.122,10.14,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,712,13.23,0,0,12.99,0.015,9.18968,0.258,9.59249,0.225,13.95,355.2,0.101,-10.09,0.065,10.15,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,713,13.19,0,0,12.99,0.013,9.78802,0.202,10.1136,0.177,13.96,355.2,0.143,-10.07,0.088,10.16,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,714,13.21,0,0,13,0.027,10.3186,0.209,10.6938,0.212,13.97,355.2,0.104,-10.11,0,10.16,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,715,13.22,0,0,13.11,0.02,10.9283,0.194,11.2978,0.169,13.97,355.4,0.08,-10.11,0,10.19,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,716,13.23,0,0,13.12,0.016,11.5379,0.173,11.9373,0.174,13.97,355.4,0.076,-10.11,0,10.19,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,717,13.22,0,0,13.13,0.01,12.1024,0.173,12.5531,0.231,13.97,355.4,0.05,-10.11,0,10.2,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,718,13.25,0,0,13.13,0.01,12.712,0.169,13.0979,0.238,13.97,355.4,0.091,-10.14,0.088,10.2,0.006,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Modifying Timestamps in Test Data for Python\nDESCRIPTION: Addition of 30 minutes to timestamps in test_psm3.csv to align with NSRDB changes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Added 30 minutes to timestamps in `test_psm3.csv`\n```\n\n----------------------------------------\n\nTITLE: Upgrading pvlib Package\nDESCRIPTION: pip command to upgrade pvlib to the latest compatible version\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/extras/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npip install -U pvlib\n```\n\n----------------------------------------\n\nTITLE: Structured Time Series Data\nDESCRIPTION: Comma-separated timestamped measurements containing fields like timestamps, temperature readings, calculated parameters and status codes. Data appears to be from a monitoring system with multiple sensors tracking various parameters throughout a day.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n0,2019,319,719,13.18,0,0,13.13,0,13.2313,0.213,13.6545,0.176,13.99,355.4,0.088,-10.14,0.088,10.2,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,720,13.22,0,0,13.13,0,13.7281,0.19,14.1163,0.157,13.99,355.2,0.078,-10.34,0.078,10.2,0,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Execute Speed Tests for Solar Calculations\nDESCRIPTION: Presents several %%timeit cells to benchmark the speed of solar position calculations using different pvlib methods and configurations, optionally utilizing Numba for acceleration.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n# NBVAL_SKIP\n\npyephemout = pvlib.solarposition.pyephem(times_loc, loc.latitude, loc.longitude)\n#ephemout = pvlib.solarposition.ephemeris(times, loc)\n```\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n# NBVAL_SKIP\n\n#pyephemout = pvlib.solarposition.pyephem(times, loc)\nephemout = pvlib.solarposition.ephemeris(times_loc, loc.latitude, loc.longitude)\n```\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n# NBVAL_SKIP\n\n#pyephemout = pvlib.solarposition.pyephem(times, loc)\nephemout = pvlib.solarposition.get_solarposition(times_loc, loc.latitude, loc.longitude,\n                                                 method='nrel_numpy')\n```\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n# NBVAL_SKIP\n\n#pyephemout = pvlib.solarposition.pyephem(times, loc)\nephemout = pvlib.solarposition.get_solarposition(times_loc, loc.latitude, loc.longitude,\n                                                 method='nrel_numba')\n```\n\nLANGUAGE: python\nCODE:\n```\n%%timeit\n# NBVAL_SKIP\n\nephemout = pvlib.solarposition.spa_python(times_loc, loc.latitude, loc.longitude,\n                                          how='numba', numthreads=16)\n```\n\n----------------------------------------\n\nTITLE: Processing CSV-formatted Solar Resource Data\nDESCRIPTION: This dataset contains minute-by-minute solar resource measurements with timestamp information and various meteorological parameters. Each row includes fields for station ID, year, day of year, time, and multiple meteorological measurements. The value -7999 appears to be used as a placeholder for missing data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_3\n\nLANGUAGE: CSV\nCODE:\n```\n0,2019,319,1406,13.36,912.366,0.347,22.71,0.01,654.565,0.572,72.6024,0.208,24.89,309.1,0.22,-108.6,0.218,19.81,0.009,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Referencing PVLib Class Method in Python\nDESCRIPTION: Example of how to reference the 'prepare_inputs' method of the ModelChain class from PVLib in Python documentation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n:py:meth:`~pvlib.modelchain.ModelChain.prepare_inputs`\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Section for Example Gallery\nDESCRIPTION: This snippet defines a reStructuredText section for the Example Gallery. It sets up a reference label and creates a header for the gallery section.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/examples/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _example_gallery:\n\nExample Gallery\n===============\n```\n\n----------------------------------------\n\nTITLE: CSV Weather Data Sample\nDESCRIPTION: Time-series dataset with columns for year, day, time, radiation measurements, temperatures, pressure, and wind parameters. Missing values are denoted as -7999.0.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_8\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,1724,365.398,23.6733,48.0356,44.5412,-7999.0,-7999.0,-7999.0,30.03,13.21,24.44,31.39,925.8589999999999,4.937,143.7,6.2\n0,2018,291,1725,354.971,22.9277,45.3588,41.9303,-7999.0,-7999.0,-7999.0,29.96,13.21,24.39,31.51,925.873,4.6,148.3,5.45\n```\n\n----------------------------------------\n\nTITLE: Importing ModelChain Module in Python\nDESCRIPTION: This snippet shows how to import the ModelChain module from pvlib. It sets up the current module context for the rest of the documentation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/modelchain.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. currentmodule:: pvlib\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for PVLib Python API Reference\nDESCRIPTION: This RestructuredText directive creates a table of contents for the API reference, including links to various submodules and components of the PVLib Python library. It sets the maximum depth to 2 levels.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   classes\n   solarposition\n   clearsky\n   airmass_atmospheric\n   irradiance/index\n   pv_modeling/index\n   effects_on_pv_system_output/index\n   tracking\n   iotools\n   modelchain\n   bifacial\n   scaling\n   location\n   transformer\n```\n\n----------------------------------------\n\nTITLE: Weather Data Records in CSV Format\nDESCRIPTION: Time-series weather data records organized in a comma-separated format. Each line contains date/time information followed by numerous measurement parameters. Multiple values of -7999 likely indicate missing or invalid data points.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\n0,2019,319,1942,13.46,-0.382813,0,14.86,0.025,-2.36955,0,-1.94116,0.177,17.03,289.8,0.071,-87.8,0,12.52,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1943,13.46,-0.382813,0,14.79,0.018,-2.36956,0,-1.96484,0.177,17,289.8,0.112,-87.7,0.127,12.49,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1944,13.47,-0.357293,0.095,14.77,0,-2.36956,0,-2.03586,0.157,16.97,289.7,0.047,-87.6,0.047,12.45,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1945,12.96,-0.357293,0.095,14.75,0.021,-2.36956,0,-2.08321,0.121,16.94,289.7,0.124,-87.5,0.127,12.42,0.028,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1946,13.47,-0.370054,0.069,14.71,0.021,-2.36956,0,-2.02403,0.163,16.9,289.6,0.122,-87.4,0.122,12.4,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1947,13.48,-0.382815,0,14.67,0.013,-2.36957,0,-2.04770,0.15,16.87,289.6,0.108,-87.2,0.128,12.37,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1948,13.46,-0.382815,0,14.67,0,-2.36957,0,-1.95301,0.178,16.82,289.4,0,-87.3,0,12.34,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1949,13.48,-0.382816,0,14.65,0.024,-2.36957,0,-2.05954,0.142,16.79,289.5,0.135,-87.1,0.088,12.33,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1950,13.47,-0.382816,0,14.59,0.021,-2.36957,0,-1.98852,0.174,16.76,289.3,0.095,-87.1,0.078,12.29,0.009,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1951,13.46,-0.382816,0,14.6,0.056,-2.36958,0,-1.98853,0.174,16.72,289.3,0.132,-87.1,0.115,12.28,0.011,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1952,13.45,-0.382816,0,14.66,0.003,-2.36958,0,-1.92934,0.176,16.7,289.3,0.086,-87.1,0,12.28,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1953,13.44,-0.382817,0,14.64,0.017,-2.36958,0,-1.89384,0.167,16.67,289.1,0.138,-87.1,0,12.23,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1954,13.47,-0.382817,0,14.59,0.02,-2.36958,0,-1.94118,0.177,16.63,289.1,0.12,-86.9,0.127,12.21,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1955,13.49,-0.382817,0,14.57,0.01,-2.36958,0,-1.88200,0.163,16.6,289,0.121,-86.9,0.129,12.19,0.014,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1956,13.46,-0.382817,0,14.57,0.014,-2.36958,0,-1.85833,0.15,16.57,288.8,0.108,-87,0.097,12.18,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1957,13.47,-0.382817,0,14.54,0.015,-2.36958,0,-1.85833,0.15,16.55,288.7,0.13,-87,0.11,12.15,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1958,13.47,-0.382817,0,14.53,0.003,-2.36958,0,-1.85833,0.15,16.51,288.8,0.089,-86.8,0.088,12.13,0.003,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1959,13.47,-0.382818,0,14.52,0.016,-2.36958,0,-1.82282,0.121,16.48,288.8,0.111,-86.8,0.116,12.13,0.007,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2000,13.47,-0.382818,0,14.47,0.021,-2.36958,0,-1.78731,0.064,16.45,288.7,0.15,-86.7,0.129,12.09,0.025,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2001,13.5,-0.382818,0,14.44,0.007,-2.36958,0,-1.84650,0.142,16.42,288.7,0.065,-86.5,0.065,12.06,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2002,13.47,-0.370057,0.069,14.43,0.012,-2.36958,0,-1.77548,0,16.4,288.5,0.134,-86.7,0.127,12.06,0.002,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2003,13.5,-0.382818,0,14.42,0.014,-2.36959,0,-1.77548,0,16.37,288.5,0.125,-86.7,0.125,12.06,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2004,13.46,-0.382818,0,14.4,0.002,-2.36959,0,-1.77548,0,16.33,288.6,0.085,-86.6,0.088,12.06,0.002,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2005,13.49,-0.382818,0,14.4,0,-2.36959,0,-1.77548,0,16.31,288.6,0.094,-86.5,0.065,12.05,0.014,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2006,13.51,-0.382820,0,14.39,0.02,-2.36959,0,-1.81099,0.107,16.28,288.4,0.116,-86.6,0.088,12.01,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2007,13.46,-0.382821,0,14.35,0.009,-2.36960,0,-1.77549,0,16.25,288.3,0.029,-86.5,0,11.99,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2008,13.49,-0.382823,0,14.32,0.023,-2.36962,0,-1.84652,0.142,16.22,288.2,0.114,-86.5,0.114,11.95,0.025,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2009,13.5,-0.382825,0,14.3,0.016,-2.36963,0,-1.89388,0.167,16.2,288.1,0.125,-86.4,0.125,11.93,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2010,13.5,-0.382828,0,14.28,0.001,-2.36965,0,-1.82287,0.121,16.17,288.1,0.13,-86.4,0.127,11.93,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2011,13.47,-0.382830,0,14.28,0,-2.36966,0,-1.77553,0,16.15,288,0.047,-86.5,0.047,11.93,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2012,13.49,-0.382834,0,14.28,0.005,-2.36969,0,-1.77555,0,16.12,288,0.167,-86.4,0.129,11.91,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2013,13.49,-0.382836,0,14.26,0.018,-2.36969,0,-1.78740,0.064,16.09,287.9,0.1,-86.3,0.088,11.87,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2014,12.99,-0.382840,0,14.23,0.011,-2.36972,0,-1.79925,0.089,16.07,287.7,0.103,-86.5,0.104,11.86,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2015,13.49,-0.382841,0,14.23,0.009,-2.36973,0,-1.79926,0.089,16.04,287.8,0.128,-86.4,0.128,11.86,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2016,13.49,-0.382845,0,14.2,0.017,-2.36975,0,-1.79928,0.089,16.02,287.9,0.029,-86.3,0,11.86,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2017,13.45,-0.382846,0,14.17,0.011,-2.36976,0,-1.82296,0.121,15.99,287.8,0.14,-86.3,0.151,11.84,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2018,13.5,-0.382850,0,14.17,0,-2.36979,0,-1.77563,0,15.97,287.5,0.153,-86.4,0.125,11.81,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2019,13.49,-0.382851,0,14.17,0,-2.36979,0,-1.77563,0,15.94,287.6,0.093,-86.3,0,11.81,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2020,12.96,-0.382855,0,14.17,0,-2.36982,0,-1.77565,0,15.92,287.6,0.105,-86.2,0.104,11.8,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2021,13.5,-0.382855,0,14.16,0.012,-2.36982,0,-1.78749,0.064,15.89,287.6,0.065,-86.3,0.065,11.8,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2022,13.5,-0.382859,0,14.15,0.018,-2.36984,0,-1.77567,0,15.87,287.6,0.065,-86.3,0.065,11.8,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2023,13.49,-0.382860,0,14.13,0.02,-2.36984,0,-1.77567,0,15.84,287.6,0.09,-86.2,0.088,11.8,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2024,13.46,-0.382863,0,14.11,0.018,-2.36986,0,-1.78752,0.064,15.82,287.8,0.059,-86,0,11.79,0.011,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2025,13.5,-0.382863,0,14.09,0.014,-2.36986,0,-1.77569,0,15.79,287.6,0.126,-86,0.097,11.74,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2026,12.98,-0.370103,0.069,14.06,0.016,-2.36988,0,-1.77570,0,15.77,287.5,0.107,-86,0.088,11.74,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2027,13.49,-0.382867,0,14.06,0.019,-2.36989,0,-1.77570,0,15.75,287.5,0.055,-86,0.001,11.74,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2028,13.49,-0.382871,0,14.05,0.01,-2.36991,0,-1.77572,0,15.73,287.5,0.082,-86,0.047,11.74,0.014,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2029,13.49,-0.382873,0,14.04,0.006,-2.36993,0,-1.77573,0,15.7,287.7,0.145,-85.9,0.124,11.74,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2030,13.45,-0.382877,0,14.04,0,-2.36995,0,-1.77575,0,15.68,287.5,0.174,-86,0.115,11.73,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2031,13.03,-0.382879,0,14.03,0.005,-2.36996,0,-1.77576,0,15.66,287.5,0.14,-85.9,0.122,11.72,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2032,12.99,-0.382882,0,14.03,0,-2.36998,0,-1.77577,0,15.63,287.5,0.135,-85.9,0.129,11.72,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2033,13.46,-0.382884,0,14.02,0.004,-2.37000,0,-1.77578,0,15.62,287.6,0.203,-85.8,0.178,11.71,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2034,13.49,-0.382887,0,14.02,0,-2.37001,0,-1.77580,0,15.59,287.7,0.195,-85.7,0.181,11.72,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2035,13.5,-0.382891,0,14.01,0.015,-2.37003,0,-1.77581,0,15.57,287.6,0.179,-85.6,0.128,11.68,0.029,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2036,13.49,-0.382893,0,13.98,0.011,-2.37005,0,-1.77583,0,15.55,287.4,0.107,-85.6,0.097,11.64,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2037,12.96,-0.382897,0,13.97,0.016,-2.37007,0,-1.77584,0,15.53,287.4,0.083,-85.5,0.078,11.63,0.003,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2038,12.98,-0.382899,0,13.95,0.012,-2.37009,0,-1.77585,0,15.51,287.4,0.029,-85.5,0,11.63,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2039,13.47,-0.382903,0,13.94,0.016,-2.37011,0,-1.77587,0,15.49,287.4,0.094,-85.5,0.065,11.62,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2040,13.47,-0.382905,0,13.9,0.014,-2.37012,0,-1.77588,0,15.47,287.3,0.139,-85.3,0.117,11.57,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2041,13.49,-0.382909,0,13.89,0.007,-2.37015,0,-1.77590,0,15.45,287.2,0.135,-85.5,0.001,11.59,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2042,13.5,-0.382911,0,13.89,0.013,-2.37016,0,-1.77591,0,15.43,287.4,0.103,-85.5,0.097,11.61,0.012,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2043,12.97,-0.382915,0,13.88,0.001,-2.37018,0,-1.77592,0,15.41,287.5,0.129,-85.1,0.129,11.57,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2044,13.06,-0.382916,0,13.88,0,-2.37019,0,-1.77593,0,15.39,287.6,0.029,-85,0,11.56,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2045,13.47,-0.382920,0,13.88,0.005,-2.37021,0,-1.77595,0,15.38,287.5,0.084,-85,0.088,11.55,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2046,13.45,-0.382920,0,13.88,0.007,-2.37022,0,-1.77595,0,15.36,287.5,0.029,-85,0,11.55,0.005,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2047,13.49,-0.382924,0,13.87,0.012,-2.37024,0,-1.77597,0,15.34,287.5,0.003,-85,0,11.55,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2048,13.51,-0.382924,0,13.85,0.016,-2.37024,0,-1.77597,0,15.32,287.5,0.107,-85,0.047,11.53,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2049,12.96,-0.382928,0,13.83,0.016,-2.37026,0,-1.77598,0,15.3,287.5,0.086,-85,0,11.54,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2050,13.35,-0.382928,0,13.83,0.013,-2.37026,0,-1.77599,0,15.29,287.5,0.076,-85,0,11.54,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2051,13.51,-0.382931,0,13.84,0.017,-2.37028,0,-1.77600,0,15.27,287.6,0.098,-85,0.097,11.55,0.005,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Adding deprecation warning to get_psm3() function\nDESCRIPTION: Update to get_psm3() to raise a deprecation warning if the leap_day parameter is not specified in a single-year request.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.2.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npvlib.iotools.get_psm3()\n```\n\n----------------------------------------\n\nTITLE: Example Usage of spa_calc_example Function\nDESCRIPTION: This code snippet demonstrates how to use the example function spa_calc_example from the spa_py_example module to calculate solar position. It shows the expected output structure including various parameters relevant to solar position calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/pvlib/spa_c_files/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> from spa_py_example import spa_calc_example\n>>> r = spa_calc_example()\n{\n    'year': 2004,\n    'month': 10,\n    'day': 17,\n    'hour': 12,\n    'minute': 30,\n    'second': 30.0,\n    'delta_ut1': 0.0,\n    'delta_t': 67.0,\n    'time_zone': -7.0,\n    'longitude': -105.1786,\n    'latitude': 39.742476,\n    'elevation': 1830.14,\n    'pressure': 820.0,\n    'temperature': 11.0,\n    'slope': 30.0,\n    'azm_rotation': -10.0,\n    'atmos_refract': 0.5667,\n    'function': 3,\n    'e0': 39.59209464796398,\n    'e': 39.60858878898177,\n    'zenith': 50.39141121101823,\n    'azimuth_astro': 14.311961805946808,\n    'azimuth': 194.3119618059468,\n    'incidence': 25.42168493680471,\n    'suntransit': 11.765833793714224,\n    'sunrise': 6.22578372122376,\n    'sunset': 17.320379610556166\n}\n```\n\n----------------------------------------\n\nTITLE: Solar and Meteorological Data in CSV Format\nDESCRIPTION: Time series data containing solar radiation and weather measurements. Each row represents a minute of data with columns for parameters such as minute of day, year, day of year, time, irradiance values, temperatures, humidity, pressure, and wind measurements. The data appears to be from a solar monitoring station on day 291 of 2018.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,719,619.085,33.5948,105.65,134.518,-7999.0,-7999.0,-7999.0,16.62,13.39,14.7,59.03,928.237,0.67,43.66,2.45\n0,2018,291,720,626.696,34.2382,118.052,138.306,-246.8,-246.8,-246.8,16.64,13.39,14.73,58.87,928.237,1.8,336.6,3.2\n0,2018,291,721,633.641,34.4668,137.724,142.042,-254.7,-246.8,-246.8,16.67,13.38,14.73,58.71,928.2589999999999,1.8719999999999999,315.8,3.95\n0,2018,291,722,638.429,34.9837,144.22899999999998,145.475,-246.8,-246.9,-246.9,16.7,13.38,14.79,58.67,928.289,1.984,344.9,3.95\n0,2018,291,723,643.717,35.3143,147.88,148.994,-246.8,-246.9,-246.9,16.74,13.38,14.85,58.36,928.2539999999999,2.662,327.2,5.45\n0,2018,291,724,649.877,35.7173,151.69799999999998,152.696,-246.8,-246.8,-246.8,16.77,13.38,14.89,58.41,928.289,1.065,71.51,1.7\n0,2018,291,725,655.768,36.3242,155.428,156.44799999999998,-246.8,-246.8,-246.8,16.8,13.38,14.93,58.17,928.305,1.6,0.573,3.95\n0,2018,291,726,660.9639999999999,36.4442,159.046,160.07399999999998,-246.8,-246.8,-246.8,16.83,13.38,14.99,58.14,928.298,1.825,327.1,3.95\n0,2018,291,727,666.943,37.1052,162.918,163.84900000000002,-7999.0,-7999.0,-7999.0,16.87,13.38,15.05,57.94,928.303,1.351,330.3,3.2\n0,2018,291,728,672.493,37.3037,166.68099999999998,167.58599999999998,-246.8,-246.9,-246.8,16.91,13.38,15.11,57.92,928.319,0.7879999999999999,297.1,2.45\n0,2018,291,729,677.4010000000001,37.8569,170.375,171.088,-246.8,-246.8,-246.8,16.94,13.38,15.2,57.45,928.294,1.218,112.3,2.45\n0,2018,291,730,681.24,38.1096,173.94,174.61900000000003,-246.8,-246.9,-246.8,16.98,13.38,15.23,57.34,928.295,0.9940000000000001,22.15,2.45\n0,2018,291,731,684.2819999999999,38.5904,177.208,177.96099999999998,-246.8,-246.9,-246.8,17.02,13.38,15.26,57.27,928.313,0.998,125.3,1.7\n0,2018,291,732,689.752,38.9147,181.092,181.701,-246.8,-246.8,-246.8,17.06,13.38,15.27,57.31,928.33,1.368,69.05,3.2\n0,2018,291,733,695.193,39.3116,184.83,185.517,-246.8,-246.8,-246.8,17.1,13.38,15.26,57.21,928.309,1.228,91.8,1.7\n0,2018,291,734,699.467,39.3355,188.47299999999998,189.08599999999998,-246.8,-246.8,-246.8,17.14,13.38,15.24,57.37,928.32,2.009,321.5,3.95\n0,2018,291,735,704.334,40.0206,192.395,192.89,-246.9,-246.8,-246.8,17.18,13.38,15.28,57.04,928.34,2.937,319.2,4.7\n0,2018,291,736,708.335,40.0326,196.18099999999998,196.614,-7999.0,-7999.0,-7999.0,17.22,13.38,15.32,56.9,928.34,2.59,351.6,5.45\n0,2018,291,737,711.846,40.7182,199.71,200.123,-7999.0,-7999.0,-7999.0,17.26,13.38,15.38,56.9,928.355,2.037,325.5,5.45\n0,2018,291,738,716.298,40.7544,203.608,203.928,-7999.0,-7999.0,-7999.0,17.31,13.38,15.44,56.55,928.3610000000001,2.647,327.9,4.7\n0,2018,291,739,720.1060000000001,41.073,207.234,207.521,-7999.0,-7999.0,-7999.0,17.35,13.37,15.47,56.46,928.377,2.158,320.3,4.7\n0,2018,291,740,723.972,41.4758,211.045,211.25099999999998,-7999.0,-7999.0,-7999.0,17.4,13.37,15.53,56.35,928.362,2.8810000000000002,317.9,5.45\n0,2018,291,741,728.2339999999999,41.7704,214.905,215.01,-7999.0,-7999.0,-7999.0,17.44,13.37,15.58,56.32,928.375,1.618,3.092,3.95\n0,2018,291,742,731.493,42.1972,218.532,218.575,-7999.0,-7999.0,-7999.0,17.49,13.37,15.67,56.29,928.405,0.932,87.4,2.45\n0,2018,291,743,735.2360000000001,42.4437,222.09599999999998,222.139,-281.5,-196.6,-221.8,17.53,13.37,15.74,55.99,928.377,1.6219999999999999,22.02,3.95\n0,2018,291,744,739.926,42.9187,225.963,226.013,-7999.0,-7999.0,-7999.0,17.58,13.37,15.71,55.87,928.3760000000001,1.534,78.0,3.2\n0,2018,291,745,743.8910000000001,42.9608,229.706,229.731,-7999.0,-7999.0,-7999.0,17.63,13.37,15.7,56.08,928.405,1.115,63.98,1.7\n0,2018,291,746,747.3389999999999,43.5079,233.43200000000002,233.34799999999998,-266.8,-246.8,-246.8,17.67,13.37,15.73,56.19,928.3839999999999,1.474,78.59,3.2\n0,2018,291,747,750.492,43.6403,237.028,236.919,-250.2,-246.9,-246.8,17.72,13.37,15.77,55.93,928.377,1.8119999999999998,350.2,3.95\n0,2018,291,748,754.122,43.8569,240.858,240.63299999999998,-265.6,-246.8,-246.8,17.77,13.37,15.8,55.89,928.3860000000001,1.271,126.3,2.45\n0,2018,291,749,756.693,44.3618,244.416,244.18,-257.8,-246.9,-246.8,17.84,13.37,15.85,55.77,928.3889999999999,1.74,2.491,3.95\n0,2018,291,750,761.227,44.3737,248.49200000000002,248.149,-236.6,-221.7,-246.8,17.88,13.37,15.87,55.67,928.372,1.445,50.59,3.2\n0,2018,291,751,764.301,45.0527,252.271,251.821,-257.1,-246.9,-264.1,17.93,13.37,15.94,55.6,928.415,1.127,198.8,3.2\n0,2018,291,752,767.055,45.0825,255.88299999999998,255.40099999999998,-254.2,-246.8,-246.8,17.98,13.37,16.01,55.22,928.423,1.675,318.7,3.95\n0,2018,291,753,770.857,45.1783,259.914,259.175,-248.1,-246.8,-246.8,18.03,13.37,16.12,54.96,928.4010000000001,2.1109999999999998,323.5,4.7\n0,2018,291,754,774.1389999999999,45.7972,263.655,262.857,-246.8,-246.8,-246.8,18.07,13.37,16.14,54.86,928.423,1.2930000000000001,357.0,3.2\n0,2018,291,755,777.22,45.803,267.483,266.546,-289.4,-246.8,-246.8,18.12,13.37,16.21,54.66,928.445,1.421,35.96,3.2\n0,2018,291,756,779.87,45.9892,270.813,270.093,-286.4,-246.8,-246.8,18.17,13.37,16.22,54.45,928.446,1.749,352.3,3.95\n0,2018,291,757,783.117,46.5244,274.791,273.755,-280.3,-246.9,-246.8,18.23,13.36,16.24,54.6,928.462,1.077,129.9,2.45\n0,2018,291,758,785.323,46.5787,278.258,277.241,-260.7,-246.8,-246.8,18.27,13.36,16.3,54.38,928.4760000000001,1.546,313.8,3.2\n0,2018,291,759,787.904,47.216,281.99,280.851,-314.8,-246.9,-246.8,18.32,13.36,16.33,54.48,928.48,1.0290000000000001,328.0,2.45\n0,2018,291,800,791.466,47.2461,286.05400000000003,284.776,-278.3,-246.9,-246.8,18.37,13.36,16.4,54.39,928.508,0.986,43.18,1.7\n0,2018,291,801,794.815,47.3121,289.95,288.431,-286.2,-246.8,-246.8,18.42,13.36,16.5,53.98,928.5189999999999,2.314,323.7,4.7\n0,2018,291,802,797.806,47.9552,293.601,292.132,-255.3,-246.8,-246.8,18.47,13.36,16.52,53.9,928.533,1.0170000000000001,358.0,2.45\n0,2018,291,803,800.55,47.9672,297.288,295.742,-264.0,-246.8,-246.8,18.52,13.36,16.57,53.8,928.515,1.558,49.01,3.95\n0,2018,291,804,803.7330000000001,47.9671,301.092,299.494,-261.0,-246.8,-246.8,18.58,13.36,16.61,53.45,928.523,2.0180000000000002,315.6,5.45\n0,2018,291,805,806.452,48.4176,304.777,303.17,-253.2,-246.9,-246.8,18.63,13.36,16.65,53.33,928.512,2.062,350.7,4.7\n0,2018,291,806,808.21,48.6878,308.297,306.573,-255.5,-246.9,-246.8,18.68,13.36,16.67,53.01,928.513,1.568,44.21,3.95\n0,2018,291,807,810.791,48.6875,312.087,310.198,-258.1,-246.9,-246.8,18.73,13.36,16.74,52.87,928.543,0.8240000000000001,21.03,1.7\n0,2018,291,808,812.3889999999999,49.138000000000005,315.353,313.561,-257.8,-246.8,-246.8,18.78,13.36,16.86,52.47,928.548,2.6839999999999997,310.8,4.7\n0,2018,291,809,815.373,49.4081,319.217,317.265,-246.8,-246.8,-246.8,18.83,13.36,16.91,52.29,928.529,1.79,342.1,3.2\n0,2018,291,810,818.324,49.4079,323.045,321.039,-249.0,-246.8,-246.8,18.88,13.36,17.0,52.05,928.5160000000001,1.714,119.3,3.2\n0,2018,291,811,821.8889999999999,49.4918,327.064,324.916,-252.3,-246.8,-246.8,18.93,13.35,17.07,51.73,928.565,2.002,336.0,3.95\n0,2018,291,812,824.327,50.1047,330.657,328.53,-247.1,-246.8,-246.8,18.99,13.35,17.06,51.66,928.552,1.2819999999999998,166.5,2.45\n0,2018,291,813,826.243,50.1284,334.18199999999996,331.955,-253.1,-246.8,-246.8,19.04,13.35,17.08,51.6,928.553,2.168,348.1,3.95\n0,2018,291,814,828.577,50.1285,337.685,335.457,-247.9,-246.8,-246.8,19.09,13.35,17.06,51.47,928.546,3.562,351.2,6.2\n0,2018,291,815,830.342,50.7417,341.09,338.82800000000003,-249.0,-246.9,-246.8,19.14,13.35,17.02,51.64,928.573,1.8969999999999998,11.85,3.95\n0,2018,291,816,832.597,50.8499,344.889,342.49,-247.9,-246.8,-246.8,19.19,13.35,17.04,51.81,928.577,1.402,65.84,3.2\n0,2018,291,817,835.762,50.85,348.86,346.471,-254.4,-246.8,-246.8,19.24,13.35,17.13,51.68,928.575,2.925,322.4,5.45\n0,2018,291,818,837.305,51.3011,352.18,349.689,-251.0,-246.8,-246.8,19.29,13.35,17.11,51.46,928.5980000000001,2.215,353.3,4.7\n0,2018,291,819,839.873,51.5718,355.85,353.403,-246.8,-246.9,-246.8,19.33,13.35,17.12,51.53,928.575,2.022,29.82,3.95\n0,2018,291,820,842.2360000000001,51.5719,359.50699999999995,356.934,-264.2,-246.9,-221.7,19.39,13.35,17.17,51.46,928.586,1.9369999999999998,7.89,3.95\n0,2018,291,821,844.535,51.62,363.152,360.533,-246.8,-246.9,-246.8,19.43,13.35,17.17,51.48,928.627,1.666,304.6,3.95\n0,2018,291,822,845.935,52.2872,366.722,363.965,-246.8,-246.9,-246.8,19.48,13.35,17.26,51.19,928.597,1.508,333.4,3.2\n0,2018,291,823,848.123,52.2931,370.37199999999996,367.483,-221.7,-246.9,-221.7,19.53,13.35,17.39,51.02,928.5989999999999,0.958,96.6,1.7\n0,2018,291,824,850.058,52.2931,373.97900000000004,370.921,-246.8,-246.8,-246.8,19.57,13.35,17.54,50.82,928.6030000000001,0.715,95.3,1.7\n0,2018,291,825,853.113,52.4072,377.851,374.645,-246.8,-246.8,-246.9,19.62,13.35,17.6,49.93,928.558,3.8810000000000002,309.6,6.2\n0,2018,291,826,855.3789999999999,53.0142,381.279,378.151,-246.8,-246.8,-246.8,19.66,13.35,17.53,50.08,928.569,2.7460000000000004,313.6,4.7\n0,2018,291,827,858.1,53.014,385.051,381.903,-246.8,-246.9,-246.8,19.72,13.35,17.5,49.96,928.592,2.2680000000000002,314.3,5.45\n0,2018,291,828,859.8960000000001,53.0138,388.589,385.42,-246.8,-246.9,-246.8,19.77,13.35,17.52,50.13,928.584,2.5839999999999996,306.8,4.7\n0,2018,291,829,861.6460000000001,53.0196,392.164,388.845,-246.8,-246.8,-246.8,19.83,13.34,17.54,49.44,928.548,3.2,306.0,6.2\n0,2018,291,830,863.4060000000001,53.6204,395.837,392.339,-246.8,-246.8,-246.8,19.87,13.34,17.54,49.84,928.6,1.859,313.0,3.95\n0,2018,291,831,865.115,53.7345,399.344,395.86199999999997,-246.8,-246.9,-246.8,19.92,13.34,17.65,49.89,928.5989999999999,1.001,145.8,2.45\n0,2018,291,832,867.186,53.7404,403.05,399.39099999999996,-7999.0,-7999.0,-7999.0,19.96,13.34,17.76,49.71,928.597,0.797,142.1,2.45\n0,2018,291,833,869.482,54.0889,406.829,403.18300000000005,-246.8,-246.8,-246.8,20.0,13.34,17.89,49.63,928.625,0.45799999999999996,96.6,1.7\n0,2018,291,834,871.294,54.4555,410.343,406.684,-7999.0,-7999.0,-7999.0,20.05,13.34,18.02,49.16,928.6289999999999,1.364,294.3,2.45\n0,2018,291,835,873.453,54.4554,413.901,410.019,-7999.0,-7999.0,-7999.0,20.09,13.34,18.16,47.84,928.596,2.5869999999999997,328.7,3.95\n0,2018,291,836,874.955,54.4554,417.131,413.212,-246.8,-246.8,-246.8,20.14,13.34,18.15,47.25,928.597,3.75,320.4,6.2\n```\n\n----------------------------------------\n\nTITLE: Generating Python Function Documentation Template with Jinja2\nDESCRIPTION: A template that generates documentation for Python functions using Sphinx directives and Jinja2 variables. The template includes function name underline decoration, module reference, autofunction directive, and example gallery inclusion.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/_templates/autosummary/function.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autofunction:: {{ fullname }}\n\n{# not sure how to get the minigallery directive to not render empty #}\n{# galleries, so just use the old `include` style instead #}\n{# .. minigallery:: {{ fullname }} #}\n\n.. include:: gallery_backreferences/{{fullname}}.examples\n```\n\n----------------------------------------\n\nTITLE: Fixing Logic Error in SAPM Function - Python\nDESCRIPTION: Describes a bug fix in the SAPM function to correctly emit deprecation warnings, enhancing the overall user experience and leading to better maintainability of the codebase.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.1.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n* Fix error in logic for emitting deprecation warning in\n  :py:func:`~pvlib.pvsystem.sapm` (:pull:`844`)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing pvlib-python using conda\nDESCRIPTION: Command to install pvlib-python package from the conda-forge channel using conda package manager.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.4.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install pvlib-python -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Parsing Solar Irradiance and Weather Data (CSV)\nDESCRIPTION: This CSV data structure contains timestamped solar irradiance and weather measurements. Each row represents a one-minute interval with various parameters such as date, time, temperature, wind speed, and irradiance values. Some fields contain -7999, likely indicating missing or error values.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_6\n\nLANGUAGE: CSV\nCODE:\n```\n0,2019,319,2310,13.03,-0.383057,0,12.12,0.012,-2.21299,0.169,-1.77659,0,13.28,286.9,0.146,-77.82,0.169,10.05,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2311,13.54,-0.383058,0,12.18,0.018,-2.22429,0.168,-1.76474,0.064,13.28,286.9,0.176,-78,0.219,10.07,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,2312,13.51,-0.383060,0,12.21,0.01,-2.08881,0.126,-1.76476,0.064,13.26,286.9,0.155,-78.33,0.118,10.15,0.027,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Defining Irradiance Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the irradiance documentation using reStructuredText directives. It sets the current module to 'pvlib' and creates a table of contents for various irradiance-related topics.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pvlib\n\nIrradiance\n==========\n\n.. toctree::\n   :maxdepth: 2\n\n   class-methods\n   components\n   transposition\n   decomposition\n   clearness-index\n   albedo\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV Time Series Data in Python\nDESCRIPTION: This code snippet demonstrates how to parse the CSV data using Python's csv module. It reads the file, extracts the headers, and processes each row of data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport csv\n\nwith open('environmental_data.csv', 'r') as f:\n    reader = csv.reader(f)\n    headers = next(reader)  # Assume first row is headers\n    data = []\n    for row in reader:\n        data.append([float(value) if value != '-7999.0' else None for value in row])\n\n# Now 'data' contains all the rows as lists of floats, with -7999.0 replaced by None\n```\n\n----------------------------------------\n\nTITLE: Solving for Current Using Lambert W-Function in LaTeX\nDESCRIPTION: This LaTeX snippet shows the solution for the module current using the Lambert W-Function. It incorporates the previously defined 'z' parameter and expresses the current (I) in terms of various module parameters and the Lambert W-Function W(z).\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/singlediode.rst#2025-04-21_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nI = \\frac{I_L + I_0 - \\frac{V}{R_{sh}}}{1 + \\frac{R_s}{R_{sh}}} - \\frac{n N_s V_{th}}{R_s} W \\left(z \\right)\n```\n\n----------------------------------------\n\nTITLE: Python Function References\nDESCRIPTION: Key Python functions and classes referenced in the release notes that received updates or modifications\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.10.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npvlib.iotools.read_panond\npvlib.iotools.get_pvgis_hourly\npvlib.iotools.get_cams\npvlib.iotools.get_bsrn\npvlib.iotools.read_midc_raw_data_from_nrel\npvlib.tracking.singleaxis\npvlib.pvsystem.SingleAxisTrackerMount\npvlib.clearsky.detect_clearsky\npvlib.irradiance.erbs_driesse\npvlib.iam.interp\npvlib.modelchain.ModelChain\npvlib.pvsystem.PVSystem\npvlib.pvsystem.Array\npvlib.iotools.get_psm3\npvlib.singlediode.bishop88\npvlib.iam.physical\npvlib.iam.schlick_diffuse\npvlib.pvsystem.retrieve_sam\npvlib.snow.loss_townsend\npvlib.iotools.get_pvgis_horizon\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Reference Label\nDESCRIPTION: Sets a reference label for the release notes section that can be linked to from other documentation pages.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.2.1.txt#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _whatsnew_0210:\n```\n\n----------------------------------------\n\nTITLE: Proving Negative Current at Estimated Open Circuit Voltage (LaTeX)\nDESCRIPTION: This series of LaTeX equations proves that the current is negative when the diode voltage equals the estimated open circuit voltage in Bishop's Algorithm. This proof is crucial for establishing the bounds of the bisection search method.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/singlediode.rst#2025-04-21_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nI = I_L - I_0 \\left(\\exp \\left(\\frac{V_{oc, est}}{n N_s V_{th}} \\right) - 1 \\right) - \\frac{V_{oc, est}}{R_{sh}} \\newline\n\nI = I_L - I_0 \\left(\\exp \\left(\\frac{n N_s V_{th} \\log \\left(\\frac{I_L}{I_0} + 1 \\right)}{n N_s V_{th}} \\right) - 1 \\right) - \\frac{n N_s V_{th} \\log \\left(\\frac{I_L}{I_0} + 1 \\right)}{R_{sh}} \\newline\n\nI = I_L - I_0 \\left(\\exp \\left(\\log \\left(\\frac{I_L}{I_0} + 1 \\right) \\right)  - 1 \\right) - \\frac{n N_s V_{th} \\log \\left(\\frac{I_L}{I_0} + 1 \\right)}{R_{sh}} \\newline\n\nI = I_L - I_0 \\left(\\frac{I_L}{I_0} + 1  - 1 \\right) - \\frac{n N_s V_{th} \\log \\left(\\frac{I_L}{I_0} + 1 \\right)}{R_{sh}} \\newline\n\nI = I_L - I_0 \\left(\\frac{I_L}{I_0} \\right) - \\frac{n N_s V_{th} \\log \\left(\\frac{I_L}{I_0} + 1 \\right)}{R_{sh}} \\newline\n\nI = I_L - I_L - \\frac{n N_s V_{th} \\log \\left( \\frac{I_L}{I_0} + 1 \\right)}{R_{sh}} \\newline\n\nI = - \\frac{n N_s V_{th} \\log \\left( \\frac{I_L}{I_0} + 1 \\right)}{R_{sh}}\n```\n\n----------------------------------------\n\nTITLE: Defining Lambert W-Function Parameter in LaTeX\nDESCRIPTION: This LaTeX snippet defines the parameter 'z' used in the Lambert W-Function approach to solve the single diode equation. It includes various module parameters and is necessary for transforming the equation into a form solvable by the Lambert W-Function.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/singlediode.rst#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nz = \\frac{R_s I_0}{n N_s V_{th} \\left(1 + \\frac{R_s}{R_{sh}} \\right)} \\exp \\left( \\frac{R_s \\left( I_L + I_0 \\right) + V}{n N_s V_{th} \\left(1 + \\frac{R_s}{R_{sh}}\\right)} \\right)\n```\n\n----------------------------------------\n\nTITLE: Defining Single Diode Model Equation in LaTeX\nDESCRIPTION: This LaTeX snippet defines the basic single diode model equation for a photovoltaic module. It expresses the current (I) in terms of light-generated current (I_L), saturation current (I_0), voltage (V), series resistance (R_s), shunt resistance (R_sh), and thermal voltage (V_th).\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/singlediode.rst#2025-04-21_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nI = I_L - I_0 \\left(\\exp \\left(\\frac{V + I R_s}{n N_s V_{th}} \\right) - 1 \\right) - \\frac{V + I R_s}{R_{sh}}\n```\n\n----------------------------------------\n\nTITLE: Python Module Declaration\nDESCRIPTION: Module declaration for pvlib.iotools package that contains data handling utilities.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/iotools.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. py:module:: pvlib.iotools\n```\n\n----------------------------------------\n\nTITLE: Environmental Time Series Data in CSV Format\nDESCRIPTION: This data contains environmental measurements taken at one-minute intervals from 16:20 to 17:26 on day 319 of 2019. Each row includes multiple parameters such as temperature, radiation levels, and various sensor readings, with -7999 values indicating missing data points.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_4\n\nLANGUAGE: csv\nCODE:\n```\n0,2019,319,1620,13.37,703.084,1.093,21.85,0.003,257.043,1.098,48.9472,0,24.22,308.1,0.229,-104.3,0.24,18.88,0.003,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1621,13.36,699.161,1.137,21.81,0.03,253.302,1.093,48.4745,0.264,24.2,308.3,0.17,-104,0.078,18.85,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1622,13.36,694.503,1.507,21.76,0.012,249.315,1.152,48.2385,0,24.18,308,0.097,-104.1,0.097,18.83,0.004,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1623,13.36,690.783,0.976,21.76,0,245.686,1.046,48.0258,0.298,24.16,308,0.135,-104,0.081,18.81,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1624,13.36,687.132,1.106,21.74,0.017,242.127,1.025,47.5298,0,24.14,307.7,0.121,-104,0,18.77,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1625,13.37,684.010,0.996,21.74,0.017,238.769,0.998,47.4944,0.106,24.12,307.5,0.071,-104,0.065,18.73,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1626,13.35,680.373,1.578,21.75,0.005,235.210,1.202,47.0220,0.218,24.1,307.6,0.137,-103.9,0.145,18.73,0.012,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1627,13.37,676.154,0.885,21.75,0,231.468,0.975,46.8210,0,24.08,307.6,0.125,-103.9,0.125,18.72,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1628,13.36,672.618,0.977,21.71,0.022,227.965,0.992,46.5141,0.286,24.06,307.8,0.162,-103.7,0.166,18.71,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1629,13.34,668.540,1.112,21.71,0.021,224.539,0.938,46.1121,0,24.04,308,0.184,-103.6,0.172,18.73,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1630,13.33,664.492,1.157,21.75,0,220.878,1.074,46.0889,0.088,24.02,308.1,0.147,-103.8,0.211,18.8,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1631,13.35,661.855,0.944,21.77,0.018,217.598,1.032,45.4742,0.169,24.01,308,0.213,-104.3,0.25,18.86,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1632,13.36,657.526,1.371,21.82,0.018,213.779,1.166,45.2026,0.27,23.99,307.8,0.075,-104.6,0,18.87,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1633,13.37,653.359,1.307,21.84,0.001,210.048,1.069,44.7297,0.106,23.98,307.8,0.174,-104.7,0.198,18.9,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1634,13.36,648.634,1.276,21.83,0,206.138,1.157,44.2925,0.3,23.96,307.9,0.103,-104.6,0,18.89,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1635,13.37,644.225,1.078,21.83,0.001,202.362,0.986,43.9379,0.121,23.95,307.8,0.083,-104.5,0.078,18.86,0.008,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1636,13.33,640.149,1.486,21.82,0.017,198.858,1.018,43.2996,0.088,23.93,307.5,0.161,-104.5,0.123,18.82,0.012,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1637,13.37,635.931,1.282,21.78,0.03,195.251,1.042,43.1223,0.198,23.93,307.5,0.106,-104.4,0.182,18.79,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1638,13.36,630.414,1.721,21.74,0,191.476,1.1,42.5668,0,23.91,307.6,0.121,-104,0.046,18.74,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1639,13.36,625.202,1.387,21.74,0.001,187.745,0.973,42.4959,0.142,23.9,307.7,0.169,-103.6,0.133,18.69,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1640,13.36,621.278,1.224,21.7,0.027,184.308,0.966,41.9167,0.132,23.87,307.6,0.11,-103.5,0.046,18.65,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1641,13.36,616.065,1.915,21.64,0.016,180.532,1.17,41.3965,0.261,23.87,307.6,0.184,-103.1,0.156,18.57,0.04,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1642,13.36,610.433,1.286,21.57,0.013,176.757,0.981,41.1128,0.106,23.85,307.2,0.173,-102.9,0.179,18.48,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1643,13.37,606.355,1.075,21.49,0.025,173.308,1.017,40.4862,0.121,23.83,307.3,0.124,-102.5,0,18.42,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1644,13.37,601.512,1.366,21.46,0.017,169.836,1.025,40.2380,0.254,23.81,307.1,0.086,-102.5,0,18.38,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1645,13.37,595.917,1.636,21.39,0.016,166.072,1.049,39.7296,0,23.79,306.9,0.151,-102.5,0,18.34,0.027,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1646,13.35,591.367,1.308,21.37,0.011,162.600,1,39.2331,0.196,23.77,306.8,0.096,-102.4,0.096,18.32,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1647,13.35,586.702,1.451,21.3,0.019,159.208,0.989,38.973,0.121,23.75,306.7,0.152,-102.3,0.128,18.29,0.017,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1648,13.36,581.502,2.287,21.28,0.011,155.567,1.189,38.37,0.132,23.72,306.9,0.158,-102.1,0.172,18.27,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1649,13.34,575.626,1.629,21.22,0.026,151.926,0.96,37.8498,0.261,23.7,306.8,0.098,-101.9,0.096,18.22,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1650,13.34,569.725,1.949,21.2,0.007,148.285,1.11,37.4714,0.214,23.68,306.7,0.088,-101.9,0.088,18.22,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1651,13.36,564.295,1.936,21.16,0.02,144.791,1.07,36.9039,0.064,23.65,306.6,0.124,-101.9,0.096,18.19,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1652,13.37,558.355,2.205,21.11,0.006,141.196,1.072,36.5729,0.295,23.63,306.6,0.119,-101.6,0.145,18.13,0.019,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1653,13.34,551.488,1.82,21.1,0.011,137.578,1.077,36.1001,0.15,23.6,306.6,0.088,-101.5,0.088,18.12,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1654,13.35,545.281,1.75,21.06,0.017,134.016,1.011,35.5090,0.106,23.58,306.6,0.057,-101.5,0.046,18.12,0.006,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1655,13.36,539.257,1.88,21.02,0.008,130.535,1.022,34.9773,0.269,23.55,306.4,0.052,-101.5,0,18.07,0.009,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1656,13.36,532.833,1.977,21.01,0.01,127.097,1.059,34.5871,0.238,23.52,306.4,0.025,-101.5,0,18.07,0.004,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1657,13.35,525.405,2.088,20.99,0.004,123.502,1.056,34.0552,0,23.5,306.2,0.1,-101.5,0,18.03,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1658,13.39,517.947,2.153,20.99,0.006,119.906,1.068,33.4995,0.237,23.47,306.1,0.138,-101.4,0.129,18.02,0.011,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1659,13.37,510.849,1.952,20.99,0.01,116.479,1.017,33.1448,0.254,23.45,306.1,0,-101.5,0,18.02,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1700,13.36,502.780,2.59,20.97,0.022,112.782,1.117,32.5418,0.182,23.42,306.1,0.042,-101.5,0,18.02,0.007,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1701,13.36,495.313,2.03,20.92,0.009,109.232,0.972,31.9154,0.064,23.39,305.9,0.158,-101.4,0.11,17.98,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1702,13.36,487.741,2.048,20.9,0,105.794,1.018,31.2887,0.169,23.36,306.1,0.239,-101.2,0.244,17.96,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1703,13.37,479.737,2.468,20.87,0.024,102.322,0.979,30.8394,0.241,23.34,306.1,0,-100.9,0,17.92,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1704,13.33,471.999,2.312,20.83,0.009,98.9969,0.995,30.2718,0.248,23.3,306,0.089,-100.9,0.078,17.9,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1705,13.38,463.841,2.308,20.82,0.012,95.5926,1.016,29.7161,0.15,23.28,305.9,0.124,-100.9,0.114,17.87,0.012,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1706,13.36,455.848,2.358,20.81,0.019,92.2671,0.973,29.1012,0.144,23.24,305.8,0.145,-100.6,0.128,17.82,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1707,13.37,447.332,2.667,20.82,0.004,88.9755,1.016,28.4863,0.187,23.22,305.7,0.133,-100.6,0.129,17.8,0.004,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1708,13.36,438.128,2.71,20.8,0.026,85.5375,1.007,27.8714,0.237,23.18,305.4,0.201,-100.6,0.125,17.73,0.038,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1709,13.38,429.053,2.309,20.72,0.008,82.2348,0.933,27.2803,0.295,23.16,305.3,0.096,-100.5,0.096,17.7,0,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1710,13.37,420.448,2.821,20.72,0.003,79.0672,0.934,26.6890,0.27,23.13,305.1,0.15,-100.4,0,17.66,0.027,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1711,13.35,410.862,2.772,20.69,0.025,75.8320,0.927,26.0741,0.238,23.1,305.1,0.111,-100.3,0.127,17.63,0.016,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1712,13.37,401.111,3.21,20.63,0.012,72.5969,0.973,25.4593,0.15,23.06,305.1,0.108,-100,0.103,17.58,0.015,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1713,13.38,390.735,5.006,20.61,0.008,69.5422,0.853,24.8209,0.112,23.03,304.9,0.048,-99.9,0,17.53,0.009,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1714,13.39,382.272,2.72,20.55,0.03,66.5214,0.891,24.1588,0.14,23,304.7,0.145,-99.9,0,17.49,0.026,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1715,13.38,371.718,3.138,20.52,0.006,63.3089,0.901,23.5085,0.203,22.97,304.6,0.181,-99.7,0.168,17.44,0.023,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1716,13.36,361.317,2.911,20.47,0.026,60.3107,0.879,22.8346,0.194,22.94,304.8,0.049,-99.4,0,17.42,0.009,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1717,13.36,351.069,2.993,20.43,0.007,57.4250,0.905,22.2552,0.289,22.91,304.7,0.121,-99.4,0,17.4,0.022,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1718,13.36,340.503,3.028,20.41,0.015,54.4155,0.87,21.5577,0.313,22.88,304.5,0.008,-99.4,0,17.37,0.001,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1719,13.4,329.438,3.094,20.35,0.022,51.4733,0.826,20.8246,0.292,22.84,304.5,0.127,-99.3,0.114,17.34,0.02,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1720,13.38,318.298,3.326,20.33,0.001,48.6780,0.851,20.1862,0.309,22.81,304.3,0.134,-99.3,0.125,17.31,0.007,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1721,13.4,306.940,3.523,20.31,0.018,45.8259,0.845,19.4767,0.335,22.78,304,0.131,-99.4,0.096,17.27,0.018,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1722,13.4,294.653,3.001,20.25,0.017,42.9742,0.79,18.6372,0.255,22.74,304,0.185,-99.2,0.114,17.24,0.024,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1723,13.38,280.527,8.54,20.21,0.021,40.2461,0.756,17.8804,0.269,22.71,304,0.156,-99,0.152,17.2,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1724,13.39,271.21,3.651,20.15,0.016,37.6648,0.723,17.1237,0.223,22.68,303.8,0.114,-98.9,0,17.15,0.021,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1725,13.38,258.525,3.664,20.13,0.01,35.0944,0.744,16.4497,0.215,22.65,303.7,0.108,-98.8,0.125,17.1,0.01,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1726,13.4,245.396,3.44,20.09,0.024,32.6145,0.697,15.6929,0.218,22.61,303.7,0.135,-98.5,0.142,17.06,0.01,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Publishing ASV Benchmark Results to HTML\nDESCRIPTION: Command to generate an HTML report from the benchmark results after running the benchmarks.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ asv publish\n```\n\n----------------------------------------\n\nTITLE: Referencing Release Notes Version 0.2.0\nDESCRIPTION: ReStructuredText reference label for version 0.2.0 release notes documentation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _whatsnew_0200:\n```\n\n----------------------------------------\n\nTITLE: Estimating Open Circuit Voltage in Bishop's Algorithm (LaTeX)\nDESCRIPTION: This LaTeX snippet shows the estimation of open circuit voltage used in Bishop's Algorithm. It's used as an upper bound for the bisection search method to find specific points on the IV curve.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/singlediode.rst#2025-04-21_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nV_{oc, est} = n N_s V_{th} \\log \\left( \\frac{I_L}{I_0} + 1 \\right)\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks Across Version Range\nDESCRIPTION: Command to generate benchmark timings across multiple versions of the project, from v0.6.0 to v0.8.0.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ asv run v0.6.0..v0.8.0\n```\n\n----------------------------------------\n\nTITLE: Solar Monitoring Time Series Data (CSV)\nDESCRIPTION: Comma-separated sensor data with columns for timestamp, radiation measurements, temperatures, and other environmental parameters. Data is recorded at 1-minute intervals with -7999 used as null/missing value indicator.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_short_header_20191115.txt#2025-04-21_snippet_2\n\nLANGUAGE: csv\nCODE:\n```\n0,2019,319,1046,13.47,1.33990,0.191,17.54,0.009,326.345,2.131,325.157,2.028,17.72,364.7,0.255,-24.22,0.198,14.63,0.013,-7999,-7999,-7999,-7999,0,-7999\n0,2019,319,1047,13.47,1.68444,0.29,17.54,0.007,334.345,2.461,332.519,2.135,17.74,363.7,0.46,-25.23,0.456,14.63,0.001,-7999,-7999,-7999,-7999,0,-7999\n```\n\n----------------------------------------\n\nTITLE: Importing Albedo Function in Python\nDESCRIPTION: This snippet demonstrates how to import the inland_water_dvoracek function from the albedo module in pvlib. This function is likely used for calculating albedo of inland water bodies.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/reference/irradiance/albedo.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.albedo import inland_water_dvoracek\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: RST markup for organizing documentation sections using toctree directives. Defines the structure for getting started guides, modeling topics, and extras sections.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _user_guide:\n\n==========\nUser Guide\n==========\n\nThis user guide is an overview and explains some of the key features of pvlib.\n\n.. toctree::\n   :caption: Getting started\n   :maxdepth: 2\n\n   getting_started/package_overview\n   getting_started/installation\n   getting_started/introtutorial\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Modeling topics\n\n   modeling_topics/pvsystem\n   modeling_topics/modelchain\n   modeling_topics/timetimezones\n   modeling_topics/bifacial\n   modeling_topics/clearsky\n   modeling_topics/weather_data\n   modeling_topics/singlediode\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Extras\n\n   extras/nomenclature\n   extras/faq\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks on Windows\nDESCRIPTION: Windows-specific command syntax for running benchmarks on a specific commit. Windows shells may require double-carets for proper escaping.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ asv run e42f8d24^^!\n```\n\n----------------------------------------\n\nTITLE: Solar Measurement CSV Data\nDESCRIPTION: Comma-separated values containing atmospheric measurements including pressure, temperature, humidity and other parameters. Data is recorded at one-minute intervals with timestamps and includes both raw sensor readings and derived calculations.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,1223,1001.68,68.1692,826.3710000000001,809.056,-7999.0,-7999.0,-7999.0,26.17,13.25,24.2,34.55,927.355,1.107,297.4,2.45\n0,2018,291,1224,1001.94,68.1692,826.574,809.113,-7999.0,-7999.0,-7999.0,26.21,13.25,24.34,33.6,927.335,2.322,286.7,4.7\n[...additional lines truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Display Time Range\nDESCRIPTION: Outputs the generated range of times to the console.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/tutorials/solarposition.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntimes\n```\n\n----------------------------------------\n\nTITLE: Parsing Weather Station CSV Data in Python\nDESCRIPTION: This code snippet demonstrates how to parse the weather station CSV data using Python. It reads the file, processes each row, and extracts relevant meteorological information.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nfrom datetime import datetime\n\ndef parse_weather_data(filename):\n    data = []\n    with open(filename, 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            timestamp = datetime(int(row[1]), 1, 1).replace(day=int(row[2])) + timedelta(minutes=int(row[3]))\n            temperature = float(row[23])\n            humidity = float(row[26])\n            pressure = float(row[27])\n            wind_speed = float(row[28])\n            wind_direction = float(row[29])\n            \n            data.append({\n                'timestamp': timestamp,\n                'temperature': temperature,\n                'humidity': humidity,\n                'pressure': pressure,\n                'wind_speed': wind_speed,\n                'wind_direction': wind_direction\n            })\n    \n    return data\n\n# Usage\nweather_data = parse_weather_data('weather_station_data.csv')\nfor entry in weather_data:\n    print(f\"Timestamp: {entry['timestamp']}, Temp: {entry['temperature']}°C, Humidity: {entry['humidity']}%\")\n```\n\n----------------------------------------\n\nTITLE: Fixing Inplace Parameter Usage in TMY Recolumn Function\nDESCRIPTION: Bug fix for the usage of the inplace parameter in the tmy._recolumn function. This ensures correct behavior when reordering columns in TMY data.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.5.1.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ntmy._recolumn(inplace=True)\n```\n\n----------------------------------------\n\nTITLE: RST Version Header Definition\nDESCRIPTION: ReStructuredText markup defining the version header and reference label for pvlib-python v0.3.2 release notes\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.3.2.txt#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _whatsnew_0320:\\n\\nv0.3.2 (May 3, 2016)\\n-----------------------\n```\n\n----------------------------------------\n\nTITLE: Parsing Weather Data CSV in Python\nDESCRIPTION: This CSV data represents weather measurements taken at regular intervals. Each row contains values for date, time, temperature, humidity, wind speed, wind direction, and other meteorological parameters. The data is likely used for solar energy analysis in the PVLib Python project.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_10\n\nLANGUAGE: CSV\nCODE:\n```\n0,2018,291,2102,-0.433433,0.0,-2.5899900000000002,-2.7418400000000003,-7999.0,-7999.0,-7999.0,22.98,13.29,19.65,50.56,927.1569999999999,1.625,320.9,2.45\n0,2018,291,2103,-0.433432,0.0,-2.5899799999999997,-2.7418299999999998,-7999.0,-7999.0,-7999.0,22.95,13.3,19.62,50.62,927.1289999999999,2.025,307.5,3.2\n0,2018,291,2104,-0.43343100000000007,0.0,-2.5899799999999997,-2.7418299999999998,-7999.0,-7999.0,-7999.0,22.95,13.29,19.59,50.87,927.132,0.55,194.3,1.7\n```\n\n----------------------------------------\n\nTITLE: Importing Deprecated PVFactors Timeseries Function in Python\nDESCRIPTION: Shows the deprecated and new import paths for the pvfactors_timeseries function, which has been moved to a sub-package.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.9.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pvlib.bifacial import pvfactors_timeseries  # Deprecated\nfrom pvlib.bifacial.pvfactors import pvfactors_timeseries  # New import\n```\n\n----------------------------------------\n\nTITLE: Referencing pvlib-python v0.7.2 Release Notes\nDESCRIPTION: ReStructuredText directive to reference the release notes for pvlib-python version 0.7.2.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.7.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _whatsnew_0720:\n```\n\n----------------------------------------\n\nTITLE: Importing TMY data from URL in Python\nDESCRIPTION: New feature allowing TMY (Typical Meteorological Year) data to be loaded from a URL in pvlib-python v0.1.0. This functionality is referenced in the release notes but no specific code snippet is provided.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.1.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Example usage (not provided in original text):\n# tmy_data = pvlib.tmy.load_tmy_from_url(url)\n```\n\n----------------------------------------\n\nTITLE: Including Version-Specific Release Notes in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include multiple external reStructuredText files containing release notes for different versions of pvlib-python. It uses the '.. include::' directive to incorporate separate files for each version.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: whatsnew/v0.12.1.rst\n.. include:: whatsnew/v0.12.0.rst\n.. include:: whatsnew/v0.11.2.rst\n.. include:: whatsnew/v0.11.1.rst\n.. include:: whatsnew/v0.11.0.rst\n.. include:: whatsnew/v0.10.5.rst\n.. include:: whatsnew/v0.10.4.rst\n.. include:: whatsnew/v0.10.3.rst\n.. include:: whatsnew/v0.10.2.rst\n.. include:: whatsnew/v0.10.1.rst\n.. include:: whatsnew/v0.10.0.rst\n.. include:: whatsnew/v0.9.5.rst\n.. include:: whatsnew/v0.9.4.rst\n.. include:: whatsnew/v0.9.3.rst\n.. include:: whatsnew/v0.9.2.rst\n.. include:: whatsnew/v0.9.1.rst\n.. include:: whatsnew/v0.9.0.rst\n.. include:: whatsnew/v0.8.1.rst\n.. include:: whatsnew/v0.8.0.rst\n.. include:: whatsnew/v0.7.2.rst\n.. include:: whatsnew/v0.7.1.rst\n.. include:: whatsnew/v0.7.0.rst\n.. include:: whatsnew/v0.6.3.rst\n.. include:: whatsnew/v0.6.2.rst\n.. include:: whatsnew/v0.6.1.rst\n.. include:: whatsnew/v0.6.0.rst\n.. include:: whatsnew/v0.5.2.rst\n.. include:: whatsnew/v0.5.1.rst\n.. include:: whatsnew/v0.5.0.rst\n.. include:: whatsnew/v0.4.5.txt\n.. include:: whatsnew/v0.4.4.txt\n.. include:: whatsnew/v0.4.3.txt\n.. include:: whatsnew/v0.4.2.txt\n.. include:: whatsnew/v0.4.1.txt\n.. include:: whatsnew/v0.4.0.txt\n.. include:: whatsnew/v0.3.3.txt\n.. include:: whatsnew/v0.3.2.txt\n.. include:: whatsnew/v0.3.1.txt\n.. include:: whatsnew/v0.3.0.txt\n.. include:: whatsnew/v0.2.2.txt\n.. include:: whatsnew/v0.2.1.txt\n.. include:: whatsnew/v0.2.0.txt\n.. include:: whatsnew/v0.1.0.txt\n```\n\n----------------------------------------\n\nTITLE: Weather Station Raw Data Records\nDESCRIPTION: Comma-separated data containing measurements like temperature, pressure, wind speed and direction recorded at 1-minute intervals. Each row represents a timestamp with multiple sensor readings. Missing data is indicated by -7999.0 values.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,2214,-0.433432,0.0,-2.57765,-2.7418400000000003,-7999.0,-7999.0,-7999.0,21.82,13.31,18.95,53.78,927.2510000000001,0.953,306.1,1.7\n0,2018,291,2215,-0.433435,0.0,-2.59,-2.74185,-7999.0,-7999.0,-7999.0,21.81,13.31,18.91,54.09,927.257,0.8240000000000001,356.0,2.45\n```\n\n----------------------------------------\n\nTITLE: Citing References in Python Docstring\nDESCRIPTION: Example of how to cite references and generate a reference list using the IEEE style in a Python docstring. It covers various types of references including journal articles, conference papers, books, technical reports, and websites.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/style_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"This is the recommended citation for the pvlib-python project [1]_. There\nare also some conference papers linked to pvlib, for example [2]_.\n\nOther types of reference you may find in the pvlib-python documentation\ninclude books [3]_, technical reports [4]_, and websites [5]_.\n\nReferences\n----------\n.. [1] K. Anderson, C. Hansen, W. Holmgren, A. Jensen, M. Mikofski,\n       and A Driesse. \"pvlib python: 2023 project update.\" J. Open Source\n       Softw. vol. 8, no. 92, pp. 5994, Dec 2023,\n       :doi:`10.21105/joss.05994`.\n\n.. [2] J. S. Stein, \"The Photovoltaic Performance Modeling Collaborative\n       (PVPMC),\" In Proc. 38th IEEE Photovoltaic Specialists Conference\n       (PVSC), Austin, TX, USA, 2012, pp. 3048-3052,\n       :doi:`10.1109/PVSC.2012.6318225`.\n\n.. [3] J. A. Duffie and W. A. Beckman, \"Solar Radiation\" in Solar\n       Engineering of Thermal Processes, 3rd ed, New York, USA, J. Wiley\n       and Sons, 2006, ch. 1, sec. 1.5, pp.9-11.\n\n.. [4] R. Bird and C. Riordan, \"Simple solar spectral model for direct and\n       diffuse irradiance on horizontal and tilted planes at the earth's\n       surface for cloudless atmospheres\", NREL, Golden, CO, USA, Technical\n       Report TR-215-2436, 1984, :doi:`10.2172/5986936`.\n\n.. [5] \"PVPMC Home.\" Sandia National Laboratories PV Performance Modeling\n       Collaborative. Accessed: Oct. 17, 2024. [Online.] Available:\n       <https://pvpmc.sandia.gov/>_\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Templating Class Documentation in Sphinx with Jinja2\nDESCRIPTION: A Jinja2 template for generating Sphinx documentation for Python classes. The template creates sections for methods and attributes of the class, and includes example galleries from the gallery_backreferences directory.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/_templates/autosummary/class.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree:\n      :recursive:\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{# not sure how to get the minigallery directive to not render empty #}\n{# galleries, so just use the old `include` style instead #}\n{# .. minigallery:: {{ fullname }} #}\n\n.. include:: gallery_backreferences/{{fullname}}.examples\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Contributing Guide\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes links to various sections of the contributing guide such as introduction, code contribution, style guide, and testing.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/contributing/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _contributing:\n\n============\nContributing\n============\n\n\n.. toctree::\n   :maxdepth: 2\n\n   introduction_to_contributing\n   how_to_contribute_new_code\n   style_guide\n   testing\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks Between Git Branches\nDESCRIPTION: Command to run benchmarks for all commits between main and feature branches. This generates performance metrics for each commit in the range.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ asv run main..feature\n```\n\n----------------------------------------\n\nTITLE: Running ASV Benchmarks for Specific Commit\nDESCRIPTION: Command to run benchmarks for a specific commit using its git hash. The caret and exclamation mark syntax is used to specify testing only that exact commit.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ asv run e42f8d24^!\n```\n\n----------------------------------------\n\nTITLE: Comparing ASV Benchmark Results Between Commits\nDESCRIPTION: Command to compare performance benchmark results between two specific git commits. The output shows the timing ratios to identify performance changes.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/benchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ asv compare 0ff98b62 e42f8d24\n```\n\n----------------------------------------\n\nTITLE: Calculating AOI for a PV System (Repeated)\nDESCRIPTION: This snippet repeats the AOI calculation for a PV system. It calls `get_aoi` with solar zenith and azimuth angles and prints the result. It showcases a simple example of calculating the angle of incidence.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/user_guide/modeling_topics/pvsystem.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    aoi = system.get_aoi(solar_zenith=30, solar_azimuth=180)\n    print(aoi)\n    system_multiarray.get_iam(aoi)\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Sensor Time Series Data\nDESCRIPTION: CSV data log containing timestamp-based sensor measurements with multiple numeric columns representing environmental and performance metrics\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n0,2018,291,110,-0.433403,0.0,-2.2445,-2.7130900000000002,-7999.0,-7999.0,-7999.0,17.98,13.37,15.39,51.78,927.837,1.7930000000000001,318.3,3.95\n```\n\n----------------------------------------\n\nTITLE: Referencing PVLib Function in Python\nDESCRIPTION: Example of how to reference the 'erbs' function from the PVLib irradiance module in Python documentation.\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/docs/sphinx/source/whatsnew/v0.6.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n:py:func:`~pvlib.irradiance.erbs`\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/pvlib/pvlib-python.git/blob/main/tests/data/midc_raw_20181018.txt#2025-04-21_snippet_1\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```"
  }
]