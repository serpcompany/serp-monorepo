[
  {
    "owner": "aio-libs",
    "repo": "aiohttp",
    "content": "TITLE: AIOHTTP Server Example with Route Handling\nDESCRIPTION: Basic server example showing how to create a web application with AIOHTTP. Demonstrates defining route handlers, creating a web Application instance, adding routes, and running the server.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def handle(request):\n    name = request.match_info.get('name', \"Anonymous\")\n    text = \"Hello, \" + name\n    return web.Response(text=text)\n\napp = web.Application()\napp.add_routes([web.get('/', handle),\n                web.get('/{name}', handle)])\n\nif __name__ == '__main__':\n    web.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with aiohttp ClientSession\nDESCRIPTION: Method to perform asynchronous HTTP requests using aiohttp ClientSession. Supports various parameters for customizing the request including headers, authentication, redirects, compression, and timeout settings.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrequest(method, url, *, params=None, data=None, json=None,\n                         cookies=None, headers=None, skip_auto_headers=None, \n                         auth=None, allow_redirects=True,\n                         max_redirects=10,\n                         compress=None, chunked=None, expect100=False, raise_for_status=None,\n                         read_until_eof=True, \n                         proxy=None, proxy_auth=None,\n                         timeout=sentinel, ssl=True, \n                         server_hostname=None, \n                         proxy_headers=None, \n                         trace_request_ctx=None, \n                         read_bufsize=None, \n                         auto_decompress=None, \n                         max_line_size=None, \n                         max_field_size=None)\n```\n\n----------------------------------------\n\nTITLE: Simple aiohttp Web Server Implementation\nDESCRIPTION: Shows how to create a basic web server using aiohttp. The example includes route handling for regular HTTP requests and WebSocket connections, with different response types based on request parameters and WebSocket message types.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# examples/server_simple.py\nfrom aiohttp import web\n\nasync def handle(request):\n    name = request.match_info.get('name', \"Anonymous\")\n    text = \"Hello, \" + name\n    return web.Response(text=text)\n\nasync def wshandle(request):\n    ws = web.WebSocketResponse()\n    await ws.prepare(request)\n\n    async for msg in ws:\n        if msg.type == web.WSMsgType.text:\n            await ws.send_str(\"Hello, {}\".format(msg.data))\n        elif msg.type == web.WSMsgType.binary:\n            await ws.send_bytes(msg.data)\n        elif msg.type == web.WSMsgType.close:\n            break\n\n    return ws\n\n\napp = web.Application()\napp.add_routes([web.get('/', handle),\n                web.get('/echo', wshandle),\n                web.get('/{name}', handle)])\n\nif __name__ == '__main__':\n    web.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: AIOHTTP Client Example with Async/Await\nDESCRIPTION: Basic client example demonstrating how to create an asynchronous HTTP request using AIOHTTP. Shows the creation of a client session, making a GET request, and handling the response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n\nasync def main():\n\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://python.org') as response:\n\n            print(\"Status:\", response.status)\n            print(\"Content-type:\", response.headers['content-type'])\n\n            html = await response.text()\n            print(\"Body:\", html[:15], \"...\")\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic aiohttp Web Server in Python\nDESCRIPTION: This snippet shows how to create a simple web server using aiohttp. It defines a request handler, creates an Application instance, adds a route, and runs the server.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\napp = web.Application()\napp.add_routes([web.get('/', hello)])\n\nweb.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Request Handler in aiohttp\nDESCRIPTION: This snippet shows a basic request handler implementation in aiohttp. It's a coroutine that accepts a Request object and returns a Response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    return web.Response()\n```\n\n----------------------------------------\n\nTITLE: Making Basic GET Request\nDESCRIPTION: Example of making a GET request to httpbin.org using aiohttp's ClientSession with async/await pattern\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://httpbin.org/get') as resp:\n            print(resp.status)\n            print(await resp.text())\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Generator for File Streaming in Python using aiohttp and aiofiles\nDESCRIPTION: This snippet defines an asynchronous generator function for streaming file contents. It uses aiofiles for asynchronous file I/O and yields chunks of the file. This can be used for efficient streaming of large files in aiohttp requests.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def file_sender(file_name=None):\n    async with aiofiles.open(file_name, 'rb') as f:\n        chunk = await f.read(64*1024)\n        while chunk:\n            yield chunk\n            chunk = await f.read(64*1024)\n\n# Then you can use file_sender as a data provider:\n\nasync with session.post('http://httpbin.org/post',\n                        data=file_sender(file_name='huge_file')) as resp:\n    print(await resp.text())\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Based Views in aiohttp\nDESCRIPTION: This snippet demonstrates how to create and use class-based views in aiohttp, handling different HTTP methods within a single class.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass MyView(web.View):\n    async def get(self):\n        return await get_resp(self.request)\n\n    async def post(self):\n        return await post_resp(self.request)\n\napp.add_routes([web.view('/path/to', MyView)])\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request using aiohttp Client\nDESCRIPTION: Demonstrates how to create an asynchronous HTTP client session to fetch content from a website. The example shows creating a ClientSession, making a GET request, and processing the response including status code, headers, and body text.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n\nasync def main():\n\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://python.org') as response:\n\n            print(\"Status:\", response.status)\n            print(\"Content-type:\", response.headers['content-type'])\n\n            html = await response.text()\n            print(\"Body:\", html[:15], \"...\")\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using Route Decorators with aiohttp in Python\nDESCRIPTION: This example demonstrates how to use route decorators to define handlers in aiohttp. It creates a RouteTableDef, defines a decorated handler, and adds the routes to the application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroutes = web.RouteTableDef()\n\n@routes.get('/')\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\napp = web.Application()\napp.add_routes(routes)\nweb.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistent aiohttp ClientSession (Python)\nDESCRIPTION: This snippet shows how to create a persistent ClientSession using aiohttp's cleanup context. It demonstrates how to initialize the session, use it in request handlers, and properly close it when the application shuts down.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napp.cleanup_ctx.append(persistent_session)\npersistent_session = aiohttp.web.AppKey(\"persistent_session\", aiohttp.ClientSession)\n\nasync def persistent_session(app):\n   app[persistent_session] = session = aiohttp.ClientSession()\n   yield\n   await session.close()\n\nasync def my_request_handler(request):\n   session = request.app[persistent_session]\n   async with session.get(\"http://python.org\") as resp:\n       print(resp.status)\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Routes to an aiohttp Application\nDESCRIPTION: This example demonstrates how to add multiple routes to an aiohttp application using different HTTP methods.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp.add_routes([web.get('/', handler),\n                web.post('/post', post_handler),\n                web.put('/put', put_handler)])\n```\n\n----------------------------------------\n\nTITLE: WebSocket Handler Implementation in AIOHTTP\nDESCRIPTION: Complete WebSocket handler implementation showing message processing and response handling.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def websocket_handler(request):\n\n    ws = web.WebSocketResponse()\n    await ws.prepare(request)\n\n    async for msg in ws:\n        if msg.type == aiohttp.WSMsgType.TEXT:\n            if msg.data == 'close':\n                await ws.close()\n            else:\n                await ws.send_str(msg.data + '/answer')\n        elif msg.type == aiohttp.WSMsgType.ERROR:\n            print('ws connection closed with exception %s' %\n                  ws.exception())\n\n    print('websocket connection closed')\n\n    return ws\n```\n\n----------------------------------------\n\nTITLE: Initializing aiohttp Client Session\nDESCRIPTION: Basic setup for making HTTP requests with aiohttp by importing required modules and creating a client session\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n```\n\n----------------------------------------\n\nTITLE: Running an AioHTTP Web Application with AppRunner\nDESCRIPTION: Example of starting and stopping a web application using AppRunner and TCPSite. The code demonstrates the full lifecycle including setup, site creation, starting the site, and cleanup.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nrunner = web.AppRunner(app)\nawait runner.setup()\nsite = web.TCPSite(runner, 'localhost', 8080)\nawait site.start()\n# wait for finish signal\nawait runner.cleanup()\n```\n\n----------------------------------------\n\nTITLE: Async Factory Function for aiohttp Application\nDESCRIPTION: Demonstrates using a coroutine as an application factory for run_app, allowing async initialization before creating the application. This pattern enables database connections or other async setup tasks.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def app_factory():\n    await pre_init()\n    app = web.Application()\n    app.router.add_get(...)\n    return app\n\nweb.run_app(app_factory())\n```\n\n----------------------------------------\n\nTITLE: Using AIOHTTP's Basic Request API in Python\nDESCRIPTION: Example showing how to use AIOHTTP's basic request function as an asynchronous context manager to perform a GET request to python.org. The function returns a ClientResponse object which can be used to access the response status and content.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\n\nasync def fetch():\n    async with aiohttp.request('GET',\n            'http://python.org/') as resp:\n        assert resp.status == 200\n        print(await resp.text())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Low-Level HTTP Server with aiohttp.web\nDESCRIPTION: This example demonstrates how to create a minimal HTTP server using the low-level aiohttp.web API. It creates a Server instance with a basic handler function that returns 'OK' for all requests, sets up a runner, and starts serving on localhost:8080.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_lowlevel.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom aiohttp import web\n\n\nasync def handler(request):\n    return web.Response(text=\"OK\")\n\n\nasync def main():\n    server = web.Server(handler)\n    runner = web.ServerRunner(server)\n    await runner.setup()\n    site = web.TCPSite(runner, 'localhost', 8080)\n    await site.start()\n\n    print(\"======= Serving on http://127.0.0.1:8080/ ======\")\n\n    # pause here for very long time by serving HTTP requests and\n    # waiting for keyboard interruption\n    await asyncio.sleep(100*3600)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using aiohttp ClientSession for HTTP Requests in Python\nDESCRIPTION: A basic example demonstrating how to use aiohttp's ClientSession to make HTTP requests asynchronously. The code creates a client session, makes a GET request to python.org, and prints the response HTML.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n\nasync def fetch(client):\n    async with client.get('http://python.org') as resp:\n        assert resp.status == 200\n        return await resp.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as client:\n        html = await fetch(client)\n        print(html)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using ContextVars with aiohttp Web Applications\nDESCRIPTION: A complete example demonstrating how to use ContextVars with aiohttp web applications, showing the lifecycle and isolation of context variables across different application stages and requests.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom contextvars import ContextVar\n\nfrom aiohttp import web\n\nVAR = ContextVar('VAR', default='default')\n\n\nasync def coro():\n    return VAR.get()\n\n\nasync def handler(request):\n    var = VAR.get()\n    VAR.set('handler')\n    ret = await coro()\n    return web.Response(text='\\n'.join([var,\n                                        ret]))\n\n\nasync def on_startup(app):\n    print('on_startup', VAR.get())\n    VAR.set('on_startup')\n\n\nasync def on_cleanup(app):\n    print('on_cleanup', VAR.get())\n    VAR.set('on_cleanup')\n\n\nasync def init():\n    print('init', VAR.get())\n    VAR.set('init')\n    app = web.Application()\n    app.router.add_get('/', handler)\n\n    app.on_startup.append(on_startup)\n    app.on_cleanup.append(on_cleanup)\n    return app\n\n\nweb.run_app(init())\nprint('done', VAR.get())\n```\n\n----------------------------------------\n\nTITLE: Creating and Running an AIOHTTP Application with Background Tasks\nDESCRIPTION: Initializes an AIOHTTP application with a cleanup context for background tasks and runs it using web.run_app.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_41\n\nLANGUAGE: python\nCODE:\n```\napp = web.Application()\nredis_listener = web.AppKey(\"redis_listener\", asyncio.Task[None])\napp.cleanup_ctx.append(background_tasks)\nweb.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Using Cleanup Context for Resource Management in aiohttp\nDESCRIPTION: Shows how to use the cleanup_ctx attribute to manage resources with proper initialization and cleanup, ensuring that cleanup code is only called if initialization was successful.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nasync def pg_engine(app: web.Application):\n    app[pg_engine] = await create_async_engine(\n        \"postgresql+asyncpg://postgre:@localhost:5432/postgre\"\n    )\n    yield\n    await app[pg_engine].dispose()\n\napp.cleanup_ctx.append(pg_engine)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hello World Handler in AIOHTTP\nDESCRIPTION: An asynchronous request handler that returns a simple 'Hello, world' response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nasync def hello(request):\n    return web.Response(body=b\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Chaining GET and POST Requests in Python using aiohttp\nDESCRIPTION: This example demonstrates how to chain GET and POST requests by using the content of a GET response as the data for a POST request. It utilizes the StreamReader attribute of the ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresp = await session.get('http://python.org')\nawait session.post('http://httpbin.org/post',\n                     data=resp.content)\n```\n\n----------------------------------------\n\nTITLE: Creating Route Definitions Using RouteTableDef in AIOHTTP (Flask-style)\nDESCRIPTION: Example of defining routes using decorators with RouteTableDef in a Flask-style approach. Shows how to register both function-based handlers and class-based views with different HTTP methods.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nroutes = web.RouteTableDef()\n\n@routes.get('/get')\nasync def handle_get(request):\n    ...\n\n\n@routes.post('/post')\nasync def handle_post(request):\n    ...\n\napp.router.add_routes(routes)\n\n\n@routes.view(\"/view\")\nclass MyView(web.View):\n    async def get(self):\n        ...\n\n    async def post(self):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Starting an AIOHTTP Application with AppRunner\nDESCRIPTION: Code for starting an AIOHTTP application asynchronously using AppRunner, configuring a TCP site on localhost:8080, and keeping the application running indefinitely.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nrunner = web.AppRunner(app)\nawait runner.setup()\nsite = web.TCPSite(runner, 'localhost', 8080)\nawait site.start()\n\nwhile True:\n    await asyncio.sleep(3600)  # sleep forever\n```\n\n----------------------------------------\n\nTITLE: High-Level Test Creation with TestClient and TestServer in AIOHTTP Python\nDESCRIPTION: Example showing how to create high-level integration tests using TestClient and TestServer. It demonstrates setting up a test environment, making requests to the application, and performing assertions on the responses.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.test_utils import TestClient, TestServer\nfrom aiohttp import request\n\nasync def test():\n    app = _create_example_app()\n    async with TestClient(TestServer(app)) as client:\n\n        async def test_get_route():\n            nonlocal client\n            resp = await client.get(\"/\")\n            assert resp.status == 200\n            text = await resp.text()\n            assert \"Hello, world\" in text\n\n        await test_get_route()\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts in Python using aiohttp\nDESCRIPTION: This example demonstrates how to configure custom timeouts for aiohttp sessions and requests. It uses the ClientTimeout class to set various timeout parameters, including total timeout, connection timeout, and socket timeouts.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntimeout = aiohttp.ClientTimeout(total=60)\nasync with aiohttp.ClientSession(timeout=timeout) as session:\n    ...\n\nasync with session.get(url, timeout=timeout) as resp:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection with aiohttp ClientSession in Python\nDESCRIPTION: Async method to create a WebSocket connection. It accepts numerous parameters including URL, protocols, timeout, authentication, and various WebSocket-specific options. Returns a ClientWebSocketResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nasync def ws_connect(url, *, method='GET', \\\n                            protocols=(), \\\n                            timeout=sentinel,\\\n                            auth=None,\\\n                            autoclose=True,\\\n                            autoping=True,\\\n                            heartbeat=None,\\\n                            origin=None, \\\n                            params=None, \\\n                            headers=None, \\\n                            proxy=None, proxy_auth=None, ssl=True, \\\n                            verify_ssl=None, fingerprint=None, \\\n                            ssl_context=None, proxy_headers=None, \\\n                            compress=0, max_msg_size=4194304):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Defining an Initialization Function for aiohttp CLI\nDESCRIPTION: This Python function shows how to define an initialization function that can be used with the aiohttp command-line interface. It sets up a basic application with a route.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef init_func(argv):\n    app = web.Application()\n    app.router.add_get(\"/\", index_handler)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Basic aiohttp Test with pytest Client Fixture\nDESCRIPTION: A simple test that creates an app with a hello route and tests the response using the aiohttp_client fixture. Shows how to create a client, make a request, and verify the response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def hello(request):\n    return web.Response(text='Hello, world')\n\nasync def test_hello(aiohttp_client):\n    app = web.Application()\n    app.router.add_get('/', hello)\n    client = await aiohttp_client(app)\n    resp = await client.get('/')\n    assert resp.status == 200\n    text = await resp.text()\n    assert 'Hello, world' in text\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with RouteTableDef in aiohttp (Python)\nDESCRIPTION: Demonstrates how to use RouteTableDef to define routes in aiohttp, similar to Flask's @app.route decorator. This approach decouples route definitions from the application instance.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nroutes = web.RouteTableDef()\n\n@routes.get('/get')\nasync def handle_get(request):\n    ...\n\n\n@routes.post('/post')\nasync def handle_post(request):\n    ...\n\napp.router.add_routes(routes)\n```\n\n----------------------------------------\n\nTITLE: Sharing Data in aiohttp Application with Python\nDESCRIPTION: Example showing how to use the Application object for global data sharing. Demonstrates creating an application, defining an AppKey for a database, storing an async database engine, and accessing it in a handler.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napp = Application()\ndatabase = AppKey(\"database\", AsyncEngine)\napp[database] = await create_async_engine(db_url)\n\nasync def handler(request):\n    async with request.app[database].begin() as conn:\n        await conn.execute(\"DELETE * FROM table\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over WebSocket Messages with Async For in Python\nDESCRIPTION: Example showing how to use WebSocketResponse with async for to iterate over incoming messages. This demonstrates the basic pattern for handling WebSocket connections in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nws = web.WebSocketResponse()\nawait ws.prepare(request)\n\nasync for msg in ws:\n    print(msg.data)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Connection in Python using aiohttp\nDESCRIPTION: This snippet shows how to establish a WebSocket connection using aiohttp. It demonstrates connecting to a WebSocket server, sending messages, and handling different types of incoming messages in an asynchronous loop.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync with session.ws_connect('http://example.org/ws') as ws:\n    async for msg in ws:\n        if msg.type == aiohttp.WSMsgType.TEXT:\n            if msg.data == 'close cmd':\n                await ws.close()\n                break\n            else:\n                await ws.send_str(msg.data + '/answer')\n        elif msg.type == aiohttp.WSMsgType.ERROR:\n            break\n```\n\n----------------------------------------\n\nTITLE: Streaming File Upload in Python using aiohttp\nDESCRIPTION: This example shows how to stream a large file upload without reading it entirely into memory. It uses a file object as the data parameter, which aiohttp will stream to the server automatically.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith open('massive-body', 'rb') as f:\n   await session.post('http://httpbin.org/post', data=f)\n```\n\n----------------------------------------\n\nTITLE: Organizing Handlers in Classes with aiohttp\nDESCRIPTION: This example shows how to organize request handlers into a class structure in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Handler:\n\n    def __init__(self):\n        pass\n\n    async def handle_intro(self, request):\n        return web.Response(text=\"Hello, world\")\n\n    async def handle_greeting(self, request):\n        name = request.match_info.get('name', \"Anonymous\")\n        txt = \"Hello, {}\".format(name)\n        return web.Response(text=txt)\n\nhandler = Handler()\napp.add_routes([web.get('/intro', handler.handle_intro),\n                web.get('/greet/{name}', handler.handle_greeting)])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Redis Listener Background Task in AIOHTTP\nDESCRIPTION: A background task that listens to a Redis channel and forwards messages to connected WebSocket clients. Part of a larger application context for handling long-running tasks.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nasync def listen_to_redis(app: web.Application):\n    client = redis.from_url(\"redis://localhost:6379\")\n    channel = \"news\"\n    async with client.pubsub() as pubsub:\n        await pubsub.subscribe(channel)\n        while True:\n            msg = await pubsub.get_message(ignore_subscribe_messages=True)\n            if msg is not None:\n                for ws in app[\"websockets\"]:\n                    await ws.send_str(\"{}: {}\".format(channel, msg))\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Request in aiohttp Web Handler (Python)\nDESCRIPTION: Example of a basic aiohttp web handler function that receives a Request object and returns a Response object with a text body.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    return Response(text=\"All right!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing and Disposing Database Connection with Signals in aiohttp\nDESCRIPTION: Demonstrates how to use on_startup and on_cleanup signals to properly initialize and dispose of a database connection engine (using SQLAlchemy with asyncpg in this example).\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy.ext.asyncio import AsyncEngine, create_async_engine\n\npg_engine = web.AppKey(\"pg_engine\", AsyncEngine)\n\nasync def create_pg(app):\n    app[pg_engine] = await create_async_engine(\n        \"postgresql+asyncpg://postgre:@localhost:5432/postgre\"\n    )\n\nasync def dispose_pg(app):\n    await app[pg_engine].dispose()\n\napp.on_startup.append(create_pg)\napp.on_cleanup.append(dispose_pg)\n```\n\n----------------------------------------\n\nTITLE: Uploading Multipart-Encoded File in Python using aiohttp\nDESCRIPTION: This example shows how to upload a multipart-encoded file using aiohttp. It opens a file in binary mode and sends it as part of the POST request data.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://httpbin.org/post'\nfiles = {'file': open('report.xls', 'rb')}\n\nawait session.post(url, data=files)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Background Tasks with Cleanup Context in AIOHTTP\nDESCRIPTION: A cleanup context function that creates a Redis listener task and ensures it's properly cancelled when the application shuts down.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nasync def background_tasks(app):\n    app[redis_listener] = asyncio.create_task(listen_to_redis(app))\n\n    yield\n\n    app[redis_listener].cancel()\n    with contextlib.suppress(asyncio.CancelledError):\n        await app[redis_listener]\n```\n\n----------------------------------------\n\nTITLE: Handling Parallel Event Sources in aiohttp WebSocket (Python)\nDESCRIPTION: Illustrates how to handle incoming events from different sources in parallel using aiohttp WebSockets. This example combines WebSocket events with Redis PubSub events.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    ws = web.WebSocketResponse()\n    await ws.prepare(request)\n    task = asyncio.create_task(\n        read_subscription(ws, request.app[redis_key]))\n    try:\n        async for msg in ws:\n            # handle incoming messages\n            # use ws.send_str() to send data back\n            ...\n\n    finally:\n        task.cancel()\n\nasync def read_subscription(ws, redis):\n    channel, = await redis.subscribe('channel:1')\n\n    try:\n        async for msg in channel.iter():\n            answer = process_the_message(msg)  # your function here\n            await ws.send_str(answer)\n    finally:\n        await redis.unsubscribe('channel:1')\n```\n\n----------------------------------------\n\nTITLE: Advanced App State Testing with pytest Fixtures\nDESCRIPTION: More advanced test example with a client fixture for reuse. Shows testing both GET and POST methods, with application state storage and retrieval.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom aiohttp import web\n\nvalue = web.AppKey(\"value\", str)\n\n\nasync def previous(request):\n    if request.method == 'POST':\n        request.app[value] = (await request.post())['value']\n        return web.Response(body=b'thanks for the data')\n    return web.Response(\n        body='value: {}'.format(request.app[value]).encode('utf-8'))\n\n@pytest.fixture\nasync def cli(aiohttp_client):\n    app = web.Application()\n    app.router.add_get('/', previous)\n    app.router.add_post('/', previous)\n    return await aiohttp_client(app)\n\nasync def test_set_value(cli):\n    resp = await cli.post('/', data={'value': 'foo'})\n    assert resp.status == 200\n    assert await resp.text() == 'thanks for the data'\n    assert cli.server.app[value] == 'foo'\n\nasync def test_get_value(cli):\n    cli.server.app[value] = 'bar'\n    resp = await cli.get('/')\n    assert resp.status == 200\n    assert await resp.text() == 'value: bar'\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Proxy with aiohttp ClientSession (Python)\nDESCRIPTION: This snippet demonstrates how to use an HTTP proxy with aiohttp's ClientSession. It includes examples of setting a proxy for a single request and setting a default proxy for the entire session.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get(\"http://python.org\",\n                             proxy=\"http://proxy.com\") as resp:\n        print(resp.status)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    proxy_auth = aiohttp.BasicAuth('user', 'pass')\n    async with session.get(\"http://python.org\",\n                             proxy=\"http://proxy.com\",\n                             proxy_auth=proxy_auth) as resp:\n        print(resp.status)\n```\n\nLANGUAGE: python\nCODE:\n```\nsession.get(\"http://python.org\",\n            proxy=\"http://user:pass@some.proxy.com\")\n```\n\nLANGUAGE: python\nCODE:\n```\nproxy_auth = aiohttp.BasicAuth('user', 'pass')\nasync with aiohttp.ClientSession(proxy=\"http://proxy.com\", proxy_auth=proxy_auth) as session:\n    async with session.get(\"http://python.org\") as resp:\n        print(resp.status)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession(trust_env=True) as session:\n    async with session.get(\"http://python.org\") as resp:\n        print(resp.status)\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Unicode Data in Python using aiohttp\nDESCRIPTION: This snippet demonstrates how to send a POST request with Unicode data using aiohttp. It uses an async context manager to handle the session and response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync with session.post(url, data='Тест') as resp:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Handler with Connection Tracking\nDESCRIPTION: A WebSocket handler that tracks active connections in a weak set stored in the application instance, allowing for proper cleanup during shutdown.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\nimport weakref\n\napp = web.Application()\nwebsockets = web.AppKey(\"websockets\", weakref.WeakSet)\napp[websockets] = weakref.WeakSet()\n\nasync def websocket_handler(request):\n    ws = web.WebSocketResponse()\n    await ws.prepare(request)\n\n    request.app[websockets].add(ws)\n    try:\n        async for msg in ws:\n            ...\n    finally:\n        request.app[websockets].discard(ws)\n\n    return ws\n```\n\n----------------------------------------\n\nTITLE: Using create_task for Parallel Operations in aiohttp Handlers\nDESCRIPTION: Demonstrates proper use of asyncio.create_task for doing parallel work while still awaiting completion before returning a response. This pattern is useful for improving handler performance.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    t = asyncio.create_task(get_some_data())\n    ...  # Do some other things, while data is being fetched.\n    data = await t\n    return web.Response(text=data)\n```\n\n----------------------------------------\n\nTITLE: Sending JSON and Plain Text in aiohttp POST Requests (Python)\nDESCRIPTION: Demonstrates how to send JSON and plain text data in POST requests using aiohttp. The 'json' keyword is used for JSON data, and 'data' for plain text.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait session.post(url, json={'example': 'text'})\n\nawait session.post(url, data='Привет, Мир!')\n```\n\n----------------------------------------\n\nTITLE: Basic aiohttp Request Pattern\nDESCRIPTION: Shows the standard three-step pattern for making HTTP requests with aiohttp, demonstrating its asynchronous nature with proper resource management.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/http_request_lifecycle.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get('http://python.org') as response:\n        print(await response.text())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Class-Based View in AioHTTP\nDESCRIPTION: Example of creating a class-based view by extending the View base class. This snippet demonstrates how to implement GET and POST HTTP method handlers that return appropriate responses.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nclass MyView(View):\n\n    async def get(self):\n        resp = await get_response(self.request)\n        return resp\n\n    async def post(self):\n        resp = await post_response(self.request)\n        return resp\n\napp.router.add_view('/view', MyView)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Send Methods\nDESCRIPTION: Asynchronous methods for sending data over WebSocket connections including text, binary, JSON and raw frame messages. Each method has specific type checks and compression options.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def send_str(data, compress=None)\nasync def send_bytes(data, compress=None)\nasync def send_json(data, compress=None, *, dumps=json.dumps)\nasync def send_frame(message, opcode, compress=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as SSL Reverse Proxy for aiohttp\nDESCRIPTION: This NGINX configuration establishes an HTTP to HTTPS redirect and sets up a secure reverse proxy for an aiohttp application running on port 8080. It includes SSL certificate configuration and proper header forwarding for client information.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nworker_connections 1024;\n    }\n    http {\n        ## SSL Redirect\n        server {\n            listen 80       default;\n            return 301      https://$host$request_uri;\n        }\n\n        ## Main Server Block\n        server {\n            # Open by default.\n            listen                443 ssl default_server;\n            listen                [::]:443 ssl default_server;\n            server_name           main;\n            client_max_body_size  200M;\n\n            ssl_certificate       /etc/secrets/cert.pem;\n            ssl_certificate_key   /etc/secrets/key.pem;\n\n            ## Main site location.\n            location / {\n                proxy_pass                          http://127.0.0.1:8080;\n                proxy_set_header                    Host $host;\n                proxy_set_header X-Forwarded-Host   $server_name;\n                proxy_set_header X-Real-IP          $remote_addr;\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Middleware in aiohttp\nDESCRIPTION: Shows how to create a middleware for handling 404 errors and returning them as JSON responses. This is useful for creating consistent error handling in JSON REST services.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def error_middleware(request, handler):\n    try:\n        response = await handler(request)\n        if response.status != 404:\n            return response\n        message = response.message\n    except web.HTTPException as ex:\n        if ex.status != 404:\n            raise\n        message = ex.reason\n    return web.json_response({'error': message})\n\napp = web.Application(middlewares=[error_middleware])\n```\n\n----------------------------------------\n\nTITLE: GET Request Method in aiohttp ClientSession\nDESCRIPTION: Convenience method for performing HTTP GET requests. Wraps the main request() method with GET-specific defaults.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget(url, *, allow_redirects=True, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful WebSocket Shutdown in AIOHTTP\nDESCRIPTION: An on_shutdown handler that closes all active WebSocket connections with a proper shutdown code when the server is shutting down.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import WSCloseCode\n\nasync def on_shutdown(app):\n    for ws in set(app[websockets]):\n        await ws.close(code=WSCloseCode.GOING_AWAY, message=\"Server shutdown\")\n\napp.on_shutdown.append(on_shutdown)\n```\n\n----------------------------------------\n\nTITLE: Performing POST Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform a POST request. It accepts a URL, optional data to send in the request body, and additional keyword arguments to modify the inner request parameters. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def post(url, *, data=None, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Content\nDESCRIPTION: Example of handling large responses by streaming content and saving to a file\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith open(filename, 'wb') as fd:\n    async for chunk in resp.content.iter_chunked(chunk_size):\n        fd.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Shutdown Signal Handler in aiohttp with Python\nDESCRIPTION: Example signature for a signal handler that runs on application shutdown. Used for gracefully closing long-running connections like websockets and data streams.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def on_shutdown(app):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Unittest Testing with AioHTTPTestCase\nDESCRIPTION: Example showing how to use the AioHTTPTestCase class for unittest-style testing of aiohttp applications. Demonstrates test setup, application creation, and response validation.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.test_utils import AioHTTPTestCase\nfrom aiohttp import web\n\nclass MyAppTestCase(AioHTTPTestCase):\n\n    async def get_application(self):\n        \"\"\"\n        Override the get_app method to return your application.\n        \"\"\"\n        async def hello(request):\n            return web.Response(text='Hello, world')\n\n        app = web.Application()\n        app.router.add_get('/', hello)\n        return app\n\n    async def test_example(self):\n        async with self.client.request(\"GET\", \"/\") as resp:\n            self.assertEqual(resp.status, 200)\n            text = await resp.text()\n        self.assertIn(\"Hello, world\", text)\n```\n\n----------------------------------------\n\nTITLE: Processing Multipart Response Parts in Python\nDESCRIPTION: Demonstrates how to iterate through parts of a multipart response, handling JSON metadata and file data. This example shows how to filter parts based on their headers and process them accordingly.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmetadata = None\nfiledata = None\nwhile True:\n    part = await reader.next()\n    \n    if part is None:\n        break\n        \n    if part.headers[aiohttp.hdrs.CONTENT_TYPE] == 'application/json':\n        metadata = await part.json()\n        continue\n        \n    if part.filename != 'secret.txt':\n        continue\n        \n    filedata = await part.read(decode=False)\n    \n    filedata = part.decode(filedata)\n    \n    break\n```\n\n----------------------------------------\n\nTITLE: Running AIOHTTP Application with run_app Function in Python\nDESCRIPTION: The run_app function is a high-level utility for running an AIOHTTP application until keyboard interrupt, performing graceful shutdown. It supports various configuration options including host/port binding, Unix socket paths, SSL contexts, and signal handling.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nrun_app(app, *, debug=False, host=None, port=None, \\\n                      path=None, sock=None, shutdown_timeout=60.0, \\\n                      keepalive_timeout=3630, ssl_context=None, \\\n                      print=print, backlog=128, \\\n                      access_log_class=aiohttp.helpers.AccessLogger, \\\n                      access_log_format=aiohttp.helpers.AccessLogger.LOG_FORMAT, \\\n                      access_log=aiohttp.log.access_logger, \\\n                      handle_signals=True, \\\n                      reuse_address=None, \\\n                      reuse_port=None, \\\n                      handler_cancellation=False)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in aiohttp\nDESCRIPTION: Shows different ways to add static file handling routes to an aiohttp application, including enabling directory index display and symlink following. This is primarily intended for development use.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napp.add_routes([web.static('/prefix', path_to_static_folder)])\n\nroutes.static('/prefix', path_to_static_folder)\n\nweb.static('/prefix', path_to_static_folder, show_index=True)\n\nweb.static('/prefix', path_to_static_folder, follow_symlinks=True)\n```\n\n----------------------------------------\n\nTITLE: User Session Implementation with AIOHTTP\nDESCRIPTION: Complete example showing session management using aiohttp_session with encrypted cookie storage.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport time\nimport base64\nfrom cryptography import fernet\nfrom aiohttp import web\nfrom aiohttp_session import setup, get_session, session_middleware\nfrom aiohttp_session.cookie_storage import EncryptedCookieStorage\n\nasync def handler(request):\n    session = await get_session(request)\n\n    last_visit = session.get(\"last_visit\")\n    session[\"last_visit\"] = time.time()\n    text = \"Last visited: {}\".format(last_visit)\n\n    return web.Response(text=text)\n\nasync def make_app():\n    app = web.Application()\n    # secret_key must be 32 url-safe base64-encoded bytes\n    fernet_key = fernet.Fernet.generate_key()\n    secret_key = base64.urlsafe_b64decode(fernet_key)\n    setup(app, EncryptedCookieStorage(secret_key))\n    app.add_routes([web.get('/', handler)])\n    return app\n\nweb.run_app(make_app())\n```\n\n----------------------------------------\n\nTITLE: Registering Routes Using Route Definitions in AIOHTTP (Django-style)\nDESCRIPTION: Example of using route definition functions like get() and post() to define routes in Django style, which can be added to a router via add_routes(). This pattern allows for organizing route definitions in a list before registration.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def handle_get(request):\n    ...\n\n\nasync def handle_post(request):\n    ...\n\napp.router.add_routes([web.get('/get', handle_get),\n                      web.post('/post', handle_post),\n```\n\n----------------------------------------\n\nTITLE: Making JSON Requests\nDESCRIPTION: Shows how to send JSON data in requests and customize JSON serialization\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ujson\n\nasync with aiohttp.ClientSession(\n        json_serialize=ujson.dumps) as session:\n    await session.post(url, json={'test': 'object'})\n```\n\n----------------------------------------\n\nTITLE: Route Decorator Registration in Python AIOHTTP\nDESCRIPTION: Shows Flask-style route registration using decorators in AIOHTTP, including both function-based and class-based views.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nroutes = web.RouteTableDef()\n\n@routes.get('/get')\nasync def handle_get(request):\n    ...\n\n\n@routes.post('/post')\nasync def handle_post(request):\n    ...\n\napp.router.add_routes(routes)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Receive Methods\nDESCRIPTION: Asynchronous methods for receiving WebSocket messages in different formats (text, binary, JSON). Includes type validation and automatic handling of control frames.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def receive()\nasync def receive_str()\nasync def receive_bytes()\nasync def receive_json(*, loads=json.loads)\n```\n\n----------------------------------------\n\nTITLE: Using aiojobs for Background Tasks in aiohttp Handlers\nDESCRIPTION: Shows how to use aiojobs to spawn background tasks that will continue execution even if the client disconnects. The setup function configures aiojobs for the application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiojobs.aiohttp import setup, spawn\n\nasync def handler(request):\n    await spawn(request, write_data())\n    return web.Response()\n\napp = web.Application()\nsetup(app)\napp.router.add_get(\"/\", handler)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Applications in aiohttp\nDESCRIPTION: Demonstrates how to create and add a sub-application to the main application, useful for organizing large projects or adding modular features like admin panels.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nadmin = web.Application()\n# setup admin routes, signals and middlewares\n\napp.add_subapp('/admin/', admin)\n```\n\n----------------------------------------\n\nTITLE: Installing AIOHTTP Using Pip\nDESCRIPTION: Basic installation command for AIOHTTP using pip package manager. This installs the core AIOHTTP library without optional dependencies.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install aiohttp\n```\n\n----------------------------------------\n\nTITLE: Example aiohttp Session Usage\nDESCRIPTION: Example showing how to explicitly close an aiohttp ClientSession using the async context manager pattern\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nawait session.close()\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Persistent aiohttp ClientSessions (Python)\nDESCRIPTION: This snippet demonstrates how to manage multiple persistent ClientSessions using aiohttp's cleanup context. It shows how to create and close multiple sessions safely.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def multiple_sessions(app):\n   app[persistent_session_1] = session_1 = aiohttp.ClientSession()\n   app[persistent_session_2] = session_2 = aiohttp.ClientSession()\n   app[persistent_session_3] = session_3 = aiohttp.ClientSession()\n\n   yield\n\n   await asyncio.gather(\n       session_1.close(),\n       session_2.close(),\n       session_3.close(),\n   )\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware Chain in aiohttp\nDESCRIPTION: Demonstrates the execution order of multiple middlewares in an aiohttp web application. The example shows two middlewares and a handler function, illustrating how requests and responses flow through the middleware chain.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def test(request):\n    print('Handler function called')\n    return web.Response(text=\"Hello\")\n\nasync def middleware1(request, handler):\n    print('Middleware 1 called')\n    response = await handler(request)\n    print('Middleware 1 finished')\n    return response\n\nasync def middleware2(request, handler):\n    print('Middleware 2 called')\n    response = await handler(request)\n    print('Middleware 2 finished')\n    return response\n\n\napp = web.Application(middlewares=[middleware1, middleware2])\napp.router.add_get('/', test)\nweb.run_app(app)\n```\n\n----------------------------------------\n\nTITLE: Normalizing Path Middleware in AIOHTTP\nDESCRIPTION: A middleware function for normalizing URL paths in AIOHTTP applications. It can append or remove trailing slashes and merge multiple consecutive slashes in URLs.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nnormalize_path_middleware(*, \\\n                                        append_slash=True, \\\n                                        remove_slash=False, \\\n                                        merge_slashes=True, \\\n```\n\n----------------------------------------\n\nTITLE: Using BasicAuth for Authentication in aiohttp (Python)\nDESCRIPTION: Shows how to use BasicAuth for authentication in aiohttp. An instance of BasicAuth is passed to the ClientSession constructor.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nauth = BasicAuth(login=\"...\", password=\"...\")\nasync with ClientSession(auth=auth) as session:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Custom Routing Based on HTTP Accept Header in aiohttp\nDESCRIPTION: Implements a custom routing layer that dispatches requests based on the HTTP Accept header. This demonstrates how to extend aiohttp's routing with additional criteria beyond path and method.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass AcceptChooser:\n\n    def __init__(self):\n        self._accepts = {}\n\n    async def do_route(self, request):\n        for accept in request.headers.getall('ACCEPT', []):\n            acceptor = self._accepts.get(accept)\n            if acceptor is not None:\n                return (await acceptor(request))\n        raise HTTPNotAcceptable()\n\n    def reg_acceptor(self, accept, handler):\n        self._accepts[accept] = handler\n\n\nasync def handle_json(request):\n    # do json handling\n\nasync def handle_xml(request):\n    # do xml handling\n\nchooser = AcceptChooser()\napp.add_routes([web.get('/', chooser.do_route)])\n\nchooser.reg_acceptor('application/json', handle_json)\nchooser.reg_acceptor('application/xml', handle_xml)\n```\n\n----------------------------------------\n\nTITLE: Using Jinja2 Template Decorator with aiohttp Request Handlers\nDESCRIPTION: Demonstrates how to use the aiohttp_jinja2.template decorator to simplify template rendering in request handlers. The handler returns a dictionary of values that will be passed to the template for rendering.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@aiohttp_jinja2.template('tmpl.jinja2')\nasync def handler(request):\n    return {'name': 'Andrew', 'surname': 'Svetlov'}\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Cookies in aiohttp ClientSession (Python)\nDESCRIPTION: Shows how to send custom cookies with requests using aiohttp. Cookies are passed as a dictionary to the ClientSession constructor.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://httpbin.org/cookies'\ncookies = {'cookies_are': 'working'}\nasync with ClientSession(cookies=cookies) as session:\n    async with session.get(url) as resp:\n        assert await resp.json() == {\n           \"cookies\": {\"cookies_are\": \"working\"}}\n```\n\n----------------------------------------\n\nTITLE: Handling Variable Path Parameters in aiohttp\nDESCRIPTION: This example shows how to define a route with a variable path parameter and access it in the handler function.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@routes.get('/{name}')\nasync def variable_handler(request):\n    return web.Response(\n        text=\"Hello, {}\".format(request.match_info['name']))\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx HTTP Server for aiohttp Backend\nDESCRIPTION: Nginx configuration for routing requests to aiohttp backend servers and serving static files. Sets up a server listening on port 80 for example.com and proxies requests to aiohttp upstream group.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n  server {\n    listen 80;\n    client_max_body_size 4G;\n\n    server_name example.com;\n\n    location / {\n      proxy_set_header Host $http_host;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_redirect off;\n      proxy_buffering off;\n      proxy_pass http://aiohttp;\n    }\n\n    location /static {\n      # path for static files\n      root /path/to/app/static;\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes for URL Construction in aiohttp\nDESCRIPTION: This snippet demonstrates how to define a named route and use it to construct URLs dynamically.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@routes.get('/root', name='root')\nasync def handler(request):\n    ...\n\nurl = request.app.router['root'].url_for().with_query({\"a\": \"b\", \"c\": \"d\"})\nassert url == URL('/root?a=b&c=d')\n```\n\n----------------------------------------\n\nTITLE: Sending a Multipart Request in Python\nDESCRIPTION: Demonstrates how to send a multipart request using an aiohttp ClientSession. The multipart writer is passed directly as the data argument to the post method.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait session.post('http://example.com', data=mpwriter)\n```\n\n----------------------------------------\n\nTITLE: Getting Client IP Address from Request Transport\nDESCRIPTION: Example showing how to extract the client's IP address and port from the request transport object using get_extra_info()\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npeername = request.transport.get_extra_info('peername')\nif peername is not None:\n    host, port = peername\n```\n\n----------------------------------------\n\nTITLE: Using ClientResponse with Async Context Manager in Python\nDESCRIPTION: Example of using ClientResponse as an async context manager to retrieve a response from a client session and verify its status code is 200. The context manager automatically releases the response when exiting the block.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresp = await client_session.get(url)\nasync with resp:\n    assert resp.status == 200\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Logging Configuration in Python for aiohttp\nDESCRIPTION: Sets up a minimal working logger configuration for an aiohttp web application. It initializes logging at the DEBUG level and runs the app on port 5000.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/logging.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom aiohttp import web\n\napp = web.Application()\nlogging.basicConfig(level=logging.DEBUG)\nweb.run_app(app, port=5000)\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handler in AIOHTTP\nDESCRIPTION: Example of sending JSON response using the json_response shortcut method in AIOHTTP.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    data = {'some': 'data'}\n    return web.json_response(data)\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform a DELETE request. It accepts a URL and additional keyword arguments to modify inner request parameters. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def delete(url, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jinja2 Template Rendering with aiohttp\nDESCRIPTION: Shows how to configure Jinja2 template rendering for aiohttp web applications. The setup involves creating a Jinja2 environment with a template loader pointing to the templates folder.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napp = web.Application()\naiohttp_jinja2.setup(app,\n    loader=jinja2.FileSystemLoader('/path/to/templates/folder'))\n```\n\n----------------------------------------\n\nTITLE: Defining Application Cleanup Signal Handler in aiohttp with Python\nDESCRIPTION: Example signature for a signal handler that runs during application cleanup. Used for gracefully closing connections to external services like database servers.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nasync def on_cleanup(app):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Middleware in aiohttp\nDESCRIPTION: Demonstrates how to create a middleware function that modifies the response by appending text to it. The middleware processes the request after the handler has generated a response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.web import middleware\n\nasync def middleware(request, handler):\n    resp = await handler(request)\n    resp.text = resp.text + ' wink'\n    return resp\n```\n\n----------------------------------------\n\nTITLE: Implementing MJPEG Streaming with multipart/x-mixed-replace in Python\nDESCRIPTION: Shows how to create a streaming MJPEG response using multipart/x-mixed-replace content type. This example uses close_boundary=False to prevent closing the multipart sequence after each frame.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmy_boundary = 'some-boundary'\nresponse = web.StreamResponse(\n    status=200,\n    reason='OK',\n    headers={\n        'Content-Type': 'multipart/x-mixed-replace;boundary={}'.format(my_boundary)\n    }\n)\nwhile True:\n    frame = get_jpeg_frame()\n    with MultipartWriter('image/jpeg', boundary=my_boundary) as mpwriter:\n        mpwriter.append(frame, {\n            'Content-Type': 'image/jpeg'\n        })\n        await mpwriter.write(response, close_boundary=False)\n    await response.drain()\n```\n\n----------------------------------------\n\nTITLE: Initializing Response Class\nDESCRIPTION: Constructor for the Response class which inherits from StreamResponse. Accepts various parameters for setting body, status, headers, content type, and other response attributes.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Response(*, body=None, status=200, reason=None, text=None, \\\n                    headers=None, content_type=None, charset=None, \\\n                    zlib_executor_size=sentinel, zlib_executor=None)\n```\n\n----------------------------------------\n\nTITLE: Manual TestClient Management for AIOHTTP Testing in Python\nDESCRIPTION: Example of manually managing TestClient lifecycle for more granular control over the testing process. It shows explicit server startup and teardown, making requests, and asserting on responses.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.test_utils import TestClient, TestServer\n\nasync def test():\n    app = _create_example_app()\n    client = TestClient(TestServer(app))\n    await client.start_server()\n    root = \"http://127.0.0.1:{}\".format(port)\n\n    async def test_get_route():\n        resp = await client.get(\"/\")\n        assert resp.status == 200\n        text = await resp.text()\n        assert \"Hello, world\" in text\n\n    await test_get_route()\n    await client.close()\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in HTTP Response\nDESCRIPTION: Method for setting cookies in an HTTP response. Allows specifying various cookie attributes like path, expiration, domain, security settings, and more in a single call.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. method:: set_cookie(name, value, *, path='/', expires=None, \\\n                          domain=None, max_age=None, \\\n                          secure=None, httponly=None, samesite=None, \\\n                          partitioned=None)\n```\n\n----------------------------------------\n\nTITLE: Returning Response in aiohttp Web Handler with Manual Response Preparation\nDESCRIPTION: This snippet demonstrates how to manually prepare and send a response in an aiohttp web handler while still returning the response object as required by aiohttp's contract. It includes updating application state after sending the response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresp = web.json_response({'message': 'PONG'})\nawait resp.prepare(request)\nawait resp.write_eof()\n\n# increase the pong count\nrequest.app[db_key].inc_pong()\n\nreturn resp\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Data in Application Config\nDESCRIPTION: Demonstrates how to store application-wide data in the Application instance's config. This approach is recommended over using global variables or singletons.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napp['my_private_key'] = data\n\nasync def handler(request):\n    data = request.app['my_private_key']\n```\n\n----------------------------------------\n\nTITLE: Sharing Database Connections with Subapplications in aiohttp (Python)\nDESCRIPTION: Shows how to share database connections between a main application and its subapplications in aiohttp. This approach maintains the isolation of subapplications while allowing access to shared resources.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsubapp[db_key] = mainapp[db_key]\nmainapp.add_subapp(\"/prefix\", subapp)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Startup Signal Handler in aiohttp with Python\nDESCRIPTION: Example signature for a signal handler that runs on application startup. Used to run background tasks in the event loop alongside the request handler.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def on_startup(app):\n    pass\n```\n\n----------------------------------------\n\nTITLE: URL Reversing for Nested Applications in aiohttp\nDESCRIPTION: Shows how to perform URL reversing for routes in nested applications, both from within the sub-application and from the main application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nadmin = web.Application()\nadmin.add_routes([web.get('/resource', handler, name='name')])\n\napp.add_subapp('/admin/', admin)\n\nurl = admin.router['name'].url_for()\n\n# For main application to reverse URL for sub-application\nadmin = web.Application()\nadmin_key = web.AppKey('admin_key', web.Application)\nadmin.add_routes([web.get('/resource', handler, name='name')])\n\napp.add_subapp('/admin/', admin)\napp[admin_key] = admin\n\nasync def handler(request: web.Request):  # main application's handler\n    admin = request.app[admin_key]\n    url = admin.router['name'].url_for()\n```\n\n----------------------------------------\n\nTITLE: Running a Long-lived Task Alongside AIOHTTP Application\nDESCRIPTION: A cleanup context function that creates and manages a long-running task that lives alongside the AIOHTTP application, ensuring proper cancellation during shutdown.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nasync def run_other_task(_app):\n    task = asyncio.create_task(other_long_task())\n\n    yield\n\n    task.cancel()\n    with suppress(asyncio.CancelledError):\n        await task  # Ensure any exceptions etc. are raised.\n\napp.cleanup_ctx.append(run_other_task)\n```\n\n----------------------------------------\n\nTITLE: Registering Routes Using Decorators in aiohttp\nDESCRIPTION: An example of using the RouteTableDef decorators to register HTTP routes in an aiohttp application. The code demonstrates defining a handler function with a decorator and then adding the routes to the application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nroutes = web.RouteTableDef()\n\n@routes.get('/')\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\napp.add_routes(routes)\n```\n\n----------------------------------------\n\nTITLE: Adding a Route Using Router Shortcut in Python\nDESCRIPTION: Shows the shortcut method for adding a route to a router, which combines adding a resource and adding a route in a single call.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nrouter.add_resource(path).add_route(method, handler)\n```\n\n----------------------------------------\n\nTITLE: Initializing FileResponse Class\nDESCRIPTION: Constructor for the FileResponse class which is used to send files. Supports Content-Range and If-Range HTTP headers and allows customizing chunk size for file reading.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. class:: FileResponse(*, path, chunk_size=256*1024, status=200, reason=None, headers=None)\n```\n\n----------------------------------------\n\nTITLE: Using Signals for Response Preparation in aiohttp\nDESCRIPTION: Shows how to use the on_response_prepare signal to modify headers for all responses, including streamed responses and WebSockets, which cannot be modified by regular middlewares.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nasync def on_prepare(request, response):\n    response.headers['My-Header'] = 'value'\n\napp.on_response_prepare.append(on_prepare)\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Request Objects\nDESCRIPTION: Demonstrates how to store request-specific data in the Request object, which is useful for middlewares and signal handlers to pass data to subsequent handlers.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n  request['my_private_key'] = \"data\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Registering Routes Using Route Tables in aiohttp\nDESCRIPTION: An alternative approach to registering routes in aiohttp using route tables as a list. This method defines handler functions separately and then adds them to the application using a list of route definitions.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nasync def hello(request):\n    return web.Response(text=\"Hello, world\")\n\napp.add_routes([web.get('/', hello)])\n```\n\n----------------------------------------\n\nTITLE: Creating a Middleware Factory in aiohttp\nDESCRIPTION: Demonstrates how to create a middleware factory, which is a function that creates a middleware with passed arguments. This allows for more flexible and reusable middleware creation.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef middleware_factory(text):\n    async def sample_middleware(request, handler):\n        resp = await handler(request)\n        resp.text = resp.text + text\n        return resp\n    return sample_middleware\n\napp = web.Application(middlewares=[middleware_factory(' wink')])\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Size of a Multipart Request in Python\nDESCRIPTION: Demonstrates how to serialize a MultipartWriter to calculate its total size for servers that require Content-Length for the entire multipart request. This approach bypasses chunked transfer encoding.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Writer:\n    def __init__(self):\n        self.buffer = bytearray()\n\n    async def write(self, data):\n        self.buffer.extend(data)\n\nwriter = Writer()\nawait mpwriter.write(writer)\nawait aiohttp.post('http://example.com',\n                   data=writer.buffer, headers=mpwriter.headers)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Multipart Requests with MultipartWriter in Python\nDESCRIPTION: Shows how to create complex nested multipart structures using MultipartWriter and context managers. This example demonstrates the recursive nature of multipart format with multiple nesting levels.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith aiohttp.MultipartWriter('mixed') as mpwriter:\n    ...\n    with aiohttp.MultipartWriter('related') as subwriter:\n        ...\n    mpwriter.append(subwriter)\n\n    with aiohttp.MultipartWriter('related') as subwriter:\n        ...\n        with aiohttp.MultipartWriter('related') as subsubwriter:\n            ...\n        subwriter.append(subsubwriter)\n    mpwriter.append(subwriter)\n\n    with aiohttp.MultipartWriter('related') as subwriter:\n        ...\n    mpwriter.append(subwriter)\n```\n\n----------------------------------------\n\nTITLE: Handling Client Disconnection with Exception Handling in aiohttp\nDESCRIPTION: Demonstrates how to handle a client disconnection using try-except blocks to catch OSError. This is useful for detecting when a client drops a connection during a request.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    try:\n        text = await request.text()\n    except OSError:\n        # disconnected\n```\n\n----------------------------------------\n\nTITLE: Implementing MultipartWriter in Python\nDESCRIPTION: Defines a writer class for creating multipart body content. It includes methods for appending various types of content (JSON, form data) and writing the multipart body.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart_reference.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MultipartWriter(subtype='mixed', boundary=None, close_boundary=True):\n\n   @property\n   def boundary(self):\n      # The string representation of the boundary.\n      pass\n\n   def append(obj, headers=None):\n      # Append an object to writer.\n      pass\n\n   def append_payload(payload):\n      # Adds a new body part to multipart writer.\n      pass\n\n   def append_json(obj, headers=None):\n      # Helper to append JSON part.\n      pass\n\n   def append_form(obj, headers=None):\n      # Helper to append form urlencoded part.\n      pass\n\n   @property\n   def size(self):\n      # Size of the payload.\n      pass\n\n   async def write(writer, close_boundary=True):\n      # Write body.\n      pass\n```\n\n----------------------------------------\n\nTITLE: Sharing Cookies Between Requests in aiohttp (Python)\nDESCRIPTION: Demonstrates how to share cookies between multiple requests using a single ClientSession in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession() as session:\n    async with session.get(\n        \"http://httpbin.org/cookies/set?my_cookie=my_value\",\n        allow_redirects=False\n    ) as resp:\n        assert resp.cookies[\"my_cookie\"].value == \"my_value\"\n    async with session.get(\"http://httpbin.org/cookies\") as r:\n        json_body = await r.json()\n        assert json_body[\"cookies\"][\"my_cookie\"] == \"my_value\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in aiohttp (Python)\nDESCRIPTION: Shows how to access response headers in aiohttp. Headers are case-insensitive and support multiple values for the same key.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nassert resp.headers['Content-Type'] == 'application/json'\n\nassert resp.headers.get('content-type') == 'application/json'\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Fingerprint Checking in Python\nDESCRIPTION: Demonstrates how to use the Fingerprint class to check SSL certificates by SHA256 digest when making a request with aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\n\nwith open(path_to_cert, 'rb') as f:\n    digest = hashlib.sha256(f.read()).digest()\n\nawait session.get(url, ssl=aiohttp.Fingerprint(digest))\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocketResponse Class\nDESCRIPTION: Constructor for the WebSocketResponse class for handling server-side websockets. Provides parameters for configuring timeouts, automatic closing, ping/pong behavior, compression, and message size limits.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. class:: WebSocketResponse(*, timeout=10.0, receive_timeout=None, \\\n                             autoclose=True, autoping=True, heartbeat=None, \\\n                             protocols=(), compress=True, max_msg_size=4194304, \\\n                             writer_limit=65536)\n```\n\n----------------------------------------\n\nTITLE: Checking WebSocket Readiness in aiohttp with Python\nDESCRIPTION: Example showing how to check if a WebSocket connection can be prepared using the WebSocketReady named tuple's boolean implementation. Demonstrates conditional logic based on the result of can_prepare().\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nif not await ws.can_prepare(...):\n    cannot_start_websocket()\n```\n\n----------------------------------------\n\nTITLE: Implementing File Streaming with aiohttp.streamer Decorator in Python\nDESCRIPTION: Example of using the aiohttp.streamer decorator to create a file sender function that streams a file in chunks. This pattern replaces the previous generator-based approach for uploading large files.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/migration_to_2xx.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@aiohttp.streamer\ndef file_sender(writer, file_name=None):\n      with open(file_name, 'rb') as f:\n          chunk = f.read(2**16)\n          while chunk:\n              yield from writer.write(chunk)\n              chunk = f.read(2**16)\n\n# Then you can use `file_sender` like this:\n\nasync with session.post('http://httpbin.org/post',\n                        data=file_sender(file_name='huge_file')) as resp:\n       print(await resp.text())\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Access Logger for aiohttp in Python\nDESCRIPTION: Defines a custom AccessLogger class that inherits from AbstractAccessLogger. It overrides the log method to customize the log format and includes an enabled property to control when logging is active.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/logging.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.abc import AbstractAccessLogger\n\nclass AccessLogger(AbstractAccessLogger):\n\n    def log(self, request, response, time):\n        self.logger.info(f'{request.remote} '\n                       f'\"{request.method} {request.path} '\n                       f'done in {time}s: {response.status}')\n\n    @property\n    def enabled(self):\n        \"\"\"Return True if logger is enabled.\n\n        Override this property if logging is disabled to avoid the\n        overhead of calculating details to feed the logger.\n\n        This property may be omitted if logging is always enabled.\n        \"\"\"\n        return self.logger.isEnabledFor(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Programmatically Closing WebSockets Server-Side in aiohttp (Python)\nDESCRIPTION: Shows how to programmatically close WebSocket connections server-side in aiohttp. This example implements an echo server with user authentication and a logout handler that closes all user's WebSockets.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def echo_handler(request):\n\n    ws = web.WebSocketResponse()\n    user_id = authenticate_user(request)\n    await ws.prepare(request)\n    request.app[websockets_key][user_id].add(ws)\n    try:\n        async for msg in ws:\n            ws.send_str(msg.data)\n    finally:\n        request.app[websockets_key][user_id].remove(ws)\n\n    return ws\n\n\nasync def logout_handler(request):\n\n    user_id = authenticate_user(request)\n\n    ws_closers = [ws.close()\n                  for ws in request.app[websockets_key][user_id]\n                  if not ws.closed]\n\n    # Watch out, this will keep us from returning the response\n    # until all are closed\n    ws_closers and await asyncio.gather(*ws_closers)\n\n    return web.Response(text='OK')\n\n\ndef main():\n    loop = asyncio.get_event_loop()\n    app = web.Application()\n    app.router.add_route('GET', '/echo', echo_handler)\n    app.router.add_route('POST', '/logout', logout_handler)\n    app[websockets_key] = defaultdict(set)\n    web.run_app(app, host='localhost', port=8080)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mocked Request Objects in AIOHTTP Tests in Python\nDESCRIPTION: Demonstrates how to create a mock request object using make_mocked_request for unit testing a web handler without starting a real server. It shows a simple test case for verifying a handler's response based on request headers.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\nfrom aiohttp.test_utils import make_mocked_request\n\ndef handler(request):\n    assert request.headers.get('token') == 'x'\n    return web.Response(body=b'data')\n\ndef test_handler():\n    req = make_mocked_request('GET', '/', headers={'token': 'x'})\n    resp = handler(req)\n    assert resp.body == b'data'\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Response Headers in aiohttp (Python)\nDESCRIPTION: Demonstrates how to access raw response headers in aiohttp using the raw_headers property. This is useful for handling non-standard encodings.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nassert resp.raw_headers == (\n    (b'SERVER', b'nginx'),\n    (b'DATE', b'Sat, 09 Jan 2016 20:28:40 GMT'),\n    (b'CONTENT-TYPE', b'text/html; charset=utf-8'),\n    (b'CONTENT-LENGTH', b'12150'),\n    (b'CONNECTION', b'keep-alive'))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routes with Authorization in AIOHTTP\nDESCRIPTION: Configures an AIOHTTP application with routes, adding a GET handler for the root path that includes an authorization check.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_33\n\nLANGUAGE: python\nCODE:\n```\napp = web.Application()\napp.add_routes([web.add_get('/', hello, expect_handler=check_auth)])\n```\n\n----------------------------------------\n\nTITLE: Custom TestClient Implementation with pytest Fixtures\nDESCRIPTION: Example of creating a custom TestClient subclass with additional authentication methods, and configuring pytest to use it via the aiohttp_client_cls fixture.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyClient(TestClient):\n    async def login(self, *, user, pw):\n        payload = {\"username\": user, \"password\": pw}\n        return await self.post(\"/login\", json=payload)\n\n@pytest.fixture\ndef aiohttp_client_cls():\n    return MyClient\n\ndef test_login(aiohttp_client):\n    app = web.Application()\n    client = await aiohttp_client(app)\n    await client.login(user=\"admin\", pw=\"s3cr3t\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Serving with Cache Busting in aiohttp\nDESCRIPTION: Demonstrates how to set up static file serving with cache busting enabled. When append_version is set to True, aiohttp will append a version hash to static file URLs to allow for indefinite browser caching.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nweb.static('/prefix', path_to_static_folder, append_version=True)\n```\n\n----------------------------------------\n\nTITLE: Async Factory Function for Gunicorn with aiohttp\nDESCRIPTION: Shows an async application factory for use with Gunicorn. The factory takes no parameters and returns a fully configured aiohttp application instance.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def my_web_app():\n    app = web.Application()\n    app.router.add_get(...)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Client Response Status Check\nDESCRIPTION: Added raise_for_status() method to client response objects to raise exceptions for error status codes.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nclient_resp.raise_for_status()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Applications in aiohttp\nDESCRIPTION: Demonstrates how to create and connect a sub-application (admin panel) to the main application with a URL prefix. Shows basic setup of routes and middleware chaining.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/whats_new_1_1.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadmin = web.Application()\n# setup admin routes, signals and middlewares\n\napp.add_subapp('/admin/', admin)\n```\n\n----------------------------------------\n\nTITLE: Storing Database Connections in aiohttp Application (Python)\nDESCRIPTION: Demonstrates how to store and access a database connection within an aiohttp application. This allows handlers to access shared resources like database connections.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndb_key = web.AppKey(\"db_key\", DB)\n\nasync def go(request):\n    db = request.app[db_key]\n    cursor = await db.cursor()\n    await cursor.execute('SELECT 42')\n    # ...\n    return web.Response(status=200, text='ok')\n\n\nasync def init_app():\n    app = Application()\n    db = await create_connection(user='user', password='123')\n    app[db_key] = db\n    app.router.add_get('/', go)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Writing Data to HTTP Response Body\nDESCRIPTION: Asynchronous method to send binary data as part of the response body. Requires prepare() to be called first and accepts bytes, bytearray or memoryview instances.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. method:: write(data)\n      :async:\n```\n\n----------------------------------------\n\nTITLE: Using pytest Markers to Switch Between Test Clients\nDESCRIPTION: Advanced example showing how to use pytest markers to dynamically select different TestClient implementations based on test requirements.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RESTfulClient(TestClient):\n    ...\n\nclass GraphQLClient(TestClient):\n    ...\n\n@pytest.fixture\ndef aiohttp_client_cls(request):\n    if request.node.get_closest_marker('rest') is not None:\n        return RESTfulClient\n    if request.node.get_closest_marker('graphql') is not None:\n        return GraphQLClient\n    return TestClient\n\n\n@pytest.mark.rest\nasync def test_rest(aiohttp_client) -> None:\n    client: RESTfulClient = await aiohttp_client(Application())\n    ...\n\n\n@pytest.mark.graphql\nasync def test_graphql(aiohttp_client) -> None:\n    client: GraphQLClient = await aiohttp_client(Application())\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Startup/Cleanup Context Generator in aiohttp with Python\nDESCRIPTION: Example of a context generator for handling both startup and cleanup in aiohttp applications. Uses an async generator pattern with yield to separate initialization and cleanup phases.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nasync def context(app):\n    # do startup stuff\n    yield\n    # do cleanup\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Response Objects\nDESCRIPTION: Shows how to store data in Response objects, which is useful for sharing information with signals and middlewares after the handler completes its work.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n  [ do all the work ]\n  response['my_metric'] = 123\n  return response\n```\n\n----------------------------------------\n\nTITLE: Proper Use of Shield for Database Operations in aiohttp\nDESCRIPTION: Demonstrates a safe pattern for using shield to protect multiple database operations by encapsulating them in a single function. This ensures that related operations are shielded together.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync def write_data(request):\n    await write_to_redis(request)\n    await write_to_postgres(request)\n\nasync def handler(request):\n    await shield(request, write_data(request))\n    return web.Response(text=\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Removing Content-Length from Multipart Parts in Python\nDESCRIPTION: Shows how to modify headers for all parts in a multipart writer to work with servers that use cgi.FieldStorage. This example removes the Content-Length header from each part to ensure compatibility.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor part in mpwriter:\n    part.headers.pop(aiohttp.hdrs.CONTENT_LENGTH, None)\n```\n\n----------------------------------------\n\nTITLE: Performing Operations After Sending Response in aiohttp (Python)\nDESCRIPTION: Demonstrates how to perform operations in a request handler after sending the response in aiohttp. This technique uses explicit response sending to allow for follow-up operations.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef ping_handler(request):\n    \"\"\"Send PONG and increase DB counter.\"\"\"\n\n    # explicitly send the response\n```\n\n----------------------------------------\n\nTITLE: Adding POST Route Handler for Login in AIOHTTP Python\nDESCRIPTION: Configures a POST route handler for the /login endpoint in an AIOHTTP web application. The route is named 'login' for reverse URL lookup and maps to a login handler function.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napp.router.add_post('/login', login, name='login')\n```\n\n----------------------------------------\n\nTITLE: Client Timeout Classes\nDESCRIPTION: Data classes for configuring various timeout settings in the AIOHTTP client, including total request time, connection establishment, and socket operations.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass ClientTimeout(*, total=None, connect=None, sock_connect=None, sock_read=None)\nclass ClientWSTimeout(*, ws_receive=None, ws_close=None)\n```\n\n----------------------------------------\n\nTITLE: Creating a MultipartReader from a Response in Python\nDESCRIPTION: Shows how to initialize a MultipartReader from an aiohttp response to begin processing multipart data. This is the first step in reading multipart content from responses.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.request(...) as resp:\n    pass\n\nreader = aiohttp.MultipartReader.from_response(resp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Expect Header Handler in aiohttp\nDESCRIPTION: Shows how to create a custom handler for the Expect header, allowing for custom processing of requests with Expect headers before the main request handler is called.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nasync def check_auth(request):\n    if request.version != aiohttp.HttpVersion11:\n        return\n\n    if request.headers.get('EXPECT') != '100-continue':\n        raise HTTPExpectationFailed(text=\"Unknown Expect: %s\" % expect)\n```\n\n----------------------------------------\n\nTITLE: Using Type-Safe AppKey for Application Configuration\nDESCRIPTION: Shows how to use AppKey instead of string keys for type safety when storing and retrieving data from the application config. This approach provides better type checking support.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nmy_private_key = web.AppKey(\"my_private_key\", str)\napp[my_private_key] = data\n\nasync def handler(request: web.Request):\n    data = request.app[my_private_key]\n    # reveal_type(data) -> str\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Headers in aiohttp POST Request (Python)\nDESCRIPTION: Demonstrates how to send custom headers with a POST request using aiohttp. In this example, a content-type header is specified for sending a GIF image payload.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://example.com/image'\npayload = b'GIF89a\\x01\\x00\\x01\\x00\\x00\\xff\\x00,\\x00\\x00'\n          b'\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x00;'\nheaders = {'content-type': 'image/gif'}\n\nawait session.post(url,\n                   data=payload,\n                   headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Running an External Process Alongside AIOHTTP Application\nDESCRIPTION: A cleanup context function that creates and manages an external subprocess that runs alongside the AIOHTTP application, ensuring proper termination during shutdown.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nasync def run_process(_app):\n    proc = await asyncio.create_subprocess_exec(path)\n\n    yield\n\n    if proc.returncode is None:\n        proc.terminate()\n    await proc.wait()\n\napp.cleanup_ctx.append(run_process)\n```\n\n----------------------------------------\n\nTITLE: Graceful Shutdown of aiohttp ClientSession (Python)\nDESCRIPTION: These snippets show how to implement a graceful shutdown for aiohttp ClientSessions to avoid ResourceWarnings. It demonstrates adding a small delay after closing the session to allow underlying connections to close properly.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nasync def read_website():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://example.org/') as resp:\n            await resp.read()\n    # Zero-sleep to allow underlying connections to close\n    await asyncio.sleep(0)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Wait 250 ms for the underlying SSL connections to close\nawait asyncio.sleep(0.250)\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform a PATCH request. It takes a URL, optional data for the request body, and additional keyword arguments to modify inner request parameters. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nasync def patch(url, *, data=None, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Coroutine in Python for aiohttp Testing\nDESCRIPTION: Demonstrates how to create and use a mock coroutine using the make_mocked_coro function. This utility is useful for testing asynchronous code in aiohttp applications.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmocked = make_mocked_coro(1)\nassert 1 == await mocked(1, 2)\nmocked.assert_called_with(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Closing aiohttp ClientSession in Python\nDESCRIPTION: Async method to close the underlying connector and release all acquired resources in the ClientSession.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nasync def close():\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: File Upload Form in HTML\nDESCRIPTION: HTML form for file uploads using multipart form data encoding.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/store/mp3\" method=\"post\" accept-charset=\"utf-8\"\n      enctype=\"multipart/form-data\">\n\n    <label for=\"mp3\">Mp3</label>\n    <input id=\"mp3\" name=\"mp3\" type=\"file\" value=\"\"/>\n\n    <input type=\"submit\" value=\"submit\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Headers in aiohttp ClientSession (Python)\nDESCRIPTION: Shows how to set default headers for all requests in a ClientSession. This example sets an Authorization header for basic authentication.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nheaders={\"Authorization\": \"Basic bG9naW46cGFzcw==\"}\nasync with aiohttp.ClientSession(headers=headers) as session:\n    async with session.get(\"http://httpbin.org/headers\") as r:\n        json_body = await r.json()\n        assert json_body['headers']['Authorization'] == \\\n            'Basic bG9naW46cGFzcw=='\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Custom Access Logger for aiohttp in Python\nDESCRIPTION: Defines an asynchronous custom AccessLogger class that inherits from AbstractAsyncAccessLogger. It overrides the log method to perform asynchronous logging operations and includes an enabled property.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/logging.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.abc import AbstractAsyncAccessLogger\n\nclass AccessLogger(AbstractAsyncAccessLogger):\n\n    async def log(self, request, response, time):\n        logging_service = request.app['logging_service']\n        await logging_service.log(f'{request.remote} '\n                                f'\"{request.method} {request.path} '\n                                f'done in {time}s: {response.status}')\n\n    @property\n    def enabled(self) -> bool:\n        \"\"\"Return True if logger is enabled.\n\n        Override this property if logging is disabled to avoid the\n        overhead of calculating details to feed the logger.\n        \"\"\"\n        return self.logger.isEnabledFor(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Implementing aiohttp Application Factory\nDESCRIPTION: aiohttp application factory function that creates and configures the application. This can be used as an entry point for Gunicorn.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def index(request):\n    return web.Response(text=\"Welcome home!\")\n\n\nasync def my_web_app():\n    app = web.Application()\n    app.router.add_get('/', index)\n    return app\n```\n\n----------------------------------------\n\nTITLE: Making HEAD Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform a HEAD request. It takes a URL, an optional allow_redirects parameter (default False), and additional keyword arguments. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def head(url, *, allow_redirects=False, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Using UnixConnector for HTTP Requests via UNIX Sockets in Python\nDESCRIPTION: Example code demonstrating how to create a UNIX socket connection using UnixConnector and make HTTP requests through it. The code shows creating a connector, initializing a ClientSession with it, and performing a GET request.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nconn = UnixConnector(path='/path/to/socket')\nsession = ClientSession(connector=conn)\nasync with session.get('http://python.org') as resp:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Constructing URL with Query Parameters in Python\nDESCRIPTION: Demonstrates how to construct a URL using a named resource and adding query parameters.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nurl = app.router['resource_name'].url_for().with_query({'a': 1, 'b': 2})\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up an AIOHTTP AppRunner\nDESCRIPTION: Shows how to properly clean up an AIOHTTP AppRunner instance to gracefully shut down the application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nawait runner.cleanup()\n```\n\n----------------------------------------\n\nTITLE: Problematic ClientSession Creation as Class Variable\nDESCRIPTION: This snippet demonstrates how using a ClientSession as a class variable has the same problems as module-level creation. The session variable becomes a hidden global object bound to the event loop at class definition time.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass A:\n    session = aiohttp.ClientSession()\n\n    async def fetch(self, url):\n        async with session.get(url) as resp:\n            return await resp.text()\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Check with Continue Response in AIOHTTP\nDESCRIPTION: A handler function that checks for the AUTHORIZATION header and responds with HTTP 100 Continue. If the AUTHORIZATION header is missing, it raises an HTTPForbidden exception.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nif request.headers.get('AUTHORIZATION') is None:\n    raise HTTPForbidden()\n\nrequest.transport.write(b\"HTTP/1.1 100 Continue\\r\\n\\r\\n\")\n```\n\n----------------------------------------\n\nTITLE: Adding Different Content Types to MultipartWriter in Python\nDESCRIPTION: Shows various ways to append different content types to a multipart writer, including text, binary data, file objects, and how to override default headers. Each append operation returns a Payload object that can be further customized.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmpwriter.append('hello')\n\nmpwriter.append(b'aiohttp')\n\nmpwriter.append(io.BytesIO(b'GIF89a...'),\n                {'CONTENT-TYPE': 'image/gif'})\n\npart = root.append(open(__file__, 'rb'))\n\npart.set_content_disposition('attachment', filename='secret.txt')\n\npart.headers[aiohttp.hdrs.CONTENT_ID] = 'X-12345'\n\npart.headers[aiohttp.hdrs.CONTENT_ENCODING] = 'gzip'\n\nmpwriter.append_json({'test': 'passed'})\nmpwriter.append_form([('key', 'value')])\n```\n\n----------------------------------------\n\nTITLE: URL Reversal for Sub-Applications\nDESCRIPTION: Example showing how to perform URL reversal (generation) for routes defined in sub-applications while maintaining proper URL prefixes.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/whats_new_1_1.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadmin = web.Application()\nadmin.add_get('/resource', handler, name='name')\n\napp.add_subapp('/admin/', admin)\n\nurl = admin.router['name'].url_for()\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple aiohttp Application\nDESCRIPTION: Basic aiohttp application with a single route. This can be used as a starting point for deployment with Gunicorn.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def index(request):\n    return web.Response(text=\"Welcome home!\")\n\n\nmy_web_app = web.Application()\nmy_web_app.router.add_get('/', index)\n```\n\n----------------------------------------\n\nTITLE: Using Route Decorators for Multiple HTTP Methods in aiohttp\nDESCRIPTION: This snippet shows how to use route decorators to define handlers for different HTTP methods in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nroutes = web.RouteTableDef()\n\n@routes.get('/')\nasync def get_handler(request):\n    ...\n\n@routes.post('/post')\nasync def post_handler(request):\n    ...\n\n@routes.put('/put')\nasync def put_handler(request):\n    ...\n\napp.add_routes(routes)\n```\n\n----------------------------------------\n\nTITLE: Executing OPTIONS Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform an OPTIONS request. It accepts a URL, an optional allow_redirects parameter (default True), and additional keyword arguments. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def options(url, *, allow_redirects=True, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp with C Parser Support\nDESCRIPTION: Command to build or install aiohttp with the high-performance C parser using either python -m build or pip install.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/vendor/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m build\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Restricting ClientResponse Methods Access in aiohttp\nDESCRIPTION: This change enforces that ClientResponse.text() and ClientResponse.json() methods cannot be called after exiting their async with context, matching the existing behavior of ClientResponse.read(). This helps prevent potential issues with accessing response data after the connection is closed.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/9254.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nClientResponse.text()/ClientResponse.json()\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Fingerprint in aiohttp (Python)\nDESCRIPTION: This snippet demonstrates how to verify a certificate's SHA256 fingerprint when making an HTTPS request using aiohttp. It includes an example of catching a FingerprintMismatch exception and accessing the expected and actual fingerprints.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Attempt to connect to https://www.python.org\n# with a pin to a bogus certificate:\nbad_fp = b'0'*64\nexc = None\ntry:\n    r = await session.get('https://www.python.org',\n                          ssl=aiohttp.Fingerprint(bad_fp))\nexcept aiohttp.FingerprintMismatch as e:\n    exc = e\nassert exc is not None\nassert exc.expected == bad_fp\n\n# www.python.org cert's actual fingerprint\nassert exc.got == b'...'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Zlib Backend in aiohttp (Python)\nDESCRIPTION: This snippet introduces the new function aiohttp.set_zlib_backend() which allows users to specify a custom zlib compression module. This provides flexibility in choosing the compression backend while maintaining the default behavior of using the builtin zlib library.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/9798.feature.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\naiohttp.set_zlib_backend(custom_zlib_module)\n```\n\n----------------------------------------\n\nTITLE: Route Table Registration in Python AIOHTTP\nDESCRIPTION: Demonstrates route registration using Django-style route tables in AIOHTTP by defining handlers and adding them through add_routes() method.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nasync def handle_get(request):\n    ...\n\n\nasync def handle_post(request):\n    ...\n\napp.router.add_routes([web.get('/get', handle_get),\n                      web.post('/post', handle_post)]\n```\n\n----------------------------------------\n\nTITLE: Creating a Prefix Route Match in aiohttp (Python)\nDESCRIPTION: Shows how to create a route that matches URLs with a given prefix in aiohttp. This can be useful for handling multiple routes under a common path.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napp.router.add_route('*', '/path/to/{tail:.+}', sink_handler)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Line Iteration in Python with aiohttp\nDESCRIPTION: Demonstrates how to asynchronously iterate over response content line by line using aiohttp's StreamReader\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/streams.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync for line in response.content:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Message Structure in Python\nDESCRIPTION: This code snippet defines the WSMessage class, a namedtuple that represents a WebSocket message. It includes attributes for data, extra information, and message type, as well as a method for parsing JSON data.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/websocket_utilities.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass WSMessage(namedtuple):\n    data: Union[str, bytes, int, Exception]\n    extra: Optional[str]\n    type: WSMsgType\n\n    def json(self, *, loads=json.loads):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Event Loop in Python with asyncio\nDESCRIPTION: Example of how to properly access the currently running event loop in Python using asyncio.get_event_loop() instead of explicitly passing loop parameters. This is the recommended approach for aiohttp objects.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/3580.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasyncio.get_event_loop()\n```\n\n----------------------------------------\n\nTITLE: Accessing Config in Nested Applications\nDESCRIPTION: Shows how to access configuration from nested applications with proper fallback to parent applications using the config_dict property of the Request object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    data = request.config_dict[my_private_key]\n```\n\n----------------------------------------\n\nTITLE: Installing AIOHTTP with All Performance Speedups\nDESCRIPTION: Single command to install AIOHTTP with all recommended performance enhancements including aiodns and Brotli compression support in one bundle.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install aiohttp[speedups]\n```\n\n----------------------------------------\n\nTITLE: Uploading File with Explicit Filename and Content-Type in Python using aiohttp\nDESCRIPTION: This snippet demonstrates how to upload a file with explicitly set filename and content-type using aiohttp's FormData. It's useful when you need more control over the file metadata in the request.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://httpbin.org/post'\ndata = aiohttp.FormData()\ndata.add_field('file',\n               open('report.xls', 'rb'),\n               filename='report.xls',\n               content_type='application/vnd.ms-excel')\n\nawait session.post(url, data=data)\n```\n\n----------------------------------------\n\nTITLE: Updating WebSocket Message Type Enum Usage in Python aiohttp\nDESCRIPTION: Migration guide showing the transition from deprecated lowercase WSMsgType enum values to new uppercase values. The change affects WebSocket message type identification in aiohttp applications.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/2835.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old usage (deprecated)\nWSMsgType.text\nWSMsgType.binary\n\n# New usage\nWSMsgType.TEXT\nWSMsgType.BINARY\n```\n\n----------------------------------------\n\nTITLE: Sharing Database Connections Using Cleanup Context in aiohttp (Python)\nDESCRIPTION: Illustrates how to share database connections between a main application and its subapplications using aiohttp's cleanup context. This approach ensures proper setup and teardown of shared resources.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def db_context(app: web.Application) -> AsyncIterator[None]:\n   async with create_db() as db:\n      mainapp[db_key] = mainapp[subapp_key][db_key] = db\n      yield\n\nmainapp[subapp_key] = subapp\nmainapp.add_subapp(\"/prefix\", subapp)\nmainapp.cleanup_ctx.append(db_context)\n```\n\n----------------------------------------\n\nTITLE: Using FileResponse in aiohttp 2.x Server\nDESCRIPTION: Example of handling file serving in aiohttp 2.x using the new FileResponse class. This replaces the deprecated FileSender API from 1.x.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/migration_to_2xx.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def handle(request):\n    return web.FileResponse('path-to-file.txt')\n```\n\n----------------------------------------\n\nTITLE: Creating MultipartReader in Python\nDESCRIPTION: Defines a reader class for multipart body content. It provides methods for checking end-of-file status, getting the next body part, and releasing the connection.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart_reference.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MultipartReader(headers, content):\n\n   @classmethod\n   def from_response(cls, response):\n      # Constructs reader instance from HTTP response.\n      pass\n\n   def at_eof():\n      # Returns True if the final boundary was reached or False otherwise.\n      pass\n\n   async def next():\n      # Emits the next multipart body part.\n      pass\n\n   async def release():\n      # Reads all the body parts to the void till the final boundary.\n      pass\n\n   async def fetch_next_part():\n      # Returns the next body part reader.\n      pass\n```\n\n----------------------------------------\n\nTITLE: Redirection Exception Constructor\nDESCRIPTION: Constructor signature for redirection exceptions that require a location parameter for the Location HTTP header\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHTTPFound(location, *,headers=None, reason=None,\n          text=None, content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Enabling Chunked Encoding in StreamResponse\nDESCRIPTION: Method for enabling chunked encoding for HTTP/1.1 responses. When enabled, each write operation is encoded in a separate chunk, but it cannot be used simultaneously with content_length.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. method:: enable_chunked_encoding()\n```\n\n----------------------------------------\n\nTITLE: Executing PUT Request with aiohttp ClientSession in Python\nDESCRIPTION: Async method to perform a PUT request. It takes a URL, optional data for the request body, and additional keyword arguments for modifying inner request parameters. Returns a ClientResponse object.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def put(url, *, data=None, **kwargs):\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Correct Decorator Order for Jinja2 Templates and Route Registration\nDESCRIPTION: Shows the proper order for applying decorators when using both aiohttp_jinja2.template and route registration. The template decorator must be applied after the route decorator in the code (meaning it executes before the route decorator).\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@routes.get('/path')\n@aiohttp_jinja2.template('tmpl.jinja2')\nasync def handler(request):\n    return {'name': 'Andrew', 'surname': 'Svetlov'}\n```\n\n----------------------------------------\n\nTITLE: Custom PairsMultipartReader Class Implementation\nDESCRIPTION: A custom MultipartReader class that returns pairs of document objects and file readers. This organizes multipart data processing into a more structured format.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass PairsMultipartReader(aiohttp.MultipartReader):\n\n    # keep reference on the original reader\n    multipart_reader_cls = aiohttp.MultipartReader\n\n    async def next(self):\n        \"\"\"Emits a tuple of document object (:class:`dict`) and multipart\n        reader of the followed attachments (if any).\n\n        :rtype: tuple\n        \"\"\"\n        reader = await super().next()\n\n        if self._at_eof:\n            return None, None\n\n        if isinstance(reader, self.multipart_reader_cls):\n            part = await reader.next()\n            doc = await part.json()\n        else:\n            doc = await reader.json()\n\n        return doc, reader\n```\n\n----------------------------------------\n\nTITLE: Using Base URL for Multiple Requests\nDESCRIPTION: Example showing how to use base_url parameter to make multiple requests to the same domain\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with aiohttp.ClientSession('http://httpbin.org') as session:\n    async with session.get('/get'):\n        pass\n    async with session.post('/post', data=b'data'):\n        pass\n    async with session.put('/put', data=b'data'):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing aiohttp Server for Supervisord Deployment\nDESCRIPTION: Python script for an aiohttp server configured to work with supervisord. Parses command line arguments for socket path or port and runs the application.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# aiohttp_example.py\nimport argparse\nfrom aiohttp import web\n\nparser = argparse.ArgumentParser(description=\"aiohttp server example\")\nparser.add_argument('--path')\nparser.add_argument('--port')\n\n\nif __name__ == '__main__':\n    app = web.Application()\n    # configure app\n\n    args = parser.parse_args()\n    web.run_app(app, path=args.path, port=args.port)\n```\n\n----------------------------------------\n\nTITLE: AIOHTTP JSON Response Helper\nDESCRIPTION: New json_response() function added for easily creating JSON responses in web handlers.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\njson_response(data)\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Registration in Python\nDESCRIPTION: Shows how to verify if a specific route is registered in the router resources.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nroute in app.router.resources()\n```\n\n----------------------------------------\n\nTITLE: Basic Multipart Data Reading with aiohttp\nDESCRIPTION: A basic approach to read multipart data that contains both documents and file attachments. This method works but results in messy code structure.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresult = []\nwhile True:\n    part = await reader.next()\n\n    if part is None:\n        break\n\n    if isinstance(part, aiohttp.MultipartReader):\n        # Fetching files\n        while True:\n            filepart = await part.next()\n            if filepart is None:\n                break\n            result[-1].append((await filepart.read()))\n\n    else:\n        # Fetching document\n        result.append([(await part.json())])\n```\n\n----------------------------------------\n\nTITLE: Chunked Data Iteration with Size Limit\nDESCRIPTION: Shows how to iterate over data chunks with a maximum size limit using the iter_chunked method\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/streams.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync for data in response.content.iter_chunked(1024):\n    print(data)\n```\n\n----------------------------------------\n\nTITLE: Fixing IPv6 Connection in Python\nDESCRIPTION: Restored the ability to connect to IPv6-only hosts. This fix was implemented in version 3.8.1.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Restored ability to connect IPv6-only host.\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPMethodNotAllowed Exception in AIOHTTP\nDESCRIPTION: Definition of the HTTPMethodNotAllowed exception for 405 Method Not Allowed responses. This exception includes parameters for the requested method and allowed methods, which are used to construct the Allow HTTP header.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nHTTPMethodNotAllowed(method, allowed_methods, *, \\\n                                    headers=None, reason=None, text=None, \\\n                                    content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Refactored aiohttp Example with Function Separation\nDESCRIPTION: A more modular approach to making HTTP requests with aiohttp, demonstrating how to pass the session object to reusable functions.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/http_request_lifecycle.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n\nasync def fetch(session, url):\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        html = await fetch(session, 'http://python.org')\n        print(html)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing BodyPartReader in Python\nDESCRIPTION: Defines a reader class for single body parts in multipart content. It includes methods for reading data, handling chunks, decoding content, and extracting metadata like charset, name, and filename.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart_reference.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BodyPartReader(boundary, headers, content):\n\n   async def read(*, decode=False):\n      # Reads body part data.\n      pass\n\n   async def read_chunk(size=chunk_size):\n      # Reads body part content chunk of the specified size.\n      pass\n\n   async def readline():\n      # Reads body part by line by line.\n      pass\n\n   async def release():\n      # Like read(), but reads all the data to the void.\n      pass\n\n   async def text(*, encoding=None):\n      # Like read(), but assumes that body part contains text data.\n      pass\n\n   async def json(*, encoding=None):\n      # Like read(), but assumes that body parts contains JSON data.\n      pass\n\n   async def form(*, encoding=None):\n      # Like read(), but assumes that body parts contains form\n      # urlencoded data.\n      pass\n\n   def at_eof():\n      # Returns True if the boundary was reached or False otherwise.\n      pass\n\n   def decode(data):\n      # Decodes data according to Content-Encoding or Content-Transfer-Encoding headers.\n      pass\n\n   def get_charset(default=None):\n      # Returns charset parameter from Content-Type header or default.\n      pass\n\n   @property\n   def name(self):\n      # A field name specified in Content-Disposition header or None\n      pass\n\n   @property\n   def filename(self):\n      # A field filename specified in Content-Disposition header or None\n      pass\n```\n\n----------------------------------------\n\nTITLE: Supporting OPTIONS HTTP Method in Python\nDESCRIPTION: Added support for registering OPTIONS HTTP method handlers via RouteTableDef. This feature was added in version 3.8.2.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Support registering OPTIONS HTTP method handlers via RouteTableDef.\n```\n\n----------------------------------------\n\nTITLE: Updating compress parameter default in aiohttp\nDESCRIPTION: Changed the default value of the compress parameter from None to False, as None is no longer considered a valid value for this setting. This change affects how HTTP compression is handled by default in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/9109.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncompress=False  # Changed from compress=None\n```\n\n----------------------------------------\n\nTITLE: Passing URL Parameters\nDESCRIPTION: Demonstrates how to pass query parameters in URLs using the params argument with different formats\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_quickstart.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparams = {'key1': 'value1', 'key2': 'value2'}\nasync with session.get('http://httpbin.org/get',\n                       params=params) as resp:\n    expect = 'http://httpbin.org/get?key1=value1&key2=value2'\n    assert str(resp.url) == expect\n```\n\n----------------------------------------\n\nTITLE: URL Path Allowed Characters Definition\nDESCRIPTION: Shows the allowed characters that can be used in URL paths according to RFC 3986, defining the syntax for unreserved characters, percent-encoding, and sub-delimiters.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/glossary.rst#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nallowed       = unreserved / pct-encoded / sub-delims\n                     / \":\" / \"@\" / \"/\"\n\npct-encoded   = \"%\" HEXDIG HEXDIG\n\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Redirection History in aiohttp (Python)\nDESCRIPTION: Demonstrates how to access the redirection history of a request in aiohttp. The history attribute contains previous responses in the redirection chain.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresp = await session.get('http://example.com/some/redirect/')\nassert resp.status == 200\nassert resp.url == URL('http://example.com/some/other/url/')\nassert len(resp.history) == 1\nassert resp.history[0].status == 301\nassert resp.history[0].url == URL(\n    'http://example.com/some/redirect/')\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Exception Handler in aiohttp\nDESCRIPTION: Demonstrates how to raise an HTTP redirect exception in an aiohttp request handler\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def handler(request):\n    raise aiohttp.web.HTTPFound('/redirect')\n```\n\n----------------------------------------\n\nTITLE: Registering Middlewares with an aiohttp Application\nDESCRIPTION: Shows how to register middlewares when creating an Application instance. Middlewares are executed in the order they are provided.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napp = web.Application(middlewares=[middleware_1,\n                                  middleware_2])\n```\n\n----------------------------------------\n\nTITLE: Content Length and Chunked Encoding\nDESCRIPTION: Example showing validation of Content-Length header and chunked transfer encoding\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nraise RuntimeError(\"Cannot enable chunked encoding and set content length\")\n```\n\n----------------------------------------\n\nTITLE: Using __slots__ in Python dataclasses for memory optimization\nDESCRIPTION: Implementation example showing the use of __slots__ attribute in Python dataclasses to reduce memory footprint by restricting dynamic attribute creation. This optimization is particularly effective when dealing with many small objects.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/9413.misc.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n__slots__\n```\n\n----------------------------------------\n\nTITLE: Uploading Pre-compressed Data in aiohttp (Python)\nDESCRIPTION: Demonstrates how to upload pre-compressed data using aiohttp. The Content-Encoding header is set to specify the compression algorithm used.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nasync def my_coroutine(session, headers, my_data):\n    data = zlib.compress(my_data)\n    headers = {'Content-Encoding': 'deflate'}\n    async with session.post('http://httpbin.org/post',\n                            data=data,\n                            headers=headers)\n        pass\n```\n\n----------------------------------------\n\nTITLE: Response Write EOF\nDESCRIPTION: Example of writing end-of-file marker during HTTP response\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nResponse.write_eof()\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Quoting in aiohttp (Python)\nDESCRIPTION: Demonstrates how to disable cookie quoting in aiohttp, which may be necessary for some backend systems that don't support quoted cookies.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\njar = aiohttp.CookieJar(quote_cookie=False)\nsession = aiohttp.ClientSession(cookie_jar=jar)\n```\n\n----------------------------------------\n\nTITLE: HTTP Exception Constructor Example\nDESCRIPTION: Shows the common constructor signature used by HTTP exceptions for customizing headers, reason, text and content type\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nHTTPNotFound(*, headers=None, reason=None,\n             text=None, content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multipart Request Processing in aiohttp (Python)\nDESCRIPTION: Example of how to implement the multipart method in aiohttp's Request class to process incoming multipart requests using MultipartReader.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def multipart(self, *, reader=aiohttp.multipart.MultipartReader):\n    return reader(self.headers, self._payload)\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Ceiling Threshold in AIOHTTP\nDESCRIPTION: Sets a custom timeout ceiling threshold for the AIOHTTP application to control how timeout values are rounded up.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_38\n\nLANGUAGE: python\nCODE:\n```\napp = web.Application(handler_args={\"timeout_ceil_threshold\": 1})\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies\nDESCRIPTION: Command to install required development libraries for aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make install-dev\n```\n\n----------------------------------------\n\nTITLE: Preparing HTTP Response for Sending\nDESCRIPTION: Asynchronous method to send HTTP headers after computing default headers. This method must be called before writing response body data, and triggers on_response_prepare signal handlers.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. method:: prepare(request)\n      :async:\n```\n\n----------------------------------------\n\nTITLE: Detaching aiohttp ClientSession in Python\nDESCRIPTION: Method to detach the ClientSession. No further details provided in the given context.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef detach():\n    # Method implementation\n```\n\n----------------------------------------\n\nTITLE: Setting and Updating Authorization Header in aiohttp (Python)\nDESCRIPTION: Demonstrates how to set and update the Authorization header for a session in aiohttp. The header can be set during session creation or updated later.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nheaders = {\"Authorization\": \"Bearer eyJh...0M30\"}\nasync with ClientSession(headers=headers) as session:\n    ...\n\nsession.headers[\"Authorization\"] = \"Bearer eyJh...1OH0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Cookies in aiohttp (Python)\nDESCRIPTION: Shows how to access cookies from a response in aiohttp. This example prints the value of a specific cookie.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nurl = 'http://example.com/some/cookie/setting/url'\nasync with session.get(url) as resp:\n    print(resp.cookies['example_cookie_name'])\n```\n\n----------------------------------------\n\nTITLE: Improved Multipart Data Processing with Custom Reader\nDESCRIPTION: A cleaner approach to multipart data processing using the custom PairsMultipartReader, which separates documents and their attachments into organized tuples.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nreader = PairsMultipartReader.from_response(resp)\nresult = []\nwhile True:\n    doc, files_reader = await reader.next()\n\n    if doc is None:\n        break\n\n    files = []\n    while True:\n        filepart = await files_reader.next()\n        if file.part is None:\n            break\n        files.append((await filepart.read()))\n\n    result.append((doc, files))\n```\n\n----------------------------------------\n\nTITLE: Equivalent Request in requests Library\nDESCRIPTION: Demonstrates how the same HTTP request is performed in the synchronous requests library, highlighting the simplicity but lack of asynchronous benefits.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/http_request_lifecycle.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = requests.get('http://python.org')\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Including Changelog Content in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include external content in a reStructuredText document. It specifically includes the changelog entries from the CHANGES.rst file, starting after a specific marker.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/changes.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: ../CHANGES.rst\n   :start-after: .. towncrier release notes start\n```\n\n----------------------------------------\n\nTITLE: Defining Response Preparation Signal Handler in aiohttp with Python\nDESCRIPTION: Example signature for a signal handler for on_response_prepare signal in aiohttp. This handler allows adding custom headers or modifying default headers before sending to the client.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def on_prepare(request, response):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Finalizing HTTP Response\nDESCRIPTION: Asynchronous method to mark the end of HTTP response processing. After calling this method, no further manipulations with the response object are allowed.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. method:: write_eof()\n      :async:\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Router Resources in Python\nDESCRIPTION: Demonstrates how to iterate through all registered resources in the router table.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfor resource in app.router.resources():\n    print(resource)\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Range Property Example\nDESCRIPTION: Examples demonstrating two ways to use the http_range property for handling range requests - via attribute access and slice notation\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrng = request.http_range\nwith open(filename, 'rb') as f:\n    f.seek(rng.start)\n    return f.read(rng.stop-rng.start)\n\n# Alternative slice notation\nreturn buffer[request.http_range]\n```\n\n----------------------------------------\n\nTITLE: Utility Classes\nDESCRIPTION: Helper classes for handling ETags, Content-Disposition headers, request information and basic authentication.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass ETag(name, is_weak=False)\nclass ContentDisposition\nclass RequestInfo()\nclass BasicAuth(login, password='', encoding='latin1')\n```\n\n----------------------------------------\n\nTITLE: Fixing Cookie Overwriting in Python\nDESCRIPTION: Fixed an issue where cookies with the same name and domain but different paths were incorrectly overwritten. This was addressed in version 3.8.4.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed incorrectly overwriting cookies with the same name and domain, but different path.\n```\n\n----------------------------------------\n\nTITLE: Cythonizing aiohttp's Parser after llhttp Build\nDESCRIPTION: Commands to return to the root directory and cythonize the aiohttp parser using the built llhttp library.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/vendor/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd -\nmake cythonize\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for aiohttp Client Documentation in RST\nDESCRIPTION: This RST code snippet defines the table of contents for the aiohttp Client documentation. It includes links to various sections such as quickstart guide, advanced usage, API reference, tracing reference, and the HTTP request lifecycle.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :name: client\n   :maxdength: 3\n\n   Quickstart <client_quickstart>\n   Advanced Usage <client_advanced>\n   Reference <client_reference>\n   Tracing Reference <tracing_reference>\n   The aiohttp Request Lifecycle <http_request_lifecycle>\n```\n\n----------------------------------------\n\nTITLE: Configuring Python URL Routes with Path Parameters\nDESCRIPTION: Example showing how to add URL routes to an aiohttp application using both raw non-ASCII paths and percent-encoded paths. Both methods are treated equivalently by the router.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/whats_new_1_1.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.router.add_get('/путь', handler)\n\napp.router.add_get('/%D0%BF%D1%83%D1%82%D1%8C', handler)\n```\n\n----------------------------------------\n\nTITLE: Working with Named Resources in Python\nDESCRIPTION: Demonstrates various operations with named resources, including getting the length, iterating through items, checking if a name exists, and accessing a resource by name.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nlen(app.router.named_resources())\n\nfor name, resource in app.router.named_resources().items():\n    print(name, resource)\n\n\"name\" in app.router.named_resources()\n\napp.router.named_resources()[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource in aiohttp Router\nDESCRIPTION: Demonstrates how to add a resource to the router in aiohttp 0.21. Resources now have a path and an optional name, which is unique in the router context.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/new_router.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresource = router.add_resource('/path/{to}', name='name')\n```\n\n----------------------------------------\n\nTITLE: Checking Router Resources Size in Python\nDESCRIPTION: Shows how to get the size of the router table by using the len() function on the resources view returned by app.router.resources().\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nlen(app.router.resources())\n```\n\n----------------------------------------\n\nTITLE: Using AbstractCookieJar in aiohttp\nDESCRIPTION: Example showing how to access and iterate through cookies in an aiohttp client session.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/abc.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlen(session.cookie_jar)\n\nfor cookie in session.cookie_jar:\n    print(cookie.key)\n    print(cookie[\"domain\"])\n```\n\n----------------------------------------\n\nTITLE: Default aiohttp Access Log Format\nDESCRIPTION: The default access log format string used by aiohttp. This format includes IP address, timestamp, request line, status code, bytes sent, referer, and user agent information.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n'%a %t \"%r\" %s %b \"%{Referer}i\" \"%{User-Agent}i\"'\n```\n\n----------------------------------------\n\nTITLE: Route Class Hierarchy in AIOHTTP\nDESCRIPTION: Shows the inheritance hierarchy of AIOHTTP route classes. AbstractRoute is the base class, with ResourceRoute for handling resources and SystemRoute for URL resolving errors.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nAbstractRoute\n  ResourceRoute\n  SystemRoute\n```\n\n----------------------------------------\n\nTITLE: Using the aiojobs.aiohttp.atomic Decorator for Non-cancellable Handlers\nDESCRIPTION: Shows how to use the atomic decorator to make an entire handler function non-cancellable. This is useful for POST handlers that must complete their operations even if the client disconnects.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom aiojobs.aiohttp import atomic\n\n@atomic\nasync def handler(request):\n    await write_to_db()\n    return web.Response()\n\napp = web.Application()\nsetup(app)\napp.router.add_post(\"/\", handler)\n```\n\n----------------------------------------\n\nTITLE: Defining TraceRequestRedirectParams Class in Python\nDESCRIPTION: This class defines attributes for tracing request redirects in aiohttp. It includes method, url, headers, and the response received from the redirect.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/tracing_reference.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TraceRequestRedirectParams:\n    method   # Method used to get this redirect request\n    url      # URL used for this redirect request\n    headers  # Headers used for this redirect\n    response # Response ClientResponse got from the redirect\n```\n\n----------------------------------------\n\nTITLE: Character Set Detection for aiohttp Responses (Python)\nDESCRIPTION: These snippets demonstrate how to handle character set detection for aiohttp responses when the charset is not specified in the Content-Type header. It shows examples using both chardetng_py and charset-normalizer libraries.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom chardetng_py import detect\n\ndef charset_resolver(resp: ClientResponse, body: bytes) -> str:\n    tld = resp.url.host.rsplit(\".\", maxsplit=1)[-1]\n    return detect(body, allow_utf8=True, tld=tld.encode())\n\nClientSession(fallback_charset_resolver=charset_resolver)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom charset_normalizer import detect\n\nClientSession(fallback_charset_resolver=lambda r, b: detect(b)[\"encoding\"] or \"utf-8\")\n```\n\n----------------------------------------\n\nTITLE: Setting up aiohttp-debugtoolbar in a web application\nDESCRIPTION: Python code snippet showing how to integrate the debugging toolbar into an aiohttp web application. This involves importing the necessary modules and calling the setup function on the application instance.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp_debugtoolbar\nfrom aiohttp_debugtoolbar import toolbar_middleware_factory\n\napp = web.Application()\naiohttp_debugtoolbar.setup(app)\n```\n\n----------------------------------------\n\nTITLE: Adding a Route to a Resource in aiohttp\nDESCRIPTION: Shows how to add a route to a resource in aiohttp 0.21. Routes correspond to HTTP methods and web handlers for those methods.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/new_router.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nroute = resource.add_route('GET', handler)\n```\n\n----------------------------------------\n\nTITLE: HTTP Chunk Processing with Buffer\nDESCRIPTION: Demonstrates how to process HTTP chunks while maintaining original chunk formatting, using a buffer to accumulate data between chunk boundaries\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/streams.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbuffer = b\"\"\n\nasync for data, end_of_http_chunk in response.content.iter_chunks():\n    buffer += data\n    if end_of_http_chunk:\n        print(buffer)\n        buffer = b\"\"\n```\n\n----------------------------------------\n\nTITLE: Running test suite\nDESCRIPTION: Command to run the complete test suite including linters.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies from HTTP Response\nDESCRIPTION: Method for removing cookies from an HTTP response. Takes the cookie name and optional path and domain parameters to target specific cookies.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_reference.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. method:: del_cookie(name, *, path='/', domain=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring CookieJar for Unsafe Cookies in aiohttp (Python)\nDESCRIPTION: Shows how to configure CookieJar to accept cookies from IP addresses, which is useful for testing but not recommended for production.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\njar = aiohttp.CookieJar(unsafe=True)\nsession = aiohttp.ClientSession(cookie_jar=jar)\n```\n\n----------------------------------------\n\nTITLE: Using DummyCookieJar in aiohttp (Python)\nDESCRIPTION: Shows how to use DummyCookieJar in aiohttp to disable cookie processing, which can be useful in certain scenarios.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\njar = aiohttp.DummyCookieJar()\nsession = aiohttp.ClientSession(cookie_jar=jar)\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Message Types in Python using IntEnum\nDESCRIPTION: This code snippet defines the WSMsgType class, an IntEnum that describes different types of WebSocket messages. It includes attributes for text, binary, ping, pong, and various control frames.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/websocket_utilities.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass WSMsgType(IntEnum):\n    CONTINUATION = ...\n    TEXT = ...\n    BINARY = ...\n    PING = ...\n    PONG = ...\n    CLOSE = ...\n    CLOSED FRAME = ...\n    ERROR = ...\n```\n\n----------------------------------------\n\nTITLE: Initializing MultipartResponseWrapper in Python\nDESCRIPTION: Defines a wrapper class for MultipartReader to manage the underlying connection. It provides methods for checking end-of-file status, getting the next multipart reader object, and releasing the connection.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/multipart_reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MultipartResponseWrapper(resp, stream):\n\n   def at_eof():\n      # Returns True when all response data had been read.\n      pass\n\n   async def next():\n      # Emits next multipart reader object.\n      pass\n\n   async def release():\n      # Releases the connection gracefully, reading all the content\n      # to the void.\n      pass\n```\n\n----------------------------------------\n\nTITLE: Setting up standard Python venv for aiohttp\nDESCRIPTION: Commands for creating and activating a Python virtual environment using standard venv module.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd aiohttp\n$ python3 -m venv venv\n$ . venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining TraceRequestExceptionParams Class in Python\nDESCRIPTION: This class defines attributes for tracing request exceptions in aiohttp. It includes method, url, headers, and the exception raised during the request.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/tracing_reference.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TraceRequestExceptionParams:\n    method  # Method used to make the request\n    url     # URL used for the request\n    headers # Headers used for the request\n    exception # Exception raised during the request\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Close Codes in Python using IntEnum\nDESCRIPTION: This code snippet defines the WSCloseCode class, an IntEnum that represents various WebSocket close message codes. It includes attributes for different scenarios such as normal closure, protocol errors, and service-related issues.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/websocket_utilities.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass WSCloseCode(IntEnum):\n    OK = ...\n    GOING_AWAY = ...\n    PROTOCOL_ERROR = ...\n    UNSUPPORTED_DATA = ...\n    INVALID_TEXT = ...\n    POLICY_VIOLATION = ...\n    MESSAGE_TOO_BIG = ...\n    MANDATORY_EXTENSION = ...\n    INTERNAL_ERROR = ...\n    SERVICE_RESTART = ...\n    TRY_AGAIN_LATER = ...\n    ABNORMAL_CLOSURE = ...\n    BAD_GATEWAY = ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy for Gunicorn\nDESCRIPTION: Nginx configuration to proxy requests to Gunicorn workers running an aiohttp application. Sets up a server listening on port 80 and forwards requests to localhost:8080.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nworker_processes 1;\nuser nobody nogroup;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    ## Main Server Block\n    server {\n        ## Open by default.\n        listen                80 default_server;\n        server_name           main;\n        client_max_body_size  200M;\n\n        ## Main site location.\n        location / {\n            proxy_pass                          http://127.0.0.1:8080;\n            proxy_set_header                    Host $host;\n            proxy_set_header X-Forwarded-Host   $server_name;\n            proxy_set_header X-Real-IP          $remote_addr;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TTL DNS Cache Type Hints\nDESCRIPTION: Change to ttl_dns_cache type annotation from int to Optional[int] to allow None values\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nttl_dns_cache: int # Before\nttl_dns_cache: Optional[int] # After\n```\n\n----------------------------------------\n\nTITLE: Processing Changelog Entries with Towncrier and Jinja2\nDESCRIPTION: A comprehensive template that formats changelog entries by sections and categories. It handles different types of references (PRs, issues, commits) and applies special handling for scientific notation to prevent Jinja overflow errors. The template produces a structured changelog with proper linking to GitHub references.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/.TEMPLATE.rst#2025-04-20_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{# TOWNCRIER TEMPLATE #}\n{% for section, _ in sections.items() %}\n{% set underline = underlines[0] %}{% if section %}{{section}}\n{{ underline * section|length }}{% set underline = underlines[1] %}\n\n{% endif %}\n\n{% if sections[section] %}\n{% for category, val in definitions.items() if category in sections[section]%}\n{{ definitions[category]['name'] }}\n{{ underline * definitions[category]['name']|length }}\n\n{% if definitions[category]['showcontent'] %}\n{% for text, change_note_refs in sections[section][category].items() %}\n- {{ text + '\\n' }}\n\n  {#\n      NOTE: Replacing 'e' with 'f' is a hack that prevents Jinja's `int`\n      NOTE: filter internal implementation from treating the input as an\n      NOTE: infinite float when it looks like a scientific notation (with a\n      NOTE: single 'e' char in between digits), raising an `OverflowError`,\n      NOTE: subsequently. 'f' is still a hex letter so it won't affect the\n      NOTE: check for whether it's a (short or long) commit hash or not.\n      Ref: https://github.com/pallets/jinja/issues/1921\n  -#}\n  {%-\n    set pr_issue_numbers = change_note_refs\n    | map('lower')\n    | map('replace', 'e', 'f')\n    | map('int', default=None)\n    | select('integer')\n    | map('string')\n    | list\n  -%}\n  {%- set arbitrary_refs = [] -%}\n  {%- set commit_refs = [] -%}\n  {%- with -%}\n    {%- set commit_ref_candidates = change_note_refs | reject('in', pr_issue_numbers) -%}\n    {%- for cf in commit_ref_candidates -%}\n      {%- if cf | length in (7, 8, 40) and cf | int(default=None, base=16) is not none -%}\n        {%- set _ = commit_refs.append(cf) -%}\n      {%- else -%}\n        {%- set _ = arbitrary_refs.append(cf) -%}\n      {%- endif -%}\n    {%- endfor -%}\n  {%- endwith -%}\n\n  {% if pr_issue_numbers -%}\n  *Related issues and pull requests on GitHub:*\n  :issue:`{{ pr_issue_numbers | join('`, :issue:`') }}`.\n  {% endif %}\n\n  {% if commit_refs -%}\n  *Related commits on GitHub:*\n  :commit:`{{ commit_refs | join('`, :commit:`') }}`.\n  {% endif %}\n\n  {% if arbitrary_refs -%}\n  *Unlinked references:*\n  {{ arbitrary_refs | join(', ') }}`.\n  {% endif %}\n\n{% endfor %}\n{% else %}\n- {{ sections[section][category]['']|join(', ') }}\n\n{% endif %}\n{% if sections[section][category]|length == 0 %}\nNo significant changes.\n\n{% else %}\n{% endif %}\n\n{% endfor %}\n{% else %}\nNo significant changes.\n\n\n{% endif %}\n{% endfor %}\n----\n{{ '\\n' * 2 }}\n```\n\n----------------------------------------\n\nTITLE: Shortcut for Adding Route in aiohttp 0.21\nDESCRIPTION: Illustrates the new implementation of app.router.add_route() as a shortcut for adding a resource and a route in aiohttp 0.21.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/new_router.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresource = app.router.add_resource(path, name=name)\nroute = resource.add_route(method, handler)\nreturn route\n```\n\n----------------------------------------\n\nTITLE: Defining TraceDnsResolveHostStartParams Class in Python\nDESCRIPTION: This class defines an attribute for tracing the start of DNS host resolution in aiohttp. It includes the host that will be resolved.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/tracing_reference.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TraceDnsResolveHostStartParams:\n    host  # Host that will be resolved\n```\n\n----------------------------------------\n\nTITLE: Updating WebSocket Message Unpacking in Python\nDESCRIPTION: Demonstrates the change in tuple unpacking order for WSMessage objects in aiohttp. The new order places 'data' first, followed by 'extra' and 'typ'.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/7319.feature.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntyp, data, extra = ws_message\n```\n\nLANGUAGE: Python\nCODE:\n```\ndata, extra, typ = ws_message\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous SetUp Method in AIOHTTP TestCase Class in Python\nDESCRIPTION: Example of how to override the asyncSetUp method in a TestCase to execute asynchronous code during test setup. It shows the proper pattern of calling the parent class's implementation before executing custom code.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def asyncSetUp(self):\n    await super().asyncSetUp()\n    await foo()\n```\n\n----------------------------------------\n\nTITLE: Merging release changes into target branches in aiohttp\nDESCRIPTION: Git commands for merging a release branch into target branches. This includes checking out the target branch, performing a GPG-signed merge, and handling necessary cleanup procedures.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing-admins.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 3.9 && git pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit merge 3.8 --no-commit --no-ff --gpg-sign\n```\n\nLANGUAGE: bash\nCODE:\n```\npython tools/cleanup_changes.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b do-not-merge && git push\n```\n\n----------------------------------------\n\nTITLE: Pip-compile Generated Requirements for AIOHTTP Linting\nDESCRIPTION: Auto-generated requirements file listing all dependencies needed for linting the AIOHTTP library. Created using pip-compile with Python 3.10, it includes development and testing tools like mypy, pytest, pre-commit, and various utility libraries with their specific versions and dependencies.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/lint.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile --allow-unsafe --output-file=requirements/lint.txt --strip-extras requirements/lint.in\n#\naiodns==3.2.0\n    # via -r requirements/lint.in\nannotated-types==0.7.0\n    # via pydantic\nasync-timeout==5.0.1\n    # via valkey\nblockbuster==1.5.24\n    # via -r requirements/lint.in\ncffi==1.17.1\n    # via\n    #   cryptography\n    #   pycares\n    #   pytest-codspeed\ncfgv==3.4.0\n    # via pre-commit\nclick==8.1.8\n    # via slotscheck\ncryptography==44.0.2\n    # via trustme\ndistlib==0.3.9\n    # via virtualenv\nexceptiongroup==1.2.2\n    # via pytest\nfilelock==3.18.0\n    # via virtualenv\nforbiddenfruit==0.1.4\n    # via blockbuster\nfreezegun==1.5.1\n    # via -r requirements/lint.in\nidentify==2.6.9\n    # via pre-commit\nidna==3.7\n    # via trustme\niniconfig==2.1.0\n    # via pytest\nisal==1.7.2\n    # via -r requirements/lint.in\nmarkdown-it-py==3.0.0\n    # via rich\nmdurl==0.1.2\n    # via markdown-it-py\nmypy==1.15.0 ; implementation_name == \"cpython\"\n    # via -r requirements/lint.in\nmypy-extensions==1.0.0\n    # via mypy\nnodeenv==1.9.1\n    # via pre-commit\npackaging==24.2\n    # via pytest\nplatformdirs==4.3.7\n    # via virtualenv\npluggy==1.5.0\n    # via pytest\npre-commit==4.2.0\n    # via -r requirements/lint.in\nproxy-py==2.4.10\n    # via -r requirements/lint.in\npycares==4.6.0\n    # via aiodns\npycparser==2.22\n    # via cffi\npydantic==2.11.3\n    # via python-on-whales\npydantic-core==2.33.1\n    # via pydantic\npygments==2.19.1\n    # via rich\npytest==8.1.1\n    # via\n    #   -r requirements/lint.in\n    #   pytest-codspeed\n    #   pytest-mock\npytest-codspeed==3.2.0\n    # via -r requirements/lint.in\npytest-mock==3.14.0\n    # via -r requirements/lint.in\npython-dateutil==2.9.0.post0\n    # via freezegun\npython-on-whales==0.76.1\n    # via -r requirements/lint.in\npyyaml==6.0.2\n    # via pre-commit\nrich==14.0.0\n    # via pytest-codspeed\nsix==1.17.0\n    # via python-dateutil\nslotscheck==0.19.1\n    # via -r requirements/lint.in\ntomli==2.2.1\n    # via\n    #   mypy\n    #   pytest\n    #   slotscheck\ntrustme==1.2.1\n    # via -r requirements/lint.in\ntyping-extensions==4.13.2\n    # via\n    #   mypy\n    #   pydantic\n    #   pydantic-core\n    #   python-on-whales\n    #   rich\n    #   typing-inspection\ntyping-inspection==0.4.0\n    # via pydantic\nuvloop==0.21.0 ; platform_system != \"Windows\"\n    # via -r requirements/lint.in\nvalkey==6.1.0\n    # via -r requirements/lint.in\nvirtualenv==20.30.0\n    # via pre-commit\nzlib-ng==0.5.1\n    # via -r requirements/lint.in\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisord for aiohttp Backend Servers\nDESCRIPTION: Supervisord configuration for managing multiple aiohttp backend server processes. Specifies how to start the servers and handle restarts.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_2\n\nLANGUAGE: cfg\nCODE:\n```\n[program:aiohttp]\nnumprocs = 4\nnumprocs_start = 1\nprocess_name = example_%(process_num)s\n\n; Unix socket paths are specified by command line.\ncommand=/path/to/aiohttp_example.py --path=/tmp/example_%(process_num)s.sock\n\n; We can just as easily pass TCP port numbers:\n; command=/path/to/aiohttp_example.py --port=808%(process_num)s\n\nuser=nobody\nautostart=true\nautorestart=true\n```\n\n----------------------------------------\n\nTITLE: Updating Tuple Unpacking for WSMessage in Python\nDESCRIPTION: Demonstrates the change in tuple unpacking order for the WSMessage class after its conversion to a tagged union of NamedTuple. This change affects code that accesses WSMessage elements by index rather than by attribute name.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/7319.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntyp, data, extra = ws_message\n```\n\nLANGUAGE: Python\nCODE:\n```\ndata, extra, typ = ws_message\n```\n\n----------------------------------------\n\nTITLE: Initializing FrozenList in Python\nDESCRIPTION: FrozenList is a mutable list-like structure that implements collections.abc.MutableSequence. It can be frozen to prevent further modifications. The class provides a 'frozen' attribute and a 'freeze()' method.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/structures.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FrozenList(items):\n    def __init__(self, items):\n        # Initialize the list with items\n        pass\n\n    @property\n    def frozen(self):\n        # Read-only property, True if the list is frozen\n        pass\n\n    def freeze(self):\n        # Freeze the list, preventing further modifications\n        pass\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File with pip-compile for aiohttp Project\nDESCRIPTION: This comment block provides instructions on how to update the requirements file using pip-compile. It specifies the Python version and additional parameters for the compilation process.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/constraints.txt#2025-04-20_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with python 3.10\n# To update, run:\n#\n#    pip-compile --allow-unsafe --output-file=requirements/constraints.txt --resolver=backtracking --strip-extras requirements/constraints.in\n#\n```\n\n----------------------------------------\n\nTITLE: Method Not Allowed Exception Constructor\nDESCRIPTION: Constructor for HTTPMethodNotAllowed that takes the unsupported method and list of allowed methods\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nHTTPMethodNotAllowed(method, allowed_methods, *,\n                     headers=None, reason=None,\n                     text=None, content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Upstream Group for aiohttp Backends\nDESCRIPTION: Nginx configuration for the aiohttp upstream group. Defines Unix domain sockets for multiple aiohttp backend servers to enable load balancing.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/deployment.rst#2025-04-20_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n  upstream aiohttp {\n    # fail_timeout=0 means we always retry an upstream even if it failed\n    # to return a good HTTP response\n\n    # Unix domain servers\n    server unix:/tmp/example_1.sock fail_timeout=0;\n    server unix:/tmp/example_2.sock fail_timeout=0;\n    server unix:/tmp/example_3.sock fail_timeout=0;\n    server unix:/tmp/example_4.sock fail_timeout=0;\n\n    # Unix domain sockets are used in this example due to their high performance,\n    # but TCP/IP sockets could be used instead:\n    # server 127.0.0.1:8081 fail_timeout=0;\n    # server 127.0.0.1:8082 fail_timeout=0;\n    # server 127.0.0.1:8083 fail_timeout=0;\n    # server 127.0.0.1:8084 fail_timeout=0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous TearDown Method in AIOHTTP TestCase Class in Python\nDESCRIPTION: Example of how to override the asyncTearDown method in a TestCase to execute asynchronous code during test teardown. It demonstrates calling the parent implementation before executing custom cleanup code.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def asyncTearDown(self):\n    await super().asyncTearDown()\n    await foo()\n```\n\n----------------------------------------\n\nTITLE: Using TraceConfig for Request Tracing in Python\nDESCRIPTION: Example signature for signal handler functions used in aiohttp tracing. These async functions receive the session, context, and parameter objects and are called at specific points during request processing.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/tracing_reference.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def on_signal(session, context, params): ...\n```\n\n----------------------------------------\n\nTITLE: Accessing TestClient Handler Property\nDESCRIPTION: Deprecated syntax change showing the correct way to access a TestClient's handler property\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Old way (deprecated)\nclient.handler\n\n# New way\nclient.server.handler\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Python 3.5.3's Loop Behavior\nDESCRIPTION: This code snippet illustrates why aiohttp 3.0 requires Python 3.5.3 instead of 3.5.0. In 3.5.3, asyncio.get_event_loop() returns the running loop rather than the default loop, which is important for proper event loop management.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/whats_new_3_0.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nloop = asyncio.new_event_loop()\nloop.run_until_complete(f())\n```\n\n----------------------------------------\n\nTITLE: HTML Form Example for Login\nDESCRIPTION: HTML form template for login functionality using POST method and URL-encoded data.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/login\" method=\"post\" accept-charset=\"utf-8\"\n      enctype=\"application/x-www-form-urlencoded\">\n\n    <label for=\"login\">Login</label>\n    <input id=\"login\" name=\"login\" type=\"text\" value=\"\" autofocus/>\n    <label for=\"password\">Password</label>\n    <input id=\"password\" name=\"password\" type=\"password\" value=\"\"/>\n\n    <input type=\"submit\" value=\"login\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Making Requests from Specific IP Address in aiohttp (Python)\nDESCRIPTION: Demonstrates how to make HTTP requests from a specific IP address using aiohttp's TCPConnector. This can be useful when a system has multiple network interfaces.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconn = aiohttp.TCPConnector(local_addr=('127.0.0.1', 0))\nasync with aiohttp.ClientSession(connector=conn) as session:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting up virtualenvwrapper for aiohttp\nDESCRIPTION: Commands for creating a Python virtual environment using virtualenvwrapper.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd aiohttp\n$ mkvirtualenv --python=`which python3` aiohttp\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Shield for Database Operations in aiohttp\nDESCRIPTION: Shows an unsafe pattern for using shield to protect database operations. This approach is unsafe because cancellation might occur between the Redis and Postgres operations.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom aiojobs.aiohttp import shield\n\nasync def handler(request):\n    await shield(request, write_to_redis(request))\n    await shield(request, write_to_postgres(request))\n    return web.Response(text=\"OK\")\n```\n\n----------------------------------------\n\nTITLE: Defining TraceRequestHeadersSentParams Class in Python\nDESCRIPTION: This class defines attributes for tracing when request headers are sent in aiohttp. It includes method, url, and headers that will be used for the request. This class was added in version 3.8.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/tracing_reference.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass TraceRequestHeadersSentParams:\n    method  # Method that will be used to make the request\n    url     # URL that will be used for the request\n    headers # Headers that will be used for the request\n```\n\n----------------------------------------\n\nTITLE: Iterating Over CookieJar in Python\nDESCRIPTION: Demonstrates how to iterate over cookies stored in an aiohttp CookieJar instance, printing the key and domain of each cookie.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfor cookie in session.cookie_jar:\n    print(cookie.key)\n    print(cookie[\"domain\"])\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks\nDESCRIPTION: Command to set up pre-commit hooks for development.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Event Loop Policy Change After Module Import\nDESCRIPTION: This main module shows how changing the event loop policy after importing a module that already created a ClientSession can lead to issues. The code will hang because the session is bound to the default asyncio loop but the loop is changed after import.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport uvloop\nimport mod\n\nasyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing ChainMapProxy in Python\nDESCRIPTION: ChainMapProxy is an immutable version of collections.ChainMap. It takes a list of mappings and implements the collections.abc.Mapping interface. The class was added in version 3.2 of aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/structures.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ChainMapProxy(maps):\n    def __init__(self, maps):\n        # Create a new chained mapping proxy from a list of mappings\n        pass\n```\n\n----------------------------------------\n\nTITLE: Dependencies Requirements List\nDESCRIPTION: Auto-generated pip requirements file containing pinned package versions with their dependencies and installation constraints. Generated using pip-compile with Python 3.10.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/dev.txt#2025-04-20_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with python 3.10\n# To update, run:\n#\n#    pip-compile --allow-unsafe --output-file=requirements/dev.txt --resolver=backtracking --strip-extras requirements/dev.in\n#\naiodns==3.2.0 ; sys_platform == \"linux\" or sys_platform == \"darwin\"\n    # via\n    #   -r requirements/lint.in\n    #   -r requirements/runtime-deps.in\naiohappyeyeballs==2.6.1\n    # via -r requirements/runtime-deps.in\naiohttp-theme==0.1.7\n    # via -r requirements/doc.in\naiosignal==1.3.2\n    # via -r requirements/runtime-deps.in\nalabaster==1.0.0\n    # via sphinx\n```\n\n----------------------------------------\n\nTITLE: Setting Zlib Backend for Compression in Python\nDESCRIPTION: Shows how to set a custom zlib backend for compression operations in aiohttp using the set_zlib_backend function.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport zlib_ng.zlib_ng as zng\nimport aiohttp\n\naiohttp.set_zlib_backend(zng)\n```\n\n----------------------------------------\n\nTITLE: Installing AIODNS for DNS Resolution Speed Improvement\nDESCRIPTION: Command to install the aiodns library, which is highly recommended for speeding up DNS resolving when using AIOHTTP's client API.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install aiodns\n```\n\n----------------------------------------\n\nTITLE: Accessing TestClient Application Property\nDESCRIPTION: Deprecated syntax change showing the correct way to access a TestClient's application property\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# Old way (deprecated)\nclient.app\n\n# New way\nclient.server.app\n```\n\n----------------------------------------\n\nTITLE: Referencing socket_factory parameter in TCPConnector\nDESCRIPTION: Code reference showing the addition of socket_factory parameter to aiohttp.TCPConnector class. This parameter allows customization of socket options when establishing TCP connections.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/10520.feature.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\naiohttp.TCPConnector(socket_factory=...)\n```\n\n----------------------------------------\n\nTITLE: Using DummyCookieJar in Python\nDESCRIPTION: Shows how to create and use a DummyCookieJar instance with an aiohttp ClientSession, which ignores cookies instead of storing them.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_reference.rst#2025-04-20_snippet_20\n\nLANGUAGE: python\nCODE:\n```\njar = aiohttp.DummyCookieJar()\nsession = aiohttp.ClientSession(cookie_jar=DummyCookieJar())\n```\n\n----------------------------------------\n\nTITLE: Switching HTTP Parser in Python\nDESCRIPTION: Switched from http-parser to llhttp for HTTP parsing. This change was made in version 3.8.0.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Switch from http-parser to llhttp\n```\n\n----------------------------------------\n\nTITLE: Updating StreamResponse Cookie Type Hints\nDESCRIPTION: Change to type hints for secure argument on StreamResponse.set_cookie from Optional[str] to Optional[bool]\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nOptional[str] # Before\nOptional[bool] # After\n```\n\n----------------------------------------\n\nTITLE: Legal Reasons Exception Constructor\nDESCRIPTION: Constructor for HTTPUnavailableForLegalReasons that requires a link to the blocking entity and explanatory text\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nHTTPUnavailableForLegalReasons(link, *,\n                               headers=None, reason=None,\n                               text=None, content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Sphinx Documentation Table of Contents for AioHttp Essays\nDESCRIPTION: This RST (reStructuredText) snippet defines a table of contents for aiohttp documentation essays using the Sphinx toctree directive. It includes links to documentation about the new router, what's new in version 1.1, migration to version 2.x.x, and what's new in version 3.0.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/essays.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nEssays\n======\n\n\n.. toctree::\n\n   new_router\n   whats_new_1_1\n   migration_to_2xx\n   whats_new_3_0\n```\n\n----------------------------------------\n\nTITLE: Fixing Transport is None Error in Python\nDESCRIPTION: Fixed an error where the transport could be None. This was addressed in version 3.8.4.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Fixed a transport is None error\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPUnavailableForLegalReasons Exception in AIOHTTP\nDESCRIPTION: Definition of the HTTPUnavailableForLegalReasons exception for 451 Unavailable For Legal Reasons responses. This exception includes a parameter for a link to the entity implementing the blockage.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_exceptions.rst#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nHTTPUnavailableForLegalReasons(link, *, \\\n                                              headers=None, \\\n                                              reason=None, \\\n                                              text=None, \\\n                                              content_type=None)\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules for llhttp Parser in aiohttp\nDESCRIPTION: Command to initialize and update git submodules required for the llhttp parser. The optional --remote flag can be added to update to a newer release.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/vendor/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Migrating CookieJar Data After Path-Matching Implementation\nDESCRIPTION: A Python script to migrate existing cookies saved with CookieJar.save() to the new format that implements domain-matching and path-matching. This script is necessary because of the changes in cookie handling in version 3.10.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nwith file_path.open(\"rb\") as f:\n    cookies = pickle.load(f)\n\nmorsels = [(name, m) for c in cookies.values() for name, m in c.items()]\ncookies.clear()\nfor name, m in morsels:\n    cookies[(m[\"domain\"], m[\"path\"].rstrip(\"/\"))][name] = m\n\nwith file_path.open(\"wb\") as f:\n    pickle.dump(cookies, f, pickle.HIGHEST_PROTOCOL)\n```\n\n----------------------------------------\n\nTITLE: Using Session in requests Library\nDESCRIPTION: Shows how to use a session in the requests library, which is similar to aiohttp's approach but not the default pattern in requests.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/http_request_lifecycle.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith requests.Session() as session:\n    response = session.get('http://python.org')\n    print(response.text)\n```\n\n----------------------------------------\n\nTITLE: Bugfix Change Note Example in RST\nDESCRIPTION: Example of a bug fix change note describing HTTP parser fixes and RFC compliance updates.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nFixed an unhandled exception in the Python HTTP parser on header\\nlines starting with a colon -- by :user:`pajod`.\\n\\nInvalid request lines with anything but a dot between the HTTP\\nmajor and minor version are now rejected. Invalid header field\\nnames containing question mark or slash are now rejected. Such\\nrequests are incompatible with :rfc:`9110#section-5.6.2` and are\\nnot known to be of any legitimate use.\n```\n\n----------------------------------------\n\nTITLE: Feature Change Note Example in RST\nDESCRIPTION: Example of a feature change note documenting the addition of ETag support to FileResponse.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nAdded support for ``ETag`` to :py:class:`~aiohttp.web.FileResponse`\\n-- by :user:`greshilov`, :user:`serhiy-storchaka` and\\n:user:`asvetlov`.\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-aiohttp Package with pip\nDESCRIPTION: Command to install the pytest-aiohttp library which provides pytest integration for aiohttp testing.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/testing.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install pytest-aiohttp\n```\n\n----------------------------------------\n\nTITLE: Documentation Change Note Example in RST\nDESCRIPTION: Example of a documentation change note that adds a user role to Sphinx configuration.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nAdded a `:user:` role to Sphinx config -- by :user:`webknjaz`.\n```\n\n----------------------------------------\n\nTITLE: Running aiohttp Web Server from Command Line\nDESCRIPTION: This shell command demonstrates how to run an aiohttp web application from the command line, specifying the host, port, and the initialization function.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_quickstart.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m aiohttp.web -H localhost -P 8080 package.module:init_func\n```\n\n----------------------------------------\n\nTITLE: Replacing attr.evolve() with dataclasses.replace() in Python\nDESCRIPTION: Instructions for migrating from the attrs library to Python's built-in dataclasses module in the aiohttp project. Specifically, developers need to replace attr.evolve() with dataclasses.replace() when updating their code.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES/5284.breaking.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nattr.evolve()\n```\n\nLANGUAGE: python\nCODE:\n```\ndataclasses.replace()\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp-debugtoolbar with pip\nDESCRIPTION: Command to install the aiohttp-debugtoolbar package using pip. The debugtoolbar provides a development debugging interface for aiohttp.web applications.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install aiohttp_debugtoolbar\n```\n\n----------------------------------------\n\nTITLE: Installing aiohttp-devtools with pip\nDESCRIPTION: Command to install aiohttp-devtools using pip. This package provides development tools for aiohttp.web applications, including a development server and application scaffolding.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web_advanced.rst#2025-04-20_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install aiohttp-devtools\n```\n\n----------------------------------------\n\nTITLE: Converting PEM to DER Certificate Format (Shell)\nDESCRIPTION: This snippet shows how to convert a certificate from PEM format to DER format using the openssl command-line tool. This is useful when working with certificate fingerprints in aiohttp.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/client_advanced.rst#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nopenssl x509 -in crt.pem -inform PEM -outform DER > crt.der\n```\n\n----------------------------------------\n\nTITLE: Creating a new release in aiohttp repository using Git commands\nDESCRIPTION: A series of Git commands for creating a new release in the aiohttp repository. This includes checking out the release branch, tagging, and pushing the release to the origin repository.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing-admins.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 3.8 && git pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release/v3.8.6\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 3.8 && git pull\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v3.8.6 -m 'Release 3.8.6' -s\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v3.8.6\n```\n\n----------------------------------------\n\nTITLE: Running tests with output capture disabled\nDESCRIPTION: Command to run tests while allowing print statements and debugger output.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ pytest tests -s\n```\n\n----------------------------------------\n\nTITLE: Problematic Middleware Implementation in aiohttp\nDESCRIPTION: This snippet shows an incorrect middleware implementation that creates a response object outside the handler and reuses it for multiple requests. This violates the 'one request, one response' rule and causes the server to hang after serving the second response.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\ndef misbehaved_middleware():\n    # don't do this!\n    cached = web.Response(status=200, text='Hi, I am cached!')\n\n    async def middleware(request, handler):\n        # ignoring response for the sake of this example\n        _res = handler(request)\n        return cached\n\n    return middleware\n```\n\n----------------------------------------\n\nTITLE: Setting up virtualenv for aiohttp development\nDESCRIPTION: Commands for creating and activating a Python virtual environment using virtualenv for aiohttp development.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd aiohttp\n$ virtualenv --python=`which python3` venv\n$ . venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Problematic ClientSession Creation in Module Scope\nDESCRIPTION: This snippet demonstrates a module-level ClientSession creation that can lead to issues when the event loop changes after import. The session is bound to the default asyncio loop at import time, which can cause hangs if the loop is later changed.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/faq.rst#2025-04-20_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\n\nsession = aiohttp.ClientSession()\n\nasync def fetch(url):\n    async with session.get(url) as resp:\n        return await resp.text()\n```\n\n----------------------------------------\n\nTITLE: Running documentation build\nDESCRIPTION: Command to build documentation locally.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ make doc\n```\n\n----------------------------------------\n\nTITLE: Creating a new minor release branch in aiohttp\nDESCRIPTION: Git commands for creating a new minor release branch based on the previous branch. This is specifically for when doing a minor release to set up the repository for future development.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing-admins.rst#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 3.10 3.9 && git push\n```\n\n----------------------------------------\n\nTITLE: Running code formatters\nDESCRIPTION: Command to run black and isort formatters to maintain code style.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ make fmt\n```\n\n----------------------------------------\n\nTITLE: RST Module Declaration for AIOHTTP Web Server\nDESCRIPTION: Sphinx documentation module declaration for the aiohttp.web package that defines the server functionality.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. module:: aiohttp.web\n```\n\n----------------------------------------\n\nTITLE: Client Example Output\nDESCRIPTION: Example output from running the AIOHTTP client code, showing the HTTP status code, content type header, and the beginning of the HTML response body.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/index.rst#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nStatus: 200\nContent-type: text/html; charset=utf-8\nBody: <!doctype html> ...\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents for Server Documentation\nDESCRIPTION: Sphinx documentation table of contents directive that organizes the server documentation into logical sections with depth control and named reference.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/web.rst#2025-04-20_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :name: server\n   :maxdepth: 3\n\n   Tutorial <https://demos.aiohttp.org>\n   Quickstart <web_quickstart>\n   Advanced Usage <web_advanced>\n   Low Level <web_lowlevel>\n   Reference <web_reference>\n   Web Exceptions <web_exceptions>\n   Logging <logging>\n   Testing <testing>\n   Deployment <deployment>\n```\n\n----------------------------------------\n\nTITLE: Pip-Compile Command for Generating Documentation Requirements\nDESCRIPTION: The command used to generate this requirements file. It specifies options like allowing unsafe packages, backtracking resolver, and stripping extras from the requirements/doc.in input file.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/doc.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile --allow-unsafe --output-file=requirements/doc.txt --resolver=backtracking --strip-extras requirements/doc.in\n```\n\n----------------------------------------\n\nTITLE: Complete aiohttp Hello World Example\nDESCRIPTION: A full example of making an HTTP request with aiohttp, including the asyncio setup needed to run the asynchronous code.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/http_request_lifecycle.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport aiohttp\nimport asyncio\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        async with session.get('http://python.org') as response:\n            html = await response.text()\n            print(html)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Generating pip Requirements File with pip-compile for Documentation Spelling\nDESCRIPTION: Command used to generate the requirements file with pip-compile. It allows unsafe packages, strips extras, and outputs to the doc-spelling.txt file based on the doc-spelling.in input file.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/doc-spelling.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip-compile --allow-unsafe --output-file=requirements/doc-spelling.txt --strip-extras requirements/doc-spelling.in\n```\n\n----------------------------------------\n\nTITLE: Building llhttp Library from Source\nDESCRIPTION: Commands to navigate to the llhttp directory, install Node.js dependencies, and build the llhttp library.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/vendor/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd vendor/llhttp/\nnpm ci\nmake\n```\n\n----------------------------------------\n\nTITLE: Running documentation spell checker\nDESCRIPTION: Commands to install and run spell checker for documentation.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/docs/contributing.rst#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install enchant\n$ pip install sphinxcontrib-spelling\n$ make doc-spelling\n```\n\n----------------------------------------\n\nTITLE: Updating Multidict Dependency in Python\nDESCRIPTION: Increased the upper boundary of the multidict dependency to allow for version 6. This change was made in version 3.8.3.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Increased the upper boundary of the multidict dependency to allow for version 6\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Validation\nDESCRIPTION: Example showing validation of BasicAuth login string that raises ValueError if the login contains a colon\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nif \":\" in login:\n    raise ValueError(\"Login cannot contain ':'\")\n```\n\n----------------------------------------\n\nTITLE: AIOHTTP WebSocket JSON Message Example\nDESCRIPTION: WebSocket message objects now support a json() convenience method for handling JSON data.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nws_message.json()\n```\n\n----------------------------------------\n\nTITLE: Updating BaseRunner Type Hints in Python\nDESCRIPTION: Change to fix type hint on BaseRunner.addresses from List[str] to List[Any].\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nList[str] # Before\nList[Any] # After\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection with Origins\nDESCRIPTION: WebSocket client connection now supports passing Origin header.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/CHANGES.rst#2025-04-20_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nws_connect(url, origin='http://example.com')\n```\n\n----------------------------------------\n\nTITLE: Pip-compiled Requirements for multidict Package\nDESCRIPTION: Auto-generated requirements file using pip-compile for Python 3.10, specifying exact versions of multidict (6.4.3) and its dependency typing-extensions (4.13.2). Generated using backtracking resolver with stripped extras.\nSOURCE: https://github.com/aio-libs/aiohttp/blob/master/requirements/multidict.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with python 3.10\n# by the following command:\n#\n#    pip-compile --allow-unsafe --output-file=requirements/multidict.txt --resolver=backtracking --strip-extras requirements/multidict.in\n#\nmultidict==6.4.3\n    # via -r requirements/multidict.in\ntyping-extensions==4.13.2\n    # via multidict\n```"
  }
]