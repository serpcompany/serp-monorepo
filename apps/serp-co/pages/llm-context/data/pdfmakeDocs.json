[
  {
    "owner": "pdfmake",
    "repo": "docs",
    "content": "TITLE: Creating PDF with pdfMake in JavaScript\nDESCRIPTION: This snippet demonstrates the basic usage of pdfMake to create a PDF document. It uses the `createPdf()` method, taking a `docDefinition` object (required) and an optional `options` object. The `docDefinition` defines the content and structure of the PDF, while `options` allows for customization.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition);\npdfMake.createPdf(docDefinition, options);\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Import pdfmake and vfs_fonts\nDESCRIPTION: This snippet demonstrates how to import pdfmake and vfs_fonts using the `import` statement, often seen with ES6 modules or bundlers like Webpack.  It imports the library and font definitions for PDF generation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport \"pdfmake/build/vfs_fonts\";\n```\n\n----------------------------------------\n\nTITLE: HTML Integration of pdfmake\nDESCRIPTION: This HTML snippet demonstrates the basic setup for using pdfmake in a web browser. It involves including the necessary JavaScript files, `pdfmake.min.js` and `vfs_fonts.js`, within the `<head>` section. This makes the pdfmake library available for use within the HTML page.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang='en'>\n<head>\n  <meta charset='utf-8'>\n  <title>my first pdfmake example</title>\n  <script src='build/pdfmake.min.js'></script>\n  <script src='build/vfs_fonts.js'></script>\n</head>\n<body>\n...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Document Definition in JavaScript with pdfMake\nDESCRIPTION: This JavaScript snippet demonstrates the basic initialization of a document definition object in pdfMake. It sets the `content` property to a simple string. This object serves as the primary configuration for generating a PDF.  It has no dependencies and takes a simple string for the content.\n\nOutput: A PDF document is generated with the provided text.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/_index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = { content: 'This is an sample PDF printed with pdfMake' };\n```\n\n----------------------------------------\n\nTITLE: Creating and Generating PDFs with PDFMake on Server-side using JavaScript\nDESCRIPTION: Complete example of server-side PDFMake implementation including font configuration, initialization, document definition, and PDF generation with success/error handling.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/_index.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Define font files\nvar fonts = {\n  Roboto: {\n    normal: 'fonts/Roboto-Regular.ttf',\n    bold: 'fonts/Roboto-Medium.ttf',\n    italics: 'fonts/Roboto-Italic.ttf',\n    bolditalics: 'fonts/Roboto-MediumItalic.ttf'\n  }\n};\n\nvar pdfmake = require('pdfmake');\npdfmake.addFonts(fonts);\n\nvar docDefinition = {\n  // ...\n};\n\nvar options = {\n  // ...\n}\n\nvar pdf = pdfmake.createPdf(docDefinition);\npdf.write('document.pdf').then(() => {\n  // success event\n}, err => {\n  // error event\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table with PDFMake in JavaScript\nDESCRIPTION: Defines a PDF document with a table layout including headers, adjustable column widths, and sample data. Utilizes optional layout styling and automatic header repetition across pages.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      layout: 'lightHorizontalLines', // optional\n      table: {\n        // headers are automatically repeated if the table spans over multiple pages\n        // you can declare how many rows should be treated as headers\n        headerRows: 1,\n        widths: [ '*', 'auto', 100, '*' ],\n\n        body: [\n          [ 'First', 'Second', 'Third', 'The last one' ],\n          [ 'Value 1', 'Value 2', 'Value 3', 'Value 4' ],\n          [ { text: 'Bold value', bold: true }, 'Val 2', 'Val 3', 'Val 4' ]\n        ]\n      }\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Getting PDF as Blob with pdfMake in JavaScript\nDESCRIPTION: This snippet shows how to obtain the PDF document as a Blob object. The `getBlob()` method is used. A Blob represents raw binary data, which can be used for various operations, such as downloading the PDF, or uploading it to a server.  Error handling is included.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).getBlob().then((blob) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with pdfmake (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to embed images within a PDF document using pdfmake. It uses different methods like data URIs, file paths, and URLs to include images. It also allows setting of width, height and fit to control the size and position of the image. Dependencies: pdfmake library.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/images.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      // you'll most often use dataURI images on the browser side\n      // if no width/height/fit is provided, the original size will be used\n      image: 'data:image/jpeg;base64,...encodedContent...'\n    },\n    {\n      // if you specify width, image will scale proportionally\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      width: 150\n    },\n    {\n      // if you specify both width and height - image will be stretched\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      width: 150,\n      height: 150\n    },\n    {\n      // you can also fit the image inside a rectangle\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      fit: [100, 100]\n    },\n    {\n      // You can also cover the image inside a rectangle\n      image: 'data:image/jpeg;base64,...encodedContent...',\n      cover: { width: 100, height: 100, valign: \"bottom\", align: \"right\" },\n    },\n    {\n      // if you reuse the same image in multiple nodes,\n      // you should put it to to images dictionary and reference it by name\n      image: 'mySuperImage'\n    },\n    {\n      // under NodeJS (or in case you use virtual file system provided by pdfmake)\n      // you can also pass file names here\n      image: 'myImageDictionary/image1.jpg'\n    },\n    {\n      // is supported loading images via url from reference by name in images\n      image: 'snow'\n    },\n    {\n      image: 'strawberries'\n    },\n  ],\n\n  images: {\n    mySuperImage: 'data:image/jpeg;base64,...content...',\n\n    // is supported loading images via url (https or http protocol)\n    snow: 'https://picsum.photos/seed/picsum/200/300',\n\n    // is supported loading images via url with custom headers\n    strawberries: {\n      url: 'https://picsum.photos/id/1080/367/267',\n      headers: {\n        myheader: '123',\n        myotherheader: 'abc',\n      }\n    }\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Text Styles in pdfmake with JavaScript\nDESCRIPTION: Demonstrates how to define styled paragraphs directly within the document definition object. It shows usage of plain strings for simple paragraphs, objects with text and fontSize properties for applying font size, and arrays of text elements to selectively style parts of a paragraph differently. It relies on pdfmake's document definition format and supports partial text styling by using nested objects. The input is a JavaScript object specifying content, and the output is styled text rendered in a PDF document.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/styling.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    // if you don't need styles, you can use a simple string to define a paragraph\n    'This is a standard paragraph, using default style',\n\n    // using a { text: '...' } object lets you set styling properties\n    { text: 'This paragraph will have a bigger font', fontSize: 15 },\n\n    // if you set the value of text to an array instead of a string, you'll be able\n    // to style any part individually\n    {\n      text: [\n        'This paragraph is defined as an array of elements to make it possible to ',\n        { text: 'restyle part of it and make it bigger ', fontSize: 15 },\n        'than the rest.'\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Style Dictionaries to Reuse and Combine Styles in pdfmake with JavaScript\nDESCRIPTION: Illustrates defining a styles dictionary containing named style objects which can be applied to text elements by referencing their style names. It supports multiple style assignment by passing an array of style names. The example includes style properties like fontSize, bold, italics, and alignment. This method promotes style reuse and consistency across the document. The snippet also contains sample text elements demonstrating single and combined style usage. Requires pdfmake's document definition format with a styles property and content elements referencing these styles.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/styling.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    { text: 'This is a header', style: 'header' },\n    'No styling here, this is a standard paragraph',\n    { text: 'Another text', style: 'anotherStyle' },\n    { text: 'Multiple styles applied', style: [ 'header', 'anotherStyle' ] }\n  ],\n\n  styles: {\n    header: {\n      fontSize: 22,\n      bold: true\n    },\n    anotherStyle: {\n      italics: true,\n      alignment: 'right'\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting PDF as Base64 Data with pdfMake in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the PDF document as a base64 encoded string. It uses the `getBase64()` method, which returns a Promise. The returned base64 string can be used in various contexts, like setting it as the `src` attribute of an image or a data URI for an HTML element. Error handling is demonstrated with `.then()` and `.catch()`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).getBase64().then((data) => {\n\talert(data)\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Column Layouts in pdfmake with JavaScript\nDESCRIPTION: This snippet defines a pdfmake document with a mixture of full-width text and a multi-column section containing four columns. Each column uses a different width specification: auto-size based on content, star-sizing to fill remaining space, a fixed width in points, and a percentage width relative to the page. The snippet also demonstrates setting a gap between columns using the 'columnGap' property. It requires pdfmake and standard JavaScript environment. The input is a document definition object, and the output is a formatted PDF layout with specified columnar text. Limitations include the rendering specifics of widths based on content and layout constraints.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/columns.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    'This paragraph fills full width, as there are no columns. Next paragraph however consists of three columns',\n    {\n      columns: [\n        {\n          // auto-sized columns have their widths based on their content\n          width: 'auto',\n          text: 'First column'\n        },\n        {\n          // star-sized columns fill the remaining space\n          // if there\\'s more than one star-column, available width is divided equally\n          width: '*',\n          text: 'Second column'\n        },\n        {\n          // fixed width\n          width: 100,\n          text: 'Third column'\n        },\n        {\n          // % width\n          width: '20%',\n          text: 'Fourth column'\n        }\n      ],\n      // optional space between columns\n      columnGap: 10\n    },\n    'This paragraph goes below all columns and has full width'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Headers and Footers in pdfmake (JavaScript)\nDESCRIPTION: Illustrates using JavaScript functions to create dynamic headers and footers in pdfmake. The functions receive `currentPage`, `pageCount`, and `pageSize` as arguments, enabling content generation based on page context, such as displaying page numbers or applying conditional formatting like alternating alignment. The header example also shows how to return complex pdfmake elements like text and canvas drawings.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/headers-footers.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  footer: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; },\n  header: function(currentPage, pageCount, pageSize) {\n    // you can apply any logic and return any valid pdfmake element\n\n    return [\n      { text: 'simple text', alignment: (currentPage % 2) ? 'left' : 'right' },\n      { canvas: [ { type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 40 } ] }\n    ]\n  },\n  (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Printing PDF with pdfMake in JavaScript\nDESCRIPTION: This snippet demonstrates how to print a PDF document using the `print()` method of the pdfMake instance. It can take an optional `win` argument, which specifies the window to print from. An asynchronous example using `$http.post` to fetch data before printing the pdf is also shown.  This is useful for printing PDFs dynamically.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).print();\npdfMake.createPdf(docDefinition).print(win);\n```\n\n----------------------------------------\n\nTITLE: Opening PDF in New Window with pdfMake in JavaScript\nDESCRIPTION: This snippet describes how to open the generated PDF in a new window using the `open()` method of the pdfMake instance. The `open()` method can optionally receive a `win` parameter which refers to the window to open the pdf document in. An asynchronous example is provided to demonstrate opening the PDF after an HTTP request.  This is particularly useful for asynchronous operations.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).open();\npdfMake.createPdf(docDefinition).open(win);\n```\n\n----------------------------------------\n\nTITLE: Getting PDF as URL Data with pdfMake in JavaScript\nDESCRIPTION: This snippet shows how to get the PDF document as a URL data string. It utilizes the `getDataUrl()` method, which returns a Promise that resolves with the data URL. This is useful for embedding the PDF within an iframe or other HTML elements. Error handling is included using `.then()` and `.catch()`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).getDataUrl().then((dataUrl) => {\n\tconst targetElement = document.querySelector('#iframeContainer');\n\tconst iframe = document.createElement('iframe');\n\tiframe.src = dataUrl;\n\ttargetElement.appendChild(iframe);\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading PDF with pdfMake in JavaScript\nDESCRIPTION: This snippet shows how to download a PDF document created with pdfMake. The `download()` method is used on the result of `createPdf()`. It takes an optional `filename` argument to specify the desired name for the downloaded PDF file. If no filename is provided, the default 'file.pdf' is used.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).download();\npdfMake.createPdf(docDefinition).download('file.pdf');\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Page Properties in pdfmake (JavaScript)\nDESCRIPTION: Defines a pdfmake document definition object (`docDefinition`) specifying the page size (e.g., 'A5' or an object with width/height), orientation ('landscape' or default 'portrait'), and margins using an array (`[left, top, right, bottom]`, `[horizontal, vertical]`, or a single number). These properties control the overall layout of the generated PDF.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/page.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  // a string or { width: number, height: number }\n  pageSize: 'A5',\n\n  // by default we use portrait, you can change it to landscape if you wish\n  pageOrientation: 'landscape',\n\n  // [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins\n  pageMargins: [ 40, 60, 40, 60 ],\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Import pdfmake and vfs_fonts, with virtual file system\nDESCRIPTION: This JavaScript snippet shows how to import pdfmake and vfs_fonts using the `import` statement and add fonts to the virtual file system. This approach allows for seamless PDF generation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\npdfMake.addVirtualFileSystem(pdfFonts);\n```\n\n----------------------------------------\n\nTITLE: Opening PDF in Same Window with pdfMake in JavaScript\nDESCRIPTION: This snippet demonstrates how to open the PDF in the same window. It uses the `open()` method, passing `window` as an argument.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).open(window);\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Document as Stream using pdfmake in JavaScript\nDESCRIPTION: This example shows usage of the 'getStream' method to obtain a readable stream of the PDF document asynchronously. The method returns a Promise resolved with a stream object, suitable for piping or streaming the generated PDF content in environments like Node.js. Error handling is supported via Promise rejects.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition).getStream().then((stream) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic pdfmake Table of Contents (JavaScript)\nDESCRIPTION: Demonstrates how to create a simple Table of Contents block within a pdfmake document definition using the `toc` property. Content elements intended for the TOC are marked using `tocItem: true`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/toc.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      toc: {\n        title: {text: 'INDEX', style: 'header'}\n      }\n    },\n    {\n      text: 'This is a header',\n      style: 'header',\n      tocItem: true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PDF Documents with pdfmake in JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate a PDF document using the pdfmake library by passing a document definition object and an optional options object. The 'docDefinition' parameter must contain the full structure of the document as specified by pdfmake's document definition object schema. The optional 'options' parameter allows customization of PDF generation settings. The method returns a PDF document object that can be further processed with additional methods.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition);\npdfmake.createPdf(docDefinition, options);\n```\n\n----------------------------------------\n\nTITLE: Embedding SVGs in pdfmake\nDESCRIPTION: This code demonstrates how to embed SVGs directly into a pdfmake document definition. It showcases various methods for handling SVG dimensions, including using the SVG's inherent dimensions, scaling proportionally with width, stretching with both width and height, and fitting inside a specified rectangle. The SVG-to-PDFKit library is used for the transformation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/svgs.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      // If no width/height/fit is used, then dimensions from the svg element is used.\n      svg: '<svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">...</svg>'\n    },\n    {\n      // if you specify width, svg will scale proportionally\n      svg: '<svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">...</svg>',\n      width: 150\n    },\n    {\n      // if you specify both width and height - svg will be stretched\n      svg: '<svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">...</svg>',\n      width: 600,\n      height: 400\n    },\n    {\n      // you can also fit the svg inside a rectangle\n      svg: '<svg width=\"300\" height=\"200\" viewBox=\"0 0 300 200\">...</svg>',\n      fit: [150, 100]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Vertical Slides (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to create vertical slides within a reveal.js presentation. Multiple `<section>` elements nested inside another `<section>` will be displayed as vertical slides.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"reveal\">\n\t<div class=\"slides\">\n\t\t<section>Single Horizontal Slide</section>\n\t\t<section>\n\t\t\t<section>Vertical Slide 1</section>\n\t\t\t<section>Vertical Slide 2</section>\n\t\t</section>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Items in Multiple pdfmake TOCs (JavaScript)\nDESCRIPTION: Shows how to include a single content item in more than one Table of Contents section. This is achieved by setting the `tocItem` property to an array containing the `id`s of all the TOCs the item should appear in.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/toc.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      toc: {\n        id: 'mainToc',\n        title: {text: 'INDEX', style: 'header'}\n      },\n      toc: {\n        id: 'subToc',\n        title: {text: 'SUB INDEX', style: 'header'}\n      }\n    },\n    {\n      text: 'This is a header',\n      style: 'header',\n      tocItem: ['mainToc', 'subToc']\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Text Style in pdfmake Document Using JavaScript\nDESCRIPTION: Shows how to set a default style that will automatically apply to all paragraphs and text elements that do not have a specific style assigned in the document. This central defaultStyle object defines common font properties such as fontSize and bold, ensuring consistent basic styling without repetitive declarations. It simplifies styling by providing a fallback style context. The example contains a simple paragraph inheriting the default font size and bold styling. This feature requires pdfmake and its document definition syntax with a defaultStyle property.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/styling.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    'Text styled by default style'\n  ],\n\n  defaultStyle: {\n    fontSize: 15,\n    bold: true\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Bulleted and Numbered Lists with pdfmake in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to create bulleted and numbered lists using the pdfmake library. It defines a document definition with content including bulleted and numbered lists. The `ul` key is used for bulleted lists, and the `ol` key for numbered lists.  Each list item is a string or a styled text object (e.g., `bold: true`). The output is a PDF document with formatted lists.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/lists.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    'Bulleted list example:',\n    {\n      // to treat a paragraph as a bulleted list, set an array of items under the ul key\n      ul: [\n        'Item 1',\n        'Item 2',\n        'Item 3',\n        { text: 'Item 4', bold: true },\n      ]\n    },\n\n    'Numbered list example:',\n    {\n      // for numbered lists set the ol key\n      ol: [\n        'Item 1',\n        'Item 2',\n        'Item 3'\n      ]\n    }\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Styling a Watermark with Color, Opacity, and Font Style in pdfmake (JavaScript)\nDESCRIPTION: Shows how to customize a watermark using an object for the `watermark` property. This example sets the text, color ('blue'), opacity (0.3), enables bold (`true`), and disables italics (`false`).\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/watermark.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  watermark: { text: 'test watermark', color: 'blue', opacity: 0.3, bold: true, italics: false },\n  content: [\n    '...'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Margins in pdfMake with JavaScript\nDESCRIPTION: Shows different ways to specify margins for elements in pdfMake, including array notation for all sides, shorthand notations for symmetric margins, and single-value margins. Also demonstrates how to set individual margin properties for specific sides.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/margins.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// margin: [left, top, right, bottom]\n{ text: 'sample', margin: [ 5, 2, 10, 20 ] },\n\n// margin: [horizontal, vertical]\n{ text: 'another text', margin: [5, 2] },\n\n// margin: equalLeftTopRightBottom\n{ text: 'last one', margin: 5 }\n\n// single-side margins\n{ text: 'sample', marginLeft: 5, marginTop: 2, marginRight: 10, marginBottom: 2 },\n```\n\n----------------------------------------\n\nTITLE: Restyling Paragraph Stack in pdfMake (JavaScript)\nDESCRIPTION: This JavaScript snippet builds upon the previous one. It demonstrates how to restyle a stack of paragraphs by using the `stack` element and applying styling properties to it. The code snippet uses the `stack` to group paragraphs and provides an example of setting the `fontSize` property to 15, targeting the whole stack. The resulting PDF will have the paragraphs inside the specified column with a larger font size applied. This requires the pdfMake library to be available.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/stack.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    'paragraph 1',\n    'paragraph 2',\n    {\n      columns: [\n        'first column is a simple text',\n        {\n          stack: [\n            // second column consists of paragraphs\n            'paragraph A',\n            'paragraph B',\n            'these paragraphs will be rendered one below another inside the column'\n          ],\n          fontSize: 15\n        }\n      ]\n    }\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Font in pdfMake Document Definition JavaScript\nDESCRIPTION: This example shows how to specify a custom font globally in the pdfMake document definition object by setting the defaultStyle's font property. After adding fonts via pdfMake.addFonts, this setting applies the chosen font name to all text elements in the generated PDF by default. The docDefinition object includes a content property for document content and a defaultStyle property to define default styling. This snippet assumes that the font name used matches one registered earlier via addFonts.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/custom-fonts-client-side/url/_index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: (...),\n  defaultStyle: {\n    font: 'yourFontName'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Document as Base64 String using pdfmake in JavaScript\nDESCRIPTION: This example shows how to retrieve the PDF content as a base64-encoded string asynchronously. The 'getBase64' method returns a Promise resolved with the base64 string, suitable for embedding or transmission without binary handling. Error handling is managed via Promise rejection callbacks.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition).getBase64().then((data) => {\n\talert(data)\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Document as Data URL using pdfmake in JavaScript\nDESCRIPTION: This snippet illustrates extracting the generated PDF as a data URL string, which can be used directly for embedding in web pages or other data transfer mechanisms. The 'getDataUrl' method returns a Promise resolved with the data URL string representing the PDF content encoded in base64. It handles errors asynchronously via Promise rejection.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition).getDataUrl().then((dataUrl) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Font Size for a Watermark in pdfmake (JavaScript)\nDESCRIPTION: Illustrates setting a specific font size for the watermark text using the `fontSize` property within the watermark configuration object. Although pdfmake calculates an ideal size automatically, this allows for manual override.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/watermark.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  watermark: { text: 'test watermark', fontSize: 20 },\n  content: [\n    '...'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fonts (VFS) with pdfMake\nDESCRIPTION: This JavaScript snippet demonstrates how to map custom font family names to the specific font filenames embedded within the `vfs_fonts.js` file. It shows the structure for defining different font weights (normal, bold, italics, bolditalics) and provides an example for using fonts within a collection (`.ttc`). This configuration is essential for pdfmake to locate the correct font files during PDF generation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/custom-fonts-client-side/vfs/_index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npdfMake.fonts = {\n  yourFontName: {\n    normal: 'fontFile.ttf',\n    bold: 'fontFile2.ttf',\n    italics: 'fontFile3.ttf',\n    bolditalics: 'fontFile4.ttf'\n  },\n  anotherFontName: {\n    (...)\n  },\n\n  // example of usage fonts in collection\n  PingFangSC: {\n    normal: ['pingfang.ttc', 'PingFangSC-Regular'],\n    bold: ['pingfang.ttc', 'PingFangSC-Semibold'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack of Paragraphs in pdfMake (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a document definition for pdfMake that creates a stack of paragraphs using an array within the `content` property. The code creates a document with an array containing string paragraphs and a nested column structure. The output will be a PDF document showing the paragraphs vertically rendered. No additional dependencies are required beyond the pdfMake library. The initial example uses an array directly, showing that pdfMake interprets the array as a stacked structure.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/stack.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    'paragraph 1',\n    'paragraph 2',\n    {\n      columns: [\n        'first column is a simple text',\n        [\n          // second column consists of paragraphs\n          'paragraph A',\n          'paragraph B',\n          'these paragraphs will be rendered one below another inside the column'\n        ]\n      ]\n    }\n  ]\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rotating a Watermark Text by Angle in pdfmake (JavaScript)\nDESCRIPTION: Demonstrates how to rotate the watermark text by specifying an angle (in degrees) using the `angle` property within the watermark configuration object. This example sets the rotation to 70 degrees.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/watermark.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  watermark: { text: 'test watermark', angle: 70 },\n  content: [\n    '...'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Controlling Page Breaks with `pageBreakBefore` in pdfmake (JavaScript)\nDESCRIPTION: Illustrates using the `pageBreakBefore` function within a pdfmake document definition (`dd`) to implement custom page break logic, such as preventing orphan headlines. The function receives the current node and a container object (`nodeContainer`) with methods to inspect surrounding nodes (`getFollowingNodesOnPage`, `getNodesOnNextPage`, `getPreviousNodesOnPage`) and returns `true` to insert a page break before the `currentNode`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/page.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar dd = {\n    content: [\n       {text: '1 Headline', headlineLevel: 1},\n       'Some long text of variable length ...',\n       {text: '2 Headline', headlineLevel: 1},\n       'Some long text of variable length ...',\n       {text: '3 Headline', headlineLevel: 1},\n       'Some long text of variable length ...',\n    ],\n  pageBreakBefore: function(currentNode, nodeContainer) {\n    // nodeContainer.getFollowingNodesOnPage();\n    // nodeContainer.getNodesOnNextPage();\n    // nodeContainer.getPreviousNodesOnPage();\n\n    return currentNode.headlineLevel === 1 && nodeContainer.getFollowingNodesOnPage().length === 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing PDF Document to File using pdfmake in JavaScript\nDESCRIPTION: This code snippet shows how to generate a PDF and write it directly to a file asynchronously. The method 'write' accepts a 'filename' argument indicating the target file path or name for the PDF output. It returns a Promise that resolves when the file writing completes, or rejects with an error. This approach requires that the environment supports file system operations, typically in Node.js or Electron contexts.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition).write(filename).then(() => {\n\t// finished\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing colSpan and rowSpan in PDFMake Tables\nDESCRIPTION: Utilizes `colSpan` and `rowSpan` properties to merge multiple cells horizontally or vertically. When spanning, insert empty cells in the subsequent positions to maintain table structure. Suitable for creating headers or complex cell layouts.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar dd = {\n  content: [\n    {\n      table: {\n        body: [\n          [{text: 'Header with Colspan = 2', style: 'tableHeader', colSpan: 2, alignment: 'center'}, '', {text: 'Header 3', style: 'tableHeader', alignment: 'center'}],\n          [{text: 'Header 1', style: 'tableHeader', alignment: 'center'}, {text: 'Header 2', style: 'tableHeader', alignment: 'center'}, {text: 'Header 3', style: 'tableHeader', alignment: 'center'}],\n          ['Sample value 1', 'Sample value 2', 'Sample value 3'],\n          [{rowSpan: 3, text: 'rowSpan set to 3\\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor'}, 'Sample value 2', 'Sample value 3'],\n          ['', 'Sample value 2', 'Sample value 3'],\n          ['Sample value 1', 'Sample value 2', 'Sample value 3'],\n          ['Sample value 1', {colSpan: 2, rowSpan: 2, text: 'Both:\\nrowSpan and colSpan\\ncan be defined at the same time'}, ''],\n          ['Sample value 1', '', ''],\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Reveal.js Fragments for Slide Element Animation in HTML\nDESCRIPTION: Demonstrates how to use the `fragment` class and additional modifier classes to animate reveal.js slide elements with effects such as grow, shrink, fade, and highlights. Elements with the `fragment` class appear stepwise during slide progression. Multiple fragments can be nested to create sequential animations like fading in then out. The `data-fragment-index` attribute controls the order of appearance. This snippet requires reveal.js CSS to style fragment animations and expects HTML slide sections as containers.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<section>\\n\\t<p class=\\\"fragment grow\\\">grow</p>\\n\\t<p class=\\\"fragment shrink\\\">shrink</p>\\n\\t<p class=\\\"fragment fade-out\\\">fade-out</p>\\n\\t<p class=\\\"fragment fade-up\\\">fade-up (also down, left and right!)</p>\\n\\t<p class=\\\"fragment current-visible\\\">visible only once</p>\\n\\t<p class=\\\"fragment highlight-current-blue\\\">blue only once</p>\\n\\t<p class=\\\"fragment highlight-red\\\">highlight-red</p>\\n\\t<p class=\\\"fragment highlight-green\\\">highlight-green</p>\\n\\t<p class=\\\"fragment highlight-blue\\\">highlight-blue</p>\\n</section>\n```\n\nLANGUAGE: html\nCODE:\n```\n<section>\\n\\t<span class=\\\"fragment fade-in\\\">\\n\\t\\t<span class=\\\"fragment fade-out\\\">I'll fade in, then out</span>\\n\\t</span>\\n</section>\n```\n\nLANGUAGE: html\nCODE:\n```\n<section>\\n\\t<p class=\\\"fragment\\\" data-fragment-index=\\\"3\\\">Appears last</p>\\n\\t<p class=\\\"fragment\\\" data-fragment-index=\\\"1\\\">Appears first</p>\\n\\t<p class=\\\"fragment\\\" data-fragment-index=\\\"2\\\">Appears second</p>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Custom Table Layouts in PDFMake\nDESCRIPTION: Allows creating bespoke table layout styles by defining layout functions (e.g., line widths, colors, padding) in `tableLayouts`. These styles are registered before PDF creation and enable extensive customization of table borders and spacing.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// define table layouts\nvar tableLayouts = {\n  exampleLayout: {\n    hLineWidth: function (i, node) {\n      if (i === 0 || i === node.table.body.length) {\n        return 0;\n      }\n      return (i === node.table.headerRows) ? 2 : 1;\n    },\n    vLineWidth: function (i) {\n      return 0;\n    },\n    hLineColor: function (i) {\n      return i === 1 ? 'black' : '#aaa';\n    },\n    paddingLeft: function (i) {\n      return i === 0 ? 0 : 8;\n    },\n    paddingRight: function (i, node) {\n      return (i === node.table.widths.length - 1) ? 0 : 8;\n    }\n  }\n};\n// add table layouts\npdfMake.addTableLayouts(tableLayouts);\n// generate PDF\npdfMake.createPdf(docDefinition).download();\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Standard Fonts Client-Side (JavaScript)\nDESCRIPTION: This snippet shows how to configure the standard 14 PDF fonts for use with the client-side (browser) version of pdfmake by assigning the font definitions to the global `pdfMake.fonts` object. It then illustrates creating a simple document and triggering a direct browser download of the generated PDF.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/standard-14-fonts.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.fonts = {\n  Courier: {\n    normal: 'Courier',\n    bold: 'Courier-Bold',\n    italics: 'Courier-Oblique',\n    bolditalics: 'Courier-BoldOblique'\n  },\n  Helvetica: {\n    normal: 'Helvetica',\n    bold: 'Helvetica-Bold',\n    italics: 'Helvetica-Oblique',\n    bolditalics: 'Helvetica-BoldOblique'\n  },\n  Times: {\n    normal: 'Times-Roman',\n    bold: 'Times-Bold',\n    italics: 'Times-Italic',\n    bolditalics: 'Times-BoldItalic'\n  },\n  Symbol: {\n    normal: 'Symbol'\n  },\n  ZapfDingbats: {\n    normal: 'ZapfDingbats'\n  }\n};\n\nvar docDefinition = {\n  content: [\n    'First paragraph',\n    'Another paragraph, this time a little bit longer to make sure, this line will be divided into at least two lines',\n  ],\n  defaultStyle: {\n    font: 'Helvetica'\n  }\n};\n\npdfMake.createPdf(docDefinition).download('document.pdf');\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Table Layouts in PDFMake\nDESCRIPTION: Demonstrates setting predefined table layouts like 'noBorders', 'headerLineOnly', and 'lightHorizontalLines' using the `layout` property to customize visual style. These layouts alter border presence and line styles.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout: 'lightHorizontalLines' // in content object\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Require pdfmake and vfs_fonts\nDESCRIPTION: This JavaScript snippet shows how to import pdfmake and vfs_fonts using the `require` function, common in Node.js environments or bundlers like Webpack. It imports the core pdfmake library and the font definitions file for PDF generation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pdfMake = require('pdfmake/build/pdfmake.js');\nrequire('pdfmake/build/vfs_fonts.js');\n```\n\n----------------------------------------\n\nTITLE: Server-Side PDFMake PDF Generation with Custom Fonts and Layouts in Node.js\nDESCRIPTION: Shows server-side PDF generation using `pdfmake` in Node.js, including setting custom fonts, defining layouts, creating PDF, and saving to disk with Promise handling. Handles success and error events accordingly.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pdfmake = require('pdfmake');\npdfmake.addFonts(fonts);\n// Declaring your layout\nvar myTableLayouts = {\n    exampleLayout: {\n        /*\n        Your layout here.\n        */\n    }\n};\n// Building the PDF\nvar pdf = pdfmake.createPdf(docDefinition);\n// Writing it to disk\npdf.write('document.pdf').then(() => {\n  // success event\n}, err => {\n  // error event\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies for Reveal.js Using dependencies Option - JavaScript\nDESCRIPTION: Configures Reveal.js to load optional third-party scripts and plugins using the 'dependencies' array in the initialization object. Paths to scripts (src), optional async loading, callback functions to execute after load, and conditional loading logic are supported. Expects an array of dependency objects, each with src string and optionally async, callback, and condition keys; dependencies like classList.js, Markdown plugins, syntax highlight, zoom, notes, and MathJax are included in the example. Requires Reveal.js and head.js to be loaded in the HTML file before initialization.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\tdependencies: [\n\t\t// Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/\n\t\t{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },\n\n\t\t// Interpret Markdown in <section> elements\n\t\t{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n\t\t{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n\n\t\t// Syntax highlight for <code> elements\n\t\t{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n\n\t\t// Zoom in and out with Alt+click\n\t\t{ src: 'plugin/zoom-js/zoom.js', async: true },\n\n\t\t// Speaker notes\n\t\t{ src: 'plugin/notes/notes.js', async: true },\n\n\t\t// MathJax\n\t\t{ src: 'plugin/math/math.js', async: true }\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting PDF Document as Buffer using pdfmake in JavaScript\nDESCRIPTION: This snippet explains how to obtain the PDF as a raw buffer of bytes asynchronously, returned as a Promise that resolves to a Node.js Buffer object. This method is primarily useful in Node.js environments where buffer manipulation is required prior to saving or streaming. Errors are handled via Promise rejection.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/methods.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfmake.createPdf(docDefinition).getBuffer().then((buffer) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'slidechanged' Event in Reveal.js (JavaScript)\nDESCRIPTION: Demonstrates how to listen for the 'slidechanged' event in Reveal.js. This event is triggered whenever the slide changes, providing access to the previous slide, current slide, and their indices.  This is useful for updating external libraries or triggering custom logic when a slide transition occurs.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.addEventListener( 'slidechanged', function( event ) {\n\t// event.previousSlide, event.currentSlide, event.indexh, event.indexv\n} );\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Fonts via URL in pdfMake JavaScript\nDESCRIPTION: This snippet demonstrates how to define a fonts object in JavaScript where each font family references font files accessible via HTTP or HTTPS URLs. The fonts object contains keys for font variations such as normal, bold, italics, and bolditalics, with URLs pointing to respective font files. The pdfMake.addFonts function is called with this object to register the fonts before PDF creation. Dependencies include pdfMake and internet-accessible font files. Inputs are font names and URLs; no outputs but the fonts become available for document generation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/custom-fonts-client-side/url/_index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fonts = {\n   yourFontName: {\n     normal: 'https://example.com/fonts/fontFile.ttf',\n     bold: 'https://example.com/fonts/fontFile2.ttf',\n     italics: 'https://example.com/fonts/fontFile3.ttf',\n     bolditalics: 'https://example.com/fonts/fontFile4.ttf'\n   },\n   anotherFontName: {\n     (...)\n   },\n\n   // download default Roboto font from cdnjs.com\n   Roboto: {\n     normal: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.3.0-beta.1/fonts/Roboto/Roboto-Regular.ttf',\n     bold: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.3.0-beta.1/fonts/Roboto/Roboto-Medium.ttf',\n     italics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.3.0-beta.1/fonts/Roboto/Roboto-Italic.ttf',\n     bolditalics: 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.3.0-beta.1/fonts/Roboto/Roboto-MediumItalic.ttf'\n   },\n\n   // example of usage fonts in collection\n   PingFangSC: {\n     normal: ['https://example.com/fonts/pingfang.ttc', 'PingFangSC-Regular'],\n     bold: ['https://example.com/fonts/pingfang.ttc', 'PingFangSC-Semibold'],\n   }\n};\n\npdfMake.addFonts(fonts);\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Page Height in pdfmake (JavaScript)\nDESCRIPTION: Shows how to configure an automatic page height in a pdfmake document definition (`dd`). This is achieved by specifying the `pageSize` as an object with a defined `width` and setting the `height` property to `'auto'`. The resulting PDF page height will adjust dynamically based on the content.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/page.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar dd = {\n  pageSize: {\n    width: 595.28,\n    height: 'auto'\n  },\n  content: [\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Configuring Reveal.js Auto-Sliding - JavaScript\nDESCRIPTION: Activates or adjusts auto-sliding mode in Reveal.js presentations by calling 'Reveal.configure' with an 'autoSlide' value in milliseconds. Requires Reveal.js to be loaded and initialized. The 'autoSlide' parameter sets the interval between slides; additional configuration (such as stopping on user input or overriding navigation methods) is possible. When enabled, users can pause/resume via a UI control or keyboard; slide timing can be overridden per slide with 'data-autoslide' attributes in HTML.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Slide every five seconds\nReveal.configure({\n  autoSlide: 5000\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Font in pdfMake docDefinition\nDESCRIPTION: This JavaScript snippet shows how to specify a custom font as the default font for the entire PDF document. By setting the `font` property within the `defaultStyle` of the `docDefinition` object, all text in the document will use the specified font unless overridden by a specific style.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/custom-fonts-client-side/vfs/_index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: (...),\n  defaultStyle: {\n    font: 'yourFontName'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Encryption and Permissions (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to define the necessary properties within the `docDefinition` object to enable PDF encryption and set access permissions. It shows how to specify a `userPassword` and an `ownerPassword`, and configure detailed `permissions` like printing, modifying, and copying via boolean flags or specific values.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/security.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  userPassword: '123',\n  ownerPassword: '123456',\n  permissions: {\n    printing: 'highResolution', //'lowResolution'\n    modifying: false,\n    copying: false,\n    annotating: true,\n    fillingForms: true,\n    contentAccessibility: true,\n    documentAssembly: true\n  },\n  content: [\n    '...'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Reveal.js with Custom Configuration - JavaScript\nDESCRIPTION: Initializes a Reveal.js presentation with a comprehensive set of configuration options controlling navigation, controls, progress, slide behavior, appearance, and interaction features. No external dependencies are required beyond including Reveal.js; all parameters such as 'controls', 'progress', 'slideNumber', and 'autoPlayMedia' can be adjusted to fit the needs of the specific presentation. The function expects a configuration object with key-value settings and sets up the slideshow accordingly; all config values are optional and default to Reveal.js standards if omitted.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\n\t// Display presentation control arrows\n\tcontrols: true,\n\n\t// Help the user learn the controls by providing hints, for example by\n\t// bouncing the down arrow when they first encounter a vertical slide\n\tcontrolsTutorial: true,\n\n\t// Determines where controls appear, \"edges\" or \"bottom-right\"\n\tcontrolsLayout: 'bottom-right',\n\n\t// Visibility rule for backwards navigation arrows; \"faded\", \"hidden\"\n\t// or \"visible\"\n\tcontrolsBackArrows: 'faded',\n\n\t// Display a presentation progress bar\n\tprogress: true,\n\n\t// Set default timing of 2 minutes per slide\n\tdefaultTiming: 120,\n\n\t// Display the page number of the current slide\n\tslideNumber: false,\n\n\t// Push each slide change to the browser history\n\thistory: false,\n\n\t// Enable keyboard shortcuts for navigation\n\tkeyboard: true,\n\n\t// Enable the slide overview mode\n\toverview: true,\n\n\t// Vertical centering of slides\n\tcenter: true,\n\n\t// Enables touch navigation on devices with touch input\n\ttouch: true,\n\n\t// Loop the presentation\n\tloop: false,\n\n\t// Change the presentation direction to be RTL\n\trtl: false,\n\n\t// Randomizes the order of slides each time the presentation loads\n\tshuffle: false,\n\n\t// Turns fragments on and off globally\n\tfragments: true,\n\n\t// Flags if the presentation is running in an embedded mode,\n\t// i.e. contained within a limited portion of the screen\n\tembedded: false,\n\n\t// Flags if we should show a help overlay when the questionmark\n\t// key is pressed\n\thelp: true,\n\n\t// Flags if speaker notes should be visible to all viewers\n\tshowNotes: false,\n\n\t// Global override for autoplaying embedded media (video/audio/iframe)\n\t// - null: Media will only autoplay if data-autoplay is present\n\t// - true: All media will autoplay, regardless of individual setting\n\t// - false: No media will autoplay, regardless of individual setting\n\tautoPlayMedia: null,\n\n\t// Number of milliseconds between automatically proceeding to the\n\t// next slide, disabled when set to 0, this value can be overwritten\n\t// by using a data-autoslide attribute on your slides\n\tautoSlide: 0,\n\n\t// Stop auto-sliding after user input\n\tautoSlideStoppable: true,\n\n\t// Use this method for navigation when auto-sliding\n\tautoSlideMethod: Reveal.navigateNext,\n\n\t// Enable slide navigation via mouse wheel\n\tmouseWheel: false,\n\n\t// Hides the address bar on mobile devices\n\thideAddressBar: true,\n\n\t// Opens links in an iframe preview overlay\n\tpreviewLinks: false,\n\n\t// Transition style\n\ttransition: 'slide', // none/fade/slide/convex/concave/zoom\n\n\t// Transition speed\n\ttransitionSpeed: 'default', // default/fast/slow\n\n\t// Transition style for full page slide backgrounds\n\tbackgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom\n\n\t// Number of slides away from the current that are visible\n\tviewDistance: 3,\n\n\t// Parallax background image\n\tparallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\n\n\t// Parallax background size\n\tparallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\"\n\n\t// Number of pixels to move the parallax background per slide\n\t// - Calculated automatically unless specified\n\t// - Set to 0 to disable movement along an axis\n\tparallaxBackgroundHorizontal: null,\n\tparallaxBackgroundVertical: null,\n\n\t// The display mode that will be used to show slides\n\tdisplay: 'block'\n\n});\n```\n\n----------------------------------------\n\nTITLE: Default Roboto Font Configuration in pdfMake\nDESCRIPTION: This snippet illustrates the default font configuration structure used by pdfmake for the built-in Roboto font. It serves as an example showing how the normal, bold, italics, and bolditalics weights are mapped to their respective filenames within the VFS.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/custom-fonts-client-side/vfs/_index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npdfMake.addFonts({\n  Roboto: {\n    normal: 'Roboto-Regular.ttf',\n    bold: 'Roboto-Medium.ttf',\n    italics: 'Roboto-Italic.ttf',\n    bolditalics: 'Roboto-MediumItalic.ttf'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting PDF as Buffer with pdfMake in JavaScript\nDESCRIPTION: This snippet demonstrates retrieving the PDF document as a buffer (typically a `Uint8Array` or similar). The `getBuffer()` method is utilized. Buffers represent raw data that can be used for tasks like writing to files or sending over a network. Error handling is included.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).getBuffer().then((buffer) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font in pdfmake JavaScript Configuration\nDESCRIPTION: This snippet shows how to declare a custom font named 'Fontello' by specifying the font files for normal, bold, italics, and bold italics styles, which allows using the icon font within pdfmake documents.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/icons.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.fonts = {\n    Fontello: {\n        normal: 'fontello.ttf',\n        bold: 'fontello.ttf',\n        italics: 'fontello.ttf',\n        bolditalics: 'fontello.ttf'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styles for Icons Using Custom Font in pdfmake\nDESCRIPTION: This snippet demonstrates defining a style named 'icon' that applies the custom 'Fontello' font, enabling icon characters to be styled consistently across the document.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/icons.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nicon: {\n    font: 'Fontello'\n}\n```\n\n----------------------------------------\n\nTITLE: Code Syntax Highlighting in Reveal.js Using Highlight.js in HTML\nDESCRIPTION: An example demonstrating code syntax highlighting integration in reveal.js slides using highlight.js. The `data-trim` attribute automatically removes surrounding whitespace, and the `data-noescape` attribute prevents HTML escaping inside the `<code>` block, allowing HTML tags like `<mark>` to be used for inline markup. This snippet contains Clojure code with syntax highlighting applied. Requires highlight.js library and corresponding CSS included in the reveal.js setup.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<section>\\n\\t<pre><code data-trim data-noescape>\\n(def lazy-fib\\n  (concat\\n   [0 1]\\n   <mark>((fn rfib [a b]</mark>\\n        (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))\\n\\t</code></pre>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: Embedding Icon Characters in PDF Text Content\nDESCRIPTION: This example shows inserting an icon into the PDF by specifying the icon's character (e.g., '') and applying the 'icon' style, which renders the icon from the custom font. It clarifies that the icon characters are obtained from the fontello CSS and used directly as text.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/icons.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ text: '', style: 'icon' } // icon wifi\n```\n\n----------------------------------------\n\nTITLE: Embedding Icons within Text Arrays for Inline Display\nDESCRIPTION: This snippet illustrates nesting a text object containing an icon with a style within an array to include the icon inline with text. It results in displaying the icon followed by standard text, allowing for seamless icon embedding in paragraphs.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/icons.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntext: [\n    { text: '', style: 'icon' }, // icon gift\n    \" my present\"\n]\n```\n\n----------------------------------------\n\nTITLE: Stretching Elements to Fill Slide Space in Reveal.js with HTML\nDESCRIPTION: Explains how the `.stretch` class can be added to direct child elements of a slide section to expand them and consume available space. The example shows a video element stretched within a slide. Limitations include that only direct descendants can be stretched and only one element per slide can have the `stretch` class. This technique is useful for images or videos to maintain aspect ratios while using maximum slide real estate. Requires custom reveal.js CSS that handles `.stretch` class sizing.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<section>\\n\\t<h2>This video will use up the remaining space on the slide</h2>\\n    <video class=\\\"stretch\\\" src=\\\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\\\"></video>\\n</section>\n```\n\n----------------------------------------\n\nTITLE: npm Installation of pdfmake\nDESCRIPTION: This snippet shows how to install the pdfmake library using npm. The command `npm install pdfmake@0.3.0-beta.1` installs the specified version of the pdfmake package and its dependencies. This allows you to use the library in your JavaScript projects.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pdfmake@0.3.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Using reveal.js postMessage API for Inter-window Slide Control in JavaScript\nDESCRIPTION: Shows how to send JSON-formatted postMessage commands to a reveal.js presentation embedded in another window or iframe to control it programmatically, e.g. moving to slide 2. Also demonstrates subscribing to bubbled reveal.js events from a child iframe by listening to `message` events, parsing the JSON, and filtering by namespace and eventName. The API can be toggled on/off via configuration options `postMessage` and `postMessageEvents`. This facilitates integration of reveal.js presentations in multi-window or embedded contexts. Requires support for postMessage on the hosting environment.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n<window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener( 'message', function( event ) {\\n\\tvar data = JSON.parse( event.data );\\n\\tif( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) {\\n\\t\\t// Slide changed, see data.state for slide number\\n\\t}\\n} );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.initialize({\\n\\t...,\\n\\n\\t// Exposes the reveal.js API through window.postMessage\\n\\tpostMessage: true,\\n\\n\\t// Dispatches all reveal.js events to the parent window through postMessage\\n\\tpostMessageEvents: false\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing PDFMake on Server-side via npm\nDESCRIPTION: Command to install the beta version of PDFMake package via npm for server-side applications.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/server-side/_index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pdfmake@0.3.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Require pdfmake and vfs_fonts\nDESCRIPTION: This JavaScript snippet shows how to import pdfmake and vfs_fonts using the `require` function, common in Node.js environments or bundlers like Webpack. This variation directly imports both and adds virtual file system support.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pdfMake = require('pdfmake/build/pdfmake.js');\nvar pdfFonts = require('pdfmake/build/vfs_fonts.js');\npdfMake.addVirtualFileSystem(pdfFonts);\n```\n\n----------------------------------------\n\nTITLE: Generating QR Codes in pdfmake (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to include QR codes in a pdfmake document definition. It shows basic usage by providing the text content, how to set custom foreground and background colors, and how to resize the QR code using the 'fit' property. Additional optional properties like 'version', 'eccLevel', 'mode', and 'mask' can be used for further customization as described in the documentation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/qr.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    // basic usage\n    { qr: 'text in QR' },\n\n    // colored QR\n    { qr: 'text in QR', foreground: 'red', background: 'yellow' },\n\n    // resized QR\n    { qr: 'text in QR', fit: '500' },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript: Import pdfmake and vfs_fonts, with virtual file system\nDESCRIPTION: This TypeScript snippet illustrates the import and usage of pdfmake and vfs_fonts with type definitions. It shows importing the libraries and adding font definitions to the virtual file system for generating PDFs with custom fonts.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as pdfMake from \"pdfmake/build/pdfmake\";\nimport * as pdfFonts from 'pdfmake/build/vfs_fonts';\n\n(<any>pdfMake).addVirtualFileSystem(pdfFonts);\n```\n\n----------------------------------------\n\nTITLE: Listening to Slide State Changes (JavaScript)\nDESCRIPTION: Demonstrates how to listen for custom slide state changes using `Reveal.addEventListener`. By setting `data-state=\"somestate\"` on a `<section>` element, the class 'somestate' is applied to the document element when the slide is active. This allows you to trigger custom JavaScript functions when that specific slide is displayed.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.addEventListener( 'somestate', function() {\n\t// TODO: Sprinkle magic\n}, false );\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration: exclude pdfmake.js\nDESCRIPTION: This configuration addresses the 'Cannot read property 'TYPED_ARRAY_SUPPORT' of undefined' error, commonly encountered when using pdfmake.  It excludes `pdfmake.js` from processing by the webpack bundler.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/_index.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nexclude: [ /node_modules/, /pdfmake.js$/ ]\n```\n\n----------------------------------------\n\nTITLE: Defining Static Headers and Footers in pdfmake (JavaScript)\nDESCRIPTION: Demonstrates how to define static headers and footers in a pdfmake document definition. The header is set using a simple string, while the footer uses the 'columns' layout to structure text elements.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/headers-footers.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  header: 'simple text',\n\n  footer: {\n    columns: [\n      'Left part',\n      { text: 'Right part', alignment: 'right' }\n    ]\n  },\n\n  content: (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Printing PDF in Same Window with pdfMake in JavaScript\nDESCRIPTION: This snippet shows how to print the pdf in the same window. It calls the `print()` method with the `window` object.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).print(window);\n```\n\n----------------------------------------\n\nTITLE: Listening to Reveal.js Fragment Show and Hide Events in JavaScript\nDESCRIPTION: Shows how to register event listeners for `fragmentshown` and `fragmenthidden` events in reveal.js using JavaScript. These events fire whenever a fragment becomes visible or hidden during slide progression. The event object exposes the `fragment` DOM element that triggered the event, allowing integration with third-party libraries (e.g., calling MathJax render methods). Requires reveal.js to be loaded and initialized to work properly.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.addEventListener( 'fragmentshown', function( event ) {\\n\\t// event.fragment = the fragment DOM element\\n} );\\nReveal.addEventListener( 'fragmenthidden', function( event ) {\\n\\t// event.fragment = the fragment DOM element\\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Text Watermark in pdfmake (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of adding a watermark to a pdfmake document by providing a simple string value to the `watermark` property within the document definition object. The library handles default styling.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/watermark.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  watermark: 'test watermark',\n  content: [\n    '...'\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Reveal.js with MathJax Plugin\nDESCRIPTION: This snippet demonstrates how to configure the Reveal.js presentation to use the MathJax plugin for rendering mathematical equations. It includes the `math` configuration object to specify the MathJax library URL and configuration settings, and adds the `plugin/math/math.js` dependency.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.initialize({\n\n\t// other options ...\n\n\tmath: {\n\t\tmathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js',\n\t\tconfig: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html\n\t},\n\n\tdependencies: [\n\t\t{ src: 'plugin/math/math.js', async: true }\n\t]\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Tiling Pattern in PDFMake Document Definition - JavaScript\nDESCRIPTION: This snippet shows how to define a custom tiling pattern within the `patterns` dictionary of a PDFMake document definition. It specifies the pattern's bounding box, horizontal and vertical tiling steps, and a PDF stream of drawing operations to render the pattern cell. This pattern can then be referenced by key in other document elements.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/patterns.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: [\"...\"],\n  patterns: {\n    stripe45d: {\n      boundingBox: [1, 1, 4, 4],\n      xStep: 3,\n      yStep: 3,\n      pattern: \"1 w 0 1 m 4 5 l s 2 0 m 5 3 l s\"\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Reveal.js Development Server with npm\nDESCRIPTION: This command executes the start script defined in the `package.json`, typically launching a local web server to serve the presentation and setting up watchers to automatically rebuild assets when source files change. It is used for development and previewing the presentation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Document Metadata with pdfMake (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to set the metadata for a PDF document using the `info` property within a pdfMake document definition. It sets properties like `title`, `author`, `subject`, and `keywords`. The `content` property defines the main content of the PDF. Requires the pdfMake library. The output is a PDF document with the specified metadata and content.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/document-medatadata.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  info: {\n\t\ttitle: 'awesome Document',\n\t\tauthor: 'john doe',\n\t\tsubject: 'subject of document',\n\t\tkeywords: 'keywords for document',\n  },\n  content:  'This is an sample PDF printed with pdfMake'\n}\n```\n\n----------------------------------------\n\nTITLE: Reveal.js API Usage (JavaScript)\nDESCRIPTION: Shows how to use the Reveal.js JavaScript API to control navigation, presentation state, and configuration. It demonstrates functions for slide navigation (Reveal.slide, Reveal.left, etc.), toggling states (Reveal.toggleOverview, Reveal.togglePause, etc.), and configuring settings (Reveal.configure).\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Navigation\nReveal.slide( indexh, indexv, indexf );\nReveal.left();\nReveal.right();\nReveal.up();\nReveal.down();\nReveal.prev();\nReveal.next();\nReveal.prevFragment();\nReveal.nextFragment();\n\n// Randomize the order of slides\nReveal.shuffle();\n\n// Toggle presentation states, optionally pass true/false to force on/off\nReveal.toggleOverview();\nReveal.togglePause();\nReveal.toggleAutoSlide();\n\n// Shows a help overlay with keyboard shortcuts, optionally pass true/false\n// to force on/off\nReveal.toggleHelp();\n\n// Change a config value at runtime\nReveal.configure({ controls: true });\n\n// Returns the present configuration options\nReveal.getConfig();\n\n// Fetch the current scale of the presentation\nReveal.getScale();\n\n// Retrieves the previous and current slide elements\nReveal.getPreviousSlide();\nReveal.getCurrentSlide();\n\nReveal.getIndices();        // { h: 0, v: 0 } }\nReveal.getPastSlideCount();\nReveal.getProgress();       // (0 == first slide, 1 == last slide)\nReveal.getSlides();         // Array of all slides\nReveal.getTotalSlides();    // total number of slides\n\n// Returns the speaker notes for the current slide\nReveal.getSlideNotes();\n\n// State checks\nReveal.isFirstSlide();\nReveal.isLastSlide();\nReveal.isOverview();\nReveal.isPaused();\nReveal.isAutoSliding();\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Standard Fonts Server-Side (Node.js)\nDESCRIPTION: This snippet demonstrates how to define the mappings for the standard 14 PDF fonts and use the `addFonts` method with the `pdfmake` library in a Node.js environment. It shows creating a simple document and writing the resulting PDF to a file on the server.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/standard-14-fonts.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar fonts = {\n  Courier: {\n    normal: 'Courier',\n    bold: 'Courier-Bold',\n    italics: 'Courier-Oblique',\n    bolditalics: 'Courier-BoldOblique'\n  },\n  Helvetica: {\n    normal: 'Helvetica',\n    bold: 'Helvetica-Bold',\n    italics: 'Helvetica-Oblique',\n    bolditalics: 'Helvetica-BoldOblique'\n  },\n  Times: {\n    normal: 'Times-Roman',\n    bold: 'Times-Bold',\n    italics: 'Times-Italic',\n    bolditalics: 'Times-BoldItalic'\n  },\n  Symbol: {\n    normal: 'Symbol'\n  },\n  ZapfDingbats: {\n    normal: 'ZapfDingbats'\n  }\n};\n\nvar pdfmake = require('pdfmake');\npdfmake.addFonts(fonts);\n\nvar docDefinition = {\n  content: [\n    'First paragraph',\n    'Another paragraph, this time a little bit longer to make sure, this line will be divided into at least two lines',\n  ],\n  defaultStyle: {\n    font: 'Helvetica'\n  }\n};\n\nvar pdf = pdfmake.createPdf(docDefinition);\npdf.write('pdfs/basics.pdf').then(() => {\n\t// success event\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern as Vector Fill Color in PDFMake - JavaScript\nDESCRIPTION: This snippet shows how to use a predefined pattern as the fill color for a vector graphic shape, such as a rectangle, in a PDFMake document. The `color` property of the vector object is set to a tuple `[patternKey, color]`, referencing the pattern ID from the `patterns` dictionary and specifying the desired color.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/patterns.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'rect',\n  x: 10, y: 250, w: 50, h: 30,\n  color: ['stripe45d', 'blue']\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Reveal.js Configuration After Initialization - JavaScript\nDESCRIPTION: Dynamically updates part or all of the Reveal.js configuration by calling 'Reveal.configure' with a new settings object. No additional dependencies are needed besides an initialized Reveal.js instance. Key parameters such as 'autoSlide' can be changed at runtime to start or stop automatic slide transitions; input is a configuration object and output is immediate reconfiguration of the existing slideshow. Suitable for responsive behaviors and live customization.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Turn autoSlide off\nReveal.configure({ autoSlide: 0 });\n\n// Start auto-sliding every 5s\nReveal.configure({ autoSlide: 5000 });\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific pdfmake TOC with ID (JavaScript)\nDESCRIPTION: Illustrates how to create a Table of Contents with a unique identifier using the `id` property within the `toc` definition. Content elements are then explicitly linked to this specific TOC by setting `tocItem` to the corresponding `id` string.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/toc.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  content: [\n    {\n      toc: {\n        id: 'mainToc',\n        title: {text: 'INDEX', style: 'header'}\n      }\n    },\n    {\n      text: 'This is a header',\n      style: 'header',\n      tocItem: 'mainToc'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reveal.js Slide Number Display Using JavaScript\nDESCRIPTION: Illustrates how to enable and configure slide number display in reveal.js using the `Reveal.configure` API. Slide numbers can be turned on with a boolean flag or customized using format strings such as `'h.v'` (horizontal.vertical), `'h/v'` (horizontal/vertical), `'c'` (flattened slide index), or `'c/t'` (flattened slide index over total). The `showSlideNumber` option controls on which views slide numbers appear (e.g., all views, speaker notes, print). This requires reveal.js JavaScript environment initialized.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Shows the slide number using default formatting\\nReveal.configure({ slideNumber: true });\\n\\n// Slide number formatting can be configured using these variables:\\n//  \"h.v\": \\thorizontal . vertical slide number (default)\\n//  \"h/v\": \\thorizontal / vertical slide number\\n//    \"c\": \\tflattened slide number\\n//  \"c/t\": \\tflattened slide number / total slides\\nReveal.configure({ slideNumber: 'c/t' });\\n\\n// Control which views the slide number displays on using the \"showSlideNumber\" value:\\n//     \"all\": show on all views (default)\\n// \"speaker\": only show slide numbers on speaker notes view\\n//   \"print\": only show slide numbers when printing to PDF\\nReveal.configure({ showSlideNumber: 'speaker' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Speaker Notes Plugin\nDESCRIPTION: This JavaScript snippet demonstrates how to initialize the speaker notes plugin in reveal.js. It defines dependencies for client-side notes functionality, which allows for notes to be displayed in a separate window.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\t...\n\n\tdependencies: [\n\t\t{ src: 'socket.io/socket.io.js', async: true },\n\t\t{ src: 'plugin/notes-server/client.js', async: true }\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Page Orientation Mid-Document in pdfmake (JavaScript)\nDESCRIPTION: Demonstrates how to change the page orientation within a pdfmake document by setting the `pageOrientation` property on a specific content element along with `pageBreak: 'before'` or `pageBreak: 'after'`. This allows mixing portrait and landscape pages within the same generated PDF file.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/page.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  pageOrientation: 'portrait',\n  content: [\n    {text: 'Text on Portrait'},\n    {text: 'Text on Landscape', pageOrientation: 'landscape', pageBreak: 'before'},\n    {text: 'Text on Landscape 2', pageOrientation: 'portrait', pageBreak: 'after'},\n    {text: 'Text on Portrait 2'},\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Slide Duration per Slide or Fragment - HTML\nDESCRIPTION: Demonstrates how to override automatic slide or fragment progression duration in Reveal.js presentations using the 'data-autoslide' attribute. Must be used within an HTML structure interpreted by Reveal.js. Attach 'data-autoslide' with a millisecond value to a <section> or .fragment element to control its display time individually; useful for fine-tuning slide timings within auto-sliding presentations. No JavaScript required other than the host Reveal.js instance.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-autoslide=\"2000\">\n\t<p>After 2 seconds the first fragment will be shown.</p>\n\t<p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p>\n\t<p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Bindings for Reveal.js - JavaScript\nDESCRIPTION: Overrides or disables specific keyboard shortcuts for navigating or triggering actions in Reveal.js presentations using the 'keyboard' option via 'Reveal.configure'. Supply an object mapping keyboard key codes to either Reveal.js command strings, custom callback functions, or null to disable the default binding. Requires Reveal.js; designed for accessibility or custom control needs. For example, remap the Enter key to 'next', run a function on ESC, or disable Space.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.configure({\n  keyboard: {\n    13: 'next', // go to the next slide when the ENTER key is pressed\n    27: function() {}, // do something custom when ESC is pressed\n    32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding)\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Reveal.js (HTML)\nDESCRIPTION: Shows how to create internal links between slides in Reveal.js.  Links can target slides by index or by ID using the `href` attribute. Relative navigation links can be added using specific CSS classes.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#/2/2\">Link</a>\n<a href=\"#/some-slide\">Link</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\" class=\"navigate-left\">\n<a href=\"#\" class=\"navigate-right\">\n<a href=\"#\" class=\"navigate-up\">\n<a href=\"#\" class=\"navigate-down\">\n<a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide -->\n<a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Hugo Site\nDESCRIPTION: This snippet initializes a new Hugo site in the current directory. It creates the necessary directory structure required for a Hugo project. This command is a prerequisite for installing and using the DocDock theme.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ hugo new site .\n```\n\n----------------------------------------\n\nTITLE: Import config.toml\nDESCRIPTION: This command copies a sample configuration file from the DocDock theme's example site to the Hugo project's root.  This file contains configuration settings for the theme.  You will likely need to edit the `config.toml` file after copying it.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cp themes/docdock/exampleSite/config.toml .\n```\n\n----------------------------------------\n\nTITLE: Getting PDF as Stream with pdfMake in JavaScript\nDESCRIPTION: This snippet provides an example of retrieving the PDF document as a stream. The `getStream()` method is used. Streams allow for handling potentially large files in a more efficient way, especially useful when the full file might not fit in memory. Error handling is present.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/getting-started/client-side/methods.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\npdfMake.createPdf(docDefinition).getStream().then((stream) => {\n\t// ...\n}, err => {\n\tconsole.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Slide Transitions in Reveal.js (HTML)\nDESCRIPTION: Demonstrates setting the slide transition for a Reveal.js slide using the `data-transition` attribute. It also shows how to control the transition speed using `data-transition-speed`.  Different 'in' and 'out' transitions can also be specified.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<section data-transition=\"zoom\">\n\t<h2>This slide will override the presentation transition and zoom!</h2>\n</section>\n\n<section data-transition-speed=\"fast\">\n\t<h2>Choose from three transition speeds: default, fast or slow!</h2>\n</section>\n```\n\nLANGUAGE: html\nCODE:\n```\n<section data-transition=\"slide\">\n    The train goes on …\n</section>\n<section data-transition=\"slide\">\n    and on …\n</section>\n<section data-transition=\"slide-in fade-out\">\n    and stops.\n</section>\n<section data-transition=\"fade-in slide-out\">\n    (Passengers entering and leaving)\n</section>\n<section data-transition=\"slide\">\n    And it starts again.\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting Image Backgrounds for Reveal.js Slides (HTML)\nDESCRIPTION: Demonstrates setting an image as the background for a Reveal.js slide using the `data-background-image` attribute. It also shows how to control the image's size and repetition using `data-background-size` and `data-background-repeat` respectively.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<section data-background-image=\"http://example.com/image.png\">\n\t<h2>Image</h2>\n</section>\n<section data-background-image=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\">\n\t<h2>This background image will be sized to 100px and repeated</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Defining Speaker Notes with Attribute\nDESCRIPTION: This HTML snippet demonstrates how to add notes to a slide using the `data-notes` attribute. The content within the attribute will appear in the speaker notes window.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_40\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-notes=\"Something important\"></section>\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Background in pdfmake (JavaScript)\nDESCRIPTION: Uses a function assigned to the 'background' property to generate dynamic content for each page based on the current page number and page size. The function receives the `currentPage` and `pageSize` objects as arguments.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/background-layer.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  background: function(currentPage, pageSize) {\n    return `page ${currentPage} with size ${pageSize.width} x ${pageSize.height}`\n  },\n\n  content: (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Iframe Backgrounds for Reveal.js Slides (HTML)\nDESCRIPTION: Demonstrates how to embed an iframe as the background for a Reveal.js slide using the `data-background-iframe` attribute. The `data-background-interactive` attribute allows making the iframe interactive.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<section data-background-iframe=\"https://slides.com\" data-background-interactive>\n\t<h2>Iframe</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting Video Backgrounds for Reveal.js Slides (HTML)\nDESCRIPTION: Shows how to set a video as the background for a Reveal.js slide using the `data-background-video` attribute.  It also demonstrates how to configure video looping and muting using `data-background-video-loop` and `data-background-video-muted` respectively.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted>\n\t<h2>Video</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Images/Iframes/Videos with Reveal.js (HTML)\nDESCRIPTION: Demonstrates lazy loading of images, iframes, and videos in Reveal.js. It replaces the 'src' attribute with 'data-src' to delay loading until the slide is near the current view.  This improves initial load time and performance, especially for presentations with many media elements.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<section>\n  <img data-src=\"image.png\">\n  <iframe data-src=\"http://hakim.se\"></iframe>\n  <video>\n    <source data-src=\"video.webm\" type=\"video/webm\" />\n    <source data-src=\"video.mp4\" type=\"video/mp4\" />\n  </video>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting Color Backgrounds for Reveal.js Slides (HTML)\nDESCRIPTION: Shows how to set a background color for a Reveal.js slide using the `data-background-color` attribute.  Any CSS color format is supported, such as hex codes, rgba(), or hsl().\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<section data-background-color=\"#ff0000\">\n\t<h2>Color</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Basic reveal.js Presentation Markup (HTML)\nDESCRIPTION: This HTML snippet shows a barebones reveal.js presentation structure. It includes the necessary CSS links, the reveal.js JavaScript file, and the basic markup hierarchy: `.reveal > .slides > section`. The `Reveal.initialize()` function is called to initialize the presentation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n\t<head>\n\t\t<link rel=\"stylesheet\" href=\"css/reveal.css\">\n\t\t<link rel=\"stylesheet\" href=\"css/theme/white.css\">\n\t</head>\n\t<body>\n\t\t<div class=\"reveal\">\n\t\t\t<div class=\"slides\">\n\t\t\t\t<section>Slide 1</section>\n\t\t\t\t<section>Slide 2</section>\n\t\t\t</div>\n\t\t</div>\n\t\t<script src=\"js/reveal.js\"></script>\n\t\t<script>\n\t\t\tReveal.initialize();\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Markdown Slide (HTML)\nDESCRIPTION: This HTML snippet shows how to use Markdown within a reveal.js slide. The `data-markdown` attribute is added to the `<section>` element, and the Markdown content is wrapped in a `<textarea data-template>`. The `marked.js` and `markdown.js` plugins are required.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-markdown>\n\t<textarea data-template>\n\t\t## Page title\n\n\t\tA paragraph with some text and a [link](http://hakim.se).\n\t</textarea>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Starting Reveal.js Server on Custom Port with npm\nDESCRIPTION: This command is similar to `npm start` but allows specifying a custom port for the local web server. The `--port=8001` argument is passed to the start script, changing the server's listening port from the default (usually 8000) to 8001.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\n$ npm start -- --port=8001\n```\n\n----------------------------------------\n\nTITLE: Defining Table Cell Properties for Background Color and Opacity in PDFMake\nDESCRIPTION: Sets background fill color and opacity for table cells, allowing visual styling of individual cells within a table. These properties require setting `fillColor` and `fillOpacity` in cell definitions.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/tables.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `fillColor: string`: the background color of a table cell\n* `fillOpacity: string`: the background opacity of a table cell\n```\n\n----------------------------------------\n\nTITLE: External Markdown (HTML)\nDESCRIPTION: This HTML snippet demonstrates loading Markdown content from an external file. The `data-markdown` attribute specifies the file path.  `data-separator`, `data-separator-vertical`, `data-separator-notes`, and `data-charset` attributes are used to configure the parsing of the external file.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-markdown=\"example.md\"  \n         data-separator=\"^\\n\\n\\n\"  \n         data-separator-vertical=\"^\\n\\n\"  \n         data-separator-notes=\"^Note:\"  \n         data-charset=\"iso-8859-15\">\n</section>\n```\n\n----------------------------------------\n\nTITLE: Applying Theme in Reveal.js\nDESCRIPTION: This HTML snippet demonstrates how to apply a specific theme to a reveal.js presentation. It replaces the default theme with a chosen theme by linking the corresponding CSS file.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_37\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\">\n```\n\n----------------------------------------\n\nTITLE: Handling Reveal.js Overview Mode Events and Programmatic Toggle in JavaScript\nDESCRIPTION: Provides examples of listening for `overviewshown` and `overviewhidden` events via `Reveal.addEventListener` to detect when the overview mode is toggled. Also demonstrates how to programmatically toggle overview mode with `Reveal.toggleOverview()`. Overview mode provides a zoomed out 'bird's eye' view of all slides, enabling quicker navigation. Requires reveal.js environment and keyboard bindings active to utilize these features.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } );\\nReveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } );\\n\\n// Toggle the overview mode programmatically\\nReveal.toggleOverview();\n```\n\n----------------------------------------\n\nTITLE: Building pdfmake with Standard Fonts Client-Side (Bash)\nDESCRIPTION: These command-line instructions detail the steps required to build the pdfmake library from source, specifically including the standard 14 fonts for client-side browser use. It involves cloning the repository, installing dependencies, and running a dedicated build task.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/fonts/standard-14-fonts.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/bpampuch/pdfmake.git\ncd pdfmake\nnpm install\ngulp buildWithStandardFonts\n```\n\n----------------------------------------\n\nTITLE: Defining Speaker Notes in Markdown\nDESCRIPTION: This HTML snippet provides an example of how to define speaker notes using Markdown syntax. The `data-markdown` attribute is used within an `<aside>` element, enabling the integration of Markdown-formatted notes.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_39\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section>\n```\n\n----------------------------------------\n\nTITLE: Page Break Before (0.3): JavaScript\nDESCRIPTION: Defines the signature of the `pageBreakBefore` function in PDFMake version 0.3. It receives the current node and a `nodeContainer` object as parameters.  The `nodeContainer` provides methods to access following, next, and previous nodes. This function is used to dynamically control page breaks.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/migration-from-0.1/_index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n  pageBreakBefore: function(currentNode, nodeContainer) {\n    // nodeContainer.getFollowingNodesOnPage();\n    // nodeContainer.getNodesOnNextPage();\n    // nodeContainer.getPreviousNodesOnPage();\n  }\n```\n\n----------------------------------------\n\nTITLE: Slide Attributes in Markdown (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to add attributes to the `<section>` elements generated from Markdown. It uses HTML comments to specify attributes like `data-background`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-markdown>\n\t<script type=\"text/template\">\n\t<!-- .slide: data-background=\"#ff0000\" -->\n\t\tMarkdown content\n\t</script>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Reveal.js Directory\nDESCRIPTION: This command changes the current working directory to the `reveal.js` folder created by the `git clone` command. It is a necessary step before installing dependencies or running development tasks within the project directory.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\n$ cd reveal.js\n```\n\n----------------------------------------\n\nTITLE: Structure of `currentNode` in pdfmake `pageBreakBefore` Function (JavaScript)\nDESCRIPTION: Details the structure and properties of the `currentNode` object passed as the first argument to the `pageBreakBefore` function in pdfmake. This object provides runtime information about the node being evaluated, including its definition properties (text, style, table, etc.), the page numbers it spans, total document pages, and its exact position and orientation on the page, enabling context-aware page break decisions.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/page.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   id: '<as specified in doc definition>',\n   headlineLevel: '<as specified in doc definition>',\n   text: '<as specified in doc definition>',\n   ul: '<as specified in doc definition>',\n   ol: '<as specified in doc definition>',\n   table: '<as specified in doc definition>',\n   image: '<as specified in doc definition>',\n   qr: '<as specified in doc definition>',\n   canvas: '<as specified in doc definition>',\n   columns: '<as specified in doc definition>',\n   style: '<as specified in doc definition>',\n   pageOrientation '<as specified in doc definition>',\n   pageNumbers: [2, 3], // The pages this element is visible on (e.g. multi-line text could be on more than one page)\n   pages: 6, // the total number of pages of this document\n   stack: false, // if this is an element which encapsulates multiple sub-objects\n   startPosition: {\n     pageNumber: 2, // the page this node starts on\n     pageOrientation: 'landscape', // the orientation of this page\n     left: 60, // the left position\n     right: 60, // the right position\n     verticalRatio: 0.2, // the ratio of space used vertically in this document (excluding margins)\n     horizontalRatio: 0.0  // the ratio of space used horizontally in this document (excluding margins)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reveal.js Dependencies with npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install all the necessary project dependencies listed in the `package.json` file for reveal.js. This includes build tools, plugins, and other libraries required for development and full feature usage.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodule\nDESCRIPTION: This command initializes the Git submodules within the project, making them ready for use. It must be executed after adding submodules and before updating them.  This will enable the project to correctly handle the submodule's references.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule init\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiplex Master Presentation\nDESCRIPTION: This JavaScript snippet shows how to configure the reveal.js presentation for the master presentation using the multiplex plugin. It requires configuration of the `multiplex` and `dependencies` options with appropriate values for secret, id and URL.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\t// other options...\n\n\tmultiplex: {\n\t\t// Example values. To generate your own, see the socket.io server instructions.\n\t\tsecret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n\t\tid: '1ea875674b17ca76', // Obtained from socket.io server\n\t\turl: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server\n\t},\n\n\t// Don't forget to add the dependencies\n\tdependencies: [\n\t\t{ src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n\t\t{ src: 'plugin/multiplex/master.js', async: true },\n\n\t\t// and if you want speaker notes\n\t\t{ src: 'plugin/notes-server/client.js', async: true }\n\n\t\t// other dependencies...\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiplex Client Presentation\nDESCRIPTION: This JavaScript snippet shows how to configure the reveal.js presentation for the client presentation using the multiplex plugin. It requires configuration of the `multiplex` and `dependencies` options with appropriate values for secret, id and URL.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\t// other options...\n\n\tmultiplex: {\n\t\t// Example values. To generate your own, see the socket.io server instructions.\n\t\tsecret: null, // null so the clients do not have control of the master presentation\n\t\tid: '1ea875674b17ca76', // id, obtained from socket.io server\n\t\turl: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server\n\t},\n\n\t// Don't forget to add the dependencies\n\tdependencies: [\n\t\t{ src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\n\n\t\t// other dependencies...\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Hugo Frontmatter Configuration in TOML\nDESCRIPTION: A TOML-formatted frontmatter section for Hugo page configuration. It sets up the title (auto-generated from the filename), date (auto-populated), an empty description, and marks the content as a draft.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/archetypes/default.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle= \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\"\ndate= {{ .Date }}\ndescription = \"\"\ndraft= true\n+++\n```\n\n----------------------------------------\n\nTITLE: Setting Reveal.js Presentation Size Constraints - JavaScript\nDESCRIPTION: Establishes the default width, height, margin, and scaling limits for a Reveal.js presentation using the 'Reveal.initialize' configuration method. No external dependencies are required. Parameters like 'width', 'height', 'margin', 'minScale', and 'maxScale' control how the slideshow scales to fit various display resolutions, with defaults designed for most screens. Expects numeric or percentage string values; improper scaling values may cause layout issues, so constraints should be set carefully.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\n\t...\n\n\t// The \"normal\" size of the presentation, aspect ratio will be preserved\n\t// when the presentation is scaled to fit different resolutions. Can be\n\t// specified using percentage units.\n\twidth: 960,\n\theight: 700,\n\n\t// Factor of the display size that should remain empty around the content\n\tmargin: 0.1,\n\n\t// Bounds for smallest/largest possible scale to apply to content\n\tminScale: 0.2,\n\tmaxScale: 1.5\n\n});\n```\n\n----------------------------------------\n\nTITLE: Autoplaying Embedded Media in Reveal.js Slides Using HTML\nDESCRIPTION: Describes enabling automatic playback of embedded media elements such as video or audio in reveal.js by adding the `data-autoplay` attribute on the media tag. This triggers media playback when the slide containing the element is shown. Global autoplay for all embedded media can be configured with the `autoPlayMedia` option in reveal.js initialization. Embedded HTML5 media and YouTube/Vimeo iframes will automatically pause when navigating away from the slide unless marked with `data-ignore`. No external dependencies are required beyond reveal.js and standard HTML5 media tags.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<video data-autoplay src=\\\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\\\"></video>\n```\n\n----------------------------------------\n\nTITLE: Listening for Reveal.js Ready Event - JavaScript\nDESCRIPTION: Attaches an event listener to the 'ready' event emitted by Reveal.js when all non-async dependencies are loaded. Called with a function that receives the event object containing properties like currentSlide and slide indexes. Depends on Reveal.js being loaded and initialized. Used for custom initialization or logic that must wait for the slideshow to be fully ready before running; outputs nothing and triggers only once.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.addEventListener( 'ready', function( event ) {\n\t// event.currentSlide, event.indexh, event.indexv\n} );\n```\n\n----------------------------------------\n\nTITLE: Managing Presentation State in Reveal.js (JavaScript)\nDESCRIPTION: Shows how to use the `getState` and `setState` methods in Reveal.js to capture and restore the presentation's state.  `getState` returns an object containing all necessary information to revert to that specific point in the presentation. `setState` allows restoring the presentation to a previously captured state.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.slide( 1 );\n// we're on slide 1\n\nvar state = Reveal.getState();\n\nReveal.slide( 3 );\n// we're on slide 3\n\nReveal.setState( state );\n// we're back on slide 1\n```\n\n----------------------------------------\n\nTITLE: Loading Print Stylesheet for PDF Export in reveal.js with HTML/JavaScript\nDESCRIPTION: Presents a snippet that dynamically loads the appropriate print stylesheet (`pdf.css` or `paper.css`) based on the URL query string containing `print-pdf`. The stylesheet controls the styling needed when exporting slides to PDF format. This requires hosting the presentation via a webserver and using Google Chrome or Chromium browsers. The snippet inserts a `<link>` tag into the document head at runtime to enable print styling for PDF export scenarios.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<script>\\n\\tvar link = document.createElement( 'link' );\\n\\tlink.rel = 'stylesheet';\\n\\tlink.type = 'text/css';\\n\\tlink.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';\\n\\tdocument.getElementsByTagName( 'head' )[0].appendChild( link );\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Cloning Reveal.js Repository\nDESCRIPTION: This command clones the official reveal.js GitHub repository into the current directory. It is the second step in the full setup process, required to obtain the source code and development environment for reveal.js.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/hakimel/reveal.js.git\n```\n\n----------------------------------------\n\nTITLE: Defining a PDF/A Document Structure in pdfmake (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to define a document structure for pdfmake to generate a PDF/A-compliant file. It requires pdfmake version 0.3.0-beta.12 or higher. Key properties include `version` (set to 1.4 or higher, e.g., '1.5'), `subset` (specifying the PDF/A standard, e.g., 'PDF/A-3a'), `tagged` (set to `true`), and `displayTitle` (set to `true`), alongside standard `info` and `content`.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/pdfa.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n    version: '1.5',\n    subset: 'PDF/A-3a',\n    tagged: true,\n    displayTitle: true,\n    info: {\n        title: 'Awesome PDF document from pdfmake'\n    },\n    content: [\n        'PDF/A document for archive'\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Static Background in pdfmake (JavaScript)\nDESCRIPTION: Sets a static string as the background content that will appear on every page of the document. The 'background' property within the `docDefinition` object is assigned a simple string value.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/background-layer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar docDefinition = {\n  background: 'simple text',\n\n  content: (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Document Language with pdfMake (JavaScript)\nDESCRIPTION: This JavaScript snippet illustrates setting the document language using the `language` property in the pdfMake document definition. It sets the language to 'cs-CZ'. Requires the pdfMake library. The output will be a PDF document with the specified language setting and content.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/document-medatadata.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  language: 'cs-CZ'\n  content: 'Jednoduchý PDF dokument vytvoření pomocí pdfmake'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Marked (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to configure the `marked` Markdown parser within reveal.js. Options are passed to the `markdown` property during Reveal initialization. See https://github.com/chjj/marked#options-1 for available options.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\t// Options which are passed into marked\n\t// See https://github.com/chjj/marked#options-1\n\tmarkdown: {\n\t\tsmartypants: true\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern as Text Background in PDFMake - JavaScript\nDESCRIPTION: This snippet demonstrates how to apply a predefined pattern as a background for a text element in a PDFMake document. The `background` property is set to a tuple `[patternKey, color]`, where `patternKey` is the key of the pattern defined in the `patterns` dictionary and `color` is the color used to render the pattern.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/patterns.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ text: 'Insert lorem. And ipsum', background: ['stripe45d', 'gray'] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallax Background in Reveal.js (JavaScript)\nDESCRIPTION: Shows how to initialize Reveal.js with a parallax background image. The `parallaxBackgroundImage` and `parallaxBackgroundSize` options are required, while `parallaxBackgroundHorizontal` and `parallaxBackgroundVertical` control the movement of the background.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.initialize({\n\n\t// Parallax background image\n\tparallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\"\n\n\t// Parallax background size\n\tparallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto)\n\n\t// Number of pixels to move the parallax background per slide\n\t// - Calculated automatically unless specified\n\t// - Set to 0 to disable movement along an axis\n\tparallaxBackgroundHorizontal: 200,\n\tparallaxBackgroundVertical: 50\n\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern as Table Cell Fill Color in PDFMake - JavaScript\nDESCRIPTION: This snippet illustrates how to apply a predefined pattern as the background fill color for a table cell in a PDFMake document. The `fillColor` property of the table cell object is set to a tuple `[patternKey, color]`, where `patternKey` matches a key in the document's `patterns` dictionary and `color` is the color used to render the pattern.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/patterns.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  text: 'Sample value',\n  fillOpacity: 0.85,\n  fillColor: ['stripe45d', 'blue']\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern as Table Cell Overlay in PDFMake - JavaScript\nDESCRIPTION: This snippet demonstrates how to use a predefined pattern as an overlay on top of a table cell's content and background in a PDFMake document. The `overlayPattern` property is set to a tuple `[patternKey, color]`, and its opacity can be controlled independently using the `overlayOpacity` property.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/patterns.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  text: 'Sample value',\n  fillOpacity: 0.15,\n  fillColor: 'blue',\n  overlayPattern: ['stripe45d', 'gray'],\n  overlayOpacity: 0.15\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reveal.js Master with Socket.io Multiplexing\nDESCRIPTION: This snippet configures a Reveal.js presentation to act as the master in a multiplexed setup, sending updates to clients via a socket.io server. It sets the `multiplex` options, including the server `id`, `url`, and a `secret` key which grants control over the presentation. It includes the necessary socket.io, multiplex master, and client plugin dependencies.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.initialize({\n\t// other options...\n\n\tmultiplex: {\n\t\t// Example values. To generate your own, see the socket.io server instructions.\n\t\tsecret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n\t\tid: '1ea875674b17ca76', // Obtained from socket.io server\n\t\turl: 'example.com:80' // Location of your socket.io server\n\t},\n\n\t// Don't forget to add the dependencies\n\tdependencies: [\n\t\t{ src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n\t\t{ src: 'plugin/multiplex/master.js', async: true },\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\n\n\t\t// other dependencies...\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Reveal.js Client with Socket.io Multiplexing\nDESCRIPTION: This snippet configures a Reveal.js presentation to act as a client in a multiplexed setup, receiving updates from a master presentation via a socket.io server. It sets the `multiplex` options, including the server `id` and `url`, with `secret` set to `null` to prevent client control. It also includes the necessary socket.io and multiplex client plugin dependencies.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nReveal.initialize({\n\t// other options...\n\n\tmultiplex: {\n\t\t// Example values. To generate your own, see the socket.io server instructions.\n\t\tsecret: null, // null so the clients do not have control of the master presentation\n\t\tid: '1ea875674b17ca76', // id, obtained from socket.io server\n\t\turl: 'example.com:80' // Location of your socket.io server\n\t},\n\n\t// Don't forget to add the dependencies\n\tdependencies: [\n\t\t{ src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n\t\t{ src: 'plugin/multiplex/client.js', async: true }\n\n\t\t// other dependencies...\n\t]\n})\n```\n\n----------------------------------------\n\nTITLE: Element Attributes in Markdown (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to add attributes to Markdown elements using HTML comments. This is useful for applying fragments and other styling.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<section data-markdown>\n\t<script type=\"text/template\">\n\t\t- Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n\t\t- Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n\t</script>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Scaling in Reveal.js Presentation - JavaScript\nDESCRIPTION: Alters the Reveal.js scaling configuration to use the full viewport without any automated resizing by setting 'width' and 'height' to '100%', and 'margin', 'minScale', and 'maxScale' to 0 or 1. Requires Reveal.js, with no other dependencies. All values must be appropriate CSS units or numbers; intended for advanced layouts using external CSS scaling or media queries instead of framework-managed scaling.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nReveal.initialize({\n\n\t...\n\n\twidth: \"100%\",\n\theight: \"100%\",\n\tmargin: 0,\n\tminScale: 1,\n\tmaxScale: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling PDF Compression in pdfmake JavaScript\nDESCRIPTION: This snippet shows how to disable the default PDF compression in pdfmake by setting the 'compress' property to false within the document definition object. The 'docDefinition' object is the primary input to the pdfmake generator, and including 'compress: false' alters the output to be uncompressed. This is useful for debugging or scenarios requiring uncompressed PDF output. No external dependencies beyond pdfmake are required.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/document-definition-object/compression.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar docDefinition = {\n  compress: false,\n\n  content: (...)\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting pdfmake Docs Website with Hugo\nDESCRIPTION: Commands to clone the pdfmake documentation repository and start the local development server using Hugo. This sets up the environment for local development and preview of the documentation website.\nSOURCE: https://github.com/pdfmake/docs/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch master https://github.com/pdfmake/docs.git\ncd docs\nhugo server\n```\n\n----------------------------------------\n\nTITLE: Page Break Before (0.1/0.2): JavaScript\nDESCRIPTION: Defines the signature of the `pageBreakBefore` function in PDFMake versions 0.1 and 0.2. It receives the current node, following nodes on the page, nodes on the next page, and previous nodes on the page as parameters. This function is used to determine whether a page break should occur before a specific node.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/migration-from-0.1/_index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n  pageBreakBefore: function(currentNode, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage) {\n\n  }\n```\n\n----------------------------------------\n\nTITLE: Previewing Hugo Site\nDESCRIPTION: This command starts the Hugo development server, allowing you to preview the site locally.  It serves the generated site on a local port, typically http://localhost:1313.  This is a useful tool for checking changes and the appearance of the generated site.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ hugo server\n```\n\n----------------------------------------\n\nTITLE: Install DocDock as Git Submodule\nDESCRIPTION: This command adds the DocDock theme as a Git submodule to the Hugo project, allowing for easier updates and management of the theme.  It is often needed by CI tools like Netlify or Jenkins.  This will fetch the latest version of the theme from GitHub.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule add https://github.com/vjeantet/hugo-theme-docdock.git themes/docdock\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodule\nDESCRIPTION: This command updates the Git submodules to their latest versions or to specific commits. It is necessary to get the correct version of the DocDock theme.  This is executed after initializing the submodules, usually after the initial installation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git submodule update\n```\n\n----------------------------------------\n\nTITLE: Deploying pdfmake Documentation Website\nDESCRIPTION: Command to build and deploy the pdfmake documentation website using Hugo. The --cleanDestinationDir flag ensures the destination directory is cleaned before generating new content.\nSOURCE: https://github.com/pdfmake/docs/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhugo --cleanDestinationDir\n```\n\n----------------------------------------\n\nTITLE: Clone DocDock theme\nDESCRIPTION: This command clones the DocDock theme directly into the `themes/` directory of the Hugo project.  This command clones the latest version of the theme from GitHub, but it's not tracked in the parent git repo.  This is an alternative to the git submodule method.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/vjeantet/hugo-theme-docdock.git themes/docdock\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hugo Front Matter Template for PDFMake Documentation\nDESCRIPTION: This snippet defines the front matter template for new Hugo content pages in the PDFMake documentation. It automatically converts the filename to a properly formatted title by replacing hyphens with spaces and applying title case.\nSOURCE: https://github.com/pdfmake/docs/blob/master/archetypes/default.md#_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: This snippet initializes a Git repository in the current directory, enabling version control. It is recommended to track all changes made to the Hugo site content and customizations using git. It is executed after creating the Hugo site.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git init\n```\n\n----------------------------------------\n\nTITLE: Declaring a variable in JavaScript for pdfmake\nDESCRIPTION: A simple JavaScript variable declaration that initializes a numeric variable. This code might be used as part of a pdfmake document configuration or content manipulation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/themes/docdock/static/revealjs/test/simple.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = 1;\n```\n\n----------------------------------------\n\nTITLE: Accessing Local pdfmake Documentation Server\nDESCRIPTION: URL to access the locally running pdfmake documentation server in a web browser. After starting the Hugo server, this URL will display the version 0.3 documentation.\nSOURCE: https://github.com/pdfmake/docs/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:1313/docs/0.3/\n```\n\n----------------------------------------\n\nTITLE: No code snippets found\nDESCRIPTION: The provided content does not include code snippets, only descriptive documentation and feature listings.\nSOURCE: https://github.com/pdfmake/docs/blob/master/content/_index.md#_snippet_0\n\n"
  }
]