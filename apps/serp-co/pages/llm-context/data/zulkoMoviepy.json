[
  {
    "owner": "zulko",
    "repo": "moviepy",
    "content": "TITLE: Installing MoviePy with pip\nDESCRIPTION: Simple command to install MoviePy using the pip package manager. The sudo option might be required depending on your system configuration and permissions.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/install.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ (sudo) pip install moviepy\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Video Clips with MoviePy\nDESCRIPTION: Demonstrates how to play multiple video clips sequentially by concatenating them into a single clip. The final_clip will play the clips in the order they are provided in the list.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, concatenate_videoclips\n\nclip1 = VideoFileClip(\"myvideo.mp4\")\nclip2 = VideoFileClip(\"myvideo2.mp4\").subclip(50,60)\nclip3 = VideoFileClip(\"myvideo3.mp4\")\n\nfinal_clip = concatenate_videoclips([clip1,clip2,clip3])\nfinal_clip.write_videofile(\"my_concatenation.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Basic MoviePy Video Editing Example in Python\nDESCRIPTION: This code snippet demonstrates loading a video, lowering its volume, adding a title for the first 10 seconds, and writing the result to a new file. It showcases the basic workflow of a typical MoviePy script.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/quick_presentation.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import *\n\n# Load the video file\nvideo = VideoFileClip(\"myHolidays.mp4\")\n\n# Lower the volume\nvideo = video.volumex(0.8)\n\n# Generate a text clip\ntxt_clip = TextClip(\"My Holidays 2013\", fontsize=70, color='white')\ntxt_clip = txt_clip.set_pos('center').set_duration(10)\n\n# Overlay the text clip on the video\nvideo = CompositeVideoClip([video, txt_clip])\n\n# Write the result to a file\nvideo.write_videofile(\"myHolidays_edited.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Video with Text Overlay using MoviePy in Python\nDESCRIPTION: This snippet demonstrates how to use MoviePy to load a video file, select a subclip, add a text overlay, and write the result to a new file. It showcases basic video editing operations like clipping, volume adjustment, and compositing.\nSOURCE: https://github.com/zulko/moviepy/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy import VideoFileClip, TextClip, CompositeVideoClip\n\n# Load file example.mp4 and keep only the subclip from 00:00:10 to 00:00:20\n# Reduce the audio volume to 80% of its original volume\n\nclip = (\n    VideoFileClip(\"long_examples/example2.mp4\")\n    .subclipped(10, 20)\n    .with_volume_scaled(0.8)\n)\n\n# Generate a text clip. You can customize the font, color, etc.\ntxt_clip = TextClip(\n    font=\"Arial.ttf\",\n    text=\"Hello there!\",\n    font_size=70,\n    color='white'\n).with_duration(10).with_position('center')\n\n# Overlay the text clip on the first video clip\nfinal_video = CompositeVideoClip([clip, txt_clip])\nfinal_video.write_videofile(\"result.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Setting custom binary paths in Python\nDESCRIPTION: Code to define custom paths to FFmpeg and FFplay binaries by setting environment variables in Python before importing MoviePy. This allows using specific versions of these tools.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/install.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"FFMPEG_BINARY\"] = \"/path/to/custom/ffmpeg\"\nos.environ[\"FFPLAY_BINARY\"] = \"/path/to/custom/ffplay\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Final Video in MoviePy\nDESCRIPTION: Shows how to render the final composite video clip to a file with specified codec and quality settings using MoviePy's write_videofile method.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Render the final video\nfinal_clip.write_videofile(\n    \"final_trailer.mp4\",\n    fps=24,  # frames per second\n    codec=\"libx264\",  # use H.264 codec\n    audio_codec=\"aac\",  # use AAC codec for audio\n    threads=8,  # use 8 threads for faster rendering\n    preset=\"medium\",  # H.264 preset (slower = better compression)\n    bitrate=\"8000k\"  # target bitrate\n)\n```\n\n----------------------------------------\n\nTITLE: Compositing Audio Clips with MoviePy\nDESCRIPTION: Demonstrates how to create custom audio tracks by compositing multiple audio clips. This allows for mixing different audio sources together or playing them sequentially.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import AudioFileClip, CompositeAudioClip, concatenate_audioclips\n\n# Mix sounds together\naudio1 = AudioFileClip(\"sound1.ogg\")\naudio2 = AudioFileClip(\"sound2.ogg\")\n\n# Place sounds one after the other\naudio_concat = concatenate_audioclips([audio1, audio2])\n\n# Place sounds on top of each other\naudio_composite = CompositeAudioClip([audio1.with_start(1),\n                                      audio2.with_start(5)])\n```\n\n----------------------------------------\n\nTITLE: Basic MoviePy Clip Types Overview\nDESCRIPTION: This snippet demonstrates the basic clip types available in MoviePy, including VideoFileClip, AudioFileClip, ImageClip, TextClip, and others. It provides a comprehensive overview of how to load various types of media resources.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Load a video from a file\nvideo = VideoFileClip(\"path/to/video.mp4\")\n\n# Load an audio from a file\naudio = AudioFileClip(\"path/to/audio.mp3\")\n\n# Load an image as a video clip\nlogo = ImageClip(\"path/to/logo.png\")\n\n# Create a text clip\ntxt = TextClip(\"MoviePy\", fontsize=70, color=\"white\")\n\n# Create a uniform color clip\ncolor = ColorClip((720, 460), color=(0, 0, 255))\n\n# Create a color gradient as a video clip\ngradient = ColorGradientClip(size=(500, 500), start_position=\"top\", end_position=\"bottom\", \n                              start_color=\"#33DD44\", end_color=\"#FF2299\")\n\n# Create a solid color clip, but matte (alias for ColorClip)\ncolorClip = ColorClip(size=(1000, 1000), color=(0, 0, 255), duration=10)\n\n# Create a clip made from a sequence of images\nimageSequence = ImageSequenceClip([\"i1.jpeg\", \"i2.jpeg\", \"i3.jpeg\"], fps=24)\n```\n\n----------------------------------------\n\nTITLE: Previewing a Video Clip with MoviePy\nDESCRIPTION: This snippet demonstrates how to preview a video clip using MoviePy's preview function. It requires ffplay to be installed and accessible.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\").subclip(50,60)\nclip.preview()\n```\n\n----------------------------------------\n\nTITLE: Compositing Video Clips\nDESCRIPTION: Combines all clips into a final composition using CompositeVideoClip\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfinal = CompositeVideoClip([\nintro_clip,\nbird_clip,\nrabbit_clip,\nrodents_clip,\nfinale_clip,\ntitle,\nsubtitle,\nlogo,\nmoviepy_logo\n])\n\n# Preview the final composition\nfinal.preview()\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Sepia Filter in MoviePy\nDESCRIPTION: Demonstrates creating and applying a custom sepia filter to video frames using numpy array transformations and MoviePy's image_transform method.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef apply_sepia_filter(frame):\n    sepia_matrix = np.array([\n        [0.393, 0.769, 0.189],\n        [0.349, 0.686, 0.168],\n        [0.272, 0.534, 0.131]\n    ])\n    # Reshape the frame to a 2D array of RGB pixels\n    pixels = frame.reshape(-1, 3)\n    # Apply the sepia transformation\n    sepia_pixels = np.dot(pixels, sepia_matrix.T)\n    # Ensure values stay within valid range\n    sepia_pixels = np.clip(sepia_pixels, 0, 255)\n    # Reshape back to original frame shape\n    return sepia_pixels.reshape(frame.shape)\n\nrambo_clip = rambo_clip.image_transform(apply_sepia_filter)\n```\n\n----------------------------------------\n\nTITLE: Adding Transitions and Effects in MoviePy\nDESCRIPTION: Shows how to apply video and audio effects including fade transitions and speed modifications using MoviePy's vfx system.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfinal_clip = CompositeVideoClip([\n    # Main clips with effects\n    big_buck_clip.with_position((0, 0)).with_effects([\n        vfx.fade_in(FADE_DURATION),\n        vfx.fade_out(FADE_DURATION),\n        vfx.fadeout_to_black(FADE_DURATION)\n    ]),\n    rambo_clip.with_position((0, 0)).with_effects([\n        vfx.fadein_from_black(FADE_DURATION),\n        vfx.speedx(0.5),  # Slow down the clip\n        vfx.fade_out(FADE_DURATION)\n    ]),\n    nature_clip.with_position((0, 0)).with_effects([\n        vfx.fade_in(FADE_DURATION),\n        vfx.fade_out(FADE_DURATION)\n    ])\n], size=CLIP_SIZE)\n```\n\n----------------------------------------\n\nTITLE: Positioning Video Clips in MoviePy\nDESCRIPTION: Demonstrates how to position and time video clips in a composite video using MoviePy's with_position method. Shows clip organization with proper timing and positioning.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfinal_clip = CompositeVideoClip([\n    # Our main video clips\n    big_buck_clip.with_position((0, 0)),\n    rambo_clip.with_position((0, 0)),\n    nature_clip.with_position((0, 0)),\n    # Our two texts\n    text_clip.with_position((\"center\", \"center\")),\n    title_clip.with_position((\"center\", \"center\")),\n    # Our two logo images\n    logo_clip.with_position((\"right\", \"bottom\")),\n    logo_clip_2.with_position((\"right\", \"bottom\"))\n], size=CLIP_SIZE)\n```\n\n----------------------------------------\n\nTITLE: Loading Video Files with VideoFileClip in MoviePy\nDESCRIPTION: Shows how to load video files using VideoFileClip, including setting subclip times, audio handling, and resolution adjustments. VideoFileClip is one of the most commonly used clip types in MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\n# Load a video and play the first 5 seconds\nvideo = VideoFileClip(\"myHolidays.mp4\").subclip(0, 5)\n\n# Load a video without audio\nvideo_without_audio = VideoFileClip(\"myHolidays.mp4\", audio=False)\n\n# Reduce clip size / resolution\nsmall_clip = VideoFileClip(\"myHolidays.mp4\", resize_algorithm=\"fast\").resize(0.3)\n\n# Select a region (for instance to crop the credits)\nclip = VideoFileClip(\"myHolidays.mp4\").crop(x1=50, y1=60, x2=460, y2=275)\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated GIF from a Video Clip with MoviePy\nDESCRIPTION: This snippet shows how to create an animated GIF from a video clip using MoviePy's write_gif method. It includes options for setting the fps.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\").subclip(0,3)\nclip.write_gif(\"myHolidays.gif\", fps=15)\n```\n\n----------------------------------------\n\nTITLE: Creating Image Sequence Clips in MoviePy\nDESCRIPTION: Demonstrates how to create a video clip from a sequence of images using ImageSequenceClip. Shows different ways to specify image sources including file paths, folder paths, and numpy arrays.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import ImageSequenceClip\n\n# from a list of image filenames\nclip = ImageSequenceClip([\"photo1.jpg\", \"photo2.jpg\", \"photo3.jpg\"], fps=24)\n\n# from a folder with image filenames sorted\nclip = ImageSequenceClip(\"my_folder/\", fps=24)\n\n# from a folder with only jpg files\nclip = ImageSequenceClip(\"my_folder/*.jpg\", fps=24)\n\n# from numpy arrays\nimport numpy as np\nframes = [np.random.rand(540, 960, 3) for i in range(30)]\nclip = ImageSequenceClip(frames, fps=24)\n```\n\n----------------------------------------\n\nTITLE: Applying Effects to Clips in MoviePy\nDESCRIPTION: Demonstrates how to apply built-in effects to video clips using both the with_effects method and the dynamically added methods. Effects are applied to frames during rendering rather than immediately.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\nfrom moviepy import vfx, afx\n\nclip = VideoFileClip(\"video.mp4\")\n\n# Either use effects directly as method of the clip\nmodified_clip1 = clip.fx(vfx.resize, 0.5)  # Resize to 50%\nmodified_clip2 = clip.fx(vfx.colorx, 0.8)   # Reduce color intensity by 20%\n\n# Or use the global with_effect method\nmodified_clip3 = clip.with_effects([\n    vfx.mirror_x(),\n    vfx.colorx(0.8),\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Updatable Video Clips with UpdatedVideoClip in MoviePy\nDESCRIPTION: Demonstrates how to use UpdatedVideoClip for advanced animation with state that needs to be updated between frames. This example simulates bouncing particles using a physics world that updates in time.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom PIL import Image, ImageDraw\nfrom moviepy.editor import UpdatedVideoClip\n\n# A simple physics world with bouncing particles\nclass ParticleWorld:\n    def __init__(self):\n        self.clip_t = 0.0  # Current world time\n        self.particles = [(np.random.randint(50, 450), np.random.randint(50, 450), \n                           np.random.randint(-5, 5), np.random.randint(-5, 5)) \n                          for _ in range(20)]\n        \n    def update(self):\n        dt = 1/30.0  # Time step\n        # Update each particle (x, y, vx, vy)\n        for i, (x, y, vx, vy) in enumerate(self.particles):\n            # Apply velocity\n            x += vx\n            y += vy\n            \n            # Bounce off walls\n            if x < 0 or x > 500:\n                vx = -vx\n            if y < 0 or y > 500:\n                vy = -vy\n                \n            self.particles[i] = (x, y, vx, vy)\n        \n        # Increment world time\n        self.clip_t += dt\n        \n    def to_frame(self):\n        # Render the current state\n        img = Image.new('RGB', (500, 500), color=(0, 0, 0))\n        draw = ImageDraw.Draw(img)\n        \n        for x, y, _, _ in self.particles:\n            draw.ellipse([(x-5, y-5), (x+5, y+5)], fill=(255, 255, 255))\n            \n        return np.array(img)\n\n# Create a world and a clip based on it\nworld = ParticleWorld()\nclip = UpdatedVideoClip(world, duration=5)\nclip.write_videofile(\"particles.mp4\", fps=30)\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Video Compositions with CompositeVideoClip\nDESCRIPTION: Demonstrates how to layer multiple clips on top of each other using CompositeVideoClip. The clips are stacked with the last clip in the list appearing on top, useful for creating overlays and picture-in-picture effects.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, CompositeVideoClip\n\nclip1 = VideoFileClip(\"myvideo.mp4\")\nclip2 = VideoFileClip(\"myvideo2.mp4\")\nclip3 = VideoFileClip(\"myvideo3.mp4\")\n\nfinal_clip = CompositeVideoClip([clip1, clip2, clip3])\nfinal_clip.write_videofile(\"my_composition.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Proper Resource Management with Clips in MoviePy\nDESCRIPTION: Demonstrates how to properly close clips in MoviePy to release resources, particularly important for complex applications and when running on Windows. Shows both manual closing and using context managers with the 'with' statement.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Method 1: Close each clip manually when you're done with it\nvideo = VideoFileClip(\"video.mp4\")\nclip = video.subclip(10, 20)\n# ... do stuff with video and clip ...\nvideo.close()\n# clip is also closed because it was derived from video\n\n# Method 2: Use a with statement (recommended)\nwith VideoFileClip(\"video.mp4\") as video:\n    # clip will be automatically closed when the block ends\n    clip = video.subclip(10, 20)\n    # ... do something with clip ...\n# Outside the block, both video and clip are closed\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Driven Video Clips with DataVideoClip in MoviePy\nDESCRIPTION: Shows how to use DataVideoClip to create a video clip by iterating over a dataset and generating frames from data. This example creates a series of circles with different colors and positions based on a predefined dataset.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom PIL import Image, ImageDraw\nfrom moviepy.editor import DataVideoClip\n\n# List of 20 positions - our dataset\ndata = [(x, y, r, g, b) for x, y, r, g, b in zip(\n    np.random.randint(0, 400, 20),  # x positions\n    np.random.randint(0, 400, 20),  # y positions\n    np.random.randint(0, 255, 20),  # red\n    np.random.randint(0, 255, 20),  # green\n    np.random.randint(0, 255, 20),  # blue\n)]\n\n# Function to transform data to a frame\ndef make_frame(circle_data):\n    x, y, r, g, b = circle_data\n    img = Image.new('RGB', (500, 500), color=(0, 0, 0))\n    draw = ImageDraw.Draw(img)\n    draw.ellipse([(x, y), (x+100, y+100)], fill=(r, g, b))\n    return np.array(img)\n\n# Create and save the clip\nclip = DataVideoClip(data, make_frame, fps=5, duration=4)\nclip.write_videofile(\"circles.mp4\", codec=\"mpeg4\")\n```\n\n----------------------------------------\n\nTITLE: Controlling Clip Start and End Times in Compositions\nDESCRIPTION: Shows how to control when clips start and stop playing in a composition. The example plays clip1 for the first 6 seconds, clip2 starting at 5 seconds, and clip3 at the end of clip2.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, CompositeVideoClip\n\nclip1 = VideoFileClip(\"myvideo.mp4\").with_end(6) # ends at t=6s\nclip2 = VideoFileClip(\"myvideo2.mp4\").with_start(5) # start at t=5s\nclip3 = VideoFileClip(\"myvideo3.mp4\").with_start(clip2.end)\n\nfinal_clip = CompositeVideoClip([clip1, clip2, clip3])\nfinal_clip.write_videofile(\"my_composition.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom VideoClip with Frame Generation in MoviePy\nDESCRIPTION: Example of creating a VideoClip with a custom frame generation function that produces a pulsating red circle using the Pillow library. This demonstrates how to create dynamic, animated clips from scratch with programmable content.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom PIL import Image, ImageDraw\nfrom moviepy.editor import VideoClip\n\n# Create a custom clip using PIL/Pillow for drawing\ndef make_frame(t):\n    # Create a black background\n    img = Image.new('RGB', (500, 500), color=(0, 0, 0))\n    draw = ImageDraw.Draw(img)\n    \n    # The circle's radius pulsates with time\n    circlesize = int(100 + 50*np.sin(5*t))\n    \n    # Draw the circle\n    draw.ellipse([(250-circlesize, 250-circlesize),\n                  (250+circlesize, 250+circlesize)],\n                 fill=(255, 0, 0))\n    \n    # Transform into numpy array for moviepy\n    return np.array(img)\n\n# Create and preview a 2 second clip\nclip = VideoClip(make_frame, duration=2)\nclip.write_gif(\"circle.gif\", fps=15)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Progress Bar Effect in MoviePy\nDESCRIPTION: Example implementation of a custom progress bar effect that inherits from MoviePy's Effect class. Shows how to initialize the effect with custom parameters and implement the apply method to modify video frames. The effect adds a progress bar to video clips with configurable color and height.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/create_effects.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom moviepy.Effect import Effect\nfrom moviepy.Clip import Clip\nimport numpy as np\n\n@dataclass\nclass ProgressBarEffect(Effect):\n    height: int = 10\n    color: tuple = (255, 0, 0)\n\n    def apply(self, clip: Clip) -> Clip:\n        total_duration = clip.duration\n\n        def _progress_bar_filter(frame, t):\n            # Get image dimensions\n            h, w = frame.shape[:2]\n            \n            # Create progress bar\n            progress = int(w * t / total_duration)\n            \n            # Add bar to frame\n            frame[-self.height:, :progress] = self.color\n            \n            return frame\n            \n        return clip.image_transform(_progress_bar_filter)\n```\n\n----------------------------------------\n\nTITLE: Juxtaposing Multiple Video Clips with MoviePy\nDESCRIPTION: Shows how to place multiple clips side by side in a grid pattern using clip_array. This creates a composite clip that displays all the input clips simultaneously in the specified arrangement.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, clips_array\n\nclip1 = VideoFileClip(\"myvideo.mp4\").margin(10) # add 10px contour\nclip2 = VideoFileClip(\"myvideo2.mp4\").margin(10)\nclip3 = VideoFileClip(\"myvideo3.mp4\").margin(10)\nclip4 = VideoFileClip(\"myvideo4.mp4\").margin(10)\n\nfinal_clip = clips_array([[clip1, clip2],\n                          [clip3, clip4]])\n\nfinal_clip.resize(width=480).write_videofile(\"my_stack.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Video Subclips\nDESCRIPTION: Creates multiple subclips from the main video by specifying start and end times\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nintro_clip = video.subclip(\"00:00:00\", \"00:15:00\")\nbird_clip = video.subclip(\"00:25:00\", \"00:31:00\")\nrabbit_clip = video.subclip(\"00:31:00\", \"00:38:00\")\nrodents_clip = video.subclip(\"00:48:00\", \"01:00:00\")\nfinale_clip = video.subclip(\"08:38:00\", \"08:45:00\")\n```\n\n----------------------------------------\n\nTITLE: Positioning Clips in Video Compositions\nDESCRIPTION: Demonstrates different ways to position clips within a composition. Positions can be specified as coordinates, percentages, or using predefined strings like 'center' or 'top'.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, CompositeVideoClip\n\nclip1 = VideoFileClip(\"myvideo.mp4\")\nclip2 = VideoFileClip(\"myvideo2.mp4\").with_position((45,150))\nclip3 = VideoFileClip(\"myvideo3.mp4\").with_position(\"center\")\nclip4 = VideoFileClip(\"myvideo4.mp4\").with_position((0.4,0.7), relative=True) # 40% from the left, 70% from the top\n\nfinal_clip = CompositeVideoClip([clip1, clip2, clip3, clip4])\nfinal_clip.write_videofile(\"my_composition.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Creating Static Image Clips in MoviePy\nDESCRIPTION: Shows how to create ImageClip instances from image files or numpy arrays. ImageClip is used for static images that can be incorporated into videos, with options to set duration and position.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import ImageClip\nimport numpy as np\n\n# From an image file\nlogo = ImageClip(\"logo.png\")\n\n# From a numpy array (for generated images or processing)\n# Here we create a gradient image\nw, h = 400, 300\nimg = np.dstack(3*[np.linspace(0, 255, w*h).reshape(h, w)])\ngrad = ImageClip(img.astype('uint8'))\n\n# Set duration\nlogo = ImageClip(\"logo.png\", duration=5)  # will be displayed for 5 seconds\n\n# Set position when used as an overlay\nlogo = ImageClip(\"logo.png\").set_position((\"center\", \"bottom\"))\n```\n\n----------------------------------------\n\nTITLE: Using transform for Time-Dependent Visual Effects\nDESCRIPTION: Shows how to use the transform method to create effects that depend on both frame content and time. The example creates a vertical scrolling effect with constant height.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nmy_clip = VideoFileClip(\"my_video.mp4\")\n\n# Scrolls down the clip with a constant height of 360 pixels\nmodified_clip = my_clip.transform(\n    lambda get_frame, t: get_frame(t)[int(t):int(t)+360]\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clip Copy Behavior in MoviePy\nDESCRIPTION: This example illustrates how modifications in MoviePy don't alter the original clip but instead return a new modified copy. This is an important concept as it's a common source of bugs for newcomers.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclip = VideoFileClip(\"video.mp4\")\n\n# Note that clip_without_sound is a NEW clip, and clip still has its sound\nclip_without_sound = clip.without_audio()\n\n# Similarly, clip1 and clip2 are new clips, not linked to each other\nclip1 = clip.subclip(0, 5)\nclip2 = clip.subclip(5, 10)\n\n# clip1.duration is 5, but clip.duration hasn't changed and is still the duration of the whole movie\nprint(clip.duration)  # duration of the whole movie\nprint(clip1.duration)  # 5\n```\n\n----------------------------------------\n\nTITLE: Modifying Clip Appearance with image_transform\nDESCRIPTION: Demonstrates how to use image_transform to modify the visual appearance of frames in a clip. The example swaps the green and blue color channels of each frame.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nmy_clip = VideoFileClip(\"my_video.mp4\")\n\n# Inverts blue and green\nmodified_clip1 = my_clip.image_transform(\n    lambda frame: frame[:,:,[0,2,1]]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mask Clips in MoviePy\nDESCRIPTION: Demonstrates how to create and attach mask clips to video clips for transparency effects. Shows loading a PNG as a mask and attaching it to a video clip.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclip = VideoFileClip(\"video.mp4\")\nmask = ImageClip(\"mask.png\", ismask=True)\nfinal_clip = clip.with_mask(mask)\n```\n\n----------------------------------------\n\nTITLE: Modifying Clip Duration\nDESCRIPTION: Shows how to remove a section from a video clip using with_section_cut_out method\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrodents_clip = rodents_clip.with_section_cut_out(\"00:06:00\", \"00:10:00\")\n\n# Preview the modified clip\nrodents_clip.preview()\n```\n\n----------------------------------------\n\nTITLE: Modifying Clip Timing with time_transform\nDESCRIPTION: Shows how to use the time_transform method to change the timeline of a clip by applying custom time filters. Examples include speeding up playback and creating time oscillation effects.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\nimport numpy as np\n\nmy_clip = VideoFileClip(\"my_video.mp4\")\n\n# Triple the speed of the clip\nmodified_clip1 = my_clip.time_transform(lambda t: 3*t)\n\n# Makes the clip play the first two seconds in an infinite loop\n# with a sinusoidal oscillation.\nmodified_clip2 = my_clip.time_transform(\n    lambda t: 1+np.sin(t)  # oscillates between 0 and 2\n)\n```\n\n----------------------------------------\n\nTITLE: Executing MoviePy Scripts in Docker - Starting New Container Session\nDESCRIPTION: Commands to start a new MoviePy container session and run a script within it.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/docker.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it moviepy bash\npython myscript.py\n```\n\n----------------------------------------\n\nTITLE: Using with_* Methods to Modify Clips\nDESCRIPTION: Example of using MoviePy's with_* methods to modify clip properties. These methods return a new clip with the modified properties while leaving the original unchanged.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/modifying.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"my_video.mp4\")\n\n# Modify basic properties of the clip\nmodified_clip = (clip.without_audio()\n                     .with_duration(15)\n                     .with_fps(15)\n                     .with_start(5))\n```\n\n----------------------------------------\n\nTITLE: Setting Duration and Saving a Video Clip with MoviePy\nDESCRIPTION: This snippet shows how to manually set the duration of a clip before saving it to a file, which is necessary for clips with infinite duration like ImageClips.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import ImageClip\n\nclip = ImageClip(\"my_picture.png\").with_duration(10)\nclip.write_videofile(\"my_video.mp4\", fps=24)\n```\n\n----------------------------------------\n\nTITLE: Importing ImageSequenceClip Class in Python\nDESCRIPTION: This code snippet shows how to import the ImageSequenceClip class from the moviepy.video.io.ImageSequenceClip module. It is used to create video clips from sequences of images.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ImageSequenceClip.ImageSequenceClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.io.ImageSequenceClip import ImageSequenceClip\n```\n\n----------------------------------------\n\nTITLE: Saving a Video Clip to a File with MoviePy\nDESCRIPTION: This code demonstrates how to save a video clip to a file using MoviePy's write_videofile method. It includes options for setting the fps and codec.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\").subclip(50,60)\nclip.write_videofile(\"myHolidays_edit.mp4\", fps=24, codec='libx264')\n```\n\n----------------------------------------\n\nTITLE: Verifying binary detection in MoviePy\nDESCRIPTION: Python code to verify if MoviePy can successfully find the FFmpeg and FFplay binaries. This is useful for troubleshooting installation issues.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/install.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.config import check\ncheck()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Single Frame from a Video Clip with MoviePy\nDESCRIPTION: This code shows how to display a single frame from a video clip at a specific time using MoviePy's show function. It uses pillow's Image.show function.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\")\nclip.show(t=2, interactive=True)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for MoviePy Subtitles Module\nDESCRIPTION: This RST file documents the moviepy.video.tools.subtitles module, which is part of the MoviePy library. It uses automodule directives to generate documentation for the SubtitlesClip class and file_to_subtitles function.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.subtitles.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.tools.subtitles\n=============================\n\n\n.. automodule:: moviepy.video.tools.subtitles\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      SubtitlesClip\n   \n   \n\n\n   \n   \n   .. rubric:: Functions\n\n   .. autosummary::\n      :toctree:\n   \n      file_to_subtitles\n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for SubtitlesClip Class\nDESCRIPTION: ReStructuredText markup that defines the documentation for the SubtitlesClip class in the moviepy.video.tools.subtitles module. It includes a comment about using a custom class for complete documentation and sets up the autoclass directive to document all members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.subtitles.SubtitlesClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.tools.subtitles.SubtitlesClip\n===========================================\n\n.. currentmodule:: moviepy.video.tools.subtitles\n\n.. autoclass:: SubtitlesClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Loading Video File with MoviePy\nDESCRIPTION: Imports required MoviePy modules and loads the main video file into the program\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import *\n\n# Load the video file\nvideo = VideoFileClip(\"big_buck_bunny.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Importing MoviePy v2.0 Modules\nDESCRIPTION: In MoviePy v2.0, the moviepy.editor namespace no longer exists. This snippet demonstrates how to import modules in the new version, either importing everything or specific components as needed.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/updating_to_v2.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy import * # Simple and nice, the __all__ is set in moviepy so only useful things will be loaded\nfrom moviepy import VideoFileClip # You can also import only the things you really need\n```\n\n----------------------------------------\n\nTITLE: Importing MoviePy Audio Effects Module Structure\nDESCRIPTION: Module reference structure showing the available audio effects in MoviePy's audio.fx package. Includes modules for audio delay, fading, looping, normalization, and volume control operations.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.fx.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmoviepy.audio.fx.AudioDelay\nmoviepy.audio.fx.AudioFadeIn\nmoviepy.audio.fx.AudioFadeOut\nmoviepy.audio.fx.AudioLoop\nmoviepy.audio.fx.AudioNormalize\nmoviepy.audio.fx.MultiplyStereoVolume\nmoviepy.audio.fx.MultiplyVolume\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Files with AudioFileClip\nDESCRIPTION: Demonstrates loading an external audio file using AudioFileClip class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import AudioFileClip\n\naudioClip = AudioFileClip(\"audio.mp3\")\n```\n\n----------------------------------------\n\nTITLE: Documenting BitmapClip Class in moviepy.video.VideoClip Module\nDESCRIPTION: This code snippet uses Sphinx documentation syntax to generate documentation for the BitmapClip class. It sets the current module and uses the autoclass directive to automatically document all members of the class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.BitmapClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: BitmapClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Creating Text and Image Overlays\nDESCRIPTION: Creates text and image clips for overlays using TextClip and ImageClip\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create text clips\ntitle = TextClip(\"Big Buck Bunny\", font=\"Amiri-Bold\", fontsize=70, color=\"white\")\nsubtitle = TextClip(\"A short film by the Blender Institute\", font=\"Amiri-Regular\", fontsize=50, color=\"white\")\n\n# Create logo clips\nlogo = ImageClip(\"bbb_logo.png\").resized(width=400)\nmoviepy_logo = ImageClip(\"made_with_moviepy.png\").resized(width=200)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using convert_path_to_string Decorator in Python\nDESCRIPTION: This snippet demonstrates how to import and use the convert_path_to_string decorator from the moviepy.decorators module. The decorator is likely used to ensure that path arguments in MoviePy functions are converted to string format for consistent handling.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.convert_path_to_string.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.decorators import convert_path_to_string\n\n@convert_path_to_string\ndef some_function(path):\n    # Function implementation\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Custom AudioClip in MoviePy\nDESCRIPTION: Shows how to create a custom AudioClip by defining a frame function that generates audio data at each timestamp.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.audio.AudioClip import AudioClip\nimport numpy as np\n\ndef make_frame(t):\n    # Return a numpy array of size 1 representing a simple sound\n    return np.array([0.5 * np.sin(440 * 2 * np.pi * t)])\n\nclip = AudioClip(make_frame, duration=2)\n```\n\n----------------------------------------\n\nTITLE: Importing MoviePy Display Module in Python\nDESCRIPTION: This snippet shows how to import the 'display_in_notebook' module from MoviePy's video.io package. It's used to enable video display functionality in Jupyter notebooks.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.display_in_notebook.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: moviepy.video.io.display_in_notebook\n```\n\n----------------------------------------\n\nTITLE: Installing MoviePy for Development in Bash\nDESCRIPTION: Command for installing MoviePy in development mode with all optional dependencies for documentation, testing, and linting. The '-e' flag allows changes to the code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e \".[optional,doc,test,lint]\"\n```\n\n----------------------------------------\n\nTITLE: Saving a Single Frame from a Video Clip with MoviePy\nDESCRIPTION: This code demonstrates how to save a single frame from a video clip at a specific time using MoviePy's save_frame method.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\")\nclip.save_frame(\"frame.png\", t=2)\n```\n\n----------------------------------------\n\nTITLE: Outplace Decorator in MoviePy\nDESCRIPTION: An autofunction reference to the outplace decorator in MoviePy. This decorator transforms functions that modify clips in-place to instead return a copy of the clip with the modifications applied.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.outplace.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: outplace\n```\n\n----------------------------------------\n\nTITLE: Adding Transition Effects to Video Clips\nDESCRIPTION: Shows how to add a crossfade transition effect when a clip starts playing. This creates a smooth transition from one clip to another using the crossfadein function.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/compositing.rst#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip, CompositeVideoClip\nfrom moviepy.video.compositing.transitions import crossfadein\n\nclip1 = VideoFileClip(\"myvideo.mp4\")\n# clip2 appears with a 1-second cross-fade\nclip2 = VideoFileClip(\"myvideo2.mp4\")\nclip2 = crossfadein(clip2, 1).with_start(5)  # start at t=5s\n\nfinal_clip = CompositeVideoClip([clip1, clip2])\nfinal_clip.write_videofile(\"my_transition.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for MoviePy Blink Effect\nDESCRIPTION: ReStructuredText directive configuration for documenting the MoviePy Blink video effect module. Uses automodule directive with inherited-members flag to ensure complete documentation coverage.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.Blink.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.fx.Blink\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for FFPLAY_VideoPreviewer\nDESCRIPTION: ReStructuredText documentation configuration for the FFPLAY_VideoPreviewer class, setting up autoclass documentation with member inclusion and module context.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffplay_previewer.FFPLAY_VideoPreviewer.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.video.io.ffplay_previewer\n\n.. autoclass:: FFPLAY_VideoPreviewer\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Displaying Video Clips in Jupyter Notebook with MoviePy\nDESCRIPTION: This snippet demonstrates how to display video clips, images, and sounds in a Jupyter Notebook using MoviePy's display_in_notebook function.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import *\nfrom moviepy.video.io.display_in_notebook import display_in_notebook\n\nclip = VideoFileClip(\"myHolidays.mp4\").subclip(0,3)\ndisplay_in_notebook(clip)\n\nclip.audio.write_audiofile(\"myHolidays.mp3\")\ndisplay_in_notebook(\"myHolidays.mp3\")\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for MoviePy VideoFileClip Class\nDESCRIPTION: This reStructuredText (reST) snippet defines the documentation structure for the VideoFileClip class in MoviePy. It uses the autoclass directive to automatically generate documentation for all members of the class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.VideoFileClip.VideoFileClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.io.VideoFileClip.VideoFileClip\n============================================\n\n.. currentmodule:: moviepy.video.io.VideoFileClip\n\n.. autoclass:: VideoFileClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: FFmpeg Functions Reference List\nDESCRIPTION: Function reference list showing the available FFmpeg operations in MoviePy including audio extraction, subclip extraction, video-audio merging, resizing, and video stabilization.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_tools.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nffmpeg_extract_audio\nffmpeg_extract_subclip\nffmpeg_merge_video_audio\nffmpeg_resize\nffmpeg_stabilize_video\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoModule for InvertColors in MoviePy (reStructuredText)\nDESCRIPTION: Sets up the automodule directive to document the moviepy.video.fx.InvertColors module, including all inherited members. This ensures comprehensive documentation of all functions and classes within the module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.InvertColors.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: moviepy.video.fx.InvertColors\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing ffmpeg_audiowrite Function in Python\nDESCRIPTION: This snippet demonstrates how to import the ffmpeg_audiowrite function from the moviepy.audio.io.ffmpeg_audiowriter module. This function is likely used for writing audio data to a file using FFMPEG.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.ffmpeg_audiowriter.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.audio.io.ffmpeg_audiowriter import ffmpeg_audiowrite\n```\n\n----------------------------------------\n\nTITLE: Previewing Video Clips\nDESCRIPTION: Demonstrates how to preview video clips during editing using preview() function\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Preview the clips\nintro_clip.preview()\nbird_clip.preview()\nrabbit_clip.preview()\nrodents_clip.preview()\nfinale_clip.preview()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy's CompositeAudioClip Class in RST\nDESCRIPTION: This RST (reStructuredText) code configures Sphinx documentation for the CompositeAudioClip class in MoviePy's audio module. It sets the current module and uses the autoclass directive to generate comprehensive documentation for the class and all its member functions.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.AudioClip.CompositeAudioClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.audio.AudioClip.CompositeAudioClip\n==========================================\n\n.. currentmodule:: moviepy.audio.AudioClip\n\n.. autoclass:: CompositeAudioClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Importing TextClip from moviepy.video.VideoClip\nDESCRIPTION: This code snippet shows how to import the TextClip class from the moviepy.video.VideoClip module. TextClip is used for creating text overlays in video editing projects.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.TextClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.VideoClip import TextClip\n```\n\n----------------------------------------\n\nTITLE: Creating a .env file for binary paths\nDESCRIPTION: Example of a .env file that can be placed in the working directory to automatically set the paths to custom FFmpeg and FFplay binaries without modifying the Python code.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/install.rst#2025-04-18_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nFFMPEG_BINARY=/path/to/custom/ffmpeg\nFFPLAY_BINARY=/path/to/custom/ffplay\n```\n\n----------------------------------------\n\nTITLE: Documenting FFMPEG_AudioWriter Class in Python\nDESCRIPTION: This snippet demonstrates how to use Sphinx autodoc to generate documentation for the FFMPEG_AudioWriter class. It specifies the current module and uses the autoclass directive to include all members of the class in the documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.ffmpeg_audiowriter.FFMPEG_AudioWriter.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.audio.io.ffmpeg_audiowriter\n\n.. autoclass:: FFMPEG_AudioWriter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for moviepy.audio.io\nDESCRIPTION: Sphinx reST directive that automatically documents the moviepy.audio.io module with autosummary configuration for its submodules.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.audio.io\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n\n   moviepy.audio.io.AudioFileClip\n\n\n   moviepy.audio.io.ffmpeg_audiowriter\n\n\n   moviepy.audio.io.ffplay_audiopreviewer\n\n\n   moviepy.audio.io.readers\n```\n\n----------------------------------------\n\nTITLE: Creating AudioArrayClip from Numpy Array\nDESCRIPTION: Shows how to create an audio clip from a numpy array containing audio data with specified fps.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/loading.rst#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom moviepy.audio.AudioClip import AudioArrayClip\n\narray = np.random.rand(44100,2) # 1 second stereo sound\naudioClip = AudioArrayClip(array, fps=44100)\n```\n\n----------------------------------------\n\nTITLE: Documenting clips_array Function in MoviePy's CompositeVideoClip Module\nDESCRIPTION: This snippet shows the use of Sphinx autodoc directives to generate documentation for the clips_array function. It sets the current module context and uses autofunction to automatically document the function.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.compositing.CompositeVideoClip.clips_array.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.video.compositing.CompositeVideoClip\n\n.. autofunction:: clips_array\n```\n\n----------------------------------------\n\nTITLE: Setting Clip Timing\nDESCRIPTION: Configures the start time and duration for each clip in the composition\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntitle = title.with_duration(3).with_start(1)\nsubtitle = subtitle.with_duration(3).with_start(4)\nlogo = logo.with_duration(2).with_start(7)\nmoviepy_logo = moviepy_logo.with_end(end_time=10)\n```\n\n----------------------------------------\n\nTITLE: Installing MoviePy with pip\nDESCRIPTION: Command to install the MoviePy library using pip package manager\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/moviepy_10_minutes.rst#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install moviepy\n```\n\n----------------------------------------\n\nTITLE: Importing FFmpegInfosParser Class from moviepy.video.io.ffmpeg_reader\nDESCRIPTION: This snippet shows how to import the FFmpegInfosParser class from the moviepy.video.io.ffmpeg_reader module. The class is used for parsing FFMPEG information in the moviepy library.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_reader.FFmpegInfosParser.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.io.ffmpeg_reader import FFmpegInfosParser\n```\n\n----------------------------------------\n\nTITLE: Defining find_extension Function in Python for MoviePy\nDESCRIPTION: The find_extension function is part of MoviePy's tools module. It takes a filename as input and returns the file extension. If no extension is found, it returns an empty string.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.find_extension.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef find_extension(filename):\n    \"\"\"Returns the extension of a filename.\n\n    Parameters\n    ----------\n\n    filename : str\n        The filename to parse.\n\n    Returns\n    -------\n\n    str\n        The extension of the file (e.g. 'txt', 'mov', etc.) or '' if no\n        extension is found.\n    \"\"\"\n    return os.path.splitext(filename)[1].lower()[1:]\n```\n\n----------------------------------------\n\nTITLE: Exporting Video Frames as Image Sequence with MoviePy\nDESCRIPTION: This code demonstrates how to export all frames of a video clip as an image sequence using MoviePy's write_images_sequence method.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/user_guide/rendering.rst#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.editor import VideoFileClip\n\nclip = VideoFileClip(\"myHolidays.mp4\").subclip(0,5)\nclip.write_images_sequence(\"frame%03d.png\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for MoviePy Audio Normalization\nDESCRIPTION: RST configuration for automatically generating documentation for the AudioNormalize module in MoviePy. Uses Sphinx automodule directive with inherited-members flag enabled.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.fx.AudioNormalize.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.audio.fx.AudioNormalize\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for MakeLoopable effect in MoviePy\nDESCRIPTION: A Sphinx documentation directive that automatically generates API documentation for the MoviePy MakeLoopable video effect module, including all inherited members. This uses reStructuredText format for documentation generation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.MakeLoopable.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: moviepy.video.fx.MakeLoopable\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing and Using subprocess_call in MoviePy\nDESCRIPTION: This snippet demonstrates how to import and use the subprocess_call function from MoviePy's tools module. The function is used to execute system commands, likely for video processing tasks.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.subprocess_call.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.tools import subprocess_call\n\n# Example usage (hypothetical)\nsubprocess_call(['ffmpeg', '-i', 'input.mp4', 'output.mp4'])\n```\n\n----------------------------------------\n\nTITLE: Referencing close_all_clips Function in Python\nDESCRIPTION: Sphinx documentation directive for importing and referencing the close_all_clips function from the moviepy.tools module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.close_all_clips.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: moviepy.tools\n\n.. autofunction:: close_all_clips\n```\n\n----------------------------------------\n\nTITLE: Building MoviePy Docker Container\nDESCRIPTION: Instructions for building a Docker image for MoviePy from the Dockerfile in the project root directory.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/docker.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t moviepy -f Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Documenting write_gif_with_imageio Function in MoviePy\nDESCRIPTION: This snippet shows the documentation structure for the write_gif_with_imageio function in MoviePy. It uses Sphinx autodoc to generate the function's documentation from its docstring.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.gif_writers.write_gif_with_imageio.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.video.io.gif_writers\n\n.. autofunction:: write_gif_with_imageio\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for ImageClip Class in MoviePy\nDESCRIPTION: This reStructuredText snippet sets up the documentation for the ImageClip class in MoviePy's video.VideoClip module. It specifies the current module and uses autoclass to automatically generate documentation for all members of the ImageClip class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.ImageClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: ImageClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Importing no_display_available Function from MoviePy Tools\nDESCRIPTION: This snippet shows how to import the no_display_available function from the moviepy.tools module. The function is likely used to determine if a display is available for video operations.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.no_display_available.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.tools import no_display_available\n```\n\n----------------------------------------\n\nTITLE: Executing MoviePy Scripts in Docker - One-line Command with Volume Mounting\nDESCRIPTION: Command to run a MoviePy script in a new container while mounting the current directory as a volume for file access.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/docker.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -v `pwd`:/code moviepy python myscript.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for moviepy.video.fx.MasksOr\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate documentation for the moviepy.video.fx.MasksOr module. It includes inherited members to ensure comprehensive documentation coverage.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.MasksOr.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: moviepy.video.fx.MasksOr\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Declaring Display Functions in MoviePy for Python\nDESCRIPTION: This snippet lists two functions, 'display_in_notebook' and 'html_embed', which are part of the MoviePy module. These functions are used for embedding and displaying video content in Jupyter notebooks.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.display_in_notebook.rst#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndisplay_in_notebook\nhtml_embed\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Configuration for VideoFileClip Module Documentation\nDESCRIPTION: This code defines the ReStructuredText configuration for documenting the VideoFileClip module from MoviePy. It sets up the automodule and autosummary directives to generate comprehensive documentation for the VideoFileClip class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.VideoFileClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.io.VideoFileClip\n==============================\n\n\n.. automodule:: moviepy.video.io.VideoFileClip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      VideoFileClip\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Importing apply_to_audio Decorator from MoviePy\nDESCRIPTION: This code snippet demonstrates how to import the apply_to_audio decorator from the moviepy.decorators module. The apply_to_audio decorator is used to apply audio processing functions in MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.apply_to_audio.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.decorators import apply_to_audio\n```\n\n----------------------------------------\n\nTITLE: Executing MoviePy Scripts in Docker - Connecting to Running Container\nDESCRIPTION: Command to execute a custom MoviePy script in an already running Docker container.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/docker.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it moviepy python myscript.py\n```\n\n----------------------------------------\n\nTITLE: Importing FFMPEG_AudioWriter Class in Python\nDESCRIPTION: This snippet shows how to import the FFMPEG_AudioWriter class from the moviepy.audio.io.ffmpeg_audiowriter module. This class is likely used for writing audio files using FFMPEG.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.ffmpeg_audiowriter.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom moviepy.audio.io.ffmpeg_audiowriter import FFMPEG_AudioWriter\n```\n\n----------------------------------------\n\nTITLE: MoviePy Module Structure\nDESCRIPTION: ReStructuredText documentation showing the structure of MoviePy's video.io module, listing all available submodules.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.io\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n   moviepy.video.io.ImageSequenceClip\n   moviepy.video.io.VideoFileClip\n   moviepy.video.io.display_in_notebook\n   moviepy.video.io.ffmpeg_reader\n   moviepy.video.io.ffmpeg_tools\n   moviepy.video.io.ffmpeg_writer\n   moviepy.video.io.ffplay_previewer\n   moviepy.video.io.gif_writers\n```\n\n----------------------------------------\n\nTITLE: Importing FFMPEG_VideoReader Class in Python\nDESCRIPTION: This snippet shows how to import the FFMPEG_VideoReader class from the moviepy.video.io.ffmpeg_reader module. The class is used for reading video files using FFMPEG.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_reader.FFMPEG_VideoReader.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.io.ffmpeg_reader import FFMPEG_VideoReader\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy MultiplyVolume Module\nDESCRIPTION: This code snippet configures Sphinx to automatically generate documentation for the MultiplyVolume module in MoviePy. It uses the automodule directive to include all inherited members and functions.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.fx.MultiplyVolume.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: moviepy.audio.fx.MultiplyVolume\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Documentation for MoviePy BlackAndWhite Module\nDESCRIPTION: Sphinx/reStructuredText configuration for documenting the BlackAndWhite video effect module. Uses automodule directive to automatically generate documentation from docstrings and inherited members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.BlackAndWhite.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.BlackAndWhite\n==============================\n\n \n.. automodule:: moviepy.video.fx.BlackAndWhite\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring ReStructuredText Documentation for FFMPEG_AudioReader\nDESCRIPTION: ReStructuredText directives for generating auto-documentation of the FFMPEG_AudioReader class and its members using Sphinx.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.readers.FFMPEG_AudioReader.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.audio.io.readers\n\n.. autoclass:: FFMPEG_AudioReader\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Reference - MoviePy Decorator\nDESCRIPTION: ReStructuredText documentation directives that specify the current module and auto-document the add_mask_if_none function from MoviePy's decorators module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.add_mask_if_none.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.decorators\n\n.. autofunction:: add_mask_if_none\n```\n\n----------------------------------------\n\nTITLE: Importing MoviePy Freeze Effect Module\nDESCRIPTION: This code snippet demonstrates how to import the Freeze effect module from MoviePy's video effects package. The Freeze effect allows freezing a video frame for a specified duration.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.Freeze.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.fx.Freeze import Freeze\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for MoviePy Margin Effect\nDESCRIPTION: ReStructuredText configuration that sets up automatic documentation generation for the MoviePy Margin video effect module. Uses the automodule directive to include all inherited members in the documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.Margin.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.fx.Margin\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Configuration for DataVideoClip\nDESCRIPTION: Sphinx documentation configuration that sets up automatic documentation generation for the DataVideoClip class from the moviepy.video.VideoClip module. Uses autoclass directive to include all class members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.DataVideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: DataVideoClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting use_clip_fps_by_default Decorator in MoviePy\nDESCRIPTION: This snippet represents the documentation structure for the use_clip_fps_by_default function in MoviePy's decorators module. It uses reStructuredText format for Python documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.use_clip_fps_by_default.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.decorators\n\n.. autofunction:: use_clip_fps_by_default\n```\n\n----------------------------------------\n\nTITLE: Drawing Module Function Imports\nDESCRIPTION: List of drawing-related functions available in the MoviePy drawing tools module: blit, circle, color_gradient, and color_split\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.drawing.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nblit\ncircle\ncolor_gradient\ncolor_split\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy Clip Class\nDESCRIPTION: This snippet configures Sphinx to auto-generate documentation for the Clip class in MoviePy. It specifies the current module and uses the autoclass directive to include all members of the Clip class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.Clip.Clip.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.Clip.Clip\n=================\n\n.. currentmodule:: moviepy.Clip\n\n.. autoclass:: Clip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy MaskColor Module\nDESCRIPTION: RestructuredText configuration for documenting the MoviePy MaskColor video effect module. Uses automodule directive to automatically generate documentation including inherited members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.MaskColor.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: moviepy.video.fx.MaskColor\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for FFMPEG_VideoWriter\nDESCRIPTION: ReStructuredText configuration that sets up autodoc documentation for the FFMPEG_VideoWriter class, including all its members. Uses a custom class setup for comprehensive function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_writer.FFMPEG_VideoWriter.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.io.ffmpeg\\_writer.FFMPEG\\_VideoWriter\n===================================================\n\n.. currentmodule:: moviepy.video.io.ffmpeg_writer\n\n.. autoclass:: FFMPEG_VideoWriter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting concatenate_videoclips Function in MoviePy using reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the concatenate_videoclips function from the MoviePy video compositing module using reStructuredText directives. It sets up the documentation page with a title, module reference, and autofunction directive.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.compositing.CompositeVideoClip.concatenate_videoclips.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nmoviepy.video.compositing.CompositeVideoClip.concatenate\\_videoclips\n====================================================================\n\n.. currentmodule:: moviepy.video.compositing.CompositeVideoClip\n\n.. autofunction:: concatenate_videoclips\n```\n\n----------------------------------------\n\nTITLE: MoviePy Module Documentation Structure in RST\nDESCRIPTION: Sphinx documentation configuration that lists all main MoviePy modules using autosummary directives. It uses a custom template for complete documentation of all functions.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy\n=======\n\n\n.. automodule:: moviepy\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n\n   moviepy.Clip\n\n\n   moviepy.Effect\n\n\n   moviepy.audio\n\n\n   moviepy.config\n\n\n   moviepy.decorators\n\n\n   moviepy.tools\n\n\n   moviepy.video\n```\n\n----------------------------------------\n\nTITLE: Running MoviePy Test Suite\nDESCRIPTION: Command to run the MoviePy test suite using pytest to check for any issues before submitting a pull request.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for MoviePy AudioClip\nDESCRIPTION: RST documentation structure for the AudioClip class using Sphinx autodoc directives. Sets up the documentation module path and includes all class members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.AudioClip.AudioClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.audio.AudioClip.AudioClip\n=================================\n\n.. currentmodule:: moviepy.audio.AudioClip\n\n.. autoclass:: AudioClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting CreditsClip Class in MoviePy's credits Module\nDESCRIPTION: This snippet uses Sphinx's autosummary directive to generate documentation for the CreditsClip class within the credits module. It specifies a custom template and places the output in a separate toctree.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.credits.rst#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/class.rst\n\n   CreditsClip\n```\n\n----------------------------------------\n\nTITLE: Configuring Autosummary for MoviePy Video Compositing Module in reStructuredText\nDESCRIPTION: This code snippet sets up the documentation structure for the moviepy.video.compositing module. It includes a custom module configuration for complete function documentation and an autosummary directive for the CompositeVideoClip submodule.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.compositing.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.compositing\n=========================\n\n\n.. automodule:: moviepy.video.compositing\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n\n   moviepy.video.compositing.CompositeVideoClip\n```\n\n----------------------------------------\n\nTITLE: Defining AudioFileClip Documentation Structure in RST\nDESCRIPTION: ReStructuredText documentation structure for the AudioFileClip class, including module reference and autoclass directive for member documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.AudioFileClip.AudioFileClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.audio.io.AudioFileClip.AudioFileClip\n============================================\n\n.. currentmodule:: moviepy.audio.io.AudioFileClip\n\n.. autoclass:: AudioFileClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for CreditsClip Class\nDESCRIPTION: ReStructuredText documentation configuration for the CreditsClip class using Sphinx autoclass directive. Sets up documentation to show all class members and methods.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.credits.CreditsClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.tools.credits.CreditsClip\n=======================================\n\n.. currentmodule:: moviepy.video.tools.credits\n\n.. autoclass:: CreditsClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Installing MoviePy with Dependencies\nDESCRIPTION: Command to install MoviePy and all its dependencies within a virtual environment for development purposes.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e \".[optional,doc,test,lint]\"\n```\n\n----------------------------------------\n\nTITLE: Cloning MoviePy Fork Repository\nDESCRIPTION: Command to clone the forked MoviePy repository to the local machine. The URL should be replaced with the appropriate fork URL.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone URL_TO_YOUR_FORK\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Documentation for MoviePy Interpolator Class\nDESCRIPTION: Sets up the documentation structure for the Interpolator class from the moviepy.video.tools.interpolators module using reStructuredText formatting. The configuration includes a reference to a Stack Overflow solution for complete function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.interpolators.Interpolator.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.tools.interpolators.Interpolator\n==============================================\n\n.. currentmodule:: moviepy.video.tools.interpolators\n\n.. autoclass:: Interpolator\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: MoviePy Decorators Function List\nDESCRIPTION: List of available decorator functions in the MoviePy library for video processing tasks. These functions include mask handling, audio processing, parameter conversion, and validation decorators.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nadd_mask_if_none\napply_to_audio\napply_to_mask\naudio_video_effect\nconvert_masks_to_RGB\nconvert_parameter_to_seconds\nconvert_path_to_string\noutplace\npreprocess_args\nrequires_duration\nrequires_fps\nuse_clip_fps_by_default\n```\n\n----------------------------------------\n\nTITLE: Importing MultiplyStereoVolume Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the MultiplyStereoVolume module from MoviePy's audio effects package. It uses Python's automodule directive for comprehensive documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.fx.MultiplyStereoVolume.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: moviepy.audio.fx.MultiplyStereoVolume\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing CompositeVideoClip Module in Python\nDESCRIPTION: This snippet shows how to import the CompositeVideoClip module from the moviepy.video.compositing package. It's used to create composite video clips in MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.compositing.CompositeVideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.video.compositing.CompositeVideoClip import CompositeVideoClip, clips_array, concatenate_videoclips\n```\n\n----------------------------------------\n\nTITLE: Adding Official MoviePy Repository as Remote\nDESCRIPTION: Commands to add the official MoviePy repository as a remote named 'upstream' using either SSH or HTTPS.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream git@github.com:Zulko/moviepy.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/Zulko/moviepy.git\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for UpdatedVideoClip Class\nDESCRIPTION: ReStructuredText documentation template defining the structure and auto-documentation settings for the UpdatedVideoClip class in MoviePy's video module. Uses autoclass directive for automatic member documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.UpdatedVideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: UpdatedVideoClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Installing MoviePy Test Dependencies using pip\nDESCRIPTION: This command installs the testing dependencies for MoviePy using pip. It utilizes the extras syntax to specifically install test-related packages.\nSOURCE: https://github.com/zulko/moviepy/blob/master/tests/README.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install moviepy[test]\n```\n\n----------------------------------------\n\nTITLE: Importing AccelDecel Module in Python for MoviePy\nDESCRIPTION: This code snippet demonstrates how to import the AccelDecel module from MoviePy's video effects package. The automodule directive is used to automatically generate documentation for all functions and classes in the module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.AccelDecel.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: moviepy.video.fx.AccelDecel\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: MoviePy Video Effects Module Structure\nDESCRIPTION: ReStructuredText documentation defining the structure and available modules in moviepy.video.fx. Lists all available video effect modules that can be applied to video clips.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.fx\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n   moviepy.video.fx.AccelDecel\n   moviepy.video.fx.BlackAndWhite\n   moviepy.video.fx.Blink\n   moviepy.video.fx.Crop\n   moviepy.video.fx.CrossFadeIn\n   moviepy.video.fx.CrossFadeOut\n   moviepy.video.fx.EvenSize\n   moviepy.video.fx.FadeIn\n   moviepy.video.fx.FadeOut\n   moviepy.video.fx.Freeze\n   moviepy.video.fx.FreezeRegion\n   moviepy.video.fx.GammaCorrection\n   moviepy.video.fx.HeadBlur\n   moviepy.video.fx.InvertColors\n   moviepy.video.fx.Loop\n   moviepy.video.fx.LumContrast\n   moviepy.video.fx.MakeLoopable\n   moviepy.video.fx.Margin\n   moviepy.video.fx.MaskColor\n   moviepy.video.fx.MasksAnd\n   moviepy.video.fx.MasksOr\n   moviepy.video.fx.MirrorX\n   moviepy.video.fx.MirrorY\n   moviepy.video.fx.MultiplyColor\n   moviepy.video.fx.MultiplySpeed\n   moviepy.video.fx.Painting\n   moviepy.video.fx.Resize\n   moviepy.video.fx.Rotate\n   moviepy.video.fx.Scroll\n   moviepy.video.fx.SlideIn\n   moviepy.video.fx.SlideOut\n   moviepy.video.fx.SuperSample\n   moviepy.video.fx.TimeMirror\n   moviepy.video.fx.TimeSymmetrize\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx autoclass documentation for MoviePy HTML2 class\nDESCRIPTION: ReStructuredText file that configures Sphinx documentation generation for the HTML2 class in MoviePy's display_in_notebook module. The file includes a comment about using a custom class for complete function documentation with a reference to a Stack Overflow solution.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.display_in_notebook.HTML2.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.io.display\\_in\\_notebook.HTML2\n============================================\n\n.. currentmodule:: moviepy.video.io.display_in_notebook\n\n.. autoclass:: HTML2\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Importing AudioFadeOut Module for Documentation in Python\nDESCRIPTION: This code snippet demonstrates how to use the automodule directive to generate documentation for the AudioFadeOut module in MoviePy. It includes inherited members to ensure comprehensive documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.fx.AudioFadeOut.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: moviepy.audio.fx.AudioFadeOut\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Running MoviePy Tests\nDESCRIPTION: Command to execute MoviePy test suite using pytest.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pytest\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master Branch in Bash\nDESCRIPTION: Command for keeping your local master branch in sync with the official MoviePy repository. This should be done regularly before creating new features or fixes.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for MoviePy FreezeRegion Documentation\nDESCRIPTION: This snippet configures Sphinx's automodule directive to generate comprehensive documentation for the MoviePy FreezeRegion module, including all inherited members. It's part of a custom setup to ensure complete function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.FreezeRegion.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: moviepy.video.fx.FreezeRegion\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Structure for MoviePy Audio Readers Module in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the moviepy.audio.io.readers module. It uses the automodule directive to include documentation from the module, with a specific focus on the FFMPEG_AudioReader class via the autosummary directive.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.readers.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.audio.io.readers\n========================\n\n\n.. automodule:: moviepy.audio.io.readers\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      FFMPEG_AudioReader\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy Video Module\nDESCRIPTION: This RST code configures the Sphinx documentation for the moviepy.video module. It sets up automodule directives and defines a table of contents for submodules.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video\n=============\n\n\n.. automodule:: moviepy.video\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n\n   moviepy.video.VideoClip\n\n\n   moviepy.video.compositing\n\n\n   moviepy.video.fx\n\n\n   moviepy.video.io\n\n\n   moviepy.video.tools\n```\n\n----------------------------------------\n\nTITLE: Running MoviePy Unit Tests in Docker\nDESCRIPTION: Command to run MoviePy's test suite using pytest inside the Docker container.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/docker.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -w /moviepy -it moviepy python -m pytest\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for MoviePy CrossFadeIn Module\nDESCRIPTION: ReStructuredText directives to configure documentation for the CrossFadeIn effect module in MoviePy. Uses automodule to automatically generate documentation with inherited members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.CrossFadeIn.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.CrossFadeIn\n============================\n\n \n.. automodule:: moviepy.video.fx.CrossFadeIn\n   :inherited-members:\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Testing Trajectory Save/Load Functionality\nDESCRIPTION: Pull request adding tests for Trajectory.save_list and load_list methods\nSOURCE: https://github.com/zulko/moviepy/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Embedding GitHub Button in HTML\nDESCRIPTION: This snippet shows how to embed a GitHub button using an iframe. It creates a button that displays the number of watchers for the MoviePy repository on GitHub.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/index.rst#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe type=\"text/html\" src=\"https://ghbtns.com/github-btn.html?user=Zulko&repo=moviepy&type=watch&count=true&size=large\"\nallowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"152px\" height=\"30px\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Configuration for GammaCorrection Module\nDESCRIPTION: ReStructuredText directives for documenting the MoviePy GammaCorrection module using automodule with inherited members enabled.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.GammaCorrection.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.fx.GammaCorrection\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Importing MoviePy Audio Tools Cuts Module\nDESCRIPTION: This code snippet shows how to import the moviepy.audio.tools.cuts module. It is used to access audio processing tools, specifically for finding audio periods in MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.tools.cuts.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.audio.tools.cuts import find_audio_period\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directive for convert_masks_to_RGB\nDESCRIPTION: ReStructuredText directives for documenting the convert_masks_to_RGB function from MoviePy's decorators module using Sphinx autodoc extension.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.convert_masks_to_RGB.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.decorators\n\n.. autofunction:: convert_masks_to_RGB\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for MoviePy MasksAnd\nDESCRIPTION: ReStructuredText configuration that uses Sphinx automodule directive to generate comprehensive documentation for the MoviePy MasksAnd module, including all inherited members. This setup enables complete documentation of every function as referenced in the StackOverflow solution.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.MasksAnd.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.MasksAnd\n=========================\n\n \n.. automodule:: moviepy.video.fx.MasksAnd\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining a reStructuredText Table of Contents for MoviePy Documentation\nDESCRIPTION: This code defines a reStructuredText table of contents (toctree) for the MoviePy documentation. It sets the maximum depth to 1 and lists several documentation pages including installation guides, quick presentations, tutorials, and FAQs.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/getting_started/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   install\n   quick_presentation\n   moviepy_10_minutes\n   docker\n   updating_to_v2\n   FAQ\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for MoviePy Developer Documentation\nDESCRIPTION: A reStructuredText directive that creates a table of contents with a maximum depth of 1, linking to the developer installation guide, contribution guidelines, and publishing instructions for maintainers.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   \n   developers_install\n   contribution_guidelines\n   maintainers_publish\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy HeadBlur Module\nDESCRIPTION: This RST (reStructuredText) snippet configures Sphinx to automatically document all functions in the MoviePy HeadBlur video effect module. It uses automodule directive with inherited-members flag to ensure complete documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.HeadBlur.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.HeadBlur\n=========================\n\n \n.. automodule:: moviepy.video.fx.HeadBlur\n   :inherited-members:\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Referencing preprocess_args Decorator in MoviePy\nDESCRIPTION: Documentation reference to the preprocess_args function from the moviepy.decorators module using Sphinx autofunction directive.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.decorators.preprocess_args.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.decorators\n\n.. autofunction:: preprocess_args\n```\n\n----------------------------------------\n\nTITLE: Testing Command Execution in MoviePy Configuration\nDESCRIPTION: Function reference for try_cmd which appears to be a configuration utility in MoviePy for testing command execution. Based on the documentation context, this function likely validates and tests system commands used by MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.config.try_cmd.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry_cmd\n```\n\n----------------------------------------\n\nTITLE: Importing moviepy.video.tools.credits Module in Python\nDESCRIPTION: This code snippet shows how to import the credits module from MoviePy's video tools. The automodule directive is used to automatically generate documentation for the entire module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.credits.rst#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: moviepy.video.tools.credits\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for MoviePy Resize Module\nDESCRIPTION: ReStructuredText directive for documenting the MoviePy video resize functionality module. Uses automodule directive with inherited-members flag to include all inherited class members in the documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.Resize.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.fx.Resize\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Defining HTML2 Class in MoviePy for Python\nDESCRIPTION: This code block indicates the presence of an 'HTML2' class in the MoviePy module. It's likely used for HTML representation of video content in notebooks.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.display_in_notebook.rst#2025-04-18_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nHTML2\n```\n\n----------------------------------------\n\nTITLE: Running MoviePy Tests with pytest\nDESCRIPTION: This command executes the test suite for MoviePy using the pytest framework. It will run all tests defined in the project's test files.\nSOURCE: https://github.com/zulko/moviepy/blob/master/tests/README.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for ffmpeg_stabilize_video Function\nDESCRIPTION: This is a reStructuredText documentation snippet that sets up the documentation page for the ffmpeg_stabilize_video function. It defines the module path and uses Sphinx's autofunction directive to automatically generate documentation from the function's docstring.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_tools.ffmpeg_stabilize_video.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nmoviepy.video.io.ffmpeg\\_tools.ffmpeg\\_stabilize\\_video\n=======================================================\n\n.. currentmodule:: moviepy.video.io.ffmpeg_tools\n\n.. autofunction:: ffmpeg_stabilize_video\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for ffmpeg_write_video Function\nDESCRIPTION: Sphinx documentation markup defining the module path and auto-documenting the ffmpeg_write_video function. Uses ReStructuredText format to generate API documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_writer.ffmpeg_write_video.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.video.io.ffmpeg_writer\n\n.. autofunction:: ffmpeg_write_video\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for MoviePy SlideIn Module\nDESCRIPTION: ReStructuredText configuration that enables auto-documentation of the SlideIn video effect module, including all inherited members. The setup references a custom module used for complete function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.SlideIn.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.SlideIn\n========================\n\n \n.. automodule:: moviepy.video.fx.SlideIn\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Cloning a MoviePy Fork in Bash\nDESCRIPTION: Command for cloning your personal MoviePy fork to your local machine. This is the first step in the development process after forking the official repository.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone URL_TO_YOUR_FORK\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure for MoviePy Tools Module\nDESCRIPTION: This RST (reStructuredText) snippet defines the documentation structure for the moviepy.tools module. It sets up an autosummary that will generate documentation for various utility functions provided by the module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.tools\n=============\n\n\n.. automodule:: moviepy.tools\n\n   \n\n   \n   \n   \n\n\n   \n   \n   .. rubric:: Functions\n\n   .. autosummary::\n      :toctree:\n   \n      close_all_clips\n      convert_to_seconds\n      cross_platform_popen_params\n      deprecated_version_of\n      find_extension\n      no_display_available\n      subprocess_call\n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for FFPLAY_AudioPreviewer in MoviePy\nDESCRIPTION: reStructuredText documentation configuration for the FFPLAY_AudioPreviewer class. The documentation uses Sphinx's autoclass directive to generate comprehensive API documentation for the class and all its members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.ffplay_audiopreviewer.FFPLAY_AudioPreviewer.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.audio.io.ffplay\\_audiopreviewer.FFPLAY\\_AudioPreviewer\n==============================================================\n\n.. currentmodule:: moviepy.audio.io.ffplay_audiopreviewer\n\n.. autoclass:: FFPLAY_AudioPreviewer\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for MoviePy's FadeOut Module\nDESCRIPTION: Sphinx documentation configuration using reStructuredText (RST) markup to generate API documentation for the FadeOut video effect module in MoviePy. The configuration uses the automodule directive to automatically include all module documentation and inherited members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.FadeOut.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.fx.FadeOut\n========================\n\n \n.. automodule:: moviepy.video.fx.FadeOut\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hooks\nDESCRIPTION: Command to set up Git pre-commit hooks using the pre-commit framework for automated code quality checks.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Staging Changes for Release in Git\nDESCRIPTION: Command to stage the changelog and version file changes before committing a new MoviePy release.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/maintainers_publish.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit add CHANGELOG.md pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for AudioArrayClip\nDESCRIPTION: ReStructuredText directives to configure documentation generation for the AudioArrayClip class from the moviepy.audio.AudioClip module. Uses autoclass to automatically document the class and its members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.AudioClip.AudioArrayClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.audio.AudioClip\n\n.. autoclass:: AudioArrayClip\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx documentation for MoviePy's ColorClip class\nDESCRIPTION: This ReStructuredText snippet configures the Sphinx documentation for the ColorClip class in MoviePy. It specifies the module path, sets up autoclass directive with members option, and includes a reference to a custom class implementation for improved documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.ColorClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.VideoClip.ColorClip\n=================================\n\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: ColorClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Committing Release Changes in Git\nDESCRIPTION: Command to commit the staged changes with a release message for a new MoviePy version.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/maintainers_publish.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Release vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Changes to Remote Repository\nDESCRIPTION: Command to push the committed changes to the remote Git repository for MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/maintainers_publish.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy Trajectory Class\nDESCRIPTION: RST markup configuration for documenting the Trajectory class in MoviePy's interpolators module. Uses autoclass directive to automatically generate class documentation with all members included.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.interpolators.Trajectory.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.video.tools.interpolators\n\n.. autoclass:: Trajectory\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Defining FramesMatch Documentation Structure in RST\nDESCRIPTION: ReStructuredText directives configuring the documentation for MoviePy's FramesMatch class. Uses currentmodule directive to set context and autoclass to generate comprehensive class documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.cuts.FramesMatch.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: moviepy.video.tools.cuts\n\n.. autoclass:: FramesMatch\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Pushing Development Branch to Fork\nDESCRIPTION: Command to push the local development branch to the forked repository on GitHub.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin YOUR_DEVELOP_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Rebasing Development Branch\nDESCRIPTION: Command to rebase the current development branch onto the latest master branch.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git rebase master\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation for VideoClip Class in MoviePy using reStructuredText\nDESCRIPTION: This snippet configures the documentation settings for the VideoClip class from the moviepy.video.VideoClip module. It uses the autoclass directive to automatically document all class members and includes a reference to a StackOverflow answer about custom documentation classes.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.VideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.VideoClip.VideoClip\n=================================\n\n.. currentmodule:: moviepy.video.VideoClip\n\n.. autoclass:: VideoClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: Documenting ffmpeg_resize Function with Sphinx in reStructuredText\nDESCRIPTION: This snippet sets up the documentation structure for the ffmpeg_resize function using Sphinx's reStructuredText format. It defines the module path, sets the current module context, and uses the autofunction directive to automatically generate documentation from the function's docstring.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_tools.ffmpeg_resize.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nmoviepy.video.io.ffmpeg\\_tools.ffmpeg\\_resize\n=============================================\n\n.. currentmodule:: moviepy.video.io.ffmpeg_tools\n\n.. autofunction:: ffmpeg_resize\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Share Button in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Twitter share button using HTML and JavaScript. It creates a button to share information about MoviePy on Twitter with a predefined text and hashtag.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://twitter.com/share\" class=\"twitter-share-button\"\ndata-text=\"MoviePy - Video editing with Python\" data-size=\"large\" data-hashtags=\"MoviePy\">Tweet\n</a>\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';\nif(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';\nfjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Dockerfile Support\nDESCRIPTION: Pull request adding Dockerfile support for containerizing MoviePy\nSOURCE: https://github.com/zulko/moviepy/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy Video Module Classes\nDESCRIPTION: ReStructuredText configuration that sets up automatic documentation generation for the VideoClip module. It uses autosummary to document seven key classes (BitmapClip, ColorClip, DataVideoClip, ImageClip, TextClip, UpdatedVideoClip, and VideoClip) with a custom template.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.VideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.VideoClip\n=======================\n\n\n.. automodule:: moviepy.video.VideoClip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      BitmapClip\n      ColorClip\n      DataVideoClip\n      ImageClip\n      TextClip\n      UpdatedVideoClip\n      VideoClip\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx autodocumentation for MoviePy interpolators module\nDESCRIPTION: Configuration for Sphinx documentation that uses a custom module to ensure complete documentation of the MoviePy interpolators module. It references the Interpolator and Trajectory classes for detailed documentation generation using autosummary.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.interpolators.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.tools.interpolators\n=================================\n\n\n.. automodule:: moviepy.video.tools.interpolators\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      Interpolator\n      Trajectory\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy's CompositeVideoClip\nDESCRIPTION: ReStructuredText directives for generating comprehensive API documentation for the CompositeVideoClip class. The configuration specifies the module path, autoclass directive with members option, and includes a reference to a custom documentation approach.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.compositing.CompositeVideoClip.CompositeVideoClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\nmoviepy.video.compositing.CompositeVideoClip.CompositeVideoClip\n===============================================================\n\n.. currentmodule:: moviepy.video.compositing.CompositeVideoClip\n\n.. autoclass:: CompositeVideoClip\n   :members:\n\n   \n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for ImageSequenceClip\nDESCRIPTION: ReStructuredText documentation showing the module structure and available class documentation for ImageSequenceClip in MoviePy. Uses automodule and autosummary directives to generate class documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ImageSequenceClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.video.io.ImageSequenceClip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      ImageSequenceClip\n```\n\n----------------------------------------\n\nTITLE: Configuring MoviePy Clip Module Documentation in reStructuredText\nDESCRIPTION: This snippet sets up the documentation structure for the MoviePy Clip module using reStructuredText directives. It includes a custom module for comprehensive function documentation, defines the module path, and configures an autosummary for the Clip class.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.Clip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.Clip\n============\n\n\n.. automodule:: moviepy.Clip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      Clip\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Structure\nDESCRIPTION: ReStructuredText documentation structure for MoviePy's video tools module, including automodule directive and module listings.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.tools\n===================\n\n\n.. automodule:: moviepy.video.tools\n\n   \n\n   \n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n\n\n   moviepy.video.tools.credits\n\n\n   moviepy.video.tools.cuts\n\n\n   moviepy.video.tools.drawing\n\n\n   moviepy.video.tools.interpolators\n\n\n   moviepy.video.tools.subtitles\n```\n\n----------------------------------------\n\nTITLE: Module Structure Definition in RST\nDESCRIPTION: ReStructuredText (RST) markup defining the structure and autogenerated documentation for the moviepy.audio.AudioClip module, including class and function references.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.AudioClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: moviepy.audio.AudioClip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      AudioArrayClip\n      AudioClip\n      CompositeAudioClip\n   \n   \n\n\n   \n   \n   .. rubric:: Functions\n\n   .. autosummary::\n      :toctree:\n   \n      concatenate_audioclips\n   \n   \n\n\n   \n   \n   \n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy's Rotate Module\nDESCRIPTION: This snippet configures Sphinx to automatically generate documentation for the Rotate module in MoviePy's video effects package. It uses the automodule directive to include all inherited members.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.fx.Rotate.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: moviepy.video.fx.Rotate\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation for MoviePy's html_embed Function\nDESCRIPTION: ReStructuredText documentation directives for the html_embed function in MoviePy's display_in_notebook module. Sets the current module context and generates automated function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.display_in_notebook.html_embed.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.video.io.display_in_notebook\n\n.. autofunction:: html_embed\n```\n\n----------------------------------------\n\nTITLE: Documenting MoviePy FFMPEG Writer Module in reStructuredText\nDESCRIPTION: This RST file provides documentation structure for MoviePy's FFMPEG writer module. It outlines the classes and functions available for writing videos and images using FFMPEG as the backend. The documentation uses autosummary directives to generate detailed documentation for each component.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_writer.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.video.io.ffmpeg\\_writer\n===============================\n\n\n.. automodule:: moviepy.video.io.ffmpeg_writer\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      FFMPEG_VideoWriter\n   \n   \n\n\n   \n   \n   .. rubric:: Functions\n\n   .. autosummary::\n      :toctree:\n   \n      ffmpeg_write_image\n      ffmpeg_write_video\n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Documenting FFmpeg Audio Write Function in RST\nDESCRIPTION: ReStructuredText documentation directives for the ffmpeg_audiowrite function within the MoviePy library's audio IO module. The documentation uses autofunction to automatically generate API documentation from the function's docstring.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.ffmpeg_audiowriter.ffmpeg_audiowrite.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: moviepy.audio.io.ffmpeg_audiowriter\n\n.. autofunction:: ffmpeg_audiowrite\n```\n\n----------------------------------------\n\nTITLE: Documenting Color Gradient Function - RestructuredText\nDESCRIPTION: RestructuredText directive for documenting the color_gradient function from MoviePy's drawing tools. Uses autodoc functionality to generate API documentation automatically from the source code.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.tools.drawing.color_gradient.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: moviepy.video.tools.drawing\n\n.. autofunction:: color_gradient\n```\n\n----------------------------------------\n\nTITLE: Documenting find_audio_period Function - RST\nDESCRIPTION: Sphinx documentation directive for the find_audio_period function in the moviepy.audio.tools.cuts module. Uses reStructuredText format to set up automatic function documentation.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.tools.cuts.find_audio_period.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: moviepy.audio.tools.cuts\n\n.. autofunction:: find_audio_period\n```\n\n----------------------------------------\n\nTITLE: Importing and Using cross_platform_popen_params in Python\nDESCRIPTION: This snippet demonstrates how to import and use the cross_platform_popen_params function from MoviePy's tools module. The function is used to ensure cross-platform compatibility when using subprocess.Popen.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.tools.cross_platform_popen_params.rst#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom moviepy.tools import cross_platform_popen_params\n\n# Usage example (hypothetical)\nparams = cross_platform_popen_params(some_command)\nsubprocess.Popen(params)\n```\n\n----------------------------------------\n\nTITLE: Installing MoviePy Documentation Dependencies\nDESCRIPTION: Installs the required libraries for building MoviePy documentation using pip package manager.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ (sudo) pip install moviepy[doc]\n```\n\n----------------------------------------\n\nTITLE: Custom module declaration for complete function documentation\nDESCRIPTION: Comment explaining the use of a custom module to enable complete documentation of every function, with a reference to a Stack Overflow answer.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.rst#2025-04-18_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n```\n\n----------------------------------------\n\nTITLE: Installing Testing and Linting Dependencies\nDESCRIPTION: Commands to install required libraries for testing and linting MoviePy code.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ (sudo) pip install moviepy[test]\n$ (sudo) pip install moviepy[lint]\n```\n\n----------------------------------------\n\nTITLE: Generating Recursive API Documentation with Sphinx for MoviePy\nDESCRIPTION: This code snippet uses Sphinx's autosummary directive to automatically generate a recursive table of contents for the MoviePy API documentation. It specifies a custom template and targets the 'moviepy' module.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autosummary::\n   :toctree: reference\n   :recursive:\n   :template: custom_autosummary/module.rst\n\n   moviepy\n```\n\n----------------------------------------\n\nTITLE: Building MoviePy Documentation\nDESCRIPTION: Command to build the MoviePy documentation using the setup.py script.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py build_docs\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Path for ffmpeg_extract_subclip in reStructuredText\nDESCRIPTION: Sphinx documentation directive that specifies the module path and uses autofunction to generate documentation for the ffmpeg_extract_subclip function from its docstring.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.video.io.ffmpeg_tools.ffmpeg_extract_subclip.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. currentmodule:: moviepy.video.io.ffmpeg_tools\n\n.. autofunction:: ffmpeg_extract_subclip\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for MoviePy AudioFileClip Module\nDESCRIPTION: ReStructuredText markup that configures Sphinx documentation for the AudioFileClip module. It sets up automodule documentation with autosummary to generate documentation for the AudioFileClip class using a custom template.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/reference/reference/moviepy.audio.io.AudioFileClip.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \nmoviepy.audio.io.AudioFileClip\n==============================\n\n\n.. automodule:: moviepy.audio.io.AudioFileClip\n\n   \n\n   \n   \n   .. rubric:: Classes\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   \n      AudioFileClip\n   \n   \n\n\n   \n   \n   \n\n\n   \n   \n   \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Documentation Template in Sphinx for MoviePy\nDESCRIPTION: This template configures the documentation structure for MoviePy modules, including special handling for the 'moviepy.Effect' class and '.fx.' modules. It organizes documentation into sections for classes, functions, exceptions, and submodules.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/_templates/custom_autosummary/module.rst#2025-04-18_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. custom module to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n   \n{{ fullname | escape | underline}}\n\n{% if fullname in ['moviepy.Effect'] or '.fx.' in fullname %} {# Fix for autosummary to document abstract class #}\n.. automodule:: {{ fullname }}\n   :inherited-members:\n{% else %}\n.. automodule:: {{ fullname }}\n{% endif %}\n   \n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: {{ _('Classes') }}\n\n   .. autosummary::\n      :toctree:\n      :template: custom_autosummary/class.rst\n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n\n   {% block functions %}\n   {% if functions %}\n   .. rubric:: {{ _('Functions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n\n   {% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: {{ _('Exceptions') }}\n\n   .. autosummary::\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{% block modules %}\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: custom_autosummary/module.rst\n   :recursive:\n{% for item in modules %}\n{% if not item in ['moviepy.version'] %}\n   {{ item }}\n{% endif %}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Bash\nDESCRIPTION: Command for creating and switching to a new development branch. Branch names should be prefixed with 'fix_' or 'feature_' to indicate their purpose.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout --branch YOUR_DEVELOP_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Tag to Remote Repository\nDESCRIPTION: Command to push the newly created Git tag to the remote repository for MoviePy.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/maintainers_publish.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Pushing a Feature Branch to GitHub in Bash\nDESCRIPTION: Command for pushing your local development branch to your GitHub fork. This is necessary before you can create a pull request to the official repository.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin YOUR_DEVELOP_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Tag for Release\nDESCRIPTION: Command to create an annotated Git tag for the new MoviePy version release.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/maintainers_publish.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a vX.Y.Z -m \"Release vX.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Running MoviePy Tests in Bash\nDESCRIPTION: Command for running the test suite to verify that your changes don't break existing functionality. This should be done before submitting a pull request.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Feature Branch in Bash\nDESCRIPTION: Command for rebasing your feature branch on top of the updated master branch. This ensures your changes are based on the latest code in the official repository.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git rebase master\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-commit Hooks\nDESCRIPTION: Command to install and configure pre-commit hooks for running code quality checks before committing changes.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks in Bash\nDESCRIPTION: Command for setting up pre-commit hooks, which automatically run code quality checks using black, flake8, and isort before each commit. This ensures code quality standards are maintained.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master Branch\nDESCRIPTION: Command to update the local master branch with changes from the official MoviePy repository.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull upstream master\n```\n\n----------------------------------------\n\nTITLE: Adding the Upstream Remote in Bash\nDESCRIPTION: Commands for adding the official MoviePy repository as a remote named 'upstream' using either SSH or HTTPS. This allows you to keep your local repository in sync with the official project.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/contribution_guidelines.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream git@github.com:Zulko/moviepy.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/Zulko/moviepy.git\n```\n\n----------------------------------------\n\nTITLE: Running Black Code Formatter\nDESCRIPTION: Command to run the Black code formatter on MoviePy codebase.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m black .\n```\n\n----------------------------------------\n\nTITLE: Creating a New Development Branch\nDESCRIPTION: Command to create and switch to a new development branch for working on features or bug fixes.\nSOURCE: https://github.com/zulko/moviepy/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout --branch YOUR_DEVELOP_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Running Flake8 Linter\nDESCRIPTION: Command to run Flake8 linter on MoviePy codebase with specific configuration parameters.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/developer_guide/developers_install.rst#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m flake8 -v --show-source --max-line-length=92 moviepy docs/conf.py examples tests\n```\n\n----------------------------------------\n\nTITLE: Parsing Timestamp and Coordinate Data in Plaintext\nDESCRIPTION: This snippet represents a table of data with timestamps (in milliseconds) and corresponding x and y coordinates. It could be used for tracking the position of an object or point over time, potentially in a video editing or motion tracking context.\nSOURCE: https://github.com/zulko/moviepy/blob/master/media/traj.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# t(ms)\tx\ty\n0\t547\t104\n1000\t210\t78\n2000\t280\t85\n3000\t337\t93\n4000\t354\t78\n5000\t381\t68\n6000\t382\t67\n7000\t382\t67\n8000\t372\t64\n9000\t372\t65\n```\n\n----------------------------------------\n\nTITLE: RST Class Documentation Template for Sphinx\nDESCRIPTION: A reStructuredText template for Sphinx that generates complete class documentation. Uses autoclass directive to document all class members and includes module context settings.\nSOURCE: https://github.com/zulko/moviepy/blob/master/docs/_templates/custom_autosummary/class.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. custom class to enable complete documentation of every function\n   see https://stackoverflow.com/a/62613202\n\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n```"
  }
]