[
  {
    "owner": "close2",
    "repo": "csv",
    "content": "TITLE: Converting CSV String to List of Values with CsvToListConverter in Dart\nDESCRIPTION: This snippet demonstrates parsing a CSV formatted string into a list of rows, where each row is a list of dynamic values. The CsvToListConverter uses default RFC4180 delimiters and converts numeric-looking strings to int or double by default. It supports options to allow invalid CSVs, specify custom delimiters, and automatically detect CSV settings. Input is a CSV string; output is a List<List<dynamic>> representing rows and fields. It requires the 'csv' package in Dart and can process stream inputs by chaining transforms. This approach facilitates easy CSV data manipulation in Dart programs.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nList<List<dynamic>> rowsAsListOfValues = const CsvToListConverter().convert(yourString);\n```\n\n----------------------------------------\n\nTITLE: Converting List of Values to CSV String with ListToCsvConverter in Dart\nDESCRIPTION: Illustrates converting a list of rows, each being a list of dynamic values, into a RFC4180 compliant CSV string using the ListToCsvConverter. The converter by default uses comma as the field separator, double quotes as text delimiters, and CRLF as end-of-line. It handles quoting fields when necessary and allows all delimiters (field, text start/end, and eol) to be multi-character strings. Null and empty values can be customized. This snippet returns CSV as a string but can be configured for stream transformations. It depends on the Dart 'csv' library and is suitable for exporting structured data to CSV format.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nString csv = const ListToCsvConverter().convert(yourListOfLists);\n```\n\n----------------------------------------\n\nTITLE: Customizing CsvToListConverter Settings and Behavior in Dart\nDESCRIPTION: Explains how to create CsvToListConverter instances with customization parameters like shouldParseNumbers to disable number parsing, allowInvalid to tolerate malformed CSV without exceptions, convertEmptyTo to specify substitute values for empty fields, and csvSettingsDetector to auto-detect delimiters and EOL characters. It also introduces the FirstOccurrenceSettingsDetector to pick delimiter settings based on first occurrence in the CSV string. This snippet highlights flexibility for handling diverse and imperfect CSV data inputs in Dart.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar d = FirstOccurrenceSettingsDetector(eols: ['\\r\\n', '\\n'],\n                                            textDelimiters: ['\"', \"'\"]);\n\nCsvToListConverter(csvSettingsDetector: d);\n```\n\n----------------------------------------\n\nTITLE: Basic CSV Parsing Example with CsvToListConverter in Dart\nDESCRIPTION: This snippet shows basic usage of CsvToListConverter with default delimiter settings to convert a CSV string into nested lists. It demonstrates that numeric strings are parsed to their appropriate numeric types and that each CSV row becomes a list of field values in Dart. This example is suitable for quick CSV parsing needs with minimal configuration.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = const CsvToListConverter().convert('\",b\",3.1,42\\r\\n\"n\\n\"');\nassert(res.toString() == [[',b', 3.1, 42], ['n\\n']].toString());\n```\n\n----------------------------------------\n\nTITLE: Decoding CSV Data from File Stream with CsvToListConverter in Dart\nDESCRIPTION: Demonstrates reading a CSV file asynchronously by opening a file stream and applying UTF-8 decoding followed by CsvToListConverter to parse CSV rows into lists of fields. The result is gathered as a list of records. This approach supports large files by streaming rather than loading entire content into memory. It depends on Dart's async and io libraries alongside the 'csv' package, enabling efficient and configurable CSV parsing directly from file sources.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal input = File('a/csv/file.txt').openRead();\nfinal fields = await input.transform(utf8.decoder).transform(CsvToListConverter()).toList();\n```\n\n----------------------------------------\n\nTITLE: Encoding List to CSV with Default and Custom Options using ListToCsvConverter in Dart\nDESCRIPTION: Shows how to convert a List<List<dynamic>> into a CSV string using the default ListToCsvConverter or by overriding options on the convert method such as delimiters and null conversions. It also demonstrates that not all rows need to be equal length and explains quoting rules for EOL and delimiters. This method is useful for easy generation of CSV data with customizable formatting in Dart applications.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal res = const ListToCsvConverter().convert([[',b', 3.1, 42], ['n\\n']]);\nassert(res == '\",b\",3.1,42\\r\\n\"n\\n\"');\n```\n\n----------------------------------------\n\nTITLE: Using ListToCsvConverter as a Stream Transformer in Dart\nDESCRIPTION: Shows usage of ListToCsvConverter as a transformer for Dart Streams, enabling on-the-fly conversion of stream data consisting of lists of values into CSV formatted strings. Takes a Stream emitting lists (rows) and transforms each row into a formatted CSV line. This method integrates CSV encoding into reactive or asynchronous Dart workflows. It requires the 'csv' package and supports all configurable delimiter options. Ideal for processing CSV data streams without buffering entire datasets.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal stream = Stream.fromIterable([['a', 'b'], [1, 2]]);\nfinal csvRowStream = stream.transform(ListToCsvConverter());\n```\n\n----------------------------------------\n\nTITLE: Encoding CSV with Custom Multi-Character Delimiters using ListToCsvConverter in Dart\nDESCRIPTION: Illustrates constructing a ListToCsvConverter instance with multi-character delimiters including fieldDelimiter, textDelimiter, textEndDelimiter, and eol. The converter processes a list of lists and outputs a CSV string respecting these custom delimiters. The snippet also asserts equivalence when custom delimiters are supplied at method call time. This functionality allows clients to work with non-standard CSV formats requiring long delimiters, enhancing flexibility beyond common single-character defaults.\nSOURCE: https://github.com/close2/csv/blob/master/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst conv = const ListToCsvConverter(fieldDelimiter: '|*|',\n                                      textDelimiter: '<<',\n                                      textEndDelimiter: '>>',\n                                      eol: '**\\n');\nfinal res = conv.convert([['a','>'], ['<<', '>>'], [1, 2]]);\nassert(res == 'a|*|<<>>>**\\n<<<<>>|*|<<>>>>>>**\\n1|*|2');\n\nfinal res2 = const ListToCsvConverter()\n    .convert([['a','>'], ['<<', '>>'], [1, 2]],\n             fieldDelimiter: '|*|',\n             textDelimiter: '<<',\n             textEndDelimiter: '>>',\n             eol: '**\\n',\n             convertNullTo: '');\nassert(res == res2);\n```"
  }
]