[
  {
    "owner": "honojs",
    "repo": "website",
    "content": "TITLE: Installing Hono Project with Package Managers\nDESCRIPTION: Commands to create a new Hono project using different package managers like npm, yarn, pnpm, bun, and deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Starting Hono Development Server\nDESCRIPTION: Commands to start the local development server for a Hono project using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Middleware in Hono\nDESCRIPTION: This example demonstrates how to set up CORS middleware for different routes with various configuration options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cors.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\n// CORS should be called before the route\napp.use('/api/*', cors())\napp.use(\n  '/api2/*',\n  cors({\n    origin: 'http://example.com',\n    allowHeaders: ['X-Custom-Header', 'Upgrade-Insecure-Requests'],\n    allowMethods: ['POST', 'GET', 'OPTIONS'],\n    exposeHeaders: ['Content-Length', 'X-Kuma-Revision'],\n    maxAge: 600,\n    credentials: true,\n  })\n)\n\napp.all('/api/abc', (c) => {\n  return c.json({ success: true })\n})\napp.all('/api2/abc', (c) => {\n  return c.json({ success: true })\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Verify Usage Example in TypeScript\nDESCRIPTION: Shows how to use the verify() function to validate a JWT token using a secret key and retrieve the decoded payload.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verify } from 'hono/jwt'\n\nconst tokenToVerify = 'token'\nconst secretKey = 'mySecretKey'\n\nconst decodedPayload = await verify(tokenToVerify, secretKey)\nconsole.log(decodedPayload)\n```\n\n----------------------------------------\n\nTITLE: Built-in Middleware Usage\nDESCRIPTION: Shows how to import and use Hono's built-in middleware including powered-by, logger, and basic authentication.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { poweredBy } from 'hono/powered-by'\nimport { logger } from 'hono/logger'\nimport { basicAuth } from 'hono/basic-auth'\n\nconst app = new Hono()\n\napp.use(poweredBy())\napp.use(logger())\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Routing in Hono (TypeScript)\nDESCRIPTION: Demonstrates basic routing in Hono, including HTTP methods, wildcards, custom methods, and multiple paths. It showcases how to handle different HTTP methods and define various route patterns.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\n// HTTP Methods\napp.get('/', (c) => c.text('GET /'))\napp.post('/', (c) => c.text('POST /'))\napp.put('/', (c) => c.text('PUT /'))\napp.delete('/', (c) => c.text('DELETE /'))\n\n// Wildcard\napp.get('/wild/*/card', (c) => {\n  return c.text('GET /wild/*/card')\n})\n\n// Any HTTP methods\napp.all('/hello', (c) => c.text('Any Method /hello'))\n\n// Custom HTTP method\napp.on('PURGE', '/cache', (c) => c.text('PURGE Method /cache'))\n\n// Multiple Method\napp.on(['PUT', 'DELETE'], '/post', (c) =>\n  c.text('PUT or DELETE /post')\n)\n\n// Multiple Paths\napp.on('GET', ['/hello', '/ja/hello', '/en/hello'], (c) =>\n  c.text('Hello')\n)\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Helpers in Hono.js TypeScript\nDESCRIPTION: Demonstrates how to use getCookie and setCookie helpers in a Hono.js application to read and write cookies. Shows importing the helper functions and using them within a route handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCookie, setCookie } from 'hono/cookie'\n\nconst app = new Hono()\n\napp.get('/cookie', (c) => {\n  const yummyCookie = getCookie(c, 'yummy_cookie')\n  // ...\n  setCookie(c, 'delicious_cookie', 'macha')\n  //\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing 404 Not Found Responses in Hono\nDESCRIPTION: Demonstrates how to override the default 404 Not Found response with a custom handler using the notFound method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.notFound((c) => {\n  return c.text('Custom 404 Message', 404)\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Hono Applications\nDESCRIPTION: Shows how to implement custom error handling logic using the onError method to catch exceptions and return appropriate responses.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.onError((err, c) => {\n  console.error(`${err}`)\n  return c.text('Custom Error Message', 500)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Web API with Hono in TypeScript\nDESCRIPTION: This code snippet demonstrates the creation of a Web API using the Hono framework. It includes route handling for blog posts, CORS implementation, basic authentication, and JSON response formatting. The API supports getting all posts, retrieving a single post, and creating new posts with authentication.\nSOURCE: https://github.com/honojs/website/blob/main/examples/web-api.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\nimport { basicAuth } from 'hono/basic-auth'\nimport { prettyJSON } from 'hono/pretty-json'\nimport { getPosts, getPost, createPost, Post } from './model'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Pretty Blog API'))\napp.use(prettyJSON())\napp.notFound((c) => c.json({ message: 'Not Found', ok: false }, 404))\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst api = new Hono<{ Bindings: Bindings }>()\napi.use('/posts/*', cors())\n\napi.get('/posts', (c) => {\n  const { limit, offset } = c.req.query()\n  const posts = getPosts({ limit, offset })\n  return c.json({ posts })\n})\n\napi.get('/posts/:id', (c) => {\n  const id = c.req.param('id')\n  const post = getPost({ id })\n  return c.json({ post })\n})\n\napi.post(\n  '/posts',\n  async (c, next) => {\n    const auth = basicAuth({\n      username: c.env.USERNAME,\n      password: c.env.PASSWORD,\n    })\n    return auth(c, next)\n  },\n  async (c) => {\n    const post = await c.req.json<Post>()\n    const ok = createPost({ post })\n    return c.json({ ok })\n  }\n)\n\napp.route('/api', api)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Payload in Hono (TypeScript)\nDESCRIPTION: This code snippet shows how to retrieve and use the JWT payload after successful authentication. The payload is accessed using c.get('jwtPayload') and can be returned as JSON.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwt.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Sign Usage Example in TypeScript\nDESCRIPTION: Demonstrates how to use the sign() function to create a JWT token with a payload containing user information and an expiration time.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sign } from 'hono/jwt'\n\nconst payload = {\n  sub: 'user123',\n  role: 'admin',\n  exp: Math.floor(Date.now() / 1000) + 60 * 5, // Token expires in 5 minutes\n}\nconst secret = 'mySecretKey'\nconst token = await sign(payload, secret)\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Hono application for AWS Lambda\nDESCRIPTION: Implementation of a simple Hello World application using Hono for AWS Lambda. The code creates a new Hono instance, defines a route, and exports a handler function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hono Application in TypeScript\nDESCRIPTION: Creates a new Hono application instance and exports it. This is the starting point for any Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n//...\n\nexport default app // for Cloudflare Workers or Bun\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to a Hono Application in TypeScript\nDESCRIPTION: This example shows how to add ETag and logger middleware to a Hono application for improved caching and request logging.\nSOURCE: https://github.com/honojs/website/blob/main/docs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\nimport { logger } from 'hono/logger'\n\nconst app = new Hono()\napp.use(etag(), logger())\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Auth Middleware in Hono (TypeScript)\nDESCRIPTION: This example demonstrates how to set up and use JWT authentication middleware in a Hono application. It includes type specifications for variables and applies the middleware to a specific route pattern.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Specify the variable types to infer the `c.get('jwtPayload')`:\ntype Variables = JwtVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.use(\n  '/auth/*',\n  jwt({\n    secret: 'it-is-very-secret',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Hono Routes (TypeScript)\nDESCRIPTION: Shows how to define and access path parameters in Hono routes. It demonstrates accessing individual parameters and retrieving all parameters at once.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/user/:name', async (c) => {\n  const name = c.req.param('name')\n  // ...\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/posts/:id/comment/:comment_id', async (c) => {\n  const { id, comment_id } = c.req.param()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring Larger Hono Applications with app.route() (TypeScript)\nDESCRIPTION: These snippets demonstrate how to structure a larger Hono application by separating routes into different files and using app.route() to mount them.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/best-practices.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list authors'))\napp.post('/', (c) => c.json('create an author', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// books.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.json('list books'))\napp.post('/', (c) => c.json('create a book', 201))\napp.get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\n// 😃\napp.route('/authors', authors)\napp.route('/books', books)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Using multiple validators for different request parts\nDESCRIPTION: Example of combining multiple validators to validate different parts of the request including parameters, query strings, and JSON body.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/posts/:id',\n  validator('param', ...),\n  validator('query', ...),\n  validator('json', ...),\n  (c) => {\n    //...\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Typed Variables in Handlers\nDESCRIPTION: Example of using properly typed variables in handlers with the help of Hono's generic types.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  const val = c.get('result') // val is a string\n  // ...\n  return c.json({ result: val })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Server with Web Standards in TypeScript\nDESCRIPTION: A basic example showing how to create a server that returns 'Hello World' using Web Standards. This code can run on Cloudflare Workers and Bun without modification.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/web-standard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async fetch() {\n    return new Response('Hello World')\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Renderer in Hono\nDESCRIPTION: Shows how to use c.render() method to generate responses with a previously defined renderer.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  return c.render('Hello!')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handling with Zod Validator in Hono.js\nDESCRIPTION: This snippet demonstrates how to use the Zod Validator in a Hono.js application to validate user input and implement custom error handling. It defines a user schema, applies the validator to a POST route, and handles both valid and invalid inputs.\nSOURCE: https://github.com/honojs/website/blob/main/examples/validator-error-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst app = new Hono()\n\nconst userSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n})\n\napp.post(\n  '/users/new',\n  zValidator('json', userSchema, (result, c) => {\n    if (!result.success) {\n      return c.text('Invalid!', 400)\n    }\n  }),\n  async (c) => {\n    const user = c.req.valid('json')\n    console.log(user.name) // string\n    console.log(user.age) // number\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chained Routes in Hono (TypeScript)\nDESCRIPTION: Shows how to chain multiple HTTP methods for the same route, allowing for a more concise and readable route definition when handling multiple methods on the same endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp\n  .get('/endpoint', (c) => {\n    return c.text('GET /endpoint')\n  })\n  .post((c) => {\n    return c.text('POST /endpoint')\n  })\n  .delete((c) => {\n    return c.text('DELETE /endpoint')\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Time Middleware in Hono.js with TypeScript\nDESCRIPTION: Example of implementing middleware that measures and adds response time to headers. The middleware calculates the time difference between request start and end, then sets it in the X-Response-Time header.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (c, next) => {\n  const start = Date.now()\n  await next()\n  const end = Date.now()\n  c.res.headers.set('X-Response-Time', `${end - start}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Different HTTP Methods in Hono\nDESCRIPTION: Examples of handling POST and DELETE requests in Hono, demonstrating different response status codes and parameter usage.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\napp.post('/posts', (c) => c.text('Created!', 201))\napp.delete('/posts/:id', (c) =>\n  c.text(`${c.req.param('id')} is deleted!`)\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in Hono\nDESCRIPTION: Example of how to access request headers like User-Agent from the Hono Context object's req property.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/hello', (c) => {\n  const userAgent = c.req.header('User-Agent')\n  // ...\n  // ---cut-start---\n  return c.text(`Hello, ${userAgent}`)\n  // ---cut-end---\n})\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Server Implementation\nDESCRIPTION: Shows a complete server implementation using Hono and WebSocket helper for Cloudflare Workers, with message event handling.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n\nconst app = new Hono().get(\n  '/ws',\n  upgradeWebSocket(() => {\n    return {\n      onMessage: (event) => {\n        console.log(event.data)\n      },\n    }\n  })\n)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Response Object in Hono\nDESCRIPTION: Example of how to access and modify the Response object directly through c.res in middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Response object\napp.use('/', async (c, next) => {\n  await next()\n  c.res.headers.append('X-Debug', 'Debug message')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Token Verification Function in Bearer Auth\nDESCRIPTION: Demonstrates how to use a custom verification function to validate the bearer token, allowing for dynamic token checking.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  '/auth-verify-token/*',\n  bearerAuth({\n    verifyToken: async (token, c) => {\n      return token === 'dynamic-token'\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Webhook API with Hono\nDESCRIPTION: TypeScript code for creating a Hono-based API endpoint to handle Stripe webhook events. It includes signature verification and event processing.\nSOURCE: https://github.com/honojs/website/blob/main/examples/stripe-webhook.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Stripe from 'stripe'\nimport { Hono } from 'hono'\nimport { env } from 'hono/adapter'\n\nconst app = new Hono()\n\napp.post('/webhook', async (context) => {\n  const { STRIPE_SECRET_API_KEY, STRIPE_WEBHOOK_SECRET } =\n    env(context)\n  const stripe = new Stripe(STRIPE_SECRET_API_KEY)\n  const signature = context.req.header('stripe-signature')\n  try {\n    if (!signature) {\n      return context.text('', 400)\n    }\n    const body = await context.req.text()\n    const event = await stripe.webhooks.constructEventAsync(\n      body,\n      signature,\n      STRIPE_WEBHOOK_SECRET\n    )\n    switch (event.type) {\n      case 'payment_intent.created': {\n        console.log(event.data.object)\n        break\n      }\n      default:\n        break\n    }\n    return context.text('', 200)\n  } catch (err) {\n    const errorMessage = `⚠️  Webhook signature verification failed. ${\n      err instanceof Error ? err.message : 'Internal server error'\n    }`\n    console.log(errorMessage)\n    return context.text(errorMessage, 400)\n  }\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for Hono Application in Deno\nDESCRIPTION: Example of writing a test for a Hono application using Deno.test and assertions from @std/assert.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { assertEquals } from '@std/assert'\n\nDeno.test('Hello World', async () => {\n  const app = new Hono()\n  app.get('/', (c) => c.text('Please test me'))\n\n  const res = await app.request('http://localhost/')\n  assertEquals(res.status, 200)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Fetch Handler for Cloudflare Workers\nDESCRIPTION: Demonstrates how to integrate a Hono application with Cloudflare Workers by exporting a fetch handler object that uses the app.fetch method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    return app.fetch(request, env, ctx)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Generics with Hono for Type Safety\nDESCRIPTION: Demonstrates how to use TypeScript generics with Hono to provide type safety for environment bindings and context variables.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bindings = {\n  TOKEN: string\n}\n\ntype Variables = {\n  user: User\n}\n\nconst app = new Hono<{\n  Bindings: Bindings\n  Variables: Variables\n}>()\n\napp.use('/auth/*', async (c, next) => {\n  const token = c.env.TOKEN // token is `string`\n  // ...\n  c.set('user', user) // user should be `User`\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Hono Application in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a simple Hono application with a single route that responds with 'Hono!' text.\nSOURCE: https://github.com/honojs/website/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating a Zod validation schema\nDESCRIPTION: Define a Zod schema for validating request data with type checking.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = z.object({\n  body: z.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Registration in Hono.js\nDESCRIPTION: Demonstrates different ways to register middleware in Hono.js, including global middleware, path-specific middleware, and method-specific middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// match any method, all routes\napp.use(logger())\n\n// specify path\napp.use('/posts/*', cors())\n\n// specify method and path\napp.post('/posts/*', basicAuth())\n```\n\n----------------------------------------\n\nTITLE: Using factory.createHandlers() for Type-Safe Controllers in Hono (TypeScript)\nDESCRIPTION: This snippet shows how to use factory.createHandlers() from hono/factory to create type-safe controllers with proper middleware and logger integration.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/best-practices.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\n// 😃\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n\n----------------------------------------\n\nTITLE: Using Prisma with D1 in Hono Route Handler\nDESCRIPTION: Example of using Prisma Client with D1 adapter in a Hono route handler, demonstrating database querying and response handling.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport prismaClients from '../lib/prismaClient'\n\ntype Bindings = {\n  MY_KV: KVNamespace\n  DB: D1Database\n}\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', async (c) => {\n  const prisma = await prismaClients.fetch(c.env.DB)\n  const users = await prisma.user.findMany()\n  console.log('users', users)\n  return c.json(users)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload with Hono.js in TypeScript\nDESCRIPTION: This code snippet demonstrates how to set up a POST route for file uploads using Hono.js. It uses the parseBody method to handle multipart/form-data and access the uploaded file. The uploaded file is available in the 'file' key of the parsed body.\nSOURCE: https://github.com/honojs/website/blob/main/examples/file-upload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.post('/upload', async (c) => {\n  const body = await c.req.parseBody()\n  console.log(body['file']) // File | string\n})\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Handler Implementation\nDESCRIPTION: Demonstrates the basic usage of upgradeWebSocket() function to handle WebSocket connections, including message handling and connection closure.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    return {\n      onMessage(event, ws) {\n        console.log(`Message from client: ${event.data}`)\n        ws.send('Hello from server!')\n      },\n      onClose: () => {\n        console.log('Connection closed')\n      },\n    }\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Documented Routes with hono-openapi in TypeScript\nDESCRIPTION: Demonstrates how to use describeRoute for route documentation and validation, including request handling and response generation.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { describeRoute } from 'hono-openapi'\n// You can import these for your preferred validation library\nimport {\n  resolver,\n  validator as vValidator,\n} from 'hono-openapi/valibot'\n\nconst app = new Hono()\n\napp.get(\n  '/',\n  describeRoute({\n    description: 'Say hello to the user',\n    responses: {\n      200: {\n        description: 'Successful response',\n        content: {\n          'text/plain': { schema: resolver(responseSchema) },\n        },\n      },\n    },\n  }),\n  vValidator('query', querySchema),\n  (c) => {\n    const query = c.req.valid('query')\n    return c.text(`Hello ${query?.name ?? 'Hono'}!`)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Timeout Middleware in Hono.js (TypeScript)\nDESCRIPTION: Shows how to create a custom timeout exception and apply a 1-minute timeout with this custom exception to a specific route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/timeout.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPException } from 'hono/http-exception'\n\n// Custom exception factory function\nconst customTimeoutException = (context) =>\n  new HTTPException(408, {\n    message: `Request timeout after waiting ${context.req.headers.get(\n      'Duration'\n    )} seconds. Please try again later.`,\n  })\n\n// for Static Exception Message\n// const customTimeoutException = new HTTPException(408, {\n//   message: 'Operation timed out. Please try again later.'\n// });\n\n// Applying a 1-minute timeout with a custom exception\napp.use('/api/long-process', timeout(60000, customTimeoutException))\n\napp.get('/api/long-process', async (c) => {\n  // Simulate a long process\n  await new Promise((resolve) => setTimeout(resolve, 61000))\n  return c.json({ data: 'This usually takes longer' })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hono.js Application with Cloudflare Bindings in TypeScript\nDESCRIPTION: This snippet shows a simple Hono.js application that uses Cloudflare Bindings. It defines a route that returns JSON containing a greeting and an environment variable.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-vitest.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\ntype Bindings = {\n  MY_VAR: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/hello', (c) => {\n  return c.json({ hello: 'world', var: c.env.MY_VAR })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Throwing HTTPException in Middleware\nDESCRIPTION: Example of throwing an HTTPException with a custom error message during authentication failure in a middleware function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/exception.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPException } from 'hono/http-exception'\n\napp.post('/auth', async (c, next) => {\n  // authentication\n  if (authorized === false) {\n    throw new HTTPException(401, { message: 'Custom error message' })\n  }\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes for RPC with Hono in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create separate Hono apps for authors and books, each with their own routes, and then combine them into a main app using `app.route()`. This approach enables correct type inference for multiple apps.\nSOURCE: https://github.com/honojs/website/blob/main/examples/grouping-routes-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { hc } from 'hono/client'\n\nconst authorsApp = new Hono()\n  .get('/', (c) => c.json({ result: 'list authors' }))\n  .post('/', (c) => c.json({ result: 'create an author' }, 201))\n  .get('/:id', (c) => c.json({ result: `get ${c.req.param('id')}` }))\n\nconst booksApp = new Hono()\n  .get('/', (c) => c.json({ result: 'list books' }))\n  .post('/', (c) => c.json({ result: 'create a book' }, 201))\n  .get('/:id', (c) => c.json({ result: `get ${c.req.param('id')}` }))\n\nconst app = new Hono()\n  .route('/authors', authorsApp)\n  .route('/books', booksApp)\n\ntype AppType = typeof app\n```\n\n----------------------------------------\n\nTITLE: Using Zod with Hono validator\nDESCRIPTION: Integrating Zod schema validation with Hono's validator middleware to validate form data with type safety.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const parsed = schema.safeParse(value)\n    if (!parsed.success) {\n      return c.text('Invalid!', 401)\n    }\n    return parsed.data\n  }),\n  (c) => {\n    const { body } = c.req.valid('form')\n    // ... do something\n    return c.json(\n      {\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Hono App with Zod OpenAPI in TypeScript\nDESCRIPTION: Illustrates how to set up a Hono app using OpenAPIHono, define routes, and add OpenAPI documentation endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/examples/zod-openapi.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenAPIHono } from '@hono/zod-openapi'\n\nconst app = new OpenAPIHono()\n\napp.openapi(route, (c) => {\n  const { id } = c.req.valid('param')\n  return c.json({\n    id,\n    age: 20,\n    name: 'Ultra-man',\n  })\n})\n\n// The OpenAPI documentation will be available at /doc\napp.doc('/doc', {\n  openapi: '3.0.0',\n  info: {\n    version: '1.0.0',\n    title: 'My API',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: React Client with React Query and Hono Client\nDESCRIPTION: A React application that uses React Query and Hono's type-safe client to interact with the todo API. Demonstrates fetching todos and adding new ones with full type safety.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// src/App.tsx\nimport {\n  useQuery,\n  useMutation,\n  QueryClient,\n  QueryClientProvider,\n} from '@tanstack/react-query'\nimport { AppType } from '../functions/api/[[route]]'\nimport { hc, InferResponseType, InferRequestType } from 'hono/client'\n\nconst queryClient = new QueryClient()\nconst client = hc<AppType>('/api')\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Todos />\n    </QueryClientProvider>\n  )\n}\n\nconst Todos = () => {\n  const query = useQuery({\n    queryKey: ['todos'],\n    queryFn: async () => {\n      const res = await client.todo.$get()\n      return await res.json()\n    },\n  })\n\n  const $post = client.todo.$post\n\n  const mutation = useMutation<\n    InferResponseType<typeof $post>,\n    Error,\n    InferRequestType<typeof $post>['form']\n  >({\n    mutationFn: async (todo) => {\n      const res = await $post({\n        form: todo,\n      })\n      return await res.json()\n    },\n    onSuccess: async () => {\n      queryClient.invalidateQueries({ queryKey: ['todos'] })\n    },\n    onError: (error) => {\n      console.log(error)\n    },\n  })\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          mutation.mutate({\n            id: Date.now().toString(),\n            title: 'Write code',\n          })\n        }}\n      >\n        Add Todo\n      </button>\n\n      <ul>\n        {query.data?.todos.map((todo) => (\n          <li key={todo.id}>{todo.title}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Routing Priority in Hono (TypeScript)\nDESCRIPTION: Illustrates the routing priority in Hono, showing how handlers are executed in registration order and how to structure routes for desired behavior, including fallback routes and middleware execution.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/book/a', (c) => c.text('a')) // a\napp.get('/book/:slug', (c) => c.text('common')) // common\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('*', (c) => c.text('common')) // common\napp.get('/foo', (c) => c.text('foo')) // foo\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { logger } from 'hono/logger'\nconst app = new Hono()\n\napp.use(logger())\napp.get('/foo', (c) => c.text('foo'))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/bar', (c) => c.text('bar')) // bar\napp.get('*', (c) => c.text('fallback')) // fallback\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters with query() in Hono\nDESCRIPTION: Shows how to access query string parameters using the query() method. You can retrieve individual parameters by name or get all query parameters as an object.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Query params\napp.get('/search', async (c) => {\n  const query = c.req.query('q')\n  //     ^?\n})\n\n// Get all params at once\napp.get('/search', async (c) => {\n  const { q, limit, offset } = c.req.query()\n  //      ^?\n})\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes without Changing Base in Hono (TypeScript)\nDESCRIPTION: Shows how to group multiple Hono instances while maintaining their original base paths. This technique allows for modular organization of routes from different sources.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst book = new Hono()\nbook.get('/book', (c) => c.text('List Books')) // GET /book\nbook.post('/book', (c) => c.text('Create Book')) // POST /book\n\nconst user = new Hono().basePath('/user')\nuser.get('/', (c) => c.text('List Users')) // GET /user\nuser.post('/', (c) => c.text('Create User')) // POST /user\n\nconst app = new Hono()\napp.route('/', book) // Handle /book\napp.route('/', user) // Handle /user\n```\n\n----------------------------------------\n\nTITLE: Implementing Environment-Dependent CORS Configuration in Hono\nDESCRIPTION: This example demonstrates how to configure CORS middleware dynamically based on environment variables.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cors.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('*', async (c, next) => {\n  const corsMiddlewareHandler = cors({\n    origin: c.env.CORS_ORIGIN,\n  })\n  return corsMiddlewareHandler(c, next)\n})\n```\n\n----------------------------------------\n\nTITLE: Using useRequestContext Hook in JSX Components\nDESCRIPTION: Demonstrates how to use the useRequestContext hook to access the Context instance within JSX components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRequestContext, jsxRenderer } from 'hono/jsx-renderer'\n\nconst app = new Hono()\napp.use(jsxRenderer())\n\nconst RequestUrlBadge: FC = () => {\n  const c = useRequestContext()\n  return <b>{c.req.url}</b>\n}\n\napp.get('/page/info', (c) => {\n  return c.render(\n    <div>\n      You are accessing: <RequestUrlBadge />\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events (SSE) Streaming Example\nDESCRIPTION: Demonstrates how to implement Server-Sent Events streaming with event types and IDs.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\nlet id = 0\n\napp.get('/sse', async (c) => {\n  return streamSSE(c, async (stream) => {\n    while (true) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Serving binary data from Hono on AWS Lambda\nDESCRIPTION: Example of how to return binary data (such as images) from a Hono route in AWS Lambda. Hono automatically handles the required base64 encoding when the Content-Type header indicates binary data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/binary', async (c) => {\n  // ...\n  c.status(200)\n  c.header('Content-Type', 'image/png') // means binary data\n  return c.body(buffer) // supports `ArrayBufferLike` type, encoded to base64.\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Not Found Response in Hono\nDESCRIPTION: How to use c.notFound() method to return a 404 Not Found response.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/notfound', (c) => {\n  return c.notFound()\n})\n```\n\n----------------------------------------\n\nTITLE: Testing GET Request with Hono\nDESCRIPTION: Test case demonstrating how to make a GET request to a Hono endpoint and verify the response status and content.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Example', () => {\n  test('GET /posts', async () => {\n    const res = await app.request('/posts')\n    expect(res.status).toBe(200)\n    expect(await res.text()).toBe('Many posts')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Optimizing Hono for RPC Features with Proper Typing (TypeScript)\nDESCRIPTION: This snippet shows how to structure a Hono application to support RPC features with correct type inference, using method chaining and the hc client.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/best-practices.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// authors.ts\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from './authors'\nimport { hc } from 'hono/client'\n\n// 😃\nconst client = hc<typeof app>('http://localhost') // Typed correctly\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Middleware in Hono Application (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the Swagger UI middleware in a Hono application. It sets up a route to serve Swagger UI at '/ui' and specifies the URL for the API documentation.\nSOURCE: https://github.com/honojs/website/blob/main/examples/swagger-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { swaggerUI } from '@hono/swagger-ui'\n\nconst app = new Hono()\n\n// Use the middleware to serve Swagger UI at /ui\napp.get('/ui', swaggerUI({ url: '/doc' }))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tokens with Different Privileges\nDESCRIPTION: Shows how to implement multiple tokens with different access levels, allowing read access with one token and full CRUD operations with a privileged token.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\nconst readToken = 'read'\nconst privilegedToken = 'read+write'\nconst privilegedMethods = ['POST', 'PUT', 'PATCH', 'DELETE']\n\napp.on('GET', '/api/page/*', async (c, next) => {\n  // List of valid tokens\n  const bearer = bearerAuth({ token: [readToken, privilegedToken] })\n  return bearer(c, next)\n})\napp.on(privilegedMethods, '/api/page/*', async (c, next) => {\n  // Single valid privileged token\n  const bearer = bearerAuth({ token: privilegedToken })\n  return bearer(c, next)\n})\n\n// Define handlers for GET, POST, etc.\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to group related routes using a separate Hono instance and add them to the main app. This approach helps in organizing and modularizing route definitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst book = new Hono()\n\nbook.get('/', (c) => c.text('List Books')) // GET /book\nbook.get('/:id', (c) => {\n  // GET /book/:id\n  const id = c.req.param('id')\n  return c.text('Get Book: ' + id)\n})\nbook.post('/', (c) => c.text('Create Book')) // POST /book\n\nconst app = new Hono()\napp.route('/book', book)\n```\n\n----------------------------------------\n\nTITLE: Parsing Form Data with parseBody() in Hono\nDESCRIPTION: Demonstrates how to parse request body data of type multipart/form-data or application/x-www-form-urlencoded using the parseBody() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.parseBody()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Basic POST Request\nDESCRIPTION: Example of testing a POST endpoint with basic configuration, checking status code, headers, and JSON response.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono API Endpoint in TypeScript\nDESCRIPTION: A simple example of creating a Hono application with a GET endpoint that returns a JSON response with a 'Hello!' message.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: `Hello!`,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Bindings in a Hono Application\nDESCRIPTION: Example of defining and accessing Cloudflare bindings in a Hono application. This demonstrates how to use environment values, R2 bucket, and other bindings with proper TypeScript typing.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bindings = {\n  MY_BUCKET: R2Bucket\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\n// Access to environment values\napp.put('/upload/:key', async (c, next) => {\n  const key = c.req.param('key')\n  await c.env.MY_BUCKET.put(key, c.req.body)\n  return c.text(`Put ${key} successfully!`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Response with Chained Method in Hono\nDESCRIPTION: A more concise way to create a response with body, status code, and headers in a single method call.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/welcome', (c) => {\n  return c.body('Thank you for coming', 201, {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Zod dependency\nDESCRIPTION: Commands for installing the Zod validation library using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm i zod\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add zod\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add zod\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add zod\n```\n\n----------------------------------------\n\nTITLE: Hono Application in Module Worker Mode\nDESCRIPTION: Example of exporting a Hono application in Module Worker mode for Cloudflare Workers. This is the recommended approach for using Hono with Cloudflare Workers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Module Worker\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Handling HTTPException with Error Handler\nDESCRIPTION: Shows how to handle HTTPException using app.onError handler to process custom responses from the exception.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/exception.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPException } from 'hono/http-exception'\n\napp.onError((err, c) => {\n  if (err instanceof HTTPException) {\n    // Get the custom response\n    return err.getResponse()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Usage in Hono\nDESCRIPTION: Demonstrates a basic setup of a Hono application using JSX components for server-side rendering. Includes layout and component definitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from 'hono'\nimport type { FC } from 'hono/jsx'\n\nconst app = new Hono()\n\nconst Layout: FC = (props) => {\n  return (\n    <html>\n      <body>{props.children}</body>\n    </html>\n  )\n}\n\nconst Top: FC<{ messages: string[] }> = (props: {\n  messages: string[]\n}) => {\n  return (\n    <Layout>\n      <h1>Hello Hono!</h1>\n      <ul>\n        {props.messages.map((message) => {\n          return <li>{message}!!</li>\n        })}\n      </ul>\n    </Layout>\n  )\n}\n\napp.get('/', (c) => {\n  const messages = ['Good Morning', 'Good Evening', 'Good Night']\n  return c.html(<Top messages={messages} />)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: JWT Verify Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for the verify() method which validates a JWT token's authenticity and checks if it's still valid based on the payload claims.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nverify(\n  token: string,\n  secret: string,\n  alg?: 'HS256';\n): Promise<any>;\n\n```\n\n----------------------------------------\n\nTITLE: Using Signed Cookies in Hono\nDESCRIPTION: Illustrates the usage of signed cookies in Hono, which require a secret key and return Promises due to the use of WebCrypto API for HMAC SHA-256 signatures.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/signed-cookie', (c) => {\n  const secret = 'secret' // make sure it's a large enough string to be secure\n\n  await setSignedCookie(c, 'cookie_name0', 'cookie_value', secret)\n  const fortuneCookie = await getSignedCookie(c, secret, 'cookie_name0')\n  deleteCookie(c, 'cookie_name0')\n  // `getSignedCookie` will return `false` for a specified cookie if the signature was tampered with or is invalid\n  const allSignedCookies = await getSignedCookie(c, secret)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request with JSON Data\nDESCRIPTION: Test case showing how to send JSON data in a POST request and verify the response.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('POST /posts', async () => {\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: JSON.stringify({ message: 'hello hono' }),\n    headers: new Headers({ 'Content-Type': 'application/json' }),\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Middleware Execution Order Demo\nDESCRIPTION: Demonstrates the execution order of multiple middleware functions and how they wrap around the main handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (_, next) => {\n  console.log('middleware 1 start')\n  await next()\n  console.log('middleware 1 end')\n})\napp.use(async (_, next) => {\n  console.log('middleware 2 start')\n  await next()\n  console.log('middleware 2 end')\n})\napp.use(async (_, next) => {\n  console.log('middleware 3 start')\n  await next()\n  console.log('middleware 3 end')\n})\n\napp.get('/', (c) => {\n  console.log('handler')\n  return c.text('Hello!')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Auth for All API Routes\nDESCRIPTION: Shows how to apply bearer authentication to all routes under the '/api/' path using a single token.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.use('/api/*', bearerAuth({ token }))\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'You are authorized' })\n})\n```\n\n----------------------------------------\n\nTITLE: Using JWK Auth Middleware in Hono\nDESCRIPTION: Demonstrates how to use the JWK auth middleware to protect routes in a Hono application. It configures the middleware with a JWKS URI for key retrieval.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwk.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwk({\n    jwks_uri: `https://${backendServer}/.well-known/jwks.json`,\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\n----------------------------------------\n\nTITLE: Extending CSS Definitions in Hono\nDESCRIPTION: How to extend CSS definitions by embedding one class name inside another using template literals, allowing for composition of styles.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst baseClass = css`\n  color: white;\n  background-color: blue;\n`\n\nconst header1Class = css`\n  ${baseClass}\n  font-size: 3rem;\n`\n\nconst header2Class = css`\n  ${baseClass}\n  font-size: 2rem;\n`\n```\n\n----------------------------------------\n\nTITLE: Importing Zod\nDESCRIPTION: Import statement for the Zod validation library.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Headers with header() in Hono\nDESCRIPTION: Shows how to retrieve HTTP header values from a request using the header() method. This example demonstrates retrieving the User-Agent header value.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  const userAgent = c.req.header('User-Agent')\n  //      ^?\n  return c.text(`Your user agent is ${userAgent}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Request ID Middleware in Hono Application\nDESCRIPTION: This example demonstrates how to apply the Request ID Middleware to all routes and access the generated request ID in a handler. It shows the basic setup of a Hono application with the middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/request-id.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use('*', requestId())\n\napp.get('/', (c) => {\n  return c.text(`Your request id is ${c.get('requestId')}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Route with Zod OpenAPI in TypeScript\nDESCRIPTION: Shows how to create a route using the createRoute function from @hono/zod-openapi, specifying method, path, request params, and response schema.\nSOURCE: https://github.com/honojs/website/blob/main/examples/zod-openapi.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoute } from '@hono/zod-openapi'\n\nconst route = createRoute({\n  method: 'get',\n  path: '/users/{id}',\n  request: {\n    params: ParamsSchema,\n  },\n  responses: {\n    200: {\n      content: {\n        'application/json': {\n          schema: UserSchema,\n        },\n      },\n      description: 'Retrieve the user',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Path Parameters with param() in Hono\nDESCRIPTION: Demonstrates how to extract path parameters from URLs using the param() method. This can be used to get individual parameters by name or all parameters at once as an object.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Captured params\napp.get('/entry/:id', async (c) => {\n  const id = c.req.param('id')\n  //    ^?\n  // ...\n})\n\n// Get all params at once\napp.get('/entry/:id/comment/:commentId', async (c) => {\n  const { id, commentId } = c.req.param()\n  //      ^?\n})\n```\n\n----------------------------------------\n\nTITLE: Context Extension in Middleware\nDESCRIPTION: Demonstrates how to extend the context with type-safe variables in middleware using createMiddleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from 'hono/factory'\n\nconst echoMiddleware = createMiddleware<{\n  Variables: {\n    echo: (str: string) => string\n  }\n}>(async (c, next) => {\n  c.set('echo', (str) => str)\n  await next()\n})\n\napp.get('/echo', echoMiddleware, (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Context Variables in Hono\nDESCRIPTION: Example of how to use c.set() and c.get() to pass values between middleware and handlers within a request lifecycle.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (c, next) => {\n  c.set('message', 'Hono is cool!!')\n  await next()\n})\n\napp.get('/', (c) => {\n  const message = c.get('message')\n  return c.text(`The message is \"${message}\"`)\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering JSON Response in Hono\nDESCRIPTION: How to use c.json() method to render a JSON response with Content-Type set to application/json.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/api', (c) => {\n  return c.json({ message: 'Hello!' })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Options in Hono\nDESCRIPTION: Shows how to set regular and signed cookies with various options such as path, secure, domain, httpOnly, maxAge, expires, and sameSite.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Regular cookies\nsetCookie(c, 'great_cookie', 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n  httpOnly: true,\n  maxAge: 1000,\n  expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n  sameSite: 'Strict',\n})\n\n// Signed cookies\nawait setSignedCookie(\n  c,\n  'fortune_cookie',\n  'lots-of-money',\n  'secret ingredient',\n  {\n    path: '/',\n    secure: true,\n    domain: 'example.com',\n    httpOnly: true,\n    maxAge: 1000,\n    expires: new Date(Date.UTC(2000, 11, 24, 10, 30, 59, 900)),\n    sameSite: 'Strict',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Request Body in Hono\nDESCRIPTION: Shows how to parse a request body of type application/json using the json() method, which returns the parsed JSON data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.json()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using env() Function to Retrieve Environment Variables in TypeScript\nDESCRIPTION: This example demonstrates how to use the env() function to access environment variables across different runtimes. It retrieves a 'NAME' variable and returns it as text.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/adapter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'hono/adapter'\n\napp.get('/env', (c) => {\n  // NAME is process.env.NAME on Node.js or Bun\n  // NAME is the value written in `wrangler.toml` on Cloudflare\n  const { NAME } = env<{ NAME: string }>(c)\n  return c.text(NAME)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Logger Middleware in Hono Application (TypeScript)\nDESCRIPTION: Demonstrates how to create a Hono application instance, apply the logger middleware, and define a simple route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/logger.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(logger())\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Durable Object and Hono Router in TypeScript\nDESCRIPTION: This code snippet defines a Counter Durable Object class and sets up a Hono app to handle HTTP requests for interacting with the counter. It includes methods for getting, incrementing, and decrementing the counter value, as well as route handlers for these operations.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-durable-objects.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DurableObject } from \"cloudflare:workers\";\nimport { Hono } from 'hono';\n\nexport class Counter extends DurableObject {\n  // In-memory state\n  value = 0;\n\n  constructor(ctx: DurableObjectState, env: Env) {\n    super(ctx, env);\n\n    // `blockConcurrencyWhile()` ensures no requests are delivered until initialization completes.\n    ctx.blockConcurrencyWhile(async () => {\n      // After initialization, future reads do not need to access storage.\n      this.value = (await ctx.storage.get(\"value\")) || 0;\n    });\n  }\n\n  async getCounterValue() {\n    return this.value;\n  }\n\n  async increment(amount = 1): Promise<number> {\n    this.value += amount;\n    await this.ctx.storage.put(\"value\", this.value);\n    return this.value;\n  }\n\n  async decrement(amount = 1): Promise<number> {\n    this.value -= amount;\n    await this.ctx.storage.put(\"value\", this.value);\n    return this.value;\n  }\n}\n\n// Create a new Hono app to handle incoming HTTP requests\ntype Bindings = {\n  COUNTER: DurableObjectNamespace<Counter>\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Add routes to interact with the Durable Object\napp.get('/counter', async (c) => {\n  const env = c.env;\n  const id = env.COUNTER.idFromName(\"counter\");\n  const stub = env.COUNTER.get(id);\n  const counterValue = await stub.getCounterValue();\n  return c.text(counterValue.toString());\n});\n\napp.post('/counter/increment', async (c) => {\n  const env = c.env;\n  const id = env.COUNTER.idFromName(\"counter\");\n  const stub = env.COUNTER.get(id);\n  const value = await stub.increment();\n  return c.text(value.toString());\n});\n\napp.post('/counter/decrement', async (c) => {\n  const env = c.env;\n  const id = env.COUNTER.idFromName(\"counter\");\n  const stub = env.COUNTER.get(id);\n  const value = await stub.decrement();\n  return c.text(value.toString());\n});\n\n// Export the Hono app as the Worker's fetch handler\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Using Context in Hono JSX\nDESCRIPTION: Illustrates how to use createContext and useContext to share data globally across component tree without prop drilling in Hono JSX.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { FC } from 'hono/jsx'\nimport { createContext, useContext } from 'hono/jsx'\n\nconst themes = {\n  light: {\n    color: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    color: '#ffffff',\n    background: '#222222',\n  },\n}\n\nconst ThemeContext = createContext(themes.light)\n\nconst Button: FC = () => {\n  const theme = useContext(ThemeContext)\n  return <button style={theme}>Push!</button>\n}\n\nconst Toolbar: FC = () => {\n  return (\n    <div>\n      <Button />\n    </div>\n  )\n}\n\n// ...\n\napp.get('/', (c) => {\n  return c.html(\n    <div>\n      <ThemeContext.Provider value={themes.dark}>\n        <Toolbar />\n      </ThemeContext.Provider>\n    </div>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pretty JSON Middleware in TypeScript\nDESCRIPTION: This snippet shows how to create a Hono application instance, apply the Pretty JSON middleware, and define a route that returns JSON. The middleware can be configured with options such as indentation space.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/pretty-json.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(prettyJSON()) // With options: prettyJSON({ space: 4 })\napp.get('/', (c) => {\n  return c.json({ message: 'Hono!' })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono Application in TypeScript\nDESCRIPTION: A simple Hono application that sets up a route to respond with 'Hello Hono!' for the root path.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Routing with Hostname in Hono (TypeScript)\nDESCRIPTION: Shows how to implement routing based on the hostname, allowing different responses for different domains or subdomains using the same Hono instance.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono({\n  getPath: (req) => req.url.replace(/^https?:\\/([^?]+).*$/, '$1'),\n})\n\napp.get('/www1.example.com/hello', (c) => c.text('hello www1'))\napp.get('/www2.example.com/hello', (c) => c.text('hello www2'))\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client with D1 Adapter\nDESCRIPTION: Function to create a Prisma Client instance using the D1 adapter for use in a Cloudflare Worker environment.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client'\nimport { PrismaD1 } from '@prisma/adapter-d1'\n\nconst prismaClients = {\n  async fetch(db: D1Database) {\n    const adapter = new PrismaD1(db)\n    const prisma = new PrismaClient({ adapter })\n    return prisma\n  },\n}\n\nexport default prismaClients\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in Hono (TypeScript)\nDESCRIPTION: Examples of using the CSRF middleware in a Hono application, including basic usage and specifying origins with different options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/csrf.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(csrf())\n\n// Specifying origins with using `origin` option\n// string\napp.use(csrf({ origin: 'myapp.example.com' }))\n\n// string[]\napp.use(\n  csrf({\n    origin: ['myapp.example.com', 'development.myapp.example.com'],\n  })\n)\n\n// Function\n// It is strongly recommended that the protocol be verified to ensure a match to `$`.\n// You should *never* do a forward match.\napp.use(\n  '*',\n  csrf({\n    origin: (origin) =>\n      /https:\\/\\/(\\w+\\.)?myapp\\.example\\.com$/.test(origin),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Redirecting Responses in Hono\nDESCRIPTION: Examples of using c.redirect() to create redirect responses with default 302 or specified 301 status codes.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/redirect', (c) => {\n  return c.redirect('/')\n})\napp.get('/redirect-permanently', (c) => {\n  return c.redirect('/', 301)\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Hono Applications with the request() Method\nDESCRIPTION: Demonstrates how to use Hono's built-in request() method for unit testing endpoints, showing a simple GET request test.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntest('GET /hello is ok', async () => {\n  const res = await app.request('/hello')\n  expect(res.status).toBe(200)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Regular Cookies in Hono\nDESCRIPTION: Demonstrates how to set, get, and delete regular cookies using the Hono Cookie Helper. It also shows how to retrieve all cookies at once.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/cookie', (c) => {\n  setCookie(c, 'cookie_name', 'cookie_value')\n  const yummyCookie = getCookie(c, 'cookie_name')\n  deleteCookie(c, 'cookie_name')\n  const allCookies = getCookie(c)\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Permission-Policy Headers with Hono.js Middleware\nDESCRIPTION: Example showing how to configure various browser permissions using the secureHeaders middleware in a Hono.js application. The code demonstrates setting permissions for features like fullscreen, bluetooth, payment processing, device sensors, and API access with different restriction levels including self, none, specific domains, and wildcards.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    permissionsPolicy: {\n      fullscreen: ['self'], // fullscreen=(self)\n      bluetooth: ['none'], // bluetooth=(none)\n      payment: ['self', 'https://example.com'], // payment=(self \"https://example.com\")\n      syncXhr: [], // sync-xhr=()\n      camera: false, // camera=none\n      microphone: true, // microphone=*\n      geolocation: ['*'], // geolocation=*\n      usb: ['self', 'https://a.example.com', 'https://b.example.com'], // usb=(self \"https://a.example.com\" \"https://b.example.com\")\n      accelerometer: ['https://*.example.com'], // accelerometer=(\"https://*.example.com\")\n      gyroscope: ['src'], // gyroscope=(src)\n      magnetometer: [\n        'https://a.example.com',\n        'https://b.example.com',\n      ], // magnetometer=(\"https://a.example.com\" \"https://b.example.com\")\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with Hono Client\nDESCRIPTION: Makes a request to a parameterized route by specifying path parameter values. The param object is used to fill in the path parameters in the route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n  query: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Access Control with Combine Middleware in Hono (TypeScript)\nDESCRIPTION: Demonstrates a complex access control setup using Combine Middleware, including IP restriction, bearer authentication, and rate limiting.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/combine.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { getConnInfo } from 'hono/cloudflare-workers'\nimport { every, some } from 'hono/combine'\nimport { ipRestriction } from 'hono/ip-restriction'\nimport { rateLimit } from '@/my-rate-limit'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  some(\n    every(\n      ipRestriction(getConnInfo, { allowList: ['192.168.0.2'] }),\n      bearerAuth({ token })\n    ),\n    // If both conditions are met, rateLimit will not execute.\n    rateLimit()\n  )\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Text Response in Hono\nDESCRIPTION: How to use c.text() method to render a plain text response with Content-Type set to text/plain.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/say', (c) => {\n  return c.text('Hello!')\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Grouping Order in Hono (TypeScript)\nDESCRIPTION: Illustrates a common mistake in grouping routes where the incorrect order of route() calls can lead to unexpected 404 errors. This example emphasizes the importance of proper route grouping order.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\nconst two = new Hono()\nconst three = new Hono()\n\nthree.get('/hi', (c) => c.text('hi'))\napp.route('/two', two) // `two` does not have routes\ntwo.route('/three', three)\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Custom User Verification in Hono Basic Auth Middleware\nDESCRIPTION: This example demonstrates how to use a custom verification function with the basicAuth middleware in Hono. It allows for dynamic user verification logic.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  basicAuth({\n    verifyUser: (username, password, c) => {\n      return (\n        username === 'dynamic-user' && password === 'hono-password'\n      )\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for D1 Database\nDESCRIPTION: Prisma schema configuration for using D1 Database with driver adapters, including a User model definition.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngenerator client {\n  provider        = \"prisma-client-js\"\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id    String @id  @default(uuid())\n  email String  @unique\n  name  String?\n}\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request with FormData\nDESCRIPTION: Example of testing a POST endpoint using multipart/form-data format.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntest('POST /posts', async () => {\n  const formData = new FormData()\n  formData.append('message', 'hello')\n  const res = await app.request('/posts', {\n    method: 'POST',\n    body: formData,\n  })\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of JSX Renderer Middleware in Hono\nDESCRIPTION: Demonstrates how to set up and use the JSX Renderer Middleware with a basic layout and route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/about', (c) => {\n  return c.render(<h1>About me!</h1>)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with JWT Middleware in Hono (JavaScript)\nDESCRIPTION: This example illustrates how to use environment variables (e.g., c.env.JWT_SECRET) with the JWT middleware in Hono. It demonstrates creating a custom middleware function to access the environment variable.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwt.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napp.use('/auth/*', (c, next) => {\n  const jwtMiddleware = jwt({\n    secret: c.env.JWT_SECRET,\n  })\n  return jwtMiddleware(c, next)\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic User Configuration for Basic Auth in Hono\nDESCRIPTION: This example demonstrates how to use a dynamic configuration for Basic Authentication in Hono, importing users from a separate configuration file.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { users } from '../config/users'\n\napp.use(\n  '/auth/*',\n  basicAuth(\n    {\n      realm: 'www.example.com',\n      ...users[0],\n    },\n    ...users.slice(1)\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in Hono Routes (TypeScript)\nDESCRIPTION: Shows how to use regular expressions in Hono routes to define more specific matching patterns for path parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/post/:date{[0-9]+}/:title{[a-z]+}', async (c) => {\n  const { date, title } = c.req.param()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Lambda Event and Context objects in Hono\nDESCRIPTION: Example showing how to access AWS Lambda Event and Context objects in Hono routes using type bindings. This allows access to Lambda-specific information like awsRequestId.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport type { LambdaEvent, LambdaContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n  lambdaContext: LambdaContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/aws-lambda-info/', (c) => {\n  return c.json({\n    isBase64Encoded: c.env.event.isBase64Encoded,\n    awsRequestId: c.env.lambdaContext.awsRequestId,\n  })\n})\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-classes with CSS Helper in Hono\nDESCRIPTION: Example of applying CSS pseudo-classes using the nesting selector (&) within the css template literal.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst buttonClass = css`\n  background-color: #fff;\n  &:hover {\n    background-color: red;\n  }\n`\n```\n\n----------------------------------------\n\nTITLE: Using ETag Middleware in Hono.js (TypeScript)\nDESCRIPTION: Demonstrates how to apply the ETag middleware to a specific route in a Hono.js application. The middleware is applied to all routes starting with '/etag/', and a sample route is defined to return a text response.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/etag.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use('/etag/*', etag())\napp.get('/etag/abc', (c) => {\n  return c.text('Hono is cool')\n})\n```\n\n----------------------------------------\n\nTITLE: Full-Stack Bun WebSocket Example with JSX\nDESCRIPTION: A complete example showing how to implement a WebSocket application in Bun environment using Hono and JSX, including both server and client-side code within a single file.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\nimport { html } from 'hono/html'\n\nconst { upgradeWebSocket, websocket } = createBunWebSocket()\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <meta charset='UTF-8' />\n      </head>\n      <body>\n        <div id='now-time'></div>\n        {html`\n          <script>\n            const ws = new WebSocket('ws://localhost:3000/ws')\n            const $nowTime = document.getElementById('now-time')\n            ws.onmessage = (event) => {\n              $nowTime.textContent = event.data\n            }\n          </script>\n        `}\n      </body>\n    </html>\n  )\n})\n\nconst ws = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    let intervalId\n    return {\n      onOpen(_event, ws) {\n        intervalId = setInterval(() => {\n          ws.send(new Date().toString())\n        }, 200)\n      },\n      onClose() {\n        clearInterval(intervalId)\n      },\n    }\n  })\n)\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono to Use Non-Strict URL Path Matching\nDESCRIPTION: Demonstrates how to initialize a Hono application with strict mode disabled, which makes paths with and without trailing slashes equivalent.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono({ strict: false })\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Body as Blob in Hono\nDESCRIPTION: Demonstrates how to parse a request body as a Blob object using the blob() method, useful for handling binary data like images or files.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.blob()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing validated form data in handler\nDESCRIPTION: Shows how to access the validated form data within the route handler using c.req.valid('form').\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n, (c) => {\n  const { body } = c.req.valid('form')\n  // ... do something\n  return c.json(\n    {\n      message: 'Created!',\n    },\n    201\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Client with Hono's hc\nDESCRIPTION: Demonstrates how to create a type-safe client using Hono's hc utility and the exported AppType, allowing for type-safe API calls with proper autocompletion.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppType } from './server'\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('/api')\nconst res = await client.hello.$get({\n  query: {\n    name: 'Hono',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Response in Hono\nDESCRIPTION: How to use c.html() method to render an HTML response with Content-Type set to text/html.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  return c.html('<h1>Hello! Hono!</h1>')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Language Detector Middleware in Hono.js\nDESCRIPTION: Demonstrates the basic setup of the Language Detector middleware, including supported languages and fallback language configuration.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  languageDetector({\n    supportedLanguages: ['en', 'ar', 'ja'], // Must include fallback\n    fallbackLanguage: 'en', // Required\n  })\n)\n\napp.get('/', (c) => {\n  const lang = c.get('language')\n  return c.text(`Hello! Your language is ${lang}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Body Limit Middleware in Hono Application\nDESCRIPTION: Demonstrates how to use the Body Limit Middleware in a Hono application, including setting a max size and custom error handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/body-limit.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.post(\n  '/upload',\n  bodyLimit({\n    maxSize: 50 * 1024, // 50kb\n    onError: (c) => {\n      return c.text('overflow :(', 413)\n    },\n  }),\n  async (c) => {\n    const body = await c.req.parseBody()\n    if (body['file'] instanceof File) {\n      console.log(`Got file sized: ${body['file'].size}`)\n    }\n    return c.text('pass :)')\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Test Setup with TestClient\nDESCRIPTION: Shows how to set up basic tests using the testClient utility with type-safe route calls and assertions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\nimport { describe, test, expect } from 'vitest' // Or your preferred test runner\nimport app from './app'\n\ndescribe('Search Endpoint', () => {\n  // Create the test client from the app instance\n  const client = testClient(app)\n\n  it('should return search results', async () => {\n    // Call the endpoint using the typed client\n    // Notice the type safety for query parameters (if defined in the route)\n    // and the direct access via .$get()\n    const res = await client.search.$get({\n      query: { q: 'hono' },\n    })\n\n    // Assertions\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      query: 'hono',\n      results: ['result1', 'result2'],\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Parameters in Hono Routes (TypeScript)\nDESCRIPTION: Demonstrates how to define optional parameters in Hono routes, allowing a route to match with or without the parameter present.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\n// Will match `/api/animal` and `/api/animal/:type`\napp.get('/api/animal/:type?', (c) => c.text('Animal!'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Objects in Middleware\nDESCRIPTION: Shows how to access error objects thrown by handlers in middleware via c.error property.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (c, next) => {\n  await next()\n  if (c.error) {\n    // do something...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Hono.js Application with Cloudflare Bindings using Vitest\nDESCRIPTION: This snippet demonstrates how to test a Hono.js application with Cloudflare Bindings using Vitest. It imports the Cloudflare test environment and uses it to make a request to the application, then asserts the response.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-vitest.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from 'cloudflare:test'\nimport app from './index'\n\ndescribe('Example', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('/hello', {}, env)\n\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      hello: 'world',\n      var: 'my variable',\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using PropsWithChildren in Hono JSX\nDESCRIPTION: Demonstrates how to use PropsWithChildren to correctly infer child elements in a function component with TypeScript.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PropsWithChildren } from 'hono/jsx'\n\ntype Post = {\n  id: number\n  title: string\n}\n\nfunction Component({ title, children }: PropsWithChildren<Post>) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Abort Controller with Hono Client\nDESCRIPTION: Demonstrates how to use the AbortController to cancel requests made with the Hono client. The abort signal is passed through the init option.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hc } from 'hono/client'\n\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst abortController = new AbortController()\nconst res = await client.api.posts.$post(\n  {\n    json: {\n      // Request body\n    },\n  },\n  {\n    // RequestInit object\n    init: {\n      signal: abortController.signal,\n    },\n  }\n)\n\n// ...\n\nabortController.abort()\n```\n\n----------------------------------------\n\nTITLE: Using Compress Middleware in Hono Application (TypeScript)\nDESCRIPTION: This code demonstrates how to apply the compress middleware to a Hono application. It creates a new Hono instance and adds the compress middleware to the application's middleware stack.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/compress.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(compress())\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication Middleware in Hono\nDESCRIPTION: Demonstrates how to use the basicAuth middleware to protect routes in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { basicAuth } from 'hono/basic-auth'\n\n// ...\n\napp.use(\n  '/admin/*',\n  basicAuth({\n    username: 'admin',\n    password: 'secret',\n  })\n)\n\napp.get('/admin', (c) => {\n  return c.text('You are authorized!')\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Pylon GraphQL API Example in TypeScript\nDESCRIPTION: A more advanced Pylon service showcasing complex types, async methods, and database interactions. It demonstrates defining User and Post classes with methods for querying and creating data.\nSOURCE: https://github.com/honojs/website/blob/main/examples/pylon.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app } from '@getcronit/pylon'\n\nclass Post {\n  id: string\n  title: string\n\n  constructor(id: string, title: string) {\n    this.id = id\n    this.title = title\n  }\n}\n\nclass User {\n  id: string\n  name: string\n\n  constructor(id: string, name: string) {\n    this.id = id\n    this.name = name\n  }\n\n  static async getById(id: string): Promise<User> {\n    // Fetch user data from the database\n    return new User(id, 'John Doe')\n  }\n\n  async posts(): Promise<Post[]> {\n    // Fetch posts for this user from the database\n    return [new Post('1', 'Hello, world!')]\n  }\n\n  async $createPost(title: string, content: string): Promise<Post> {\n    // Create a new post for this user in the database\n    return new Post('2', title)\n  }\n}\n\nexport const graphql = {\n  Query: {\n    user: User.getById,\n  },\n  Mutation: {\n    createPost: (userId: string, title: string, content: string) => {\n      const user = User.getById(userId)\n      return user.$createPost(title, content)\n    },\n  },\n}\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Custom Nonce Generation in Secure Headers Middleware\nDESCRIPTION: Shows how to implement a custom nonce generator function for use with the secureHeaders middleware and apply it in a TSX component.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono<{\n  Variables: { myNonce: string }\n}>()\n\nconst myNonceGenerator: ContentSecurityPolicyOptionHandler = (c) => {\n  // This function is called on every request.\n  const nonce = Math.random().toString(36).slice(2)\n  c.set('myNonce', nonce)\n  return `'nonce-${nonce}'`\n}\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      scriptSrc: [myNonceGenerator, 'https://allowed1.example.com'],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        {/** contents */}\n        <script src='/js/client.js' nonce={c.get('myNonce')} />\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Route in Hono\nDESCRIPTION: Defines a Hono application for handling book-related routes. It includes GET and POST methods for listing, creating, and retrieving individual books.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list books'))\n  .post('/', (c) => c.json('create a book', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Validating form data with manual validator\nDESCRIPTION: Example of using the manual validator middleware to validate form data. It takes 'form' as the first argument and a callback function that validates the request body.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\n  '/posts',\n  validator('form', (value, c) => {\n    const body = value['body']\n    if (!body || typeof body !== 'string') {\n      return c.text('Invalid!', 400)\n    }\n    return {\n      body: body,\n    }\n  }),\n  //...\n```\n\n----------------------------------------\n\nTITLE: Implementing IP Restriction for Bun Environment in TypeScript\nDESCRIPTION: This example demonstrates how to set up IP restriction middleware for a Hono application running on Bun, allowing access only from local IP addresses.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/ip-restriction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\nimport { ipRestriction } from 'hono/ip-restriction'\n\nconst app = new Hono()\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    denyList: [],\n    allowList: ['127.0.0.1', '::1'],\n  })\n)\n\napp.get('/', (c) => c.text('Hello Hono!'))\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Auth Middleware to a Path in Hono\nDESCRIPTION: This example demonstrates how to apply Basic Authentication to a specific path in a Hono application. It sets up authentication for all routes under '/auth/'.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/auth/page', (c) => {\n  return c.text('You are authorized')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation with parseBody() in Hono\nDESCRIPTION: Demonstrates how to parse form data with dot notation in field names to create nested objects. This is enabled by setting the 'dot' option to true.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await c.req.parseBody({ dot: true })\n// body is `{ obj: { key1: 'value1', key2: 'value2' } }`\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda function for response streaming\nDESCRIPTION: Code diff showing how to modify the AWS CDK configuration to enable response streaming for an AWS Lambda function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nfn.addFunctionUrl({\n  authType: lambda.FunctionUrlAuthType.NONE,\n+  invokeMode: lambda.InvokeMode.RESPONSE_STREAM,\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in a Hono Application\nDESCRIPTION: Example of accessing environment variables in a Hono application for Cloudflare Workers. This shows how to retrieve environment values from the context object rather than using process.env.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bindings = {\n  SECRET_KEY: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/env', (c) => {\n  const SECRET_KEY = c.env.SECRET_KEY\n  return c.text(SECRET_KEY)\n})\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Configuration\nDESCRIPTION: Dockerfile configuration for building and deploying a Hono application\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-alpine AS base\n\nFROM base AS builder\n\nRUN apk add --no-cache gcompat\nWORKDIR /app\n\nCOPY package*json tsconfig.json src ./\n\nRUN npm ci && \\\n    npm run build && \\\n    npm prune --production\n\nFROM base AS runner\nWORKDIR /app\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 hono\n\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\nEXPOSE 3000\n\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for a Hono Application\nDESCRIPTION: Example of how to write tests for a Hono application. This test verifies that the application returns a 200 status code for a request to the root endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Test the application', () => {\n  it('Should return 200 response', async () => {\n    const res = await app.request('http://localhost/')\n    expect(res.status).toBe(200)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Prefixes in Hono\nDESCRIPTION: Shows how to use and verify __Secure- and __Host- prefixes for both regular and signed cookies in Hono.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst securePrefixCookie = getCookie(c, 'yummy_cookie', 'secure')\nconst hostPrefixCookie = getCookie(c, 'yummy_cookie', 'host')\n\nconst securePrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'secure'\n)\nconst hostPrefixSignedCookie = await getSignedCookie(\n  c,\n  secret,\n  'fortune_cookie',\n  'host'\n)\n\nsetCookie(c, 'delicious_cookie', 'macha', {\n  prefix: 'secure', // or `host`\n})\n\nawait setSignedCookie(\n  c,\n  'delicious_cookie',\n  'macha',\n  'secret choco chips',\n  {\n    prefix: 'secure', // or `host`\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Routes with Slashes in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to define routes that include slashes within parameters, useful for handling file paths or complex hierarchical structures.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/posts/:filename{.+\\\\.png}', async (c) => {\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono with Next.js App Router\nDESCRIPTION: TypeScript code for setting up a Hono application with Next.js App Router, defining a simple API route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'edge'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Returning JSON Response in Hono\nDESCRIPTION: An example of handling a GET request to '/api/hello' and returning a JSON response in Hono.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\napp.get('/api/hello', (c) => {\n  return c.json({\n    ok: true,\n    message: 'Hello Hono!',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Functionality with URL Pattern Matching in Hono (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Hono application with proxy functionality. It includes a route for handling PNG files with referer checking and a catch-all route for other requests. The code shows how to use URL pattern matching and header checks for conditional proxying.\nSOURCE: https://github.com/honojs/website/blob/main/examples/proxy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/posts/:filename{.+.png$}', (c) => {\n  const referer = c.req.header('Referer')\n  if (referer && !/^https:\\/\\/example.com/.test(referer)) {\n    return c.text('Forbidden', 403)\n  }\n  return fetch(c.req.url)\n})\n\napp.get('*', (c) => {\n  return fetch(c.req.url)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Hono API Server for Cloudflare Pages\nDESCRIPTION: A complete API server implementation for Cloudflare Pages that manages a todo list. Includes Zod validation for the todo schema and exports the AppType for client usage.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// functions/api/[[route]].ts\nimport { Hono } from 'hono'\nimport { handle } from 'hono/cloudflare-pages'\nimport { z } from 'zod'\nimport { zValidator } from '@hono/zod-validator'\n\nconst app = new Hono()\n\nconst schema = z.object({\n  id: z.string(),\n  title: z.string(),\n})\n\ntype Todo = z.infer<typeof schema>\n\nconst todos: Todo[] = []\n\nconst route = app\n  .post('/todo', zValidator('form', schema), (c) => {\n    const todo = c.req.valid('form')\n    todos.push(todo)\n    return c.json({\n      message: 'created!',\n    })\n  })\n  .get((c) => {\n    return c.json({\n      todos,\n    })\n  })\n\nexport type AppType = typeof route\n\nexport const onRequest = handle(app, '/api')\n```\n\n----------------------------------------\n\nTITLE: Parsing Plain Text Request Body in Hono\nDESCRIPTION: Demonstrates how to parse a request body of type text/plain using the text() method, which returns the body content as a string.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.text()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using zValidator middleware with inline schema\nDESCRIPTION: Example of using the zValidator middleware with an inline Zod schema for form validation in a Hono route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    const validated = c.req.valid('form')\n    // ... use your validated data\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Bearer Auth to Specific Route and Method\nDESCRIPTION: Demonstrates how to restrict bearer authentication to a specific route and HTTP method (POST in this case).\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\nconst token = 'honoiscool'\n\napp.get('/api/page', (c) => {\n  return c.json({ message: 'Read posts' })\n})\n\napp.post('/api/page', bearerAuth({ token }), (c) => {\n  return c.json({ message: 'Created post!' }, 201)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Application for Bun\nDESCRIPTION: Example of how to configure and export a Hono application for use with the Bun JavaScript runtime.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app // [!code --]\nexport default {  // [!code ++]\n  port: 3000, // [!code ++]\n  fetch: app.fetch, // [!code ++]\n} // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Setting up Hono project with Next.js template\nDESCRIPTION: Commands to create a new Hono project using the Next.js template with various package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Using Hono Basic Auth Middleware with Cloudflare Pages\nDESCRIPTION: Example of implementing Basic Authentication using Hono's built-in middleware with Cloudflare Pages.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// functions/_middleware.ts\nimport { handleMiddleware } from 'hono/cloudflare-pages'\nimport { basicAuth } from 'hono/basic-auth'\n\nexport const onRequest = handleMiddleware(\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming Error Handler Implementation\nDESCRIPTION: Shows how to implement custom error handling for streaming responses using the optional error handler parameter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/stream', (c) => {\n  return stream(\n    c,\n    async (stream) => {\n      // Write a process to be executed when aborted.\n      stream.onAbort(() => {\n        console.log('Aborted!')\n      })\n      // Write a Uint8Array.\n      await stream.write(\n        new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f])\n      )\n      // Pipe a readable stream.\n      await stream.pipe(anotherReadableStream)\n    },\n    (err, stream) => {\n      stream.writeln('An error occurred!')\n      console.error(err)\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger Function for Hono Middleware (TypeScript)\nDESCRIPTION: Shows how to create a custom logger function and apply it to the Hono logger middleware for tailored logging behavior.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/logger.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const customLogger = (message: string, ...rest: string[]) => {\n  console.log(message, ...rest)\n}\n\napp.use(logger(customLogger))\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Users for Basic Auth in Hono\nDESCRIPTION: This snippet shows how to define multiple users for Basic Authentication in a Hono application. It allows specifying additional username and password pairs.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '/auth/*',\n  basicAuth(\n    {\n      username: 'hono',\n      password: 'acoolproject',\n      // Define other params in the first object\n      realm: 'www.example.com',\n    },\n    {\n      username: 'hono-admin',\n      password: 'super-secure',\n      // Cannot redefine other params here\n    },\n    {\n      username: 'hono-user-1',\n      password: 'a-secret',\n      // Or here\n    }\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Proxy Implementation with Custom Headers\nDESCRIPTION: Shows a more complex proxy implementation with custom headers such as X-Forwarded-For and handling of response headers like Set-Cookie.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/proxy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/proxy/:path', async (c) => {\n  const res = await proxy(\n    `http://${originServer}/${c.req.param('path')}`,\n    {\n      headers: {\n        ...c.req.header(), // optional, specify only when forwarding all the request data (including credentials) is necessary.\n        'X-Forwarded-For': '127.0.0.1',\n        'X-Forwarded-Host': c.req.header('host'),\n        Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n      },\n    }\n  )\n  res.headers.delete('Set-Cookie')\n  return res\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Zod Validation to Hono Endpoint\nDESCRIPTION: Extends the basic endpoint by adding Zod validation for query parameters, ensuring the 'name' parameter is provided as a string.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zValidator } from '@hono/zod-validator'\nimport { z } from 'zod'\n\napp.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'every' Middleware Combinator in Hono (TypeScript)\nDESCRIPTION: Shows how to use the 'every' combinator in combination with 'some' to create complex middleware logic, applying different rules for local network access.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/combine.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { some, every } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myCheckLocalNetwork } from '@/check-local-network'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client is in local network, skip authentication and rate limiting.\n// Otherwise, apply authentication and rate limiting.\napp.use(\n  '/api/*',\n  some(\n    myCheckLocalNetwork(),\n    every(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path for Routes in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to set a base path for a group of routes, allowing for easy prefixing of multiple routes with a common path segment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst api = new Hono().basePath('/api')\napi.get('/book', (c) => c.text('List Books')) // GET /api/book\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono Application with Multiple Routes\nDESCRIPTION: This snippet demonstrates a simple Hono application with routing for the homepage and an about page, including a custom renderer for the about page using JSX.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// index.tsx\nconst app = new Hono()\n\napp.get('/', (c) => c.html('Hello, World!'))\napp.use('/about', async (c, next) => {\n  c.setRenderer((content, head) => {\n    return c.html(\n      <html>\n        <head>\n          <title>{head.title ?? ''}</title>\n        </head>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\napp.get('/about', (c) => {\n  return c.render('Hello!', { title: 'Hono SSG Page' })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Adding Security Definitions to OpenAPI Spec in TypeScript\nDESCRIPTION: Example of adding security definitions, specifically JWT bearer authentication, to the OpenAPI specification.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      components: {\n        securitySchemes: {\n          bearerAuth: {\n            type: 'http',\n            scheme: 'bearer',\n            bearerFormat: 'JWT',\n          },\n        },\n      },\n      security: [{ bearerAuth: [] }],\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono Application in TypeScript for Deno\nDESCRIPTION: A simple Hono application that responds with 'Hello Deno!' on the root route. It uses Deno.serve to start the server.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Deno!'))\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Hono Client\nDESCRIPTION: Sends a POST request to the '/posts' endpoint with form data. The client uses the TypeScript types to ensure correct parameter types and structure.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await client.posts.$post({\n  form: {\n    title: 'Hello',\n    body: 'Hono is a cool project',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Found Static Files in Hono\nDESCRIPTION: Using the onFound option to specify custom handling when a requested static file is found.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Hono Client Instance\nDESCRIPTION: Initializes a Hono client instance with AppType as a generic parameter, specifying the server URL. This enables full type inference for API endpoints, parameters, and responses.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = hc<AppType>('http://localhost:8787/')\n```\n\n----------------------------------------\n\nTITLE: JWT Decode Usage Example in TypeScript\nDESCRIPTION: Demonstrates how to use the decode() function to extract the header and payload from a JWT token without verifying its signature.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decode } from 'hono/jwt'\n\n// Decode the JWT token\nconst tokenToDecode =\n  'eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9.eyJzdWIiOiAidXNlcjEyMyIsICJyb2xlIjogImFkbWluIn0.JxUwx6Ua1B0D1B0FtCrj72ok5cm1Pkmr_hL82sd7ELA'\n\nconst { header, payload } = decode(tokenToDecode)\n\nconsole.log('Decoded Header:', header)\nconsole.log('Decoded Payload:', payload)\n```\n\n----------------------------------------\n\nTITLE: Implementing response streaming with Hono on AWS Lambda\nDESCRIPTION: Example of implementing AWS Lambda response streaming with Hono using the streamHandle adapter. The code demonstrates writing data to the stream with delays between chunks.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { streamHandle } from 'hono/aws-lambda'\n\nconst app = new Hono()\n\napp.get('/stream', async (c) => {\n  return streamText(c, async (stream) => {\n    for (let i = 0; i < 3; i++) {\n      await stream.writeln(`${i}`)\n      await stream.sleep(1)\n    }\n  })\n})\n\nexport const handler = streamHandle(app)\n```\n\n----------------------------------------\n\nTITLE: Basic Streaming Response Example\nDESCRIPTION: Demonstrates how to create a basic streaming response with abort handling and writing binary data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/stream', (c) => {\n  return stream(c, async (stream) => {\n    // Write a process to be executed when aborted.\n    stream.onAbort(() => {\n      console.log('Aborted!')\n    })\n    // Write a Uint8Array.\n    await stream.write(new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f]))\n    // Pipe a readable stream.\n    await stream.pipe(anotherReadableStream)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Auth to a Specific Route and Method in Hono\nDESCRIPTION: This snippet shows how to restrict Basic Authentication to a specific route and HTTP method (DELETE in this case) in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.get('/auth/page', (c) => {\n  return c.text('Viewing page')\n})\n\napp.delete(\n  '/auth/page',\n  basicAuth({ username: 'hono', password: 'acoolproject' }),\n  (c) => {\n    return c.text('Page deleted')\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with createMiddleware in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to create custom middleware using the createMiddleware function. It includes an example of a simple middleware and a more complex one that takes an argument.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageMiddleware = createMiddleware(async (c, next) => {\n  await next()\n  c.res.headers.set('X-Message', 'Good morning!')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageMiddleware = (message: string) => {\n  return createMiddleware(async (c, next) => {\n    await next()\n    c.res.headers.set('X-Message', message)\n  })\n}\n\napp.use(messageMiddleware('Good evening!'))\n```\n\n----------------------------------------\n\nTITLE: Using Prisma in Hono Route Handler\nDESCRIPTION: Example of how to use the Prisma client function in a Hono route handler, demonstrating type bindings and environment variables.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { sign, verify } from 'hono/jwt'\nimport { getPrisma } from '../usefulFun/prismaFun'\n\nconst app = new Hono<{\n  Bindings: {\n    DATABASE_URL: string\n    JWT_SECRET: string\n  }\n  Variables: {\n    userId: string\n  }\n}>()\n\napp.post('/', async (c) => {\n  const prisma = getPrisma(c.env.DATABASE_URL)\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating JSX with HTML Middleware in Hono\nDESCRIPTION: Demonstrates how to combine JSX and HTML middleware for powerful templating in Hono applications.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from 'hono'\nimport { html } from 'hono/html'\n\nconst app = new Hono()\n\ninterface SiteData {\n  title: string\n  children?: any\n}\n\nconst Layout = (props: SiteData) =>\n  html`<!doctype html>\n    <html>\n      <head>\n        <title>${props.title}</title>\n      </head>\n      <body>\n        ${props.children}\n      </body>\n    </html>`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/:name', (c) => {\n  const { name } = c.req.param()\n  const props = {\n    name: name,\n    siteData: {\n      title: 'JSX with html sample',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Implementation\nDESCRIPTION: Demonstrates how to create and use custom middleware functions for logging and header modification.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Custom logger\napp.use(async (c, next) => {\n  console.log(`[${c.req.method}] ${c.req.url}`)\n  await next()\n})\n\n// Add a custom header\napp.use('/message/*', async (c, next) => {\n  await next()\n  c.header('x-message', 'This is middleware!')\n})\n\napp.get('/message/hello', (c) => c.text('Hello Middleware!'))\n```\n\n----------------------------------------\n\nTITLE: Implementing Nonce Attribute in Secure Headers Middleware\nDESCRIPTION: Demonstrates how to use the NONCE attribute in the secureHeaders middleware for Content-Security-Policy and how to apply it in a TSX component.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\nimport type { SecureHeadersVariables } from 'hono/secure-headers'\n\ntype Variables = SecureHeadersVariables\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      scriptSrc: [NONCE, 'https://allowed1.example.com'],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        {/** contents */}\n        <script\n          src='/js/client.js'\n          nonce={c.get('secureHeadersNonce')}\n        />\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Hono Application in Service Worker Mode\nDESCRIPTION: Example of launching a Hono application in Service Worker mode for Cloudflare Workers. This alternative syntax starts the application using fire() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Service Worker\napp.fire()\n```\n\n----------------------------------------\n\nTITLE: Accessing Netlify Context from Hono application\nDESCRIPTION: Example showing how to access Netlify's Context object through the Hono context environment to get geolocation data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/netlify.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\n// Import the type definition\nimport type { Context } from 'https://edge.netlify.com/'\n\nexport type Env = {\n  Bindings: {\n    context: Context\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.get('/country', (c) =>\n  c.json({\n    'You are in': c.env.context.geo.country?.name,\n  })\n)\n\nexport default handle(app)\n```\n\n----------------------------------------\n\nTITLE: Using ConnInfo Helper to Get Remote Address\nDESCRIPTION: Example of using the ConnInfo Helper to retrieve and display a client's remote IP address in a Hono.js application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.get('/', (c) => {\n  const info = getConnInfo(c) // info is `ConnInfo`\n  return c.text(`Your remote address is ${info.remote.address}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Client and App Types\nDESCRIPTION: Imports the necessary types and client functionality to make type-safe API calls from the client side. The AppType is imported from the server code.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AppType } from '.'\nimport { hc } from 'hono/client'\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Components with HTML Helper in Hono TypeScript\nDESCRIPTION: Demonstrates how to use the html helper to create a functional component without JSX, which can be faster than using memo.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Footer = () => html`\n  <footer>\n    <address>My Address...</address>\n  </footer>\n`\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Middleware for Deno in Hono.js\nDESCRIPTION: This snippet shows how to use the cache middleware in a Hono.js application running on Deno. It sets up caching for all routes with a specific cache name, max-age, and the required 'wait' option for Deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cache.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n    wait: true,\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Override Options in Hono.js\nDESCRIPTION: This example shows how to customize the method override middleware with different options for form, header, and query parameter overrides.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/method-override.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/posts', methodOverride({ app, form: '_custom_name' }))\napp.use(\n  '/posts',\n  methodOverride({ app, header: 'X-METHOD-OVERRIDE' })\n)\napp.use('/posts', methodOverride({ app, query: '_method' }))\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Hono Middleware\nDESCRIPTION: Example of using environment variables in Hono middleware, specifically for basic authentication. This shows how to access bound variables in module worker mode for middleware configuration.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { basicAuth } from 'hono/basic-auth'\n\ntype Bindings = {\n  USERNAME: string\n  PASSWORD: string\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n//...\n\napp.use('/auth/*', async (c, next) => {\n  const auth = basicAuth({\n    username: c.env.USERNAME,\n    password: c.env.PASSWORD,\n  })\n  return auth(c, next)\n})\n```\n\n----------------------------------------\n\nTITLE: JWT Sign Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for the sign() method which generates a JWT token by encoding a payload and signing it with the specified algorithm and secret.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsign(\n  payload: unknown,\n  secret: string,\n  alg?: 'HS256';\n\n): Promise<string>;\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC-mode for WebSocket\nDESCRIPTION: Shows how to implement RPC (Remote Procedure Call) mode with WebSocket Handler, including both server and client-side setup.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nconst wsApp = app.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    //...\n  })\n)\n\nexport type WebSocketApp = typeof wsApp\n\n// client.ts\nconst client = hc<WebSocketApp>('http://localhost:8787')\nconst socket = client.ws.$ws() // A WebSocket object for a client\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Routes with Zod Validation in Hono\nDESCRIPTION: Creates a server-side API route with Zod validator for form data validation. This route accepts POST requests to '/posts' with title and body fields, returning a JSON response with status code 201.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app.post(\n  '/posts',\n  zValidator(\n    'form',\n    z.object({\n      title: z.string(),\n      body: z.string(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json(\n      {\n        ok: true,\n        message: 'Created!',\n      },\n      201\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Origins for CORS in Hono\nDESCRIPTION: This snippet shows how to configure CORS middleware with multiple origins, both as an array and using a function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cors.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '/api3/*',\n  cors({\n    origin: ['https://example.com', 'https://example.org'],\n  })\n)\n\n// Or you can use \"function\"\napp.use(\n  '/api4/*',\n  cors({\n    // `c` is a `Context` object\n    origin: (origin, c) => {\n      return origin.endsWith('.example.com')\n        ? origin\n        : 'http://example.com'\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using ssgParams Middleware for Dynamic Routes\nDESCRIPTION: Example of using the ssgParams middleware to generate static pages for dynamic routes, similar to Next.js's generateStaticParams function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/shops/:id',\n  ssgParams(async () => {\n    const shops = await getShops()\n    return shops.map((shop) => ({ id: shop.id }))\n  }),\n  async (c) => {\n    const shop = await getShop(c.req.param('id'))\n    if (!shop) {\n      return c.notFound()\n    }\n    return c.render(\n      <div>\n        <h1>{shop.name}</h1>\n      </div>\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for TypeScript with WebWorker Support\nDESCRIPTION: TypeScript configuration for a Hono Service Worker project, including WebWorker lib for Service Worker type support.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"WebWorker\"],\n    \"moduleResolution\": \"bundler\"\n  },\n  \"include\": [\"./\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Path in Hono\nDESCRIPTION: Shows how to access the request pathname using the path property, which returns the URL path without the origin or query parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/about/me', async (c) => {\n  const pathname = c.req.path // `/about/me`\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Hono in Deno\nDESCRIPTION: Example of how to serve static files using the serveStatic middleware from hono/deno. It demonstrates various use cases including serving specific files, directories, and fallback options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serveStatic } from 'hono/deno'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Component with Props in Hono TypeScript\nDESCRIPTION: Shows how to create a layout component that receives props and embeds values using the html helper.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SiteData {\n  title: string\n  description: string\n  image: string\n  children?: any\n}\nconst Layout = (props: SiteData) => html`\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>${props.title}</title>\n  <meta name=\"description\" content=\"${props.description}\">\n  <head prefix=\"og: http://ogp.me/ns#\">\n  <meta property=\"og:type\" content=\"article\">\n  <!-- More elements slow down JSX, but not template literals. -->\n  <meta property=\"og:title\" content=\"${props.title}\">\n  <meta property=\"og:image\" content=\"${props.image}\">\n</head>\n<body>\n  ${props.children}\n</body>\n</html>\n`\n\nconst Content = (props: { siteData: SiteData; name: string }) => (\n  <Layout {...props.siteData}>\n    <h1>Hello {props.name}</h1>\n  </Layout>\n)\n\napp.get('/', (c) => {\n  const props = {\n    name: 'World',\n    siteData: {\n      title: 'Hello <> World',\n      description: 'This is a description',\n      image: 'https://example.com/image.png',\n    },\n  }\n  return c.html(<Content {...props} />)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Typed Response Data from Hono Client\nDESCRIPTION: Shows how to extract and use the typed response data from a Hono client request. The json() method returns data with the correct type inferred from the API definition.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = await res.json()\nconsole.log(`${data.message}`)\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Hono JSX\nDESCRIPTION: A basic counter implementation using Hono's JSX showing state management and DOM rendering. Demonstrates the use of useState hook and event handling.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'hono/jsx'\nimport { render } from 'hono/jsx/dom'\n\nfunction Counter() {\n  const [count, setCount] = useState(0)\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <html>\n      <body>\n        <Counter />\n      </body>\n    </html>\n  )\n}\n\nconst root = document.getElementById('root')\nrender(<App />, root)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Logger in Hono Route Handler (TypeScript)\nDESCRIPTION: Illustrates how to use a custom logger function within a Hono route handler to log additional information about a blog post.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/logger.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/blog', (c) => {\n  // Routing logic\n\n  customLogger('Blog saved:', `Path: ${blog.url},`, `ID: ${blog.id}`)\n  // Output\n  // <-- POST /blog\n  // Blog saved: Path: /blog/example, ID: 1\n  // --> POST /blog 201 93ms\n\n  // Return Context\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Prisma Client Function for Hono\nDESCRIPTION: Function to initialize and configure Prisma Client with acceleration for use in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client/edge'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nexport const getPrisma = (database_url: string) => {\n  const prisma = new PrismaClient({\n    datasourceUrl: database_url,\n  }).$extends(withAccelerate())\n  return prisma\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Middleware for Cloudflare Workers in Hono.js\nDESCRIPTION: This example demonstrates how to use the cache middleware in a Hono.js application running on Cloudflare Workers. It sets up caching for all routes with a specific cache name and max-age.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cache.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '*',\n  cache({\n    cacheName: 'my-app',\n    cacheControl: 'max-age=3600',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced View Transition with Keyframes\nDESCRIPTION: Shows how to implement view transitions with custom keyframe animations using viewTransition and keyframes functions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, startViewTransition } from 'hono/jsx'\nimport { viewTransition } from 'hono/jsx/dom/css'\nimport { css, keyframes, Style } from 'hono/css'\n\nconst rotate = keyframes`\n  from {\n    rotate: 0deg;\n  }\n  to {\n    rotate: 360deg;\n  }\n`\n\nexport default function App() {\n  const [showLargeImage, setShowLargeImage] = useState(false)\n  const [transitionNameClass] = useState(() =>\n    viewTransition(css`\n      ::view-transition-old() {\n        animation-name: ${rotate};\n      }\n      ::view-transition-new() {\n        animation-name: ${rotate};\n      }\n    `)\n  )\n  return (\n    <>\n      <Style />\n      <button\n        onClick={() =>\n          startViewTransition(() =>\n            setShowLargeImage((state) => !state)\n          )\n        }\n      >\n        Click!\n      </button>\n      <div>\n        {!showLargeImage ? (\n          <img src='https://hono.dev/images/logo.png' />\n        ) : (\n          <div\n            class={css`\n              ${transitionNameClass}\n              background: url('https://hono.dev/images/logo-large.png');\n              background-size: contain;\n              background-repeat: no-repeat;\n              background-position: center;\n              width: 600px;\n              height: 600px;\n            `}\n          ></div>\n        )}\n      </div>\n    </>\n  )\n```\n\n----------------------------------------\n\nTITLE: Testing POST Requests in Hono Applications\nDESCRIPTION: Shows how to test POST requests by passing a custom Request object to the app.request() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntest('POST /message is ok', async () => {\n  const req = new Request('Hello!', {\n    method: 'POST',\n  })\n  const res = await app.request(req)\n  expect(res.status).toBe(201)\n})\n```\n\n----------------------------------------\n\nTITLE: File Upload with Hono Client\nDESCRIPTION: Demonstrates how to upload files using the Hono client with form data. The client creates a File object to send, and the server validates it using Zod.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// client\nconst res = await client.user.picture.$put({\n  form: {\n    file: new File([fileToUpload], filename, { type: fileToUpload.type })\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Pretty JSON Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Hono framework and the Pretty JSON middleware in a TypeScript environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/pretty-json.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { prettyJSON } from 'hono/pretty-json'\n```\n\n----------------------------------------\n\nTITLE: Using 'some' Middleware Combinator in Hono (TypeScript)\nDESCRIPTION: Illustrates the use of the 'some' combinator to apply either bearer authentication or rate limiting, prioritizing authentication if a valid token is present.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/combine.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { some } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\nimport { myRateLimit } from '@/rate-limit'\n\n// If client has a valid token, skip rate limiting.\n// Otherwise, apply rate limiting.\napp.use(\n  '/api/*',\n  some(bearerAuth({ token }), myRateLimit({ limit: 100 }))\n)\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Hono in Bun\nDESCRIPTION: Configuration for serving static files using Hono's serveStatic middleware in a Bun environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { serveStatic } from 'hono/bun'\n\nconst app = new Hono()\n\napp.use('/static/*', serveStatic({ root: './' }))\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\napp.get('/', (c) => c.text('You can access: /static/hello.txt'))\napp.get('*', serveStatic({ path: './static/fallback.txt' }))\n```\n\n----------------------------------------\n\nTITLE: Using raw() Function for Unescaped HTML in Hono TypeScript\nDESCRIPTION: Demonstrates how to use the raw() function to include unescaped HTML content in the response.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  const name = 'John &quot;Johnny&quot; Smith'\n  return c.html(html`<p>I'm ${raw(name)}.</p>`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Adapter in Hono for Cloudflare Workers\nDESCRIPTION: An example of using the Cloudflare Workers-specific WebSocket adapter in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n\napp.get(\n  '/ws',\n  upgradeWebSocket((c) => {\n    // ...\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Responses with JSX Renderer Middleware\nDESCRIPTION: Demonstrates how to set up streaming responses using the JSX Renderer Middleware with an async component.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Hi!</div>\n}\n\napp.get(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>\n            <h1>SSR Streaming</h1>\n            {children}\n          </body>\n        </html>\n      )\n    },\n    { stream: true }\n  )\n)\n\napp.get('/', (c) => {\n  return c.render(\n    <Suspense fallback={<div>loading...</div>}>\n      <AsyncComponent />\n    </Suspense>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono with Next.js App Router on Node.js runtime\nDESCRIPTION: TypeScript code for setting up a Hono application with Next.js App Router using Node.js runtime.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\n\nexport const runtime = 'nodejs'\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport const GET = handle(app)\nexport const POST = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Timeout Middleware in Hono.js (TypeScript)\nDESCRIPTION: Demonstrates how to apply a 5-second timeout to an API route using the default settings of the timeout middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/timeout.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\n// Applying a 5-second timeout\napp.use('/api', timeout(5000))\n\n// Handling a route\napp.get('/api/data', async (c) => {\n  // Your route handler logic\n  return c.json({ data: 'Your data here' })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers and Status in Hono\nDESCRIPTION: Shows how to use c.body() to create an HTTP response with custom headers and status code.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/welcome', (c) => {\n  // Set headers\n  c.header('X-Message', 'Hello!')\n  c.header('Content-Type', 'text/plain')\n\n  // Set HTTP status code\n  c.status(201)\n\n  // Return the response body\n  return c.body('Thank you for coming')\n})\n```\n\n----------------------------------------\n\nTITLE: Correct Not Found Handling in Hono RPC\nDESCRIPTION: Demonstrates the proper way to handle 'not found' responses in Hono RPC by using c.json() with explicit status codes, enabling correct type inference on the client.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Testing with Request Instance\nDESCRIPTION: Demonstrates how to test an endpoint using a Request class instance instead of options object.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('POST /posts', async () => {\n  const req = new Request('http://localhost/posts', {\n    method: 'POST',\n  })\n  const res = await app.request(req)\n  expect(res.status).toBe(201)\n  expect(res.headers.get('X-Custom')).toBe('Thank you')\n  expect(await res.json()).toEqual({\n    message: 'Created',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Type Inference with Hono Client\nDESCRIPTION: Demonstrates how to infer request and response types from the Hono client. This enables static type checking for API interactions without redundant type definitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferRequestType, InferResponseType } from 'hono/client'\n\n// InferRequestType\nconst $post = client.todo.$post\ntype ReqType = InferRequestType<typeof $post>['form']\n\n// InferResponseType\ntype ResType = InferResponseType<typeof $post>\n```\n\n----------------------------------------\n\nTITLE: Alternative Bun.serve Configuration for Large Requests\nDESCRIPTION: Provides an alternative way to configure Bun.serve for handling large requests with Hono's Body Limit Middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/body-limit.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nBun.serve({\n  fetch(req, server) {\n    return app.fetch(req, { ip: server.requestIP(req) })\n  },\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n})\n```\n\n----------------------------------------\n\nTITLE: Installing hono-openapi and Validation Libraries\nDESCRIPTION: Commands for installing hono-openapi along with various validation libraries like Zod, Valibot, ArkType, and TypeBox.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Zod\npnpm add hono-openapi @hono/zod-validator zod zod-openapi\n\n# For Valibot\npnpm add hono-openapi @hono/valibot-validator valibot @valibot/to-json-schema\n\n# For ArkType\npnpm add hono-openapi @hono/arktype-validator arktype\n\n# For TypeBox\npnpm add hono-openapi @hono/typebox-validator @sinclair/typebox\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hono.js Lambda@Edge Handler\nDESCRIPTION: Implements a simple Hello World endpoint using Hono.js for Lambda@Edge with a basic GET route handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/lambda-edge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono/lambda-edge'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono on Lambda@Edge!'))\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with showRoutes\nDESCRIPTION: Example showing how to set up routes in a Hono application and use showRoutes() to display them. Includes GET and POST endpoints with path parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/dev.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono().basePath('/v1')\n\napp.get('/posts', (c) => {\n  // ...\n})\n\napp.get('/posts/:id', (c) => {\n  // ...\n})\n\napp.post('/posts', (c) => {\n  // ...\n})\n\nshowRoutes(app, {\n  verbose: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Factory with Default App Options in Hono (TypeScript)\nDESCRIPTION: Shows how to create a factory with default application options, which will be applied to any app created by the factory.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst factory = createFactory({\n  defaultAppOptions: { strict: false },\n})\n\nconst app = factory.createApp() // `strict: false` is applied\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Files with parseBody() in Hono\nDESCRIPTION: Demonstrates how to access multiple files from form data using the array notation in field names. Field names must have the [] postfix to be recognized as arrays.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await c.req.parseBody()\nbody['foo[]']\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling in IP Restriction Middleware\nDESCRIPTION: This example demonstrates how to customize the error response when access is denied by the IP restriction middleware. It returns a custom text message with the blocked IP address.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/ip-restriction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  '*',\n  ipRestriction(\n    getConnInfo,\n    {\n      denyList: ['192.168.2.0/24'],\n    },\n    async (remote, c) => {\n      return c.text(`Blocking access from ${remote.addr}`, 403)\n    }\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloudflare Workers Bindings with Context Storage\nDESCRIPTION: This snippet illustrates how to access Cloudflare Workers bindings outside the handler using the Context Storage Middleware in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/context-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Bindings: {\n    KV: KVNamespace\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\nconst setKV = (value: string) => {\n  return getContext<Env>().env.KV.put('key', value)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cause Option in HTTPException\nDESCRIPTION: Example of using the cause option in HTTPException to include additional error context when catching and rethrowing errors.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/exception.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/auth', async (c, next) => {\n  try {\n    authorize(c)\n  } catch (e) {\n    throw new HTTPException(401, { message, cause: e })\n  }\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Implementation\nDESCRIPTION: Demonstrates the client-side implementation that connects to a Hono WebSocket server, sending a timestamp message every second.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\nimport { hc } from 'hono/client'\nimport type app from './server'\n\nconst client = hc<typeof app>('http://localhost:8787')\nconst ws = client.ws.$ws(0)\n\nws.addEventListener('open', () => {\n  setInterval(() => {\n    ws.send(new Date().toString())\n  }, 1000)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Status Codes in Hono Server Routes\nDESCRIPTION: Defines a server route that returns different status codes based on request results. The status codes are explicitly specified in c.json() calls to enable type inference on the client.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nconst app = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.json({ error: 'not found' }, 404) // Specify 404\n    }\n\n    return c.json({ post }, 200) // Specify 200\n  }\n)\n\nexport type AppType = typeof app\n```\n\n----------------------------------------\n\nTITLE: Using AfterGenerateHook for Result Processing\nDESCRIPTION: Example of using the afterGenerateHook to process the results of static site generation, such as logging the names of generated files.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ntoSSG(app, fs, {\n  afterGenerateHook: (result) => {\n    if (result.files) {\n      result.files.forEach((file) => console.log(file))\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Routes in Main Hono Application\nDESCRIPTION: Demonstrates how to combine multiple route handlers (authors and books) into a main Hono application. It exports the combined app type for use with the client.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport authors from './authors'\nimport books from './books'\n\nconst app = new Hono()\n\nconst routes = app.route('/authors', authors).route('/books', books)\n\nexport default app\nexport type AppType = typeof routes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Route Path with routePath() in Hono\nDESCRIPTION: Shows how to retrieve the registered route path pattern using the routePath property, which returns the original route pattern with parameter placeholders.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/posts/:id', (c) => {\n  return c.json({ path: c.req.routePath })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing EventContext Data in Route Handler\nDESCRIPTION: Example showing how to access EventContext data in a Hono route handler that was set in a middleware function for Cloudflare Pages.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\n// functions/api/[[route]].ts\nimport type { EventContext } from 'hono/cloudflare-pages'\nimport { handle } from 'hono/cloudflare-pages'\n\n// ...\n\ntype Env = {\n  Bindings: {\n    eventContext: EventContext\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: `Hello, ${c.env.eventContext.data.user}!`, // 'Joe'\n  })\n})\n\nexport const onRequest = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy in Secure Headers Middleware\nDESCRIPTION: Shows an advanced configuration of the secureHeaders middleware, including setting up Content-Security-Policy, reporting endpoints, and various security directives.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.use(\n  '/test',\n  secureHeaders({\n    reportingEndpoints: [\n      {\n        name: 'endpoint-1',\n        url: 'https://example.com/reports',\n      },\n    ],\n    contentSecurityPolicy: {\n      defaultSrc: [\"'self'\"],\n      baseUri: [\"'self'\"],\n      childSrc: [\"'self'\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\", 'https:', 'data:'],\n      formAction: [\"'self'\"],\n      frameAncestors: [\"'self'\"],\n      frameSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", 'data:'],\n      manifestSrc: [\"'self'\"],\n      mediaSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      reportTo: 'endpoint-1',\n      sandbox: ['allow-same-origin', 'allow-scripts'],\n      scriptSrc: [\"'self'\"],\n      scriptSrcAttr: [\"'none'\"],\n      scriptSrcElem: [\"'self'\"],\n      styleSrc: [\"'self'\", 'https:', \"'unsafe-inline'\"],\n      styleSrcAttr: ['none'],\n      styleSrcElem: [\"'self'\", 'https:', \"'unsafe-inline'\"],\n      upgradeInsecureRequests: [],\n      workerSrc: [\"'self'\"],\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Text Streaming Response Example\nDESCRIPTION: Shows how to stream text content with automatic content-type headers and chunked encoding.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/streamText', (c) => {\n  return streamText(c, async (stream) => {\n    // Write a text with a new line ('\\n').\n    await stream.writeln('Hello')\n    // Wait 1 second.\n    await stream.sleep(1000)\n    // Write a text without a new line.\n    await stream.write(`Hono!`)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CDK stack for Lambda and API Gateway\nDESCRIPTION: AWS CDK code that defines the infrastructure for deploying a Hono application to Lambda with API Gateway. Creates a NodeJS Lambda function and exposes it through both function URL and API Gateway.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cdk from 'aws-cdk-lib'\nimport { Construct } from 'constructs'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport * as apigw from 'aws-cdk-lib/aws-apigateway'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\n\nexport class MyAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n\n    const fn = new NodejsFunction(this, 'lambda', {\n      entry: 'lambda/index.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n    fn.addFunctionUrl({\n      authType: lambda.FunctionUrlAuthType.NONE,\n    })\n    new apigw.LambdaRestApi(this, 'myapi', {\n      handler: fn,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating CSS Helper with Secure Headers in Hono\nDESCRIPTION: Example of using the CSS helper with Secure Headers middleware to maintain Content-Security-Policy compliance by adding nonce attributes to Style components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { secureHeaders, NONCE } from 'hono/secure-headers'\n\napp.get(\n  '*',\n  secureHeaders({\n    contentSecurityPolicy: {\n      // Set the pre-defined nonce value to `styleSrc`:\n      styleSrc: [NONCE],\n    },\n  })\n)\n\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        {/* Set the `nonce` attribute on the css helpers `style` and `script` elements */}\n        <Style nonce={c.get('secureHeadersNonce')} />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Validated Data with valid() in Hono\nDESCRIPTION: Demonstrates how to retrieve validated data using the valid() method, which works with various validation targets like form, json, query, header, cookie, and param.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/posts', async (c) => {\n  const { title, body } = c.req.valid('form')\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schemas for OpenAPI in TypeScript\nDESCRIPTION: Demonstrates how to define Zod schemas for request parameters and response bodies, including OpenAPI metadata.\nSOURCE: https://github.com/honojs/website/blob/main/examples/zod-openapi.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from '@hono/zod-openapi'\n\nconst ParamsSchema = z.object({\n  id: z\n    .string()\n    .min(3)\n    .openapi({\n      param: {\n        name: 'id',\n        in: 'path',\n      },\n      example: '1212121',\n    }),\n})\n\nconst UserSchema = z\n  .object({\n    id: z.string().openapi({\n      example: '123',\n    }),\n    name: z.string().openapi({\n      example: 'John Doe',\n    }),\n    age: z.number().openapi({\n      example: 42,\n    }),\n  })\n  .openapi('User')\n```\n\n----------------------------------------\n\nTITLE: Extending ContextVariableMap Interface in Hono\nDESCRIPTION: Shows how to extend the ContextVariableMap interface to add type definitions for variables used in middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst mw = createMiddleware(async (c, next) => {\n  c.set('result', 'some values') // result is a string\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Hono Middleware with Cloudflare Pages\nDESCRIPTION: Example of using Hono's handleMiddleware adapter to use Hono middleware in Cloudflare Pages functions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\n// functions/_middleware.ts\nimport { handleMiddleware } from 'hono/cloudflare-pages'\n\nexport const onRequest = handleMiddleware(async (c, next) => {\n  console.log(`You are accessing ${c.req.url}`)\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Context Storage Middleware in Hono Application\nDESCRIPTION: This example demonstrates how to use the Context Storage Middleware in a Hono application. It shows setting a variable in the context and accessing it outside the handler using getContext().\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/context-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Variables: {\n    message: string\n  }\n}\n\nconst app = new Hono<Env>()\n\napp.use(contextStorage())\n\napp.use(async (c, next) => {\n  c.set('message', 'Hello!')\n  await next()\n})\n\n// You can access the variable outside the handler.\nconst getMessage = () => {\n  return getContext<Env>().var.message\n}\n\napp.get('/', (c) => {\n  return c.text(getMessage())\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Durable Objects in JSONC\nDESCRIPTION: This wrangler.jsonc configuration file sets up the Cloudflare Worker project for use with Durable Objects. It specifies the main script, compatibility date, migrations for the Counter class, and bindings for the Durable Object.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-durable-objects.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"$schema\": \"node_modules/wrangler/config-schema.json\",\n  \"name\": \"durable\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-04-14\",\n  \"migrations\": [\n    {\n      \"new_sqlite_classes\": [\"Counter\"],\n      \"tag\": \"v1\"\n    }\n  ],\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"class_name\": \"Counter\",\n        \"name\": \"COUNTER\"\n      }\n    ]\n  },\n  \"observability\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Hono project with AWS CDK using npm\nDESCRIPTION: Commands to initialize a new AWS CDK project with TypeScript, install Hono, and create the necessary file structure using npm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing EventContext in Cloudflare Pages Middleware\nDESCRIPTION: Example showing how to access and modify the EventContext object in a Cloudflare Pages middleware function using Hono.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\n// functions/_middleware.ts\nimport { handleMiddleware } from 'hono/cloudflare-pages'\n\nexport const onRequest = [\n  handleMiddleware(async (c, next) => {\n    c.env.eventContext.data.user = 'Joe'\n    await next()\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Using Secure Headers Middleware with Default Settings in TypeScript\nDESCRIPTION: Demonstrates how to apply the secureHeaders middleware to a Hono app instance using default settings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.use(secureHeaders())\n```\n\n----------------------------------------\n\nTITLE: Testing Hono Application with Bun\nDESCRIPTION: Example of writing and running tests for a Hono application using Bun's built-in test runner.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { describe, expect, it } from 'bun:test'\nimport app from '.'\n\ndescribe('My first test', () => {\n  it('Should return 200 Response', async () => {\n    const req = new Request('http://localhost/')\n    const res = await app.fetch(req)\n    expect(res.status).toBe(200)\n  })\n})\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun test index.test.ts\n```\n\n----------------------------------------\n\nTITLE: Routing with Host Header in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to handle routing based on the 'host' header value, allowing for virtual hosting scenarios where different content is served based on the requested hostname.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/routing.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono({\n  getPath: (req) =>\n    '/' +\n    req.headers.get('host') +\n    req.url.replace(/^https?:\\/\\/[^/]+(\\/[^?]*).*/, '$1'),\n})\n\napp.get('/www1.example.com/hello', (c) => c.text('hello www1'))\n\n// A following request will match the route:\n// new Request('http://www1.example.com/hello', {\n//  headers: { host: 'www1.example.com' },\n// })\n```\n\n----------------------------------------\n\nTITLE: Accessing JWT Payload in Hono with JWK Auth\nDESCRIPTION: Shows how to access the JWT payload after successful authentication using the JWK auth middleware in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwk.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.use(\n  '/auth/*',\n  jwk({\n    jwks_uri: `https://${backendServer}/.well-known/jwks.json`,\n  })\n)\n\napp.get('/auth/page', (c) => {\n  const payload = c.get('jwtPayload')\n  return c.json(payload) // eg: { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"iat\": 1516239022 }\n})\n```\n\n----------------------------------------\n\nTITLE: Async Components in Hono JSX\nDESCRIPTION: Shows how to create and use async components in Hono JSX, which are automatically awaited when rendered with c.html().\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst AsyncComponent = async () => {\n  await new Promise((r) => setTimeout(r, 1000)) // sleep 1s\n  return <div>Done!</div>\n}\n\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <body>\n        <AsyncComponent />\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Files with Same Name using parseBody() in Hono\nDESCRIPTION: Shows how to access multiple files with the same field name by enabling the 'all' option. This option automatically converts multiple values to arrays.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await c.req.parseBody({ all: true })\nbody['foo']\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fetch Method with Hono Client\nDESCRIPTION: Shows how to use a custom fetch method with the Hono client, specifically using Cloudflare Worker's Service Bindings. This enables directing client requests to specific backend services.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// src/client.ts\nconst client = hc<CreateProfileType>('/', {\n  fetch: c.env.AUTH.fetch.bind(c.env.AUTH),\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Lambda RequestContext in Hono\nDESCRIPTION: Example demonstrating how to access the AWS Lambda request context in Hono routes using the LambdaEvent binding. This provides access to API Gateway context information.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport type { LambdaEvent } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  event: LambdaEvent\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.event.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Setting a Response Renderer in Hono\nDESCRIPTION: Example of using c.setRenderer() to create a layout wrapper for responses using JSX.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async (c, next) => {\n  c.setRenderer((content) => {\n    return c.html(\n      <html>\n        <body>\n          <p>{content}</p>\n        </body>\n      </html>\n    )\n  })\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom MIME Types for Static Files in Hono\nDESCRIPTION: Configuring additional MIME types for specific file extensions when serving static files with Hono.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Header Values in Secure Headers Middleware\nDESCRIPTION: Demonstrates how to override default header values in the secureHeaders middleware using custom string values.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    strictTransportSecurity:\n      'max-age=63072000; includeSubDomains; preload',\n    xFrameOptions: 'DENY',\n    xXssProtection: '1',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Cloudflare Pages Middleware\nDESCRIPTION: Example of a Cloudflare Pages middleware function using the native Cloudflare Pages middleware system.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\n// functions/_middleware.ts\nexport async function onRequest(pagesContext) {\n  console.log(`You are accessing ${pagesContext.request.url}`)\n  return await pagesContext.next()\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Status Codes in Hono Client\nDESCRIPTION: Demonstrates how to handle different status codes from the client side. The response types are inferred based on the status codes specified on the server.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\nconst client = hc<AppType>('http://localhost:8787/')\n\nconst res = await client.posts.$get({\n  query: {\n    id: '123',\n  },\n})\n\nif (res.status === 404) {\n  const data: { error: string } = await res.json()\n  console.log(data.error)\n}\n\nif (res.ok) {\n  const data: { post: Post } = await res.json()\n  console.log(data.post)\n}\n\n// { post: Post } | { error: string }\ntype ResponseType = InferResponseType<typeof client.posts.$get>\n\n// { post: Post }\ntype ResponseType200 = InferResponseType<\n  typeof client.posts.$get,\n  200\n>\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Headers\nDESCRIPTION: Demonstrates how to include custom headers in test requests, including authorization tokens and content type specifications.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\nimport { describe, test, expect } from 'vitest' // Or your preferred test runner\nimport app from './app'\n\ndescribe('Search Endpoint', () => {\n  // Create the test client from the app instance\n  const client = testClient(app)\n\n  it('should return search results', async () => {\n    // Include the token in the headers and set the content type\n    const token = 'this-is-a-very-clean-token';\n    const res = await client.search.$get({\n      query: { q: 'hono' },\n    }, \n    {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": `application/json`\n      }\n    })\n\n    // Assertions\n    expect(res.status).toBe(200)\n    expect(await res.json()).toEqual({\n      query: 'hono',\n      results: ['result1', 'result2'],\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing JWT Helper Functions in TypeScript\nDESCRIPTION: Shows how to import the JWT helper functions (decode, sign, verify) from the Hono JWT module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decode, sign, verify } from 'hono/jwt'\n```\n\n----------------------------------------\n\nTITLE: Integrating SWR with Hono Client in React\nDESCRIPTION: Demonstrates how to use SWR (React Hooks library for data fetching) with Hono's client in a React application. It shows the setup of a custom fetcher function and usage of useSWR hook.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport useSWR from 'swr'\nimport { hc } from 'hono/client'\nimport type { InferRequestType } from 'hono/client'\nimport type { AppType } from '../functions/api/[[route]]'\n\nconst App = () => {\n  const client = hc<AppType>('/api')\n  const $get = client.hello.$get\n\n  const fetcher =\n    (arg: InferRequestType<typeof $get>) => async () => {\n      const res = await $get(arg)\n      return await res.json()\n    }\n\n  const { data, error, isLoading } = useSWR(\n    'api-hello',\n    fetcher({\n      query: {\n        name: 'SWR',\n      },\n    })\n  )\n\n  if (error) return <div>failed to load</div>\n  if (isLoading) return <div>loading...</div>\n\n  return <h1>{data?.message}</h1>\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix as Hono Middleware in TypeScript\nDESCRIPTION: This code snippet shows how to set up Remix as Hono middleware using the remix-hono package. It imports the necessary build module from Remix and the remix handler from remix-hono, then adds it as middleware to the Hono app.\nSOURCE: https://github.com/honojs/website/blob/main/examples/with-remix.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as build from '@remix-run/dev/server-build'\nimport { remix } from 'remix-hono/handler'\n\napp.use('*', remix({ build, mode: process.env.NODE_ENV }))\n```\n\n----------------------------------------\n\nTITLE: Proxy Implementation Using Request Object\nDESCRIPTION: Demonstrates how to pass the c.req object directly to the proxy function while handling all HTTP methods with custom headers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/proxy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.all('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`, {\n    ...c.req, // optional, specify only when forwarding all the request data (including credentials) is necessary.\n    headers: {\n      ...c.req.header(),\n      'X-Forwarded-For': '127.0.0.1',\n      'X-Forwarded-Host': c.req.header('host'),\n      Authorization: undefined, // do not propagate request headers contained in c.req.header('Authorization')\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Header validation with case sensitivity warning\nDESCRIPTION: Demonstrates the correct approach for validating HTTP headers, emphasizing the need to use lowercase header names.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ this will not work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // idempotencyKey is always undefined\n    // so this middleware always return 400 as not expected\n    const idempotencyKey = value['Idempotency-Key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw new HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n\n// ✅ this will work\napp.post(\n  '/api',\n  validator('header', (value, c) => {\n    // can retrieve the value of the header as expected\n    const idempotencyKey = value['idempotency-key']\n\n    if (idempotencyKey == undefined || idempotencyKey === '') {\n      throw new HTTPException(400, {\n        message: 'Idempotency-Key is required',\n      })\n    }\n    return { idempotencyKey }\n  }),\n  (c) => {\n    const { idempotencyKey } = c.req.valid('header')\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Variables in Hono with Generics\nDESCRIPTION: How to define types for context variables to ensure type safety when using c.set() and c.get().\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype Variables = {\n  message: string\n}\n\nconst app = new Hono<{ Variables: Variables }>()\n```\n\n----------------------------------------\n\nTITLE: Custom Detection Order for Language Detector in Hono.js\nDESCRIPTION: Demonstrates how to customize the detection order, prioritizing URL path detection for language identification.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  languageDetector({\n    order: ['path', 'cookie', 'querystring', 'header'],\n    lookupFromPathIndex: 0, // /en/profile → index 0 = 'en'\n    supportedLanguages: ['en', 'ar'],\n    fallbackLanguage: 'en',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: SSG Hook Type Definitions\nDESCRIPTION: TypeScript type definitions for the three hook functions that can be used to customize the SSG process: BeforeRequestHook, AfterResponseHook, and AfterGenerateHook.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport type BeforeRequestHook = (req: Request) => Request | false\nexport type AfterResponseHook = (res: Response) => Response | false\nexport type AfterGenerateHook = (\n  result: ToSSGResult\n) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using 'except' Middleware Combinator in Hono (TypeScript)\nDESCRIPTION: Demonstrates the use of the 'except' combinator to skip authentication for public API routes while requiring it for all other routes.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/combine.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { except } from 'hono/combine'\nimport { bearerAuth } from 'hono/bearer-auth'\n\n// If client is accessing public API, skip authentication.\n// Otherwise, require a valid token.\napp.use('/api/*', except('/api/public/*', bearerAuth({ token })))\n```\n\n----------------------------------------\n\nTITLE: Using Context Variables via c.var in Hono\nDESCRIPTION: Shows how to access variables through the c.var shorthand property.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = c.var.client.oneMethod()\n```\n\n----------------------------------------\n\nTITLE: Using $url() Method in Hono Client\nDESCRIPTION: Shows how to use the $url() method to generate URL objects for endpoints. This allows direct access to URL properties like pathname.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app\n  .get('/api/posts', (c) => c.json({ posts }))\n  .get('/api/posts/:id', (c) => c.json({ post }))\n\nconst client = hc<typeof route>('http://localhost:8787/')\n\nlet url = client.api.posts.$url()\nconsole.log(url.pathname) // `/api/posts`\n\nurl = client.api.posts[':id'].$url({\n  param: {\n    id: '123',\n  },\n})\nconsole.log(url.pathname) // `/api/posts/123`\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout for SSE Streams in Hono.js (TypeScript)\nDESCRIPTION: Demonstrates how to implement a timeout for Server-Sent Events (SSE) streams using setTimeout and stream.close, as the timeout middleware cannot be directly used with streams.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/timeout.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/sse', async (c) => {\n  let id = 0\n  let running = true\n  let timer: number | undefined\n\n  return streamSSE(c, async (stream) => {\n    timer = setTimeout(() => {\n      console.log('Stream timeout reached, closing stream')\n      stream.close()\n    }, 3000) as unknown as number\n\n    stream.onAbort(async () => {\n      console.log('Client closed connection')\n      running = false\n      clearTimeout(timer)\n    })\n\n    while (running) {\n      const message = `It is ${new Date().toISOString()}`\n      await stream.writeSSE({\n        data: message,\n        event: 'time-update',\n        id: String(id++),\n      })\n      await stream.sleep(1000)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Route Types for RPC in Hono\nDESCRIPTION: Shows how to export the type of a route to enable RPC functionality. The exported type will be used by the client to ensure type-safe API calls.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/stacks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app.get(\n  '/hello',\n  zValidator(\n    'query',\n    z.object({\n      name: z.string(),\n    })\n  ),\n  (c) => {\n    const { name } = c.req.valid('query')\n    return c.json({\n      message: `Hello! ${name}`,\n    })\n  }\n)\n\nexport type AppType = typeof route\n```\n\n----------------------------------------\n\nTITLE: Creating Hono App with factory.createApp (TypeScript)\nDESCRIPTION: Demonstrates how to use factory.createApp() to create a Hono instance with proper types, avoiding redundancy in environment type definitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFactory } from 'hono/factory'\n\n// ...\n\n// Set the `Env` to `createFactory()`\nconst factory = createFactory<Env>()\n\nconst app = factory.createApp()\n\n// factory also has `createMiddleware()`\nconst mw = factory.createMiddleware(async (c, next) => {\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Factory with Database Initialization in Hono (TypeScript)\nDESCRIPTION: Shows how to create a factory with an initApp option to initialize a database connection for all apps created by the factory.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// factory-with-db.ts\ntype Env = {\n  Bindings: {\n    MY_DB: D1Database\n  }\n  Variables: {\n    db: DrizzleD1Database\n  }\n}\n\nexport default createFactory<Env>({\n  initApp: (app) => {\n    app.use(async (c, next) => {\n      const db = drizzle(c.env.MY_DB)\n      c.set('db', db)\n      await next()\n    })\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// crud.ts\nimport factoryWithDB from './factory-with-db'\n\nconst app = factoryWithDB.createApp()\n\napp.post('/posts', (c) => {\n  c.var.db.insert()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Body as FormData in Hono\nDESCRIPTION: Shows how to parse a request body as a FormData object using the formData() method, useful for accessing raw form data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.formData()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Hono's JSX types with htmx attributes\nDESCRIPTION: TypeScript code to extend Hono's JSX namespace, adding htmx attributes to the HTMLAttributes interface for improved type checking and autocompletion in JSX.\nSOURCE: https://github.com/honojs/website/blob/main/examples/htmx.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// A demo of how to augment foreign types with htmx attributes.\n// In this case, Hono sources its types from its own namespace, so we do the same\n// and directly extend its namespace.\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface HTMLAttributes extends HtmxAttributes {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side File Upload Handler in Hono\nDESCRIPTION: Defines a server route that handles file uploads. It uses the Zod validator to ensure the uploaded content is a valid File object.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// server\nconst route = app.put(\n  \"/user/picture\",\n  zValidator(\n    \"form\",\n    z.object({\n      file: z.instanceof(File),\n    }),\n  ),\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Hono with Other Cloudflare Worker Event Handlers\nDESCRIPTION: Example of how to integrate Hono with other Cloudflare Worker event handlers like 'scheduled'. This allows combining Hono's HTTP handling with other Workers capabilities.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\nexport default {\n  fetch: app.fetch,\n  scheduled: async (batch, env) => {},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Cloudflare Pages Development\nDESCRIPTION: Configuration file for Vite that sets up development server and build for Cloudflare Pages using Hono adapters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport devServer from '@hono/vite-dev-server'\nimport adapter from '@hono/vite-dev-server/cloudflare'\nimport build from '@hono/vite-cloudflare-pages'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    devServer({\n      entry: 'src/index.tsx',\n      adapter, // Cloudflare Adapter\n    }),\n    build(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Language Code Transformation in Language Detector\nDESCRIPTION: Shows how to normalize complex language codes using a custom conversion function in the Language Detector middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  languageDetector({\n    convertDetectedLanguage: (lang) => lang.split('-')[0],\n    supportedLanguages: ['en', 'ja'],\n    fallbackLanguage: 'en',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Not Found Files in Static File Serving with Hono\nDESCRIPTION: Example of using the onNotFound option to specify custom handling when a requested static file is not found.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Execution Context in Cloudflare Workers\nDESCRIPTION: Example of using c.executionCtx to perform background operations in Cloudflare Workers environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// ExecutionContext object\napp.get('/foo', async (c) => {\n  c.executionCtx.waitUntil(c.env.KV.put(key, data))\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Middleware Creation\nDESCRIPTION: Shows how to create reusable middleware with proper TypeScript type definitions using createMiddleware helper.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMiddleware } from 'hono/factory'\n\nconst logger = createMiddleware(async (c, next) => {\n  console.log(`[${c.req.method}] ${c.req.url}`)\n  await next()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Node.js Build Script for SSG\nDESCRIPTION: A Node.js script that imports a Hono application and uses the toSSG function to generate static files from the routes defined in the app.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// build.ts\nimport app from './index'\nimport { toSSG } from 'hono/ssg'\nimport fs from 'fs/promises'\n\ntoSSG(app, fs)\n```\n\n----------------------------------------\n\nTITLE: Returning HTML Using JSX in Hono\nDESCRIPTION: An example of using JSX to return HTML content in a Hono route handler, demonstrating the c.html() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst View = () => {\n  return (\n    <html>\n      <body>\n        <h1>Hello Hono!</h1>\n      </body>\n    </html>\n  )\n}\n\napp.get('/page', (c) => {\n  return c.html(<View />)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono with Next.js Pages Router on Node.js runtime\nDESCRIPTION: TypeScript code for setting up a Hono application with Next.js Pages Router using Node.js runtime and the Node.js adapter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from '@hono/node-server/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  api: {\n    bodyParser: false,\n  },\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello from Hono!',\n  })\n})\n\nexport default handle(app)\n```\n\n----------------------------------------\n\nTITLE: Using onlySSG Middleware for Static-Only Routes\nDESCRIPTION: Example of using the onlySSG middleware to mark routes that should only be available as statically generated pages and not in the running application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\napp.get('/static-page', onlySSG(), (c) => c.html(<h1>Welcome to my site</h1>))\n```\n\n----------------------------------------\n\nTITLE: Setting Default Headers for All Hono Client Requests\nDESCRIPTION: Configures the Hono client with default headers to be sent with all requests. This is useful for authentication tokens or other common headers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = hc<AppType>('/api', {\n  headers: {\n    Authorization: 'Bearer TOKEN',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing JSON validation with app.request()\nDESCRIPTION: Shows the correct way to test JSON validation by including the Content-Type header in request tests.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ this will not work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n})\nconst data = await res.json()\nconsole.log(data) // undefined\n\n// ✅ this will work\nconst res = await app.request('/testing', {\n  method: 'POST',\n  body: JSON.stringify({ key: 'value' }),\n  headers: new Headers({ 'Content-Type': 'application/json' }),\n})\nconst data = await res.json()\nconsole.log(data) // { key: 'value' }\n```\n\n----------------------------------------\n\nTITLE: Serving Precompressed Static Files in Hono\nDESCRIPTION: Enabling the precompressed option to serve Brotli, Zstd, or Gzip compressed files based on the Accept-Encoding header.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating serverless-devs Configuration for Alibaba Cloud Function Compute\nDESCRIPTION: YAML configuration for serverless-devs (s.yaml) that defines the Function Compute properties including runtime, memory, timeout, and other deployment settings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nedition: 3.0.0\nname: my-app\naccess: 'default'\n\nvars:\n  region: 'us-west-1'\n\nresources:\n  my-app:\n    component: fc3\n    props:\n      region: ${vars.region}\n      functionName: 'my-app'\n      description: 'Hello World by Hono'\n      runtime: 'nodejs20'\n      code: ./dist\n      handler: index.handler\n      memorySize: 1024\n      timeout: 300\n```\n\n----------------------------------------\n\nTITLE: Returning Raw Response in Hono\nDESCRIPTION: Shows how to return a raw Response object in a Hono route handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\napp.get('/', () => {\n  return new Response('Good morning!')\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Found Files in Static File Serving with Hono\nDESCRIPTION: Example of using the onFound option to specify custom handling when a requested static file is found.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    // ...\n    onFound: (_path, c) => {\n      c.header('Cache-Control', `public, immutable, max-age=31536000`)\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using getRuntimeKey() Function to Identify Current Runtime in TypeScript\nDESCRIPTION: This example demonstrates how to use the getRuntimeKey() function to determine the current runtime and return different responses based on the runtime identified.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/adapter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  if (getRuntimeKey() === 'workerd') {\n    return c.text('You are on Cloudflare')\n  } else if (getRuntimeKey() === 'bun') {\n    return c.text('You are on Bun')\n  }\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSX Renderer Middleware with Custom DOCTYPE\nDESCRIPTION: Shows how to configure the JSX Renderer Middleware with a custom DOCTYPE option.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\napp.use(\n  '*',\n  jsxRenderer(\n    ({ children }) => {\n      return (\n        <html>\n          <body>{children}</body>\n        </html>\n      )\n    },\n    {\n      docType:\n        '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n    }\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Basic CSS in JSX Usage in Hono\nDESCRIPTION: Example of using the css template literal to define styles for an HTML element within a Hono route handler. The Style component must be included to render the CSS.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', (c) => {\n  const headerClass = css`\n    background-color: orange;\n    color: white;\n    padding: 1rem;\n  `\n  return c.html(\n    <html>\n      <head>\n        <Style />\n      </head>\n      <body>\n        <h1 class={headerClass}>Hello!</h1>\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hono Application for Testing\nDESCRIPTION: A basic Hono application example that will be used for testing. This simple route returns a text response that can be verified in tests.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Please test me!'))\n```\n\n----------------------------------------\n\nTITLE: Simple Proxy Implementation\nDESCRIPTION: Demonstrates a basic usage of the proxy() function to forward requests to an origin server with path parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/proxy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/proxy/:path', (c) => {\n  return proxy(`http://${originServer}/${c.req.param('path')}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with Type-Safe Environment in Hono\nDESCRIPTION: How to use middleware with app.use() and ensure type safety by passing the environment type to Hono's constructor.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono<Env>()\n\napp.use(echoMiddleware)\n\napp.get('/echo', (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Hono Client Requests\nDESCRIPTION: Shows how to add custom headers to individual requests using the Hono client. Headers are passed as the second parameter to the request method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await client.search.$get(\n  {\n    //...\n  },\n  {\n    headers: {\n      'X-Custom-Header': 'Here is Hono Client',\n      'X-User-Agent': 'hc',\n    },\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Hono Middlewares in Cloudflare Pages\nDESCRIPTION: Example showing how to apply multiple Hono middlewares in a Cloudflare Pages application by using an array of handleMiddleware calls.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { handleMiddleware } from 'hono/cloudflare-pages'\n\n// ...\n\nexport const onRequest = [\n  handleMiddleware(middleware1),\n  handleMiddleware(middleware2),\n  handleMiddleware(middleware3),\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Validation in OpenAPI Spec with TypeScript\nDESCRIPTION: Shows how to enable response validation for a route in the OpenAPI specification.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    validateResponse: true,\n  }),\n  (c) => c.text('Validated Response')\n)\n```\n\n----------------------------------------\n\nTITLE: Building Azure Functions Project for Deployment\nDESCRIPTION: Commands to build the TypeScript project into JavaScript for deployment to Azure Functions, converting all source code to the format required by the Azure Functions runtime.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Using Suspense in Hono JSX\nDESCRIPTION: Demonstrates the experimental Suspense feature in Hono JSX, allowing for fallback content while async components are loading.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { renderToReadableStream, Suspense } from 'hono/jsx/streaming'\n\n//...\n\napp.get('/', (c) => {\n  const stream = renderToReadableStream(\n    <html>\n      <body>\n        <Suspense fallback={<div>loading...</div>}>\n          <Component />\n        </Suspense>\n      </body>\n    </html>\n  )\n  return c.body(stream, {\n    headers: {\n      'Content-Type': 'text/html; charset=UTF-8',\n      'Transfer-Encoding': 'chunked',\n    },\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom MIME Types for Static Files in Hono\nDESCRIPTION: Example of adding custom MIME types when serving static files using the mimes option.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    mimes: {\n      m3u8: 'application/vnd.apple.mpegurl',\n      ts: 'video/mp2t',\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Runtime for env() Function in TypeScript\nDESCRIPTION: This snippet shows how to specify a particular runtime when using the env() function to retrieve environment variables. It explicitly sets the runtime to 'workerd' for Cloudflare Workers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/adapter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/env', (c) => {\n  const { NAME } = env<{ NAME: string }>(c, 'workerd')\n  return c.text(NAME)\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Hono Application\nDESCRIPTION: Simple Hono application setup with Node.js server implementation returning 'Hello Node.js!' text response\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Node.js!'))\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Memoization in Hono JSX\nDESCRIPTION: Demonstrates how to use the memo function to optimize components by memoizing computed strings in Hono JSX.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { memo } from 'hono/jsx'\n\nconst Header = memo(() => <header>Welcome to Hono</header>)\nconst Footer = memo(() => <footer>Powered by Hono</footer>)\nconst Layout = (\n  <div>\n    <Header />\n    <p>Hono is cool!</p>\n    <Footer />\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Using accepts() Function in Hono Route Handler\nDESCRIPTION: Demonstrates how to use the accepts() function within a Hono route handler to process the Accept-Language header.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/accepts.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { accepts } from 'hono/accepts'\n\napp.get('/', (c) => {\n  const accept = accepts(c, {\n    header: 'Accept-Language',\n    supports: ['en', 'ja', 'zh'],\n    default: 'en',\n  })\n  return c.json({ lang: accept })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Layouts with JSX Renderer Middleware\nDESCRIPTION: Shows how to create nested layouts using the JSX Renderer Middleware and the Layout component.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\napp.use(\n  jsxRenderer(({ children }) => {\n    return (\n      <html>\n        <body>{children}</body>\n      </html>\n    )\n  })\n)\n\nconst blog = new Hono()\nblog.use(\n  jsxRenderer(({ children, Layout }) => {\n    return (\n      <Layout>\n        <nav>Blog Menu</nav>\n        <div>{children}</div>\n      </Layout>\n    )\n  })\n)\n\napp.route('/blog', blog)\n```\n\n----------------------------------------\n\nTITLE: Creating API Handler for Better Auth in Hono\nDESCRIPTION: TypeScript code to create an API handler for Better Auth requests in Hono, serving POST and GET requests to the /api/auth endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { auth } from \"../lib/auth\";\nimport type { AuthType } from \"../lib/auth\"\n\nconst router = new Hono<{ Bindings: AuthType }>({\n    strict: false,\n});\n\nrouter.on([\"POST\", \"GET\"], \"/auth/*\", (c) => {\n  return auth.handler(c.req.raw);\n});\n\nexport default router;\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Custom Methods in Hono\nDESCRIPTION: Example of creating a middleware that provides a custom method to be used within handlers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Variables: {\n    echo: (str: string) => string\n  }\n}\n\nconst app = new Hono()\n\nconst echoMiddleware = createMiddleware<Env>(async (c, next) => {\n  c.set('echo', (str) => str)\n  await next()\n})\n\napp.get('/echo', echoMiddleware, (c) => {\n  return c.text(c.var.echo('Hello!'))\n})\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with Slashes in Hono\nDESCRIPTION: Demonstrates how to handle path parameters containing slashes using regular expressions in routes. The server defines a route with regex pattern and the client passes the parameter value directly.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\n\n// Requests /posts/123/456\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123/456',\n  }\n})\n\n\n// server.ts\nconst route = app.get(\n  '/posts/:id{.+}',\n  zValidator(\n    'param',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  (c) => {\n    // id: 123/456\n    const { id } = c.req.valid('param')\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Restriction for Deno Environment in TypeScript\nDESCRIPTION: This snippet shows how to set up IP restriction middleware for a Hono application running on Deno, using the appropriate ConnInfo helper.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/ip-restriction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnInfo } from 'hono/deno'\nimport { ipRestriction } from 'hono/ip-restriction'\n\n//...\n\napp.use(\n  '*',\n  ipRestriction(getConnInfo, {\n    // ...\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Hono Application for Cloudflare Pages\nDESCRIPTION: A simple Hono.js application example that renders a \"Hello, Cloudflare Pages!\" heading using JSX syntax.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Hono } from 'hono'\nimport { renderer } from './renderer'\n\nconst app = new Hono()\n\napp.get('*', renderer)\n\napp.get('/', (c) => {\n  return c.render(<h1>Hello, Cloudflare Pages!</h1>)\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Static File Serving Configuration\nDESCRIPTION: Multiple examples of serving static files using different configuration options\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/static/*', serveStatic({ root: './' }))\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('/favicon.ico', serveStatic({ path: './favicon.ico' }))\n```\n\nLANGUAGE: typescript\nCODE:\n```\napp.use('*', serveStatic({ root: './static' }))\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for Language Detector in TypeScript\nDESCRIPTION: Shows the default configuration options for the Language Detector middleware, including detection order, lookup keys, and cookie settings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const DEFAULT_OPTIONS: DetectorOptions = {\n  order: ['querystring', 'cookie', 'header'],\n  lookupQueryString: 'lang',\n  lookupCookie: 'language',\n  lookupFromHeaderKey: 'accept-language',\n  lookupFromPathIndex: 0,\n  caches: ['cookie'],\n  ignoreCase: true,\n  fallbackLanguage: 'en',\n  supportedLanguages: ['en'],\n  cookieOptions: {\n    sameSite: 'Strict',\n    secure: true,\n    maxAge: 365 * 24 * 60 * 60,\n    httpOnly: true,\n  },\n  debug: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response with HTTPException\nDESCRIPTION: Demonstrates creating a custom Response object with specific headers and status code to be used with HTTPException.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/exception.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HTTPException } from 'hono/http-exception'\n\nconst errorResponse = new Response('Unauthorized', {\n  status: 401,\n  headers: {\n    Authenticate: 'error=\"invalid_token\"',\n  },\n})\n\nthrow new HTTPException(401, { res: errorResponse })\n```\n\n----------------------------------------\n\nTITLE: JWT Decode Function Signature in TypeScript\nDESCRIPTION: Defines the function signature for the decode() method which extracts the header and payload from a JWT token without verifying its signature.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/jwt.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndecode(token: string): { header: any; payload: any };\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono with Next.js Pages Router\nDESCRIPTION: TypeScript code for setting up a Hono application with Next.js Pages Router, defining a simple API route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono/vercel'\nimport type { PageConfig } from 'next'\n\nexport const config: PageConfig = {\n  runtime: 'edge',\n}\n\nconst app = new Hono().basePath('/api')\n\napp.get('/hello', (c) => {\n  return c.json({\n    message: 'Hello Next.js!',\n  })\n})\n\nexport default handle(app)\n```\n\n----------------------------------------\n\nTITLE: Using SSG with Deno\nDESCRIPTION: Example of using the toSSG function with Deno, which provides a built-in adapter for Deno's filesystem without requiring an explicit filesystem module parameter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { toSSG } from 'hono/deno'\n\ntoSSG(app) // The second argument is an option typed `ToSSGOptions`.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic REST API Routes in Hono\nDESCRIPTION: Example of setting up basic GET and POST routes in a Hono application with different response types and custom headers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/posts', (c) => {\n  return c.text('Many posts')\n})\n\napp.post('/posts', (c) => {\n  return c.json(\n    {\n      message: 'Created',\n    },\n    201,\n    {\n      'X-Custom': 'Thank you',\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Composing Class Names with cx Helper in Hono\nDESCRIPTION: Using the cx helper function to combine multiple CSS class names, allowing for composition of styles from different sources.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonClass = css`\n  border-radius: 10px;\n`\nconst primaryClass = css`\n  background: orange;\n`\nconst Button = () => (\n  <a class={cx(buttonClass, primaryClass)}>Click!</a>\n)\n```\n\n----------------------------------------\n\nTITLE: Writing CSS in Style Component with Hono\nDESCRIPTION: Alternative approach to writing global CSS by using the Style component with the css template literal inside a JSX renderer.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const renderer = jsxRenderer(({ children, title }) => {\n  return (\n    <html>\n      <head>\n        <Style>{css`\n          html {\n            font-family: Arial, Helvetica, sans-serif;\n          }\n        `}</Style>\n        <title>{title}</title>\n      </head>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single File with parseBody() in Hono\nDESCRIPTION: Shows how to access a single file from form data. The parsed body will contain string or File objects as values.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst body = await c.req.parseBody()\nconst data = body['foo']\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Validator Middleware\nDESCRIPTION: Commands for installing the dedicated Zod Validator Middleware package for Hono.js.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @hono/zod-validator\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @hono/zod-validator\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @hono/zod-validator\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @hono/zod-validator\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth with Callback Handler\nDESCRIPTION: Demonstrates how to implement Basic Authentication with a callback mechanism for request processing in Lambda@Edge.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/lambda-edge.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\nimport type { Callback, CloudFrontRequest } from 'hono/lambda-edge'\nimport { handle } from 'hono/lambda-edge'\n\ntype Bindings = {\n  callback: Callback\n  request: CloudFrontRequest\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get(\n  '*',\n  basicAuth({\n    username: 'hono',\n    password: 'acoolproject',\n  })\n)\n\napp.get('/', async (c, next) => {\n  await next()\n  c.env.callback(null, c.env.request)\n})\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Node.js API Access Implementation\nDESCRIPTION: Example demonstrating how to access Node.js APIs through Hono context\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { serve, type HttpBindings } from '@hono/node-server'\n\ntype Bindings = HttpBindings & {\n  /* ... */\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/', (c) => {\n  return c.json({\n    remoteAddress: c.env.incoming.socket.remoteAddress,\n  })\n})\n\nserve(app)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono to Use a Custom Router Implementation\nDESCRIPTION: Shows how to specify a custom router implementation (RegExpRouter) when creating a new Hono application instance.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RegExpRouter } from 'hono/router/reg-exp-router'\n\nconst app = new Hono({ router: new RegExpRouter() })\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono Application for Azure Functions\nDESCRIPTION: TypeScript code for a simple Hono application that responds with 'Hello Azure Functions!' when the root path is accessed.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// src/app.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Azure Functions!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Accessing Matched Routes with matchedRoutes() in Hono\nDESCRIPTION: Demonstrates how to access information about all matched routes in the request using the matchedRoutes property, which is useful for debugging and logging.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(async function logger(c, next) {\n  await next()\n  c.req.matchedRoutes.forEach(({ handler, method, path }, i) => {\n    const name =\n      handler.name ||\n      (handler.length < 2 ? '[handler]' : '[middleware]')\n    console.log(\n      method,\n      ' ',\n      path,\n      ' '.repeat(Math.max(10 - path.length, 0)),\n      name,\n      i === c.req.routeIndex ? '<- respond from here' : ''\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World application with Hono for Netlify Edge Functions\nDESCRIPTION: Basic setup code for a Hono application on Netlify Edge Functions that responds with 'Hello Hono!' text.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/netlify.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'jsr:@hono/hono'\nimport { handle } from 'jsr:@hono/hono/netlify'\n\nconst app = new Hono()\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!')\n})\n\nexport default handle(app)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hono Application for Alibaba Cloud Function Compute\nDESCRIPTION: TypeScript code for a simple Hono.js application that exports a handler function for Alibaba Cloud Function Compute using the adapter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\nimport { handle } from 'hono-alibaba-cloud-fc3-adapter'\n\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Hono!'))\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Request URL in Hono\nDESCRIPTION: Demonstrates how to access the complete URL of the request using the url property, which returns the full URL string including origin, path, and query parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/about/me', async (c) => {\n  const url = c.req.url // `http://localhost:8787/about/me`\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CBOR Encoding in Hono Middleware (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a middleware in Hono that uses the cbor2 package to encode responses in CBOR format. It includes type declarations, middleware creation, and a sample route handler.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cbor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { createMiddleware } from 'hono/factory'\nimport { encode } from 'cbor2'\n\nconst app = new Hono()\n\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (content: any): Response | Promise<Response>\n  }\n}\n\nconst cborRenderer = createMiddleware(async (c, next) => {\n  c.header('Content-Type', 'application/cbor')\n  c.setRenderer((content) => {\n    return c.body(encode(content))\n  })\n  await next()\n})\n\napp.use(cborRenderer)\n\napp.get('/', (c) => {\n  return c.render({ message: 'hello CBOR!' })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Testing with Mock Environment\nDESCRIPTION: Shows how to test with mocked environment variables and bindings using the third parameter of app.request.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst MOCK_ENV = {\n  API_HOST: 'example.com',\n  DB: {\n    prepare: () => {\n      /* mocked D1 */\n    },\n  },\n}\n\ntest('GET /posts', async () => {\n  const res = await app.request('/posts', {}, MOCK_ENV)\n})\n```\n\n----------------------------------------\n\nTITLE: View Transition with Loading State\nDESCRIPTION: Advanced example using useViewTransition hook to manage loading states during transitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useViewTransition } from 'hono/jsx'\nimport { viewTransition } from 'hono/jsx/dom/css'\nimport { css, keyframes, Style } from 'hono/css'\n\nconst rotate = keyframes`\n  from {\n    rotate: 0deg;\n  }\n  to {\n    rotate: 360deg;\n  }\n`\n\nexport default function App() {\n  const [isUpdating, startViewTransition] = useViewTransition()\n  const [showLargeImage, setShowLargeImage] = useState(false)\n  const [transitionNameClass] = useState(() =>\n    viewTransition(css`\n      ::view-transition-old() {\n        animation-name: ${rotate};\n      }\n      ::view-transition-new() {\n        animation-name: ${rotate};\n      }\n    `)\n  )\n  return (\n    <>\n      <Style />\n      <button\n        onClick={() =>\n          startViewTransition(() =>\n            setShowLargeImage((state) => !state)\n          )\n        }\n      >\n        Click!\n      </button>\n      <div>\n        {!showLargeImage ? (\n          <img src='https://hono.dev/images/logo.png' />\n        ) : (\n          <div\n            class={css`\n              ${transitionNameClass}\n              background: url('https://hono.dev/images/logo-large.png');\n              background-size: contain;\n              background-repeat: no-repeat;\n              background-position: center;\n              width: 600px;\n              height: 600px;\n              position: relative;\n              ${isUpdating &&\n              css`\n                &:before {\n                  content: 'Loading...';\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                }\n              `}\n            `}\n          ></div>\n        )}\n      </div>\n    </>\n  )\n```\n\n----------------------------------------\n\nTITLE: Simple Hono Route with Type Inference\nDESCRIPTION: Shows a basic Hono route definition with automatic type inference. This example is used to illustrate potential IDE performance issues with complex type instantiations.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nexport const app = new Hono().get('foo/:id', (c) =>\n  c.json({ ok: true }, 200)\n)\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Helper in Bun\nDESCRIPTION: Shows how to import and configure the WebSocket helper from Hono for Bun environment, including proper export setup.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { createBunWebSocket } from 'hono/bun'\nimport type { ServerWebSocket } from 'bun'\n\nconst { upgradeWebSocket, websocket } =\n  createBunWebSocket<ServerWebSocket>()\n\n// ...\n\nexport default {\n  fetch: app.fetch,\n  websocket,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Azure Functions HTTP Trigger with Hono Integration\nDESCRIPTION: TypeScript code that configures an HTTP trigger in Azure Functions to use the Hono application, supporting multiple HTTP methods and routing all requests to the Hono handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// src/functions/httpTrigger.ts\nimport { app } from '@azure/functions'\nimport { azureHonoHandler } from '@marplex/hono-azurefunc-adapter'\nimport honoApp from '../app'\n\napp.http('httpTrigger', {\n  methods: [\n    //Add all your supported HTTP methods here\n    'GET',\n    'POST',\n    'DELETE',\n    'PUT',\n  ],\n  authLevel: 'anonymous',\n  route: '{*proxy}',\n  handler: azureHonoHandler(honoApp.fetch),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun.serve for Large Requests with Hono\nDESCRIPTION: Shows how to configure Bun.serve to handle large requests when using Hono's Body Limit Middleware with a high limit.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/body-limit.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  port: process.env['PORT'] || 3000,\n  fetch: app.fetch,\n  maxRequestBodySize: 1024 * 1024 * 200, // your value here\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fragment in Hono JSX\nDESCRIPTION: Shows how to use Fragment to group multiple elements without adding extra nodes to the DOM. Demonstrates both explicit Fragment import and shorthand syntax.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Fragment } from 'hono/jsx'\n\nconst List = () => (\n  <Fragment>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </Fragment>\n)\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst List = () => (\n  <>\n    <p>first child</p>\n    <p>second child</p>\n    <p>third child</p>\n  </>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World Application with Hono and Bun\nDESCRIPTION: Basic Hono application setup that responds with 'Hello Bun!' on the root route.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Override in Hono.js Application\nDESCRIPTION: This snippet demonstrates how to implement the method override middleware in a Hono.js application to handle DELETE requests sent via POST.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/method-override.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { methodOverride } from 'hono/method-override'\n\nconst app = new Hono()\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', () => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeScript Azure Functions V4 Project\nDESCRIPTION: Command to create a new TypeScript Node.js V4 Azure Functions project in the current directory using the Azure Functions Core Tools.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfunc init --typescript\n```\n\n----------------------------------------\n\nTITLE: Using JSX Pragma Directives in Hono\nDESCRIPTION: Demonstrates how to use pragma directives to enable JSX in TypeScript files without modifying tsconfig.json.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n/** @jsx jsx */\n/** @jsxImportSource hono/jsx */\n```\n\n----------------------------------------\n\nTITLE: Cookie Configuration for Language Detector in Hono.js\nDESCRIPTION: Illustrates how to configure cookie settings for language detection, including custom name, path, and security options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.use(\n  languageDetector({\n    lookupCookie: 'app_lang',\n    caches: ['cookie'],\n    cookieOptions: {\n      path: '/', // Cookie path\n      sameSite: 'Lax', // Cookie same-site policy\n      secure: true, // Only send over HTTPS\n      maxAge: 86400 * 365, // 1 year expiration\n      httpOnly: true, // Not accessible via JavaScript\n      domain: '.example.com', // Optional: specific domain\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Cookies with Options in Hono\nDESCRIPTION: Demonstrates how to delete cookies with specific options and how to retrieve the deleted cookie value.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCookie(c, 'banana', {\n  path: '/',\n  secure: true,\n  domain: 'example.com',\n})\n\nconst deletedCookie = deleteCookie(c, 'delicious_cookie')\n```\n\n----------------------------------------\n\nTITLE: Using HTML Helper for Dynamic Content in Hono TypeScript\nDESCRIPTION: Demonstrates how to use the html helper to create a dynamic HTML response with a route parameter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\napp.get('/:username', (c) => {\n  const { username } = c.req.param()\n  return c.html(\n    html`<!doctype html>\n      <h1>Hello! ${username}!</h1>`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Building Client and Server Bundles\nDESCRIPTION: Command to build both client-side and server-side code for a Hono application on Cloudflare Pages.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nvite build --mode client && vite build\n```\n\n----------------------------------------\n\nTITLE: Client Examples for Language Detection in cURL\nDESCRIPTION: Provides examples of how to test language detection using cURL, demonstrating path, query parameter, cookie, and header-based detection.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Via path\ncurl http://localhost:8787/ar/home\n\n# Via query parameter\ncurl http://localhost:8787/?lang=ar\n\n# Via cookie\ncurl -H 'Cookie: language=ja' http://localhost:8787/\n\n# Via header\ncurl -H 'Accept-Language: ar,en;q=0.9' http://localhost:8787/\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying to Cloudflare Workers\nDESCRIPTION: GitHub Actions workflow configuration for automatic deployment to Cloudflare Workers. This YAML file sets up a CI/CD pipeline that deploys your application when changes are pushed to the main branch.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Deploy\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Quick Hono Router Configuration\nDESCRIPTION: The router configuration used by the 'quick' Hono preset. It uses SmartRouter with LinearRouter and TrieRouter for faster initialization.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.router = new SmartRouter({\n  routers: [new LinearRouter(), new TrieRouter()],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles with Hono CSS Helper\nDESCRIPTION: Using the :-hono-global pseudo-selector to define global styles that apply to the entire document rather than specific elements.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst globalClass = css`\n  :-hono-global {\n    html {\n      font-family: Arial, Helvetica, sans-serif;\n    }\n  }\n`\n\nreturn c.render(\n  <div class={globalClass}>\n    <h1>Hello!</h1>\n    <p>Today is a good day.</p>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Pylon GraphQL API Example in TypeScript\nDESCRIPTION: A simple Pylon service demonstrating basic Query and Mutation resolvers for arithmetic operations. This shows the core structure of a Pylon GraphQL API.\nSOURCE: https://github.com/honojs/website/blob/main/examples/pylon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Using Keyframes Animation in Hono CSS Helper\nDESCRIPTION: Creating CSS animations with the keyframes helper which allows defining @keyframes animations within JSX components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst fadeInAnimation = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`\nconst headerClass = css`\n  animation-name: ${fadeInAnimation};\n  animation-duration: 2s;\n`\nconst Header = () => <a class={headerClass}>Hello!</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hono Route to Pylon App\nDESCRIPTION: Demonstrates how to add a custom Hono route to a Pylon app, showcasing the integration between Pylon and Hono. This allows for more complex API structures beyond GraphQL.\nSOURCE: https://github.com/honojs/website/blob/main/examples/pylon.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    sum: (a: number, b: number) => a + b,\n  },\n  Mutation: {\n    divide: (a: number, b: number) => a / b,\n  },\n}\n\n// Add a custom route to the Pylon app\napp.get('/hello', (ctx, next) => {\n  return new Response('Hello, world!')\n})\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers Streaming Configuration\nDESCRIPTION: Shows how to configure streaming for Cloudflare Workers environments by adding Identity encoding.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/streamText', (c) => {\n  c.header('Content-Encoding', 'Identity')\n  return streamText(c, async (stream) => {\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: JSON validation sample application\nDESCRIPTION: Example application demonstrating JSON validation middleware setup in Hono.js.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.post(\n  '/testing',\n  validator('json', (value, c) => {\n    // pass-through validator\n    return value\n  }),\n  (c) => {\n    const body = c.req.valid('json')\n    return c.json(body)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Cloudflare Workers Testing in TypeScript\nDESCRIPTION: This snippet shows how to configure Vitest for Cloudflare Workers testing using @cloudflare/vitest-pool-workers. It sets up the test environment with globals and specifies the Wrangler configuration path.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-vitest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineWorkersProject } from '@cloudflare/vitest-pool-workers/config'\n\nexport default defineWorkersProject(() => {\n  return {\n    test: {\n      globals: true,\n      poolOptions: {\n        workers: { wrangler: { configPath: './wrangler.toml' } },\n      },\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authors Route in Hono\nDESCRIPTION: Defines a Hono application for handling author-related routes. It includes GET and POST methods for listing, creating, and retrieving individual authors.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n  .get('/', (c) => c.json('list authors'))\n  .post('/', (c) => c.json('create an author', 201))\n  .get('/:id', (c) => c.json(`get ${c.req.param('id')}`))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring serverless-devs for Alibaba Cloud\nDESCRIPTION: Command for adding Alibaba Cloud credentials to serverless-devs configuration. This enables deployment to Alibaba Cloud Function Compute.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx s config add\n# Please select a provider: Alibaba Cloud (alibaba)\n# Input your AccessKeyID & AccessKeySecret\n```\n\n----------------------------------------\n\nTITLE: Importing Cache Middleware in Hono.js\nDESCRIPTION: This snippet shows how to import the Hono framework and the cache middleware from the Hono package.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { cache } from 'hono/cache'\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration for Client and Server Builds\nDESCRIPTION: Advanced Vite configuration that supports both client-side and server-side builds for a Hono application on Cloudflare Pages.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport pages from '@hono/vite-cloudflare-pages'\nimport devServer from '@hono/vite-dev-server'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig(({ mode }) => {\n  if (mode === 'client') {\n    return {\n      build: {\n        rollupOptions: {\n          input: './src/client.ts',\n          output: {\n            entryFileNames: 'static/client.js',\n          },\n        },\n      },\n    }\n  } else {\n    return {\n      plugins: [\n        pages(),\n        devServer({\n          entry: 'src/index.tsx',\n        }),\n      ],\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookie Caching in Language Detector\nDESCRIPTION: Shows how to disable cookie caching for language detection in the middleware configuration.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlanguageDetector({\n  caches: false,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Cookie Helper Functions in Hono\nDESCRIPTION: Shows how to import various cookie-related functions from the Hono framework. These functions allow setting, getting, and deleting both regular and signed cookies.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport {\n  getCookie,\n  getSignedCookie,\n  setCookie,\n  setSignedCookie,\n  deleteCookie,\n} from 'hono/cookie'\n```\n\n----------------------------------------\n\nTITLE: Configuring Retained Headers in ETag Middleware (TypeScript)\nDESCRIPTION: Shows how to customize the retained headers in the ETag middleware. This example adds a custom header 'x-message' to the list of default retained headers for 304 responses.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/etag.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { etag, RETAINED_304_HEADERS } from 'hono/etag'\n\n// ...\n\napp.use(\n  '/etag/*',\n  etag({\n    retainedHeaders: ['x-message', ...RETAINED_304_HEADERS],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration\nDESCRIPTION: Example showing how to configure a custom port number for the Hono server\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nserve({\n  fetch: app.fetch,\n  port: 8787,\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Request Parameters and Headers in Hono\nDESCRIPTION: Demonstrates how to access path parameters, query values, and set response headers in a Hono route handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\napp.get('/posts/:id', (c) => {\n  const page = c.req.query('page')\n  const id = c.req.param('id')\n  c.header('X-Message', 'Hi!')\n  return c.text(`You want to see ${page} of ${id}`)\n})\n```\n\n----------------------------------------\n\nTITLE: View Transition Basic Example with Hono JSX\nDESCRIPTION: Demonstrates basic view transition implementation using startViewTransition for image switching animation.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, startViewTransition } from 'hono/jsx'\nimport { css, Style } from 'hono/css'\n\nexport default function App() {\n  const [showLargeImage, setShowLargeImage] = useState(false)\n  return (\n    <>\n      <Style />\n      <button\n        onClick={() =>\n          startViewTransition(() =>\n            setShowLargeImage((state) => !state)\n          )\n        }\n      >\n        Click!\n      </button>\n      <div>\n        {!showLargeImage ? (\n          <img src='https://hono.dev/images/logo.png' />\n        ) : (\n          <div\n            class={css`\n              background: url('https://hono.dev/images/logo-large.png');\n              background-size: contain;\n              background-repeat: no-repeat;\n              background-position: center;\n              width: 600px;\n              height: 600px;\n            `}\n          ></div>\n        )}\n      </div>\n    </>\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Edge Function with Hono.js\nDESCRIPTION: TypeScript implementation of a basic Edge Function using Hono.js framework. Creates a GET endpoint that returns a hello message.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'jsr:@hono/hono'\n\n// change this to your function name\nconst functionName = 'hello-world'\nconst app = new Hono().basePath(`/${functionName}`)\n\napp.get('/hello', (c) => c.text('Hello from hono-server!'))\n\nDeno.serve(app.fetch)\n```\n\n----------------------------------------\n\nTITLE: Handling Not Found Static Files in Hono\nDESCRIPTION: Using the onNotFound option to specify custom handling when a requested static file is not found.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    onNotFound: (path, c) => {\n      console.log(`${path} is not found, you access ${c.req.path}`)\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Trimming Trailing Slash in Hono.js (TypeScript)\nDESCRIPTION: This example shows how to use the trimTrailingSlash middleware to redirect GET requests from '/about/me/' to '/about/me'. It creates a Hono app with strict mode enabled and applies the middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/trailing-slash.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { trimTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(trimTrailingSlash())\napp.get('/about/me', (c) => c.text('Without Trailing Slash'))\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Commands to start the Supabase stack and Functions watcher for local development, with JWT verification disabled.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsupabase start # start the supabase stack\nsupabase functions serve --no-verify-jwt # start the Functions watcher\n```\n\n----------------------------------------\n\nTITLE: Importing Combine Middleware in Hono (TypeScript)\nDESCRIPTION: Shows how to import the Hono framework and the Combine Middleware functions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/combine.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { some, every, except } from 'hono/combine'\n```\n\n----------------------------------------\n\nTITLE: Integrating Client-Side Scripts with Hono\nDESCRIPTION: JSX example showing how to include client-side scripts with conditional loading based on environment (development or production).\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        {import.meta.env.PROD ? (\n          <script type='module' src='/static/client.js'></script>\n        ) : (\n          <script type='module' src='/src/client.ts'></script>\n        )}\n      </head>\n      <body>\n        <h1>Hello</h1>\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Type Definitions for Custom Elements in Hono JSX\nDESCRIPTION: Shows how to extend the JSX namespace to add custom elements and attributes for use in Hono JSX components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module 'hono/jsx' {\n  namespace JSX {\n    interface IntrinsicElements {\n      'my-custom-element': HTMLAttributes & {\n        'x-event'?: 'click' | 'scroll'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification in TypeScript\nDESCRIPTION: Shows how to add an endpoint for OpenAPI document generation, including server and API information.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openAPISpecs } from 'hono-openapi'\n\napp.get(\n  '/openapi',\n  openAPISpecs(app, {\n    documentation: {\n      info: {\n        title: 'Hono API',\n        version: '1.0.0',\n        description: 'Greeting API',\n      },\n      servers: [\n        { url: 'http://localhost:3000', description: 'Local Server' },\n      ],\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using disableSSG Middleware to Exclude Routes\nDESCRIPTION: Example of using the disableSSG middleware to exclude specific routes from static generation, useful for dynamic API endpoints.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\napp.get('/api', disableSSG(), (c) => c.text('an-api'))\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Vercel\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in a Vercel environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/vercel'\n```\n\n----------------------------------------\n\nTITLE: Defining Bindings Types for Hono App\nDESCRIPTION: TypeScript type definition for Cloudflare Bindings to be used with Hono, including environment variables and KV namespace.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntype Bindings = {\n  MY_NAME: string\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for Postgres Database\nDESCRIPTION: Example of a Prisma schema file defining a User model for a PostgreSQL database.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id  Int @id @default(autoincrement())\n  email String\n  name \tString\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Default Hono App for Cloudflare Workers\nDESCRIPTION: Shows the simpler approach of directly exporting the Hono application instance for Cloudflare Workers integration.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Processing Response from Hono RPC Call\nDESCRIPTION: Processes the API response returned from the Hono RPC call. The response is compatible with the standard fetch Response interface, allowing usage of methods like json().\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (res.ok) {\n  const data = await res.json()\n  console.log(data.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Routes in OpenAPI Spec with TypeScript\nDESCRIPTION: Demonstrates how to conditionally hide routes from the OpenAPI documentation based on environment variables.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/',\n  describeRoute({\n    // ...\n    hide: process.env.NODE_ENV === 'production',\n  }),\n  (c) => c.text('Hidden Route')\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Adapter Helper Functions in TypeScript\nDESCRIPTION: This snippet shows how to import the necessary functions from the Hono adapter module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/adapter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { env, getRuntimeKey } from 'hono/adapter'\n```\n\n----------------------------------------\n\nTITLE: Deploying a Hono Application to Cloudflare Workers\nDESCRIPTION: Commands to deploy the Hono application to Cloudflare Workers using different package managers. This publishes the application to the Cloudflare CDN.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno for JSX in Hono\nDESCRIPTION: Shows the configuration required in deno.json to enable JSX syntax for use with Hono in Deno projects.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"precompile\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Server Implementation\nDESCRIPTION: Examples of implementing both encrypted and unencrypted HTTP/2 servers with Hono\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http2'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSecureServer } from 'node:http2'\nimport { readFileSync } from 'node:fs'\n\nconst server = serve({\n  fetch: app.fetch,\n  createServer: createSecureServer,\n  serverOptions: {\n    key: readFileSync('localhost-privkey.pem'),\n    cert: readFileSync('localhost-cert.pem'),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Responses with AfterResponseHook\nDESCRIPTION: Example of using the afterResponseHook to process only responses with status codes 200 or 500 during static site generation, filtering out other response codes.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntoSSG(app, fs, {\n  afterResponseHook: (res) => {\n    if (res.status === 200 || res.status === 500) {\n      return res\n    }\n    return false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Mounting Another Framework in Hono with mount()\nDESCRIPTION: Example of how to integrate applications built with other frameworks (like itty-router) into a Hono application using the mount() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/hono.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router as IttyRouter } from 'itty-router'\nimport { Hono } from 'hono'\n\n// Create itty-router application\nconst ittyRouter = IttyRouter()\n\n// Handle `GET /itty-router/hello`\nittyRouter.get('/hello', () => new Response('Hello from itty-router'))\n\n// Hono application\nconst app = new Hono()\n\n// Mount!\napp.mount('/itty-router', ittyRouter.handle)\n```\n\n----------------------------------------\n\nTITLE: FileSystemModule Interface for Node.js\nDESCRIPTION: TypeScript interface that defines the required filesystem methods (writeFile and mkdir) needed by the toSSG function, based on Node.js fs/promises API.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport interface FileSystemModule {\n  writeFile(path: string, data: string | Uint8Array): Promise<void>\n  mkdir(\n    path: string,\n    options: { recursive: boolean }\n  ): Promise<void | string>\n}\n```\n\n----------------------------------------\n\nTITLE: Using FetchEvent in Service Worker Syntax\nDESCRIPTION: Example of using c.event to access the FetchEvent object when using Service Worker syntax in Cloudflare Workers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// FetchEvent object (only set when using Service Worker syntax)\napp.get('/foo', async (c) => {\n  c.event.waitUntil(c.env.MY_KV.put(key, data))\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Default Hono Router Configuration\nDESCRIPTION: The router configuration used by the default Hono preset. It utilizes SmartRouter with RegExpRouter and TrieRouter for optimal performance in most scenarios.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Schemas with Valibot in TypeScript\nDESCRIPTION: Example of defining request query and response schemas using Valibot for OpenAPI documentation.\nSOURCE: https://github.com/honojs/website/blob/main/examples/hono-openapi.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as v from 'valibot'\n\nconst querySchema = v.object({\n  name: v.optional(v.string()),\n})\n\nconst responseSchema = v.string()\n```\n\n----------------------------------------\n\nTITLE: Exporting Hono App Type for RPC\nDESCRIPTION: Exports the TypeScript type definition of the Hono route for sharing with client-side code. This enables type inference for API requests and responses.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AppType = typeof route\n```\n\n----------------------------------------\n\nTITLE: Importing Basic Auth Middleware in Hono\nDESCRIPTION: This snippet shows how to import the Hono framework and the basicAuth middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/basic-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { basicAuth } from 'hono/basic-auth'\n```\n\n----------------------------------------\n\nTITLE: Changing Port Number in Deno.serve for Hono\nDESCRIPTION: Example of how to specify a custom port number when starting the Hono server with Deno.serve.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(app.fetch) // [!code --]\nDeno.serve({ port: 8787 }, app.fetch) // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Appending Trailing Slash in Hono.js (TypeScript)\nDESCRIPTION: This example demonstrates how to use the appendTrailingSlash middleware to redirect GET requests from '/about/me' to '/about/me/'. It creates a Hono app with strict mode enabled and applies the middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/trailing-slash.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { appendTrailingSlash } from 'hono/trailing-slash'\n\nconst app = new Hono({ strict: true })\n\napp.use(appendTrailingSlash())\napp.get('/about/me/', (c) => c.text('With Trailing Slash'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Bindings in Cloudflare Workers\nDESCRIPTION: Example of accessing environment bindings such as KV namespaces via c.env in Cloudflare Workers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Type definition to make type inference\ntype Bindings = {\n  MY_KV: KVNamespace\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\n// Environment object for Cloudflare Workers\napp.get('/', async (c) => {\n  c.env.MY_KV.get('my-key')\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing File Extensions with extensionMap\nDESCRIPTION: Example of customizing the file extensions used for generated static files by configuring the extensionMap option to handle custom content types.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { toSSG, defaultExtensionMap } from 'hono/ssg'\n\n// Save `application/x-html` content with `.html`\ntoSSG(app, fs, {\n  extensionMap: {\n    'application/x-html': 'html',\n    ...defaultExtensionMap,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Azure Functions Development Server\nDESCRIPTION: Commands for different package managers to start the local development server for testing the Azure Functions application before deployment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm start\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run start\n```\n\n----------------------------------------\n\nTITLE: Importing Request ID Middleware in TypeScript\nDESCRIPTION: This snippet shows how to import the Hono framework and the Request ID Middleware. It demonstrates the necessary import statements to use the middleware in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/request-id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { requestId } from 'hono/request-id'\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Type-Safe Testing\nDESCRIPTION: Demonstrates how to define routes in a way that enables proper type inference for the test client.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono().get('/search', (c) => {\n  const query = c.req.query('q')\n  return c.json({ query: query, results: ['result1', 'result2'] })\n})\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating a Hono Application in a Service Worker\nDESCRIPTION: TypeScript code for a Service Worker that uses Hono to handle HTTP requests. The app is registered to the fetch event using Hono's Service Worker adapter's handle function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// To support types\n// https://github.com/microsoft/TypeScript/issues/14877\ndeclare const self: ServiceWorkerGlobalScope\n\nimport { Hono } from 'hono'\nimport { handle } from 'hono/service-worker'\n\nconst app = new Hono().basePath('/sw')\napp.get('/', (c) => c.text('Hello World'))\n\nself.addEventListener('fetch', handle(app))\n```\n\n----------------------------------------\n\nTITLE: Creating Handlers with factory.createHandlers in Hono (TypeScript)\nDESCRIPTION: Shows how to use factory.createHandlers() to define handlers separately from route definitions. It includes middleware and a JSON response handler.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFactory } from 'hono/factory'\nimport { logger } from 'hono/logger'\n\n// ...\n\nconst factory = createFactory()\n\nconst middleware = factory.createMiddleware(async (c, next) => {\n  c.set('foo', 'bar')\n  await next()\n})\n\nconst handlers = factory.createHandlers(logger(), middleware, (c) => {\n  return c.json(c.var.foo)\n})\n\napp.get('/api', ...handlers)\n```\n\n----------------------------------------\n\nTITLE: ToSSGOptions Interface Definition\nDESCRIPTION: TypeScript interface defining the configuration options for the toSSG function, including output directory, concurrency, hooks for customization, and extension mappings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport interface ToSSGOptions {\n  dir?: string\n  concurrency?: number\n  beforeRequestHook?: BeforeRequestHook\n  afterResponseHook?: AfterResponseHook\n  afterGenerateHook?: AfterGenerateHook\n  extensionMap?: Record<string, string>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Language Detector Middleware in TypeScript\nDESCRIPTION: Shows how to import the Language Detector middleware from the Hono package.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { languageDetector } from 'hono/language'\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for JavaScript Router Benchmarks in TypeScript\nDESCRIPTION: This code snippet defines an array of routes used for benchmarking various JavaScript routers. It includes a mix of static and dynamic routes with different HTTP methods, simulating real-world routing scenarios.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/benchmarks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const routes: Route[] = [\n  { method: 'GET', path: '/user' },\n  { method: 'GET', path: '/user/comments' },\n  { method: 'GET', path: '/user/avatar' },\n  { method: 'GET', path: '/user/lookup/username/:username' },\n  { method: 'GET', path: '/user/lookup/email/:address' },\n  { method: 'GET', path: '/event/:id' },\n  { method: 'GET', path: '/event/:id/comments' },\n  { method: 'POST', path: '/event/:id/comment' },\n  { method: 'GET', path: '/map/:location/events' },\n  { method: 'GET', path: '/status' },\n  { method: 'GET', path: '/very/deeply/nested/route/hello/there' },\n  { method: 'GET', path: '/static/*' },\n]\n```\n\n----------------------------------------\n\nTITLE: Importing JSX Renderer Middleware in TypeScript\nDESCRIPTION: Shows how to import the JSX Renderer Middleware and useRequestContext hook from Hono.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { jsxRenderer, useRequestContext } from 'hono/jsx-renderer'\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Request Object in Hono\nDESCRIPTION: Demonstrates how to access the underlying raw Request object using the raw property, which is useful for platform-specific extensions like Cloudflare Workers metadata.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// For Cloudflare Workers\napp.post('/', async (c) => {\n  const metadata = c.req.raw.cf?.hostMetadata?\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Bindings in Hono Route Handler\nDESCRIPTION: Example route handler that demonstrates using environment variables and KV namespaces from Cloudflare Bindings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\napp.get('/', async (c) => {\n  await c.env.MY_KV.put('name', c.env.MY_NAME)\n  const name = await c.env.MY_KV.get('name')\n  return c.render(<h1>Hello! {name}</h1>)\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Pages with Package Managers\nDESCRIPTION: Commands to deploy the application to Cloudflare Pages using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm run deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Using getRouterName Function\nDESCRIPTION: Demonstrates how to use getRouterName() to retrieve the name of the currently used router in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/dev.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\n// ...\n\nconsole.log(getRouterName(app))\n```\n\n----------------------------------------\n\nTITLE: Accessing Hono Context in Pylon GraphQL Resolver\nDESCRIPTION: Example of using the getContext function to access the Hono context within a Pylon GraphQL resolver. This allows access to request headers and other context-specific data.\nSOURCE: https://github.com/honojs/website/blob/main/examples/pylon.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app, getContext } from '@getcronit/pylon'\n\nexport const graphql = {\n  Query: {\n    hello: () => {\n      const context = getContext()\n      return `Hello, ${context.req.headers.get('user-agent')}`\n    },\n  },\n}\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Importing typed-htmx types in global definitions\nDESCRIPTION: TypeScript code to import typed-htmx types in the global definitions file, either src/global.d.ts or app/global.d.ts for HonoX users.\nSOURCE: https://github.com/honojs/website/blob/main/examples/htmx.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'typed-htmx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare Worker with Queues and R2 Bucket in TOML\nDESCRIPTION: This TOML configuration file sets up the Cloudflare Worker with the necessary queue producer, consumer, and R2 bucket bindings for the Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nname = \"my-worker\"\n\n[[queues.producers]]\n  queue = \"my-queue\"\n  binding = \"ERROR_QUEUE\"\n\n[[queues.consumers]]\n  queue = \"my-queue\"\n  max_batch_size = 100\n  max_batch_timeout = 30\n\n[[r2_buckets]]\n  bucket_name = \"my-bucket\"\n  binding = \"ERROR_BUCKET\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Hono Application for Cloudflare Workers\nDESCRIPTION: A basic Hono application example for Cloudflare Workers that responds with a text message. This demonstrates the minimal setup required to create a functional API endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Cloudflare Workers!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Importing Compress Middleware in Hono (TypeScript)\nDESCRIPTION: This snippet shows how to import the Hono framework and the compress middleware. It's a prerequisite for using the compression functionality in a Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/compress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { compress } from 'hono/compress'\n```\n\n----------------------------------------\n\nTITLE: Inserting HTML Snippets into JSX in Hono TypeScript\nDESCRIPTION: Shows how to insert an inline script into JSX using the html helper, avoiding the need for dangerouslySetInnerHTML.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\napp.get('/', (c) => {\n  return c.html(\n    <html>\n      <head>\n        <title>Test Site</title>\n        {html`\n          <script>\n            // No need to use dangerouslySetInnerHTML.\n            // If you write it here, it will not be escaped.\n          </script>\n        `}\n      </head>\n      <body>Hello!</body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Router Requests for Benchmark Testing in TypeScript\nDESCRIPTION: This code snippet defines an array of test routes used to simulate requests for benchmarking router performance. It includes various scenarios such as short static routes, dynamic routes, and wildcard paths.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/benchmarks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst routes: (Route & { name: string })[] = [\n  {\n    name: 'short static',\n    method: 'GET',\n    path: '/user',\n  },\n  {\n    name: 'static with same radix',\n    method: 'GET',\n    path: '/user/comments',\n  },\n  {\n    name: 'dynamic route',\n    method: 'GET',\n    path: '/user/lookup/username/hey',\n  },\n  {\n    name: 'mixed static dynamic',\n    method: 'GET',\n    path: '/event/abcd1234/comments',\n  },\n  {\n    name: 'post',\n    method: 'POST',\n    path: '/event/abcd1234/comment',\n  },\n  {\n    name: 'long static',\n    method: 'GET',\n    path: '/very/deeply/nested/route/hello/there',\n  },\n  {\n    name: 'wildcard',\n    method: 'GET',\n    path: '/static/index.html',\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Hello World Hono Application for Fastly\nDESCRIPTION: TypeScript code for a basic Hono application that responds with 'Hello Fastly!' text on the root path. Uses the app.fire() method to start the application on Fastly Compute.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// src/index.ts\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hello Fastly!'))\n\napp.fire()\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Body as ArrayBuffer in Hono\nDESCRIPTION: Shows how to parse a request body as an ArrayBuffer using the arrayBuffer() method, useful for working with binary data.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/entry', async (c) => {\n  const body = await c.req.arrayBuffer()\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Output Formatting in JavaScript\nDESCRIPTION: This snippet shows the difference between default JSON output and prettified JSON output when using the Pretty JSON middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/pretty-json.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /\n{\"project\":{\"name\":\"Hono\",\"repository\":\"https://github.com/honojs/hono\"}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// GET /?pretty\n{\n  \"project\": {\n    \"name\": \"Hono\",\n    \"repository\": \"https://github.com/honojs/hono\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Classes in Hono CSS Helper\nDESCRIPTION: Example of nesting CSS classes using the ${baseClass} {} syntax to apply styles to child elements within a specific parent class.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerClass = css`\n  color: white;\n  background-color: blue;\n`\nconst containerClass = css`\n  ${headerClass} {\n    h1 {\n      font-size: 3rem;\n    }\n  }\n`\nreturn c.render(\n  <div class={containerClass}>\n    <header class={headerClass}>\n      <h1>Hello!</h1>\n    </header>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Port for Hono Application in Bun\nDESCRIPTION: Modifying the Hono application to specify a custom port number for the server.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from 'hono'\n\nconst app = new Hono()\napp.get('/', (c) => c.text('Hello Bun!'))\n\nexport default {\n  port: 3000,\n  fetch: app.fetch,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Cloudflare Workers\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in a Cloudflare Workers environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/cloudflare-workers'\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Testing Utilities\nDESCRIPTION: Shows how to import the necessary components from Hono and its testing module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { testClient } from 'hono/testing'\n```\n\n----------------------------------------\n\nTITLE: ProxyFetch Type Definition\nDESCRIPTION: Defines the TypeScript interfaces for the proxy function, including ProxyRequestInit which extends the standard RequestInit interface with additional proxy-specific options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/proxy.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProxyRequestInit extends Omit<RequestInit, 'headers'> {\n  raw?: Request\n  headers?:\n    | HeadersInit\n    | [string, string][]\n    | Record<RequestHeader, string | undefined>\n    | Record<string, string | undefined>\n}\n\ninterface ProxyFetch {\n  (\n    input: string | URL | Request,\n    init?: ProxyRequestInit\n  ): Promise<Response>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Supported Languages Configuration in Language Detector\nDESCRIPTION: Shows how to configure the Language Detector middleware to support multiple languages and dialects with normalization.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlanguageDetector({\n  supportedLanguages: ['en', 'en-GB', 'ar', 'ar-EG'],\n  convertDetectedLanguage: (lang) => lang.replace('_', '-'), // Normalize\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Method Override Middleware in TypeScript\nDESCRIPTION: This snippet shows how to import the Hono framework and the method override middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/method-override.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { methodOverride } from 'hono/method-override'\n```\n\n----------------------------------------\n\nTITLE: Importing CORS Middleware in Hono\nDESCRIPTION: This snippet shows how to import the Hono framework and the CORS middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/cors.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\n```\n\n----------------------------------------\n\nTITLE: Importing JWK Auth Middleware in Hono\nDESCRIPTION: Shows how to import the Hono framework and the JWK auth middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwk.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { jwk } from 'hono/jwk'\n```\n\n----------------------------------------\n\nTITLE: Configuring CDK App Entry Point\nDESCRIPTION: Sets up the CDK application entry point with AWS account and region configuration for Lambda@Edge deployment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/lambda-edge.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env node\nimport 'source-map-support/register'\nimport * as cdk from 'aws-cdk-lib'\nimport { MyAppStack } from '../lib/my-app-stack'\n\nconst app = new cdk.App()\nnew MyAppStack(app, 'MyAppStack', {\n  env: {\n    account: process.env.CDK_DEFAULT_ACCOUNT,\n    region: 'us-east-1',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bearer Token Usage with cURL\nDESCRIPTION: Shows how to use a bearer token in an HTTP request using cURL from the terminal.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H 'Authorization: Bearer honoiscool' http://localhost:8787/auth/page\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Query Values with queries() in Hono\nDESCRIPTION: Demonstrates how to get multiple values for the same query parameter using the queries() method, which returns an array of values for a given parameter name.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/search', async (c) => {\n  // tags will be string[]\n  const tags = c.req.queries('tags')\n  //     ^?\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up a Hono project with AWS CDK using yarn\nDESCRIPTION: Commands to initialize a new AWS CDK project with TypeScript, install Hono, and create the necessary file structure using yarn.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nyarn add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Response Using Web Standard Response Constructor\nDESCRIPTION: Example of creating a Response object using the standard Web API Response constructor, equivalent to Hono's c.body() method.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/context.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Response('Thank you for coming', {\n  status: 201,\n  headers: {\n    'X-Message': 'Hello!',\n    'Content-Type': 'text/plain',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: ToSSGInterface Definition\nDESCRIPTION: TypeScript interface defining the parameters for the toSSG function, which takes a Hono app, a filesystem module, and optional configuration options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport interface ToSSGInterface {\n  (\n    app: Hono,\n    fsModule: FileSystemModule,\n    options?: ToSSGOptions\n  ): Promise<ToSSGResult>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CDK Stack for Lambda@Edge\nDESCRIPTION: Defines the AWS CDK stack with CloudFront distribution, Lambda function, and S3 bucket configuration for edge computing setup.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/lambda-edge.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Construct } from 'constructs'\nimport * as cdk from 'aws-cdk-lib'\nimport * as cloudfront from 'aws-cdk-lib/aws-cloudfront'\nimport * as origins from 'aws-cdk-lib/aws-cloudfront-origins'\nimport * as lambda from 'aws-cdk-lib/aws-lambda'\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs'\nimport * as s3 from 'aws-cdk-lib/aws-s3'\n\nexport class MyAppStack extends cdk.Stack {\n  public readonly edgeFn: lambda.Function\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props)\n    const edgeFn = new NodejsFunction(this, 'edgeViewer', {\n      entry: 'lambda/index_edge.ts',\n      handler: 'handler',\n      runtime: lambda.Runtime.NODEJS_20_X,\n    })\n\n    // Upload any html\n    const originBucket = new s3.Bucket(this, 'originBucket')\n\n    new cloudfront.Distribution(this, 'Cdn', {\n      defaultBehavior: {\n        origin: new origins.S3Origin(originBucket),\n        edgeLambdas: [\n          {\n            functionVersion: edgeFn.currentVersion,\n            eventType: cloudfront.LambdaEdgeEventType.VIEWER_REQUEST,\n          },\n        ],\n      },\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Language Detector\nDESCRIPTION: Demonstrates how to enable debug logging for the Language Detector middleware to see detection steps.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlanguageDetector({\n  debug: true, // Shows: \"Detected from querystring: ar\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for Cloudflare Workers in TOML\nDESCRIPTION: This snippet demonstrates the Wrangler configuration for Cloudflare Workers. It sets the compatibility date, enables Node.js compatibility, and defines an environment variable.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-vitest.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncompatibility_date = \"2024-09-09\"\ncompatibility_flags = [ \"nodejs_compat\" ]\n\n[vars]\nMY_VAR = \"my variable\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Better Auth Route in Hono Application\nDESCRIPTION: TypeScript code to mount the Better Auth route in the main Hono application, setting up the base path for API routes.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n....\nimport { Hono } from \"hono\";\nimport type { AuthType } from \"../lib/auth\"\nimport auth from \"@/routes/auth\";\n....\n\nconst app = new Hono<{ Bindings: AuthType }>({\n    strict: false,\n});\n\nconst routes = [auth, ...other routes] as const;\n\nroutes.forEach((route) => {\n  app.basePath(\"/api\").route(\"/\", route);\n});\n\n....\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Importing CSRF Protection Middleware in Hono (TypeScript)\nDESCRIPTION: Import statements for the Hono framework and the CSRF protection middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/csrf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { csrf } from 'hono/csrf'\n```\n\n----------------------------------------\n\nTITLE: Importing Context Storage Middleware in TypeScript\nDESCRIPTION: This snippet shows how to import the necessary functions from the Hono framework to use the Context Storage Middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/context-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { contextStorage, getContext } from 'hono/context-storage'\n```\n\n----------------------------------------\n\nTITLE: Verifying CBOR Response with curl and hexdump (Shell)\nDESCRIPTION: This command demonstrates how to use curl to fetch the CBOR response from the server and pipe it through hexdump to view the binary output in a readable format.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cbor.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n$ curl -s http://localhost:3000/ | hexdump -C\n00000000  a1 67 6d 65 73 73 61 67  65 6b 68 65 6c 6c 6f 20  |.gmessagekhello |\n00000010  43 42 4f 52 21                                    |CBOR!|\n00000015\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Import from npm in deno.json\nDESCRIPTION: JSON configuration to use npm:hono instead of jsr:@hono/hono in a Deno project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"hono\": \"jsr:@hono/hono\" // [!code --]\n    \"hono\": \"npm:hono\" // [!code ++]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Precompressed File Serving in Hono\nDESCRIPTION: Example of using the precompressed option to serve precompressed files based on the Accept-Encoding header.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    precompressed: true,\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Path-Based Routing with Language Detection in Hono.js\nDESCRIPTION: Illustrates how to use the detected language in a route handler for path-based language routing.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/language.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/:lang/home', (c) => {\n  const lang = c.get('language') // 'en', 'ar', etc.\n  return c.json({ message: getLocalizedContent(lang) })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Helper in Cloudflare Workers\nDESCRIPTION: Shows how to import the WebSocket helper from Hono for Cloudflare Workers environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/cloudflare-workers'\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts for Build and Deploy\nDESCRIPTION: JSON configuration for package.json scripts that handle building the TypeScript application and deploying it to Alibaba Cloud Function Compute.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"esbuild --bundle --outfile=./dist/index.js --platform=node --target=node20 ./src/index.ts\",\n    \"deploy\": \"s deploy -y\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure Functions to the Cloud\nDESCRIPTION: Command to publish the built Azure Functions application to Azure Cloud, where <YourFunctionAppName> should be replaced with the actual function app name created in Azure.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nfunc azure functionapp publish <YourFunctionAppName>\n```\n\n----------------------------------------\n\nTITLE: Installing Hono using Package Managers\nDESCRIPTION: This code block shows commands for installing Hono using various package managers including npm, yarn, pnpm, bun, and deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm create hono@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create hono\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm create hono@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create hono@latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno init --npm hono@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma and Dependencies for Hono Project\nDESCRIPTION: Commands to install Prisma, its client extension, and initialize a Prisma project with Prisma Postgres.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i prisma --save-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @prisma/extension-accelerate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx prisma@latest init --db\n```\n\n----------------------------------------\n\nTITLE: Compiling Hono Client for Improved Performance\nDESCRIPTION: Demonstrates a technique to pre-compile the Hono client type, which can significantly improve IDE performance by reducing runtime type instantiations.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport { app } from './app'\nimport { hc } from 'hono/client'\n\n// this is a trick to calculate the type when compiling\nconst client = hc<typeof app>('')\nexport type Client = typeof client\n\nexport const hcWithType = (...args: Parameters<typeof hc>): Client =>\n  hc<typeof app>(...args)\n```\n\n----------------------------------------\n\nTITLE: Initializing SmartRouter with RegExpRouter and TrieRouter in Hono\nDESCRIPTION: This snippet shows how Hono initializes its default router as a SmartRouter that combines RegExpRouter and TrieRouter. The SmartRouter automatically selects the optimal router based on the registered routes.\nSOURCE: https://github.com/honojs/website/blob/main/docs/concepts/routers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Inside the core of Hono.\nreadonly defaultRouter: Router = new SmartRouter({\n  routers: [new RegExpRouter(), new TrieRouter()],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Dev Helper Functions\nDESCRIPTION: Shows how to import the development helper functions from the Hono framework.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/dev.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getRouterName, showRoutes } from 'hono/dev'\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Namespace in wrangler.toml\nDESCRIPTION: Example configuration for a KV namespace in wrangler.toml, specifying binding and preview ID.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[[kv_namespaces]]\nbinding = \"MY_KV\"\nid = \"abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Setting up a Hono project for Netlify using package managers\nDESCRIPTION: Command-line instructions for initializing a new Hono project using different package managers with the Netlify template.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/netlify.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Serving in wrangler.toml\nDESCRIPTION: Configuration example for serving static files with Cloudflare Workers. This specifies the directory where static assets are stored for the application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\nassets = { directory = \"public\" }\n```\n\n----------------------------------------\n\nTITLE: Inserting Raw HTML in Hono JSX\nDESCRIPTION: Shows how to directly insert HTML using the dangerouslySetInnerHTML attribute in Hono JSX components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\napp.get('/foo', (c) => {\n  const inner = { __html: 'JSX &middot; SSR' }\n  const Div = <div dangerouslySetInnerHTML={inner} />\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JSX in Hono\nDESCRIPTION: Modifies the tsconfig.json to enable JSX syntax for use with Hono. Specifies the JSX factory and import source.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"hono/jsx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying RequestIdVariables Type in Hono Application\nDESCRIPTION: This snippet shows how to explicitly specify the RequestIdVariables type when creating a new Hono application. It demonstrates the use of TypeScript generics to ensure type safety when working with the Request ID Middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/request-id.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestIdVariables } from 'hono/request-id'\n\nconst app = new Hono<{\n  Variables: RequestIdVariables\n}>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Variables in wrangler.toml\nDESCRIPTION: Example of configuring environment variables in wrangler.toml by specifying a variable named MY_NAME.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\nMY_NAME = \"Hono\"\n```\n\n----------------------------------------\n\nTITLE: Importing IP Restriction Middleware in TypeScript\nDESCRIPTION: This snippet shows how to import the Hono framework and the IP restriction middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/ip-restriction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { ipRestriction } from 'hono/ip-restriction'\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js adapter for Hono\nDESCRIPTION: Commands to install the Node.js adapter for Hono using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @hono/node-server\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @hono/node-server\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @hono/node-server\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @hono/node-server\n```\n\n----------------------------------------\n\nTITLE: ConnInfo Helper Type Definitions\nDESCRIPTION: Comprehensive type definitions for the ConnInfo Helper, including AddressType, NetAddrInfo, and ConnInfo interfaces.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype AddressType = 'IPv6' | 'IPv4' | undefined\n\ntype NetAddrInfo = {\n  /**\n   * Transport protocol type\n   */\n  transport?: 'tcp' | 'udp'\n  /**\n   * Transport port number\n   */\n  port?: number\n\n  address?: string\n  addressType?: AddressType\n} & (\n  | {\n      /**\n       * Host name such as IP Addr\n       */\n      address: string\n\n      /**\n       * Host name type\n       */\n      addressType: AddressType\n    }\n  | {}\n)\n\n/**\n * HTTP Connection information\n */\ninterface ConnInfo {\n  /**\n   * Remote information\n   */\n  remote: NetAddrInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hono on Alibaba Cloud Function Compute\nDESCRIPTION: Command-line instructions for setting up a new project with Hono.js and the Alibaba Cloud Function Compute adapter using npm, yarn, pnpm, or bun package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\nnpm i hono hono-alibaba-cloud-fc3-adapter\nnpm i -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\nyarn add hono hono-alibaba-cloud-fc3-adapter\nyarn add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\npnpm add hono hono-alibaba-cloud-fc3-adapter\npnpm add -D @serverless-devs/s esbuild\nmkdir src\ntouch src/index.ts\n```\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\nbun add hono hono-alibaba-cloud-fc3-adapter\nbun add -D esbuild @serverless-devs/s\nmkdir src\ntouch src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating wrangler.toml for Bindings\nDESCRIPTION: Command to create a wrangler.toml file for configuring Cloudflare Workers settings.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntouch wrangler.toml\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for a Hono Project\nDESCRIPTION: Commands for installing dependencies after creating a Hono project. This shows the syntax for different package managers to initialize the required dependencies.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\npnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nbun i\n```\n\n----------------------------------------\n\nTITLE: Setting up a Hono project with AWS CDK using bun\nDESCRIPTION: Commands to initialize a new AWS CDK project with TypeScript, install Hono, and create the necessary file structure using bun.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nbun add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n----------------------------------------\n\nTITLE: Using ErrorBoundary in Hono JSX\nDESCRIPTION: Shows how to use the experimental ErrorBoundary component to catch errors in child components and display fallback content in Hono JSX.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SyncComponent() {\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/sync', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <SyncComponent />\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\nasync function AsyncComponent() {\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  throw new Error('Error')\n  return <div>Hello</div>\n}\n\napp.get('/with-suspense', async (c) => {\n  return c.html(\n    <html>\n      <body>\n        <ErrorBoundary fallback={<div>Out of Service</div>}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <AsyncComponent />\n          </Suspense>\n        </ErrorBoundary>\n      </body>\n    </html>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Deno\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in a Deno environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/deno'\n```\n\n----------------------------------------\n\nTITLE: Importing WebSocket Helper in Deno\nDESCRIPTION: Shows how to import the WebSocket helper from Hono for Deno environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/websocket.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { upgradeWebSocket } from 'hono/deno'\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fastly with yarn\nDESCRIPTION: Command to build and deploy the application to Fastly using yarn.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: Importing the Quick Hono Preset\nDESCRIPTION: Import statement for the 'quick' Hono preset which is optimized for environments where applications are initialized for every request.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono/quick'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Local Development\nDESCRIPTION: Example of a .dev.vars file for configuring environment variables during local development. This approach allows setting environment-specific values without committing them to version control.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nSECRET_KEY=value\nAPI_TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Functions Route Prefix in host.json\nDESCRIPTION: JSON configuration to modify the default route prefix in the host.json file, removing the '/api' prefix to allow Hono to handle routes from the root path.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensions\": {\n    \"http\": {\n        \"routePrefix\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with bun\nDESCRIPTION: bun commands to install Hono and Vite for the Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbun add hono\nbun add -D vite\n```\n\n----------------------------------------\n\nTITLE: Importing ETag Middleware in Hono.js (TypeScript)\nDESCRIPTION: Shows how to import the Hono framework and the ETag middleware. This is the first step in using the ETag functionality in a Hono.js application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/etag.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { etag } from 'hono/etag'\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Hono Next.js project\nDESCRIPTION: Commands to move into the project directory and install dependencies using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\npnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nbun i\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono App with Cloudflare Queues and R2 Bucket in TypeScript\nDESCRIPTION: This code snippet demonstrates a Hono application that uses Cloudflare Queues for error handling and R2 Bucket for error logging. It includes route handling, error handling, and a queue consumer function.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cloudflare-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n\ntype Environment = {\n  readonly ERROR_QUEUE: Queue<Error>\n  readonly ERROR_BUCKET: R2Bucket\n}\n\nconst app = new Hono<{\n  Bindings: Environment\n}>()\n\napp.get('/', (c) => {\n  if (Math.random() < 0.5) {\n    return c.text('Success!')\n  }\n  throw new Error('Failed!')\n})\n\napp.onError(async (err, c) => {\n  await c.env.ERROR_QUEUE.send(err)\n  return c.text(err.message, { status: 500 })\n})\n\nexport default {\n  fetch: app.fetch,\n  async queue(batch: MessageBatch<Error>, env: Environment) {\n    let file = ''\n    for (const message of batch.messages) {\n      const error = message.body\n      file += error.stack || error.message || String(error)\n      file += '\\r\\n'\n    }\n    await env.ERROR_BUCKET.put(`errors/${Date.now()}.log`, file)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using SSG with Bun\nDESCRIPTION: Example of using the toSSG function with Bun, which provides a built-in adapter for Bun's filesystem without requiring an explicit filesystem module parameter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { toSSG } from 'hono/bun'\n\ntoSSG(app) // The second argument is an option typed `ToSSGOptions`.\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Streaming Helpers\nDESCRIPTION: Shows how to import the streaming helper functions from the Hono framework.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/streaming.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { stream, streamText, streamSSE } from 'hono/streaming'\n```\n\n----------------------------------------\n\nTITLE: Importing Secure Headers Middleware in TypeScript\nDESCRIPTION: Shows how to import the Hono framework and the secureHeaders middleware from their respective modules.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { secureHeaders } from 'hono/secure-headers'\n```\n\n----------------------------------------\n\nTITLE: Defining Hono Routes with Path Parameters\nDESCRIPTION: Creates a route with a path parameter ':id' and an optional query parameter 'page'. This demonstrates how to define parameterized routes for RPC.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst route = app.get(\n  '/posts/:id',\n  zValidator(\n    'query',\n    z.object({\n      page: z.string().optional(),\n    })\n  ),\n  (c) => {\n    // ...\n    return c.json({\n      title: 'Night',\n      body: 'Time to sleep',\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Hono.js Lambda@Edge Project with Package Managers\nDESCRIPTION: Initialize a new CDK TypeScript project and install Hono.js dependencies using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/lambda-edge.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\ncdk init app -l typescript\nnpm i hono\nmkdir lambda\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Static Files\nDESCRIPTION: Bash command showing the output directory structure after running the SSG build script, displaying the generated HTML files.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nls ./static\nabout.html  index.html\n```\n\n----------------------------------------\n\nTITLE: Importing JWT Auth Middleware in Hono (TypeScript)\nDESCRIPTION: This snippet shows how to import the necessary components for using JWT authentication middleware in a Hono application. It includes the Hono core, JWT middleware, and type definitions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jwt.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { jwt } from 'hono/jwt'\nimport type { JwtVariables } from 'hono/jwt'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with bun\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using bun.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\nbun i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Package Managers\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\npnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nbun i\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project with yarn\nDESCRIPTION: Command to create a new Hono project for Fastly Compute using yarn.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn create hono my-app\n```\n\n----------------------------------------\n\nTITLE: Creating Better Auth Instance with Prisma Adapter\nDESCRIPTION: TypeScript code to create a Better Auth instance using Prisma adapter, configuring database, trusted origins, and authentication methods.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { betterAuth } from \"better-auth\";\nimport { prismaAdapter } from \"better-auth/adapters/prisma\";\n\nimport prisma from \"@/db/index\";\nimport env from \"@/env\";\n\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, {\n    provider: \"postgresql\",\n  }),\n  // Allow requests from the frontend development server\n  trustedOrigins: [\"http://localhost:5173\"],\n  emailAndPassword: {\n    enabled: true,\n  },\n  socialProviders: {\n    github: {\n      clientId: env.GITHUB_CLIENT_ID,\n      clientSecret: env.GITHUB_CLIENT_SECRET,\n    },\n    google: {\n      clientId: env.GOOGLE_CLIENT_ID,\n      clientSecret: env.GOOGLE_CLIENT_SECRET,\n    },\n  },\n});\n\nexport type AuthType = {\n  Variables: {\n    user: typeof auth.$Infer.Session.user | null;\n    session: typeof auth.$Infer.Session.session | null;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Routes with BeforeRequestHook\nDESCRIPTION: Example of using the beforeRequestHook to process only GET requests during static site generation, filtering out other HTTP methods.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntoSSG(app, fs, {\n  beforeRequestHook: (req) => {\n    if (req.method === 'GET') {\n      return req\n    }\n    return false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Body Limit Middleware in TypeScript\nDESCRIPTION: Shows how to import the Hono framework and the Body Limit Middleware.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/body-limit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { bodyLimit } from 'hono/body-limit'\n```\n\n----------------------------------------\n\nTITLE: Deploying a Hono application with AWS CDK\nDESCRIPTION: Command to deploy the Hono application to AWS Lambda using the CDK.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Client with Credentials\nDESCRIPTION: Creates a Hono client with credentials option enabled to send cookies with every request. This configuration is useful for authenticated API calls.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// client.ts\nconst client = hc<AppType>('http://localhost:8787/', {\n  'init': {\n    'credentials\": 'include',\n  }\n})\n\n// This request will now include any cookies you might have set\nconst res = await client.posts.$get({\n  query: {\n    id: '123',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Bun\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in a Bun environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/bun'\n```\n\n----------------------------------------\n\nTITLE: Importing Hono validator\nDESCRIPTION: Import the validator middleware from the Hono validator module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validator } from 'hono/validator'\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure for Hono Project\nDESCRIPTION: The file structure of a basic Hono.js project targeting Cloudflare Pages, showing the key files and directories.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n./\n├── package.json\n├── public\n│   └── static // Put your static files.\n│       └── style.css // You can refer to it as `/static/style.css`.\n├── src\n│   ├── index.tsx // The entry point for server-side.\n│   └── renderer.tsx\n├── tsconfig.json\n└── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Hono Project with Different Package Managers\nDESCRIPTION: Commands to initialize a new Hono.js project using various package managers like npm, yarn, pnpm, bun, and deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Importing Trailing Slash Middleware in Hono.js (TypeScript)\nDESCRIPTION: This snippet shows how to import the appendTrailingSlash and trimTrailingSlash functions from the Hono trailing-slash module. These functions are used to handle trailing slashes in URLs.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/trailing-slash.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport {\n  appendTrailingSlash,\n  trimTrailingSlash,\n} from 'hono/trailing-slash'\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project with pnpm\nDESCRIPTION: Command to create a new Hono project for Fastly Compute using pnpm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm create hono my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Imports for Hono and Third-party Middleware in deno.json\nDESCRIPTION: JSON configuration to use npm packages for Hono, Zod, and @hono/zod-validator in a Deno project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"hono\": \"npm:hono\",\n    \"zod\": \"npm:zod\",\n    \"@hono/zod-validator\": \"npm:@hono/zod-validator\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Method in Hono\nDESCRIPTION: Shows how to access the HTTP method of the request using the method property, which returns the method name (like GET, POST, etc.).\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/request.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/about/me', async (c) => {\n  const method = c.req.method // `GET`\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Kawaii Mode with Vue.js\nDESCRIPTION: This script sets up a 'kawaii' mode for the Hono documentation site. It checks for a kawaii preference in localStorage and URL parameters, then updates the logo image accordingly. The script runs after the component is mounted.\nSOURCE: https://github.com/honojs/website/blob/main/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onMounted } from 'vue'\nonMounted(() => {\n  var preferredKawaii\n  try {\n    preferredKawaii = localStorage.getItem('kawaii')\n  } catch (err) {}\n  const urlParams = new URLSearchParams(window.location.search)\n  const kawaii = urlParams.get('kawaii')\n  const setKawaii = () => {\n    const images = document.querySelectorAll('.VPImage.image-src')\n    images.forEach((img) => {\n      img.src = '/images/hono-kawaii.png'\n      img.classList.add(\"kawaii\")\n    })\n  }\n  if (kawaii === 'true') {\n    try {\n      localStorage.setItem('kawaii', true)\n    } catch (err) {}\n    console.log('kawaii mode enabled. logo credits to @sawaratsuki1004 via https://github.com/SAWARATSUKI/ServiceLogos');\n    setKawaii()\n  } else if (kawaii === 'false') {\n    try {\n      localStorage.removeItem('kawaii', false)\n    } catch (err) {}\n    const images = document.querySelectorAll('.VPImage.image-src')\n    images.forEach((img) => {\n      img.src = '/images/code.webp'\n      img.classList.remove(\"kawaii\")\n    })\n  } else if (preferredKawaii) {\n    setKawaii()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Method Override in Hono.js\nDESCRIPTION: This HTML form example shows how to send a DELETE request using a POST method with a hidden input field for method override.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/method-override.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/posts\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"DELETE\" />\n  <input type=\"text\" name=\"id\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rewriting Request Path for Static Files in Hono\nDESCRIPTION: Example of using the rewriteRequestPath option to map URLs to different file paths when serving static files.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Helper Components in Hono\nDESCRIPTION: How to import the CSS helper components from the Hono framework, including css, cx, keyframes, and Style components.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { css, cx, keyframes, Style } from 'hono/css'\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for Hono Projects\nDESCRIPTION: Example configuration for setting up Renovate dependency management in Hono projects using a third-party renovate-config. The configuration extends from shinGangan/renovate-config-hono repository.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"github>shinGangan/renovate-config-hono\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: pnpm commands to install Hono and Vite for the Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm add hono\npnpm add -D vite\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project with bun\nDESCRIPTION: Command to create a new Hono project for Fastly Compute using bun.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun create hono@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with bun\nDESCRIPTION: bun command to start the Vite development server for the Hono Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: TSConfig for Hono JSX DOM Runtime\nDESCRIPTION: Configuration for using the lightweight Hono JSX DOM runtime in TypeScript projects.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"hono/jsx/dom\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js development server\nDESCRIPTION: Commands to start the Next.js development server using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Avoiding Ruby on Rails-like Controllers in Hono (TypeScript)\nDESCRIPTION: This snippet demonstrates why creating Ruby on Rails-like controllers in Hono is not recommended due to type inference issues with path parameters.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/best-practices.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 🙁\n// A RoR-like Controller\nconst booksList = (c: Context) => {\n  return c.json('list books')\n}\n\napp.get('/books', booksList)\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 🙁\n// A RoR-like Controller\nconst bookPermalink = (c: Context) => {\n  const id = c.req.param('id') // Can't infer the path param\n  return c.json(`get ${id}`)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// 😃\napp.get('/books/:id', (c) => {\n  const id = c.req.param('id') // Can infer the path param\n  return c.json(`get ${id}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JSX with react-jsx Option\nDESCRIPTION: Shows the TypeScript configuration needed to use useRequestContext with the react-jsx option instead of precompile.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"compilerOptions\": {\n     \"jsx\": \"react-jsx\",\n     \"jsxImportSource\": \"hono/jsx\"\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono Project for Deno\nDESCRIPTION: Command to create a new Hono project using the Deno template.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: showRoutes Console Output\nDESCRIPTION: Shows the expected console output format when using showRoutes() to display registered routes.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/dev.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nGET   /v1/posts\nGET   /v1/posts/:id\nPOST  /v1/posts\n```\n\n----------------------------------------\n\nTITLE: Importing Hono Proxy Helper\nDESCRIPTION: Shows how to import the Hono framework and the proxy helper from the Hono proxy module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/proxy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { proxy } from 'hono/proxy'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Not Found Handling in Hono RPC\nDESCRIPTION: Shows an incorrect approach to handling 'not found' responses in Hono RPC. Using c.notFound() prevents proper type inference on the client side.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/rpc.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nexport const routes = new Hono().get(\n  '/posts',\n  zValidator(\n    'query',\n    z.object({\n      id: z.string(),\n    })\n  ),\n  async (c) => {\n    const { id } = c.req.valid('query')\n    const post: Post | undefined = await getPost(id)\n\n    if (post === undefined) {\n      return c.notFound() // ❌️\n    }\n\n    return c.json({ post })\n  }\n)\n\n// client.ts\nimport { hc } from 'hono/client'\n\nconst client = hc<typeof routes>('/')\n\nconst res = await client.posts[':id'].$get({\n  param: {\n    id: '123',\n  },\n})\n\nconst data = await res.json() // 🙁 data is unknown\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: npm commands to install Hono and Vite for the Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i hono\nnpm i -D vite\n```\n\n----------------------------------------\n\nTITLE: Vite Config for Hono JSX DOM Runtime\nDESCRIPTION: Vite configuration for using Hono JSX DOM runtime with esbuild transform options.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/jsx-dom.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsxImportSource: 'hono/jsx/dom',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Hono and Azure Functions Adapter Dependencies\nDESCRIPTION: Package installation commands for different Node.js package managers to add Hono and the Azure Functions Adapter to the project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @marplex/hono-azurefunc-adapter hono\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @marplex/hono-azurefunc-adapter hono\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @marplex/hono-azurefunc-adapter hono\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @marplex/hono-azurefunc-adapter hono\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with bun\nDESCRIPTION: Command to start the local development server using bun.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nbun run start\n```\n\n----------------------------------------\n\nTITLE: Running a Hono Development Server Locally\nDESCRIPTION: Commands to start a local development server using different package managers. This allows testing the application before deployment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Handler Response Example in Hono.js\nDESCRIPTION: Shows how a handler returns a Response object to end request processing.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/posts', (c) => c.text('Created!', 201))\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Models for Better Auth\nDESCRIPTION: Command to generate required models, fields, and relationships in the Prisma schema file for Better Auth.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbunx @better-auth/cli generate\n```\n\n----------------------------------------\n\nTITLE: Creating New Edge Function\nDESCRIPTION: Command to create a new Edge Function named 'hello-world' in the Supabase project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions new hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory with Shell Commands\nDESCRIPTION: Shell commands to create and navigate to the project directory for a Hono Service Worker application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-app\ncd my-app\n```\n\n----------------------------------------\n\nTITLE: Deploying a Hono application to Netlify\nDESCRIPTION: Command to deploy the Hono application to Netlify's production environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/netlify.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnetlify deploy --prod\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Node.js\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in a Node.js environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from '@hono/node-server/conninfo'\n```\n\n----------------------------------------\n\nTITLE: Exporting Hono App for Cloudflare Workers and Bun in TypeScript\nDESCRIPTION: Shows the entry point for exporting the Hono app for use with Cloudflare Workers and Bun.\nSOURCE: https://github.com/honojs/website/blob/main/examples/zod-openapi.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Creating KV Namespace with Wrangler\nDESCRIPTION: Command to create a KV namespace using Wrangler CLI for local development.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nwrangler kv namespace create MY_KV --preview\n```\n\n----------------------------------------\n\nTITLE: Composing String Class Names with cx Helper in Hono\nDESCRIPTION: Example of using the cx helper to combine regular string class names with css template literal class names.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/css.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst Header = () => <a class={cx('h1', primaryClass)}>Hi</a>\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Function with cURL\nDESCRIPTION: cURL command to test the deployed Edge Function by making a GET request to the local endpoint.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl  --location  'http://127.0.0.1:54321/functions/v1/hello-world/hello'\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point for Service Worker Demo\nDESCRIPTION: Basic HTML file with a link to a route that will be handled by the Service Worker and a script to register the Service Worker.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <body>\n    <a href=\"/sw\">Hello World by Service Worker</a>\n    <script type=\"module\" src=\"/main.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with yarn\nDESCRIPTION: yarn command to start the Vite development server for the Hono Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting up a Hono project with AWS CDK using pnpm\nDESCRIPTION: Commands to initialize a new AWS CDK project with TypeScript, install Hono, and create the necessary file structure using pnpm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-app\ncd my-app\ncdk init app -l typescript\npnpm add hono\nmkdir lambda\ntouch lambda/index.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Bearer Auth Middleware in TypeScript\nDESCRIPTION: Demonstrates how to import the Hono framework and the bearer auth middleware in a TypeScript file.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/bearer-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { bearerAuth } from 'hono/bearer-auth'\n```\n\n----------------------------------------\n\nTITLE: Decoded CBOR as JSON (JSON)\nDESCRIPTION: This snippet shows the JSON representation of the decoded CBOR data, demonstrating the equivalence between the binary CBOR format and its JSON counterpart.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cbor.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"message\": \"hello CBOR!\" }\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fastly with pnpm\nDESCRIPTION: Command to build and deploy the application to Fastly using pnpm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: AcceptHeader Type Definition in TypeScript\nDESCRIPTION: Defines the AcceptHeader type, which specifies the valid Accept headers that can be processed.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/accepts.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AcceptHeader =\n  | 'Accept'\n  | 'Accept-Charset'\n  | 'Accept-Encoding'\n  | 'Accept-Language'\n  | 'Accept-Patch'\n  | 'Accept-Post'\n  | 'Accept-Ranges'\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Various Package Managers\nDESCRIPTION: Commands to start the local development server using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-pages.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm\nDESCRIPTION: Command to start the local development server using npm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Headers Middleware with Custom Options in TypeScript\nDESCRIPTION: Shows how to customize the secureHeaders middleware by disabling specific headers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/secure-headers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\napp.use(\n  '*',\n  secureHeaders({\n    xFrameOptions: false,\n    xXssProtection: false,\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: ToSSGResult Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of the result returned by the toSSG function, including success status, list of generated files, and any potential error.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/ssg.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport interface ToSSGResult {\n  success: boolean\n  files: string[]\n  error?: Error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: yarn commands to install Hono and Vite for the Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add hono\nyarn add -D vite\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project\nDESCRIPTION: Command to initialize a new Supabase project in the current directory using Supabase CLI.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsupabase init\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fastly with bun\nDESCRIPTION: Command to build and deploy the application to Fastly using bun.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nbun run deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Accepts Helper in TypeScript\nDESCRIPTION: Shows how to import the Hono framework and the accepts helper function.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/accepts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { accepts } from 'hono/accepts'\n```\n\n----------------------------------------\n\nTITLE: Importing the Tiny Hono Preset\nDESCRIPTION: Import statement for the 'tiny' Hono preset which provides the smallest router package for resource-limited environments.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono/tiny'\n```\n\n----------------------------------------\n\nTITLE: Installing @std/assert for Testing in Deno\nDESCRIPTION: Command to add the @std/assert package for testing in Deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndeno add jsr:@std/assert\n```\n\n----------------------------------------\n\nTITLE: Using Method Override Middleware in Hono.js Application\nDESCRIPTION: This example demonstrates how to use the method override middleware in a Hono.js application, allowing it to handle DELETE requests sent via POST.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/method-override.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Hono()\n\n// If no options are specified, the value of `_method` in the form,\n// e.g. DELETE, is used as the method.\napp.use('/posts', methodOverride({ app }))\n\napp.delete('/posts', (c) => {\n  // ....\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe SDK\nDESCRIPTION: Command to install the official Stripe SDK using npm.\nSOURCE: https://github.com/honojs/website/blob/main/examples/stripe-webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stripe\n```\n\n----------------------------------------\n\nTITLE: Creating a new Pylon project with npm\nDESCRIPTION: Command to create a new Pylon project using npm. This sets up a basic project structure with necessary configuration files.\nSOURCE: https://github.com/honojs/website/blob/main/examples/pylon.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create pylon my-pylon@latest\n```\n\n----------------------------------------\n\nTITLE: Disabling Vercel Node.js helpers\nDESCRIPTION: Environment variable setting to disable Vercel Node.js helpers for Pages Router compatibility.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/vercel.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNODEJS_HELPERS=0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hono Project\nDESCRIPTION: Commands to install dependencies for a newly created Hono project using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/basic.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\npnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nbun i\n```\n\n----------------------------------------\n\nTITLE: Tiny Hono Router Configuration\nDESCRIPTION: The router configuration used by the 'tiny' Hono preset. It uses a simple PatternRouter to minimize bundle size and resource usage.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.router = new PatternRouter()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Functions Core Tools on macOS\nDESCRIPTION: Commands to install Azure Functions Core Tools version 4 on macOS using Homebrew, which is required for creating and managing Azure Functions.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/azure-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap azure/functions\nbrew install azure-functions-core-tools@4\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare Workers Types for TypeScript\nDESCRIPTION: Commands to install Cloudflare Workers types for TypeScript development. This provides proper type definitions for Cloudflare Workers APIs.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save-dev @cloudflare/workers-types\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add -D @cloudflare/workers-types\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add -D @cloudflare/workers-types\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add --dev @cloudflare/workers-types\n```\n\n----------------------------------------\n\nTITLE: Importing Logger Middleware in Hono (TypeScript)\nDESCRIPTION: Shows how to import the Hono framework and the logger middleware from their respective modules.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/logger.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { logger } from 'hono/logger'\n```\n\n----------------------------------------\n\nTITLE: Running Hono Application in Deno\nDESCRIPTION: Command to start the Hono application using Deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndeno task start\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory Instance in Hono (TypeScript)\nDESCRIPTION: Demonstrates how to create an instance of the Factory class using createFactory(). It also shows how to pass custom environment types as generics.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFactory } from 'hono/factory'\n\nconst factory = createFactory()\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Env = {\n  Variables: {\n    foo: string\n  }\n}\n\nconst factory = createFactory<Env>()\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe API Keys in Environment Variables\nDESCRIPTION: Example of setting Stripe API keys in a .dev.vars file for secure access.\nSOURCE: https://github.com/honojs/website/blob/main/examples/stripe-webhook.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSTRIPE_API_KEY=sk_test_xxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxx\n```\n\n----------------------------------------\n\nTITLE: Running a Netlify development server\nDESCRIPTION: Command to start the Netlify development server locally to test the Hono application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/netlify.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnetlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using npm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Better Auth Framework\nDESCRIPTION: Commands to install the Better Auth framework using different package managers.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\nnpm install better-auth\n\n# bun\nbun add better-auth\n\n# pnpm\npnpm add better-auth\n\n# yarn\nyarn add better-auth\n```\n\n----------------------------------------\n\nTITLE: Importing HTML Helper in Hono TypeScript\nDESCRIPTION: Shows how to import the html and raw functions from the Hono HTML helper module.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/html.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { html, raw } from 'hono/html'\n```\n\n----------------------------------------\n\nTITLE: Rewriting Request Path for Static Files in Hono\nDESCRIPTION: Example of using the rewriteRequestPath option to map URLs to different file paths when serving static files.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\napp.get(\n  '/static/*',\n  serveStatic({\n    root: './',\n    rewriteRequestPath: (path) =>\n      path.replace(/^\\/static/, '/statics'),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Edge Functions to Production\nDESCRIPTION: Commands for deploying Edge Functions to production, including options for deploying all functions or individual ones.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/supabase-functions.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsupabase functions deploy\n\nsupabase functions deploy hello-world\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Hono Application in Deno\nDESCRIPTION: Command to run tests for a Hono application in Deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/deno.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndeno test hello.ts\n```\n\n----------------------------------------\n\nTITLE: Project Initialization Commands\nDESCRIPTION: Various package manager commands to create a new Hono project using different package managers\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/nodejs.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm create hono my-app\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with Various Package Managers\nDESCRIPTION: Command examples for creating a new Hono project using different package managers. This allows developers to initialize a Hono project with their preferred tooling.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm create hono my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with yarn\nDESCRIPTION: Command to start the local development server using yarn.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Importing Zod Validator Middleware\nDESCRIPTION: Import the zValidator middleware from the @hono/zod-validator package.\nSOURCE: https://github.com/honojs/website/blob/main/docs/guides/validation.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zValidator } from '@hono/zod-validator'\n```\n\n----------------------------------------\n\nTITLE: Handling Immutable Headers in Proxy Responses with Hono (TypeScript)\nDESCRIPTION: This snippet shows how to handle the 'Can't modify immutable headers' error when working with proxy responses in Hono. It demonstrates cloning the response object to create a new response with modifiable headers, which is necessary because the headers of the Response returned by fetch are immutable.\nSOURCE: https://github.com/honojs/website/blob/main/examples/proxy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', async (_c) => {\n  const response = await fetch('https://example.com')\n  // clone the response to return a response with modifiable headers\n  const newResponse = new Response(response.body, response)\n  return newResponse\n})\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with pnpm\nDESCRIPTION: Command to start the local development server using pnpm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Rendering Hono Examples in Vue.js\nDESCRIPTION: This Vue.js component imports data from a menu file and uses it to render a list of Hono framework examples. It dynamically generates sections for different categories and creates links to individual example pages.\nSOURCE: https://github.com/honojs/website/blob/main/examples/index.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data } from './menu.data.ts'\n</script>\n\n<div v-for=\"sections of data\">\n  <section v-for=\"category of sections\">\n    <h2>{{ category.text }}</h2>\n    <ul v-for=\"item of category.items\">\n      <li><a :href=\"item.link\">{{ item.text }}</a></li>\n    </ul>\n  </section>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying to Alibaba Cloud Function Compute\nDESCRIPTION: Commands to build the TypeScript application using esbuild and deploy it to Alibaba Cloud Function Compute using serverless-devs.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/ali-function-compute.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build # Compile the TypeScript code to JavaScript\nnpm run deploy # Deploy the function to Alibaba Cloud Function Compute\n```\n\n----------------------------------------\n\nTITLE: Installing Hono with Bun\nDESCRIPTION: Commands to create a new Hono project using Bun and install dependencies.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun create hono@latest my-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd my-app\nbun install\n```\n\n----------------------------------------\n\nTITLE: Importing Factory Helper in Hono (TypeScript)\nDESCRIPTION: Shows how to import the necessary functions from Hono's factory module to use the Factory Helper.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/factory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { createFactory, createMiddleware } from 'hono/factory'\n```\n\n----------------------------------------\n\nTITLE: CBOR Encoding Breakdown (Plaintext)\nDESCRIPTION: This snippet provides a detailed breakdown of the CBOR encoding, showing how each part of the JSON object is represented in the binary format.\nSOURCE: https://github.com/honojs/website/blob/main/examples/cbor.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nA1                           # map(1)\n   67                        # text(7)\n      6D657373616765         # \"message\"\n   6B                        # text(11)\n      68656C6C6F2043424F5221 # \"hello CBOR!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Hono Service Worker Project\nDESCRIPTION: Basic package.json configuration for a Hono project with Vite development server and ES modules.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-app\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite dev\"\n  },\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Default Hono Preset\nDESCRIPTION: Basic import statement for the default Hono preset which uses a SmartRouter with RegExpRouter and TrieRouter.\nSOURCE: https://github.com/honojs/website/blob/main/docs/api/presets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\n```\n\n----------------------------------------\n\nTITLE: Importing Timeout Middleware in Hono.js (TypeScript)\nDESCRIPTION: Shows how to import the Hono framework and the timeout middleware from their respective modules.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/timeout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { timeout } from 'hono/timeout'\n```\n\n----------------------------------------\n\nTITLE: Adding Hono to Existing Bun Project\nDESCRIPTION: Command to add Hono as a dependency to an existing Bun project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun add hono\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Better Auth\nDESCRIPTION: Example of required environment variables to be added in the .env file for Better Auth configuration.\nSOURCE: https://github.com/honojs/website/blob/main/examples/better-auth.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nBETTER_AUTH_SECRET=<generate-a-secret-key> (e.g. D27gijdvth3Ul3DjGcexjcFfgCHc8jWd)\nBETTER_AUTH_URL=<url-of-your-server> (e.g. http://localhost:1234)\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for GitHub Actions Deployment\nDESCRIPTION: Additional wrangler.toml configuration required for GitHub Actions deployment. These settings specify the entry point and enable minification for the deployed application.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/cloudflare-workers.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\nmain = \"src/index.ts\"\nminify = true\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project with deno\nDESCRIPTION: Command to create a new Hono project for Fastly Compute using deno.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndeno init --npm hono my-app\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Lambda RequestContext in Hono (deprecated approach)\nDESCRIPTION: Deprecated method (before v3.10.0) for accessing the AWS Lambda request context in Hono using the ApiGatewayRequestContext binding.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/aws-lambda.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport type { ApiGatewayRequestContext } from 'hono/aws-lambda'\nimport { handle } from 'hono/aws-lambda'\n\ntype Bindings = {\n  requestContext: ApiGatewayRequestContext\n}\n\nconst app = new Hono<{ Bindings: Bindings }>()\n\napp.get('/custom-context/', (c) => {\n  const lambdaContext = c.env.requestContext\n  return c.json(lambdaContext)\n})\n\nexport const handler = handle(app)\n```\n\n----------------------------------------\n\nTITLE: Importing ConnInfo Helper in Lambda@Edge\nDESCRIPTION: Code snippet showing how to import the ConnInfo Helper in an AWS Lambda@Edge environment.\nSOURCE: https://github.com/honojs/website/blob/main/docs/helpers/conninfo.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono'\nimport { getConnInfo } from 'hono/lambda-edge'\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Project with npm\nDESCRIPTION: Command to create a new Hono project for Fastly Compute using npm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create hono@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Extending ContextRenderer for Custom Rendering Props\nDESCRIPTION: Demonstrates how to extend the ContextRenderer interface to pass additional props to the renderer, such as a title for the page.\nSOURCE: https://github.com/honojs/website/blob/main/docs/middleware/builtin/jsx-renderer.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ndeclare module 'hono' {\n  interface ContextRenderer {\n    (\n      content: string | Promise<string>,\n      props: { title: string }\n    ): Response\n  }\n}\n\nconst app = new Hono()\n\napp.get(\n  '/page/*',\n  jsxRenderer(({ children, title }) => {\n    return (\n      <html>\n        <head>\n          <title>{title}</title>\n        </head>\n        <body>\n          <header>Menu</header>\n          <div>{children}</div>\n        </body>\n      </html>\n    )\n  })\n)\n\napp.get('/page/favorites', (c) => {\n  return c.render(\n    <div>\n      <ul>\n        <li>Eating sushi</li>\n        <li>Watching baseball games</li>\n      </ul>\n    </div>,\n    {\n      title: 'My favorites',\n    }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Running Hono Application with Bun\nDESCRIPTION: Command to start the Hono application using Bun's development server.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/bun.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker Registration in TypeScript\nDESCRIPTION: TypeScript code to register a Service Worker, handling both success and error cases. Includes logic to unregister existing Service Workers before registering a new one.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction register() {\n  navigator.serviceWorker\n    .register('/sw.ts', { scope: '/sw', type: 'module' })\n    .then(\n      function (_registration) {\n        console.log('Register Service Worker: Success')\n      },\n      function (_error) {\n        console.log('Register Service Worker: Error')\n      }\n    )\n}\nfunction start() {\n  navigator.serviceWorker\n    .getRegistrations()\n    .then(function (registrations) {\n      for (const registration of registrations) {\n        console.log('Unregister Service Worker')\n        registration.unregister()\n      }\n      register()\n    })\n}\nstart()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using pnpm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: Commands to navigate to the project directory and install dependencies using yarn.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd my-app\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing typed-htmx package\nDESCRIPTION: Command to install the typed-htmx package as a development dependency using npm.\nSOURCE: https://github.com/honojs/website/blob/main/examples/htmx.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D typed-htmx\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with npm\nDESCRIPTION: npm command to start the Vite development server for the Hono Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Wrangler for D1 Database Binding\nDESCRIPTION: Wrangler configuration in toml format for binding a D1 database to a Cloudflare Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/examples/prisma.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"__DATABASE_NAME__\"\ndatabase_id = \"DATABASE ID\"\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with pnpm\nDESCRIPTION: pnpm command to start the Vite development server for the Hono Service Worker project.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/service-worker.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fastly with npm\nDESCRIPTION: Command to build and deploy the application to Fastly using npm.\nSOURCE: https://github.com/honojs/website/blob/main/docs/getting-started/fastly.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```"
  }
]