[
  {
    "owner": "diplodoc-platform",
    "repo": "docs",
    "content": "TITLE: Defining Variable Presets in YAML\nDESCRIPTION: This snippet demonstrates the structure of a presets.yaml file. It shows how to define default and custom presets with different variable values for internal and external documentation variants.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/project/presets.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n    position: Волшебник\ninternal:\n    place: Изумрудный город\nexternal:\n    place: Страна Оз\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Operators in Markdown\nDESCRIPTION: Demonstrates the use of 'if', 'else', and 'elsif' conditional operators to include specific text based on variable values. Useful for creating different versions of documentation.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% if  OS == 'iOS' %}\n\nDownload the app from the [App Store](https://www.apple.com/ios/app-store/).\n\n{% else %}\n\nDownload the app from [Google Play] (https://play.google.com).\n\n{% endif %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSome text {% if  OS == 'iOS' %} Apple {% else %} Android {% endif %} text continued.\n```\n\n----------------------------------------\n\nTITLE: Defining YFM Configuration Parameters in YAML\nDESCRIPTION: This snippet demonstrates the basic structure of a .yfm configuration file. It shows how to specify parameters and their values in YAML format, which is used to configure various aspects of the YFM documentation build process.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/config.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameter: value\nparameter: value\n```\n\n----------------------------------------\n\nTITLE: Conditional Operators in Markdown Documentation\nDESCRIPTION: Shows how to use if, else, and elsif conditional operators to include specific content based on variable values. The example demonstrates creating different documentation versions for iOS and Android.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% if  OS == 'iOS' %}\n\nСкачайте приложение в [App Store](https://www.apple.com/ios/app-store/).\n\n{% else %}\n\nСкачайте приложение в [Google Play](https://play.google.com).\n\n{% endif %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nКакой-то текст {% if  OS == 'iOS' %} Apple {% else %} Android {% endif %} продолжение текста.\n```\n\n----------------------------------------\n\nTITLE: Basic toc.yaml Structure in YAML\nDESCRIPTION: Demonstrates the standard structure of a toc.yaml file that defines a document title, reference to the index file, and a hierarchical arrangement of sections with paths to their respective files.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Document title\nhref: index.yaml\nitems:\n  - name: Section name\n    href: path/to/file.md\n  - name: Section group name\n    items:\n      - name: Section name\n        href: path/to/file.md\n      - name: Section name\n        href: path/to/file.md\n  - name: Section name\n    href: path/to/file.md\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Diplodoc CLI\nDESCRIPTION: Command to build documentation in HTML format using the YFM CLI. Requires specifying the input project folder and output destination folder as parameters.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/docs/build.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyfm -i ./input-folder -o ./ouput-folder\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for YFM Documentation Project\nDESCRIPTION: This example shows the recommended file and directory structure for a simple documentation project using YFM. It includes the configuration file, table of contents, variable presets, leading page, content files, image assets, and reusable content includes.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/project/index.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninput-folder\n|-- .yfm # файл конфигурации\n|-- toc.yaml # оглавление\n|-- presets.yaml # пресеты переменных\n|-- index.yaml # разводящая страница\n|-- pages # файлы с контентом\n    |-- faq.md\n    |-- how-to.md\n|-- _assets # каталог с изображениями\n    |-- image1.png\n    |-- image2.png\n|-- _includes # каталог с файлами для переиспользования\n    |-- faq_shared_block.md\n```\n\n----------------------------------------\n\nTITLE: YFM Settings Configuration Table\nDESCRIPTION: Markdown table defining various YFM settings including their names, descriptions, types, and default values. Covers settings for variables, HTML handling, linking behavior, conditions, localization, and analytics configuration.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/settings.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | Type | Default value |\n| :--- | :--- | :--- | :--- |\n| `vars` | [Variables](./syntax/vars.md) | `Object` | `{}` |\n| `allowHTML` | Allow HTML in markup | `bool` | `false` |\n| `linkify` | Convert link-like strings to links | `bool` | `false` |\n| `breaks` | Use the carriage return character for a line break | `bool` | `true` |\n| `conditionsInCode` | Meet conditions in code blocks | `bool` | `false` |\n| `disableLiquid` | Disable the use of variables | `bool` | `false` |\n| `supportGithubAnchors` | Generate additional [anchors](./syntax/base.md#headers) that are compatible with GitHub | `bool` | `false` |\n| `lang` | Localization language of default texts | `string` | `ru` |\n`needToSanitizeHtml` | Need to sanitize the generated HTML | `bool` | `true`\n`sanitizeOptions` | Sanitizer configuration | `Object` | `undefined`\n`linkifyTlds` | Allow set tld for the linkify plugin | `string \\| string[]` | `undefined`\n`analytics` | Analytics module configuration | `Object` | `undefined`\n`analytics.gtm` | Options for Google Tag Manager analytics | `Object` | `undefined`\n`analytics.gtm.id` | ID of Google Tag Manager at format GTM-* | `string` | `undefined`\n`analytics.gtm.mode` | Notification type before analytics events start being sent `base` or `notification`  | `string` | `base`\n```\n\n----------------------------------------\n\nTITLE: Installing Diplodoc CLI Globally\nDESCRIPTION: Command to globally install the @diplodoc/cli package using npm, which enables building documentation projects with navigation and YFM support.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @diplodoc/cli -g\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for YFM Documentation Project\nDESCRIPTION: Example directory structure showing the organization of a typical YFM documentation project, including configuration files, content pages, assets, and includes folders.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/index.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ninput-folder\n|-- .yfm (Configuration file)\n|-- toc.yaml (Table of contents)\n|-- presets.yaml (Variable presets)\n|-- index.yaml (Leading page)\n|-- pages (Content files)\n    |-- faq.md\n    |-- how-to.md\n|-- _assets (Folder with images)\n    |-- image1.png\n    |-- image2.png\n|--_includes (Folder with files to be reused)\n    |-- faq_shared_block.md\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Diplodoc Documentation\nDESCRIPTION: Shows the basic directory structure for a Diplodoc documentation project, including configuration files, content pages, assets, and includes directories.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/how-it-work.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ninput-folder\n|-- .yfm (config file for whole project)\n|-- toc.yaml (table of content)\n|-- presets.yaml (presets for vairables)\n|-- index.yaml (index page)\n|-- pages (Content pages)\n    |-- faq.md\n    |-- how-to.md\n|-- _assets (directory with pictures)\n    |-- image1.png\n    |-- image2.png\n|-- _includes (directory for reusable content)\n    |-- faq_shared_block.md\n```\n\n----------------------------------------\n\nTITLE: Configuring a Header Block in YAML for Page Constructor\nDESCRIPTION: This snippet demonstrates the standard structure of a YAML configuration for a Page Constructor page, specifically showcasing a header block with title, description, background image, and navigation buttons. It illustrates how to set various parameters like width, offset, background properties, and action buttons.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/page-constructor.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblocks:\n  - type: 'header-block'\n    width: 's'\n    offset: 'default'\n    title: 'Diplodoc'\n    resetPaddings: true\n    verticalOffset: 'l'\n    description: 'A platform with open-source code for creating technical documentation based on the concept of Docs as Code. A simple and convenient document management solution for large and small teams.'\n    background:\n      image:\n        mobile: 'https://storage.yandexcloud.net/diplodoc-www-assets/pages/index-diplodoc/ddos-index-cover-mini.png'\n        desktop: '../../_images/cover.png'\n      color: '#C6FE4D'\n      fullWidth: false\n    buttons:\n      - text: 'Quickstart'\n        theme: 'dark'\n        size: 'promo'\n        url: '/quickstart'\n      - text: 'GitHub'\n        theme: 'outlined'\n        size: 'promo'\n        url: 'https://github.com/diplodoc-platform'\n```\n\n----------------------------------------\n\nTITLE: Variable Substitutions and Conditional Operators in YAML\nDESCRIPTION: Using variable substitutions and conditional operators in the title and description fields of documents and links. This allows for dynamic content based on variables.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/leading-page.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"not_var{{ title }}\"\ndescription: \"{% if version == 10 %}not_var{{ description_legacy }}{% else %}not_var{{ description }}{% endif %}\"\nmeta:\n  title: \"not_var{{ meta_title }}\"\nlinks:\n- title: \"not_var{{ link_title }}\"\n  description: \"not_var{{ link_description }}\"\n  href: path/to/conditional/file.md\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Variables in YAML\nDESCRIPTION: Illustrates how to define more complex variable structures in YAML, including nested objects and arrays, for use with filters and functions in documentation.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  user:\n    name: alice\n  users:\n    - Alice\n    - Mark\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Includer Example in YAML\nDESCRIPTION: Shows how to use the OpenAPI includer to generate documentation from an OpenAPI specification file and include it within the main documentation structure.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/toc.yaml\ntitle: documentation\nhref: index.yaml\nitems:\n  - name: openapi\n    include:\n      path: openapi\n      includers:\n        - name: openapi\n          input: openapi.yaml\n      mode: link\n```\n\n----------------------------------------\n\nTITLE: Complete example of using plugins with YFM Transformer\nDESCRIPTION: Full implementation example showing how to import YFM's built-in plugins and a third-party emoji plugin, then use them with the transform function.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/plugins/import.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst transform = require('@diplodoc/transform');\nconst cut = require('@diplodoc/transform/lib/plugins/cut');\nconst sup = require('@diplodoc/transform/lib/plugins/sup');\nconst emoji = require('markdown-it-emoji');\nconst content = fs.readFileSync(filePath, 'utf');\nconst {result: {html, meta}, logs} = transform(content, {plugins: [cut, sup, emoji]});\n```\n\n----------------------------------------\n\nTITLE: Creating Headers in Markdown\nDESCRIPTION: Shows how to create four levels of headers in markdown. Headers automatically generate anchors, which can be used for creating links to specific sections of the document.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# h1 header\n## h2 header\n### h3 header\n#### h4 header\n```\n\n----------------------------------------\n\nTITLE: Loop Usage Examples in Markdown\nDESCRIPTION: Demonstrates different ways to use loops in documentation with their output results. Shows inline loops and block-level loops with the 'users' array.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nPrefix {% for user in users %} not_var{{user}} {% endfor %} Postfix\n```\n\nLANGUAGE: markdown\nCODE:\n```\nPrefix\n\n{% for user in users %}\n\nnot_var{{user}}\n\n{% endfor %}\n\nPostfix\n```\n\n----------------------------------------\n\nTITLE: Customizing YFM Linter Rules in YAML\nDESCRIPTION: Example showing how to customize specific rule configurations in the .yfmlint file. This includes setting maximum inline code length, line length exceptions, and allowable HTML elements.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/lint.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Inline code length\nYFM001:\n  maximum: 100\n  \n# Line length\nMD013:\n  line_length: 100 # default: 80 characters\n  code_blocks: false # exclude this rule for code_blocks\n  tables: fales # exclude this rule for tables\n  headings: false # exclude this rule for headings\n\n# Inline HTML\nMD033:\n  allowed_elements: [ \"span\", \"br\", \"p\" ]\n\n\n# Section for defining log levels\nlog-levels:\n```\n\n----------------------------------------\n\nTITLE: Default YFM Linter Configuration in YAML\nDESCRIPTION: The default configuration for the .yfmlint file showing all available rules and their default log levels. Most rules are disabled by default with only a few set to warning or error levels.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/lint.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlog-levels:\n  MD001: 'disabled' # Heading levels should only increment by one level at a time\n  MD002: 'disabled' # First heading should be a top-level heading~~\n  MD003: 'disabled' # Heading style\n  MD004: 'disabled' # Unordered list style\n  MD005: 'disabled' # Inconsistent indentation for list items at the same level\n  MD006: 'disabled' # Consider starting bulleted lists at the beginning of the line~~\n  MD007: 'disabled' # Unordered list indentation\n  MD009: 'disabled' # Trailing spaces\n  MD010: 'disabled' # Hard tabs\n  MD011: 'disabled' # Reversed link syntax\n  MD012: 'disabled' # Multiple consecutive blank lines\n  MD013: 'disabled' # Line length\n  MD014: 'disabled' # Dollar signs used before commands without showing output\n  MD018: 'error'    # No space after hash on atx style heading\n  MD019: 'disabled' # Multiple spaces after hash on atx style heading\n  MD020: 'disabled' # No space inside hashes on closed atx style heading\n  MD021: 'disabled' # Multiple spaces inside hashes on closed atx style heading\n  MD022: 'disabled' # Headings should be surrounded by blank lines\n  MD023: 'disabled' # Headings must start at the beginning of the line\n  MD024: 'disabled' # Multiple headings with the same content\n  MD025: 'disabled' # Multiple top-level headings in the same document\n  MD026: 'disabled' # Trailing punctuation in heading\n  MD027: 'disabled' # Multiple spaces after blockquote symbol\n  MD028: 'disabled' # Blank line inside blockquote\n  MD029: 'disabled' # Ordered list item prefix\n  MD030: 'disabled' # Spaces after list markers\n  MD031: 'disabled' # Fenced code blocks should be surrounded by blank lines\n  MD032: 'disabled' # Lists should be surrounded by blank lines\n  MD033: 'disabled' # Inline HTML\n  MD034: 'disabled' # Bare URL used\n  MD035: 'disabled' # Horizontal rule style\n  MD036: 'disabled' # Emphasis used instead of a heading\n  MD037: 'disabled' # Spaces inside emphasis markers\n  MD038: 'disabled' # Spaces inside code span elements\n  MD039: 'disabled' # Spaces inside link text\n  MD040: 'disabled' # Fenced code blocks should have a language specified\n  MD041: 'disabled' # First line in a file should be a top-level heading\n  MD042: 'disabled' # No empty links\n  MD043: 'disabled' # Required heading structure\n  MD044: 'disabled' # Proper names should have the correct capitalization\n  MD045: 'disabled' # Images should have alternate text (alt text)\n  MD046: 'disabled' # Code block style\n  MD047: 'disabled' # Files should end with a single newline character\n  MD048: 'disabled' # Code fence style\n  \n  YFM001: 'warn'    # Inline code length\n  YFM002: 'warn'    # No header found in the file for the link text\n  YFM003: 'error'   # Link is unreachable\n\n# Inline code length\nYFM001:\n  maximum: 100\n```\n\n----------------------------------------\n\nTITLE: Conditional Section Visibility in YAML\nDESCRIPTION: Shows how to use the 'when' parameter to conditionally include or exclude a section from the document based on the value of a variable.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Section with conditional entry\n  href: path/to/conditional/file.md\n  when: version == 12\n```\n\n----------------------------------------\n\nTITLE: Applying Loops with Variables in Markdown\nDESCRIPTION: Demonstrates practical examples of using loops with variables defined in YAML. Shows both inline and multi-line loop usage.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nPrefix {% for user in users %} not_var{{user}} {% endfor %} Postfix\n```\n\nLANGUAGE: markdown\nCODE:\n```\nPrefix\n\n{% for user in users %}\n\nnot_var{{user}}\n\n{% endfor %}\n\nPostfix\n```\n\n----------------------------------------\n\nTITLE: Unarchive Includer Chain Example in YAML\nDESCRIPTION: Demonstrates how to chain multiple includers, first using the unarchive includer to extract content from a tarball, then using the generic includer to process the extracted content.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/toc.yaml\ntitle: documentation\nhref: index.yaml\nitems:\n...\n   - name: multiple\n     include:\n       path: multiple\n       mode: link\n       includers:\n         # run unarchive includer\n         - name: unarchive\n           # specify tarball you want to unpack as input parameter\n           input: docs.tar\n           # specify output path where tarball content is going to be unpacked\n           output: unpacked\n         # run generic includer\n         - name: generic\n           # specify path from unarchive includers output field as input path\n           input: unpacked\n```\n\n----------------------------------------\n\nTITLE: Variable Presets with Nested Structure in YAML\nDESCRIPTION: Shows how to define more complex variable structures in a presets file, including both a single value and an array that can be used with filters.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  user:\n    name: alice\n  users:\n    - Alice\n    - Mark\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Variables in Markdown\nDESCRIPTION: Shows how to use filters like 'capitalize' and 'length' with variables in Markdown. Demonstrates both single variable and array variable usage.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nHello not_var{{ user.name | capitalize }}!\n```\n\nLANGUAGE: markdown\nCODE:\n```\nnot_var{{ users | length }}\n\nnot_var{{ user.name | length }} | length\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Code Snippets in Markdown\nDESCRIPTION: Demonstrates how to add an inline code snippet within text using backtick symbols. Inline code snippets are ideal for short code references of less than 100 characters.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/code.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Code snippet` in the text.\n```\n\n----------------------------------------\n\nTITLE: Filter Usage Examples in Markdown\nDESCRIPTION: Demonstrates how to use filters with variables using the pipe syntax. Shows examples of capitalize and length filters with their output results.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nHello not_var{{ user.name | capitalize }}!\n```\n\nLANGUAGE: markdown\nCODE:\n```\nnot_var{{ users | length }}\n\nnot_var{{ user.name | length }} | length\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Substitution in Markdown\nDESCRIPTION: Shows how to substitute a variable value in text using double curly brackets. Also demonstrates how to escape curly brackets when not used for variable substitution.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSome text not_var{{ variable_name }} text continued.\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSome text not_varnot_var{{ also_text }} text continued.\n```\n\n----------------------------------------\n\nTITLE: Using the transform() Function from @diplodoc/transform\nDESCRIPTION: Example of how to use the transform() function provided by the @diplodoc/transform package. It demonstrates reading a file, setting variables, and invoking the transform function to convert YFM content to HTML.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/index.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst transform = require('@diplodoc/transform');\n\nconst content = fs.readFileSync(filePath, 'utf');\nconst vars = { user: { name: 'Alice' } };\n\nconst {\n    result: {html, meta, title, headings},\n    logs,\n    } = transform(content, {vars});\n```\n\n----------------------------------------\n\nTITLE: Function Usage Example with Variable Presets in YAML\nDESCRIPTION: Shows how to define variables in a presets file for use with functions in documentation. The example defines a user with a name property.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  user:\n    name: Masha\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in YAML for Documentation\nDESCRIPTION: Shows how to define variables, including arrays, in a YAML file for use in documentation. This example defines a 'users' array with two elements.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  users:\n    - Alice\n    - Mark\n```\n\n----------------------------------------\n\nTITLE: Basic Leading Page Structure in YAML\nDESCRIPTION: The standard file structure for an index.yaml leading page. It defines the document title, description, metadata, and links to main sections.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/leading-page.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Document name\ndescription: A description of the document\nmeta:\n  title: Metadata\n  noIndex: true\nlinks:\n- title: First section\n  description: A description of the first section\n  href: path/to/file.md\n- title: Second section\n  description: A description of the second section\n  href: path/to/file.md\n```\n\n----------------------------------------\n\nTITLE: Configuring expanded TOC sections in YAML\nDESCRIPTION: This snippet demonstrates how to make specific first-level sections in the table of contents expanded by default using the 'expanded' parameter. When applied to first-level items, this makes their nested contents visible without requiring user interaction.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Yandex Cloud Marketplace\nitems:\n  - name: Getting started\n    href: index.md\n  - name: Test topichead\n    expanded: true\n    items:\n      - name: Creating a virtual machine\n        href: create.md\n  - name: Initial software configuration\n    href: setup.md\n  - name: Operating a virtual machine\n    href: operate.md\n  - name: API reference\n    href: guide.md\n```\n\n----------------------------------------\n\nTITLE: Adding YAML Metadata Front Matter\nDESCRIPTION: Demonstrates how to add YAML metadata at the beginning of a Markdown file. The metadata is enclosed in triple dashes and includes standard fields like title and description.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/meta.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Title\ndescription: Description\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Presets Structure in YAML\nDESCRIPTION: Example of a presets.yaml file structure showing a default preset and two additional presets (internal and external). The default preset values are considered first, then overridden by the specified preset passed during build.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/presets.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n    position: The Wizard\ninternal:\n    place: Emerald City\nexternal:\n    place: The Land of Oz\n```\n\n----------------------------------------\n\nTITLE: Merging Table of Contents at the Same Level in YAML\nDESCRIPTION: Demonstrates how to include elements from another table of contents file at the same level in the current table of contents, rather than as a nested section.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - name: Name1\n    href: file1.md\n\n  # If an element doesn't have a name field, it means that elements of the included table of contents must be\n  # added to the same table of contents level, not as a new section\n  - include: { path: path/to/toc.yaml }\n\n  - name: NameX\n    href: fileX.md\n```\n\n----------------------------------------\n\nTITLE: Including Reusable Content in Markdown Documents\nDESCRIPTION: Shows how to include content from a separate file into a Markdown document using the include directive. The syntax allows specifying a description and file path, with the content being inserted during document build.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/includes.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include [Description](../_includes/file.md) %}\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Tabs in YFM Markdown\nDESCRIPTION: Demonstrates how to implement grouped tabs for organizing mutually exclusive content sections. The example shows tab creation with lists and markup inside tabs, along with the group parameter for maintaining tab state across different tab sets.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/cuts-tabs.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% list tabs group=instructions %}\n\n- Name of tab1\n\n  First step of tab1.\n  * You can use lists.\n  * And **other** markup.\n\n- Name of tab2\n\n  First step of tab2.\n\n{% endlist %}\n\nDescription...\n\n{% list tabs group=instructions %}\n\n- Name of tab1\n\n  Second step of tab1.\n\n- Name of tab2\n\n  Second step of tab2.\n\n{% endlist %}\n```\n\n----------------------------------------\n\nTITLE: File Structure for Preset Hierarchy\nDESCRIPTION: This snippet illustrates the directory structure for using multiple preset files. It shows how preset files at different levels in the project hierarchy are prioritized during variable resolution.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/project/presets.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninput-folder\n|-- .yfm\n|-- toc.yaml\n|-- presets.yaml # файл 2\n|-- index.yaml\n|-- quickstart.md\n|-- pages\n    |-- presets.yaml # файл 1\n    |-- faq.md\n    |-- how-to.md\n```\n\n----------------------------------------\n\nTITLE: Implementing Cut Elements in YFM Markdown\nDESCRIPTION: Shows how to create collapsible content sections using the cut element. The cut element allows hiding content that can be revealed when clicked, useful for additional information or long code blocks.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/cuts-tabs.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% cut \"Cut header\" %}\n\nContent displayed when clicked.\n\n{% endcut %}\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Markdown Links\nDESCRIPTION: Demonstrates the basic syntax for creating a link in Markdown, including optional hint text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[link_text](link \"hint_text\")\n```\n\n----------------------------------------\n\nTITLE: Illustrating Preset File Hierarchy with Directory Structure\nDESCRIPTION: Example of a directory structure showing multiple preset file placement. Files closer to the converted document have higher priority when calculating variables.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/presets.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninput-folder\n|-- .yfm\n|-- toc.yaml\n|-- presets.yaml // 2\n|-- index.yaml\n|-- quickstart.md\n|-- pages\n    |-- presets.yaml // 1\n    |-- faq.md\n    |-- how-to.md\n```\n\n----------------------------------------\n\nTITLE: Building Diplodoc Project Using YFM Builder CLI\nDESCRIPTION: Command line example for building a Diplodoc project using the YFM Builder tool, showing required input and output parameters.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/how-it-work.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyfm -i ./input-folder -o ./ouput-folder\n```\n\n----------------------------------------\n\nTITLE: Basic Image Insertion in Markdown\nDESCRIPTION: Shows the standard markup for inserting images with optional parameters including alt text, image path, hover hint, and size specifications.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/media.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![alt-text](_images/image.png \"hint_text\" =100x100)\n```\n\n----------------------------------------\n\nTITLE: Advanced Local Search Configuration in YAML\nDESCRIPTION: Расширенная конфигурация локального поиска с настройками tolerance и confidense для управления режимом ранжирования результатов и диапазоном поискового запроса.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/project/search.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsearch:\n  provider: local\n  tolerance: 2\n  confidense: phrased\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Terms in Diplodoc Markdown\nDESCRIPTION: Shows the syntax for defining a term with a key and then referencing it in text. Term definitions can include basic markup and can be defined anywhere on the page.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/term.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[*term_key]: Explaining a term or abbreviation using definition syntax.\nThe term definition may include _basic_ markup.\n\nUse of the [term](*term_key) in the text.\n```\n\n----------------------------------------\n\nTITLE: Including a Table of Contents with Relative Path in YAML\nDESCRIPTION: Example of how to include a table of contents using the 'merge' mode, which allows specifying a path relative to the current file rather than the documentation root.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - include: { mode: merge, path: ../relative/path/to/toc.yaml }\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration Table in Markdown\nDESCRIPTION: A markdown table that documents various plugins available in the system. Each row describes a plugin's name, functionality, configuration parameters, and whether it's included by default.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/_includes/plugins.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Plugin name  | Description | Parameters | Added</br>by default |\n|--------------| --- | --- | --- |\n| **Anchors**  | Automatically generate [anchors for headers](../syntax/base.md#headers) | `extractTitle`: Consider the first level header</br>(type: bool, default value: false)</br></br>`supportGithubAnchors`: Generate additional anchors compatible with GitHub</br>(type: bool, default value: false) | + |\n| **code**     | Display the copy button in [code blocks](../syntax/code.md#block) | - | + |\n| **Cut**      | Support for the [cut](../syntax/cuts-tabs.md#cuts) markup | - | + |\n| **Deflist**   | Support for the [definition list](../syntax/lists.md#terms) markup | - | + |\n| **File**     | Support for the [file objects](../syntax/links.md#files) markup | `fileExtraAttrs`: additional attributes for the link | + |\n| **Tasks list**     | Support for the [tasks list](../syntax/additional.md#tasks-list)              | `divClass`: classname for div wrapping the checkbox</br>(type: string, default value: checkbox)</br></br> `idPrefix`: prefix for checkbox id</br>(type: string, default value: checkbox) | - |\n| **Images**   | Add [images](../syntax/media.md#images) | `assetsPublicPath`: Path to icons</br>(type: string, default value: /) | - |\n| **Imsize**   | Set the image size | - | - |\n| **Includes** | Reuse content in a document | `getVarsPerFile`: A function that returns calculated variables using the path to the file</br>(type: function, default value: -) | - |\n| **Links**    | Expand [link syntax](../syntax/links.md) | - | - |\n| **Meta**     | Add [metadata](../syntax/meta.md#meta) to the beginning of files | - | + |\n| **Notes**    | Support for the [note](../syntax/notes.md) markup | `lang`: A language for displaying the note type</br>(type: string, default: ru) | + |\n| **Sup**      | Output text as [superscript](../syntax/base.md#line) | - | + |\n| **Table**    | Support for [multiline tables](../syntax/tables/multiline.md) | - | + |\n| **Tabs**     | Support for the [tab](../syntax/cuts-tabs.md#tabs) markup | - | + |\n| **Video**    | Add a [video](../syntax/media.md#video) | - | + |\n```\n\n----------------------------------------\n\nTITLE: Function Usage Examples in Markdown\nDESCRIPTION: Demonstrates how to use the slice() function on variables to extract specific portions of a string. Shows examples with different parameter combinations.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nHello Pnot_var{{ user.name.slice(1) }}!\n\nHello Pnot_var{{ user.name.slice(1, 2) }}vel!\n```\n\n----------------------------------------\n\nTITLE: Including a Table of Contents from a Custom File in YAML\nDESCRIPTION: Shows how to include a table of contents from a file with a custom name, not necessarily named toc.yaml, using a relative path from the documentation root.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Instructions for Android\n  include:\n    path: another/toc_android.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Functions with Variables in Markdown\nDESCRIPTION: Demonstrates the use of functions like 'slice()' with variables in Markdown. Shows how to manipulate string variables using function calls.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nHello Pnot_var{{ user.name.slice(1) }}!\n\nHello Pnot_var{{ user.name.slice(1, 2) }}vel!\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Numbered Lists in Markdown\nDESCRIPTION: Demonstrates how to create nested numbered lists using indentation. The recommended indentation is four spaces for child list items.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item.\n    1. Nested item.\n    1. Nested item.\n1. Second item.\n```\n\n----------------------------------------\n\nTITLE: Generic Includer Example in YAML\nDESCRIPTION: Demonstrates how to use the generic includer to import markdown content generated by external tools into the documentation, generating a table of contents for the included content.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/toc.yaml\ntitle: documentation\nhref: index.yaml\nitems:\n  - name: docs\n    include:\n      path: docs\n      includers:\n        - name: generic\n          input: docs\n      mode: link\n```\n\n----------------------------------------\n\nTITLE: Using Loops in Markdown for Repetitive Content\nDESCRIPTION: Illustrates how to use loops to output repetitive content for each element of an array. Variables inside the loop are referenced using substitution syntax.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/vars.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% for variable_name in array_name %}\n\nSome text not_var{{ variable_name }} text continued.\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Note in Markdown\nDESCRIPTION: This snippet demonstrates how to create an alert note using custom Markdown syntax. It uses the 'note alert' tag to highlight critical information or restrictions.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% note alert %}\n\nThis is an alert.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Index YAML for OpenAPI Includer in YAML\nDESCRIPTION: Shows how to add a link to the generated OpenAPI documentation in the main index.yaml file.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/index.yaml\ntitle: documentation\nlinks:\n  - title: openapi\n    href: openapi/\n```\n\n----------------------------------------\n\nTITLE: Including a Table of Contents as a Section in YAML\nDESCRIPTION: Demonstrates how to import another table of contents file as a section within the current table of contents, allowing for modular documentation organization.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Imported block name\n  include:\n    path: another/toc.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Footnotes in Markdown\nDESCRIPTION: Demonstrates the usage of the markdown-it-footnote plugin to create footnotes with links in the text and corresponding footnote content at the end of the document.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nHere's a simple footnote,[^1] and here's a longer one.[^bignote]\n\n[^1]: This is the first footnote.\n\n[^bignote]: Here's one with multiple paragraphs and code.\n```\n\n----------------------------------------\n\nTITLE: Index YAML for SourceDocs Includer in YAML\nDESCRIPTION: Shows how to add a link to the documentation generated by SourceDocs in the main index.yaml file when using the SourceDocs includer.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/index.yaml\ntitle: documentation\nlinks:\n  - title: docs\n    href: docs/\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Visibility in YAML\nDESCRIPTION: Using the 'when' parameter to conditionally include sections on a leading page based on variable values. Supports comparison operators like ==, !=, <, >, <=, and >=.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/leading-page.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Section with a conditional inclusion.\n  description: A description of the section.\n  href: path/to/conditional/file.md\n  when: version == 12\n```\n\n----------------------------------------\n\nTITLE: Configuring YFM Translation Glossary in YAML\nDESCRIPTION: Example YAML configuration showing how to define glossary pairs to preserve specific terms during translation. Terms defined here will remain unchanged in the translated output.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/docs/translate.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nyandexCloudTranslateGlossaryPairs:\n    - { sourceText: InstreamAdBreakPositionType, translatedText: InstreamAdBreakPositionType }\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Search with Local Provider in YAML\nDESCRIPTION: Базовая конфигурация для включения локального поиска с использованием lunrjs в качестве поисковой системы.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/project/search.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsearch:\n  provider: local\n```\n\n----------------------------------------\n\nTITLE: Creating an Info Note in Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic info note using custom Markdown syntax. It uses the 'note info' tag to highlight additional information.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% note info %}\n\nThis is info.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Multiline Content in Table Cells\nDESCRIPTION: Shows how to include multiline text and lists within table cells.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n||Text\non two lines\n|\n- Potatoes\n- Carrot\n- Onion\n- Cucumber||\n|#\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Metrica in YFM Documentation Project\nDESCRIPTION: Example configuration for adding a Yandex Metrica counter to a documentation project using the .yfm configuration file. This snippet shows how to enable HTML, apply presets, set language options, and configure the Metrica counter ID.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/guides/content-analytics.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallowHTML: true\napply-presets: true\nvarsPreset: external\nlangs: ['ru', 'en']\n\ndocs-viewer:\n  metrika: 44444444\n  project-name: your-project-name\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Note in Markdown\nDESCRIPTION: This snippet illustrates how to create a warning note using custom Markdown syntax. It uses the 'note warning' tag to highlight important cautionary information.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% note warning %}\n\nThis is a warning.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Formatting URL and Email Links in Markdown\nDESCRIPTION: Demonstrates how to format URLs and email addresses as clickable links using angle brackets.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<https://yandex.com/>\n\n<alice.the.girl@yandex.com>\n```\n\n----------------------------------------\n\nTITLE: Variable Presets Definition in YAML\nDESCRIPTION: Shows how to define arrays in a variable presets file for use in documentation loops. The example defines a 'users' array with two elements.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  users:\n    - Alice\n    - Mark\n```\n\n----------------------------------------\n\nTITLE: Creating a Tip Note in Markdown\nDESCRIPTION: This snippet shows how to create a tip note using custom Markdown syntax. It uses the 'note tip' tag to highlight a recommendation or helpful suggestion.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% note tip %}\n\nThis is a tip.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Clickable Image Link in Markdown\nDESCRIPTION: Demonstrates how to create a clickable image that functions as a hyperlink, combining image and link syntax.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/media.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![An old rock in the desert](../../_images/mountain.jpg \"Mountain\" =100x200)](https://yandex.com/images/search?text=mountain)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Bulleted Lists in Markdown\nDESCRIPTION: Shows how to create nested bulleted lists using indentation for child items. Two to five spaces can be used, with four spaces being recommended.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* List item.\n    * Nested item.\n    * Nested item.\n* List item.\n```\n\n----------------------------------------\n\nTITLE: Creating Task Lists in Markdown\nDESCRIPTION: Illustrates the syntax for creating task lists with checkboxes using Markdown, including both checked and unchecked items.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [x] ~~Write the press release~~\n- [ ] Update the website\n- [ ] Contact the media\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Code Blocks with Markdown\nDESCRIPTION: Shows how to create a separate code block by enclosing the code with triple backticks. This example specifically demonstrates how to indicate SQL syntax highlighting for the code block.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/code.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```sql\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Numbered Lists in Markdown\nDESCRIPTION: Shows how to create numbered lists using numbers followed by periods or parentheses. Numbering is handled dynamically during rendering, so the same number can be used for all items.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item.\n1. Second item.\n1. Third item.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Anchors for Headers in Markdown\nDESCRIPTION: Demonstrates how to manually set a custom anchor for a header by specifying it after the header text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## h2 header {#anchor}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Markdown\nDESCRIPTION: Shows how to add hidden comments in Markdown files. Comments must be preceded by an empty line and use the reference link syntax with a # placeholder.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/meta.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[//]: # (Comment)\n```\n\n----------------------------------------\n\nTITLE: Creating Text-Aligned GFM Tables in Markdown\nDESCRIPTION: This example demonstrates how to align text in table columns using the colon symbol in the separator row. It shows left, center, and right alignment options for table content.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/gfm.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Align left  | Align center        | Align right |\n| :---            |      :----:      |            ---: |\n| Text           | Text            | Text           |\n| Text           | Text            | Text           |\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Quotes in Markdown\nDESCRIPTION: Demonstrates how to create nested block quotes using multiple greater-than symbols.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> Quote\n>> Nested quotes\n```\n\n----------------------------------------\n\nTITLE: Workshop Repository Setup Commands\nDESCRIPTION: A series of commands to set up the workshop environment, including defining a utility function, cloning the workshop repository, creating a new GitHub project, and installing the Diplodoc CLI extension.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfunction step { rm -rf ./**; cp -fr ../steps/step-$1/ .; }\n\ngit clone git@github.com:diplodoc-platform/notconf-steps.git steps\n# create <docs-example> gh project from scratch\ngh repo create\ncd docs-example\n\n# install our cli as an gh extension, may take some take\ngh extension install diplodoc-platform/gh-docs\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GFM Tables in Markdown\nDESCRIPTION: This example shows the basic structure of a GFM table with a header row, separator row, and data rows. The table has two columns with simple text content in each cell.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/gfm.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Header 1  | Header 2  |\n| ----------- | ----------- |\n| Text       | Text       |\n| Text       | Text       |\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles to Markdown Links\nDESCRIPTION: Demonstrates how to apply various text formatting styles to link text in Markdown, including bold, italic, code, and superscript.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nI love the **[Yandex Cloud](https://cloud.yandex.com)**.\nThis is the _[YFM Guide](https://yadocs.tech)_.\nSee the section on [`code`](#code).\nSuper [^men^](https://en.wikipedia.org/wiki/Major_Grom_(2017_film)).\n```\n\n----------------------------------------\n\nTITLE: Importing @diplodoc/transform Package in JavaScript\nDESCRIPTION: Example of how to import the @diplodoc/transform package in a JavaScript file using the require() function. This allows the package to be used within the code.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/index.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst transform = require('@diplodoc/transform');\n```\n\n----------------------------------------\n\nTITLE: Basic Multiline Table Structure in Markdown\nDESCRIPTION: Demonstrates the basic structure of a multiline table with headers using bold formatting.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Header1** | **Header2** ||\n|| Text | Text ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Creating File Download Links in Markdown\nDESCRIPTION: Shows how to create a special link with a file icon that initiates a file download when clicked.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% file src=\"data:text/plain;base64,Cg==\" name=\"empty.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles for @diplodoc/transform\nDESCRIPTION: CSS import statement to include the necessary styles for proper text display when using the @diplodoc/transform package. This ensures the transformed content is styled correctly.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/index.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import '~@diplodoc/transform/dist/css/yfm.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing Mathematical Formulas in Markdown\nDESCRIPTION: Demonstrates how to use the markdown-it-katex plugin to display mathematical formulas using KaTeX library syntax.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n$\\sqrt{3x-1}+(1+x)^2$\n```\n\n----------------------------------------\n\nTITLE: Reference-style Image Markup in Markdown\nDESCRIPTION: Shows how to use reference-style image declarations for cleaner markdown and reusable image references.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/media.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![An old rock in the desert][image1]\n\n[image1]: ../../_images/mountain.jpg \"Mountain\"\n```\n\n----------------------------------------\n\nTITLE: Requiring a markdown-it plugin in YFM Transformer\nDESCRIPTION: Code snippet showing how to import a plugin using require() or import() function in JavaScript.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/plugins/import.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugin1 = require('<plug_name>');\n```\n\n----------------------------------------\n\nTITLE: Video Embedding in Markdown\nDESCRIPTION: Demonstrates the syntax for embedding videos from various hosting platforms using the markdown-it-video plugin.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/media.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n@[video_hosting_site_name](video_id_or_link_to_video)\n```\n\n----------------------------------------\n\nTITLE: Combined Cell Merging in Tables\nDESCRIPTION: Demonstrates using both horizontal and vertical merging symbols together.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| Header1                                | Header2     | Header3    || \n|| Text spanning two columns and two rows | >           | Text       ||\n|| ^                                      | >           | More text  ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Executing YFM Translation Command\nDESCRIPTION: CLI command example showing how to translate documentation from Russian to English using YFM, specifying input and output folders and language codes.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/docs/translate.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyfm translate --input input_folder --output output_folder --source-language ru --target-language en\n```\n\n----------------------------------------\n\nTITLE: Creating Reference-Style Links in Markdown\nDESCRIPTION: Shows how to use reference-style links to improve readability of the source text, separating the link text from the URL.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nMy favorite search engine is [Yandex][1].\n\n[1]: https://yandex.com/ \"The best search engine\"\n```\n\n----------------------------------------\n\nTITLE: Text Alignment in Table Cells\nDESCRIPTION: Shows how to control text alignment using cell attributes.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| Header1                                                     | Header2     | Header3    || \n|| Text spanning two columns and two rows {.cell-align-center} | >           | Text      ||\n|| ^                                                           | >           | More text  ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Installing @diplodoc/transform Package via npm\nDESCRIPTION: Command to install the @diplodoc/transform package using npm. This is the first step in setting up the package for use in a project.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/index.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @diplodoc/transform\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Markdown\nDESCRIPTION: Shows how to escape syntax symbols using the backslash character to prevent them from being interpreted as markdown formatting.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nSuper^script^\nSuper\\^script^\n```\n\n----------------------------------------\n\nTITLE: Including Reusable Content Without Title\nDESCRIPTION: Demonstrates how to include content from a separate file without including its header by using the 'notitle' keyword. This is useful when you want to reuse the content but maintain your own heading structure.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/includes.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include notitle [Description](../_includes/file.md) %}\n```\n\n----------------------------------------\n\nTITLE: Installing highlight.js Package via NPM\nDESCRIPTION: Command to install the highlight.js package which is used for syntax highlighting code blocks in the Diplodoc platform.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/highlight.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i highlight.js\n```\n\n----------------------------------------\n\nTITLE: Creating hidden TOC sections in YAML\nDESCRIPTION: This snippet shows how to make sections accessible only by direct link and excluded from the table of contents using the 'hidden' parameter. Hidden items can be completely excluded from the build using the '--remove-hidden-toc-items=true' build option.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n- title: Secret document\n  href: secret.md\n  hidden: true\n```\n\n----------------------------------------\n\nTITLE: SourceDocs Includer Example in YAML\nDESCRIPTION: Shows how to use the SourceDocs includer (deprecated in favor of the generic includer) to import documentation generated by the SourceDocs tool into the main documentation.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/toc.yaml\ntitle: documentation\nhref: index.yaml\nitems:\n  - name: docs\n    include:\n      path: docs\n      includers:\n        - name: sourcedocs\n          input: docs\n      mode: link\n```\n\n----------------------------------------\n\nTITLE: Installing markdown-it plugin with npm\nDESCRIPTION: Command to install the markdown-it-emoji plugin package using npm. This is required before the plugin can be used in YFM.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/plugins/import.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i markdown-it-emoji\n```\n\n----------------------------------------\n\nTITLE: Creating a Note with Custom Header in Markdown\nDESCRIPTION: This snippet shows how to create a note with a custom header using custom Markdown syntax. It uses the 'note info' tag with an additional parameter to specify a custom title for the note.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% note info \"Custom header\" %}\n\nThis is a note with its own header.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Variable Substitution in Document Title in YAML\nDESCRIPTION: Example of using variable substitution in a document title, where a placeholder is replaced with the actual value of a variable during document processing.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"not_var{{ title }}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Linux/Unix\nDESCRIPTION: Command to install Git version control system on Linux/Unix systems using the apt package manager.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get install git\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Underlined Text Syntax in Markdown\nDESCRIPTION: Illustrates how to use the markdown-it-ins plugin to create underlined text by enclosing text with double plus signs.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n++qwerty++\n```\n\n----------------------------------------\n\nTITLE: Included Table of Contents Structure in YAML\nDESCRIPTION: Shows the structure of an included table of contents file that will be merged at the same level when included without creating a new section.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n  - name: NameA\n    href: fileA.md\n  - name: NameB\n    href: fileB.md\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on macOS\nDESCRIPTION: Command to install GitHub CLI on macOS using Homebrew package manager. GitHub CLI enables interaction with GitHub from the command line.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Definition Lists in Markdown\nDESCRIPTION: Illustrates how to create nested definition lists where definitions can contain their own terms and definitions.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nTerm 1\n\n: Definition 1\n    \n    Term 1.1\n\n    : Definition 1.1\n\nTerm 2\n\n: Definition 2\n```\n\n----------------------------------------\n\nTITLE: Abstract Example of Includers Usage in YAML\nDESCRIPTION: Shows the general syntax for using multiple includers in sequence to process content before including it in the documentation, with parameters specific to each includer.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# toc.yaml\n...\nitems:\n  - name: <item-name>\n    include:\n      path: <path-where-to-include>\n      includers:\n        - name: <name-of-the-first-includer>\n          <includer-parameter>: <includer-parameter-value>\n        - name: <name-of-the-second-includer>\n        - name: <name-of-the-third-includer>\n      mode: link\n...\n```\n\n----------------------------------------\n\nTITLE: Running YFM Build in Single Page Mode\nDESCRIPTION: Command line option to generate a single HTML file output from a YFM documentation project. This is a beta feature that may have limitations with large or complex projects.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/docs/singlepage.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyfm --single-page\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Languages for Syntax Highlighting\nDESCRIPTION: Example showing how to register additional custom languages for syntax highlighting in the Diplodoc transform process. This allows extending the platform with language support beyond the built-in options.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/highlight.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst transform = require('@diplodoc/transform');\nconst customLang = require('./custom-lang');\n\nconst highlightLangs = { 'custom-lang': customLang };\n\nconst {result: {html, meta}, logs} = transform(content, {highlightLangs});\n```\n\n----------------------------------------\n\nTITLE: Horizontal Cell Merging in Tables\nDESCRIPTION: Shows horizontal cell merging using the '>' symbol.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| Header1                   | Header2     ||\n|| Text spanning two columns | >           ||\n|| Another text              | More text   ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Importing Client Scripts for @diplodoc/transform\nDESCRIPTION: JavaScript import statement to include client-side scripts required for the @diplodoc/transform package. This ensures full functionality of the transformed content on the client side.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/tools/transform/index.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@diplodoc/transform/dist/js/yfm';\n```\n\n----------------------------------------\n\nTITLE: Vertical Cell Merging in Tables\nDESCRIPTION: Demonstrates vertical cell merging using the '^' symbol.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| Header1                | Header2      ||\n|| Text spanning two rows | Another text ||\n|| ^                      | More text    ||\n|#\n```\n\n----------------------------------------\n\nTITLE: OpenGraph Metadata Implementation for Content Analytics\nDESCRIPTION: Example of OpenGraph metadata implementation in a documentation article's front-matter block. This metadata enables Yandex Metrica to collect detailed content analytics including article type, title, authors, tags, and publication dates.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/guides/content-analytics.md#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmetadata:\n    - property: 'og:type'\n      content: 'article'\n    - property: 'og:title'\n      content: 'В Москве побит температурный рекорд 1922 года'\n    - property: 'og:url'\n      content: 'https://www.example-news.com/life/weather/moscow#cao'\n    - property: 'article:section'\n      content: 'Погода'\n    - property: 'article:modified_time'\n      content: '2018-12-11T08:56:49Z'\n    - property: 'article:published_time'\n      content: '2018-11-06T09:26:10+04:00'\n    - property: 'article:author'\n      content: 'Иван Иванов'\n    - property: 'article:author'\n      content: 'Петр Петров'\n    - property: 'article:tag'\n      content: 'Жара'\n    - property: 'article:tag'\n      content: 'Москва'\n---\n```\n\n----------------------------------------\n\nTITLE: Nested Tables within Table Cells\nDESCRIPTION: Illustrates how to nest tables within table cells including surrounding text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| 1\n|\n\nText before other table\n\n#|\n|| 5\n| 6||\n|| 7\n| 8||\n|#\n\nText after other table||\n|| 3\n| 4||\n|#\n```\n\n----------------------------------------\n\nTITLE: Installing Git on macOS\nDESCRIPTION: Command to install Git version control system on macOS using Homebrew package manager.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install git\n```\n\n----------------------------------------\n\nTITLE: Creating Bulleted Lists in Markdown\nDESCRIPTION: Demonstrates how to create bulleted lists using asterisks, hyphens, or plus signs as bullet markers.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* List item.\n* List item.\n* List item.\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Windows\nDESCRIPTION: Command to install Git version control system on Windows using the winget package manager.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwinget install --id Git.Git -e --source winget\n```\n\n----------------------------------------\n\nTITLE: Automatic Title Link to Markdown File\nDESCRIPTION: Shows how to create a link to a Markdown file that automatically uses the file's title as the link text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/links.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[{#T}](./index.md)\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on Linux/Unix\nDESCRIPTION: Script to install GitHub CLI on Linux/Unix systems. It adds GitHub's repository to apt sources and installs the CLI tool. The script handles dependencies and repository key management.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \\\n&& sudo mkdir -p -m 755 /etc/apt/keyrings \\\n&& wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \\\n&& sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \\\n&& echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \\\n&& sudo apt update \\\n&& sudo apt install gh -y\n```\n\n----------------------------------------\n\nTITLE: Index YAML for Generic Includer in YAML\nDESCRIPTION: Shows how to add a link to the generated documentation pages in the main index.yaml file when using the generic includer.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/project/toc.md#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# doc_root/index.yaml\ntitle: documentation\nlinks:\n  - title: docs\n    href: docs/\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub CLI on Windows\nDESCRIPTION: Command to install GitHub CLI on Windows using the winget package manager.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/jam.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwinget install --id GitHub.cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Note without Header in Markdown\nDESCRIPTION: This snippet illustrates how to create a note without a header using custom Markdown syntax. It uses the 'note info' tag with an empty string as the header parameter to omit the title.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/notes.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% note info \"\" %}\n\nThis is a note without a header.\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Defining Tooltip Terms in Markdown\nDESCRIPTION: Shows the basic syntax for defining tooltips in Markdown. The definition uses square brackets with an asterisk for the term key, followed by the explanation text which can include basic Markdown formatting.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/term.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[*ключ_термина]: Разъяснение термина или сокращения с помощью синтаксиса определений.\nОпределение термина может включать в себя _базовую_ разметку.\n\nИспользование [термина](*ключ_термина) в тексте.\n```\n\n----------------------------------------\n\nTITLE: Escaping Merging Symbols in Tables\nDESCRIPTION: Demonstrates how to escape merging symbols to use them as plain text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/tables/multiline.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| Header1                 | Header2 | Header3 || \n|| Text in one cell        | \\>      | Text    ||\n|| \\^                      | \\>      | More text ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Reusing Popup Tooltip Content from External Files\nDESCRIPTION: Example file structure showing how to organize reusable popup tooltip content with level 4 headers and anchors. This approach allows the same tooltip definitions to be used across multiple documents.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/term.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### {#popup-1}\n\nТаблица\n\n#|\n|| **Заголовок таблицы** | > ||\n|| Текст | Текст ||\n|| Текст | Текст ||\n|#\n\n\n#### {#popup-2}\n\n\n{% cut \"Кат со списком внутри\" %}\n\n1. Пункт списка\n1. Пункт списка\n1. Пункт списка\n\n{% endcut %}\n```\n\n----------------------------------------\n\nTITLE: Creating Line Breaks in Markdown\nDESCRIPTION: Demonstrates how to create line breaks by moving the carriage return.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nLine.\nNext line.\n```\n\n----------------------------------------\n\nTITLE: Including Reusable Tooltips with Includes Directive\nDESCRIPTION: Demonstrates how to include popup tooltip content from external files using the include directive. This approach allows maintaining tooltip content in a central location while reusing it across multiple documents.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/term.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[*popup-1]: {% include notitle [popup_1](../_includes/popups_examples.md#popup-1) %}\n[*popup-2]: {% include notitle [popup_2](../_includes/popups_examples.md#popup-2) %}\n```\n\n----------------------------------------\n\nTITLE: Creating Paragraphs in Markdown\nDESCRIPTION: Shows how to create paragraphs by separating blocks of text with empty lines.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nParagraph.\n\nNext paragraph.\n```\n\n----------------------------------------\n\nTITLE: Adding a plugin to YFM Transformer plugins array\nDESCRIPTION: Code showing how to add a plugin to the plugins array in the transform function options parameter.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/plugins/import.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {result: {html, meta}, logs} = transform(content, {plugins: [<plug_name>]});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Quotes in Markdown\nDESCRIPTION: Shows how to create block quotes using the greater-than symbol.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/base.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n> Quote\n```\n\n----------------------------------------\n\nTITLE: Creating Definition Lists in Markdown\nDESCRIPTION: Shows how to create definition lists using terms followed by definitions with colons. This format is ideal for glossaries or term explanations.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/lists.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTerm 1\n\n: Definition 1\n\nTerm 2\n\n: Definition 2\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Plugin for Task Lists in JavaScript\nDESCRIPTION: Shows how to import the checkbox plugin from the @diplodoc/transform package to enable task list functionality.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkbox = require('@diplodoc/transform/lib/plugins/checkbox');\n```\n\n----------------------------------------\n\nTITLE: Loop Syntax in Markdown Documentation\nDESCRIPTION: Demonstrates how to use loops to output repeating content for each element in an array. Variables inside loops can be accessed using the standard substitution syntax.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% for имя_переменной in имя_массива %}\n\nКакой-то текст {{ имя_переменной }} продолжение текста.\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Subscript Syntax in Markdown\nDESCRIPTION: Shows how to use the markdown-it-sub plugin to create subscript text by enclosing characters with tildes.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/en/syntax/additional.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nH~2~O\n```\n\n----------------------------------------\n\nTITLE: Variable Substitution Syntax in Markdown\nDESCRIPTION: Demonstrates how to substitute variable values in text by enclosing the variable name with double curly braces. Also shows how to escape curly braces using 'not_var' prefix when they should be treated as regular text.\nSOURCE: https://github.com/diplodoc-platform/docs/blob/master/ru/syntax/vars.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nКакой-то текст {{ имя_переменной }} продолжение текста.\n```\n\nLANGUAGE: markdown\nCODE:\n```\nКакой-то текст not_var{{ тоже_текст }} продолжение текста.\n```"
  }
]