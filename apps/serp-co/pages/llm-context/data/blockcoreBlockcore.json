[
  {
    "owner": "block-core",
    "repo": "blockcore",
    "content": "TITLE: Defining Contract Executor Interface in C#\nDESCRIPTION: This code snippet defines the `IContractExecutor` interface, which is the core abstraction for smart contract execution environments in Stratis. Any new execution environment must implement this interface. The `Execute` method takes an `IContractTransactionContext` as input and returns an `IContractExecutionResult`.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/SmartContracts/Smart-contracts-architecture.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n    public interface IContractExecutor\n    {\n        IContractExecutionResult Execute(IContractTransactionContext transactionContext);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Class Logger (C#)\nDESCRIPTION: This snippet demonstrates how to create a class logger, which is necessary when you don't have access to an existing factory. It shows how to create and initialize an ILoggerFactory, and then create the logger itself.  The example also shows how to optionally add console and disk logging. Requires NLog.Extensions.Logging.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nILoggerFactory loggerFactory = new LoggerFactory();\nloggerFactory.AddConsole();  // Only if you want to include logging to the console.\nloggerFactory.AddNLog();   // Only if you want to include logging to the disk. This requires using NLog.Extensions.Logging.\n```\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Class logger.</summary>\nprivate static readonly ILogger logger;\n...\nlogger = loggerFactory.CreateLogger(typeof(YourClassName).FullName);\n```\n\n----------------------------------------\n\nTITLE: Setup Cold Staking Transaction Configuration\nDESCRIPTION: This JSON configuration is used as input for the `setup-cold-staking` API method to build a transaction that links funds in the Cold Wallet Address to the Hot Wallet Address. The configuration requires specifying the cold and hot wallet addresses, wallet name, password, account, amount to stake, and transaction fees.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/cold-staking-setup.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"coldWalletAddress\": \"<<coldstakingcoldaddress>>\",\n  \"hotWalletAddress\": \"<<coldstakinghotaddress>>\",\n  \"walletName\": \"<<coldwalletname>>\",\n  \"walletPassword\": \"<<coldwalletpassword>>\",\n  \"walletAccount\": \"account 0\",\n  \"amount\": \"<<amount to stake>>\",\n  \"fees\": \"0.0002\"\n}\n```\n\n----------------------------------------\n\nTITLE: ScriptPubKey for Cold Staking Output\nDESCRIPTION: This ScriptPubKey is used for creating a cold staking output. It allows staking via a hot wallet key or spending via a cold wallet key. The `OP_CHECKCOLDSTAKEVERIFY` opcode ensures that the hot wallet key can only be used for creating coinstake transactions.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/ColdStaking.md#_snippet_0\n\nLANGUAGE: Script\nCODE:\n```\nOP_DUP OP_HASH160 OP_ROT\n\nOP_IF\n\nOP_CHECKCOLDSTAKEVERIFY <Hash(hotPubKey)>\n\nOP_ELSE\n\n<Hash(coldPubKey)>\n\nOP_ENDIF\n\nOP_EQUALVERIFY OP_CHECKSIG\n```\n\n----------------------------------------\n\nTITLE: Withdrawal Transaction Configuration\nDESCRIPTION: This JSON configuration is used as input for the `cold-staking-withdrawal` API method to build a transaction to return coins from the Hot Wallet Address to the Cold Wallet Address (account 0). The configuration includes the receiving address (cold wallet account 0), wallet name, password, amount to return, and transaction fees.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/cold-staking-setup.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"receivingAddress\": \"<<cold wallet address/ account 0>>\",\n  \"walletName\": \"<<coldwalletname>>\",\n  \"walletPassword\": \"<<coldwalletpassword>>\",\n  \"amount\": \"<<amount to to return>>\",\n  \"fees\": \"0.0001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NLog for Full Consensus Logging\nDESCRIPTION: This configuration logs consensus-related traces to a file named debug.txt within the node's data folder/logs path. It archives the log files when they reach 250MB and allows specifying the maximum number of archive files to limit space usage.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/log-configuration-examples.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\">\n  <targets>\n    <target xsi:type=\"File\"\n        name=\"debugFile\"\n        fileName=\"debug.txt\"\n        layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\"\n        encoding=\"utf-8\"\n        archiveNumbering=\"DateAndSequence\"\n        archiveAboveSize=\"250000000\"/>\n    <target xsi:type=\"null\" name=\"null\" formatMessage=\"false\" />\n  </targets>\n\n  <rules>\n    <!-- Avoid logging to incorrect folder before the logging initialization is done. If you want to see those logging messages, comment out this line, but your log file will be somewhere else. -->\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"null\" final=\"true\" />\n\n    <!-- Log Consensus related entries -->\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.*\" minlevel=\"Trace\" writeTo=\"debugFile\" />\n    <logger name=\"Stratis.Bitcoin.Consensus.*\" minlevel=\"Trace\" writeTo=\"debugFile\" />\n  </rules>\n</nlog>\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Contract Whitelisting in Blockcore (C#)\nDESCRIPTION: This code snippet demonstrates how to enable contract whitelisting within the smart contracts feature of a Blockcore node. It uses the `.UsePoAWhitelistedContracts()` option within the `.AddSmartContracts()` configuration. This setup ensures that only contracts with whitelisted code hashes can be deployed.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/SmartContracts/Contract_whitelisting.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n    .AddSmartContracts(options =>\n    {\n        options.UsePoAWhitelistedContracts();\n    })\n```\n\n----------------------------------------\n\nTITLE: Federation Key Pair Generation\nDESCRIPTION: This snippet illustrates the command to generate a federation key pair for a member of the PoA network. This key pair is used for signing blocks in the PoA consensus mechanism. The generated key should be backed up and the public key shared with the network administrator.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/PoA/PoA_set_up_manual.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet exec MyPoAChainD.dll -generateKeyPair\n```\n\n----------------------------------------\n\nTITLE: NLog Configuration (XML)\nDESCRIPTION: This snippet shows a basic NLog.config file that defines targets and rules for logging. It demonstrates how to set up a file target for debug logs and configure logging levels for different classes. It includes a rule to prevent premature log creation before initialization, and highlights the autoReload attribute for dynamic updates.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\">\n  <targets>\n    <target xsi:type=\"File\" name=\"debugAllFile\" fileName=\"debug.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    <target xsi:type=\"null\" name=\"null\" formatMessage=\"false\" /> \n  </targets>\n\n  <rules>\n    <!-- Avoid logging to incorrect folder before the logging initialization is done. If you want to see those logging messages, comment out this line, but your log file will be somewhere else. -->\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"null\" final=\"true\" />\n\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugAllFile\" />\n  </rules>\n</nlog>\n```\n\n----------------------------------------\n\nTITLE: Assigning Pending Download Task C#\nDESCRIPTION: Assigns a pending block download task to a specific peer node. The method attempts to find a pending block hash and assigns it to the given peer. It uses a lock to ensure thread safety when accessing and modifying the internal state. It returns true if a task was assigned, and false otherwise.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n        /// <summary>\n        /// Assigns a pending download task to a specific peer.\n        /// </summary>\n        /// <param name=\"peer\">Peer to be assigned the new task.</param>\n        /// <param name=\"blockHash\">If the function succeeds, this is filled with the hash of the block that will be requested from <paramref name=\"peer\"/>.</param>\n        /// <returns>\n        /// <c>true</c> if a download task was assigned to the peer, <c>false</c> otherwise, \n        /// which indicates that there was no pending task.\n        /// </returns>\n        internal bool AssignPendingDownloadTaskToPeer(BlockPullerBehavior peer, out uint256 blockHash)\n        {\n            blockHash = null;\n\n            lock (this.lockObject)\n            {\n\n```\n\n----------------------------------------\n\nTITLE: Advanced NLog XML Configuration with Separate Logs\nDESCRIPTION: This snippet shows an advanced NLog configuration file that logs everything to 'debug.txt' and also creates separate log files for specific components like BlockPuller, BlockStore, CoinViews, MiningValidation, TimeSync, and Wallet.  Each component has its own async wrapper target.  The rules section defines which components are logged to which files based on their namespace. The `queueLimit`, `overflowAction`, and `batchSize` attributes control the behavior of the async wrapper. The `autoReload` attribute enables automatic reloading of the configuration file when it changes.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\">\n  <targets>\n    <target name=\"debugAllFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"debug.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugBlockPullerFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"blockpuller.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugBlockStoreFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"blockstore.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugCoinViewsFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"coinview.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugMiningValidationFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"miner.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugTimeSyncFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"timesync.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target name=\"debugWalletFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"wallet.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target xsi:type=\"null\" name=\"null\" formatMessage=\"false\" /> \n  </targets>\n\n  <rules>\n    <!-- Avoid logging to incorrect folder before the logging initialization is done. If you want to see those logging messages, comment out this line, but your log file will be somewhere else. -->\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"null\" final=\"true\" />\n\n    <logger name=\"Stratis.Bitcoin.BlockPulling.*\" minlevel=\"Trace\" writeTo=\"debugBlockPullerFile\" />\n\n    <logger name=\"Stratis.Bitcoin.Features.BlockStore.*\" minlevel=\"Trace\" writeTo=\"debugBlockStoreFile\" />\n\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.CoinViews.*\" minlevel=\"Trace\" writeTo=\"debugCoinViewsFile\" />\n\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.ConsensusLoop\" minlevel=\"Trace\" writeTo=\"debugMiningValidationFile\" />\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.StakeValidator\" minlevel=\"Trace\" writeTo=\"debugMiningValidationFile\" />\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.PosConsensusValidator\" minlevel=\"Trace\" writeTo=\"debugMiningValidationFile\" />\n    <logger name=\"Stratis.Bitcoin.Features.Consensus.PowConsensusValidator\" minlevel=\"Trace\" writeTo=\"debugMiningValidationFile\" />\n    <logger name=\"Stratis.Bitcoin.Features.Miner.*\" minlevel=\"Trace\" writeTo=\"debugMiningValidationFile\" />\n\n    <logger name=\"Stratis.Bitcoin.Base.TimeSyncBehaviorState\" minlevel=\"Trace\" writeTo=\"debugTimeSyncFile\" />\n    <logger name=\"Stratis.Bitcoin.Base.TimeSyncBehavior\" minlevel=\"Trace\" writeTo=\"debugTimeSyncFile\" />\n\n    <logger name=\"Stratis.Bitcoin.Features.Wallet.*\" minlevel=\"Trace\" writeTo=\"debugWalletFile\" />\n\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugAllFile\" />\n  </rules>\n</nlog>\n```\n\n----------------------------------------\n\nTITLE: Example Swagger Input Parameters for Wallet Creation\nDESCRIPTION: This snippet shows the expected JSON input format for the `Wallet` creation command via the Swagger API. The parameters include a password, passphrase, and wallet name, all used to secure and identify the new wallet.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/PoA/PoA_set_up_manual.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"password\": \"123123123\",\n  \"passphrase\": \"123123123\",\n  \"name\": \"mywallet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Block Download Task to Peer in C#\nDESCRIPTION: This code snippet shows how to dequeue a block hash from a pending inventory vector queue, assign it to a peer for download, and track the assignment. It uses a dictionary to keep track of the blocks assigned to each peer and manages pending download blocks for the given peer. The `blockHash` is dequeued if the queue is not empty and the `AddPeerPendingDownloadLocked` method handles the task assignment.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n                if (this.pendingInventoryVectors.Count > 0)\n                {\n                    blockHash = this.pendingInventoryVectors.Dequeue();\n                    this.assignedBlockTasks.Add(blockHash, peer);\n\n                    AddPeerPendingDownloadLocked(peer, blockHash);\n                }\n            }\n\n            bool res = blockHash != null;\n            return res;\n```\n\n----------------------------------------\n\nTITLE: Creating Instance Logger (C#)\nDESCRIPTION: This snippet demonstrates how to create an instance logger using ILoggerFactory. The logger is initialized with the full name of the class, allowing for specific logging configurations based on class names.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Instance logger.</summary>\nprivate readonly ILogger logger;\n...\nthis.logger = loggerFactory.CreateLogger(this.GetType().FullName);\n```\n\n----------------------------------------\n\nTITLE: Using Loggers (C#)\nDESCRIPTION: This snippet demonstrates how to use both instance and class loggers using the ILogger interface, showcasing the use of LogTrace and LogWarning methods. It emphasizes the importance of using composite format strings instead of interpolated strings for performance reasons.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Instance logger on trace level:\nthis.logger.LogTrace(\"Message: {0}\", message);\n// Class logger on warning level:\nlogger.LogWarning(\"Message: {0}\", message);\n```\n\n----------------------------------------\n\nTITLE: ScriptSig for Staking using Hot Wallet\nDESCRIPTION: This ScriptSig is used to spend a cold staking output using the hot wallet's private key to create another coinstake transaction.  The '1' pushes true onto the stack, selecting the 'OP_CHECKCOLDSTAKEVERIFY' branch.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/ColdStaking.md#_snippet_1\n\nLANGUAGE: Script\nCODE:\n```\n<sig> 1 <hotPubKey>\n```\n\n----------------------------------------\n\nTITLE: Referencing Projects in .NET Core\nDESCRIPTION: This snippet lists the required Stratis projects that need to be referenced in the new .NET Core console application project for the PoA network daemon. These projects provide the necessary features for API, app functionality, block storage, consensus, memory pool, miner operations, PoA-specific functionalities, RPC communication, and wallet management.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/PoA/PoA_set_up_manual.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nStratis.Bitcoin.Features.Api\nStratis.Bitcoin.Features.Apps\nStratis.Bitcoin.Features.BlockStore\nStratis.Bitcoin.Features.Consensus\nStratis.Bitcoin.Features.MemoryPool\nStratis.Bitcoin.Features.Miner\nStratis.Bitcoin.Features.PoA\nStratis.Bitcoin.Features.RPC\nStratis.Bitcoin.Features.Wallet\nStratis.Bitcoin\n```\n\n----------------------------------------\n\nTITLE: BlockPuller Class Definition C#\nDESCRIPTION: Defines the abstract BlockPuller class, which implements the IBlockPuller interface. This class serves as the base for pullers that download blocks from peers. It contains methods and properties for managing block download tasks, tracking downloaded blocks, and assigning tasks to peers. It uses NBitcoin library for cryptographic primitives.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing NBitcoin.Protocol;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing NBitcoin;\nusing System.Threading;\nusing Microsoft.Extensions.Logging;\n\nnamespace Stratis.Bitcoin.BlockPulling\n{\n    /// <summary>\n    /// Base class for pullers that download blocks from peers.\n    /// <para>\n    /// This must be inherited and the implementing class\n    /// needs to handle taking blocks off the queue and stalling.\n    /// </para>\n    /// </summary>\n    /// <remarks>\n    /// There are 4 important objects that hold the state of the puller and that need to be kept in sync:\n    /// <see cref=\"assignedBlockTasks\"/>, <see cref=\"pendingInventoryVectors\"/>, <see cref=\"downloadedBlocks\"/>, \n    /// and <see cref=\"peersPendingDownloads\"/>.\n    /// <para>\n    /// <see cref=\"downloadedBlocks\"/> is a list of blocks that have been downloaded recently but not processed \n    /// by the consumer of the puller.\n    /// </para>\n    /// <para>\n    /// When a typical consumer wants a next block from the puller, it first checks <see cref=\"downloadedBlocks\"/>, \n    /// if the block is available (the consumer does know the header of the block it wants from the puller,\n    /// if not, it simply waits until this information is available). If it is available, it is removed \n    /// from DownloadedBlocks and consumed. Otherwise, the consumer checks whether this block is being \n    /// downloaded (or soon to be). If not, it asks the puller to request it from the connect network peers.\n    /// <para>\n    /// Besides this \"on demand\" way of requesting blocks from peers, the consumer also tries to keep puller \n    /// ahead of the demand, so that the blocks are downloaded some time before they are needed.\n    /// </para>\n    /// </para>\n    /// <para>\n    /// For a block to be considered as currently (or soon to be) being downloaded, its hash has to be \n    /// either in <see cref=\"assignedBlockTasks\"/> or <see cref=\"pendingInventoryVectors\"/>.\n    /// </para>\n    /// <para>\n    /// When the puller is about to request blocks from the peers, it selects which of its peers will \n    /// be asked to provide which blocks. These assignments of block downloading tasks is kept inside \n    /// <see cref=\"assignedBlockTasks\"/>. Unsatisfied requests go to <see cref=\"pendingInventoryVectors\"/>, which happens \n    /// when the puller find out that neither of its peers can be asked for certain block. It also happens \n    /// when something goes wrong (e.g. the peer disconnects) and the downloading request to a peer is not \n    /// completed. Such requests need to be reassigned later. Note that it is possible for a peer \n    /// to be operating well, but slowly, which can cause its quality score to go down and its work \n    /// to be taken from it. However, this reassignment of the work does not mean the node is stopped \n    /// in its current task and it is still possible that it will deliver the blocks it was asked for.\n    /// Such late blocks deliveries are currently ignored and wasted.\n    /// </para>\n    /// <para><see cref=\"peersPendingDownloads\"/> is an inverse mapping to <see cref=\"assignedBlockTasks\"/>. Each connected \n    /// peer node has its list of assigned tasks here and there is an equivalence between tasks in both structures.</para>\n    /// </remarks>\n    public abstract class BlockPuller : IBlockPuller\n    {\n        /// <summary>Maximal quality score of a peer node based on the node's past experience with the peer node.</summary>\n        public const int MaxQualityScore = 150;\n\n        /// <summary>Minimal quality score of a peer node based on the node's past experience with the peer node.</summary>\n        public const int MinQualityScore = 1;\n\n        /// <summary>Instance logger.</summary>\n        protected readonly ILogger logger;\n\n        /// <summary>Lock protecting access to <see cref=\"assignedBlockTasks\"/>, <see cref=\"pendingInventoryVectors\"/>, <see cref=\"downloadedBlocks\"/>, and <see cref=\"peersPendingDownloads\"/></summary>\n        private readonly object lockObject = new object();\n\n        /// <summary>\n        /// Hashes of blocks to be downloaded mapped by the peers that the download tasks are assigned to.\n        /// </summary>\n        /// <remarks>All access to this object has to be protected by <see cref=\"lockObject\"/>.</remarks>\n        private readonly Dictionary<uint256, BlockPullerBehavior> assignedBlockTasks;\n\n        /// <summary>List of block header hashes that the node wants to obtain from its peers.</summary>\n        /// <remarks>All access to this object has to be protected by <see cref=\"lockObject\"/>.</remarks>\n        private readonly Queue<uint256> pendingInventoryVectors;\n\n        /// <summary>List of unprocessed downloaded blocks mapped by their header hashes.</summary>\n        /// <remarks>All access to this object has to be protected by <see cref=\"lockObject\"/>.</remarks>\n        private readonly Dictionary<uint256, DownloadedBlock> downloadedBlocks;\n\n        /// <summary>Number of items in <see cref=\"downloadedBlocks\"/>. This is for statistical purposes only.</summary>\n        public int DownloadedBlocksCount\n        {\n            get\n            {\n                lock (this.lockObject)\n                {\n                    return this.downloadedBlocks.Count;\n                }\n            }\n        }\n\n        /// <summary>Sets of block header hashes that are being downloaded mapped by peers they are assigned to.</summary>\n        /// <remarks>All access to this object has to be protected by <see cref=\"lockObject\"/>.</remarks>\n        private readonly Dictionary<BlockPullerBehavior, HashSet<uint256>> peersPendingDownloads = new Dictionary<BlockPullerBehavior, HashSet<uint256>>();\n\n        /// <summary>Collection of available network peers.</summary>\n        protected readonly IReadOnlyNodesCollection Nodes;\n\n        /// <summary>Best chain that the node is aware of.</summary>\n        protected readonly ConcurrentChain Chain;\n\n        /// <summary>Random number generator.</summary>\n        private Random Rand = new Random();\n\n        /// <summary>Specification of requirements the puller has on its peer nodes to consider asking them to provide blocks.</summary>\n        private readonly NodeRequirement requirements;\n        /// <summary>Specification of requirements the puller has on its peer nodes to consider asking them to provide blocks.</summary>\n        public virtual NodeRequirement Requirements => this.requirements;\n\n        /// <summary>Description of a block together with its size.</summary>\n        public class DownloadedBlock\n        {\n            /// <summary>Size of the serialized block in bytes.</summary>\n            public int Length;\n\n            /// <summary>Description of a block.</summary>\n            public Block Block;\n        }\n\n        /// <summary>\n        /// Initializes a new instance of the object having a chain of block headers and a list of available nodes. \n        /// </summary>\n        /// <param name=\"chain\">Chain of block headers.</param>\n        /// <param name=\"nodes\">Network peers of the node.</param>\n        /// <param name=\"protocolVersion\">Version of the protocol that the node supports.</param>\n        /// <param name=\"loggerFactory\">Factory to be used to create logger for the puller.</param>\n        protected BlockPuller(ConcurrentChain chain, IReadOnlyNodesCollection nodes, ProtocolVersion protocolVersion, ILoggerFactory loggerFactory)\n        {\n            this.Chain = chain;\n            this.Nodes = nodes;\n            this.logger = loggerFactory.CreateLogger(this.GetType().FullName);\n            this.downloadedBlocks = new Dictionary<uint256, DownloadedBlock>();\n            this.pendingInventoryVectors = new Queue<uint256>();\n            this.assignedBlockTasks = new Dictionary<uint256, BlockPullerBehavior>();\n\n            // set the default requirements\n            this.requirements = new NodeRequirement\n            {\n                MinVersion = protocolVersion,\n                RequiredServices = NodeServices.Network\n            };\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Wrapper in NLog XML\nDESCRIPTION: This snippet demonstrates a basic NLog configuration file with an async wrapper target. It configures a file target that logs messages to 'debug.txt' with a specified layout. The async wrapper is used to improve performance by queuing log messages. The `queueLimit`, `overflowAction`, and `batchSize` attributes control the behavior of the async wrapper. The `autoReload` attribute enables automatic reloading of the configuration file when it changes.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/using-logging.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<nlog xmlns=\"http://www.nlog-project.org/schemas/NLog.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" autoReload=\"true\">\n  <targets>\n    <target name=\"debugAllFile\" xsi:type=\"AsyncWrapper\" queueLimit=\"10000\" overflowAction=\"Block\" batchSize=\"1000\">\n      <target xsi:type=\"File\" fileName=\"debug.txt\" layout=\"[${longdate:universalTime=true} ${threadid}${mdlc:item=id}] ${level:uppercase=true}: ${callsite} ${message}\" encoding=\"utf-8\" /> \n    </target>\n    <target xsi:type=\"null\" name=\"null\" formatMessage=\"false\" /> \n  </targets>\n\n  <rules>\n    <!-- Avoid logging to incorrect folder before the logging initialization is done. If you want to see those logging messages, comment out this line, but your log file will be somewhere else. -->\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"null\" final=\"true\" />\n\n    <logger name=\"*\" minlevel=\"Trace\" writeTo=\"debugAllFile\" />\n  </rules>\n</nlog>\n```\n\n----------------------------------------\n\nTITLE: ScriptSig for Cancelling Cold Staking Setup\nDESCRIPTION: This ScriptSig is used to spend a cold staking output using the cold storage's private key, effectively cancelling the cold staking setup. The '0' pushes false onto the stack, selecting the cold key branch.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/Features/ColdStaking.md#_snippet_2\n\nLANGUAGE: Script\nCODE:\n```\n<sig> 0 <coldPubKey>\n```\n\n----------------------------------------\n\nTITLE: Logging Time Offset - C#\nDESCRIPTION: This code snippet shows how to log a specific execution path when a `PeerVersion` is not set for a node. It logs a message indicating that the node does not have an initialized time offset. If the node has a valid `PeerVersion`, no log is created, implying that the node is behaving normally. This helps identify abnormal node behavior.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nVersionPayload version = node.PeerVersion;\nif (version != null)\n{\n    TimeSpan timeOffset = version.Timestamp - this.dateTimeProvider.GetUtcNow();\n    if (timeOffset != null) this.state.AddTimeData(address, timeOffset, node.Inbound);\n}\nelse this.logger.LogTrace(\"Node '{0}' does not have an initialized time offset.\", node.RemoteSocketEndpoint);                    \n```\n\n----------------------------------------\n\nTITLE: Pushing Block C#\nDESCRIPTION: Pushes a downloaded block into the downloadedBlocks dictionary. The method takes the block's length, the block itself, and a cancellation token as input. It calculates the block's hash and adds it to the downloadedBlocks dictionary, ensuring thread safety via a lock on lockObject.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n        /// <inheritdoc />\n        public virtual void PushBlock(int length, Block block, CancellationToken token)\n        {\n            uint256 hash = block.Header.GetHash();\n\n            DownloadedBlock downloadedBlock = new DownloadedBlock()\n            {\n                Block = block,\n                Length = length,\n            };\n\n            lock (this.lockObject)\n            {\n                this.downloadedBlocks.TryAdd(hash, downloadedBlock);\n            }\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Logging Rewind Operation in a Loop - C#\nDESCRIPTION: This code snippet demonstrates how to log the execution flow within a loop, specifically during a rewind operation. It logs the hash of each block after each rewind operation and at the end of the loop, providing insight into the number of rewind operations performed. This helps in understanding the execution path of the loop.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nwhile (true)\n{\n    uint256 hash = await this.UTXOSet.Rewind();\n    ChainedBlock rewinded = this.Chain.GetBlock(hash);\n    if (rewinded == null)\n    {\n        this.logger.LogTrace(\"Rewound to '{0}', which is still not a part of the current best chain, rewinding further.\", hash);\n        continue;\n    }\n\n    this.logger.LogTrace(\"Rewound to '{0}'.\", hash);\n    this.Tip = rewinded;\n    this.Puller.SetLocation(rewinded);\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Method Entry - C#\nDESCRIPTION: This code snippet illustrates how to log the entry point of a method with its input arguments. It uses `nameof()` to capture the argument names and their values, allowing the reader to track objects through the execution flow. Sensitive data like passwords should never be logged.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void AttachedNode_MessageReceived(Node node, IncomingMessage message)\n{\n    this.logger.LogTrace(\"({0}:'{1}',{2}:'{3}')\", nameof(node), node.RemoteSocketEndpoint, nameof(message), message.Message.Command);\n```\n\n----------------------------------------\n\nTITLE: Logging Method Exit - C#\nDESCRIPTION: This code snippet demonstrates how to log the exit point of a method, including the return value. It logs the result value and the values of output arguments, along with a context identifier to distinguish different exit points. It uses `nameof()` to get argument names.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nthis.logger.LogTrace(\"(-):{0}\", res);\nreturn res;\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging with Log Level (C#)\nDESCRIPTION: This code demonstrates how to conditionally log messages based on the current log level. It checks if the Debug log level is enabled before iterating through a list and logging information about each item.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nif (this.logger.IsEnabled(LogLevel.Debug))\n{\n    foreach (Item item in list)\n        this.logger.LogDebug(\"... something about each item ...\");\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Contract Example C#\nDESCRIPTION: This code demonstrates documenting contracts using the `<remarks>` tag to specify preconditions for a method (in this case, holding a lock). The method name also includes \"Locked\" as a suffix to indicate that it requires the lock.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Assigns a download task to a specific peer.\n/// </summary>\n/// <param name=\"peer\">Peer to be assigned the new task.</param>\n/// <param name=\"blockHash\">Hash of the block to download from <paramref name=\"peer\"/>.</param>\n/// <returns><c>true</c> if the block was assigned to the peer, <c>false</c> in case the block has already been assigned to someone.</returns>\n/// <remarks>The caller of this method is responsible for holding <see cref=\"lockObject\"/>.</remarks>\nprivate bool AssignDownloadTaskToPeerLocked(BlockPullerBehavior peer, uint256 blockHash)\n...\n```\n\n----------------------------------------\n\nTITLE: Logging Date and Time (C#)\nDESCRIPTION: This snippet shows how to log date and time information using a specific format. The '{0:yyyy-MM-dd HH:mm:ss}' format specifier ensures that the date and time are displayed in the desired format.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nDateTime date = DateTime.UtcNow;\n\n...\n\nthis.logger.LogTrace(\"(-):{0:yyyy-MM-dd HH:mm:ss}\", date);\n```\n\n----------------------------------------\n\nTITLE: Logging with UTXO Details (C#)\nDESCRIPTION: This code snippet demonstrates logging information about a UTXO (Unspent Transaction Output), including its hash, index, and value. It uses string formatting to insert the UTXO details into the log message.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nthis.logger.LogTrace(\"UTXO '{0}/{1}' with value {2} might be available for staking.\", stakeTx.OutPoint.Hash, stakeTx.OutPoint.N, utxo.Value);\n```\n\n----------------------------------------\n\nTITLE: Logging Method Exit with Structure Result - C#\nDESCRIPTION: This code snippet shows how to log the exit of a method when the return variable is a structure. Instead of logging the entire structure, only a useful part of it is logged. `*` represents the returned object.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nFetchCoinsResponse result = null;\n\n    ...\n\n\n    this.logger.LogTrace(\"(-):*.{0}='{1}',*.{2}.{3}={4}\", nameof(result.BlockHash), result.BlockHash, nameof(result.UnspentOutputs), nameof(result.UnspentOutputs.Length), result.UnspentOutputs.Length);\n    return result;\n```\n\n----------------------------------------\n\nTITLE: Getting Node Behaviors C#\nDESCRIPTION: Retrieves an array of BlockPullerBehavior instances associated with peer nodes that meet the specified requirements. It filters the available nodes based on the Requirements property and extracts the BlockPullerBehavior from those nodes that are associated with the current BlockPuller instance.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n        /// <summary>\n        /// Constructs relations to peer nodes that meet the requirements.\n        /// </summary>\n        /// <returns>Array of relations to peer nodes that can be asked for blocks.</returns>\n        /// <remarks>TODO: https://github.com/block-core/blockcore/issues/1</remarks>\n        /// <seealso cref=\"requirements\"/>\n        private BlockPullerBehavior[] GetNodeBehaviors()\n        {\n            return this.Nodes\n                .Where(n => this.requirements.Check(n.PeerVersion))\n                .SelectMany(n => n.Behaviors.OfType<BlockPullerBehavior>())\n                .Where(b => b.Puller == this)\n                .ToArray();\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Logging Boolean Value (C#)\nDESCRIPTION: This example shows how to log a boolean value.  The boolean variable is passed directly into the LogTrace method as a format argument.  There are no quotes or apostrophes used around the '{0}'.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbool res = false;\n\n...\n\nthis.logger.LogTrace(\"(-):{0}\", res);\n```\n\n----------------------------------------\n\nTITLE: Logging Block Hash (C#)\nDESCRIPTION: This snippet illustrates how to log a block hash. The block hash variable is passed to the LogTrace method as a format argument and is enclosed in apostrophes within the format string.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nuint256 blockHash;\n\n...\n\nthis.logger.LogTrace(\"(-):'{0}'\", blockHash);\n```\n\n----------------------------------------\n\nTITLE: Logging Collection Items (C#)\nDESCRIPTION: This snippet illustrates how to log all items in a collection by joining them into a comma-separated string within square brackets. It requires a careful check of the logging level used.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nint[] arr = new int[] { 1, 3, 5 };\n\n...\n\nthis.logger.LogTrace(\"(-):[{0}]\", string.Join(\",\", arr));\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Line Arguments\nDESCRIPTION: This command navigates to the Stratis.StratisD directory and runs the `dotnet run` command with the `-help` argument. This will display a list of available command line arguments that can be passed to the node when running it.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisD\ndotnet run -help\n```\n\n----------------------------------------\n\nTITLE: Running Stratis Node on TestNet\nDESCRIPTION: This command navigates to the Stratis.StratisD directory and runs the Stratis node on the TestNet network using the .NET Core runtime. The `-testnet` argument specifies that the node should connect to the TestNet network. It assumes that the repository has been cloned.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisD\ndotnet run -testnet\n```\n\n----------------------------------------\n\nTITLE: Running Bitcoin Node on MainNet\nDESCRIPTION: This command navigates to the Stratis.BitcoinD directory and runs the Bitcoin node on the MainNet network using the .NET Core runtime. It assumes that the repository has been cloned and the current working directory is the root of the cloned repository.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.BitcoinD\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Bitcoin Node on TestNet\nDESCRIPTION: This command navigates to the Stratis.BitcoinD directory and runs the Bitcoin node on the TestNet network using the .NET Core runtime. The `-testnet` argument specifies that the node should connect to the TestNet network. It assumes that the repository has been cloned.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.BitcoinD\ndotnet run -testnet\n```\n\n----------------------------------------\n\nTITLE: Running Stratis Node on MainNet\nDESCRIPTION: This command navigates to the Stratis.StratisD directory and runs the Stratis node on the MainNet network using the .NET Core runtime. It assumes that the repository has been cloned and the current working directory is the root of the cloned repository.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisD\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Running Stratis node only on TestNet\nDESCRIPTION: This command runs a Stratis node with DNS functionality on the TestNet network. The `-testnet` flag is used to specify the network. .NET Core runtime is a prerequisite.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisDnsD\ndotnet run -testnet -dnslistenport=5399 -dnshostname=dns.stratisplatform.com -dnsnameserver=ns1.dns.stratisplatform.com -dnsmailbox=admin@stratisplatform.com\n```\n\n----------------------------------------\n\nTITLE: Running Stratis node and full node on MainNet\nDESCRIPTION: This command runs both a Stratis node and a full node with DNS functionality on the MainNet network. It utilizes the `-dnsfullnode` flag along with DNS configuration parameters. The .NET Core runtime is a prerequisite.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisDnsD\ndotnet run -dnsfullnode -dnslistenport=5399 -dnshostname=dns.stratisplatform.com -dnsnameserver=ns1.dns.stratisplatform.com -dnsmailbox=admin@stratisplatform.com\n```\n\n----------------------------------------\n\nTITLE: Running Stratis node and full node on TestNet\nDESCRIPTION: This command runs a Stratis node and a full node with DNS functionality on the TestNet network. It uses both the `-testnet` and `-dnsfullnode` flags. The .NET Core runtime environment is required to execute.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisDnsD\ndotnet run -testnet -dnsfullnode -dnslistenport=5399 -dnshostname=dns.stratisplatform.com -dnsnameserver=ns1.dns.stratisplatform.com -dnsmailbox=admin@stratisplatform.com\n```\n\n----------------------------------------\n\nTITLE: Logging Collection Count (C#)\nDESCRIPTION: This example shows how to log the count of a collection along with other relevant information. It logs the name and count of a dictionary, as well as the name and value of a block hash.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool ReleaseDownloadTaskAssignmentLocked(Dictionary<uint256, DownloadAssignment> peerPendingDownloads, uint256 blockHash)\n{\n    this.logger.LogTrace(\"({0}.{1}:{2},{3}:'{4}')\", nameof(peerPendingDownloads), nameof(peerPendingDownloads.Count), peerPendingDownloads.Count, nameof(blockHash), blockHash);\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Stratis DNS Server\nDESCRIPTION: This command verifies that the Stratis DNS Server is running correctly. It uses the `dig` command to query the DNS server. Alternatively, `nslookup` can be used.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndig +qr -p 53 stratisdns.stratisplatform.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nnslookup stratisdns.stratisplatform.com\n```\n\n----------------------------------------\n\nTITLE: Logging Integer Flags as Hex (C#)\nDESCRIPTION: This code demonstrates how to log integer flags as hexadecimal values.  The '0x{0:x}' format specifier is used to ensure that the integer is displayed in hexadecimal format with the '0x' prefix.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nuint flags = FLAG_1 | FLAG_3;\n\n...\n\nthis.logger.LogTrace(\"(-):0x{0:x}\", flags);\n```\n\n----------------------------------------\n\nTITLE: Running Stratis node only on MainNet\nDESCRIPTION: This command runs a Stratis node with DNS functionality on the MainNet network. It sets the DNS listen port, hostname, nameserver, and mailbox using command-line arguments. The .NET Core runtime is required to execute this command.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd Stratis.StratisDnsD\ndotnet run -dnslistenport=5399 -dnshostname=dns.stratisplatform.com -dnsnameserver=ns1.dns.stratisplatform.com -dnsmailbox=admin@stratisplatform.com\n```\n\n----------------------------------------\n\nTITLE: Cloning StratisBitcoinFullNode repository\nDESCRIPTION: This command clones the StratisBitcoinFullNode repository from GitHub and initializes its submodules. It is the first step in setting up the Stratis DNS Crawler. Git is required to execute this command.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.Dns/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/stratisproject/StratisBitcoinFullNode.git  \ncd StratisBitcoinFullNode\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Logging Method Exit with Context Identifier - C#\nDESCRIPTION: This code snippet demonstrates logging different exit paths with context identifiers. This allows distinguishing between different reasons the method could exit. Context identifiers are put in square brackets after (-).\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/logging-style.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nBlock block = context.BlockResult.Block;\n\nif (!BlockStake.IsProofOfStake(block))\n{\n    this.logger.LogTrace(\"(-)[NOT_POS]\");\n    return;\n}\n\n// Verify hash target and signature of coinstake tx.\nBlockStake prevBlockStake = this.stakeChain.Get(chainTip.HashBlock);\nif (prevBlockStake == null)\n{\n    this.logger.LogTrace(\"(-)[NO_PREV_STAKE]\");\n    ConsensusErrors.PrevStakeNull.Throw();\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Expression Grouping C#\nDESCRIPTION: Illustrates the use of parentheses to group complex boolean expressions in C# code for better clarity and to avoid confusion.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nif ((x.Value > 5) && y && z.Eval() && ((a + b) > c)) // good\nbool q = (x.Value > 5) && y && z.Eval() && ((a + b) > c); // good\nif (x.Value > 5 && y) // parentheses needed to avoid confusion\nbool q = (x.Value > 5); // parentheses unnecessary\n```\n\n----------------------------------------\n\nTITLE: Detailed Parameter Description C#\nDESCRIPTION: This code showcases a detailed parameter description for the Fibonacci sequence calculation, including the index starting point and supported limits.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n/// <param name=\"n\">Index of the element to return. The index of the first element in the sequence is 1. The highest supported index is 47.</param>\n```\n\n----------------------------------------\n\nTITLE: Nested Braces Example C#\nDESCRIPTION: Illustrates the correct formatting for nested curly braces in C# code, ensuring no blank lines precede closing brackets and proper spacing after closing brackets.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nif ()\n{\n    foreach ()\n    {\n      block\n    }      \n}\n```\n\n----------------------------------------\n\nTITLE: Improved Fibonacci Summary C#\nDESCRIPTION: This code demonstrates an improved summary for the Fibonacci sequence calculation. It's more concise and focuses on the core algorithm.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Calculates N-th element of the Fibonacci sequence using iteration method.\n/// </summary>\n```\n\n----------------------------------------\n\nTITLE: Improved Field Comment C#\nDESCRIPTION: This code illustrates an improved comment for a field, providing more context about its purpose within the class. It specifies that it is the name of the activity.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Name of the activity.</summary>\nprivate string Name;\n```\n\n----------------------------------------\n\nTITLE: Detailed Field Comment with UI Context C#\nDESCRIPTION: This code shows a detailed comment for a field, including its context within the UI. The comment indicates that the field \"Name\" is shown to the user in the XyzDialog.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Name of the activity as it is shown to the user in XyzDialog.</summary>\nprivate string Name;\n```\n\n----------------------------------------\n\nTITLE: Fetching Upstream Changes - Git\nDESCRIPTION: This command fetches changes from the upstream repository without merging them into the current branch. This allows you to see what changes have been made in the upstream repository before incorporating them into your local branch.  The `upstream` alias must be configured for the original repository.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/forking.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n# Fetch the changes from upstream repo\ngit fetch upstream\n\n# View all branches\ngit branch -va\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages\nDESCRIPTION: This snippet illustrates how commit messages should be formatted when contributing to the Blockcore project. The commit message should start with a concise summary (50 characters or less), followed by a more detailed explanation. If the commit fixes a specific issue, the issue number should be mentioned at the end.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/contributing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSummarize change in 50 characters or less\n\nProvide more detail after the first line. Leave one blank line below the\nsummary and wrap all lines at 72 characters or less.\n\nIf the change fixes an issue, leave another blank line after the final\nparagraph and indicate which issue is fixed in the specific format\nbelow.\n\nFix #42\n```\n\n----------------------------------------\n\nTITLE: Simple Property Example C#\nDESCRIPTION: Demonstrates single-line syntax for simple property setters and getters in C#.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic int X { get; set; }\npublic int X { get; private set; }\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: Shows how to use the Open Iconic SVG sprite for displaying icons. It uses the `<svg>` and `<use>` elements to reference a specific icon from the sprite using `xlink:href`.  A general class is added to the `svg` tag for styling and a unique class name for each icon in the `use` tag.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Allman Style Braces Example C#\nDESCRIPTION: Demonstrates the use of Allman-style braces in C# code, where each brace begins on a new line.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/coding-style.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nif ()\n{\n    block\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Field Comment with Logging Context C#\nDESCRIPTION: This code shows a detailed comment for a field, including its purpose and context for logging.  The comment indicates that the field \"Name\" is used for logging purposes only.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Name of the activity. This is used for logging purposes only.</summary>\nprivate string Name;\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Calculation with Insufficient Comments C#\nDESCRIPTION: This code demonstrates a Fibonacci sequence calculation with poorly written comments that violate several commenting rules. The inline comment is redundant, and the summary doesn't add significant value.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n/// Calculates the number which is at N-th position in the sequence that starts \n/// with 1, 1 and the next element is always the sum of two previous elements.\n/// </summary>\n/// <param name=\"n\">N.</param>\n/// <returns>N-th element the Fibonacci sequence.</returns>\npublic static int Fib(int n)\n{\n    int previous = -1;\n    int current = 1;\n    int index = 1;\n    int element = 0;\n\n    while (index++ <= n)\n    {\n        // Calculates previous element + current element.\n        element = previous + current;\n        previous = current;\n        current = element;\n    }\n    return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Open Iconic SVG Sprite with CSS\nDESCRIPTION: Illustrates how to style Open Iconic SVG sprite icons using CSS. It shows how to set the width and height of the `<svg>` element and how to change the fill color of the icon using the `fill` property on the `<use>` tag.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Master - Git\nDESCRIPTION: These commands checkout the master branch and then merge the upstream master branch into the local master branch. This will bring all the changes from the upstream master branch into your local master branch.  It assumes `master` is the primary branch and `upstream` alias is configured.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/forking.md#_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout master\ngit merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVG\nDESCRIPTION: Demonstrates how to embed an Open Iconic SVG image directly into HTML. The `src` attribute points to the SVG file and the `alt` attribute provides alternative text for accessibility.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: Shows how to use Open Iconic icons with Bootstrap.  The code uses a `<span>` element with the `oi` and `oi-icon-name` classes to display an icon. The `title` attribute provides a tooltip, and `aria-hidden` hides the icon from screen readers.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Standalone\nDESCRIPTION: Shows how to use Open Iconic icons without Bootstrap or Foundation. The code uses a `<span>` element with the `oi` class and the `data-glyph` attribute to specify the icon name. The `title` attribute provides a tooltip, and `aria-hidden` hides the icon from screen readers.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation CSS\nDESCRIPTION: Demonstrates how to include the Open Iconic Foundation CSS stylesheet in an HTML document. This enables the use of Open Iconic icons with Foundation's styling and conventions. The stylesheet is located in the `font/css` directory.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap CSS\nDESCRIPTION: Demonstrates how to include the Open Iconic Bootstrap CSS stylesheet in an HTML document. This allows you to use Open Iconic icons with Bootstrap's styling and conventions.  The stylesheet is located in the `font/css` directory.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: Shows how to use Open Iconic icons with Foundation.  The code uses a `<span>` element with the `fi-icon-name` class to display an icon. The `title` attribute provides a tooltip, and `aria-hidden` hides the icon from screen readers.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic CSS\nDESCRIPTION: Demonstrates how to include the default Open Iconic CSS stylesheet in an HTML document. This allows the use of Open Iconic icons without any specific framework. The stylesheet is located in the `font/css` directory.\nSOURCE: https://github.com/block-core/blockcore/blob/master/src/Features/Blockcore.Features.NodeHost/UI/wwwroot/css/open-iconic/README.md#_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Cloning StratisBitcoinFullNode Repository\nDESCRIPTION: This command clones the StratisBitcoinFullNode repository from GitHub. It's the first step to get the source code and necessary dependencies for building and running the Stratis or Bitcoin full node. You need Git installed to run this command.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/stratisproject/StratisBitcoinFullNode.git  \ncd StratisBitcoinFullNode/src\n```\n\n----------------------------------------\n\nTITLE: Minimalistic Field Comment C#\nDESCRIPTION: This code shows a minimalistic comment for a field, which is considered insufficient. It violates the ADD-VALUE rule because it provides little to no additional information.\nSOURCE: https://github.com/block-core/blockcore/blob/master/Documentation/commenting-policy.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>Name.</summary>\nprivate string Name;\n```"
  }
]