[
  {
    "owner": "getstream",
    "repo": "stream-chat-react",
    "content": "TITLE: Using Channel with Overrides for Custom UI - JSX\nDESCRIPTION: This example demonstrates how to override the default `Message` component with a custom `CustomMessageUI` component within a Stream Chat application. It utilizes the `WithComponents` component to achieve this without altering the underlying logic.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/README.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<Channel>\n  <Window>\n    <ChannelHeader />\n    <WithComponents overrides={{ Message: CustomMessageUI }}>\n      <MessageList />\n    </WithComponents>\n    <MessageInput />\n  </Window>\n  <Thread />\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Customizing Styles with CSS Layers\nDESCRIPTION: This CSS example shows how to override the default Stream Chat styles using CSS layers. It imports the base Stream Chat CSS and then uses a `stream-overrides` layer to ensure custom styles take precedence.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/README.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@layer stream, stream-overrides;\n\n@import 'stream-chat-react/css/v2/index.css' layer(stream);\n/* or */\n@import 'stream-chat-react/dist/css/v2/index.css' layer(stream);\n\n@layer stream-overrides {\n  /* your overrides */\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a UI Component with JSDoc in Typescript/JSX\nDESCRIPTION: This code snippet illustrates how to deprecate a UI component in a TypeScript/JSX project using JSDoc.  It includes a @deprecated tag, a reason for deprecation (referencing the alternative component <XY>), a link to documentation, and a brief description of the deprecated component. This helps developers understand the deprecation and migrate to the suggested alternative.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/developers/DEPRECATIONS.md#_snippet_0\n\nLANGUAGE: typescript jsx\nCODE:\n```\n/**\n * @deprecated - This UI component will be removed in the next major release. This component is deprecated because <XY>.\n * For more information see [docs link](https://....)\n * \n * FixedHeightMessage - This component renders a single message.\n * It uses fixed height elements to make sure it works well in VirtualizedMessageList\n */\n```\n\n----------------------------------------\n\nTITLE: Adding multipleUploads, acceptedFiles, maxNumberOfFiles props - React\nDESCRIPTION: This code snippet shows the addition of the `multipleUploads`, `acceptedFiles`, and `maxNumberOfFiles` props to the `MessageInput` and `Channel` components. These props allow for configuration of file upload behavior, such as enabling multiple uploads, specifying accepted file types, and limiting the maximum number of files.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: React\nCODE:\n```\n- `MessageInput` and `Channel` now accept the following props\n  - `multipleUploads={false}`\n  - `acceptedFiles={['image/*']}`\n  - `maxNumberOfFiles={1}`\n```\n\n----------------------------------------\n\nTITLE: Adding onMentionsHover, onMentionsClick props - React\nDESCRIPTION: This snippet adds support for @mentions by introducing `onMentionsHover` and `onMentionsClick` props to the `Channel` component. These props allow developers to define custom handlers for when a user hovers over or clicks on a @mention within the channel.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: React\nCODE:\n```\n- Support for @mentions for @mention interactions `Channel` now accepts the following props\n  - `onMentionsHover={(event, user) => console.log(event, user)}`\n  - `onMentionsClick={(event, user) => console.log(event, user)}`\n```\n\n----------------------------------------\n\nTITLE: Adding messageActions prop to MessageList - React\nDESCRIPTION: This snippet describes the addition of the `messageActions` prop to the `MessageList` component. This allows developers to customize the actions available for messages within the list, such as flagging or muting.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: React\nCODE:\n```\n- Adding prop `messageActions` to MessageList\n```\n\n----------------------------------------\n\nTITLE: Adding EmptyStateIndicator prop - React\nDESCRIPTION: This code snippet adds the `EmptyStateIndicator` prop to the `ChannelList` and `MessageList` components. It allows developers to customize the display when these components have no data to render, providing a better user experience.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: React\nCODE:\n```\n- Added `EmptyStateIndicator` prop to [ChannelList](https://getstream.github.io/stream-chat-react/#!/ChannelList) and [MessageList](https://getstream.github.io/stream-chat-react/#!/MessageList)\n```\n\n----------------------------------------\n\nTITLE: VirtualizedMessageList with Grouping in React\nDESCRIPTION: This snippet demonstrates how to enable message grouping within the VirtualizedMessageList component in stream-chat-react. The `shouldGroupByUser` prop is used to group messages from the same user together. It relies on React and stream-chat-react library.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<VirtualizedMessageList shouldGroupByUser />\n```\n\n----------------------------------------\n\nTITLE: Adding onChannelUpdated prop function - React\nDESCRIPTION: This snippet documents the addition of the `onChannelUpdated` prop function, which serves as a callback for the `channel.updated` event. This allows developers to execute custom logic when a channel is updated.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: React\nCODE:\n```\n- Adding prop function `onChannelUpdated` as callback for event `channel.updated`\n```\n\n----------------------------------------\n\nTITLE: Adding watchers prop to ChannelList - React\nDESCRIPTION: This snippet introduces the `watchers` prop to the `ChannelList` component.  It's used to customize the watchers pagination query when setting the active channel. Using this prop triggers an additional query when a channel is selected from the `ChannelList`.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: React\nCODE:\n```\n- Added `watchers` prop to [ChannelList](https://getstream.github.io/stream-chat-react/#!/ChannelList) to specify [watchers pagination query](https://getstream.io/chat/docs/#channel_pagination) on `setActiveChannel`, including this makes one extra query on selecting a channel from the ChannelList\n```\n\n----------------------------------------\n\nTITLE: Updating MessageSimple prop: openThread to handleOpenThread - React\nDESCRIPTION: This code snippet represents a change in the prop name for the MessageSimple component from openThread to handleOpenThread. This change likely affects how a thread is opened or handled within the component.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: React\nCODE:\n```\n- Changing prop name for MessageSimple from openThread to handleOpenThread.\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat React with NPM\nDESCRIPTION: Installs the stream-chat and stream-chat-react packages using npm. These packages are required for building chat applications with Stream Chat and React.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install stream-chat stream-chat-react\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat React with Yarn\nDESCRIPTION: Installs the stream-chat and stream-chat-react packages using yarn. These packages are required for building chat applications with Stream Chat and React.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add stream-chat stream-chat-react\n```\n\n----------------------------------------\n\nTITLE: Branching Model Visualization (Shell)\nDESCRIPTION: This snippet visualizes the branching model used in the stream-chat-react project. It shows that feature branches (`branch_solution_x`, `branch_solution_y`, etc.) are created from the `master` branch and that NPM releases are based on the `master` branch.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/developers/BRANCHES.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNPM <--- master <--- branch_solution_x\n                <--- branch_solution_y\n                <--- branch_solution_x\n                ...\n```\n\n----------------------------------------\n\nTITLE: Commit Message Header Structure\nDESCRIPTION: This snippet shows the basic structure of a commit message header, including the type and scope. It is used as a guideline for writing commit messages in the project.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/developers/COMMIT.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<type>(<scope>): <short summary>\n```\n\n----------------------------------------\n\nTITLE: Adding SendButton prop to MessageInput - React\nDESCRIPTION: This release note indicates the addition of a SendButton prop to the MessageInput component. This prop is specifically designed to be shown on mobile devices to ensure form submission is possible without a return button.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: React\nCODE:\n```\n- Added SendButton prop to MessageInput. This only shows on mobile to make sure you're able to submit the form without having a return button.\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt configuration disallows all web crawlers from accessing any part of the website. The User-agent: * line applies to all crawlers, and the Disallow: / line blocks access to the entire site.\nSOURCE: https://github.com/getstream/stream-chat-react/blob/master/examples/capacitor/public/robots.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUser-agent: *\nDisallow: /\n```"
  }
]