[
  {
    "owner": "rhettbull",
    "repo": "osxphotos",
    "content": "TITLE: Exporting All Photos with OSXPhotos – Shell\nDESCRIPTION: Demonstrates the basic command to export all media assets from the Photos Library to a specified directory using osxphotos. No additional dependencies are needed except installation of osxphotos via pip. The required parameter is an export directory path; all photo and video assets will be copied into this location. The command is cross-platform on environments where osxphotos is supported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with Filter Parameters Using osxphotos (Python)\nDESCRIPTION: Demonstrates the use of the PhotosDB.photos() method from the osxphotos Python library to retrieve a list of PhotoInfo objects, optionally filtered by keywords, uuid, persons, albums, and date range. The function accepts keyword arguments to specify filtering criteria; combining multiple filters results in Photos matching all criteria (logical AND). Requires a valid PhotosDB object. Returns a list of matching PhotoInfo objects or all photos if no filters are provided.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos([keywords=['keyword',]], [uuid=['uuid',]], [persons=['person',]], [albums=['album',,]],[from_date=datetime.datetime],[to_date=datetime.datetime])\n```\n\nLANGUAGE: python\nCODE:\n```\nphotos = photosdb.photos(\n    keywords = [],\n    uuid = [],\n    persons = [],\n    albums = [],\n    images = bool,\n    movies = bool,\n    from_date = datetime.datetime,\n    to_date = datetime.datetime,\n    intrash = bool,\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Previous Exports using osxphotos\nDESCRIPTION: This command demonstrates how to update a previous export using the `--update` option. This option relies on a database file (`.osxphotos_export.db`) in the export folder to determine which files need to be exported based on changes since the last export.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update\n```\n\n----------------------------------------\n\nTITLE: Export Photos from Specific Library\nDESCRIPTION: Exports photos from a specific Photos library, specified by the library's path. This is useful when working with multiple Photos libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --library ~/Pictures/MyAlternateLibrary.photoslibrary\n```\n\n----------------------------------------\n\nTITLE: Opening a Specific Photos Library with Library Path\nDESCRIPTION: Opens a specific Photos library by providing the path to the .photoslibrary folder. PhotosDB will automatically locate the database file within this folder.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Test.photoslibrary\")\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Organized by Date Structure\nDESCRIPTION: Command to export photos organized in a directory structure by year, month, and day (e.g., 2021/04/21).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --export-by-date\n```\n\n----------------------------------------\n\nTITLE: Installing OSXPhotos using pipx and homebrew on macOS\nDESCRIPTION: Installation instructions for OSXPhotos using pipx package manager with homebrew on macOS. These commands will install homebrew, pipx, and then the osxphotos package, making the command-line utility available.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/overview.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install pipx\npipx install osxphotos\n```\n\n----------------------------------------\n\nTITLE: Comprehensive osxphotos Export Workflow (Shell)\nDESCRIPTION: A real-world example showcasing a complex `osxphotos export` command that integrates multiple advanced features. This command exports only movies filtered by a specific keyword, preserves file modification dates, writes keywords and persons to Finder tags/keywords, sets Finder comments based on title and description, merges existing ExifTool metadata, and strips whitespace from template fields.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_47\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/folder for exported videos/ --keyword Quik --only-movies --library /path to my.photoslibrary --touch-file --finder-tag-keywords --person-keyword --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\" --exiftool-merge-keywords --exiftool-merge-persons --exiftool --strip\n```\n\n----------------------------------------\n\nTITLE: Basic Template Field Substitution\nDESCRIPTION: Demonstrates the simplest form of a template statement, substituting a single template field with the corresponding photo metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_0\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n\"{template_field}\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n\"{title}\"\n```\n\nLANGUAGE: Text\nCODE:\n```\nThe title of the photo is {title}\nresolves to \"The title of the photo is My Photo Title\"\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Conditional Filename (Favorite)\nDESCRIPTION: Exports photos with a conditional filename. If the photo is a favorite, a '#' is appended to the original filename. Otherwise, no suffix is added.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --filename \"{original_name}{favorite?#,}\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing iCloud Photos During Export - osxphotos - Shell\nDESCRIPTION: Uses the --download-missing option to instruct osxphotos to attempt downloading original files from iCloud for any photos marked as missing in the local Photos library. This is useful when \"Optimize Mac Storage\" is enabled or originals haven't synced. Requires the osxphotos command-line tool installed and potentially AppleScript permissions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing\n```\n\n----------------------------------------\n\nTITLE: Testing Export Options without Writing Files using --dry-run in osxphotos CLI\nDESCRIPTION: This snippet simulates an export by printing file actions without copying any files, useful for verifying configuration or templates. Adding --verbose provides detailed file-level output. Dependencies: osxphotos CLI. Inputs: Photos library and path. Outputs: Terminal printout showing intended actions. Limitation: No data is written or modified.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_30\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: PhotosDB Usage Example\nDESCRIPTION: Demonstrates how to initialize PhotosDB, retrieve all photos, filter shared and hidden photos, and filter movies.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_10\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> photos = photosdb.photos()\n>>> len(photos)\n25002\n>>> shared = [p for p in photos if p.shared]\n>>> len(shared)\n5609\n>>> not_shared = [p for p in photos if not p.shared]\n>>> len(not_shared)\n19393\n>>> hidden = [p for p in photos if p.hidden]\n>>> len(hidden)\n7\n>>> movies = photosdb.photos(movies=True, images=False)\n>>> len(movies)\n625\n>>> shared_movies = [m for m in movies if m.shared]\n>>> len(shared_movies)\n151\n>>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Shell Quote Template in osxphotos\nDESCRIPTION: Quotes rendered template values for safe usage in shell commands, applying quotes only when needed. Useful for handling filenames with spaces or special characters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_105\n\nLANGUAGE: plain\nCODE:\n```\n{shell_quote,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Custom Filename Template (Title)\nDESCRIPTION: Exports photos from the specified path using the photo's title as the filename. If a title is not specified, the original filename will be used as a default.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title,{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Detailed Photos Query with All Filter Options\nDESCRIPTION: Shows all possible parameters for the photos() method. Filters can include keywords, UUIDs, persons, albums, media types, date ranges, and trash status. Multiple filters are combined with AND logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nphotos = photosdb.photos(\n    keywords = [],\n    uuid = [],\n    persons = [],\n    albums = [],\n    images = bool,\n    movies = bool,\n    from_date = datetime.datetime,\n    to_date = datetime.datetime,\n    intrash = bool,\n)\n```\n\n----------------------------------------\n\nTITLE: User Workflow: Exporting Videos with Metadata Preservation using osxphotos\nDESCRIPTION: Describes a user's detailed workflow for exporting videos from a Photos library using `osxphotos`. The process involves selecting videos tagged with 'Quik', moving them to a separate folder, preserving/merging keywords and person data into metadata and Finder tags (for Final Cut Pro compatibility), setting Finder comments from titles/descriptions, maintaining original creation dates, and removing extra whitespace from templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_52\n\nLANGUAGE: text\nCODE:\n```\nI usually import my iPhone’s photo roll on a more or less regular basis, and it\nincludes photos and videos. As a result, the size ot my Photos library may rise\nvery quickly. Nevertheless, I will tag and geolocate everything as Photos has a\nquite good keyword management system.\n\nAfter a while, I want to take most of the videos out of the library and move them\nto a separate \"videos\" folder on a different folder / volume. As I might want to\nuse them in Final Cut Pro, and since Final Cut is able to import Finder tags into\nits internal library tagging system, I will use osxphotos to do just this.\n\nPicking the videos can be left to Photos, using a smart folder for instance. Then\njust add a keyword to all videos to be processed. Here I chose \"Quik\" as I wanted\nto spot all videos created on my iPhone using the Quik application (now part of\nGoPro).\n\nI want to retrieve my keywords only and make sure they populate the Finder tags, as\nwell as export all the persons identified in the videos by Photos.  I also want to\nmerge any keywords or persons already in the video metadata with the exported\nmetadata.\n\nKeeping Photo’s edited titles and descriptions and putting both in the Finder\ncomments field in a readable manner is also enabled.\n\nAnd I want to keep the file’s creation date (using `--touch-file`).\n\nFinally, use `--strip` to remove any leading or trailing whitespace from processed\ntemplate fields.\n```\n\n----------------------------------------\n\nTITLE: Export with Title-Based Filename - Bash\nDESCRIPTION: This command exports photos, using the photo's title as the filename. It uses the `--filename` option with the `{title}` template.  It assumes that osxphotos is installed and correctly configured.  The output will be photos exported with filenames derived from their titles.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Custom Directory Structure by Year and Month Using osxphotos in Shell\nDESCRIPTION: This command uses the osxphotos template system to specify that exported photos will be organized into folders by created year and full month name (based on locale) using the --directory option. The template string references metadata fields from each photo. Ensure osxphotos is installed. The user provides a shell path as the export root and sets a custom directory hierarchy. Useful for more granular organization by time period.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{created.month}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Export While Preserving Edited Files\nDESCRIPTION: Command for updating a previous export while ignoring file signatures. This allows for edited exported files to remain untouched, preventing osxphotos from overwriting them during updates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update --ignore-signature\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Country with Default Value Using osxphotos in Shell\nDESCRIPTION: This snippet enhances the previous command by providing a default value ('No-Country') for photos lacking country metadata in the {place.name.country} template field. When exporting, if an image has no associated country, the output folder for that file will be named 'No-Country'. The --directory option and default handling make exports resilient to missing metadata. The command requires osxphotos and Photos metadata access.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country,No-Country}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cleanup Exclusion Rules (.gitignore Format)\nDESCRIPTION: Describes the format used in the .osxphotos_keep file or with the --keep option to specify files or directories that should not be deleted during the cleanup process. Rules follow the .gitignore pattern, including absolute paths and comments.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_63\n\nLANGUAGE: .gitignore\nCODE:\n```\n/*.txt\"\n```\n\nLANGUAGE: .gitignore\nCODE:\n```\n**/*.txt\n```\n\nLANGUAGE: .gitignore\nCODE:\n```\n# This is a comment\n```\n\n----------------------------------------\n\nTITLE: Building Command-Line Query Tools with osxphotos: Basic CLI Example (Python)\nDESCRIPTION: This snippet shows how to create a simple command-line application using the osxphotos CLI helpers, specifically the query_command decorator. The function receives a filtered list of PhotoInfo objects based on user-specified command-line options and prints the filename and date for each photo. It requires dependencies on osxphotos and the osxphotos CLI subpackage, and supports options such as --verbose via the decorator. The CLI can be run directly with osxphotos run or python, provided the package is installed, and requires no explicit parsing of arguments in user code.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @query_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add all the query options available in `osxphotos query` as command line options\nas well as the following options:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will perform the query and pass the list of filtered PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\nFor example, to run the command on only selected photos:\n\n    osxphotos run cli_example_1.py --selected\n\nTo run the command on all photos with the keyword \"foo\":\n\n    osxphotos run cli_example_1.py --keyword foo\n\nFor more advanced example, see `cli_example_2.py`\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import query_command, verbose\n\n\n@query_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Date to Directory (Bash)\nDESCRIPTION: This command exports all photos from the default or last opened Photos library to the specified destination directory (`/path/to/export`). The `--export-by-date` option organizes the exported files into a year/month/day folder structure within the destination.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --export-by-date\n```\n\n----------------------------------------\n\nTITLE: Exporting Filename with Default Fallback – Shell\nDESCRIPTION: Uses the template system's default value feature to fall back to the original file name when a photo lacks a title. The template {title,{original_name}} will cause the export to use {title} if present, or {original_name} otherwise. All other details such as extension handling are managed by osxphotos. This approach ensures no exported file has a blank name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title,{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Shell Command (Command Line)\nDESCRIPTION: Executes a shell command after specific export events for a file identified by CATEGORY. The command can use osxphotos template strings for dynamic values like file paths. This option can be repeated to run multiple commands for different categories.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_68\n\nLANGUAGE: Shell\nCODE:\n```\n--post-command CATEGORY COMMAND\n```\n\nLANGUAGE: Shell\nCODE:\n```\n--post-command exported \"echo {filepath|shell_quote} >> {export_dir}/exported.txt\"\n```\n\n----------------------------------------\n\nTITLE: Performing Incremental Photo Library Exports with --update in osxphotos CLI\nDESCRIPTION: This snippet enables maintenance of an up-to-date backup by exporting only photos that are new or changed since the last export, using the --update flag. osxphotos tracks export history in a hidden database in the target directory. Dependencies: osxphotos CLI. Inputs: Photos library, export directory. Outputs: Only newly added or updated images are exported; previous exports preserved. Limitation: If not using --update, all photos are re-exported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_27\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --update\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Command for Photos Using osxphotos CLI in Python\nDESCRIPTION: Defines a sample selection command function using the @selection_command decorator designed to operate on photos currently selected in the Photos app. Prints filename and date for each selected photo. Supports verbose output with multiple verbosity levels and is designed to be used as a standalone CLI tool. The function receives a list of PhotoInfo objects and keyword arguments, enabling further extension. Dependencies include osxphotos, selection_command decorator, and standard Python imports. Intended to be run as a CLI with no manual argument passing needed thanks to decorator management. Inputs: selected photos; Outputs: prints to stdout and optionally verbose logs.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @selection_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add the following options to your command:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will get the selected photos and pass the list of PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import selection_command, verbose\n\n\n@selection_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample command for osxphotos. Prints out the filename and date of each photo\n    currently selected in Photos.app.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n\n----------------------------------------\n\nTITLE: Formatting Template Values with {format}\nDESCRIPTION: Details the {format:TYPE:FORMAT,TEMPLATE} syntax in osxphotos templates. This allows converting a TEMPLATE value to a specific TYPE ('int', 'float', or 'str') and then applying Python string formatting codes specified by FORMAT. The example shows formatting focal length from EXIF data to one decimal place.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_13\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{format:TYPE:FORMAT,TEMPLATE}\n```\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{format:float:.1f,{exiftool:EXIF:FocalLength}}\n```\n\n----------------------------------------\n\nTITLE: Performing Concurrent Photo Exports using @query_command (Python)\nDESCRIPTION: Provides an example of concurrently exporting photos using `concurrent.futures.ThreadPoolExecutor` within a function decorated with `@query_command`. This command takes standard query options (handled by the decorator) and custom options like `--workers` and `export_dir` defined using `click`. It demonstrates submitting export tasks for each photo to the thread pool. Note: This approach requires Python 3.11+ due to limitations in the thread safety of Python's built-in sqlite3 module.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example for concurrent export of photos using osxphotos.PhotoExporter.export()\n\nNote: concurrent export can only be used on Python 3.11 and later due to the way\npython's sqlite3 module is implemented. See https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety\nfor more information.\n\"\"\"\n\nimport concurrent.futures\nimport os\nimport time\n\nimport click\n\nimport osxphotos\nfrom osxphotos.cli import echo, query_command, verbose\n\n\n@query_command()\n@click.option(\n    \"--workers\",\n    metavar=\"WORKERS\",\n    help=\"Maximum number of worker threads to use for export. \"\n    \"If not specified, it will default to the number of processors on the machine, multiplied by 5.\",\n    type=int,\n)\n@click.argument(\n    \"export_dir\",\n    type=click.Path(exists=True, file_okay=False, dir_okay=True, writable=True),\n)\ndef export(workers, export_dir, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Export photos\"\"\"\n    workers = workers or os.cpu_count() * 5\n    echo(f\"Exporting {len(photos)} photos to {export_dir} using {workers} workers\")\n    start_t = time.perf_counter()\n    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:\n        futures = [\n            executor.submit(p.export, export_dir, f\"{p.uuid}_{p.original_filename}\")\n            for p in photos\n        ]\n        exported = []\n        for future in concurrent.futures.as_completed(futures):\n            exported.extend(future.result())\n    end_t = time.perf_counter()\n    echo(\n        f\"Exported {len(exported)} photos to {export_dir} in {end_t-start_t:.4f} seconds\"\n    )\n\n\nif __name__ == \"__main__\":\n    export()\n```\n\n----------------------------------------\n\nTITLE: Retrying Exports on Unreliable Connections (Shell)\nDESCRIPTION: This command demonstrates how to use the `--retry` option with `osxphotos export` to automatically retry exporting a photo up to a specified number of times (3 in this example) if an error occurs. This is useful when exporting to potentially unstable network locations like a NAS.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --retry 3\n```\n\n----------------------------------------\n\nTITLE: Exporting Preserving Folder/Album Structure – Shell\nDESCRIPTION: Shows how to use the {folder_album} template field for the export directory structure, recreating the folder and album arrangement from the Photos Library. Especially effective to mirror organizational structures from Photos during export, supporting multi-album inclusion and default handling for album-less assets.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Hierarchical Keywords\nDESCRIPTION: This command uses `--exiftool` to add custom, hierarchical keywords to the exported photos. This is achieved by employing the `--keyword-template` option with `{folder_album(>)}`, resulting in keywords in the format 'Folder1>Folder2>Album' to create hierarchical keywords for programs like Lightroom Classic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{folder_album(>)}\"\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Python Function (Command Line)\nDESCRIPTION: Executes a user-defined Python function on exported files. Specify the function using 'filename.py::function' format, which can be a local file or a URL. The function receives information about the photo and associated exported files.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_70\n\nLANGUAGE: Shell\nCODE:\n```\n--post-function filename.py::function\n```\n\nLANGUAGE: Shell\nCODE:\n```\n--post-function 'https://path/to/module.py::function'\n```\n\n----------------------------------------\n\nTITLE: Exporting osxphotos Command Usage in Shell\nDESCRIPTION: Shell commands demonstrating recommended usage of the osxphotos export feature to maximize metadata preservation by including sidecar XMP files and AAE files during export. These commands serve as a best practice example for exporting a Photos library to be later re-imported with metadata intact.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar xmp --export-aae\n```\n\n----------------------------------------\n\nTITLE: Building a Command Line Tool with query_command Decorator - osxphotos CLI - Python\nDESCRIPTION: This code snippet illustrates how to create a CLI tool using osxphotos' query_command decorator in Python. The function is decorated so it becomes a Click-powered CLI available via command line and supports all osxphotos query options as flags. It uses verbose logging and prints out each photo's filename and date. Must have osxphotos and Click library installed. The function receives a filtered list of PhotoInfo objects and additional command line parameters. Expected input is any Photos library visible to osxphotos; outputs are printed to stdout and, optionally, verbose text. Should be run as a standalone script with or without the osxphotos runner. This approach facilitates extensible scripting and can be integrated into the larger osxphotos framework.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @query_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add all the query options available in `osxphotos query` as command line options\nas well as the following options:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will perform the query and pass the list of filtered PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\nFor example, to run the command on only selected photos:\n\n    osxphotos run cli_example_1.py --selected\n\nTo run the command on all photos with the keyword \"foo\":\n\n    osxphotos run cli_example_1.py --keyword foo\n\nFor more advanced example, see `cli_example_2.py`\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import query_command, verbose\n\n\n@query_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n\n----------------------------------------\n\nTITLE: Exporting Only Photos Added Since Last Update Using --only-new with osxphotos CLI\nDESCRIPTION: This command exports only photos added since the last export, ignoring missing files, by combining --update with --only-new. Useful for workflows where exported photos are moved or removed after export. Dependencies: osxphotos CLI. Inputs: Existing backup directory and photo library. Outputs: Only new photos (not previously exported) are exported. Limitation: Does not re-export modified previous photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_28\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --update --only-new\n```\n\n----------------------------------------\n\nTITLE: Interacting with EXIF Metadata Using ExifTool - Python\nDESCRIPTION: This Python snippet demonstrates importing the ExifTool class from the osxphotos.exiftool module, creating an ExifTool instance for a photo, reading EXIF metadata as a dictionary, retrieving a specific EXIF tag, updating a metadata value with setvalue(), and adding multiple keywords to a list-type tag using addvalues(). Required dependencies include the osxphotos library and a local or system-installed exiftool binary. The main input is the photo file path. Outputs are metadata dictionaries or Boolean status indicators. The snippet assumes macOS and appropriate permissions to modify files. Tags must be specified using the GROUP:TAG notation. Limitations include potential slow performance on very large files unless large_file_support is enabled.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.exiftool import ExifTool\nexiftool = ExifTool(\"/Users/rhet/Downloads/test.jpeg\")\nexifdict = exiftool.asdict()\nexifdict[\"EXIF:Make\"]\n# Output: 'Canon'\nexiftool.setvalue(\"IPTC:Keywords\",\"Keyword1\")\n# Output: True\nexiftool.asdict()[\"IPTC:Keywords\"]\n# Output: 'Keyword1'\nexiftool.addvalues(\"IPTC:Keywords\",\"Keyword2\",\"Keyword3\")\n# Output: True\nexiftool.asdict()[\"IPTC:Keywords\"]\n# Output: ['Keyword1', 'Keyword2', 'Keyword3']\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Export Example - osxphotos CLI\nDESCRIPTION: Presents a detailed example command from a user demonstrating how to export videos based on a specific keyword, include people and keywords in Finder tags, add title and description to Finder comments using a template, merge metadata with exiftool, preserve file creation date, and strip whitespace.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_49\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/folder for exported videos/ --keyword Quik --only-movies --library /path to my.photoslibrary --touch-file --finder-tag-keywords --person-keyword --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\" --exiftool-merge-keywords --exiftool-merge-persons --exiftool --strip\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Organized by Country Using osxphotos in Shell\nDESCRIPTION: This code snippet exports photos into directories grouped by year and detected country name from metadata, utilizing the --directory and template system with the {place.name.country} field. The Photos library must have place information assigned to images for country grouping to take effect. If the country is missing, the folder name will be left as an underscore unless a default value is supplied. Dependencies include osxphotos and the underlying Photos metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Folder and Album Structure Using osxphotos in Shell\nDESCRIPTION: This command exports photos into directories that replicate the original organization within Photos, preserving folder and album grouping using the {folder_album} template field. Photos in multiple albums may appear in multiple directories. If a photo belongs to no albums, the output directory defaults to an underscore. Requires an organized Photos library and the osxphotos installation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using ExifTool with osxphotos\nDESCRIPTION: This snippet demonstrates how to initialize an ExifTool instance, read EXIF data, set a value, add multiple values to a tag, and then retrieve the updated EXIF data. It requires the osxphotos.exiftool module to be installed and accessible.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_132\n\nLANGUAGE: python\nCODE:\n```\n>>> from osxphotos.exiftool import ExifTool\n>>> exiftool = ExifTool(\"/Users/rhet/Downloads/test.jpeg\")\n>>> exifdict = exiftool.asdict()\n>>> exifdict[\"EXIF:Make\"]\n'Canon'\n>>> exiftool.setvalue(\"IPTC:Keywords\",\"Keyword1\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n'Keyword1'\n>>> exiftool.addvalues(\"IPTC:Keywords\",\"Keyword2\",\"Keyword3\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n['Keyword1', 'Keyword2', 'Keyword3']\n```\n\n----------------------------------------\n\nTITLE: Rendering Template Substitutions with osxphotos in Python\nDESCRIPTION: Provides functionality to render and substitute templates in photo metadata using the photo.render_template() method. Supports evaluation of placeholder templates such as {created.year} or {album}, substituting them with actual photo metadata values. Returns a tuple where the first element is a list of fully rendered strings and the second is a list of unmatched template keys, enabling error detection in template substitution.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nphoto.render_template(\"{created.year}/{foo}\")  # returns ([], [\"foo\"]) for unmatched template keys\n```\n\n----------------------------------------\n\nTITLE: Comparing Photo Libraries - compare_photos_libraries\nDESCRIPTION: This code demonstrates the usage of the `compare_photos_libraries` function to compare two Photos libraries. It requires two `PhotosDB` objects as input, representing the libraries to compare. It also accepts optional `verbose`, `signature_function`, and `diff_function` parameters for customizing the comparison.  The function returns a `PhotosDBDiff` object, containing the differences between the libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.compare_libraries import compare_photos_libraries, PhotosDBDiff\n```\n\nLANGUAGE: python\nCODE:\n```\ndef compare_photos_libraries(\n    library_a: PhotosDB,\n    library_b: PhotosDB,\n    verbose: Callable[[Any], bool] | None = None,\n    signature_function: Callable[[PhotoInfo], Any] | None = None,\n    diff_function: Callable[[PhotoInfo, PhotoInfo], Any] | None = None,\n) -> PhotosDBDiff:\n    \"\"\"Compare two Photos libraries and return a PhotosDBDiff object\n\n    Args:\n        library_a: PhotosDB object for first library\n        library_b: PhotosDB object for second library\n        verbose: function to print verbose output, defaults to None\n        signature_function: function to compute signature for a PhotoInfo object, defaults to None\n        diff_function: function to compare two PhotoInfo objects, defaults to None\n\n    Returns: PhotosDBDiff object\n\n    Note: signature_function should take a PhotoInfo object as input and return a unique\n        signature for the photo; if signature_function is None, the default signature\n        function will be used which computes a signature based on the photo's fingerprint\n        diff_function should take two PhotoInfo objects as input and return a truthy value\n        if the objects are different or a falsy value if they are the same; if diff_function\n        is None, the default diff function will be used which compares the dictionary\n        representation of the PhotoInfo objects.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Exporting with Folder/Album Based Directory - Bash\nDESCRIPTION: This command exports photos and preserves folder/album structure by utilizing the `{folder_album}` template. The command requires osxphotos and correctly configured photos in albums/folders. The exported files will be placed in directories named after folders and albums. If a photo belongs to multiple albums, it will create copies of that photo for each album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Previous Osxphotos Export\nDESCRIPTION: This snippet demonstrates how to use the `--update` option to export only new or changed photos since the last export. The export database `.osxphotos_export.db` located in the export directory is used to determine changes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --update\n```\n\n----------------------------------------\n\nTITLE: Querying Column Data in Table Objects with osxphotos (Python)\nDESCRIPTION: Demonstrates how to access table column data dynamically using osxphotos Table objects. The dynamically generated properties return tuples containing the values for the respective columns. Requires the osxphotos library initialized and a valid photo object. Input is a method call to Table object properties; output is a tuple of column values. No additional dependencies required beyond osxphotos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n>>> photo.tables().ZADDITIONALASSETATTRIBUTES.ZTITLE\n(\"St. James's Park\",)\n```\n\n----------------------------------------\n\nTITLE: Exporting Only New Photos During Update using osxphotos\nDESCRIPTION: This command demonstrates how to export only new photos added to the library since the last update, while ignoring previously exported files that may have been moved or deleted from the export directory. It combines `--update` with `--only-new`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update --only-new\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Rows as Tuples in osxphotos (pycon)\nDESCRIPTION: Example of calling the `rows()` method on the `ZASSET` table object obtained from `photo.tables()`. This method returns a list where each element is a tuple representing a row from the table, containing all column values for that row.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_35\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.tables().ZASSET.rows()\n[(6, 3, 35, 0, 0, 0, 0, 0, 0, None, None, None, None, None, 0, 0, 1, 0, 0, 0, 0, -100, 0, 1, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 1, 6192599813128215, 1, 2814835671629878, 1, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2047, 7, None, 8, None, None, None, None, None, None, None, None, 3, 6, 6, 6, None, 6, 4, None, None, 8, 4, None, 2, None, 3, None, 3, None, None, 585926209.859624, 596906868.198932, 689981763.374756, None, None, None, 0.5, 561129492.501, 0.0, 596906868.198932, None, 0.03816793893129771, None, 51.50357167, -0.1318055, 689982854.802854, 0.6494140625, 0.0, 561129492.501, None, None, None, None, None, None, None, 'D', 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', None, 'sRGB IEC61966-2.1', 'public.jpeg', 'DC99FBDD-7A52-4100-A5BB-344131646C30', b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')]\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Export Report\nDESCRIPTION: Command for generating a JSON-formatted report of the export operation by specifying a .json file extension with the --report option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.json\n```\n\n----------------------------------------\n\nTITLE: Exporting Edited and Original Photos with Custom Suffix - osxphotos Command Line - Shell\nDESCRIPTION: Exports both original and edited images from Photos using osxphotos, appending a custom suffix to edited files with the --edited-suffix option. Specify a static string or evaluate dynamic template variables for the suffix (such as date). Input is the library's export path and options; output is exported image files named accordingly. Requires osxphotos installation and access to the Apple Photos Library. Limitations include Photos app renaming edited image extensions to .jpeg.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_EDIT\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_{modified.year}-{modified.mm}-{modified.dd}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV Export Report using osxphotos\nDESCRIPTION: Generates a report file in CSV format detailing the results of the export process (e.g., exported, skipped, missing files). The output file name and format are specified using the `--report` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_38\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --report export.csv\n```\n\n----------------------------------------\n\nTITLE: Accessing EXIF Metadata as Dictionary in osxphotos\nDESCRIPTION: This code snippet explains how to access all EXIF metadata found in a file as a dictionary using the `asdict()` method of the `ExifToolCaching` object.  The dictionary keys are in the form \"GROUP:TAG\" if `tag_groups` is True (default) or \"TAG\" if `tag_groups` is False. The `ExifToolCaching` class provides cached, read-only access to the EXIF data via exiftool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}\n```\n\n----------------------------------------\n\nTITLE: Osxphotos Export Dry Run\nDESCRIPTION: This snippet performs a dry run of the export process without actually exporting any files.  Combined with `--verbose`, it prints out details of each file that would be exported, useful for testing export options before a full export.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: Explanation of Conditional Template Logic in osxphotos\nDESCRIPTION: Provides a visual breakdown and explanation of the complex template string `{title,}{title?{descr?{newline},},}{descr,}` used for setting Finder comments. It details how the boolean `?` operator and nested templates create conditional if-then-else logic to handle cases where title or description might be missing, ensuring clean output.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_46\n\nLANGUAGE: text\nCODE:\n```\n{title,}{title?{descr?{newline},},}{descr,}\n │           │      │ │       │ │  │ \n │           │      │ │       │ │  │ \n └──> insert title (or nothing if no title) \n             │      │ │       │ │  │\n             └───> is there a title?\n                    │ │       │ │  │\n                    └───> if so, is there a description? \n                      │       │ │  │\n                      └───> if so, insert new line \n                              │ │  │\n                              └───> if descr is blank, insert nothing\n                                │  │ \n                                └───> if title is blank, insert nothing\n                                   │\n                                   └───> finally, insert description \n                                         (or nothing if no description)\n```\n\n----------------------------------------\n\nTITLE: Exporting Only New Photos with Update\nDESCRIPTION: This snippet shows how to combine the `--update` and `--only-new` options to export only photos that are new to the library since the last update, ignoring previously exported files that may have been moved or deleted from the export directory.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --update --only-new\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Exports with osxphotos (Shell)\nDESCRIPTION: Illustrates the `--retry` option, followed by a number (e.g., 3), which specifies how many times `osxphotos` should attempt to re-export a photo if an error occurs. This is particularly useful when exporting to potentially unreliable network storage (NAS).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --retry 3\n```\n\n----------------------------------------\n\nTITLE: Using SidecarWriter to write sidecar files in Python\nDESCRIPTION: Demonstrates how to use the SidecarWriter class to write sidecar files (XMP, JSON, exiftool) for exported images. This snippet shows how to instantiate the SidecarWriter with a PhotoInfo object and write sidecar files to a destination folder.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import SidecarWriter\n\n# photo is a PhotoInfo object\nwriter = SidecarWriter(photo)\n\n# dest is destination folder for sidecar files, options is an ExportOptions\n# returns ExportResults of sidecars written or skipped\nresults = writer.write_sidecar_files(dest, options)\n```\n\n----------------------------------------\n\nTITLE: Accessing EXIF Metadata of Photos Using ExifInfo Class in Python\nDESCRIPTION: The ExifInfo class encapsulates various EXIF metadata fields from photos managed by Photos 5 and later. Attributes include camera settings (e.g., flash_fired, iso, aperture), recording data (e.g., duration, bit_rate), camera details (camera_make, camera_model, lens_model), location (latitude, longitude), and timestamps. Users can filter photos by EXIF camera make or other properties by accessing these attributes on PhotoInfo.exif_info objects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nnikon_photos = [\n    p\n    for p in osxphotos.PhotosDB().photos()\n    if p.exif_info.camera_make and \"nikon\" in p.exif_info.camera_make.lower()\n]\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Exiftool Command - osxphotos CLI\nDESCRIPTION: Gives an example of using the `--post-command` option to run exiftool on exported files. This specific command wipes all metadata from files in the `exported` category, demonstrating the use of the `|shell_quote` template filter.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_48\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"/usr/local/bin/exiftool -all= {filepath|shell_quote}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Date Range using osxphotos\nDESCRIPTION: This command demonstrates how to export photos within a specific date range using the `--from-date` and `--to-date` options. The dates should be provided in the format YYYY-MM-DD.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --from-date \"2020-01-01\" --to-date \"2020-02-28\"\n```\n\n----------------------------------------\n\nTITLE: Setting EXIF Data with ExifTool in osxphotos\nDESCRIPTION: This snippet demonstrates how to set the value of an EXIF tag using the setvalue() method of the ExifTool object. It shows how to set the \"XMP:Title\" tag to a new value.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_134\n\nLANGUAGE: python\nCODE:\n```\nphoto.exiftool.setvalue(\"XMP:Title\", \"Title of photo\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comment Information on Shared Photos using OSXPhotos Python\nDESCRIPTION: CommentInfo objects provide access to comments made on shared photos for Photos 5/MacOS 10.15+ libraries. Attributes include the datetime of the comment, the user who made it, whether the comment was made by the library owner, and the comment text. Comments are returned in ascending order by datetime. Requires Photos 5 or newer with shared photo comments.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ncomments = photo.comments\nfor comment in comments:\n\tcomment_datetime = comment.datetime\n\tcomment_user = comment.user\n\tis_owner_comment = comment.ismine\n\tcomment_text = comment.text\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos within a Date Range using osxphotos\nDESCRIPTION: Exports only photos taken between a specified start date and end date using the `--from-date` and `--to-date` query options.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_46\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --from-date \"2020-01-01\" --to-date \"2020-02-28\"\n```\n\n----------------------------------------\n\nTITLE: Get Keywords as Dictionary from PhotosDB in Python\nDESCRIPTION: Retrieves a dictionary of keywords found in the Photos library using the `keywords_as_dict` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. The key is the keyword, and the value is the count of how many times that keyword appears in the library. The dictionary is in reverse sorted order.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nkeyword_dict = photosdb.keywords_as_dict\n```\n\n----------------------------------------\n\nTITLE: Integrating Finder Tags, Metadata Merge, and Other Advanced Export Features via osxphotos (Shell)\nDESCRIPTION: Demonstrates a comprehensive osxphotos export workflow that merges keywords and person metadata, tags keywords as Finder tags, copies edited titles/descriptions to Finder comments, touches file creation dates, and strips whitespace. It combines several advanced flags: --keyword, --only-movies, --touch-file, --finder-tag-keywords, --person-keyword, --xattr-template, --exiftool-merge-keywords, --exiftool-merge-persons, --exiftool, and --strip. All dependencies must be installed (osxphotos, exiftool), and the Photos library must be accessible. Exports only videos labeled with the keyword 'Quik'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export ~/Desktop/folder\\ for\\ exported\\ videos/ --keyword Quik --only-movies --library /path\\ to\\ my.photoslibrary --touch-file --finder-tag-keywords --person-keyword --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\" --exiftool-merge-keywords --exiftool-merge-persons --exiftool --strip\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with Multiple Filter Parameters\nDESCRIPTION: General syntax for querying photos with the photos() method, which can filter results by keywords, UUID, persons, albums, media type, dates, and trash status. Returns PhotoInfo objects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos([keywords=['keyword',]], [uuid=['uuid',]], [persons=['person',]], [albums=['album',]],[from_date=datetime.datetime],[to_date=datetime.datetime])\n```\n\n----------------------------------------\n\nTITLE: Adding Automatic Image Labels as Keywords (Shell)\nDESCRIPTION: Exports photos using `exiftool` and adds keywords based on the automatic image classification labels generated by Photos' machine learning algorithms. The `--keyword-template \"{label}\"` option extracts these labels and adds them as keywords to the exported image metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting with Automatic Keywords using osxphotos\nDESCRIPTION: This command demonstrates how to export photos using osxphotos and embed automatic labels as keywords in the image's metadata using the `--exiftool` option and the `{label}` template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing EXIF Information in Photos Library\nDESCRIPTION: Example showing how to use the ExifInfo object to find all photos taken with a Nikon camera by accessing the camera_make property of the exif_info object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nnikon_photos = [\n    p\n    for p in osxphotos.PhotosDB().photos()\n    if p.exif_info.camera_make and \"nikon\" in p.exif_info.camera_make.lower()\n]\n```\n\n----------------------------------------\n\nTITLE: Export Photos to Directory Using OSXPhotos and Click in Python\nDESCRIPTION: This code exports all photos from a Photos library to a specified directory, organizing them into album-named folders. It handles edited versus original versions and ensures valid file paths. Dependencies include osxphotos, click, pathvalidate, and standard Python modules. It processes each photo and its albums, creating directories as needed, and exports the photos with feedback on progress.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/package_overview.rst.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\" Export all photos to specified directory using album names as folders\n    If file has been edited, also export the edited version,\n    otherwise, export the original version\n    This will result in duplicate photos if photo is in more than album \"\"\"\n\nimport os.path\nimport pathlib\nimport sys\n\nimport click\nfrom pathvalidate import is_valid_filepath, sanitize_filepath\n\nimport osxphotos\n\n\n@click.command()\n@click.argument(\"export_path\", type=click.Path(exists=True))\n@click.option(\n    \"--default-album\",\n    help=\"Default folder for photos with no album. Defaults to 'unfiled'\",\n    default=\"unfiled\",\n)\n@click.option(\n    \"--library-path\",\n    help=\"Path to Photos library, default to last used library\",\n    default=None,\n)\ndef export(export_path, default_album, library_path):\n    export_path = os.path.expanduser(export_path)\n    library_path = os.path.expanduser(library_path) if library_path else None\n\n    if library_path is not None:\n        photosdb = osxphotos.PhotosDB(library_path)\n    else:\n        photosdb = osxphotos.PhotosDB()\n\n    photos = photosdb.photos()\n\n    for p in photos:\n        if not p.ismissing:\n            albums = p.albums\n            if not albums:\n                albums = [default_album]\n            for album in albums:\n                click.echo(f\"exporting {p.filename} in album {album}\")\n\n                # make sure no invalid characters in destination path (could be in album name)\n                album_name = sanitize_filepath(album, platform=\"auto\")\n\n                # create destination folder, if necessary, based on album name\n                dest_dir = os.path.join(export_path, album_name)\n\n                # verify path is a valid path\n                if not is_valid_filepath(dest_dir, platform=\"auto\"):\n                    sys.exit(f\"Invalid filepath {dest_dir}\")\n\n                # create destination dir if needed\n                if not os.path.isdir(dest_dir):\n                    os.makedirs(dest_dir)\n\n                # export the photo\n                if p.hasadjustments:\n                    # export edited version\n                    exported = p.export(dest_dir, edited=True)\n                    edited_name = pathlib.Path(p.path_edited).name\n                    click.echo(f\"Exported {edited_name} to {exported}\")\n                # export unedited version\n                exported = p.export(dest_dir)\n                click.echo(f\"Exported {p.filename} to {exported}\")\n        else:\n            click.echo(f\"Skipping missing photo: {p.filename}\")\n\nif __name__ == \"__main__\":\n    export()\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Comment via Template - osxphotos CLI\nDESCRIPTION: Explains how to set extended attributes like Finder comments using the `--xattr-template ATTRIBUTE TEMPLATE` option. This example sets the 'findercomment' attribute using a template that includes the photo's title and description, separated by a newline.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_40\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{newline}{descr}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos within Date Range\nDESCRIPTION: This snippet shows how to export photos within a specified date range using the `--from-date` and `--to-date` options.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --from-date \"2020-01-01\" --to-date \"2020-02-28\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Text in Photos Using Apple's Vision Framework in Python\nDESCRIPTION: The detected_text(confidence_threshold) method detects text within a photo using the Apple Vision framework. It processes edited photos if available, or falls back to original or preview images. The method returns a list of tuples containing detected text strings and their confidence scores above the provided threshold (default set by osxphotos._constants.TEXT_DETECTION_CONFIDENCE_THRESHOLD). This processing is memoized per confidence threshold and requires macOS Catalina (10.15) or later. It is not equivalent to the Live Text feature in macOS Monterey.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nphoto.detected_text(confidence_threshold=TEXT_DETECTION_CONFIDENCE_THRESHOLD)  # returns [(detected_text:str, confidence:float), ...]\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Comment with Conditional Template - osxphotos CLI\nDESCRIPTION: Demonstrates a more advanced use of the `--xattr-template` option with conditional logic within the template string. This complex template ensures proper formatting of the Finder comment even if the title or description fields are empty, using the `field?value if true,value if false` syntax.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_41\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title,}{title?{descr?{newline},},}{descr,}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Photos to an Album with osxphotos (Python)\nDESCRIPTION: Demonstrates how to create or retrieve a Photos album using the PhotosAlbum class and add PhotoInfo objects to it based on a score condition. Dependencies include osxphotos, which provides the PhotosDB, PhotoInfo, and PhotosAlbum classes. The user must have a properly installed Photos library and the Python 'osxphotos' package available. 'PhotosDB(verbose=print)' constructs a database instance, while 'PhotosAlbum(name)' initializes the album. Methods like 'extend' and 'add' add photos, and the script prints the results, including counts of photos added and present in the album. Input is filtered photos with 'score.overall > 0.9'; output is console text and album modification.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example that shows how to add PhotoInfo objects to an album in Photos\"\"\"\n\nfrom osxphotos import PhotosDB\nfrom osxphotos.photosalbum import PhotosAlbum\n\n# If album exists it will be used, otherwise it will be created\nalbum = PhotosAlbum(\"Best Photos\")\nbest_photos = [p for p in PhotosDB(verbose=print).photos() if p.score.overall > 0.9]\n\n# use album.add() or album.append() to add a single photo\n# use album.update() or album.extend() to add an iterable of photos\nalbum.extend(best_photos)\nprint(f\"Added {len(best_photos)} photos to album {album.name}\")\nprint(f\"Album contains {len(album.photos())} photos\")\n```\n\n----------------------------------------\n\nTITLE: Retrying Export Operations\nDESCRIPTION: This command exports photos and uses the `--retry` option to specify the number of times to retry exporting the photo in case of failure. The retry mechanism is particularly useful when exporting to external network storage, addressing potential network issues.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --retry 3\n```\n\n----------------------------------------\n\nTITLE: Accessing Postal Address Metadata via osxphotos.PhotoInfo.place.address in Python\nDESCRIPTION: This code demonstrates how to access detailed postal address information for a photo using the osxphotos Python library. It shows that calling photo.place.address returns a PostalAddress namedtuple with fields such as street, sub_locality, city, sub_administrative_area, state, postal_code, country, and iso_country_code. The example illustrates accessing both the full address tuple and individual fields such as postal_code. Dependencies: osxphotos must be installed and photo must be an initialized PhotoInfo object. Inputs are the photo object and expected output is a PostalAddress tuple or its attributes; returns None if metadata is missing.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_46\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.place.address\nPostalAddress(street='3700 Wailea Alanui Dr', sub_locality=None, city='Kihei', sub_administrative_area='Maui', state='HI', postal_code='96753', country='United States', iso_country_code='US')\n>>> photo.place.address.postal_code\n'96753'\n```\n\n----------------------------------------\n\nTITLE: Writing Hierarchical Keywords with ExifTool Template - osxphotos - Shell\nDESCRIPTION: Uses the --exiftool option along with --keyword-template and a template string like {folder_album(>)} to write custom keywords based on the photo's folder and album structure. The (>) specifies the hierarchy separator for tools like Lightroom. Requires exiftool installed and the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{folder_album(>)}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Hierarchical Keywords with osxphotos and exiftool (Shell)\nDESCRIPTION: Shows how to combine `--exiftool` with `--keyword-template` and an osxphotos template string (`{folder_album(>)}`) to create hierarchical keywords based on the photo's location in folders and albums. The `(>)` specifies the separator recognized by Lightroom Classic. Requires `exiftool`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{folder_album(>)}\"\n```\n\n----------------------------------------\n\nTITLE: Querying and Filtering Photos Library Data - osxphotos - Python\nDESCRIPTION: This example demonstrates typical usage of the osxphotos package for interacting with an Apple Photos library. It shows how to open a specified library, read its path and version, enumerate keywords, persons, and albums (including as dictionaries), and filter photos by keyword/person or presence of keywords. Advanced queries and iterating over all PhotoInfo attributes are also illustrated. Dependencies: osxphotos. Inputs: path to a Photos library and query criteria; outputs: prints library metadata and search results. Suitable as a usage reference or sample script.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_143\n\nLANGUAGE: Python\nCODE:\n```\nimport osxphotos\n\ndef main():\n\n    photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n    print(f\"db file = {photosdb.db_path}\")\n    print(f\"db version = {photosdb.db_version}\")\n\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.albums)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Kids and containing person Katie\n    photos = photosdb.photos(keywords=[\"Kids\"], persons=[\"Katie\"])\n    print(f\"found {len(photos)} photos\")\n\n    # find all photos that include Katie but do not contain the keyword wedding\n    photos = [\n        p\n        for p in photosdb.photos(persons=[\"Katie\"])\n        if p not in photosdb.photos(keywords=[\"wedding\"])\n    ]\n\n    # get all photos in the database\n    photos = photosdb.photos()\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n            p.ismissing,\n            p.hasadjustments,\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Labels with Normalization in osxphotos\nDESCRIPTION: This code demonstrates how to access and utilize normalized image categorization labels associated with a photo using the osxphotos library. It iterates through photos in the database and checks if a specific label (e.g., \"statue\") is present in the normalized labels, printing a message if found. This functionality is available in Photos 5 and later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB()\nfor photo in photosdb.photos():\n    if \"statue\" in photo.labels_normalized:\n        print(f\"I found a statue! {photo.original_filename}\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Edited Photos During Export\nDESCRIPTION: This command exports photos using the `--skip-edited` option, which tells osxphotos to skip exporting edited versions and only export the originals. This is useful for excluding the edited versions of images during the export process.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --skip-edited\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Names (Faces) with osxphotos (Python)\nDESCRIPTION: Illustrates how to access all recognized person names (faces) in the Photos library via the persons attribute. Returns a list of unique person names as strings. Duplicate person names are collapsed to one entry.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\npersons = photosdb.persons\n```\n\n----------------------------------------\n\nTITLE: Conditional Output with Ternary Operator (osxphotos-template)\nDESCRIPTION: Demonstrates using the ternary operator `?bool_value,default` following a conditional expression. If the condition is true, `bool_value` is used; otherwise, `default` is used. Both `bool_value` and `default` can be template strings themselves. This is useful for dynamic directory or filename generation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_10\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|lower matches travel|vacation?Travel-Photos,Not-Travel-Photos}\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{favorite?Favorite-{original_name},{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Text Replacement in osxphotos Templates\nDESCRIPTION: Explains the `[find,replace]` syntax appended to a template field for simple text substitution on the rendered value. This example replaces forward slashes ('/') with hyphens ('-') in album names.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_43\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{album[/,-]}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Keyword Filter\nDESCRIPTION: This snippet demonstrates filtering photos for export based on a keyword. Only photos containing the specified keyword will be exported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Library Metadata with OSXPhotos in Python\nDESCRIPTION: This snippet demonstrates how to use the OSXPhotos Python API to access a Photos library and iterate through all photos, printing each photo's filename, creation date, title, and keywords. The code creates a PhotosDB object to interface with the Photos library, then uses the photos() method to retrieve all photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"print filename, date created, title, and keywords for all photos in Photos library\"\"\"\n\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    for photo in photosdb.photos():\n        print(photo.original_filename, photo.date, photo.title, photo.keywords)\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Metadata Using FolderInfo Objects in osxphotos Python\nDESCRIPTION: FolderInfo objects represent top-level and nested folders in the Photos library. Each folder has a uuid and related metadata describing its place in the library hierarchy. PhotosDB.folder_info returns these objects to allow navigation through folder structures encompassing albums. Useful for representing and traversing Photos library organization programmatically.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_49\n\n\n\n----------------------------------------\n\nTITLE: Advanced Finder Comment Template Example\nDESCRIPTION: This snippet demonstrates an advanced use of the template system to set the Finder comment, handling cases where the title or description may be empty to avoid unwanted newline characters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Photo by UUID with get_photo\nDESCRIPTION: Uses the get_photo method to retrieve a single PhotoInfo instance for a photo with the specified UUID. This is faster than using photos() when you know the UUID.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# No explicit code example provided, but the method signature is:\n# get_photo(uuid)\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values and Sub-templates using `,` in osxphotos\nDESCRIPTION: Illustrates using the `,default` modifier. It provides a fallback value if the main template field (e.g., `{title}`) has no value ('_' is the implicit default if none is specified). It's also used to supply sub-templates (like strftime formats for `{created.strftime}`) or custom mappings for specific fields (like `{media_type}`).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_11\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{title}\" (renders to \"_\" if title is empty)\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{title,I have no title}\" (renders to \"I have no title\" if title is empty)\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{created.strftime,%Y-%m-%d-%H%M%S}\" (renders date like \"2020-02-04-190738\")\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{media_type,video=vidéo;time_lapse=vidéo_accélérée}\" (customizes output for specific media types)\n```\n\n----------------------------------------\n\nTITLE: Export with Default Filename if Title Missing - Bash\nDESCRIPTION: This command exports photos using the title as the filename, but if no title is available, it uses the original filename. It uses the `--filename` option with `{title,{original_name}}`. Requires a valid osxphotos installation. Expected output is photos exported with title-based filenames where possible, and the original name otherwise.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title,{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in Filename Templates for Favorites\nDESCRIPTION: Demonstration of conditional logic in filename templates to mark favorite photos with a special character.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nosxphotos export /path/to/export --filename \"{original_name}{favorite?#,}\"\n                                              │              │       │││ \n                                              │              │       │││ \n     Use photo's original name as filename <──┘              │       │││\n                                                             │       │││\n          'favorite' is True if photo is a Favorite, <───────┘       │││\n          otherwise, False                                           │││\n                                                                     │││\n                           '?' specifies a conditional <─────────────┘││\n                                                                      ││\n                 Value immediately following ? will be used if <──────┘│\n                 preceding template field is True or non-blank         │\n                                                                       │\n              Value immediately following comma will be used if <──────┘\n              template field is False or blank (null); in this case\n              no value is specified so a blank string \"\" will be used\n```\n\n----------------------------------------\n\nTITLE: Directory and Filename Templates for Export\nDESCRIPTION: Shows how to use templates with the --directory and --filename options to organize exported photos by date or other metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_77\n\nLANGUAGE: plaintext\nCODE:\n```\n{created.year}/{created.month}\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Keyword and Outputting JSON (Bash)\nDESCRIPTION: This example demonstrates querying photos based on a specific keyword (`--keyword Kids`) from a designated Photos library (`--library`). The results are output in JSON format (`--json`) and redirected to a file named `results.json`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos query --keyword Kids --json --library ~/Pictures/Photos\\ Library.photoslibrary >results.json\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Multiple Keywords\nDESCRIPTION: Command for exporting photos that have either the keyword \"Travel\" or \"Vacation\". This shows how to use multiple --keyword arguments for OR filtering.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\" --keyword \"Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Performing Find and Replace on Template Output (osxphotos-template)\nDESCRIPTION: Shows the syntax `[find,replace]` for performing text substitutions on the rendered value of a template field. Multiple replacements can be chained using '|' as a separator between pairs. The find/replace operates after the template field and any filters are processed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_8\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{album[/,-]}\"         // Replaces '/' with '-' in album name\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{album[/,-|:,-]}\"    // Replaces both '/' and ':' with '-'\n```\n\n----------------------------------------\n\nTITLE: Exporting All Photos Using osxphotos in Shell\nDESCRIPTION: This snippet demonstrates how to export all media assets (including images and videos) from the user's Photos library to a specified directory using the osxphotos command-line tool. The only required dependency is the osxphotos utility installed on your system. You must provide a valid path for the export destination ('/path/to/export'). Usage is simple, with no additional parameters required. This will not organize photos by date or album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Using OSXphotos\nDESCRIPTION: This command exports all photos from the Photos library to the specified directory. It serves as the basic command for exporting photos.  It takes the path to the export directory as an argument. The output includes all photos, potentially including videos and associated files.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Retrieving Album Metadata with AlbumInfo Objects via osxphotos in Python\nDESCRIPTION: AlbumInfo objects provide detailed metadata about albums in the Photos library. Attributes include the album's uuid (unique identifier), title, creation date, start and end dates of contained photos, and hierarchical folder information such as folder_list and folder_names. The photos property returns PhotoInfo objects in the album maintaining Photos' manual sorting order. Other attributes include owner for shared albums and methods like asdict() for dictionary conversion. Useful for querying and manipulating album collections programmatically.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Conditional Filename Renaming using osxphotos Templates (Shell)\nDESCRIPTION: Shell command argument example (`--filename`) demonstrating conditional renaming using a boolean field (`{favorite}`). Favorite photos get a 'Favorite-' prefix added to their original filename; others retain the original name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_47\n\nLANGUAGE: Shell\nCODE:\n```\n--filename \"{favorite?Favorite-{original_name},{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Filename based on Favorite Status - Bash\nDESCRIPTION: This command uses the `--filename` option to conditionally add a '#' to the filename if the photo is marked as a favorite. It uses the `{original_name}{favorite?#,}` template. Requires osxphotos. The expected output is that photos marked as favorites will have '#' appended to their original filename, and other photos will not.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{original_name}{favorite?#,}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Moment Metadata with MomentInfo Objects in osxphotos Python\nDESCRIPTION: MomentInfo objects provide detailed metadata about photo moments (collections by time and location) assigned by Photos. Properties include primary key (pk), geographic location (latitude, longitude tuple), title, subtitle, start and end dates, modification date, and the full list of photos in the moment through a photos list of PhotoInfo. The asdict() method returns metadata as a dictionary. MomentInfo enables detailed temporal and regional categorization within photo libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_48\n\n\n\n----------------------------------------\n\nTITLE: Providing Default Keywords with Template Fallback in osxphotos CLI\nDESCRIPTION: This command exports photos and inserts the keyword 'nolabel' for photos that lack automatic labels using the template's default value feature. The --keyword-template '{label,nolabel}' specifies to use the label or, if none, insert 'nolabel'. Dependencies: osxphotos CLI, exiftool. Inputs: Photos library, output path. Outputs: Exported images always have a label or 'nolabel' keyword. Limitation: Custom default only applies if no label is present.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_24\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label,nolabel}\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in Templates\nDESCRIPTION: Shows how to define custom variables with the {var:NAME,VALUE} syntax and reference them using %NAME in template strings. Variables can be used to store complex template values or characters that would otherwise be prohibited.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_71\n\nLANGUAGE: plaintext\nCODE:\n```\n{var:foo,bar}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Filtered by Keyword using osxphotos CLI\nDESCRIPTION: This command exports only photos containing the specified keyword(s). Multiple --keyword flags can be used for combining queries with logical OR. Dependencies: osxphotos CLI. Inputs: Photos library, export location, and keywords. Outputs: Only matching images exported. Limitation: Only matches exact keyword(s) in Photos database.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_34\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Specific Keywords\nDESCRIPTION: Command for exporting only photos with the keyword \"Travel\". This demonstrates filtering exports based on photo metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\"\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with Options (PhotosDB) - Python\nDESCRIPTION: Demonstrates using the `query()` method of the `PhotosDB` object to find photos matching specific criteria defined in a `QueryOptions` object. The example finds all screenshots taken in the year 2019 and prints their original filename and date. Requires the `osxphotos` library and an initialized `PhotosDB` object. The `query` method returns a list of `PhotoInfo` objects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Find all screenshots taken in 2019\"\"\"\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    results = photosdb.query(osxphotos.QueryOptions(screenshot=True, year=[2019]))\n    for photo in results:\n        print(photo.original_filename, photo.date)\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Templates with Finder Tags in osxphotos\nDESCRIPTION: Demonstrates combining `--finder-tag-keywords` with `--keyword-template` in `osxphotos export`. This allows customizing the source of Finder tags, using the photo's labels (`{label}`) instead of the default keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Writing Keywords to Finder Tags\nDESCRIPTION: This snippet demonstrates how to write keywords from the image metadata to Finder tags, enabling searching in Spotlight or Finder using the `tag:tagname` syntax.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords\n```\n\n----------------------------------------\n\nTITLE: Creating Export Report\nDESCRIPTION: This snippet generates a report in CSV format, listing details of all files exported, skipped, or missing. The report file name is specified after the `--report` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --report export.csv\n```\n\n----------------------------------------\n\nTITLE: Getting Album Sequence\nDESCRIPTION: This describes the {album_seq} template tag. This tag provides an integer, starting at 0, which indicates the photo's index (sequence) in the containing album. It is only valid when used in a '--filename' template and '{album}' or '{folder_album}' are also used in the '--directory' template. It can also be formatted using Python string format code.  The output is a number representing the photo's index within its album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_94\n\nLANGUAGE: text\nCODE:\n```\n{album_seq}                     An integer, starting at 0, indicating the\n                                photo's index (sequence) in the containing\n                                album. Only valid when used in a '--\n                                filename' template and only when '{album}'\n                                or '{folder_album}' is used in the '--\n                                directory' template. For example '--\n                                directory \"{folder_album}\" --filename\n                                \"{album_seq}_{original_name}\"'. To start\n                                counting at a value other than 0, append\n                                append '(starting_value)' to the field name.\n                                For example, to start counting at 1 instead\n                                of 0: '{album_seq(1)}'. May be formatted\n                                using a python string format code. For\n                                example, to format as a 5-digit integer and\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Values in Filename Templates\nDESCRIPTION: Explanation of using fallback values in filename templates, using the title if available or defaulting to the original filename.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title,{original_name}}\"\n                                              │    ││  │ \n                                              │    ││  │ \n     Use photo's title as the filename <──────┘    ││  │\n                                                   ││  │\n            Value after comma will be used <───────┘│  │\n            if title is blank                       │  │\n                                                    │  │\n                      The default value can be <────┘  │\n                      another template field           │\n                                                       │\n          Use photo's original name if no title <──────┘\n```\n\n----------------------------------------\n\nTITLE: Exporting By Country with Default Value using Templates – Shell\nDESCRIPTION: Demonstrates using a nested template field referencing location metadata to organize exports by country. The template string includes a fallback/default value of 'No-Country' for assets missing country data. Requires that photos have location metadata; otherwise, they will be exported into the No-Country directory. Users can customize default handling by editing the template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country,No-Country}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Portrait Mode Photos using osxphotos\nDESCRIPTION: This command demonstrates how to export only portrait mode photos taken with an iPhone using the `--portrait` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --portrait\n```\n\n----------------------------------------\n\nTITLE: Creating an Export Report using osxphotos\nDESCRIPTION: These commands demonstrate how to create an export report in different formats (CSV, JSON, SQLite) using the `--report` option. The file extension determines the report format.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.csv\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.sqlite\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Lowercase Folder Names Using osxphotos in Shell\nDESCRIPTION: This code modifies the previous folder/album organization by using a filter to convert all output directory names to lowercase via the lower filter. The {folder_album|lower} template syntax ensures consistent, case-insensitive folder names. Dependencies remain osxphotos and appropriate photo organization within the library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|lower}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keywords as Dictionary\nDESCRIPTION: This snippet retrieves keywords and their counts from the Photos library as a dictionary. It requires a pre-existing `PhotosDB` object named `photosdb`. The dictionary's keys are keywords, and values are their counts, sorted in reverse order.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nkeyword_dict = photosdb.keywords_as_dict\n```\n\n----------------------------------------\n\nTITLE: Batch-editing Albums Using osxphotos CLI Bash Commands\nDESCRIPTION: Shows how to use osxphotos batch-edit command in bash to synchronize albums between iCloud shared libraries by leveraging keywords and album metadata. The examples demonstrate two-step commands to write album names to keywords and read keywords back to add photos to albums, as well as a combined command. Dependencies include osxphotos installed and available in PATH. Inputs are Photos metadata and outputs are updated album memberships. The examples use verbose mode for detailed output.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n osxphotos batch-edit --verbose --keyword \"{album?album:{folder_album}}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos batch-edit --verbose --album \"{keyword|filter(startswith album:)|sslice(6:)}\" --split-folder \"/\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos batch-edit --verbose --album \"{keyword|filter(startswith album:)|sslice(6:)}\" --split-folder \"/\" --keyword \"{album?album:{folder_album}}\"\n```\n\n----------------------------------------\n\nTITLE: Writing EXIF Metadata Tag Using setvalue - Python\nDESCRIPTION: This example demonstrates setting or updating an EXIF metadata tag for a photo using setvalue on the exiftool interface available to a PhotoInfo object in osxphotos. It writes a string to the 'XMP:Title' tag. Argument 'XMP:Title' specifies the tag, and 'Title of photo' is the new value. The method returns True on success. Requires osxphotos, exiftool, and an initialized PhotoInfo object. Tag must exist and be valid per exiftool documentation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nphoto.exiftool.setvalue(\"XMP:Title\", \"Title of photo\")\n```\n\n----------------------------------------\n\nTITLE: Set Difference Filtering of Photos with osxphotos (Python)\nDESCRIPTION: Shows how to perform programmatic filtering: retrieves photos in a certain album and those containing a specific keyword, then finds photos with the keyword that are not in the album using a list comprehension. Useful for exclusion operations where built-in filters are insufficient.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos1 = photosdb.photos(albums=[\"Vacation 2019\"])\nphotos2 = photosdb.photos(keywords=[\"Kids\"])\nphotos3 = [p for p in photos2 if p not in photos1]\n```\n\n----------------------------------------\n\nTITLE: Export with Custom Filename and Default Value in OSXphotos\nDESCRIPTION: This command uses the title as the filename, and if the title is empty, it uses the original filename, demonstrating a default value within the template string of the `--filename` option. The default values after the comma are used if the template field is null.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title,{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering List Values (osxphotos-template)\nDESCRIPTION: Example using the `filter` filter with a predicate string to select specific items from a list generated by a template field. The example returns only folder/album paths containing the word 'Events'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_7\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{folder_album|filter(contains Events)}\"\n```\n\n----------------------------------------\n\nTITLE: Available Template Fields in OSXPhotos Template Language (plaintext)\nDESCRIPTION: This extensive list enumerates all supported template fields available for use in OSXPhotos templates. Fields cover photo metadata such as filenames, titles, descriptions, media types, various Boolean flags (HDR, edited, favorite), and detailed date/time components for creation, modification, and current date, with support for locale-aware month/day names as well as strftime formatting. These fields allow fine-grained and localized template rendering customized to photo attributes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_68\n\nLANGUAGE: plaintext\nCODE:\n```\n* {name} - Current filename of the photo\\n* {original_name} - Photo's original filename when imported to Photos\\n* {title} - Title of the photo\\n* {descr} - Description of the photo\\n* {media_type} - Special media type with customizable strings for types like selfie, time_lapse, panorama, etc.\\n* {photo_or_video} - \"photo\" or \"video\" string, customizable default output\\n* {hdr} - Boolean: true if photo is HDR, else false\\n* {edited} - Boolean: true if photo has edits\\n* {favorite} - Boolean: true if photo is favorited\\n* {created} and subfields - ISO dates and date components (year, month, day, etc) with localized names and strftime support\\n* {modified} and subfields - Similar to created but for modification date, fallback to creation if unmodified\\n* {today} and subfields - Current date and components, supporting localized strings and formats\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing Photos\nDESCRIPTION: This command uses the `--download-missing` option to download missing photos from iCloud before exporting them. It relies on Photos' AppleScript interface to initiate the download. It also uses the `--use-photokit` flag in conjunction with `--download-missing` to utilize the PhotoKit interface for downloading photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing\n```\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing --use-photokit\n```\n\n----------------------------------------\n\nTITLE: Saving osxphotos Export Options to a Configuration File (Shell)\nDESCRIPTION: Exports photos with a set of options and saves all CLI arguments to a TOML configuration file for future reuse. The --save-config flag specifies the output config file path. Requires osxphotos. Replace <all your options here> with additional export flags as needed. Outputs a valid TOML file summarizing parameters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export <all your options here> --update --save-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Example Usage of osxphotos Library\nDESCRIPTION: This example shows how to connect to a Photos Library, retrieve information about its contents (keywords, persons, albums), query photos based on criteria, and print their metadata. It demonstrates basic usage of the `PhotosDB` object to access and query photo data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\ndef main():\n\n    photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n    print(f\"db file = {photosdb.db_path}\")\n    print(f\"db version = {photosdb.db_version}\")\n\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.albums)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Kids and containing person Katie\n    photos = photosdb.photos(keywords=[\"Kids\"], persons=[\"Katie\"])\n    print(f\"found {len(photos)} photos\")\n\n    # find all photos that include Katie but do not contain the keyword wedding\n    photos = [\n        p\n        for p in photosdb.photos(persons=[\"Katie\"])\n        if p not in photosdb.photos(keywords=[\"wedding\"])\n    ]\n\n    # get all photos in the database\n    photos = photosdb.photos()\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n            p.ismissing,\n            p.hasadjustments,\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Export with Default Value for Place Name - Bash\nDESCRIPTION: This command exports photos, using a default value ('No-Country') if the country name is missing.  It uses the `--directory` option, the `{place.name.country}` template field, and a default value in the template string.  It assumes that osxphotos is installed and configured correctly.  The expected output is photos organized in subdirectories, with 'No-Country' used when no country is assigned in the photo metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country,No-Country}\"\n```\n\n----------------------------------------\n\nTITLE: Saving osxphotos Configuration - osxphotos CLI\nDESCRIPTION: Shows how to save a complex set of osxphotos export options to a TOML configuration file using the `--save-config FILE` option. This allows repeated use of the same options without typing them all on the command line.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_43\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export <all your options here> --update --save-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Formatting Current Date/Time with strftime\nDESCRIPTION: Formats the current date and time using a Python strftime template. Use the format {today.strftime,TEMPLATE}, replacing TEMPLATE with a valid strftime format string (e.g., %Y-%U). Returns a null value if no template is provided. See https://strftime.org/ for template options.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_28\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.strftime,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Post Command Example: Exporting File Paths\nDESCRIPTION: This example demonstrates how to use the '--post-command' option to output the full path of newly exported files to a text file.  It uses shell quoting to handle filenames that contain spaces. It highlights the use of the '{filepath}' and '{export_dir}' template fields along with the 'shell_quote' filter.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\n--post-command new \"echo {filepath|shell_quote} >> {shell_quote,{export_dir}/exported.txt}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting with Custom Directory Structure - Bash\nDESCRIPTION: This command exports photos to a directory structure based on the creation date (year and month).  It uses the `--directory` option and a template string to specify the desired structure. The command assumes osxphotos is installed and accessible in the environment. The expected output is exported photos organized in directories like `2015/May`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{created.month}\"\n```\n\n----------------------------------------\n\nTITLE: Concurrent Photo Export with osxphotos and ThreadPoolExecutor in Python\nDESCRIPTION: Demonstrates exporting photos concurrently using threads from concurrent.futures.ThreadPoolExecutor to improve export throughput on Python 3.11 and later. Uses click for CLI options and arguments, including configurable number of worker threads and export directory validation. Logs export progress including total photos, workers used, and timing. Each photo export is submitted as a separate task; results are collected and aggregated. Relies on osxphotos.PhotoInfo objects' export method. Limitations include compatibility only with Python 3.11+ due to underlying sqlite3 thread safety issues. Dependencies include concurrent.futures, click, osxphotos, time, and os modules.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example for concurrent export of photos using osxphotos.PhotoExporter.export()\n\nNote: concurrent export can only be used on Python 3.11 and later due to the way\npython's sqlite3 module is implemented. See https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety\nfor more information.\n\"\"\"\n\nimport concurrent.futures\nimport os\nimport time\n\nimport click\n\nimport osxphotos\nfrom osxphotos.cli import echo, query_command, verbose\n\n\n@query_command()\n@click.option(\n    \"--workers\",\n    metavar=\"WORKERS\",\n    help=\"Maximum number of worker threads to use for export. \"\n    \"If not specified, it will default to the number of processors on the machine, multiplied by 5.\",\n    type=int,\n)\n@click.argument(\n    \"export_dir\",\n    type=click.Path(exists=True, file_okay=False, dir_okay=True, writable=True),\n)\ndef export(workers, export_dir, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Export photos\"\"\"\n    workers = workers or os.cpu_count() * 5\n    echo(f\"Exporting {len(photos)} photos to {export_dir} using {workers} workers\")\n    start_t = time.perf_counter()\n    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:\n        futures = [\n            executor.submit(p.export, export_dir, f\"{p.uuid}_{p.original_filename}\")\n            for p in photos\n        ]\n        exported = []\n        for future in concurrent.futures.as_completed(futures):\n            exported.extend(future.result())\n    end_t = time.perf_counter()\n    echo(\n        f\"Exported {len(exported)} photos to {export_dir} in {end_t-start_t:.4f} seconds\"\n    )\n\n\nif __name__ == \"__main__\":\n    export()\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Photos to Photos Album (Command Line)\nDESCRIPTION: Adds all photos marked as missing during the export process to the specified Photos album. The album will be created if it does not exist. This requires the Photos library being exported to be the currently open library in the Photos application.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_67\n\nLANGUAGE: Shell\nCODE:\n```\n--add-missing-to-album ALBUM\n```\n\n----------------------------------------\n\nTITLE: Removing Keywords during Export using osxphotos\nDESCRIPTION: This command shows how to remove a specific keyword (e.g., \"MyKeyword\") during the export process using the `remove` filter within the `--keyword-template` option. The `--replace-keywords` option ensures that the exported file's keywords are replaced with the filtered list.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{keyword|remove(MyKeyword)}\" --replace-keywords\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Filenames with Template - osxphotos - Shell\nDESCRIPTION: Shows how to use the --filename option with a template string like {keyword}-{original_name} to name exported files. This example highlights that using multi-valued fields like {keyword} can cause a photo to be exported multiple times, once for each value. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --filename \"{keyword}-{original_name}\"\n```\n\n----------------------------------------\n\nTITLE: Formatting values with type conversion and custom format in osxphotos\nDESCRIPTION: This snippet covers '{format:TYPE:FORMAT,TEMPLATE}', enabling conversion of TEMPLATE to specified TYPE ('int', 'float', 'str') and applying custom string formatting. It supports precise control over how data such as focal length or date are formatted in templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_59\n\nLANGUAGE: plaintext\nCODE:\n```\n|{format:float:.1f,{exiftool:EXIF:FocalLength}}'; converts focal length to float and formats to 1 decimal place.|\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Apple Photos Libraries - compare_photos_libraries - Python\nDESCRIPTION: This is a function declaration for compare_photos_libraries, which compares two PhotosDB (Apple Photos library) objects using osxphotos and returns a PhotosDBDiff object. The function allows for custom verbose logging, signature generation, and diffing functions. Dependencies include the osxphotos.compare_libraries module. Inputs are two PhotosDB objects, with optional custom functions; the output is a PhotosDBDiff summarizing matching and unmatched photos. Limitations: relies on provided signature and diff mechanisms, and comparison depends on the fidelity of PhotoInfo signatures.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_141\n\nLANGUAGE: Python\nCODE:\n```\ndef compare_photos_libraries(\n    library_a: PhotosDB,\n    library_b: PhotosDB,\n    verbose: Callable[[Any], bool] | None = None,\n    signature_function: Callable[[PhotoInfo], Any] | None = None,\n    diff_function: Callable[[PhotoInfo, PhotoInfo], Any] | None = None,\n) -> PhotosDBDiff:\n    \"\"\"Compare two Photos libraries and return a PhotosDBDiff object\n\n    Args:\n        library_a: PhotosDB object for first library\n        library_b: PhotosDB object for second library\n        verbose: function to print verbose output, defaults to None\n        signature_function: function to compute signature for a PhotoInfo object, defaults to None\n        diff_function: function to compare two PhotoInfo objects, defaults to None\n\n    Returns: PhotosDBDiff object\n\n    Note: signature_function should take a PhotoInfo object as input and return a unique\n        signature for the photo; if signature_function is None, the default signature\n        function will be used which computes a signature based on the photo's fingerprint\n        diff_function should take two PhotoInfo objects as input and return a truthy value\n        if the objects are different or a falsy value if they are the same; if diff_function\n        is None, the default diff function will be used which compares the dictionary\n        representation of the PhotoInfo objects.\n    \"\"\"\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Street Address - osxphotos\nDESCRIPTION: This tag extracts the street part of the postal address from the photo's reverse geolocation data. Depends on the photo's metadata having street address information. The output is a string representing the street address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_81\n\nLANGUAGE: string\nCODE:\n```\n{place.address.street}\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with Multiple Keywords and Persons\nDESCRIPTION: Finds all photos with keyword 'wedding' or 'birthday' AND showing the person 'Juan Rodriguez'. Multiple values within a single filter type are combined with OR logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nphotos=photosdb.photos(keywords=[\"wedding\",\"birthday\"],persons=[\"Juan Rodriguez\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Albums\nDESCRIPTION: Finds all photos contained in either the 'Summer Vacation' or 'Ski Trip' albums. Multiple album names are treated with OR logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(albums=[\"Summer Vacation\", \"Ski Trip\"])\n```\n\n----------------------------------------\n\nTITLE: Safely Quoting Template Output for Shell Usage\nDESCRIPTION: Illustrates the {shell_quote,TEMPLATE} syntax in osxphotos templates. This function quotes the rendered output of another TEMPLATE variable, ensuring it is safe for use in shell commands by adding quotes only if necessary (e.g., 'My file.jpeg').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_11\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{shell_quote,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Custom Directory Structure with Templates in OSXPhotos – Shell\nDESCRIPTION: Uses the --directory option with an osxphotos template string to customize output subdirectories by metadata. This example organizes exports by year and full month name. Requires familiarity with template field values and available metadata fields; outputs directories such as 2015/May for assets created in May 2015. Locale settings may affect month name formatting.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{created.month}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos from a Date Range\nDESCRIPTION: Command for exporting photos taken within a specific date range, from January 1st, 2020 to February 28th, 2020. Uses the --from-date and --to-date options for date filtering.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --from-date \"2020-01-01\" --to-date \"2020-02-28\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos from a Specific Album using osxphotos\nDESCRIPTION: Exports only photos contained within the album named \"Summer Vacation\" by using the `--album` query option. Note that if multiple albums share the same name, photos from all matching albums will be included.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_43\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --album \"Summer Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Keywords from Photos Library with osxphotos (Python)\nDESCRIPTION: Shows how to access the list of unique keywords present in the Photos library by referencing the keywords attribute of a PhotosDB object. Returns a list of keywords, each as a string. Requires a PhotosDB object instance.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nkeywords = photosdb.keywords\n```\n\n----------------------------------------\n\nTITLE: Ignoring File Signatures During Update using osxphotos\nDESCRIPTION: This command shows how to ignore file signatures (size and modification date) during an update by using the `--ignore-signature` option with `--update`. This prevents osxphotos from re-exporting files that have been edited in the export directory.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update --ignore-signature\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Portrait Mode\nDESCRIPTION: This snippet demonstrates how to filter and export only photos taken with iPhone's Portrait Mode using the `--portrait` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --portrait\n```\n\n----------------------------------------\n\nTITLE: Printing Photos Metadata with osxphotos Python API - Python\nDESCRIPTION: This snippet demonstrates how to use the osxphotos Python API to print the filename, date created, title, and keywords for all photos in an Apple Photos library. It depends on the osxphotos package, which must be installed and accessible. The snippet initializes a PhotosDB object to interface with the library, iterates over all PhotoInfo objects via the photos() method, and accesses the desired metadata attributes. Expected input is the library configured or defaulted by osxphotos; output is printed per photo. Requires Python 3.7+ and osxphotos installed. Limited to read-only metadata extraction.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"print filename, date created, title, and keywords for all photos in Photos library\"\"\"\n\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    for photo in photosdb.photos():\n        print(photo.original_filename, photo.date, photo.title, photo.keywords)\n```\n\n----------------------------------------\n\nTITLE: Finding Best Food Photo using ScoreInfo\nDESCRIPTION: This example demonstrates how to find the 'best' photo of food using the ScoreInfo object in the osxphotos library. It sorts photos labeled with 'food' based on their overall score, retrieving the photo with the highest score. Requires osxphotos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\n>>> import osxphotos\n>>> photos = osxphotos.PhotosDB().photos()\n>>> best_food_photo = sorted([p for p in photos if \"food\" in p.labels_normalized], key=lambda p: p.score.overall, reverse=True)[0]\n```\n\n----------------------------------------\n\nTITLE: Get Persons (Faces) from PhotosDB in Python\nDESCRIPTION: Retrieves a list of person names (faces) found in the Photos library using the `persons` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object.  Returns a list of strings representing the person names.  Multiple persons with the same name are treated as a single person.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\npersons = photosdb.persons\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata with exiftool\nDESCRIPTION: This command exports photos and uses the `--exiftool` option to write metadata (keywords, persons, GPS location) to the exported files using exiftool. The user must install exiftool before running this command. This enhances the exported files with metadata that Photos' native export does not preserve.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool\n```\n\n----------------------------------------\n\nTITLE: Customizing Export Directory Structure with Templates\nDESCRIPTION: Command to export photos with a custom directory structure using template fields, organizing by year and month name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{created.month}\"\n```\n\n----------------------------------------\n\nTITLE: Converting Images to JPEG on Export using osxphotos\nDESCRIPTION: Exports photos using `osxphotos export`, converting any non-JPEG images to JPEG format using the `--convert-to-jpeg` option. The `--jpeg-quality` flag specifies the desired JPEG compression quality, with 0.9 representing high quality (scale 0.0 to 1.0).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --convert-to-jpeg --jpeg-quality 0.9\n```\n\n----------------------------------------\n\nTITLE: Getting Keywords as Dictionary from PhotosDB in Python\nDESCRIPTION: Returns a dictionary mapping keywords to their occurrence count in the Photos library. The dictionary is sorted in descending order by count.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nkeyword_dict = photosdb.keywords_as_dict\n```\n\n----------------------------------------\n\nTITLE: Extracting Keywords - osxphotos\nDESCRIPTION: This tag retrieves the keyword(s) assigned to a photo. Requires the photo to have keywords associated with it. The output is a string, potentially a list of keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_122\n\nLANGUAGE: string\nCODE:\n```\n{keyword}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Automatic Labels with osxphotos CLI\nDESCRIPTION: This command exports photos from the Photos library to a specified path, embedding automatic machine learning labels as keywords into the metadata using exiftool. The --exiftool flag instructs osxphotos to use exiftool, while --keyword-template \"{label}\" sets each photo's keyword to the photo's automatically-generated labels. Required dependencies: osxphotos CLI and exiftool installed. Input: Source Photos library, output directory; Output: Exported photos with label keywords; Limitation: labels are only available if classified by Photos' ML.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_22\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Writing Sidecar Files - SidecarWriter\nDESCRIPTION: This snippet creates a `SidecarWriter` object to write sidecar files for a given `PhotoInfo` object. It takes a `PhotoInfo` object as input and uses the `write_sidecar_files` method to export sidecar files.  It requires a destination folder (`dest`) and an `ExportOptions` object. The `write_sidecar_files` method returns an `ExportResults` object, indicating the success or failure of the operation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nwriter = SidecarWriter(photo)\n\n# dest is destination folder for sidecar files, options is an ExportOptions\n# returns ExportResults of sidecars written or skipped\nresults = writer.write_sidecar_files(dest, options)\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Keyword Using osxphotos in Shell\nDESCRIPTION: This snippet exports photos into directories named after their assigned keywords. If a photo has multiple keywords, it will be exported once to each relevant keyword directory, potentially creating duplicate files in the export structure. It requires the osxphotos tool and assumes that photos have keyword metadata. The --directory option with {keyword} enables flexible thematic organization.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{keyword}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with JSON Sidecar in Python\nDESCRIPTION: Example demonstrating how to export a photo from the Photos library with a JSON sidecar file containing metadata that can be used with exiftool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\nphotos = photosdb.photos()\nphotos[0].export(\"/tmp\",\"photo_name.jpg\",sidecar_json=True)\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Custom Filename\nDESCRIPTION: This command exports photos using the osxphotos CLI. It uses the `--filename` option along with a template string to define the output filename based on keywords and the original filename. The use of a multi-valued template field like `{keyword}` can lead to multiple exported files for a single photo if it has multiple keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --filename \"{keyword}-{original_name}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Photos Library Metadata with OSXPhotos Python\nDESCRIPTION: This Python snippet demonstrates how to print the filename, creation date, title, and keywords for all photos in an Apple Photos library using the osxphotos package. It requires the osxphotos dependency to be installed and will initialize a PhotosDB object, then iterate through all PhotoInfo objects in the database to extract their respective properties. It expects access to a Photos Library on the host system and outputs text information for each photo to stdout.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"print filename, date created, title, and keywords for all photos in Photos library\"\"\"\n\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    for photo in photosdb.photos():\n        print(photo.original_filename, photo.date, photo.title, photo.keywords)\n\n```\n\n----------------------------------------\n\nTITLE: Generating JSON sidecar content for exiftool in Python\nDESCRIPTION: Shows the function signature for exiftool_json_sidecar and how to use it to generate JSON sidecar content compatible with exiftool. This function creates a JSON representation of the photo's metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_139\n\nLANGUAGE: python\nCODE:\n```\ndef exiftool_json_sidecar(\n    photo: PhotoInfo,\n    options: ExportOptions | ExifOptions | None = None,\n    tag_groups: bool = True,\n    filename: str | None = None,\n) -> str:\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import exiftool_json_sidecar\n\nsidecar = exiftool_json_sidecar(photo, options, tag_groups, filename)\n```\n\n----------------------------------------\n\nTITLE: Exporting By Keyword Tag (Multiple Values) – Shell\nDESCRIPTION: Illustrates exporting photos into directories according to the 'keyword' metadata field, which may yield multiple values for a single image. osxphotos will export one copy of the file for each expanded keyword. Useful for categorizing based on user-assigned tags in Photos. Beware of duplication if assets have several keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{keyword}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Photos Library for Export - osxphotos - Shell\nDESCRIPTION: Uses the --library option to explicitly specify the path to a Photos library other than the default or last-opened library. This allows exporting from a specific library when multiple are present on the system. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --library ~/Pictures/MyAlternateLibrary.photoslibrary\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Albums with osxphotos (Python)\nDESCRIPTION: Shows how to find photos contained in any of several albums using the albums argument of PhotosDB.photos(). Accepts a list of album names and returns all PhotoInfo objects from any listed album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(albums=[\"Summer Vacation\", \"Ski Trip\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with Combined Keyword and Person Filters (Python)\nDESCRIPTION: Retrieves all photos matching any of the specified keywords and containing a specific person using the osxphotos PhotosDB.photos() method. Requires the keywords and persons arguments as lists. Returns all PhotoInfo objects matching both criteria.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nphotos=photosdb.photos(keywords=[\"wedding\",\"birthday\"],persons=[\"Juan Rodriguez\"])\n```\n\n----------------------------------------\n\nTITLE: Conditional Directory Export using osxphotos Templates (Shell)\nDESCRIPTION: Example of using a conditional template (`{field condition?true_value,false_value}`) within a shell command argument (`--directory`) for `osxphotos export`. Photos matching the condition (keywords 'travel' or 'vacation', case-insensitive) are placed in 'Travel-Photos', others in 'Not-Travel-Photos'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_46\n\nLANGUAGE: Shell\nCODE:\n```\n--directory \"{keyword|lower matches travel|vacation?Travel-Photos,Not-Travel-Photos}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Comment Using xattr-template via osxphotos (Shell)\nDESCRIPTION: Exports photos and sets the Finder comment attribute using the --xattr-template flag. The template string \"{title}{newline}{descr}\" inserts the title, a newline, and the description into Finder comments. osxphotos must be installed; the input is a valid export path and proper template syntax. Handles empty fields by inserting empty lines, unless precautions are taken with advanced templating. Resulting Finder comment is shown in Finder's info pane.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{newline}{descr}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata to XMP Sidecar Files (Shell)\nDESCRIPTION: Exports photos and creates separate XMP sidecar files containing the photo's metadata instead of embedding it directly. This uses the `--sidecar XMP` option and does not require `exiftool` to be installed. The sidecar file will be named like 'photoname.ext.XMP'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP\n```\n\n----------------------------------------\n\nTITLE: Using Default Values for Template Fields in OSXPhotos Template Language (plaintext)\nDESCRIPTION: Demonstrates usage of optional default values when a template field has no value. If no default is provided, an underscore (_) is used. Defaults can also be used to customize output for fields like dates using strftime templates or to override media_type outputs. For example, \"{title,I have no title}\" renders \"I have no title\" if the photo title is missing.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_65\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{title}\"  # Renders \"_\" if title is empty\\n\"{title,I have no title}\"  # Renders \"I have no title\" if title is empty\\n\"{created.strftime,%Y-%m-%d-%H%M%S}\"  # Formats creation date\\n\"{media_type,video=vidéo;time_lapse=vidéo_accélérée}\"  # Overrides media type names\n```\n\n----------------------------------------\n\nTITLE: Exporting Recently Added Photos using --added-in-last Option in osxphotos CLI\nDESCRIPTION: This snippet exports only photos added to the library within a recent time window (\"1 week\" in this case) using the --added-in-last option. Input uses a relative time string. Dependencies: osxphotos CLI. Output: Recently imported or taken images. Limitation: The format and interpretation of the time window must be supported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_40\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --added-in-last \"1 week\"\n```\n\n----------------------------------------\n\nTITLE: Writing Finder Tags from Keywords - osxphotos CLI\nDESCRIPTION: Shows how to write image keywords to Finder tags using the `--finder-tag-keywords` option during export. This allows photos to be searched in Spotlight or Finder using the `tag:tagname` syntax without modifying the image file itself.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_38\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords\n```\n\n----------------------------------------\n\nTITLE: Get Folder Names from PhotosDB in Python\nDESCRIPTION: Retrieves a list of names of top-level folders in the database using the `folders` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. Returns a list of strings representing the folder names. Only implemented for Photos 5 (Catalina).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folders\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run Export with Verbose Output\nDESCRIPTION: Command for testing an export without actually exporting files. Combines --dry-run with --verbose to preview what would be exported, useful for testing templates and export options.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Template Fields in osxphotos\nDESCRIPTION: Demonstrates using parentheses `()` to pass arguments to template fields like `{folder_album}`. This example changes the path separator used when joining folder and album names. Assumes the photo is in 'Album1' within 'Folder1'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_42\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{folder_album}\" renders to [\"Folder1/Album1\"]\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{folder_album(>)}\" renders to [\"Folder1>Album1\"]\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{folder_album()}\" renders to [\"Folder1Album1\"]\n```\n\n----------------------------------------\n\nTITLE: Writing Photo Keywords to Finder Tags using osxphotos\nDESCRIPTION: Exports photos and uses the `--finder-tag-keywords` option to write the keywords associated with each photo into the file's Finder tags. This leverages macOS extended attributes, making keywords searchable via Finder or Spotlight without modifying the image file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords\n```\n\n----------------------------------------\n\nTITLE: Skipping Edited Photos During Export with osxphotos (Shell)\nDESCRIPTION: Illustrates the use of the `--skip-edited` flag with `osxphotos export` to prevent exporting the edited versions of photos. This ensures only the original, unedited photos are exported from the library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --skip-edited\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Edited Suffix\nDESCRIPTION: This command exports photos and renames edited photos by appending a custom suffix. It utilizes the `--edited-suffix` option. The edited images will have \"_EDIT\" appended, and the extension is changed to .jpeg. The filename template allows for dynamic suffix creation based on the photo's modification date.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_EDIT\"\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Keyword\nDESCRIPTION: Finds all photos tagged with the keyword 'wedding'. Returns a list of PhotoInfo objects matching this criteria.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos(keywords=[\"wedding\"])\n```\n\n----------------------------------------\n\nTITLE: Exporting with Place Name-Based Directory - Bash\nDESCRIPTION: This command exports photos, organizing them by country name using the `--directory` option. It leverages the `{place.name.country}` template field. Prerequisites include having osxphotos installed and photos with associated place names. It can potentially create multiple directories if the country is multi-valued.  The output is exported files in country-named subdirectories.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country}\"\n```\n\n----------------------------------------\n\nTITLE: Performing Multiple Text Replacements in osxphotos Templates\nDESCRIPTION: Shows how to perform multiple find-and-replace operations by separating `[find,replace]` pairs with the pipe `|` character within the brackets. This example replaces both slashes ('/') and colons (':') with hyphens ('-') in album names.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_44\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{album[/,-|:,-]}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Folder Names from PhotosDB in Python\nDESCRIPTION: Retrieves a list of top-level folder names in the database. Only implemented for Photos 5 (Catalina) and later; returns an empty list for earlier versions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folders\n```\n\n----------------------------------------\n\nTITLE: Retrieving Photo Adjustments Metadata using AdjustmentsInfo in OSXPhotos Python\nDESCRIPTION: AdjustmentsInfo object is returned by photo.adjustments if photo has edits, else None. It provides access to the plist dict of adjustments, raw binary data, editor app bundle ID, format identifiers and versions, timestamp of edit, decoded adjustment details if available, and associated metadata including orientation. Methods include asdict() to get dictionary representation. Only adjustments made by Photos app can be decoded, not external app edits.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nadjustments = photo.adjustments\nif adjustments is not None:\n\tplist_dict = adjustments.plist\n\traw_data = adjustments.data\n\teditor_app_id = adjustments.editor\n\tformat_id = adjustments.format_id\n\tbase_version = adjustments.base_version\n\tformat_version = adjustments.format_version\n\ttimestamp = adjustments.timestamp\n\tdecoded_adjustments = adjustments.adjustments\n\tmetadata = adjustments.adj_metadata\n\torientation = adjustments.adj_orientation\n\tas_dict = adjustments.asdict()\n```\n\n----------------------------------------\n\nTITLE: Export with Filtered Folder/Album Directory - Bash\nDESCRIPTION: This command exports photos, filtering folder/album names to select only those starting with 'Events'. It utilizes the `--directory` option with the `{folder_album|filter(startswith Events)}` template string.  Requires osxphotos. The output is photos organized only in directories whose names start with the specified string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|filter(startswith Events)}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Command Line Tool using osxphotos\nDESCRIPTION: This snippet demonstrates a simple command-line tool built with osxphotos. The `@query_command` decorator transforms the function into a Click command. This tool queries photos based on command-line options, prints the filename and date of each found photo, and utilizes verbose output.  It needs the osxphotos library. The function's docstring serves as help text.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @query_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add all the query options available in `osxphotos query` as command line options\nas well as the following options:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will perform the query and pass the list of filtered PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\nFor example, to run the command on only selected photos:\n\n    osxphotos run cli_example_1.py --selected\n\nTo run the command on all photos with the keyword \"foo\":\n\n    osxphotos run cli_example_1.py --keyword foo\n\nFor more advanced example, see `cli_example_2.py`\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import query_command, verbose\n\n\n@query_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Conditional Operations\nDESCRIPTION: Shows how to use variables in conditional operations, with variables properly enclosed in braces when used as conditional or default values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_75\n\nLANGUAGE: plaintext\nCODE:\n```\n{var:name,Katie}{person contains {%name}?{%name},Not-{%name}}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Metadata as XMP Sidecar Files using osxphotos CLI\nDESCRIPTION: This command exports photos and writes associated metadata into XMP sidecar files instead of embedding it into the images. The --sidecar XMP flag enables XMP sidecar generation, compatible with many DAM apps. Dependencies: osxphotos CLI. Inputs: Photos library, path to export. Outputs: Photos and matching .XMP files containing metadata. Limitation: File naming follows 'photoname.ext.XMP' by default.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_25\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP\n```\n\n----------------------------------------\n\nTITLE: Writing Metadata During Export with exiftool - osxphotos Command Line - Shell\nDESCRIPTION: Exports photos while writing standard and customizable metadata tags via exiftool using the --exiftool option. Optional --keyword-template allows creation of keywords from templates, e.g., folder/album hierarchy or machine learning labels. Input requires exiftool, the export path, and optional template arguments. Output is images with embedded or extended metadata. Limitations: exiftool must be installed; template fields may insert defaults only for --directory/--filename, not --keyword-template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{folder_album(>)}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label}\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label,nolabel}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Attributes with osxphotos Export (Shell)\nDESCRIPTION: Set various Finder and Spotlight extended attributes (like comment, description, authors, etc.) using the `--xattr-template ATTRIBUTE TEMPLATE` option. The template string allows inserting photo metadata and special characters like `{newline}`. Complex template expressions support conditional logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_44\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{newline}{descr}\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title,}{title?{descr?{newline},},}{descr,}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Screenshots in 2019 using osxphotos\nDESCRIPTION: This Python code snippet demonstrates how to query the Photos library for screenshots taken in the year 2019. It uses the osxphotos library to create a PhotosDB object, then queries for photos matching the screenshot and year criteria.  The results are then iterated through to print the original filename and creation date of each matching photo.  Dependencies include osxphotos library and requires a valid Photos library to be accessible.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n```python\n\"\"\"Find all screenshots taken in 2019\"\"\"\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    results = photosdb.query(osxphotos.QueryOptions(screenshot=True, year=[2019]))\n    for photo in results:\n        print(photo.original_filename, photo.date)\n```\n```\n\n----------------------------------------\n\nTITLE: Converting and Exporting Photos as JPEG using osxphotos\nDESCRIPTION: Converts non-JPEG images (like RAW files) to JPEG format during export using the `--convert-to-jpeg` option and allows specifying the JPEG quality (0.0 to 1.0) with the `--jpeg-quality` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_48\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --convert-to-jpeg --jpeg-quality 0.9\n```\n\n----------------------------------------\n\nTITLE: Export Based on Keywords with Directory - Bash\nDESCRIPTION: This command exports photos, creating a directory for each keyword associated with a photo.  It utilizes the `--directory` option and the `{keyword}` template field. It will create multiple copies if a photo has multiple keywords. It requires osxphotos to be correctly installed. The expected output is multiple copies of a single image exported to different keyword-based directories (e.g., Travel/IMG_1234.JPG, Vacation/IMG_1234.JPG).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{keyword}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Metadata with ExifTool\nDESCRIPTION: Uses the external ExifTool (https://exiftool.org) to extract specific metadata tags from the image file. Format is {exiftool:GROUP:TAGNAME}, e.g., {exiftool:EXIF:Make}. ExifTool must be installed and in the system PATH. See ExifTool documentation for valid GROUP:TAGNAME combinations.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_82\n\nLANGUAGE: Template Language\nCODE:\n```\n{exiftool:GROUP:TAGNAME}\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Command for Logging - osxphotos CLI\nDESCRIPTION: Shows how to use the `--post-command CATEGORY COMMAND` option to run a shell command against exported files. This example uses the `exported` category and a command template to append the filepath and keywords to a log file, properly quoting the output for the shell.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_46\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"echo {shell_quote,{filepath}{comma}{,+keyword,}} >> {shell_quote,{export_dir}/exported.txt}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Photos\nDESCRIPTION: Queries photos from the PhotosDB object using various filters such as keywords, UUIDs, persons, albums, dates, and trash status. It returns a list of PhotoInfo objects that match the specified criteria. If no parameters are given, it returns all photos. Filters can be used in conjunction.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos([keywords=['keyword',]], [uuid=['uuid',]], [persons=['person',]], [albums=['album',]],[from_date=datetime.datetime],[to_date=datetime.datetime])\n```\n\nLANGUAGE: python\nCODE:\n```\nphotos = photosdb.photos(\n    keywords = [],\n    uuid = [],\n    persons = [],\n    albums = [],\n    images = bool,\n    movies = bool,\n    from_date = datetime.datetime,\n    to_date = datetime.datetime,\n    intrash = bool,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nphotos=photosdb.photos(keywords=[\"wedding\",\"birthday\"],persons=[\"Juan Rodriguez\"])\n```\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos(keywords=[\"wedding\"])\n```\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(persons=[\"Maria Smith\"])\n```\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(albums=[\"Summer Vacation\", \"Ski Trip\"])\n```\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(uuid=[\"osMNIO5sQFGZTbj9WrydRB\"])\n```\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos1 = photosdb.photos(albums=[\"Vacation 2019\"])\nphotos2 = photosdb.photos(keywords=[\"Kids\"])\nphotos3 = [p for p in photos2 if p not in photos1]\n```\n\nLANGUAGE: python\nCODE:\n```\nmovies = photosdb.photos(images=False, movies=True)\n```\n\n----------------------------------------\n\nTITLE: Exporting by Date with OSXphotos\nDESCRIPTION: This command exports photos, organizing them into directories based on their creation date (year, month, and day). The `--export-by-date` option provides an alternative to exporting all photos to a single folder, creating a more organized structure.  It uses the directory /path/to/export as the destination.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --export-by-date\n```\n\n----------------------------------------\n\nTITLE: Get Album Names from PhotosDB in Python\nDESCRIPTION: Retrieves a list of album names found in the Photos library using the `albums` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. Returns a list of strings representing the album names. In Photos 5.0, duplicate album names are treated as a single album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbum_names = photosdb.albums\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Date-Based Edited Suffix\nDESCRIPTION: This command exports photos and uses the `--edited-suffix` option to add the modification date to the edited image filename. The template string `_{modified.year}-{modified.mm}-{modified.dd}` will generate a date-formatted suffix, appended to the image's name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_{modified.year}-{modified.mm}-{modified.dd}\"\n```\n\n----------------------------------------\n\nTITLE: Changing Edited Photo Suffix - osxphotos - Shell\nDESCRIPTION: Uses the --edited-suffix option to change the default _edited suffix applied to exported edited photos. In this example, the suffix is changed to _EDIT. This option affects the filename of the edited version when both original and edited are exported or only the edited version is exported. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_EDIT\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata to XMP Sidecar Files using osxphotos\nDESCRIPTION: This command illustrates how to export photo metadata to XMP sidecar files using the `--sidecar XMP` option. This eliminates the need for installing exiftool and supports the use of template options such as `--keyword-template`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP\n```\n\n----------------------------------------\n\nTITLE: Converting Images to JPEG on Export - osxphotos CLI\nDESCRIPTION: Demonstrates how to convert non-JPEG images (like RAW) to JPEG during the export process using osxphotos. The `--convert-to-jpeg` option enables the conversion, and `--jpeg-quality` allows specifying the desired quality level (0.0 to 1.0).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_37\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --convert-to-jpeg --jpeg-quality 0.9\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata Sidecar Files (XMP, JSON) - osxphotos Command Line - Shell\nDESCRIPTION: Utilizes the --sidecar option to export metadata sidecar files in XMP or JSON format compatible with exiftool, without requiring exiftool installation. Optional -sidecar-drop-ext alters naming conventions of sidecar files to drop the photo extension. Input is the export path and sidecar options. Output is sidecar files for use in digital asset management workflows. Applicable for integration with apps like Lightroom, Digikam, etc.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP -sidecar-drop-ext\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Photos Libraries with compare_photos_libraries (Python)\nDESCRIPTION: Defines the API for the 'compare_photos_libraries' function, which takes two PhotosDB objects and optional callable hooks to customize verbose output, signature calculation, and diff logic. The function returns a 'PhotosDBDiff' object representing differences and similarities between two libraries. Dependencies are strictly 'osxphotos' and its PhotosDB/PhotoInfo classes. Expected input includes initialized PhotosDB objects; output is the PhotosDBDiff dataclass instance. This snippet provides a full type-annotated signature and thorough doctring with details on extensibility and logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ndef compare_photos_libraries(\n    library_a: PhotosDB,\n    library_b: PhotosDB,\n    verbose: Callable[[Any], bool] | None = None,\n    signature_function: Callable[[PhotoInfo], Any] | None = None,\n    diff_function: Callable[[PhotoInfo, PhotoInfo], Any] | None = None,\n) -> PhotosDBDiff:\n    \"\"\"Compare two Photos libraries and return a PhotosDBDiff object\n\n    Args:\n        library_a: PhotosDB object for first library\n        library_b: PhotosDB object for second library\n        verbose: function to print verbose output, defaults to None\n        signature_function: function to compute signature for a PhotoInfo object, defaults to None\n        diff_function: function to compare two PhotoInfo objects, defaults to None\n\n    Returns: PhotosDBDiff object\n\n    Note: signature_function should take a PhotoInfo object as input and return a unique\n        signature for the photo; if signature_function is None, the default signature\n        function will be used which computes a signature based on the photo's fingerprint\n        diff_function should take two PhotoInfo objects as input and return a truthy value\n        if the objects are different or a falsy value if they are the same; if diff_function\n        is None, the default diff function will be used which compares the dictionary\n        representation of the PhotoInfo objects.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing SidecarWriter (Python)\nDESCRIPTION: Shows how to import the `SidecarWriter` class from the `osxphotos.sidecars` module. This class facilitates the creation of sidecar files (XMP, JSON, exiftool format) for exported images, often used in conjunction with `PhotoExporter`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import SidecarWriter\n```\n\n----------------------------------------\n\nTITLE: Querying Large Videos and Adding to Album (Bash)\nDESCRIPTION: This command queries the Photos library for movies (`--only-movies`) larger than 200MB (`--min-size 200MB`). The results are then automatically added to an album named 'Big Videos' in the Photos app (`--add-to-album`), creating the album if it doesn't exist.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos query --only-movies --min-size 200MB --add-to-album \"Big Videos\"\n```\n\n----------------------------------------\n\nTITLE: Exporting XMP Sidecar Files without Original Extension using osxphotos\nDESCRIPTION: Exports metadata to XMP sidecar files, removing the original photo file extension from the sidecar filename (e.g., `IMG_1234.XMP` instead of `IMG_1234.JPG.XMP`) using the `--sidecar-drop-ext` option for compatibility with some applications.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_33\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP --sidecar-drop-ext\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Folder and Album using osxphotos\nDESCRIPTION: This command demonstrates how to export photos from a specific album within a specific folder using the `--regex` option in combination with the `{folder_album}` template. This allows targeting albums with the same name in different folders.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --regex \"2018/Summer Vacation\" \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in OSXPhotos Template Strings (plaintext)\nDESCRIPTION: Describes defining reusable variables inside templates using the syntax \"{var:NAME,VALUE}\", allowing complex template values to be stored and referenced multiple times with \"%NAME\". Variables facilitate replacing prohibited characters and filtering combined template values. They can also be embedded within other template fields or conditionals, improving readability and modularity.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_66\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{var:foo,bar}\"  # Defines variable %foo = 'bar'\\n\"{var:pipe,{pipe}}{title[-,%pipe]}\"  # Uses %pipe to replace '-' with '|' in title\\n\"{var:myvar,{template1&{template2,},}}{%myvar|uniq}\"  # Filters duplicates in combined templates\n```\n\n----------------------------------------\n\nTITLE: Using osxphotos with Custom Color Theme (Shell)\nDESCRIPTION: Exports photos using osxphotos while specifying a custom output color theme suitable for the terminal using the --theme option. In this example, the 'dark' theme is chosen, but any installed theme file can be used. Themes must be defined in the ~/.osxphotos/themes directory, and osxphotos will fall back to the default if not specified.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --verbose --theme dark\n```\n\n----------------------------------------\n\nTITLE: Using ExifTool from osxphotos for metadata access and modification\nDESCRIPTION: This snippet demonstrates how to instantiate and utilize osxphotos's embedded exiftool library for reading, writing, and managing photo metadata. Functions include retrieving metadata as a dictionary or JSON, setting values, and adding multiple values to tags, with examples illustrating usage for common metadata tags.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\n>>> from osxphotos.exiftool import ExifTool\n>>> exiftool = ExifTool(\"/Users/rhet/Downloads/test.jpeg\")\n>>> exifdict = exiftool.asdict()\n>>> exifdict[\"EXIF:Make\"]\n'Canon'\n>>> exiftool.setvalue(\"IPTC:Keywords\",\"Keyword1\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n'Keyword1'\n>>> exiftool.addvalues(\"IPTC:Keywords\",\"Keyword2\",\"Keyword3\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n['Keyword1', 'Keyword2', 'Keyword3']\n```\n\nLANGUAGE: python\nCODE:\n```\nExifTool(filepath, exiftool=None, large_file_support=True)\n\n* `filepath`: str, path to photo\n* `exiftool`: str, optional path to `exiftool`; if not provided, will look for `exiftool` in the system path\n* `large_file_support`: bool, if True, enables large file support in exiftool (`-api largefilesupport=1`)\n\n#### ExifTool methods\n\n* `asdict(tag_groups=True)`: returns all EXIF metadata found in the file as a dictionary in following form (Note: this shows just a subset of available metadata).  See [exiftool](https://exiftool.org/) documentation to understand which metadata keys are available. If `tag_groups` is True (default) dict keys are in form \"GROUP:TAG\", e.g. \"IPTC:Keywords\". If `tag_groups` is False, dict keys do not have group names, e.g. \"Keywords\".\n\n```python\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}```\n\n* `json()`: returns same info as `asdict()` but as a serialized JSON string.\n\n* `setvalue(tag, value)`: write to the EXIF data; use `None` to delete a tag, e.g., `exiftool.setvalue(\"XMP:Title\", \"Title of photo\")`\n\n* `addvalues(tag, *values)`: add one or more values to a tag that accepts multiple values, e.g., adding keywords. Be cautious with single-value tags as behavior may differ.\n\n* `ExifToolCaching` class caches metadata to improve performance on repeated access.\n\n* The `PhotoInfo.exiftool` property returns an `ExifToolCaching` instance.\n\n#### Implementation Note\n\n`ExifTool()` uses subprocess with `-stay_open True` to keep the `exiftool` process alive, optimizing repeated metadata operations. It follows a singleton pattern ensuring a single background process.\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from osxphotos.exiftool import ExifTool\n>>> exiftool = ExifTool(\"/Users/rhet/Downloads/test.jpeg\")\n>>> exifdict = exiftool.asdict()\n>>> exifdict[\"EXIF:Make\"]\n'Canon'\n>>> exiftool.setvalue(\"IPTC:Keywords\",\"Keyword1\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n'Keyword1'\n>>> exiftool.addvalues(\"IPTC:Keywords\",\"Keyword2\",\"Keyword3\")\nTrue\n>>> exiftool.asdict()[\"IPTC:Keywords\"]\n['Keyword1', 'Keyword2', 'Keyword3']\n```\n\n----------------------------------------\n\nTITLE: Exporting Image with XMP Sidecar (Shell)\nDESCRIPTION: Exports selected photos using `osxphotos export`, creating separate XMP sidecar files (`--sidecar xmp`) containing metadata instead of embedding it. Used for testing face region metadata in sidecars.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/export --selected --sidecar xmp\n```\n\n----------------------------------------\n\nTITLE: Extracting Minute - osxphotos\nDESCRIPTION: This tag retrieves the 2-digit minute of the current date from a photo's metadata. It's a simple extraction without any specific dependencies. The output is a 2-digit string representation of the minute.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_71\n\nLANGUAGE: string\nCODE:\n```\n{today.min}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Field Usage (osxphotos-template)\nDESCRIPTION: Demonstrates the simplest form of an osxphotos template statement. It consists of a template field name enclosed in curly braces, which resolves to the corresponding metadata value of the photo being processed. For example, `{title}` retrieves the photo's title.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_0\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{title}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Album Using OSXPhotos Python Package\nDESCRIPTION: This script exports all photos from the Photos library to a specified directory, organizing exported files into subfolders named after their albums. If a photo has edits, the edited version is also exported; otherwise the original photo is exported. The script uses the Click library for command-line interface management and the pathvalidate library to sanitize file paths. It handles missing photos by skipping them and ensures all export directories exist and are valid. Dependencies include osxphotos, click, and pathvalidate packages and requires macOS Photos library access.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/package_overview.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Export all photos to specified directory using album names as folders\n    If file has been edited, also export the edited version, \n    otherwise, export the original version \n    This will result in duplicate photos if photo is in more than album \"\"\"\n\nimport os.path\nimport pathlib\nimport sys\n\nimport click\nfrom pathvalidate import is_valid_filepath, sanitize_filepath\n\nimport osxphotos\n\n\n@click.command()\n@click.argument(\"export_path\", type=click.Path(exists=True))\n@click.option(\n    \"--default-album\",\n    help=\"Default folder for photos with no album. Defaults to 'unfiled'\",\n    default=\"unfiled\",\n)\n@click.option(\n    \"--library-path\",\n    help=\"Path to Photos library, default to last used library\",\n    default=None,\n)\ndef export(export_path, default_album, library_path):\n    export_path = os.path.expanduser(export_path)\n    library_path = os.path.expanduser(library_path) if library_path else None\n\n    if library_path is not None:\n        photosdb = osxphotos.PhotosDB(library_path)\n    else:\n        photosdb = osxphotos.PhotosDB()\n\n    photos = photosdb.photos()\n\n    for p in photos:\n        if not p.ismissing:\n            albums = p.albums\n            if not albums:\n                albums = [default_album]\n            for album in albums:\n                click.echo(f\"exporting {p.filename} in album {album}\")\n\n                # make sure no invalid characters in destination path (could be in album name)\n                album_name = sanitize_filepath(album, platform=\"auto\")\n\n                # create destination folder, if necessary, based on album name\n                dest_dir = os.path.join(export_path, album_name)\n\n                # verify path is a valid path\n                if not is_valid_filepath(dest_dir, platform=\"auto\"):\n                    sys.exit(f\"Invalid filepath {dest_dir}\")\n\n                # create destination dir if needed\n                if not os.path.isdir(dest_dir):\n                    os.makedirs(dest_dir)\n\n                # export the photo\n                if p.hasadjustments:\n                    # export edited version\n                    exported = p.export(dest_dir, edited=True)\n                    edited_name = pathlib.Path(p.path_edited).name\n                    click.echo(f\"Exported {edited_name} to {exported}\")\n                # export unedited version\n                exported = p.export(dest_dir)\n                click.echo(f\"Exported {p.filename} to {exported}\")\n        else:\n            click.echo(f\"Skipping missing photo: {p.filename}\")\n\n\nif __name__ == \"__main__\":\n    export()\n```\n\n----------------------------------------\n\nTITLE: Advanced Template for Setting Finder Comments Conditionally in osxphotos\nDESCRIPTION: Presents a complex `osxphotos export` command using `--xattr-template` to set the Finder comment (`findercomment`). It employs conditional logic within the template system (`{field?value_if_true,value_if_false}`) to combine the title and description, inserting a newline (`{newline}`) only if both fields have values, thus avoiding unwanted newlines.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title,}{title?{descr?{newline},},}{descr,}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Keyword with osxphotos (Python)\nDESCRIPTION: Illustrates how to retrieve photos tagged with a specific keyword by passing a single-element list to the keywords argument of PhotosDB.photos(). Requires a PhotosDB object and a properly specified list for keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos = photosdb.photos(keywords=[\"wedding\"])\n \n```\n\n----------------------------------------\n\nTITLE: Retrieving Albums as Dictionary\nDESCRIPTION: This snippet retrieves a dictionary of albums and their photo counts from the Photos library. It requires a pre-existing `PhotosDB` object. The dictionary keys are album names, and values are photo counts, sorted in reverse order. It correctly handles duplicate album names, treating them as a single album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nalbums_dict = photosdb.albums_as_dict\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Comments using Extended Attributes in osxphotos\nDESCRIPTION: Illustrates setting the Finder comment extended attribute using `osxphotos export` and the `--xattr-template` option. The command sets the attribute named `findercomment` to a string combining the photo's title (`{title}`) and description (`{descr}`), separated by a newline character specified by `{newline}`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{newline}{descr}\"\n```\n\n----------------------------------------\n\nTITLE: Providing Default Keywords for Photos Without Labels (Shell)\nDESCRIPTION: Exports photos using `exiftool` and adds automatic labels as keywords. For photos that have no labels assigned by Photos, it adds a default keyword 'nolabel'. This is achieved using the template `{label,nolabel}` with the `--keyword-template` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label,nolabel}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting People - osxphotos\nDESCRIPTION: This tag retrieves the person(s) / face(s) in a photo. Requires the photo to have people/faces tagged. The output is a string, potentially a list of people.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_123\n\nLANGUAGE: string\nCODE:\n```\n{person}\n```\n\n----------------------------------------\n\nTITLE: Exporting Only 'Events' Folder Albums Using osxphotos in Shell\nDESCRIPTION: This snippet demonstrates use of the filter option on the {folder_album} template to export only photos whose album or folder path starts with 'Events'. The filter(startswith Events) applies string matching within the directory structure. This requires your Photos library to be organized into an 'Events' folder and the osxphotos tool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|filter(startswith Events)}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Information from PhotosDB in Python\nDESCRIPTION: Gets a list of PersonInfo objects representing persons who appear in photos in the database. Provides more detailed information than the persons method.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nperson_info = photosdb.person_info\n```\n\n----------------------------------------\n\nTITLE: Using Sub-fields in Templates (osxphotos-template)\nDESCRIPTION: Example of accessing nested or specific data points using sub-fields. The syntax is `{template_field:subfield}`. This allows retrieval of structured metadata, like specific EXIF or IPTC tags via the `exiftool` field.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_3\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{exiftool:IPTC:Make}\"\n```\n\n----------------------------------------\n\nTITLE: Keyword Templates for Export\nDESCRIPTION: Demonstrates how to use the templating system with the --keyword-template option to set keywords on export that preserve folder and album structure.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_78\n\nLANGUAGE: plaintext\nCODE:\n```\n--keyword-template \"{folder_album}\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--keyword-template \"{folder_album(>)}\"\n```\n\n----------------------------------------\n\nTITLE: Combining Template Field Values using `&` in osxphotos\nDESCRIPTION: Demonstrates how to combine the resolved values of multiple template fields using the `&combine_value` operator. The `combine_value` is another template statement. Nesting allows combining more than two values. A null default value (e.g., `{folder_album,}`) can prevent unwanted default values from being combined if a nested template doesn't resolve.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_9\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{created.year&{folder_album,}}\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{template1&{template2&{template3,},},}\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals in osxphotos export --filename\nDESCRIPTION: Provides an example of using a conditional template statement with the osxphotos export --filename option to rename files based on whether a photo is marked as a favorite.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n--filename \"{favorite?Favorite-{original_name},{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Export with Custom Filename in OSXphotos\nDESCRIPTION: This command demonstrates how to customize the filename using the `--filename` option with the `{title}` template. This sets the title of the photo as the filename. If no title exists, the original filename is used. osxphotos automatically adds the correct file extension.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title}\"\n```\n\n----------------------------------------\n\nTITLE: Using Metadata Templates for Hierarchical Keywords - osxphotos Template Syntax - Txt\nDESCRIPTION: Demonstrates the osxphotos template system for constructing hierarchical folder/album keywords with --keyword-template. Explains the use of folder_album(>) to join folder and album names with a separator, producing output like \"Folder1>Folder2>Album\". Inputs are template strings embedded in option values. Output examples are shown, and this technique is critical for compatibility with metadata consumers like Lightroom Classic. No direct code execution; knowledge of template variables is required.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\n{folder_album(>)}\n```\n\n----------------------------------------\n\nTITLE: Calling osxphotos export CLI Programmatically (Python)\nDESCRIPTION: Demonstrates how to invoke the `osxphotos export` command-line functionality directly from a Python script using the `export_cli` function from the `osxphotos.cli.export` module. Arguments corresponding to the command-line options (like `dest` for destination and `update` for the --update flag) are passed directly to the function.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_6\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from osxphotos.cli.export import export_cli\n>>> export_cli(dest=\"/private/tmp\", update=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Library Path (PhotosDB) - Python\nDESCRIPTION: Demonstrates accessing the `library_path` property of a `PhotosDB` object. This property returns the file system path to the Photos library that the object represents. Requires an initialized `PhotosDB` object. Returns a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.library_path\n```\n\n----------------------------------------\n\nTITLE: Running pytest tests\nDESCRIPTION: This command runs the pytest test suite for the osxphotos project. It executes all tests in the project's test directory.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Within a Date Range using osxphotos CLI\nDESCRIPTION: This command restricts export to photos taken between two specified dates using --from-date and --to-date options formatted as YYYY-MM-DD. Dependencies: osxphotos CLI. Inputs: Date range, library, output directory. Output: Photos in the date interval. Limitation: Only dates recognized by Photos metadata are considered.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_39\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --from-date \"2020-01-01\" --to-date \"2020-02-28\"\n```\n\n----------------------------------------\n\nTITLE: Adding EXIF Values with ExifTool in osxphotos\nDESCRIPTION: This example shows how to add multiple values to an EXIF tag using the addvalues() method. It adds the values \"vacation\" and \"beach\" to the \"IPTC:Keywords\" tag.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nphoto.exiftool.addvalues(\"IPTC:Keywords\", \"vacation\", \"beach\")\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing Photos from iCloud - osxphotos Command Line - Shell\nDESCRIPTION: Adds --download-missing to export missing photos by triggering a download from iCloud, optionally using --use-photokit for an alternate interface. Input is the export path and download flag; output includes previously inaccessible photos. AppleScript must be available, and Photos app may be restarted during the process due to potential instability. Limitations include Photos AppleScript bugs and requirement for iCloud-synced resources.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing --use-photokit\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Custom JPEG Extension\nDESCRIPTION: Exports photos and renames all JPEG files with the specified extension (e.g., '.jpg'). Supported values are jpeg, jpg, JPEG, JPG.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --jpeg-ext jpg\n```\n\n----------------------------------------\n\nTITLE: Loading osxphotos Export Options from a Configuration File (Shell)\nDESCRIPTION: Loads a previously saved TOML configuration file for osxphotos export, simplifying repeated or scheduled exports. The --load-config flag points to the config file created by --save-config. Input is the export destination, output is an export using all configured options.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --load-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Formatting code with isort\nDESCRIPTION: This command formats the Python code using isort to sort imports. It ensures consistent code style across the project.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nisort .\n```\n\n----------------------------------------\n\nTITLE: Querying PhotosDB with QueryOptions (Python)\nDESCRIPTION: Demonstrates querying the Photos library using the `PhotosDB.query()` method combined with `QueryOptions` to specify filtering criteria. This example finds all screenshots taken in the year 2019 and iterates through the results, printing the original filename and date for each matching photo. Requires the `osxphotos` library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Find all screenshots taken in 2019\"\"\"\nimport osxphotos\n\nif __name__ == \"__main__\":\n    photosdb = osxphotos.PhotosDB()\n    results = photosdb.query(osxphotos.QueryOptions(screenshot=True, year=[2019]))\n    for photo in results:\n        print(photo.original_filename, photo.date)\n```\n\n----------------------------------------\n\nTITLE: Specifying an Alternate Photos Library with osxphotos (Shell)\nDESCRIPTION: Demonstrates using the `--library` option to explicitly target a specific Photos library file (e.g., `~/Pictures/MyAlternateLibrary.photoslibrary`) for the export operation, instead of relying on the default or last-opened library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --library ~/Pictures/MyAlternateLibrary.photoslibrary\n```\n\n----------------------------------------\n\nTITLE: Querying Photos with OSXPhotos Python Package\nDESCRIPTION: This snippet demonstrates basic usage of the OSXPhotos Python package to query photos from the Photos library. It creates a PhotosDB instance representing the current Photos library, prints the available keywords, persons, and albums, and fetches photos filtered by keywords and persons. The photos are then iterated to print various metadata fields such as UUID, filename, dates, descriptions, keywords, albums, persons, and file path. The snippet has no external dependencies beyond the osxphotos package and requires macOS with Photos app library access.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/package_overview.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" Simple usage of the package \"\"\"\nimport osxphotos\n\ndef main():\n    photosdb = osxphotos.PhotosDB()\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.album_names)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Foo and containing John Smith\n    photos = photosdb.photos(keywords=[\"Foo\"],persons=[\"John Smith\"])\n\n    # find all photos that include Alice Smith but do not contain the keyword Bar\n    photos = [p for p in photosdb.photos(persons=[\"Alice Smith\"]) \n                if p not in photosdb.photos(keywords=[\"Bar\"]) ]\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.original_filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n        )\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Adding PhotoInfo Objects to a Photos Album - osxphotos - Python\nDESCRIPTION: This snippet demonstrates how to create or retrieve a Photos album and add PhotoInfo objects to it using the osxphotos package. It imports PhotosDB and PhotosAlbum, queries for photos with a score above 0.9, and batch-adds them to a specified album using the extend method. Dependencies: osxphotos package (with photosalbum and PhotosDB), Photos application on macOS, and PhotoScript. The snippet highlights list- and set-like album interfaces (append/add for single items, extend/update for iterables). Inputs include the album name and score threshold; outputs are confirmation messages and album statistics.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_140\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"Example that shows how to add PhotoInfo objects to an album in Photos\"\"\"\n\nfrom osxphotos import PhotosDB\nfrom osxphotos.photosalbum import PhotosAlbum\n\n# If album exists it will be used, otherwise it will be created\nalbum = PhotosAlbum(\"Best Photos\")\nbest_photos = [p for p in PhotosDB(verbose=print).photos() if p.score.overall > 0.9]\n\n# use album.add() or album.append() to add a single photo\n# use album.update() or album.extend() to add an iterable of photos\nalbum.extend(best_photos)\nprint(f\"Added {len(best_photos)} photos to album {album.name}\")\nprint(f\"Album contains {len(album.photos())} photos\")\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Selection Command using osxphotos CLI (Python)\nDESCRIPTION: This snippet illustrates how to develop a custom command that operates on the user's current selection in the Photos application. It uses the `@selection_command` decorator to receive a list of selected `PhotoInfo` objects and demonstrates simple processing and verbose output.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @selection_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add the following options to your command:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will get the selected photos and pass the list of PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import selection_command, verbose\n\n\n@selection_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample command for osxphotos. Prints out the filename and date of each photo\n    currently selected in Photos.app.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV Export Report\nDESCRIPTION: Command for generating a detailed CSV report of all exported files. The report includes information about files that were exported, skipped, or missing during the export operation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.csv\n```\n\n----------------------------------------\n\nTITLE: Reading EXIF Metadata with ExifTool in osxphotos\nDESCRIPTION: This code shows how to read EXIF metadata from a file using the ExifTool. The asdict() method returns a dictionary containing the metadata. The example output demonstrates various EXIF tags and their values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_133\n\nLANGUAGE: python\nCODE:\n```\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Paths for All Raw Photos in osxphotos (pycon)\nDESCRIPTION: Demonstrates iterating through photos from an `osxphotos.PhotosDB` instance to identify all raw photos (standalone or part of a pair) using the `israw` and `has_raw` attributes. It then prints the correct path to the raw file using either the `path` attribute (for standalone raw) or the `path_raw` attribute (for raw+JPEG pairs).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_37\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photos = photosdb.photos()\n>>> all_raw = [p for p in photos if p.israw or p.has_raw]\n>>> for raw in all_raw:\n...     path = raw.path if raw.israw else raw.path_raw\n...     print(path)\n```\n\n----------------------------------------\n\nTITLE: Using Text Detection Template in osxphotos\nDESCRIPTION: Enables text detection on photos using built-in macOS algorithms. Supports an optional confidence threshold parameter (0.0-1.0) with default of 0.75. Requires macOS Catalina (10.15) or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_104\n\nLANGUAGE: plain\nCODE:\n```\n{detected_text}\n```\n\nLANGUAGE: plain\nCODE:\n```\n{detected_text:0.5}\n```\n\n----------------------------------------\n\nTITLE: Opening Default (Last Opened) Photos Library\nDESCRIPTION: Opens the Photos library that would open if the user launched Photos.app. Uses get_last_library_path() to determine the path to the last opened library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\nphotosdb = osxphotos.PhotosDB(osxphotos.utils.get_last_library_path())\n```\n\n----------------------------------------\n\nTITLE: Generating XMP sidecar content in Python\nDESCRIPTION: Code showing the function signature for xmp_sidecar and how to use it to generate an XMP sidecar string for a photo. This can be used to create XMP sidecar files with metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_138\n\nLANGUAGE: python\nCODE:\n```\ndef xmp_sidecar(\n    photo: PhotoInfo,\n    options: ExportOptions | None = None,\n    extension: str | None = None,\n) -> str:\n    \"\"\"Returns string for XMP sidecar\n\n    Args:\n        photo (PhotoInfo): photo to generate sidecars\n        options (ExportOptions): options for export\n        extension (Optional[str]): which extension to use for SidecarForExtension property\n\n    Returns:\n        str: string containing XMP sidecar\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import xmp_sidecar\n\nsidecar = xmp_sidecar(photo, options, extension)\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Warning/Error Messages (Shell)\nDESCRIPTION: Demonstrates using a presumed custom shell function `echo_error` to print formatted warning and error messages to the console, potentially including emojis for visibility.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho_error(\"[warning]This is a warning message!\")\necho_error(\"[error]This is an error message!\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Original if Edited\nDESCRIPTION: This command exports either the original or the edited photo, but not both, using `--skip-original-if-edited`. This option checks if an image has an edited version and exports only the appropriate version.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --skip-original-if-edited\n```\n\n----------------------------------------\n\nTITLE: CLI Entry Point Using Click\nDESCRIPTION: Defines the CLI entry point for the OSXPhotos application using the Click library, specifying the command name and nesting configuration.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/cli.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclick:: osxphotos.cli:cli_main\n:prog: osxphotos\n:nested: full\n```\n\n----------------------------------------\n\nTITLE: Managing osxphotos Export Configuration (Shell)\nDESCRIPTION: Save a complex set of `osxphotos export` command-line options to a TOML configuration file using `--save-config FILE` for later reuse. Load a saved configuration using `--load-config FILE` instead of typing all options repeatedly. This is useful for automating regular export tasks.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_45\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export <all your options here> --update --save-config osxphotos.toml\n```\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --load-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Updating a Previous Export with osxphotos\nDESCRIPTION: Command for updating a previous export of Photos library. This uses the --update flag to only export new or changed files since the last export by reading from the .osxphotos_export.db database file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update\n```\n\n----------------------------------------\n\nTITLE: Adding Default Keyword for Missing Labels using osxphotos\nDESCRIPTION: This command demonstrates how to add a default keyword (e.g., \"nolabel\") to photos that don't have any existing labels. This is achieved using the `{label,nolabel}` template within the `--keyword-template` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label,nolabel}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Album using osxphotos\nDESCRIPTION: This command demonstrates how to export only photos contained in a specific album (e.g., \"Summer Vacation\") using the `--album` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --album \"Summer Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos By Date with OSXPhotos – Shell\nDESCRIPTION: Exports all photos into a directory hierarchy organized by the creation date (year/month/day). Adds the --export-by-date option so photos and videos are grouped in folders by when they were taken. Requires a valid export path and a compatible Photos Library. Output folders will use the YYYY/MM/DD structure based on asset creation dates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --export-by-date\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Using Regular Expression Pattern Matching\nDESCRIPTION: Command for exporting photos from a specific album in a specific folder using regular expressions. This example matches photos from the \"Summer Vacation\" album inside the \"2018\" folder.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --regex \"2018/Summer Vacation\" \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Boolean Evaluation osxphotos Template\nDESCRIPTION: Describes the '?bool_value' modifier for evaluating a template field as a boolean (True/False). If the field evaluates to True or has a value, the text after '?' is rendered; otherwise, the text after ',' (the default value) is used. Both conditional values and the default may be empty, resulting in an empty string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_52\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{hdr?ISHDR,NOTHDR}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Sequence in Album\nDESCRIPTION: Provides the zero-based index of the photo within its containing album. Only valid in '--filename' when '{album}' or '{folder_album}' is used in '--directory'. Can specify a starting value (e.g., {album_seq(1)}) and apply Python formatting (e.g., {album_seq:05d}). May be incorrect with duplicate album names.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_51\n\nLANGUAGE: Template Language\nCODE:\n```\n{album_seq}\n{album_seq(start)}\n{album_seq:format_spec(start)}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Boolean Values with ?bool_value\nDESCRIPTION: Explains how to evaluate template fields as boolean values using the `?bool_value` operator. If the field is True or has any value, the value following the `?` is used; otherwise, the default value after the `,` is used. This allows for conditional rendering of template values based on field states.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_98\n\nLANGUAGE: text\nCODE:\n```\n`?bool_value`: Template fields may be evaluated as boolean (True/False) by appending \"?\" after the field name (and following \"(field_arg)\" or \"[find/replace]\".  If a field is True (e.g. photo is HDR and field is `\"{hdr}\"`) or has any value, the value following the \"?\" will be used to render the template instead of the actual field value.  If the template field evaluates to False (e.g. in above example, photo is not HDR) or has no value (e.g. photo has no title and field is `\"{title}\"`) then the default value following a \",\" will be used.\n\ne.g. if photo is an HDR image,\n\n- `\"{hdr?ISHDR,NOTHDR}\"` renders to `\"ISHDR\"`\n\nand if it is not an HDR image,\n\n- `\"{hdr?ISHDR,NOTHDR}\"` renders to `\"NOTHDR\"`\n```\n\n----------------------------------------\n\nTITLE: Updating Export with Only New Photos using osxphotos\nDESCRIPTION: Uses `--update` to perform an incremental export but restricts it to only photos that are new to the library since the last update, ignoring previously exported files that are no longer present in the export location. This is achieved with the `--only-new` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_35\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --update --only-new\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour - osxphotos\nDESCRIPTION: This tag extracts the 2-digit hour of the current date from a photo's metadata. It doesn't have any dependencies and directly accesses the hour information. The output is a 2-digit string representing the hour of the day.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_70\n\nLANGUAGE: string\nCODE:\n```\n{today.hour}\n```\n\n----------------------------------------\n\nTITLE: Custom Directory Structure with OSXphotos\nDESCRIPTION: This command demonstrates how to customize the directory structure using the `--directory` option and the osxphotos template system. The template string specifies the desired organization, in this case, year and month. It organizes exported files into directories based on the metadata from the photo. The command exports to /path/to/export, using the year and month of photo creation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{created.month}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Default Keyword for Missing Labels using osxphotos\nDESCRIPTION: Shows how to use the `--keyword-template` to add a default keyword (\"nolabel\") for photos that do not have any labels, utilizing the template's ability to provide a fallback value.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label,nolabel}\"\n```\n\n----------------------------------------\n\nTITLE: Get Album Info from PhotosDB in Python\nDESCRIPTION: Retrieves a list of `AlbumInfo` objects representing albums in the database using the `album_info` attribute of the `PhotosDB` object.  Requires an initialized `PhotosDB` object. Returns an empty list if there are no albums.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums = photosdb.album_info\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persons as Dictionary\nDESCRIPTION: This snippet retrieves a dictionary of persons (faces) and their counts from the Photos library. It requires a pre-existing `PhotosDB` object. The dictionary keys are person names, and values are their appearance counts, sorted in reverse order. It assumes that multiple persons with the same name are treated as a single person. It is important to have initialized the PhotosDB object correctly. See the documentation for `persons_as_dict`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\npersons_dict = photosdb.persons_as_dict\n```\n\n----------------------------------------\n\nTITLE: Exporting Portrait Mode Photos Only\nDESCRIPTION: Command for exporting only photos taken with iPhone Portrait Mode. This demonstrates filtering by a specific photo mode or characteristic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --portrait\n```\n\n----------------------------------------\n\nTITLE: Conditional Filename with OSXphotos\nDESCRIPTION: This command adds '#' to the filename for photos marked as 'Favorites', showcasing the limited conditional logic available with the `--filename` option and the '?` operator. The command illustrates adding conditional text based on whether the photo is a favorite. It adds '#' to the file name if the photo is a favorite.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{original_name}{favorite?#,}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata to XMP Sidecar Files using osxphotos\nDESCRIPTION: Exports photo metadata into separate XMP sidecar files alongside the exported images using the `--sidecar XMP` option. This method does not require the external exiftool utility.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_32\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP\n```\n\n----------------------------------------\n\nTITLE: Getting ISO Country Code from Reverse Geolocation\nDESCRIPTION: Retrieves the ISO country code (e.g., 'US', 'GB') from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_30\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.country_code}\n```\n\n----------------------------------------\n\nTITLE: Using the osxphotos export Command\nDESCRIPTION: Displays the help information and usage instructions for the `osxphotos export` command. It explains how to specify the destination path (DEST) and use various options to filter photos based on criteria like keywords, persons, albums, dates, metadata attributes (edited, favorite, hidden, location, etc.), and media types. Multiple query options of different types act as AND filters, while multiple options of the same type act as OR filters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_59\n\nLANGUAGE: Shell\nCODE:\n```\nUsage: osxphotos export [OPTIONS] DEST\n\n  Export photos from the Photos database. Export path DEST is required.\n\n  Optionally, query the Photos database using 1 or more search options; if more\n  than one different option is provided, they are treated as \"AND\" (e.g. search\n  for photos matching all options). If the same query option is provided\n  multiple times, they are treated as \"OR\" (e.g. search for photos matching any\n  of the options). If no query options are provided, all photos will be\n  exported.\n\n  For example, adding the query options:\n\n  --person \"John Doe\" --person \"Jane Doe\" --keyword \"vacation\"\n\n  will export all photos with either person of (\"John Doe\" OR \"Jane Doe\") AND\n  keyword of \"vacation\"\n\n  By default, all versions of all photos will be exported including edited\n  versions, live photo movies, burst photos, and associated raw images. See\n  --skip-edited, --skip-live, --skip-bursts, and --skip-raw options to modify\n  this behavior.\n\nOptions:\n  --library, --db PHOTOS_LIBRARY_PATH\n                                  Specify path to Photos library. If not\n                                  provided, will attempt to find the library to\n                                  use in the following order: 1. last opened\n                                  library, 2. system library, 3.\n                                  ~/Pictures/Photos Library.photoslibrary\n  -V, --verbose                   Print verbose output; may be specified\n                                  multiple times for more verbose output.\n  --timestamp                     Add time stamp to verbose output\n  --no-progress                   Do not display progress bar during export.\n  --keyword KEYWORD               Search for photos with keyword KEYWORD. If\n                                  more than one keyword, treated as \"OR\", e.g.\n                                  find photos matching any keyword\n  --no-keyword                    Search for photos with no keyword.\n  --person PERSON                 Search for photos with person PERSON. If more\n                                  than one person, treated as \"OR\", e.g. find\n                                  photos matching any person\n  --album ALBUM                   Search for photos in album ALBUM. If more than\n                                  one album, treated as \"OR\", e.g. find photos\n                                  matching any album\n  --folder FOLDER                 Search for photos in an album in folder\n                                  FOLDER. If more than one folder, treated as\n                                  \"OR\", e.g. find photos in any FOLDER.  Only\n                                  searches top level folders (e.g. does not look\n                                  at subfolders)\n  --name FILENAME                 Search for photos with filename matching\n                                  FILENAME. If more than one --name options is\n                                  specified, they are treated as \"OR\", e.g. find\n                                  photos matching any FILENAME.\n  --uuid UUID                     Search for photos with UUID(s). May be\n                                  repeated to include multiple UUIDs.\n  --uuid-from-file FILE           Search for photos with UUID(s) loaded from\n                                  FILE. Format is a single UUID per line. Lines\n                                  preceded with # are ignored. If FILE is '-',\n                                  read UUIDs from stdin.\n  --title TITLE                   Search for TITLE in title of photo.\n  --no-title                      Search for photos with no title.\n  --description DESC              Search for DESC in description of photo.\n  --no-description                Search for photos with no description.\n  --place PLACE                   Search for PLACE in photo's reverse\n                                  geolocation info\n  --no-place                      Search for photos with no associated place\n                                  name info (no reverse geolocation info)\n  --location                      Search for photos with associated location\n                                  info (e.g. GPS coordinates)\n  --no-location                   Search for photos with no associated location\n                                  info (e.g. no GPS coordinates)\n  --label LABEL                   Search for photos with image classification\n                                  label LABEL (Photos 5+ only). If more than one\n                                  label, treated as \"OR\", e.g. find photos\n                                  matching any label\n  --uti UTI                       Search for photos whose uniform type\n                                  identifier (UTI) matches UTI\n  -i, --ignore-case               Case insensitive search for title,\n                                  description, place, keyword, person, or album.\n  --edited                        Search for photos that have been edited.\n  --not-edited                    Search for photos that have not been edited.\n  --external-edit                 Search for photos edited in external editor.\n  --favorite                      Search for photos marked favorite.\n  --not-favorite                  Search for photos not marked favorite.\n  --hidden                        Search for photos marked hidden.\n  --not-hidden                    Search for photos not marked hidden.\n  --shared                        Search for photos in shared iCloud album\n                                  (Photos 5+ only).\n  --not-shared                    Search for photos not in shared iCloud album\n                                  (Photos 5+ only).\n  --burst                         Search for photos that were taken in a burst.\n  --not-burst                     Search for photos that are not part of a\n                                  burst.\n  --live                          Search for Apple live photos\n  --not-live                      Search for photos that are not Apple live\n                                  photos.\n  --portrait                      Search for Apple portrait mode photos.\n  --not-portrait                  Search for photos that are not Apple portrait\n                                  mode photos.\n  --screenshot                    Search for screenshot photos.\n  --not-screenshot                Search for photos that are not screenshot\n                                  photos.\n  --screen-recording              Search for screen-recording videos.\n  --not-screen-recording          Search for photos that are not screen\n                                  recording videos.\n  --slow-mo                       Search for slow motion videos.\n  --not-slow-mo                   Search for photos that are not slow motion\n                                  videos.\n  --time-lapse                    Search for time lapse videos.\n  --not-time-lapse                Search for photos that are not time lapse\n                                  videos.\n  --hdr                           Search for high dynamic range (HDR) photos.\n  --not-hdr                       Search for photos that are not HDR photos.\n  --selfie                        Search for selfies (photos taken with front-\n                                  facing cameras).\n  --not-selfie                    Search for photos that are not selfies.\n  --panorama                      Search for panorama photos.\n  --not-panorama                  Search for photos that are not panoramas.\n  --has-raw                       Search for photos with both a jpeg and raw\n                                  version\n  --only-movies                   Search only for movies (default searches both\n                                  images and movies).\n  --only-photos                   Search only for photos/images (default\n                                  searches both images and movies).\n  --from-date DATE                Search for items created on or after DATE,\n                                  e.g. 2000-01-12T12:00:00,\n                                  2001-01-12T12:00:00-07:00, or 2000-12-31 (ISO\n                                  8601 with/without timezone).\n  --to-date DATE                  Search for items created before DATE, e.g.\n                                  2000-01-12T12:00:00,\n                                  2001-01-12T12:00:00-07:00, or 2000-12-31 (ISO\n                                  8601 with/without timezone).\n  --from-time TIME                Search for items created on or after TIME of\n                                  day, e.g. 12:00, or 12:00:00.\n  --to-time TIME                  Search for items created before TIME of day,\n                                  e.g. 12:00 or 12:00:00.\n  --year YEAR                     Search for items from a specific year, e.g.\n                                  --year 2022 to find all photos from the year\n                                  2022. May be repeated to search multiple\n                                  years.\n  --added-before DATE             Search for items added to the library before a\n                                  specific date/time, e.g. --added-before e.g.\n                                  2000-01-12T12:00:00,\n                                  2001-01-12T12:00:00-07:00, or 2000-12-31 (ISO\n                                  8601 with/without timezone).\n  --added-after DATE              Search for items added to the library on or\n                                  after a specific date/time, e.g. --added-after\n                                  e.g. 2000-01-12T12:00:00,\n                                  2001-01-12T12:00:00-07:00, or 2000-12-31 (ISO\n                                  8601 with/without timezone).\n  --added-in-last TIME_DELTA      Search for items added to the library in the\n```\n\n----------------------------------------\n\nTITLE: Getting Persons in Photo\nDESCRIPTION: Retrieves the name(s) of the person(s) identified in the photo.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_78\n\nLANGUAGE: Template Language\nCODE:\n```\n{person}\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Accessing Activity Metadata in osxphotos Python Scripts\nDESCRIPTION: This variable retrieves the 'Activities' associated with a photo, such as 'Sporting Event', automatically added by Photos' image categorization algorithms for photos taken in specific contexts, aiding in categorization or filtering scripts.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_85\n\nLANGUAGE: Python\nCODE:\n```\n{searchinfo.activity}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Keyword using osxphotos\nDESCRIPTION: This command shows how to export only photos that contain a specific keyword (e.g., \"Travel\") using the `--keyword` option.  Multiple `--keyword` options can be used to specify multiple keywords (OR condition).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\" --keyword \"Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Combining Template Values osxphotos Template\nDESCRIPTION: Explains how to use the '&combine_value' operator to merge the results of multiple template statements. The operator concatenates the resolved values, and multiple template statements can be nested within the combine operation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_51\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{created.year&{folder_album,}}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{template1&{template2&{template3,},},}\n```\n\n----------------------------------------\n\nTITLE: Getting Area of Interest from Reverse Geolocation\nDESCRIPTION: Retrieves the name of an area of interest (e.g., landmark, public place) from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_34\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.name.area_of_interest}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values and Sub-Templates osxphotos Template\nDESCRIPTION: Illustrates the use of the ',default' modifier to provide a fallback value when a template field is null or evaluates to False (in a boolean context). This modifier also serves to pass sub-templates, such as strftime formats for date fields or lookup tables for value customization like media types.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_53\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{title}\"\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{title,I have no title}\"\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{created.strftime,%Y-%m-%d-%H%M%S}\"\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{media_type,video=vidéo;time_lapse=vidéo_accélérée}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Matching Any of Multiple Keywords using osxphotos CLI\nDESCRIPTION: This command demonstrates how to filter exported photos by multiple keywords using repeated --keyword options. Only photos matching 'Travel' or 'Vacation' keywords are exported. Dependencies: osxphotos CLI. Inputs: Photos library and target path. Output: Photos matching either keyword. Limitation: Logical OR grouping only, not AND.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_35\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\" --keyword \"Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Parenthesis - osxphotos\nDESCRIPTION: This tag inserts an open parenthesis into the output. It has no dependencies. The output is an open parenthesis: '('.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_106\n\nLANGUAGE: string\nCODE:\n```\n{openparens}\n```\n\n----------------------------------------\n\nTITLE: Advanced Finder Comment Templating with Nested Conditionals via osxphotos (Shell)\nDESCRIPTION: Uses osxphotos --xattr-template with a complex, nested conditional template to format Finder comments. The template \"{title,}{title?{descr?{newline},},}{descr,}\" conditionally inserts title, newline, and description, depending on their presence, using osxphotos' template boolean and fallback features. Useful for skipping empty lines. Requires a compatible osxphotos version with support for advanced templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title,}{title?{descr?{newline},},}{descr,}\"\n```\n\n----------------------------------------\n\nTITLE: Using asdict() method to retrieve EXIF metadata\nDESCRIPTION: Demonstrates the output format of the ExifToolCaching.asdict() method which returns all EXIF metadata as a dictionary with GROUP:TAG formatted keys when tag_groups=True.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Country Address - osxphotos\nDESCRIPTION: This tag extracts the country name of the postal address from the photo's reverse geolocation data. Requires country name data within the photo metadata. The output is a string representing the country name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_85\n\nLANGUAGE: string\nCODE:\n```\n{place.address.country}\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing Photos via PhotoKit with osxphotos (Shell)\nDESCRIPTION: Shows how to combine `--download-missing` with the experimental `--use-photokit` flag. This combination uses the PhotoKit framework instead of AppleScript for downloading missing photos from iCloud, potentially offering an alternative if AppleScript causes issues.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing --use-photokit\n```\n\n----------------------------------------\n\nTITLE: Using PhotoExporter to export photos with configurable options in osxphotos\nDESCRIPTION: This snippet describes how `PhotoExporter.export()` facilitates exporting photos to a specified destination with optional filename and configuration options such as dry run mode. It returns an `ExportResults` object and supports in-memory operation for testing purposes, commonly used within the osxphotos CLI export tool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_62\n\nLANGUAGE: plaintext\nCODE:\n```\nexport(dest, filename=None, options: Optional[ExportOptions]=None) -> ExportResults\n\nExport a photo.\n\nArgs:\n\n* dest: must be valid destination path or exception raised\n* filename: (optional): name of exported picture; if not provided, will use current filename\n* options (ExportOptions): optional ExportOptions instance\n\nReturns: ExportResults instance\n\n*Note*: to use dry run mode, you must set options.dry_run=True and also pass in memory version of export_db, and no-op fileutil (e.g. `ExportDBInMemory` and `FileUtilNoOp`) in options.export_db and options.fileutil respectively.\n```\n\n----------------------------------------\n\nTITLE: Custom Exported Filename from Title Metadata – Shell\nDESCRIPTION: Sets a custom filename for each exported photo using the {title} template field. If a photo lacks a title, it will have no filename prefix (unless a default is set). The file extension is added automatically based on asset type. This is helpful for meaningful file labeling based on user input or curation in Photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting City Address - osxphotos\nDESCRIPTION: This tag extracts the city part of the postal address from the photo's reverse geolocation data. Relies on the presence of city data within the photo's geolocation metadata. The output is a string representing the city.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_82\n\nLANGUAGE: string\nCODE:\n```\n{place.address.city}\n```\n\n----------------------------------------\n\nTITLE: Extracting Image Categorization Label - osxphotos\nDESCRIPTION: This tag retrieves the image categorization label associated with a photo (Photos 5+ only). The labels are added automatically by Photos using machine learning algorithms. It is distinct from keywords. The output is a string representing the label.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_124\n\nLANGUAGE: string\nCODE:\n```\n{label}\n```\n\n----------------------------------------\n\nTITLE: Generating Exiftool Sidecar - exiftool_json_sidecar\nDESCRIPTION: This snippet demonstrates how to use the `exiftool_json_sidecar` function to retrieve the JSON string for an Exiftool sidecar.  It takes a `PhotoInfo` object as input, along with `ExportOptions` or `ExifOptions`, `tag_groups` (boolean), and `filename` (string) as optional parameters.  The function returns a JSON string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\ndef exiftool_json_sidecar(\n    photo: PhotoInfo,\n    options: ExportOptions | ExifOptions | None = None,\n    tag_groups: bool = True,\n    filename: str | None = None,\n) -> str:\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import exiftool_json_sidecar\n\nsidecar = exiftool_json_sidecar(photo, options, tag_groups, filename)\n```\n\n----------------------------------------\n\nTITLE: Getting Persons as Dictionary from PhotosDB in Python\nDESCRIPTION: Returns a dictionary mapping person names to their occurrence count in the Photos library. The dictionary is sorted in descending order by count.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\npersons_dict = photosdb.persons_as_dict\n```\n\n----------------------------------------\n\nTITLE: Generating a JSON Report of Exported Files with osxphotos CLI\nDESCRIPTION: This variant of the report command saves file export details in a JSON file for later programmatic analysis. Specifying the '.json' extension after --report triggers JSON output. Dependencies: osxphotos CLI. Input: Photos library, export path, report file. Output: export.json containing export data. Limitation: Format corresponds to JSON only.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_32\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --report export.json\n```\n\n----------------------------------------\n\nTITLE: Using ExifWriter to write metadata to files in Python\nDESCRIPTION: Example code demonstrating how to use the ExifWriter class to write EXIF metadata to files. This snippet shows instantiating ExifWriter with a PhotoInfo object, configuring ExifOptions, and writing EXIF data to a file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_136\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.exifwriter import ExifOptions, ExifWriter\n# photo is a PhotoInfo object\nwriter = ExifWriter(photo)\noptions = ExifOptions(merge_exif_keywords=True)\n# filepath is the path to the file you want to write the metadata to\nwriter.write_exif_data(filepath, options)\n```\n\n----------------------------------------\n\nTITLE: Extracting Venue Type - osxphotos\nDESCRIPTION: This tag extracts venue type associated with a photo (e.g., restaurant). Requires Photos 5+ and that Photos' image categorization algorithms have assigned a venue type.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_131\n\nLANGUAGE: string\nCODE:\n```\n{searchinfo.venue_type}\n```\n\n----------------------------------------\n\nTITLE: Combining and Filtering Template Values in OSXPhotos Templates\nDESCRIPTION: Demonstrates how to combine two template values using the &combine_value mechanism and subsequently filter out duplicate values by using a variable and the uniq filter. This technique allows users to merge template outputs and ensure uniqueness in the resulting combined string. It requires understanding of template variables, combination syntax, and usage of filters like uniq in OSXPhotos templating.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_2\n\nLANGUAGE: template\nCODE:\n```\n{var:myvar,{template1&{template2,},}}{%myvar|uniq}\n```\n\n----------------------------------------\n\nTITLE: Customizing Exported Filenames with Photo Titles\nDESCRIPTION: Command to use the photo's title as the filename instead of the original filename when exporting.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{title}\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression Examples (OSXPhotos Template)\nDESCRIPTION: Explains how to use conditional expressions (conditional) to evaluate a boolean (True/False) based on the template field's value using operators like contains, matches, >, ==, etc. The optional 'not' modifier negates the comparison. The comparison value can itself be a template statement.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_6\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword matches Beach}\n{keyword contains Beach}\n{photo.score.overall > 0.7}\n{keyword|lower contains beach}\n{keyword|lower not contains beach}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Hour (2-Digit)\nDESCRIPTION: Retrieves the 2-digit hour (24-hour format) of the current time.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_25\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.hour}\n```\n\n----------------------------------------\n\nTITLE: Get Persons as Dictionary from PhotosDB in Python\nDESCRIPTION: Retrieves a dictionary of persons (faces) found in the Photos library using the `persons_as_dict` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. The key is the person name, and the value is the count of how many times that person appears in the library. The dictionary is in reverse sorted order. Multiple persons with the same name are treated as a single person.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\npersons_dict = photosdb.persons_as_dict\n```\n\n----------------------------------------\n\nTITLE: Loading Osxphotos Export Configuration\nDESCRIPTION: This snippet demonstrates loading a previously saved configuration file using the `--load-config` option, simplifying repeated execution of complex export commands.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --load-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Extracting Area of Interest - osxphotos\nDESCRIPTION: This tag retrieves the area of interest name (e.g., landmark or public place) from the photo's reverse geolocation data. Requires geolocation data and a specific area of interest tag in the photo metadata.  The output is a string representing the area of interest.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_79\n\nLANGUAGE: string\nCODE:\n```\n{place.name.area_of_interest}\n```\n\n----------------------------------------\n\nTITLE: Filtering Exports by Folder and Album Path using Regular Expressions in osxphotos CLI\nDESCRIPTION: This command uses the --regex option to filter for photos from a specific folder and album path using pattern matching against the {folder_album} template. Useful when multiple albums have the same name in different folders. Dependencies: osxphotos CLI. Inputs: Regex pattern, photo library, export target. Output: Only photos from the album in the specified folder structure exported. Limitation: Requires understanding of regex patterns.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_37\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --regex \"2018/Summer Vacation\" \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing Photos from iCloud with osxphotos (Shell)\nDESCRIPTION: Explains the use of the `--download-missing` flag to instruct `osxphotos` to attempt downloading photos from iCloud if they are missing locally during the export process. This feature relies on AppleScript to communicate with the Photos app.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing\n```\n\n----------------------------------------\n\nTITLE: Getting osxphotos Command Line\nDESCRIPTION: Retrieves the full command line arguments used to invoke the current osxphotos process.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_71\n\nLANGUAGE: Template Language\nCODE:\n```\n{osxphotos_cmd_line}\n```\n\n----------------------------------------\n\nTITLE: Export Photos and Download Missing Photos from iCloud\nDESCRIPTION: Exports photos and attempts to download any missing photos from iCloud using AppleScript. Photos might crash during this process, and osxphotos will attempt to restart it.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --download-missing\n```\n\n----------------------------------------\n\nTITLE: Complex Photo Query Using List Comprehension\nDESCRIPTION: Performs a complex search to find photos with keyword 'Kids' but not in album 'Vacation 2019'. This demonstrates how to combine multiple queries programmatically.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos1 = photosdb.photos(albums=[\"Vacation 2019\"])\nphotos2 = photosdb.photos(keywords=[\"Kids\"])\nphotos3 = [p for p in photos2 if p not in photos1]\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Exports on Networked Storage - osxphotos Command Line - Shell\nDESCRIPTION: Uses the --retry option with a numeric value to automatically retry failed exports when writing to external disks (e.g., unreliable NAS), up to the specified number of attempts. Input is the destination and retry count. Output is images that may succeed after initial failures. Requires persistent storage access and osxphotos; may not guarantee export success if failures exceed retries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --retry 3\n```\n\n----------------------------------------\n\nTITLE: Extracting City Name - osxphotos\nDESCRIPTION: This tag extracts the city or locality name from the photo's reverse geolocation data. Requires photo to contain geolocation data. The output is a string representing the city name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_78\n\nLANGUAGE: string\nCODE:\n```\n{place.name.city}\n```\n\n----------------------------------------\n\nTITLE: Saving Osxphotos Export Configuration\nDESCRIPTION: This snippet demonstrates how to save all export options to a configuration file named `osxphotos.toml` using the `--save-config` option, allowing for easy reuse of complex export commands.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export <all your options here> --update --save-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Using OSXPhotos CLI to Run Python Code and Manage Packages\nDESCRIPTION: Informational text on utilizing OSXPhotos CLI to execute custom Python scripts, and manage package dependencies via 'install' and 'uninstall' commands. Supports integration with query and post-processing functions for advanced usage.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/package_overview.rst.txt#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Get Albums as Dictionary from PhotosDB in Python\nDESCRIPTION: Retrieves a dictionary of albums found in the Photos library using the `albums_as_dict` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. The key is the album name, and the value is the count of how many photos are in the album. The dictionary is in reverse sorted order. In Photos 5.0, duplicate album names are treated as a single album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums_dict = photosdb.albums_as_dict\n```\n\n----------------------------------------\n\nTITLE: Generating a CSV Report of Exported Files with osxphotos CLI\nDESCRIPTION: This command creates a CSV-formatted report listing details about all files involved in the export (exported, skipped, or missing), enabling consumption in spreadsheet tools like Microsoft Excel. The report filename is provided after --report. Dependencies: osxphotos CLI. Input: Photos library, export path, output filename. Output: export.csv file. Limitation: CSV output only; other formats require different filename extensions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_31\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --report export.csv\n```\n\n----------------------------------------\n\nTITLE: Removing All Metadata from Exported Photos with exiftool Post-Command via osxphotos (Shell)\nDESCRIPTION: After exporting each photo, runs exiftool to strip all metadata using the --post-command flag. The template uses {filepath|shell_quote} to safely pass file paths. exiftool must be installed on the system, and osxphotos must have permissions to execute it. This will overwrite file metadata for each exported photo and is irreversible without backups.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"/usr/local/bin/exiftool -all= {filepath|shell_quote}\"\n```\n\n----------------------------------------\n\nTITLE: Opening System Photos Library in macOS Catalina\nDESCRIPTION: Uses get_system_library_path() to open the System photo library in Photos 5 (macOS Catalina). This approach ensures PhotosDB opens the system library rather than another library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(path)\n```\n\n----------------------------------------\n\nTITLE: Open System Photos Library\nDESCRIPTION: Opens the System Photos library using `get_system_library_path`. This ensures the System library is opened, which is useful for Photos 5 (Catalina / MacOS 10.15).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(path)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(dbfile=path)\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Export Report using osxphotos\nDESCRIPTION: Generates a report file in SQLite database format detailing the results of the export process. The output file name and format are specified using the `--report` option with a `.sqlite` extension.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_40\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --report export.sqlite\n```\n\n----------------------------------------\n\nTITLE: Exporting Only New Photos with osxphotos\nDESCRIPTION: Command for updating a previous export while only exporting new photos added to the library since the last update. Combines --update with --only-new to ignore previously exported files that are now missing.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --update --only-new\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Finder Tag Keywords and Keyword Template via osxphotos (Shell)\nDESCRIPTION: Exports photos with osxphotos, applying both Finder tag keywords and a template for keyword assignment using --keyword-template. The template string, e.g., \"{label}\", determines the tag values based on photo metadata. Ensure osxphotos is installed; both --finder-tag-keywords and --keyword-template flags are supplied as parameters. Destination folder must be given. Outputs tagged files visible to Finder and Spotlight.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_50\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Videos with Metadata using osxphotos\nDESCRIPTION: This command uses `osxphotos` to export videos from a Photos library based on the keyword \"Quik\". It exports them to the specified directory, preserves file creation dates, adds keywords and persons as Finder tags, merges keywords and person metadata with exiftool, includes title and description in Finder comments, and removes leading/trailing whitespace.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export ~/Desktop/folder for exported videos/ --keyword Quik --only-movies --db /path to my.photoslibrary --touch-file --finder-tag-keywords --person-keyword --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\" --exiftool-merge-keywords --exiftool-merge-persons --exiftool --strip\n```\n\n----------------------------------------\n\nTITLE: Generating a SQLite Database Report of Exported Files with osxphotos CLI\nDESCRIPTION: This snippet outputs export details into a SQLite database file for advanced querying. The .sqlite extension triggers SQLite format. Dependencies: osxphotos CLI, SQLite interpreter to read. Input: Photos library, export path, report filename. Output: export.sqlite with export data. Limitation: Requires SQLite viewer to inspect data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_33\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --report export.sqlite\n```\n\n----------------------------------------\n\nTITLE: Performing Text Detection with {detected_text}\nDESCRIPTION: Shows how to use the {detected_text} template in osxphotos to extract text found in images using built-in macOS text detection algorithms. Optionally accepts a confidence threshold (e.g., {detected_text:0.5}, default is 0.75). Requires macOS Catalina (10.15) or later. Results are cached in the export database for subsequent '--update' runs.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_10\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{detected_text}\n```\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{detected_text:0.5}\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB for the Last Opened Library (Python)\nDESCRIPTION: Shows how to initialize the `osxphotos.PhotosDB` object without arguments. This defaults to opening the last Photos library that was opened by the user via Photos.app, using an internal call similar to `get_last_library_path()`. This method is convenient but might not be reliable if the user switches libraries frequently.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nosxphotos.PhotosDB()\n```\n\n----------------------------------------\n\nTITLE: Accessing EXIF Metadata as Dictionary\nDESCRIPTION: This code snippet illustrates how to access EXIF metadata from a photo file using the `asdict()` method of the `ExifToolCaching` class. It returns a dictionary containing the metadata, with keys in the format 'GROUP:TAG' if `tag_groups` is True, or 'TAG' if False. Requires the `osxphotos` library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos in Specific Album\nDESCRIPTION: This snippet exports only photos contained in the specified album, \"Summer Vacation\".\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --album \"Summer Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Place Name - osxphotos\nDESCRIPTION: This tag retrieves the place name from a photo's reverse geolocation data, as displayed in Photos. Requires reverse geolocation data to be present in photo metadata. The output is a string representing the place name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_74\n\nLANGUAGE: string\nCODE:\n```\n{place.name}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Metadata with Exiftool (Shell)\nDESCRIPTION: Exports photos to the specified directory and uses the external `exiftool` application (which must be installed separately) to write basic metadata like keywords, persons, and GPS location into the exported image files. The `--exiftool` flag enables this functionality.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool\n```\n\n----------------------------------------\n\nTITLE: Adding Values to EXIF Metadata Array Tag Using addvalues - Python\nDESCRIPTION: This snippet shows how to append multiple values to a metadata tag (like 'IPTC:Keywords') that supports arrays, using the addvalues method in osxphotos' exiftool interface attached to a PhotoInfo instance. The function takes the tag name and one or more string values as arguments, modifying the keyword list. Returns True on success. Requires osxphotos, exiftool, and a valid PhotoInfo object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nphoto.exiftool.addvalues(\"IPTC:Keywords\", \"vacation\", \"beach\")\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Template Values (OSXPhotos Template)\nDESCRIPTION: Demonstrates applying one or more filters to a template field's resolved value using the '|filter' syntax. Filters perform transformations like case conversion, trimming, formatting, or list manipulation. Multiple filters can be chained.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_4\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|lower}\n{keyword|upper}\n{keyword|capitalize}\n{keyword|lower|parens}\n{descr|titlecase}\n```\n\n----------------------------------------\n\nTITLE: Get Keywords from PhotosDB in Python\nDESCRIPTION: Retrieves a list of keywords found in the Photos library that are associated with at least one photo using the `keywords` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. Returns a list of strings representing the keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nkeywords = photosdb.keywords\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Commands with osxphotos (Logging Example)\nDESCRIPTION: Illustrates using the `--post-command` option to run a shell command for each file in the `exported` category. This specific command appends the file's full path (`{filepath}`) and its comma-separated keywords (`{,+keyword,}`) to a log file (`exported.txt`) within the export directory (`{export_dir}`). The `{shell_quote}` template ensures proper quoting for shell execution.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"echo {shell_quote,{filepath}{comma}{,+keyword,}} >> {shell_quote,{export_dir}/exported.txt}\"\n```\n\n----------------------------------------\n\nTITLE: Saving osxphotos Export Configuration to a File\nDESCRIPTION: Shows how to save the specified `osxphotos export` command-line options (including `--update` and others represented by `<all your options here>`) to a TOML configuration file named `osxphotos.toml` using the `--save-config` flag. This facilitates reusing the same export settings later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export <all your options here> --update --save-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Using ExifWriter to Write Metadata (Python)\nDESCRIPTION: Demonstrates initializing the `ExifWriter` class with a `PhotoInfo` object and writing EXIF metadata to a file using specified `ExifOptions`. This requires the `osxphotos.exifwriter` module and an instance of `PhotoInfo`. The `write_exif_data` method applies metadata based on the provided options to the target filepath.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.exifwriter import ExifOptions, ExifWriter\n# photo is a PhotoInfo object\nwriter = ExifWriter(photo)\noptions = ExifOptions(merge_exif_keywords=True)\n# filepath is the path to the file you want to write the metadata to\nwriter.write_exif_data(filepath, options)\n```\n\n----------------------------------------\n\nTITLE: Extracting Postal Code - osxphotos\nDESCRIPTION: This tag extracts the postal code part of the postal address from the photo's reverse geolocation data. Requires postal code data in the photo metadata. The output is a string representing the postal code.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_84\n\nLANGUAGE: string\nCODE:\n```\n{place.address.postal_code}\n```\n\n----------------------------------------\n\nTITLE: Creating a CLI Tool for Selected Photos using @selection_command (Python)\nDESCRIPTION: Illustrates how to define a Python function that acts as a command-line tool operating on the currently selected photos in Photos.app using the `@selection_command` decorator from `osxphotos.cli`. The decorator handles argument parsing (like --verbose) and passes a list of PhotoInfo objects to the function. The example function prints the filename and date for each selected photo.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @selection_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_1.py` or `python cli_example_1.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add the following options to your command:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will get the selected photos and pass the list of PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport osxphotos\nfrom osxphotos.cli import selection_command, verbose\n\n\n@selection_command\ndef example(photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample command for osxphotos. Prints out the filename and date of each photo\n    currently selected in Photos.app.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_1.py --help` or `python cli_example_1.py --help`\n    \"\"\"\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found {len(photos)} photo(s)\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        verbose(f\"Processing {photo.original_filename}\")\n        print(f\"{photo.original_filename} {photo.date}\")\n        ...\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n\n----------------------------------------\n\nTITLE: Accessing Postal Address Information\nDESCRIPTION: This example demonstrates how to access the postal address information associated with a photo using the `osxphotos` library. It shows how to retrieve details such as street, city, postal code, and country from the `PostalAddress` namedtuple.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_51\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.place.address\nPostalAddress(street='3700 Wailea Alanui Dr', sub_locality=None, city='Kihei', sub_administrative_area='Maui', state='HI', postal_code='96753', country='United States', iso_country_code='US')\n>>> photo.place.address.postal_code\n'96753'\n```\n\n----------------------------------------\n\nTITLE: Accessing PhotoInfo Properties via Template Variable in osxphotos\nDESCRIPTION: This snippet allows direct access to any property of the PhotoInfo object for a given photo using the '{photo.property}' syntax, simplifying template creation and enabling retrieval of detailed photo metadata beyond predefined fields, with documentation available at the provided URL.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_88\n\nLANGUAGE: Python\nCODE:\n```\n{photo.favorite}\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Keyword Filename\nDESCRIPTION: Exports photos using the keyword and original name as the filename.  This creates multiple copies if multiple keywords exist.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --filename \"{keyword}-{original_name}\"\n```\n\n----------------------------------------\n\nTITLE: Standardizing JPEG File Extensions during Export - osxphotos Command Line - Shell\nDESCRIPTION: Forces osxphotos to use a consistent extension for all JPEG files with the --jpeg-ext option, accepting values such as jpg or JPEG. Input is the export path and preferred extension; output is JPEG images exported with the selected extension. Useful for interoperability with programs that expect a specific case or extension. Requires osxphotos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --jpeg-ext jpg\n```\n\n----------------------------------------\n\nTITLE: Accessing Burst Photo Sets using osxphotos in Python\nDESCRIPTION: This example demonstrates how to identify burst photos and retrieve associated photos within the same burst set using the `osxphotos` library. It initializes a `PhotosDB` object, filters photos to find bursts (`p.burst`), selects a specific burst photo, and then iterates through the list returned by `burst_photo.burst_photos` to print the original filenames of other photos in the set. This is useful for accessing images within a burst set that might not be the user-selected or key image.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_28\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> bursts = [p for p in photosdb.photos() if p.burst]\n>>> burst_photo = bursts[5]\n>>> len(burst_photo.burst_photos)\n4\n>>> burst_photo.original_filename\n'IMG_9851.JPG'\n>>> for photo in burst_photo.burst_photos:\n...     print(photo.original_filename)\n...\nIMG_9853.JPG\nIMG_9852.JPG\nIMG_9854.JPG\nIMG_9855.JPG\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run using osxphotos\nDESCRIPTION: This command illustrates how to perform a dry run using the `--dry-run` option, which allows you to test export options without actually exporting any files. The `--verbose` option provides detailed output about each file that would be exported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: Navigating Folder/Album Hierarchy in osxphotos Python\nDESCRIPTION: This Python interactive session demonstrates how to traverse the folder and album structure within a Photos library using the `osxphotos` library. It shows accessing top-level folders, subfolders, albums within folders, and navigating back up the hierarchy using the `parent` attribute. Requires the `osxphotos` library installed. The output shows the titles of folders and albums at various levels.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_45\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photosdb.folder_info\n[<osxphotos.albuminfo.FolderInfo object at 0x10fcc0160>]\n>>> photosdb.folder_info[0].title\n'Folder1'\n>>> photosdb.folder_info[0].subfolders[1].title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].title\n'AlbumInFolder'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.album_info[0].title\n'AlbumInFolder'\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB using get_last_library_path() (Python)\nDESCRIPTION: Shows explicitly getting the path to the last opened Photos library using `osxphotos.utils.get_last_library_path()` and then passing this path to the `PhotosDB` initializer. This achieves the same result as calling `PhotosDB()` with no arguments but makes the intent clearer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\nphotosdb = osxphotos.PhotosDB(osxphotos.utils.get_last_library_path())\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables osxphotos Template\nDESCRIPTION: Details the syntax for defining variables using '{var:NAME,VALUE}' where VALUE is a template statement. Variables are referenced using '%NAME' and can be used to reuse complex template values, work around character limitations, or improve readability. Variables can function as fields, filter values, conditional values, or default values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_55\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{var:foo,bar}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n%NAME\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{var:pipe,{pipe}}{title[-,%pipe]}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{var:myvar,{template1&{template2,},}}{%myvar|uniq}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{var:year,{created.year}}{original_name}-{%year}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{var:name,Katie}{person contains {%name}?{%name},Not-{%name}}\n```\n\n----------------------------------------\n\nTITLE: Getting AI-Detected Image Labels\nDESCRIPTION: Retrieves image categorization labels automatically assigned by Photos' machine learning algorithms (e.g., 'People', 'Dog', 'Sunset'). Requires Photos 5 or later. These are distinct from user-assigned {keyword}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_79\n\nLANGUAGE: Template Language\nCODE:\n```\n{label}\n```\n\n----------------------------------------\n\nTITLE: Using FaceInfo Properties to Access Face Metadata in OSXPhotos Python\nDESCRIPTION: FaceInfo objects represent detected faces in photos and provide access to UUIDs, associated person info, photo object, and uuid of the photo containing face. Coordinates of face region available as named tuples for MWG and Microsoft rectangle formats, and as Pillow-style coordinate tuples. Additional face characteristics such as roll, pitch, yaw angles (in radians) for Photos <=4. Extra undocumented properties for quality, size, expression, and other attributes. Methods to retrieve dictionary and JSON representations are provided. Depends on OSXPhotos and Photos database with face recognition.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nface_uuid = face_info.uuid\nface_name = face_info.name\nface_asset_uuid = face_info.asset_uuid\nperson_info = face_info.person_info\nphoto_obj = face_info.photo\nmwg_coords = face_info.mwg_rs_area\nmpri_coords = face_info.mpri_reg_rect\nface_rectangle = face_info.face_rect()\ncenter_coordinates = face_info.center\nface_size_pixels = face_info.size_pixels\nroll, pitch, yaw = face_info.roll_pitch_yaw()\nface_dict = face_info.asdict()\nface_json = face_info.json()\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB with Photos Library Path\nDESCRIPTION: Creates a PhotosDB object to read a Photos library database. The path can point to a Photos library directory or to a specific database file. If no path is provided, it will use the last opened Photos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nosxphotos.PhotosDB()\nosxphotos.PhotosDB(path)\nosxphotos.PhotosDB(dbfile=path)\n```\n\n----------------------------------------\n\nTITLE: Calling OSXPhotos Export CLI Command Programmatically (Python Interactive)\nDESCRIPTION: This snippet demonstrates how to programmatically invoke the `osxphotos export` command from Python code. It shows importing the specific CLI function (`export_cli`) and passing arguments as keyword arguments, mirroring the command line interface.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_5\n\nLANGUAGE: pycon\nCODE:\n```\n>>> from osxphotos.cli.export import export_cli\n>>> export_cli(dest=\"/private/tmp\", update=True)\n```\n\n----------------------------------------\n\nTITLE: Applying XMP Sidecar Metadata with Exiftool (Shell)\nDESCRIPTION: Uses the `exiftool` command-line utility to read metadata from an XMP sidecar file (`IMG_0001.xmp`) and apply it to the corresponding image file (`IMG_0001.jpg`), overwriting existing tags. Used to verify sidecar content.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nexiftool -overwrite_original -tagsfromfile ~/Desktop/export/IMG_0001.xmp ~/Desktop/export/IMG_0001.jpg\n```\n\n----------------------------------------\n\nTITLE: Import Google Takeout Archive\nDESCRIPTION: This command imports a Google Takeout archive into Photos.app. It walks the directory structure, creates albums based on folder names, skips duplicates, imports sidecar metadata, ignores the date from the sidecar, adds keywords from person data, and generates a CSV report.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos import ~/Downloads/Takeout/Google\\ Photos --walk --album \"{filepath.parent.name}\" --skip-dups --dup-albums --sidecar --verbose --sidecar-ignore-date --keyword \"{person}\" --report takeout_import.csv\n```\n\n----------------------------------------\n\nTITLE: Getting Album Names from PhotosDB in Python\nDESCRIPTION: Retrieves a list of album names found in the Photos library. Note that albums with duplicate names are treated as a single album with combined photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbum_names = photosdb.albums\n```\n\n----------------------------------------\n\nTITLE: Cleaning Export Directory with osxphotos (Command Line)\nDESCRIPTION: Deletes files from the export directory that were not part of the current export set. This is useful for removing files corresponding to photos that have been deleted in the Photos library. Use with caution as it deletes *any* file not exported by osxphotos unless excluded via --keep or .osxphotos_keep.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_62\n\nLANGUAGE: Shell\nCODE:\n```\n--cleanup\n```\n\n----------------------------------------\n\nTITLE: OSXPhotos Command Line Interface Usage and Available Commands\nDESCRIPTION: The command-line interface help output for the osxphotos utility, showing the main usage pattern and listing all available commands. The CLI offers extensive functionality including export, query, batch editing, and metadata management for Photos libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/overview.rst#_snippet_1\n\nLANGUAGE: TXT\nCODE:\n```\nUsage: osxphotos [OPTIONS] COMMAND [ARGS]...\n\n  OSXPhotos: the multi-tool for your Photos library.\n\n  To get help on a specific command, use \"osxphotos COMMAND --help\" or\n  \"osxphotos help COMMAND\"; for example, \"osxphotos help export\".\n\n  To search help for a specific topic within a command, run \"osxphotos help\n  COMMAND TOPIC\"; for example, \"osxphotos help export keyword\" to get help\n  related to keywords when using the export command.\n\n  To see the full documentation in your browser, run \"osxphotos docs\".\n\n  Some advanced commands are hidden by default. To see all commands, run\n  \"OSXPHOTOS_SHOW_HIDDEN=1 osxphotos help\". Some commands also have hidden\n  options. These can be seen by running \"OSXPHOTOS_SHOW_HIDDEN=1 osxphotos help\n  COMMAND\".\n\nOptions:\n  -v, --version  Show the version and exit.\n  -h, --help     Show this message and exit.\n\nCommands:\n  about          Print information about osxphotos including license.\n  add-locations  Add missing location data to photos in Photos.app using...\n  albums         Print out albums found in the Photos library.\n  batch-edit     Batch edit photo metadata such as title, description,...\n  compare        Compare two Photos libraries to find differences\n  docs           Open osxphotos documentation in your browser.\n  dump           Print list of all photos & associated info from the Photos...\n  exiftool       Run exiftool on previously exported files to update metadata.\n  export         Export photos from the Photos database.\n  exportdb       Utilities for working with the osxphotos export database\n  help           Print help; for help on commands: help <command>.\n  import         Import photos and videos into Photos.\n  info           Print out descriptive info of the Photos library database.\n  inspect        Interactively inspect photos selected in Photos.\n  install        Install Python packages into the same environment as...\n  keywords       Print out keywords found in the Photos library.\n  labels         Print out image classification labels found in the Photos...\n  list           Print list of Photos libraries found on the system.\n  orphans        Find orphaned photos in a Photos library\n  persons        Print out persons (faces) found in the Photos library.\n  places         Print out places found in the Photos library.\n  push-exif      Write photo metadata to original files in the Photos library\n  query          Query the Photos database using 1 or more search options;...\n  repl           Run interactive osxphotos REPL shell (useful for...\n  run            Run a python file using same environment as osxphotos.\n  show           Show photo, album, or folder in Photos from UUID_OR_NAME\n  sync           Sync metadata and albums between Photos libraries.\n  template       Interactively render templates for selected photo.\n  theme          Manage osxphotos color themes.\n  timewarp       Adjust date/time/timezone of photos in Apple Photos.\n  tutorial       Display osxphotos tutorial.\n  uninstall      Uninstall Python packages from the osxphotos environment\n  update         Update the installation to the latest version.\n  uuid           Print out unique IDs (UUID) of photos selected in Photos\n  version        Check for new version of osxphotos.\n```\n\n----------------------------------------\n\nTITLE: Export Based on Keywords with Filename - Bash\nDESCRIPTION: This command exports photos using a filename template that includes the keywords. It uses the `--filename` option with the `{keyword}-{original_name}` template. It will result in multiple files if a photo has more than one keyword. Requires osxphotos.  The expected output is multiple copies of a file with filenames created by combining the keyword and original name, e.g., Travel-IMG_1234.JPG, Vacation-IMG_1234.JPG\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{keyword}-{original_name}\"\n```\n\n----------------------------------------\n\nTITLE: Getting City Name from Reverse Geolocation\nDESCRIPTION: Retrieves the city or locality name from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_33\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.name.city}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keywords from PhotosDB in Python\nDESCRIPTION: Gets a list of all keywords in the Photos library that are associated with at least one photo. This method returns a simple list of keyword strings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nkeywords = photosdb.keywords\n```\n\n----------------------------------------\n\nTITLE: Using Template for Conditional Filename Naming (Shell)\nDESCRIPTION: Gives a command-line example using the --filename option with a template string and conditional logic (?bool_value,default). If the photo is marked as a favorite, the filename is prefixed with \"Favorite-\"; otherwise, the original name is used.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n--filename \"{favorite?Favorite-{original_name},{original_name}}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Seconds - osxphotos\nDESCRIPTION: This tag extracts the 2-digit second of the current date from a photo's metadata. It is independent of external dependencies. The output is a 2-digit string representing the second.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_72\n\nLANGUAGE: string\nCODE:\n```\n{today.sec}\n```\n\n----------------------------------------\n\nTITLE: Exporting With Directory Name Filter and Case Normalization – Shell\nDESCRIPTION: Utilizes template filters to constrain exported subdirectories to those starting with a specific string (e.g., 'Events') and to convert folder/album names to lowercase. The filter ensures only directories meeting the criteria are created, which is useful for selective exports from large, well-organized libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|filter(startswith Events)}\"\n```\n\n----------------------------------------\n\nTITLE: Running Post-Export Command with Exiftool in osxphotos\nDESCRIPTION: Shows using `--post-command` with `exiftool` (assuming it's installed at `/usr/local/bin/exiftool`) to remove all metadata (`-all=`) from exported files. It uses the `|shell_quote` template filter applied directly to the `{filepath}` variable to ensure only the file path is correctly quoted for the shell command.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"/usr/local/bin/exiftool -all= {filepath|shell_quote}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Concurrently with ThreadPoolExecutor (Python)\nDESCRIPTION: This snippet shows how to leverage threading for parallel photo export using `osxphotos.PhotoExporter.export()`. It utilizes `concurrent.futures.ThreadPoolExecutor` to manage worker threads and export photos to a specified directory, highlighting the requirement for Python 3.11 or newer due to `sqlite3` thread-safety.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Example for concurrent export of photos using osxphotos.PhotoExporter.export()\n\nNote: concurrent export can only be used on Python 3.11 and later due to the way\npython's sqlite3 module is implemented. See https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety\nfor more information.\n\"\"\"\n\nimport concurrent.futures\nimport os\nimport time\n\nimport click\n\nimport osxphotos\nfrom osxphotos.cli import echo, query_command, verbose\n\n\n@query_command()\n@click.option(\n    \"--workers\",\n    metavar=\"WORKERS\",\n    help=\"Maximum number of worker threads to use for export. \"\n    \"If not specified, it will default to the number of processors on the machine, multiplied by 5.\",\n    type=int,\n)\n@click.argument(\n    \"export_dir\",\n    type=click.Path(exists=True, file_okay=False, dir_okay=True, writable=True),\n)\ndef export(workers, export_dir, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Export photos\"\"\"\n    workers = workers or os.cpu_count() * 5\n    echo(f\"Exporting {len(photos)} photos to {export_dir} using {workers} workers\")\n    start_t = time.perf_counter()\n    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as executor:\n        futures = [\n            executor.submit(p.export, export_dir, f\"{p.uuid}_{p.original_filename}\")\n            for p in photos\n        ]\n        exported = []\n        for future in concurrent.futures.as_completed(futures):\n            exported.extend(future.result())\n    end_t = time.perf_counter()\n    echo(\n        f\"Exported {len(exported)} photos to {export_dir} in {end_t-start_t:.4f} seconds\"\n    )\n\n\nif __name__ == \"__main__\":\n    export()\n```\n\n----------------------------------------\n\nTITLE: Accessing Like Information for Shared Photos in OSXPhotos Python\nDESCRIPTION: LikeInfo objects represent \"likes\" on shared photos available only on Photos 5/MacOS 10.15+. Properties include datetime of the like, user name who liked the photo, and whether the like was made by the library owner. The likes list is sorted ascending by datetime. Useful for analyzing shared photo interactions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nlikes = photo.likes\nfor like in likes:\n\tlike_datetime = like.datetime\n\tlike_user = like.user\n\tis_owner_like = like.ismine\n```\n\n----------------------------------------\n\nTITLE: Exporting All Photos to Directory (Bash)\nDESCRIPTION: This is the basic command to export all photos and videos from the default or last opened Photos library to the specified destination directory (`/path/to/export`). By default, all versions (originals, edited, live, etc.) are included.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Getting Camera Make from EXIF\nDESCRIPTION: Retrieves the camera make (e.g., 'Apple') from the original photo's EXIF data as imported by Photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_43\n\nLANGUAGE: Template Language\nCODE:\n```\n{exif.camera_make}\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Keywords from Folders/Albums (Shell)\nDESCRIPTION: Exports photos using `exiftool` to embed metadata. It utilizes the `--keyword-template` option with `{folder_album(>)}` to generate hierarchical keywords based on the photo's location in folders and albums, using '>' as the separator, suitable for applications like Lightroom Classic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{folder_album(>)}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Template Help\nDESCRIPTION: This code snippet generates help documentation for the template system used within osxphotos. It provides detailed information on how to use template statements including their syntax, modifiers, filters, and conditional expressions. The output is generated using cog, which processes the documentation based on the phototemplate.py module.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.phototemplate import get_template_help\ncog.out(\"\\n\"+get_template_help())\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Multiple Keywords (OR logic) using osxphotos\nDESCRIPTION: Exports photos that match any of the provided keywords (\"Travel\" or \"Vacation\") by repeating the `--keyword` query option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_42\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\" --keyword \"Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Albums and Projects\nDESCRIPTION: Retrieves the name(s) of both albums and projects the photo is contained in, treating projects like albums.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_75\n\nLANGUAGE: Template Language\nCODE:\n```\n{album_project}\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Edited Date Suffix\nDESCRIPTION: Exports photos and appends the modification date to the filenames of edited images using a template string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_{modified.year}-{modified.mm}-{modified.dd}\"\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs and Using the {percent} Field in OSXPhotos Templates\nDESCRIPTION: Explains the methods to include literal percent signs (%) in template strings, either by escaping with a double percent sign (`%%`) or by inserting the `{percent}` template field where a % character is required. This is crucial for templates requiring percent characters in replacements or conditional outputs.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_5\n\nLANGUAGE: template\nCODE:\n```\n{title[:,%%]}\n```\n\nLANGUAGE: template\nCODE:\n```\n{title contains Foo?{title}{percent},{title}}\n```\n\n----------------------------------------\n\nTITLE: Using osxphotos Utility Methods and Querying the Database (Python)\nDESCRIPTION: Provides a comprehensive example of initializing the PhotosDB, printing various metadata fields (keywords, persons, albums), and filtering or iterating over photos using key properties (such as uuid, filename, metadata). Dependencies are the 'osxphotos' module and a configured Photos library. Expected inputs are valid library paths; outputs are metadata printouts and counts based on queries. Shows both keyword/persons filtering and exclusion logic via comprehensions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\ndef main():\n\n    photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n    print(f\"db file = {photosdb.db_path}\")\n    print(f\"db version = {photosdb.db_version}\")\n\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.albums)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Kids and containing person Katie\n    photos = photosdb.photos(keywords=[\"Kids\"], persons=[\"Katie\"])\n    print(f\"found {len(photos)} photos\")\n\n    # find all photos that include Katie but do not contain the keyword wedding\n    photos = [\n        p\n        for p in photosdb.photos(persons=[\"Katie\"])\n        if p not in photosdb.photos(keywords=[\"wedding\"])\n    ]\n\n    # get all photos in the database\n    photos = photosdb.photos()\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n            p.ismissing,\n            p.hasadjustments,\n        )\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Field with Subfield (OSXPhotos Template)\nDESCRIPTION: Illustrates accessing specific subfields within a template field using the ':subfield' syntax. This is commonly used for nested data structures, such as accessing specific EXIF or IPTC tags via the 'exiftool' template field.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_2\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{exiftool:IPTC:Make}\n```\n\n----------------------------------------\n\nTITLE: Skipping Original If Edited During Export - osxphotos - Shell\nDESCRIPTION: Uses the --skip-original-if-edited option to export only one version of a photo: the edited version if it exists, otherwise the original version. This ensures that no duplicates (original and edited) are exported for the same photo. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --skip-original-if-edited\n```\n\n----------------------------------------\n\nTITLE: Applying JSON Sidecar Metadata with Exiftool (Shell)\nDESCRIPTION: Uses the `exiftool` command-line utility to read metadata from a JSON sidecar file (`IMG_0001.json`) and apply it to the corresponding image file (`IMG_0001.jpg`), overwriting existing tags. Used to verify JSON sidecar content.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nexiftool -overwrite_original -json=~/Desktop/export/IMG_0001.json ~/Desktop/export/IMG_0001.jpg\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Photo by UUID with osxphotos (Python)\nDESCRIPTION: Retrieves the photo with a specific UUID by passing a list containing the UUID to the uuid argument of PhotosDB.photos(). Intended for fetching uniquely identified individual photos. Returns a list possibly containing one PhotoInfo object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(uuid=[\"osMNIO5sQFGZTbj9WrydRB\"])\n```\n\n----------------------------------------\n\nTITLE: Exporting Image with Exiftool Sidecar (Shell)\nDESCRIPTION: Exports selected photos using `osxphotos export`, creating separate Exiftool JSON sidecar files (`--sidecar exiftool`) containing metadata. This format is specifically for use with exiftool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/export --selected --sidecar exiftool\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions (osxphotos-template)\nDESCRIPTION: Illustrates conditional expressions evaluated as True/False. Syntax involves an optional 'not', an operator (e.g., `matches`, `contains`, `>`, `==`), and a value (which can itself be a template). Filters can be applied before the conditional check. A space before the conditional is required.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_9\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword matches Beach}\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword contains Beach}\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{photo.score.overall > 0.7}\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|lower contains beach}\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|lower not contains beach}\"\n```\n\n----------------------------------------\n\nTITLE: Summarizing the Photo Library by Shared/Hidden/Movies with osxphotos (Pycon)\nDESCRIPTION: Demonstrates interactive commands to inspect various groupings within the photo library, such as total photos, shared photos, hidden photos, and movies, using osxphotos in a Python shell. Shows how to filter photo lists by attributes. Requires a valid PhotosDB object path and assumes Photos library database is accessible. Provides a simple statistical summary via standard Python list comprehensions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_20\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> photos = photosdb.photos()\n>>> len(photos)\n25002\n>>> shared = [p for p in photos if p.shared]\n>>> len(shared)\n5609\n>>> not_shared = [p for p in photos if not p.shared]\n>>> len(not_shared)\n19393\n>>> hidden = [p for p in photos if p.hidden]\n>>> len(hidden)\n7\n>>> movies = photosdb.photos(movies=True, images=False)\n>>> len(movies)\n625\n>>> shared_movies = [m for m in movies if m.shared]\n>>> len(shared_movies)\n151\n>>>\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Multiple Keywords\nDESCRIPTION: This snippet demonstrates how to use the `--keyword` option multiple times to search for photos with either keyword `Travel` or `Vacation`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\" --keyword \"Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Inserting a Percent Sign - osxphotos\nDESCRIPTION: This tag inserts a percent sign into the output. It has no dependencies.  The output is a percent sign: '%'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_102\n\nLANGUAGE: string\nCODE:\n```\n{percent}\n```\n\n----------------------------------------\n\nTITLE: Delimiter and In-Place Expansion (OSXPhotos Template)\nDESCRIPTION: Shows how to handle multi-valued fields like keywords. Without a delimiter, values are comma-separated by default. The '+' prefix expands values in-place, optionally using a specified delimiter string (delim).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_1\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword}\n{,+keyword}\n{; +keyword}\n{+keyword}\n```\n\n----------------------------------------\n\nTITLE: Using Counter\nDESCRIPTION: The snippet describes the {counter} template tag which is a sequential counter. It starts at 0 and increments each time it's evaluated. It can be started at a different value with the '(starting_value)' parameter. It can be formatted using a python string format code. Additional options allow you to specify a stop value to reset the counter and the increment size.  The output is a counter.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_93\n\nLANGUAGE: text\nCODE:\n```\n{counter}                       A sequential counter, starting at 0, that\n                                increments each time it is evaluated.To\n                                start counting at a value other than 0,\n                                append append '(starting_value)' to the\n                                field name.For example, to start counting at\n                                1 instead of 0: '{counter(1)}'.May be\n                                formatted using a python string format\n                                code.For example, to format as a 5-digit\n                                integer and pad with zeros, use\n                                '{counter:05d(1)}'which results in 00001,\n                                00002, 00003...etc.You may also specify a\n                                stop value which causes the counter to reset\n                                to the starting valuewhen the stop value is\n                                reached and a step size which causes the\n                                counter to increment bythe specified value\n                                instead of 1. Use the format\n                                '{counter(start,stop,step)}' where\n                                start,stop, and step are integers. For\n                                example, to count from 1 to 10 by 2, use\n                                '{counter(1,11,2)}'.Note that the counter\n                                stops counting when the stop value is\n                                reached and does not return thestop value.\n                                Start, stop, and step are optional and may\n                                be omitted. For example, to countfrom 0 by\n                                2s, use '{counter(,,2)}'.You may create an\n                                arbitrary number of counters by appending a\n                                unique name to the field namepreceded by a\n                                period: '{counter.a}', '{counter.b}', etc.\n                                Each counter will have its own stateand will\n                                start at 0 and increment by 1 unless\n                                otherwise specified. Note: {counter} is not\n                                suitable for use with 'export' and '--\n                                update' as the counter associated with a\n                                photo may change between export sessions.\n                                See also {id}.\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Export Report using osxphotos\nDESCRIPTION: Generates a report file in JSON format detailing the results of the export process. The output file name and format are specified using the `--report` option with a `.json` extension.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_39\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --report export.json\n```\n\n----------------------------------------\n\nTITLE: Basic Field Substitution (OSXPhotos Template)\nDESCRIPTION: Demonstrates the simplest form of a template statement, where a field name in curly braces resolves to the corresponding photo metadata value. For example, {title} retrieves the photo's title.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_0\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{title}\n```\n\n----------------------------------------\n\nTITLE: Ignoring File Signatures to Preserve Local Edits When Updating Exports with osxphotos CLI\nDESCRIPTION: This command updates a previous export but skips re-exporting files if their signature (size or modification date) has changed locally—useful if exported images are edited after export but should not be overwritten. --ignore-signature ensures only truly new/changed Photos library files are considered. Dependencies: osxphotos CLI. Inputs: Export destination folder. Output: Export is updated without clobbering locally edited images. Limitation: Changes in exported files are not detected for overwrite.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_29\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --update --ignore-signature\n```\n\n----------------------------------------\n\nTITLE: Skipping Edited Photos During Export - osxphotos - Shell\nDESCRIPTION: Uses the --skip-edited option to prevent the export of edited versions of photos. Only the original, unedited photos will be exported, even if an edited version exists in the Photos library. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --skip-edited\n```\n\n----------------------------------------\n\nTITLE: Retrying Export Operations - osxphotos - Shell\nDESCRIPTION: Uses the --retry option followed by a number (e.g., 3) to specify how many times osxphotos should retry exporting a photo if an error occurs. This is particularly useful when exporting to unreliable network storage (NAS). Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --retry 3\n```\n\n----------------------------------------\n\nTITLE: Specifying a Photos Library\nDESCRIPTION: This command exports photos from a specific Photos library using the `--library` option, which specifies the path to the `.photoslibrary` file.  This is useful when working with multiple Photos libraries.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --library ~/Pictures/MyAlternateLibrary.photoslibrary\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters in osxphotos Templates\nDESCRIPTION: Illustrates combining multiple filters by separating them with the pipe `|` operator. Filters are applied sequentially to the template field's value. Assumes photo keywords are [\"FOO\", \"bar\"]. This example converts keywords to lowercase and then encloses them in parentheses.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_40\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{keyword|lower|parens}\" renders to: \"(foo)\", \"(bar)\"\n```\n\n----------------------------------------\n\nTITLE: Default Value with OSXphotos for directory template\nDESCRIPTION: This command exports photos, using a default value in the directory template. When a photo doesn't have a place name, the 'No-Country' string is used.  The command illustrates how to handle missing data in the metadata using a comma-separated default value in the --directory option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country,No-Country}\"\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Template Fields\nDESCRIPTION: Demonstrates using optional arguments ('(field_arg)') with template fields to modify their behavior, such as specifying a path separator for hierarchical data like folders and albums.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_3\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{folder_album}\nrenders to [\"Folder1/Album1\"]\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{folder_album(>)}\nrenders to [\"Folder1>Album1\"]\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{folder_album()}\nrenders to [\"Folder1Album1\"]\n```\n\n----------------------------------------\n\nTITLE: Exporting Only Portrait Mode Photos using osxphotos\nDESCRIPTION: Filters the export to include only photos identified as taken in Portrait Mode by using the `--portrait` query option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_45\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --portrait\n```\n\n----------------------------------------\n\nTITLE: Importing Library Comparison Functions from osxphotos (Python)\nDESCRIPTION: Illustrates the import of comparison functions and diff class from osxphotos for use in library diff workflows. This enables photo library comparisons via 'compare_photos_libraries' and representing differences via the 'PhotosDBDiff' dataclass. Requires the 'osxphotos' library. This import is a dependency setup step for running further comparison operations.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.compare_libraries import compare_photos_libraries, PhotosDBDiff\n```\n\n----------------------------------------\n\nTITLE: Getting Full Postal Address from Reverse Geolocation\nDESCRIPTION: Retrieves the full postal address derived from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_35\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address}\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Template with Finder Tags\nDESCRIPTION: This snippet shows how to combine `--finder-tag-keywords` with `--keyword-template` to customize the keywords written to Finder tags based on a template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a SQLite Export Report\nDESCRIPTION: Command for generating a SQLite database report of the export operation by specifying a .sqlite file extension with the --report option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --report export.sqlite\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Export Checkpoint in osxphotos CLI Bash Commands\nDESCRIPTION: Introduces the export checkpoint feature in osxphotos CLI which auto-saves the export database during export operations when using --ramdb mode to prevent data loss in case of interruption. The example shows the use of the --checkpoint flag with the export command. Dependencies include osxphotos CLI. The inputs are photo libraries and outputs are export archives with incremental checkpoint saves. This feature improves robustness of large exports.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export --checkpoint\n```\n\n----------------------------------------\n\nTITLE: Text Detection in Photos Using osxphotos\nDESCRIPTION: This variable performs text detection in an image using macOS's built-in algorithms, caching results for efficiency. It allows specifying a confidence threshold (0.0-1.0) to filter results, applicable only on macOS Catalina or later. Note: does not support Live Text feature.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_89\n\nLANGUAGE: Python\nCODE:\n```\n{detected_text}\n```\n\nLANGUAGE: Python\nCODE:\n```\n{detected_text:0.5}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables\nDESCRIPTION: Describes how to define and use variables within template strings using the format `{var:NAME,VALUE}`. Variables can be referenced using `%NAME` and can be useful for re-using complex template values or for using characters that are otherwise prohibited. Variables also enable filtering of combined template values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_102\n\nLANGUAGE: text\nCODE:\n```\nYou can define variables for later use in the template string using the format `{var:NAME,VALUE}` where `VALUE` is a template statement.  Variables may then be referenced using the format `%NAME`. For example: `{var:foo,bar}` defines the variable `%foo` to have value `bar`. This can be useful if you want to re-use a complex template value in multiple places within your template string or for allowing the use of characters that would otherwise be prohibited in a template string. For example, the \"pipe\" (`|`) character is not allowed in a find/replace pair but you can get around this limitation like so: `{var:pipe,{pipe}}{title[-,%pipe]}` which replaces the `-` character with `|` (the value of `%pipe`).\n\nAnother use case for variables is filtering combined template values. For example, using the `&combine_value` mechanism to combine two template values that might result in duplicate values, you could do the following: `{var:myvar,{template1&{template2,},}}{%myvar|uniq}` which allows the use of the uniq filter against the combined template values.\n\nVariables can also be referenced as fields in the template string, for example: `{var:year,{created.year}}{original_name}-{%year}`. In some cases, use of variables can make your template string more readable.  Variables can be used as template fields, as values for filters, as values for conditional operations, or as default values.  When used as a conditional value or default value, variables should be treated like any other field and enclosed in braces as conditional and default values are evaluated as template strings. For example: `{var:name,Katie}{person contains {%name}?{%name},Not-{%name}}`.\n```\n\n----------------------------------------\n\nTITLE: Extracting Exiftool Data - osxphotos\nDESCRIPTION: This tag uses exiftool to extract metadata from images. Requires exiftool (https://exiftool.org) to be installed and in the PATH.  Use the format '{exiftool:GROUP:TAGNAME}'.  For instance, '{exiftool:EXIF:Make}' or '{exiftool:IPTC:Keywords}'. See https://exiftool.org/TagNames/ for a list of valid tag names. The output is a string of the requested metadata from exiftool.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_127\n\nLANGUAGE: string\nCODE:\n```\n{exiftool}\n```\n\n----------------------------------------\n\nTITLE: Generating Export Reports with osxphotos (Command Line)\nDESCRIPTION: Specifies the path and format for an export report file. Supports templating for dynamic naming (e.g., including the date). Multiple formats (CSV, JSON, SQLite) are supported based on the file extension. See also --append.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_60\n\nLANGUAGE: Shell\nCODE:\n```\n--report REPORT_FILE\n```\n\nLANGUAGE: Shell\nCODE:\n```\n--report 'export_{today.date}.csv'\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Bracket\nDESCRIPTION: Represents a literal open bracket character ('[').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_63\n\nLANGUAGE: Template Language\nCODE:\n```\n{openbracket}\n```\n\n----------------------------------------\n\nTITLE: Applying strftime Template - osxphotos\nDESCRIPTION: This tag applies a strftime template to the current date/time of a photo.  It requires a valid strftime template as an argument, e.g., `%Y-%U`. The output is a string formatted according to the specified template or null if no template provided.  Refer to https://strftime.org/ for strftime templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_73\n\nLANGUAGE: string\nCODE:\n```\n{today.strftime}\n```\n\n----------------------------------------\n\nTITLE: Querying Best Food Photo by Aesthetic Score with osxphotos in Python\nDESCRIPTION: This Python code example demonstrates how to query the osxphotos PhotosDB for photos labeled as 'food' and sort them by their computed aesthetic score. It uses the PhotosDB().photos() method to retrieve all photos, filters them by normalized label, and sorts by the score.overall attribute in descending order to find the highest-scoring food photo. Dependencies: osxphotos must be installed; a compatible Apple Photos database and valid photo metadata are required. Inputs are labels associated with each photo; output is the PhotoInfo instance with the highest score for the specified label. Only works with Photos 5+.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\nphotos = osxphotos.PhotosDB().photos()\nbest_food_photo = sorted([p for p in photos if \"food\" in p.labels_normalized], key=lambda p: p.score.overall, reverse=True)[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Comment Using Template\nDESCRIPTION: This snippet sets the Finder comment of exported images to the photo's title and description, with a newline character separating them.  Demonstrates use of the `--xattr-template` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --xattr-template findercomment \"{title}{newline}{descr}\"\n```\n\n----------------------------------------\n\nTITLE: Running a Specific osxphotos Test by Name (Shell)\nDESCRIPTION: Executes a specific test function within the osxphotos test suite using the pytest '-k' flag to filter by name. This example runs tests containing 'test_export_cleanup'. Assumes the development environment is set up and activated.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pytest -k \"test_export_cleanup\"\n```\n\n----------------------------------------\n\nTITLE: Export Photos with Custom Edited Suffix\nDESCRIPTION: Exports photos and appends a custom suffix to the filenames of edited images. This allows differentiating between original and edited versions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_EDIT\"\n```\n\n----------------------------------------\n\nTITLE: Field with Argument (OSXPhotos Template)\nDESCRIPTION: Explains how to pass optional arguments to a template field using parentheses '(field_arg)'. For fields like folder_album, this argument specifies the path separator to use when joining folder and album names.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_3\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{folder_album}\n{folder_album(>)}\n{folder_album()}\n```\n\n----------------------------------------\n\nTITLE: Conditional Filename Marking for Favorites – Shell\nDESCRIPTION: Displays advanced template conditional logic in action, appending a '#' character to filenames for photos marked as 'Favorite'. Uses {original_name}{favorite?#,} so that only favorite assets are renamed with the marker, and others retain the original name unchanged. This enables at-a-glance identification of favorites in exported files. Requires knowledge of osxphotos template conditionals.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --filename \"{original_name}{favorite?#,}\"\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Parenthesis\nDESCRIPTION: Represents a literal close parenthesis character (')').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_62\n\nLANGUAGE: Template Language\nCODE:\n```\n{closeparens}\n```\n\n----------------------------------------\n\nTITLE: Get Folder Info from PhotosDB in Python\nDESCRIPTION: Retrieves a list of `FolderInfo` objects representing top-level folders in the database using the `folder_info` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. Returns an empty list if there are no folders. Only implemented for Photos 5 (Catalina).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folder_info\n```\n\n----------------------------------------\n\nTITLE: Using strftime Template\nDESCRIPTION: This describes the use of the strftime template tag, which allows for formatting dates using strftime patterns. It takes a template as an argument and returns a formatted date string.  It uses the modified or creation date of the photo. The example shows how to use it with the strftime template '%Y-%U' which will return the year-week number of the year.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_79\n\nLANGUAGE: text\nCODE:\n```\n{modified.strftime,TEMPLATE} where TEMPLATE\n                                is a valid strftime template, e.g.\n                                {modified.strftime,%Y-%U} would result in\n                                year-week number of year: '2020-23'. If used\n                                with no template will return null value.\n                                Uses creation date if photo is not modified.\n                                See https://strftime.org/ for help on\n                                strftime templates.\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Accessing Venue Type in osxphotos Python Scripts\nDESCRIPTION: This variable provides the category of the venue, such as 'Restaurant', automatically determined by Photos, which can be used for filtering or analytical purposes within scripts.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_87\n\nLANGUAGE: Python\nCODE:\n```\n{searchinfo.venue_type}\n```\n\n----------------------------------------\n\nTITLE: Adding Exported Photos to Photos Album (Command Line)\nDESCRIPTION: Adds all photos successfully exported to the specified Photos album. The album will be created if it does not exist. This functionality requires the Photos library being exported to be the currently open library in the Photos application.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_65\n\nLANGUAGE: Shell\nCODE:\n```\n--add-exported-to-album ALBUM\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Query Command using osxphotos CLI (Python)\nDESCRIPTION: This snippet demonstrates how to build a custom command line tool with osxphotos using the `@query_command` decorator. It shows how to integrate Click options, access photo data, utilize osxphotos CLI helpers for output (`echo`, `verbose`, `logger`, `abort`) and state management (`kvstore`), and handle program flow.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.cli import (\n    abort,\n    echo,\n    echo_error,\n    kvstore,\n    logger,\n    query_command,\n    verbose,\n)\n\n\n@query_command()\n@click.option(\n    \"--resume\",\n    is_flag=True,\n    help=\"Resume processing from last run, do not reprocess photos\",\n)\n@click.option(\n    \"--dry-run\", is_flag=True, help=\"Do a dry run, don't actually do anything\"\n)\ndef example(resume, dry_run, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_2.py --help` or `python cli_example_2.py --help`\n\n    The @query_command decorator returns a click.command so you can add additional options\n    using standard click decorators.  For example, the --resume and --dry-run options.\n    For more information on click, see https://palletsprojects.com/p/click/.\n    \"\"\"\n\n    # abort will print the message to stderr and exit with the given exit code\n    if not photos:\n        abort(\"Nothing to do!\", 1)\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found [count]{len(photos)}[/] photos\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # the logger is a python logging.Logger object\n    # debug messages will only be printed if --debug option is set\n    logger.debug(f\"{kwargs=}\")\n\n    # kvstore() returns a SQLiteKVStore object for storing state between runs\n    # this is basically a persistent dictionary that can be used to store state\n    # see https://github.com/RhetTbull/sqlitekvstore for more information\n    kv = kvstore(\"cli_example_2\")\n    verbose(f\"Using key-value cache: {kv.path}\")\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        if resume and photo.uuid in kv:\n            echo(\n                f\"Skipping processed photo [filename]{photo.original_filename}[/] ([uuid]{photo.uuid}[/])\"\n            )\n            continue\n\n        # store the uuid and current time in the kvstore\n        # the key and value must be a type supported by SQLite: int, float, str, bytes, bool, None\n        # if you need to store other values, you should serialize them to a string or bytes first\n        # for example, using json.dumps() or pickle.dumps()\n        kv[photo.uuid] = datetime.datetime.now().isoformat()\n        echo(f\"Processing [filename]{photo.original_filename}[/] [time]{photo.date}[/]\")\n        if not dry_run:\n            # do something with the photo here\n            echo(f\"Doing something with [filename]{photo.original_filename}[/]\")\n\n    # echo_error will print to stderr\n    # if you add [warning] or [error], it will be formatted accordingly\n    # and include an emoji to make the message stand out\n    echo_error(\"[warning]This is a warning message!\")\n    echo_error(\"[error]This is an error message!\")\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n\n----------------------------------------\n\nTITLE: Preventing File Deletion During osxphotos Cleanup (Command Line)\nDESCRIPTION: Specifies individual rules using .gitignore format or absolute paths to prevent files or directories matching the rule from being deleted when the --cleanup option is used. Can be repeated for multiple exclusions or specified in a .osxphotos_keep file. Wildcard rules must be quoted in shell.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_64\n\nLANGUAGE: Shell\nCODE:\n```\n--keep KEEP_RULE\n```\n\nLANGUAGE: Shell\nCODE:\n```\n--keep \"/*.txt\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n--keep \"**/*.txt\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Venue Information for a Photo in OSXPhotos Python\nDESCRIPTION: Returns lists of venue names, venue types, and media types associated with a photo. Also available is a method that returns all related search_info properties as a single list or dictionary. Used to gather location and media classification metadata for photos. Relies on Photos library metadata extraction.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nvenue_names = photo.venues\nvenue_types = photo.venue_types\nmedia_types = photo.media_types\nall_search_info = photo.all\nsearch_info_dict = photo.asdict()\n```\n\n----------------------------------------\n\nTITLE: Exporting Portrait Mode Photos using --portrait Option in osxphotos CLI\nDESCRIPTION: This snippet exports only Portrait Mode photos by specifying the --portrait flag. The filter ensures only images identified as 'Portrait Mode' by Photos are exported. Dependencies: osxphotos CLI. Inputs: Photos library, path to export. Output: Portrait Mode images. Limitation: Only available for supported devices and metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_38\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --portrait\n```\n\n----------------------------------------\n\nTITLE: Extracting Country Name - osxphotos\nDESCRIPTION: This tag extracts the country name from the photo's reverse geolocation data. It relies on the availability of geolocation data within the photo's metadata. The output is a string representing the country name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_76\n\nLANGUAGE: string\nCODE:\n```\n{place.name.country}\n```\n\n----------------------------------------\n\nTITLE: Extracting Raw Photo Paths Using osxphotos (Python)\nDESCRIPTION: Illustrates how to iterate through all photos in the Photos database to retrieve file paths for raw images, whether they are standalone or part of a raw+JPEG pair. Assumes the osxphotos package is installed and the PhotosDB has been loaded. The snippet filters photos based on raw status, using 'israw' and 'has_raw' attributes, and selects the appropriate path for each. Inputs are the list of photo objects; output is printed paths for raw images. Constraints: The Photos library must be available and accessible for the script to function.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photos = photosdb.photos()\n>>> all_raw = [p for p in photos if p.israw or p.has_raw]\n>>> for raw in all_raw:\n...     path = raw.path if raw.israw else raw.path_raw\n...     print(path)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of OSXPhotos Python Package for Database Access\nDESCRIPTION: This snippet demonstrates how to initialize the PhotosDB object and access photo metadata like keywords, persons, and albums. It also shows how to filter photos based on keywords and persons, printing their attributes. Dependencies include the osxphotos library. Inputs are photo filters; outputs are printed metadata and photo details.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/package_overview.rst.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\" Simple usage of the package \"\"\"\nimport osxphotos\n\ndef main():\n    photosdb = osxphotos.PhotosDB()\n    print(photosdb.keywords)\n    print(photosdb.persons)\n    print(photosdb.album_names)\n\n    print(photosdb.keywords_as_dict)\n    print(photosdb.persons_as_dict)\n    print(photosdb.albums_as_dict)\n\n    # find all photos with Keyword = Foo and containing John Smith\n    photos = photosdb.photos(keywords=[\"Foo\"],persons=[\"John Smith\"])\n\n    # find all photos that include Alice Smith but do not contain the keyword Bar\n    photos = [p for p in photosdb.photos(persons=[\"Alice Smith\"])\n                if p not in photosdb.photos(keywords=[\"Bar\"]) ]\n    for p in photos:\n        print(\n            p.uuid,\n            p.filename,\n            p.original_filename,\n            p.date,\n            p.description,\n            p.title,\n            p.keywords,\n            p.albums,\n            p.persons,\n            p.path,\n        )\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Import Sessions with ImportInfo Objects in osxphotos Python\nDESCRIPTION: ImportInfo objects represent import sessions in the Photos library, obtainable from PhotosDB.import_info or PhotoInfo.import_info. They hold a unique uuid, creation_date, start_date, and end_date (with older Photos versions collapsing these dates). The photos attribute returns PhotoInfo objects contained within that import session. asdict() method converts the import session metadata into a dictionary. This aids in tracking and grouping photos by import batches.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_46\n\n\n\n----------------------------------------\n\nTITLE: Executing External Python Functions in osxphotos Templates\nDESCRIPTION: This snippet allows invoking external Python functions from a URL or local path within templates, passing the PhotoInfo object as an argument. It enables custom processing or advanced computations, with functions identified by filename and function name separated by '::'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\n{function:file.py::function_name}\n```\n\nLANGUAGE: Python\nCODE:\n```\n{function:https://raw.githubusercontent.com/RhetTbull/osxphotos/main/examples/template_function.py::example}\n```\n\n----------------------------------------\n\nTITLE: Standardizing JPEG Extension During Export - osxphotos - Shell\nDESCRIPTION: Uses the --jpeg-ext option to ensure all exported JPEG files use a specified extension (e.g., jpg, jpeg, JPG, JPEG). This example forces all exported JPEGs to have the .jpg extension, overriding Photos' default behavior (which often uses .jpeg for edited photos). Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --jpeg-ext jpg\n```\n\n----------------------------------------\n\nTITLE: Generating Face Test Data (Shell)\nDESCRIPTION: Runs the `gen_face_test_data.py` script using Python 3. This script generates test data specifically used by the `test_faceinfo.py` test module.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\npython3 tests/gen_face_test_data.py\n```\n\n----------------------------------------\n\nTITLE: Using the Titlecase Filter in osxphotos Templates\nDESCRIPTION: Example of applying the `titlecase` filter to the `{descr}` template field to convert the photo description to title case. Assumes the photo description is \"my description\".\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_41\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{descr|titlecase}\" renders to: \"My Description\"\n```\n\n----------------------------------------\n\nTITLE: Extracting State/Province Address - osxphotos\nDESCRIPTION: This tag extracts the state/province part of the postal address from the photo's reverse geolocation data. Requires state/province data within photo metadata. The output is a string representing the state/province.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_83\n\nLANGUAGE: string\nCODE:\n```\n{place.address.state_province}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Day of Year (3-Digit)\nDESCRIPTION: Retrieves the 3-digit, zero-padded day of the year (Julian day) for the current date, starting from 1.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_24\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.doy}\n```\n\n----------------------------------------\n\nTITLE: Changing JPEG Extension\nDESCRIPTION: This command uses the `--jpeg-ext` option to standardize the file extension for JPEG images. The command specifies `jpg` as the extension, resulting in all exported JPEG files using the '.jpg' extension instead of '.jpeg', '.JPG', or '.JPEG'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --jpeg-ext jpg\n```\n\n----------------------------------------\n\nTITLE: Getting Current Month Abbreviation\nDESCRIPTION: Retrieves the abbreviated name of the current month according to the user's locale settings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_21\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.mon}\n```\n\n----------------------------------------\n\nTITLE: Compare two Photos libraries\nDESCRIPTION: This snippet demonstrates how to compare two Photos libraries using the `osxphotos compare` command.  It shows the basic syntax and an example of the output, indicating the number of assets unique to each library and those that are the same or different.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos compare [OPTIONS] LIBRARY1 LIBRARY2\n```\n\n----------------------------------------\n\nTITLE: Finding Photos by Camera Make Using ExifInfo\nDESCRIPTION: Example showing how to filter photos by camera make (specifically Nikon cameras) using the exif_info property.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nnikon_photos = [\n    p\n    for p in osxphotos.PhotosDB().photos()\n    if p.exif_info.camera_make and \"nikon\" in p.exif_info.camera_make.lower()\n]\n```\n\n----------------------------------------\n\nTITLE: Loading osxphotos Configuration - osxphotos CLI\nDESCRIPTION: Demonstrates how to load previously saved osxphotos export options from a TOML configuration file using the `--load-config FILE` option. This simplifies running complex, repetitive export tasks.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_44\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --load-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Get Person Info from PhotosDB in Python\nDESCRIPTION: Retrieves a list of `PersonInfo` objects representing persons who appear in photos in the database using the `person_info` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nperson_info = photosdb.person_info\n```\n\n----------------------------------------\n\nTITLE: Reading EXIF Metadata Dictionary - Python\nDESCRIPTION: This snippet illustrates the structure of the EXIF metadata dictionary returned by ExifTool.asdict(). Keys are strings of the form 'GROUP:TAG', and values may be numeric, string, or list types. This data structure provides programmatic access to a wide range of metadata tags such as aperture, image size, creation date, and GPS position. The input is a photo file path and the output is a Python dictionary with metadata. No additional dependencies are required beyond osxphotos. This metadata extraction is read-only in this context.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n{'Composite:Aperture': 2.2,\n 'Composite:GPSPosition': '-34.9188916666667 138.596861111111',\n 'Composite:ImageSize': '2754 2754',\n 'EXIF:CreateDate': '2017:06:20 17:18:56',\n 'EXIF:LensMake': 'Apple',\n 'EXIF:LensModel': 'iPhone 6s back camera 4.15mm f/2.2',\n 'EXIF:Make': 'Apple',\n 'XMP:Title': 'Elder Park',\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Season from Search Info\nDESCRIPTION: Retrieves the season of the year (e.g., 'Summer') associated with the photo, determined by Photos' image categorization. Requires Photos 5 or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_42\n\nLANGUAGE: Template Language\nCODE:\n```\n{searchinfo.season}\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Folder and Album Path\nDESCRIPTION: Retrieves the full folder path leading to the album, plus the album name (e.g., 'Folder/Subfolder/Album'). If the album is not in a folder, it returns just the album name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_73\n\nLANGUAGE: Template Language\nCODE:\n```\n{folder_album}\n```\n\n----------------------------------------\n\nTITLE: Running osxphotos Export from Python Using export_cli Function\nDESCRIPTION: Illustrates how to invoke the osxphotos export command programmatically from Python by importing and calling the export_cli function from the osxphotos.cli.export module. This allows integration of export functionality into Python scripts. Key parameters include dest specifying export destination and update flag to update existing export. Dependencies include osxphotos package installed and accessible in the Python environment. The output is an exported photo set.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from osxphotos.cli.export import export_cli\n>>> export_cli(dest=\"/private/tmp\", update=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Filenames Based on Keywords\nDESCRIPTION: Command showing how to generate multiple files with different names by incorporating keywords into filenames.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --filename \"{keyword}-{original_name}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Folder and Album/Project Path\nDESCRIPTION: Retrieves the full folder path leading to the album or project, plus the album/project name. Treats projects like albums.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_76\n\nLANGUAGE: Template Language\nCODE:\n```\n{folder_album_project}\n```\n\n----------------------------------------\n\nTITLE: Advanced Command Line Tool with State using osxphotos\nDESCRIPTION: This more advanced example builds upon the previous one by adding 'dry-run' and 'resume' capabilities, preserving state using a SQLite key-value store.  It also demonstrates the usage of `click` options, logging with a Python logger, and rich text formatting.  Dependencies include `osxphotos`, `click`, and the standard library `datetime`. This tool uses the `query_command` decorator and allows for a dry run with the `--dry-run` and `--resume` flags.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\n\"\"\"Sample query command for osxphotos\n\nThis shows how simple it is to create a command line tool using osxphotos to process your photos.\n\nUsing the @query_command decorator turns your function to a full-fledged command line app that\ncan be run via `osxphotos run cli_example_2.py` or `python cli_example_2.py` if you have pip installed osxphotos.\n\nUsing this decorator makes it very easy to create a quick command line tool that can operate on\na subset of your photos. Additionally, writing a command in this way makes it easy to later\nincorporate the command into osxphotos as a full-fledged command.\n\nThe decorator will add all the query options available in `osxphotos query` as command line options\nas well as the following options:\n--verbose\n--timestamp\n--theme\n--db\n--debug (hidden, won't show in help)\n\nThe decorated function will perform the query and pass the list of filtered PhotoInfo objects\nto your function.  You can then do whatever you want with the photos.\n\nFor example, to run the command on only selected photos:\n\n    osxphotos run cli_example_2.py --selected\n\nTo run the command on all photos with the keyword \"foo\":\n\n    osxphotos run cli_example_2.py --keyword foo\n\nThe following helper functions may be useful and can be imported from osxphotos.cli:\n\n    abort(message: str, exit_code: int = 1)\n        Abort with error message and exit code\n    echo(message: str)\n        Print message to stdout using rich formatting\n    echo_error(message: str)\n        Print message to stderr using rich formatting\n    logger: logging.Logger\n        Python logger for osxphotos; for example, logger.debug(\"debug message\")\n    verbose(*args, level: int = 1)\n        Print args to stdout if --verbose option is set\n    query_command: decorator to create an osxphotos query command\n    kvstore(name: str) -> SQLiteKVStore useful for storing state between runs\n\nThe verbose, echo, and echo_error functions use rich formatting to print messages to stdout and stderr.\nSee https://github.com/Textualize/rich for more information on rich formatting.\n\nIn addition to standard rich formatting styles, the following styles will be defined\n(and can be changed using --theme):\n\n    [change]: something change\n    [no_change]: indicate no change\n    [count]: a count\n    [error]: an error\n    [filename]: a filename\n    [filepath]: a filepath\n    [num]: a number\n    [time]: a time or date\n    [tz]: a timezone\n    [warning]: a warning\n    [uuid]: a uuid\n\nThe tags should be closed with [/] to end the style.  For example:\n\n    echo(\"[filename]foo[/] [time]bar[/]\")\n\nFor simpler examples, see `cli_example_1.py`\n\"\"\"\n\nfrom __future__ import annotations\n\nimport datetime\n\nimport click\n\nimport osxphotos\nfrom osxphotos.cli import (\n    abort,\n    echo,\n    echo_error,\n    kvstore,\n    logger,\n    query_command,\n    verbose,\n)\n\n\n@query_command()\n@click.option(\n    \"--resume\",\n    is_flag=True,\n    help=\"Resume processing from last run, do not reprocess photos\",\n)\n@click.option(\n    \"--dry-run\", is_flag=True,\n    help=\"Do a dry run, don't actually do anything\"\n)\ndef example(resume, dry_run, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_2.py --help` or `python cli_example_2.py --help`\n\n    The @query_command decorator returns a click.command so you can add additional options\n    using standard click decorators.  For example, the --resume and --dry-run options.\n    For more information on click, see https://palletsprojects.com/p/click/.\n    \"\"\"\n\n    # abort will print the message to stderr and exit with the given exit code\n    if not photos:\n        abort(\"Nothing to do!\", 1)\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found [count]{len(photos)}[/] photos\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # the logger is a python logging.Logger object\n    # debug messages will only be printed if --debug option is set\n    logger.debug(f\"{kwargs=}\")\n\n    # kvstore() returns a SQLiteKVStore object for storing state between runs\n    # this is basically a persistent dictionary that can be used to store state\n    # see https://github.com/RhetTbull/sqlitekvstore for more information\n    kv = kvstore(\"cli_example_2\")\n    verbose(f\"Using key-value cache: {kv.path}\")\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        if resume and photo.uuid in kv:\n            echo(\n                f\"Skipping processed photo [filename]{photo.original_filename}[/] ([uuid]{photo.uuid}[/])\"\n            )\n            continue\n\n        # store the uuid and current time in the kvstore\n        # the key and value must be a type supported by SQLite: int, float, str, bytes, bool, None\n        # if you need to store other values, you should serialize them to a string or bytes first\n        # for example, using json.dumps() or pickle.dumps()\n        kv[photo.uuid] = datetime.datetime.now().isoformat()\n        echo(f\"Processing [filename]{photo.original_filename}[/] [time]{photo.date}[/]\")\n        if not dry_run:\n            # do something with the photo here\n            echo(f\"Doing something with [filename]{photo.original_filename}[/]\")\n\n    # echo_error will print to stderr\n    # if you add [warning] or [error], it will be formatted accordingly\n```\n```\n\n----------------------------------------\n\nTITLE: Getting State/Province Name from Reverse Geolocation\nDESCRIPTION: Retrieves the state or province name from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_32\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.name.state_province}\n```\n\n----------------------------------------\n\nTITLE: Formatting Template Values with Specific Data Types in osxphotos\nDESCRIPTION: This template converts the input value to a specified data type ('int', 'float', or 'str') and formats it using Python's string formatting, allowing precise control over output presentation, such as formatting focal length or other numerical metadata.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_92\n\nLANGUAGE: Python\nCODE:\n```\n{format:float:.1f,{exiftool:EXIF:FocalLength}}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Tab - osxphotos\nDESCRIPTION: This tag inserts a tab character into the output.  It has no dependencies. The output is a tab: '\\t'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_114\n\nLANGUAGE: string\nCODE:\n```\n{tab}\n```\n\n----------------------------------------\n\nTITLE: Using shell_quote to safely escape shell template values in osxphotos\nDESCRIPTION: This snippet explains the use of '{shell_quote,TEMPLATE}' to escape template values for safe shell usage, preventing injection or errors by adding quotes only when necessary. It helps format filenames or other string values securely in shell commands.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_57\n\nLANGUAGE: plaintext\nCODE:\n```\n|{shell_quote,TEMPLATE}'; quotes the rendered TEMPLATE value(s) for safe usage in the shell, e.g. My file.jpeg => 'My file.jpeg'; only adds quotes if needed.|\n```\n\n----------------------------------------\n\nTITLE: Executing External Python Functions via {function}\nDESCRIPTION: Demonstrates the {function:file.py::function_name} syntax in osxphotos templates to call a specified Python function within an external file (local path or URL). The target function receives the PhotoInfo object for the current photo, and its return value is used as the template substitution.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_14\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{function:file.py::function_name}\n```\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{function:https://raw.githubusercontent.com/RhetTbull/osxphotos/main/examples/template_function.py::example}\n```\n\n----------------------------------------\n\nTITLE: Exporting from a Specific Photos Library Database - osxphotos Command Line - Shell\nDESCRIPTION: Specifies an alternate Photos Library (database) using --db, allowing export from non-default or multiple libraries. Input requires the path to an alternate .photoslibrary database. Output is exported images from that library. User must have read access to the specified Photos Library and osxphotos installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --db ~/Pictures/MyAlternateLibrary.photoslibrary\n```\n\n----------------------------------------\n\nTITLE: Extracting Album and Project - osxphotos\nDESCRIPTION: This tag retrieves the album(s) and project(s) a photo is contained in, treating projects as regular albums. It depends on the photo being part of an album or project. The output is a string, potentially a list of albums and projects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_120\n\nLANGUAGE: string\nCODE:\n```\n{album_project}\n```\n\n----------------------------------------\n\nTITLE: Opening a Specific Photos Library with Database Path\nDESCRIPTION: Opens a specific Photos library by providing the full path to the database file. This allows querying database files even if separated from the .photoslibrary file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(dbfile=\"/Users/smith/Pictures/Test.photoslibrary/database/photos.db\")\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Sequence in Folder/Album Path\nDESCRIPTION: Provides the zero-based index of the photo within its specific folder path and album combination. Only valid in '--filename' when '{folder_album}' is used in '--directory'. Can specify a starting value (e.g., {folder_album_seq(1)}) and apply Python formatting (e.g., {folder_album_seq:05d}). More robust against duplicate album names than {album_seq}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_52\n\nLANGUAGE: Template Language\nCODE:\n```\n{folder_album_seq}\n{folder_album_seq(start)}\n{folder_album_seq:format_spec(start)}\n```\n\n----------------------------------------\n\nTITLE: Building libdisclaim_arm64.dylib Library with clang on Apple Silicon Mac (Bash)\nDESCRIPTION: This Bash command compiles the `disclaim.cpp` source file into a shared dynamic library (`libdisclaim_arm64.dylib`) for Apple Silicon Macs. It uses clang with the `-shared` flag and sets the minimum macOS deployment target to 10.12 via `-mmacosx-version-min=10.12`. The resulting dynamic library is placed in `osxphotos/lib/`. This library enables the osxphotos application to manage Photos library permissions natively when running on arm64 architecture.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/lib/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nclang -shared -mmacosx-version-min=10.12 disclaim.cpp -o osxphotos/lib/libdisclaim_arm64.dylib\n```\n\n----------------------------------------\n\nTITLE: Installing OSXPhotos using pipx and homebrew on macOS Shell Commands\nDESCRIPTION: Shows the sequence of shell commands to install the OSXPhotos package on macOS using Homebrew and pipx. This includes installing Homebrew if not already installed, installing pipx via Homebrew, and then installing the osxphotos package via pipx. The commands enable the user to run the 'osxphotos' CLI utility from the terminal thereafter.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/overview.cog.rst.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install pipx\npipx install osxphotos\nosxphotos\n```\n\n----------------------------------------\n\nTITLE: Inserting a Newline Character\nDESCRIPTION: Represents a newline character ('\\n'). Alias: {lf}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_65\n\nLANGUAGE: Template Language\nCODE:\n```\n{newline}\n```\n\n----------------------------------------\n\nTITLE: Removing Leading/Trailing Whitespace from Template Output\nDESCRIPTION: Explains how to use the {strip,TEMPLATE} syntax in osxphotos templates. This function removes whitespace characters from the beginning and end of the rendered value(s) of the specified TEMPLATE.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_12\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{strip,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Extracting Postal Address - osxphotos\nDESCRIPTION: This tag retrieves the postal address from the photo's reverse geolocation data.  It requires geolocation data with full address information. The output is a string containing the postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_80\n\nLANGUAGE: string\nCODE:\n```\n{place.address}\n```\n\n----------------------------------------\n\nTITLE: Opening System Photos Library with dbfile Parameter\nDESCRIPTION: Alternative approach to opening the System photo library by using the dbfile parameter with get_system_library_path() in macOS Catalina.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(dbfile=path)\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Accessing Holiday Names in osxphotos Python Scripts\nDESCRIPTION: This snippet explains how to access the 'Holiday names' metadata associated with photos, which are optionally automatically applied by macOS Photos' image categorization algorithms for photos taken during holidays. It helps retrieve holiday labels for photos in scripts or templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_84\n\nLANGUAGE: Python\nCODE:\n```\n{searchinfo.holidays}\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Database Table Data with PhotoTables in Python\nDESCRIPTION: Demonstrates how to use the `PhotoTables` object, accessible via `photo.tables()`, to retrieve data directly from underlying Photos database tables like `ZASSET` and `ZADDITIONALASSETATTRIBUTES`. Shows accessing specific column data (e.g., `ZTITLE`) as a tuple and retrieving all rows as a list of tuples (`rows()`) or a list of dictionaries (`rows_dict()`). Requires an `osxphotos` `PhotoInfo` object (`photo`).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_48\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.tables().ZADDITIONALASSETATTRIBUTES.ZTITLE\n(\"St. James's Park\",)\n\n>>> photo.tables().ZASSET.rows()\n[(6, 3, 35, 0, 0, 0, 0, 0, 0, None, None, None, None, None, 0, 0, 1, 0, 0, 0, 0, -100, 0, 1, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 1, 6192599813128215, 1, 2814835671629878, 1, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2047, 7, None, 8, None, None, None, None, None, None, None, None, 3, 6, 6, 6, None, 6, 4, None, None, 8, 4, None, 2, None, 3, None, 3, None, None, 585926209.859624, 596906868.198932, 689981763.374756, None, None, None, 0.5, 561129492.501, 0.0, 596906868.198932, None, 0.03816793893129771, None, 51.50357167, -0.1318055, 689982854.802854, 0.6494140625, 0.0, 561129492.501, None, None, None, None, None, None, None, 'D', 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', None, 'sRGB IEC61966-2.1', 'public.jpeg', 'DC99FBDD-7A52-4100-A5BB-344131646C30', b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')]\n\n>>> photo.tables().ZASSET.rows_dict()\n[{'Z_PK': 6, 'Z_ENT': 3, 'Z_OPT': 35, 'ZACTIVELIBRARYSCOPEPARTICIPATIONSTATE': 0, 'ZAVALANCHEPICKTYPE': 0, 'ZBUNDLESCOPE': 0, 'ZCAMERAPROCESSINGADJUSTMENTSTATE': 0, 'ZCLOUDDELETESTATE': 0, 'ZCLOUDDOWNLOADREQUESTS': 0, 'ZCLOUDHASCOMMENTSBYME': None, 'ZCLOUDHASCOMMENTSCONVERSATION': None, 'ZCLOUDHASUNSEENCOMMENTS': None, 'ZCLOUDISDELETABLE': None, 'ZCLOUDISMYASSET': None, 'ZCLOUDLOCALSTATE': 0, 'ZCLOUDPLACEHOLDERKIND': 0, 'ZCOMPLETE': 1, 'ZDEFERREDPROCESSINGNEEDED': 0, 'ZDEPTHTYPE': 0, 'ZDERIVEDCAMERACAPTUREDEVICE': 0, 'ZDUPLICATEASSETVISIBILITYSTATE': 0, 'ZFACEAREAPOINTS': -100, 'ZFAVORITE': 0, 'ZHASADJUSTMENTS': 1, 'ZHDRTYPE': 0, 'ZHEIGHT': 1356, 'ZHIDDEN': 0, 'ZHIGHFRAMERATESTATE': 0, 'ZISMAGICCARPET': 0, 'ZKIND': 0, 'ZKINDSUBTYPE': 0, 'ZLIBRARYSCOPESHARESTATE': 0, 'ZMONOSKITYPE': 0, 'ZORIENTATION': 1, 'ZPACKEDACCEPTABLECROPRECT': 6192599813128215, 'ZPACKEDBADGEATTRIBUTES': 1, 'ZPACKEDPREFERREDCROPRECT': 2814835671629878, 'ZPLAYBACKSTYLE': 1, 'ZPLAYBACKVARIATION': 0, 'ZSAVEDASSETTYPE': 3, 'ZSEARCHINDEXREBUILDSTATE': 0, 'ZSYNDICATIONSTATE': 0, 'ZTHUMBNAILINDEX': 5, 'ZTRASHEDSTATE': 0, 'ZVIDEOCPDURATIONVALUE': 0, 'ZVIDEOCPVISIBILITYSTATE': 0, 'ZVIDEODEFERREDPROCESSINGNEEDED': 0, 'ZVIDEOKEYFRAMETIMESCALE': 0, 'ZVIDEOKEYFRAMEVALUE': 0, 'ZVISIBILITYSTATE': 0, 'ZWIDTH': 2047, 'ZADDITIONALATTRIBUTES': 7, 'ZCLOUDFEEDASSETSENTRY': None, 'ZCOMPUTEDATTRIBUTES': 8, 'ZCONVERSATION': None, 'ZDAYGROUPHIGHLIGHTBEINGASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGEXTENDEDASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETPRIVATE': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZDAYGROUPHIGHLIGHTBEINGSUMMARYASSETS': None, 'ZDUPLICATEMETADATAMATCHINGALBUM': None, 'ZDUPLICATEPERCEPTUALMATCHINGALBUM': None, 'ZEXTENDEDATTRIBUTES': 3, 'ZHIGHLIGHTBEINGASSETS': 6, 'ZHIGHLIGHTBEINGEXTENDEDASSETS': 6, 'ZHIGHLIGHTBEINGKEYASSETPRIVATE': 6, 'ZHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZHIGHLIGHTBEINGSUMMARYASSETS': 6, 'ZIMPORTSESSION': 4, 'ZLIBRARYSCOPE': None, 'ZMASTER': None, 'ZMEDIAANALYSISATTRIBUTES': 8, 'ZMOMENT': 4, 'ZMOMENTSHARE': None, 'ZMONTHHIGHLIGHTBEINGKEYASSETPRIVATE': 2, 'ZMONTHHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZPHOTOANALYSISATTRIBUTES': 3, 'ZTRASHEDBYPARTICIPANT': None, 'ZYEARHIGHLIGHTBEINGKEYASSETPRIVATE': 3, 'ZYEARHIGHLIGHTBEINGKEYASSETSHARED': None, 'Z_FOK_CLOUDFEEDASSETSENTRY': None, 'ZADDEDDATE': 585926209.859624, 'ZADJUSTMENTTIMESTAMP': 596906868.198932, 'ZANALYSISSTATEMODIFICATIONDATE': 689981763.374756, 'ZCLOUDBATCHPUBLISHDATE': None, 'ZCLOUDLASTVIEWEDCOMMENTDATE': None, 'ZCLOUDSERVERPUBLISHDATE': None, 'ZCURATIONSCORE': 0.5, 'ZDATECREATED': 561129492.501, 'ZDURATION': 0.0, 'ZFACEADJUSTMENTVERSION': 596906868.198932, 'ZHDRGAIN': None, 'ZHIGHLIGHTVISIBILITYSCORE': 0.03816793893129771, 'ZLASTSHAREDDATE': None, 'ZLATITUDE': 51.50357167, 'ZLONGITUDE': -0.1318055, 'ZMODIFICATIONDATE': 689982854.802854, 'ZOVERALLAESTHETICSCORE': 0.6494140625, 'ZPROMOTIONSCORE': 0.0, 'ZSORTTOKEN': 561129492.501, 'ZTRASHEDDATE': None, 'ZAVALANCHEUUID': None, 'ZCLOUDASSETGUID': None, 'ZCLOUDBATCHID': None, 'ZCLOUDCOLLECTIONGUID': None, 'ZCLOUDOWNERHASHEDPERSONID': None, 'ZDELETEREASON': None, 'ZDIRECTORY': 'D', 'ZFILENAME': 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', 'ZMEDIAGROUPUUID': None, 'ZORIGINALCOLORSPACE': 'sRGB IEC61966-2.1', 'ZUNIFORMTYPEIDENTIFIER': 'public.jpeg', 'ZUUID': 'DC99FBDD-7A52-4100-A5BB-344131646C30', 'ZIMAGEREQUESTHINTS': b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', 'ZLOCATIONDATA': b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'}]\n```\n\n----------------------------------------\n\nTITLE: Combining Template Values with &combine_value\nDESCRIPTION: Demonstrates combining template fields using the `&combine_value` operator. This allows for multiple values to be returned from a single template, effectively concatenating or merging data from different fields. Nested combine operators are also supported for more complex combinations.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_97\n\nLANGUAGE: text\nCODE:\n```\n`&combine_value`: Template fields may be combined with another template statement to return multiple values. The combine_value is another template statement. For example, the template {created.year&{folder_album,}} would resolve to [\"1999\", \"Vacation\"] if the photo was created in 1999 and was in the album Vacation. Because the combine_value is a template statement, multiple templates may be combined together by nesting the combine operator: {template1&{template2&{template3,},},}. In this example, a null default value is used to prevent the default value from being combined if any of the nested templates does not resolve to a value\n```\n\n----------------------------------------\n\nTITLE: Executing External Python Functions in osxphotos Templates\nDESCRIPTION: Executes a Python function from an external file and uses its return value for template substitution. The function receives the PhotoInfo object for the current photo being processed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_108\n\nLANGUAGE: plain\nCODE:\n```\n{function:file.py::function_name}\n```\n\nLANGUAGE: plain\nCODE:\n```\n{function:https://raw.githubusercontent.com/RhetTbull/osxphotos/main/examples/template_function.py::example}\n```\n\n----------------------------------------\n\nTITLE: Post-Command Template Explanation - osxphotos Template\nDESCRIPTION: Provides a visual breakdown of the template string used in a `--post-command` example. It explains how `shell_quote`, `filepath`, `comma`, and `,+keyword,` template fields and modifiers are used to format output for execution in a shell command.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_47\n\nLANGUAGE: Template\nCODE:\n```\n{shell_quote,{filepath}{comma}{,+keyword,}}\n │            │         │      │        │\n │            │         │      |        │\n └──> quote everything after comma for proper execution in the shell\n              │         │      │        │\n              └───> filepath of the exported file\n                           │       │        │\n                           └───> insert a comma \n                                   │        │\n                                   └───> join the list of keywords together with a \",\"\n                                            │\n                                            └───> if no keywords, insert nothing (empty string: \"\")\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Photo by UUID\nDESCRIPTION: Finds a single photo with the exact UUID provided. UUIDs are the unique identifiers used by the Photos database to identify each photo.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(uuid=[\"osMNIO5sQFGZTbj9WrydRB\"])\n```\n\n----------------------------------------\n\nTITLE: Extracting Albums - osxphotos\nDESCRIPTION: This tag retrieves the album(s) a photo is contained in. Requires the photo to be part of an album. The output is a string, potentially a list of albums.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_117\n\nLANGUAGE: string\nCODE:\n```\n{album}\n```\n\n----------------------------------------\n\nTITLE: Extracting Camera Model - osxphotos\nDESCRIPTION: This tag extracts the camera model from the original photo's EXIF information as imported by Photos.  Requires EXIF data in the photo metadata. The output is a string representing the camera model, e.g., 'iPhone 6s'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_89\n\nLANGUAGE: string\nCODE:\n```\n{exif.camera_model}\n```\n\n----------------------------------------\n\nTITLE: Defining the PhotosDBDiff Structure - osxphotos - Python\nDESCRIPTION: This code snippet defines the PhotosDBDiff data class, which encapsulates the result of comparing two PhotosDB objects. Key attributes include lists of photos only in library A or B, photos in both (either the same or different), and a signature function for identifying photos. The class provides asdict, json, and csv methods for output serialization. Dependencies: osxphotos, dataclasses, PhotoInfo. Inputs: two PhotosDBs and their compared contents; outputs: a structured summary and multiple representations. Limitations include reliance on accurate comparison and signature logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_142\n\nLANGUAGE: Python\nCODE:\n```\n@dataclasses.dataclass\nclass PhotosDBDiff:\n    \"\"\"Class to hold differences between two PhotosDB objects\"\"\"\n\n    library_a: PhotosDB\n    library_b: PhotosDB\n    in_a_not_b: list[PhotoInfo]\n    in_b_not_a: list[PhotoInfo]\n    in_both_same: list[tuple[PhotoInfo, PhotoInfo]]\n    in_both_different: list[tuple[PhotoInfo, PhotoInfo, Any]]\n    signature: Callable[[PhotoInfo], Any] = photo_signature\n\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Keywords\nDESCRIPTION: Retrieves the user-assigned keyword(s) associated with the photo.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_77\n\nLANGUAGE: Template Language\nCODE:\n```\n{keyword}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Semicolon\nDESCRIPTION: Represents a literal semicolon character (';').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_54\n\nLANGUAGE: Template Language\nCODE:\n```\n{semicolon}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rows from Table Objects with osxphotos (Python)\nDESCRIPTION: Shows how to obtain all rows from a specific table in the Photos database as either a list of tuples or a list of dictionaries using the osxphotos library. The \"rows()\" method returns tuples representing each row, while \"rows_dict()\" returns a list of dicts mapping column names to values. Requires osxphotos, an initialized photo object, and accesses pre-loaded database tables. Input is a method call; outputs are lists of tuples or dicts representing row data for further manipulation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\n>>> photo.tables().ZASSET.rows()\n[(6, 3, 35, 0, 0, 0, 0, 0, 0, None, None, None, None, None, 0, 0, 1, 0, 0, 0, 0, -100, 0, 1, 0, 1356, 0, 0, 0, 0, 0, 0, 0, 1, 6192599813128215, 1, 2814835671629878, 1, 0, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 2047, 7, None, 8, None, None, None, None, None, None, None, None, 3, 6, 6, 6, None, 6, 4, None, None, 8, 4, None, 2, None, 3, None, 3, None, None, 585926209.859624, 596906868.198932, 689981763.374756, None, None, None, 0.5, 561129492.501, 0.0, 596906868.198932, None, 0.03816793893129771, None, 51.50357167, -0.1318055, 689982854.802854, 0.6494140625, 0.0, 561129492.501, None, None, None, None, None, None, None, 'D', 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', None, 'sRGB IEC61966-2.1', 'public.jpeg', 'DC99FBDD-7A52-4100-A5BB-344131646C30', b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> photo.tables().ZASSET.rows_dict()\n[{'Z_PK': 6, 'Z_ENT': 3, 'Z_OPT': 35, 'ZACTIVELIBRARYSCOPEPARTICIPATIONSTATE': 0, 'ZAVALANCHEPICKTYPE': 0, 'ZBUNDLESCOPE': 0, 'ZCAMERAPROCESSINGADJUSTMENTSTATE': 0, 'ZCLOUDDELETESTATE': 0, 'ZCLOUDDOWNLOADREQUESTS': 0, 'ZCLOUDHASCOMMENTSBYME': None, 'ZCLOUDHASCOMMENTSCONVERSATION': None, 'ZCLOUDHASUNSEENCOMMENTS': None, 'ZCLOUDISDELETABLE': None, 'ZCLOUDISMYASSET': None, 'ZCLOUDLOCALSTATE': 0, 'ZCLOUDPLACEHOLDERKIND': 0, 'ZCOMPLETE': 1, 'ZDEFERREDPROCESSINGNEEDED': 0, 'ZDEPTHTYPE': 0, 'ZDERIVEDCAMERACAPTUREDEVICE': 0, 'ZDUPLICATEASSETVISIBILITYSTATE': 0, 'ZFACEAREAPOINTS': -100, 'ZFAVORITE': 0, 'ZHASADJUSTMENTS': 1, 'ZHDRTYPE': 0, 'ZHEIGHT': 1356, 'ZHIDDEN': 0, 'ZHIGHFRAMERATESTATE': 0, 'ZISMAGICCARPET': 0, 'ZKIND': 0, 'ZKINDSUBTYPE': 0, 'ZLIBRARYSCOPESHARESTATE': 0, 'ZMONOSKITYPE': 0, 'ZORIENTATION': 1, 'ZPACKEDACCEPTABLECROPRECT': 6192599813128215, 'ZPACKEDBADGEATTRIBUTES': 1, 'ZPACKEDPREFERREDCROPRECT': 2814835671629878, 'ZPLAYBACKSTYLE': 1, 'ZPLAYBACKVARIATION': 0, 'ZSAVEDASSETTYPE': 3, 'ZSEARCHINDEXREBUILDSTATE': 0, 'ZSYNDICATIONSTATE': 0, 'ZTHUMBNAILINDEX': 5, 'ZTRASHEDSTATE': 0, 'ZVIDEOCPDURATIONVALUE': 0, 'ZVIDEOCPVISIBILITYSTATE': 0, 'ZVIDEODEFERREDPROCESSINGNEEDED': 0, 'ZVIDEOKEYFRAMETIMESCALE': 0, 'ZVIDEOKEYFRAMEVALUE': 0, 'ZVISIBILITYSTATE': 0, 'ZWIDTH': 2047, 'ZADDITIONALATTRIBUTES': 7, 'ZCLOUDFEEDASSETSENTRY': None, 'ZCOMPUTEDATTRIBUTES': 8, 'ZCONVERSATION': None, 'ZDAYGROUPHIGHLIGHTBEINGASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGEXTENDEDASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETPRIVATE': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZDAYGROUPHIGHLIGHTBEINGSUMMARYASSETS': None, 'ZDUPLICATEMETADATAMATCHINGALBUM': None, 'ZDUPLICATEPERCEPTUALMATCHINGALBUM': None, 'ZEXTENDEDATTRIBUTES': 3, 'ZHIGHLIGHTBEINGASSETS': 6, 'ZHIGHLIGHTBEINGEXTENDEDASSETS': 6, 'ZHIGHLIGHTBEINGKEYASSETPRIVATE': 6, 'ZHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZHIGHLIGHTBEINGSUMMARYASSETS': 6, 'ZIMPORTSESSION': 4, 'ZLIBRARYSCOPE': None, 'ZMASTER': None, 'ZMEDIAANALYSISATTRIBUTES': 8, 'ZMOMENT': 4, 'ZMOMENTSHARE': None, 'ZMONTHHIGHLIGHTBEINGKEYASSETPRIVATE': 2, 'ZMONTHHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZPHOTOANALYSISATTRIBUTES': 3, 'ZTRASHEDBYPARTICIPANT': None, 'ZYEARHIGHLIGHTBEINGKEYASSETPRIVATE': 3, 'ZYEARHIGHLIGHTBEINGKEYASSETSHARED': None, 'Z_FOK_CLOUDFEEDASSETSENTRY': None, 'ZADDEDDATE': 585926209.859624, 'ZADJUSTMENTTIMESTAMP': 596906868.198932, 'ZANALYSISSTATEMODIFICATIONDATE': 689981763.374756, 'ZCLOUDBATCHPUBLISHDATE': None, 'ZCLOUDLASTVIEWEDCOMMENTDATE': None, 'ZCLOUDSERVERPUBLISHDATE': None, 'ZCURATIONSCORE': 0.5, 'ZDATECREATED': 561129492.501, 'ZDURATION': 0.0, 'ZFACEADJUSTMENTVERSION': 596906868.198932, 'ZHDRGAIN': None, 'ZHIGHLIGHTVISIBILITYSCORE': 0.03816793893129771, 'ZLASTSHAREDDATE': None, 'ZLATITUDE': 51.50357167, 'ZLONGITUDE': -0.1318055, 'ZMODIFICATIONDATE': 689982854.802854, 'ZOVERALLAESTHETICSCORE': 0.6494140625, 'ZPROMOTIONSCORE': 0.0, 'ZSORTTOKEN': 561129492.501, 'ZTRASHEDDATE': None, 'ZAVALANCHEUUID': None, 'ZCLOUDASSETGUID': None, 'ZCLOUDBATCHID': None, 'ZCLOUDCOLLECTIONGUID': None, 'ZCLOUDOWNERHASHEDPERSONID': None, 'ZDELETEREASON': None, 'ZDIRECTORY': 'D', 'ZFILENAME': 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', 'ZMEDIAGROUPUUID': None, 'ZORIGINALCOLORSPACE': 'sRGB IEC61966-2.1', 'ZUNIFORMTYPEIDENTIFIER': 'public.jpeg', 'ZUUID': 'DC99FBDD-7A52-4100-A5BB-344131646C30', 'ZIMAGEREQUESTHINTS': b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', 'ZLOCATIONDATA': b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'}]\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Accessing Venue Data in osxphotos Python Scripts\nDESCRIPTION: This snippet fetches the 'Venue' name linked to a photo, like a restaurant or location, which is automatically assigned by Photos' algorithms, useful for location-based categorization or metadata extraction.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_86\n\nLANGUAGE: Python\nCODE:\n```\n{searchinfo.venue}\n```\n\n----------------------------------------\n\nTITLE: Getting State/Province from Postal Address\nDESCRIPTION: Extracts the state or province component from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_38\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.state_province}\n```\n\n----------------------------------------\n\nTITLE: Template String Explanation - osxphotos Template\nDESCRIPTION: Provides a visual breakdown and explanation of a complex osxphotos template string used for conditionally combining title and description fields. It illustrates the use of the `field?value if true,value if false` boolean logic and field modifiers like trailing commas for default empty values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_42\n\nLANGUAGE: Template\nCODE:\n```\n{title,}{title?{descr?{newline},},}{descr,}\n │           │      │ │       │ │  │ \n │           │      │ │       │ │  │ \n └──> insert title (or nothing if no title) \n             │      │ │       │ │  │\n             └───> is there a title?\n                    │ │       │ │  │\n                    └───> if so, is there a description? \n                      │       │ │  │\n                      └───> if so, insert new line \n                              │ │  │\n                              └───> if descr is blank, insert nothing\n                                │  │ \n                                └───> if title is blank, insert nothing\n                                   │\n                                   └───> finally, insert description \n                                         (or nothing if no description)\n```\n\n----------------------------------------\n\nTITLE: Customizing Media Type Output\nDESCRIPTION: Explains how to customize the output of the `{media_type}` template field using the default value. This allows mapping specific media types to custom strings, providing greater control over the rendered output.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_100\n\nLANGUAGE: text\nCODE:\n```\nSome template fields such as `\"{media_type}\"` use the default value to allow customization of the output. For example, `\"{media_type}\"` resolves to the special media type of the photo such as `panorama` or `selfie`.  You may use the default value to override these in form: `\"{media_type,video=vidéo;time_lapse=vidéo_accélérée}\"`. In this example, if photo was a time_lapse photo, `media_type` would resolve to `vidéo_accélérée` instead of `time_lapse`.\n```\n\n----------------------------------------\n\nTITLE: Getting Shared Albums as Dictionary from PhotosDB in Python\nDESCRIPTION: Returns a dictionary mapping shared album names to their photo count. Only works in Photos 5 (macOS 10.15) and later; returns an empty dictionary for earlier versions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums_shared_dict = photosdb.albums_shared_as_dict\n```\n\n----------------------------------------\n\nTITLE: Getting ExifTool Path in osxphotos\nDESCRIPTION: This example shows how to retrieve the path to the exiftool executable using the `osxphotos.exiftool.get_exiftool_path()` function. This function will raise a `FileNotFoundError` if exiftool is not found in the system's PATH.  Exiftool must be installed for this function to work.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_40\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> osxphotos.exiftool.get_exiftool_path()\n'/usr/local/bin/exiftool'\n>>>\n```\n\n----------------------------------------\n\nTITLE: Searching Help for Export RAW Options\nDESCRIPTION: This snippet demonstrates how to use the `osxphotos help COMMAND TOPIC` syntax to search within the help text of a specific command (`export`) for options related to a particular topic (`raw`). It shows the resulting filtered help output.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: osxphotos export [OPTIONS] ... DEST\n\n  Export photos from the Photos database. Export path DEST is required.\n  Optionally, query the Photos database using 1 or more search options; if\n  more than one option is provided, they are treated as \"AND\" (e.g. search for\n  photos matching all options). If no query options are provided, all photos\n  will be exported. By default, all versions of all photos will be exported\n  including edited versions, live photo movies, burst photos, and associated\n  raw images. See --skip-edited, --skip-live, --skip-bursts, and --skip-raw\n  options to modify this behavior.\n\nOptions that match 'raw':\n\n--has-raw                    Search for photos with both a jpeg and\n                             raw version\n--skip-raw                   Do not export associated RAW image of a\n                             RAW+JPEG pair.  Note: this does not skip RAW\n                             photos if the RAW photo does not have an\n                             associated JPEG image (e.g. the RAW file was\n                             imported to Photos without a JPEG preview).\n--convert-to-jpeg            Convert all non-JPEG images (e.g. RAW, HEIC,\n                             PNG, etc) to JPEG upon export. Note: does not\n                             convert the RAW component of a RAW+JPEG pair as\n                             the associated JPEG image will be exported. You\n                             can use --skip-raw to skip\n                             exporting the associated RAW image of a\n                             RAW+JPEG pair. See also --jpeg-quality and\n                             --jpeg-ext. Only works if your Mac has a GPU\n                             (thus may not work on virtual machines).\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Folder, Album, and Project - osxphotos\nDESCRIPTION: This tag retrieves the folder path + album (includes projects as albums) a photo is contained in. For example, 'Folder/Subfolder/Album' or just 'Album' if no enclosing folder. Relies on the photo being associated with a folder, album, or project. The output is a string representing the folder path and album (including projects).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_121\n\nLANGUAGE: string\nCODE:\n```\n{folder_album_project}\n```\n\n----------------------------------------\n\nTITLE: Analyzing PhotosDBDiff - PhotosDBDiff Class\nDESCRIPTION: The `PhotosDBDiff` class contains the results of comparing two photo libraries. It contains lists of photos unique to each library, photos in both libraries that are the same, and photos in both libraries that are different. The class also has `asdict()`, `json()`, and `csv()` methods to represent the diff in different formats. `bool(PhotosDBDiff())` indicates differences.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\n@dataclasses.dataclass\nclass PhotosDBDiff:\n    \"\"\"Class to hold differences between two PhotosDB objects\"\"\"\n\n    library_a: PhotosDB\n    library_b: PhotosDB\n    in_a_not_b: list[PhotoInfo]\n    in_b_not_a: list[PhotoInfo]\n    in_both_same: list[tuple[PhotoInfo, PhotoInfo]]\n    in_both_different: list[tuple[PhotoInfo, PhotoInfo, Any]]\n    signature: Callable[[PhotoInfo], Any] = photo_signature\n```\n\n----------------------------------------\n\nTITLE: Template with Pretext/Posttext (osxphotos-template)\nDESCRIPTION: Shows how to include literal text before (pretext) and after (posttext) a template field within a single template statement. The template field is substituted with its value, preserving the surrounding text.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_1\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"The title of the photo is {title}\"\n```\n\n----------------------------------------\n\nTITLE: Inserting an Ampersand - osxphotos\nDESCRIPTION: This tag inserts an ampersand symbol into the output.  It has no dependencies. The output is an ampersand: '&'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_103\n\nLANGUAGE: string\nCODE:\n```\n{ampersand}\n```\n\n----------------------------------------\n\nTITLE: Shell Safe Quoting in osxphotos Templates\nDESCRIPTION: This template variable quotes a provided string for safe shell usage, preventing injection issues by correctly handling spaces and special characters during command execution.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_90\n\nLANGUAGE: Python\nCODE:\n```\n{shell_quote,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Boolean Template Fields in OSXPhotos Template Language (plaintext)\nDESCRIPTION: This snippet explains how to use the \"?\" operator after a template field to evaluate its truthiness as a boolean. If the field evaluates to True or has a value, the specified \"true\" string is rendered; otherwise, the \"false\" string after the comma is used. For example, \"{hdr?ISHDR,NOTHDR}\" renders \"ISHDR\" if the photo is HDR, else \"NOTHDR\". This enables conditional rendering based on photo attributes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_64\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{hdr?ISHDR,NOTHDR}\"  # Renders \"ISHDR\" if photo is HDR; else \"NOTHDR\"\n```\n\n----------------------------------------\n\nTITLE: Managing Albums - PhotosAlbum Class\nDESCRIPTION: This code snippet shows how to use the `PhotosAlbum` class to interact with Photos albums.  The `PhotosAlbum` class provides methods to create and retrieve albums, add photos to albums, and manage the assets.  It relies on `PhotoScript` to interact with Photos via AppleScript. It requires an album name to create or retrieve it. The album acts as a set in that duplicate photo entries are ignored.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos import PhotosDB\nfrom osxphotos.photosalbum import PhotosAlbum\n\n# If album exists it will be used, otherwise it will be created\nalbum = PhotosAlbum(\"Best Photos\")\nbest_photos = [p for p in PhotosDB(verbose=print).photos() if p.score.overall > 0.9]\n\n# use album.add() or album.append() to add a single photo\n# use album.update() or album.extend() to add an iterable of photos\nalbum.extend(best_photos)\nprint(f\"Added {len(best_photos)} photos to album {album.name}\")\nprint(f\"Album contains {len(album.photos())} photos\")\n```\n\n----------------------------------------\n\nTITLE: Getting Shared Photo Comments\nDESCRIPTION: Retrieves comments made on shared photos, formatted as 'Person name: comment text'. Requires Photos 5 or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_81\n\nLANGUAGE: Template Language\nCODE:\n```\n{comment}\n```\n\n----------------------------------------\n\nTITLE: Getting Country Code from Postal Address\nDESCRIPTION: Extracts the ISO country code from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_41\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.country_code}\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Moment Title\nDESCRIPTION: Retrieves the title of the Moment the photo belongs to within the Photos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_46\n\nLANGUAGE: Template Language\nCODE:\n```\n{moment}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Template Values\nDESCRIPTION: Examples of applying various filters using the '|filter' syntax. Filters transform the rendered value, providing capabilities like case conversion, formatting, list manipulation, and type casting. Filters can be chained.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_4\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|lower}\nrenders to \"foo\", \"bar\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|upper}\nrenders to: \"FOO\", \"BAR\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|capitalize}\nrenders to: \"Foo\", \"Bar\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|lower|parens}\nrenders to: \"(foo)\", \"(bar)\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{descr|titlecase}\nrenders to: \"My Description\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|lower contains beach}\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{folder_album|filter(contains Events)}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Photo Paths in osxphotos (Python)\nDESCRIPTION: This Python snippet retrieves the paths of all raw photos from an osxphotos PhotosDB. It uses `osxphotos.PhotosDB()` to initialize the database, then fetches all photos using `photosdb.photos()`.  It filters the photos using a list comprehension `[p for p in photos if p.israw or p.has_raw]` to select those that are either single raw photos or part of a raw+JPEG pair and prints the path of each filtered photo. Requires osxphotos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_49\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photos = photosdb.photos()\n>>> all_raw = [p for p in photos if p.israw or p.has_raw]\n>>> for raw in all_raw:\n...     path = raw.path if raw.israw else raw.path_raw\n...     print(path)\n```\n\n----------------------------------------\n\nTITLE: Searching Photos by Normalized Labels using osxphotos in Python\nDESCRIPTION: This code snippet illustrates how to search for photos based on normalized image categorization labels using the `osxphotos` library in Python. It initializes a `PhotosDB` object for the default library, iterates through each `PhotoInfo` object, and checks if the lowercase string \"statue\" exists within the list returned by `photo.labels_normalized`. This allows for case-insensitive searching of automatically assigned image labels (available on Photos 5+).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB()\nfor photo in photosdb.photos():\n    if \"statue\" in photo.labels_normalized:\n        print(f\"I found a statue! {photo.original_filename}\")\n```\n\n----------------------------------------\n\nTITLE: Using --dry-run Option in osxphotos CLI Bash Commands\nDESCRIPTION: Demonstrates the use of the --dry-run option in osxphotos subcommands (push-exif and import) to simulate the operation without making any changes. This allows users to preview what metadata would be altered or what photos would be imported. Dependencies include osxphotos CLI. Inputs are the photo library and specified options; output is a detailed report of proposed changes without persisting them.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos push-exif --dry-run\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos import --dry-run\n```\n\n----------------------------------------\n\nTITLE: Getting Holiday Name from Search Info\nDESCRIPTION: Retrieves the holiday name (e.g., 'Christmas') associated with the photo, if identified by Photos' search indexing. Requires Photos 5 or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_83\n\nLANGUAGE: Template Language\nCODE:\n```\n{searchinfo.holiday}\n```\n\n----------------------------------------\n\nTITLE: Extracting ISO Country Code - osxphotos\nDESCRIPTION: This tag extracts the ISO country code from the photo's reverse geolocation data. Depends on the presence of geolocation data in the photo metadata. The output is a string representing the ISO country code.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_75\n\nLANGUAGE: string\nCODE:\n```\n{place.country_code}\n```\n\n----------------------------------------\n\nTITLE: Filtering Combined Template Values with Variables\nDESCRIPTION: Shows how to use variables to store combined template values and then apply filters to them, allowing for more complex operations like removing duplicates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_73\n\nLANGUAGE: plaintext\nCODE:\n```\n{var:myvar,{template1&{template2,},}}{%myvar|uniq}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters for Text Formatting (osxphotos-template)\nDESCRIPTION: Illustrates using filters (appended with '|') to modify the output of template fields. Examples show case conversion (`lower`, `upper`, `capitalize`, `titlecase`) and enclosing text (`parens`). Filters can be chained together.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_5\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|lower}\"           // Renders as: \"foo\", \"bar\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|upper}\"           // Renders as: \"FOO\", \"BAR\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|capitalize}\"      // Renders as: \"Foo\", \"Bar\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword|lower|parens}\"    // Renders as: \"(foo)\", \"(bar)\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{descr|titlecase}\"         // Renders as: \"My Description\"\n```\n\n----------------------------------------\n\nTITLE: Including Literal Braces in Output using `{openbrace}/{closebrace}`\nDESCRIPTION: Explains how to include literal curly braces `{` and `}` in the rendered output using the `{openbrace}` and `{closebrace}` template substitutions. This is necessary because braces normally delimit template fields.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_12\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{openbrace}\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{closebrace}\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{created.year}/{openbrace}{title}{closebrace}\" (e.g., renders \"2020/{Photo Title}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Postal Address\nDESCRIPTION: This snippet extracts the complete postal address from the photo's reverse geolocation data. The output is a formatted string. It depends on the photo's reverse geolocation data being available.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_85\n\nLANGUAGE: text\nCODE:\n```\n{place.address}                 Postal address from the photo's reverse\n                                geolocation data, e.g. '2007 18th St NW,\n                                Washington, DC 20009, United States'\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Keywords During Photo Export with osxphotos CLI\nDESCRIPTION: This snippet exports photos to a given directory but removes the keyword \"MyKeyword\" from the keywords applied during export. The --keyword-template option uses the remove() filter to exclude this keyword and --replace-keywords tells osxphotos to overwrite keywords in the file's metadata. Dependencies: osxphotos CLI and exiftool. Inputs: Photo library, destination path. Outputs: Photos exported without the specified unwanted keyword. Limitation: Only affects keywords processed via the template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_23\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{keyword|remove(MyKeyword)}\" --replace-keywords\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in Directory Templates\nDESCRIPTION: Command demonstrating how to specify a default value for template fields that might be null, using country name with a fallback.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country,No-Country}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting photos with JSON sidecar and applying metadata\nDESCRIPTION: Shows how to export a photo with a JSON sidecar file containing metadata, which can later be applied to the image using exiftool command line.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\nphotos = photosdb.photos()\nphotos[0].export(\"/tmp\",\"photo_name.jpg\",sidecar_json=True)\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Special Characters\nDESCRIPTION: Demonstrates how to define variables to handle special characters like the pipe (|) symbol that would otherwise be prohibited in template strings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_72\n\nLANGUAGE: plaintext\nCODE:\n```\n{var:pipe,{pipe}}{title[-,%pipe]}\n```\n\n----------------------------------------\n\nTITLE: Logging Exported Files and Keywords with --post-command via osxphotos (Shell)\nDESCRIPTION: Runs a shell command after each photo export to log file paths and associated keywords. The --post-command argument specifies the 'exported' category and uses a template string to echo and append data to a log file. Ensures correct quoting of shell arguments using {shell_quote}. Requires osxphotos and sufficient permissions to write to the export directory. Produces a CSV-style log file for all exported photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"echo {shell_quote,{filepath}{comma}{,+keyword,}} >> {shell_quote,{export_dir}/exported.txt}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Country Code from Address - osxphotos\nDESCRIPTION: This tag extracts the ISO country code of the postal address from the photo's reverse geolocation data. Requires ISO country code in the photo metadata. The output is a string representing the ISO country code.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_86\n\nLANGUAGE: string\nCODE:\n```\n{place.address.country_code}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Date Using osxphotos in Shell\nDESCRIPTION: This snippet shows how to export all photos from the Photos library organized into subdirectories by year, month, and day using the --export-by-date flag. The osxphotos tool must be installed and accessible in your shell environment. The output directory ('/path/to/export') is required. This command is appropriate for large libraries, organizing files in a date-based folder structure. No custom template is used; uses standard year/month/day tree.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --export-by-date\n```\n\n----------------------------------------\n\nTITLE: Displaying osxphotos CLI Help Output in Text\nDESCRIPTION: Demonstrates the retrieval and display of the osxphotos command line interface help output using Python's click.testing CliRunner. The snippet programmatically invokes the CLI's main function with the '--help' argument, captures the help text, modifies the usage line to display 'osxphotos' as the command, and outputs the formatted help text. This snippet depends on the osxphotos.cli module and click library for testing CLI commands.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/overview.cog.rst.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.cli import cli_main\nfrom click.testing import CliRunner\nrunner = CliRunner()\nresult = runner.invoke(cli_main, [\"--help\"])\nhelp = result.output.replace(\"Usage: cli-main\", \"Usage: osxphotos\")\nprint(help)\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs in Templates\nDESCRIPTION: Demonstrates how to escape percent signs in template strings, either by using %% or the {percent} template field.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_76\n\nLANGUAGE: plaintext\nCODE:\n```\n{title[:,%%]}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n{title contains Foo?{title}{percent},{title}}\n```\n\n----------------------------------------\n\nTITLE: Using Template for Edited Photo Suffix - osxphotos - Shell\nDESCRIPTION: Demonstrates using an osxphotos template string _{modified.year}-{modified.mm}-{modified.dd} with the --edited-suffix option to append the modification date to the filename of exported edited photos. This allows for dynamic suffix generation based on photo metadata. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_{modified.year}-{modified.mm}-{modified.dd}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Photo UUID\nDESCRIPTION: Retrieves the photo's internal 36-character universally unique identifier (UUID).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_47\n\nLANGUAGE: Template Language\nCODE:\n```\n{uuid}\n```\n\n----------------------------------------\n\nTITLE: Getting Place Name from Reverse Geolocation\nDESCRIPTION: Retrieves the place name derived from the photo's reverse geolocation data, as displayed in the Photos application.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_29\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.name}\n```\n\n----------------------------------------\n\nTITLE: Running Commands on Exported Files with osxphotos (Shell)\nDESCRIPTION: Execute arbitrary shell commands on files after they have been exported (or skipped) using the `--post-command CATEGORY COMMAND` option. The command argument uses an osxphotos template string, allowing dynamic inclusion of file path (`{filepath}`), export directory (`{export_dir}`), and other metadata, with `{shell_quote}` or `|shell_quote` filter for safe execution.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_46\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"echo {shell_quote,{filepath}{comma}{,+keyword,}} >> {shell_quote,{export_dir}/exported.txt}\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --post-command exported \"/usr/local/bin/exiftool -all= {filepath|shell_quote}\"\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with ,default\nDESCRIPTION: Describes how to use the `,default` modifier to specify a default value if a template field has no value or evaluates to False. It also shows how to use this modifier to pass templates for functions like `strftime`. The default value can be an empty string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_99\n\nLANGUAGE: text\nCODE:\n```\n`,default`: optional default value to use if the template name has no value.  This modifier is also used for the value if False for boolean-type fields (see above) as well as to hold a sub-template for values like `{created.strftime}`.  If no default value provided, \"_\" is used.\n\ne.g., if photo has no title set,\n\n- `\"{title}\"` renders to \"_\"\n- `\"{title,I have no title}\"` renders to `\"I have no title\"`\n\nTemplate fields such as `created.strftime` use the default value to pass the template to use for `strftime`.\n\ne.g., if photo date is 4 February 2020, 19:07:38,\n\n- `\"{created.strftime,%Y-%m-%d-%H%M%S}\"` renders to `\"2020-02-04-190738\"`\n```\n\n----------------------------------------\n\nTITLE: Using ExifWriter to write EXIF metadata to files\nDESCRIPTION: The ExifWriter class provides methods to embed EXIF metadata into image files using exiftool. It is configured via the ExifOptions class, which controls aspects such as description templates, keywords, and whether to use exiftool or include face and location data. ExifWriter can be used standalone or within osxphotos' export process.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_54\n\nLANGUAGE: Python\nCODE:\n```\nfrom osxphotos.exifwriter import ExifOptions, ExifWriter\n# photo is a PhotoInfo object\nwriter = ExifWriter(photo)\noptions = ExifOptions(merge_exif_keywords=True)\n# filepath is the path to the file you want to write the metadata to\nwriter.write_exif_data(filepath, options)\n```\n\nLANGUAGE: Python\nCODE:\n```\n【ExifWriter().exiftool_dict() method returns a dict of metadata that will be written, without applying the write operation.】\n```\n\n----------------------------------------\n\nTITLE: Querying for Movies Only in Photos Library with osxphotos (Python)\nDESCRIPTION: Shows how to filter the Photos library for movies only by setting images=False and movies=True in the call to PhotosDB.photos(). Requires no further parameters unless additional filtering is needed. Returns a list of PhotoInfo objects for videos or movies.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmovies = photosdb.photos(images=False, movies=True)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Pipe Symbol\nDESCRIPTION: Represents a literal vertical pipe character ('|').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_56\n\nLANGUAGE: Template Language\nCODE:\n```\n{pipe}\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB for the System Library using get_system_library_path() (Python)\nDESCRIPTION: Illustrates how to open the designated System Photos Library on macOS Catalina (10.15) and later. It uses `osxphotos.get_system_library_path()` to retrieve the path and passes it to the `PhotosDB` initializer. This function is not available on older macOS versions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(path)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\npath = osxphotos.get_system_library_path()\nphotosdb = osxphotos.PhotosDB(dbfile=path)\n```\n\n----------------------------------------\n\nTITLE: Extracting Short UUID - osxphotos\nDESCRIPTION: This tag extracts a shorter representation of the photo's internal universally unique identifier (UUID). It's a 22-character string unique to the photo. No dependencies are required. The output is a string representing the short UUID.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_93\n\nLANGUAGE: string\nCODE:\n```\n{shortuuid}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters osxphotos Template\nDESCRIPTION: Explains how to include literal '{' and '}' characters in the template output using '{openbrace}' and '{closebrace}'. Also shows how to include a literal '%' using '%%' or the '{percent}' template field.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_54\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n\"{created.year}/{openbrace}{title}{closebrace}\"\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{title[:,%%]}\n```\n\nLANGUAGE: osxphotos Template\nCODE:\n```\n{title contains Foo?{title}{percent},{title}}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive osxphotos Export Command for Video Workflow\nDESCRIPTION: Provides a complex `osxphotos export` command tailored for a specific video export workflow. It targets movies (`--only-movies`) with the 'Quik' keyword (`--keyword Quik`), specifies the library path, preserves file timestamps (`--touch-file`), writes keywords and persons to Finder tags (`--finder-tag-keywords`, `--person-keyword`), sets Finder comments conditionally using title/description (`--xattr-template`), merges existing keywords/persons using exiftool (`--exiftool-merge-keywords`, `--exiftool-merge-persons`, `--exiftool`), and strips whitespace from template results (`--strip`).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export ~/Desktop/folder for exported videos/ --keyword Quik --only-movies --library /path to my.photoslibrary --touch-file --finder-tag-keywords --person-keyword --xattr-template findercomment \"{title}{title?{descr?{newline},},}{descr}\" --exiftool-merge-keywords --exiftool-merge-persons --exiftool --strip\n```\n\n----------------------------------------\n\nTITLE: Generating iPhoto Test Data JSON (Shell)\nDESCRIPTION: Uses the `osxphotos query` command to extract data in JSON format from a specific iPhoto test library (`Test-iPhoto-9.6.1.photolibrary`) and saves it to `tests/iphoto_test_data.json`. This file is used by `test_iphoto.py`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos query --json --library tests/Test-iPhoto-9.6.1.photolibrary/ > tests/iphoto_test_data.json\n```\n\n----------------------------------------\n\nTITLE: Inserting a Tab Character\nDESCRIPTION: Represents a tab character ('\\t').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_69\n\nLANGUAGE: Template Language\nCODE:\n```\n{tab}\n```\n\n----------------------------------------\n\nTITLE: Extracting Venue - osxphotos\nDESCRIPTION: This tag extracts venues associated with a photo (e.g., name of restaurant). Requires Photos 5+ and for Photos' image categorization algorithms to have assigned a venue.  The output is a string of the venues.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_130\n\nLANGUAGE: string\nCODE:\n```\n{searchinfo.venue}\n```\n\n----------------------------------------\n\nTITLE: Getting Lens Model from EXIF\nDESCRIPTION: Retrieves the lens model (e.g., 'iPhone 6s back camera 4.15mm f/2.2') from the original photo's EXIF data as imported by Photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_45\n\nLANGUAGE: Template Language\nCODE:\n```\n{exif.lens_model}\n```\n\n----------------------------------------\n\nTITLE: Using Variables as Template Fields\nDESCRIPTION: Demonstrates how to reference variables as fields in template strings, making templates more readable and reusable.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_74\n\nLANGUAGE: plaintext\nCODE:\n```\n{var:year,{created.year}}{original_name}-{%year}\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Library Path (Python)\nDESCRIPTION: Retrieves the filesystem path to the current Photos library being managed by the PhotosDB object. This is useful for locating the library bundle on disk. Requires an initialized PhotosDB object. Returns the path as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.library_path\n```\n\n----------------------------------------\n\nTITLE: Listing Top-Level Folder Information with osxphotos (Python)\nDESCRIPTION: Shows how to access folder_info for top-level folders in the Photos library using the folder_info property. Returns a list of FolderInfo objects (or an empty list if none). Only implemented for Photos 5 (Catalina) and later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folder_info\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folder Information from PhotosDB in Python\nDESCRIPTION: Gets a list of FolderInfo objects representing top-level folders in the database. Only implemented for Photos 5 (Catalina) and later; returns an empty list for earlier versions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folder_info\n```\n\n----------------------------------------\n\nTITLE: Extracting State/Province Name - osxphotos\nDESCRIPTION: This tag extracts the state or province name from the photo's reverse geolocation data. Requires geolocation data in the photo's metadata. The output is a string representing the state or province name.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_77\n\nLANGUAGE: string\nCODE:\n```\n{place.name.state_province}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Path (PhotosDB) - Python\nDESCRIPTION: Demonstrates accessing the `db_path` property of a `PhotosDB` object. This property returns the file system path to the specific Photos database file used by the object. Requires an initialized `PhotosDB` object. Returns a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_path\n```\n\n----------------------------------------\n\nTITLE: Generating XMP Sidecar - xmp_sidecar\nDESCRIPTION: This code snippet demonstrates the use of the `xmp_sidecar` function to generate an XMP sidecar string for a given photo. It requires a `PhotoInfo` object, optionally accepts an `ExportOptions` object, and an optional extension string. The function returns a string containing the XMP metadata. The extension parameter is for defining the extension for SidecarForExtension property in the XMP sidecar.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\ndef xmp_sidecar(\n    photo: PhotoInfo,\n    options: ExportOptions | None = None,\n    extension: str | None = None,\n) -> str:\n    \"\"\"Returns string for XMP sidecar\n\n    Args:\n        photo (PhotoInfo): photo to generate sidecars\n        options (ExportOptions): options for export\n        extension (Optional[str]): which extension to use for SidecarForExtension property\n\n    Returns:\n        str: string containing XMP sidecar\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.sidecars import xmp_sidecar\n\nsidecar = xmp_sidecar(photo, options, extension)\n```\n\n----------------------------------------\n\nTITLE: Explanation of Post-Command Template with Shell Quoting in osxphotos\nDESCRIPTION: Provides a visual breakdown and explanation of the template string `{shell_quote,{filepath}{comma}{,+keyword,}}` used within a `--post-command`. It highlights the function of `{shell_quote}` in safely quoting the entire constructed string (filepath, comma, and joined keywords) for reliable execution in the shell, preventing issues with spaces or special characters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_50\n\nLANGUAGE: text\nCODE:\n```\n{shell_quote,{filepath}{comma}{,+keyword,}}\n │            │         │      │        │\n │            │         │      |        │\n └──> quote everything after comma for proper execution in the shell\n              │         │      │        │\n              └───> filepath of the exported file\n                       │       │        │\n                       └───> insert a comma \n                               │        │\n                               └───> join the list of keywords together with a \",\"\n                                        │\n                                        └───> if no keywords, insert nothing (empty string: \"\")\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB and CLI options in osxphotos\nDESCRIPTION: This code snippet encompasses the core classes and command-line interface logic for managing and querying the Photos database. It includes database initialization, path retrieval, and argument parsing to facilitate photo management operations. Dependencies likely include standard Python modules and database connectors.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nclass PhotosDB:\n    def __init__(self, dbfile=None):\n        # Initialization logic for Photos database\n        pass\n\nimport argparse\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Photos management CLI\")\n    parser.add_argument('--list', action='store_true', help='List photos')\n    parser.add_argument('--from-date', type=str, help='Start date for query')\n    parser.add_argument('--to-date', type=str, help='End date for query')\n    # More CLI argument setup\n    args = parser.parse_args()\n    # Logic for handling arguments and invoking database methods\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Parenthesis - osxphotos\nDESCRIPTION: This tag inserts a close parenthesis into the output.  It has no dependencies. The output is a close parenthesis: ')'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_107\n\nLANGUAGE: string\nCODE:\n```\n{closeparens}\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Albums\nDESCRIPTION: Retrieves the name(s) of the album(s) the photo is contained in.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_72\n\nLANGUAGE: Template Language\nCODE:\n```\n{album}\n```\n\n----------------------------------------\n\nTITLE: Get Shared Albums as Dictionary from PhotosDB in Python\nDESCRIPTION: Retrieves a dictionary of shared albums (e.g., shared via iCloud photo sharing) found in the Photos library using the `albums_shared_as_dict` attribute of the `PhotosDB` object. Requires an initialized `PhotosDB` object. The key is the album name, and the value is the count of how many photos are in the album. The dictionary is in reverse sorted order.  Only valid for Photos 5 / MacOS 10.15.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums_shared_dict = photosdb.albums_shared_as_dict\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos with Finder Tag Keywords via osxphotos (Shell)\nDESCRIPTION: Exports photos using osxphotos while transferring image keywords as Finder tags. This enables search and organization within Finder and Spotlight. Required dependencies include the osxphotos CLI tool installed on macOS. The main relevant parameter is --finder-tag-keywords; expected input is a valid export directory. No actual image file metadata is changed, only Finder tags are manipulated.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords\n```\n\n----------------------------------------\n\nTITLE: Getting Street from Postal Address\nDESCRIPTION: Extracts the street component from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_36\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.street}\n```\n\n----------------------------------------\n\nTITLE: Using SidecarWriter to generate and write sidecar files\nDESCRIPTION: SidecarWriter manages the creation of XMP, JSON, and exiftool sidecar files for exported photos. It can generate sidecar strings and write files to a destination folder, returning an ExportResults object summarizing actions such as files written or skipped. Functions like xmp_sidecar and exiftool_json_sidecar provide direct access to sidecar string generation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nfrom osxphotos.sidecars import SidecarWriter\n# photo is a PhotoInfo object\nwriter = SidecarWriter(photo)\n# dest is destination folder; options is an ExportOptions object\nresults = writer.write_sidecar_files(dest, options)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef xmp_sidecar(photo, options=None, extension=None):\n    \"\"\"Returns string for XMP sidecar\"\"\"\n    # Implementation generates XMP sidecar content for given photo and options\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom osxphotos.sidecars import xmp_sidecar\nsidecar = xmp_sidecar(photo, options, extension)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef exiftool_json_sidecar(photo, options=None, tag_groups=True, filename=None):\n    \"\"\"Returns string for exiftool JSON sidecar.\"\"\"\n    # Implementation generates exiftool-compatible JSON sidecar\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom osxphotos.sidecars import exiftool_json_sidecar\nsidecar = exiftool_json_sidecar(photo, options, tag_groups, filename)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Newline - osxphotos\nDESCRIPTION: This tag inserts a newline character into the output. It has no dependencies.  The output is a newline: '\\n'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_110\n\nLANGUAGE: string\nCODE:\n```\n{newline}\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Short UUID\nDESCRIPTION: Retrieves a shorter, 22-character representation of the photo's UUID.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_48\n\nLANGUAGE: Template Language\nCODE:\n```\n{shortuuid}\n```\n\n----------------------------------------\n\nTITLE: Getting Database Connection\nDESCRIPTION: This snippet demonstrates how to get a connection and cursor to the Photos database for direct SQL querying. It requires an initialized `PhotosDB` object. The code establishes a connection, executes a SQL query, iterates through results, and closes the connection. This allows users to perform custom queries on the database. Remember to close the connection when done.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nphotosdb = osxphotos.PhotosDB()\nconn, cursor = photosdb.get_db_connection()\n\nresults = conn.execute(\n        \"SELECT ZUUID FROM ZGENERICASSET WHERE ZFAVORITE = 1;\"\n).fetchall()\n\nfor row in results:\n    # do something\n    pass\n\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Migrating osxphotos CLI Commands from Positional Arguments to --library Flag\nDESCRIPTION: Shows the breaking change where positional library arguments have been removed from osxphotos CLI commands and the library must now be specified using the --library or --db flag. Two bash examples illustrate the old and new syntax. This change impacts scripting and automation that previously used positional arguments. Dependencies include osxphotos CLI version 0.65.0 or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export ~/Pictures/Photos\\ Library.photoslibrary /path/to/export\n```\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export --library ~/Pictures/Photos\\ Library.photoslibrary /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Using Custom Python Functions as Filters (osxphotos-template syntax)\nDESCRIPTION: Describes the syntax for invoking a custom Python function as a filter. The format is `function:/path/to/file.py::function_name`. This allows extending the templating system with user-defined filtering logic.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nfunction:/path/to/file.py::function_name\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos from a Specific Album by Name with osxphotos CLI\nDESCRIPTION: This command limits export to photos contained in a specified album. The --album option supports matching all albums with given name; multiple matching albums are included. Dependencies: osxphotos CLI. Inputs: Album name, photo library, export folder. Output: Photos from all albums named \"Summer Vacation\". Limitation: If albums have duplicate names, all are included unless further filtered.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_36\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --album \"Summer Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date\nDESCRIPTION: This describes the {today} and {today.date} templates.  These provide the current date in ISO format, 'YYYY-MM-DD'.  No parameters or dependencies are required, and the output is simply the current date.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_80\n\nLANGUAGE: text\nCODE:\n```\n{today}                         Current date in iso format, e.g.\n                                '2020-03-22'\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.date}                    Current date in iso format, e.g.\n                                '2020-03-22'\n```\n\n----------------------------------------\n\nTITLE: Export Photos and Download Missing with PhotoKit\nDESCRIPTION: Exports photos and attempts to download any missing photos from iCloud using the PhotoKit interface. This is an experimental option used with `--download-missing`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --download-missing --use-photokit\n```\n\n----------------------------------------\n\nTITLE: Installing osxphotos in editable mode\nDESCRIPTION: This command installs the osxphotos package in editable mode using pip. The `-e .` flag allows changes to the local source code to be immediately reflected in the installed package.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Explanations of ExifOptions configuration parameters\nDESCRIPTION: The ExifOptions class allows customization of EXIF metadata output, including description templates, flags for exiftool, keywords, location, and merge behaviors for exif data. These options enable fine-tuned control over metadata embedding, supporting features like updating existing metadata, including face and location data, and using custom templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_55\n\n\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in osxphotos Templates\nDESCRIPTION: Demonstrates defining variables using `{var:NAME,VALUE}` syntax, where `VALUE` is any valid template statement, and referencing them using `%NAME`. Variables can store complex values, bypass character limitations (like '|' in find/replace), enable filtering on combined values (using `|uniq`), improve readability, and be used as fields, filter values, conditional values (`{%name}`), or default values.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_13\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:NAME,VALUE}\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n%NAME\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:foo,bar} (defines %foo as 'bar')\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:pipe,{pipe}}{title[-,%pipe]} (replaces '-' with '|')\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:myvar,{template1&{template2,},}}{%myvar|uniq} (filters combined result for uniqueness)\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:year,{created.year}}{original_name}-{%year} (uses variable %year)\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{var:name,Katie}{person contains {%name}?{%name},Not-{%name}} (uses %name in conditional)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Names from PhotosDB in Python\nDESCRIPTION: Gets a list of person names (faces) found in the Photos library. Persons with the same name are treated as a single person in this list.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\npersons = photosdb.persons\n```\n\n----------------------------------------\n\nTITLE: Extracting Counter - osxphotos\nDESCRIPTION: This tag retrieves a sequential counter, starting at 0, that increments each time it is evaluated. Allows for a starting value, a stop value, and a step size.  May be formatted using a Python string format code.   It is not suitable for use with 'export' and '--update'. The output is an integer, formatted as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_95\n\nLANGUAGE: string\nCODE:\n```\n{counter}\n```\n\n----------------------------------------\n\nTITLE: Listing Top-Level Folder Names with osxphotos (Python)\nDESCRIPTION: Retrieves the names of top-level folders in the Photos library through the folders property. Returns a list of strings (folder names) or an empty list. Requires Photos 5 (Catalina) or newer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nfolders = photosdb.folders\n```\n\n----------------------------------------\n\nTITLE: Importing osxphotos Command Usage in Shell\nDESCRIPTION: Shell commands showing how to import previously exported photos with the osxphotos import command using options to preserve metadata, such as reading from the export database and including sidecar files. These ensure that titles, captions, keywords, favorites, and albums are maintained during re-import.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos import /path/to/export --exportdb /path/to/export --exportdir /path/to/export --sidecar\n```\n\n----------------------------------------\n\nTITLE: Performing Text Replacement on Rendered Values\nDESCRIPTION: Shows how to use the '[find,replace]' syntax to perform text replacement on the output of a template field. Multiple replacements can be specified by separating pairs with '|'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_5\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{album[/,-]}\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{album[/,-|:,-]}\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Application Version (PhotosDB) - Python\nDESCRIPTION: Demonstrates accessing the `photos_version` property of a `PhotosDB` object. This property returns the version number of the Photos application that created the library represented by the object. Requires an initialized `PhotosDB` object. Returns an integer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.photos_version\n```\n\n----------------------------------------\n\nTITLE: Getting Photo ID\nDESCRIPTION: This provides a unique number for the photo based on its primary key in the Photos database.  It is a sequential integer. This can be formatted using a Python string format code. The output provides a unique identifier for the photo.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_92\n\nLANGUAGE: text\nCODE:\n```\n{id}                            A unique number for the photo based on its\n                                primary key in the Photos database. A\n                                sequential integer, e.g. 1, 2, 3...etc.\n                                Each asset associated with a photo (e.g. an\n                                image and Live Photo preview) will share the\n                                same id. May be formatted using a python\n                                string format code. For example, to format\n                                as a 5-digit integer and pad with zeros, use\n                                '{id:05d}' which results in 00001, 00002,\n                                00003...etc.\n```\n\n----------------------------------------\n\nTITLE: Specifying Delimiters for Multi-Value Fields in osxphotos Templates\nDESCRIPTION: Demonstrates how to control the joining character for multi-value template fields like `{keyword}` using delimiters specified immediately before the field name within the curly braces. Assumes photo keywords are [\"foo\", \"bar\"]. Examples show default comma-space, comma, semicolon-space, and no delimiter joining.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_38\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{keyword}\" renders to \"foo\", \"bar\"\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{,+keyword}\" renders to: \"foo,bar\"\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{; +keyword}\" renders to: \"foo; bar\"\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{+keyword}\" renders to \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Output using Boolean Modifier `?` in osxphotos\nDESCRIPTION: Shows how to evaluate a template field as a boolean using the `?` modifier. If the field (e.g., `{hdr}`) evaluates to True or has any value, the `bool_value` (first part after `?`, e.g., `ISHDR`) is returned. If False or no value, the `default` value (second part after `,`, e.g., `NOTHDR`) is returned. Either value can be empty.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_10\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{hdr?ISHDR,NOTHDR}\" (renders to \"ISHDR\" if HDR is true)\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{hdr?ISHDR,NOTHDR}\" (renders to \"NOTHDR\" if HDR is false)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query on PhotosDB (Python)\nDESCRIPTION: Demonstrates how to obtain a direct SQLite connection and cursor to the working copy of the Photos database using `get_db_connection()`. This allows executing custom SQL statements for advanced queries or debugging. It is important to close the connection when finished.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nphotosdb = osxphotos.PhotosDB()\nconn, cursor = photosdb.get_db_connection()\n\nresults = conn.execute(\n        \"SELECT ZUUID FROM ZGENERICASSET WHERE ZFAVORITE = 1;\"\n).fetchall()\n\nfor row in results:\n    # do something\n    pass\n\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Applying strftime to Today\nDESCRIPTION: Similar to the first snippet, this allows for formatting the current date using strftime templates, and taking a template parameter.  It offers the same functionality but applies it specifically to the current date and time. It allows to customize the date output based on a given template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_82\n\nLANGUAGE: text\nCODE:\n```\n{today.strftime}                Apply strftime template to current\n                                date/time. Should be used in form\n                                {today.strftime,TEMPLATE} where TEMPLATE is\n                                a valid strftime template, e.g.\n                                {today.strftime,%Y-%U} would result in year-\n                                week number of year: '2020-23'. If used with\n                                no template will return null value. See\n                                https://strftime.org/ for help on strftime\n                                templates.\n```\n\n----------------------------------------\n\nTITLE: Inserting a Line Feed - osxphotos\nDESCRIPTION: This tag inserts a line feed character into the output, which is the same as a newline.  It has no dependencies. The output is a line feed: '\\n'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_111\n\nLANGUAGE: string\nCODE:\n```\n{lf}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Conditional Expressions within OSXPhotos Templates\nDESCRIPTION: Shows usage of variables in conditional operations within template strings, where variables serve as evaluated template strings inside conditions and default value expressions. Variables should be enclosed in braces to be parsed correctly in such contexts. The snippet defines a variable for a name and uses it in a conditional to display different outputs based on membership in a list.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_4\n\nLANGUAGE: template\nCODE:\n```\n{var:name,Katie}{person contains {%name}?{%name},Not-{%name}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables as Fields in OSXPhotos Template Strings\nDESCRIPTION: Illustrates how variables can be assigned values from other template fields and then referenced later in the template, enhancing readability and reusability. Variables can be used as template fields, filter values, and within conditional operations by enclosing them in braces. This example assigns the year created to a variable and then uses it in the file naming template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_3\n\nLANGUAGE: template\nCODE:\n```\n{var:year,{created.year}}{original_name}-{%year}\n```\n\n----------------------------------------\n\nTITLE: Skipping Edited or Original Photos on Export - osxphotos Command Line - Shell\nDESCRIPTION: Uses either --skip-edited to export only original, unedited images, or --skip-original-if-edited to export only the edited version when available. Input is the export destination and the specified skip option; output is a set of image files depending on photo edit status. Requires osxphotos and access to a configured Photos Library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --skip-edited\n```\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --skip-original-if-edited\n```\n\n----------------------------------------\n\nTITLE: Updating Export Ignoring File Signature using osxphotos\nDESCRIPTION: Performs an incremental export with `--update` but instructs osxphotos to ignore changes to the exported file's signature (size, date modified) when deciding whether to re-export a file. Useful if you edit exported photos manually and still want to use the update feature; uses the `--ignore-signature` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_36\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --update --ignore-signature\n```\n\n----------------------------------------\n\nTITLE: Extracting Place Data\nDESCRIPTION: These snippets extract specific details from the photo's reverse geolocation data such as country code, country name, state/province, city, and area of interest.  These snippets have no input parameters and are dependent on the photo having geolocation data. The output provides details about the location from where the photo was taken.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_84\n\nLANGUAGE: text\nCODE:\n```\n{place.country_code}            The ISO country code from the photo's\n                                reverse geolocation data\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.name.country}            Country name from the photo's reverse\n                                geolocation data\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.name.state_province}     State or province name from the photo's\n                                reverse geolocation data\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.name.city}               City or locality name from the photo's\n                                reverse geolocation data\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.name.area_of_interest}   Area of interest name (e.g. landmark or\n                                public place) from the photo's reverse\n                                geolocation data\n```\n\n----------------------------------------\n\nTITLE: Getting Current Year (4-Digit)\nDESCRIPTION: Retrieves the full 4-digit year of the current date.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_17\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.year}\n```\n\n----------------------------------------\n\nTITLE: Generating Sequential Counters\nDESCRIPTION: Provides a sequential counter starting at 0. Can be configured with a starting value {counter(start)}, start/stop/step values {counter(start,stop,step)}, and formatted using Python string format codes {counter:format_spec(start,stop,step)}. Multiple independent counters can be created using named variants like {counter.name}. Not suitable for '--update' as values may change.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_50\n\nLANGUAGE: Template Language\nCODE:\n```\n{counter}\n{counter(start)}\n{counter(start,stop,step)}\n{counter:format_spec(start,stop,step)}\n{counter.name}\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Column via Dynamic Property in osxphotos (pycon)\nDESCRIPTION: Demonstrates accessing the `ZTITLE` column from the `ZADDITIONALASSETATTRIBUTES` table associated with a `photo` object using dynamic property access. This returns a tuple containing the value(s) for that column for the specific photo, illustrating how table columns are exposed as attributes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_34\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.tables().ZADDITIONALASSETATTRIBUTES.ZTITLE\n(\"St. James's Park\",)\n```\n\n----------------------------------------\n\nTITLE: Extracting Date Components\nDESCRIPTION: These snippets provide the means to extract individual components of the current date, like year, month, day, etc. from {today}.  They do not require any input and are designed to format the output, providing the information based on user locale. It provides flexibility to use the date in different formats.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_81\n\nLANGUAGE: text\nCODE:\n```\n{today.year}                    4-digit year of current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.yy}                      2-digit year of current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.mm}                      2-digit month of the current date (zero\n                                padded)\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.month}                   Month name in user's locale of the current\n                                date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.mon}                     Month abbreviation in the user's locale of\n                                the current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.dd}                      2-digit day of the month (zero padded) of\n                                current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.dow}                     Day of week in user's locale of the current\n                                date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.doy}                     3-digit day of year (e.g Julian day) of\n                                current date, starting from 1 (zero padded)\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.hour}                    2-digit hour of the current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.min}                     2-digit minute of the current date\n```\n\nLANGUAGE: text\nCODE:\n```\n{today.sec}                     2-digit second of the current date\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Keyword During Export (Shell)\nDESCRIPTION: Exports photos using `exiftool`, removing a specific keyword ('MyKeyword' in this example) before writing metadata. The template filter `{keyword|remove(MyKeyword)}` modifies the keyword list, and `--replace-keywords` ensures only the filtered keywords are written to the exported file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{keyword|remove(MyKeyword)}\" --replace-keywords\n```\n\n----------------------------------------\n\nTITLE: Standardizing JPEG Extensions During Export with osxphotos (Shell)\nDESCRIPTION: Shows how to use the `--jpeg-ext` option to force a specific file extension (e.g., `.jpg`) for all exported JPEG images, regardless of the original case (like `.JPG` or `.JPEG`). Valid options are `jpeg`, `jpg`, `JPEG`, `JPG`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --jpeg-ext jpg\n```\n\n----------------------------------------\n\nTITLE: Export Photo with JSON Sidecar\nDESCRIPTION: This snippet shows how to export a photo and create a JSON sidecar file containing its metadata.  The sidecar can be used with exiftool to apply the metadata to the image. Requires the `osxphotos` library and exiftool to be installed and in the system path.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\nphotos = photosdb.photos()\nphotos[0].export(\"/tmp\",\"photo_name.jpg\",sidecar_json=True)\n```\n\n----------------------------------------\n\nTITLE: Exporting to XMP Sidecars with Modified Naming (Shell)\nDESCRIPTION: Exports photos and creates XMP sidecar files, but modifies the default naming convention. The `--sidecar-drop-ext` option instructs osxphotos to name the sidecar file 'photoname.XMP' instead of the default 'photoname.ext.XMP', which might be required by some applications.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP --sidecar-drop-ext\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Albums as Dictionary\nDESCRIPTION: This snippet retrieves a dictionary of shared albums and their photo counts. It requires a pre-existing `PhotosDB` object. The dictionary's keys are album names, and values are the number of photos in the album, sorted in reverse order.  This is only valid in Photos 5.0 (MacOS 10.15/Catalina) or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nalbums_shared_dict = photosdb.albums_shared_as_dict\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Template Fields (osxphotos-template)\nDESCRIPTION: Demonstrates passing optional arguments to certain template fields using parentheses `(field_arg)`. The example shows `{folder_album}` which defaults to '/' as a separator, and how to override it with '>' or remove it entirely.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_4\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{folder_album}\"      // Default separator: [\"Folder1/Album1\"]\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{folder_album(>)}\"    // Custom separator: [\"Folder1>Album1\"]\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{folder_album()}\"     // No separator: [\"Folder1Album1\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Git branch\nDESCRIPTION: This command creates a new branch named `my_branch` in the local Git repository.  This isolates the changes for a specific feature or bug fix.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b my_branch\n```\n\n----------------------------------------\n\nTITLE: Downloading Missing iCloud Photos with PhotoKit - osxphotos - Shell\nDESCRIPTION: Uses the --download-missing option in conjunction with the experimental --use-photokit option to attempt downloading missing original files from iCloud using the PhotoKit interface instead of AppleScript. This provides an alternative method for downloading that might be more stable in some environments. Requires the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --download-missing --use-photokit\n```\n\n----------------------------------------\n\nTITLE: Setting Finder Tags with osxphotos Export (Shell)\nDESCRIPTION: Write photo keywords to macOS Finder tags using the `--finder-tag-keywords` option during export. This enables searching for photos using Spotlight or Finder tags. This feature can be combined with `--keyword-template` to customize the tag values based on templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_43\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords\n```\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Command Errors (Command Line)\nDESCRIPTION: Controls the behavior of osxphotos when a post-command specified with --post-command encounters an error. ACTION can be `continue` to log the error and proceed or `break` to stop processing further post-commands for the current photo but continue the export. Default is to abort the export.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_69\n\nLANGUAGE: Shell\nCODE:\n```\n--post-command-error ACTION\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Skipped Tests (Shell)\nDESCRIPTION: Illustrates setting environment variables to enable specific tests that are normally skipped. `OSXPHOTOS_TEST_EXPORT=1` enables certain export tests, `OSXPHOTOS_TEST_LOCALE=1` enables a locale test, and `OSXPHOTOS_TEST_CONVERT=1` enables GPU-dependent tests. These are set before running pytest.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nOSXPHOTOS_TEST_EXPORT=1\nOSXPHOTOS_TEST_LOCALE=1\nOSXPHOTOS_TEST_CONVERT=1\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Brace - osxphotos\nDESCRIPTION: This tag inserts a close brace into the output.  It has no dependencies. The output is a close brace: '}'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_105\n\nLANGUAGE: string\nCODE:\n```\n{closebrace}\n```\n\n----------------------------------------\n\nTITLE: Writing Metadata with exiftool via osxphotos (Shell)\nDESCRIPTION: Demonstrates enabling metadata embedding using the external `exiftool` application during export by adding the `--exiftool` flag. This requires `exiftool` to be installed separately and allows writing basic metadata like keywords, persons, and GPS location to the exported files.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool\n```\n\n----------------------------------------\n\nTITLE: Setting osxphotos Output Theme (Shell)\nDESCRIPTION: Control the color scheme used for `osxphotos` command output in the terminal with the `--theme NAME` option. This can improve readability depending on the terminal's background color. Custom themes can be defined and managed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_48\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --verbose --theme dark\n```\n\n----------------------------------------\n\nTITLE: Managing Projects Metadata with ProjectInfo Objects Using osxphotos in Python\nDESCRIPTION: ProjectInfo objects describe projects such as cards, calendars, and slideshows within Photos, accessible via PhotosDB.project_info or PhotoInfo.project_info. Each project has a uuid, title, creation_date, and associated photos (list of PhotoInfo objects). osxphotos provides basic info but may not fully support third-party plugin projects. The asdict() method returns project metadata as a dictionary. Facilitates inspection and integration of user-created photo projects within automation scripts.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Comparing Photos Libraries with osxphotos\nDESCRIPTION: This code snippet showcases how to use `osxphotos compare` to analyze differences between two Photos libraries, providing a summary of assets unique to each and those that match or differ. Includes library names for comparison.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos compare Test-13.5.1-compare-1.photoslibrary Test-13.5.1-compare-2.photoslibrary\nlibrary_a = Test-13.5.1-compare-1.photoslibrary\nlibrary_b = Test-13.5.1-compare-2.photoslibrary\nin_a_not_b = 1 asset\nin_b_not_a = 2 assets\nin_a_and_b_same = 2 assets\nin_a_and_b_different = 1 asset\n```\n\n----------------------------------------\n\nTITLE: Ignoring File Signatures During Update\nDESCRIPTION: This snippet demonstrates the use of `--ignore-signature` with `--update`. It instructs osxphotos to ignore file signatures (size and date modified) when determining which files should be updated. Useful when exported images have been edited.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --update --ignore-signature\n```\n\n----------------------------------------\n\nTITLE: Extracting Season - osxphotos\nDESCRIPTION: This tag extracts the season of the year associated with a photo (e.g., 'Summer').  Requires Photos 5+ and that Photos' image categorization algorithms have assigned a season.  The output is a string indicating the season.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_87\n\nLANGUAGE: string\nCODE:\n```\n{searchinfo.season}\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in OSXPhotos Templates (plaintext)\nDESCRIPTION: Explains how to include special characters such as braces or percent signs in template outputs. The strings \"{openbrace}\" and \"{closebrace}\" output literal \"{\" and \"}\" respectively, enabling braces in rendered text. Percent signs can be escaped using \"%%\" or the special template field \"{percent}\" wherever needed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_67\n\nLANGUAGE: plaintext\nCODE:\n```\n\"{created.year}/{openbrace}{title}{closebrace}\"  # Outputs e.g. '2020/{Photo Title}'\\n\"{title[:,%%]}\"  # Replaces ':' with '%' in title\\n\"{title contains Foo?{title}{percent},{title}}\"  # Adds '%' if title contains 'Foo'\n```\n\n----------------------------------------\n\nTITLE: Accessing Photo Database Primary Key ID\nDESCRIPTION: Retrieves the unique sequential integer ID (primary key) for the photo from the Photos database. All assets for a photo share the same ID. Can be formatted using Python string format codes (e.g., {id:05d} pads with zeros to 5 digits).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_49\n\nLANGUAGE: Template Language\nCODE:\n```\n{id}\n{id:format_spec}\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run Export with Verbose Output using osxphotos\nDESCRIPTION: Simulates the export process without writing any files, providing detailed output about which files would be exported and their generated paths/names. Uses the `--dry-run` and `--verbose` options, which is helpful for testing templates.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_37\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --dry-run --verbose\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos from Specific Folder/Album Path using osxphotos\nDESCRIPTION: Exports photos based on a regular expression match against their full folder/album path using the `--regex` query option and the `{folder_album}` template. This is useful for selecting albums with identical names located in different folders.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_44\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --regex \"2018/Summer Vacation\" \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions\nDESCRIPTION: Explains the 'conditional?bool_value,default' syntax for rendering values based on a boolean condition. The condition compares the template field value against a 'value' using various operators (contains, matches, startswith, endswith, comparison operators). The 'value' can itself be a template statement.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_6\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword matches Beach}\nresolves to True if 'Beach' is a keyword. It would not match keyword 'BeachDay'.\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword contains Beach}\nresolves to True if any keyword contains the word 'Beach' so it would match both 'Beach' and 'BeachDay'.\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{photo.score.overall > 0.7}\nresolves to True if the photo's overall aesthetic score is greater than 0.7.\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword|lower not contains beach}\nresolves to True if there is no keyword that matches 'beach'.\n```\n\n----------------------------------------\n\nTITLE: Using Template for Edited Photo Suffix with osxphotos (Shell)\nDESCRIPTION: Shows how to use an osxphotos template string with `--edited-suffix` to dynamically generate the suffix for edited photos. This example appends the modification date (year-month-day) using the `{modified}` template variable, resulting in filenames like `IMG_1234_2021-04-21.jpeg`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_{modified.year}-{modified.mm}-{modified.dd}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Filters to Template Fields in osxphotos\nDESCRIPTION: Shows how to apply single filters like `lower`, `upper`, and `capitalize` to template fields using the pipe `|` operator. Filters modify the rendered value(s) of the field. Assumes photo keywords are [\"FOO\", \"bar\"].\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_39\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{keyword|lower}\" renders to \"foo\", \"bar\"\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{keyword|upper}\" renders to: \"FOO\", \"BAR\"\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n\"{keyword|capitalize}\" renders to: \"Foo\", \"Bar\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos by Date from Specific Library (Bash)\nDESCRIPTION: This command line example shows how to export photos from a specified Photos library (`--library`) to a destination path (`~/Desktop/export`), organizing the exported files into a directory structure based on the photo's creation date (`--export-by-date`).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export --export-by-date --library ~/Pictures/Photos\\ Library.photoslibrary ~/Desktop/export\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expression Syntax in osxphotos Templates\nDESCRIPTION: Provides examples of the conditional expression syntax (`operator value`) used after a template field, optionally preceded by 'not'. Demonstrates various operators (`matches`, `contains`, `>`), negation (`not`), and using filters within the condition part.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_45\n\nLANGUAGE: Template Language\nCODE:\n```\n{keyword matches Beach}\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n{keyword contains Beach}\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n{photo.score.overall > 0.7}\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n{keyword|lower contains beach}\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n{keyword|lower not contains beach}\n```\n\n----------------------------------------\n\nTITLE: Dropping Extension from Sidecar Filenames using osxphotos\nDESCRIPTION: This command shows how to drop the original file extension from the sidecar filename by using the `--sidecar-drop-ext` option in conjunction with `--sidecar XMP`. This creates sidecar files named `photoname.XMP` instead of `photoname.ext.XMP`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP --sidecar-drop-ext\n```\n\n----------------------------------------\n\nTITLE: Filter values in phototemplate.py\nDESCRIPTION: This code snippet iterates through the FILTER_VALUES dictionary in phototemplate.py and generates a markdown list of valid filters and their descriptions.  This is used to create a help section that lists valid filters that can be applied when templating.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.phototemplate import FILTER_VALUES\nfilter_help = \"\\n\".join(f\"- `{f}`: {descr}\" for f, descr in FILTER_VALUES.items())\ncog.out(filter_help)\n```\n\n----------------------------------------\n\nTITLE: Adding AI Labels as Keywords with osxphotos and exiftool (Shell)\nDESCRIPTION: Illustrates using `--exiftool` and `--keyword-template` with the `{label}` template variable. This extracts Photos' automatically generated machine learning labels (image classifications) and embeds them as keywords in the exported image metadata. Requires `exiftool`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Exiftool JSON Sidecar Metadata with Exiftool (Shell)\nDESCRIPTION: Uses the `exiftool` command-line utility to read metadata from an Exiftool-specific JSON sidecar file (`IMG_0001.json`) and apply it to the corresponding image file (`IMG_0001.jpg`), overwriting existing tags. Used to verify Exiftool JSON sidecar content.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nexiftool -overwrite_original -json=~/Desktop/export/IMG_0001.json ~/Desktop/export/IMG_0001.jpg\n```\n\n----------------------------------------\n\nTITLE: Export with Lowercase Directory Names - Bash\nDESCRIPTION: This command exports photos and converts directory names to lowercase using the `lower` filter.  It uses the `--directory` option with the `{folder_album|lower}` template. It requires that osxphotos is installed. The expected output is photos exported into lowercased folder/album directories.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|lower}\"\n```\n\n----------------------------------------\n\nTITLE: Extracting EXIF data\nDESCRIPTION: This shows how to retrieve EXIF data like camera make, model, and lens model from the original photo's EXIF information. These snippets retrieve EXIF data that was imported by Photos.  No specific inputs are required.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_88\n\nLANGUAGE: text\nCODE:\n```\n{exif.camera_make}              Camera make from original photo's EXIF\n                                information as imported by Photos, e.g.\n                                'Apple'\n```\n\nLANGUAGE: text\nCODE:\n```\n{exif.camera_model}             Camera model from original photo's EXIF\n                                information as imported by Photos, e.g.\n                                'iPhone 6s'\n```\n\nLANGUAGE: text\nCODE:\n```\n{exif.lens_model}               Lens model from original photo's EXIF\n                                information as imported by Photos, e.g.\n                                'iPhone 6s back camera 4.15mm f/2.2'\n```\n\n----------------------------------------\n\nTITLE: Comparing Photos Libraries to CSV\nDESCRIPTION: This example shows how to use the `osxphotos compare` command to generate a CSV report of the differences between two Photos libraries. The `--csv` flag enables CSV output, and `--output` specifies the filename.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/CHANGELOG.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos compare \\\nTest-13.5.1-compare-1.photoslibrary \\\nTest-13.5.1-compare-2.photoslibrary \\\n--csv --output compare.csv\n```\n\n----------------------------------------\n\nTITLE: Getting Season of Year\nDESCRIPTION: This snippet returns the season of the year associated with a photo, such as 'Summer'.  This functionality is dependent on Photos 5+ and requires Photos' image categorization algorithms to be applied.  There are no parameters needed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_87\n\nLANGUAGE: text\nCODE:\n```\n{searchinfo.season}             Season of the year associated with a photo,\n                                e.g. 'Summer'; (Photos 5+ only, applied\n                                automatically by Photos' image\n                                categorization algorithms).\n```\n\n----------------------------------------\n\nTITLE: OSXPhotos CLI Entry Point with Click\nDESCRIPTION: This snippet documents the CLI entry point for 'osxphotos' implemented using the Python 'click' library. It specifies how the main command is registered, the command name, and its nested command structure.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/cli.rst.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. click:: osxphotos.cli:cli_main\n   :prog: osxphotos\n   :nested: full\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Template Fields in osxphotos\nDESCRIPTION: Explains the `&` operator used to combine the resolved values of multiple template statements into a single list. The right-hand side of the `&` is another complete template statement. Examples show simple and nested combinations.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_48\n\nLANGUAGE: Template Language\nCODE:\n```\n{created.year&{folder_album,}}\n```\n\nLANGUAGE: Template Language\nCODE:\n```\n{template1&{template2&{template3,},},}\n```\n\n----------------------------------------\n\nTITLE: Extracting Projects - osxphotos\nDESCRIPTION: This tag retrieves the project(s) a photo is contained in. Requires the photo to be part of a project (e.g., greeting cards). The output is a string, potentially a list of projects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_119\n\nLANGUAGE: string\nCODE:\n```\n{project}\n```\n\n----------------------------------------\n\nTITLE: Organizing by Country with OSXphotos\nDESCRIPTION: This command exports photos, organizing them into directories based on the country name extracted from the photo's place metadata. It uses the `--directory` option with the `{place.name.country}` template field, demonstrating how to use metadata from the photo to arrange the exported files.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Only One Version (Original or Edited) with osxphotos (Shell)\nDESCRIPTION: Explains how to use the `--skip-original-if-edited` option to export only the edited version if a photo has been edited, otherwise exporting the original. This prevents exporting both versions when edits exist.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --skip-original-if-edited\n```\n\n----------------------------------------\n\nTITLE: Modifying Edited Photo Suffix with osxphotos (Shell)\nDESCRIPTION: Demonstrates using the `--edited-suffix` option with `osxphotos export` to customize the filename suffix appended to edited photos. By default, it's `_edited`. This example changes it to `_EDIT`, resulting in filenames like `IMG_1234_EDIT.jpeg`.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --edited-suffix \"_EDIT\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Folder and Album - osxphotos\nDESCRIPTION: This tag retrieves the folder path + album a photo is contained in. For example, 'Folder/Subfolder/Album' or just 'Album' if no enclosing folder. Depends on the photo being part of an album. The output is a string representing the folder path and album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_118\n\nLANGUAGE: string\nCODE:\n```\n{folder_album}\n```\n\n----------------------------------------\n\nTITLE: Filtering Folder/Album with OSXphotos\nDESCRIPTION: This command exports photos, applying a filter to the album/folder structure using the `{folder_album|filter(startswith Events)}` template. It uses the `filter` option to select only albums/folders that start with \"Events\". The `--directory` option and the `filter` are used in combination.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album|filter(startswith Events)}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB with a Specific Database File Path (Python)\nDESCRIPTION: Demonstrates initializing `osxphotos.PhotosDB` using the `dbfile` keyword argument to specify the direct path to the `photos.db` database file within a Photos library. This allows querying the database even if it's separated from the main library structure.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nosxphotos.PhotosDB(dbfile=path)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(dbfile=\"/Users/smith/Pictures/Test.photoslibrary/database/photos.db\")\n```\n\n----------------------------------------\n\nTITLE: Get Exiftool Path with osxphotos\nDESCRIPTION: This snippet demonstrates how to retrieve the path to the exiftool executable using the `osxphotos.exiftool.get_exiftool_path()` function. It will raise a FileNotFoundError if exiftool is not found. Requires the `osxphotos` library to be installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_30\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> osxphotos.exiftool.get_exiftool_path()\n'/usr/local/bin/exiftool'\n>>>\n```\n\n----------------------------------------\n\nTITLE: Using Template for Conditional Directory Naming (Shell)\nDESCRIPTION: Provides a command-line example using the --directory option with a template string that incorporates conditional logic (?bool_value,default). If keywords match 'travel' or 'vacation', the photo is exported to 'Travel-Photos'; otherwise, it goes to 'Not-Travel-Photos'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n--directory \"{keyword|lower matches travel|vacation?Travel-Photos,Not-Travel-Photos}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting by Album or Folder with OSXphotos\nDESCRIPTION: This command exports photos, organizing them by the album and folder structure using the `{folder_album}` template field.  It preserves the folder and album structure of the photos during export. The `--directory` option and `{folder_album}` template field is used to achieve the desired structure.  It exports to /path/to/export directory.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{folder_album}\"\n```\n\n----------------------------------------\n\nTITLE: Writing Metadata with ExifTool During Export - osxphotos - Shell\nDESCRIPTION: Uses the --exiftool option to enable writing metadata (like keywords, persons, GPS) directly to the exported photo files using the external exiftool application. Requires exiftool to be installed and accessible in the system's PATH, and the osxphotos command-line tool installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool\n```\n\n----------------------------------------\n\nTITLE: Accessing Burst Photo Group Details Using osxphotos Python Library\nDESCRIPTION: This snippet demonstrates how to use the osxphotos library to access and manipulate burst photos from a Photos library. It imports the osxphotos module, initializes a PhotosDB instance pointing to a Photos library, filters photos that are part of burst sets, selects one burst photo, and then iterates through its related burst photos printing their filenames. Key dependencies include the osxphotos package and access to a Photos library file. Inputs are the Photos library path and the selection of burst photos, and outputs list filenames of all photos in the selected burst set. This approach enables users to programmatically manage burst photo groups similar to how they appear in the Photos app.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_38\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Photos Library.photoslibrary\")\n>>> bursts = [p for p in photosdb.photos() if p.burst]\n>>> burst_photo = bursts[5]\n>>> len(burst_photo.burst_photos)\n4\n>>> burst_photo.original_filename\n'IMG_9851.JPG'\n>>> for photo in burst_photo.burst_photos:\n...     print(photo.original_filename)\n...\nIMG_9853.JPG\nIMG_9852.JPG\nIMG_9854.JPG\nIMG_9855.JPG\n```\n\n----------------------------------------\n\nTITLE: Extracting Comments - osxphotos\nDESCRIPTION: This tag retrieves the comment(s) on shared Photos; format is 'Person name: comment text' (Photos 5+ only). Requires the photo to have comments. The output is a string, potentially a list of comments.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_126\n\nLANGUAGE: string\nCODE:\n```\n{comment}\n```\n\n----------------------------------------\n\nTITLE: Expanding Multi-Valued Fields with Delimiters (osxphotos-template)\nDESCRIPTION: Illustrates handling multi-valued fields (like keywords). The '+' prefix triggers in-place expansion. An optional delimiter preceding '+' specifies the string used to join the values. If no delimiter is given, values are joined directly.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.md#_snippet_2\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{keyword}\"  // Renders as separate quoted strings: \"foo\", \"bar\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{,+keyword}\" // Renders joined by comma: \"foo,bar\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{; +keyword}\" // Renders joined by semicolon and space: \"foo; bar\"\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n\"{+keyword}\"  // Renders joined with no delimiter: \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos App Version (Python)\nDESCRIPTION: Retrieves the version number of the Apple Photos application that created or last modified the library. This is returned as an integer (e.g., 5 for Photos 5). Requires an initialized PhotosDB object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.photos_version\n```\n\n----------------------------------------\n\nTITLE: Converting Images to JPEG During Export\nDESCRIPTION: Command for converting non-JPEG images (such as RAW photos) to JPEG format during export. Uses --convert-to-jpeg along with --jpeg-quality to specify the compression quality (0.9 = 90%).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --convert-to-jpeg --jpeg-quality 0.9\n```\n\n----------------------------------------\n\nTITLE: Accessing PhotoInfo Properties via {photo} Template\nDESCRIPTION: Demonstrates how to access properties of the underlying PhotoInfo object directly using the {photo.property} syntax within osxphotos templates. This provides access to attributes not available as dedicated template fields, such as {photo.favorite} or nested properties like {photo.place.name}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_9\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{photo.property}\n```\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{photo.favorite}\n```\n\nLANGUAGE: osxphotos template\nCODE:\n```\n{photo.place.name}\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB\nDESCRIPTION: Initializes a PhotosDB object to access the Photos library. It can be initialized with or without a path. If no path is provided, it attempts to open the last opened library. It raises a FileNotFoundError if the path is invalid.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nosxphotos.PhotosDB()\nosxphotos.PhotosDB(path)\nosxphotos.PhotosDB(dbfile=path)\n```\n\n----------------------------------------\n\nTITLE: Using strip to remove whitespace in osxphotos templates\nDESCRIPTION: This snippet discusses '{strip,TEMPLATE}', which removes leading and trailing whitespace from the rendered template value(s). It's useful for cleaning user input or file names before processing or export.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_58\n\nLANGUAGE: plaintext\nCODE:\n```\n|{strip,TEMPLATE}'; strips whitespace from beginning and end of rendered TEMPLATE value(s).|\n```\n\n----------------------------------------\n\nTITLE: Extracting Lens Model - osxphotos\nDESCRIPTION: This tag extracts the lens model from the original photo's EXIF information as imported by Photos. Relies on the presence of lens model EXIF data. The output is a string representing the lens model, e.g., 'iPhone 6s back camera 4.15mm f/2.2'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_90\n\nLANGUAGE: string\nCODE:\n```\n{exif.lens_model}\n```\n\n----------------------------------------\n\nTITLE: Writing Finder Tags from Keyword Template - osxphotos CLI\nDESCRIPTION: Illustrates combining `--finder-tag-keywords` with a `--keyword-template` to define the content of the Finder tags based on a template. This example uses the `{label}` template field.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_39\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --finder-tag-keywords --keyword-template \"{label}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Album Metadata Information with osxphotos (Python)\nDESCRIPTION: Accesses the album_info property of a PhotosDB object to get a list of AlbumInfo objects, each representing metadata for an album present in the Photos library. Returns a list or empty list if none found. Requires a PhotosDB object.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums = photosdb.album_info\n```\n\n----------------------------------------\n\nTITLE: Listing Album Names with osxphotos (Python)\nDESCRIPTION: Retrieves all album names found in the Photos library by accessing the albums attribute of a PhotosDB object. Returns a list of album names as strings. Handles duplicate album names by combining their photos into one logical album (Photos 5.0+).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbum_names = photosdb.albums\n```\n\n----------------------------------------\n\nTITLE: Getting Place Name\nDESCRIPTION: This snippet introduces the retrieval of the place name from the photo's reverse geolocation data.  It displays the name as shown in Photos. There are no parameters needed and it is dependent on the photo having valid geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_83\n\nLANGUAGE: text\nCODE:\n```\n{place.name}                    Place name from the photo's reverse\n                                geolocation data, as displayed in Photos\n```\n\n----------------------------------------\n\nTITLE: Open Specific Photos Library\nDESCRIPTION: Opens a specific Photos library using either the library path or the path to the database file. This can be used to access Photos libraries that are not the default or System library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(dbfile=\"/Users/smith/Pictures/Test.photoslibrary/database/photos.db\")\n```\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Test.photoslibrary\")\n```\n\n----------------------------------------\n\nTITLE: Getting Albums as Dictionary from PhotosDB in Python\nDESCRIPTION: Returns a dictionary mapping album names to their photo count. The dictionary is sorted in descending order by count. Albums with duplicate names are treated as a single album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums_dict = photosdb.albums_as_dict\n```\n\n----------------------------------------\n\nTITLE: Calling external Python functions in osxphotos templates\nDESCRIPTION: This snippet explains '{function:file.py::function_name}', allowing execution of external Python functions with the PhotoInfo object as input, enabling dynamic template content based on external logic or remote data fetching.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_60\n\nLANGUAGE: plaintext\nCODE:\n```\n|{function:https://raw.githubusercontent.com/RhetTbull/osxphotos/main/examples/template_function.py::example}'; invokes external function from URL or local file, passing PhotoInfo object, returning dynamic template content.|\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs\nDESCRIPTION: Explains how to escape the percent sign character (%) using `%%` or the `{percent}` template field when a template field is required.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_103\n\nLANGUAGE: text\nCODE:\n```\nIf you need to use a `%` (percent sign character), you can escape the percent sign by using `%%`.  You can also use the `{percent}` template field where a template field is required. For example:\n\n`{title[:,%%]}` replaces the `:` with `%` and `{title contains Foo?{title}{percent},{title}}` adds `%` to the  title if it contains `Foo`.\n```\n\n----------------------------------------\n\nTITLE: Open Default Photos Library\nDESCRIPTION: Opens the default (last opened) Photos library using `get_last_library_path`. This is the library that would open if the user opened Photos.app.  It uses `osxphotos.utils.get_last_library_path()` to find the path.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\nphotosdb = osxphotos.PhotosDB(osxphotos.utils.get_last_library_path())\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters\nDESCRIPTION: Shows how to escape special characters like `{` and `}` using `{openbrace}` and `{closebrace}`. This allows including these characters literally in the output of the template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_101\n\nLANGUAGE: text\nCODE:\n```\nIf you want to include \"{\" or \"}\" in the output, use \"{openbrace}\" or \"{closebrace}\" template substitution.\n\ne.g. `\"{created.year}/{openbrace}{title}{closebrace}\"` would result in `\"2020/{Photo Title}\"`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Information for 'osxphotos' CLI\nDESCRIPTION: This snippet shows the command to invoke the help information for the 'osxphotos' CLI using Python's module execution. It retrieves detailed usage instructions and available commands through the '--help' argument.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/cli.rst.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m osxphotos --help\n```\n\n----------------------------------------\n\nTITLE: Utility functions for System Libraries and Lists\nDESCRIPTION: This snippet demonstrates the use of several utility functions. `get_system_library_path()` returns the path to the system Photo Library (MacOS 10.15 only). `get_last_library_path()` returns the path to the last opened Photos Library. `list_photo_libraries()` lists available Photos libraries. The functions are used for convenience, especially in automated processes. Not all libraries will be found using list_photo_libraries on older systems.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.utils import get_system_library_path, get_last_library_path, list_photo_libraries\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Command with osxphotos CLI in Python\nDESCRIPTION: Defines a sample query command function decorated with @query_command() that processes PhotosInfo objects passed automatically by the CLI. Utilizes click options for resumable runs and dry-run capability. Shows usage of logging, verbose printing based on verbosity levels, handling persistent state through SQLiteKVStore, and demonstrates printing messages to stdout and stderr. The function aborts early if no photos are found and manages skipping previously processed photos via a persistent key-value store. This includes datetime-stamped state storage keyed by photo UUID. Dependencies include osxphotos CLI utilities, datetime, and click. Inputs are photo lists and options; output is informative CLI feedback. Limitations: expects a Photos database accessible to osxphotos and requires correct CLI invocation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom osxphotos.cli import (\n    abort,\n    echo,\n    echo_error,\n    kvstore,\n    logger,\n    query_command,\n    verbose,\n)\n\n\n@query_command()\n@click.option(\n    \"--resume\",\n    is_flag=True,\n    help=\"Resume processing from last run, do not reprocess photos\",\n)\n@click.option(\n    \"--dry-run\", is_flag=True, help=\"Do a dry run, don't actually do anything\"\n)\ndef example(resume, dry_run, photos: list[osxphotos.PhotoInfo], **kwargs):\n    \"\"\"Sample query command for osxphotos. Prints out the filename and date of each photo.\n\n    Whatever text you put in the function's docstring here, will be used as the command's\n    help text when run via `osxphotos run cli_example_2.py --help` or `python cli_example_2.py --help`\n\n    The @query_command decorator returns a click.command so you can add additional options\n    using standard click decorators.  For example, the --resume and --dry-run options.\n    For more information on click, see https://palletsprojects.com/p/click/.\n    \"\"\"\n\n    # abort will print the message to stderr and exit with the given exit code\n    if not photos:\n        abort(\"Nothing to do!\", 1)\n\n    # verbose() will print to stdout if --verbose option is set\n    # you can optionally provide a level (default is 1) to print only if --verbose is set to that level\n    # for example: -VV or --verbose --verbose == level 2\n    verbose(f\"Found [count]{len(photos)}[/] photos\")\n    verbose(\"This message will only be printed if verbose level 2 is set\", level=2)\n\n    # the logger is a python logging.Logger object\n    # debug messages will only be printed if --debug option is set\n    logger.debug(f\"{kwargs=}\")\n\n    # kvstore() returns a SQLiteKVStore object for storing state between runs\n    # this is basically a persistent dictionary that can be used to store state\n    # see https://github.com/RhetTbull/sqlitekvstore for more information\n    kv = kvstore(\"cli_example_2\")\n    verbose(f\"Using key-value cache: {kv.path}\")\n\n    # do something with photos here\n    for photo in photos:\n        # photos is a list of PhotoInfo objects\n        # see: https://rhettbull.github.io/osxphotos/reference.html#osxphotos.PhotoInfo\n        if resume and photo.uuid in kv:\n            echo(\n                f\"Skipping processed photo [filename]{photo.original_filename}[/] ([uuid]{photo.uuid}[/])\"\n            )\n            continue\n\n        # store the uuid and current time in the kvstore\n        # the key and value must be a type supported by SQLite: int, float, str, bytes, bool, None\n        # if you need to store other values, you should serialize them to a string or bytes first\n        # for example, using json.dumps() or pickle.dumps()\n        kv[photo.uuid] = datetime.datetime.now().isoformat()\n        echo(f\"Processing [filename]{photo.original_filename}[/] [time]{photo.date}[/]\")\n        if not dry_run:\n            # do something with the photo here\n            echo(f\"Doing something with [filename]{photo.original_filename}[/]\")\n\n    # echo_error will print to stderr\n    # if you add [warning] or [error], it will be formatted accordingly\n    # and include an emoji to make the message stand out\n    echo_error(\"[warning]This is a warning message!\")\n    echo_error(\"[error]This is an error message!\")\n\n\nif __name__ == \"__main__\":\n    # call your function here\n    # you do not need to pass any arguments to the function\n    # as the decorator will handle parsing the command line arguments\n    example()\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidecar File Names with --sidecar-drop-ext Option in osxphotos CLI\nDESCRIPTION: This command exports photos with XMP sidecar files, but names sidecars without repeating the image extension by using --sidecar-drop-ext, resulting in filenames like IMG_1234.XMP. Dependencies: osxphotos CLI. Input: Photo library and output directory. Output: Photos and sidecars with alternate filename pattern. Limitation: Only affects sidecar file naming; does not alter metadata content.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_26\n\nLANGUAGE: CLI\nCODE:\n```\nosxphotos export /path/to/export --sidecar XMP --sidecar-drop-ext\n```\n\n----------------------------------------\n\nTITLE: Export Original or Edited (Skip Original if Edited)\nDESCRIPTION: Exports either the original photo (if not edited) or the edited photo (if edited), but not both. This ensures only one version is exported.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --skip-original-if-edited\n```\n\n----------------------------------------\n\nTITLE: Getting UUID\nDESCRIPTION: This displays the photo's internal universally unique identifier (UUID), which is a 36-character string, which is unique to the photo. No inputs required.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_90\n\nLANGUAGE: text\nCODE:\n```\n{uuid}                          Photo's internal universally unique\n                                identifier (UUID) for the photo, a\n                                36-character string unique to the photo,\n                                e.g. '128FB4C6-0B16-4E7D-9108-FB2E90DA1546'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Metadata Information with osxphotos (Python)\nDESCRIPTION: Accesses the person_info property to obtain a list of PersonInfo objects, each representing detailed metadata for a person recognized in the Photos database. Returns a list or an empty list if no persons found.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nperson_info = photosdb.person_info\n```\n\n----------------------------------------\n\nTITLE: Removing Keyword during Export using osxphotos\nDESCRIPTION: Demonstrates how to remove a specific keyword (\"MyKeyword\") from photos during export using the `--keyword-template` option with the `remove` filter and `--replace-keywords` to apply the template.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --exiftool --keyword-template \"{keyword|remove(MyKeyword)}\" --replace-keywords\n```\n\n----------------------------------------\n\nTITLE: Getting Season Name of a Photo in OSXPhotos Python\nDESCRIPTION: Returns a string representing the season name associated with a photo. No parameters required. Useful for categorizing photos by seasonal metadata. Depends on OSXPhotos metadata extraction.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nseason_name = photo.season\n```\n\n----------------------------------------\n\nTITLE: Retrieving Album Information from PhotosDB in Python\nDESCRIPTION: Gets a list of AlbumInfo objects representing albums in the Photos database. Each AlbumInfo object contains detailed information about an album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nalbums = photosdb.album_info\n```\n\n----------------------------------------\n\nTITLE: Text Replacement in Template Output (OSXPhotos Template)\nDESCRIPTION: Shows how to perform text replacements on the rendered template value using the '[find,replace]' syntax. Multiple replacements can be chained using the '|' separator. This is useful for sanitizing output strings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_5\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{album[/,-]}\n{album[/,-|:,-]}\n```\n\n----------------------------------------\n\nTITLE: Organizing Exports by Keywords with Multiple Output Files\nDESCRIPTION: Command showing how to use multi-valued template fields like keywords, which will export multiple copies of photos with different keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{keyword}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PhotosDB with a Specific Library Path (Python)\nDESCRIPTION: Illustrates initializing `osxphotos.PhotosDB` by providing the full path to the Photos library folder (e.g., '/path/to/Photos Library.photoslibrary'). This is the recommended approach for ensuring the correct library is opened.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nosxphotos.PhotosDB(path)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport osxphotos\n\nphotosdb = osxphotos.PhotosDB(\"/Users/smith/Pictures/Test.photoslibrary\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Version\nDESCRIPTION: This snippet retrieves the database version number.  It requires a pre-existing `PhotosDB` object. The returned value is an integer. This is likely not necessary for most users but is available for debugging purposes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nphotosdb.db_version\n```\n\n----------------------------------------\n\nTITLE: Extracting Holiday Names - osxphotos\nDESCRIPTION: This tag extracts holiday names associated with a photo (e.g., 'Christmas Day'). Requires Photos 5+ and for Photos' image categorization algorithms to have assigned a holiday. The output is a string of associated holidays.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_128\n\nLANGUAGE: string\nCODE:\n```\n{searchinfo.holiday}\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Added Recently using osxphotos\nDESCRIPTION: Exports only photos that have been added to the Photos library within a specific recent period (e.g., \"1 week\") using the `--added-in-last` query option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_47\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --added-in-last \"1 week\"\n```\n\n----------------------------------------\n\nTITLE: Updating Previous Export using osxphotos\nDESCRIPTION: Performs an incremental export by comparing the current library state to the `.osxphotos_export.db` file in the export directory and exporting only new or changed photos using the `--update` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --update\n```\n\n----------------------------------------\n\nTITLE: Formatting Values with Type Conversion in osxphotos\nDESCRIPTION: Converts a template value to a specified type and formats it using Python string formatting codes. Supports int, float, or str types for conversion before formatting.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_107\n\nLANGUAGE: plain\nCODE:\n```\n{format:TYPE:FORMAT,TEMPLATE}\n```\n\nLANGUAGE: plain\nCODE:\n```\n{format:float:.1f,{exiftool:EXIF:FocalLength}}\n```\n\n----------------------------------------\n\nTITLE: Converting Images to JPEG\nDESCRIPTION: This snippet converts non-JPEG images to JPEG format during export, and sets JPEG quality to 0.9 using the `--jpeg-quality` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nosxphotos export /path/to/export --convert-to-jpeg --jpeg-quality 0.9\n```\n\n----------------------------------------\n\nTITLE: Import and Document OSXPhotos module\nDESCRIPTION: This snippet uses the Sphinx automodule directive to import and document the osxphotos module. The ':members:' option tells Sphinx to include all public members (functions, classes, etc.) of the module in the documentation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/reference.rst.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: osxphotos\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Added in Last Week using osxphotos\nDESCRIPTION: This command demonstrates how to export photos that were added to the library in the last week using the `--added-in-last` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --added-in-last \"1 week\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos Added in the Last Week\nDESCRIPTION: Command for exporting only photos that were added to the Photos library within the last week. Uses the --added-in-last option for recent additions filtering.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --added-in-last \"1 week\"\n```\n\n----------------------------------------\n\nTITLE: Querying Only Movie Files\nDESCRIPTION: Retrieves only movie/video files from the Photos library by setting images=False and movies=True. This excludes all still images from the results.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nmovies = photosdb.photos(images=False, movies=True)\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Person\nDESCRIPTION: Finds all photos containing the person 'Maria Smith'. Uses the facial recognition data in the Photos database to identify matching photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(persons=[\"Maria Smith\"])\n```\n\n----------------------------------------\n\nTITLE: Querying Photos by Person with osxphotos (Python)\nDESCRIPTION: Demonstrates querying photos in the Photos library associated with a specific person using the persons filter argument. Requires a PhotosDB object and a list of persons for filtering.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotos=photosdb.photos(persons=[\"Maria Smith\"])\n```\n\n----------------------------------------\n\nTITLE: Organizing Exports by Country Using Geolocation Data\nDESCRIPTION: Command to export photos organized by year and country name based on GPS coordinates stored in the photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --directory \"{created.year}/{place.name.country}\"\n```\n\n----------------------------------------\n\nTITLE: Exporting Photos from a Specific Album\nDESCRIPTION: Command for exporting only photos contained in the album \"Summer Vacation\". This filters the export to include only photos from the specified album.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --album \"Summer Vacation\"\n```\n\n----------------------------------------\n\nTITLE: Example Photos Library Folder Structure\nDESCRIPTION: This text diagram illustrates a sample folder and album structure within a Photos library, showing how albums can be nested inside folders. It's used to explain the output of `folder_list` and `folder_names` methods on AlbumInfo objects.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_44\n\nLANGUAGE: txt\nCODE:\n```\nPhotos Library\n├── Folder1\n    ├── SubFolder1\n    ├── SubFolder2\n       └── AlbumInFolder\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Sub-fields\nDESCRIPTION: Shows how to access specific sub-fields within a template field using the ':subfield' syntax. This is commonly used for structured metadata like EXIF or IPTC.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_2\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{exiftool:IPTC:Make}\n```\n\n----------------------------------------\n\nTITLE: Export Only Original Photos (Skip Edited)\nDESCRIPTION: Exports only the original, unedited photos, skipping any edited versions present in the Photos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/tutorial.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nosxphotos export /path/to/export --skip-edited\n```\n\n----------------------------------------\n\nTITLE: Inserting a Question Mark - osxphotos\nDESCRIPTION: This tag inserts a question mark character into the output.  It has no dependencies. The output is a question mark: '?'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_100\n\nLANGUAGE: string\nCODE:\n```\n{questionmark}\n```\n\n----------------------------------------\n\nTITLE: Loading osxphotos Export Configuration from a File\nDESCRIPTION: Demonstrates how to execute `osxphotos export` using options previously saved in a configuration file (`osxphotos.toml`). The `--load-config` flag reads the settings from the specified file, simplifying the command line for complex or repeated exports.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/tutorial.rst#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export --load-config osxphotos.toml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Rows as Dictionaries in osxphotos (pycon)\nDESCRIPTION: Example of calling the `rows_dict()` method on the `ZASSET` table object obtained from `photo.tables()`. This method returns a list where each element is a dictionary representing a row, with keys corresponding to column names and values being the row data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_36\n\nLANGUAGE: pycon\nCODE:\n```\n>>> photo.tables().ZASSET.rows_dict()\n[{'Z_PK': 6, 'Z_ENT': 3, 'Z_OPT': 35, 'ZACTIVELIBRARYSCOPEPARTICIPATIONSTATE': 0, 'ZAVALANCHEPICKTYPE': 0, 'ZBUNDLESCOPE': 0, 'ZCAMERAPROCESSINGADJUSTMENTSTATE': 0, 'ZCLOUDDELETESTATE': 0, 'ZCLOUDDOWNLOADREQUESTS': 0, 'ZCLOUDHASCOMMENTSBYME': None, 'ZCLOUDHASCOMMENTSCONVERSATION': None, 'ZCLOUDHASUNSEENCOMMENTS': None, 'ZCLOUDISDELETABLE': None, 'ZCLOUDISMYASSET': None, 'ZCLOUDLOCALSTATE': 0, 'ZCLOUDPLACEHOLDERKIND': 0, 'ZCOMPLETE': 1, 'ZDEFERREDPROCESSINGNEEDED': 0, 'ZDEPTHTYPE': 0, 'ZDERIVEDCAMERACAPTUREDEVICE': 0, 'ZDUPLICATEASSETVISIBILITYSTATE': 0, 'ZFACEAREAPOINTS': -100, 'ZFAVORITE': 0, 'ZHASADJUSTMENTS': 1, 'ZHDRTYPE': 0, 'ZHEIGHT': 1356, 'ZHIDDEN': 0, 'ZHIGHFRAMERATESTATE': 0, 'ZISMAGICCARPET': 0, 'ZKIND': 0, 'ZKINDSUBTYPE': 0, 'ZLIBRARYSCOPESHARESTATE': 0, 'ZMONOSKITYPE': 0, 'ZORIENTATION': 1, 'ZPACKEDACCEPTABLECROPRECT': 6192599813128215, 'ZPACKEDBADGEATTRIBUTES': 1, 'ZPACKEDPREFERREDCROPRECT': 2814835671629878, 'ZPLAYBACKSTYLE': 1, 'ZPLAYBACKVARIATION': 0, 'ZSAVEDASSETTYPE': 3, 'ZSEARCHINDEXREBUILDSTATE': 0, 'ZSYNDICATIONSTATE': 0, 'ZTHUMBNAILINDEX': 5, 'ZTRASHEDSTATE': 0, 'ZVIDEOCPDURATIONVALUE': 0, 'ZVIDEOCPVISIBILITYSTATE': 0, 'ZVIDEODEFERREDPROCESSINGNEEDED': 0, 'ZVIDEOKEYFRAMETIMESCALE': 0, 'ZVIDEOKEYFRAMEVALUE': 0, 'ZVISIBILITYSTATE': 0, 'ZWIDTH': 2047, 'ZADDITIONALATTRIBUTES': 7, 'ZCLOUDFEEDASSETSENTRY': None, 'ZCOMPUTEDATTRIBUTES': 8, 'ZCONVERSATION': None, 'ZDAYGROUPHIGHLIGHTBEINGASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGEXTENDEDASSETS': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETPRIVATE': None, 'ZDAYGROUPHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZDAYGROUPHIGHLIGHTBEINGSUMMARYASSETS': None, 'ZDUPLICATEMETADATAMATCHINGALBUM': None, 'ZDUPLICATEPERCEPTUALMATCHINGALBUM': None, 'ZEXTENDEDATTRIBUTES': 3, 'ZHIGHLIGHTBEINGASSETS': 6, 'ZHIGHLIGHTBEINGEXTENDEDASSETS': 6, 'ZHIGHLIGHTBEINGKEYASSETPRIVATE': 6, 'ZHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZHIGHLIGHTBEINGSUMMARYASSETS': 6, 'ZIMPORTSESSION': 4, 'ZLIBRARYSCOPE': None, 'ZMASTER': None, 'ZMEDIAANALYSISATTRIBUTES': 8, 'ZMOMENT': 4, 'ZMOMENTSHARE': None, 'ZMONTHHIGHLIGHTBEINGKEYASSETPRIVATE': 2, 'ZMONTHHIGHLIGHTBEINGKEYASSETSHARED': None, 'ZPHOTOANALYSISATTRIBUTES': 3, 'ZTRASHEDBYPARTICIPANT': None, 'ZYEARHIGHLIGHTBEINGKEYASSETPRIVATE': 3, 'ZYEARHIGHLIGHTBEINGKEYASSETSHARED': None, 'Z_FOK_CLOUDFEEDASSETSENTRY': None, 'ZADDEDDATE': 585926209.859624, 'ZADJUSTMENTTIMESTAMP': 596906868.198932, 'ZANALYSISSTATEMODIFICATIONDATE': 689981763.374756, 'ZCLOUDBATCHPUBLISHDATE': None, 'ZCLOUDLASTVIEWEDCOMMENTDATE': None, 'ZCLOUDSERVERPUBLISHDATE': None, 'ZCURATIONSCORE': 0.5, 'ZDATECREATED': 561129492.501, 'ZDURATION': 0.0, 'ZFACEADJUSTMENTVERSION': 596906868.198932, 'ZHDRGAIN': None, 'ZHIGHLIGHTVISIBILITYSCORE': 0.03816793893129771, 'ZLASTSHAREDDATE': None, 'ZLATITUDE': 51.50357167, 'ZLONGITUDE': -0.1318055, 'ZMODIFICATIONDATE': 689982854.802854, 'ZOVERALLAESTHETICSCORE': 0.6494140625, 'ZPROMOTIONSCORE': 0.0, 'ZSORTTOKEN': 561129492.501, 'ZTRASHEDDATE': None, 'ZAVALANCHEUUID': None, 'ZCLOUDASSETGUID': None, 'ZCLOUDBATCHID': None, 'ZCLOUDCOLLECTIONGUID': None, 'ZCLOUDOWNERHASHEDPERSONID': None, 'ZDELETEREASON': None, 'ZDIRECTORY': 'D', 'ZFILENAME': 'DC99FBDD-7A52-4100-A5BB-344131646C30.jpeg', 'ZMEDIAGROUPUUID': None, 'ZORIGINALCOLORSPACE': 'sRGB IEC61966-2.1', 'ZUNIFORMTYPEIDENTIFIER': 'public.jpeg', 'ZUUID': 'DC99FBDD-7A52-4100-A5BB-344131646C30', 'ZIMAGEREQUESTHINTS': b'Ki\\t@\\x01\\x00\\x00\\x00\\td\\tH\\x01\\x00\\x00\\x00\\x93\\\\\\tL\\x01\\x00\\x00\\x00\\x1aK\\x0c\\x03\\x0c\\xa8q\\x92\\x00\\x12C\\x0c\\x03\\x0c\"\\r\\x90\\x00\\x00<\\x0c\\x03\\x08\"\\x19\\x80\\x00', 'ZLOCATIONDATA': b'\\xca\\xebV\\tu\\xc0I@/j\\xf7\\xab\\x00\\xdf\\xc0\\xbf\\xcd\\xcc\\xcc\\xcc\\xcc\\xcc\\x04@\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'}]\n```\n\n----------------------------------------\n\nTITLE: Extracting UUID - osxphotos\nDESCRIPTION: This tag extracts the photo's internal universally unique identifier (UUID). It's a 36-character string unique to the photo. No specific dependencies are required. The output is a string representing the UUID.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_92\n\nLANGUAGE: string\nCODE:\n```\n{uuid}\n```\n\n----------------------------------------\n\nTITLE: OSXPhotos Command Line Interface REPL Description\nDESCRIPTION: Describes the usage of the OSXPhotos CLI REPL environment, which allows interactive testing and database processing. The output includes environment info, loaded classes, variables, and helper functions, for testing and development purposes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/package_overview.rst.txt#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Exporting Photos by Single Keyword using osxphotos\nDESCRIPTION: Exports only photos from the Photos library that are tagged with the specified keyword (\"Travel\") using the `--keyword` query option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_41\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export /path/to/export --keyword \"Travel\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python development requirements\nDESCRIPTION: This command installs the Python development dependencies listed in the `dev_requirements.txt` file. This includes packages needed for testing, linting, and other development tasks.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pip install -r dev_requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Path\nDESCRIPTION: This snippet retrieves the database path that the PhotosDB object was initialized with. It requires a pre-existing `PhotosDB` object.  The function returns the path as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nphotosdb.db_path\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals in osxphotos export --directory\nDESCRIPTION: Provides an example of using a conditional template statement with the osxphotos export --directory option to sort photos into directories based on keywords.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n--directory \"{keyword|lower matches travel|vacation?Travel-Photos,Not-Travel-Photos}\"\n```\n\n----------------------------------------\n\nTITLE: Help Command Output\nDESCRIPTION: Executes the help command for the OSXPhotos CLI using Python's -m module syntax, showing available options and usage instructions.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/cli.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprogram-output:: python3 -m osxphotos --help\n```\n\n----------------------------------------\n\nTITLE: Using Strip Whitespace Template in osxphotos\nDESCRIPTION: Removes whitespace from the beginning and end of rendered template values, providing cleaner output for further processing or display.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_106\n\nLANGUAGE: plain\nCODE:\n```\n{strip,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Using Delimiters and Expand-In-Place\nDESCRIPTION: Illustrates how to use optional delimiters ('delim') and the expand-in-place '+' modifier to control how multi-valued template fields are rendered.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/template_help.rst#_snippet_1\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{keyword}\nrenders to \"foo\", \"bar\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{,+keyword}\nrenders to: \"foo,bar\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{; +keyword}\nrenders to: \"foo; bar\"\n```\n\nLANGUAGE: OSXPhotos Template\nCODE:\n```\n{+keyword}\nrenders to \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Whitespace Stripping in osxphotos Templates\nDESCRIPTION: This variable removes leading and trailing whitespace from the rendered template value, ensuring clean metadata outputs or command parameters.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_91\n\nLANGUAGE: Python\nCODE:\n```\n{strip,TEMPLATE}\n```\n\n----------------------------------------\n\nTITLE: Running the build script\nDESCRIPTION: This script builds the osxphotos package and executable for distribution. It is only run by the maintainer when releasing a new version.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning a forked repository\nDESCRIPTION: This command clones a forked osxphotos repository from GitHub using Git. It is used when preparing a pull request.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:YOUR_USERNAME/osxphotos.git\n```\n\n----------------------------------------\n\nTITLE: Getting Camera Model from EXIF\nDESCRIPTION: Retrieves the camera model (e.g., 'iPhone 6s') from the original photo's EXIF data as imported by Photos.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_44\n\nLANGUAGE: Template Language\nCODE:\n```\n{exif.camera_model}\n```\n\n----------------------------------------\n\nTITLE: Appending Data to osxphotos Report (Command Line)\nDESCRIPTION: Used in conjunction with --report to add new export data to an existing report file instead of overwriting it. Useful for tracking changes over time. See also --report.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_61\n\nLANGUAGE: Shell\nCODE:\n```\n--append\n```\n\n----------------------------------------\n\nTITLE: Getting Short UUID\nDESCRIPTION: This provides a shorter representation of the photo's internal universally unique identifier (UUID), being a 22-character string.  No parameters needed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_91\n\nLANGUAGE: text\nCODE:\n```\n{shortuuid}                     A shorter representation of photo's internal\n                                universally unique identifier (UUID) for the\n                                photo, a 22-character string unique to the\n                                photo, e.g. 'JYsxugP9UjetmCbBCHXcmu'\n```\n\n----------------------------------------\n\nTITLE: Getting Photo Projects\nDESCRIPTION: Retrieves the name(s) of the project(s) (e.g., slideshows, cards) the photo is part of.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_74\n\nLANGUAGE: Template Language\nCODE:\n```\n{project}\n```\n\n----------------------------------------\n\nTITLE: Adding changes to Git\nDESCRIPTION: This command adds all changed files to the Git staging area, preparing them for commit.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ngit add\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date (ISO Format, explicit)\nDESCRIPTION: Retrieves the current date in standard ISO format (YYYY-MM-DD). Equivalent to {today}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_16\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.date}\n```\n\n----------------------------------------\n\nTITLE: Basic Photo Export Command in OSXPhotos\nDESCRIPTION: The simplest command to export all photos from your Photos library to a specified directory.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.md.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nosxphotos export /path/to/export\n```\n\n----------------------------------------\n\nTITLE: Getting Normalized AI-Detected Image Labels\nDESCRIPTION: Retrieves the lower-case version of the AI-detected image labels ({label}). Requires Photos 5 or later.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_80\n\nLANGUAGE: Template Language\nCODE:\n```\n{label_normalized}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date (ISO Format)\nDESCRIPTION: Retrieves the current date in standard ISO format (YYYY-MM-DD). Equivalent to {today.date}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_15\n\nLANGUAGE: Template Language\nCODE:\n```\n{today}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Month (2-Digit)\nDESCRIPTION: Retrieves the 2-digit, zero-padded month of the current date (e.g., '01', '12').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_19\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.mm}\n```\n\n----------------------------------------\n\nTITLE: Getting Postal Code from Postal Address\nDESCRIPTION: Extracts the postal code component from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_39\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.postal_code}\n```\n\n----------------------------------------\n\nTITLE: Getting City from Postal Address\nDESCRIPTION: Extracts the city component from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_37\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.city}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Day of Month (2-Digit)\nDESCRIPTION: Retrieves the 2-digit, zero-padded day of the month for the current date.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_22\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.dd}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Day of Week Name\nDESCRIPTION: Retrieves the name of the current day of the week according to the user's locale settings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_23\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.dow}\n```\n\n----------------------------------------\n\nTITLE: Getting osxphotos Version\nDESCRIPTION: Retrieves the version number of the osxphotos tool being executed (e.g., '0.69.2').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_70\n\nLANGUAGE: Template Language\nCODE:\n```\n{osxphotos_version}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Month Name\nDESCRIPTION: Retrieves the full name of the current month according to the user's locale settings.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_20\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.month}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Year (2-Digit)\nDESCRIPTION: Retrieves the 2-digit year of the current date.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_18\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.yy}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Carriage Return + Line Feed\nDESCRIPTION: Represents a carriage return followed by a line feed ('\\r\\n').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_68\n\nLANGUAGE: Template Language\nCODE:\n```\n{crlf}\n```\n\n----------------------------------------\n\nTITLE: Extracting Address Components\nDESCRIPTION: These snippets extract various components of the postal address, such as street, city, state/province, postal code, and country. The snippets extract the data and return individual parts of the address. They are dependent on the photo having address information from the reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_86\n\nLANGUAGE: text\nCODE:\n```\n{place.address.street}          Street part of the postal address, e.g.\n                                '2007 18th St NW'\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.address.city}            City part of the postal address, e.g.\n                                'Washington'\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.address.state_province}  State/province part of the postal address,\n                                e.g. 'DC'\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.address.postal_code}     Postal code part of the postal address, e.g.\n                                '20009'\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.address.country}         Country name of the postal address, e.g.\n                                'United States'\n```\n\nLANGUAGE: text\nCODE:\n```\n{place.address.country_code}    ISO country code of the postal address, e.g.\n                                'US'\n```\n\n----------------------------------------\n\nTITLE: Defining PhotosDBDiff Dataclass for Library Comparison (Python)\nDESCRIPTION: Declares the PhotosDBDiff dataclass, used to store the detailed outcomes of comparing two PhotosDB instances. The class holds lists for assets unique to each library, assets that match, and assets that differ, supporting further methods for serialization (dict, JSON, CSV) and boolean testing for any differences. Dependencies include the dataclasses module and the osxphotos PhotosDB and PhotoInfo classes. This is a core result structure for comparisons.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\n@dataclasses.dataclass\nclass PhotosDBDiff:\n    \"\"\"Class to hold differences between two PhotosDB objects\"\"\"\n\n    library_a: PhotosDB\n    library_b: PhotosDB\n    in_a_not_b: list[PhotoInfo]\n    in_b_not_a: list[PhotoInfo]\n    in_both_same: list[tuple[PhotoInfo, PhotoInfo]]\n    in_both_different: list[tuple[PhotoInfo, PhotoInfo, Any]]\n    signature: Callable[[PhotoInfo], Any] = photo_signature\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Database Tables Related to a Photo using PhotoTables in OSXPhotos Python\nDESCRIPTION: The PhotoTables object provides access to database tables containing information related to a photo such as ZASSET, ZADDITIONALASSETATTRIBUTES, ZDETECTEDFACE, and ZPERSON. Each property returns a Table object representing the rows in that table corresponding to the photo. Useful for advanced metadata queries and database introspection within the Photos library database.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nphoto_tables = photo.tables\nzasset_table = photo_tables.ZASSET\nzadditional_table = photo_tables.ZADDITIONALASSETATTRIBUTES\nzdetectedface_table = photo_tables.ZDETECTEDFACE\nzperson_table = photo_tables.ZPERSON\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Brace\nDESCRIPTION: Represents a literal open brace character ('{').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_59\n\nLANGUAGE: Template Language\nCODE:\n```\n{openbrace}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Percent Sign\nDESCRIPTION: Represents a literal percent sign character ('%').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_57\n\nLANGUAGE: Template Language\nCODE:\n```\n{percent}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Question Mark\nDESCRIPTION: Represents a literal question mark character ('?').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_55\n\nLANGUAGE: Template Language\nCODE:\n```\n{questionmark}\n```\n\n----------------------------------------\n\nTITLE: Inserting an Ampersand\nDESCRIPTION: Represents a literal ampersand character ('&').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_58\n\nLANGUAGE: Template Language\nCODE:\n```\n{ampersand}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Line Feed Character\nDESCRIPTION: Represents a line feed character ('\\n'). Alias for {newline}.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_66\n\nLANGUAGE: Template Language\nCODE:\n```\n{lf}\n```\n\n----------------------------------------\n\nTITLE: Adding Skipped Photos to Photos Album (Command Line)\nDESCRIPTION: Adds all photos that were skipped during the export process to the specified Photos album. The album will be created if it does not exist. This requires the Photos library being exported to be the currently open library in the Photos application.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_66\n\nLANGUAGE: Shell\nCODE:\n```\n--add-skipped-to-album ALBUM\n```\n\n----------------------------------------\n\nTITLE: Extracting Moment Title - osxphotos\nDESCRIPTION: This tag retrieves the moment title of the photo.  It depends on the photo being associated with a moment in the Photos application. The output is a string representing the moment title.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_91\n\nLANGUAGE: string\nCODE:\n```\n{moment}\n```\n\n----------------------------------------\n\nTITLE: Accessing Folder Information\nDESCRIPTION: This example demonstrates how to access and traverse folder information using the osxphotos library. It retrieves folder titles, subfolder titles, album titles, and parent folder titles. This requires the osxphotos library.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_50\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> photosdb = osxphotos.PhotosDB()\n>>> photosdb.folder_info\n[<osxphotos.albuminfo.FolderInfo object at 0x10fcc0160>]\n>>> photosdb.folder_info[0].title\n'Folder1'\n>>> photosdb.folder_info[0].subfolders[1].title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].title\n'AlbumInFolder'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.title\n'SubFolder2'\n>>> photosdb.folder_info[0].subfolders[1].album_info[0].parent.album_info[0].title\n'AlbumInFolder'\n```\n\n----------------------------------------\n\nTITLE: Using osxphotos text detection options with confidence thresholds\nDESCRIPTION: This snippet describes the purpose of detecting text in photos using macOS algorithms, including configuration options such as confidence threshold and support limitations. It explains parameters to control the detection process and caching behavior to optimize multiple exports.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_56\n\nLANGUAGE: plaintext\nCODE:\n```\n|{detected_text}|List of text strings found in the image after performing text detection. Using '{detected_text}' will cause osxphotos to perform text detection on your photos using the built-in macOS text detection algorithms which will slow down your export. The results for each photo will be cached in the export database so that future exports with '--update' do not need to reprocess each photo. You may pass a confidence threshold value between 0.0 and 1.0 after a colon as in '{detected_text:0.5}'; The default confidence threshold is 0.75. '{detected_text}' works only on macOS Catalina (10.15) or later. Note: this feature is not the same thing as Live Text in macOS Monterey, which osxphotos does not yet support.|\n```\n\n----------------------------------------\n\nTITLE: Inserting a Comma\nDESCRIPTION: Represents a literal comma character (',').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_53\n\nLANGUAGE: Template Language\nCODE:\n```\n{comma}\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID skip list for osxphotos\nDESCRIPTION: A list of photo UUIDs to be skipped during osxphotos processing. Each UUID is preceded by a comment indicating the associated image file.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/skip_uuid_from_file.txt#_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n# test file for --skip-uuid-from-file\n# wedding.jpg\nE9BC5C36-7CD1-40A1-A72B-8B8FAC227D51\n\n# Tulips.jpg\n 6191423D-8DB8-4D4C-92BE-9BBBA308AAC4 \n```\n\n----------------------------------------\n\nTITLE: Accessing PersonInfo Attributes in OSXPhotos Python\nDESCRIPTION: PersonInfo objects represent people in the Photos library or in a photo. Properties include full name, display name, UUID, key photo for person thumbnail, face count in the library, list of all photos the person appears in, face information sorted by quality, favorite status, sort order in People view. Methods include returning JSON and dictionary representations of the instance data. Requires OSXPhotos and Photos library with recognized faces.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nperson_name = person_info.name\ndisplay_name = person_info.display_name\nperson_uuid = person_info.uuid\nkey_photo = person_info.keyphoto\nface_count = person_info.facecount\nperson_photos = person_info.photos\nface_info_list = person_info.face_info\nis_favorite = person_info.favorite\nsort_order = person_info.sort_order\nperson_json = person_info.json()\nperson_dict = person_info.asdict()\n```\n\n----------------------------------------\n\nTITLE: Accessing exiftool path in osxphotos\nDESCRIPTION: Shows how to check if exiftool is installed and accessible in the system path using the osxphotos.exiftool.get_exiftool_path() function.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_39\n\nLANGUAGE: pycon\nCODE:\n```\n>>> import osxphotos\n>>> osxphotos.exiftool.get_exiftool_path()\n'/usr/local/bin/exiftool'\n>>>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Photos Version\nDESCRIPTION: This snippet retrieves the version number of the Photos application that created the library. It requires a pre-existing `PhotosDB` object. The returned value is an integer. The return values are e.g. 2, 3, 4, 5...\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nphotosdb.photos_version\n```\n\n----------------------------------------\n\nTITLE: Overview of osxphotos export options and ExportResults class\nDESCRIPTION: This section describes the various export options available in osxphotos, including metadata and file handling parameters, as well as the ExportResults class that summarizes the outcome of an export operation, such as exported files, metadata changes, and sidecars.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_53\n\n\n\n----------------------------------------\n\nTITLE: Viewing Export Help Text - osxphotos CLI\nDESCRIPTION: Provides the command to display the help text for the `osxphotos export` command. This help text describes available options, including categories for the `--post-command` option.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/tutorial.rst.txt#_snippet_45\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos help export\n```\n\n----------------------------------------\n\nTITLE: Extracting ID - osxphotos\nDESCRIPTION: This tag retrieves a unique number for the photo based on its primary key in the Photos database, a sequential integer.  Can be formatted using a python string format code, such as '{id:05d}'.  Each asset associated with a photo will share the same ID. The output is an integer, optionally formatted as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_94\n\nLANGUAGE: string\nCODE:\n```\n{id}\n```\n\n----------------------------------------\n\nTITLE: Extracting Activity - osxphotos\nDESCRIPTION: This tag extracts activities associated with a photo (e.g., 'Sporting Event'). Requires Photos 5+ and that Photos' image categorization algorithms have assigned activities. The output is a string of the associated activities.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_129\n\nLANGUAGE: string\nCODE:\n```\n{searchinfo.activity}\n```\n\n----------------------------------------\n\nTITLE: Extracting Camera Make - osxphotos\nDESCRIPTION: This tag extracts the camera make from the original photo's EXIF information as imported by Photos.  Requires EXIF data to be present in the photo. The output is a string representing the camera make, e.g., 'Apple'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_88\n\nLANGUAGE: string\nCODE:\n```\n{exif.camera_make}\n```\n\n----------------------------------------\n\nTITLE: Getting Country Name from Postal Address\nDESCRIPTION: Extracts the country name from the photo's reverse geolocated postal address.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_40\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.address.country}\n```\n\n----------------------------------------\n\nTITLE: Getting Country Name from Reverse Geolocation\nDESCRIPTION: Retrieves the full country name from the photo's reverse geolocation data.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_31\n\nLANGUAGE: Template Language\nCODE:\n```\n{place.name.country}\n```\n\n----------------------------------------\n\nTITLE: Extracting Day of Year - osxphotos\nDESCRIPTION: This tag extracts the 3-digit day of the year (Julian day) of the current date from a photo, starting from 1 and padded with zeros. It doesn't require any specific dependencies but relies on the availability of date information within the photo's metadata. The output is a string representing the day of the year.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_69\n\nLANGUAGE: string\nCODE:\n```\n{today.doy}\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Database Path (Python)\nDESCRIPTION: Retrieves the filesystem path to the SQLite database file within the Photos library bundle that PhotosDB is interacting with. Requires an initialized PhotosDB object. Returns the path to the database file as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_path\n```\n\n----------------------------------------\n\nTITLE: Getting Moment Title\nDESCRIPTION: This snippet retrieves the moment title of the photo. This simply returns the moment title.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_89\n\nLANGUAGE: text\nCODE:\n```\n{moment}                        The moment title of the photo\n```\n\n----------------------------------------\n\nTITLE: Displaying General Help for osxphotos Command Line\nDESCRIPTION: This snippet shows the standard help output for the `osxphotos` command-line utility. It lists the general usage syntax, explains how to get help for specific commands, and provides a list of all available commands.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: osxphotos [OPTIONS] COMMAND [ARGS]...\n\n  OSXPhotos: the multi-tool for your Photos library.\n\n  To get help on a specific command, use \"osxphotos COMMAND --help\" or\n  \"osxphotos help COMMAND\"; for example, \"osxphotos help export\".\n\n  To search help for a specific topic within a command, run \"osxphotos help\n  COMMAND TOPIC\"; for example, \"osxphotos help export keyword\" to get help\n  related to keywords when using the export command.\n\n  To see the full documentation in your browser, run \"osxphotos docs\".\n\n  Some advanced commands are hidden by default. To see all commands, run\n  \"OSXPHOTOS_SHOW_HIDDEN=1 osxphotos help\". Some commands also have hidden\n  options. These can be seen by running \"OSXPHOTOS_SHOW_HIDDEN=1 osxphotos help\n  COMMAND\".\n\nOptions:\n  -v, --version  Show the version and exit.\n  -h, --help     Show this message and exit.\n\nCommands:\n  about          Print information about osxphotos including license.\n  add-locations  Add missing location data to photos in Photos.app using...\n  albums         Print out albums found in the Photos library.\n  batch-edit     Batch edit photo metadata such as title, description,...\n  compare        Compare two Photos libraries to find differences\n  docs           Open osxphotos documentation in your browser.\n  dump           Print list of all photos & associated info from the Photos...\n  exiftool       Run exiftool on previously exported files to update metadata.\n  export         Export photos from the Photos database.\n  exportdb       Utilities for working with the osxphotos export database\n  help           Print help; for help on commands: help <command>.\n  import         Import photos and videos into Photos.\n  info           Print out descriptive info of the Photos library database.\n  inspect        Interactively inspect photos selected in Photos.\n  install        Install Python packages into the same environment as...\n  keywords       Print out keywords found in the Photos library.\n  labels         Print out image classification labels found in the Photos...\n  list           Print list of Photos libraries found on the system.\n  orphans        Find orphaned photos in a Photos library\n  persons        Print out persons (faces) found in the Photos library.\n  places         Print out places found in the Photos library.\n  push-exif      Write photo metadata to original files in the Photos library\n  query          Query the Photos database using 1 or more search options;...\n  repl           Run interactive osxphotos REPL shell (useful for...\n  run            Run a python file using same environment as osxphotos.\n  show           Show photo, album, or folder in Photos from UUID_OR_NAME\n  sync           Sync metadata and albums between Photos libraries.\n  template       Interactively render templates for selected photo.\n  theme          Manage osxphotos color themes.\n  timewarp       Adjust date/time/timezone of photos in Apple Photos.\n  tutorial       Display osxphotos tutorial.\n  uninstall      Uninstall Python packages from the osxphotos environment\n  update         Update the installation to the latest version.\n  uuid           Print out unique IDs (UUID) of photos selected in Photos\n  version        Check for new version of osxphotos.\n\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a virtual environment\nDESCRIPTION: These commands create a Python virtual environment and activate it.  This isolates the project's dependencies from the system's Python installation. The example references pyenv for managing virtual environments.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m venv venv\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Up osxphotos Development Environment (Shell)\nDESCRIPTION: Sequence of shell commands to clone the osxphotos repository, create and activate a Python virtual environment, and install development dependencies and the package itself in editable mode. Requires git and Python 3.7+ to be installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:RhetTbull/osxphotos.git\ncd osxphotos\npython3 -m venv venv\nsource venv/bin/activate\npython3 -m pip install -r dev_requirements.txt\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Extracting Normalized Image Label - osxphotos\nDESCRIPTION: This tag retrieves the all lowercase version of the image categorization label (Photos 5+ only). Requires an image categorization label assigned to the photo. The output is a lowercase string of the label.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_125\n\nLANGUAGE: string\nCODE:\n```\n{label_normalized}\n```\n\n----------------------------------------\n\nTITLE: Extracting Album Sequence Number - osxphotos\nDESCRIPTION: This tag returns an integer, starting at 0, indicating the photo's index (sequence) in the containing album.  Only valid when used in a '--filename' template and only when '{album}' or '{folder_album}' is used in the '--directory' template. Can be formatted using a python string format code.  The output is an integer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_96\n\nLANGUAGE: string\nCODE:\n```\n{album_seq}\n```\n\n----------------------------------------\n\nTITLE: Exporting Image with Embedded Exiftool Metadata (Shell)\nDESCRIPTION: Exports selected photos to the Desktop/export directory using the `osxphotos export` command, embedding metadata directly into the image files using exiftool via the `--exiftool` flag. Used for testing face region metadata embedding.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/export --selected --exiftool\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query (PhotosDB) - Python\nDESCRIPTION: Shows how to obtain a direct SQLite database connection and cursor from a `PhotosDB` object using `get_db_connection()`. The snippet demonstrates executing a raw SQL query (finding favorited assets by UUID) and iterating through the results, finally closing the connection. Useful for debugging or accessing data not exposed by the library's API. Requires an initialized `osxphotos.PhotosDB` object. Returns a tuple (connection, cursor).\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nphotosdb = osxphotos.PhotosDB()\nconn, cursor = photosdb.get_db_connection()\n\nresults = conn.execute(\n        \"SELECT ZUUID FROM ZGENERICASSET WHERE ZFAVORITE = 1;\"\n).fetchall()\n\nfor row in results:\n    # do something\n    pass\n\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Accessing Photos Database Version (Python)\nDESCRIPTION: Retrieves the internal version number for the Photos library's SQLite database schema. This is primarily for debugging or checking compatibility. Requires an initialized PhotosDB object. A warning is logged if the version hasn't been tested.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docsrc/source/API_README.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_version\n```\n\n----------------------------------------\n\nTITLE: Retrieving Library Path\nDESCRIPTION: This snippet retrieves the file path to the Photos library. It requires a pre-existing `PhotosDB` object. The function returns the path as a string.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/API_README.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nphotosdb.library_path\n```\n\n----------------------------------------\n\nTITLE: Extracting Folder Album Sequence Number - osxphotos\nDESCRIPTION: This tag returns an integer, starting at 0, indicating the photo's index (sequence) in the containing album and folder path. Only valid in '--filename' and when '{folder_album}' is used in '--directory'.  May use Python string formatting. The output is an integer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_97\n\nLANGUAGE: string\nCODE:\n```\n{folder_album_seq}\n```\n\n----------------------------------------\n\nTITLE: Exporting Image with JSON Sidecar (Shell)\nDESCRIPTION: Exports selected photos using `osxphotos export`, creating separate JSON sidecar files (`--sidecar json`) containing metadata. Used for testing face region metadata in JSON sidecars.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nosxphotos export ~/Desktop/export --selected --sidecar json\n```\n\n----------------------------------------\n\nTITLE: Getting Current Minute (2-Digit)\nDESCRIPTION: Retrieves the 2-digit minute of the current time.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_26\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.min}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Version (PhotosDB) - Python\nDESCRIPTION: Demonstrates accessing the `db_version` property of a `PhotosDB` object. This property returns the version number of the Photos database file being used. Requires an initialized `PhotosDB` object. Returns an integer.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n# assumes photosdb is a PhotosDB object (see above)\nphotosdb.db_version\n```\n\n----------------------------------------\n\nTITLE: Post Command Example Result: Quoted File Path Output\nDESCRIPTION: This snippet illustrates the output of the post-command example when '{filepath}' is 'IMG 1234.jpeg' and '{export_dir}' is '/Volumes/Photo Export'. It demonstrates how the 'shell_quote' filter ensures proper quoting of paths passed to the shell command.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README.md#_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\necho 'IMG 1234.jpeg' >> '/Volumes/Photo Export/exported.txt'\n```\n\n----------------------------------------\n\nTITLE: Inserting a Pipe - osxphotos\nDESCRIPTION: This tag inserts a vertical pipe character into the output. It has no dependencies.  The output is a vertical pipe: '|'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_101\n\nLANGUAGE: string\nCODE:\n```\n{pipe}\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs in osxphotos Templates\nDESCRIPTION: Shows how to include a literal percent sign `%` in the output. Use `%%` for simple escaping within the template string or find/replace patterns. Use the `{percent}` template field where a template field is required, such as within the true/false values of a conditional operation.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_14\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n%%\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{percent}\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{title[:,%%]} (replaces ':' with '%')\n```\n\nLANGUAGE: osxphotos-template\nCODE:\n```\n{title contains Foo?{title}{percent},{title}} (appends '%' if title contains 'Foo')\n```\n\n----------------------------------------\n\nTITLE: Getting Current Second (2-Digit)\nDESCRIPTION: Retrieves the 2-digit second of the current time.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_27\n\nLANGUAGE: Template Language\nCODE:\n```\n{today.sec}\n```\n\n----------------------------------------\n\nTITLE: Running Interactive osxphotos Tests with Pytest Flags (Shell)\nDESCRIPTION: Shows examples of running specific interactive tests using custom pytest flags. Each flag targets a particular feature like adding albums (`--addalbum`), timewarp (`--timewarp`), photo dates (`--photodates`), import (`--test-import`), sync (`--test-sync`), adding locations (`--test-add-locations`), or batch editing (`--test-batch-edit`). These tests may require specific library configurations and often need to be run individually.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n# Example for --addalbum\npytest -vv tests/test_photosalbum_unicode.py tests/test_cli_add_to_album.py --addalbum\n\n# Example for --timewarp\npytest -vv --timewarp tests/test_cli_timewarp.py tests/test_photodates.py\n\n# Example for --photodates\npytest -vv --photodates tests/test_photodates.py\n\n# Example for --test-import\npytest -vv --test-import tests/test_cli_import.py\n\n# Example for --test-sync\npytest -vv --test-sync tests/test_cli_sync.py\n\n# Example for --test-add-locations\npytest -vv --test-add-locations tests/test_cli_add_locations.py\n\n# Example for --test-batch-edit\npytest -vv --test-batch-edit -k batch\n```\n\n----------------------------------------\n\nTITLE: Inserting Carriage Return and Line Feed - osxphotos\nDESCRIPTION: This tag inserts a carriage return followed by a line feed into the output.  It has no dependencies. The output is a carriage return and line feed: '\\r\\n'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_113\n\nLANGUAGE: string\nCODE:\n```\n{crlf}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Carriage Return - osxphotos\nDESCRIPTION: This tag inserts a carriage return character into the output.  It has no dependencies. The output is a carriage return: '\\r'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_112\n\nLANGUAGE: string\nCODE:\n```\n{cr}\n```\n\n----------------------------------------\n\nTITLE: Extracting osxphotos Command Line - osxphotos\nDESCRIPTION: This tag inserts the full command line used to run osxphotos into the output. It provides context on how the application was invoked. The output is a string containing the command line used.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_116\n\nLANGUAGE: string\nCODE:\n```\n{osxphotos_cmd_line}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Carriage Return Character\nDESCRIPTION: Represents a carriage return character ('\\r').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_67\n\nLANGUAGE: Template Language\nCODE:\n```\n{cr}\n```\n\n----------------------------------------\n\nTITLE: Formatting code with Black\nDESCRIPTION: This command formats the Python code using Black. It ensures consistent code style across the project.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nblack .\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Bracket - osxphotos\nDESCRIPTION: This tag inserts an open bracket into the output.  It has no dependencies. The output is an open bracket: '['.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_108\n\nLANGUAGE: string\nCODE:\n```\n{openbracket}\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Parenthesis\nDESCRIPTION: Represents a literal open parenthesis character ('(').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_61\n\nLANGUAGE: Template Language\nCODE:\n```\n{openparens}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Comma - osxphotos\nDESCRIPTION: This tag inserts a comma character into the output. It has no dependencies. The output is a comma: ','.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_98\n\nLANGUAGE: string\nCODE:\n```\n{comma}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Bracket\nDESCRIPTION: Represents a literal close bracket character (']').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_64\n\nLANGUAGE: Template Language\nCODE:\n```\n{closebracket}\n```\n\n----------------------------------------\n\nTITLE: Extracting osxphotos Version - osxphotos\nDESCRIPTION: This tag inserts the osxphotos version into the output.  It has no dependencies. The output is a string representing the osxphotos version, e.g., '0.69.2'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_115\n\nLANGUAGE: string\nCODE:\n```\n{osxphotos_version}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Brace\nDESCRIPTION: Represents a literal close brace character ('}').\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/template_help.rst.txt#_snippet_60\n\nLANGUAGE: Template Language\nCODE:\n```\n{closebrace}\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to a Git fork\nDESCRIPTION: This command pushes the local branch to the remote fork on GitHub, allowing others to review the changes.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin my_branch\n```\n\n----------------------------------------\n\nTITLE: Installing Python requirements\nDESCRIPTION: This command installs the Python dependencies listed in the `requirements.txt` file. It ensures that all necessary packages for running the project are installed.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Example Date Fields in iPhoto Test Data (Python)\nDESCRIPTION: An illustrative Python snippet showing example date fields (`date`, `date_added`, `date_modified`) within the `iphoto_test_data.json` file. This highlights data that might need manual adjustment after generation to ensure test consistency.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n\"date\": \"2020-04-12T03:30:23+00:00\",\n\"date_added\": \"2023-09-27T06:43:07.850189+00:00\",\n\"date_modified\": \"2023-09-27T06:43:07.885464+00:00\",\n```\n\n----------------------------------------\n\nTITLE: Inserting an Open Brace - osxphotos\nDESCRIPTION: This tag inserts an open brace into the output. It has no dependencies. The output is an open brace: '{'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_104\n\nLANGUAGE: string\nCODE:\n```\n{openbrace}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Close Bracket - osxphotos\nDESCRIPTION: This tag inserts a close bracket into the output.  It has no dependencies. The output is a close bracket: ']'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_109\n\nLANGUAGE: string\nCODE:\n```\n{closebracket}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Semicolon - osxphotos\nDESCRIPTION: This tag inserts a semicolon character into the output.  It has no dependencies. The output is a semicolon: ';'.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/docs/_sources/API_README.rst.txt#_snippet_99\n\nLANGUAGE: string\nCODE:\n```\n{semicolon}\n```\n\n----------------------------------------\n\nTITLE: Cloning the osxphotos repository\nDESCRIPTION: This command clones the osxphotos repository from GitHub using Git. It is the first step in setting up a local development environment.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:RhetTbull/osxphotos.git\n```\n\n----------------------------------------\n\nTITLE: Running All osxphotos Tests (Shell)\nDESCRIPTION: Executes the entire osxphotos test suite using pytest from the main source folder. Assumes the development environment is set up and activated.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npython3 -m pytest tests/\n```\n\n----------------------------------------\n\nTITLE: Committing changes to Git\nDESCRIPTION: This command commits the staged changes to the local Git repository with a descriptive message.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/README_DEV.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -m \"My changes description\"\n```\n\n----------------------------------------\n\nTITLE: Generating Sidecar Test Data (Shell)\nDESCRIPTION: Executes the `generate_sidecars_for_test.py` script using Python 3 to create sidecar files in the `tests/sidecars` directory. These files are used as test fixtures for various sidecar-related tests.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\npython3 tests/generate_sidecars_for_test.py\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Cog Directive\nDESCRIPTION: An HTML comment containing a cog directive that would typically be used for code generation. Cog is a code generation tool that processes special comments to insert generated content.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/phototemplate.cog.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--[[[cog\n```\n\n----------------------------------------\n\nTITLE: Generating Search Info Test Data (Shell)\nDESCRIPTION: Runs a Python script (`generate_search_info_test_data.py`) to generate test data based on the author's personal library and redirects the output to a JSON file. This data is used for specific search_info tests.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/tests/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\npython3 tests/generate_search_info_test_data.py >tests/search_info_test_data_10_15_7.json\n```\n\n----------------------------------------\n\nTITLE: Building libdisclaim_x86_64.dylib Library with clang on Intel Mac (Bash)\nDESCRIPTION: This Bash command compiles the `disclaim.cpp` source file into a shared dynamic library (`libdisclaim_x86_64.dylib`) targeting Intel Mac architectures. It uses clang with the `-shared` flag to build a dynamic library and sets the minimum supported macOS version to 10.12 using `-mmacosx-version-min=10.12`. The output file is placed in the `osxphotos/lib/` directory. This binary is loaded by the `disclaim.py` module in osxphotos to enable internal permission handling for photo library access.\nSOURCE: https://github.com/rhettbull/osxphotos/blob/main/osxphotos/lib/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nclang -shared -mmacosx-version-min=10.12 disclaim.cpp -o osxphotos/lib/libdisclaim_x86_64.dylib\n```"
  }
]