[
  {
    "owner": "dfki-ric",
    "repo": "pytransform3d",
    "content": "TITLE: Defining Transformation Matrix in Python with NumPy\nDESCRIPTION: Demonstrates how a 4x4 transformation matrix is represented in pytransform3d using a NumPy array. The matrix combines a 3x3 rotation matrix R and a translation vector t.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nT = np.array([\n    [r11, r12, r13, t1],\n    [r21, r22, r23, t2],\n    [r31, r32, r33, t3],\n    [0,   0,   0,   1]\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Transform Manager Usage in Python\nDESCRIPTION: Demonstrates how to use TransformManager to add and compute transformations between different coordinate frames.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transform_manager.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntm.add_transform(\"object\", \"camera\", object_to_camera)\ntm.add_transform(\"camera\", \"robot\", camera_to_robot)\ntm.add_transform(\"robot\", \"ee\", robot_to_ee)\ntm.get_transform(\"object\", \"ee\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Basic Rotation Matrix Basis Vectors in pytransform3d\nDESCRIPTION: This code snippet demonstrates how to visualize the basis vectors of the identity rotation matrix using pytransform3d's plot_basis function. This creates a 3D visualization with the standard x (red), y (green), and z (blue) axes.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pytransform3d.rotations import plot_basis\nplot_basis()\n```\n\n----------------------------------------\n\nTITLE: Concatenating Transformations in pytransform3d\nDESCRIPTION: Demonstrates how to concatenate transformations from frame A to B and from B to C to create a transformation from A to C. The function concat() properly applies the transformations in the correct sequence.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_modeling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pytransform3d.transformations import concat\nA2B = ...  # transformation from frame A to frame B\nB2C = ...  # transformation from frame B to frame C\nA2C = concat(A2B, B2C)\n```\n\n----------------------------------------\n\nTITLE: Transforming Points Between Coordinate Frames with pytransform3d\nDESCRIPTION: Shows how to transform a point from one coordinate frame to another using the transformation matrix. Uses vector_to_point() to convert a vector to a point and transform() to apply the transformation.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_modeling.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pytransform3d.transformations import vector_to_point, transform\np_in_A = vector_to_point(...)  # point in frame A\np_in_C = transform(A2C, p_in_A)\n```\n\n----------------------------------------\n\nTITLE: Defining Axis-Angle Representation in Python\nDESCRIPTION: Demonstrates how pytransform3d represents an axis-angle rotation using a numpy array of shape (4,), where the first 3 entries are the unit axis of rotation and the fourth is the rotation angle in radians.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na = np.array([omega_x, omega_y, omega_z, theta])\n```\n\n----------------------------------------\n\nTITLE: Preparing Transformation Sequences with NumpyTimeseriesTransform in Python\nDESCRIPTION: This snippet demonstrates how to create transformation sequences using the NumpyTimeseriesTransform class. It sets up two sequences (A and B) with timestamps and transformation matrices, using screw linear interpolation (ScLERP) for interpolation between samples.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_over_time.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nt = np.linspace(0, 1, 10)\nA = np.array([np.eye(4) for _ in range(10)])\nB = np.array([np.eye(4) for _ in range(10)])\nA[:, 0, 3] = np.linspace(0, 1, 10)\nB[:, 1, 3] = np.linspace(0, 1, 10)\n\nsequence_A = NumpyTimeseriesTransform(\n    t, A, \"world\", \"A\", interpolation_method=\"slerp\")\nsequence_B = NumpyTimeseriesTransform(\n    t, B, \"world\", \"B\", interpolation_method=\"slerp\")\n```\n\n----------------------------------------\n\nTITLE: Defining Quaternion Representation in Python\nDESCRIPTION: Illustrates how pytransform3d represents a quaternion using a numpy array of shape (4,), with the scalar component w as the first element.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nq = np.array([w, x, y, z])\n```\n\n----------------------------------------\n\nTITLE: Defining Euler Angles Representation in Python\nDESCRIPTION: Shows how pytransform3d represents Euler angles using a numpy array of shape (3,), where each entry corresponds to a rotation angle in radians around one basis vector.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\neuler_angles = np.array([angle1, angle2, angle3])\n```\n\n----------------------------------------\n\nTITLE: Representing Position and Quaternion in Python\nDESCRIPTION: Shows how a 7-dimensional vector combining position (x, y, z) and quaternion (qw, qx, qy, qz) is represented in pytransform3d using a NumPy array.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npq = np.array([x, y, z, q_w, q_x, q_y, q_z])\n```\n\n----------------------------------------\n\nTITLE: Visualizing 3D Transformations with pytransform3d in Python\nDESCRIPTION: This example demonstrates how to visualize 3D transformations using pytransform3d. It creates a coordinate frame and applies a rotation to it, then plots the original and transformed frames.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/examples/plots/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.rotations import matrix_from_axis_angle\nfrom pytransform3d.transformations import transform_from\nfrom pytransform3d.plot_utils import make_3d_axis, plot_transform\n\nax = make_3d_axis(ax_s=1)\nR = matrix_from_axis_angle([0, 0, 1], np.pi / 2)\nA2B = transform_from(R, [1, 0, 0])\nplot_transform(ax, A2B, s=0.3)\nplot_transform(ax, np.eye(4), s=0.3)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Transforming Between Coordinate Systems at Specific Time in Python\nDESCRIPTION: This snippet demonstrates how to use the TemporalTransformManager to transform coordinates between different systems at a specific time. It transforms the origin of frame A to frame B at time t_q, and calculates the position of A's origin in B's coordinate system.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_over_time.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nt_q = 0.5\nA2B = tm.get_transform(\"A\", \"B\", t_q)\norigin_in_A = np.array([0, 0, 0, 1])\norigin_of_A_in_B = A2B.dot(origin_in_A)\nprint(f\"A's origin in B's coordinate system at t={t_q}: {origin_of_A_in_B[:3]}\")\n```\n\n----------------------------------------\n\nTITLE: Defining and Visualizing a 3D Active Transformation Matrix in Python\nDESCRIPTION: Creates a transformation matrix with x-y translation and z-rotation, then demonstrates the active transformation view by transforming a set of 3D points and visualizing both the original and transformed points along with their respective coordinate frames.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_ambiguities.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.transformations import transform, plot_transform\nfrom pytransform3d.plot_utils import make_3d_axis, Arrow3D\n\n\nplt.figure()\nax = make_3d_axis(1)\nplt.setp(ax, xlim=(-1.05, 1.05), ylim=(-0.55, 1.55), zlim=(-1.05, 1.05),\n            xlabel=\"X\", ylabel=\"Y\", zlabel=\"Z\")\nax.view_init(elev=90, azim=-90)\nax.set_xticks(())\nax.set_yticks(())\nax.set_zticks(())\n\nrng = np.random.default_rng(42)\nPA = np.ones((10, 4))\nPA[:, :3] = 0.1 * rng.standard_normal(size=(10, 3))\nPA[:, 0] += 0.3\nPA[:, :3] += 0.3\n\nx_translation = -0.1\ny_translation = 0.2\nz_rotation = np.pi / 4.0\nA2B = np.array([\n    [np.cos(z_rotation), -np.sin(z_rotation), 0.0, x_translation],\n    [np.sin(z_rotation), np.cos(z_rotation), 0.0, y_translation],\n    [0.0, 0.0, 1.0, 0.0],\n    [0.0, 0.0, 0.0, 1.0]\n])\nPB = transform(A2B, PA)\n\nplot_transform(ax=ax, A2B=np.eye(4))\nax.scatter(PA[:, 0], PA[:, 1], PA[:, 2], c=\"orange\")\nplot_transform(ax=ax, A2B=A2B, ls=\"--\", alpha=0.5)\nax.scatter(PB[:, 0], PB[:, 1], PB[:, 2], c=\"cyan\")\n\naxis_arrow = Arrow3D(\n    [0.7, 0.3],\n    [0.4, 0.9],\n    [0.2, 0.2],\n    mutation_scale=20, lw=3, arrowstyle=\"-|>\", color=\"k\")\nax.add_artist(axis_arrow)\n\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining and Visualizing a 3D Passive Transformation Matrix in Python\nDESCRIPTION: Creates a transformation matrix with x-y translation and z-rotation, then demonstrates the passive transformation view where the coordinate system is transformed while the points remain stationary in their original positions.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_ambiguities.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import proj3d\nfrom pytransform3d.transformations import transform, plot_transform\nfrom pytransform3d.plot_utils import make_3d_axis, Arrow3D\n\n\nplt.figure()\nax = make_3d_axis(1)\nplt.setp(ax, xlim=(-1.05, 1.05), ylim=(-0.55, 1.55), zlim=(-1.05, 1.05),\n            xlabel=\"X\", ylabel=\"Y\", zlabel=\"Z\")\nax.view_init(elev=90, azim=-90)\nax.set_xticks(())\nax.set_yticks(())\nax.set_zticks(())\n\nrng = np.random.default_rng(42)\nPA = np.ones((10, 4))\nPA[:, :3] = 0.1 * rng.standard_normal(size=(10, 3))\nPA[:, 0] += 0.3\nPA[:, :3] += 0.3\n\nx_translation = -0.1\ny_translation = 0.2\nz_rotation = np.pi / 4.0\nA2B = np.array([\n    [np.cos(z_rotation), -np.sin(z_rotation), 0.0, x_translation],\n    [np.sin(z_rotation), np.cos(z_rotation), 0.0, y_translation],\n    [0.0, 0.0, 1.0, 0.0],\n    [0.0, 0.0, 0.0, 1.0]\n])\n\nplot_transform(ax=ax, A2B=np.eye(4), ls=\"--\", alpha=0.5)\nax.scatter(PA[:, 0], PA[:, 1], PA[:, 2], c=\"orange\")\nplot_transform(ax=ax, A2B=A2B)\n\naxis_arrow = Arrow3D(\n    [0.0, -0.1],\n    [0.0, 0.2],\n    [0.2, 0.2],\n    mutation_scale=20, lw=3, arrowstyle=\"-|>\", color=\"k\")\nax.add_artist(axis_arrow)\n\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Compact Axis-Angle (Rotation Vector) in Python\nDESCRIPTION: Shows how pytransform3d represents a compact axis-angle or rotation vector using a numpy array of shape (3,).\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\na = np.array([omega_x * theta, omega_y * theta, omega_z * theta])\n```\n\n----------------------------------------\n\nTITLE: Representing Screw Axis as 6D Vector in Python\nDESCRIPTION: Shows how a screw axis is represented as a 6-dimensional vector in pytransform3d using a NumPy array, combining angular velocity ω and linear velocity v.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nS = np.array([ω1, ω2, ω3, v1, v2, v3])\n```\n\n----------------------------------------\n\nTITLE: Initializing TemporalTransformManager with Transformation Sequences in Python\nDESCRIPTION: This code snippet shows how to create an instance of TemporalTransformManager and add the previously prepared transformation sequences to it. This sets up the manager for handling time-dependent transformations between coordinate frames.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_over_time.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntm = TemporalTransformManager()\ntm.add_transform(sequence_A)\ntm.add_transform(sequence_B)\n```\n\n----------------------------------------\n\nTITLE: Defining Screw Axis Parameters in Python\nDESCRIPTION: Illustrates how screw axis parameters are represented in pytransform3d using two vectors q and s_axis of shape (3,) and a scalar h for pitch.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nq = np.array([q1, q2, q3])  # point vector\ns_axis = np.array([s1, s2, s3])  # direction vector\nh = pitch  # scalar pitch\n```\n\n----------------------------------------\n\nTITLE: Initializing Matplotlib Figure with pytransform3d in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Matplotlib figure using pytransform3d. It sets up a 3D axis and adds a scatter plot to visualize points in 3D space.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/examples/plots/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.plot_utils import make_3d_axis\n\nax = make_3d_axis(ax_s=1)\nax.scatter(np.random.rand(10), np.random.rand(10), np.random.rand(10))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with pytransform3d in Python\nDESCRIPTION: This code snippet shows how to create a line plot using pytransform3d. It generates a spiral-like curve in 3D space and plots it using Matplotlib.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/examples/plots/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.plot_utils import make_3d_axis\n\nax = make_3d_axis(ax_s=1)\nt = np.linspace(0, 10, 100)\nx = t * np.cos(t)\ny = t * np.sin(t)\nz = t\nax.plot(x, y, z)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Exporting Transform Graph to PNG\nDESCRIPTION: Shows how to export the transformation graph structure to a PNG file using the TransformManager.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transform_manager.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntm.write_png(filename)\n```\n\n----------------------------------------\n\nTITLE: Mathematical Expression for Proper Euler Angles Equivalence\nDESCRIPTION: Mathematical formula showing equivalent rotation representations for proper Euler angles using angles α, β, and γ.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/euler_angles.rst#2025-04-22_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\boldsymbol{R}(\\alpha, \\beta, \\gamma) = \\boldsymbol{R}(\\alpha + \\pi, -\\beta, \\gamma - \\pi)\n```\n\n----------------------------------------\n\nTITLE: Mathematical Expression for Cardan Angles Equivalence\nDESCRIPTION: Mathematical formula showing equivalent rotation representations for Cardan angles using angles α, β, and γ.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/euler_angles.rst#2025-04-22_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\boldsymbol{R}(\\alpha, \\beta, \\gamma) = \\boldsymbol{R}(\\alpha + \\pi, \\pi - \\beta, \\gamma - \\pi)\n```\n\n----------------------------------------\n\nTITLE: Defining Rotor Representation in Python\nDESCRIPTION: Demonstrates how a rotor, consisting of a scalar and a bivector, can be represented as a unit multivector in pytransform3d.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nR = np.array([a, b_yz, b_zx, b_xy])\n```\n\n----------------------------------------\n\nTITLE: Converting Quaternions to Modified Rodrigues Parameters\nDESCRIPTION: Mathematical formula showing how to convert a unit quaternion with scalar w and vector components (x, y, z) to Modified Rodrigues Parameters (MRP).\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/rotations.rst#2025-04-22_snippet_6\n\nLANGUAGE: math\nCODE:\n```\n\\boldsymbol{\\psi} = \\frac{\\left( \\begin{array}{c} x\\\\ y\\\\ z\\\\ \\end{array} \\right)}{1 + w}\n```\n\n----------------------------------------\n\nTITLE: Range Constraints for Proper Euler Angles\nDESCRIPTION: Mathematical expression defining the valid ranges for proper Euler angles to ensure unique representations.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/euler_angles.rst#2025-04-22_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n-\\pi \\leq \\alpha < \\pi, \\qquad 0 \\leq \\beta \\leq \\pi, \\qquad -\\pi \\leq \\gamma < \\pi\n```\n\n----------------------------------------\n\nTITLE: Range Constraints for Cardan Angles\nDESCRIPTION: Mathematical expression defining the valid ranges for Cardan angles to ensure unique representations.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/euler_angles.rst#2025-04-22_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n-\\pi \\leq \\alpha < \\pi, \\qquad -\\frac{\\pi}{2} \\leq \\beta \\leq \\frac{\\pi}{2}, \\qquad -\\pi \\leq \\gamma < \\pi\n```\n\n----------------------------------------\n\nTITLE: Mathematical Representation of Camera Intrinsic Matrix\nDESCRIPTION: The intrinsic camera parameters matrix formula showing focal lengths (fx, fy) and camera center position (cx, cy). This matrix is used to project 3D points to 2D image coordinates.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/camera.rst#2025-04-22_snippet_0\n\nLANGUAGE: mathematics\nCODE:\n```\n\\left( \\begin{array}{ccc}\nf_x & 0 & c_x\\\\\n0 & f_y & c_y\\\\\n0 & 0 & 1\n\\end{array} \\right)\n```\n\n----------------------------------------\n\nTITLE: Screw Axis Mathematical Representation\nDESCRIPTION: Mathematical formula showing the structure of a screw axis S combining orientation vector s and position vector q with parameter h.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_4\n\nLANGUAGE: math\nCODE:\n```\n\\mathcal{S} = \\left[ \\begin{array}{c}\\hat{\\boldsymbol{s}} \\\\ \\boldsymbol{q} \\times \\hat{\\boldsymbol{s}} + h \\hat{\\boldsymbol{s}}\\end{array} \\right]\n```\n\n----------------------------------------\n\nTITLE: Screw Matrix Representation\nDESCRIPTION: Mathematical definition of a screw matrix in se(3) showing the cross-product matrix of orientation and translation components.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_5\n\nLANGUAGE: math\nCODE:\n```\n\\left[\\mathcal S\\right] = \\left( \\begin{array}{cc} \\left[\\boldsymbol{\\omega}\\right] & \\boldsymbol v\\\\ \\boldsymbol 0 & 0\\\\ \\end{array} \\right) = \\left( \\begin{matrix} 0 & -\\omega_3 & \\omega_2 & v_1\\\\ \\omega_3 & 0 & -\\omega_1 & v_2\\\\ -\\omega_2 & \\omega_1 & 0 & v_3\\\\ 0 & 0 & 0 & 0\\\\ \\end{matrix} \\right)\n```\n\n----------------------------------------\n\nTITLE: Dual Quaternion Formula\nDESCRIPTION: Mathematical representation of a dual quaternion combining real and dual components with epsilon operator.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformations.rst#2025-04-22_snippet_6\n\nLANGUAGE: math\nCODE:\n```\n\\boldsymbol{\\sigma} = \\boldsymbol{p} + \\epsilon \\boldsymbol{q} = p_w + p_x i + p_y j + p_z k + \\epsilon (q_w + q_x i + q_y j + q_z k)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Right-handed Coordinate System in Python\nDESCRIPTION: Creates a 3D plot of a right-handed coordinate system using Matplotlib, showing the X, Y, and Z axes in red, green, and blue respectively, with appropriate axis limits and labels.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_ambiguities.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.plot_utils import make_3d_axis\n\n\nplt.figure()\nax = make_3d_axis(1)\nplt.setp(ax, xlim=(-0.05, 1.05), ylim=(-0.05, 1.05), zlim=(-0.05, 1.05),\n        xlabel=\"X\", ylabel=\"Y\", zlabel=\"Z\")\n\nbasis = np.eye(3)\nfor d, c in enumerate([\"r\", \"g\", \"b\"]):\n    ax.plot([0.0, basis[0, d]],\n            [0.0, basis[1, d]],\n            [0.0, basis[2, d]], color=c, lw=5)\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Left-handed Coordinate System in Python\nDESCRIPTION: Creates a 3D plot of a left-handed coordinate system using Matplotlib, showing the X, Y, and inverted Z axes in red, green, and blue respectively, with appropriate axis limits and labels.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/transformation_ambiguities.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pytransform3d.plot_utils import make_3d_axis\n\n\nplt.figure()\nax = make_3d_axis(1)\nplt.setp(ax, xlim=(-0.05, 1.05), ylim=(-0.05, 1.05), zlim=(-1.05, 0.05),\n        xlabel=\"X\", ylabel=\"Y\", zlabel=\"Z\")\n\nbasis = np.eye(3)\nbasis[:, 2] *= -1.0\nfor d, c in enumerate([\"r\", \"g\", \"b\"]):\n    ax.plot([0.0, basis[0, d]],\n            [0.0, basis[1, d]],\n            [0.0, basis[2, d]], color=c, lw=5)\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d via pip\nDESCRIPTION: Basic installation command using pip package manager\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytransform3d\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d via conda\nDESCRIPTION: Installation command using conda package manager from conda-forge channel (available since version 1.8)\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pytransform3d\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d with all optional dependencies\nDESCRIPTION: Installation command for pytransform3d with all optional features including mesh loading, 3D visualizer, and pydot export support\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install 'pytransform3d[all]'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up pytransform3d Repository in Bash\nDESCRIPTION: This snippet shows how to clone the forked pytransform3d repository, create a new branch for changes, and push the changes back to GitHub. It also demonstrates how to add the upstream remote for fetching from the main repository.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:YourLogin/pytransform3d.git\n$ git checkout -b my-feature\n$ git add modified_files\n$ git commit\n$ git push -u origin my-feature\n$ git remote add upstream https://github.com/dfki-ric/pytransform3d.git\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d dependencies from source\nDESCRIPTION: Command to install required dependencies from requirements.txt file when installing from source\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d from source\nDESCRIPTION: Command to install the package from source code using setup.py\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing pytransform3d directly from GitHub\nDESCRIPTION: Command to install the latest version directly from the GitHub repository using pip\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/install.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/dfki-ric/pytransform3d.git\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: List of required Python packages for the pytransform3d project. Includes numerical computing (numpy, scipy), visualization (matplotlib), XML processing (lxml), 3D mesh processing (trimesh), 3D file format support (pycollada), graph visualization (pydot), and point cloud processing (open3d) libraries.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\nscipy\nmatplotlib\nlxml\ntrimesh\npycollada\npydot\nopen3d\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation TOC with reStructuredText\nDESCRIPTION: Defines the table of contents structure for PyTransform3D documentation using reStructuredText directives. The toctree directive is configured for numbered sections with a max depth of 2 levels.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/user_guide/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :numbered:\n   :maxdepth: 2\n\n   introduction\n   rotations\n   transformations\n   transformation_ambiguities\n   euler_angles\n   transformation_modeling\n   transform_manager\n   transformation_over_time\n   uncertainty\n   camera\n```\n\n----------------------------------------\n\nTITLE: Sphinx Function Documentation Template with Jinja2 for pytransform3d\nDESCRIPTION: A template file for generating function documentation pages in the pytransform3d library using Sphinx. It contains Jinja2 placeholders for dynamic insertion of module and function names, with directives for setting up documentation structure, auto-function documentation, and adding example galleries.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/_templates/function.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:mod:`{{module}}`.{{objname}}\n{{ underline }}====================\n\n.. currentmodule:: {{ module }}\n\n.. autofunction:: {{ objname }}\n\n.. minigallery:: {{module}}.{{objname}}\n    :add-heading:\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation with Sphinx and Jinja2\nDESCRIPTION: This template generates documentation for a Python class, including its methods, attributes, and inheritance. It uses Sphinx directives and Jinja2 templating to create a structured documentation page with autosummaries and a mini gallery.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/_templates/class.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :show-inheritance:\n   :inherited-members:\n\n   {% block methods %}\n   .. automethod:: __init__\n\n   {% if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n.. minigallery:: {{module}}.{{objname}}\n    :add-heading:\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Class Documentation Template with Jinja2\nDESCRIPTION: A complete Jinja2 template for generating class documentation in Sphinx. The template includes inheritance information, methods, attributes, and a mini gallery section. It uses autosummary and autoclass directives to automatically generate documentation from docstrings.\nSOURCE: https://github.com/dfki-ric/pytransform3d/blob/main/doc/source/_templates/class_without_inherited.rst#2025-04-22_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :show-inheritance:\n   :no-inherited-members:\n\n   {% block methods %}\n   .. automethod:: __init__\n\n   {% if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n   {% for item in methods %}\n       {% if item not in inherited_members %}\n          ~{{ name }}.{{ item }}\n       {% endif %}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n   {% for item in attributes %}\n       {% if item not in inherited_members %}\n          ~{{ name }}.{{ item }}\n       {% endif %}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n.. minigallery:: {{module}}.{{objname}}\n    :add-heading:\n```"
  }
]