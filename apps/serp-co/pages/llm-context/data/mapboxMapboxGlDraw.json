[
  {
    "owner": "mapbox",
    "repo": "mapbox-gl-draw",
    "content": "TITLE: Initializing Mapbox GL Draw with a Map\nDESCRIPTION: Basic setup to initialize Mapbox GL Draw by creating a map, initializing the Draw control, and adding it to the map.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a Mapbox GL JS map\nvar map = new Map(mapOptions);\n\n// Create a Draw control\nvar draw = new MapboxDraw(drawOptions);\n\n// Add the Draw control to your map\nmap.addControl(draw);\n```\n\n----------------------------------------\n\nTITLE: Importing mapbox-gl-draw with JavaScript modules\nDESCRIPTION: How to import MapboxDraw when using JavaScript modules in your application.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mapboxgl from 'mapbox-gl';\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Feature With Specified ID\nDESCRIPTION: Example showing how to add a GeoJSON Feature with a specified ID. When an ID is included in the feature object, Draw will use that ID rather than generating a random one.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar feature = {\n  id: 'unique-id',\n  type: 'Feature',\n  properties: {},\n  geometry: { type: 'Point', coordinates: [0, 0] }\n};\nvar featureIds = draw.add(feature);\nconsole.log(featureIds)\n//=> ['unique-id']\n```\n\n----------------------------------------\n\nTITLE: Styling Point Features with Mapbox GL Draw in JavaScript\nDESCRIPTION: This snippet illustrates how to style Point features within Mapbox GL Draw, differentiating between active and inactive points by applying different circle colors and sizes. It is useful for customizing point rendering, such as highlighting selected points.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/EXAMPLES.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar draw = new MapboxDraw({\n  // other draw options here\n  // ...\n  styles: [\n    {\n      'id': 'highlight-active-points',\n      'type': 'circle',\n      'filter': ['all',\n        ['==', '$type', 'Point'],\n        ['==', 'meta', 'feature'],\n        ['==', 'active', 'true']],\n      'paint': {\n        'circle-radius': 7,\n        'circle-color': '#000000'\n      }\n    },\n    {\n      'id': 'points-are-blue',\n      'type': 'circle',\n      'filter': ['all',\n        ['==', '$type', 'Point'],\n        ['==', 'meta', 'feature'],\n        ['==', 'active', 'false']],\n      'paint': {\n        'circle-radius': 5,\n        'circle-color': '#000088'\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Feature IDs at Specific Coordinates\nDESCRIPTION: Shows how to use getFeatureIdsAt() to retrieve feature IDs at specific pixel coordinates. This is useful for handling mouse events and interacting with features at specific points.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar featureIds = Draw.getFeatureIdsAt({x: 20, y: 20});\nconsole.log(featureIds)\n//=> ['top-feature-at-20-20', 'another-feature-at-20-20']\n```\n\n----------------------------------------\n\nTITLE: Installing mapbox-gl-draw via NPM\nDESCRIPTION: Command to install the mapbox-gl-draw package using npm package manager.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @mapbox/mapbox-gl-draw\n```\n\n----------------------------------------\n\nTITLE: Styling Line and Polygon Features in Mapbox GL Draw Using JavaScript\nDESCRIPTION: This snippet demonstrates styling for line and polygon features being drawn on the map. It applies dashed red outlines to lines and polygons, transparent fill colors, and styles for midpoints and vertex points including halos and inset points, enhancing visual clarity during editing.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/EXAMPLES.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar draw = new MapboxDraw({\n  // other draw options here\n  // ...\n  styles: [\n    // ACTIVE (being drawn)\n    // line stroke\n    {\n        \"id\": \"gl-draw-line\",\n        \"type\": \"line\",\n        \"filter\": [\"all\", [\"==\", \"$type\", \"LineString\"]],\n        \"layout\": {\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        },\n        \"paint\": {\n          \"line-color\": \"#D20C0C\",\n          \"line-dasharray\": [0.2, 2],\n          \"line-width\": 2\n        }\n    },\n    // polygon fill\n    {\n      \"id\": \"gl-draw-polygon-fill\",\n      \"type\": \"fill\",\n      \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"]],\n      \"paint\": {\n        \"fill-color\": \"#D20C0C\",\n        \"fill-outline-color\": \"#D20C0C\",\n        \"fill-opacity\": 0.1\n      }\n    },\n    // polygon mid points\n    {\n      'id': 'gl-draw-polygon-midpoint',\n      'type': 'circle',\n      'filter': ['all',\n        ['==', '$type', 'Point'],\n        ['==', 'meta', 'midpoint']],\n      'paint': {\n        'circle-radius': 3,\n        'circle-color': '#fbb03b'\n      }\n    },\n    // polygon outline stroke\n    {\n      \"id\": \"gl-draw-polygon-stroke-active\",\n      \"type\": \"line\",\n      \"filter\": [\"all\", [\"==\", \"$type\", \"Polygon\"]],\n      \"layout\": {\n        \"line-cap\": \"round\",\n        \"line-join\": \"round\"\n      },\n      \"paint\": {\n        \"line-color\": \"#D20C0C\",\n        \"line-dasharray\": [0.2, 2],\n        \"line-width\": 2\n      }\n    },\n    // vertex point halos\n    {\n      \"id\": \"gl-draw-polygon-and-line-vertex-halo-active\",\n      \"type\": \"circle\",\n      \"filter\": [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"]],\n      \"paint\": {\n        \"circle-radius\": 5,\n        \"circle-color\": \"#FFF\"\n      }\n    },\n    // vertex points\n    {\n      \"id\": \"gl-draw-polygon-and-line-vertex-active\",\n      \"type\": \"circle\",\n      \"filter\": [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"]],\n      \"paint\": {\n        \"circle-radius\": 3,\n        \"circle-color\": \"#D20C0C\",\n      }\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Listen for draw.create Event Mapbox GL JS Javascript\nDESCRIPTION: Demonstrates how to attach an event listener to the Mapbox GL JS map object to capture the `draw.create` event. This event fires when a new feature is finished drawing and is valid. The listener function receives an event object containing an array of the newly created GeoJSON features. Required dependencies are a Mapbox GL JS map instance and Mapbox GL Draw integrated with the map.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_13\n\nLANGUAGE: Javascript\nCODE:\n```\nmap.on('draw.create', function (e) {\n  console.log(e.features);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Feature by ID with get() Method\nDESCRIPTION: Demonstrates how to use the get() method to retrieve a GeoJSON feature from Draw by its ID. Returns undefined if no feature matches the ID.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar featureIds = draw.add({ type: 'Point', coordinates: [0, 0] });\nvar pointId = featureIds[0];\nconsole.log(draw.get(pointId));\n//=> { type: 'Feature', geometry: { type: 'Point', coordinates: [0, 0] } }\n```\n\n----------------------------------------\n\nTITLE: Deleting Features by ID with delete() Method\nDESCRIPTION: Shows how to remove specific features using their IDs with the delete() method. The method returns the Draw instance for chaining operations.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar feature = { type: 'Point', coordinates: [0, 0] };\nvar ids = draw.add(feature);\ndraw\n  .delete(ids)\n  .getAll();\n// { type: 'FeatureCollection', features: [] }\n```\n\n----------------------------------------\n\nTITLE: Adding a GeoJSON Feature Without Specified ID\nDESCRIPTION: Example showing how to add a GeoJSON Point feature without a specified ID. The method returns an array of automatically generated feature IDs.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar feature = { type: 'Point', coordinates: [0, 0] };\nvar featureIds = draw.add(feature);\nconsole.log(featureIds);\n//=> ['some-random-string']\n```\n\n----------------------------------------\n\nTITLE: Specify simple_select Options Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the options object used with the `changeMode` method for the `simple_select` mode. It includes a `featureIds` array to specify features that should be initially selected upon entering the mode. Required dependency is Mapbox GL Draw. Expected input is an array of feature IDs.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_10\n\nLANGUAGE: Javascript\nCODE:\n```\n// `simple_select` options\n{\n  // Array of ids of features that will be initially selected\n  featureIds: Array<string>\n}\n```\n\n----------------------------------------\n\nTITLE: draw.create Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.create` event. It contains a single property, `features`, which is an array of GeoJSON objects representing the features that were newly created. This data is available within the event handler function. Required dependency is the `draw.create` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_14\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  // Array of GeoJSON objects representing the features that were created\n  features: Array<Object>\n}\n```\n\n----------------------------------------\n\nTITLE: draw.update Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.update` event. It contains `features`, an array of GeoJSON features that were updated, and `action`, a string indicating the type of update ('move' or 'change_coordinates'). This data is available within the event handler function. Required dependency is the `draw.update` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_18\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  features: Array<Feature>, // Array of features that were updated\n  action: string // Name of the action that triggered the update\n}\n```\n\n----------------------------------------\n\nTITLE: Using Draw After Map Load Event\nDESCRIPTION: Demonstrates that Draw operations must be performed after the map's load event has fired, as Draw only works after the Mapbox GL JS map has fully loaded.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('load', function() {\n  draw.add({ .. });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing All Features with deleteAll() Method\nDESCRIPTION: Demonstrates using the deleteAll() method to remove all features from Draw. The method returns the Draw instance for chaining operations.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndraw.add({ type: 'Point', coordinates: [0, 0] });\ndraw\n  .deleteAll()\n  .getAll();\n// { type: 'FeatureCollection', features: [] }\n```\n\n----------------------------------------\n\nTITLE: Complete example of using mapbox-gl-draw with Mapbox GL JS\nDESCRIPTION: A full example showing how to initialize a map, add the draw control, and set up your application. Requires a Mapbox access token.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmapboxgl.accessToken = 'YOUR_ACCESS_TOKEN';\n\nvar map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/mapbox/streets-v12',\n  center: [40, -74.50],\n  zoom: 9\n});\n\nvar Draw = new MapboxDraw();\n\n// Map#addControl takes an optional second argument to set the position of the control.\n// If no position is specified the control defaults to `top-right`. See the docs\n// for more details: https://docs.mapbox.com/mapbox-gl-js/api/#map#addcontrol\n\nmap.addControl(Draw, 'top-left');\n\nmap.on('load', function() {\n  // ALL YOUR APPLICATION CODE\n});\n```\n\n----------------------------------------\n\nTITLE: draw.delete Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.delete` event. It contains a single property, `features`, which is an array of GeoJSON objects representing the features that were deleted. This data is available within the event handler function. Required dependency is the `draw.delete` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_15\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  // Array of GeoJSON objects representing the features that were deleted\n  features: Array<Feature>\n}\n```\n\n----------------------------------------\n\nTITLE: draw.uncombine Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.uncombine` event. It contains `deletedFeatures`, an array of multifeatures that were split, and `createdFeatures`, an array of the features created from the split. This data is available within the event handler function. Required dependency is the `draw.uncombine` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_17\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  deletedFeatures: Array<Object>, // Array of deleted multifeatures (split into features)\n  createdFeatures: Array<Object> // Array of created features\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Mapbox Draw Mode in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to define a custom interaction mode (`LotsOfPointsMode`) for Mapbox Draw. It implements key lifecycle functions: `onSetup` to initialize state (e.g., a counter passed via options), `onClick` to create and add a new point feature on map clicks using `this.newFeature` and `this.addFeature`, `onKeyUp` to handle the 'Esc' key (keyCode 27) for changing back to the `simple_select` mode using `this.changeMode`, and the required `toDisplayFeatures` function to control feature rendering via the `display` callback. The example concludes by showing how to instantiate `MapboxDraw`, set the custom mode as the default, and register it alongside built-in modes using `Object.assign` and `MapboxDraw.modes`.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/MODES.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar LotsOfPointsMode = {};\n\n// When the mode starts this function will be called.\n// The `opts` argument comes from `draw.changeMode('lotsofpoints', {count:7})`.\n// The value returned should be an object and will be passed to all other lifecycle functions\nLotsOfPointsMode.onSetup = function(opts) {\n  var state = {};\n  state.count = opts.count || 0;\n  return state;\n};\n\n// Whenever a user clicks on the map, Draw will call `onClick`\nLotsOfPointsMode.onClick = function(state, e) {\n  // `this.newFeature` takes geojson and makes a DrawFeature\n  var point = this.newFeature({\n    type: 'Feature',\n    properties: {\n      count: state.count\n    },\n    geometry: {\n      type: 'Point',\n      coordinates: [e.lngLat.lng, e.lngLat.lat]\n    }\n  });\n  this.addFeature(point); // puts the point on the map\n};\n\n// Whenever a user clicks on a key while focused on the map, it will be sent here\nLotsOfPointsMode.onKeyUp = function(state, e) {\n  if (e.keyCode === 27) return this.changeMode('simple_select');\n};\n\n// This is the only required function for a mode.\n// It decides which features currently in Draw's data store will be rendered on the map.\n// All features passed to `display` will be rendered, so you can pass multiple display features per internal feature.\n// See `styling-draw` in `API.md` for advice on making display features\nLotsOfPointsMode.toDisplayFeatures = function(state, geojson, display) {\n  display(geojson);\n};\n\n// Add the new draw mode to the MapboxDraw object\nvar draw = new MapboxDraw({\n  defaultMode: 'lots_of_points',\n  // Adds the LotsOfPointsMode to the built-in set of modes\n  modes: Object.assign({\n    lots_of_points: LotsOfPointsMode,\n  }, MapboxDraw.modes),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Benchmark Function using Mapbox GL Draw and Evented in JavaScript\nDESCRIPTION: Defines a benchmark creation function in JavaScript that accepts options including a Mapbox access token and a map creation callback. The function returns an Evented instance designed to run benchmarks on the Mapbox GL Draw library. The Evented instance fires 'log', 'error', and 'end' events to communicate progress and results. The 'createMap' callback must support width, height, and full Map constructor options to configure the map instance. This structure supports precise, repeatable benchmarking aligned with real-world usage patterns.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/bench/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateBenchmark(options: {\n    accessToken: string;\n    createMap: (options: {\n        width: number;\n        height: number;\n        ... // supports all options for the Map constructor\n    }):Map\n}): Evented\n```\n\n----------------------------------------\n\nTITLE: Importing mapbox-gl-draw CSS with JavaScript modules\nDESCRIPTION: How to import the required CSS styles when using JavaScript modules.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Features with getAll() Method\nDESCRIPTION: Example of using the getAll() method to retrieve a FeatureCollection containing all features currently in Draw, including their automatically generated IDs.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndraw.add({ type: 'Point', coordinates: [0, 0] });\ndraw.add({ type: 'Point', coordinates: [1, 1] });\ndraw.add({ type: 'Point', coordinates: [2, 2] });\nconsole.log(draw.getAll());\n// {\n//   type: 'FeatureCollection',\n//   features: [\n//     {\n//       id: 'random-0'\n//       type: 'Feature',\n//       geometry: {\n//         type: 'Point',\n//         coordinates: [0, 0]\n//       }\n//     },\n//     {\n//       id: 'random-1'\n//       type: 'Feature',\n//       geometry: {\n//         type: 'Point',\n//         coordinates: [1, 1]\n//       }\n//     },\n//     {\n//       id: 'random-2'\n//       type: 'Feature',\n//       geometry: {\n//         type: 'Point',\n//         coordinates: [2, 2]\n//       }\n//     }\n//   ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Specify draw_line_string Continue Options Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the options object used with the `changeMode` method for the `draw_line_string` mode when continuing an existing line. It includes `featureId` for the line to continue and `from` specifying the starting point. Required dependency is Mapbox GL Draw. Expected inputs are a feature ID string and a point geometry.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_12\n\nLANGUAGE: Javascript\nCODE:\n```\n// `draw_line_string` options\n{\n  // The id of the LineString to continue drawing\n  featureId: string,\n  // The point to continue drawing from\n  from: Feature<Point>|Point|Array<number>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding mapbox-gl-draw via CDN in HTML\nDESCRIPTION: How to include the mapbox-gl-draw JavaScript library from a CDN in your HTML file.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.js'></script>\n```\n\n----------------------------------------\n\nTITLE: draw.modechange Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.modechange` event. It contains a single property, `mode`, which is a string indicating the name of the mode Mapbox GL Draw is changing to. This data is available within the event handler function. Required dependency is the `draw.modechange` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_20\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  mode: string // The next mode, i.e. the mode that Draw is changing to\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Benchmark End Event with Results in JavaScript\nDESCRIPTION: Provides the format for firing an 'end' event from the benchmark's Evented instance to signal completion. The payload carries a human-readable message and a machine-readable numeric score, where lower scores represent better performance. This event must be fired exactly once per benchmark run to communicate the final results.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/bench/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    message: string;\n    score: number;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbenchmark.fire('end', {\n    message: 'Average time is ' + formatNumber(averageTime)) + 'ms',\n    score: averageTime\n});\n```\n\n----------------------------------------\n\nTITLE: Specify direct_select Options Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the options object used with the `changeMode` method for the `direct_select` mode. It requires a single `featureId` string specifying the feature to be directly selected. Required dependency is Mapbox GL Draw. Expected input is a feature ID string.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_11\n\nLANGUAGE: Javascript\nCODE:\n```\n// `direct_select` options\n{\n  // The id of the feature that will be directly selected (required)\n  featureId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Benchmark Server with npm Bash Script\nDESCRIPTION: This Bash command starts the benchmark server for Mapbox GL Draw. It requires setting the MAPBOX_ACCESS_TOKEN environment variable with a valid Mapbox access token before running the npm script named 'start-bench'. This server hosts the benchmark runner page on localhost port 9967.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/bench/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMAPBOX_ACCESS_TOKEN={YOUR MAPBOX ACCESS TOKEN} npm run start-bench\n```\n\n----------------------------------------\n\nTITLE: Emitting Error Events for Benchmark Failures in JavaScript\nDESCRIPTION: Illustrates how to report errors during a benchmark by firing an 'error' event on the Evented instance. The event object carries an Error instance describing what went wrong. This allows the benchmark runner to handle and display errors appropriately.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/bench/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    error: Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding mapbox-gl-draw CSS via CDN in HTML\nDESCRIPTION: How to include the required CSS styles from a CDN in your HTML file.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.3/mapbox-gl-draw.css' type='text/css' />\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript definitions for mapbox-gl-draw\nDESCRIPTION: Command to install TypeScript type definitions for mapbox-gl-draw from DefinitelyTyped.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @types/mapbox__mapbox-gl-draw\n```\n\n----------------------------------------\n\nTITLE: Development setup commands for mapbox-gl-draw\nDESCRIPTION: Shell commands to clone the repository, install dependencies, and start the development server for testing and development.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:mapbox/mapbox-gl-draw.git\nnpm ci\nnpm start & open \"http://localhost:9967/debug/?access_token=<token>\"\n```\n\n----------------------------------------\n\nTITLE: Publishing mapbox-gl-draw to GitHub and NPM\nDESCRIPTION: Commands for versioning and publishing the package to GitHub and NPM.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm version (major|minor|patch)\ngit push --tags\ngit push\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Running mapbox-gl-draw tests\nDESCRIPTION: Command to run the test suite for mapbox-gl-draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Publishing mapbox-gl-draw to CDN\nDESCRIPTION: Commands for publishing the package to AWS S3 for CDN distribution. Requires AWS authentication.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# make sure you are authenticated for AWS\ngit checkout v{x.y.z}\nnpm ci\nnpm run prepublish\naws s3 cp --recursive --acl public-read dist s3://mapbox-gl-js/plugins/mapbox-gl-draw/v{x.y.z}\n```\n\n----------------------------------------\n\nTITLE: draw.actionable Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.actionable` event. It contains an `actions` object with boolean flags indicating whether `trash`, `combineFeatures`, and `uncombineFeatures` methods would have an effect if called. This data is available within the event handler function. Required dependency is the `draw.actionable` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_21\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  actions: {\n    trash: true\n    combineFeatures: false,\n    uncombineFeatures: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Features with set() Method\nDESCRIPTION: Example of using the set() method to update all features in Draw to match the provided FeatureCollection. Returns an array of feature IDs that were set.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar ids = draw.set({\n  type: 'FeatureCollection',\n  features: [{\n    type: 'Feature',\n    properties: {},\n    id: 'example-id',\n    geometry: { type: 'Point', coordinates: [0, 0] }\n  }]\n});\n// ['example-id']\n```\n\n----------------------------------------\n\nTITLE: draw.combine Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.combine` event. It contains `deletedFeatures`, an array of features incorporated into new multifeatures, and `createdFeatures`, an array of the newly created multifeatures. This data is available within the event handler function. Required dependency is the `draw.combine` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_16\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  deletedFeatures: Array<Feature>, // Array of deleted features (those incorporated into new multifeatures)\n  createdFeatures: Array<Feature> // Array of created multifeatures\n}\n```\n\n----------------------------------------\n\nTITLE: draw.selectionchange Event Data Structure Mapbox GL Draw Javascript\nDESCRIPTION: Defines the structure of the data object provided by the `draw.selectionchange` event. It contains a single property, `features`, which is an array of GeoJSON features that are currently selected after the change. This data is available within the event handler function. Required dependency is the `draw.selectionchange` event being triggered by Mapbox GL Draw.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/docs/API.md#_snippet_19\n\nLANGUAGE: Javascript\nCODE:\n```\n{\n  features: Array<Feature> // Array of features that are selected after the change\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Log Events for Benchmark Progress in JavaScript\nDESCRIPTION: Shows how to emit 'log' events on an Evented benchmark instance to report progress messages. The event payload includes a message string and an optional color string representing a Mapbox base color for display. This event is informative, without machine-readable semantics, and can be used per sample iteration to reflect progress updates.\nSOURCE: https://github.com/mapbox/mapbox-gl-draw/blob/main/bench/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    message: string;\n    color: string = 'blue'; // name of a Mapbox base color https://mapbox.com/base/styling/color\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbenchmark.fire('log', {\n    message: 'Finished sample ' + i + ' in ' + formatNumber(time) + ' ms'\n});\n```"
  }
]