[
  {
    "owner": "descope",
    "repo": "descope-swift",
    "content": "TITLE: Initializing Descope SDK in Swift Application\nDESCRIPTION: Sets up the Descope SDK in the application delegate with a project ID. This initialization should be done at application launch.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport DescopeKit\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    Descope.setup(projectId: \"<Your-Project-Id>\")\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up DescopeKit using Swift Package Manager\nDESCRIPTION: Instructions for adding the DescopeKit package to a Swift project using Swift Package Manager. The URL provided points to the Descope GitHub repository.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/descope/descope-swift\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing User Session on App Launch\nDESCRIPTION: Determines if there's a valid user session from a previous app launch to decide which initial screen to display. It checks if the session exists and hasn't expired.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc initialViewController() -> UIViewController {\n    // check if we have a valid session from a previous launch and that it hasn't expired yet \n    if let session = Descope.sessionManager.session, !session.refreshToken.isExpired {\n        print(\"Authenticated user found: \\(session.user)\")\n        return MainViewController()\n    }\n    return LoginViewController()\n}\n```\n\n----------------------------------------\n\nTITLE: Managing User Session After Authentication\nDESCRIPTION: Creates and manages a user session after successful authentication. The session manager handles storing the session in the keychain and refreshing it as needed.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.otp.verify(with: .email, loginId: \"andy@example.com\", code: \"123456\")\nlet session = DescopeSession(from: authResponse)\nDescope.sessionManager.manageSession(session)\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Flow with DescopeFlowViewController\nDESCRIPTION: Demonstrates how to present an authentication flow using DescopeFlowViewController and handle the authentication response. The flow controller is pushed onto a navigation controller.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfunc showLoginScreen() {\n    let flow = DescopeFlow(url: \"https://example.com/myflow\")\n\n    let flowViewController = DescopeFlowViewController()\n    flowViewController.delegate = self\n    flowViewController.start(flow: flow)\n\n    navigationController?.pushViewController(flowViewController, animated: true)\n}\n\nfunc flowViewControllerDidFinish(_ controller: DescopeFlowViewController, response: AuthenticationResponse) {\n    let session = DescopeSession(from: response)\n    Descope.sessionManager.manageSession(session)\n    showMainScreen()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Header to API Requests\nDESCRIPTION: Sets the authorization HTTP header field on a URL request using the session manager. This automatically handles token refreshing if needed.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar request = URLRequest(url: url)\ntry await request.setAuthorizationHTTPHeaderField(from: Descope.sessionManager)\nlet (data, response) = try await URLSession.shared.data(for: request)\n```\n\n----------------------------------------\n\nTITLE: Signing Out User and Clearing Session\nDESCRIPTION: Clears the user session from the session manager and removes it from the keychain, effectively signing the user out of the application.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nDescope.sessionManager.clearSession()\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing User on Application Launch\nDESCRIPTION: Checks if a user is already logged in when the application launches by examining the session manager for a valid, non-expired session.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    Descope.setup(projectId: \"...\")\n    if let session = Descope.sessionManager.session, !session.refreshToken.isExpired {\n        print(\"User is logged in: \\(session)\")\n    }\n    return true\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code and Creating User Session\nDESCRIPTION: Completes the authentication by verifying the OTP code entered by the user. Upon successful verification, it creates and manages a user session.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// if the user entered the right code the authentication is successful  \nlet authResponse = try await Descope.otp.verify(with: .email, loginId: \"andy@example.com\", code: code)\n\n// we create a DescopeSession object that represents an authenticated user session\nlet session = DescopeSession(from: authResponse)\n\n// the session manager takes care of saving the session to the keychain and\n// refreshing it for us as needed\nDescope.sessionManager.manageSession(session)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Authentication Header with Session JWT\nDESCRIPTION: Demonstrates how to add a custom authorization header to a request using the session JWT directly, rather than using the extension method.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ntry await Descope.sessionManager.refreshSessionIfNeeded()\nguard let sessionJwt = Descope.sessionManager.session?.sessionJwt else { throw ServerError.unauthorized }\nrequest.setValue(sessionJwt, forHTTPHeaderField: \"X-Auth-Token\")\n```\n\n----------------------------------------\n\nTITLE: Sending OTP Code via Email for User Authentication\nDESCRIPTION: Initiates the OTP authentication process by sending a verification code to the provided email address. This example shows the sign-up process using OTP.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// sends an OTP code to the given email address\ntry await Descope.otp.signUp(with: .email, loginId: \"andy@example.com\", details: nil)\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code for Authentication\nDESCRIPTION: Verifies the OTP code received by the user and creates a session upon successful verification. This completes the OTP authentication process.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.otp.verify(with: .email, loginId: \"andy@example.com\", code: \"123456\")\nlet session = DescopeSession(from: authResponse)\nDescope.sessionManager.manageSession(session)\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Apple OAuth Authentication in Swift\nDESCRIPTION: Authenticates a user using native Apple OAuth. Shows how to handle the authentication response and manage errors, including when a user cancels the authentication process.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    showLoading(true)\n    let authResponse = try await Descope.oauth.native(provider: .apple, options: [])\n    let session = DescopeSession(from: authResponse)\n    Descope.sessionManager.manageSession(session)\n    showHomeScreen() \n} catch DescopeError.oauthNativeCancelled {\n    showLoading(false)\n    print(\"Authentication cancelled\")\n} catch {\n    showError(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication in Swift\nDESCRIPTION: Authenticates a user using passkeys, allowing them to sign up or sign in with a single operation. Handles both success and error cases, including when authentication is canceled.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    showLoading(true)\n    let authResponse = try await Descope.passkey.signUpOrIn(loginId: \"andy@example.com\", options: [])\n    let session = DescopeSession(from: authResponse)\n    Descope.sessionManager.manageSession(session)\n    showHomeScreen() \n} catch DescopeError.oauthNativeCancelled {\n    showLoading(false)\n    print(\"Authentication cancelled\")\n} catch {\n    showError(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Sign Up with User Details\nDESCRIPTION: Sends a one-time password to a user's email for sign-up, including optional user details such as name. This demonstrates the OTP authentication method with additional user information.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// Every user must have a loginId. All other user details are optional:\ntry await Descope.otp.signUp(with: .email, loginId: \"andy@example.com\", details: SignUpDetails(\n    name: \"Andy Rhoads\"\n))\n```\n\n----------------------------------------\n\nTITLE: Sending Magic Link Authentication Request in Swift\nDESCRIPTION: Sends a sign-up magic link to a user via email. The redirect URI is optional if configured globally in the Descope Console, otherwise it will override the global setting.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// If configured globally, the redirect URI is optional. If provided however, it will be used\n// instead of any global configuration\ntry await Descope.magiclink.signUp(with: .email, loginId: \"andy@example.com\", details: nil)\n```\n\n----------------------------------------\n\nTITLE: Verifying Magic Link Token in Swift\nDESCRIPTION: Verifies a magic link token received in the redirect URL. The token is usually passed as a query parameter 't' to the redirect page.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.magiclink.verify(token: \"<token>\")\n```\n\n----------------------------------------\n\nTITLE: Starting OAuth Browser Authentication Flow in Swift\nDESCRIPTION: Initiates an OAuth authentication flow with a specified provider through a browser. Returns an auth URL that the application should open to start the OAuth redirect chain.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// Choose an oauth provider out of the supported providers\n// If configured globally, the redirect URL is optional. If provided however, it will be used\n// instead of any global configuration.\n// Redirect the user to the returned URL to start the OAuth redirect chain\nlet authURL = try await Descope.oauth.start(provider: .github, redirectURL: \"exampleauthschema://my-app.com/handle-oauth\", options: [])\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback and Code Exchange in Swift\nDESCRIPTION: Shows how to handle the OAuth callback using ASWebAuthenticationSession, extract the authorization code from the callback URL, and exchange it for a session token.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Start the authentication session\nlet session = ASWebAuthenticationSession(url: authURL, callbackURLScheme: \"exampleauthschema\") { callbackURL, error in\n    // Extract the returned code\n    guard let url = callbackURL else { return }\n    let components = URLComponents(url: url, resolvingAgainstBaseURL: false)\n    guard let code = components?.queryItems?.first(where: { $0.name == \"code\" })?.value else { return }\n    \n    Task {\n        // Exchange code for session\n        let authResponse = try await Descope.oauth.exchange(code: code)\n        let session = DescopeSession(from: authResponse)\n        Descope.sessionManager.manageSession(session)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Universal Links for Magic Link Authentication\nDESCRIPTION: Processes universal links for Magic Link authentication by providing the URL to Descope's handler. This is required when implementing Magic Link authentication in iOS apps.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    guard userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL else { return false }\n    let handled = Descope.handleURL(url)\n    return handled\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SSO/SAML Authentication Flow in Swift\nDESCRIPTION: Initiates an SSO/SAML authentication flow for a specific tenant. Returns an authentication URL that the application should open to start the redirect chain.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Choose which tenant to log into\n// If configured globally, the return URL is optional. If provided however, it will be used\n// instead of any global configuration.\n// Redirect the user to the returned URL to start the SSO/SAML redirect chain\nlet authURL = try await Descope.sso.start(emailOrTenantName: \"my-tenant-ID\", redirectURL: \"exampleauthschema://my-app.com/handle-saml\", options: [])\n```\n\n----------------------------------------\n\nTITLE: Handling SSO/SAML Callback and Code Exchange in Swift\nDESCRIPTION: Shows how to handle the SSO/SAML callback using ASWebAuthenticationSession, extract the authorization code from the callback URL, and exchange it for a session token.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n// Start the authentication session\nlet session = ASWebAuthenticationSession(url: authURL, callbackURLScheme: \"exampleauthschema\") { callbackURL, error in\n\n    // Extract the returned code\n    guard let url = callbackURL else {return}\n    let component = URLComponents(url: url, resolvingAgainstBaseURL: false)\n    guard let code = component?.queryItems?.first(where: {$0.name == \"code\"})?.value else { return }\n\n    // ... Trigger asynchronously\n\n    // Exchange code for session\n    let authResponse = try await Descope.sso.exchange(code: code)\n    let session = DescopeSession(from: authResponse)\n    Descope.sessionManager.manageSession(session)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Sign-Up in Swift\nDESCRIPTION: Creates a new user with password authentication. Includes user details such as name along with the required login ID and password.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.password.signUp(loginId: \"andy@example.com\", password: \"securePassword123!\", details: SignUpDetails(\n    name: \"Andy Rhoads\"\n))\n\n// in another screen\n\nlet authResponse = try await Descope.password.signIn(loginId: \"andy@example.com\", password: \"securePassword123!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing TOTP Sign-Up in Swift\nDESCRIPTION: Signs up a user with Time-based One-Time Password (TOTP) authentication. The response provides different options (provisioning URL, key) that allow the user to add their credentials to an authenticator app.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Every user must have a loginID. All other user information is optional\nlet totpResponse = try await Descope.totp.signUp(loginId: \"andy@example.com\", details: nil)\n\n// Use one of the provided options to have the user add their credentials to the authenticator\n// totpResponse.provisioningURL\n// totpResponse.key\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP Code in Swift\nDESCRIPTION: Verifies a Time-based One-Time Password (TOTP) code provided by the user's authenticator app during sign-in.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.totp.verify(loginId: \"andy@example.com\", code: \"987654\")\n```\n\n----------------------------------------\n\nTITLE: Sending Password Reset Email in Swift\nDESCRIPTION: Triggers a password reset email to be sent to the user with a specified redirect URL that will handle the reset process in the app.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\ntry await Descope.password.sendReset(loginId: \"andy@example.com\", redirectURL: \"appscheme://my-app.com/handle-reset\")\n```\n\n----------------------------------------\n\nTITLE: Replacing User Password in Swift\nDESCRIPTION: Replaces a user's password by providing both the old and new passwords. Returns an authentication response upon successful password change.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nlet authResponse = try await Descope.password.replace(loginId: \"andy@example.com\", oldPassword: \"SecurePassword123!\", newPassword: \"NewSecurePassword456!\")\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Swift\nDESCRIPTION: Updates the password for a logged-in user. Requires the user's login ID, new password, and a valid refresh JWT token.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\ntry await Descope.password.update(loginId: \"andy@example.com\", newPassword: \"newSecurePassword456!\", refreshJwt: \"user-refresh-jwt\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Flow Appearance with Hooks\nDESCRIPTION: Uses hooks to customize the appearance of a flow page, making the background transparent and adding margin to the body element. This demonstrates how to modify the visual presentation of authentication flows.\nSOURCE: https://github.com/descope/descope-swift/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nlet flow = DescopeFlow(url: \"https://example.com/myflow\")\nflow.hooks = [\n    .setTransparentBody,\n    .addStyles(selector: \"body\", rules: [\"margin: 16px\"]),\n]\n```"
  }
]