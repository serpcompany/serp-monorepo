[
  {
    "owner": "apache",
    "repo": "dubbo-website",
    "content": "TITLE: Starting Dubbo Application Locally\nDESCRIPTION: Command to start the Dubbo application using Maven wrapper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw\n```\n\n----------------------------------------\n\nTITLE: Cloning Dubbo Samples Repository\nDESCRIPTION: Command to clone the official Dubbo samples repository and navigate to the quickstart directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone -b master --depth 1 https://github.com/apache/dubbo-samples\n$ cd dubbo-samples/11-quickstart\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo with Spring Boot in YAML\nDESCRIPTION: This YAML configuration example shows how to set up basic Dubbo properties including application name, protocol, and registry within a Spring Boot application configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n      name: dubbo-springboot-demo-provider\n      logger: slf4j\n  protocol:\n    name: dubbo\n    port: 50052\n  registry:\n    address: nacos://${nacos.address:127.0.0.1}:8848?username=nacos&password=nacos\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Filter in Dubbo SPI Configuration\nDESCRIPTION: Example of registering a custom Filter implementation in Dubbo's SPI configuration file. This allows Dubbo to discover and use the custom filter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/filter.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxFilter\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Services with Specific Registry in Java\nDESCRIPTION: This snippet illustrates how to subscribe to services using ReferenceConfig with a specific registry in Dubbo. It uses SimpleReferenceCache for efficient proxy object management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate DemoService referService() {\n    RegistryConfig hzRegistry = new RegistryConfig();\n\thzRegistry.setId(\"hz\");\n\thzRegistry.setAddress(\"nacos://127.0.0.2:8848\");\n\n    ReferenceConfig<DemoService> reference = new ReferenceConfig<>();\n    reference.setInterfaceClass(DemoService.class);\n\n    reference.setRegistry(hzRegistry)\n\n    ReferenceCache cache = SimpleReferenceCache.getCache();\n    try {\n        return cache.get(reference);\n    } catch (Exception e) {\n        throw new RuntimeException(e.getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo with Spring Boot in YAML\nDESCRIPTION: This YAML configuration example shows how to set up basic Dubbo properties including application name, protocol, and registry within a Spring Boot application configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n      name: dubbo-springboot-demo-provider\n      logger: slf4j\n  protocol:\n    name: dubbo\n    port: 50052\n  registry:\n    address: nacos://${nacos.address:127.0.0.1}:8848?username=nacos&password=nacos\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dubbo Filter in Java\nDESCRIPTION: Java implementation of AppendedFilter that modifies the return value of all Provider service calls by appending a custom string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.filter.provider;\n\nimport org.apache.dubbo.rpc.Filter;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.apache.dubbo.rpc.AsyncRpcResult;\n\npublic class AppendedFilter implements Filter {\n\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        Result result= invoker.invoke(invocation);\n        // Obtain the returned value\n        Result appResponse = ((AsyncRpcResult) result).getAppResponse();\n        // Appended value\n        appResponse.setValue(appResponse.getValue()+\"'s customized AppendedFilter\");\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Service Interface in Dubbo\nDESCRIPTION: Example of a typical synchronous service interface definition in Dubbo using Java. This represents the traditional way of defining service methods that block until completion.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/apache-dubbo-2019-2020.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface HelloService {\n  // Synchronous style\n  String sayHello(String name); \n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Asynchronous Calls by Ignoring Return Values\nDESCRIPTION: Configuration example to optimize asynchronous calls by completely ignoring return values (return=false), which reduces the overhead of creating and managing Future objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name = \"sayHello\", timeout = 5000, return = false)})  \nprivate AsyncService asyncService;  \n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Thread Pool Executors for Dubbo Services\nDESCRIPTION: These classes define custom thread pool executors for Dubbo services, allowing for fine-grained control over thread management for different service types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// customized thread pool\npublic class DemoServiceExecutor extends ThreadPoolExecutor {\n    public DemoServiceExecutor() {\n        super(10, 10, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),\n            new NamedThreadFactory(\"DemoServiceExecutor\"));\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// customized thread pool\npublic class HelloServiceExecutor extends ThreadPoolExecutor {\n    public HelloServiceExecutor() {\n        super(100, 100, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),\n            new NamedThreadFactory(\"HelloServiceExecutor\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Project and Generating Code\nDESCRIPTION: Maven command to compile the project and generate code from IDL using the Dubbo protoc plugin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Networker in Java\nDESCRIPTION: Example implementation of a custom Networker interface in Java, showing the basic structure and required method implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/networker.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.p2p.Networker;\n \npublic class XxxNetworker implements Networker {\n    public Group lookup(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Server with Streaming Service\nDESCRIPTION: Configuration and startup code for a Dubbo server that provides streaming services. The code configures the application, registers with ZooKeeper, specifies the Triple protocol, and exports the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\tServiceConfig<Greeter> service = new ServiceConfig<>();\n\tservice.setInterface(Greeter.class);\n\tservice.setRef(new GreeterImpl(\"tri-stub\"));\n\n\tApplicationConfig applicationConfig = new ApplicationConfig(\"tri-stub-server\");\n\tapplicationConfig.setQosEnable(false);\n\n\tDubboBootstrap bootstrap = DubboBootstrap.getInstance();\n\tbootstrap.application(applicationConfig)\n\t\t\t.registry(new RegistryConfig(TriSampleConstants.ZK_ADDRESS))\n\t\t\t.protocol(new ProtocolConfig(CommonConstants.TRIPLE, TriSampleConstants.SERVER_PORT))\n\t\t\t.service(service)\n\t\t\t.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Zero-Intrusive Spring Web Migration with Triple X\nDESCRIPTION: Demonstrates how to migrate existing Spring Web controllers to Dubbo services using Triple X. Only requires adding @DubboService annotation while maintaining compatibility with Spring MVC annotations like @RestController and @GetMapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/apache-33-release.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService // Only need to add service publishing configuration\n@RestController\npublic class DemoController {\n   @GetMapping(\"/spring-test\")\n   public String sayHello(@RequestParam(\"name\") String name) {\n       return \"Hello \" + name;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Consumer Controller with Spring Boot\nDESCRIPTION: This Java class demonstrates how to inject and use a Dubbo service in a Spring Boot RestController. It uses the @Reference annotation to specify the Dubbo service details and exposes an HTTP endpoint to call the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.democonsumer.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.example.demoapi.HelloService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class DemoConsumerController {\n    @Reference(version = \"${demo.service.version}\",\n            application = \"${dubbo.application.id}\",\n            url = \"dubbo://<Please fill in the specific IP>:12345\")\n    private HelloService helloService;\n\n    @RequestMapping(\"/sayHello\")\n    public String sayHello(@RequestParam String name) {\n        return helloService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: REST Service Definition with JAX-RS Annotations\nDESCRIPTION: Example of defining a REST-style service using JAX-RS annotations with the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/demo\")\npublic interface DemoService {\n    @GET\n\t@Path(\"/hello\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Using offline Command to Take Services Offline\nDESCRIPTION: The offline command takes services offline temporarily, useful during maintenance or when services fail. It can be used for all services or specific services matching a regex pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// Take all services offline\ndubbo>offline\nOK\n\n// Take some services offline based on regex\ndubbo>offline com.*\nOK\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Dubbo Consumer Application in Java\nDESCRIPTION: Main class for a Spring Boot Dubbo consumer application. It uses @SpringBootApplication annotation and runs the application using SpringApplication.run().\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@SpringBootApplication(scanBasePackages = \"com.alibaba.boot.dubbo.demo.consumer.controller\")\npublic class DubboConsumerDemo {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboConsumerDemo.class,args);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Maven Dependency\nDESCRIPTION: Maven configuration to add the lightweight Dubbo dependency to a project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider\nDESCRIPTION: Java implementation of the HelloService interface. This class provides the actual service implementation with a simulated failure every third request, which is useful for demonstrating Pinpoint's error tracking.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider.provider;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.example.demoapi.HelloService;\n\n@Service(version = \"${demo.service.version}\",\n        application = \"${dubbo.application.id}\",\n        protocol = \"${dubbo.protocol.id}\",\n        registry = \"${dubbo.registry.id}\")\npublic class HelloServiceImpl implements HelloService {\n    static int i = 0;\n    @Override\n    public String sayHello(String name) {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException(\"ex\");\n        }\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Repository\nDESCRIPTION: Command to clone the Dubbo samples repository containing example code\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\n```\n\n----------------------------------------\n\nTITLE: Using JVM Parameters for Dubbo Configuration\nDESCRIPTION: Examples of using JVM parameters to configure Dubbo, including application name, registry address, and protocol port settings. These parameters can be used to specify all configuration items in the Dubbo framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-Ddubbo.application.name=\"dubbo-demo\"\n-Ddubbo.registry.address=\"nacos://host:port\"\n-Ddubbo.protocol.port=\"20880\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Parameters using Properties Format\nDESCRIPTION: Shows how to configure Dubbo parameters in a properties file. Parameters are specified as map objects in the format of xxx.parameters=[{key:value},{key:value}].\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.parameters=[{item1:value1},{item2:value2}]\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters=[{item3:value3}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Call in Spring XML\nDESCRIPTION: Spring XML configuration for enabling generic calls in Dubbo\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"helloService\" generic = \"true\" interface=\"org.apache.dubbo.samples.generic.call.api.HelloService\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeter Service\nDESCRIPTION: Java implementation of the Greeter service extending the generated base class. Includes business logic for handling greet requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class GreeterImpl extends DubboGreeterTriple.GreeterImplBase {\n    @Override\n    public GreeterReply greet(GreeterRequest request) {\n        LOGGER.info(\"Server {} received greet request {}\", serverName, request);\n        return GreeterReply.newBuilder()\n                .setMessage(\"hello,\" + request.getName())\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dubbo Client\nDESCRIPTION: Example of creating a Dubbo client to make RPC calls to a service using ReferenceBuilder.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) {\n        DemoService demoService =\n            ReferenceBuilder.newBuilder()\n            .interfaceClass(DemoService.class)\n            .url(\"tri://localhost:50051\")\n            .build()\n            .get();\n\n        String message = demoService.sayHello(\"dubbo\");\n        System.out.println(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dubbo Registry Address via Environment Variable in Java\nDESCRIPTION: Sets the Dubbo registry address using an environment variable. This configuration tells Dubbo where to find the service registry, in this case, a Nacos instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDUBBO_REGISTRY_ADDRESS=\"nacos://host:port\"\n```\n\n----------------------------------------\n\nTITLE: 关闭注册中心本地文件缓存\nDESCRIPTION: 在 YAML 中配置关闭注册中心的本地文件缓存。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    file-cache: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Invocation in Go Client for Dubbo\nDESCRIPTION: Go code that demonstrates how to configure and execute a generic invocation from a Go client to a Java Dubbo server. It sets up the reference configuration, initializes the root configuration with a ZooKeeper registry, and makes the generic call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/generic-2.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Initialize Reference configuration\nrefConf := config.NewReferenceConfigBuilder().\n  SetInterface(\"org.apache.dubbo.UserProvider\").\n  SetRegistryIDs(\"zk\").\n  SetProtocol(tripleConst.TRIPLE).\n  SetGeneric(true).\n  SetSerialization(\"hessian2\").\n  Build()\n\n// Construct Root configuration, introducing the registry module\nrootConfig := config.NewRootConfigBuilder().\n  AddRegistry(\"zk\", config.NewRegistryConfigWithProtocolDefaultPort(\"zookeeper\")).\n  Build()\n\n// Reference configuration initialization, as service discovery requires the configured rootConfig\nif err := refConf.Init(rootConfig); err != nil{\n  panic(err)\n}\n\n// Generic invocation loading, service discovery\nrefConf.GenericLoad(appName)\n\ntime.Sleep(time.Second)\n\n// Initiate generic invocation\nresp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(\n  context.TODO(),\n  \"getUser1\",\n  []string{\"java.lang.String\"},\n  []hessian.Object{\"A003\"},\n)\n\nif err != nil {\n  panic(err)\n}\nlogger.Infof(\"GetUser1(userId string) res: %+v\", resp)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Exporting Dubbo Service Provider using Java API\nDESCRIPTION: This snippet demonstrates how to programmatically configure a Dubbo service provider, including application settings, registry connection, protocol configuration, and service export. It shows the complete flow from service implementation to making it available through Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.rpc.config.ApplicationConfig;\nimport org.apache.dubbo.rpc.config.RegistryConfig;\nimport org.apache.dubbo.rpc.config.ProviderConfig;\nimport org.apache.dubbo.rpc.config.ServiceConfig;\nimport com.xxx.XxxService;\nimport com.xxx.XxxServiceImpl;\n \n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n \n// 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口\n \n// 服务提供者暴露服务配置\nServiceConfig<XxxService> service = new ServiceConfig<XxxService>(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏\nservice.setApplication(application);\nservice.setRegistry(registry); // 多个注册中心可以用setRegistries()\nservice.setProtocol(protocol); // 多个协议可以用setProtocols()\nservice.setInterface(XxxService.class);\nservice.setRef(xxxService);\nservice.setVersion(\"1.0.0\");\n \n// 暴露及注册服务\nservice.export();\n```\n\n----------------------------------------\n\nTITLE: 服务注册到多个注册中心\nDESCRIPTION: 使用 @DubboService 注解指定服务注册到多个注册中心。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(registry = {\"beijingRegistry\"})\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Definition of a simple Dubbo service interface that will be implemented by the service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n   String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: Implementation of the DemoService interface with business logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name + \", response from provider.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoadBalance Interface in Dubbo\nDESCRIPTION: The LoadBalance interface defines how Dubbo selects a target invoker from multiple available service providers for a specific invocation. Implementations of this interface apply different algorithms like random, round-robin, or consistent hashing to distribute traffic across providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster;\n\npublic interface LoadBalance {\n    \n    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactive Server\nDESCRIPTION: Server configuration and bootstrap code for the reactive Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ReactorServer {\n    private static final int PORT = 50052;\n\n    public static void main(String[] args) {\n        ServiceConfig<GreeterService> reactorService = new ServiceConfig<>();\n        reactorService.setInterface(GreeterService.class);\n        reactorService.setRef(new GreeterServiceImpl());\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.application(new ApplicationConfig(\"tri-reactor-stub-server\"))\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n                .protocol(new ProtocolConfig(CommonConstants.TRIPLE, PORT))\n                .service(reactorService)\n                .start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Registry SPI Extensions\nDESCRIPTION: This snippet shows the standard registry implementations supported by Dubbo defined in a properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Common registry implementations supported by Dubbo\nnacos=org.apache.dubbo.registry.nacos.NacosServiceDiscoveryFactory\nzookeeper=org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory\n```\n\n----------------------------------------\n\nTITLE: 关闭注册中心本地文件缓存\nDESCRIPTION: 在 YAML 中配置关闭注册中心的本地文件缓存。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    file-cache: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Dubbo Protocol\nDESCRIPTION: Basic XML configuration for setting up the Dubbo protocol with port specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Microservices with Registry Center in Java\nDESCRIPTION: This code demonstrates how to configure microservices with a registry center and application name in Dubbo. It sets up multiple services and uses Nacos as the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    DubboBootstrap.getInstance()\n        .application()\n        .registry(new RegistryConfig(\"nacos://127.0.0.1:8848\"))\n        .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))\n        .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())\n        .service(ServiceBuilder.newBuilder().interfaceClass(FooService.class).ref(new FooServiceImpl()).build())\n        .start()\n        .await();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Dubbo Protocol\nDESCRIPTION: Basic XML configuration for setting up the Dubbo protocol with port specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Extension Instance\nDESCRIPTION: Method responsible for instantiating adaptive extensions using reflection and performing dependency injection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate T createAdaptiveExtension() {\n    try {\n        return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Cannot create adaptive extension ...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dubbo in Spring Boot Application\nDESCRIPTION: This Java code demonstrates how to enable Dubbo in a Spring Boot application using the @EnableDubbo annotation on the main class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableDubbo\npublic class ProviderApplication {\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(ProviderApplication.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic IP Call in Dubbo\nDESCRIPTION: Example code showing how to dynamically specify target IP addresses for Dubbo service calls using UserSpecifiedAddressUtil.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>();\n// ... init\nDemoService demoService = referenceConfig.get();\n\n// for invoke\n// 1. find 10.10.10.10:20880 exist\n// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)\nUserSpecifiedAddressUtil.setAddress(new Address(\"10.10.10.10\", 20880, true));\ndemoService.sayHello(\"world\");\n\n\n// for invoke\n// 1. find 10.10.10.10:any exist\n// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)\nUserSpecifiedAddressUtil.setAddress(new Address(\"10.10.10.10\", 0, true));\ndemoService.sayHello(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo in application.yml\nDESCRIPTION: This YAML configuration sets up the Dubbo application name, protocol, and registry details for a Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n    logger: slf4j\n  protocol:\n    name: tri\n    port: -1\n  registry:\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Defining Blocked Classes in Dubbo (Properties)\nDESCRIPTION: Demonstrates how to define a list of blocked (untrusted) classes in a properties file for Dubbo's serialization security. This file should be placed in the resource directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_16\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.blockedlist\nio.dubbo.block\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Java class implementing the Dubbo service interface with @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Configurations in DubboBootstrap in Java\nDESCRIPTION: Example showing how to configure various components in DubboBootstrap including registry, protocol, configuration center, metadata center, metrics, SSL, and default provider/consumer settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Registry\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://192.168.10.1:2181\");\n...\n\n// Provider protocol configuration\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n...\n\n// Configuration Center\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"zookeeper://192.168.10.2:2181\");\n...\n\n// Metadata Center\nMetadataReportConfig metadataReport = new MetadataReportConfig();\nmetadataReport.setAddress(\"zookeeper://192.168.10.3:2181\");\n...\n\n// Metrics\nMetricsConfig metrics = new MetricsConfig();\nmetrics.setProtocol(\"dubbo\");\n...\n\n// SSL\nSslConfig ssl = new SslConfig();\nssl.setServerKeyCertChainPath(\"/path/ssl/server-key-cert-chain\");\nssl.setServerPrivateKeyPath(\"/path/ssl/server-private-key\");\n...\n\n// Provider configuration (default configuration for ServiceConfig)\nProviderConfig provider = new ProviderConfig();\nprovider.setGroup(\"demo\");\nprovider.setVersion(\"1.0.0\");\n...\n\n// Consumer configuration (default configuration for ReferenceConfig)\nConsumerConfig consumer = new ConsumerConfig();\nconsumer.setGroup(\"demo\");\nconsumer.setVersion(\"1.0.0\");\nconsumer.setTimeout(2000);\n...\n\nDubboBootstrap.getInstance()\n    .application(\"demo-app\")\n    .registry(registry)\n    .protocol(protocol)\n    .configCenter(configCenter)\n    .metadataReport(metadataReport)\n    .module(new ModuleConfig(\"module\"))\n    .metrics(metrics)\n  \t.ssl(ssl)\n  \t.provider(provider)\n  \t.consumer(consumer)\n  \t...\n  \t.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactive Server\nDESCRIPTION: Server configuration and bootstrap code for the reactive Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ReactorServer {\n    private static final int PORT = 50052;\n\n    public static void main(String[] args) {\n        ServiceConfig<GreeterService> reactorService = new ServiceConfig<>();\n        reactorService.setInterface(GreeterService.class);\n        reactorService.setRef(new GreeterServiceImpl());\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.application(new ApplicationConfig(\"tri-reactor-stub-server\"))\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n                .protocol(new ProtocolConfig(CommonConstants.TRIPLE, PORT))\n                .service(reactorService)\n                .start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Routing Logic in Dubbo\nDESCRIPTION: JavaScript routing function that filters Dubbo provider instances based on host IP address. The script accepts invokers, invocation, and context parameters, and returns a filtered list of providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/script-rule.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function route(invokers,invocation,context) {\n      var result = new java.util.ArrayList(invokers.size());\n      for (i = 0; i < invokers.size(); i ++) {\n          if (\"10.20.3.3\".equals(invokers.get(i).getUrl().getHost())) {\n              result.add(invokers.get(i));\n          }\n      }\n      return result;\n  } (invokers, invocation, context));\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in Properties File\nDESCRIPTION: This properties file snippet demonstrates how to configure Zookeeper as a registry center in a Dubbo application using the properties file format. It sets the Zookeeper address and register mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=zookeeper://localhost:2181\n# New users please set this value to enable application-level service discovery, optional values are interface, instance, all; default value is all, future versions will switch the default value to instance\ndubbo.registry.register-mode=instance\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Consumer\nDESCRIPTION: Client implementation to make RPC calls to the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\tReferenceConfig<GreetingsService> reference =\n\t\t\tReferenceBuilder.<GreetingsService>newBuilder()\n\t\t\t.interfaceClass(GreetingsService.class)\n\t\t\t.url(\"tri://localhost:50052\")\n\t\t\t.build();\n\tDubboBootstrap.getInstance().reference(reference).start();\n\tGreetingsService service = reference.get();\n\n\tString message = service.sayHi(\"dubbo\");\n}\n```\n\n----------------------------------------\n\nTITLE: UserSpecifiedAddressUtil Class Definition\nDESCRIPTION: Utility class for setting the specified address before making Dubbo RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster.specifyaddress;\n\npublic class UserSpecifiedAddressUtil {\n    \n    public static void setAddress(Address address) { ... }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Loading IRepository Implementations Using ServiceLoader in Java\nDESCRIPTION: Demonstrates how to use ServiceLoader to load and iterate through IRepository implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nServiceLoader<IRepository> serviceLoader = ServiceLoader.load(IRepository.class);\nIterator<IRepository> it = serviceLoader.iterator();\nwhile (it != null && it.hasNext()){\n    IRepository demoService = it.next();\n    System.out.println(\"class:\" + demoService.getClass().getName());\n    demoService.save(\"tom\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-Go Server with Error Handling\nDESCRIPTION: Server implementation that demonstrates how to return errors in Dubbo-Go RPC methods. The Greet method returns an error when the request parameter doesn't match an expected value, showing how to handle failure cases.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n\t\"dubbo.apache.org/dubbo-go/v3/server\"\n\tgreet \"github.com/apache/dubbo-go-samples/helloworld/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tname := req.Name\n\tif name != \"right name\" {\n\t\terrInfo := fmt.Sprintf(\"name is not right: %s\", name)\n\t\tlogger.Error(errInfo)\n\t\treturn nil, errors.New(errInfo)\n\t}\n\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err = greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err = srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Interface definition for a Dubbo service with synchronous and asynchronous methods\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface HelloService {\n    String sayHello(String name);\n    CompletableFuture<String> sayHelloAsync(String name);\n    CompletableFuture<Person> sayHelloAsyncComplex(String name);\n    CompletableFuture<GenericType<Person>> sayHelloAsyncGenericComplex(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Version and Group in Dubbo XML\nDESCRIPTION: This snippet shows how to configure version and group for Dubbo services. Versioning allows multiple implementations of the same service to coexist, while grouping provides logical separation of services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"1.0.0\" />\n<dubbo:service interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo2\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Enum in Protobuf\nDESCRIPTION: Demonstrates how to define an enum type in Protobuf, representing traffic light colors. The generated Java code shows how Protobuf enums are translated to Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nenum TrafficLightColor {\n    TRAFFIC_LIGHT_COLOR_INVALID = 0;\n    TRAFFIC_LIGHT_COLOR_UNSET = 1;\n    TRAFFIC_LIGHT_COLOR_GREEN = 2;\n    TRAFFIC_LIGHT_COLOR_YELLOW = 3;\n    TRAFFIC_LIGHT_COLOR_RED = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with Annotations\nDESCRIPTION: Example of exposing a Dubbo service using annotations. This snippet shows how to implement a service using the @DubboService annotation, along with the corresponding properties configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n  // AnnotationService服务实现\n\n  @DubboService\n  public class AnnotationServiceImpl implements AnnotationService {\n      @Override\n      public String sayHello(String name) {\n          System.out.println(\"async provider received: \" + name);\n          return \"annotation: hello, \" + name;\n      }\n  }\n```\n\nLANGUAGE: properties\nCODE:\n```\n## dubbo.properties\n\ndubbo.application.name=annotation-provider\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Disabling Registry Center Connection Check in Dubbo (YAML)\nDESCRIPTION: Shows how to disable the registry center connectivity check at startup. This allows the process to start normally even if the registry center connection fails, with automatic reconnection attempts in the background.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    check: false\n```\n\n----------------------------------------\n\nTITLE: Generating Adaptive Method Declaration in Java\nDESCRIPTION: Method that generates the declaration for an adaptive method, including return type, method name, arguments and throws clauses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate String generateMethod(Method method) {\n    String methodReturnType = method.getReturnType().getCanonicalName();\n    String methodName = method.getName();\n    // Generate method content\n    String methodContent = generateMethodContent(method);\n    String methodArgs = generateMethodArguments(method);\n    String methodThrows = generateMethodThrows(method);\n    return String.format(CODE_METHOD_DECLARATION, methodReturnType, methodName, methodArgs, methodThrows, methodContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in Dubbo-Go\nDESCRIPTION: Code snippet demonstrating how to initialize a Dubbo-Go instance with Zookeeper as the registry. It configures the Zookeeper address and sets up a Triple protocol service on port 20000.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_registry_nacos_server\"),\n\tdubbo.WithRegistry(\n\t\tregistry.WithZookeeper(),\n\t\tregistry.WithAddress(\"127.0.0.1:2181\"),\n\t),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20000),\n\t),\n)\n\nsrv, err := ins.NewServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Dubbo Properties\nDESCRIPTION: This properties file snippet demonstrates how to set the Dubbo protocol to 'tri' (Triple) using the dubbo.properties configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\ndubbo.protocol.name=tri\n```\n\n----------------------------------------\n\nTITLE: Application Level Initialization in DefaultApplicationDeployer\nDESCRIPTION: Shows the application-level initialization process including configuration center startup, config loading, module deployer initialization, and metadata center startup with proper synchronization to prevent concurrent initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void initialize() {\n    \t//状态判断 如果已经初始化过了就直接返回\n        if (initialized) {\n            return;\n        }\n        // Ensure that the initialization is completed when concurrent calls\n        //启动锁，确保在并发调用时完成初始化\n        synchronized (startLock) {\n        \t//双重校验锁 如果已经初始化过了就直接返回\n            if (initialized) {\n                return;\n            }\n            // register shutdown hook\n            //注册关闭钩子，这个逻辑基本每个中间件应用都必须要要做的事情了，正常关闭应用回收资源，一般没这个逻辑情况下容易出现一些异常，让我们开发人员很疑惑，而这个逻辑往往并不好处理的干净。\n            registerShutdownHook();\n\t\t\t\n\t\t\t//启动配置中心，感觉Dubbo3耦合了这个玩意\n            startConfigCenter();\n\t\t\t\n\t\t\t//加载配置，一般配置信息当前机器的来源：环境变量，JVM启动参数，配置文字\n            loadApplicationConfigs();\n\n\t\t\t//初始化模块发布器 （发布服务提供和服务引用使用）\n            initModuleDeployers();\n\n            // @since 2.7.8\n            //启动元数据中心\n            startMetadataCenter();\n\t\t\t\n\t\t\t//初始化完成\n            initialized = true;\n\n            if (logger.isInfoEnabled()) {\n                logger.info(getIdentifier() + \" has been initialized!\");\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Service in Java\nDESCRIPTION: Shows how to implement the DemoService interface with business logic. The class is annotated with @DubboService to expose it as a remote service that can be discovered and consumed by clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/service-definition.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    public String hello(String arg) {\n        // put your microservice logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Implementation in Go\nDESCRIPTION: Main function implementation for the client application that makes periodic calls to the server\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tclient := &api.GreeterClientImpl{}\n\tconfig.SetConsumerService(client)\n\tif err := config.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\trequest := &api.HelloRequest{\n\t\tName: \"laurence\",\n\t}\n\n\tfor{\n\t\tif rsp, err := client.SayHello(context.Background(), request); err != nil{\n\t\t\tlogger.Errorf(\"call server error = %s\", err)\n\t\t}else{\n\t\t\tlogger.Infof(\"call server response = %+v\", rsp)\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Provider with @Service Annotation in Dubbo\nDESCRIPTION: Demonstrates how to create a simple service provider using the @Service annotation in Dubbo without any additional configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class AnnotatedGreetingService implements GreetingService {\n    public String sayHello(String name) {\n        return \"hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Java Interface Service for Dubbo\nDESCRIPTION: Example of a Java interface service definition that can be used with both triple and dubbo protocols. This approach is suitable for Java-only environments without cross-language requirements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Dubbo\nDESCRIPTION: YAML configuration to enable the triple protocol in Dubbo with the default port 50051. Setting port to -1 will randomly select an available port starting from 50051.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   name: tri\n   port: 50051\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Interface in Java\nDESCRIPTION: This snippet demonstrates how to define a simple service interface in Java for a Dubbo microservice. The interface contains a single method 'hello' that takes a string argument and returns a string response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/service-definition.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String hello(String arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Dubbo Service Provider in Java\nDESCRIPTION: Configures and starts a Dubbo service provider using DubboBootstrap. It sets up the application, registry (Zookeeper), protocol, and service configurations before starting the bootstrap process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/1-learn-from-a-demo.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.common.constants.CommonConstants;\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.MetadataReportConfig;\nimport org.apache.dubbo.config.ProtocolConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ServiceConfig;\nimport org.apache.dubbo.config.bootstrap.DubboBootstrap;\nimport org.apache.dubbo.demo.DemoService;\n\npublic class Application {\n    public static void main(String[] args) throws Exception {\n            startWithBootstrap();\n    }\n    private static void startWithBootstrap() {\n        ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.application(new ApplicationConfig(\"dubbo-demo-api-provider\"))\n            .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n            .service(service)\n            .start()\n            .await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Exposing a Dubbo Service\nDESCRIPTION: This Java code snippet demonstrates how to implement a Dubbo service interface and expose it using the @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {}\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(version = \"1.0.0\", group = \"dev\", timeout = 5000)\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Publishing Individual Services with Specific Registry in Java\nDESCRIPTION: This code demonstrates how to publish individual services using ServiceConfig with a specific registry in Dubbo. It's suitable for dynamic service publication at runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n\tRegistryConfig hzRegistry = new RegistryConfig();\n    hzRegistry.setId(\"hz\");\n    hzRegistry.setAddress(\"nacos://127.0.0.2:8848\");\n\n    ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n    demoServiceConfig.setInterface(DemoService.class);\n    demoServiceConfig.setRef(new DemoServiceImpl());\n    demoServiceConfig.setVersion(\"1.0.0\");\n\n    demoServiceConfig.setRegistry(hzRegistry);\n\n    demoServiceConfig.export(); // this service will be registered to the default instance of DubboBootstrap.getInstance()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Extension in Dubbo XML\nDESCRIPTION: XML configuration for enabling validation extensions in Dubbo services and providers. It shows how to specify custom validation implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/validation.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service validation=\"xxx,yyy\" />\n<!-- Default value setting, when <dubbo:service> does not configure the validation attribute, use this configuration -->\n<dubbo:provider validation=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Dubbo Spring Boot Starter\nDESCRIPTION: This snippet shows how to add the necessary Maven dependencies for using Dubbo with Spring Boot, including the BOM for version management and the required starters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-bom</artifactId>\n            <version>3.3.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Instances in Dubbo\nDESCRIPTION: Core method for instantiating extension classes with support for dependency injection and wrapper classes. Handles caching, reflection-based instantiation, and AOP-style wrapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate T createExtension(String name) {\n        Class<?> clazz = getExtensionClasses().get(name);\n        T instance = (T) EXTENSION_INSTANCES.get(clazz);\n        if (instance == null) {\n            EXTENSION_INSTANCES.putIfAbsent(clazz, (T) clazz.newInstance());\n            instance = (T) EXTENSION_INSTANCES.get(clazz);\n        }\n        injectExtension(instance);\n        Set<Class<?>> wrapperClasses = cachedWrapperClasses;\n        if (wrapperClasses != null && !wrapperClasses.isEmpty()) {\n            for (Class<?> wrapperClass : wrapperClasses) {\n                instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n            }\n        }\n        return instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Protocol in Java for Dubbo\nDESCRIPTION: This Java code snippet shows how to programmatically set the protocol name to use the custom implementation in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/spi.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"cutomized\");\n```\n\n----------------------------------------\n\nTITLE: Client XDS Configuration\nDESCRIPTION: YAML configuration for the client-side Dubbo-go application using XDS protocol for service discovery\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    xds:\n      protocol: xds\n      address: istiod.istio-system.svc.cluster.local:15010\n  consumer:\n    references:\n      GreeterClientImpl:\n        protocol: tri\n        interface: \"\" # read from stub\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application in YAML\nDESCRIPTION: YAML configuration for a Dubbo application, including protocol and registry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-demo\n  protocol:\n    name: tri\n    port: 50051\n  registry:\n    address: zookeeper://${zookeeper.address:127.0.0.1}:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Consistent Hash Load Balancing with Parameter Selection\nDESCRIPTION: Demonstrates how to configure Consistent Hash load balancing with specific parameters as hash keys. This example shows how to select different arguments for hashing in different methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<DemoService>();\n// ... init\nMap<String, String> parameters = new HashMap<String, String>();\nparameters.put(\"hash.arguments\", \"1\");\nparameters.put(\"sayHello.hash.arguments\", \"0,1\");\nreferenceConfig.setParameters(parameters);\nreferenceConfig.setLoadBalance(\"consistenthash\");\nreferenceConfig.get();\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Dubbo Service in Java\nDESCRIPTION: This code shows how to call an asynchronous Dubbo service from the consumer side and handle the CompletableFuture result.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/async-consumer.xml\"});\n    context.start();\n    final AsyncService asyncService = (AsyncService) context.getBean(\"asyncService\");\n\n    CompletableFuture<String> future = asyncService.sayHello(\"async call request\");\n    future.whenComplete((v, t) -> {\n        if (t != null) {\n            t.printStackTrace();\n        } else {\n            System.out.println(\"Response: \" + v);\n        }\n    });\n    System.out.println(\"Executed before response return.\");\n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with XML\nDESCRIPTION: This snippet demonstrates how to configure a Dubbo service using XML. It sets up the application, registry, protocol, and exposes the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <bean id=\"userReadService\" class=\"com.package.UserReadServiceImpl\"/>\n    <dubbo:service interface=\"com.package.UserReadService\" ref=\"userReadService\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure in Go\nDESCRIPTION: Definition of User structure used as response type, including nested SubInfo structure and Java class name mapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tId      string\n\tName    string\n\tAge     int32\n\tSubInfo SubInfo // Nesting the above substructure SubInfo\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn \"com.ikurento.user.User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML in Java\nDESCRIPTION: This XML configuration file sets up a Dubbo service provider, defining the application, registry, protocol, and service to be exposed. It uses the Nacos registry and exposes a DemoService on a random port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- \n\nProvider application information for dependency calculation\n -->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"/>\n\n    <!-- Using the Nacos registry -->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- Using Dubbo protocol to expose services on random ports -->\n    <dubbo:protocol name=\"dubbo\" port=\"-1\"/>\n\n    <!-- Declare the service interface to be exposed -->\n    <dubbo:service interface=\"org.apache.dubbo.demo.service.DemoService\" ref=\"demoService\" version=\"2.0.0\"/>\n\n    <!-- Implement services like local beans -->\n    <bean id=\"demoService\" class=\"org.apache.dubbo.demo.service.DefaultService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in Spring Boot YAML\nDESCRIPTION: YAML configuration for setting up OpenTelemetry tracing in a Spring Boot Dubbo application. It includes settings for enabling tracing, sampling rate, propagation type, OTLP collector endpoint, and logging pattern for trace information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/otlp.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  tracing:\n    enabled: true # default is false\n    sampling:\n      probability: 0.5 # sampling rate, default is 0.1\n    propagation:\n      type: W3C # W3C/B3 default is W3C\n    tracing-exporter:\n      otlp-config:\n        endpoint: http://localhost:4317\n        timeout: 10s # default is 10s\n        compression-method: none # none/gzip The method used to compress payloads, default is \"none\"\n        headers: # customized added headers, default is empty\n          auth: admin\n\n# tracing info output to logging\nlogging:\n  level:\n    root: info\n  pattern:\n    console: '[%d{dd/MM/yy HH:mm:ss:SSS z}] %t %5p %c{2} [%X{traceId:-}, %X{spanId:-}]: %m%n'\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtensionLoader Factory Method in Java\nDESCRIPTION: Static factory method that creates an ExtensionLoader for a given interface type. Validates that the type is an interface with @SPI annotation and manages singleton instances through caching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        if (!type.isInterface()) {\n            throw new IllegalArgumentException(\"Extension type(\" + type + \") is not interface!\");\n        }\n        if (!withExtensionAnnotation(type)) {\n            throw new IllegalArgumentException(\"Extension type without @SPI Annotation!\");\n        }\n        ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        if (loader == null) {\n            EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));\n            loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);\n        }\n        return loader;\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body Definition in JSON\nDESCRIPTION: JSON structure for defining request parameters with type annotations and Java class mappings for cross-language compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"string@A000\",\n  \"Male\": \"bool@true\",\n  \"SubInfo\": {\n    \"SubID\": \"string@A001\",\n    \"SubMale\": \"bool@false\",\n    \"SubAge\": \"int@18\",\n    \"JavaClassName\":\"string@com.ikurento.user.SubInfo\"\n  },\n  \"JavaClassName\": \"string@com.ikurento.user.CallUserStruct\"\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration for Dubbo Validation\nDESCRIPTION: Required Maven dependencies for implementing JSR303 validation in Dubbo using validation-api and hibernate-validator.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>javax.validation</groupId>\n    <artifactId>validation-api</artifactId>\n    <version>1.0.0.GA</version>\n</dependency>\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>4.2.0.Final</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Call in Node.js\nDESCRIPTION: This TypeScript code demonstrates how to call a Dubbo service method using the configured dubbo2.js client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {demoService} from './dubboConfig'\n\ndemoService.sayHello('kirito').then(({res,err})=>{\n    console.log(res)\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Protocol Implementation - Java\nDESCRIPTION: Example implementation of a custom protocol extension including Protocol, Exporter and Invoker classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.Protocol;\n \npublic class XxxProtocol implements Protocol {\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        return new XxxExporter(invoker);\n    }\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        return new XxxInvoker(type, url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 启动TypeScript服务器\nDESCRIPTION: 使用tsx运行TypeScript服务器代码。这个命令直接执行TypeScript文件而不需要预先编译。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nnpx tsx server.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Interface definition for a simple Dubbo service that accepts a name parameter and returns a greeting\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-triple-with-apisix-gateway.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n\tString sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML\nDESCRIPTION: XML configuration example for a Dubbo service provider, including application name, registry address, protocol settings and service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/xml.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"demo-provider\"/>\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n    <dubbo:protocol name=\"dubbo\" port=\"20890\"/>\n    <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n    <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building the Dubbo Samples Project\nDESCRIPTION: Commands to clone the Dubbo samples repository, navigate to the dubbo protocol example, and build the project using Maven.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd dubbo-samples/2-advanced/dubbo-samples-dubbo\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo Properties Configuration\nDESCRIPTION: Core Dubbo configuration properties including registry, metadata, protocol and QoS settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.registry.simplified=true\n\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n\ndubbo.application.qos.port=33333\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Java interface definition for a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Context with XML\nDESCRIPTION: XML configuration file that defines the Dubbo consumer application settings, including application name, Nacos registry connection, and service reference configuration. Located at /META-INF/spring/dubbo-consumer-context.xml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- Provider application info for dependency calculation -->\n    <dubbo:application name=\"dubbo-consumer-xml-demo\"/>\n\n    <!-- Use Nacos registry -->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- Reference service interface -->\n    <dubbo:reference id=\"demoService\" interface=\"com.alibaba.dubbo.demo.service.DemoService\" version=\"2.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Interfaces in Java for Dubbo\nDESCRIPTION: Service interface definition showing CallbackService with a method to register a callback listener and the CallbackListener interface with the callback method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback;\n \npublic interface CallbackService {\n    void addListener(String key, CallbackListener listener);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback;\n \npublic interface CallbackListener {\n    void changed(String msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML\nDESCRIPTION: Example XML configuration for a Dubbo service provider that exposes a service. It includes application name, registry address, protocol configuration, and service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/xml.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"demo-provider\"/>\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n    <dubbo:protocol name=\"dubbo\" port=\"20890\"/>\n    <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n    <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Instance in Dubbo SPI\nDESCRIPTION: Details the createExtension method, which loads extension classes, creates instances, injects dependencies, applies wrappers, and initializes the extension object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate T createExtension(String name, boolean wrap) {\n    // Load all extension classes from the configuration file, which can obtain the \"configuration item name\" to \"configuration class\" mapping table\n    Class<?> clazz = getExtensionClasses().get(name);\n    // If there is no extension for the interface, or the implementation class of the interface does not allow duplication but actually duplicates, throw an exception directly\n    if (clazz == null || unacceptableExceptions.contains(name)) {\n        throw findException(name);\n    }\n    try {\n        T instance = (T) EXTENSION_INSTANCES.get(clazz);\n        // This code ensures that the extension class is constructed only once, meaning it's a singleton.\n        if (instance == null) {\n            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.getDeclaredConstructor().newInstance());\n            instance = (T) EXTENSION_INSTANCES.get(clazz);\n        }\n        // Inject dependencies into the instance\n        injectExtension(instance);\n\n        // If wrapping is enabled, automatically wrap it.\n        // For example, I defined the extension of DubboProtocol based on Protocol, but in Dubbo, it's not directly used as DubboProtocol; rather, it's used as its wrapper class\n        // ProtocolListenerWrapper\n        if (wrap) {\n\n            List<Class<?>> wrapperClassesList = new ArrayList<>();\n            if (cachedWrapperClasses != null) {\n                wrapperClassesList.addAll(cachedWrapperClasses);\n                wrapperClassesList.sort(WrapperComparator.COMPARATOR);\n                Collections.reverse(wrapperClassesList);\n            }\n    \n            // Loop to create Wrapper instances\n            if (CollectionUtils.isNotEmpty(wrapperClassesList)) {\n                for (Class<?> wrapperClass : wrapperClassesList) {\n                    Wrapper wrapper = wrapperClass.getAnnotation(Wrapper.class);\n                    if (wrapper == null\n                            || (ArrayUtils.contains(wrapper.matches(), name) && !ArrayUtils.contains(wrapper.mismatches(), name))) {\n                        // Pass the current instance as a parameter to the Wrapper constructor and create the Wrapper instance through reflection.\n                        // Then inject dependencies into the Wrapper instance, and finally assign the Wrapper instance back to the instance variable\n                        instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n                    }\n                }\n            }\n        }\n        // Initialization\n        initExtension(instance);\n        return instance;\n    } catch (Throwable t) {\n        throw new IllegalStateException(\"Extension instance (name: \" + name + \", class: \" +\n                type + \") couldn't be instantiated: \" + t.getMessage(), t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Call using API\nDESCRIPTION: Example of making generic calls using Dubbo's API approach with async support\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate GenericService genericService;\n\npublic static void main(String[] args) throws Exception {\n\tApplicationConfig applicationConfig = new ApplicationConfig();\n\tapplicationConfig.setName(\"generic-call-consumer\");\n\tRegistryConfig registryConfig = new RegistryConfig();\n\tregistryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n\n\tReferenceConfig<GenericService> referenceConfig = new ReferenceConfig<>();\n\treferenceConfig.setInterface(\"org.apache.dubbo.samples.generic.call.api.HelloService\");\n\tapplicationConfig.setRegistry(registryConfig);\n\treferenceConfig.setApplication(applicationConfig);\n\treferenceConfig.setGeneric(\"true\");\n\t// do not wait for result, 'false' by default\n\treferenceConfig.setAsync(true);\n\treferenceConfig.setTimeout(7000);\n\n\tgenericService = referenceConfig.get();\n}\n\npublic static void invokeSayHello() throws InterruptedException {\n\tObject result = genericService.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"world\"});\n\tCountDownLatch latch = new CountDownLatch(1);\n\n\tCompletableFuture<String> future = RpcContext.getContext().getCompletableFuture();\n\tfuture.whenComplete((value, t) -> {\n\t\tSystem.err.println(\"invokeSayHello(whenComplete): \" + value);\n\t\tlatch.countDown();\n\t});\n\n\tSystem.err.println(\"invokeSayHello(return): \" + result);\n\tlatch.await();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Reference Proxy Using DubboBootstrap in Java\nDESCRIPTION: This snippet illustrates how to use DubboBootstrap as the startup entry to subscribe to services and obtain proxy objects in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    ReferenceConfig<GreetingsService> reference =\n            ReferenceBuilder.<GreetingsService>newBuilder()\n            .interfaceClass(GreetingsService.class)\n            .build();\n    DubboBootstrap.getInstance().reference(reference).start();\n    GreetingsService service = reference.get();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Rest Service with Basic Interface and Implementation\nDESCRIPTION: Example of defining a REST service interface with Triple protocol annotations and implementing the service. Shows how to use @Mapping annotation to define REST paths and methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 服务接口\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// 服务实现\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// 模型\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection Using Dubbo Annotation\nDESCRIPTION: Demonstrates how to use the @DubboReference annotation to specify a direct URL connection to a service provider using the Tri protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(url=\"tri://localhost:50051\")\nprivate XxxService xxxService\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Service\nDESCRIPTION: Java implementation of the reactive service using Project Reactor's Flux for streaming operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class GreeterServiceImpl extends DubboGreeterServiceTriple.GreeterServiceImplBase {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GreeterServiceImpl.class);\n\n    @Override\n    public Flux<GreeterReply> greetManyToMany(Flux<GreeterRequest> request) {\n        return request.doOnNext(req -> LOGGER.info(\"greetManyToMany get data: {}\", req))\n                .map(req -> GreeterReply.newBuilder().setMessage(req.getName() + \" -> server get\").build())\n                .doOnNext(res -> LOGGER.info(\"greetManyToMany response data: {}\", res));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Filters for Specific Service Reference in Java\nDESCRIPTION: Annotation-based configuration to skip execution of specific filters for a particular service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(filter=\"-accesslog,-tps\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Consumer-side Asynchronous Calls with CompletableFuture in Dubbo\nDESCRIPTION: Example of a consumer using CompletableFuture to make asynchronous calls to a Dubbo service. This demonstrates processing responses asynchronously using whenComplete() callbacks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference  \nprivate AsyncService asyncService;  \n\n@Override  \npublic void run(String... args) throws Exception {  \n    // Call asynchronous interface  \n    CompletableFuture<String> future1 = asyncService.asyncInvoke(\"async call request1\");  \n    future1.whenComplete((v, t) -> {  \n        if (t != null) {  \n            t.printStackTrace();  \n        } else {  \n            System.out.println(\"AsyncTask Response-1: \" + v);  \n        }  \n    });  \n    // Two calls do not return in order  \n    CompletableFuture<String> future2 = asyncService.asyncInvoke(\"async call request2\");  \n    future2.whenComplete((v, t) -> {  \n        if (t != null) {  \n            t.printStackTrace();  \n        } else {  \n            System.out.println(\"AsyncTask Response-2: \" + v);  \n        }  \n    });  \n    // Consumer asynchronous call  \n    CompletableFuture<String> future3 = CompletableFuture.supplyAsync(() -> {  \n        return asyncService.invoke(\"invoke call request3\");  \n    });  \n    future3.whenComplete((v, t) -> {  \n        if (t != null) {  \n            t.printStackTrace();  \n        } else {  \n            System.out.println(\"AsyncTask Response-3: \" + v);  \n        }  \n    });  \n\n    System.out.println(\"AsyncTask Executed before response return.\");  \n}  \n```\n\n----------------------------------------\n\nTITLE: Defining Router Interface in Dubbo\nDESCRIPTION: The Router interface provides service routing capabilities in Dubbo. It includes methods for filtering invokers based on various criteria, handling invoker list updates, and resource cleanup. The interface extends Comparable to support router ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster;\n\npublic interface Router extends Comparable<Router> {\n\n    @Deprecated\n    List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n    \n    <T> RouterResult<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation,\n                                                     boolean needToPrintMessage) throws RpcException;\n\n    <T> void notify(List<Invoker<T>> invokers);\n\n    void stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Authentication in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Zookeeper authentication in a Dubbo application. It specifies the Zookeeper address, register mode, and authentication credentials.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: zookeeper://localhost:2181\n   register-mode: instance # New users please set this value to enable application-level service discovery, optional values are interface, instance, all\n   username: hello\n   password: 1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchanger in Dubbo XML\nDESCRIPTION: XML configuration examples showing how to specify a custom exchanger at protocol or provider level in Dubbo configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exchanger.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol exchanger=\"xxx\" />\n<!-- Default value setting, when <dubbo:protocol> does not configure the exchanger attribute, this configuration is used -->\n<dubbo:provider exchanger=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registry Centers in Java\nDESCRIPTION: This snippet shows how to configure multiple registry centers in Dubbo, associating different services with specific registry instances using ids.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    RegistryConfig bjRegistry = new RegistryConfig();\n    bjRegistry.setId(\"bj\");\n    bjRegistry.setAddress(\"nacos://127.0.0.1:8848\");\n\n    RegistryConfig hzRegistry = new RegistryConfig();\n    hzRegistry.setId(\"hz\");\n    hzRegistry.setAddress(\"nacos://127.0.0.2:8848\");\n\n    DubboBootstrap.getInstance()\n            .registry(bjRegistry)\n            .registry(hzRegistry)\n            .service(ServiceBuilder.newBuilder().registryIds(\"bj\").interfaceClass(GreetingsService.class).ref(new GreetingsServiceImpl()).build())\n            .service(ServiceBuilder.newBuilder().registryIds(\"hz\").interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())\n            .start()\n            .await();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Call using API\nDESCRIPTION: Example of making generic calls using Dubbo's API approach with async support\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate GenericService genericService;\n\npublic static void main(String[] args) throws Exception {\n\tApplicationConfig applicationConfig = new ApplicationConfig();\n\tapplicationConfig.setName(\"generic-call-consumer\");\n\tRegistryConfig registryConfig = new RegistryConfig();\n\tregistryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n\n\tReferenceConfig<GenericService> referenceConfig = new ReferenceConfig<>();\n\treferenceConfig.setInterface(\"org.apache.dubbo.samples.generic.call.api.HelloService\");\n\tapplicationConfig.setRegistry(registryConfig);\n\treferenceConfig.setApplication(applicationConfig);\n\treferenceConfig.setGeneric(\"true\");\n\t// do not wait for result, 'false' by default\n\treferenceConfig.setAsync(true);\n\treferenceConfig.setTimeout(7000);\n\n\tgenericService = referenceConfig.get();\n}\n\npublic static void invokeSayHello() throws InterruptedException {\n\tObject result = genericService.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"world\"});\n\tCountDownLatch latch = new CountDownLatch(1);\n\n\tCompletableFuture<String> future = RpcContext.getContext().getCompletableFuture();\n\tfuture.whenComplete((value, t) -> {\n\t\tSystem.err.println(\"invokeSayHello(whenComplete): \" + value);\n\t\tlatch.countDown();\n\t});\n\n\tSystem.err.println(\"invokeSayHello(return): \" + result);\n\tlatch.await();\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Interface Definition with Adaptive Annotations\nDESCRIPTION: Definition of the Protocol interface showing which methods are marked as adaptive using the @Adaptive annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"dubbo\")\npublic interface Protocol {\n\n    int getDefaultPort();\n\n    @Adaptive\n    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;\n\n    @Adaptive\n    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;\n\n    void destroy();\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Services with ReferenceConfig in Dubbo\nDESCRIPTION: Shows how to reference and consume Dubbo services using ReferenceConfig. Includes application configuration, registry setup, and service reference configuration for accessing remote services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ConsumerConfig;\nimport org.apache.dubbo.config.ReferenceConfig;\nimport com.xxx.DemoService;\n\npublic class DemoConsumer {\n    public static void main(String[] args) {\n        // Current application configuration\n        ApplicationConfig application = new ApplicationConfig();\n        application.setName(\"demo-consumer\");\n\n        // Connection to registry configuration\n        RegistryConfig registry = new RegistryConfig();\n        registry.setAddress(\"zookeeper://10.20.130.230:2181\");\n\n        // Note: ReferenceConfig is a heavy object, encapsulating the connection to the registry and the connection to the service provider\n        // Referencing remote service\n        ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // This instance is heavy, encapsulating the connection to the registry and to the provider, please cache it, otherwise it may cause memory and connection leaks\n        reference.setApplication(application);\n        reference.setRegistry(registry); // Multiple registries can use setRegistries()\n        reference.setInterface(DemoService.class);\n        reference.setVersion(\"1.0.0\");\n\n        // Use demoService just like local bean\n        // Note: This proxy object encapsulates all communication details and is relatively heavy, please cache for reuse\n        DemoService demoService = reference.get();\n        demoService.sayHello(\"Dubbo\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dubbo-js Code from Proto Definition\nDESCRIPTION: Shell command to generate TypeScript code from the Proto definition using Dubbo-js plugins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/ web/web-announcement.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPATH=$PATH:$(pwd)/node_modules/.bin \\\n  protoc -I src/util/proto \\\n  --es_out src/util/gen \\\n  --es_opt target=ts \\\n  --apache-dubbo-es_out src/util/gen \\\n  --apache-dubbo-es_opt target=ts \\\n  example.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Service Class in Java\nDESCRIPTION: Example of a Java mock implementation class that provides fallback data when an RpcException occurs. The class must implement the service interface and have a no-args constructor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class BarServiceMock implements BarService {\n    public String sayHello(String name) {\n        // 你可以伪造容错数据，此方法只在出现RpcException时被执行\n        return \"容错数据\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Service with cURL - Shell Command\nDESCRIPTION: cURL command to test the running Dubbo service endpoint\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50051/org.apache.dubbo.samples.quickstart.dubbo.api.DemoService/sayHello/\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadBalance Implementations in Dubbo\nDESCRIPTION: This snippet shows the configuration file content for defining LoadBalance implementations in Dubbo, including random, roundrobin, leastactive, and consistenthash.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrandom=com.alibaba.dubbo.rpc.cluster.loadbalance.RandomLoadBalance\nroundrobin=com.alibaba.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance\nleastactive=com.alibaba.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance\nconsistenthash=com.alibaba.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Provider Implementation\nDESCRIPTION: Implementation of a Dubbo service provider that exposes the GreetingsService implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ServiceConfig<GreetingsService> service = new ServiceConfig<>();\n        service.setApplication(new ApplicationConfig(\"first-dubbo-provider\"));\n        service.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n        service.setInterface(GreetingsService.class);\n        service.setRef(new GreetingsServiceImpl());\n        service.export();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Dubbo Service\nDESCRIPTION: This Java code shows how to use the @DubboReference annotation to inject and consume a Dubbo service in a Spring component.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class DemoClient {\n    @DubboReference\n    private DemoService demoService;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StickFirstStateRouter in Java for Apache Dubbo\nDESCRIPTION: This class extends AbstractStateRouter to implement a custom routing strategy that sticks to the first provider used. If the first provider becomes unavailable, it selects a new one. The router maintains state by tracking the initially selected invoker.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/router.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.router.consumer.router;\n\nimport org.apache.dubbo.common.URL;\nimport org.apache.dubbo.common.config.configcenter.ConfigChangeType;\nimport org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;\nimport org.apache.dubbo.common.config.configcenter.ConfigurationListener;\nimport org.apache.dubbo.common.logger.ErrorTypeAwareLogger;\nimport org.apache.dubbo.common.logger.LoggerFactory;\nimport org.apache.dubbo.common.utils.CollectionUtils;\nimport org.apache.dubbo.common.utils.Holder;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode;\nimport org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;\nimport org.apache.dubbo.rpc.cluster.router.state.BitList;\n\npublic class StickFirstStateRouter<T> extends AbstractStateRouter<T> implements ConfigurationListener {\n    public StickFirstStateRouter(URL url) {\n        super(url);\n    }\n\n    public static final String NAME = \"STICK_FIRST_ROUTER\";\n    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(StickFirstStateRouter.class);\n    private volatile BitList<Invoker<T>> firstInvokers;\n\n    @Override\n    protected BitList<Invoker<T>> doRoute(BitList<Invoker<T>> invokers, URL url, Invocation invocation, boolean needToPrintMessage, Holder<RouterSnapshotNode<T>> routerSnapshotNodeHolder, Holder<String> messageHolder) throws RpcException {\n        if (CollectionUtils.isEmpty(invokers)) {\n            if (needToPrintMessage) {\n                messageHolder.set(\"Directly Return. Reason: Invokers from previous router is empty.\");\n            }\n            return invokers;\n        }\n        BitList<Invoker<T>> copy = invokers.clone();\n        if (CollectionUtils.isEmpty(copy)) {\n            this.firstInvokers = new BitList<>(BitList.emptyList());\n            this.firstInvokers.add(copy.get(0));\n        } else {\n            this.firstInvokers = copy.and(invokers);\n            if(CollectionUtils.isEmpty(this.firstInvokers)){\n                this.firstInvokers.add(copy.get(0));\n            }\n        }\n        return this.firstInvokers;\n    }\n\n    @Override\n    public void process(ConfigChangedEvent event) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Notification of tag rule, change type is: \" + event.getChangeType() + \", raw rule is:\\n \" +\n                    event.getContent());\n        }\n        // Reset\n        if (event.getChangeType().equals(ConfigChangeType.DELETED)) {\n            this.firstInvokers = null;\n        }\n    }\n\n    @Override\n    public void stop() {\n        super.stop();\n        this.firstInvokers = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Properties Configuration Example\nDESCRIPTION: Shows how to configure Dubbo using properties file (dubbo.properties). This approach is useful for simple configurations or when sharing settings across multiple Spring containers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\n# 应用名\ndubbo.application.name=dubbodemo-provider\n# 注册中心地址\ndubbo.registry.address=zookeeper://localhost:2181\n# 广播的注册中心样例\n#dubbo.registry.address=multicast://224.5.6.7:1234\n# 调用协议地址\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=28080\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Rest Service with Basic Interface and Implementation\nDESCRIPTION: Example of defining a REST service interface with Triple protocol annotations and implementing the service. Shows how to use @Mapping annotation to define REST paths and methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 服务接口\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// 服务实现\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// 模型\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in Spring XML\nDESCRIPTION: XML snippet showing how to configure the database connection properties in Spring XML files for the different services. This includes the URL, username, and password for database connectivity.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n    <property name=\"url\" value=\"jdbc:mysql://x.x.x.x:3306/xxx\" />\n    <property name=\"username\" value=\"xxx\" />\n    <property name=\"password\" value=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Initiating Remote Calls to Dubbo Service\nDESCRIPTION: Demonstrates how to bootstrap a Dubbo consumer application and initiate a remote call to a service provider. The code shows the full lifecycle from creating the application context to making the service call and handling the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class ConsumerBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);\n        context.start();\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);\n        String hello = greetingServiceConsumer.doSayHello(\"zookeeper\");\n        System.out.println(\"result: \" + hello);\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: This code shows how to implement a Dubbo service interface and publish it using annotation configuration. It includes the @DubboService annotation for service exposure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-introduction.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@DubboService\npublic class GreetingsServiceImpl implements GreetingsService {\n    @Override\n    public String sayHi(String name) {\n        return \"hi, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Point-to-Point Direct Connection in Dubbo in Java\nDESCRIPTION: Example showing how to configure a direct connection to a Dubbo service provider without using a registry, by specifying the target URL directly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n...\n\n// This instance is heavy, encapsulating the connection to the registry and the connection to the provider, please cache it, otherwise it may cause memory and connection leaks\nReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>();\n// For direct point-to-point connection, you can specify the target address using reference.setUrl(), and setting the URL will bypass the registry,\n// where the protocol corresponds to provider.setProtocol()'s value, the port corresponds to provider.setPort()'s value,\n// and the path corresponds to service.setPath()'s value. If the path is not set, the default path is the interface name.\nreference.setUrl(\"dubbo://10.20.130.230:20880/com.xxx.DemoService\");\n\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Listener Interface in Java\nDESCRIPTION: Defines the CallbackListener interface with a method to handle changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback;\n\npublic interface CallbackListener {\n    void changed(String msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Strategy at Service Consumer Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the broadcast strategy at the service consumer level. Consumer-side configurations take precedence over provider-side configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_11\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"broadcast\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider Bootstrap with Annotations\nDESCRIPTION: Java class that bootstraps a Dubbo service provider using annotation-driven configuration with @EnableDubbo and @PropertySource.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.provider;\n\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.PropertySource;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} provider demo\n */\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.demo.service\")\n@PropertySource(value = \"classpath:/provider-config.properties\")\npublic class DemoServiceProviderBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(DemoServiceProviderBootstrap.class);\n        context.refresh();\n        System.out.println(\"DemoService provider is starting...\");\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Using Java API\nDESCRIPTION: Demonstrates how to configure and export a Dubbo service using the Raw API approach. Sets up application details, registry configuration, and service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n        ServiceConfig<GreetingsService> service = new ServiceConfig<>();\n        service.setApplication(new ApplicationConfig(\"first-dubbo-provider\"));\n        service.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n        service.setInterface(GreetingsService.class);\n        service.setRef(new GreetingsServiceImpl());\n        service.export();\n        System.out.println(\"first-dubbo-provider is running.\");\n        System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CompletableFuture Interface in Java\nDESCRIPTION: Defines a service interface using CompletableFuture for asynchronous programming in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic interface AsyncService {\n    CompletableFuture<String> sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Service using Java Client\nDESCRIPTION: Java code demonstrating how to create a Dubbo client to access the DemoService. It specifies the server address and protocol, builds a reference to the service, and makes an RPC call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) {\n        DemoService demoService =\n            ReferenceBuilder.newBuilder()\n            .interfaceClass(DemoService.class)\n            .url(\"tri://localhost:50051\")\n            .build()\n            .get();\n\n        String message = demoService.sayHello(\"dubbo\");\n        System.out.println(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Publishing with Separate Ports in Dubbo\nDESCRIPTION: Configuration for publishing a service using multiple protocols (Triple and Dubbo) with different ports. This allows the same service to be accessed via different protocols simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocols:\n   tri:\n     name: tri\n     port: 50051\n   dubbo:\n     name: dubbo\n\t port: 20880\n```\n\n----------------------------------------\n\nTITLE: Launching Dubbo Consumer Application in Java\nDESCRIPTION: Configures and launches a Dubbo consumer application using DubboBootstrap, including registry, protocol, and reference configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/19-重新来过从一个服务消费者的Demo说起.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class ConsumerApplication {\n    public static void main(String[] args) {\n        runWithBootstrap();\n    }\n    private static void runWithBootstrap() {\n        ReferenceConfig<DemoService> reference = new ReferenceConfig<>();\n        reference.setInterface(DemoService.class);\n        reference.setGeneric(\"true\");\n        reference.setProtocol(\"\");\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"dubbo-demo-api-consumer\");\n        applicationConfig.setQosEnable(false);\n        applicationConfig.setQosPort(-1);\n        bootstrap.application(applicationConfig)\n            .registry(new RegistryConfig(\"zookeeper://8.131.79.126:2181\"))\n            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n            .reference(reference)\n            .start();\n\n        DemoService demoService = bootstrap.getCache().get(reference);\n        String message = demoService.sayHello(\"dubbo\");\n        System.out.println(message);\n\n        GenericService genericService = (GenericService) demoService;\n        Object genericInvokeResult = genericService.$invoke(\"sayHello\", new String[]{String.class.getName()},\n            new Object[]{\"dubbo generic invoke\"});\n        System.out.println(genericInvokeResult);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Multiple Dubbo Services\nDESCRIPTION: Example showing how to publish multiple services with shared provider configuration using DubboBootstrap.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    ProviderConfig providerConfig = new ProviderConfig();\n    providerConfig.setTimeout(5000);\n\n    ProtocolConfig protocolConfig = new ProtocolConfig(CommonConstants.TRIPLE, 50051);\n\n    DubboBootstrap.getInstance()\n        .protocol(protocolConfig)\n        .provider(providerConfig)\n        .service(ServiceBuilder.newBuilder().interfaceClass(FooService.class).ref(new FooServiceImpl()).build())\n        .service(ServiceBuilder.newBuilder().interfaceClass(BarService.class).ref(new BarServiceImpl()).build())\n        .start()\n        .await();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Listener in Consumer Java Code\nDESCRIPTION: Shows how to implement and use the CallbackListener in the Consumer side Java code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-invoke.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nCallbackService callbackService = ...;\ncallbackService.addListener(\"foo.bar\", new CallbackListener() {\n        public void changed(String msg) {\n            System.out.println(\"callback1:\" + msg);\n        }\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining LoadBalance Extension in Dubbo using Java\nDESCRIPTION: This code snippet demonstrates how to obtain a LoadBalance extension implementation in Dubbo using ExtensionLoader.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nLoadBalance lb = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(loadbalanceName);\n```\n\n----------------------------------------\n\nTITLE: Configuring Old Version Service Consumer\nDESCRIPTION: XML configuration for defining an old version (1.0.0) service consumer reference in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Consumer Dependency Check in Dubbo (YAML)\nDESCRIPTION: Demonstrates how to globally disable the consumer-side dependency check at startup. This allows the application to start even when dependent services are not available, useful for testing or when dealing with circular dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    check: false\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Interface in Java\nDESCRIPTION: Interface defining callback methods for return values and exceptions\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ninterface Notify {\n    public void onreturn(Person msg, Integer id);\n    public void onthrow(Throwable ex, Integer id);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Externalized Configuration Key in Dubbo (YAML)\nDESCRIPTION: YAML configuration to enable externalized configuration and specify a custom key for the configuration file in Dubbo's Zookeeper configuration center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: zookeeper://127.0.0.1:2181\n    config-file: dubbo.properties\n```\n\n----------------------------------------\n\nTITLE: Programmatic Dubbo Service Configuration\nDESCRIPTION: Shows how to configure and expose Dubbo services programmatically using the API approach, without relying on Spring XML or annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nimport com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ProviderConfig;\nimport com.alibaba.dubbo.rpc.config.ServiceConfig;\nimport com.xxx.XxxService;\nimport com.xxx.XxxServiceImpl;\n\n// 服务实现\nXxxService xxxService = new XxxServiceImpl();\n\n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n\n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n\n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n\n// 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口\n\n// 服务提供者暴露服务配置\nServiceConfig<XxxService> service = new ServiceConfig<XxxService>(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏\nservice.setApplication(application);\nservice.setRegistry(registry); // 多个注册中心可以用setRegistries()\nservice.setProtocol(protocol); // 多个协议可以用setProtocols()\nservice.setInterface(XxxService.class);\nservice.setRef(xxxService);\nservice.setVersion(\"1.0.0\");\n\n// 暴露及注册服务\nservice.export();\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: This snippet demonstrates how to define a Dubbo service interface. It shows a simple UserReadService interface with a method to get a user by ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic interface UserReadService{\n    public User getUserById(Long userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Dubbo (XML)\nDESCRIPTION: This XML configuration snippet shows how to enable the Triple protocol in a Dubbo application using XML-based configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"tri\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Services with Triple Protocol in Java\nDESCRIPTION: Example code showing how to define and implement a REST service interface using Triple protocol with custom path mappings and parameter annotations. The example demonstrates defining service methods with different parameter types and REST-specific annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\n// Service Interface\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// Service Implementation\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// Model\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Using Annotations\nDESCRIPTION: Demonstrates annotation-based service configuration using @DubboService annotation for service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  // AnnotationService service implementation\n\n  @DubboService\n  public class AnnotationServiceImpl implements AnnotationService {\n      @Override\n      public String sayHello(String name) {\n          System.out.println(\"async provider received: \" + name);\n          return \"annotation: hello, \" + name;\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Server with Context Handling\nDESCRIPTION: Implements a Dubbo-go server that handles the GreetService and retrieves context values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/attachments.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n\t\"dubbo.apache.org/dubbo-go/v3/server\"\n\tgreet \"github.com/apache/dubbo-go-samples/context/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tattachments := ctx.Value(constant.AttachmentKey).(map[string]interface{})\n\tif value1, ok := attachments[\"key1\"]; ok {\n\t\tlogger.Infof(\"Dubbo attachment key1 = %s\", value1.([]string)[0])\n\t}\n\tif value2, ok := attachments[\"key2\"]; ok {\n\t\tlogger.Infof(\"Dubbo attachment key2 = %s\", value2.([]string)[0])\n\t}\n\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo and Nacos Client Dependencies in Maven\nDESCRIPTION: Adds the necessary dependencies for Dubbo and Nacos client to the Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba.nacos</groupId>\n      <artifactId>nacos-client</artifactId>\n      <version>2.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Protocol in Java for Dubbo SPI\nDESCRIPTION: This snippet demonstrates how to create a Java class that implements the org.apache.dubbo.rpc.Protocol interface for a custom RPC protocol in Dubbo. The @Activate annotation is used to mark the class for automatic activation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/spi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.spi.demo;\nimport org.apache.dubbo.rpc.Protocol;\n\n@Activate\npublic class CustomizedProtocol implements Protocol {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LivenessProbe Extension in Dubbo META-INF File\nDESCRIPTION: Shows the content of the META-INF file required to register the custom LivenessProbe implementation with Dubbo's extension mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/liveness.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nxxx=com.xxx.XxxLivenessProbe\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Dubbo-Go\nDESCRIPTION: This snippet demonstrates how to configure Dubbo-Go to use Nacos as the registry. It specifies the registry address and sets up the protocol for the server instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_registry_nacos_server\"),\n\tdubbo.WithRegistry(\n\t\tregistry.WithNacos(),\n\t\tregistry.WithAddress(\"127.0.0.1:8848\"),\n\t),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20000),\n\t),\n)\n\nsrv, err := ins.NewServer()\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Java interface definition for a Dubbo service named DemoService. This interface declares a single method sayHello that takes a String parameter and returns a String.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic interface DemoService {\n   String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RouterFactory Extension in Dubbo\nDESCRIPTION: Configuration file needed to register a custom RouterFactory implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/router.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxRouterFactory\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Adaptive Extension Class in Dubbo\nDESCRIPTION: Method that generates and compiles the code for an adaptive extension class. It uses a code generator to create the class source code and then compiles it using Dubbo's compiler (javassist by default).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate Class<?> createAdaptiveExtensionClass() {\n    // 构建自适应拓展代码\n    String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\n    ClassLoader classLoader = findClassLoader();\n    // 获取编译器实现类\n    org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n    // 编译代码，生成 Class\n    return compiler.compile(code, classLoader);\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming a Service with @Reference Annotation in Dubbo\nDESCRIPTION: Shows how to reference and consume a Dubbo service using the @Reference annotation within a Spring component.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Dubbo Provider XML Configuration Example\nDESCRIPTION: Demonstrates a complete XML configuration for exposing a UserReadService as a Dubbo service, including application, registry, protocol configurations and service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <bean id=\"userReadService\" class=\"com.package.UserReadServiceImpl\"/>\n    <dubbo:service interface=\"com.package.UserReadService\" ref=\"userReadService\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for Dubbo Filter Extension\nDESCRIPTION: Shows the directory structure for implementing a custom Dubbo Filter, including Java source files, configuration files, and SPI definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-org\n            |-apache\n                |-dubbo\n                    |-samples\n                        |-extensibility\n                            |-filter\n                                |-provider\n                                    |-AppendedFilter.java (Implements Filter interface)\n    |-resources\n        |-META-INF\n            |-application.properties (Dubbo Provider configuration file)\n            |-dubbo\n                |-org.apache.dubbo.rpc.Filter (Plain text file)\n```\n\n----------------------------------------\n\nTITLE: Spring MVC REST API Definition for Dubbo Service\nDESCRIPTION: This interface defines a REST API using Spring MVC annotations. It exposes methods for HTTP GET and POST operations with parameter binding via @RequestParam and @RequestBody. The interface serves as a contract for implementing a Dubbo service with REST capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@RestController()\n@RequestMapping(\"/demoService\")\npublic interface DemoService {\n    @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n    Integer hello(@RequestParam Integer a, @RequestParam Integer b);\n\n    @RequestMapping(value = \"/error\", method = RequestMethod.GET)\n    String error();\n\n    @RequestMapping(value = \"/say\", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)\n    String sayHello(@RequestBody String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dubbo in Spring Boot Application\nDESCRIPTION: Java class showing the main entry point for a Dubbo Spring Boot application with @EnableDubbo annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableDubbo\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializationOptimizer for Kryo in Java\nDESCRIPTION: This Java code snippet shows how to implement the SerializationOptimizer interface to register classes for optimized Kryo serialization in Dubbo. It improves performance by pre-registering classes that will be serialized.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class SerializationOptimizerImpl implements SerializationOptimizer {\n\n    public Collection<Class> getSerializableClasses() {\n        List<Class> classes = new LinkedList<Class>();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        return classes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Service in Dubbo\nDESCRIPTION: Example implementation of an asynchronous service using Dubbo's AsyncContext. The service demonstrates how to handle asynchronous processing by starting a new thread and using context switching to maintain request context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-async-server.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"Main sayHello() method start.\");\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            asyncContext.signalContextSwitch();\n            System.out.println(\"Attachment from consumer: \" + RpcContext.getContext().getAttachment(\"consumer-key1\"));\n            System.out.println(\"    -- Async start.\");\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n            System.out.println(\"    -- Async end.\");\n        }).start();\n        System.out.println(\"Main sayHello() method end.\");\n        return \"hello, \" + name;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring and Exposing Dubbo Service Using API\nDESCRIPTION: This snippet shows how to configure and expose a Dubbo service programmatically using the Dubbo API. It sets up the application, registry, protocol, and service configurations before exporting the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ProviderConfig;\nimport com.alibaba.dubbo.rpc.config.ServiceConfig;\nimport com.xxx.XxxService;\nimport com.xxx.XxxServiceImpl;\n\n// Service implementation\nXxxService xxxService = new XxxServiceImpl();\n\n// current application configuration\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"xxx\");\n\n// connect to registry center configuration\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n\n// service provider's protocol configuration\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n\n// Note: ServiceConfig is a heavy object, which encapsulated the connection with registry center internally, and open the service port\n\n// Service provider exposes service configuration\nServiceConfig<XxxService> service = new ServiceConfig<XxxService>(); // This instance is very heavy, which encapsulated the connection with registry center, please cache it by yourself, it might cause memory and connection leakage otherwise.\nservice.setApplication(application);\nservice.setRegistry(registry); // multiple registry centers can use setRegistries()\nservice.setProtocol(protocol); // multiple protocols can use setProtocols()\nservice.setInterface(XxxService.class);\nservice.setRef(xxxService);\nservice.setVersion(\"1.0.0\");\n\n// exposure and register service\nservice.export();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with gRPC Protocol in XML\nDESCRIPTION: XML configuration for consuming a Dubbo service using the gRPC protocol. It specifies the application name, registry, and service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n<!-- 指定 protoc-gen-dubbo-java 生成的接口 -->\n<dubbo:reference id=\"greeter\" interface=\"io.grpc.examples.helloworld.GreeterGrpc$IGreeter\" protocol=\"grpc\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Strategy at Service Consumer Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the failover strategy with retry count at the service consumer level. Consumer-side configurations take precedence over provider-side configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"failover\" retries=\"1\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring IdleStateHandler for Dubbo Server in Java\nDESCRIPTION: This code snippet demonstrates how to configure the IdleStateHandler for a Dubbo server using Netty. It sets up a read/write timeout of 200 seconds for the server channel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nserverBootstrap.childHandler(new ChannelInitializer<NioSocketChannel>() {\n    @Override\n    protected void initChannel(NioSocketChannel ch) throws Exception {\n        ch.pipeline().addLast(\"serverIdleHandler\",new IdleStateHandler(0, 0, 200));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Maven Dependencies\nDESCRIPTION: XML configuration for including Dubbo dependencies in a Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-bom</artifactId>\n            <version>3.3.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Metadata Report in Java\nDESCRIPTION: This snippet defines the configuration options for Dubbo's metadata reporting feature. It includes settings for connection, clustering, reporting behavior, and authentication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MetadataReportConfig metadataConfig = new MetadataReportConfig();\nmetadataConfig.setAddress(\"metadata-center-address\");\nmetadataConfig.setCheck(true);\nmetadataConfig.setCluster(false);\nmetadataConfig.setCycleReport(true);\nmetadataConfig.setGroup(\"metadata-group\");\nmetadataConfig.setRetryPeriod(5000);\nmetadataConfig.setRetryTimes(3);\nmetadataConfig.setSyncReport(false);\nmetadataConfig.setTimeout(3000);\nmetadataConfig.setUsername(\"user\");\nmetadataConfig.setPassword(\"password\");\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-side Concurrent Execution for a Service in Dubbo XML Configuration\nDESCRIPTION: This XML configuration limits the number of concurrent executions for all methods of com.foo.BarService to a maximum of 10 threads on the server side. This helps prevent server overload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" executes=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in XML\nDESCRIPTION: XML configuration options for enabling Kryo serialization at protocol, consumer, or reference level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"kryo\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"kryo\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"kryo\" />\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-side Concurrent Execution for a Service in Dubbo XML Configuration\nDESCRIPTION: This XML configuration limits the number of concurrent executions for all methods of com.foo.BarService to a maximum of 10 threads on the server side. This helps prevent server overload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" executes=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request and Response Objects in Dubbo\nDESCRIPTION: Demonstrates how to access both Dubbo and Servlet HTTP request/response objects using RpcContext without requiring method parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Dubbo http req/resp\nHttpRequest request = RpcContext.getServiceContext().getRequest(HttpRequest.class);\nHttpResponse response = RpcContext.getServiceContext().getRequest(HttpResponse.class);\n// Servlet http req/resp\nHttpServletRequest request = RpcContext.getServiceContext().getRequest(HttpServletRequest.class);\nHttpServletResponse response = RpcContext.getServiceContext().getRequest(HttpServletResponse.class);\n```\n\n----------------------------------------\n\nTITLE: Registering Serialization Extension via SPI in Properties File\nDESCRIPTION: Example of how to register a custom serialization implementation through Dubbo's SPI mechanism using a properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/serialize.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxSerialization\n```\n\n----------------------------------------\n\nTITLE: Implementing ConditionRouter Route Function in Go\nDESCRIPTION: Implementation of the Route method in ConditionRouter that filters available invokers based on condition rules. It matches both 'when' and 'then' conditions and handles force execution when needed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (c *ConditionRouter) Route(invokers []protocol.Invoker, url *common.URL, invocation protocol.Invocation) []protocol.Invoker {\n\tif !c.Enabled() {\n\t\treturn invokers\n\t}\n\tif len(invokers) == 0 {\n\t\treturn invokers\n\t}\n\tisMatchWhen := c.MatchWhen(url, invocation)\n\tif !isMatchWhen {\n\t\treturn invokers\n\t}\n\tvar result []protocol.Invoker\n\tif len(c.ThenCondition) == 0 {\n\t\treturn result\n\t}\n\tfor _, invoker := range invokers {\n\t\tinvokerUrl := invoker.GetUrl()\n\t\tisMatchThen := c.MatchThen(&invokerUrl, url)\n\t\tif isMatchThen {\n\t\t\tresult = append(result, invoker)\n\t\t}\n\t}\n\tif len(result) > 0 {\n\t\treturn result\n\t} else if c.Force {\n\t\trult, _ := url.GetParamAndDecoded(constant.RULE_KEY)\n\t\tlocalIP, _ := gxnet.GetLocalIP()\n\t\tlogger.Warnf(\"The route result is empty and force execute. consumer: %s, service: %s, route: %s\", localIP, url.Service(), route)\n\t\treturn result\n\t}\n\treturn invokers\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client with Retry Configuration in Dubbo-Go\nDESCRIPTION: Client implementation that configures retry behavior and makes requests to both the normal Greet method and the GreetRetry method which requires retries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/retry.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/retry/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"tri://127.0.0.1:20000\"),\n\t\tclient.WithClientRetries(3),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// request normal\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n\n\t// request need retry\n\tresp, err = svc.GreetRetry(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Properties Configuration for Dubbo\nDESCRIPTION: Detailed Spring Boot properties configuration for Dubbo including application settings, scanning packages, protocol configuration and registry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n## application.properties\n\n# Spring boot application\nspring.application.name=dubbo-externalized-configuration-provider-sample\n\n# Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\ndubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n\n# Dubbo Application\n## The default value of dubbo.application.name is ${spring.application.name}\n## dubbo.application.name=${spring.application.name}\n\n# Dubbo Protocol\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n\n## Dubbo Registry\ndubbo.registry.address=N/A\n\n## DemoService version\ndemo.service.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Mock Configuration in Dubbo XML\nDESCRIPTION: Simple XML configuration examples for enabling mock functionality in Dubbo service references. Shows both boolean and class-based mock configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/local-mock.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"com.foo.BarServiceMock\" />\n```\n\n----------------------------------------\n\nTITLE: Multi-Protocol Service Implementation in Java\nDESCRIPTION: Java service implementation using @DubboService annotation to publish the service through both REST and Dubbo protocols simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(protocol=\"rest,dubbo\")\npublic class UserServiceImpl implements UserService {}\n```\n\n----------------------------------------\n\nTITLE: Loading Extensions from Directory\nDESCRIPTION: Loads extension classes from specified directories using different ClassLoaders and handles resource loading through URLs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                           boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages) {\n    String fileName = dir + type;\n    try {\n        Enumeration<java.net.URL> urls = null;\n        ClassLoader classLoader = findClassLoader();\n\n        if (extensionLoaderClassLoaderFirst) {\n            ClassLoader extensionLoaderClassLoader = ExtensionLoader.class.getClassLoader();\n            if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {\n                urls = extensionLoaderClassLoader.getResources(fileName);\n            }\n        }\n        if (urls == null || !urls.hasMoreElements()) {\n            if (classLoader != null) {\n                urls = classLoader.getResources(fileName);\n            } else {\n                urls = ClassLoader.getSystemResources(fileName);\n            }\n        }\n\n        if (urls != null) {\n            while (urls.hasMoreElements()) {\n                java.net.URL resourceURL = urls.nextElement();\n                loadResource(extensionClasses, classLoader, resourceURL, overridden, excludedPackages);\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", description file: \" + fileName + \").\", t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Service Interface with JAX-RS Annotations in Dubbo\nDESCRIPTION: Java interface definition for a UserService with JAX-RS annotations to specify REST endpoints, HTTP methods, path parameters, and media types for request/response. The interface demonstrates both GET and POST operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\") // #1\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML}) // #2\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\npublic interface UserService {\n    @GET // #3\n    @Path(\"{id: \\\\d+}\")\n    User getUser(@PathParam(\"id\") Long id);\n\n    @POST // #4\n    @Path(\"register\")\n    Long registerUser(User user);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with YAML\nDESCRIPTION: YAML configuration for a Dubbo service, specifying application name, protocol details, and registry address. The protocol port is set to -1 for automatic port allocation, and ZooKeeper is used as the service registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/service-definition.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-demo\n  protocol:\n    name: dubbo\n    port: -1\n  registry:\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Generating Adaptive Extension Class\nDESCRIPTION: Creates an adaptive extension class by generating Java source code and compiling it using the configured compiler (default: Javassist).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate Class<?> createAdaptiveExtensionClass() {\n        String code = createAdaptiveExtensionClassCode();\n        ClassLoader classLoader = findClassLoader();\n        org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n        return compiler.compile(code, classLoader);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Maven Dependency\nDESCRIPTION: XML configuration to add the Dubbo dependency to a Maven project. It includes options for both the standard Dubbo artifact and a shaded version to avoid Netty conflicts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.3.0</version>\n</dependency>\n\n<!-- To avoid Netty dependency conflicts, you can also choose to use the dubbo-shaded version! -->\n<!--\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-shaded</artifactId>\n    <version>3.3.0</version>\n</dependency>\n-->\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service with Group and Version Annotations\nDESCRIPTION: Shows two implementations of the DevelopService interface using @DubboService annotation with different group and version values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(group = \"group1\", version = \"1.0\")\npublic class DevelopProviderServiceV1 implements DevelopService{\n    @Override\n    public String invoke(String param) {\n        StringBuilder s = new StringBuilder();\n        s.append(\"ServiceV1 param:\").append(param);\n        return s.toString();\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(group = \"group2\", version = \"2.0\")\npublic class DevelopProviderServiceV2 implements DevelopService{\n    @Override\n    public String invoke(String param) {\n        StringBuilder s = new StringBuilder();\n        s.append(\"ServiceV2 param:\").append(param);\n        return s.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serialization in YAML\nDESCRIPTION: This snippet demonstrates how to enable Gson serialization in Dubbo using a YAML configuration file (application.yml) for Spring Boot applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/gson.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n protocol:\n   serialization: gson\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock in Dubbo XML\nDESCRIPTION: Examples of enabling mock configuration in Dubbo's Spring XML configuration file. Shows how to enable mock for a service reference and specify a custom mock implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"true\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"com.foo.BarServiceMock\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Service with Protobuf IDL for Triple Protocol\nDESCRIPTION: Protobuf IDL service definition for Dubbo triple protocol. This approach is recommended for cross-language microservice development scenarios supporting Java, Go, Node.js, etc.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.springboot.demo.idl;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Dubbo-Nacos Registry Integration\nDESCRIPTION: Maven dependencies required to integrate Nacos as a registry in Dubbo applications. Includes the dubbo-registry-nacos dependency, Nacos client, Dubbo core, and Spring context support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n\n    ...\n        \n    <!-- Dubbo Nacos registry dependency -->\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>dubbo-registry-nacos</artifactId>\n        <version>0.0.2</version>\n    </dependency>   \n    \n    <!-- Keep latest Nacos client version -->\n    <dependency>\n        <groupId>com.alibaba.nacos</groupId>\n        <artifactId>nacos-client</artifactId>\n        <version>[0.6.1,)</version>\n    </dependency>\n    \n    <!-- Dubbo dependency -->\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>2.6.5</version>\n    </dependency>\n    \n    <!-- Alibaba Spring Context extension -->\n    <dependency>\n        <groupId>com.alibaba.spring</groupId>\n        <artifactId>spring-context-support</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n\n    ...\n    \n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Consumer Configuration Class in Java\nDESCRIPTION: This snippet defines the class for Dubbo consumer configuration, which contains all the properties that can be set for a Dubbo consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ConsumerConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Definition of a simple Dubbo service interface named GreetingService with a sayHello method that takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic interface GreetingService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Simple Profiler in Dubbo QoS\nDESCRIPTION: Command to enable the simple profiler mode in Dubbo QoS. This mode is enabled by default and provides basic performance sampling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/profiler.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>enableSimpleProfiler\nOK\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Bringing a Service Online via HTTP QoS\nDESCRIPTION: This snippet demonstrates how to use an HTTP request to bring a service online using Dubbo QoS.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i http://localhost:22222/online?service=org.apache.dubbo.demo.provider.DemoService\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Configuration Center in Dubbo (Properties)\nDESCRIPTION: Properties configuration to enable Apollo as the configuration center for Dubbo. Specifies the Apollo server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=apollo://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Implementing RegistryService Interface in Java\nDESCRIPTION: Java interface definition for RegistryService, which extends Registry. It includes methods for registering, unregistering, subscribing, and unsubscribing services, as well as looking up registered information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface RegistryService { \n    void register(URL url);\n    void unregister(URL url);\n    void subscribe(URL url, NotifyListener listener);\n    void unsubscribe(URL url, NotifyListener listener);\n    List<URL> lookup(URL url);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redis Metadata Report Factory in Java\nDESCRIPTION: Extends AbstractMetadataReportFactory to create Redis-specific metadata reports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class RedisMetadataReportFactory extends AbstractMetadataReportFactory {\n    @Override\n    public MetadataReport createMetadataReport(URL url) {\n        return new RedisMetadataReport(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EtcdServiceDiscovery in Java\nDESCRIPTION: This code snippet shows the key methods and implementations of EtcdServiceDiscovery, including registration, unregistration, and instance retrieval for etcd-based service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class EtcdServiceDiscovery extends AbstractServiceDiscovery {\n    \n    private final Set<String> services = new ConcurrentHashSet<>();\n    private final Map<String, InstanceChildListener> childListenerMap = new ConcurrentHashMap<>();\n\n    EtcdClient etcdClient;\n\n    public EtcdServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {\n        super(applicationModel, registryURL);\n        EtcdTransporter etcdTransporter = applicationModel.getExtensionLoader(EtcdTransporter.class).getAdaptiveExtension();\n\n        etcdClient = etcdTransporter.connect(registryURL);\n\n        etcdClient.addStateListener(state -> {\n            if (state == StateListener.CONNECTED) {\n                try {\n                    recover();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        });\n\n        this.registryURL = registryURL;\n    }\n\n    @Override\n    public void doRegister(ServiceInstance serviceInstance) {\n        try {\n            String path = toPath(serviceInstance);\n            etcdClient.putEphemeral(path, new Gson().toJson(serviceInstance));\n            services.add(serviceInstance.getServiceName());\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to register \" + serviceInstance + \" to etcd \" + etcdClient.getUrl()\n                + \", cause: \" + (OptionUtil.isProtocolError(e)\n                ? \"etcd3 registry may not be supported yet or etcd3 registry is not available.\"\n                : e.getMessage()), e);\n        }\n    }\n\n    @Override\n    protected void doUnregister(ServiceInstance serviceInstance) {\n        try {\n            String path = toPath(serviceInstance);\n            etcdClient.delete(path);\n            services.remove(serviceInstance.getServiceName());\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to unregister \" + serviceInstance + \" to etcd \" + etcdClient.getUrl() + \", cause: \" + e.getMessage(), e);\n        }\n    }\n\n    @Override\n    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {\n        for (String serviceName : listener.getServiceNames()) {\n            registerServiceWatcher(serviceName, listener);\n        }\n    }\n\n    @Override\n    public List<ServiceInstance> getInstances(String serviceName) {\n        List<String> children = etcdClient.getChildren(toParentPath(serviceName));\n        if (CollectionUtils.isEmpty(children)) {\n            return Collections.emptyList();\n        }\n        List<ServiceInstance> list = new ArrayList<>(children.size());\n        for (String child : children) {\n            ServiceInstance serviceInstance = new Gson().fromJson(etcdClient.getKVValue(child), DefaultServiceInstance.class);\n            list.add(serviceInstance);\n        }\n        return list;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol with Port Only\nDESCRIPTION: Example of a basic Dubbo protocol configuration specifying only the port number. When host is not set, Dubbo uses the default host obtained from InetAddress.getLocalHost().getHostAddress().\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20890\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol Server\nDESCRIPTION: Server setup code to register and start the Greeter service using Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class TriUnaryServer {\n    public static void main(String[] args) throws IOException {\n        ServiceConfig<Greeter> service = new ServiceConfig<>();\n        service.setInterface(Greeter.class);\n        service.setRef(new GreeterImpl());\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50052))\n                .service(service)\n                .start().await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Method for Handling multipart/formdata in Triple Protocol\nDESCRIPTION: Java implementation showing how to receive multipart/formdata in a Triple server. The method demonstrates access to form fields including plain text, JSON-decoded objects, and binary attachments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public ServerResponse greetPojo(String username, User user, byte[] attachment) {\n        //LuYue\n        System.out.println(username); \n        //user.name=Luyue;user.location=beijing\n        System.out.println(user); \n        //<binary image data>\n        System.out.println(new String(attachment, StandardCharsets.UTF_8)); \n        return new ServerResponse(\"Server Received:\" + username);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Reference Check in Dubbo (Java)\nDESCRIPTION: Shows how to disable the startup dependency check for a specific service reference using Java annotations. This is useful in testing scenarios where some services may not be available or in circular dependency situations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(check = false)\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Service in Go\nDESCRIPTION: Go code implementing the GreetService interface generated from the Protocol Buffer definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Preferred Invoker in Dubbo3 MigrationInvoker\nDESCRIPTION: This method calculates whether to use application-level or interface-level service discovery invoker based on MigrationRule. It uses extension instances of MigrationAddressComparator to determine if migration should occur, and sets the currentAvailableInvoker accordingly for subsequent service invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate synchronized void calcPreferredInvoker(MigrationRule migrationRule) {\n        if (serviceDiscoveryInvoker == null || invoker == null) {\n            return;\n        }\n        Set<MigrationAddressComparator> detectors = ScopeModelUtil.getApplicationModel(consumerUrl == null ? null : consumerUrl.getScopeModel())\n            .getExtensionLoader(MigrationAddressComparator.class).getSupportedExtensionInstances();\n        if (CollectionUtils.isNotEmpty(detectors)) {\n            // pick preferred invoker\n            // the real invoker choice in invocation will be affected by promotion\n            if (detectors.stream().allMatch(comparator -> comparator.shouldMigrate(serviceDiscoveryInvoker, invoker, migrationRule))) {\n                this.currentAvailableInvoker = serviceDiscoveryInvoker;\n            } else {\n                this.currentAvailableInvoker = invoker;\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Center Extension Interfaces in Dubbo\nDESCRIPTION: The two main interfaces that Dubbo provides for configuration center extensions: DynamicConfigurationFactory for creating configuration instances and DynamicConfiguration for interacting with the configuration data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/config-center.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* `org.apache.dubbo.configcenter.DynamicConfigurationFactory`\n* `org.apache.dubbo.configcenter.DynamicConfiguration`\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registries with Dubbo Go API\nDESCRIPTION: This snippet demonstrates how to initialize a Dubbo instance with multiple registration centers (Nacos and Zookeeper) using the API configuration method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithRegistry(\n\t    registryWithID(\"nacos\"),\n\t\tregistry.WithNacos(),\n\t\tregistry.WithAddress(\"127.0.0.1:8848\"),\n\t),\n\tdubbo.WithRegistry(\n\t    registryWithID(\"zookeeper\"),\n\t\tregistry.WithZookeeper(),\n\t\tregistry.WithAddress(\"127.0.0.1:2181\"),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with XML\nDESCRIPTION: Example of exposing a Dubbo service using XML configuration. This snippet shows how to configure application, registry, protocol, and service components through XML format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- dubbo-provier.xml -->\n\n  <dubbo:application name=\"demo-provider\"/>\n  <dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n\n  <dubbo:registry address=\"zookeeper://127.0.0.1:2181\" simplified=\"true\"/>\n  <dubbo:metadata-report address=\"redis://127.0.0.1:6379\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n  <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n  <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading Adaptive Extensions in Dubbo\nDESCRIPTION: Core method for retrieving adaptive extensions with caching support. Handles both cached instances and creation of new adaptive extensions with error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic T getAdaptiveExtension() {\n    Object instance = cachedAdaptiveInstance.get();\n    if (instance == null) {\n        if (createAdaptiveInstanceError != null) {\n            throw new IllegalStateException(\"Failed to create adaptive instance: \" +\n                    createAdaptiveInstanceError.toString(),\n                    createAdaptiveInstanceError);\n        }\n\n        synchronized (cachedAdaptiveInstance) {\n            instance = cachedAdaptiveInstance.get();\n            if (instance == null) {\n                try {\n                    instance = createAdaptiveExtension();\n                    cachedAdaptiveInstance.set(instance);\n                } catch (Throwable t) {\n                    createAdaptiveInstanceError = t;\n                    throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\n                }\n            }\n        }\n    }\n\n    return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redis Metadata Report Factory in Java\nDESCRIPTION: Extends AbstractMetadataReportFactory to create Redis-specific metadata reports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class RedisMetadataReportFactory extends AbstractMetadataReportFactory {\n    @Override\n    public MetadataReport createMetadataReport(URL url) {\n        return new RedisMetadataReport(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with gRPC Protocol in XML\nDESCRIPTION: XML configuration for exposing a Dubbo service using the gRPC protocol. It specifies the application name, protocol, registry, and service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\"/>\n\n<!-- 指定服务暴露协议为 gRPC -->\n<dubbo:protocol id=\"grpc\" name=\"grpc\"/>\n\n<dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n<bean id=\"greeter\" class=\"org.apache.dubbo.samples.basic.impl.GrpcGreeterImpl\"/>\n\n<!-- 指定 protoc-gen-dubbo-java 生成的接口 -->\n<dubbo:service interface=\"io.grpc.examples.helloworld.GreeterGrpc$IGreeter\" ref=\"greeter\" protocol=\"grpc\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML\nDESCRIPTION: Example XML configuration for a Dubbo service consumer that references a remote service. It includes application name, registry configuration with grouping, and service reference with check option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/xml.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"demo-consumer\"/>\n    <dubbo:registry group=\"aaa\" address=\"zookeeper://127.0.0.1:2181\"/>\n    <dubbo:reference id=\"demoService\" check=\"false\" interface=\"org.apache.dubbo.samples.basic.api.DemoService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Client References\nDESCRIPTION: Client-side configuration showing how to reference different service versions and groups using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(group = \"group1\", version = \"1.0\")\nprivate DevelopService developService;\n\n@DubboReference(group = \"group2\", version = \"2.0\")\nprivate DevelopService developServiceV2;\n\n@Override\npublic void run(String... args) throws Exception {\n    System.out.println(\"Dubbo Remote Return ======> \" + developService.invoke(\"1\"));\n    System.out.println(\"Dubbo Remote Return ======> \" + developServiceV2.invoke(\"2\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo XML Configuration\nDESCRIPTION: Demonstrates the minimal XML configuration required to set up a Dubbo provider, including application name, registry address, protocol, service and reference definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"com.alibaba.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"com.alibaba.dubbo.demo.DemoService\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocols in Dubbo YAML\nDESCRIPTION: YAML configuration for enabling both REST and Dubbo TCP protocols with separate ports. REST protocol runs on port 8090 while Dubbo protocol runs on port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocols:\n    rest:\n      name: rest\n      port: 8090\n    dubbo:\n      name: dubbo\n      port: 20880\n```\n\n----------------------------------------\n\nTITLE: Complete dubbo-go with Sentinel Integration Example\nDESCRIPTION: This example provides a comprehensive implementation of dubbo-go with Sentinel integration. It includes the necessary import statements, filter registration, and basic application initialization for a working dubbo-go application with Sentinel flow control.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\thessian \"github.com/apache/dubbo-go-hessian2\"\n\tsd \"github.com/alibaba/sentinel-golang/adapter/dubbo\"\n)\n\nimport (\n\t\"github.com/apache/dubbo-go/common/logger\"\n\t_ \"github.com/apache/dubbo-go/common/proxy/proxy_factory\"\n\t\"github.com/apache/dubbo-go/config\"\n\t_ \"github.com/apache/dubbo-go/filter/impl\"\n\t_ \"github.com/apache/dubbo-go/protocol/dubbo\"\n\t_ \"github.com/apache/dubbo-go/registry/protocol\"\n\n\t_ \"github.com/apache/dubbo-go/cluster/cluster_impl\"\n\t_ \"github.com/apache/dubbo-go/cluster/loadbalance\"\n\t_ \"github.com/apache/dubbo-go/registry/zookeeper\"\n\t\"github.com/apache/dubbo-go/common/extension\"\n)\n\nfunc main() {\n\n\thessian.RegisterPOJO(&User{})\n  extension.SetFilter(\"myConsumerFilter\",sd.GetConsumerFilter())\n  extension.SetFilter(\"myProviderFilter\",sd.GetConsumerFilter())\n\tconfig.Load()\n\n\t// init finish, do your work\n\ttest()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Service Consumer in XML\nDESCRIPTION: XML configuration for the callback service consumer, referencing the CallbackService interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"callbackService\" interface=\"com.callback.CallbackService\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface in Java\nDESCRIPTION: Example of defining a simple RPC service using Java Interface approach, which is suitable for Dubbo veteran users without cross-language requirements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Connection Limits in Dubbo XML\nDESCRIPTION: Limits the client service connections to a maximum of 10. This can be configured at either the reference level or service level, with reference configuration taking precedence.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Consuming Dubbo Service in Java\nDESCRIPTION: Java class demonstrating how to consume a Dubbo service using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class Consumer implements CommandLineRunner {\n    @DubboReference\n    private DemoService demoService;\n\n    @Override\n    public void run(String... args) throws Exception {\n        String result = demoService.sayHello(\"world\");\n        System.out.println(\"Receive result ======> \" + result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Business Logic with Storage and Order Services\nDESCRIPTION: Business service implementation that coordinates the purchase process. It calls the storage service to deduct inventory and the order service to create a new order. This is where the distributed transaction begins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class BusinessServiceImpl implements BusinessService {\n\n    private StorageService storageService;\n\n    private OrderService orderService;\n\n    /**\n     * Purchase\n     */\n    public void purchase(String userId, String commodityCode, int orderCount) {\n\n        storageService.deduct(commodityCode, orderCount);\n\n        orderService.create(userId, commodityCode, orderCount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Using API\nDESCRIPTION: Example of programmatically configuring a Dubbo consumer using the API. This includes setting up application, registry, and reference configurations to connect to a remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ConsumerConfig;\nimport com.alibaba.dubbo.rpc.config.ReferenceConfig;\nimport com.xxx.XxxService;\n// 当前应用配置\n\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"yyy\");\n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接\n// 引用远程服务\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n\nreference.setApplication(application);\nreference.setRegistry(registry); // 多个注册中心可以用setRegistries()\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n\n// 和本地bean一样使用xxxService\nXxxService xxxService = reference.get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo REST Service\nDESCRIPTION: This code snippet demonstrates the implementation of a Dubbo REST service. It includes methods for handling different REST operations and manages service context and attachments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\n@DubboService()\npublic class RestDemoServiceImpl implements RestDemoService {\n    private static Map<String, Object> context;\n    private boolean called;\n\n    @Override\n    public String sayHello(String name) {\n        called = true;\n        return \"Hello, \" + name;\n    }\n\n    public boolean isCalled() {\n        return called;\n    }\n\n    @Override\n    public Integer hello(Integer a, Integer b) {\n        context = RpcContext.getServerAttachment().getObjectAttachments();\n        return a + b;\n    }\n\n    @Override\n    public String error() {\n        throw new RuntimeException();\n    }\n\n    public static Map<String, Object> getAttachments() {\n        return context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Services Using ReferenceConfig in Java\nDESCRIPTION: This code shows how to subscribe to services using ReferenceConfig in Dubbo. It uses SimpleReferenceCache to cache and reuse the proxy object for efficient resource management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate DemoService referService() {\n    ReferenceConfig<DemoService> reference = new ReferenceConfig<>();\n    reference.setInterfaceClass(DemoService.class);\n\n    ReferenceCache cache = SimpleReferenceCache.getCache();\n    try {\n        return cache.get(reference);\n    } catch (Exception e) {\n        throw new RuntimeException(e.getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export with YAML in Dubbo\nDESCRIPTION: YAML configuration for enabling multiple protocols on the same port in Dubbo. The Triple protocol is set as the main protocol with Dubbo as an extension protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n  protocol:\n    name: tri\n    port: -1\n    ext-protocol: dubbo,\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Sampling Configuration Properties\nDESCRIPTION: Configuration properties for sampling in Dubbo's distributed tracing system. Controls what percentage of traces should be sampled for observability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.tracing.sampling.probability=<float> # Probability in the range from 0.0 to 1.0 that a trace will be sampled. Default: 0.1\n```\n\n----------------------------------------\n\nTITLE: Registering Different Services to Different Registry Centers in Dubbo (XML Configuration)\nDESCRIPTION: This snippet shows how to register different Dubbo services to different registry centers. It configures a China registry and an International registry, then registers HelloService to the China registry and DemoService to the International registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-registry.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n    <!-- 向中文站注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"chinaRegistry\" />\n    <!-- 向国际站注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" registry=\"intlRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Arguments in Dubbo XML\nDESCRIPTION: Shows how to configure method arguments within a Dubbo method tag, specifying callback behavior for a particular argument.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\">\n   <dubbo:argument index=\"0\" callback=\"true\" />\n</dubbo:method>\n```\n\n----------------------------------------\n\nTITLE: Example of Dynamically Generated Adaptive Extension Class in Dubbo\nDESCRIPTION: A complete example of a dynamically generated adaptive extension class. It shows how URL parameters are used to determine which extension implementation to call, with null checks and proper error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.common.extension.adaptive;\n\nimport org.apache.dubbo.common.extension.ExtensionLoader;\n\n\npublic class HasAdaptiveExt$Adaptive implements org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt {\n    public java.lang.String echo(org.apache.dubbo.common.URL arg0,\n        java.lang.String arg1) {\n        // URL 空校验\n        if (arg0 == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n\n        org.apache.dubbo.common.URL url = arg0;\n        // 获取扩展名\n        String extName = url.getParameter(\"has.adaptive.ext\", \"adaptive\");\n        // 扩展名空校验\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Failed to get extension (org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt) name from url (\" +\n                url.toString() + \") use keys([has.adaptive.ext])\");\n        }\n        // 获取扩展\n        org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt extension = (org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt) ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt.class)\n                                                                                                                                                         .getExtension(extName);\n        // 执行对应的方法\n        return extension.echo(arg0, arg1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dubbo Service Provider with Java Config\nDESCRIPTION: Using Spring's Java Config (@Configuration) and Dubbo's annotation scanning (@EnableDubbo) to discover, configure, and expose Dubbo services. This includes provider, application, registry, and protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.impl\")\nstatic class ProviderConfiguration {\n    @Bean // #1\n    public ProviderConfig providerConfig() {\n        ProviderConfig providerConfig = new ProviderConfig();\n        providerConfig.setTimeout(1000);\n        return providerConfig;\n    }\n\n    @Bean // #2\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"dubbo-annotation-provider\");\n        return applicationConfig;\n    }\n\n    @Bean // #3\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n\n    @Bean // #4\n    public ProtocolConfig protocolConfig() {\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        protocolConfig.setName(\"dubbo\");\n        protocolConfig.setPort(20880);\n        return protocolConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Microservices Environment\nDESCRIPTION: Command to initialize the microservices deployment environment including Zookeeper, Dubbo Control Plane, and monitoring tools.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/deploy.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl manifest install --profile=demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Random Token Authorization in Dubbo XML\nDESCRIPTION: Shows how to configure random UUID-based token authorization for a specific service interface. This applies token verification only to the specified service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/token-authorization.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!--随机token令牌，使用UUID生成-->\n<dubbo:service interface=\"com.foo.BarService\" token=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Starting a Dubbo Provider Application\nDESCRIPTION: A main method implementation that starts an embedded ZooKeeper registry, initializes a Spring Context with the provider configuration, and begins exposing Dubbo services to consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class ProviderBootstrap {\n    public static void main(String[] args) throws Exception {\n        new EmbeddedZooKeeper(2181, false).start(); // #1\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class); // #2\n        context.start(); // #3\n        System.in.read(); // #4\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserProvider Interface for Dubbo-Go Client\nDESCRIPTION: Creates a UserProvider struct that defines the service interface for the client. The struct contains function fields that correspond to remote methods, and the Reference method identifies the service name to be referenced.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UserProvider struct {\n\tGetUser func(ctx context.Context, req []interface{}, rsp *User) error\n}\n\nfunc (u *UserProvider) Reference() string {\n\treturn \"UserProvider\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-protocol Dubbo Service Implementation\nDESCRIPTION: Java implementation of a Dubbo service that supports both REST and Dubbo protocols\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(interfaceClass = HttpService.class, protocol = \"rest,dubbo\", version = \"1.0.0\", group = \"test\")\npublic class HttpServiceImpl implements HttpService {\n    @Override\n    public String http(String invokeType) {\n        return \"Rest http request test success! by invokeType: \" + invokeType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transporter in Dubbo\nDESCRIPTION: Example of implementing the Transporter interface in Dubbo, which serves as the factory for creating Server and Client instances for custom network transport protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/remoting.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.Transporter;\n \npublic class XxxTransporter implements Transporter {\n    public Server bind(URL url, ChannelHandler handler) throws RemotingException {\n        return new XxxServer(url, handler);\n    }\n    public Client connect(URL url, ChannelHandler handler) throws RemotingException {\n        return new XxxClient(url, handler);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export in YAML\nDESCRIPTION: YAML configuration for a Dubbo Spring Boot application using the Triple protocol as the primary protocol with Dubbo as an extension protocol on the same port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n  protocol:\n    name: tri\n    port: -1\n    ext-protocol: dubbo,\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Sticky Connections in Dubbo XML\nDESCRIPTION: Enables sticky connections at the method level for more granular control, allowing specific methods to maintain sticky connections while others may not.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"sayHello\" sticky=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Using Annotations\nDESCRIPTION: Example of using annotations to reference a remote Dubbo service. This approach is more concise and is equivalent to the XML configuration approach.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnnotationConsumeService { \n\n    @com.alibaba.dubbo.config.annotation.Reference \n    public AnnotateService annotateService; \n\n    // ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Filter in Java for Dubbo\nDESCRIPTION: Example of implementing a custom Filter for Dubbo in Java. The XxxFilter class implements the Filter interface and defines the invoke method to intercept calls before and after invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/filter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.rpc.Filter;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.RpcException;\n\npublic class XxxFilter implements Filter {\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        // before filter ...\n        Result result = invoker.invoke(invocation);\n        // after filter ...\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection with Dubbo Annotation\nDESCRIPTION: Uses the @DubboReference annotation with the url parameter to directly connect to a specific service provider using the Tri protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(url=\"tri://localhost:50051\")\nprivate XxxService xxxService\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer via API in Java\nDESCRIPTION: Programmatic configuration of a Dubbo consumer using the API, including application, registry, and reference configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.alibaba.dubbo.rpc.config.ApplicationConfig;\nimport com.alibaba.dubbo.rpc.config.RegistryConfig;\nimport com.alibaba.dubbo.rpc.config.ConsumerConfig;\nimport com.alibaba.dubbo.rpc.config.ReferenceConfig;\nimport com.xxx.XxxService;\n\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"yyy\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();\nreference.setApplication(application);\nreference.setRegistry(registry);\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n\nXxxService xxxService = reference.get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Reference for Consumer\nDESCRIPTION: Java code to configure a reference to a remote Dubbo service using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class Task implements CommandLineRunner {\n    @DubboReference(url = \"dubbo://127.0.0.1:20880/org.apache.dubbo.protocol.dubbo.demo.DemoService\")\n    private DemoService demoService;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Nacos Configuration Center in YAML\nDESCRIPTION: YAML configuration to enable Nacos as a configuration center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Defining Async Service Interface with CompletableFuture\nDESCRIPTION: Demonstrates how to define an asynchronous service interface using CompletableFuture as the return type. This is the service provider interface definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    CompletableFuture<String> sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Access to Triple Protocol Service with cURL\nDESCRIPTION: Example of using cURL to directly access a Dubbo service exposed with the triple protocol. This demonstrates the HTTP accessibility feature of triple protocol services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50052/org.apache.dubbo.springboot.demo.idl.Greeter/greet/\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Nacos Dependencies for Spring Boot Applications\nDESCRIPTION: XML configuration for adding the required dependencies to use Nacos as a registry in a Spring Boot Dubbo application. Includes the dubbo-spring-boot-starter and dubbo-nacos-spring-boot-starter dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-nacos-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo with Spring Boot Properties\nDESCRIPTION: Example of configuring Dubbo in a Spring Boot application using application.properties. This snippet shows how to set up the application name, base packages for scanning, protocol, registry, and version information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n## application.properties\n\n# Spring boot application\nspring.application.name=dubbo-externalized-configuration-provider-sample\n\n# Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\ndubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n\n# Dubbo Application\n## The default value of dubbo.application.name is ${spring.application.name}\n## dubbo.application.name=${spring.application.name}\n\n# Dubbo Protocol\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n\n## Dubbo Registry\ndubbo.registry.address=N/A\n\n## DemoService version\ndemo.service.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining UserProvider Interface in Java for Dubbo Service\nDESCRIPTION: Java interface definition for the UserProvider service that includes a GetUser1 method which accepts a userId string parameter and returns a User object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n//import org.apache.dubbo.rpc.filter.GenericFilter;\n\npublic interface UserProvider {\n\tUser GetUser1(String userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Aggregation in Dubbo XML\nDESCRIPTION: Shows various XML configurations for group aggregation in Dubbo, including searching all groups, merging specific groups, and specifying merge strategies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"aaa,bbb\" merger=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\"true\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\">\n    <dubbo:method name=\"getMenuItems\" merger=\"false\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\"mymerge\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\".addAll\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom LoggerAdapter in Dubbo SPI\nDESCRIPTION: Shows how to register a custom LoggerAdapter implementation in Dubbo's SPI configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/logger-adapter.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxLoggerAdapter\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service Interface\nDESCRIPTION: Protocol Buffers IDL definition for the reactive streaming service with various streaming patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.samples.triple.reactor;\n\nmessage GreeterRequest {\n  string name = 1;\n}\n\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice GreeterService {\n  rpc greetOneToOne(GreeterRequest) returns (GreeterReply);\n  rpc greetOneToMany(GreeterRequest) returns (stream GreeterReply);\n  rpc greetManyToOne(stream GreeterRequest) returns (GreeterReply);\n  rpc greetManyToMany(stream GreeterRequest) returns (stream GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Creation with Wrapper Support\nDESCRIPTION: Core method for creating extension instances with support for wrapper classes and lifecycle management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nprivate T createExtension(String name, boolean wrap) {\n        Class<?> clazz = getExtensionClasses().get(name);\n        if (clazz == null || unacceptableExceptions.contains(name)) {\n            throw findException(name);\n        }\n        try {\n            T instance = (T) extensionInstances.get(clazz);\n            if (instance == null) {\n                extensionInstances.putIfAbsent(clazz, createExtensionInstance(clazz));\n                instance = (T) extensionInstances.get(clazz);\n                instance = postProcessBeforeInitialization(instance, name);\n                injectExtension(instance);\n                instance = postProcessAfterInitialization(instance, name);\n            }\n            if (wrap) {\n                List<Class<?>> wrapperClassesList = new ArrayList<>();\n                if (cachedWrapperClasses != null) {\n                    wrapperClassesList.addAll(cachedWrapperClasses);\n                    wrapperClassesList.sort(WrapperComparator.COMPARATOR);\n                    Collections.reverse(wrapperClassesList);\n                }\n                if (CollectionUtils.isNotEmpty(wrapperClassesList)) {\n                    for (Class<?> wrapperClass : wrapperClassesList) {\n                        Wrapper wrapper = wrapperClass.getAnnotation(Wrapper.class);\n                        boolean match = (wrapper == null) ||\n                            ((ArrayUtils.isEmpty(wrapper.matches()) || ArrayUtils.contains(wrapper.matches(), name)) &&\n                                !ArrayUtils.contains(wrapper.mismatches(), name));\n                        if (match) {\n                            instance = injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance));\n                            instance = postProcessAfterInitialization(instance, name);\n                        }\n                    }\n                }\n            }\n            initExtension(instance);\n            return instance;\n        } catch (Throwable t) {\n            throw new IllegalStateException(\"Extension instance (name: \" + name + \", class: \" +\n                type + \") couldn't be instantiated: \" + t.getMessage(), t);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: DubboProtocol Service Export in Dubbo\nDESCRIPTION: This snippet demonstrates the export method in DubboProtocol. It creates a DubboExporter, performs stub configuration checks, opens the server port, and optimizes serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        checkDestroyed();\n        //服务提供者的url参考例子dubbo://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&bind.ip=192.168.1.9&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=6043&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1654224285437\n        URL url = invoker.getUrl();\n\n        // export service.\n        //生成服务的key参考：link.elastic.dubbo.entity.DemoService:20880\n        String key = serviceKey(url);\n        //创建导出服务用的导出器DubboExporter\n        DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);\n\n        //export a stub service for dispatching event\n        //stub配置校验\n        Boolean isStubSupportEvent = url.getParameter(STUB_EVENT_KEY, DEFAULT_STUB_EVENT);\n        Boolean isCallbackservice = url.getParameter(IS_CALLBACK_SERVICE, false);\n        if (isStubSupportEvent && !isCallbackservice) {\n            String stubServiceMethods = url.getParameter(STUB_EVENT_METHODS_KEY);\n            if (stubServiceMethods == null || stubServiceMethods.length() == 0) {\n                if (logger.isWarnEnabled()) {\n                    logger.warn(new IllegalStateException(\"consumer [\" + url.getParameter(INTERFACE_KEY) +\n                            \"], has set stubproxy support event ,but no stub methods founded.\"));\n                }\n\n            }\n        }\n\t\t//创建服务开启服务端口\n        openServer(url);\n        //\n        optimizeSerialization(url);\n\n        return exporter;\n    }\n```\n\n----------------------------------------\n\nTITLE: Dubbo Parameter Validation Class Implementation\nDESCRIPTION: Java class demonstrating various JSR303 validation annotations for parameter validation including size, pattern, range, and date constraints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.Serializable;\nimport java.util.Date;\n \nimport javax.validation.constraints.Future;\nimport javax.validation.constraints.Max;\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Past;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Size;\n \npublic class ValidationParameter implements Serializable {\n    private static final long serialVersionUID = 7158911668568000392L;\n \n    @NotNull // Cannot be null\n    @Size(min = 1, max = 20) // Length or size range\n    private String name;\n \n    @NotNull(groups = ValidationService.Save.class) // Cannot be null when saving, can be null when updating, indicating no update to this field\n    @Pattern(regexp = \"^\\\\s*\\\\w+(?:\\\\.{0,1}[\\\\w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*\\\\.[a-zA-Z]+\\\\s*$\")\n    private String email;\n \n    @Min(18) // Minimum value\n    @Max(100) // Maximum value\n    private int age;\n \n    @Past // Must be a past date\n    private Date loginDate;\n \n    @Future // Must be a future date\n    private Date expiryDate;\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public String getEmail() {\n        return email;\n    }\n \n    public void setEmail(String email) {\n        this.email = email;\n    }\n \n    public int getAge() {\n        return age;\n    }\n \n    public void setAge(int age) {\n        this.age = age;\n    }\n \n    public Date getLoginDate() {\n        return loginDate;\n    }\n \n    public void setLoginDate(Date loginDate) {\n        this.loginDate = loginDate;\n    }\n \n    public Date getExpiryDate() {\n        return expiryDate;\n    }\n \n    public void setExpiryDate(Date expiryDate) {\n        this.expiryDate = expiryDate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ObservationRegistry for Skywalking Integration\nDESCRIPTION: Create a Spring configuration class that sets up an ObservationRegistry with Skywalking-specific handlers. This configuration connects Dubbo's observability data to Skywalking's tracing system by registering sender, receiver, and default tracing handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/skywalking.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class ObservationConfiguration {\n    @Bean\n    ApplicationModel applicationModel(ObservationRegistry observationRegistry) {\n        ApplicationModel applicationModel = ApplicationModel.defaultModel();\n        observationRegistry.observationConfig()\n                .observationHandler(new ObservationHandler.FirstMatchingCompositeObservationHandler(\n                        new SkywalkingSenderTracingHandler(), new SkywalkingReceiverTracingHandler(),\n                        new SkywalkingDefaultTracingHandler()\n                ));\n        applicationModel.getBeanFactory().registerBean(observationRegistry);\n        return applicationModel;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Parameters in Dubbo Protocol Configuration\nDESCRIPTION: Demonstrates how to add custom parameters to Dubbo configuration tags for specific extension point implementations. This example shows setting a 'queue' parameter for JMS protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/xml.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"jms\">\n    <dubbo:parameter key=\"queue\" value=\"your_queue\" />\n</dubbo:protocol>\n```\n\n----------------------------------------\n\nTITLE: ClusterFilter SPI Interface Definition in Java\nDESCRIPTION: Definition of the ClusterFilter interface, an alternative to Filter optimized for performance with large clusters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@SPI(scope = ExtensionScope.MODULE)\npublic interface ClusterFilter extends BaseFilter {}\n```\n\n----------------------------------------\n\nTITLE: Sample Metadata JSON Structure\nDESCRIPTION: This JSON structure represents the metadata for a Dubbo service, including parameters, method definitions, and type information. It is stored as part of the service definition in the metadata center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"parameters\": {\n\t\t\"side\": \"provider\",\n\t\t\"interface\": \"link.elastic.dubbo.entity.DemoService\",\n\t\t\"pid\": \"22099\",\n\t\t\"application\": \"dubbo-demo-api-provider\",\n\t\t\"dubbo\": \"2.0.2\",\n\t\t\"release\": \"3.0.8\",\n\t\t\"anyhost\": \"true\",\n\t\t\"bind.ip\": \"192.168.1.9\",\n\t\t\"methods\": \"sayHello,sayHelloAsync\",\n\t\t\"background\": \"false\",\n\t\t\"deprecated\": \"false\",\n\t\t\"dynamic\": \"true\",\n\t\t\"service-name-mapping\": \"true\",\n\t\t\"generic\": \"false\",\n\t\t\"bind.port\": \"20880\",\n\t\t\"timestamp\": \"1654942353902\"\n\t},\n\t\"canonicalName\": \"link.elastic.dubbo.entity.DemoService\",\n\t\"codeSource\": \"file:/Users/song/Desktop/dubbo-test/target/classes/\",\n\t\"methods\": [{\n\t\t\"name\": \"sayHelloAsync\",\n\t\t\"parameterTypes\": [\"java.lang.String\"],\n\t\t\"returnType\": \"java.util.concurrent.CompletableFuture\",\n\t\t\"annotations\": []\n\t}, {\n\t\t\"name\": \"sayHello\",\n\t\t\"parameterTypes\": [\"java.lang.String\"],\n\t\t\"returnType\": \"java.lang.String\",\n\t\t\"annotations\": []\n\t}],\n\t\"types\": [{\n\t\t\"type\": \"java.util.concurrent.CompletableFuture\",\n\t\t\"properties\": {\n\t\t\t\"result\": \"java.lang.Object\",\n\t\t\t\"stack\": \"java.util.concurrent.CompletableFuture.Completion\"\n\t\t}\n\t}, {\n\t\t\"type\": \"java.lang.Object\"\n\t}, {\n\t\t\"type\": \"java.lang.String\"\n\t}, {\n\t\t\"type\": \"java.util.concurrent.CompletableFuture.Completion\",\n\t\t\"properties\": {\n\t\t\t\"next\": \"java.util.concurrent.CompletableFuture.Completion\",\n\t\t\t\"status\": \"int\"\n\t\t}\n\t}, {\n\t\t\"type\": \"int\"\n\t}],\n\t\"annotations\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Asynchronous Calls in Dubbo\nDESCRIPTION: Example of configuring method-level timeouts in Dubbo using the @Method annotation within @DubboReference, allowing fine-grained control over asynchronous behavior.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name = \"sayHello\", timeout = 5000)})  \nprivate AsyncService asyncService;  \n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application and Registry with Java Configuration\nDESCRIPTION: This snippet demonstrates how to configure Dubbo application and registry settings using Java configuration. It creates beans for ApplicationConfig and RegistryConfig, setting up the application name and Zookeeper registry details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DubboConfiguration {\n\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"provider-test\");\n        return applicationConfig;\n    }\n\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n        registryConfig.setClient(\"curator\");\n        return registryConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Streaming Call Request in Triple Protocol over HTTP/2\nDESCRIPTION: This snippet illustrates a streaming call request using the Triple protocol over HTTP/2. It shows the headers for both the request and response, demonstrating compatibility with the gRPC protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHEADERS (flags = END_HEADERS)\n:method = POST\n:scheme = http\n:path = /google.pubsub.v2.PublisherService/CreateTopic\n:authority = pubsub.googleapis.com\ngrpc-timeout = 1S\ncontent-type = application/grpc+proto\ngrpc-encoding = gzip\nauthorization = Bearer y235.wef315yfh138vh31hv93hv8h3v\n\nDATA (flags = END_STREAM)\n<Length-Prefixed Message>\n\nHEADERS (flags = END_HEADERS)\n:status = 200\ngrpc-encoding = gzip\ncontent-type = application/grpc+proto\n\nDATA\n<Length-Prefixed Message>\n\nHEADERS (flags = END_STREAM, END_HEADERS)\ngrpc-status = 0 # OK\ntrace-proto-bin = jher831yy13JHy3hc\n```\n\n----------------------------------------\n\nTITLE: Getting Instance from SpiExtensionInjector in Java\nDESCRIPTION: This method checks if the type is an SPI-annotated interface and uses the extension loader to get the adaptive extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n@Override\n    public <T> T getInstance(Class<T> type, String name) {\n        if (type.isInterface() && type.isAnnotationPresent(SPI.class)) {\n            ExtensionLoader<T> loader = extensionAccessor.getExtensionLoader(type);\n            if (loader == null) {\n                return null;\n            }\n            if (!loader.getSupportedExtensions().isEmpty()) {\n                return loader.getAdaptiveExtension();\n            }\n        }\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML\nDESCRIPTION: XML configuration for exposing a Dubbo service as a Provider. Defines the application name, registry address (Zookeeper), protocol, service implementation bean, and service interface declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\"/>\n\n<bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n\n<dubbo:service interface=\"org.apache.dubbo.demo.DemoServiceDubbo$IDemoService\" ref=\"demoService\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in Properties\nDESCRIPTION: Illustrates how to enable Zookeeper as a configuration center using properties file in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Aggregation in Dubbo XML\nDESCRIPTION: Shows various XML configurations for group aggregation in Dubbo, including searching all groups, merging specific groups, and specifying merge strategies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"aaa,bbb\" merger=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\"true\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\">\n    <dubbo:method name=\"getMenuItems\" merger=\"false\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\"mymerge\" />\n</dubbo:reference>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\".addAll\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Initializing DubboBootstrap for Service Provider in Java\nDESCRIPTION: Code example showing how to configure and start a Dubbo service provider using DubboBootstrap API. It demonstrates setting up protocols, services, registry, and application lifecycle management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.bootstrap.DubboBootstrap;\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ProviderConfig;\nimport org.apache.dubbo.config.ServiceConfig;\nimport com.xxx.DemoService;\nimport com.xxx.DemoServiceImpl;\n\npublic class DemoProvider {\n    public static void main(String[] args) {\n\n        ConfigCenterConfig configCenter = new ConfigCenterConfig();\n        configCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n\n        // Provider protocol configuration\n        ProtocolConfig protocol = new ProtocolConfig();\n        protocol.setName(\"dubbo\");\n        protocol.setPort(12345);\n        protocol.setThreads(200);\n\n        // Note: ServiceConfig is a heavy object, encapsulating the connection with the registry and opening the service port\n        // Provider service exposure configuration\n        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n        demoServiceConfig.setInterface(DemoService.class);\n        demoServiceConfig.setRef(new DemoServiceImpl());\n        demoServiceConfig.setVersion(\"1.0.0\");\n\n        // Second service configuration\n        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();\n        fooServiceConfig.setInterface(FooService.class);\n        fooServiceConfig.setRef(new FooServiceImpl());\n        fooServiceConfig.setVersion(\"1.0.0\");\n\n        ...\n\n        // Simplifying configuration assembly and controlling the startup process through DubboBootstrap\n        DubboBootstrap.getInstance()\n                .application(\"demo-provider\") // Application configuration\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\")) // Registry configuration\n                .protocol(protocol) // Global default protocol configuration\n                .service(demoServiceConfig) // Add ServiceConfig\n                .service(fooServiceConfig)\n                .start()    // Start Dubbo\n                .await();   // Suspend wait (prevent process exit)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ThreadPoolExecutor for HelloService in Dubbo\nDESCRIPTION: This snippet implements a custom ThreadPoolExecutor for HelloService with 100 fixed threads and a 60-second keep-alive time. The executor uses a LinkedBlockingDeque queue and a custom NamedThreadFactory for thread creation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// custom thread pool\npublic class HelloServiceExecutor extends ThreadPoolExecutor {\n    public HelloServiceExecutor() {\n        super(100, 100, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),\n            new NamedThreadFactory(\"HelloServiceExecutor\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service Interface\nDESCRIPTION: Protocol Buffers IDL definition for the reactive streaming service with various streaming patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.samples.triple.reactor;\n\nmessage GreeterRequest {\n  string name = 1;\n}\n\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice GreeterService {\n  rpc greetOneToOne(GreeterRequest) returns (GreeterReply);\n  rpc greetOneToMany(GreeterRequest) returns (stream GreeterReply);\n  rpc greetManyToOne(stream GreeterRequest) returns (GreeterReply);\n  rpc greetManyToMany(stream GreeterRequest) returns (stream GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DubboBootstrap for Service Provider in Java\nDESCRIPTION: Code example showing how to configure and start a Dubbo service provider using DubboBootstrap API. It demonstrates setting up protocols, services, registry, and application lifecycle management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.bootstrap.DubboBootstrap;\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ProviderConfig;\nimport org.apache.dubbo.config.ServiceConfig;\nimport com.xxx.DemoService;\nimport com.xxx.DemoServiceImpl;\n\npublic class DemoProvider {\n    public static void main(String[] args) {\n\n        ConfigCenterConfig configCenter = new ConfigCenterConfig();\n        configCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n\n        // Provider protocol configuration\n        ProtocolConfig protocol = new ProtocolConfig();\n        protocol.setName(\"dubbo\");\n        protocol.setPort(12345);\n        protocol.setThreads(200);\n\n        // Note: ServiceConfig is a heavy object, encapsulating the connection with the registry and opening the service port\n        // Provider service exposure configuration\n        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n        demoServiceConfig.setInterface(DemoService.class);\n        demoServiceConfig.setRef(new DemoServiceImpl());\n        demoServiceConfig.setVersion(\"1.0.0\");\n\n        // Second service configuration\n        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();\n        fooServiceConfig.setInterface(FooService.class);\n        fooServiceConfig.setRef(new FooServiceImpl());\n        fooServiceConfig.setVersion(\"1.0.0\");\n\n        ...\n\n        // Simplifying configuration assembly and controlling the startup process through DubboBootstrap\n        DubboBootstrap.getInstance()\n                .application(\"demo-provider\") // Application configuration\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\")) // Registry configuration\n                .protocol(protocol) // Global default protocol configuration\n                .service(demoServiceConfig) // Add ServiceConfig\n                .service(fooServiceConfig)\n                .start()    // Start Dubbo\n                .await();   // Suspend wait (prevent process exit)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Active Load Balance Strategy (Reference Side)\nDESCRIPTION: Configures the load balancing strategy to 'leastactive' on the client side to select providers with the least number of active requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: 配置基于主机的黑名单条件路由规则\nDESCRIPTION: 配置一个简单的条件路由规则，将特定 IP 地址的主机从服务的可用实例列表中排除。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n=> host != 172.22.3.91\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML\nDESCRIPTION: XML configuration example for a Dubbo service consumer, including application name, registry settings and service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/xml.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"demo-consumer\"/>\n    <dubbo:registry group=\"aaa\" address=\"zookeeper://127.0.0.1:2181\"/>\n    <dubbo:reference id=\"demoService\" check=\"false\" interface=\"org.apache.dubbo.samples.basic.api.DemoService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Manual Registration Configuration in YAML\nDESCRIPTION: Configuration for manual service registration control, preventing automatic service publication to the registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: -1\n  application:\n    manual-register: true\n```\n\n----------------------------------------\n\nTITLE: Implementing an Advanced Dubbo Configuration Bootstrap Class\nDESCRIPTION: An advanced bootstrap class that demonstrates accessing multiple types of Dubbo configuration beans after binding with @EnableDubboConfigBindings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Dubbo 配置引导类\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n */\npublic class DubboConfigurationBootstrap {\n\n    public static void main(String[] args) {\n        // 创建配置上下文\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        // 注册当前配置 Bean\n        context.register(DubboConfiguration.class);\n        context.refresh();\n \t\t// 获取 ApplicationConfig Bean：\"applicationBean\"、\"applicationBean2\" 和 \"applicationBean3\"\n        ApplicationConfig applicationBean = context.getBean(\"applicationBean\", ApplicationConfig.class);\n        ApplicationConfig applicationBean2 = context.getBean(\"applicationBean2\", ApplicationConfig.class);\n        ApplicationConfig applicationBean3 = context.getBean(\"applicationBean3\", ApplicationConfig.class);\n\n        System.out.printf(\"applicationBean.name = %s \\n\", applicationBean.getName());\n        System.out.printf(\"applicationBean2.name = %s \\n\", applicationBean2.getName());\n        System.out.printf(\"applicationBean3.name = %s \\n\", applicationBean3.getName());\n\n        // 获取 ModuleConfig Bean：\"moduleBean\"\n        ModuleConfig moduleBean = context.getBean(\"moduleBean\", ModuleConfig.class);\n\n        System.out.printf(\"moduleBean.name = %s \\n\", moduleBean.getName());\n\n        // 获取 RegistryConfig Bean\n        RegistryConfig registry = context.getBean(RegistryConfig.class);\n\n        System.out.printf(\"registry.address = %s \\n\", registry.getAddress());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Dubbo (Properties)\nDESCRIPTION: This properties file configuration demonstrates how to enable the Triple protocol in a Dubbo application using the dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.name=tri\n```\n\n----------------------------------------\n\nTITLE: Manual Registration Configuration in YAML\nDESCRIPTION: Configuration for manual service registration control, preventing automatic service publication to the registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: -1\n  application:\n    manual-register: true\n```\n\n----------------------------------------\n\nTITLE: Manual Registration Configuration in YAML\nDESCRIPTION: Configuration for manual service registration control, preventing automatic service publication to the registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: -1\n  application:\n    manual-register: true\n```\n\n----------------------------------------\n\nTITLE: Referencing Services from Multiple Registry Centers in Dubbo (XML Configuration)\nDESCRIPTION: This snippet demonstrates how to reference services from multiple registry centers in Dubbo. It configures China and International registry centers, then creates references to the same HelloService interface from both registries with different bean IDs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-registry.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n    <!-- 引用中文站服务 -->\n    <dubbo:reference id=\"chinaHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"chinaRegistry\" />\n    <!-- 引用国际站站服务 -->\n    <dubbo:reference id=\"intlHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"intlRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Configuration Center in Dubbo (YAML)\nDESCRIPTION: YAML configuration to enable Apollo as the configuration center for Dubbo. Specifies the Apollo server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  config-center:\n    address: apollo://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Implementing Etcd ServiceDiscoveryFactory in Dubbo\nDESCRIPTION: Extension class that implements ServiceDiscoveryFactory interface to create Etcd-based service discovery instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EtcdServiceDiscoveryFactory extends AbstractServiceDiscoveryFactory {\n\n    @Override\n    protected ServiceDiscovery createDiscovery(URL registryURL) {\n        return new EtcdServiceDiscovery(applicationModel, registryURL);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Dubbo and Zookeeper in Spring Boot\nDESCRIPTION: This XML snippet shows how to add the necessary Maven dependencies for using Dubbo with Zookeeper in a Spring Boot application. It includes the core Dubbo starter and Zookeeper-specific starters for different Zookeeper versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n<!-- Use this dependency only when Zookeeper Server version is 3.4.x and below -->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n<!-- Use this dependency only when Zookeeper Server version is 3.5.x and above\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with Java API\nDESCRIPTION: Example of exposing a Dubbo service using the Java API configuration approach. This snippet demonstrates how to configure an application, registry, interface, and implementation programmatically.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n        ServiceConfig<GreetingsService> service = new ServiceConfig<>();\n        service.setApplication(new ApplicationConfig(\"first-dubbo-provider\"));\n        service.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n        service.setInterface(GreetingsService.class);\n        service.setRef(new GreetingsServiceImpl());\n        service.export();\n        System.out.println(\"first-dubbo-provider is running.\");\n        System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Client via Maven\nDESCRIPTION: Demonstrates how to execute a Dubbo client application using Maven. The command compiles and runs a specific client class for making service calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.unary.TriUnaryClient\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML\nDESCRIPTION: XML configuration file for a Dubbo service provider using Nacos as the registry center. This defines application information, registry settings, protocol details, and exposes the DemoService interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息，用于计算依赖关系 -->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"/>\n\n    <!-- 使用 Nacos 注册中心 -->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- 用dubbo协议在随机端口暴露服务 -->\n    <dubbo:protocol name=\"dubbo\" port=\"-1\"/>\n\n    <!-- 声明需要暴露的服务接口 -->\n    <dubbo:service interface=\"com.alibaba.dubbo.demo.service.DemoService\" ref=\"demoService\" version=\"2.0.0\"/>\n\n    <!-- 和本地bean一样实现服务 -->\n    <bean id=\"demoService\" class=\"com.alibaba.dubbo.demo.service.DefaultService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Maven 项目结构示例\nDESCRIPTION: 展示了实现 StartupProbe 接口的 Maven 项目结构，包括 Java 实现类和 SPI 配置文件的位置关系。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/startup.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxStartupProbe.java (实现StartupProbe接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.StartupProbe (纯文本文件，内容为：xxx=com.xxx.XxxStartupProbe)\n```\n\n----------------------------------------\n\nTITLE: Triple Protocol Invocation and Exception Handling\nDESCRIPTION: This code shows how the Triple protocol handles invocations and exceptions on the server side. It invokes the service method, waits for the result asynchronously, and processes any exceptions that occur by calling appropriate error handling methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void invoke() {\n    ...\n    try {\n        //调用invoke方法请求服务\n        final Result response = invoker.invoke(invocation);\n        //异步等待结果\n        response.whenCompleteWithContext((r, t) -> {\n            //若异常不为空\n            if (t != null) {\n                //调用方法过程出现异常，调用onError方法处理\n                responseObserver.onError(t);\n                return;\n            }\n            if (response.hasException()) {\n                //调用onReturn方法处理业务异常\n                onReturn(response.getException());\n                return;\n            }\n            ...\n            //正常返回结果\n            onReturn(r.getValue());\n        });\n    } \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-instance Deployment in Dubbo\nDESCRIPTION: Demonstrates multi-instance deployment configuration in Dubbo using DubboBootstrap API. Shows how to create multiple isolated instances of services and consumers with different application contexts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/api/api.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nServiceConfig<DemoService> service = new ServiceConfig<>();\nservice.setInterface(DemoService.class);\nservice.setRef(new DemoServiceImpl());\n\nReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();\nreference1.setInterface(DemoService.class);\n\nReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();\nreference2.setInterface(DemoService.class);\n\n// Create a launcher (automatically create a new ApplicationModel)\nDubboBootstrap bootstrap1 = DubboBootstrap.newInstance();\n// Specify application name\nbootstrap1.application(new ApplicationConfig(\"dubbo-demo-app-1\"))\n\t.registry(new RegistryConfig(\"nacos://localhost:8848\"))\n\t// Create a module\n\t.newModule()\n\t\t// Publish service within the module\n\t\t.service(service)\n\t.endModule()\n\t// Create another module\n\t.newModule()\n\t\t// Subscribe to service within the module\n\t\t.reference(reference1)\n\t.endModule()\n\t.start();\n\n// Create another launcher (automatically create a new ApplicationModel)\nDubboBootstrap bootstrap2 = DubboBootstrap.newInstance();\n// Specify application name\nbootstrap2.application(new ApplicationConfig(\"dubbo-demo-app-2\"))\n\t.registry(new RegistryConfig(\"nacos://localhost:8848\"))\n\t// Create a module\n\t.newModule()\n\t\t// Subscribe to service within the module\n\t\t.reference(reference2)\n\t.endModule()\n\t.start();\n\n// stub1 and stub2 are two independent subscriptions, completely isolated\n\n// Subscribed stub\nDemoService stub1 = reference1.get();\nSystem.out.println(stub1.sayHello(\"Hello World!\"));\n\n// Subscribed stub\nDemoService stub2 = reference2.get();\nSystem.out.println(stub2.sayHello(\"Hello World!\"));\n\nbootstrap1.stop();\nbootstrap2.stop();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ReferenceConfigCache in Dubbo\nDESCRIPTION: This code demonstrates how to create a ReferenceConfig instance, cache it using ReferenceConfigCache, and access the service. The cache helps to prevent resource leaks and performance issues by reusing ReferenceConfig objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();  \nreference.setInterface(XxxService.class);  \nreference.setVersion(\"1.0.0\");  \n......  \nReferenceConfigCache cache = ReferenceConfigCache.getCache();  \n// cache.get方法中会缓存 Reference对象，并且调用ReferenceConfig.get方法启动ReferenceConfig  \nXxxService xxxService = cache.get(reference);  \n// 注意！ Cache会持有ReferenceConfig，不要在外部再调用ReferenceConfig的destroy方法，导致Cache内的ReferenceConfig失效！  \n// 使用xxxService对象  \nxxxService.sayHello();  \n```\n\n----------------------------------------\n\nTITLE: Provider Configuration for Custom Protocol\nDESCRIPTION: Properties file for configuring the Dubbo provider to use the custom edubbo protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# Custom protocol\ndubbo.provider.protocol=edubbo\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: Implementation class for the DemoService interface using Dubbo @Service annotation and Spring value injection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.service;\n\nimport org.apache.dubbo.config.annotation.Service;\nimport org.apache.dubbo.rpc.RpcContext;\nimport org.springframework.beans.factory.annotation.Value;\n\n@Service(version = \"${demo.service.version}\")\npublic class DefaultService implements DemoService {\n\n    @Value(\"${demo.service.name}\")\n    private String serviceName;\n\n    public String sayName(String name) {\n        RpcContext rpcContext = RpcContext.getContext();\n        return String.format(\"Service [name :%s , port : %d] %s(\\\"%s\\\") : Hello,%s\",\n                serviceName,\n                rpcContext.getLocalPort(),\n                rpcContext.getMethodName(),\n                name,\n                name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Properties格式的Dubbo服务级别配置示例\nDESCRIPTION: 展示了Dubbo中服务级别的配置格式，包括服务和引用的超时时间设置，甚至可以精确到方法级别的配置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.service.org.apache.dubbo.samples.api.DemoService.timeout=5000\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.timeout=6000\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.timeout=7000\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with Event Notifications\nDESCRIPTION: XML configuration example showing how to set up event notifications (onreturn, onthrow) for a Dubbo consumer reference. Demonstrates configuring callback methods for handling return values and exceptions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-async-client.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"demoCallback\" class=\"com.alibaba.dubbo.samples.notify.impl.NotifyImpl\" />\n\n<dubbo:reference id=\"demoService\" check=\"false\" interface=\"com.alibaba.dubbo.samples.notify.api.DemoService\" version=\"1.0.0\" group=\"cn\">\n    <dubbo:method name=\"sayHello\" onreturn=\"demoCallback.onreturn\" onthrow=\"demoCallback.onthrow\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataReportFactory SPI Interface in Java\nDESCRIPTION: Defines the SPI interface for MetadataReportFactory with a default implementation of 'redis' and an adaptive method for getting metadata reports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"redis\")\npublic interface MetadataReportFactory {\n    @Adaptive({\"protocol\"})\n    MetadataReport getMetadataReport(URL url);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo QoS Properties in Spring Boot\nDESCRIPTION: Configuration properties for enabling and configuring Dubbo QoS (Quality of Service) in a Spring Boot application. Sets the QoS port, enables/disables the feature, and controls foreign IP access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qosEnable=true\ndubbo.application.qosPort=33333\ndubbo.application.qosAcceptForeignIp=false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Configuration Bootstrap Class\nDESCRIPTION: A bootstrap class that demonstrates how to use AnnotationConfigApplicationContext to register Dubbo configuration beans and access them via context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Dubbo 配置引导类\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n */\npublic class DubboConfigurationBootstrap {\n    public static void main(String[] args) {\n        // 创建配置上下文\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        // 注册当前配置 Bean\n        context.register(DubboMultipleConfiguration.class);\n        context.refresh();\n\n        // 获取 ApplicationConfig Bean：\"applicationBean\"、\"applicationBean2\" 和 \"applicationBean3\"\n        ApplicationConfig applicationBean = context.getBean(\"applicationBean\", ApplicationConfig.class);\n        ApplicationConfig applicationBean2 = context.getBean(\"applicationBean2\", ApplicationConfig.class);\n        ApplicationConfig applicationBean3 = context.getBean(\"applicationBean3\", ApplicationConfig.class);\n\n        System.out.printf(\"applicationBean.name = %s \\n\", applicationBean.getName());\n        System.out.printf(\"applicationBean2.name = %s \\n\", applicationBean2.getName());\n        System.out.printf(\"applicationBean3.name = %s \\n\", applicationBean3.getName());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RedisMetadataReportFactory as SPI in Properties File\nDESCRIPTION: Registers the RedisMetadataReportFactory as an SPI implementation for MetadataReportFactory in the META-INF/dubbo/internal/org.apache.dubbo.metadata.store.MetadataReportFactory file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nredis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Rust Client with Unix Socket Connector\nDESCRIPTION: This snippet demonstrates how to initialize a Dubbo Rust client using ClientBuilder with a Unix socket connector. It sets the connector type to 'unix' and specifies the host address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/unix-transport.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet builder = ClientBuilder::new().with_connector(\"unix\").with_host(\"unix://127.0.0.1:8888\");\nlet mut cli = EchoClient::build(builder);\n```\n\n----------------------------------------\n\nTITLE: Using RpcContext for Asynchronous Calls in Dubbo\nDESCRIPTION: Example showing how to use RpcContext to handle asynchronous calls in Dubbo. The code demonstrates getting a CompletableFuture from the context and adding a callback to process the result.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// This call will immediately return null  \nasyncService.sayHello(\"world\");  \n// Get the Future reference of the call, which will be notified and set to this Future when the result returns  \nCompletableFuture<String> helloFuture = RpcContext.getServiceContext().getCompletableFuture();  \n// Add a callback to the Future  \nhelloFuture.whenComplete((retValue, exception) -> {  \n    if (exception == null) {  \n        System.out.println(retValue);  \n    } else {  \n        exception.printStackTrace();  \n    }  \n});  \n```\n\n----------------------------------------\n\nTITLE: Service Registration with Multiple Registries in Java\nDESCRIPTION: Shows how to configure a service to register with specific registry centers using @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(registry = {\"beijingRegistry\"})\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo-Go RPC Server with cURL\nDESCRIPTION: cURL command to test if the RPC server is working correctly by making a request to the Greet service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:20000/greet.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Dubbo Provider Properties\nDESCRIPTION: Properties file containing Dubbo provider configuration including Zookeeper registry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=demo-provider\ndubbo.registry.address=zookeeper://$DOCKER_HOST:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol in Dubbo\nDESCRIPTION: YAML configuration to enable the dubbo protocol with default port 20880. Setting port to -1 will randomly select an available port starting from 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   name: dubbo\n   port: 20880\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Filters with YAML Configuration\nDESCRIPTION: YAML configuration to globally disable specific filters like 'accesslog' and 'tps' for all consumer RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    filter: \"-accesslog,-tps\"\n```\n\n----------------------------------------\n\nTITLE: Defining BaseFilter Interface in Dubbo\nDESCRIPTION: The BaseFilter interface defines the core interceptor functionality in Dubbo. It includes the invoke method for processing calls and a Listener interface for handling responses and errors. This serves as the foundation for both Filter and ClusterFilter implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc;\n\npublic interface BaseFilter {\n    \n    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;\n\n    interface Listener {\n\n        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);\n\n        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Advanced REST Service with cURL\nDESCRIPTION: Shows how to test an advanced Dubbo REST service using cURL. This example includes custom headers and POST data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"c: 3\" -d 'name=Yang' \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo RPC Context in Java\nDESCRIPTION: Demonstrates how to obtain the RPC context object in Dubbo, which contains information about the current RPC call environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-context-information.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext()\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface-Level Service Discovery in YAML\nDESCRIPTION: YAML configuration to maintain interface-level service discovery when upgrading to Dubbo 3. The register-mode parameter supports values 'interface', 'instance', or 'all'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n application:\n   name: xxx\n   register-mode: interface #indicates continuing to use the old version service discovery model, optional values are interface, instance, all\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in XML\nDESCRIPTION: Demonstrates how to enable Zookeeper as a configuration center using XML configuration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service with Annotations\nDESCRIPTION: Java implementation of the DemoService interface using Dubbo's @Service annotation. This class will be registered as a service provider in the Nacos registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.service;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.alibaba.dubbo.rpc.RpcContext;\n\nimport org.springframework.beans.factory.annotation.Value;\n\n/**\n * Default {@link DemoService}\n *\n * @since 2.6.5\n */\n@Service(version = \"${demo.service.version}\")\npublic class DefaultService implements DemoService {\n\n    @Value(\"${demo.service.name}\")\n    private String serviceName;\n\n    public String sayName(String name) {\n        RpcContext rpcContext = RpcContext.getContext();\n        return String.format(\"Service [name :%s , port : %d] %s(\\\"%s\\\") : Hello,%s\",\n                serviceName,\n                rpcContext.getLocalPort(),\n                rpcContext.getMethodName(),\n                name,\n                name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dubbo Demo Namespace in Kubernetes\nDESCRIPTION: Commands to create a separate namespace for the Dubbo demo, enable Istio sidecar injection, and switch to the new namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Initialize namespace\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/Namespace.yml\n\n# Switch namespace\nkubens dubbo-demo\n\n# Enable automatic injection for dubbo-demo\nkubectl label namespace dubbo-demo istio-injection=enabled\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Service with Protocol Buffer\nDESCRIPTION: Protocol Buffer definition for the GreetService, including request and response message types and the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\noption go_package = \"github.com/apache/dubbo-go-samples/helloworld/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balancing at Client Side in Dubbo\nDESCRIPTION: XML configuration for setting the load balancing strategy for specific methods at the service consumer level. This demonstrates how to configure 'roundrobin' strategy for individual methods when consuming a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Call Dynamically in Dubbo Java API\nDESCRIPTION: This Java code snippet shows how to dynamically configure a single call as a local call using Dubbo's API, introduced in version 3.2.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getServiceContext().setLocalInvoke(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Version 2\nDESCRIPTION: Second implementation of the DevelopService interface using group2 and version 2.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(group = \"group2\", version = \"2.0\")\npublic class DevelopProviderServiceV2 implements DevelopService{\n    @Override\n    public String invoke(String param) {\n        StringBuilder s = new StringBuilder();\n        s.append(\"ServiceV2 param:\").append(param);\n        return s.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balancing for Provider in JavaConfig\nDESCRIPTION: Uses JavaConfig to set up method-level load balancing for a specific service method on the provider side. This example configures the sayHello method to use the roundrobin strategy.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DubboConfiguration {\n    @Bean\n    public ServiceBean demoService() {\n        MethodConfig method = new MethodConfig();\n        method.setName(\"sayHello\");\n        method.setLoadbalance(\"roundrobin\");\n\n        ServiceBean service = new ServiceBean();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        service.addMethod(method);\n        return service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Dubbo Ecosystem Components\nDESCRIPTION: A comprehensive table listing all major components and integrations available in the Dubbo ecosystem, organized by function including service discovery, configuration management, protocols, observability, and more.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/ecosystem.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Component List | Component List | Component List | Component List | Component List |\n| --- | --- | --- | --- | --- | --- |\n| Service Discovery | [Zookeeper] | [Nacos] | [Kubernetes Service] | DNS [In Development] | More |\n| Dynamic Configuration | [Zookeeper] | [Nacos] | [Apollo] | Kubernetes [In Development] | More |\n| Metadata Management | [Zookeeper] | [Nacos] | [Redis] | Kubernetes [In Development] | More |\n| RPC Protocol | [HTTP/2 (Triple)] | [TCP] | [HTTP/REST [Alpha]] | [gRPC] | [More] |\n| Visualization and Observability Platform | [Admin] | [Grafana] | [Prometheus] | - | - |\n| Full Link Tracing | [Zipkin] | [Skywalking] | [OpenTelemetry] | - | - |\n| Rate Limiting and Degradation | [Sentinel] | [Resilience4j] | [Hystrix] | - | - |\n| Distributed Transactions | [Seata] | - | - | - | - |\n| Gateway | [Higress] | [APISIX] | [Shenyu] | [Envoy] | - |\n| Service Mesh | Istio [In Development] | [Aeraka] | OpenSergo [In Development] | Proxyless [Alpha] | More |\n```\n\n----------------------------------------\n\nTITLE: Configuring Least-Active Load Balancing in Dubbo XML Configuration\nDESCRIPTION: These XML configurations set the loadbalance attribute to 'leastactive', which directs calls to the Provider with the least number of active connections, helping distribute load more evenly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SerializationOptimizer in XML\nDESCRIPTION: XML configuration for registering the SerializationOptimizer implementation to enhance serialization performance in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\" optimizer=\"org.apache.dubbo.demo.SerializationOptimizerImpl\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in XML\nDESCRIPTION: Demonstrates how to enable Zookeeper as a configuration center using XML configuration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Version 1\nDESCRIPTION: First implementation of the DevelopService interface using group1 and version 1.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(group = \"group1\", version = \"1.0\")\npublic class DevelopProviderServiceV1 implements DevelopService{\n    @Override\n    public String invoke(String param) {\n        StringBuilder s = new StringBuilder();\n        s.append(\"ServiceV1 param:\").append(param);\n        return s.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Advanced Triple Rest Service\nDESCRIPTION: cURL command to test the advanced REST service endpoint with custom headers and POST data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"c: 3\" -d 'name=Yang' \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr\"\n```\n\n----------------------------------------\n\nTITLE: SPI Extension Configuration File\nDESCRIPTION: Content of the SPI extension configuration file that maps the extension name to the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nxxx=com.xxx.XxxReadinessProbe\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registry Centers in Dubbo XML\nDESCRIPTION: Example showing how to register the same service to multiple registry centers in Dubbo. Configures both Hangzhou and Qingdao registry centers and registers a HelloService to both.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" default=\"false\" />\n    <!-- 向多个注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"hangzhouRegistry,qingdaoRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dubbo Dependencies in Maven POM\nDESCRIPTION: Maven dependency configuration showing how to upgrade to Dubbo 3.1.3 core library and Spring Boot starter. This includes both the main Dubbo artifact and the Spring Boot integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/2.x-to-3.x-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo</artifactId>\n  <version>3.1.3</version>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n  <version>3.1.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DemoLoadBalance in Java\nDESCRIPTION: Provides a custom implementation of the LoadBalance interface for demonstration purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.dubbo.spi.demo.consumer;\npublic class DemoLoadBalance implements LoadBalance {\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        System.out.println(\"DemoLoadBalance: Select the first invoker...\");\n        return invokers.get(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triple 协议异常捕获示例\nDESCRIPTION: 展示了如何在消费端捕获 Triple 协议中的业务异常。消费端可以使用 try-catch 捕获 Provider 端产生的业务异常，包括自定义异常和 RpcException。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ntry {\n\tgreeterProxy.echo(REQUEST_MSG);\n} catch (YourCustomizedException e) {\n\t e.printStackTrace();\n } catch (RpcException e) {\n\te.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance at Consumer Interface Level\nDESCRIPTION: Configures load balancing strategy at the service consumer interface level using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(loadbalance = \"roundrobin\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Version 2\nDESCRIPTION: Second implementation of the DevelopService interface using group2 and version 2.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(group = \"group2\", version = \"2.0\")\npublic class DevelopProviderServiceV2 implements DevelopService{\n    @Override\n    public String invoke(String param) {\n        StringBuilder s = new StringBuilder();\n        s.append(\"ServiceV2 param:\").append(param);\n        return s.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Metadata Center in Java\nDESCRIPTION: Java code to programmatically configure Zookeeper as the metadata center for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMetadataReportConfig metadataConfig = new MetadataReportConfig();\nmetadataConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface in Dubbo Provider\nDESCRIPTION: This code shows how to implement the GenericService interface on the service provider side. It handles different method calls dynamically without needing the actual service interfaces, making it suitable for service mocking frameworks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class GenericServiceImpl implements GenericService {\n    @Override\n    public Object $invoke(String method, String[] parameterTypes, Object[] args) throws GenericException {\n        if (method.equals(\"hi\")) {\n            return \"hi, \" + args[0];\n        } else if (method.equals(\"hello\")) {\n            return \"hello, \" + args[0];\n        }\n\n        return \"welcome\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a REST Controller that Calls Dubbo Service\nDESCRIPTION: Example of a Spring REST controller that uses an autowired Dubbo service to handle HTTP requests. This demonstrates integration of Dubbo with Spring web applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@RestController\npublic class UserTestController{\n    @Autowired \n    private UserReadService userReadService;\n    @RequestMapping(\"/user/getById\")\n    public String getUserById(Long id){\n        // just test\n        return userReadService.getUserById(id).toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Services with Different Protocols in Dubbo\nDESCRIPTION: These Java code snippets show how to configure different Dubbo services to use different protocols using the @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(protocol=\"dubbo-id\")\nprivate DemoServiceImpl implements DemoService {}\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(protocol=\"triple-id\")\nprivate GreetingServiceImpl implements GreetingService {}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Interface in Dubbogo Framework\nDESCRIPTION: Core Protocol interface definition in Dubbogo that handles network communication. It includes methods for exporting services (Export), referencing remote services (Refer), and destroying services (Destroy). This interface is fundamental for implementing specific network protocols like Triple.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Protocol interface {\n\t// Export service for remote invocation\n\tExport(invoker Invoker) Exporter\n\t// Refer a remote service\n\tRefer(url *common.URL) Invoker\n\t// Destroy will destroy all invoker and exporter, so it only is called once.\n\tDestroy()\n}\n```\n\n----------------------------------------\n\nTITLE: Consumer Triple Protocol Configuration in XML\nDESCRIPTION: XML configuration for explicitly specifying Triple protocol usage in consumer applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference protocol=\"tri\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Provider Authentication in Dubbo\nDESCRIPTION: Example showing how to enable service authentication on the provider side using @Service annotation. Sets service.auth and param.sign parameters to enable authentication and parameter validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/auth.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Service(parameters = {\"service.auth\",\"true\",\"param.sign\",\"true\"})\npublic class AuthDemoServiceImpl implements AuthService {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Force and Fail Behaviors with Mock in Dubbo XML\nDESCRIPTION: XML configurations to control mock behavior using force (always use mock) or fail (use mock only on failure) keywords, combined with return or throw actions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:return fake\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:throw com.foo.MockException\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"fail:return fake\"/>\n\n<!-- 等价于以下写法 -->\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"return fake\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"fail:throw com.foo.MockException\"/>\n\n<!-- 等价于以下写法 -->\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw com.foo.MockException\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go Server with Triple Protocol\nDESCRIPTION: This snippet shows how to configure a Dubbo-Go server to use the Triple protocol for gRPC compatibility by using the protocol.WithTriple() option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\tsrv, err := server.NewServer(\n        server.WithServerProtocol(\n        protocol.WithPort(20000),\n        protocol.WithTriple(),\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Connection Limits in Dubbo XML\nDESCRIPTION: XML configuration to limit the number of connections accepted by the server side to 10 connections. Can be configured either through provider or protocol elements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" accepts=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go Server with Triple Protocol\nDESCRIPTION: This snippet shows how to configure a Dubbo-Go server to use the Triple protocol for gRPC compatibility by using the protocol.WithTriple() option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\tsrv, err := server.NewServer(\n        server.WithServerProtocol(\n        protocol.WithPort(20000),\n        protocol.WithTriple(),\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: 使用Spring Boot方式配置Dubbo服务\nDESCRIPTION: 展示了如何在Spring Boot应用中配置Dubbo服务，通过application.properties文件进行配置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n  ## application.properties\n  \n  # Spring boot application\n  spring.application.name=dubbo-externalized-configuration-provider-sample\n  \n  # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\n  dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n  \n  # Dubbo Application\n  ## The default value of dubbo.application.name is ${spring.application.name}\n  ## dubbo.application.name=${spring.application.name}\n  \n  # Dubbo Protocol\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=12345\n  \n  ## Dubbo Registry\n  dubbo.registry.address=N/A\n  \n  ## DemoService version\n  demo.service.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Executors Using Java API in Dubbo\nDESCRIPTION: This snippet demonstrates how to configure isolated executor services for different Dubbo services using the Java API. The example sets up three service configurations with different executor settings: two with custom thread pools (10 and 100 threads respectively) and one using the default protocol executor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    public void test() {\n        // provider app\n        DubboBootstrap providerBootstrap = DubboBootstrap.newInstance();\n\n        ServiceConfig serviceConfig1 = new ServiceConfig();\n        serviceConfig1.setInterface(DemoService.class);\n        serviceConfig1.setRef(new DemoServiceImpl());\n        serviceConfig1.setVersion(version1);\n        // Set executor1 for serviceConfig1, max threads is 10\n        NamedThreadFactory threadFactory1 = new NamedThreadFactory(\"DemoService-executor\");\n        ExecutorService executor1 = Executors.newFixedThreadPool(10, threadFactory1);\n        serviceConfig1.setExecutor(executor1);\n\n        ServiceConfig serviceConfig2 = new ServiceConfig();\n        serviceConfig2.setInterface(HelloService.class);\n        serviceConfig2.setRef(new HelloServiceImpl());\n        serviceConfig2.setVersion(version2);\n        // Set executor2 for serviceConfig2, max threads is 100\n        NamedThreadFactory threadFactory2 = new NamedThreadFactory(\"HelloService-executor\");\n        ExecutorService executor2 = Executors.newFixedThreadPool(100, threadFactory2);\n        serviceConfig2.setExecutor(executor2);\n\n        ServiceConfig serviceConfig3 = new ServiceConfig();\n        serviceConfig3.setInterface(HelloService.class);\n        serviceConfig3.setRef(new HelloServiceImpl());\n        serviceConfig3.setVersion(version3);\n        // Because executor is not set for serviceConfig3, the default executor of serviceConfig3 is built using\n        // the threadpool parameter of the protocolConfig ( FixedThreadpool , max threads is 200)\n        serviceConfig3.setExecutor(null);\n\n        // It takes effect only if [executor-management-mode=isolation] is configured\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"provider-app\");\n        applicationConfig.setExecutorManagementMode(\"isolation\");\n\n        providerBootstrap\n        .application(applicationConfig)\n        .registry(registryConfig)\n        // export with tri and dubbo protocol\n        .protocol(new ProtocolConfig(\"tri\", 20001))\n        .protocol(new ProtocolConfig(\"dubbo\", 20002))\n        .service(serviceConfig1)\n        .service(serviceConfig2)\n        .service(serviceConfig3);\n\n        providerBootstrap.start();\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo-Go Client that Connects to Both Dubbo-Go and gRPC Servers\nDESCRIPTION: This code demonstrates a Dubbo-Go client that can connect to both a Dubbo-Go server and a gRPC server using the same service interface. It shows successful interoperability between the two protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/rpc/grpc/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\t// test connect with dubbo\n\tdubboCli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(dubboCli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n\n\t// test connect with grpc\n\tgrpcCli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20001\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsvc, err = greet.NewGreetService(grpcCli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Service Provider\nDESCRIPTION: Shows how to start a Dubbo service provider by initializing a Spring context with the provider configuration. It also starts an embedded ZooKeeper for service registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic class ProviderBootstrap {\n    public static void main(String[] args) throws Exception {\n        new EmbeddedZooKeeper(2181, false).start(); // #1\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class); // #2\n        context.start(); // #3\n        System.in.read(); // #4\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Active Load Balance Strategy (Service Side)\nDESCRIPTION: Configures the load balancing strategy to 'leastactive' on the service side to distribute requests to clients with the least number of active requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Properties\nDESCRIPTION: Basic properties configuration for setting up Nacos registry with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=nacos://localhost:8848\ndubbo.registry.register-mode=instance\n```\n\n----------------------------------------\n\nTITLE: Accessing RPC Service with Dubbo-go Client\nDESCRIPTION: Go code to create a Dubbo-go client, obtain a service proxy, and make an RPC call to the GreetService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Java interface definition for a Dubbo service that will be registered with Nacos. The interface represents the contract between service providers and consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.service;\n\n/**\n * DemoService\n *\n * @since 2.6.5\n */\npublic interface DemoService {\n\n    String sayName(String name);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Global Delayed Registration Configuration in YAML\nDESCRIPTION: Shows how to configure a global default delay for all service registrations using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: 5000\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-side Concurrent Execution for a Specific Method in Dubbo XML Configuration\nDESCRIPTION: This XML configuration limits the number of concurrent executions for the sayHello method of com.foo.BarService to a maximum of 10 threads on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" executes=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Proxyless Mesh to Kubernetes\nDESCRIPTION: Commands to deploy the provider and consumer components to the Kubernetes cluster using the deployment and service YAML files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd ./dubbo-samples-xds-provider/src/main/resources/k8s\n# dubbo-samples-xds/dubbo-samples-xds-provider/src/main/resources/k8s/Deployment.yml\n# dubbo-samples-xds/dubbo-samples-xds-provider/src/main/resources/k8s/Service.yml\nkubectl apply -f Deployment.yml\nkubectl apply -f Service.yml\ncd ../../../../../dubbo-samples-xds-consumer/src/main/resources/k8s\n# dubbo-samples-xds/dubbo-samples-xds-consumer/src/main/resources/k8s/Deployment.yml\nkubectl apply -f Deployment.yml\ncd ../../../../../\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Filter in Dubbo Application Properties\nDESCRIPTION: This configuration snippet demonstrates how to activate the custom AppendedFilter in the Dubbo provider's application properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# Apply AppendedFilter\ndubbo.provider.filter=appended\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultMetricsCollector for Storing Metrics in Java\nDESCRIPTION: Implementation of the MetricsCollector interface for storing various metrics using concurrent data structures. It tracks request counts, processing times, and response times.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class DefaultMetricsCollector implements MetricsCollector {\n    private Boolean collectEnabled = false;\n    private final List<MetricsListener> listeners = new ArrayList<>();\n    private final ApplicationModel applicationModel;\n    private final String applicationName;\n\n    private final Map<MethodMetric, AtomicLong> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> processingRequests = new ConcurrentHashMap<>();\n\n    private final Map<MethodMetric, AtomicLong> lastRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> minRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> maxRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> avgRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> totalRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> rtCount = new ConcurrentHashMap<>();\n }\n```\n\n----------------------------------------\n\nTITLE: Tag Routing Rule Configuration for Dubbo Service\nDESCRIPTION: YAML configuration for tag routing rules that isolate traffic for the 'shop-detail' service. This rule directs traffic with 'dubbo.tag=gray' to instances tagged with 'env=gray'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/isolation.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nforce: true\nenabled: true\nkey: shop-detail\ntags:\n  - name: gray\n    match:\n      - key: env\n        value:\n          exact: gray\n```\n\n----------------------------------------\n\nTITLE: Configuring Hessian2 Serialization in Dubbo using YAML\nDESCRIPTION: This snippet shows how to configure Hessian2 as the serialization method in a Spring Boot application.yml file for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/hessian.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n protocol:\n   serialization: hessian2\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Behavior with force and fail Keywords\nDESCRIPTION: Examples of using 'force' and 'fail' keywords to configure mock behavior in XML. These keywords control whether mocking is always enforced or only used on failure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:return fake\"/>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:throw com.foo.MockException\"/>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"fail:return fake\"/>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"fail:throw com.foo.MockException\"/>\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo-go Configuration from File\nDESCRIPTION: Example showing how to load Dubbo-go configuration from a YAML file using config.Load() and perform RPC invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // set consumer struct if needed\n    config.SetConsumerService(grpcGreeterImpl)\n    \n    // config loader start\n    if err := config.Load(); err != nil {\n        panic(err)\n    }\n    \n    logger.Info(\"start to test dubbo\")\n    req := &api.HelloRequest{\n        Name: \"laurence\",\n    }\n    // do RPC invocation\n    reply, err := grpcGreeterImpl.SayHello(context.Background(), req)\n    if err != nil {\n        logger.Error(err)\n    }\n    logger.Infof(\"client response result: %v\\n\", reply)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Service with Spring MVC Annotations in Dubbo\nDESCRIPTION: Example of defining a REST-style service interface using Spring MVC annotations in Dubbo. This approach allows the service to be accessed via REST-style HTTP requests when using the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/demo\")\npublic interface DemoService {\n    @GetMapping(value = \"/hello\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Routing Rule in Dubbo\nDESCRIPTION: YAML configuration for setting up a conditional routing rule in Dubbo Admin. This rule redirects calls to the getInfo method of UserService to a specific host.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nconditions:\n  - 'method=getInfo => host = {your ip address}'\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritance-like Structure in Go for Dubbo-go-hessian2\nDESCRIPTION: Demonstrates how to use anonymous structs in Go to mimic Java inheritance for Dubbo-go-hessian2 serialization. It also shows how to ignore redundant fields using the `hessian:\"-\"` tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/dubbo-go-1.4.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Dog struct {\n    Animal\n    Gender  string\n    DogName string `hessian:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol for REST Support in Dubbo\nDESCRIPTION: Configuration example for enabling Triple protocol in Dubbo, which supports REST-style services. Starting from version 3.3, the Triple protocol supports publishing standard HTTP services in REST style.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   name: tri\n   port: 50051\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Method-Level Caching in Dubbo with XML\nDESCRIPTION: XML configuration for enabling LRU caching on a specific method of a client-side Dubbo service reference. This applies caching only to the specified method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.DemoService\">\n    <dubbo:method name=\"sayHello\" cache=\"lru\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Side Implicit Parameters in Dubbo\nDESCRIPTION: Shows how to set implicit parameters on the provider side that will be passed back to the consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class XxxServiceImpl implements XxxService {\n\n    public void xxx() {\n        String index = xxx;\n        RpcContext.getServerContext().setAttachment(\"result\", index);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo RPC Server with DubboBootstrap\nDESCRIPTION: Basic example showing how to start a Dubbo RPC Server using DubboBootstrap. Configures protocol and service settings for the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) {\n        DubboBootstrap.getInstance()\n            .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))\n            .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())\n            .start()\n            .await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Triple Service with cURL using JSON\nDESCRIPTION: This shell command demonstrates how to access a Triple service using cURL with JSON payload. It sends a POST request to the specified endpoint with a JSON content type header and data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\":\"Dubbo\"}' \\\n    http://localhost:50052/org.apache.dubbo.samples.tri.unary.Greeter/greet/\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Attachments for Traffic Management\nDESCRIPTION: XML configuration for adding attachments (like zone and tag) to registry clusters, which helps with traffic management across data centers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"multiple://127.0.0.1:2181?separator=;&reference-registry=zookeeper://address11?attachments=zone=hangzhou,tag=middleware;zookeeper://address21\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Dubbo REST Support\nDESCRIPTION: Maven configuration showing the necessary dependencies to enable REST support in Dubbo, including the core Dubbo library, RESTEasy components, and Zookeeper client for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n    <properties>\n        <dubbo.version>2.6.5</dubbo.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>dubbo-dependencies-bom</artifactId>\n                <version>${dubbo.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>dubbo</artifactId>\n            <version>${dubbo.version}</version>\n        </dependency>\n\n        <!-- REST support dependencies -->\n        <dependency>\n            <groupId>io.netty</groupId>\n            <artifactId>netty-all</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-jaxrs</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-client</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-netty4</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-jackson-provider</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-jaxb-provider</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>javax.servlet-api</artifactId>\n        </dependency>\n\n        <!-- zookeeper client dependency -->\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-framework</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Nacos Dependencies for Spring Boot Applications\nDESCRIPTION: Maven dependencies required to integrate Dubbo with Nacos for Spring Boot applications. This includes the dubbo-spring-boot-starter and dubbo-nacos-spring-boot-starter packages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-nacos-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Consumer Configuration for Custom Protocol\nDESCRIPTION: Properties file for configuring the Dubbo consumer to use the custom edubbo protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# Custom protocol\ndubbo.consumer.protocol=edubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Based Registry Selection\nDESCRIPTION: XML configuration for setting up zone attributes for registries and a Java example showing how to direct traffic to a specific zone using RpcContext parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" zone=\"hangzhou\" />\n<dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" zone=\"qingdao\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service using Protocol Buffers IDL\nDESCRIPTION: Defines a Greeter service with a unary RPC method using Protocol Buffers IDL. This defines the service interface, request and response message structures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.sample.tri;\n\n\n// The request message containing the user's name.\nmessage GreeterRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  // unary\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in YAML\nDESCRIPTION: This YAML snippet shows how to configure Zookeeper as a registry center in a Dubbo application. It specifies the Zookeeper address and sets the register mode to 'instance' for application-level service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: zookeeper://localhost:2181\n   register-mode: instance # New users please set this value to enable application-level service discovery, optional values are interface, instance, all; default value is all, future versions will switch the default value to instance\n```\n\n----------------------------------------\n\nTITLE: Triple Protocol Wrapper Definition\nDESCRIPTION: Protobuf definition for request and response wrappers used in Triple protocol\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_8\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage org.apache.dubbo.triple;\n\nmessage TripleRequestWrapper {\n    // hessian4\n    // json\n    string serializeType = 1;\n    repeated bytes args = 2;\n    repeated string argTypes = 3;\n}\n\nmessage TripleResponseWrapper {\n    string serializeType = 1;\n    bytes data = 2;\n    string type = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Side Implicit Parameters in Dubbo\nDESCRIPTION: Shows how to set implicit parameters on the provider side that will be passed back to the consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class XxxServiceImpl implements XxxService {\n\n    public void xxx() {\n        String index = xxx;\n        RpcContext.getServerContext().setAttachment(\"result\", index);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP2 Transport Layer Settings in YAML Format\nDESCRIPTION: Shows the equivalent YAML configuration for the Triple protocol's HTTP2 transport layer settings, providing the same functionality as the properties version but in YAML format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  rpc:\n    tri:\n      header-table-size: 4096\n      enable-push: false\n      max-concurrent-streams: 2147483647\n      initial-window-size: 1048576\n      max-frame-size: 32768\n      max-header-list-size: 8192\n```\n\n----------------------------------------\n\nTITLE: Configuring dubbo:protocol in XML for Apache Dubbo\nDESCRIPTION: Example of using the dubbo:protocol element to configure service provider protocol settings. This snippet shows the basic structure and some common attributes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol\n    name=\"dubbo\"\n    port=\"20880\"\n    threadpool=\"fixed\"\n    threads=\"200\"\n    accepts=\"0\"\n    payload=\"8388608\"\n    codec=\"dubbo\"\n    serialization=\"hessian2\"\n    accesslog=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializationOptimizer for Class Registration\nDESCRIPTION: Java implementation of SerializationOptimizer interface to register serializable classes for performance optimization in FST or Kryo serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class SerializationOptimizerImpl implements SerializationOptimizer {\n\n    public Collection<Class> getSerializableClasses() {\n        List<Class> classes = new LinkedList<Class>();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        return classes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default Values in Dubbo XML\nDESCRIPTION: This XML configuration shows how to set global default timeout values for all providers and consumers. This provides a way to configure common settings without repeating them in each service or reference declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider timeout=\"5000\" />\n<dubbo:consumer timeout=\"5000\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Specific Externalized Configuration in YAML\nDESCRIPTION: YAML configuration for enabling application-specific externalized configuration with Nacos, specifying the server address and optional application config file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: nacos://127.0.0.1:2181\n    app-config-file: dubbo.properties # optional\n```\n\n----------------------------------------\n\nTITLE: Defining Inheritance-like Structure in Go for Dubbo-go-hessian2\nDESCRIPTION: Demonstrates how to use anonymous structs in Go to mimic Java inheritance for Dubbo-go-hessian2 serialization. It also shows how to ignore redundant fields using the `hessian:\"-\"` tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/dubbo-go-1.4.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Dog struct {\n    Animal\n    Gender  string\n    DogName string `hessian:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JAX-RS REST Service Interface\nDESCRIPTION: Interface definition for a JAX-RS based REST service using @Path and HTTP method annotations. Includes various parameter types and content types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/jaxrs/demo/service\")\npublic interface JaxRsRestDemoService {\n    @GET\n    @Path(\"/hello\")\n    Integer hello(@QueryParam(\"a\") Integer a, @QueryParam(\"b\") Integer b);\n    \n    // ... additional methods\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Token Authorization in Dubbo\nDESCRIPTION: XML configuration to enable token verification for a specific service rather than globally. The examples show both random UUID token generation and fixed token approaches at the service level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/token-authorization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Random token, generated using UUID -->\n<dubbo:service interface=\"com.foo.BarService\" token=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Fixed token, equivalent to a password -->\n<dubbo:service interface=\"com.foo.BarService\" token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Registry Distribution\nDESCRIPTION: XML configuration for assigning weights to different registries to control traffic distribution across clusters, enabling weighted load balancing for multi-registry setups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" weight=\"100\"/>\n<dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" weight=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Stream Request in Dubbo Python\nDESCRIPTION: Demonstrates how to make a single-write server stream request using the stub interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstub.server_stream(greeter_pb2.GreeterRequest(name=\"hello world from dubbo-python\"))\n```\n\n----------------------------------------\n\nTITLE: Creating StickFirstStateRouterFactory for Apache Dubbo Router Extension\nDESCRIPTION: A factory class that implements StateRouterFactory to create instances of the custom StickFirstStateRouter. This factory is registered through Dubbo's SPI mechanism to make the custom router available to the framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/router.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.router.consumer.router;\n\nimport org.apache.dubbo.common.URL;\nimport org.apache.dubbo.rpc.cluster.router.state.StateRouter;\nimport org.apache.dubbo.rpc.cluster.router.state.StateRouterFactory;\n\npublic class StickFirstStateRouterFactory implements StateRouterFactory {\n    @Override\n    public <T> StateRouter<T> getRouter(Class<T> interfaceClass, URL url) {\n        return new StickFirstStateRouter<>(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using return Keyword for Mock Values in XML\nDESCRIPTION: Example of using the 'return' keyword to specify mock return values in XML configuration. This can be used to return null, primitive values, or JSON strings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"return null\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application for Native Image\nDESCRIPTION: YAML configuration for Dubbo application settings, including protocol, registry, config center, and metadata report configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: ${spring.application.name}\n    logger: slf4j\n  protocol:\n    name: dubbo\n    port: -1\n    serialization: fastjson2\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n  config-center:\n    address: zookeeper://127.0.0.1:2181\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n  provider:\n    serialization: fastjson2\n  consumer:\n    serialization: fastjson2\n```\n\n----------------------------------------\n\nTITLE: Specifying Protocol for Service Consumption in Dubbo\nDESCRIPTION: These Java code snippets demonstrate how to specify the protocol to use when consuming Dubbo services using the @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(protocol=\"dubbo\")\nprivate DemoService demoService;\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(protocol=\"tri\")\nprivate GreetingService greetingService;\n```\n\n----------------------------------------\n\nTITLE: Implementing LoadBalance Extension Registry in Go\nDESCRIPTION: This code implements the extension registry pattern for LoadBalance components in Dubbo-Go. It provides methods to register and retrieve LoadBalance implementations using a map-based cache.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage extension\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance\"\n)\n\nvar loadbalances = make(map[string]func() loadbalance.LoadBalance)\n\n// SetLoadbalance sets the loadbalance extension with @name\n// For example: random/round_robin/consistent_hash/least_active/...\nfunc SetLoadbalance(name string, fcn func() loadbalance.LoadBalance) {\n\tloadbalances[name] = fcn\n}\n\n// GetLoadbalance finds the loadbalance extension with @name\nfunc GetLoadbalance(name string) loadbalance.LoadBalance {\n\tif loadbalances[name] == nil {\n\t\tpanic(\"loadbalance for \" + name + \" is not existing, make sure you have import the package.\")\n\t}\n\n\treturn loadbalances[name]()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unary Request with Timeout in Triple Protocol over HTTP/1\nDESCRIPTION: This example shows a unary request using the Triple protocol over HTTP/1 with a specified timeout. It includes both the request and response headers and bodies, demonstrating the use of the 'Rest-service-timeout' header.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1\n> Host: 127.0.0.1:30551\n> Content-Type: application/json\n> Rest-service-timeout: 5000\n>\n> [\"Dubbo\"]\n\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n<\n< {\"greeting\": \"Hello, Buf!\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication for Dubbo Service Provider in Java\nDESCRIPTION: This snippet demonstrates how to configure authentication for a Dubbo service provider using annotations. It sets 'service.auth' to true to enable authentication and 'param.sign' to true for parameter validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/auth.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Service(parameters = {\"service.auth\",\"true\",\"param.sign\",\"true\"})\npublic class AuthDemoServiceImpl implements AuthService {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeting Service\nDESCRIPTION: Implementation of the GreetingService interface with Dubbo @Service annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class AnnotatedGreetingService implements GreetingService {\n    public String sayHello(String name) {\n        return \"hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Centralized Metadata Mode in Dubbo\nDESCRIPTION: This configuration enables the centralized metadata mode for Dubbo service discovery. It changes the default point-to-point metadata mode to use remote centralized metadata storage.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom LoadBalance in Java\nDESCRIPTION: Java implementation example of a custom LoadBalance for Dubbo. This class needs to implement the LoadBalance interface and its select method to determine which provider to choose for each invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/load-balance.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.cluster.LoadBalance;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException; \n \npublic class XxxLoadBalance implements LoadBalance {\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, Invocation invocation) throws RpcException {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol in Properties\nDESCRIPTION: Example of configuring preferred serialization protocols in Spring Boot application.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.provider.prefer-serialization=fastjson2,hessian2\ndubbo.provider.serialization=hessian2\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Check via Java\nDESCRIPTION: Shows how to configure Serializable interface checking using ApplicationConfig\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setCheckSerializable(true);\n```\n\n----------------------------------------\n\nTITLE: Service Annotation for Dubbo Provider\nDESCRIPTION: Demonstrates how to expose a service using Dubbo's @Service annotation, which allows for service configuration directly in Java code without XML.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport com.alibaba.dubbo.config.annotation.Service;\n\n@Service(timeout = 5000)\npublic class AnnotateServiceImpl implements AnnotateService { \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: ServiceRestMetadata Class Definition\nDESCRIPTION: Java class representing service REST metadata, including service interface, version, group, port, and method information for both provider and consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ServiceRestMetadata implements Serializable {\n\n    private String serviceInterface; // com.demo.TestInterface\n\n    private String version;// 1.0.0\n\n    private String group;// demo\n\n    private Set<RestMethodMetadata> meta;// method 元信息\n\n    private int port;// 端口 for provider service key\n\n    private boolean consumer;// consumer 标志\n\n    /**\n     * make a distinction between mvc & resteasy\n     */\n    private Class codeStyle;// \n\n     /**\n     *  for provider\n     */\n    private Map<PathMatcher, RestMethodMetadata> pathToServiceMap;\n    \n    /**\n    * for consumer\n    */\n    private Map<String, Map<ParameterTypesComparator, RestMethodMetadata>> methodToServiceMa\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Authentication in Properties File\nDESCRIPTION: Properties file configuration for authenticating with a Nacos server using username and password credentials in URL format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.registry.address: nacos://nacos:nacos@localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface in Java\nDESCRIPTION: Example implementation of the GenericService interface that handles generic method invocations. The example shows a simple sayHello method implementation using the $invoke method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class MyGenericService implements GenericService {\n\n    public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException {\n        if (\"sayHello\".equals(methodName)) {\n            return \"Welcome \" + args[0];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface in Java\nDESCRIPTION: Example implementation of the GenericService interface that handles generic method invocations. The example shows a simple sayHello method implementation using the $invoke method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class MyGenericService implements GenericService {\n\n    public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException {\n        if (\"sayHello\".equals(methodName)) {\n            return \"Welcome \" + args[0];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface in Java\nDESCRIPTION: Example implementation of the GenericService interface that handles generic method invocations. The example shows a simple sayHello method implementation using the $invoke method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class MyGenericService implements GenericService {\n\n    public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException {\n        if (\"sayHello\".equals(methodName)) {\n            return \"Welcome \" + args[0];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Services with Custom Executors\nDESCRIPTION: These service implementations demonstrate how to use custom executors and default executors in Dubbo services using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// \"executor-hello-service\" is beanName\n@DubboService(executor = \"executor-demo-service\", version = \"1.0.0\", group = \"Group1\")\npublic class DemoServiceImplV1 implements DemoService {\n\n  @Override\n  public String sayName(String name) {\n    return \"server name\";\n  }\n\n  @Override\n  public Box getBox() {\n    return null;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// not set executor for this service, the default executor built using threadpool parameter of the protocolConfig\n@DubboService(version = \"3.0.0\", group = \"Group3\")\npublic class HelloServiceImplV2 implements HelloService {\n    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV2.class);\n\n    @Override\n    public String sayHello(String name) {\n        return \"server hello\";\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(executor = \"executor-hello-service\", version = \"2.0.0\", group = \"Group2\")\npublic class HelloServiceImplV3 implements HelloService {\n    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV3.class);\n\n    @Override\n    public String sayHello(String name) {\n        return \"server hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Methods in Java\nDESCRIPTION: Provides implementations for server streaming and bidirectional streaming methods using StreamObserver.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/migration/migration-triple.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class WrapGreeterImpl implements WrapGreeter {\n\n    //...\n\n    @Override\n    public StreamObserver<String> sayHelloStream(StreamObserver<String> response) {\n        return new StreamObserver<String>() {\n            @Override\n            public void onNext(String data) {\n                System.out.println(data);\n                response.onNext(\"hello,\"+data);\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                throwable.printStackTrace();\n            }\n\n            @Override\n            public void onCompleted() {\n                System.out.println(\"onCompleted\");\n                response.onCompleted();\n            }\n        };\n    }\n\n    @Override\n    public void sayHelloServerStream(String request, StreamObserver<String> response) {\n        for (int i = 0; i < 10; i++) {\n            response.onNext(\"hello,\" + request);\n        }\n        response.onCompleted();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface in Java\nDESCRIPTION: Example implementation of the GenericService interface that handles generic method invocations. The example shows a simple sayHello method implementation using the $invoke method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class MyGenericService implements GenericService {\n\n    public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException {\n        if (\"sayHello\".equals(methodName)) {\n            return \"Welcome \" + args[0];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Services with Custom Executors\nDESCRIPTION: These service implementations demonstrate how to use custom executors and default executors in Dubbo services using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// \"executor-hello-service\" is beanName\n@DubboService(executor = \"executor-demo-service\", version = \"1.0.0\", group = \"Group1\")\npublic class DemoServiceImplV1 implements DemoService {\n\n  @Override\n  public String sayName(String name) {\n    return \"server name\";\n  }\n\n  @Override\n  public Box getBox() {\n    return null;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n// not set executor for this service, the default executor built using threadpool parameter of the protocolConfig\n@DubboService(version = \"3.0.0\", group = \"Group3\")\npublic class HelloServiceImplV2 implements HelloService {\n    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV2.class);\n\n    @Override\n    public String sayHello(String name) {\n        return \"server hello\";\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(executor = \"executor-hello-service\", version = \"2.0.0\", group = \"Group2\")\npublic class HelloServiceImplV3 implements HelloService {\n    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV3.class);\n\n    @Override\n    public String sayHello(String name) {\n        return \"server hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Dubbo REST Service Provider\nDESCRIPTION: Java bootstrap class that launches the Dubbo service provider by loading the Spring XML configuration. This example demonstrates how to start a REST service in Dubbo using ClassPathXmlApplicationContext.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class RestProvider {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/rest-provider.xml\");\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming RPC Methods in Dubbo (Java)\nDESCRIPTION: This snippet shows the implementation of the WrapperGreeter interface, providing concrete implementations for both bidirectional and server-side streaming methods. It demonstrates how to handle streaming requests and responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class WrapGreeterImpl implements WrapGreeter {\n\n    //...\n\n    @Override\n    public StreamObserver<String> sayHelloStream(StreamObserver<String> response) {\n        return new StreamObserver<String>() {\n            @Override\n            public void onNext(String data) {\n                System.out.println(data);\n                response.onNext(\"hello,\"+data);\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                throwable.printStackTrace();\n            }\n\n            @Override\n            public void onCompleted() {\n                System.out.println(\"onCompleted\");\n                response.onCompleted();\n            }\n        };\n    }\n\n    @Override\n    public void sayHelloServerStream(String request, StreamObserver<String> response) {\n        for (int i = 0; i < 10; i++) {\n            response.onNext(\"hello,\" + request);\n        }\n        response.onCompleted();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balancing for Consumer in JavaConfig\nDESCRIPTION: Uses JavaConfig to set up method-level load balancing for a specific service method on the consumer side. This configures the sayHello method to use the roundrobin strategy.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nprivate DemoService demoService;\n\n@Configuration\npublic class DubboConfiguration {\n    @Bean\n    public ReferenceBean demoService() {\n        MethodConfig method = new MethodConfig();\n        method.setName(\"sayHello\");\n        method.setLoadbalance(\"roundrobin\");\n\n        ReferenceBean<DemoService> reference = new ReferenceBean<>();\n        reference.setInterface(DemoService.class);\n        reference.addMethod(method);\n        return reference;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Timeout on Consumer Side\nDESCRIPTION: Sets a 5-second timeout for DemoService using @DubboReference annotation on the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(timeout=5000)\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in YAML\nDESCRIPTION: Configures the Nacos registry address and register mode in application.yml for Spring Boot.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   register-mode: instance # Set this value for new users, indicates enabling application-level service discovery\n```\n\n----------------------------------------\n\nTITLE: Compiling Protobuf for Dubbo-go Triple Protocol\nDESCRIPTION: This shell command compiles the protobuf definition into Go code for use with the Dubbo-go triple protocol. It generates both standard Go protobuf code and Dubbo-go specific triple code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative \\\n    --go-triple_out=. --go-triple_opt=paths=source_relative \\\n    proto/greet.proto\n```\n\n----------------------------------------\n\nTITLE: 配置多注册中心\nDESCRIPTION: 在 YAML 中配置多个注册中心,并指定注册模式为实例级。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registries\n  beijingRegistry\n   register-mode: instance #新用户建议使用，老用户如继续使用老服务发现模型则删除此配置\n   address: zookeeper://localhost:2181\n  shanghaiRegistry\n   register-mode: instance #新用户建议使用，老用户如继续使用老服务发现模型则删除此配置\n   address: zookeeper://localhost:2182\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Server in Dubbo Transport Extension\nDESCRIPTION: Example implementation of a custom Server that extends AbstractServer, handling the server-side network communication in a custom Dubbo transport extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/remoting.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.transport.transporter.AbstractServer;\n \npublic class XxxServer extends AbstractServer {\n    public XxxServer(URL url, ChannelHandler handler) throws RemotingException{\n        super(url, handler);\n    }\n    protected void doOpen() throws Throwable {\n        // ...\n    }\n    protected void doClose() throws Throwable {\n        // ...\n    }\n    public Collection<Channel> getChannels() {\n        // ...\n    }\n    public Channel getChannel(InetSocketAddress remoteAddress) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo QoS via XML\nDESCRIPTION: This snippet shows how to configure Dubbo QoS parameters using XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"demo-provider\">\n    <dubbo:parameter key=\"qos.enable\" value=\"true\"/>\n    <dubbo:parameter key=\"qos.accept.foreign.ip\" value=\"false\"/>\n    <dubbo:parameter key=\"qos.port\" value=\"33333\"/>\n  </dubbo:application>\n  <dubbo:registry address=\"multicast://224.5.6.7:1234\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n  <dubbo:service interface=\"org.apache.dubbo.demo.provider.DemoService\" ref=\"demoService\"/>\n  <bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Load Balancing Strategy in Dubbo-go\nDESCRIPTION: This snippet demonstrates how to set a global load balancing strategy for all service calls in Dubbo-go. It uses the 'roundrobin' strategy as an example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientLoadBalance(\"roundrobin\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Service Address in Dubbo\nDESCRIPTION: Shows how to register a Redis service address using RegistryFactory and Registry in Dubbo. Uses Zookeeper as registry and defines Redis service URL with specific parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"redis://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Greet Service Handler in Dubbo-go\nDESCRIPTION: This Go code implements the GreetTripleServer with two methods: Greet (responds immediately) and GreetTimeout (simulates a 5-second delay before responding).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/timeout.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n   \"context\"\n   \"time\"\n\n   greet \"github.com/apache/dubbo-go-samples/timeout/proto\"\n)\n\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n   resp := &greet.GreetResponse{Greeting: req.Name}\n   return resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetTimeout(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n   time.Sleep(5 * time.Second)\n   resp := &greet.GreetResponse{Greeting: req.Name}\n   return resp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming RPC Interface in Dubbo (Java)\nDESCRIPTION: This snippet defines a Java interface for streaming RPC methods in Dubbo. It includes both bidirectional and server-side streaming methods using the StreamObserver pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic interface WrapperGreeter {\n    // Bidirectional stream\n    StreamObserver<String> sayHelloStream(StreamObserver<String> response);\n    // Server stream\n    void sayHelloServerStream(String request, StreamObserver<String> response);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Filters for Specific Service Reference in Java\nDESCRIPTION: Annotation-based configuration to explicitly enable specific filters for a particular service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(filter=\"accesslog,tps\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Generated Dubbo Interface from Protobuf\nDESCRIPTION: Auto-generated Java interface from Protobuf IDL using Dubbo's protoc plugin, showing the resulting service interface definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface Greeter extends org.apache.dubbo.rpc.model.DubboStub {\n    String JAVA_SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n    String SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n\n    org.apache.dubbo.springboot.demo.idl.GreeterReply greet(org.apache.dubbo.springboot.demo.idl.GreeterRequest request);\n    // more generated codes here...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Rule for UserService in Dubbo\nDESCRIPTION: YAML configuration for setting up a retry rule for the UserService. It increases the number of retries to 5 on the consumer side, aiming to improve the success rate of user detail retrieval.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/retry.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: consumer\n    parameters:\n      retries: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Method-Level Caching in Dubbo with Annotations\nDESCRIPTION: Java annotation configuration for enabling LRU caching on a specific method of a server-side Dubbo service. This example includes the service implementation with method-specific caching configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(methods = {@Method(name=\"sayHello\",cache = \"lru\")})\npublic class DemoServiceImpl implements DemoService {\n\n    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);\n    @Override\n    public String sayHello(String name) {\n        logger.info(\"Hello \" + name + \", request from consumer: \" + RpcContext.getContext().getRemoteAddress());\n        return \"Hello \" + name;\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider-side Method Timeout\nDESCRIPTION: Set timeout for specific method implementation on the provider side using @DubboService with @Method annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(methods = {@Method(name = \"sayHello\", timeout = 5000)})\npublic class DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Exposing Generic Service via Java API\nDESCRIPTION: Java code demonstrating how to programmatically configure and expose a generic service using Dubbo's API. Shows service configuration, version setting, and export process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n...\n// Use org.apache.dubbo.rpc.service.GenericService instead of all interface implementations\nGenericService xxxService = new XxxGenericService();\n\n// This instance is heavyweight, encapsulating all connections to the registry and service provider; please cache it\nServiceConfig<GenericService> service = new ServiceConfig<GenericService>();\n// Weak type interface name\nservice.setInterface(\"com.xxx.XxxService\");\n// If you need to set a different version for the service\nservice.setVersion(\"1.0.0\");\n// Point to a generic service implementation\nservice.setRef(xxxService);\n\n// Expose and register the service\nservice.export();\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul as Configuration Center in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Consul as the configuration center for Dubbo. It specifies the address of the Consul server using the consul protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/others.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: consul://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Properties File\nDESCRIPTION: Properties file configuration to enable Nacos as a registry in a Dubbo application. Sets the registry address to point to a Nacos server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.registry.address=nacos://localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Listing Dubbo User Service Pods\nDESCRIPTION: Shell command to list the pods running the User service in the dubbo-demo namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get pods -n dubbo-demo\n# list result here\n```\n\n----------------------------------------\n\nTITLE: Listing Dubbo User Service Pods\nDESCRIPTION: Shell command to list the pods running the User service in the dubbo-demo namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get pods -n dubbo-demo\n# list result here\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Provider with @Service Annotation\nDESCRIPTION: The @Service annotation is used to configure Dubbo service providers. This example shows a simple implementation of a GreetingService that is exposed as a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Service\npublic class AnnotatedGreetingService implements GreetingService {\n    public String sayHello(String name) {\n        return \"hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Triple (gRPC) Protocol Configuration Properties\nDESCRIPTION: Configuration properties for Dubbo's Triple (gRPC-compatible) protocol settings. Controls HTTP/2 parameters like frame sizes, streams, and window sizes, as well as enabling server push functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.rpc.tri.enable-push=<boolean> # Whether to enable push, default is false.\ndubbo.rpc.tri.header-table-size=<string> # The header table size.\ndubbo.rpc.tri.initial-window-size=<string> # Initial window size.\ndubbo.rpc.tri.max-concurrent-streams=<string> # Maximum concurrent streams.\ndubbo.rpc.tri.max-frame-size=<string> # Maximum frame size.\ndubbo.rpc.tri.max-header-list-size=<string> # Maximum header list size.\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in Rust\nDESCRIPTION: Implements a Dubbo client in Rust to call the Greeter service. This demonstrates how to create a client, send a request, and handle the response from the Dubbo server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    let mut cli = GreeterClient::new().with_uri(\"http://127.0.0.1:8888\".to_string());\n\n    println!(\"# unary call\");\n    let resp = cli\n        .greet(Request::new(GreeterRequest {\n            name: \"message from client\".to_string(),\n        }))\n        .await;\n    let resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, body) = resp.into_parts();\n    println!(\"Response: {:?}\", body);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Call in Spring XML\nDESCRIPTION: Shows how to configure a generic call using Spring XML configuration by adding the generic attribute to the dubbo:reference tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"helloService\" generic = \"true\" interface=\"org.apache.dubbo.samples.generic.call.api.HelloService\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service with Dubbo\nDESCRIPTION: Implementation of the REST service interface using Dubbo service annotation. Includes request handling and context management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@DubboService()\npublic class RestDemoServiceImpl implements RestDemoService {\n    private static Map<String, Object> context;\n    private boolean called;\n\n    @Override\n    public String sayHello(String name) {\n        called = true;\n        return \"Hello, \" + name;\n    }\n\n    public boolean isCalled() {\n        return called;\n    }\n\n    @Override\n    public Integer hello(Integer a, Integer b) {\n        context = RpcContext.getServerAttachment().getObjectAttachments();\n        return a + b;\n    }\n\n    @Override\n    public String error() {\n        throw new RuntimeException();\n    }\n\n    public static Map<String, Object> getAttachments() {\n        return context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CORS Plugin for Fastify\nDESCRIPTION: Command to install the CORS plugin for Fastify server, which is needed to allow cross-origin requests from the browser to the backend Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @fastify/cors\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Mesh Route with Fallback Handling\nDESCRIPTION: This YAML configuration demonstrates a VirtualService and DestinationRule setup for Dubbo Mesh routing. It includes multiple levels of routing based on method signatures with fallback handling from specific to broader conditions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/mesh-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo-route\nspec:\n  hosts:\n  - demo\n  dubbo:\n  - service:\n    - exact: com.taobao.hsf.demoService:1.0.0\n    - exact: com.taobao.hsf.demoService:2.0.0\n    routedetail:\n    - name: sayHello-String-method-route\n      match:\n      - method:\n          name_match:\n            exact: \"sayHello\"\n            .....\n          argp:\n          - string\n      route:\n      - destination:\n          host: demo\n          subset: v1\n        fallback:\n          destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n\n      - name: sayHello-method-route\n        match:\n        - method:\n            name_match:\n              exact: \"s-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n\n      - name: interface-route\n        route:\n        - destination:\n          host: demo\n          subset: v3\n\n  - service:\n\n      ....\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: demo-route\nspec:\n  host: demo\n  subsets:\n  - name: v1\n    labels:\n      sigma.ali/mg: v1-host\n\n  - name: v2\n    labels:\n      sigma.ali/mg: v2-host\n\n  - name: v3\n    labels:\n      sigma.ali/mg: v3-host\n```\n\n----------------------------------------\n\nTITLE: Calling Server Streaming Method\nDESCRIPTION: Java code demonstrating how to call a server streaming method from the client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nGreeterRequest request = GreeterRequest.newBuilder().setName(\"server stream request.\").build();\ngreeter.serverStream(request, new SampleStreamObserver());\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializationOptimizer for Class Registration\nDESCRIPTION: Java implementation of SerializationOptimizer interface to register classes for optimized Kryo serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class SerializationOptimizerImpl implements SerializationOptimizer {\n\n    public Collection<Class> getSerializableClasses() {\n        List<Class> classes = new LinkedList<Class>();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        return classes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ReferenceConfigCache Basic Example\nDESCRIPTION: Demonstrates the basic usage of ReferenceConfigCache to cache a ReferenceConfig instance and retrieve a service proxy. Shows how to configure and cache a service reference while avoiding direct destruction of the ReferenceConfig object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n......\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\n// The cache.get method will cache the Reference object and invoke ReferenceConfig.get to start ReferenceConfig\nXxxService xxxService = cache.get(reference);\n// Note! The cache will hold the ReferenceConfig, do not call the destroy method of ReferenceConfig externally, as this will invalidate the ReferenceConfig in the cache!\n// Use xxxService object\nxxxService.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application List for a Service in Zookeeper\nDESCRIPTION: This command retrieves the list of applications associated with a specific service from the Zookeeper registry. It demonstrates how to access the interface-application mapping stored in Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nget /dubbo/mapping/service1\n```\n\n----------------------------------------\n\nTITLE: Implementing DemoFilter in Go\nDESCRIPTION: Defines a DemoFilter struct with Decode and Encode methods. The Decode method logs the request body, reverses it, and sends it as a mock response. The Encode method logs the response with a configurable prefix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DemoFilter struct {\n   logPrefix string\n}\n\nfunc (f *DemoFilter) Decode(ctx *contexthttp.HttpContext) filter.FilterStatus {\n   body, _ := ioutil.ReadAll(ctx.Request.Body)\n   logger.Infof(\"request body: %s\", body)\n\n   runes := []rune(string(body))\n   for i := 0; i < len(runes)/2; i += 1 {\n      runes[i], runes[len(runes)-1-i] = runes[len(runes)-1-i], runes[i]\n   }\n   reverse := string(runes)\n\n   ctx.SendLocalReply(200, []byte(reverse))\n   return filter.Stop\n}\n\nfunc (f *DemoFilter) Encode(ctx *contexthttp.HttpContext) filter.FilterStatus {\n   res := ctx.SourceResp.(string)\n   logger.Infof(\"%s: %s\", f.logPrefix, res)\n   return filter.Continue\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service with Dubbo\nDESCRIPTION: Implementation of the REST service interface using Dubbo service annotation. Includes request handling and context management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@DubboService()\npublic class RestDemoServiceImpl implements RestDemoService {\n    private static Map<String, Object> context;\n    private boolean called;\n\n    @Override\n    public String sayHello(String name) {\n        called = true;\n        return \"Hello, \" + name;\n    }\n\n    public boolean isCalled() {\n        return called;\n    }\n\n    @Override\n    public Integer hello(Integer a, Integer b) {\n        context = RpcContext.getServerAttachment().getObjectAttachments();\n        return a + b;\n    }\n\n    @Override\n    public String error() {\n        throw new RuntimeException();\n    }\n\n    public static Map<String, Object> getAttachments() {\n        return context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webservice Protocol in Dubbo\nDESCRIPTION: XML configurations for setting up the Webservice protocol in Dubbo. It includes examples for specifying the protocol, setting it as the default, configuring it for a specific service, and using multiple ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"webservice\" port=\"8080\" server=\"jetty\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:provider protocol=\"webservice\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service protocol=\"webservice\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol id=\"webservice1\" name=\"webservice\" port=\"8080\" />\n<dubbo:protocol id=\"webservice2\" name=\"webservice\" port=\"8081\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Triple Protocol Service via REST in Java\nDESCRIPTION: Demonstrates how to define a Dubbo service interface and implementation that can be accessed via REST requests. Includes custom path and method mapping using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Service interface\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// Service implementation\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// Model\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in YAML\nDESCRIPTION: Basic YAML configuration for setting up Nacos registry with Dubbo in Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registry\n   address: nacos://localhost:8848\n   register-mode: instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Properties File\nDESCRIPTION: Properties file configuration to enable Nacos as a registry in a Dubbo application. Sets the registry address to point to a Nacos server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.registry.address=nacos://localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Consumer Application in Java\nDESCRIPTION: Demo code showing how to configure and initialize a Dubbo consumer application using ReferenceConfig and DubboBootstrap. It demonstrates both normal service invocation and generic service invocation patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class ConsumerApplication {\n    public static void main(String[] args) {\n            runWithBootstrap();\n    }\n    private static void runWithBootstrap() {\n        ReferenceConfig<DemoService> reference = new ReferenceConfig<>();\n        reference.setInterface(DemoService.class);\n        reference.setGeneric(\"true\");\n        reference.setProtocol(\"\");\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"dubbo-demo-api-consumer\");\n        applicationConfig.setQosEnable(false);\n        applicationConfig.setQosPort(-1);\n        bootstrap.application(applicationConfig)\n            .registry(new RegistryConfig(\"zookeeper://8.131.79.126:2181\"))\n            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n            .reference(reference)\n            .start();\n\n        DemoService demoService = bootstrap.getCache().get(reference);\n        String message = demoService.sayHello(\"dubbo\");\n        System.out.println(message);\n\n        // generic invoke\n        GenericService genericService = (GenericService) demoService;\n        Object genericInvokeResult = genericService.$invoke(\"sayHello\", new String[]{String.class.getName()},\n            new Object[]{\"dubbo generic invoke\"});\n        System.out.println(genericInvokeResult);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hessian Core Dependency\nDESCRIPTION: Maven dependency for core Hessian library\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.caucho</groupId>\n    <artifactId>hessian</artifactId>\n    <version>4.0.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining REST API using RESTEasy Annotations\nDESCRIPTION: This code snippet shows how to define a REST API interface using RESTEasy annotations in a Dubbo service. It includes methods for different HTTP operations and parameter handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"/demoService\")\npublic interface RestDemoService {\n    @GET\n    @Path(\"/hello\")\n    Integer hello(@QueryParam(\"a\")Integer a,@QueryParam(\"b\") Integer b);\n\n    @GET\n    @Path(\"/error\")\n    String error();\n\n    @POST\n    @Path(\"/say\")\n    @Consumes({MediaType.TEXT_PLAIN})\n    String sayHello(String name);\n\n    boolean isCalled();\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Server\nDESCRIPTION: Maven command to start the Dubbo server for the streaming example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.streaming.TriStreamServer\"\n```\n\n----------------------------------------\n\nTITLE: Generated Dubbo Interface from Protobuf\nDESCRIPTION: Auto-generated Java interface from Protobuf IDL using Dubbo's protoc plugin, showing the resulting service interface definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface Greeter extends org.apache.dubbo.rpc.model.DubboStub {\n    String JAVA_SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n    String SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n\n    org.apache.dubbo.springboot.demo.idl.GreeterReply greet(org.apache.dubbo.springboot.demo.idl.GreeterRequest request);\n    // more generated codes here...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Triple Protocol Service in Dubbo-go\nDESCRIPTION: This Go code snippet demonstrates how to publish a service using the triple protocol in Dubbo-go. It creates a new server, configures the protocol and port, and registers the GreetService handler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsrv, err := server.NewServer(\n\tserver.WithServerProtocol(\n\t\tprotocol.WithPort(20000),\n\t\tprotocol.WithTriple(),\n\t),\n)\n\ngreet.RegisterGreetServiceHandler(srv, &GreetTripleServer{})\n```\n\n----------------------------------------\n\nTITLE: Configuring Call Interceptors in Dubbo XML\nDESCRIPTION: Examples of how to configure call interceptors for consumers and providers using Dubbo XML configuration. Shows how to set filters for individual references/services and globally for all consumers/providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Consumer call process interception -->\n<dubbo:reference filter=\"xxx,yyy\" />\n<!-- Default interceptor for consumer call process, which intercepts all references -->\n<dubbo:consumer filter=\"xxx,yyy\"/>\n<!-- Provider call process interception -->\n<dubbo:service filter=\"xxx,yyy\" />\n<!-- Default interceptor for provider call process, which intercepts all services -->\n<dubbo:provider filter=\"xxx,yyy\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceRestMetadata Class for Dubbo REST\nDESCRIPTION: This Java class defines the metadata structure for a REST service in Dubbo. It includes information about the service interface, version, group, method metadata, port, and consumer flag. It also contains maps for path-to-service and method-to-service mappings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ServiceRestMetadata implements Serializable {\n\n    private String serviceInterface; // com.demo.TestInterface\n\n    private String version;// 1.0.0\n\n    private String group;// demo\n\n    private Set<RestMethodMetadata> meta;// method meta information\n\n    private int port;// port for provider service key\n\n    private boolean consumer;// consumer flag\n\n    /**\n     * make a distinction between mvc & resteasy\n     */\n    private Class codeStyle;//\n\n     /**\n     *  for provider\n     */\n    private Map<PathMatcher, RestMethodMetadata> pathToServiceMap;\n\n    /**\n    * for consumer\n    */\n    private Map<String, Map<ParameterTypesComparator, RestMethodMetadata>> methodToServiceMap;\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Application C in XML\nDESCRIPTION: XML configuration for another consumer application (Application C) showing how to reference services using different protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference protocol=\"grpc\" interface=\"org.apache.dubbo.samples.basic.api.DemoService3\"/>                                                                                     <dubbo:reference protocol=\"grpc\" interface=\"org.apache.dubbo.samples.basic.api.DemoService4\"/>\n\n<dubbo:reference protocol=\"dubbo\" interface=\"org.apache.dubbo.samples.basic.api.DemoService0\"/>\n\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Dubbo Service Provider\nDESCRIPTION: Provider-side configuration using XML to define service groups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo\n       http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:service interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo\"/>\n    <dubbo:service interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo2\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Defining service interfaces with Protocol Buffers for Dubbo-go\nDESCRIPTION: Sample protobuf definition for a UserProvider service with a SayHello method that takes a HelloRequest and returns a User object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/pixiu-nacos-triple.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage org.apache.dubbo.quickstart.samples;\n\nservice UserProvider {\n  rpc SayHello (HelloRequest) returns (User) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Data Formats in Dubbo REST Services\nDESCRIPTION: Configuration to support both JSON and XML response formats in a REST service method using JAX-RS annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer for Proxyless Mesh\nDESCRIPTION: Client subscription with @DubboReference annotation that specifies which application provides the service using the 'providedBy' parameter, necessary for xDS protocol integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"annotatedConsumer\")\npublic class GreetingServiceConsumer {\n    @DubboReference(version = \"1.0.0\", providedBy = \"dubbo-samples-xds-provider\")\n    private GreetingService greetingService;\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: Java class implementing the Dubbo service interface with the @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"Hello \" + name + \", request from consumer: \" + RpcContext.getContext().getRemoteAddress());\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Struct in Go for Dubbo-Go Generic Calls\nDESCRIPTION: This snippet defines a User struct with ID, Name, and Age fields, along with a JavaClassName method to specify the Java class name for serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// definition\ntype User struct {\n\tID   string\n\tName string\n\tAge  int32\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn \"org.apache.dubbo.sample.User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TJWS or Sun HTTP Server in Dubbo\nDESCRIPTION: Configuring lightweight embedded servers (TJWS or Sun HTTP) as the REST server implementation in Dubbo, suitable for testing or low-load scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tjws\"/> (tjws is now deprecated)\n<dubbo:protocol name=\"rest\" server=\"sunhttp\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Reference in Java\nDESCRIPTION: Shows how to define a Dubbo service reference using the @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/echo-service.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol with Custom Host\nDESCRIPTION: Example of configuring the Dubbo protocol with a custom host using the 'host' attribute. This allows specifying either an IP address or a domain name for the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20890\" host=\"www.example.com\"/>\n```\n\n----------------------------------------\n\nTITLE: DubboGo Client Implementation\nDESCRIPTION: Go implementation of the Greet service client with configuration loading.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"dubbo.apache.org/dubbo-go/v3\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/config_yaml/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nvar svc = new(greet.GreetServiceImpl)\n\nfunc main() {\n\tgreet.SetConsumerService(svc)\n\tif err := dubbo.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\treq, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"ConfigTest\"})\n\tif err != nil || req.Greeting != \"ConfigTest-Success\" {\n\t\tpanic(err)\n\t}\n\tlogger.Info(\"ConfigTest successfully\")\n}\n```\n\n----------------------------------------\n\nTITLE: Default Tracing Configuration in YAML\nDESCRIPTION: Default configuration values for Dubbo-go tracing when no specific options are provided, including exporter type, propagator settings, and sampling configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/tracing.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# default tracing config\nenable: false\nexporter: stdout\nendpoint: \"\"\npropagator: w3c\nsample-mode: ratio\nsample-ratio: 0.5\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Server with Streaming Service\nDESCRIPTION: Java code to configure and start a Dubbo server with the streaming service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\tServiceConfig<Greeter> service = new ServiceConfig<>();\n\tservice.setInterface(Greeter.class);\n\tservice.setRef(new GreeterImpl(\"tri-stub\"));\n\n\tApplicationConfig applicationConfig = new ApplicationConfig(\"tri-stub-server\");\n\tapplicationConfig.setQosEnable(false);\n\n\tDubboBootstrap bootstrap = DubboBootstrap.getInstance();\n\tbootstrap.application(applicationConfig)\n\t\t\t.registry(new RegistryConfig(TriSampleConstants.ZK_ADDRESS))\n\t\t\t.protocol(new ProtocolConfig(CommonConstants.TRIPLE, TriSampleConstants.SERVER_PORT))\n\t\t\t.service(service)\n\t\t\t.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Implementation of the DemoService interface that provides the actual service logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.provider;\nimport org.apache.dubbo.demo.DemoService;\n\npublic class DemoServiceImpl implements DemoService {\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo3 BOM Dependency Management\nDESCRIPTION: Configuration for adding Dubbo3 BOM dependency management to manage Dubbo dependencies consistently.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-dependencies-bom</artifactId>\n            <version>3.3.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using RpcContext in Dubbo REST\nDESCRIPTION: Demonstrates how to get client IP address using Dubbo's RpcContext. This method only works when server is set to jetty, tomcat, servlet, or tjws.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRemoteAddressString());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Handler with Retry Simulation in Dubbo-Go\nDESCRIPTION: Server implementation with two methods: Greet responds normally while GreetRetry simulates failures requiring 3 retries before succeeding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/retry.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/pkg/errors\"\n\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n\t\"dubbo.apache.org/dubbo-go/v3/server\"\n\tgreet \"github.com/apache/dubbo-go-samples/retry/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\ntype GreetTripleServer struct {\n\trequestTime int\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\tlogger.Info(\"Not need retry, request success\")\n\treturn resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetRetry(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tif srv.requestTime < 3 {\n\t\tsrv.requestTime++\n\t\tlogger.Infof(\"retry %d times\", srv.requestTime)\n\t\treturn nil, errors.New(\"retry\")\n\t}\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\tlogger.Infof(\"retry success, current request time is %d\", srv.requestTime)\n\tsrv.requestTime = 0\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{\n\t\trequestTime: 0,\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Istio for Dubbo Proxyless Mesh\nDESCRIPTION: Bash commands to install Istio with first-party-jwt support, which is required for client authentication in the Dubbo Proxyless Mesh setup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://istio.io/downloadIstio | sh -\ncd istio-1.xx.x\nexport PATH=$PWD/bin:$PATH\nistioctl install --set profile=demo --set values.global.jwtPolicy=first-party-jwt -y\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Protocol in YAML Configuration for Dubbo\nDESCRIPTION: This YAML snippet demonstrates how to configure a Spring Boot application to use the custom protocol by setting the protocol name in the application.yml or application.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/spi.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: customized\n```\n\n----------------------------------------\n\nTITLE: Dubbo Related Validation Service Interface\nDESCRIPTION: Interface showing group sequence validation in Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport javax.validation.GroupSequence;\n \npublic interface ValidationService {   \n    @GroupSequence(Update.class) // Validate Update group rules simultaneously\n    @interface Save{}\n    void save(ValidationParameter parameter);\n \n    @interface Update{} \n    void update(ValidationParameter parameter);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Registry with Advanced Options\nDESCRIPTION: Example of configuring a Nacos registry for a Dubbo-go client with advanced options using RegistryConfigBuilder, including protocol, address, group, namespace, credentials, and timeout.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nrc := config.NewRootConfigBuilder().\n    SetConsumer(config.NewConsumerConfigBuilder().\n        SetRegistryIDs(\"nacosRegistryID\"). // use defined registryID\n        AddReference(\"GreeterClientImpl\", /*...*/).\n        Build()\n    AddRegistry(\"nacosRegistryID\", config.NewRegistryConfigBuilder().\n        SetProtocol(\"nacos\").\n        SetAddress(\"127.0.0.1:8848\").\n        SetGroup(\"dubbo-go\").\n        SetNamespace(\"dubbo\").\n        SetUsername(\"admin\").\n        SetPassword(\"admin\").\n        SetTimeout(\"3s\").\n        Build()).\n    Build()\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Service with Java Interface\nDESCRIPTION: Java interface definition for streaming services without using Protocol Buffers. The interface defines methods for bidirectional streaming and server-side streaming using Dubbo's StreamObserver type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic interface WrapperGreeter {\n    // 双向流\n    StreamObserver<String> sayHelloStream(StreamObserver<String> response);\n    // 服务端流\n    void sayHelloServerStream(String request, StreamObserver<String> response);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Number for REST Protocol in Dubbo\nDESCRIPTION: XML configuration for specifying a custom port number for the REST protocol in Dubbo instead of the default port 80.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer-side Method Timeout\nDESCRIPTION: Specify timeout for specific method calls on the consumer side using @DubboReference with @Method annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name = \"sayHello\", timeout = 5000)})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: 实现异步服务 (Java)\nDESCRIPTION: 实现异步服务接口,使用CompletableFuture.supplyAsync()将业务执行从Dubbo线程切换到业务线程。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class AsyncServiceImpl implements AsyncService {\n\n    @Override\n    public String invoke(String param) {\n        try {\n            long time = ThreadLocalRandom.current().nextLong(1000);\n            Thread.sleep(time);\n            StringBuilder s = new StringBuilder();\n            s.append(\"AsyncService invoke param:\").append(param).append(\",sleep:\").append(time);\n            return s.toString();\n        }\n        catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        return null;\n    }\n\n    @Override\n    public CompletableFuture<String> asyncInvoke(String param) {\n        // 建议为supplyAsync提供自定义线程池\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                // Do something\n                long time = ThreadLocalRandom.current().nextLong(1000);\n                Thread.sleep(time);\n                StringBuilder s = new StringBuilder();\n                s.append(\"AsyncService asyncInvoke param:\").append(param).append(\",sleep:\").append(time);\n                return s.toString();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return null;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing VirtualService YAML for Reviews Service\nDESCRIPTION: YAML configuration showing how traffic from user 'jason' is routed to reviews:v2 while all other traffic goes to reviews:v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Higress Ingress Configuration\nDESCRIPTION: Kubernetes Ingress resource configuration for routing HTTP traffic to Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: gateway-higress-triple-provider.DEFAULT-GROUP.public.nacos\n  name: demo\n  namespace: default\nspec:\n    ingressClassName: higress\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        resource:\n                            apiGroup: networking.higress.io\n                            kind: McpBridge\n                            name: default\n                    path: /org.apache.dubbo.samples.gateway.api.DemoService\n                    pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Interface-Level Caching in Dubbo with Annotations\nDESCRIPTION: Java annotation configuration for enabling LRU caching on a server-side Dubbo service at the interface level. This example includes the service implementation with the caching configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(cache = \"lru\")\npublic class DemoServiceImpl implements DemoService {\n\n    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);\n    @Override\n    public String sayHello(String name) {\n        logger.info(\"Hello \" + name + \", request from consumer: \" + RpcContext.getContext().getRemoteAddress());\n        return \"Hello \" + name;\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Cluster Fail Percentage in Dubbo\nDESCRIPTION: Shows how to configure the broadcast.fail.percent parameter for the Broadcast cluster mode, which sets the percentage of node failures that will trigger an exception.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/fault-tolerent-strategy.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n@reference(cluster = \"broadcast\", parameters = {\"broadcast.fail.percent\", \"20\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Map in Protobuf\nDESCRIPTION: Illustrates how to define a map (dictionary) in Protobuf. The example shows a message with a map field, which corresponds to a Map object in the generated Java code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BatchOnlineRes {\n    map<uint32, uint32> onlineMap = 1; // Online status\n}\n```\n\n----------------------------------------\n\nTITLE: 实现异步服务 (Java)\nDESCRIPTION: 实现异步服务接口,使用CompletableFuture.supplyAsync()将业务执行从Dubbo线程切换到业务线程。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class AsyncServiceImpl implements AsyncService {\n\n    @Override\n    public String invoke(String param) {\n        try {\n            long time = ThreadLocalRandom.current().nextLong(1000);\n            Thread.sleep(time);\n            StringBuilder s = new StringBuilder();\n            s.append(\"AsyncService invoke param:\").append(param).append(\",sleep:\").append(time);\n            return s.toString();\n        }\n        catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        return null;\n    }\n\n    @Override\n    public CompletableFuture<String> asyncInvoke(String param) {\n        // 建议为supplyAsync提供自定义线程池\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                // Do something\n                long time = ThreadLocalRandom.current().nextLong(1000);\n                Thread.sleep(time);\n                StringBuilder s = new StringBuilder();\n                s.append(\"AsyncService asyncInvoke param:\").append(param).append(\",sleep:\").append(time);\n                return s.toString();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n            return null;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Higress Ingress Configuration\nDESCRIPTION: Kubernetes Ingress resource configuration for routing HTTP traffic to Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: gateway-higress-triple-provider.DEFAULT-GROUP.public.nacos\n  name: demo\n  namespace: default\nspec:\n    ingressClassName: higress\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        resource:\n                            apiGroup: networking.higress.io\n                            kind: McpBridge\n                            name: default\n                    path: /org.apache.dubbo.samples.gateway.api.DemoService\n                    pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Invoking Generic Service in Dubbo using Java\nDESCRIPTION: This code demonstrates how to cast a Spring bean to GenericService and invoke a service method using the $invoke method. It shows how to specify method name, parameter types, and parameter values for generic calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nGenericService userService = (GenericService) context.getBean(\"userService\");\n// primary param and return value\nString name = (String) userService.$invoke(\"delete\", new String[]{int.class.getName()}, new Object[]{1});\nSystem.out.println(name);\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Defines the DevelopService interface that will be implemented by different versions and groups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DevelopService {\n    String invoke(String param);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Configuration Factory Interface in Go\nDESCRIPTION: This code defines the DynamicConfigurationFactory interface which is used to create instances of DynamicConfiguration for different config center implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-config-center.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage config_center\n\nimport (\n\t\"github.com/apache/dubbo-go/common\"\n)\n\n// DynamicConfigurationFactory gets the DynamicConfiguration\ntype DynamicConfigurationFactory interface {\n\tGetDynamicConfiguration(*common.URL) (DynamicConfiguration, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Module Deployment in DefaultModuleDeployer in Dubbo\nDESCRIPTION: Core Dubbo module deployment method showing the lifecycle stages of a Dubbo module, including initialization, service export, and service reference. This is the main entry point for the Dubbo application startup process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic synchronized Future start() throws IllegalStateException {\n          ...省略掉若干代码\n\n            onModuleStarting();\n\n            // initialize\n            applicationDeployer.initialize();\n            initialize();\n\n            // export services\n            exportServices();\n\n            // prepare application instance\n            // exclude internal module to avoid wait itself\n            if (moduleModel != moduleModel.getApplicationModel().getInternalModule()) {\n                applicationDeployer.prepareInternalModule();\n            }\n\n            // refer services\n            referServices();\n\n            ...省略掉若干代码\n        return startFuture;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Nacos Dependencies for Non-Spring Boot Applications\nDESCRIPTION: Maven dependencies for integrating Dubbo with Nacos in non-Spring Boot applications. This includes the core dubbo library and the nacos-client dependency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba.nacos</groupId>\n      <artifactId>nacos-client</artifactId>\n      <version>2.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in XML\nDESCRIPTION: This XML snippet shows how to configure Zookeeper as a registry center in a Dubbo application using XML configuration. It specifies the Zookeeper address and sets the register mode to 'instance'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"zookeeper://localhost:2181\" register-mode=\"instance\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in TypeScript\nDESCRIPTION: Creates a TypeScript client to access the Dubbo service using the generated code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createPromiseClient } from \"@apachedubbo/dubbo\";\nimport { ExampleService } from \"./gen/example_dubbo\";\nimport { createDubboTransport } from \"@apachedubbo/dubbo-node\";\n\nconst transport = createDubboTransport({\n  baseUrl: \"http://localhost:8080\",\n  httpVersion: \"1.1\",\n});\n\nasync function main() {\n  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });\n  const res = await client.say({ sentence: \"Hello World\" });\n  console.log(res);\n}\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter in Go for Dubbo\nDESCRIPTION: This snippet demonstrates how to create and register a custom filter in Dubbo Go. It includes the initialization function, constructor, and implementation of the Filter interface methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/filter.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\textension.SetFilter(\"myCustomFilter\", NewMyClientFilter)\n}\n\nfunc NewMyClientFilter() filter.Filter {\n\treturn &MyClientFilter{}\n}\n\ntype MyClientFilter struct {\n}\n\nfunc (f *MyClientFilter) Invoke(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation) protocol.Result {\n\tfmt.Println(\"MyClientFilter Invoke is called, method Name = \", invocation.MethodName())\n\treturn invoker.Invoke(ctx, invocation)\n}\nfunc (f *MyClientFilter) OnResponse(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation) protocol.Result {\n\tfmt.Println(\"MyClientFilter OnResponse is called\")\n\treturn result\n}\n```\n\n----------------------------------------\n\nTITLE: XML Response Format Example with Wrapper Object\nDESCRIPTION: Illustrates the well-formed XML structure returned when using a wrapper object for primitive types in REST responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<registrationResult>\n    <id>1002</id>\n</registrationResult>\n```\n\n----------------------------------------\n\nTITLE: Preferring injvm for Consumer and Provider in Dubbo XML\nDESCRIPTION: These configurations set the preference for using injvm (local calls) for both consumers and providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer injvm=\"true\" .../>\n<dubbo:provider injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Loading in Java\nDESCRIPTION: Java code example showing how to manually load and push configurations to the Dubbo framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Application loads configurations by itself\nMap<String, String> dubboConfigurations = new HashMap<>();\ndubboConfigurations.put(\"dubbo.registry.address\", \"zookeeper://127.0.0.1:2181\");\ndubboConfigurations.put(\"dubbo.registry.simplified\", \"true\");\n\n// Push the organized configurations to the Dubbo framework\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setExternalConfig(dubboConfigurations);\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in Dubbo-go 3.0\nDESCRIPTION: YAML configuration for setting up Zookeeper as the registry in Dubbo-go 3.0. Includes registry details and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n      group: myGroup\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      UserProviderWithCustomGroupAndVersion:\n        interface: com.apache.dubbo.sample.basic.IGreeter\n        version: myInterfaceVersion\n        group: myInterfaceGroup\n```\n\n----------------------------------------\n\nTITLE: Declaring Dubbo Client Reference in Java\nDESCRIPTION: This snippet illustrates how to declare a Dubbo service reference in a client using annotations. It shows the use of @DubboReference for remote method invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-introduction.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class Application {\n    @DubboReference\n    private GreetingsService greetingsService;\n\n    public void doSayHello(String name) {\n        System.out.println(greetingsService.sayHi(name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OrderedPropertiesConfiguration Creation in Dubbo\nDESCRIPTION: Constructor and refresh method implementation for OrderedPropertiesConfiguration that loads properties from OrderedPropertiesProvider extensions. It sorts providers by priority and merges their properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npublic OrderedPropertiesConfiguration(ModuleModel moduleModel) {\n        this.moduleModel = moduleModel;\n        refresh();\n    }\n\n    public void refresh() {\n        properties = new Properties();\n        //有序的配置提供器扩展获取\n        ExtensionLoader<OrderedPropertiesProvider> propertiesProviderExtensionLoader = moduleModel.getExtensionLoader(OrderedPropertiesProvider.class);\n        Set<String> propertiesProviderNames = propertiesProviderExtensionLoader.getSupportedExtensions();\n        if (CollectionUtils.isEmpty(propertiesProviderNames)) {\n            return;\n        }\n        List<OrderedPropertiesProvider> orderedPropertiesProviders = new ArrayList<>();\n        for (String propertiesProviderName : propertiesProviderNames) {\n            orderedPropertiesProviders.add(propertiesProviderExtensionLoader.getExtension(propertiesProviderName));\n        }\n\n        //order the propertiesProvider according the priority descending\n        //根据优先级进行排序，值越小优先级越高\n        orderedPropertiesProviders.sort((a, b) -> b.priority() - a.priority());\n\n\n        //override the properties. 目前没看到有具体的扩展实现\n        for (OrderedPropertiesProvider orderedPropertiesProvider : orderedPropertiesProviders) {\n            properties.putAll(orderedPropertiesProvider.initProperties());\n        }\n\n    }\n```\n\n----------------------------------------\n\nTITLE: 使用 Spring MVC 注解定义 REST 风格的 Triple 服务\nDESCRIPTION: 通过在 Java 接口上增加 Spring MVC 注解，可以发布 REST 风格的 Triple 服务。支持 Spring MVC 的常见注解如 @RestController、@RequestMapping 和 @GetMapping。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/demo\")\npublic interface DemoService {\n    @GetMapping(value = \"/hello\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Avro Serialization in XML\nDESCRIPTION: XML configuration options for enabling Avro serialization at protocol, consumer, or reference level in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"avro\" />\n\n<!-- or -->\n<dubbo:consumer serialization=\"avro\" />\n\n<!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"avro\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Dubbo Filter\nDESCRIPTION: This code snippet shows how to configure a custom Dubbo filter in XML. It demonstrates different ways to apply the filter to consumer and provider sides, either for specific references/services or as default for all.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/first-dubbo-filter.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Consumer call process interception -->\n<dubbo:reference filter=\"xxx\" />\n<!-- Consumer call process default interception，intercept all reference -->\n<dubbo:consumer filter=\"xxx\"/>\n<!-- Provider call process interception -->\n<dubbo:service filter=\"xxx\" />\n<!-- Provider call process default interception，intercept all service -->\n<dubbo:provider filter=\"xxx\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Consumer Registration in URL Style\nDESCRIPTION: YAML configuration to enable consumer registration in Nacos using URL parameters. This allows consumer interfaces to be visible in the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n  registry:\n    address: nacos://localhost:8848?register-consumer-url=true\n```\n\n----------------------------------------\n\nTITLE: Simple Profiler Log Output Example in Java\nDESCRIPTION: Example log output from Dubbo's simple profiler mode, showing timing information for a consumer-side request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/profiler.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[19/07/22 07:08:35:035 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 1003.015746 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\ninvocation context:\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 285821581299853\n+-[ Offset: 0.000000ms; Usage: 1003.015746ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi\n  +-[ Offset: 7.987015ms; Usage: 994.207928ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Service in Dubbo XML\nDESCRIPTION: XML configuration for publishing a Dubbo service using multiple protocols simultaneously (dubbo, grpc, and rest protocols).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.DemoService\" protocol=\"dubbo, grpc, rest\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Connection Limits for REST Service Providers\nDESCRIPTION: XML configuration on the service provider side to set the maximum timeout and connection limits for consumers calling the REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"xxx\" ref=\"xxx\" protocol=\"rest\" timeout=\"2000\" connections=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: APISIX Nacos Discovery Configuration\nDESCRIPTION: Configuration to connect APISIX with Nacos service discovery\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-triple-with-apisix-gateway.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndiscovery:\n  nacos:\n    host:\n      - \"http://192.168.33.1:8848\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Maven Plugin for Reactive Dubbo\nDESCRIPTION: Maven plugin configuration for generating reactive stubs using Dubbo Triple protocol with ReactorDubbo3TripleGenerator.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.xolstice.maven.plugins</groupId>\n            <artifactId>protobuf-maven-plugin</artifactId>\n            <version>0.6.1</version>\n            <configuration>\n                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}\n                </protocArtifact>\n                <pluginId>grpc-java</pluginId>\n                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}\n                </pluginArtifact>\n                <protocPlugins>\n                    <protocPlugin>\n                        <id>dubbo</id>\n                        <groupId>org.apache.dubbo</groupId>\n                        <artifactId>dubbo-compiler</artifactId>\n                        <version>${compiler.version}</version>\n                        <mainClass>org.apache.dubbo.gen.tri.reactive.ReactorDubbo3TripleGenerator</mainClass>\n                    </protocPlugin>\n                </protocPlugins>\n            </configuration>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Connection Timeouts in YAML Format\nDESCRIPTION: YAML configuration for setting connection and session timeouts for Zookeeper in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo\n registry\n   address: zookeeper://localhost:2181\n   timeout: 30 * 1000* # Connection timeout, default is 30s\n   session: 60 * 1000* # Session timeout, default is 60s\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP GET Method with Path Parameters in Dubbo REST\nDESCRIPTION: Implementation of a HTTP GET method that retrieves user information by ID using path parameters in the URL, with JSON response format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@Path(\"/{id : \\\\d+}\")\n@Produces({MediaType.APPLICATION_JSON})\npublic User getUser(@PathParam(\"id\") Long id) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redis Metadata Report in Java\nDESCRIPTION: Extends AbstractMetadataReport to implement Redis-specific metadata storage functionality, including methods for storing provider and consumer metadata.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RedisMetadataReport extends AbstractMetadataReport {\n    private final static Logger logger = LoggerFactory.getLogger(RedisMetadataReport.class);\n    final JedisPool pool;\n\n    public RedisMetadataReport(URL url) {\n        super(url);\n        pool = new JedisPool(new JedisPoolConfig(), url.getHost(), url.getPort());\n    }\n    @Override\n    protected void doStoreProviderMetadata(ProviderMetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) {\n        this.storeMetadata(providerMetadataIdentifier, serviceDefinitions);\n    }\n    @Override\n    protected void doStoreConsumerMetadata(ConsumerMetadataIdentifier consumerMetadataIdentifier, String value) {\n        this.storeMetadata(consumerMetadataIdentifier, value);\n    }\n    private void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {\n        try (Jedis jedis = pool.getResource()) {\n            jedis.set(metadataIdentifier.getIdentifierKey() + META_DATA_SOTRE_TAG, v);\n        } catch (Throwable e) {\n            logger.error(\"Failed to put \" + metadataIdentifier + \" to redis \" + v + \", cause: \" + e.getMessage(), e);\n            throw new RpcException(\"Failed to put \" + metadataIdentifier + \" to redis \" + v + \", cause: \" + e.getMessage(), e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout Parameter in Dubbo\nDESCRIPTION: A simplified YAML snippet showing the core timeout parameter configuration. This sets the timeout value to 2000ms (2 seconds).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/timeout.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing with OTlp Collector\nDESCRIPTION: This XML snippet shows how to set up OpenTelemetry as the tracer and export trace information to OTlp Collector in a Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Memcached Service Address with Dubbo\nDESCRIPTION: This code demonstrates how to register a Memcached service address with Dubbo's registry system. It uses the RegistryFactory to get a Zookeeper registry instance and registers a Memcached URL with various parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/memcached.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"memcached://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash\"));\n```\n\n----------------------------------------\n\nTITLE: Defining DetailService Interface in Java\nDESCRIPTION: Java interface definition for DetailService, showing the getItem method signature with parameters for SKU and username.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/arguments.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DetailService {\n    Item getItem(long sku, String username);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Main Class\nDESCRIPTION: Java main class for the Dubbo consumer application with Spring Boot, @EnableDubbo annotation, and remote service invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@Service\n@EnableDubbo\npublic class ConsumerApplication {\n    @DubboReference\n    private DemoService demoService;\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(ConsumerApplication.class, args);\n        ConsumerApplication application = context.getBean(ConsumerApplication.class);\n        String result = application.doSayHello(\"world\");\n        System.out.println(\"result: \" + result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in TypeScript\nDESCRIPTION: Implements the ExampleService with business logic and registers it with DubboRouter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { DubboRouter } from \"@apachedubbo/dubbo\";\nimport { ExampleService } from \"./gen/example_dubbo\";\n\nexport default (router: DubboRouter) =>\n  router.service(ExampleService, {\n    async say(req) {\n      return {\n        sentence: `You said: ${req.sentence}`,\n      };\n    },\n  }, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });\n```\n\n----------------------------------------\n\nTITLE: Adding Tomcat Dependencies for REST Protocol in Dubbo\nDESCRIPTION: Maven dependencies required to use Tomcat as a REST server in Dubbo applications. These dependencies enable the embedded Tomcat server functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-logging-juli</artifactId>\n        </dependency>\n```\n\n----------------------------------------\n\nTITLE: API-based Generic Call Configuration for Protobuf Services\nDESCRIPTION: Example showing how to configure and execute a generic call on a Protobuf service using the Dubbo API approach without Spring, including request parameter construction using Google Gson.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/pb-generic-reference.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();\n// 弱类型接口名\nreference.setInterface(GenericService.class.getName());\nreference.setInterface(\"com.xxx.XxxService\");\n// 声明为Protobuf-json\nreference.setGeneric(Constants.GENERIC_SERIALIZATION_PROTOBUF);\n\nGenericService genericService = reference.get();\nMap<String, Object> person = new HashMap<String, Object>();\nperson.put(\"fixed64\", \"0\");\nperson.put(\"int64\", \"0\");\n// 参考google官方的protobuf 3 的语法，服务的每个方法中只传输一个POJO对象\n// protobuf的泛化调用只允许传递一个类型为String的json对象来代表请求参数\nString requestString = new Gson().toJson(person);\n// 返回对象是GoolgeProtobuf响应对象的json字符串。\nObject result = genericService.$invoke(\"sayHello\", new String[] {\n    \"com.xxx.XxxService.GooglePbBasic$CDubboGooglePBRequestType\"},\n    new Object[] {requestString});\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo-go RPC Server\nDESCRIPTION: Go code to create and start a Dubbo-go RPC server, registering the implemented GreetService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties\nDESCRIPTION: Defines externalized configuration properties for a Dubbo service consumer, including application name, registry address, and service version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\n## Dubbo Application info\ndubbo.application.name = dubbo-consumer-demo\n\n## Nacos registry address\ndubbo.registry.address = nacos://127.0.0.1:8848\n\n# @Reference version\ndemo.service.version= 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Registry Configuration - Single Node\nDESCRIPTION: Configuration for connecting to a single Redis registry node using direct URL format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Swagger Dependencies for Dubbo REST OpenAPI Support\nDESCRIPTION: Maven dependencies required to add Swagger OpenAPI support to Dubbo REST services. Includes core Swagger JAX-RS dependencies for generating OpenAPI documentation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n    <properties>\n        <swagger.version>2.0.6</swagger.version>\n    </properties>\n\n\t<dependencies> \n        <dependency>\n            <groupId>io.swagger.core.v3</groupId>\n            <artifactId>swagger-jaxrs2</artifactId>\n            <version>${swagger.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.swagger.core.v3</groupId>\n            <artifactId>swagger-jaxrs2-servlet-initializer</artifactId>\n            <version>${swagger.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Initializing ZookeeperServiceDiscovery in Java\nDESCRIPTION: Constructor for ZookeeperServiceDiscovery class that sets up Curator framework for ZooKeeper operations, creates a ServiceDiscovery object, and starts the service discovery process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic ZookeeperServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {\n        super(applicationModel, registryURL);\n        try {\n         \tthis.curatorFramework = buildCuratorFramework(registryURL);\n            this.rootPath = ROOT_PATH.getParameterValue(registryURL);\n            this.serviceDiscovery = buildServiceDiscovery(curatorFramework, rootPath);\n            this.serviceDiscovery.start();\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Create zookeeper service discovery failed.\", e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface for Proxyless Mesh\nDESCRIPTION: A simple interface definition for a greeting service that returns a concatenated result of the input parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface GreetingService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group and Namespace for Dubbo Configuration Center (YAML)\nDESCRIPTION: YAML configuration to set custom group and namespace for Dubbo's Zookeeper configuration center, useful for environment isolation and configuration management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: zookeeper://127.0.0.1:2181\n    group: dubbo-cluster1\n    namespace: dev1\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation for Dubbo REST Service Interface in Java\nDESCRIPTION: This code snippet demonstrates how to use JSR 303 Bean Validation annotations on a Dubbo REST service interface for input validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\npublic interface UserService {\n   \n    User getUser(@Min(value=1L, message=\"User ID must be greater than 1\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-level Service Discovery in Dubbo-go 3.0\nDESCRIPTION: YAML configuration for setting up application-level service discovery in Dubbo-go 3.0. Includes registry type, metadata report, and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n      registry-type: service\n  metadata-report:\n    protocol: zookeeper\n    address: 127.0.0.1:2181\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      GreeterProvider:\n        interface: com.apache.dubbo.sample.basic.IGreeter\n```\n\n----------------------------------------\n\nTITLE: Adding Nacos Service to Docker Compose Configuration\nDESCRIPTION: YAML configuration to add Nacos service to the docker-compose.yaml file for service discovery with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  nacos:\n    image: nacos/nacos-server:v2.1.1\n    container_name: nacos-standalone\n    environment:\n    - PREFER_HOST_MODE=hostname\n    - MODE=standalone\n    ports:\n    - \"8848:8848\"\n    - \"9848:9848\"\n    networks:\n      apisix:\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in Spring Boot YAML\nDESCRIPTION: This YAML snippet demonstrates how to enable Kryo serialization in a Spring Boot application.yml file for Apache Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   serialization: kryo\n```\n\n----------------------------------------\n\nTITLE: RpcContext Async Call Implementation\nDESCRIPTION: Example showing how to make async calls using RpcContext and handle the response using CompletableFuture.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// 此调用会立即返回null\nasyncService.sayHello(\"world\");\n// 拿到调用的Future引用，当结果返回后，会被通知和设置到此Future\nCompletableFuture<String> helloFuture = RpcContext.getContext().getCompletableFuture();\n// 为Future添加回调\nhelloFuture.whenComplete((retValue, exception) -> {\n    if (exception == null) {\n        System.out.println(retValue);\n    } else {\n        exception.printStackTrace();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SLF4J Logger in Properties\nDESCRIPTION: Enables SLF4J logging for Dubbo in a Spring Boot application using properties configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.logger=slf4j\n```\n\n----------------------------------------\n\nTITLE: Adding Sentinel Dependencies in Maven\nDESCRIPTION: Maven dependencies required to integrate Sentinel with Dubbo 3.x applications. Includes both the core adapter and optional HTTP transport module.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/sentinel.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.alibaba.csp</groupId>\n\t<artifactId>sentinel-apache-dubbo3-adapter</artifactId>\n\t<version>1.8.6</version>\n</dependency>\n<!-- optional -->\n<dependency>\n\t<groupId>com.alibaba.csp</groupId>\n\t<artifactId>sentinel-transport-simple-http</artifactId>\n\t<version>1.8.6</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Obtaining Logger Instance in Dubbo\nDESCRIPTION: This code snippet shows how a Dubbo component obtains a logger instance through the LoggerFactory. It demonstrates the standard pattern used across the Dubbo framework to access logging functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n/**\n * ChannelListenerDispatcher\n */\npublic class ChannelHandlerDispatcher implements ChannelHandler {\n\n    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ChannelHandlerDispatcher.class);\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Side Implicit Parameters in Dubbo\nDESCRIPTION: Shows how to set implicit parameters on the consumer side before making a remote service call. Parameters are automatically sent to the server, similar to cookies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getClientAttachment().setAttachment(\"index\", \"1\"); // Implicit parameter passing; subsequent remote calls will automatically send these parameters to the server, similar to cookies, for framework integration\nxxxService.xxx(); // Remote call\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CompletableFuture-based Asynchronous Service in Dubbo\nDESCRIPTION: Implementation of an asynchronous service that uses CompletableFuture.supplyAsync() to shift business execution from Dubbo thread pool to custom business threads.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-execute-on-provider.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    @Override\n    public CompletableFuture<String> sayHello(String name) {\n        RpcContext savedContext = RpcContext.getContext();\n        // 建议为supplyAsync提供自定义线程池，避免使用JDK公用线程池\n        return CompletableFuture.supplyAsync(() -> {\n            System.out.println(savedContext.getAttachment(\"consumer-key1\"));\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service-Level Configuration Example in Dubbo\nDESCRIPTION: An example of service-level configuration in Dubbo that sets 4 retries after call failure for all instances consuming UserService. The match condition restricts the scope to only apply to the consumer application named shop-frontend.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/configuration-rule.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nkey: org.apache.dubbo.samples.UserService\nconfigs:\n  - match:\n      application:\n        oneof:\n          - exact: shop-frontend\n    side: consumer\n    parameters:\n      retries: '4'\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter Routing Rule in YAML\nDESCRIPTION: YAML configuration for parameter-based routing in Dubbo, targeting the DetailService to route requests with username 'dubbo' to v2 instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/arguments.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nkey: org.apache.dubbo.samples.DetailService\nscope: service\nforce: false\nenabled: true\npriority: 1\nconditions:\n  - method=getItem & arguments[1]=dubbo => detailVersion=v2\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Dubbo Service using cURL\nDESCRIPTION: Shows how to make a POST request to a Dubbo service endpoint using cURL. The request includes a JSON payload and specifies the content type header.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\":\"Dubbo\"}' \\\n    http://localhost:50052/org.apache.dubbo.samples.tri.unary.Greeter/greet/\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo and Zookeeper Dependencies for Spring Boot Applications\nDESCRIPTION: Maven dependencies required for integrating Dubbo with Zookeeper in Spring Boot applications. This includes the Dubbo starter and Zookeeper Curator integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n<!-- Recommended Zookeeper Server version 3.8.0+ -->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Validation Extension in Dubbo\nDESCRIPTION: Configuration file for registering a custom validation extension in Dubbo. It maps the extension name to the fully qualified class name of the implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/validation.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxValidation\n```\n\n----------------------------------------\n\nTITLE: Response Time Histogram Event Processing\nDESCRIPTION: Implementation of response time histogram metrics collection, processing request events to record response times using Timer instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void onRTEvent(RequestEvent event) {\n    if (metricRegister != null) {\n        MethodMetric metric = new MethodMetric(applicationModel.getApplicationName(), event.getAttachmentValue(MetricsConstants.INVOCATION));\n        long responseTime = event.getTimePair().calc();\n\n        HistogramMetricSample sample = new HistogramMetricSample(MetricsKey.METRIC_RT_HISTOGRAM.getNameByType(metric.getSide()),\n            MetricsKey.METRIC_RT_HISTOGRAM.getDescription(), metric.getTags(), RT);\n\n        Timer timer = ConcurrentHashMapUtils.computeIfAbsent(rt, metric, k -> metricRegister.register(sample));\n        timer.record(responseTime, TimeUnit.MILLISECONDS);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Protocols for Different Services in Dubbo\nDESCRIPTION: This XML configuration demonstrates how to expose different Dubbo services with different protocols. It configures both dubbo and rmi protocols, then applies the dubbo protocol to HelloService and rmi protocol to DemoService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-protocols.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"> \n    <dubbo:application name=\"world\"  />\n    <dubbo:registry id=\"registry\" address=\"10.20.141.150:9090\" username=\"admin\" password=\"hello1234\" />\n    <!-- 多协议配置 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />\n    <dubbo:protocol name=\"rmi\" port=\"1099\" />\n    <!-- 使用dubbo协议暴露服务 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" protocol=\"dubbo\" />\n    <!-- 使用rmi协议暴露服务 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" protocol=\"rmi\" /> \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Starting Java Server for Dubbo Intercommunication\nDESCRIPTION: This command starts the Java server implementation. It's used in the scenario where the Go client calls the Java server, demonstrating the reverse intercommunication flow.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./java/java-server/run.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection Type in Dubbo XML\nDESCRIPTION: Shows how to configure HTTP connections as short-lived instead of the default keep-alive (long) connections for REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" keepalive=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Interface in Dubbo\nDESCRIPTION: The Filter interface extends BaseFilter and is annotated with @SPI to support Service Provider Interface extension mechanism. It acts as a post-location interceptor in the service invocation chain.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc;\n\n@SPI(scope = ExtensionScope.MODULE)\npublic interface Filter extends BaseFilter {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with OTLP Collector in Dubbo\nDESCRIPTION: Maven dependency for configuring Dubbo Spring Boot with OpenTelemetry as the tracer and OTLP protocol for sending traces to a collector.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n  <dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>\n    <version>${version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance Strategy at Service Provider Level\nDESCRIPTION: Configures the roundrobin load balancing strategy at the provider side using the @DubboService annotation. This sets the default load balancing strategy for consumers of this service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(loadbalance = \"roundrobin\")\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Monitor in Java\nDESCRIPTION: This snippet shows the configuration options for Dubbo's monitoring component. It includes settings for the monitor address, protocol, authentication, and reporting interval.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MonitorConfig monitorConfig = new MonitorConfig();\nmonitorConfig.setAddress(\"monitor-center-address\");\nmonitorConfig.setProtocol(\"registry\");\nmonitorConfig.setUsername(\"monitor-user\");\nmonitorConfig.setPassword(\"monitor-password\");\nmonitorConfig.setGroup(\"monitor-group\");\nmonitorConfig.setVersion(\"1.0.0\");\nmonitorConfig.setInterval(\"60000\");\n```\n\n----------------------------------------\n\nTITLE: Implementing REST-style Service in Java\nDESCRIPTION: Defines a Dubbo service interface and implementation with REST-style annotations. Includes a User model class for data transfer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Service Interface\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// Service Implementation\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// Model\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Application-Level Service Discovery Configuration in YAML\nDESCRIPTION: Configuration for enabling application-level service discovery mode in Dubbo 3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    address: \"nacos://127.0.0.1:8848\"\n    register-mode: instance # New users should set this value to enable application-level service discovery; optional values are interface, instance, all\n```\n\n----------------------------------------\n\nTITLE: Configuring Group-Based Default Values in Dubbo XML\nDESCRIPTION: This XML configuration demonstrates how to set different default values for different groups of services. It allows grouping related services together with common configuration settings like timeout values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider timeout=\"5000\">\n\t<dubbo:service interface=\"com.alibaba.hello.api.HelloService\" ref=\"helloService\"/>\n\t<dubbo:service interface=\"com.alibaba.hello.api.HelloService2\" ref=\"helloService2\"/>\n</dubbo:provider>\n\n<dubbo:provider timeout=\"8000\">\n\t<dubbo:service interface=\"com.alibaba.hello.api.DemoService\" ref=\"demoService\"/>\n\t<dubbo:service interface=\"com.alibaba.hello.api.DemoService2\" ref=\"demoService2\"/>\n</dubbo:provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing REST-style Service in Java\nDESCRIPTION: Defines a Dubbo service interface and implementation with REST-style annotations. Includes a User model class for data transfer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Service Interface\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// Service Implementation\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// Model\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-side Concurrent Connections for a Service in Dubbo XML Configuration\nDESCRIPTION: These XML configurations limit the number of concurrent connections from each client to the com.foo.BarService to 10. This can be configured on either the service or reference side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance Strategy at Service Provider Level\nDESCRIPTION: Configures the roundrobin load balancing strategy at the provider side using the @DubboService annotation. This sets the default load balancing strategy for consumers of this service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(loadbalance = \"roundrobin\")\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry with OTLP Collector in Dubbo\nDESCRIPTION: Maven dependency for configuring Dubbo Spring Boot with OpenTelemetry as the tracer and OTLP protocol for sending traces to a collector.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n  <dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>\n    <version>${version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Specifying Timeout Parameter in YAML for Dubbo Service\nDESCRIPTION: This YAML snippet shows the specific parameter configuration for setting the timeout to 2000ms. It's a part of the larger configuration rule for the UserService provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/timeout.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key\nDESCRIPTION: Interactive shell commands for generating a new GPG key with specific configurations including key type, size, and expiration settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --full-gen-key\ngpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     <n>  = key expires in n days\n     <n>w = key expires in n weeks\n     <n>m = key expires in n months\n     <n>y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Robert Burrell Donkin\nEmail address: rdonkin@apache.org\nComment: CODE SIGNING KEY\nYou selected this USER-ID:\n   \"Robert Burrell Donkin (CODE SIGNING KEY) <rdonkin@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key.\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Service via HTTP with curl\nDESCRIPTION: Shell command using curl to access a Dubbo service via HTTP after enabling the Triple protocol. This demonstrates how to send a JSON payload to the HTTP endpoint that maps to a Dubbo service method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:20880/org.apache.dubbo.protocol.multiple.demo.DemoService/sayHello\n```\n\n----------------------------------------\n\nTITLE: Implementing GenericService Interface\nDESCRIPTION: Example of implementing the GenericService interface for handling generic service requests on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-generic-invoke.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class GenericServiceImpl implements GenericService {\n    @Override\n    public Object $invoke(String method, String[] parameterTypes, Object[] args) throws GenericException {\n        if (method.equals(\"hi\")) {\n            return \"hi, \" + args[0];\n        } else if (method.equals(\"hello\")) {\n            return \"hello, \" + args[0];\n        }\n\n        return \"welcome\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Client-side Validation Configuration\nDESCRIPTION: XML configuration for enabling parameter validation on the client side in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"validationService\" interface=\"org.apache.dubbo.examples.validation.api.ValidationService\" validation=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Consuming a Dubbo Service with @DubboReference\nDESCRIPTION: This Java code demonstrates how to consume a remote Dubbo service by injecting it using the @DubboReference annotation in a Spring Bean. This creates a proxy that handles the remote service communication transparently.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/service-definition.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic class Consumer {\n    @DubboReference\n    private DemoService demoService;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Timeout in Dubbo\nDESCRIPTION: YAML configuration that changes the timeout parameter to 6000ms for all consumer instances accessing the DemoService. This demonstrates service-level governance rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-rule.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# 所有消费（side:consumer）DemoService服务（key:org.apache.dubbo.samples.governance.api.DemoService）的应用实例（addresses:[0.0.0.0]），超时时间修改为6000ms\n---\nconfigVersion: v2.7\nscope: service\nkey: org.apache.dubbo.samples.governance.api.DemoService\nenabled: true\nconfigs:\n- addresses: [0.0.0.0]\n  side: consumer\n  parameters:\n  timeout: 6000\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing PermissionChecker Interface for QoS in Dubbo\nDESCRIPTION: Example implementation of a custom QoS anonymous access permission checker by implementing the PermissionChecker interface. This class is responsible for validating whether anonymous access to QoS commands should be permitted.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/qos-permission.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx.qos.permission;\n\nimport org.apache.dubbo.qos.permission.PermissionChecker;\n\npublic class XxxAnonymousAccessPermissionChecker implements PermissionChecker {\n\n    @Override\n    public boolean access(CommandContext commandContext, PermissionLevel defaultCmdRequiredPermissionLevel) {\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AggregateMetricsCollector for Local Metric Aggregation in Java\nDESCRIPTION: Implementation of the MetricsCollector and MetricsListener interfaces for local metric aggregation. It uses time-windowed counters and quantiles for aggregating metrics.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AggregateMetricsCollector implements MetricsCollector, MetricsListener {\n    private int bucketNum;\n    private int timeWindowSeconds;\n\n    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();\n\n    private final ApplicationModel applicationModel;\n\n    private static final Integer DEFAULT_COMPRESSION = 100;\n    private static final Integer DEFAULT_BUCKET_NUM = 10;\n    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;\n\n    public AggregateMetricsCollector(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        ConfigManager configManager = applicationModel.getApplicationConfigManager();\n        MetricsConfig config = configManager.getMetrics().orElse(null);\n        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {\n            registerListener();\n\n            AggregationConfig aggregation = config.getAggregation();\n            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();\n            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Prometheus Pushgateway Configuration Properties\nDESCRIPTION: Configuration properties for the Prometheus Pushgateway metrics exporter in Dubbo. These settings control how metrics are pushed to a Prometheus Pushgateway instance, including authentication, push intervals, and job identification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metrics.prometheus.pushgateway.base-url=<string> # Base URL for the Pushgateway\ndubbo.metrics.prometheus.pushgateway.enabled=<boolean> # Enable publishing via a Prometheus Pushgateway\ndubbo.metrics.prometheus.pushgateway.job=<string> # Job identifier for this application instance\ndubbo.metrics.prometheus.pushgateway.password=<string> # Login password of the Prometheus Pushgateway\ndubbo.metrics.prometheus.pushgateway.push-interval=<integer> # Frequency with which to push metrics\ndubbo.metrics.prometheus.pushgateway.username=<string> # Login user of the Prometheus Pushgateway\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Protocol by Extending Protocol Interface\nDESCRIPTION: Implementation of the EnhancedProtocol class that wraps the existing DubboProtocol. This class implements the Protocol interface and delegates method calls to the wrapped protocol while allowing additional custom logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.protocol.common;\n\nimport org.apache.dubbo.common.URL;\nimport org.apache.dubbo.rpc.Protocol;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Exporter;\nimport org.apache.dubbo.rpc.ProtocolServer;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.apache.dubbo.rpc.model.FrameworkModel;\nimport org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;\n\nimport java.util.List;\n\npublic class EnhancedProtocol implements Protocol {\n\n    public EnhancedProtocol(FrameworkModel frameworkModel) {\n        this.protocol = new DubboProtocol(frameworkModel);\n    }\n\n    private final Protocol protocol;\n\n    @Override\n    public int getDefaultPort() {\n        return this.protocol.getDefaultPort();\n    }\n\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        // do something\n        return this.protocol.export(invoker);\n    }\n\n    @Override\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        // do something\n        return this.protocol.refer(type, url);\n    }\n\n    @Override\n    public void destroy() {\n        this.protocol.destroy();\n    }\n\n    @Override\n    public List<ProtocolServer> getServers() {\n        return protocol.getServers();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Request Parameters in Java\nDESCRIPTION: Example of adding Dubbo-Api-Docs annotations to a request parameter bean class. The @RequestParam annotation is used to describe each field of the bean.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-api-docs.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class QuickStartRequestBean {\n\n  @RequestParam(value = \"You name\", required = true, description = \"please enter your full name\", example = \"Zhang San\")\n  private String name;\n\n  @RequestParam(value = \"You age\", defaultValue = \"18\")\n  private int age;\n\n  @RequestParam(\"Are you a main?\")\n  private boolean man;\n  \n  // getter/setter略...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Service in Spring XML\nDESCRIPTION: Spring XML configuration to declare and expose a generic service implementation. Defines the service bean and its Dubbo service interface mapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"genericService\" class=\"com.foo.MyGenericService\" />\n<dubbo:service interface=\"com.foo.BarService\" ref=\"genericService\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Hessian Protocol in Dubbo\nDESCRIPTION: Basic configuration for enabling Hessian protocol in Dubbo using XML configuration. Specifies the protocol name, port, and server implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"hessian\" port=\"8080\" server=\"jetty\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP to Dubbo Service Transformation in Java\nDESCRIPTION: Implementation of the HTTP2DubboService interface that uses reflection to dynamically invoke Dubbo services based on HTTP request parameters. Handles parameter conversion and response serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class HTTP2DubboServiceImpl implements HTTP2DubboService {\n\n    @Autowired\n    private ApplicationContext appContext;\n\n    @Override\n    public Map<String, Object> invoke(Map<String, Object> context) throws Exception {\n        DubboInvocation invocation = JSONObject.parseObject((byte[]) context.get(\"body\"), DubboInvocation.class);\n        Object[] args = new Object[invocation.getParameters().size()];\n        for (int i = 0; i < args.length; i++) {\n            DubboInvocationParameter parameter = invocation.getParameters().get(i);\n            args[i] = JSONObject.parseObject(parameter.getValue(), Class.forName(parameter.getType()));\n        }\n\n        Object svc = appContext.getBean(Class.forName(invocation.getService()));\n        Object result = svc.getClass().getMethod(invocation.getMethod()).invoke(args);\n        Map<String, Object> httpResponse = new HashMap<>();\n        httpResponse.put(\"status\", 200);\n        httpResponse.put(\"body\", JSONObject.toJSONString(result));\n        return httpResponse;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Service Interface with CompletableFuture in Java\nDESCRIPTION: This snippet shows how to define a Dubbo service interface that returns a CompletableFuture, allowing for asynchronous method calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface AsyncService {\n    CompletableFuture<String> sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Merger in Dubbo SPI\nDESCRIPTION: Example of registering a custom Merger implementation in Dubbo's SPI (Service Provider Interface) configuration file. This allows Dubbo to discover and use the custom merger.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/merger.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxMerger\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Service Using AsyncContext in Dubbo\nDESCRIPTION: Service implementation that uses AsyncContext to shift execution to a separate thread while maintaining the original RPC context, allowing asynchronous execution with a synchronous interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-execute-on-provider.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            // 如果要使用上下文，则必须要放在第一句执行\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            // 写回响应\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to Dubbo Configuration Bean Class\nDESCRIPTION: Shows the core configuration bean initializer class that might be affected by source code modifications or loading order changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/5/40.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.spring.context.DubboConfigBeanInitializer\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Metadata Report in Dubbo\nDESCRIPTION: XML configuration for setting up Zookeeper as a metadata report center in Dubbo. Specifies the connection address for the Zookeeper server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Protocol using YAML Configuration in Dubbo-go\nDESCRIPTION: Example YAML configuration for a Dubbo-go server using the Triple protocol. This configuration defines a protocol with ID 'triple', sets the port to be listened on, and associates it with a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocols:\n    triple: # define protcol-id 'triple'\n      name: tri # set protcol to tri\n      port: 20000 # set port to be listened\n  provider:\n    services:\n      GreeterProvider:\n        protocol-ids: triple # use protocol-ids named 'triple'\n        interface: com.apache.dubbo.sample.basic.IGreeter\n```\n\n----------------------------------------\n\nTITLE: Generating Stack Trace for Diagnosis in Bash\nDESCRIPTION: This command generates a stack trace log file for a specific process ID to help diagnose the 'Unsupported Message' error in Apache Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/6/6.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Configuring ETCD Registry in Dubbo-go 3.0\nDESCRIPTION: YAML configuration for setting up ETCD as the registry in Dubbo-go 3.0. Includes registry details and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    etcd:\n      protocol: etcdv3\n      timeout: 3s\n      address: 127.0.0.1:2379\n  protocols:\n    dubbo:\n      name: dubbo\n      port: 20000\n  provider:\n    services:\n      UserProvider:\n        interface: org.apache.dubbo.UserProvider\n```\n\n----------------------------------------\n\nTITLE: Implementing Method-Level QPS Control\nDESCRIPTION: Configuration for method-level QPS flow control in Sentinel. Limits the sayHelloAgain method to 5 QPS.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/sentinel.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nFlowRule flowRule = new FlowRule();\nflowRule.setResource(DemoService.class.getName() + \":sayHelloAgain(java.lang.String)\");\nflowRule.setCount(5);\nflowRule.setLimitApp(\"default\");\nflowRule.setGrade(RuleConstant.FLOW_GRADE_QPS);\nFlowRuleManager.loadRules(Collections.singletonList(flowRule));\n```\n\n----------------------------------------\n\nTITLE: Configuring QoS Permission Checker in Dubbo SPI Properties File\nDESCRIPTION: Configuration for registering the custom QoS Permission Checker implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/qos-permission.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nqosPermissionChecker=com.xxx.XxxPermissionChecker\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Services using Annotation APIs\nDESCRIPTION: Annotation-based configuration classes for declaring Dubbo services and references\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/api.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.annotation.DubboService\norg.apache.dubbo.config.annotation.DubboReference\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-Go Client with Error Handling\nDESCRIPTION: This Go code implements a Dubbo-Go client that makes two RPC calls to the GreetService, demonstrating how to handle both successful and failed responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/helloworld/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"right name\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"call Greet success: %s\", resp.Greeting)\n\n\tresp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: \"wrong name\"})\n\tif err != nil {\n\t\tlogger.Errorf(\"call Greet failed, err: %s\", err.Error())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Dubbo-go\nDESCRIPTION: This snippet shows how to initialize a Dubbo-go instance with Nacos as the registry center. It configures the instance with a name, the Nacos registry with its address, and a Triple protocol on port 20000.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_registry_nacos_server\"),\n\tdubbo.WithRegistry(\n\t\tregistry.WithNacos(),\n\t\tregistry.WithAddress(\"127.0.0.1:8848\"),\n\t),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20000),\n\t),\n)\n\nsrv, err := ins.NewServer()\n```\n\n----------------------------------------\n\nTITLE: Initializing Reference Service in Dubbo (Java)\nDESCRIPTION: This method initializes the reference service in Dubbo. It sets up service metadata, registers the service with the local repository, and creates a proxy object for the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected synchronized void init() {\n      //初始化标记变量保证只初始化一次，这里又是加锁🔐又是加标记变量的\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        //刷新配置\n        if (!this.isRefreshed()) {\n            this.refresh();\n        }\n\n        // init serviceMetadata\n        //初始化ServiceMetadata类型对象serviceMetadata 为其设置服务基本属性比如版本号，分组，服务接口名\n        initServiceMetadata(consumer);\n\n      //继续初始化元数据信息 服务接口类型和key\n        serviceMetadata.setServiceType(getServiceInterfaceClass());\n        // TODO, uncomment this line once service key is unified\n        serviceMetadata.setServiceKey(URL.buildKey(interfaceName, group, version));\n\n        //配置转Map类型\n        Map<String, String> referenceParameters = appendConfig();\n        // init service-application mapping\n        //来自本地存储和url参数的初始化映射。 参数转URL配置初始化 Dubbo中喜欢用url作为配置的一种处理方式\n        initServiceAppsMapping(referenceParameters);\n         //本地内存模块服务存储库\n        ModuleServiceRepository repository = getScopeModel().getServiceRepository();\n        //ServiceModel和ServiceMetadata在某种程度上是相互重复的。我们将来应该合并它们。\n        ServiceDescriptor serviceDescriptor;\n        if (CommonConstants.NATIVE_STUB.equals(getProxy())) {\n            serviceDescriptor = StubSuppliers.getServiceDescriptor(interfaceName);\n            repository.registerService(serviceDescriptor);\n        } else {\n            //本地存储库注册服务接口类型\n            serviceDescriptor = repository.registerService(interfaceClass);\n        }\n        //消费者模型对象\n        consumerModel = new ConsumerModel(serviceMetadata.getServiceKey(), proxy, serviceDescriptor, this,\n            getScopeModel(), serviceMetadata, createAsyncMethodInfo());\n         //本地存储库注册消费者模型对象\n        repository.registerConsumer(consumerModel);\n\n        //与前面代码一样基础初始化服务元数据对象为其设置附加参数\n        serviceMetadata.getAttachments().putAll(referenceParameters);\n        //创建服务的代理对象 ！！！核心代码在这里\n        ref = createProxy(referenceParameters);\n\n        //为服务元数据对象设置代理对象\n        serviceMetadata.setTarget(ref);\n        serviceMetadata.addAttribute(PROXY_CLASS_REF, ref);\n\n        consumerModel.setProxyObject(ref);\n        consumerModel.initMethodModels();\n\n        //检查invoker对象初始结果\n        checkInvokerAvailable();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance at Provider Interface Level\nDESCRIPTION: Configures load balancing strategy at the service provider interface level using @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(loadbalance = \"roundrobin\")\npublic class DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface in Dubbo\nDESCRIPTION: Shows the definition of a service interface that will be exposed as a Dubbo service. Interfaces are typically placed in separate client JAR packages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic interface UserReadService{\npublic User getUserById(Long userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dubbo Server Processing Duration Logs\nDESCRIPTION: This log snippet shows a warning from Dubbo's ProfilerServerFilter indicating that service execution time (3001ms) exceeded the configured timeout (1000ms). It includes detailed timing information, thread context, and invocation details useful for diagnosing performance issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_2\n\nLANGUAGE: log\nCODE:\n```\n[27/02/23 05:30:04:004 CST] DubboServerHandler-30.221.144.195:20880-thread-5  WARN filter.ProfilerServerFilter:  [DUBBO] [Dubbo-Provider] execute service org.apache.dubbo.samples.api.GreetingsService:0.0.0#sayHi cost 3001.533827 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\nclient: fd00:1:5:5200:a0a1:52b:e079:8582:58731\ninvocation context:\ninput=284;\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ndubbo=2.0.2;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 4237588012688\n+-[ Offset: 0.000000ms; Usage: 3001.533827ms, 100% ] Receive request. Server invoke begin.\n  +-[ Offset: 0.045578ms; Usage: 3001.436721ms, 99% ] Receive request. Server biz impl invoke begin., dubbo version: 3.1.7, current host: 30.221.144.195, error code: 3-7. This may be caused by , go to https://dubbo.apache.org/faq/3/7 to find instructions.\n```\n\n----------------------------------------\n\nTITLE: Invoking Generic Service Using Spring Context\nDESCRIPTION: Shows how to cast and invoke a generic service using the $invoke method with type parameters and values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-generic-invoke.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGenericService userService = (GenericService) context.getBean(\"userService\");\n// primary param and return value\nString name = (String) userService.$invoke(\"delete\", new String[]{int.class.getName()}, new Object[]{1});\nSystem.out.println(name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo QoS in dubbo.properties\nDESCRIPTION: This snippet demonstrates how to configure Dubbo QoS parameters in the dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndubbo.application.qos.enable=true\ndubbo.application.qos.port=33333\ndubbo.application.qos.accept.foreign.ip=false\n```\n\n----------------------------------------\n\nTITLE: Defining MethodMetric Class in Java for Dubbo\nDESCRIPTION: This code snippet defines the MethodMetric class, which is used to uniquely identify a method for metrics collection. It includes attributes for application name, interface name, method name, group, and version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class MethodMetric {\n    private String applicationName;\n    private String interfaceName;\n    private String methodName;\n    private String group;\n    private String version;\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Proxy Factory Extension\nDESCRIPTION: Directory structure showing the required files and their locations for implementing a custom proxy factory extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/proxy-factory.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxProxyFactory.java (implements ProxyFactory interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.ProxyFactory (plain text file, content: xxx=com.xxx.XxxProxyFactory)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dubbo Configuration with @EnableDubboConfigBindings\nDESCRIPTION: A configuration class that uses @EnableDubboConfigBindings to bind different prefixes to multiple Dubbo configuration bean types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Dubbo 配置 Bean\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n */\n@EnableDubboConfigBindings({\n        @EnableDubboConfigBinding(prefix = \"${applications.prefix}\",\n                type = ApplicationConfig.class, multiple = true), // 多 ApplicationConfig Bean 绑定\n        @EnableDubboConfigBinding(prefix = \"dubbo.module\", // 不带 \".\" 后缀\n                type = ModuleConfig.class), // 单 ModuleConfig Bean 绑定\n        @EnableDubboConfigBinding(prefix = \"dubbo.registry.\", // 带 \".\" 后缀\n                type = RegistryConfig.class) // 单 RegistryConfig Bean 绑定\n})\n@PropertySource(\"META-INF/bindings.properties\")\n@Configuration\npublic class DubboConfiguration {\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Java class implementing the DemoService interface. It provides the business logic for the sayHello method, concatenating a greeting message with the input name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name + \", response from provider.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Host with Domain Name in XML\nDESCRIPTION: Example of configuring a custom host using a domain name instead of an IP address in Dubbo protocol configuration. This allows for more flexibility in service registration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    <dubbo:protocol name=\"dubbo\" port=\"20890\" host=\"www.example.com\"/>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking Service Subscription Using HTTP Request to QoS\nDESCRIPTION: Use cURL to query the Dubbo QoS service via HTTP to list all services being provided and consumed by the current Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n➜ curl http://127.0.0.1:22222/ls\nAs Provider side:\n+------------------------------------------------------------------------------------+---+\n|                                Provider Service Name                               |PUB|\n+------------------------------------------------------------------------------------+---+\n|DubboInternal - first-dubbo-consumer/org.apache.dubbo.metadata.MetadataService:1.0.0|   |\n+------------------------------------------------------------------------------------+---+\nAs Consumer side:\n+---------------------------------------------+---------------------+\n|            Consumer Service Name            |         NUM         |\n+---------------------------------------------+---------------------+\n|org.apache.dubbo.samples.api.GreetingsService|zookeeper-AF(I-1,A-1)|\n+---------------------------------------------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Tags from Environment Variables\nDESCRIPTION: Configuration method to specify environment variables to load using 'dubbo.env.keys' or 'DUBBO_ENV_KEYS', where Dubbo attempts to load each key from environment variables.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/isolation.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# JVM Arguments\n-Ddubbo.env.keys = \"DUBBO_TAG1, DUBBO_TAG2\"\n\n# Environment Variables\nDUBBO_ENV_KEYS = \"DUBBO_TAG1, DUBBO_TAG2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer-side Service Timeout\nDESCRIPTION: Specify timeout duration for DemoService calls on the consumer side using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(timeout=5000)\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-rust Project Dependencies\nDESCRIPTION: Cargo.toml configuration file that specifies the project structure and dependencies for a Dubbo Rust application. It includes necessary crates for HTTP handling, async functionality, and Dubbo components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# ./Cargo.toml\n[package]\nname = \"example-greeter\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[[bin]]\nname = \"greeter-server\"\npath = \"src/greeter/server.rs\"\n\n[[bin]]\nname = \"greeter-client\"\npath = \"src/greeter/client.rs\"\n\n[dependencies]\nhttp = \"0.2\"\nhttp-body = \"0.4.4\"\nfutures-util = {version = \"0.3\", default-features = false}\ntokio = { version = \"1.0\", features = [ \"rt-multi-thread\", \"time\", \"fs\", \"macros\", \"net\", \"signal\"] }\nprost-derive = {version = \"0.10\", optional = true}\nprost = \"0.10.4\"\nasync-trait = \"0.1.56\"\ntokio-stream = \"0.1\"\n\ndubbo = \"0.1.0\"\ndubbo-config = \"0.1.0\"\n\n[build-dependencies]\ndubbo-build = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Triple Protocol Service with cURL\nDESCRIPTION: Demonstrates how to access a Dubbo service using a REST-style HTTP request with cURL. The service is published using the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi/\n```\n\n----------------------------------------\n\nTITLE: Setting Service Protocol to injvm in Dubbo\nDESCRIPTION: Configures a specific service to use the injvm protocol, which ensures the service is only exposed locally within the JVM.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: Service implementation class decorated with @DubboService annotation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class HelloServiceImpl implements HelloService {\n\n    @Override\n    public String sayHello(String name) {\n        return \"sayHello: \" + name;\n    }\n\n    @Override\n    public CompletableFuture<String> sayHelloAsync(String name) {\n        // ...\n    }\n\n    @Override\n    public CompletableFuture<Person> sayHelloAsyncComplex(String name) {\n         // ...\n    }\n\n    @Override\n    public CompletableFuture<GenericType<Person>> sayHelloAsyncGenericComplex(String name) {\n         // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Dubbo Samples Repository\nDESCRIPTION: Command to clone the Apache Dubbo samples repository containing the triple-grpc interoperability examples.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Service Provider with Bootstrap in Java\nDESCRIPTION: This snippet demonstrates how to start a Dubbo service provider using DubboBootstrap. It creates a ServiceConfig object, sets the interface and implementation, and configures the application, registry, and protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws Exception {\n            startWithBootstrap();\n    }\n    private static void startWithBootstrap() {\n        ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.application(new ApplicationConfig(\"dubbo-demo-api-provider\"))\n            .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n            .service(service)\n            .start()\n            .await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hystrix on Dubbo Provider\nDESCRIPTION: Java implementation of a Dubbo service provider with Hystrix circuit breaker configuration. The @HystrixCommand annotation configures circuit breaker properties and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n    @HystrixCommand(commandProperties = {\n                    @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n                    @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\") })\n    @Override\n    public String sayHello(String name) {\n        // System.out.println(\"async provider received: \" + name);\n        // return \"annotation: hello, \" + name;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration - XML\nDESCRIPTION: Core Dubbo dependencies required for the Spring Boot application including BOM and starters\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.apache.dubbo</groupId>\n                <artifactId>dubbo-bom</artifactId>\n                <version>3.3.0</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-nacos-spring-boot-starter</artifactId>\n        </dependency>\n    </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Service Reference Initialization in ReferenceConfig in Dubbo\nDESCRIPTION: Implementation of the service reference creation process in ReferenceConfig. It uses double-checked locking to ensure thread-safe singleton creation of service proxies and ensures that the required module configurations are initialized.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic T get() {\n    if (destroyed) {\n        throw new IllegalStateException(\"The invoker of ReferenceConfig(\" + url + \") has already destroyed!\");\n    }\n\n    //ref类型为 transient volatile T ref;\n    if (ref == null) {\n        // ensure start module, compatible with old api usage\n        //这个前面已经调用了模块发布器启动过了，这里有这么一行代码是有一定作用的，如果使用方直接调用了ReferenceConfigBase的get方法或者缓存对象SimpleReferenceCache类型的对象的get方法来引用服务端的时候就会造成很多配置没有初始化下面执行逻辑的时候出现问题，这个代码其实就是启动模块进行一些基础配置的初始化操作 比如元数据中心默认配置选择，注册中心默认配置选择这些都是比较重要的\n        getScopeModel().getDeployer().start();\n\n        synchronized (this) {\n            if (ref == null) {\n                init();\n            }\n        }\n    }\n\n    return ref;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Service Providers in XML\nDESCRIPTION: XML configuration for a service provider (Application B) showing how to expose the same services over different protocols (Dubbo and gRPC).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService1\" protocol=\"dubbo\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService2\" protocol=\"dubbo\"/>\n\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService3\" protocol=\"grpc\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService4\" protocol=\"grpc\"/>\n\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService0\" protocol=\"dubbo, grpc\"/>\n```\n\n----------------------------------------\n\nTITLE: Exposing a Service with Multiple Protocols in Dubbo\nDESCRIPTION: This XML configuration shows how to expose a single service using multiple protocols (dubbo and hessian) in Dubbo. It sets up the application, registry, defines two protocols, and exposes a service using both protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-protocols.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <dubbo:registry id=\"registry\" address=\"10.20.141.150:9090\" username=\"admin\" password=\"hello1234\" />\n    <!-- 多协议配置 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />\n    <dubbo:protocol name=\"hessian\" port=\"8080\" />\n    <!-- 使用多个协议暴露服务 -->\n    <dubbo:service id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" protocol=\"dubbo,hessian\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Consumer in Java\nDESCRIPTION: Client-side code that creates the callback listener implementation and registers it with the service to receive callbacks from the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:consumer.xml\");\ncontext.start();\n \nCallbackService callbackService = (CallbackService) context.getBean(\"callbackService\");\n \ncallbackService.addListener(\"foo.bar\", new CallbackListener(){\n    public void changed(String msg) {\n        System.out.println(\"callback1:\" + msg);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-rust Project Dependencies\nDESCRIPTION: Cargo.toml configuration file that specifies the project structure and dependencies for a Dubbo Rust application. It includes necessary crates for HTTP handling, async functionality, and Dubbo components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# ./Cargo.toml\n[package]\nname = \"example-greeter\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[[bin]]\nname = \"greeter-server\"\npath = \"src/greeter/server.rs\"\n\n[[bin]]\nname = \"greeter-client\"\npath = \"src/greeter/client.rs\"\n\n[dependencies]\nhttp = \"0.2\"\nhttp-body = \"0.4.4\"\nfutures-util = {version = \"0.3\", default-features = false}\ntokio = { version = \"1.0\", features = [ \"rt-multi-thread\", \"time\", \"fs\", \"macros\", \"net\", \"signal\"] }\nprost-derive = {version = \"0.10\", optional = true}\nprost = \"0.10.4\"\nasync-trait = \"0.1.56\"\ntokio-stream = \"0.1\"\n\ndubbo = \"0.1.0\"\ndubbo-config = \"0.1.0\"\n\n[build-dependencies]\ndubbo-build = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-Side Concurrent Execution at Method Level with Annotations\nDESCRIPTION: Java annotation configuration to limit a specific method's concurrent execution to a maximum of 10 threads. This provides method-level control using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(executes=10, methods = {@Method(name=\"sayHello\",executes=10)})\nprivate DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Service Interface with JAX-RS Annotations\nDESCRIPTION: Alternative approach of adding JAX-RS annotations to the service interface instead of the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\")\npublic interface UserService {\n    \n    @GET\n    @Path(\"{id : \\\\d+}\")\n    @Produces({MediaType.APPLICATION_JSON})\n    User getUser(@PathParam(\"id\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Penetration Selector in Java Dubbo\nDESCRIPTION: Interface definition for a SPI extension that allows users to specify which parameters should be passed through to the next service in a multi-hop call chain. The select method determines which attachments will be forwarded.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SPI\npublic interface PenetrateAttachmentSelector {\n\n    /**\n     * Select some attachments to pass to next hop.\n     * These attachments can fetch from {@link RpcContext#getServerAttachment()} or user defined.\n     *\n     * @return attachment pass to next hop\n     */\n    Map<String, Object> select();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Services with Java API\nDESCRIPTION: Example of configuring Dubbo services using Java API. Shows how to programmatically set up application, registry, interface, and service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/overview.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n        ServiceConfig<GreetingsService> service = new ServiceConfig<>();\n        service.setApplication(new ApplicationConfig(\"first-dubbo-provider\"));\n        service.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n        service.setInterface(GreetingsService.class);\n        service.setRef(new GreetingsServiceImpl());\n        service.export();\n        System.out.println(\"first-dubbo-provider is running.\");\n        System.in.read();\n        }\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Resources in Java for Apache Dubbo\nDESCRIPTION: This method reads and parses configuration files, loads classes using reflection, and calls loadClass for further processing. It handles comments and parses key-value pairs in the configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                          java.net.URL resourceURL, boolean overridden, String... excludedPackages) {\n    try {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\n            String line;\n            String clazz = null;\n            // 按行读取配置内容\n            while ((line = reader.readLine()) != null) {\n                // 定位 # 字符\n                final int ci = line.indexOf('#');\n                if (ci >= 0) {\n                    // 截取 # 之前的字符串，# 之后的内容为注释，需要忽略\n                    line = line.substring(0, ci);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    try {\n                        String name = null;\n                        // 以等于号 = 为界，截取键与值\n                        int i = line.indexOf('=');\n                        if (i > 0) {\n                            name = line.substring(0, i).trim();\n                            clazz = line.substring(i + 1).trim();\n                        } else {\n                            clazz = line;\n                        }\n                        // 加载类，并通过 loadClass 方法对类进行缓存\n                        if (StringUtils.isNotEmpty(clazz) && !isExcluded(clazz, excludedPackages)) {\n                            loadClass(extensionClasses, resourceURL, Class.forName(clazz, true, classLoader), name, overridden);\n                        }\n                    } catch (Throwable t) {\n                        IllegalStateException e = new IllegalStateException(\"Failed to load extension class (interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\n                        exceptions.put(line, e);\n                    }\n                }\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", class file: \" + resourceURL + \") in \" + resourceURL, t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Callback in XML\nDESCRIPTION: XML configuration for the Dubbo service consumer, including reference and method definitions with callback settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id =\"demoCallback\" class = \"org.apache.dubbo.callback.implicit.NotifyImpl\" />\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.callback.implicit.IDemoService\" version=\"1.0.0\" group=\"cn\" >\n      <dubbo:method name=\"get\" async=\"true\" onreturn = \"demoCallback.onreturn\" onthrow=\"demoCallback.onthrow\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Call using Spring\nDESCRIPTION: Example of making generic calls using Spring's context and bean container\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate static GenericService genericService;\n\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/generic-impl-consumer.xml\");\n    context.start();\n    // The name of the service corresponding bean is determined by the id of the xml tag.\n    genericService = context.getBean(\"helloService\");\n    // Obtain the result.\n    Object result = genericService.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"world\"});\n}\n```\n\n----------------------------------------\n\nTITLE: 全局配置消费端不检查依赖服务\nDESCRIPTION: 在 YAML 中全局配置消费端不检查依赖服务是否可用。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    check: false\n```\n\n----------------------------------------\n\nTITLE: Dubbo JavaConfig Configuration\nDESCRIPTION: Shows how to configure Dubbo using Spring's @Configuration approach, defining ApplicationConfig and RegistryConfig beans programmatically.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\npublic class DubboConfiguration {\n\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"provider-test\");\n        return applicationConfig;\n    }\n\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n        registryConfig.setClient(\"curator\");\n        return registryConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Call using Spring\nDESCRIPTION: Example of making generic calls using Spring's context and bean container\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate static GenericService genericService;\n\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/generic-impl-consumer.xml\");\n    context.start();\n    // The name of the service corresponding bean is determined by the id of the xml tag.\n    genericService = context.getBean(\"helloService\");\n    // Obtain the result.\n    Object result = genericService.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{\"world\"});\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Zookeeper Server with CLI Client\nDESCRIPTION: Command to connect to the running Zookeeper server using the zkCli.sh script, targeting the local server on port 2181.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbin/zkCli.sh -server 127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Service Publishing in Dubbo\nDESCRIPTION: XML configuration snippet showing how to publish a Dubbo service using multiple protocols simultaneously (dubbo, gRPC, and REST). This allows the same service to be accessed via different communication protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.DemoService\" protocol=\"dubbo, grpc,rest\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Output of All Metrics Query\nDESCRIPTION: Example output showing various Dubbo metrics including registry directory and registration response time metrics.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>metrics_default\ndubbo.registry.directory.num.disable.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,interface=dubbo-springboot-demo-provider/org.apache.dubbo.metrics.service.MetricsService:1.0.0,ip=10.224.214.80,} 0.0\ndubbo.register.rt.milliseconds.max{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,ip=10.224.214.80,} 153.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Triple Protocol Service with cURL\nDESCRIPTION: Demonstrates how to access a Dubbo service using a REST-style HTTP request with cURL. The service is published using the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi/\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Interface Caching in Dubbo with Annotations\nDESCRIPTION: Java annotation configuration for enabling LRU caching on a client-side Dubbo service reference at the interface level. This applies caching to all methods of the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(cache = \"lru\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Data Formats in REST Service\nDESCRIPTION: Example of configuring a REST service to support both JSON and XML data formats.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Handling REST Requests in Dubbo\nDESCRIPTION: This code defines a RestHandler class that implements HttpHandler to process HTTP requests in a Dubbo REST service. It builds RPC invocations, invokes the service, and handles the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprivate class RestHandler implements HttpHandler<HttpServletRequest, HttpServletResponse> {\n\n    @Override\n    public void handle(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws IOException, ServletException {\n         // 有servlet reuqest 和nettyRequest\n        RequestFacade request = RequestFacadeFactory.createRequestFacade(servletRequest);\n        RpcContext.getServiceContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());\n//            dispatcher.service(request, servletResponse);\n\n        Pair<RpcInvocation, Invoker> build = null;\n        try {\n            // 根据请求信息创建 RPCInvocation\n            build = RPCInvocationBuilder.build(request, servletRequest, servletResponse);\n        } catch (PathNoFoundException e) {\n            servletResponse.setStatus(404);\n        }\n\n        Invoker invoker = build.getSecond();\n\n        Result invoke = invoker.invoke(build.getFirst());\n\n        // TODO handling  exceptions\n        if (invoke.hasException()) {\n            servletResponse.setStatus(500);\n        } else {\n\n            try {\n                Object value = invoke.getValue();\n                String accept = request.getHeader(RestConstant.ACCEPT);\n                MediaType mediaType = MediaTypeUtil.convertMediaType(accept);\n                // TODO write response\n                HttpMessageCodecManager.httpMessageEncode(servletResponse.getOutputStream(), value, invoker.getUrl(), mediaType);\n                servletResponse.setStatus(200);\n            } catch (Exception e) {\n                servletResponse.setStatus(500);\n            }\n\n\n        }\n\n        // TODO add Attachment header\n\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Tracing Dependencies in Spring Boot Project\nDESCRIPTION: XML configuration for including the necessary dependency for OpenTelemetry tracing with OTLP exporter in a Spring Boot Dubbo project. This uses the pre-configured dubbo-spring-boot-tracing-otel-otlp-starter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/otlp.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- OpenTelemetry as Tracer, Otlp as exporter -->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Thrift Protocol in Dubbo\nDESCRIPTION: XML configuration to set up the Thrift protocol in Dubbo, specifying the protocol name and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/thrift.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"thrift\" port=\"3030\" />\n```\n\n----------------------------------------\n\nTITLE: Defining REST API using Spring MVC Annotations\nDESCRIPTION: This code snippet demonstrates how to define a REST API interface using Spring MVC annotations in a Dubbo service. It includes methods for different HTTP operations and parameter handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n@RestController()\n@RequestMapping(\"/demoService\")\npublic interface DemoService {\n    @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n    Integer hello(@RequestParam Integer a, @RequestParam Integer b);\n\n    @RequestMapping(value = \"/error\", method = RequestMethod.GET)\n    String error();\n\n    @RequestMapping(value = \"/say\", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)\n    String sayHello(@RequestBody String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegistryFactory Interface in Java\nDESCRIPTION: Java interface definition for RegistryFactory, which is responsible for connecting to the registry. It includes contracts for handling connection checks, authentication, backup addresses, caching, and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface RegistryFactory {\n    Registry getRegistry(URL url); \n}\n```\n\n----------------------------------------\n\nTITLE: Alternative RpcContext Async Call Pattern\nDESCRIPTION: Alternative approach to making async calls using RpcContext's asyncCall method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future = RpcContext.getContext().asyncCall(\n    () -> {\n        asyncService.sayHello(\"oneway call request1\");\n    }\n);\n\nfuture.get();\n```\n\n----------------------------------------\n\nTITLE: Defining Consumer Callback Interface in Java\nDESCRIPTION: Defines the Notify interface on the consumer side with methods for onreturn and onthrow events.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ninterface Notify {\n    public void onreturn(Person msg, Integer id);\n    public void onthrow(Throwable ex, Integer id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SLF4J Logger in YAML\nDESCRIPTION: Enables SLF4J logging for Dubbo in a Spring Boot application using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    logger: slf4j\n```\n\n----------------------------------------\n\nTITLE: Checking Serialization Status via HTTP\nDESCRIPTION: Demonstrates how to query serialization status using HTTP GET request to return JSON formatted results.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeCheckStatus      \n{\"checkStatus\":\"WARN\",\"allowedPrefix\":[...],\"checkSerializable\":true,\"disAllowedPrefix\":[...]}\n```\n\n----------------------------------------\n\nTITLE: Defining SSL Configuration for Apache Dubbo in Java\nDESCRIPTION: This code defines the SslConfig class in Apache Dubbo, which contains properties for configuring SSL/TLS settings. It includes paths for certificates, private keys, and trust stores for both client and server sides.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.SslConfig\n```\n\n----------------------------------------\n\nTITLE: Defining HelloService Interface in Java\nDESCRIPTION: This Java code defines the HelloService interface, which declares a single method 'hello' that takes a String parameter and returns a String.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.api;\n\npublic interface HelloService {\n    String hello(String message);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting and Running Triple HTTP/3 Example with Maven\nDESCRIPTION: Commands to clone the Dubbo samples repository and run the Triple HTTP/3 example using Maven Spring Boot plugin. This demonstrates how to obtain and execute the example code for the HTTP/3 protocol support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Get example code\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-http3\n# Run directly\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Listener in Dubbo-Go-Pixiu\nDESCRIPTION: Configuration for setting up an HTTPS listener with domain specifications and certificate directory. This setup enables secure HTTP connections with support for multiple domains and SSL certificates.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/listener/http.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTPS\"\n      address:\n        socket_address:\n          domains:\n            - \"sample.domain.com\"\n            - \"sample.domain-1.com\"\n            - \"sample.domain-2.com\"\n          certs_dir: $PROJECT_DIR/cert\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Implementation in Dubbo\nDESCRIPTION: Shows how to register the DubboProtocol implementation in the META-INF/dubbo/internal configuration path. This allows Dubbo to discover and load protocol implementations at runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ndubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registry Groups\nDESCRIPTION: XML configuration for setting up multiple registry groups using the same Zookeeper instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"chinaRegistry\" protocol=\"zookeeper\" address=\"10.20.153.10:2181\" group=\"china\" />\n<dubbo:registry id=\"intlRegistry\" protocol=\"zookeeper\" address=\"10.20.153.10:2181\" group=\"intl\" />\n```\n\n----------------------------------------\n\nTITLE: Service Reference Configuration with Java API\nDESCRIPTION: Java code example showing how to reference a service with different protocols in a port unification scenario using ReferenceConfig. The protocol can be set to either Dubbo or Triple.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<GreetingService> reference = new ReferenceConfig<>();\nreference.setInterface(GreetingService.class);\nreference.setListener(\"consumer\");\nreference.setProtocol(this.protocol);\n// reference.setProtocol(CommonConstants.DUBBO);\n// reference.setProtocol(CommonConstants.TRIPLE);\n```\n\n----------------------------------------\n\nTITLE: Using invoke Command in Dubbo QoS\nDESCRIPTION: Calls a specific RPC service method with parameters. Supports passing primitive types, strings, and JSON objects as parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/qos-list.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninvoke org.demo.DemoService.methodName(1234, \"abcd\", {\"prop\":\"value\"})\n```\n\n----------------------------------------\n\nTITLE: Get Extension Method Implementation\nDESCRIPTION: Basic implementation of getExtension that delegates to overloaded method with wrap parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\npublic T getExtension(String name) {\n        T extension = getExtension(name, true);\n        if (extension == null) {\n            throw new IllegalArgumentException(\"Not find extension: \" + name);\n        }\n        return extension;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: TypeScript implementation of the ExampleService with router configuration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DubboRouter } from \"@apachedubbo/dubbo\";\nimport { ExampleService } from \"./gen/example_dubbo\";\n\nexport default (router: DubboRouter) =>\n  router.service(ExampleService, {\n    async say(req) {\n      return {\n        sentence: `You said: ${req.sentence}`,\n      };\n    },\n  }, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });\n```\n\n----------------------------------------\n\nTITLE: ConfigManager Initialization in AbstractConfigManager\nDESCRIPTION: Initializes configuration settings for Dubbo using a ConcurrentHashMap-based lock-free approach. Handles configuration modes, interface duplication checks, and property management with different config modes like STRICT, OVERRIDE, etc.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void initialize() throws IllegalStateException {\n        if (!initialized.compareAndSet(false, true)) {\n            return;\n        }\n        CompositeConfiguration configuration = scopeModel.getModelEnvironment().getConfiguration();\n        String configModeStr = (String) configuration.getProperty(ConfigKeys.DUBBO_CONFIG_MODE);\n        try {\n            if (StringUtils.hasText(configModeStr)) {\n                this.configMode = ConfigMode.valueOf(configModeStr.toUpperCase());\n            }\n        } catch (Exception e) {\n            String msg = \"Illegal '\" + ConfigKeys.DUBBO_CONFIG_MODE + \"' config value [\" + configModeStr + \"], available values \" + Arrays.toString(ConfigMode.values());\n            logger.error(msg, e);\n            throw new IllegalArgumentException(msg, e);\n        }\n        String ignoreDuplicatedInterfaceStr = (String) configuration\n            .getProperty(ConfigKeys.DUBBO_CONFIG_IGNORE_DUPLICATED_INTERFACE);\n        if (ignoreDuplicatedInterfaceStr != null) {\n            this.ignoreDuplicatedInterface = Boolean.parseBoolean(ignoreDuplicatedInterfaceStr);\n        }\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(ConfigKeys.DUBBO_CONFIG_MODE, configMode);\n        map.put(ConfigKeys.DUBBO_CONFIG_IGNORE_DUPLICATED_INTERFACE, this.ignoreDuplicatedInterface);\n        logger.info(\"Config settings: \" + map);\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying Access Log File in YAML\nDESCRIPTION: Configures a specific file for Dubbo access logs using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    accesslog: /home/dubbo/foo/bar.log\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serialization in Java\nDESCRIPTION: Example Java class implementing the Serialization interface for custom serialization handling in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.serialize.Serialization;\nimport org.apache.dubbo.common.serialize.ObjectInput;\nimport org.apache.dubbo.common.serialize.ObjectOutput;\n \n \npublic class XxxSerialization implements Serialization {\n    public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException {\n        return new XxxObjectOutput(output);\n    }\n    public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException {\n        return new XxxObjectInput(input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Thread Release with AllChannelHandler2 in Dubbo\nDESCRIPTION: Core handler class that implements timeout-based thread interruption for Dubbo providers. It uses a timer to track execution time and cancels futures that exceed their timeout limit.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/provider-timeout-release.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AllChannelHandler2 extends AllChannelHandler {\n\n    public static final Timer TIME_OUT_TIMER = new HashedWheelTimer(\n            new NamedThreadFactory(\"dubbo-server-future-timeout\", true),\n            30,\n            TimeUnit.MILLISECONDS);\n\n    public AllChannelHandler2(ChannelHandler handler, URL url) {\n        super(handler, url);\n    }\n\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        ExecutorService executor = getPreferredExecutorService(message);\n        try {\n            Future<?> future = executor.submit(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));\n            long timeout = this.url.getParameter(\"timeout\", 1000) + 90;\n            TIME_OUT_TIMER.newTimeout(t -> {\n                if (!future.isDone() && (!future.isCancelled())) {\n                    try {\n                        future.cancel(true);\n                    } catch (Throwable ex) {\n                        //ignore\n                    }\n                }\n            }, timeout, TimeUnit.MILLISECONDS);\n\n        } catch (Throwable t) {\n            if (message instanceof Request && t instanceof RejectedExecutionException) {\n                sendFeedback(channel, (Request) message, t);\n                return;\n            }\n            throw new ExecutionException(message, channel, getClass() + \" error when process received event .\", t);\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Control Plane Resources and Services in YAML\nDESCRIPTION: Comprehensive YAML configuration for the Dubbo Control Plane, specifying resource store settings (memory, Kubernetes, or MySQL), server port, registry addresses, and integrations with monitoring services like Prometheus, Jaeger tracing, and Grafana.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Resource Store configuration\nstore:\n  # Type of Store used in the Control Plane. Available values are: \"kubernetes\", \"postgres\" or \"memory\"\n  type: memory # ENV: DUBBO_STORE_TYPE\n\n  # Kubernetes Store configuration (used when store.type=kubernetes)\n  kubernetes:\n    # Namespace where Control Plane is installed to.\n    systemNamespace: dubbo-system # ENV: DUBBO_STORE_KUBERNETES_SYSTEM_NAMESPACE\n\n  # Postgres Store configuration (used when store.type=postgres)\n  mysql:\n    # Host of the Postgres DB\n    host: 127.0.0.1 # ENV: DUBBO_STORE_POSTGRES_HOST\n    # Port of the Postgres DB\n    port: 15432 # ENV: DUBBO_STORE_POSTGRES_PORT\n    # User of the Postgres DB\n    user: dubbo # ENV: DUBBO_STORE_POSTGRES_USER\n    # Password of the Postgres DB\n    password: dubbo # ENV: DUBBO_STORE_POSTGRES_PASSWORD\n    # Database name of the Postgres DB\n    dbName: dubbo # ENV: DUBBO_STORE_POSTGRES_DB_NAME\n    # Connection Timeout to the DB in seconds\n    connectionTimeout: 5 # ENV: DUBBO_STORE_POSTGRES_CONNECTION_TIMEOUT\n    # Maximum number of open connections to the database\n    # `0` value means number of open connections is unlimited\n    maxOpenConnections: 50 # ENV: DUBBO_STORE_POSTGRES_MAX_OPEN_CONNECTIONS\n    # Maximum number of connections in the idle connection pool\n    # <0 value means no idle connections and 0 means default max idle connections\n    maxIdleConnections: 50  # ENV: DUBBO_STORE_POSTGRES_MAX_IDLE_CONNECTIONS\n    # TLS settings\n    tls:\n      # Mode of TLS connection. Available values are: \"disable\", \"verifyNone\", \"verifyCa\", \"verifyFull\"\n      mode: disable # ENV: DUBBO_STORE_POSTGRES_TLS_MODE\n      # Path to TLS Certificate of the client. Used in verifyCa and verifyFull modes\n      certPath: # ENV: DUBBO_STORE_POSTGRES_TLS_CERT_PATH\n      # Path to TLS Key of the client. Used in verifyCa and verifyFull modes\n      keyPath: # ENV: DUBBO_STORE_POSTGRES_TLS_KEY_PATH\n      # Path to the root certificate. Used in verifyCa and verifyFull modes.\n      caPath: # ENV: DUBBO_STORE_POSTGRES_TLS_ROOT_CERT_PATH\n    # MinReconnectInterval controls the duration to wait before trying to\n    # re-establish the database connection after connection loss. After each\n    # consecutive failure this interval is doubled, until MaxReconnectInterval\n    # is reached. Successfully completing the connection establishment procedure\n    # resets the interval back to MinReconnectInterval.\n    minReconnectInterval: \"10s\" # ENV: DUBBO_STORE_POSTGRES_MIN_RECONNECT_INTERVAL\n    # MaxReconnectInterval controls the maximum possible duration to wait before trying\n    # to re-establish the database connection after connection loss.\n    maxReconnectInterval: \"60s\" # ENV: DUBBO_STORE_POSTGRES_MAX_RECONNECT_INTERVAL\nserver:\n\tport: 38080\nregistry:\n  address: xxx\nmetadata-center:\n  address: xxx\nconfig-center:\n\taddress: xxx\nexternal-services:\n  prometheus:\n      # Prometheus service name is \"metrics\" and is in the \"telemetry\" namespace\n\t\t  # http://prometheus.<dubbo_namespace_name>:9090\n      url: \"http://metrics.telemetry:9090/\"\n  tracing:\n    # Enabled by default. Kiali will anyway fallback to disabled if\n    # Jaeger is unreachable.\n    enabled: true\n    # Jaeger service name is \"tracing\" and is in the \"telemetry\" namespace.\n    # Make sure the URL you provide corresponds to the non-GRPC enabled endpoint\n    # if you set \"use_grpc\" to false.\n    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'\n    use_grpc: true\n    # Public facing URL of Jaeger\n    url: 'http://my-jaeger-host/jaeger'\n\tgrafana:\n      enabled: true\n      # Grafana service name is \"grafana\" and is in the \"telemetry\" namespace.\n      in_cluster_url: 'http://grafana.telemetry:3000/'\n      # Public facing URL of Grafana\n      url: 'http://my-ingress-host/grafana'\n```\n\n----------------------------------------\n\nTITLE: Implementing CompletableFuture Async Call\nDESCRIPTION: Example of making an asynchronous call using CompletableFuture and handling the response with callbacks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// 调用直接返回CompletableFuture\nCompletableFuture<String> future = asyncService.sayHello(\"async call request\");\n// 增加回调\nfuture.whenComplete((v, t) -> {\n    if (t != null) {\n        t.printStackTrace();\n    } else {\n        System.out.println(\"Response: \" + v);\n    }\n});\n// 早于结果输出\nSystem.out.println(\"Executed before response return.\");\n```\n\n----------------------------------------\n\nTITLE: Defining Repository Interface in Java\nDESCRIPTION: Creates an IRepository interface with a save method for data storage operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface IRepository {\n    void save(String data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Java Interface for Dubbo Service\nDESCRIPTION: This Java interface defines the IGreeter service with a sayHello method that takes a HelloRequest and returns a User object. It's used to define the contract for the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface IGreeter {\n  /**\n   * <pre>\n   *  Sends a greeting\n   * </pre>\n   */\n\tUser sayHello(HelloRequest request);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol with Port in XML\nDESCRIPTION: Demonstrates how to configure the Dubbo protocol with a specific port number using XML configuration. This snippet shows the basic setup without specifying a host, which will use the default host.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/set-host.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20890\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Interface for Proxyless Mesh\nDESCRIPTION: The service implementation with @DubboService annotation that returns a greeting message along with the local host information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(version = \"1.0.0\")\npublic class AnnotatedGreetingService implements GreetingService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"greeting service received: \" + name);\n        return \"hello, \" + name + \"! from host: \" + NetUtils.getLocalHost();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Configuration in Java for Apache Dubbo\nDESCRIPTION: This code snippet defines the RegistryConfig class in Apache Dubbo, which contains properties for configuring the registry. It includes settings for registry address, protocols, clustering, and various other options for service registration and discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.RegistryConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Class in Java\nDESCRIPTION: Example of a mock implementation class for the BarService interface. This class provides fault tolerance data when a RpcException occurs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.foo;\npublic class BarServiceMock implements BarService {\n    public String sayHello(String name) {\n        // You can fabricate fault tolerance data; this method is only executed if RpcException occurs\n        return \"Fault Tolerance Data\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Request Object for Protobuf Service\nDESCRIPTION: Example of creating a request object for a Protobuf service call using a Java Map that will be converted to JSON. Shows how different Protobuf field types should be handled.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/pb-generic-reference.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> person = new HashMap<>();\nperson.put(\"double\", \"1.000\");\nperson.put(\"float\", \"1.00\");\nperson.put(\"int32\",\"1\" );\nperson.put(\"bool\",\"false\" );\n//String 的对象需要经过base64编码\nperson.put(\"string\",\"someBaseString\");\nperson.put(\"bytesType\",\"150\");\n```\n\n----------------------------------------\n\nTITLE: Dubbo Provider Configuration Properties\nDESCRIPTION: Properties configuration for Dubbo provider including application settings, Nacos registry address, and service version information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n## application\ndubbo.application.name = dubbo-provider-demo\n\n## Nacos registry address\ndubbo.registry.address = nacos://127.0.0.1:8848\n\n## Dubbo Protocol\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = -1\n\n# Provider @Service version\ndemo.service.version=1.0.0\ndemo.service.name = demoService\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Stream Handlers in Go\nDESCRIPTION: Server implementation showing how to handle different types of streams including bidirectional streaming, client streaming and server streaming. Includes error handling and stream management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetStream(ctx context.Context, stream greet.GreetService_GreetStreamServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif triple.IsEnded(err) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"triple BidiStream recv error: %s\", err)\n\t\t}\n\t\tif err := stream.Send(&greet.GreetStreamResponse{Greeting: req.Name}); err != nil {\n\t\t\treturn fmt.Errorf(\"triple BidiStream send error: %s\", err)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (srv *GreetTripleServer) GreetClientStream(ctx context.Context, stream greet.GreetService_GreetClientStreamServer) (*greet.GreetClientStreamResponse, error) {\n\tvar reqs []string\n\tfor stream.Recv() {\n\t\treqs = append(reqs, stream.Msg().Name)\n\t}\n\tif stream.Err() != nil && !triple.IsEnded(stream.Err()) {\n\t\treturn nil, fmt.Errorf(\"triple ClientStream recv err: %s\", stream.Err())\n\t}\n\tresp := &greet.GreetClientStreamResponse{\n\t\tGreeting: strings.Join(reqs, \",\"),\n\t}\n\n\treturn resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetServerStream(ctx context.Context, req *greet.GreetServerStreamRequest, stream greet.GreetService_GreetServerStreamServer) error {\n\tfor i := 0; i < 5; i++ {\n\t\tif err := stream.Send(&greet.GreetServerStreamResponse{Greeting: req.Name}); err != nil {\n\t\t\treturn fmt.Errorf(\"triple ServerStream send err: %s\", err)\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Activating a Provider-Side Filter in Java\nDESCRIPTION: Example of a Filter implementation with the @Activate annotation to automatically enable it on the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = PROVIDER)\npublic class AccessLogFilter implements Filter {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo-go Tracing with OpenTelemetry\nDESCRIPTION: Example of enabling and configuring tracing in a Dubbo-go application using various tracing options like stdout exporter, W3C propagator, and sampling modes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/tracing.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"dubbo.apache.org/dubbo-go/v3\"\n  _ \"dubbo.apache.org/dubbo-go/v3/imports\"\n  \"dubbo.apache.org/dubbo-go/v3/otel/trace\"\n)\n\nfunc main() {\n    instance, err := dubbo.NewInstance(\n        dubbo.WithTracing(\n          // add tracing options here\n          trace.WithEnabled(), // enable tracing feature\n          trace.WithStdoutExporter(),\n          trace.WithW3cPropagator(),\n          trace.WithAlwaysMode(),\n          trace.WithRatioMode(), // use ratio mode\n          trace.WithRatio(0.5), // sample ratio, only active when using ratio mode\n        ),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with Nacos Registry\nDESCRIPTION: YAML configuration for Dubbo service including application name, Nacos registry settings, and triple protocol configuration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-triple-with-apisix-gateway.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n    application:\n        name: gateway-apisix-triple\n    registry:\n        address: nacos://${nacos.address:127.0.0.1}:8848\n        username: nacos\n        password: nacos\n    protocol:\n        name: tri\n        port: 50052\n```\n\n----------------------------------------\n\nTITLE: Exporting Prometheus Metrics from Dubbo Application\nDESCRIPTION: Complete sample of Prometheus metrics export from a Dubbo application. The metrics include JVM statistics (memory, threads, garbage collection), system information (CPU), and Dubbo-specific performance metrics such as response times, QPS, and request counts for specific service methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_3\n\nLANGUAGE: prometheus\nCODE:\n```\n# TYPE jvm_threads_states_threads gauge\njvm_threads_states_threads{state=\"blocked\",} 0.0\njvm_threads_states_threads{state=\"runnable\",} 10.0\njvm_threads_states_threads{state=\"waiting\",} 16.0\njvm_threads_states_threads{state=\"timed-waiting\",} 13.0\njvm_threads_states_threads{state=\"new\",} 0.0\njvm_threads_states_threads{state=\"terminated\",} 0.0\n# HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool\n# TYPE jvm_buffer_total_capacity_bytes gauge\njvm_buffer_total_capacity_bytes{id=\"direct\",} 1.6799749E7\njvm_buffer_total_capacity_bytes{id=\"mapped\",} 0.0\n# HELP rt_p99 Response Time P99\n# TYPE rt_p99 gauge\nrt_p99{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 1.0\n# HELP jvm_memory_used_bytes The amount of used memory\n# TYPE jvm_memory_used_bytes gauge\njvm_memory_used_bytes{area=\"heap\",id=\"G1 Survivor Space\",} 1048576.0\njvm_memory_used_bytes{area=\"nonheap\",id=\"CodeHeap 'profiled nmethods'\",} 1.462464E7\njvm_memory_used_bytes{area=\"heap\",id=\"G1 Old Gen\",} 1.6098728E7\njvm_memory_used_bytes{area=\"nonheap\",id=\"Metaspace\",} 4.0126952E7\njvm_memory_used_bytes{area=\"heap\",id=\"G1 Eden Space\",} 8.2837504E7\njvm_memory_used_bytes{area=\"nonheap\",id=\"CodeHeap 'non-nmethods'\",} 1372032.0\njvm_memory_used_bytes{area=\"nonheap\",id=\"Compressed Class Space\",} 4519248.0\njvm_memory_used_bytes{area=\"nonheap\",id=\"CodeHeap 'non-profiled nmethods'\",} 5697408.0\n# HELP qps Query Per Seconds\n# TYPE qps gauge\nqps{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 0.3333333333333333\n# HELP rt_min Min Response Time\n# TYPE rt_min gauge\nrt_min{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 0.0\n# HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool\n# TYPE jvm_buffer_count_buffers gauge\njvm_buffer_count_buffers{id=\"mapped\",} 0.0\njvm_buffer_count_buffers{id=\"direct\",} 10.0\n# HELP system_cpu_count The number of processors available to the Java virtual machine\n# TYPE system_cpu_count gauge\nsystem_cpu_count 2.0\n# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine\n# TYPE jvm_classes_loaded_classes gauge\njvm_classes_loaded_classes 7325.0\n# HELP rt_total Total Response Time\n# TYPE rt_total gauge\nrt_total{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 2783.0\n# HELP rt_last Last Response Time\n# TYPE rt_last gauge\nrt_last{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 0.0\n# HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC\n# TYPE jvm_gc_memory_promoted_bytes_total counter\njvm_gc_memory_promoted_bytes_total 1.4450952E7\n# HELP jvm_gc_pause_seconds Time spent in GC pause\n# TYPE jvm_gc_pause_seconds summary\njvm_gc_pause_seconds_count{action=\"end of minor GC\",cause=\"Metadata GC Threshold\",} 2.0\njvm_gc_pause_seconds_sum{action=\"end of minor GC\",cause=\"Metadata GC Threshold\",} 0.026\njvm_gc_pause_seconds_count{action=\"end of minor GC\",cause=\"G1 Evacuation Pause\",} 37.0\njvm_gc_pause_seconds_sum{action=\"end of minor GC\",cause=\"G1 Evacuation Pause\",} 0.156\n# HELP jvm_gc_pause_seconds_max Time spent in GC pause\n# TYPE jvm_gc_pause_seconds_max gauge\njvm_gc_pause_seconds_max{action=\"end of minor GC\",cause=\"Metadata GC Threshold\",} 0.0\njvm_gc_pause_seconds_max{action=\"end of minor GC\",cause=\"G1 Evacuation Pause\",} 0.0\n# HELP rt_p95 Response Time P95\n# TYPE rt_p95 gauge\nrt_p95{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 0.0\n# HELP requests_total Total Requests\n# TYPE requests_total gauge\nrequests_total{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 27738.0\n# HELP process_cpu_usage The \"recent cpu usage\" for the Java Virtual Machine process\n# TYPE process_cpu_usage gauge\nprocess_cpu_usage 8.103727714748784E-4\n# HELP rt_max Max Response Time\n# TYPE rt_max gauge\nrt_max{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 4.0\n# HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool\n# TYPE jvm_gc_max_data_size_bytes gauge\njvm_gc_max_data_size_bytes 9.52107008E8\n# HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads\n# TYPE jvm_threads_live_threads gauge\njvm_threads_live_threads 39.0\n# HELP jvm_threads_daemon_threads The current number of live daemon threads\n# TYPE jvm_threads_daemon_threads gauge\njvm_threads_daemon_threads 36.0\n# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution\n# TYPE jvm_classes_unloaded_classes_total counter\njvm_classes_unloaded_classes_total 0.0\n# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use\n# TYPE jvm_memory_committed_bytes gauge\njvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'profiled nmethods'\",} 1.4680064E7\njvm_memory_committed_bytes{area=\"heap\",id=\"G1 Survivor Space\",} 1048576.0\njvm_memory_committed_bytes{area=\"heap\",id=\"G1 Old Gen\",} 5.24288E7\njvm_memory_committed_bytes{area=\"nonheap\",id=\"Metaspace\",} 4.1623552E7\njvm_memory_committed_bytes{area=\"heap\",id=\"G1 Eden Space\",} 9.0177536E7\njvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'non-nmethods'\",} 2555904.0\njvm_memory_committed_bytes{area=\"nonheap\",id=\"Compressed Class Space\",} 5111808.0\njvm_memory_committed_bytes{area=\"nonheap\",id=\"CodeHeap 'non-profiled nmethods'\",} 5701632.0\n# HELP requests_succeed Succeed Requests\n# TYPE requests_succeed gauge\nrequests_succeed{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 27738.0\n# HELP rt_avg Average Response Time\n# TYPE rt_avg gauge\nrt_avg{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Telnet Handler in Java\nDESCRIPTION: Example implementation of a custom TelnetHandler interface showing the required structure and annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.telnet.TelnetHandler;\n \n@Help(parameter=\"...\", summary=\"...\", detail=\"...\")\n \npublic class XxxTelnetHandler implements TelnetHandler {\n    public String telnet(Channel channel, String message) throws RemotingException {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST-style Dubbo Service Interface with Spring Annotations\nDESCRIPTION: Demonstrates how to define a Dubbo service interface using Spring Web annotations to support both Triple binary and REST protocols. The interface exposes a GET endpoint at /triple/demo/hello that accepts a name parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(\"/triple/demo\")\npublic interface DemoService {\n\n    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n    String sayHello(@RequestParam(\"name\") String name);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Application-Level Service Discovery in Zookeeper\nDESCRIPTION: This snippet demonstrates how to query service information using the application name through the Zookeeper command line with the path `/services/${applicationName}`. The result shows the service instance IP and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 7] ls /services/first-dubbo-provider\n[30.221.144.195:20880]\n```\n\n----------------------------------------\n\nTITLE: Alternative Asynchronous Call Pattern with RpcContext in Dubbo\nDESCRIPTION: Another approach to making asynchronous calls in Dubbo using RpcContext.asyncCall(). This method provides a lambda-based approach to asynchronous service invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future = RpcContext.getServiceContext().asyncCall(  \n    () -> {  \n        asyncService.sayHello(\"oneway call request1\");  \n    }  \n);  \n\nfuture.get();  \n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Telnet Handler in Java\nDESCRIPTION: Example implementation of a custom TelnetHandler interface showing the required structure and annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.telnet.TelnetHandler;\n \n@Help(parameter=\"...\", summary=\"...\", detail=\"...\")\n \npublic class XxxTelnetHandler implements TelnetHandler {\n    public String telnet(Channel channel, String message) throws RemotingException {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Application Properties\nDESCRIPTION: This properties file configures the Spring Boot application and Dubbo consumer settings. It specifies the application name, server ports, service version, and Dubbo-specific configuration properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# Spring boot application\nspring.application.name=dubbo-consumer-demo\nserver.port=8080\nmanagement.port=8081\n\n# Service Version\ndemo.service.version=1.0.0\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id=dubbo-consumer-demo\ndubbo.application.name=dubbo-consumer-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id=dubbo\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n```\n\n----------------------------------------\n\nTITLE: Defining REST Service with JAX-RS Annotations in Dubbo\nDESCRIPTION: Example of defining a REST-style service interface using JAX-RS annotations in Dubbo. This is an alternative to Spring MVC annotations for creating REST-style services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/demo\")\npublic interface DemoService {\n    @GET\n\t@Path(\"/hello\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Service Provider in XML\nDESCRIPTION: XML configuration for the callback service provider, specifying the interface, implementation, and callback method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"callbackService\" class=\"com.callback.impl.CallbackServiceImpl\" />\n<dubbo:service interface=\"com.callback.CallbackService\" ref=\"callbackService\" connections=\"1\" callbacks=\"1000\">\n    <dubbo:method name=\"addListener\">\n        <dubbo:argument index=\"1\" callback=\"true\" />\n        <!-- You can also specify by type -->\n        <!--<dubbo:argument type=\"com.demo.CallbackListener\" callback=\"true\" />-->\n    </dubbo:method>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Without URL Simplification\nDESCRIPTION: XML configuration for a Dubbo provider without URL simplification, including application, registry, and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"simplified-registry-nosimple-provider\"/>\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl\"/>\n<dubbo:service async=\"true\" interface=\"org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService\"\n               version=\"1.2.3\" group=\"dubbo-simple\" ref=\"demoService\"\n               executes=\"4500\" retries=\"7\" owner=\"vict\" timeout=\"5300\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Method-Level Caching in Dubbo with XML\nDESCRIPTION: XML configuration for enabling LRU caching on a specific method of a server-side Dubbo service. This applies caching only to the specified method of the service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n<dubbo:service interface=\"com.foo.DemoService\" ref=\"demoService\" cache=\"lru\" />\n    <dubbo:method name=\"sayHello\" cache=\"lru\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializationOptimizer for Class Registration\nDESCRIPTION: Java implementation of the SerializationOptimizer interface to register classes that will be serialized, which can significantly improve serialization performance, especially for small nested objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SerializationOptimizerImpl implements SerializationOptimizer {\n\n    public Collection<Class> getSerializableClasses() {\n        List<Class> classes = new LinkedList<Class>();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        return classes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in Properties Format\nDESCRIPTION: Properties file configuration for setting up Zookeeper as a registration center in Dubbo. This specifies the Zookeeper address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.registry.address=zookeeper://localhost:2181\n```\n\n----------------------------------------\n\nTITLE: Consumer SPI Configuration for Custom Protocol\nDESCRIPTION: SPI configuration file for registering the custom edubbo protocol in the consumer, mapping it to the EnhancedProtocol implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nedubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol\n```\n\n----------------------------------------\n\nTITLE: Debugging Dubbo Port Conflict Error Stack Trace\nDESCRIPTION: Example error stack trace showing a port conflict where Dubbo fails to bind to port 20880 because it's already in use. The trace includes the full exception chain from DubboBootstrap down to the native socket binding failure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n[27/02/23 02:52:00:000 CST] main ERROR deploy.DefaultApplicationDeployer:  [DUBBO] Dubbo Application[1.1](first-dubbo-provider) start failure, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195, error code: 5-14. This may be caused by , go to https://dubbo.apache.org/faq/5/14 to find instructions. \norg.apache.dubbo.rpc.RpcException: Fail to start server(url: dubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&bind.ip=30.221.144.195&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dubbo.tag=dev&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&heartbeat=60000&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=63841&prefer.serialization=fastjson2,hessian2&qos.port=22223&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider&timestamp=1677480719543) Failed to bind NettyServer on /0.0.0.0:20880, cause: Address already in use\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.createServer(DubboProtocol.java:385)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.openServer(DubboProtocol.java:350)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.export(DubboProtocol.java:331)\nat org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)\nat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:80)\nat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:66)\nat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:61)\nat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:47)\nat org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)\nat org.apache.dubbo.registry.integration.RegistryProtocol.lambda$doLocalExport$3(RegistryProtocol.java:305)\nat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)\nat org.apache.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:303)\nat org.apache.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:249)\nat org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)\nat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:80)\nat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:64)\nat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:58)\nat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:47)\nat org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)\nat org.apache.dubbo.config.ServiceConfig.doExportUrl(ServiceConfig.java:739)\nat org.apache.dubbo.config.ServiceConfig.exportRemote(ServiceConfig.java:717)\nat org.apache.dubbo.config.ServiceConfig.exportUrl(ServiceConfig.java:658)\nat org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:451)\nat org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:433)\nat org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:395)\nat org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:247)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServiceInternal(DefaultModuleDeployer.java:350)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServices(DefaultModuleDeployer.java:322)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.startSync(DefaultModuleDeployer.java:158)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.start(DefaultModuleDeployer.java:139)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.startModules(DefaultApplicationDeployer.java:681)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.doStart(DefaultApplicationDeployer.java:645)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.start(DefaultApplicationDeployer.java:618)\nat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:226)\nat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:215)\nat org.apache.dubbo.samples.provider.Application.main(Application.java:52)\nCaused by: org.apache.dubbo.remoting.RemotingException: Failed to bind NettyServer on /0.0.0.0:20880, cause: Address already in use\nat org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:75)\nat org.apache.dubbo.remoting.transport.netty4.NettyServer.<init>(NettyServer.java:85)\nat org.apache.dubbo.remoting.transport.netty4.NettyTransporter.bind(NettyTransporter.java:35)\nat org.apache.dubbo.remoting.Transporter$Adaptive.bind(Transporter$Adaptive.java)\nat org.apache.dubbo.remoting.Transporters.bind(Transporters.java:55)\nat org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger.bind(HeaderExchanger.java:52)\nat org.apache.dubbo.remoting.exchange.Exchangers.bind(Exchangers.java:69)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.createServer(DubboProtocol.java:383)\n... 35 more\nCaused by: java.net.BindException: Address already in use\nat sun.nio.ch.Net.bind0(Native Method)\nat sun.nio.ch.Net.bind(Net.java:444)\nat sun.nio.ch.Net.bind(Net.java:436)\nat sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:225)\nat io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:141)\nat io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1334)\nat io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:600)\nat io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:579)\nat io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:973)\nat io.netty.channel.AbstractChannel.bind(AbstractChannel.java:260)\nat io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:356)\nat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\nat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\nat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Thread.java:748)\n```\n\n----------------------------------------\n\nTITLE: Configuring SerializationOptimizer in XML\nDESCRIPTION: XML configuration to register the SerializationOptimizer implementation for Kryo serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\" optimizer=\"org.apache.dubbo.demo.SerializationOptimizerImpl\"/>\n```\n\n----------------------------------------\n\nTITLE: Direct Redis Service Connection Configuration\nDESCRIPTION: Shows point-to-point direct connection configuration to Redis service using specific URL in Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Bookinfo Example Links\nDESCRIPTION: This code snippet defines the HTML structure for displaying links to Traffic Management and Security sections of the Bookinfo example. It uses Bootstrap classes for styling and layout.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/_index.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./traffic/\" >}}'>Traffic Management</a>\n                </h4>\n                <p>Tasks that demonstrates how to use Istio's traffic routing features.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./security/\" >}}'>Security</a>\n                </h4>\n                <p>Demonstrates how to secure Dubbo proxyless mesh.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Connection Limit Configuration\nDESCRIPTION: Configuration to limit the number of incoming connections for service provider protection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"1000\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Service Provider in XML\nDESCRIPTION: XML configuration for the callback service provider, specifying the interface, implementation, and callback method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"callbackService\" class=\"com.callback.impl.CallbackServiceImpl\" />\n<dubbo:service interface=\"com.callback.CallbackService\" ref=\"callbackService\" connections=\"1\" callbacks=\"1000\">\n    <dubbo:method name=\"addListener\">\n        <dubbo:argument index=\"1\" callback=\"true\" />\n        <!-- You can also specify by type -->\n        <!--<dubbo:argument type=\"com.demo.CallbackListener\" callback=\"true\" />-->\n    </dubbo:method>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Direct Redis Service Connection Configuration\nDESCRIPTION: Shows point-to-point direct connection configuration to Redis service using specific URL in Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Settings in Dubbo using Java API\nDESCRIPTION: This snippet demonstrates how to configure method-level settings for a Dubbo service reference. It shows how to set specific timeout and retry parameters for individual methods of the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/api.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// 方法级配置\nList<MethodConfig> methods = new ArrayList<MethodConfig>();\nMethodConfig method = new MethodConfig();\nmethod.setName(\"createXxx\");\nmethod.setTimeout(10000);\nmethod.setRetries(0);\nmethods.add(method);\n \n// 引用远程服务\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n...\nreference.setMethods(methods); // 设置方法级配置\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client with Zipkin XML Configuration\nDESCRIPTION: XML configuration for setting up a Dubbo client with Zipkin tracing integration. Includes application definition, registry configuration, service reference, and Zipkin-specific beans setup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 1. Define the application name for Dubbo client -->\n<dubbo:application name=\"dubbo-client\"/>\n\n<!-- 2. Specify the registry address -->\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<!-- 3. Declare the remote proxy for GreetingService and add the tracing filter in Dubbo's filter chain -->\n<dubbo:reference id=\"greetingService\" check=\"false\" interface=\"com.alibaba.dubbo.samples.api.GreetingService\" filter=\"tracing\"/>\n\n<!-- 4. Zipkin related configuration -->\n<bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n    <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n</bean>\n\n<bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n    <property name=\"localServiceName\" value=\"client\"/>\n    <property name=\"spanReporter\">\n        <bean class=\"zipkin2.reporter.beans.AsyncReporterFactoryBean\">\n            <property name=\"sender\" ref=\"sender\"/>\n            <!-- wait up to half a second for any in-flight spans on close -->\n            <property name=\"closeTimeout\" value=\"500\"/>\n        </bean>\n    </property>\n    <property name=\"currentTraceContext\">\n        <bean class=\"brave.spring.beans.CurrentTraceContextFactoryBean\">\n            <property name=\"scopeDecorators\">\n                <bean class=\"brave.context.slf4j.MDCScopeDecorator\" factory-method=\"create\"/>\n            </property>\n        </bean>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Java interface definition for the Dubbo service provider with basic remote methods including sayHello, echo, test, and getUserInfo\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoProvider {\n    String sayHello(String name);\n    String echo() ;\n    void test();\n    UserResponse getUserInfo(UserRequest request);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Consumer with Skywalking Agent\nDESCRIPTION: Command to start a Dubbo consumer application with the Skywalking agent attached. The agent collects tracing data from the consumer side and sends it to the Skywalking OAP server for end-to-end tracing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/skywalking.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njava -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar dubbo-samples-spring-boot-tracing-skwalking-consumer-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Mock in XML\nDESCRIPTION: Example of configuring mock behavior for a specific method of a service interface using XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" check=\"false\" interface=\"com.foo.BarService\">\n    <dubbo:parameter key=\"sayHello.mock\" value=\"force:return fake\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client for Proxyless Mesh\nDESCRIPTION: Client configuration properties that register the Istio address as the registration center using the xDS protocol and enables QoS for Kubernetes health checks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=dubbo-samples-xds-consumer\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=xds://istiod.istio-system.svc:15012\ndubbo.application.qosAcceptForeignIp=true\n```\n\n----------------------------------------\n\nTITLE: Calling Streaming RPC Methods in Dubbo (Java)\nDESCRIPTION: This snippet demonstrates how to call both server-side and bidirectional streaming methods in Dubbo. It shows the usage of StreamObserver for handling responses and sending requests in a streaming manner.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\ndelegate.sayHelloServerStream(\"server stream\", new StreamObserver<String>() {\n    @Override\n    public void onNext(String data) {\n        System.out.println(data);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        throwable.printStackTrace();\n    }\n\n    @Override\n    public void onCompleted() {\n        System.out.println(\"onCompleted\");\n    }\n});\n\n\nStreamObserver<String> request = delegate.sayHelloStream(new StreamObserver<String>() {\n    @Override\n    public void onNext(String data) {\n        System.out.println(data);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        throwable.printStackTrace();\n    }\n\n    @Override\n    public void onCompleted() {\n        System.out.println(\"onCompleted\");\n    }\n});\nfor (int i = 0; i < n; i++) {\n    request.onNext(\"stream request\" + i);\n}\nrequest.onCompleted();\n```\n\n----------------------------------------\n\nTITLE: Spring XML Configuration for Dubbo-Nacos Registry\nDESCRIPTION: XML configuration example showing how to configure Dubbo with Nacos registry in a Spring XML context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n \n    <!-- Provider application information for dependency calculation-->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"  />\n \n    <!-- Using the Nacos registry  -->\n    <dubbo:registry address=\"nacos://10.20.153.10:8848\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Stub in Java\nDESCRIPTION: Java implementation of a local stub class that demonstrates client-side logic execution, including parameter validation, local caching, and fault tolerance handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-stub.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class BarServiceStub implements BarService {\n    private final BarService barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public BarServiceStub(BarService barService){\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Creates a simple HelloService interface that defines a sayHello method for the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.skywalking.demo.interfaces;\n\npublic interface HelloService {\n\tString sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Sticky Connection in Dubbo XML\nDESCRIPTION: This XML snippet shows how to configure a sticky connection for a specific method within a service reference in Dubbo. It uses a nested 'dubbo:method' element with the 'sticky' attribute set to 'true'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/stickiness.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"sayHello\" sticky=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: HTML Card Layout for Documentation Navigation\nDESCRIPTION: HTML structure defining a card-based navigation layout with sections for Traffic Management and Security documentation. Each card contains a title and description of the respective section.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./traffic/\" >}}'>Traffic Management</a>\n                </h4>\n                <p>Tasks that demonstrate how to use Istio's traffic routing features.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./security/\" >}}'>Security</a>\n                </h4>\n                <p>Demonstrates how to secure Dubbo proxyless mesh.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exceptions in Java Service Implementation\nDESCRIPTION: This snippet demonstrates how to handle and throw custom exceptions in a service implementation. The code attempts to perform some operations and then throws a custom exception when caught.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void deal() {\n  try{\n   //doSomething   \n   ...\n  } catch(IGreeterException e) {\n      ...\n      throw e;\n  }   \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Routing with ConditionRouter in Java\nDESCRIPTION: This method routes service invokers based on configured conditions. It first checks if the consumer matches the 'when' condition, then filters invokers that match the 'then' condition. The method handles empty results based on the 'force' parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/router.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n    if (invokers == null || invokers.isEmpty()) {\n        return invokers;\n    }\n    try {\n        // 先对服务消费者条件进行匹配，如果匹配失败，表明服务消费者 url 不符合匹配规则，\n        // 无需进行后续匹配，直接返回 Invoker 列表即可。比如下面的规则：\n        //     host = 10.20.153.10 => host = 10.0.0.10\n        // 这条路由规则希望 IP 为 10.20.153.10 的服务消费者调用 IP 为 10.0.0.10 机器上的服务。\n        // 当消费者 ip 为 10.20.153.11 时，matchWhen 返回 false，表明当前这条路由规则不适用于\n        // 当前的服务消费者，此时无需再进行后续匹配，直接返回即可。\n        if (!matchWhen(url, invocation)) {\n            return invokers;\n        }\n        List<Invoker<T>> result = new ArrayList<Invoker<T>>();\n        // 服务提供者匹配条件未配置，表明对指定的服务消费者禁用服务，也就是服务消费者在黑名单中\n        if (thenCondition == null) {\n            logger.warn(\"The current consumer in the service blacklist...\");\n            return result;\n        }\n        // 这里可以简单的把 Invoker 理解为服务提供者，现在使用服务提供者匹配规则对 \n        // Invoker 列表进行匹配\n        for (Invoker<T> invoker : invokers) {\n            // 若匹配成功，表明当前 Invoker 符合服务提供者匹配规则。\n            // 此时将 Invoker 添加到 result 列表中\n            if (matchThen(invoker.getUrl(), url)) {\n                result.add(invoker);\n            }\n        }\n        \n        // 返回匹配结果，如果 result 为空列表，且 force = true，表示强制返回空列表，\n        // 否则路由结果为空的路由规则将自动失效\n        if (!result.isEmpty()) {\n            return result;\n        } else if (force) {\n            logger.warn(\"The route result is empty and force execute ...\");\n            return result;\n        }\n    } catch (Throwable t) {\n        logger.error(\"Failed to execute condition router rule: ...\");\n    }\n    \n    // 原样返回，此时 force = false，表示该条路由规则失效\n    return invokers;\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Frontmatter Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration for a documentation page that defines aliases, description, title and other metadata properties for the Dubbo-Go-Pixiu developer guide.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/overview/mannual/dubbo-go-pixiu/dev/\n    - /en/overview/reference/pixiu/dev/\ndescription: Developer Guide\nlinkTitle: Developer Guide\ntitle: Developer Guide\ntype: docs\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Annotating Dubbo Consumer Service Reference in Java\nDESCRIPTION: Example of using the @Reference annotation to inject a remote Dubbo service into a consumer class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class AnnotationConsumeService {\n\n    @com.alibaba.dubbo.config.annotation.Reference\n    public AnnotateService annotateService;\n\n    // ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing User-Based Routing Configuration in Istio\nDESCRIPTION: This command displays the YAML configuration of the virtual service for the reviews microservice, showing the user-based routing rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservice reviews -o yaml\n```\n\n----------------------------------------\n\nTITLE: CategorySet Interface with Metrics Category Definitions\nDESCRIPTION: Definition of the CategorySet interface which contains constants representing different categories of metrics. Each category is implemented as a CategoryOverall instance that groups related metrics for processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// CategorySet:常量接口，同样位于RegistryMetricsEventMulticaster中\ninterface CategorySet {\n    //...\n   \n        CategoryOverall APPLICATION_NOTIFY = new CategoryOverall(OP_TYPE_NOTIFY, MCat.APPLICATION_NOTIFY_POST, MCat.APPLICATION_NOTIFY_FINISH, null);\n    \n        CategoryOverall SERVICE_DIRECTORY = new CategoryOverall(OP_TYPE_DIRECTORY, MCat.APPLICATION_DIRECTORY_POST, null, null);\n    \n        CategoryOverall SERVICE_REGISTER = new CategoryOverall(OP_TYPE_REGISTER_SERVICE, MCat.SERVICE_REGISTER_POST, MCat.SERVICE_REGISTER_FINISH, MCat.SERVICE_REGISTER_ERROR);\n\n   //...\n        List<CategoryOverall> ALL = Arrays.asList(APPLICATION_REGISTER, APPLICATION_SUBSCRIBE, APPLICATION_NOTIFY, SERVICE_DIRECTORY, SERVICE_REGISTER, SERVICE_SUBSCRIBE);\n    }\n```\n\n----------------------------------------\n\nTITLE: Parameter-based Conditional Routing in YAML\nDESCRIPTION: Routes requests based on method name and argument values to specific ports\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconditions:\n  - method=getDetail&arguments[0]=dubbo => port=20880\n```\n\n----------------------------------------\n\nTITLE: Defining OrderService Interface in Java\nDESCRIPTION: Interface for the Order service responsible for creating orders. This defines the contract for order creation functionality based on user ID, commodity code, and quantity.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface OrderService {\n\n    /**\n     * create order\n     */\n    Order create(String userId, String commodityCode, int orderCount);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing All Dubbo Components with Helm (Method 2)\nDESCRIPTION: Installs all Dubbo components at once using a single Helm command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin-all dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Configuring MetadataReportFactory SPI in Properties File\nDESCRIPTION: Adds the Redis implementation of MetadataReportFactory to the SPI configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nredis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-Go Server with Error Handling\nDESCRIPTION: This Go code implements the GreetService server, which returns an error for invalid requests. It demonstrates how to set up a Dubbo-Go server and register the service handler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/pkg/errors\"\n\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n\t\"dubbo.apache.org/dubbo-go/v3/server\"\n\tgreet \"github.com/apache/dubbo-go-samples/helloworld/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tname := req.Name\n\tif name != \"right name\" {\n\t\terrInfo := fmt.Sprintf(\"name is not right: %s\", name)\n\t\tlogger.Error(errInfo)\n\t\treturn nil, errors.New(errInfo)\n\t}\n\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err = greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err = srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Based Routing in Istio\nDESCRIPTION: YAML configuration for an Istio VirtualService that routes traffic based on user identity. This example routes requests from user 'jason' to v2 of the reviews service while sending all other traffic to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Plugin for Protobuf Generation\nDESCRIPTION: Maven plugin configuration for generating Protobuf code using dubbo-maven-plugin. Supports Dubbo version 3.3.0 and above.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-maven-plugin</artifactId>\n    <version>${dubbo.version}</version>\n    <configuration>\n        <outputDir>build/generated/source/proto/main/java</outputDir>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Adding Kryo Dependencies in Maven POM\nDESCRIPTION: This XML snippet shows how to add the necessary dependencies for using Kryo serialization in a Maven project. It includes the Dubbo Kryo serialization extension, Kryo library, and Kryo serializers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-kryo</artifactId>\n      <version>1.0.1</version>\n    </dependency>\n    <dependency>\n        <groupId>com.esotericsoftware</groupId>\n        <artifactId>kryo</artifactId>\n        <version>5.4.0</version>\n    </dependency>\n    <dependency>\n        <groupId>de.javakaffee</groupId>\n        <artifactId>kryo-serializers</artifactId>\n        <version>0.45</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Hessian Ports\nDESCRIPTION: XML configuration for multiple Hessian protocol instances with different ports\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"hessian1\" name=\"hessian\" port=\"8080\" />\n<dubbo:protocol id=\"hessian2\" name=\"hessian\" port=\"8081\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Responses with HttpResultPayloadException\nDESCRIPTION: Shows how to create custom HTTP responses by throwing an HttpResultPayloadException, which is an efficient way to customize HTTP output without affecting performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nthrow new HttpResult.found(\"https://a.com\").toPayload();\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 for Dubbo Provider\nDESCRIPTION: XML configuration to enable Netty4 on the provider side in Dubbo. This can be done either through the protocol or provider configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/netty4.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol server=\"netty4\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider server=\"netty4\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf IDL for Triple Protocol\nDESCRIPTION: Protobuf IDL definition for hello world service with request and response message types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/tri.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\noption java_package = \"org.apache.dubbo.hello\";\noption java_outer_classname = \"HelloWorldProto\";\noption objc_class_prefix = \"HLW\";\n\npackage helloworld;\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: 配置脚本路由规则\nDESCRIPTION: 使用 JavaScript 脚本定义自定义路由逻辑，根据提供方实例的主机地址筛选有效的地址集合，实现更灵活的路由控制。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nkey: demo-provider\ntype: javascript\nenabled: true\nscript: |\n  (function route(invokers,invocation,context) {\n      var result = new java.util.ArrayList(invokers.size());\n      for (i = 0; i < invokers.size(); i ++) {\n          if (\"10.20.3.3\".equals(invokers.get(i).getUrl().getHost())) {\n              result.add(invokers.get(i));\n          }\n      }\n      return result;\n  } (invokers, invocation, context)); // 表示立即执行方法\n```\n\n----------------------------------------\n\nTITLE: Implementing HelloService with Default Protocol Thread Pool\nDESCRIPTION: This snippet demonstrates a HelloService implementation that uses the default protocol thread pool by not specifying an executor. It's annotated with @DubboService and configured with version \"3.0.0\" and group \"Group3\".\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// not set executor for this service, the default executor built using threadpool parameter of the protocolConfig\n@DubboService(version = \"3.0.0\", group = \"Group3\")\npublic class HelloServiceImplV2 implements HelloService {\n    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV2.class);\n\n    @Override\n    public String sayHello(String name) {\n        return \"server hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with XML\nDESCRIPTION: XML configuration file for a Dubbo service provider, defining the application, registry, protocol, and service exposure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- Provider application info for dependency calculation -->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"/>\n\n    <!-- Use Nacos registry -->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- Expose services with dubbo protocol on random ports -->\n    <dubbo:protocol name=\"dubbo\" port=\"-1\"/>\n\n    <!-- Declare services that need to be exposed -->\n    <dubbo:service interface=\"com.alibaba.dubbo.demo.service.DemoService\" ref=\"demoService\" version=\"2.0.0\"/>\n\n    <!-- Implement service like local bean -->\n    <bean id=\"demoService\" class=\"com.alibaba.dubbo.demo.service.DefaultService\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j Container in Dubbo Properties\nDESCRIPTION: Sets Log4j container properties including log file path, log level, and subdirectory for multi-process logging.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.log4j.file=/foo/bar.log\ndubbo.log4j.level=WARN\ndubbo.log4j.subdirectory=20880\n```\n\n----------------------------------------\n\nTITLE: Starting Metadata Center in Dubbo's DefaultApplicationDeployer\nDESCRIPTION: The startMetadataCenter method initializes metadata center by using registry configuration if necessary, validating metadata configs, and initializing the metadata report instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate void startMetadataCenter() {\n\t\t//如果未配置元数据中心的地址等配置则使用注册中心的地址等配置做为元数据中心的配置\n        useRegistryAsMetadataCenterIfNecessary();\n\t\t//获取应用的配置信息\n        ApplicationConfig applicationConfig = getApplication();\n\t\t//元数据配置类型 元数据类型， local 或 remote,，如果选择远程，则需要进一步指定元数据中心\n        String metadataType = applicationConfig.getMetadataType();\n        // FIXME, multiple metadata config support.\n        //查询元数据中心的地址等配置\n        Collection<MetadataReportConfig> metadataReportConfigs = configManager.getMetadataConfigs();\n        \n        if (CollectionUtils.isEmpty(metadataReportConfigs)) {\n        //这个就是判断 如果选择远程，则需要进一步指定元数据中心 否则就抛出来异常\n            if (REMOTE_METADATA_STORAGE_TYPE.equals(metadataType)) {\n                throw new IllegalStateException(\"No MetadataConfig found, Metadata Center address is required when 'metadata=remote' is enabled.\");\n            }\n            return;\n        }\n\t\t//MetadataReport实例的存储库对象获取\n        MetadataReportInstance metadataReportInstance = applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);\n        List<MetadataReportConfig> validMetadataReportConfigs = new ArrayList<>(metadataReportConfigs.size());\n        for (MetadataReportConfig metadataReportConfig : metadataReportConfigs) {\n            ConfigValidationUtils.validateMetadataConfig(metadataReportConfig);\n            validMetadataReportConfigs.add(metadataReportConfig);\n        }\n        //初始化元数据\n        metadataReportInstance.init(validMetadataReportConfigs);\n        //MetadataReport实例的存储库对象初始化失败则抛出异常\n        if (!metadataReportInstance.inited()) {\n            throw new IllegalStateException(String.format(\"%s MetadataConfigs found, but none of them is valid.\", metadataReportConfigs.size()));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface for AsyncContext in Dubbo\nDESCRIPTION: Simple interface definition for a service that will be implemented asynchronously using Dubbo's AsyncContext approach instead of CompletableFuture.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {  \n    String sayHello(String name);  \n}  \n```\n\n----------------------------------------\n\nTITLE: Configuring Brave with Zipkin in Dubbo\nDESCRIPTION: Maven dependency for configuring Dubbo Spring Boot with Brave as the tracer and Zipkin as the export destination.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n  <dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-brave-zipkin-starter</artifactId>\n    <version>${version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom QoS Permission Checker in Java\nDESCRIPTION: Example implementation of the PermissionChecker interface for custom access permission verification in Dubbo QoS.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/qos-permission.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx.qos.permission;\n\nimport org.apache.dubbo.qos.permission.PermissionChecker;\n\npublic class XxxAnonymousAccessPermissionChecker implements PermissionChecker {\n\n    @Override\n    public boolean access(CommandContext commandContext, PermissionLevel defaultCmdRequiredPermissionLevel) {\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Dubbo Control Plane in Linux\nDESCRIPTION: Shell commands to download, extract, and install the Dubbo control plane console in a Linux environment. It sets up the necessary environment variables and runs the console in universal mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/console.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/releases/downloadDubbo.sh | sh -\n\ncd dubbo-$version\nexport PATH=$PWD/bin:$PATH\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubbo-cp run --mode universal --config conf/dubbo.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Server in Python\nDESCRIPTION: Complete server implementation including service definition, handler configuration, and server startup logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dubbo\nfrom dubbo.configs import ServiceConfig\nfrom dubbo.proxy.handlers import RpcMethodHandler, RpcServiceHandler\n\nclass UnaryServiceServicer:\n    def say_hello(self, message: bytes) -> bytes:\n        print(f\"Received message from client: {message}\")\n        return b\"Hello from server\"\n\ndef build_service_handler():\n    # build a method handler\n    method_handler = RpcMethodHandler.unary(\n        method=UnaryServiceServicer().say_hello, method_name=\"unary\"\n    )\n    # build a service handler\n    service_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.HelloWorld\",\n        method_handlers=[method_handler],\n    )\n    return service_handler\n\nif __name__ == \"__main__\":\n    # build service config\n    service_handler = build_service_handler()\n    service_config = ServiceConfig(\n        service_handler=service_handler, host=\"127.0.0.1\", port=50051\n    )\n    # start the server\n    server = dubbo.Server(service_config).start()\n\n    input(\"Press Enter to stop the server...\\n\")\n```\n\n----------------------------------------\n\nTITLE: Configuration Processing in Dubbo Service Reference (Java)\nDESCRIPTION: The init method of ReferenceConfig, which handles configuration processing, interface loading, and proxy creation for service reference. It includes steps like configuration validation, loading interface classes, and setting up various parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void init() {\n    // 避免重复初始化\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    // 检测接口名合法性\n    if (interfaceName == null || interfaceName.length() == 0) {\n        throw new IllegalStateException(\"interface not allow null!\");\n    }\n\n    // 检测 consumer 变量是否为空，为空则创建\n    checkDefault();\n    appendProperties(this);\n    if (getGeneric() == null && getConsumer() != null) {\n        // 设置 generic\n        setGeneric(getConsumer().getGeneric());\n    }\n\n    // 检测是否为泛化接口\n    if (ProtocolUtils.isGeneric(getGeneric())) {\n        interfaceClass = GenericService.class;\n    } else {\n        try {\n            // 加载类\n            interfaceClass = Class.forName(interfaceName, true, Thread.currentThread()\n                    .getContextClassLoader());\n        } catch (ClassNotFoundException e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n        checkInterfaceAndMethods(interfaceClass, methods);\n    }\n    \n    // ... (additional configuration processing)\n\n    // 创建代理类\n    ref = createProxy(map);\n\n    // 根据服务名，ReferenceConfig，代理类构建 ConsumerModel，\n    // 并将 ConsumerModel 存入到 ApplicationModel 中\n    ConsumerModel consumerModel = new ConsumerModel(getUniqueServiceName(), this, ref, interfaceClass.getMethods());\n    ApplicationModel.initConsumerModel(getUniqueServiceName(), consumerModel);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Service with AsyncContext in Dubbo\nDESCRIPTION: Implementation of AsyncService using Dubbo's AsyncContext to execute business logic asynchronously without requiring CompletableFuture in the interface. This uses RpcContext.startAsync() to switch execution to a separate thread.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {  \n    public String sayHello(String name) {  \n        final AsyncContext asyncContext = RpcContext.startAsync();  \n        new Thread(() -> {  \n            // If you want to use the context, it must be executed on the first line  \n            asyncContext.signalContextSwitch();  \n            try {  \n                Thread.sleep(500);  \n            } catch (InterruptedException e) {  \n                e.printStackTrace();  \n            }  \n            // Write back the response  \n            asyncContext.write(\"Hello \" + name + \", response from provider.\");  \n        }).start();  \n        return null;  \n    }  \n}  \n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Service in Dubbo Server\nDESCRIPTION: Service implementation class that manages registered callback listeners in a ConcurrentHashMap and periodically triggers notifications to clients via the callback interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback.impl;\n \nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n \nimport com.callback.CallbackListener;\nimport com.callback.CallbackService;\n \npublic class CallbackServiceImpl implements CallbackService {\n     \n    private final Map<String, CallbackListener> listeners = new ConcurrentHashMap<String, CallbackListener>();\n  \n    public CallbackServiceImpl() {\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                while(true) {\n                    try {\n                        for(Map.Entry<String, CallbackListener> entry : listeners.entrySet()){\n                           try {\n                               entry.getValue().changed(getChanged(entry.getKey()));\n                           } catch (Throwable t) {\n                               listeners.remove(entry.getKey());\n                           }\n                        }\n                        Thread.sleep(5000); // 定时触发变更通知\n                    } catch (Throwable t) { // 防御容错\n                        t.printStackTrace();\n                    }\n                }\n            }\n        });\n        t.setDaemon(true);\n        t.start();\n    }\n  \n    public void addListener(String key, CallbackListener listener) {\n        listeners.put(key, listener);\n        listener.changed(getChanged(key)); // 发送变更通知\n    }\n     \n    private String getChanged(String key) {\n        return \"Changed: \" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Generated Code Files\nDESCRIPTION: Shell command to create a directory structure for storing the TypeScript code that will be generated from the Protocol Buffer definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p src/util/gen\n```\n\n----------------------------------------\n\nTITLE: Exporting Generic Services in Dubbo Provider\nDESCRIPTION: This example shows how to programmatically export generic services on the provider side. It configures and exports multiple services that share the same GenericService implementation but expose different interfaces.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"api-generic-provider\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://127.0.0.1:2181\");\n\napplication.setRegistry(registry);\n\nGenericService genericService = new GenericServiceImpl();\n\nServiceConfig<GenericService> service = new ServiceConfig<GenericService>();\nservice.setApplication(application);\nservice.setInterface(\"com.alibaba.dubbo.samples.generic.api.HelloService\");\nservice.setRef(genericService);\nservice.export();\n\nServiceConfig<GenericService> service2 = new ServiceConfig<GenericService>();\nservice2.setApplication(application);\nservice2.setInterface(\"com.alibaba.dubbo.samples.generic.api.HiService\");\nservice2.setRef(genericService);\nservice2.export();\n```\n\n----------------------------------------\n\nTITLE: Event Handler Implementation in Metrics Collector\nDESCRIPTION: Implementation of event handlers for processing metrics events including finish and error events. Each handler increments counters and calculates response times.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static AbstractMetricsListener onFinishEventBuild(MetricsKey metricsKey, MetricsPlaceType placeType, CombMetricsCollector<TimeCounterEvent> collector) {\n    return AbstractMetricsListener.onFinish(metricsKey,\n        event -> {\n            collector.increment(event.appName(), metricsKey);\n            collector.addRt(event.appName(), placeType.getType(), event.getTimePair().calc());\n        }\n    );\n}\n\npublic static AbstractMetricsListener onErrorEventBuild(MetricsKey metricsKey, MetricsPlaceType placeType, CombMetricsCollector<TimeCounterEvent> collector) {\n    return AbstractMetricsListener.onError(metricsKey,\n        event -> {\n            collector.increment(event.appName(), metricsKey);\n            collector.addRt(event.appName(), placeType.getType(), event.getTimePair().calc());\n        }\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Properties Configuration\nDESCRIPTION: Example of Dubbo configuration using properties file format, showing how to configure application name, registry address, and protocol settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\n# application name\ndubbo.application.name=dubbodemo-provider\n# registry center address\ndubbo.registry.address=zookeeper://localhost:2181\n# Example of broadcasting registry center\n#dubbo.registry.address=multicast://224.5.6.7:1234\n# address for calling protocol\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=28080\n```\n\n----------------------------------------\n\nTITLE: Accessing serializeCheckStatus via Telnet in Dubbo\nDESCRIPTION: This snippet demonstrates how to use the telnet command to access the 'serializeCheckStatus' QoS command in Dubbo. It shows the connection process and the expected output format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>serializeCheckStatus\nCheckStatus: WARN\n\nCheckSerializable: true\n\nAllowedPrefix:\n...\n\nDisAllowedPrefix:\n...\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Consumer Bootstrap with Annotations\nDESCRIPTION: Java class that bootstraps a Dubbo service consumer using annotation-driven configuration with @EnableDubbo, @Reference, and @PostConstruct.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.consumer;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.PropertySource;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\n\n/**\n * {@link DemoService} consumer demo\n */\n@EnableDubbo\n@PropertySource(value = \"classpath:/consumer-config.properties\")\npublic class DemoServiceConsumerBootstrap {\n\n    @Reference(version = \"${demo.service.version}\")\n    private DemoService demoService;\n\n    @PostConstruct\n    public void init() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(demoService.sayName(\"Little Horse Brother (mercyblitz)\"));\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(DemoServiceConsumerBootstrap.class);\n        context.refresh();\n        context.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in YAML for Spring Boot\nDESCRIPTION: YAML configuration to enable Nacos as a registry in a Spring Boot application. Specifies the Nacos server address to connect to.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo\n registry\n   address: nacos://localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider using Java API\nDESCRIPTION: This snippet demonstrates how to configure and export a Dubbo service provider using Java API. It sets up the application, registry, protocol, and service configurations before exporting the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ProviderConfig;\nimport org.apache.dubbo.config.ServiceConfig;\nimport com.xxx.DemoService;\nimport com.xxx.DemoServiceImpl;\n\npublic class DemoProvider {\n    public static void main(String[] args) {\n        // 服务实现\n        DemoService demoService = new DemoServiceImpl();\n\n        // 当前应用配置\n        ApplicationConfig application = new ApplicationConfig();\n        application.setName(\"demo-provider\");\n\n        // 连接注册中心配置\n        RegistryConfig registry = new RegistryConfig();\n        registry.setAddress(\"zookeeper://10.20.130.230:2181\");\n\n        // 服务提供者协议配置\n        ProtocolConfig protocol = new ProtocolConfig();\n        protocol.setName(\"dubbo\");\n        protocol.setPort(12345);\n        protocol.setThreads(200);\n\n        // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口\n        // 服务提供者暴露服务配置\n        ServiceConfig<DemoService> service = new ServiceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏\n        service.setApplication(application);\n        service.setRegistry(registry); // 多个注册中心可以用setRegistries()\n        service.setProtocol(protocol); // 多个协议可以用setProtocols()\n        service.setInterface(DemoService.class);\n        service.setRef(demoService);\n        service.setVersion(\"1.0.0\");\n\n        // 暴露及注册服务\n        service.export();\n        \n        // 挂起等待(防止进程退出）\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Parameters in Spring Boot Properties\nDESCRIPTION: Shows how to configure QOS parameters in a Spring Boot application using application.properties or application.yml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_5\n\nLANGUAGE: Properties\nCODE:\n```\ndubbo.application.qosEnable=true\ndubbo.application.qosPort=33333\ndubbo.application.qosAcceptForeignIp=false\n```\n\n----------------------------------------\n\nTITLE: QOS XML Configuration\nDESCRIPTION: XML-based configuration for Dubbo QOS settings within Spring application context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/overview.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"demo-provider\">\n    <dubbo:parameter key=\"qos-enable\" value=\"true\"/>\n    <dubbo:parameter key=\"qos-accept-foreign-ip\" value=\"false\"/>\n    <dubbo:parameter key=\"qos-accept-foreign-ip-whitelist\" value=\"123.12.10.13,132.12.10.13/24\"/>\n    <dubbo:parameter key=\"qos-anonymous-access-permission-level\" value=\"NONE\"/>\n    <dubbo:parameter key=\"qos-port\" value=\"33333\"/>\n  </dubbo:application>\n  <dubbo:registry address=\"multicast://224.5.6.7:1234\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n  <dubbo:service interface=\"org.apache.dubbo.demo.provider.DemoService\" ref=\"demoService\"/>\n  <bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Connections in Dubbo XML\nDESCRIPTION: Enables sticky connections for stateful services, ensuring clients always invoke the same provider unless that provider is down. This automatically enables lazy connect to reduce long connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\" sticky=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Multiple Servers in Dubbo\nDESCRIPTION: Configures a Redis registry with multiple servers for high availability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Organizing Router Chain Configuration in Nacos for Dubbo\nDESCRIPTION: Example of how multiple VirtualService and DestinationRule configurations are organized in Nacos to form a complete router chain. Each router is formed by combining a VirtualService with one or more DestinationRules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/_index.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nDataId: Demo.rule.yaml\nGROUP: HSF\n\ncontent:\n\nVirtualService A\n---\nDestinationRule A1\n---\nDestinationRule A2 \n---\nVirtualService B\n---\nDestinationRule B\n---\nVirtualService C\n---\nDestinationRule C\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Timeout in YAML\nDESCRIPTION: Configures a global default timeout of 5 seconds for all Dubbo services using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    timeout: 5000\n```\n\n----------------------------------------\n\nTITLE: Maven Settings Configuration\nDESCRIPTION: XML configuration for Maven settings.xml including repository credentials and GPG passphrase settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n...\n <servers>\n   <!-- To publish a snapshot of some part of Maven -->\n   <server>\n     <id>apache.snapshots.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n   <!-- To stage a release of some part of Maven -->\n   <server>\n     <id>apache.releases.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n  ...\n     <!-- gpg passphrase used when generating key -->\n    <server>\n     <id>gpg.passphrase</id>\n     <passphrase><!-- yourKeyPassword --></passphrase>\n   </server>\n </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Adding Qos Module Dependency in Maven\nDESCRIPTION: Maven dependency configuration for importing the Dubbo Qos module, which is required for enabling the Qos functionality in port unification scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-qos</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Storing Provider Metadata in AbstractMetadataReport\nDESCRIPTION: This method handles the storage of provider metadata, either synchronously or asynchronously based on the 'sync-report' configuration. It delegates the actual storage task to a separate method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void storeProviderMetadata(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {\n   if (syncReport) {\n       storeProviderMetadataTask(providerMetadataIdentifier, serviceDefinition);\n   } else {\n       reportCacheExecutor.execute(() -> storeProviderMetadataTask(providerMetadataIdentifier, serviceDefinition));\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry with Protocol and Address\nDESCRIPTION: Specifies the Etcd registry protocol separately from the address, allowing for more explicit configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/etcd.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"etcd\" address=\"10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Provider Dependencies\nDESCRIPTION: Maven POM configuration for the Dubbo service provider with Spring Boot integration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.example</groupId>\n\t<artifactId>demo-provider</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>demo-provider</name>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>sonatype-nexus-snapshots</id>\n\t\t\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.boot</groupId>\n\t\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t\t<version>0.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.example</groupId>\n\t\t\t<artifactId>demo-api</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in XML\nDESCRIPTION: XML configuration options to enable FST serialization at protocol, consumer, or reference level in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"fst\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"fst\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"fst\" />\n```\n\n----------------------------------------\n\nTITLE: Offline Service Commands in Dubbo\nDESCRIPTION: Shows how to take services offline using the offline command, including both taking all services offline and using regex patterns to selectively disable services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n//下线所有服务\ndubbo>offline\nOK\n\n//根据正则，下线部分服务\ndubbo>offline com.*\nOK\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo MetricsService Interface in Java\nDESCRIPTION: Interface definition for the Dubbo MetricsService, which exposes metric data. It includes methods to retrieve metrics by categories and service details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface MetricsService {\n\n    String DEFAULT_EXTENSION_NAME = \"default\";\n\n    String VERSION = \"1.0.0\";\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(List<MetricsCategory> categories);\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, List<MetricsCategory> categories);\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, String methodName, Class<?>[] parameterTypes, List<MetricsCategory> categories);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller for Dubbo Consumer\nDESCRIPTION: Spring REST controller that uses @Reference to inject the Dubbo HelloService and exposes a /sayHello endpoint to invoke the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.democonsumer.controller;\n\nimport com.alibaba.dubbo.config.annotation.Reference;\nimport com.example.demoapi.HelloService;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class DemoConsumerController {\n    @Reference(version = \"${demo.service.version}\",\n            application = \"${dubbo.application.id}\",\n            url = \"dubbo://<注意，这里填写具体IP>:12345\")\n    private HelloService helloService;\n\n    @RequestMapping(\"/sayHello\")\n    public String sayHello(@RequestParam String name) {\n        return helloService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Degradation Configuration in Dubbo\nDESCRIPTION: YAML configuration that implements service degradation by forcing null returns for a particular service. This is typically used to temporarily mask non-critical services that are experiencing errors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-rule.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: service\nkey: org.apache.dubbo.samples.governance.api.DemoService\nenabled: true\nconfigs:\n- side: consumer\n  parameters:\n    force: return null\n...\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Interface-Level Load Balancing in Dubbo-go\nDESCRIPTION: This code demonstrates how to use a predefined load balancing strategy (Round Robin in this case) when creating a new service instance in Dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\t//...\n)\n\nsvc, err := greet.NewGreetService(cli, client.WithLoadBalanceRoundRobin())\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties\nDESCRIPTION: Application properties for the Dubbo provider. Configures Spring Boot and Dubbo settings including service version, application name, protocol, and registry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# Spring boot application\nspring.application.name = dubbo-provider-demo\nserver.port = 9090\nmanagement.port = 9091\n\n# Service version\ndemo.service.version = 1.0.0\n\n# Base packages to scan Dubbo Components (e.g @Service , @Reference)\ndubbo.scan.basePackages  = com.example.demoprovider\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id = dubbo-provider-demo\ndubbo.application.name = dubbo-provider-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id = dubbo\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = 12345\n\n## RegistryConfig Bean\ndubbo.registry.id = my-registry\ndubbo.registry.address = N/A\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper in Docker with Custom Configuration\nDESCRIPTION: Docker command to run Zookeeper with a custom configuration file by mounting a local zoo.cfg file to the container's /conf directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name some-zookeeper --restart always  -e JVMFLAGS=\"-Dzookeeper.admin.enableServer=false\" -d -v $(pwd)/zoo.cfg:/conf/zoo.cfg\n```\n\n----------------------------------------\n\nTITLE: Invoking Bidirectional Streaming Method from Client\nDESCRIPTION: Client code for invoking a bidirectional streaming RPC method. The client obtains a request StreamObserver to send multiple requests while providing a response StreamObserver to handle streamed responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nStreamObserver<GreeterRequest> requestStreamObserver = greeter.biStream(new SampleStreamObserver());\nfor (int i = 0; i < 10; i++) {\n\tGreeterRequest request = GreeterRequest.newBuilder().setName(\"name-\" + i).build();\n\trequestStreamObserver.onNext(request);\n}\nrequestStreamObserver.onCompleted();\n```\n\n----------------------------------------\n\nTITLE: Embedding GitHub Watch Button for Apache Dubbo Awesome Repository in HTML\nDESCRIPTION: This HTML snippet creates a GitHub Watch button for the Apache Dubbo Awesome repository. It uses the GitHub button API to generate an interactive button that displays the current number of watchers and allows users to watch the repository directly from the Dubbo website.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/github/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<a class=\"github-button\" href=\"https://github.com/apache/dubbo-awesome/subscription\" data-icon=\"octicon-eye\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Watch apache/dubbo-awesome on GitHub\">Watch</a>\n```\n\n----------------------------------------\n\nTITLE: Importing Brave and Zipkin Dependencies in Maven POM\nDESCRIPTION: This XML snippet shows how to import Brave and Zipkin dependencies in a Maven project's pom.xml file. It includes property definitions, dependency management for BOM files, and specific dependencies for Dubbo instrumentation, Spring bean support, SLF4J context, and OkHttp3 reporter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <brave.version>5.4.2</brave.version>\n    <zipkin-reporter.version>2.7.9</zipkin-reporter.version>\n</properties>\n\n<dependencyManagement>\n    <dependencies>\n        <!-- Import zipkin brave BOM file -->\n        <dependency>\n            <groupId>io.zipkin.brave</groupId>\n            <artifactId>brave-bom</artifactId>\n            <version>${brave.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        \n        <!-- Import zipkin reporter BOM file -->\n        <dependency>\n            <groupId>io.zipkin.reporter2</groupId>\n            <artifactId>zipkin-reporter-bom</artifactId>\n            <version>${zipkin-reporter.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <!-- 1. brave integration for dubbo -->\n    <dependency>\n        <groupId>io.zipkin.brave</groupId>\n        <artifactId>brave-instrumentation-dubbo-rpc</artifactId>\n    </dependency>\n\n    <!-- 2. brave spring bean support -->\n    <dependency>\n        <groupId>io.zipkin.brave</groupId>\n        <artifactId>brave-spring-beans</artifactId>\n    </dependency>\n\n    <!-- 3. support for traceId and spanId in SLF4J's MDC (Mapped Diagnostic Context) -->\n    <dependency>\n        <groupId>io.zipkin.brave</groupId>\n        <artifactId>brave-context-slf4j</artifactId>\n    </dependency>\n\n    <!-- 4. use okhttp3 as reporter -->\n    <dependency>\n        <groupId>io.zipkin.reporter2</groupId>\n        <artifactId>zipkin-sender-okhttp3</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Properties\nDESCRIPTION: Basic QOS configuration properties in dubbo.properties file including port, access control and security settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/overview.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qos-enable=true\ndubbo.application.qos-port=33333\ndubbo.application.qos-accept-foreign-ip=false\ndubbo.application.qos-accept-foreign-ip-whitelist=123.12.10.13, 132.12.10.13/24\ndubbo.application.qos-anonymous-access-permission-level=PUBLIC\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Provider in Java\nDESCRIPTION: Implements the IDemoService interface for the service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass NormalDemoService implements IDemoService {\n    public Person get(int id) {\n        return new Person(id, \"charles`son\", 4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample POJO Class in Java\nDESCRIPTION: Provides an example of a POJO (Plain Old Java Object) class definition, which is used to illustrate how complex objects can be represented in generic invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\npublic class PersonImpl implements Person {\n    private String name;\n    private String password;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Cache Factory Implementation\nDESCRIPTION: Properties file configuration for registering a custom cache factory implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/cache.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxCacheFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in YAML\nDESCRIPTION: YAML configuration to enable Nacos as a metadata center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  metadata-report:\n    address: nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Routing with VirtualService and DestinationRule in Dubbo\nDESCRIPTION: This YAML configuration defines a complete dynamic routing setup in Dubbo. It includes a VirtualService that specifies routing rules based on method names, argument values, and source labels, along with a DestinationRule that defines subsets of the destination service with different labels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/examples/routing/dynamic-rule-deployment.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  - demo\n  dubbo:\n    - services:\n      - exact: com.taobao.hsf.demoservice:1.0.0\n      routedetail:\n       - name: sayHello-route\n         match: \n          - method:\n             name_match: \n               exact: \"s-method\"\n             argc: 5\n             args:\n               - index: 2\n                 type: double\n                 num_value:\n                   oneof:\n                   - range:\n                       start: 100.1\n               - index: 1\n                 type: string \n                 str_value:\n                   oneof:\n                   - regex: \"*abc*\"\n                   - exact: parameter-1\n               - index: 3\n                 type: bool\n               - index: 4 \n                 type: int\n                 num_value:\n                   oneof:\n                   - range:\n                       start: 1\n                       end: 100\n          - sourcelables:\n             sigma.ali/appName: \"ump2\"\n         route:\n          - destination:\n             host: demo\n             subset: v1\n             fallback:\n               host:demo \n               subset: v2\n\n       - name: default-route\n         route:\n          - destination: \n            host: demo \n            subset: v2\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: reviews-route\nspec:\n  host: demo\n  subsets:\n    - name: v1\n      labels:\n        sigma.ali/mg: v1-host\n    - name: v2\n      labels:\n        sigma.ali/mg: v2-host\n```\n\n----------------------------------------\n\nTITLE: Extending Dubbo Configuration with Properties File\nDESCRIPTION: This properties file demonstrates how to extend Dubbo service and reference configurations when using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.service.org.apache.dubbo.springboot.demo.DemoService.timeout=5000\ndubbo.service.org.apache.dubbo.springboot.demo.DemoService.parameters=[{myKey:myValue},{anotherKey:anotherValue}]\ndubbo.reference.org.apache.dubbo.springboot.demo.DemoService.timeout=6000\n```\n\n----------------------------------------\n\nTITLE: Checking ScopeModel Validity in Java\nDESCRIPTION: This method checks if the provided ScopeModel is valid, ensuring it's not null and is an instance of ApplicationModel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprotected void checkScopeModel(ScopeModel scopeModel) {\n        if (scopeModel == null) {\n            throw new IllegalArgumentException(\"scopeModel cannot be null\");\n        }\n        if (!(scopeModel instanceof ApplicationModel)) {\n            throw new IllegalArgumentException(\"Invalid scope model, expect to be a ApplicationModel but got: \" + scopeModel);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample Router Snapshot Log in Dubbo\nDESCRIPTION: An example of actual router snapshot log output in Dubbo, showing the routing process for a service with no available providers. It includes details for each router in the chain, such as MockInvokersSelector, StandardMeshRuleRouter, and TagStateRouter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/router-snapshot.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[19/07/22 07:42:46:046 CST] main  WARN cluster.RouterChain:  [DUBBO] No provider available after route for the service org.apache.dubbo.samples.governance.api.DemoService from registry 30.227.64.173 on the consumer 30.227.64.173 using the dubbo version 3.0.7. Router snapshot is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) ] Input: 30.227.64.173:20881,30.227.64.173:20880 -> Chain Node Output: Empty\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 30.227.64.173:20881,30.227.64.173:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 30.227.64.173:20881,30.227.64.173:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 0) (Chain Node Output: 0) Router message: FAILOVER: return all Providers without any tags ] Current Node Output: Empty, dubbo version: 3.0.7, current host: 30.227.64.173\n```\n\n----------------------------------------\n\nTITLE: Defining StringMatch in VirtualService\nDESCRIPTION: Example of StringMatch configurations within a VirtualService. It shows different ways to match strings including exact match, prefix match, and regex match for service names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - service: #StringMatch\n    - exact: org.apache.dubbo.demoService:1.0.0\n    - prefix: org.apache.dubbo.hello\n    - regex: org.apache.dubbo.*Service:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Representing a POJO as a Map for Generic Invocation in Java\nDESCRIPTION: Shows how to represent a POJO as a Map for use in generic invocations. It includes setting the class type and properties of the object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> map = new HashMap<String, Object>(); \n// 注意：如果参数类型是接口，或者List等丢失泛型，可通过class属性指定类型。\nmap.put(\"class\", \"com.xxx.PersonImpl\"); \nmap.put(\"name\", \"xxx\"); \nmap.put(\"password\", \"yyy\");\n```\n\n----------------------------------------\n\nTITLE: Registering Service Data in RegistryProtocol in Java\nDESCRIPTION: This snippet from the RegistryProtocol class shows the process of registering service data to the registry, handling both interface-level and application-level registrations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nfinal Registry registry = getRegistry(registryUrl);\nfinal URL registeredProviderUrl = getUrlToRegistry(providerUrl, registryUrl);\n\nboolean register = providerUrl.getParameter(REGISTER_KEY, true) && registryUrl.getParameter(REGISTER_KEY, true);\nif (register) {\n    register(registry, registeredProviderUrl);\n}\n\nregisterStatedUrl(registryUrl, registeredProviderUrl, register);\n\nexporter.setRegisterUrl(registeredProviderUrl);\nexporter.setSubscribeUrl(overrideSubscribeUrl);\n\nif (!registry.isServiceDiscovery()) {\n    registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in XML\nDESCRIPTION: XML configuration to enable Nacos as a metadata center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"nacos://127.0.0.1:8848\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Address in Dubbo XML\nDESCRIPTION: This snippet shows how to set a custom host address in the Dubbo XML configuration file. It's useful when you need to register a public IP address for your service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/hostname-binding.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol host=\"205.182.23.201\">\n```\n\n----------------------------------------\n\nTITLE: Invoking Server-Side Streaming Method from Client\nDESCRIPTION: Client code for invoking a server-side streaming RPC method. The client sends a single request and passes a StreamObserver implementation to handle the streamed responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nGreeterRequest request = GreeterRequest.newBuilder().setName(\"server stream request.\").build();\ngreeter.serverStream(request, new SampleStreamObserver());\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Sample Java interface definition for a Dubbo service using the Triple protocol. The interface defines a simple greeting service with a method that takes a name string and returns a greeting string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/wrapper.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Building RPC Invocations from HTTP Requests in Dubbo\nDESCRIPTION: Utility class for constructing RPC invocations from HTTP requests. It retrieves REST method metadata based on the request URI, builds the RPC invocation with appropriate parameters and attachments, and creates a parsing context for parameter extraction.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n{\n\n\n        private static final ParamParserManager paramParser = new ParamParserManager();\n\n\n        public static Pair<RpcInvocation, Invoker> build(RequestFacade request, Object servletRequest, Object servletResponse) {\n\n            // 获取invoker\n            Pair<Invoker, RestMethodMetadata> invokerRestMethodMetadataPair = getRestMethodMetadata(request);\n\n            RpcInvocation rpcInvocation = createBaseRpcInvocation(request, invokerRestMethodMetadataPair.getSecond());\n\n            ProviderParseContext parseContext = createParseContext(request, servletRequest, servletResponse, invokerRestMethodMetadataPair.getSecond());\n            // 参数构建\n            Object[] args = paramParser.providerParamParse(parseContext);\n\n            rpcInvocation.setArguments(args);\n\n            return Pair.make(rpcInvocation, invokerRestMethodMetadataPair.getFirst());\n\n        }\n\n        private static ProviderParseContext createParseContext(RequestFacade request, Object servletRequest, Object servletResponse, RestMethodMetadata restMethodMetadata) {\n            ProviderParseContext parseContext = new ProviderParseContext(request);\n            parseContext.setResponse(servletResponse);\n            parseContext.setRequest(servletRequest);\n\n            Object[] objects = new Object[restMethodMetadata.getArgInfos().size()];\n            parseContext.setArgs(Arrays.asList(objects));\n            parseContext.setArgInfos(restMethodMetadata.getArgInfos());\n\n\n            return parseContext;\n        }\n\n        private static RpcInvocation createBaseRpcInvocation(RequestFacade request, RestMethodMetadata restMethodMetadata) {\n            RpcInvocation rpcInvocation = new RpcInvocation();\n\n\n            int localPort = request.getLocalPort();\n            String localAddr = request.getLocalAddr();\n            int remotePort = request.getRemotePort();\n            String remoteAddr = request.getRemoteAddr();\n\n            String HOST = request.getHeader(RestConstant.HOST);\n            String GROUP = request.getHeader(RestConstant.GROUP);\n\n            String PATH = request.getHeader(RestConstant.PATH);\n            String VERSION = request.getHeader(RestConstant.VERSION);\n\n            String METHOD = restMethodMetadata.getMethod().getName();\n            String[] PARAMETER_TYPES_DESC = restMethodMetadata.getMethod().getParameterTypes();\n\n            rpcInvocation.setParameterTypes(restMethodMetadata.getReflectMethod().getParameterTypes());\n\n\n            rpcInvocation.setMethodName(METHOD);\n            rpcInvocation.setAttachment(RestConstant.GROUP, GROUP);\n            rpcInvocation.setAttachment(RestConstant.METHOD, METHOD);\n            rpcInvocation.setAttachment(RestConstant.PARAMETER_TYPES_DESC, PARAMETER_TYPES_DESC);\n            rpcInvocation.setAttachment(RestConstant.PATH, PATH);\n            rpcInvocation.setAttachment(RestConstant.VERSION, VERSION);\n            rpcInvocation.setAttachment(RestConstant.HOST, HOST);\n            rpcInvocation.setAttachment(RestConstant.REMOTE_ADDR, remoteAddr);\n            rpcInvocation.setAttachment(RestConstant.LOCAL_ADDR, localAddr);\n            rpcInvocation.setAttachment(RestConstant.REMOTE_PORT, remotePort);\n            rpcInvocation.setAttachment(RestConstant.LOCAL_PORT, localPort);\n\n            Enumeration<String> attachments = request.getHeaders(RestConstant.DUBBO_ATTACHMENT_HEADER);\n\n            while (attachments != null && attachments.hasMoreElements()) {\n                String s =  attachments.nextElement();\n\n                String[] split = s.split(\"=\");\n\n                rpcInvocation.setAttachment(split[0], split[1]);\n            }\n\n\n            // TODO set path,version,group and so on\n            return rpcInvocation;\n        }\n\n\n        private static Pair<Invoker, RestMethodMetadata> getRestMethodMetadata(RequestFacade request) {\n            String path = request.getRequestURI();\n            String version = request.getHeader(RestConstant.VERSION);\n            String group = request.getHeader(RestConstant.GROUP);\n            int port = request.getIntHeader(RestConstant.REST_PORT);\n\n            return PathAndInvokerMapper.getRestMethodMetadata(path, version, group, port);\n        }\n\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Using RpcContext for Asynchronous Calls in Dubbo (Pre-2.7)\nDESCRIPTION: Example of how to implement asynchronous service calls on the consumer side before Dubbo 2.7, using the RpcContext API. This approach requires a separate asynchronous identifier and additional code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/apache-dubbo-2019-2020.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString result = helloService.sayHello(\"world\"); // result is always null\nFuture future = RpcContext.getContext().getFuture();\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol for a Specific Service\nDESCRIPTION: Configures an individual service to use the dubbo protocol, overriding any default protocol settings that might be defined at the provider level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"dubbo\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Business Tables for Seata Example\nDESCRIPTION: SQL script to create and initialize business tables (stock_tbl, order_tbl, account_tbl) for the Seata demonstration. These tables represent different services in a distributed transaction scenario.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `stock_tbl`;\nCREATE TABLE `stock_tbl`\n(\n    `id`             int(11) NOT NULL AUTO_INCREMENT,\n    `commodity_code` varchar(255) DEFAULT NULL,\n    `count`          int(11) DEFAULT 0,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY (`commodity_code`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `order_tbl`;\nCREATE TABLE `order_tbl`\n(\n    `id`             int(11) NOT NULL AUTO_INCREMENT,\n    `user_id`        varchar(255) DEFAULT NULL,\n    `commodity_code` varchar(255) DEFAULT NULL,\n    `count`          int(11) DEFAULT 0,\n    `money`          int(11) DEFAULT 0,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `account_tbl`;\nCREATE TABLE `account_tbl`\n(\n    `id`      int(11) NOT NULL AUTO_INCREMENT,\n    `user_id` varchar(255) DEFAULT NULL,\n    `money`   int(11) DEFAULT 0,\n    PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n---INITIALIZE THE ACCOUNT TABLE\nINSERT INTO account_tbl(`user_id`,`money`) VALUES('ACC_001','1000');\n---INITIALIZE THE STOCK TABLE\nINSERT INTO stock_tbl(`commodity_code`,`count`) VALUES('STOCK_001','100');\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Defines the HelloService interface with methods for synchronous and asynchronous calls, including complex return types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface HelloService {\n    String sayHello(String name);\n    CompletableFuture<String> sayHelloAsync(String name);\n    CompletableFuture<Person> sayHelloAsyncComplex(String name);\n    CompletableFuture<GenericType<Person>> sayHelloAsyncGenericComplex(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Dubbo Consumer Logs for Traffic Distribution\nDESCRIPTION: This Java log output shows the traffic distribution between provider v1 and v2 after applying the VirtualService rule.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n==================== dubbo invoke 100 end ====================\n[10/08/22 07:15:58:058 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.18:50052, client: 172.18.96.18, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 101 end ====================\n[10/08/22 07:16:03:003 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.22:50052, client: 172.18.96.22, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 102 end ====================\n[10/08/22 07:16:08:008 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.18:50052, client: 172.18.96.18, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 103 end ====================\n[10/08/22 07:16:13:013 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v2: 172.18.96.6:50052, client: 172.18.96.6, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 104 end ====================\n[10/08/22 07:16:18:018 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.22:50052, client: 172.18.96.22, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 105 end ====================\n[10/08/22 07:16:24:024 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.18:50052, client: 172.18.96.18, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 106 end ====================\n[10/08/22 07:16:29:029 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.22:50052, client: 172.18.96.22, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 107 end ====================\n[10/08/22 07:16:34:034 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.18:50052, client: 172.18.96.18, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 108 end ====================\n[10/08/22 07:16:39:039 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.22:50052, client: 172.18.96.22, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n\n==================== dubbo invoke 109 end ====================\n[10/08/22 07:16:44:044 UTC] main  INFO action.GreetingServiceConsumer: consumer Unary reply <-message: \"hello,service mesh, response from provider-v1: 172.18.96.18:50052, client: 172.18.96.18, local: dubbo-samples-mesh-provider, remote: null, isProviderSide: true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Sticky Connection in Dubbo XML\nDESCRIPTION: This XML snippet shows how to configure a sticky connection for a specific method within a service reference in Dubbo. It allows for finer-grained control by setting the 'sticky' attribute on the method element.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/stickiness.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"sayHello\" sticky=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Components with Helm (Method 1)\nDESCRIPTION: Installs individual Dubbo components such as Dubbo Admin, Nacos, Zookeeper, Grafana, and Prometheus using Helm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-nacos dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-zookeeper dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Sticky Connections in Dubbo XML\nDESCRIPTION: XML configuration for enabling sticky connections for stateful services, making clients call the same provider consistently. Supports both service and method level configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\" sticky=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"sayHello\" sticky=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Docker Compose File\nDESCRIPTION: Docker Compose configuration for setting up a Zookeeper instance used for service registration and discovery in the Dubbo-go application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  zookeeper:\n    image: zookeeper\n    ports:\n      - 2181:2181\n    restart: on-failure\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Service Call with API Programming in Dubbo\nDESCRIPTION: This snippet shows how to programmatically configure and obtain a generic service reference using Dubbo's API approach. It creates the necessary configuration objects and obtains a GenericService instance for making calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"api-generic-consumer\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://127.0.0.1:2181\");\n\napplication.setRegistry(registry);\n\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();\n// 弱类型接口名\nreference.setInterface(\"com.alibaba.dubbo.samples.generic.api.IUserService\");\n// 声明为泛化接口\nreference.setGeneric(true);\n\nreference.setApplication(application);\n\n// 用com.alibaba.dubbo.rpc.service.GenericService可以替代所有接口引用\nGenericService genericService = reference.get();\n\nString name = (String) genericService.$invoke(\"delete\", new String[]{int.class.getName()}, new Object[]{1});\nSystem.out.println(name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export in XML\nDESCRIPTION: XML configuration for exporting a Dubbo service with multiple protocols. The configuration sets up the dubbo protocol with port unification and references a service to be exported.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"-1\" ext-protocol=\"tri,\"/>\n\n<bean id=\"greetingService\" class=\"org.apache.dubbo.demo.provider.GreetingServiceImpl\"/>\n\n<dubbo:service delay=\"5000\" version=\"1.0.0\" group=\"greeting\" timeout=\"5000\" interface=\"org.apache.dubbo.demo.GreetingService\" ref=\"greetingService\" protocol=\"dubbo\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Port Conflict Error Stack Trace\nDESCRIPTION: Error stack trace showing a port conflict when starting a Dubbo service. The key error is 'Failed to bind NettyServer on /0.0.0.0:20880, cause: Address already in use', indicating another process is already using the default Dubbo port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n[27/02/23 02:52:00:000 CST] main ERROR deploy.DefaultApplicationDeployer:  [DUBBO] Dubbo Application[1.1](first-dubbo-provider) start failure, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195, error code: 5-14. This may be caused by , go to https://dubbo.apache.org/faq/5/14 to find instructions. \norg.apache.dubbo.rpc.RpcException: Fail to start server(url: dubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&bind.ip=30.221.144.195&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dubbo.tag=dev&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&heartbeat=60000&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=63841&prefer.serialization=fastjson2,hessian2&qos.port=22223&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider&timestamp=1677480719543) Failed to bind NettyServer on /0.0.0.0:20880, cause: Address already in use\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.createServer(DubboProtocol.java:385)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.openServer(DubboProtocol.java:350)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.export(DubboProtocol.java:331)\nat org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)\nat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:80)\nat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:66)\nat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:61)\nat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:47)\nat org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)\nat org.apache.dubbo.registry.integration.RegistryProtocol.lambda$doLocalExport$3(RegistryProtocol.java:305)\nat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)\nat org.apache.dubbo.registry.integration.RegistryProtocol.doLocalExport(RegistryProtocol.java:303)\nat org.apache.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:249)\nat org.apache.dubbo.qos.protocol.QosProtocolWrapper.export(QosProtocolWrapper.java:79)\nat org.apache.dubbo.rpc.protocol.ProtocolSecurityWrapper.export(ProtocolSecurityWrapper.java:80)\nat org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:64)\nat org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:58)\nat org.apache.dubbo.rpc.protocol.ProtocolSerializationWrapper.export(ProtocolSerializationWrapper.java:47)\nat org.apache.dubbo.rpc.Protocol$Adaptive.export(Protocol$Adaptive.java)\nat org.apache.dubbo.config.ServiceConfig.doExportUrl(ServiceConfig.java:739)\nat org.apache.dubbo.config.ServiceConfig.exportRemote(ServiceConfig.java:717)\nat org.apache.dubbo.config.ServiceConfig.exportUrl(ServiceConfig.java:658)\nat org.apache.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:451)\nat org.apache.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:433)\nat org.apache.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:395)\nat org.apache.dubbo.config.ServiceConfig.export(ServiceConfig.java:247)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServiceInternal(DefaultModuleDeployer.java:350)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.exportServices(DefaultModuleDeployer.java:322)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.startSync(DefaultModuleDeployer.java:158)\nat org.apache.dubbo.config.deploy.DefaultModuleDeployer.start(DefaultModuleDeployer.java:139)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.startModules(DefaultApplicationDeployer.java:681)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.doStart(DefaultApplicationDeployer.java:645)\nat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.start(DefaultApplicationDeployer.java:618)\nat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:226)\nat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:215)\nat org.apache.dubbo.samples.provider.Application.main(Application.java:52)\nCaused by: org.apache.dubbo.remoting.RemotingException: Failed to bind NettyServer on /0.0.0.0:20880, cause: Address already in use\nat org.apache.dubbo.remoting.transport.AbstractServer.<init>(AbstractServer.java:75)\nat org.apache.dubbo.remoting.transport.netty4.NettyServer.<init>(NettyServer.java:85)\nat org.apache.dubbo.remoting.transport.netty4.NettyTransporter.bind(NettyTransporter.java:35)\nat org.apache.dubbo.remoting.Transporter$Adaptive.bind(Transporter$Adaptive.java)\nat org.apache.dubbo.remoting.Transporters.bind(Transporters.java:55)\nat org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger.bind(HeaderExchanger.java:52)\nat org.apache.dubbo.remoting.exchange.Exchangers.bind(Exchangers.java:69)\nat org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol.createServer(DubboProtocol.java:383)\n... 35 more\nCaused by: java.net.BindException: Address already in use\nat sun.nio.ch.Net.bind0(Native Method)\nat sun.nio.ch.Net.bind(Net.java:444)\nat sun.nio.ch.Net.bind(Net.java:436)\nat sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:225)\nat io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:141)\nat io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:562)\nat io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1334)\nat io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:600)\nat io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:579)\nat io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:973)\nat io.netty.channel.AbstractChannel.bind(AbstractChannel.java:260)\nat io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:356)\nat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\nat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\nat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\nat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\nat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\nat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\nat java.lang.Thread.run(Thread.java:748)\n```\n\n----------------------------------------\n\nTITLE: Enabling Service-Level Deadline Mechanism\nDESCRIPTION: Enables deadline mechanism for specific service using @DubboReference annotation with parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(timeout=5000, parameters={\"enable-timeout-countdown\", \"true\"})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Calls with @DubboReference Annotation\nDESCRIPTION: Configuration example showing how to enable asynchronous calls in Dubbo using the async property in the @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(async=\"true\")  \nprivate AsyncService asyncService;  \n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry with Spring XML\nDESCRIPTION: XML configuration that shows how to set up Dubbo with Nacos registry center using Spring XML configuration file, defining application information and registry address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n \n    <!-- 提供方应用信息，用于计算依赖关系 -->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"  />\n \n    <!-- 使用 Nacos 注册中心 -->\n    <dubbo:registry address=\"nacos://10.20.153.10:8848\" />\n \t...\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Adding Curator Dependencies in Maven\nDESCRIPTION: Maven dependency configuration for adding Curator Framework and Recipes libraries, Netflix's Zookeeper client implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <curator.version>5.2.1</curator.version>\n</properties>\n\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>${curator.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-recipes</artifactId>\n    <version>${curator.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-x-discovery</artifactId>\n    <version>${curator.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Protobuf Service Definition\nDESCRIPTION: Protocol buffer definition for the Greet service with request and response messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/config_yaml/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: REST Service Definition with Spring Web Annotations\nDESCRIPTION: Example of defining a REST-style service using Spring MVC annotations with the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/demo\")\npublic interface DemoService {\n    @GetMapping(value = \"/hello\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Method-Specific Concurrency at Server-Side\nDESCRIPTION: Configures the maximum number of concurrent executions (10) for a specific method (sayHello) of a service on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" executes=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Interface in Go for Dubbo\nDESCRIPTION: This snippet defines the Filter interface in Go for Dubbo, specifying the Invoke and OnResponse methods that filters must implement.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Filter interface defines the functions of a filter\n// Extension - Filter\ntype Filter interface {\n\t// Invoke is the core function of a filter, it determines the process of the filter\n\tInvoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result\n\t// OnResponse updates the results from Invoke and then returns the modified results.\n\tOnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Module Config Manager in Dubbo\nDESCRIPTION: Code for creating a ModuleConfigManager object and initializing it. The ModuleConfigManager handles configuration settings at the module level in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n //创建模块配置管理对象\n        this.moduleConfigManager = new ModuleConfigManager(this);\n        //初始化模块配置管理对象\n        this.moduleConfigManager.initialize();\n```\n\n----------------------------------------\n\nTITLE: DubboGo Server Configuration\nDESCRIPTION: YAML configuration for DubboGo server including registry, protocols, and provider settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      timeout: 10s\n      address: 127.0.0.1:2181\n  protocols:\n    tripleProtocol:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      GreetTripleServer:\n        interface: com.apache.dubbo.sample.Greeter\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Port in Dubbo Properties File\nDESCRIPTION: This example shows how to configure a custom port for the Dubbo protocol using the properties file. It's an alternative to XML configuration for setting the protocol port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/hostname-binding.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.dubbo.port=20880\n```\n\n----------------------------------------\n\nTITLE: Implementing ConsumerContextFilter in Dubbo\nDESCRIPTION: This code snippet shows the implementation of ConsumerContextFilter, a built-in Dubbo filter used on the consumer side for context delivery. It demonstrates how to set and clear context information during invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/first-dubbo-filter.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        RpcContext.getContext()\n                .setInvoker(invoker)\n                .setInvocation(invocation)\n                .setLocalAddress(NetUtils.getLocalHost(), 0)\n                .setRemoteAddress(invoker.getUrl().getHost(), \n                                  invoker.getUrl().getPort());\n        if (invocation instanceof RpcInvocation) {\n            ((RpcInvocation)invocation).setInvoker(invoker);\n        }\n        try {\n            return invoker.invoke(invocation);\n        } finally {\n            RpcContext.getContext().clearAttachments();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Provider\nDESCRIPTION: Shows how to configure TLS security on the provider side including certificate paths and mutual TLS authentication settings. The code demonstrates setting up SSL configuration and enabling it in the protocol config.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/tls.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSslConfig sslConfig = new SslConfig();\nsslConfig.setServerKeyCertChainPath(\"path to cert\");\nsslConfig.setServerPrivateKeyPath(args[1]);\n// If mutual cert authentication is enabled\nif (mutualTls) {\n  sslConfig.setServerTrustCertCollectionPath(args[2]);\n}\n\nProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo/grpc\");\nprotocolConfig.setSslEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Starting the Dubbo Provider and Consumer\nDESCRIPTION: Commands to start the Dubbo provider and consumer applications using the compiled JAR files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar ./dubbo-samples-dubbo-provider/target/dubbo-samples-dubbo-provider-1.0-SNAPSHOT.jar\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar ./dubbo-samples-dubbo-consumer/target/dubbo-samples-dubbo-consumer-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Adaptive Extension Class\nDESCRIPTION: Method that manages the retrieval or creation of adaptive extension classes with caching support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate Class<?> getAdaptiveExtensionClass() {\n    getExtensionClasses();\n    if (cachedAdaptiveClass != null) {\n        return cachedAdaptiveClass;\n    }\n    return cachedAdaptiveClass = createAdaptiveExtensionClass();\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Provider Registration in Java\nDESCRIPTION: Programmatically registers a third-party service provider (like memcached) directly to the registry using Java code. Uses the RegistryFactory extension loader to manually write provider information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/static-service.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"memcached://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Version-based Services in Dubbo XML\nDESCRIPTION: Demonstrates how to configure version-based services for both providers and consumers using XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"1.0.0\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"2.0.0\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"1.0.0\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"2.0.0\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Metadata Center Address in YAML\nDESCRIPTION: YAML configuration to set the Redis metadata center address for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: redis://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in Java\nDESCRIPTION: Java code to programmatically configure Nacos as a metadata center for Dubbo, creating a MetadataReportConfig instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMetadataReportConfig metadataConfig = new MetadataReportConfig();\nmetadataConfig.setAddress(\"nacos://127.0.0.1:8848\");\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Native Dependencies\nDESCRIPTION: Maven dependencies required for Dubbo native compilation, including dubbo-config-spring6 and dubbo-native.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-config-spring6</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-native</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Parameters for Sentinel Dashboard Integration\nDESCRIPTION: Example of JVM startup parameters required to connect a Dubbo service provider to the Sentinel dashboard. These parameters specify the client port, dashboard server address, and application name for monitoring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/sentinel-introduction-for-dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-Djava.net.preferIPv4Stack=true -Dcsp.sentinel.api.port=8720 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=dubbo-provider-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in Properties\nDESCRIPTION: Properties configuration to enable Nacos as a metadata center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Using DubboBootstrap API for Service Configuration\nDESCRIPTION: Example of using the new DubboBootstrap API introduced in 2.7.5 for configuring and starting Dubbo services. This approach simplifies configuration by providing a unified entry point and avoiding duplication of global settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/2.7.5.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nProtocolConfig protocolConfig = new ProtocolConfig(\"grpc\");\nprotocolConfig.setSslEnabled(true);\n\nSslConfig sslConfig = new SslConfig();\nsslConfig.setXxxCert(...);\n\nDubboBootstrap bootstrap = DubboBootstrap.getInstance();\nbootstrap.application(new ApplicationConfig(\"ssl-provider\"))\n  .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n  .protocol(protocolConfig)\n  .ssl(sslConfig);\n\nServiceConfig<GreetingsService> service1 = new ServiceConfig<>();\nServiceConfig<GreetingsService> service2 = new ServiceConfig<>();\n\nbootstrap.service(service1).service(service2);\nbootstrap.start();\n```\n\n----------------------------------------\n\nTITLE: Referencing Memcached Service with Dubbo XML Configuration\nDESCRIPTION: This XML configuration shows how to reference a Memcached service using Dubbo's service discovery. It uses the standard java.util.Map interface with a specified group.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/memcached.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"java.util.Map\" group=\"member\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultMetricsReporter in Java\nDESCRIPTION: This snippet shows the implementation of DefaultMetricsReporter, which provides methods to export specific metrics by name. It uses SimpleMeterRegistry to store metric data and offers passive data retrieval through getResponseWithName method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n//DefaultMetricsReporter \n\n    @Override\n    public String getResponse() {\n        return null;\n    }\n\n    @Override\n    public String getResponseWithName(String metricsName) {\n        ...\n        meterRegistry.getMeters().stream().filter(meter -> {\n             //根据名称过滤样本\n        });\n        metricsValue.forEach((key, value) -> {\n             //按格式拼装结果\n        });\n        return sb.toString();\n    }\n\n    @Override\n    protected void doInit() {\n        addMeterRegistry(meterRegistry);\n    }\n\n    @Override\n    protected void doDestroy() {}\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Configuration in Go\nDESCRIPTION: The Load function initializes Dubbo by setting up the router, event dispatcher, metadata reporting, consumer and provider configurations, and graceful shutdown handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-1.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Load Dubbo Init\nfunc Load() {\n    // init router\n    initRouter()\n    // init the global event dispatcher\n    extension.SetAndInitGlobalDispatcher(GetBaseConfig().EventDispatcherType)\n    // start the metadata report if config set\n    if err := startMetadataReport(GetApplicationConfig().MetadataType, GetBaseConfig().MetadataReportConfig); err != nil {\n  logger.Errorf(\"Provider starts metadata report error, and the error is {%#v}\", err)\n  return\n    }\n    // reference config\n    loadConsumerConfig()\n    // service config\n    loadProviderConfig()\n    // init the shutdown callback\n    GracefulShutdownInit()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf-json Generic Reference in Spring XML\nDESCRIPTION: Spring XML configuration for declaring a generic reference to a Dubbo service that uses Google Protobuf objects, setting the generic attribute to 'protobuf-json'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/pb-generic-reference.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" generic=\"protobuf-json\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol in Erlang's sys.config File\nDESCRIPTION: Example configuration for setting the serialization protocol in Dubbo's Erlang implementation. The configuration needs to be added to the 'dubboerl' application section in the sys.config file. Available protocols are 'hessian' (default) and 'json'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/languages/erlang/serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{protocol,hessian}\n]}\n```\n\n----------------------------------------\n\nTITLE: Storing Provider Metadata in ZookeeperMetadataReport\nDESCRIPTION: These methods implement the storage of provider metadata specifically for ZooKeeper. They create a persistent node in ZooKeeper with the metadata JSON as its content.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void doStoreProviderMetadata(MetadataIdentifier providerMetadataIdentifier, String serviceDefinitions) {\n    storeMetadata(providerMetadataIdentifier, serviceDefinitions);\n}\n\nprivate void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {\n    zkClient.create(getNodePath(metadataIdentifier), v, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Metadata Report Factory\nDESCRIPTION: SPI configuration to register a custom Redis metadata report factory implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\nredis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory\n```\n\n----------------------------------------\n\nTITLE: Registering Service and POJO\nDESCRIPTION: Initializes the provider service and registers the User POJO for Hessian2 serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tconfig.SetProviderService(new(UserProvider))\n\t// ------for hessian2------\n\thessian.RegisterPOJO(&User{})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handler Interface in Dubbo\nDESCRIPTION: Interface definition for custom exception handling in Dubbo's HTTP/REST implementation. Allows customizing log levels and exception handling responses with access to request metadata and method descriptors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic interface ExceptionHandler<E extends Throwable, T> {\n    /**\n     * Resolves the log level for a given throwable.\n     */\n    default Level resolveLogLevel(E throwable) {\n        return null;\n    }\n\n    /**\n     * Handle the exception and return a result.\n     */\n    default T handle(E throwable, RequestMetadata metadata, MethodDescriptor descriptor) {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Group for External Configuration\nDESCRIPTION: XML configuration to specify the Apollo group for external configuration. The group determines the namespace from which Dubbo reads the external configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center group=\"demo-provider\" address=\"apollo://localhost:8080\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Provider in XML\nDESCRIPTION: XML configuration for the Dubbo service provider, including application, registry, and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"rpc-callback-demo\" />\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.callback.implicit.NormalDemoService\" />\n<dubbo:service interface=\"org.apache.dubbo.callback.implicit.IDemoService\" ref=\"demoService\" version=\"1.0.0\" group=\"cn\"/>\n```\n\n----------------------------------------\n\nTITLE: Consumer Triple Protocol Configuration in Java\nDESCRIPTION: Java annotation configuration for explicitly specifying Triple protocol usage in consumer applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(protocol=\"tri\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Attributes in Dubbo XML\nDESCRIPTION: Example of using the dubbo:method tag as a child of dubbo:reference to configure method-specific timeout and retry values for a service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-method.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Creating API Interface for Dubbo Service\nDESCRIPTION: Defines a simple HelloService interface in the demo-api module that will be implemented by the Dubbo service provider and called by the consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Service Status in Kubernetes\nDESCRIPTION: Command to check if the Prometheus service is running in the dubbo-system namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/grafana.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl -n dubbo-system get svc prometheus\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Service Provider with Spring Context\nDESCRIPTION: This Java code demonstrates how to load the Spring XML configuration to start a Dubbo service provider. It uses a CountDownLatch to keep the application running after startup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws InterruptedException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/dubbo-demo-provider.xml\");\n        context.start();\n\n        System.out.println(\"dubbo service started\");\n        // to hang up main thread\n        new CountDownLatch(1).await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Factory in Dubbo XML\nDESCRIPTION: XML configuration for specifying the compiler extension to use in a Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/extension-factory.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application compiler=\"jdk\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Instance Revision in Dubbo\nDESCRIPTION: This method calculates and updates the revision of a service instance. It compares the existing revision with a newly calculated one based on the metadata info. If there's a change, it updates the instance metadata with the new revision.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected boolean calOrUpdateInstanceRevision(ServiceInstance instance) {\n    String existingInstanceRevision = getExportedServicesRevision(instance);\n    MetadataInfo metadataInfo = instance.getServiceMetadata();\n    String newRevision = metadataInfo.calAndGetRevision();\n    if (!newRevision.equals(existingInstanceRevision)) {\n        instance.getMetadata().put(EXPORTED_SERVICES_REVISION_PROPERTY_NAME, metadataInfo.getRevision());\n        return true;\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Consumer Service Operation Metadata JSON Structure\nDESCRIPTION: JSON structure of the service operation metadata reported by consumers, including configuration details used for service subscription.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/overview.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n \"valid\": \"true\",\n \"side\": \"consumer\",\n \"application\": \"metadatareport-configcenter-consumer\",\n \"methods\": \"sayHello\",\n \"default.timeout\": \"6666\",\n \"dubbo\": \"2.0.2\",\n \"interface\": \"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\",\n \"version\": \"1.1.1\",\n \"revision\": \"1.1.1\",\n \"group\": \"d-test\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring autoConcurrencyLimiter in XML\nDESCRIPTION: Enables the autoConcurrencyLimiter adaptive flow control algorithm at the provider level using XML configuration. This algorithm uses window-based sampling and exploration ratio for capacity management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/adaptive-concurrency-control.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider flowcontrol=\"autoConcurrencyLimiter\" />\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo Go Pixiu Docs\nDESCRIPTION: YAML configuration block defining metadata, aliases, and structure for the Dubbo Go Pixiu gateway documentation page. Includes URL aliases, page description, title information and weight for ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/docs3-v2/dubbo-go-pixiu/\n    - /en/docs3-v2/dubbo-go-pixiu/\n    - /en/overview/mannual/dubbo-go-pixiu/\n    - /en/overview/reference/pixiu/\ndescription: Introduction to Dubbo Go Pixiu\nlinkTitle: Pixiu gateway\ntitle: Introduction to Dubbo Go Pixiu\ntype: docs\nweight: 15\n```\n\n----------------------------------------\n\nTITLE: Running Console Output for XML-driven Dubbo Service Consumer\nDESCRIPTION: Console output showing the results of running DemoServiceConsumerXmlBootstrap with XML configuration. The output demonstrates load balancing between two Dubbo service provider instances with version 2.0.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nService [name :null , port : 20882] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20882] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :null , port : 20883] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\n```\n\n----------------------------------------\n\nTITLE: Retrieving Warned Classes via HTTP in Dubbo (Bash)\nDESCRIPTION: Demonstrates how to use curl to retrieve the list of classes that have triggered serialization warnings in JSON format from Dubbo's QoS HTTP endpoint. This is useful for automated monitoring and alerting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeWarnedClasses\n{\"warnedClasses\":[\"io.dubbo.test2.NotSerializable\",\"org.apache.dubbo.samples.NotSerializable\",\"io.dubbo.test.NotSerializable\",\"io.dubbo.test2.OthersSerializable\"]}\n```\n\n----------------------------------------\n\nTITLE: Custom Brave Configuration with Zipkin Exporter\nDESCRIPTION: Maven dependencies for a custom setup using Dubbo's observability starter with Brave as the tracer and Zipkin as the export destination.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n  <!-- Automatic assembly -->\n  <dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-spring-boot-observability-starter</artifactId>\n      <version>${version}</version>\n  </dependency>\n  <!-- Use Brave as tracer -->\n  <dependency>\n      <groupId>io.micrometer</groupId>\n      <artifactId>micrometer-tracing-bridge-brave</artifactId>\n      <version>${version}</version>\n  </dependency>\n  <!-- Export to Zipkin -->\n  <dependency>\n      <groupId>io.zipkin.reporter2</groupId>\n      <artifactId>zipkin-reporter-brave</artifactId>\n      <version>${version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Registry in Java\nDESCRIPTION: Example implementation of a custom Registry in Java. This class, XxxRegistry, implements the Registry interface with methods for registering, unregistering, subscribing, and unsubscribing services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.registry.Registry;\nimport org.apache.dubbo.registry.NotifyListener;\nimport org.apache.dubbo.common.URL;\n\npublic class XxxRegistry implements Registry {\n    public void register(URL url) {\n        // ...\n    }\n    public void unregister(URL url) {\n        // ...\n    }\n    public void subscribe(URL url, NotifyListener listener) {\n        // ...\n    }\n    public void unsubscribe(URL url, NotifyListener listener) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Brave Configuration with Zipkin Exporter\nDESCRIPTION: Maven dependencies for a custom setup using Dubbo's observability starter with Brave as the tracer and Zipkin as the export destination.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n  <!-- Automatic assembly -->\n  <dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-spring-boot-observability-starter</artifactId>\n      <version>${version}</version>\n  </dependency>\n  <!-- Use Brave as tracer -->\n  <dependency>\n      <groupId>io.micrometer</groupId>\n      <artifactId>micrometer-tracing-bridge-brave</artifactId>\n      <version>${version}</version>\n  </dependency>\n  <!-- Export to Zipkin -->\n  <dependency>\n      <groupId>io.zipkin.reporter2</groupId>\n      <artifactId>zipkin-reporter-brave</artifactId>\n      <version>${version}</version>\n  </dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol Thread Model\nDESCRIPTION: XML configuration example showing how to set up the Dubbo protocol with specific dispatcher and thread pool settings. This includes setting the protocol name, dispatcher type, thread pool type, and number of threads.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/thread-model.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" dispatcher=\"all\" threadpool=\"fixed\" threads=\"100\" />\n```\n\n----------------------------------------\n\nTITLE: Internal Service Export Method in DefaultModuleDeployer\nDESCRIPTION: The internal service export method that handles synchronous and asynchronous service export. It refreshes service configurations, checks if the service has already been exported, and then exports it accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n private void exportServiceInternal(ServiceConfigBase sc) {\n \t\n        ServiceConfig<?> serviceConfig = (ServiceConfig<?>) sc;\n        //服务配置刷新 配置优先级覆盖\n        if (!serviceConfig.isRefreshed()) {\n            serviceConfig.refresh();\n        }\n        //服务已经导出过了就直接返回\n        if (sc.isExported()) {\n            return;\n        }\n        //是否异步方式导出 全局配置或者服务级其中一个配置了异步则异步处理\n        if (exportAsync || sc.shouldExportAsync()) {\n        //异步其实就是使用线程来导出服务serviceExportExecutor\n            ExecutorService executor = executorRepository.getServiceExportExecutor();\n            CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n                try {\n                    if (!sc.isExported()) {\n                        sc.export();\n                        exportedServices.add(sc);\n                    }\n                } catch (Throwable t) {\n                    logger.error(getIdentifier() + \" export async catch error : \" + t.getMessage(), t);\n                }\n            }, executor);\n\n            asyncExportingFutures.add(future);\n        } else {\n        \t//同步导出服务\n            if (!sc.isExported()) {\n                sc.export();\n                exportedServices.add(sc);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Metadata Registration with Properties\nDESCRIPTION: Properties configuration to enable remote interface configuration metadata registration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Protocols for Dubbo in XML\nDESCRIPTION: This XML snippet shows how to configure both Dubbo and JSON-RPC protocols for a Dubbo service. The Dubbo protocol is used for Java-to-Java calls, while JSON-RPC supports cross-language calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n<dubbo:protocol name=\"jsonrpc\" port=\"8080\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Log for a Specific Machine in Dubbo\nDESCRIPTION: YAML configuration that enables access logs only for a specific machine IP address in Dubbo, allowing for targeted troubleshooting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - match\n     address:\n       oneof:\n        - wildcard: \"{ip}:*\"\n    side: provider\n    parameters:\n      accesslog: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MessagePack in Dubbo XML\nDESCRIPTION: XML-based configuration options for enabling MessagePack serialization at protocol, consumer, and reference levels in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"msgpack\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"msgpack\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"msgpack\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Dubbo Service in Client with Annotation\nDESCRIPTION: Demonstrates how to declare a reference to a Dubbo service using the @Reference annotation in a consumer component. This enables the client to make remote calls to the service whose address is discovered through ZooKeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"annotatedConsumer\")\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Port Multi-Protocol in YAML\nDESCRIPTION: YAML configuration to publish both dubbo and triple protocols on the same port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Provider Main Class\nDESCRIPTION: Java main class for the Dubbo provider application with Spring Boot and @EnableDubbo annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableDubbo\npublic class ProviderApplication {\n    public static void main(String[] args) throws Exception {\n        new EmbeddedZooKeeper(2181, false).start();\n\n        SpringApplication.run(ProviderApplication.class, args);\n        System.out.println(\"dubbo service started\");\n        new CountDownLatch(1).await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample OpenAPI YAML Output for Dubbo REST Services\nDESCRIPTION: Example of the OpenAPI specification in YAML format generated for Dubbo REST services. Shows the API paths, operations, parameters, request bodies, and schemas for the User service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.1\npaths:\n  /api/users/{id}:\n    get:\n      operationId: getUser\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n  /api/users/register:\n    post:\n      operationId: registerUser\n      requestBody:\n        description: a user to register\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          text/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int64\n            text/xml:\n              schema:\n                type: integer\n                format: int64\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Services with Spring XML\nDESCRIPTION: Example of configuring Dubbo services using Spring XML configuration. Demonstrates setting up application, registry, protocol, and service components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/overview.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\"/>\n<dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\" simplified=\"true\"/>\n<dubbo:metadata-report address=\"redis://127.0.0.1:6379\"/>\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Client Implementation\nDESCRIPTION: Client-side code for connecting to and invoking the Triple protocol service. Demonstrates reference configuration and service invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TriUnaryClient {\n    public static void main(String[] args) throws IOException {\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        ReferenceConfig<Greeter> ref = new ReferenceConfig<>();\n        ref.setInterface(Greeter.class);\n        ref.setUrl(\"tri://localhost:50052\");\n\n        bootstrap.reference(ref).start();\n        Greeter greeter = ref.get();\n\t\tfinal GreeterReply reply = greeter.greet(GreeterRequest.newBuilder().setName(\"name\").build());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Count Limiting\nDESCRIPTION: Implementation of thread count-based flow control for consumer side. Limits concurrent threads to 3 for the specified method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/sentinel.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlowRule flowRule = new FlowRule();\nflowRule.setResource(\"org.apache.dubbo.samples.sentinel.DemoService:sayHelloConsumerFlowControl(java.lang.String)\");\nflowRule.setCount(3);\nflowRule.setGrade(RuleConstant.FLOW_GRADE_THREAD);\nFlowRuleManager.loadRules(Collections.singletonList(flowRule));\n```\n\n----------------------------------------\n\nTITLE: Dubbo SPI Annotation Definition in Java\nDESCRIPTION: Shows the definition of the @SPI annotation used for marking Dubbo SPI interfaces, including options for default value and scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\npublic @interface SPI {\n    /**\n     * Default extension name\n     */\n    String value() default \"\";\n\n    /**\n     * Scope of SPI, default value is application scope.\n     */\n    ExtensionScope scope() default ExtensionScope.APPLICATION;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol Upgrade in Dubbo\nDESCRIPTION: YAML configuration example for upgrading Dubbo's serialization protocol from hessian2 to fastjson2. This configuration uses the prefer-serialization option introduced in Dubbo 3.2.0 to maintain backward compatibility during the upgrade process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/serialization-upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo.provider.prefer-serialization=fastjson2,hessian2\ndubbo.provider.serialization=hessian2\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Security via System Properties\nDESCRIPTION: Example of setting the Dubbo serialization security check level using JVM system properties, which can be passed as command-line arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n-Ddubbo.application.serialize-check-status=STRICT\n```\n\n----------------------------------------\n\nTITLE: Redis Registry Configuration - With Backup Nodes\nDESCRIPTION: Configuration for Redis registry with backup nodes specified in the URL parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocols in Spring XML\nDESCRIPTION: XML configuration to define multiple protocols with different ports for Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"dubbo-id\" name=\"dubbo\" port=\"20880\"/>\n<dubbo:protocol id=\"triple-id\" name=\"tri\" port=\"50051\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Protocols for Dubbo in XML\nDESCRIPTION: This XML snippet shows how to configure both Dubbo and JSON-RPC protocols for a Dubbo service. The Dubbo protocol is used for Java-to-Java calls, while JSON-RPC supports cross-language calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n<dubbo:protocol name=\"jsonrpc\" port=\"8080\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry in Application Properties\nDESCRIPTION: Application properties configuration to enable and configure Etcd as the registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=etcd://host:port\n```\n\n----------------------------------------\n\nTITLE: Configuring LivenessProbe Extension in Dubbo\nDESCRIPTION: Example of how to configure the LivenessProbe extension in Dubbo using a text file. This file maps the extension name to the implementing class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/liveness.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nxxx=com.xxx.XxxLivenessProbe\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Protocols for Dubbo in XML\nDESCRIPTION: This XML snippet shows how to configure both Dubbo and JSON-RPC protocols for a Dubbo service. The Dubbo protocol is used for Java-to-Java calls, while JSON-RPC supports cross-language calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n<dubbo:protocol name=\"jsonrpc\" port=\"8080\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Rule in Dubbo YAML Configuration\nDESCRIPTION: YAML configuration rule that increases the timeout value for UserService to 2000ms from the provider side. This rule will be applied to all service instances and propagated to consumers via the registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/timeout.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client for Streaming\nDESCRIPTION: Java code to configure a Dubbo client for accessing the streaming service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\tReferenceConfig<Greeter> ref = new ReferenceConfig<>();\n\tref.setInterface(Greeter.class);\n\tref.setProtocol(CommonConstants.TRIPLE);\n\n\tDubboBootstrap.getInstance().reference(ref).start();\n\tGreeter greeter = ref.get();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Host and Port in Dubbo XML\nDESCRIPTION: Basic configuration example for Redis registry center in Dubbo using URL format with host and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Server in Rust\nDESCRIPTION: Server implementation for the Dubbo Greeter service. It includes the main function to start the Dubbo server and the implementation of the Greeter service interface with the greet RPC method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// ./src/greeter/server.rs\nuse ...\n\n#[tokio::main]\nasync fn main() {\n    register_server(GreeterServerImpl {\n        name: \"greeter\".to_string(),\n    });\n\n    // Dubbo::new().start().await;\n    Dubbo::new()\n        .with_config({\n            let r = RootConfig::new();\n            match r.load() {\n                Ok(config) => config,\n                Err(_err) => panic!(\"err: {:?}\", _err), // response was droped\n            }\n        })\n        .start()\n        .await;\n}\n\n#[allow(dead_code)]\n#[derive(Default, Clone)]\nstruct GreeterServerImpl {\n    name: String,\n}\n\n// #[async_trait]\n#[async_trait]\nimpl Greeter for GreeterServerImpl {\n    async fn greet(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        println!(\"GreeterServer::greet {:?}\", request.metadata);\n\n        Ok(Response::new(GreeterReply {\n            message: \"hello, dubbo-rust\".to_string(),\n        }))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Plugin Execution Logic\nDESCRIPTION: Base implementation for plugin execution in AbstractShenyuPlugin, handling selector and rule matching logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.base.AbstractShenyuPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: 指定服务注册地址\nDESCRIPTION: 在 YAML 中指定服务注册的 IP 地址和端口。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n    host: 30.5.10.11 # 也可以是域名，如 dubbo.apache.org\n```\n\n----------------------------------------\n\nTITLE: Dubbo SPI Annotation Definition in Java\nDESCRIPTION: Shows the definition of the @SPI annotation used for marking Dubbo SPI interfaces, including options for default value and scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\npublic @interface SPI {\n    /**\n     * Default extension name\n     */\n    String value() default \"\";\n\n    /**\n     * Scope of SPI, default value is application scope.\n     */\n    ExtensionScope scope() default ExtensionScope.APPLICATION;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Method Handler\nDESCRIPTION: Configuration of RPC method handler for unary service methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmethod_handler = RpcMethodHandler.unary(\n        method=UnaryServiceServicer().say_hello, method_name=\"unary\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Metadata Center in YAML\nDESCRIPTION: Configuration to enable Zookeeper as a metadata center using YAML configuration format in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Metadata Registration with Properties\nDESCRIPTION: Properties configuration to enable remote interface configuration metadata registration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in XML\nDESCRIPTION: XML configuration to enable Nacos as the metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"nacos://127.0.0.1:8848\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Name Mapping for Memcached in Dubbo\nDESCRIPTION: This XML configuration demonstrates how to map non-standard method names to standard Memcached operations using the p tags in Dubbo's reference configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/memcached.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"com.foo.CacheService\" url=\"memcached://10.20.153.10:11211\" p:set=\"putFoo\" p:get=\"getFoo\" p:delete=\"removeFoo\" />\n```\n\n----------------------------------------\n\nTITLE: Client Implementation\nDESCRIPTION: Client-side code for connecting to and invoking the Triple protocol service. Demonstrates reference configuration and service invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TriUnaryClient {\n    public static void main(String[] args) throws IOException {\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        ReferenceConfig<Greeter> ref = new ReferenceConfig<>();\n        ref.setInterface(Greeter.class);\n        ref.setUrl(\"tri://localhost:50052\");\n\n        bootstrap.reference(ref).start();\n        Greeter greeter = ref.get();\n\t\tfinal GreeterReply reply = greeter.greet(GreeterRequest.newBuilder().setName(\"name\").build());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Registry with XML\nDESCRIPTION: Example of using the <dubbo:registry> tag to configure a Dubbo registry. This snippet shows the basic structure and some common attributes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry id=\"myRegistry\"\n               address=\"zookeeper://192.168.1.100:2181\"\n               protocol=\"zookeeper\"\n               timeout=\"5000\"\n               check=\"true\"\n               register=\"true\"\n               subscribe=\"true\"\n               group=\"dubbo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol for Timeout Interruption in Dubbo\nDESCRIPTION: Bean configuration for setting up the Dubbo protocol with the 'all2' dispatcher, which enables the timeout-based thread interruption functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/provider-timeout-release.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\t/**\n\t * 配置协议\n\t */\n\t@Bean\n\tpublic ProtocolConfig protocolConfig() {\n\t\tProtocolConfig protocolConfig = new ProtocolConfig();\n\t\tprotocolConfig.setName(\"dubbo\");\n\t\tprotocolConfig.setPort(-1);\n\t\tprotocolConfig.setTransporter(\"netty4\");\n\t\tprotocolConfig.setThreadpool(\"fixed\");\n        // 设置线程分发策略\n        protocolConfig.setDispatcher(\"all2\");\n        protocolConfig.setThreads(200);\n\t\treturn protocolConfig;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Dubbo User Cases Page\nDESCRIPTION: This YAML frontmatter defines metadata for a webpage about Dubbo user cases. It specifies the page title, link title, and weight for navigation ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"User Cases\"\nlinkTitle: \"User Cases\"\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: RPC Parameter Transformation\nDESCRIPTION: RpcParamTransformPlugin reads parameters from HTTP requests, saves them to the exchange context, and passes them to the RPC service for processing based on the request's content format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.base.RpcParamTransformPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Field Names with Jackson Annotations in Java\nDESCRIPTION: Shows how to customize JSON serialization by mapping object properties to specific JSON field names using Jackson annotations. This provides control over the JSON structure generated from Java objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class User implements Serializable {\n    \n    @JsonProperty(\"username\")\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ZkClient Dependencies in Maven\nDESCRIPTION: Maven dependency configuration for adding the ZkClient library, which is one of the supported Zookeeper client implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.sgroschupf</groupId>\n    <artifactId>zkclient</artifactId>\n    <version>0.11</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing GPG on macOS using Homebrew\nDESCRIPTION: Commands for installing GPG on macOS using Homebrew and verifying the installed version. GPG is required for signing release artifacts according to Apache requirements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install gpg\n$ gpg --version # Check version, should be 2.x\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Extension Class in Dubbo SPI\nDESCRIPTION: Illustrates the getExtension method in ExtensionLoader, which retrieves a specific extension class by name, implementing lazy loading and caching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic T getExtension(String name) {\n    if (name == null || name.length() == 0)\n        throw new IllegalArgumentException(\"Extension name == null\");\n    if (\"true\".equals(name)) {\n        // Get the default extension implementation class\n        return getDefaultExtension();\n    }\n    // Holder, as the name suggests, is used to hold the target object\n    Holder<Object> holder = cachedInstances.get(name);\n    // This logic ensures that only one thread can create the Holder object\n    if (holder == null) {\n        cachedInstances.putIfAbsent(name, new Holder<Object>());\n        holder = cachedInstances.get(name);\n    }\n    Object instance = holder.get();\n    // Double-check\n    if (instance == null) {\n        synchronized (holder) {\n            instance = holder.get();\n            if (instance == null) {\n                // Create extension instance\n                instance = createExtension(name);\n                // Set instance in holder\n                holder.set(instance);\n            }\n        }\n    }\n    return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Server Configuration and Startup\nDESCRIPTION: Server-side configuration for registering and starting the Triple protocol service. Sets up service configuration and bootstraps the Dubbo server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class TriUnaryServer {\n    public static void main(String[] args) throws IOException {\n        ServiceConfig<Greeter> service = new ServiceConfig<>();\n        service.setInterface(Greeter.class);\n        service.setRef(new GreeterImpl());\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50052))\n                .service(service)\n                .start().await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Pixiu and Dubbo-go services in Kubernetes\nDESCRIPTION: Kubernetes deployment command that applies a configuration to set up Pixiu gateway, Dubbo-go triple-servers, and Nacos server in a Kubernetes cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/pixiu-nacos-triple.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f https://raw.githubusercontent.com/dubbogo/triple-pixiu-demo/master/deploy/pixiu-triple-demo.yml\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Server\nDESCRIPTION: This shell command sets the DUBBO_GO_CONFIG_PATH environment variable and starts the Dubbo server using Go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/httpfilter/dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport DUBBO_GO_CONFIG_PATH={CURRENT_PATH}/dubbo-go-pixiu-samples/dubbohttpproxy/server/dubbo/profiles/dev/server.yml\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Java Method for Handling application/xml in Triple Protocol\nDESCRIPTION: Java implementation for receiving application/xml content in a Triple server. The method accepts a User object parameter that gets automatically populated from the XML data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    @Override\npublic ServerResponse greetXml(User user) {\n        System.out.println(user.getUsername());\n        System.out.println(user.getLocation());\n        return new ServerResponse(\"Server Received xml.\");\n        }\n```\n\n----------------------------------------\n\nTITLE: Basic Access Log Configuration in YAML\nDESCRIPTION: YAML configuration for enabling access logs for a provider application. This basic configuration sends access logs to the same output as the application's regular logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      accesslog: true\n```\n\n----------------------------------------\n\nTITLE: Configuring RouteChain Assembly in Nacos\nDESCRIPTION: This YAML example shows how to configure a RouteChain assembly stored in Nacos. Multiple VirtualService and DestinationRule pairs are defined to form a complete router chain for traffic control.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/mesh-rule.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nDataId: Demo.rule.yaml\nGROUP: HSF\n\ncontent:\n\nVirtualService A\n---\nDestinationRule A1\n---\nDestinationRule A2\n---\nVirtualService B\n---\nDestinationRule B\n---\nVirtualService C\n---\nDestinationRule C\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Limiting Method-Specific Concurrency per Client (Reference Side)\nDESCRIPTION: Configures the maximum number of concurrent executions (10) per client for a specific method (sayHello) on the reference side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" actives=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Triple Rest Service\nDESCRIPTION: cURL command to test the basic REST service endpoint with expected output.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Calls for dubbo-go Server\nDESCRIPTION: This YAML configuration demonstrates how to enable authentication on the server side in dubbo-go. It includes settings for enabling auth filter, specifying AK/SK, and other service-related configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-trusted-call.md#2025-04-08_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  \"UserProvider\":\n    # 可以指定多个registry，使用逗号隔开;不指定默认向所有注册中心注册\n    registry: \"hangzhouzk\"\n    protocol : \"dubbo\"\n    # 相当于dubbo.xml中的interface\n    interface : \"com.ikurento.user.UserProvider\"\n    loadbalance: \"random\"\n    # 本服务开启auth\n    auth: \"true\"  \n    # 启用auth filter，对请求进行验签\n    filter: \"auth\"\n    # 默认实现通过配置文件配置AK、SK\n    params:\n      .accessKeyId: \"SYD8-23DF\"\n      .secretAccessKey: \"BSDY-FDF1\"\n    warmup: \"100\"\n    cluster: \"failover\"\n    methods:\n      - name: \"GetUser\"\n        retries: 1\n        loadbalance: \"random\"\n```\n\n----------------------------------------\n\nTITLE: Docker Pull Command for Dubbo-Go-Pixiu\nDESCRIPTION: Command to pull the latest Dubbo-Go-Pixiu Docker image from Docker Hub.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/deployment.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull phial3/dubbo-go-pixiu:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS WriterInterceptor in Java for Dubbo REST\nDESCRIPTION: This code snippet shows how to create a custom JAX-RS WriterInterceptor to add GZIP compression to the output stream in a Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\npublic class GZIPWriterInterceptor implements WriterInterceptor {\n \n    @Override\n    public void aroundWriteTo(WriterInterceptorContext context)\n                    throws IOException, WebApplicationException {\n        OutputStream outputStream = context.getOutputStream();\n        context.setOutputStream(new GZIPOutputStream(outputStream));\n        context.proceed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zookeeper in Kubernetes\nDESCRIPTION: Kubernetes command to deploy Zookeeper using a configuration file provided by the Dubbo community. This creates all necessary Kubernetes resources for running Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/zookeeper.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Zookeeper in Kubernetes\nDESCRIPTION: Kubernetes command to deploy Zookeeper using a configuration file provided by the Dubbo community. This creates all necessary Kubernetes resources for running Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/zookeeper.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo QoS via System Properties\nDESCRIPTION: This snippet shows how to configure Dubbo QoS parameters using Java system properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-Ddubbo.application.qos.enable=true\n-Ddubbo.application.qos.port=33333\n-Ddubbo.application.qos.accept.foreign.ip=false\n```\n\n----------------------------------------\n\nTITLE: Publishing Dubbo Service\nDESCRIPTION: Main method to configure and start the Dubbo service provider\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n\tDubboBootstrap.getInstance()\n\t\t\t.protocol(ProtocolBuilder.newBuilder().name(\"tri\").port(50052).build())\n\t\t\t.service(ServiceBuilder.newBuilder().interfaceClass(GreetingsService.class).ref(new GreetingsServiceImpl()).build())\n\t\t\t.start()\n\t\t\t.await();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Exporter Implementation - Java\nDESCRIPTION: Example implementation of a custom Exporter class extending AbstractExporter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.support.AbstractExporter;\n \npublic class XxxExporter<T> extends AbstractExporter<T> {\n    public XxxExporter(Invoker<T> invoker) throws RemotingException{\n        super(invoker);\n        // ...\n    }\n    public void unexport() {\n        super.unexport();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Zookeeper Path Structure for Service Name Mapping\nDESCRIPTION: Shows the path structure used for storing service name to application name mappings in Zookeeper, which is essential for Dubbo 3.0's service introspection mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n/dubbo/mapping/{service name}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Client\nDESCRIPTION: Executes the Dubbo client using tsx runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpx tsx client.ts\n```\n\n----------------------------------------\n\nTITLE: Calling Bidirectional Streaming Method\nDESCRIPTION: Java code demonstrating how to call a bidirectional streaming method from the client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nStreamObserver<GreeterRequest> requestStreamObserver = greeter.biStream(new SampleStreamObserver());\nfor (int i = 0; i < 10; i++) {\n\tGreeterRequest request = GreeterRequest.newBuilder().setName(\"name-\" + i).build();\n\trequestStreamObserver.onNext(request);\n}\nrequestStreamObserver.onCompleted();\n```\n\n----------------------------------------\n\nTITLE: Creating User Identity-Based Routing in Istio VirtualService YAML\nDESCRIPTION: Defines an Istio VirtualService that routes traffic with the 'user: admin' header to the v2 version of the application, while all other traffic goes to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: dubbo-go-server\nspec:\n  hosts:\n    - dubbo-go-server\n  http:\n  - match:\n    - headers:\n        user:\n          exact: admin\n    route:\n      - destination:\n          host: dubbo-go-server\n          subset: v2\n  - route:\n    - destination:\n        host: dubbo-go-server\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Running Console Output for Annotation-driven Dubbo Service Consumer\nDESCRIPTION: Console output showing the results of running the DemoServiceConsumerBootstrap with annotation-driven configuration. The output demonstrates load balancing between two Dubbo service provider instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nService [name :demoService , port : 20880] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20880] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\nService [name :demoService , port : 20881] sayName(\"小马哥（mercyblitz）\") : Hello,小马哥（mercyblitz）\n```\n\n----------------------------------------\n\nTITLE: REST-style Ingress Configuration for Dubbo Service\nDESCRIPTION: YAML configuration for the Ingress resource that defines user-friendly REST-style HTTP routes to the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: gateway-higress-triple-provider.DEFAULT-GROUP.public.nacos\n  name: demo\n  namespace: default\nspec:\n    ingressClassName: higress\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        resource:\n                            apiGroup: networking.higress.io\n                            kind: McpBridge\n                            name: default\n                    path: /triple/demo\n                    pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty as REST Server in Dubbo\nDESCRIPTION: XML configuration for setting up Jetty as the embedded REST server implementation in Dubbo, which is the default option if not specified.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"jetty\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo-Go Server and Registering Service\nDESCRIPTION: This Go code snippet demonstrates how to start a Dubbo-Go server and register a service. It creates a new server instance, registers the GreetService handler, and starts serving.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/remote.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsrv, err := ins.NewServer()\nif err != nil {\n    panic(err)\n}\n\nif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n    panic(err)\n}\n\nif err := srv.Serve(); err != nil {\n    logger.Error(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Generic Invocation in Java with Spring Context\nDESCRIPTION: Shows how to retrieve the generic service from the Spring application context and invoke a method using the $invoke method. It specifies the method name, parameter types, and argument values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGenericService barService = (GenericService) applicationContext.getBean(\"barService\");\nObject result = barService.$invoke(\"sayHello\", new String[] { \"java.lang.String\" }, new Object[] { \"World\" });\n```\n\n----------------------------------------\n\nTITLE: Running Java Dubbo Provider\nDESCRIPTION: Commands to clone, build and run the Java Dubbo provider service. The provider runs on port 8888 and serves as the backend service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/java-interoperability.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ # clone the source code\n$ git clone https://github.com/apache/dubbo-samples.git\n$ cd dubbo-samples/dubbo-samples-triple/\n\n$ # build\n$ mvn clean compile package -DskipTests\n\n$ # run the provider\n$ java -Dprovider.port=8888 -jar ./target/dubbo-samples-triple-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Specifying TCP Listening Address in Dubbo Protocol Configuration (YAML)\nDESCRIPTION: Shows how to configure the TCP listening address in Dubbo protocol settings. This allows specifying the host IP or domain name and port that will be used for service registration and communication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n    host: 30.5.10.11 # It can also be a domain name, e.g., dubbo.apache.org\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in Dubbo API-based Projects\nDESCRIPTION: Java code for programmatically configuring OpenTelemetry tracing in a Dubbo API-based application. This includes setting up the tracing configuration with sampling, propagation type, and OTLP exporter endpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/otlp.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nTracingConfig tracingConfig = new TracingConfig();\n// Enable dubbo tracing\ntracingConfig.setEnabled(true);\n// Set sampling rate\ntracingConfig.setSampling(new SamplingConfig(1.0f));\n// Set Propagation, default is W3C, optional W3C/B3\ntracingConfig.setPropagation(new PropagationConfig(\"W3C\"));\n// Set trace reporting\nExporterConfig exporterConfig = new ExporterConfig();\n// Set to report trace to Zipkin\nexporterConfig.setZipkin(new ExporterConfig.OtlpConfig(\"http://localhost:4317\", Duration.ofSeconds(10), \"none\"));\ntracingConfig.setExporter(exporterConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing StreamObserver for Handling Streaming Responses\nDESCRIPTION: Implementation of the StreamObserver interface for handling streaming responses from the server. The class defines behavior for receiving data, handling errors, and processing stream completion.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static class SampleStreamObserver implements StreamObserver<GreeterReply> {\n\t@Override\n\tpublic void onNext(GreeterReply data) {\n\t\tLOGGER.info(\"stream <- reply:{}\", data);\n\t}\n\n\t// ......\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo and Zookeeper Dependencies for Non-Spring Boot Applications\nDESCRIPTION: Maven dependencies required for integrating Dubbo with Zookeeper in non-Spring Boot applications. This includes Dubbo core and Zookeeper dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>${dubbo.version}</version>\n    </dependency>\n    <!-- This dependency helps to introduce Curator and Zookeeper dependencies that are necessary for Dubbo to work with zookeeper as transitive dependencies. -->\n    <!-- Use this dependency only when Zookeeper Server version is 3.4.x or below -->\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-dependencies-zookeeper</artifactId>\n        <version>${dubbo.version}</version>\n        <type>pom</type>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Implementing EtcdServiceDiscoveryFactory in Java\nDESCRIPTION: This code snippet shows the implementation of EtcdServiceDiscoveryFactory, which extends AbstractServiceDiscoveryFactory to create an EtcdServiceDiscovery instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class EtcdServiceDiscoveryFactory extends AbstractServiceDiscoveryFactory {\n\n    @Override\n    protected ServiceDiscovery createDiscovery(URL registryURL) {\n        return new EtcdServiceDiscovery(applicationModel, registryURL);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Preferring injvm for Reference and Service in Dubbo XML\nDESCRIPTION: These configurations set the preference for using injvm (local calls) for specific references and services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference injvm=\"true\" .../>\n<dubbo:service injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Dubbo @Reference Annotation Definition\nDESCRIPTION: The @Reference annotation definition showing all available attributes for configuring a Dubbo service consumer, including interface specification, versioning, grouping, and various configuration references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.dubbo.config.annotation;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE}) // #1\npublic @interface Reference {\n    Class<?> interfaceClass() default void.class; // #2\n    String interfaceName() default \"\"; // #3\n    String version() default \"\"; // #4\n    String group() default \"\"; // #5\n    String url() default \"\"; // #6\n    \n    String application() default \"\"; // #7\n    String module() default \"\"; // #8\n    String consumer() default \"\"; // #9\n    String protocol() default \"\"; // #10\n    String monitor() default \"\"; // #11\n    String[] registry() default {}; // #12\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection Using Dubbo XML\nDESCRIPTION: Shows how to configure a direct URL connection to a service provider using Dubbo XML configuration. This bypasses the registry center for the specified service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.alibaba.xxx.XxxService\" url=\"dubbo://localhost:20890\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol in XML\nDESCRIPTION: Sets up the basic Dubbo protocol configuration with port 20880. This is the primary way to define the protocol used by Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Condition Routing Rule in Dubbo YAML\nDESCRIPTION: Example configuration that routes all calls to the getComment method of CommentService to instances in the Hangzhou region. The rule demonstrates core routing configuration including scope, versioning, and condition matching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/condition-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nforce: true\nruntime: true\nenabled: true\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - method=getComment => region=Hangzhou\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Dubbo REST\nDESCRIPTION: YAML configuration to enable debug logging for Dubbo's triple protocol and remoting components, useful for observing REST mapping and request-response processes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  level:\n    \"org.apache.dubbo.rpc.protocol.tri\": debug\n    \"org.apache.dubbo.remoting\": debug\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in Rust\nDESCRIPTION: Client implementation for the Dubbo Greeter service. It creates a client instance, connects to the server, sends a request, and processes the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// ./src/greeter/client.rs\nuse ...\n\n#[tokio::main]\nasync fn main() {\n    let mut cli = GreeterClient::new().with_uri(\"http://127.0.0.1:8888\".to_string());\n\n    println!(\"# unary call\");\n    let resp = cli\n        .greet(Request::new(GreeterRequest {\n            name: \"message from client\".to_string(),\n        }))\n        .await;\n    let resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, body) = resp.into_parts();\n    println!(\"Response: {:?}\", body);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Pixiu Demo with Kubernetes\nDESCRIPTION: Bash command to deploy the Triple-Pixiu demo in a Kubernetes cluster, which creates the necessary services and deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/http_triple.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f https://raw.githubusercontent.com/dubbogo/triple-pixiu-demo/master/deploy/pixiu-triple-demo.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Client\nDESCRIPTION: Client implementation demonstrating reactive streaming consumption using Project Reactor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class ReactorConsumer {\n    private static final Logger LOGGER = LoggerFactory.getLogger(ReactorConsumer.class);\n    private final GreeterService greeterService;\n\n    public ReactorConsumer() {\n        ReferenceConfig<GreeterService> referenceConfig = new ReferenceConfig<>();\n        referenceConfig.setInterface(GreeterService.class);\n        referenceConfig.setProtocol(CommonConstants.TRIPLE);\n        referenceConfig.setProxy(CommonConstants.NATIVE_STUB);\n        referenceConfig.setTimeout(10000);\n\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        bootstrap.application(new ApplicationConfig(\"tri-reactor-stub-server\"))\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n                .reference(referenceConfig)\n                .start();\n        GreeterService greeterService = referenceConfig.get();\n    }\n    \n    public static void main(String[] args) throws IOException {\n        ReactorConsumer reactorConsumer = new ReactorConsumer();\n        reactorConsumer.consumeManyToMany();\n        System.in.read();\n    }\n    \n    private void consumeManyToMany() {\n        greeterService.greetManyToMany(Flux.range(1, 10)\n                    .map(num ->\n                        GreeterRequest.newBuilder().setName(String.valueOf(num)).build())\n                    .doOnNext(req -> LOGGER.info(\"consumeManyToMany request data: {}\", req)))\n                .subscribe(res -> LOGGER.info(\"consumeManyToMany get response: {}\", res));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application Properties\nDESCRIPTION: YAML configuration for Dubbo application including protocol, registry, config-center, metadata-report, and serialization settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: ${spring.application.name}\n    logger: slf4j\n  protocol:\n    name: dubbo\n    port: -1\n    serialization: fastjson2\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n  config-center:\n    address: zookeeper://127.0.0.1:2181\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n  provider:\n    serialization: fastjson2\n  consumer:\n    serialization: fastjson2\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Instance Configuration\nDESCRIPTION: Code snippet showing the configuration options for creating a new Dubbo instance including registry and protocol settings\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/microservices.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nins, err := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_registry_nacos_server\"),\n\tdubbo.WithRegistry(\n\t\tregistry.WithNacos(),\n\t\tregistry.WithAddress(\"127.0.0.1:8848\"),\n\t),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20000),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Factory for Pixiu\nDESCRIPTION: Creates a filter factory that prepares the filter chain by adding the demo filter to both decode and encode chains. It also defines a configuration structure for the filter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\tDemoFilterFactory struct {\n\t\tconf *Config\n\t}\n\t// Config describe the config of Filter\n\tConfig struct {\n\t\tLogPrefix string `yaml:\"logPrefix,omitempty\"`\n\t}\n)\n\nfunc (f *DemoFilterFactory) PrepareFilterChain(ctx *contexthttp.HttpContext, chain filter.FilterChain) error {\n   demo := &DemoFilter{logPrefix: f.conf.LogPrefix}\n\n   chain.AppendDecodeFilters(demo)\n   chain.AppendEncodeFilters(demo)\n   return nil\n}\n\nfunc (f *DemoFilterFactory) Config() interface{} {\n   return f.conf\n}\n\nfunc (f *DemoFilterFactory) Apply() error {\n   return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reference for Manual Generic Call in Dubbo-Go\nDESCRIPTION: This function creates and initializes a ReferenceConfig for manual generic calls in Dubbo-Go. It sets up registry, protocol, and other necessary configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc newRefConf(appName, iface, protocol string) config.ReferenceConfig {\n\tregistryConfig := &config.RegistryConfig{\n\t\tProtocol: \"zookeeper\",\n\t\tAddress:  \"127.0.0.1:2181\",\n\t}\n\n\trefConf := config.ReferenceConfig{\n\t\tInterfaceName: iface,\n\t\tCluster:       \"failover\",\n\t\tRegistry:      []string{\"zk\"},\n\t\tProtocol:      protocol,\n\t\tGeneric:       \"true\",\n\t}\n\n\trootConfig := config.NewRootConfig(config.WithRootRegistryConfig(\"zk\", registryConfig))\n\t_ = rootConfig.Init()\n\t_ = refConf.Init(rootConfig)\n\trefConf.GenericLoad(appName)\n\n\treturn refConf\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastjson Serialization in YAML\nDESCRIPTION: YAML configuration for enabling Fastjson serialization in Spring Boot application.yml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   serialization: fastjson\n```\n\n----------------------------------------\n\nTITLE: Publishing Dubbo Service Definitions to Maven Repository\nDESCRIPTION: Maven command to deploy Dubbo service definitions to a remote repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Core Dubbo3 Dependency\nDESCRIPTION: Configuration for adding the core Dubbo3 dependency to your project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Validation Exception Handling\nDESCRIPTION: Example showing how to handle validation exceptions in Dubbo consumer applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.ConstraintViolationException;\n \nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n \nimport org.apache.dubbo.examples.validation.api.ValidationParameter;\nimport org.apache.dubbo.examples.validation.api.ValidationService;\nimport org.apache.dubbo.rpc.RpcException;\n \npublic class ValidationConsumer {   \n    public static void main(String[] args) throws Exception {\n        String config = ValidationConsumer.class.getPackage().getName().replace('.', '/') + \"/validation-consumer.xml\";\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(config);\n        context.start();\n        ValidationService validationService = (ValidationService)context.getBean(\"validationService\");\n        // Error\n        try {\n            parameter = new ValidationParameter();\n            validationService.save(parameter);\n            System.out.println(\"Validation ERROR\");\n        } catch (RpcException e) { // Throws RpcException\n            ConstraintViolationException ve = (ConstraintViolationException) e.getCause(); // Inside is a nested ConstraintViolationException\n            Set<ConstraintViolation<?>> violations = ve.getConstraintViolations(); // Can get a collection of detailed validation error information\n            System.out.println(violations);\n        }\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Metadata Center in Properties\nDESCRIPTION: Properties configuration to enable Zookeeper as the metadata center for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Settings in Dubbo XML\nDESCRIPTION: Example of using dubbo:method as a child element of dubbo:reference to configure method-specific timeout and retry settings for the findXxx method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-method.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.XxxService\">\n    <dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Dubbo and Nacos Dependencies in Maven\nDESCRIPTION: Maven dependencies required for integrating Dubbo with Nacos, including core Dubbo and Nacos client libraries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba.nacos</groupId>\n      <artifactId>nacos-client</artifactId>\n      <version>2.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Service-Level Registration Model Example in JSON\nDESCRIPTION: An example of the service-level registration model in JSON format, showing how services and their instances were registered before Dubbo-go v1.5.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-app-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"com.xxx.User\":[\n  {\"name\":\"instance1\", \"ip\":\"127.0.0.1\", \"metadata\":{\"timeout\":1000}},\n  {\"name\":\"instance2\", \"ip\":\"127.0.0.2\", \"metadata\":{\"timeout\":2000}},\n  {\"name\":\"instance3\", \"ip\":\"127.0.0.3\", \"metadata\":{\"timeout\":3000}}, \n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo-Python via pip\nDESCRIPTION: Command to install the Apache Dubbo Python package directly using pip package manager.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install apache-dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart Values for Dubbo-go Server Version 2\nDESCRIPTION: Values configuration for the Helm chart to specify the image repository, tag, and version labels for the version 2 of the Dubbo-go server application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  repository:  xxx/dubbo-go-server\n  pullPolicy: Always\n  tag: \"2.0.0\"\n\n# Dubbo-go-mesh version control labels\nversion:\n  labels:\n    dubbogoAppVersion: v2\n```\n\n----------------------------------------\n\nTITLE: Implementing a Standard gRPC Server\nDESCRIPTION: This code implements a standard gRPC server that creates a greeting service that prepends 'grpc:' to the request name. It listens on port 20001 for incoming gRPC requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype server struct {\n\tpb.UnimplementedGreetServiceServer\n}\n\nfunc (s *server) Greet(ctx context.Context, req *pb.GreetRequest) (*pb.GreetResponse, error) {\n\tresp := &pb.GreetResponse{Greeting: \"grpc:\" + req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:20001\")\n\tif err != nil {\n\t\tlogger.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreetServiceServer(s, &server{})\n\tlogger.Infof(\"server listening at %v\", lis.Addr())\n\tif err := s.Serve(lis); err != nil {\n\t\tlogger.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Status Check\nDESCRIPTION: Command to set up port forwarding for accessing deployment status.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl port-forward\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo Service\nDESCRIPTION: CURL command to test the Dubbo service endpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/sayHello/test\n```\n\n----------------------------------------\n\nTITLE: Setting Tag for Service Provider in Java\nDESCRIPTION: This code shows how to set a specific tag for a service provider using the ProviderConfig. The tag value 'red' will be used to categorize this provider in the tag routing system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/routing-rule-deprecated.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic ProviderConfig providerConfig(){\n\tProviderConfig providerConfig = new ProviderConfig();\n\tproviderConfig.setTag(\"red\");\n\treturn providerConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Consumer Execution Output\nDESCRIPTION: This shell output shows the logs when executing the Dubbo service consumer. It includes service reference information, connection details, and the result of the remote method call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[01/08/18 02:38:40:040 CST] main  INFO config.AbstractConfig:  [DUBBO] Refer dubbo service com.alibaba.dubbo.samples.api.GreetingService from url zookeeper://localhost:2181/com.alibaba.dubbo.registry.RegistryService?anyhost=true&application=dubbo-annotation-consumer&check=false&default.timeout=3000&dubbo=2.6.2&generic=false&interface=com.alibaba.dubbo.samples.api.GreetingService&methods=sayHello&pid=33001&register.ip=192.168.99.1&remote.timestamp=1533105502086&side=consumer&timestamp=1533105519216, dubbo version: 2.6.2, current host: 192.168.99.1\n[01/08/18 02:38:40:040 CST] main  INFO annotation.ReferenceBeanBuilder: <dubbo:reference object=\"com.alibaba.dubbo.common.bytecode.proxy0@673be18f\" singleton=\"true\" interface=\"com.alibaba.dubbo.samples.api.GreetingService\" uniqueServiceName=\"com.alibaba.dubbo.samples.api.GreetingService\" generic=\"false\" id=\"com.alibaba.dubbo.samples.api.GreetingService\" /> has been built.\nresult: hello, annotation\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Connection Limits for REST Service Consumers\nDESCRIPTION: XML configuration on the consumer side to set the maximum timeout and connection limits when calling a REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxx\" interface=\"xxx\" timeout=\"2000\" connections=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Provider Configuration in Java\nDESCRIPTION: This snippet shows the class definition for Dubbo's ProviderConfig, which contains all the configurable properties for a service provider. It includes options for network settings, thread management, serialization, and service behavior.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Provider Configuration in Java\nDESCRIPTION: This snippet shows the class definition for Dubbo's ProviderConfig, which contains all the configurable properties for a service provider. It includes options for network settings, thread management, serialization, and service behavior.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in XML\nDESCRIPTION: XML configuration to enable Nacos as a registry in a Dubbo application. Uses the dubbo:registry tag to specify the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"nacos://localhost:8848\" />\n```\n\n----------------------------------------\n\nTITLE: Verifying ASC Signature of Source Package\nDESCRIPTION: Command to verify the GPG signature (ASC) of the source release package, confirming it was signed by an authorized Apache committer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$  gpg --verify apache-dubbo-${release_version}-src.zip.asc\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-side Concurrent Calls at Service Level in XML\nDESCRIPTION: XML configuration to limit the concurrent call count of all methods in com.foo.BarService to a maximum of 10 per client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry with Authentication in YAML\nDESCRIPTION: Configures the Nacos registry with username and password for authentication in application.yml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: nacos://localhost:8848?username=nacos&password=nacos\n   register-mode: instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Arguments for Consistent Hash Algorithm\nDESCRIPTION: XML configuration to specify which parameters should be used for hashing in the consistent hash load balancing algorithm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n```\n\n----------------------------------------\n\nTITLE: Adaptive Extension Loading Implementation in Java\nDESCRIPTION: Main method for loading adaptive extensions in Dubbo, implementing caching and instance creation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic T getAdaptiveExtension() {\n    Object instance = cachedAdaptiveInstance.get();\n    if (instance == null) {\n        if (createAdaptiveInstanceError != null) {\n            throw new IllegalStateException(\"Failed to create adaptive instance: \" +\n                    createAdaptiveInstanceError.toString(),\n                    createAdaptiveInstanceError);\n        }\n\n        synchronized (cachedAdaptiveInstance) {\n            instance = cachedAdaptiveInstance.get();\n            if (instance == null) {\n                try {\n                    instance = createAdaptiveExtension();\n                    cachedAdaptiveInstance.set(instance);\n                } catch (Throwable t) {\n                    createAdaptiveInstanceError = t;\n                    throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\n                }\n            }\n        }\n    }\n\n    return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Access Log Output Format Example\nDESCRIPTION: Sample output format of Dubbo access logs showing timestamp, IP addresses, port numbers, service method calls with parameters, and Dubbo version information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[2022-12-30 12:36:31.15900] -> [2022-12-30 12:36:31.16000] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService login(java.lang.String,java.lang.String) [\"test\",\"\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:33.95900] -> [2022-12-30 12:36:33.95900] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:31.93500] -> [2022-12-30 12:36:34.93600] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Layout for Dubbo SDK Documentation\nDESCRIPTION: This HTML snippet creates a responsive grid layout for displaying links to various Dubbo SDK manuals. It uses Bootstrap-style classes for styling and includes cards for each supported language SDK.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{< blocks/section color=\"white\" height=\"auto\">}}\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a  href='{{< relref \"./java-sdk\" >}}'>Java SDK</a>\n                </h4>\n                <p>Dubbo Java SDK Manual</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./golang-sdk\" >}}'>Go SDK</a>\n                </h4>\n                <p>Dubbo Golang SDK Manual</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./nodejs-sdk\" >}}'>Node.js</a>\n                </h4>\n                <p>Dubbo Node.js SDK Manual</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./web-sdk\" >}}'>Web SDK</a>\n                </h4>\n                <p>Dubbo Web SDK Manual</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./rust-sdk\" >}}'>Rust SDK</a>\n                </h4>\n                <p>Dubbo Rust SDK Manual</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./python-sdk\" >}}'>Python SDK</a>\n                </h4>\n                <p>Dubbo Python SDK Manual</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n\n{{< /blocks/section >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider POM\nDESCRIPTION: Maven configuration for the Dubbo provider module. Includes Spring Boot and Dubbo dependencies needed for building a service provider application that can be tracked by Pinpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.example</groupId>\n\t<artifactId>demo-provider</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>demo-provider</name>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>sonatype-nexus-snapshots</id>\n\t\t\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.boot</groupId>\n\t\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t\t<version>0.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.example</groupId>\n\t\t\t<artifactId>demo-api</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Port Multi-Protocol in YAML\nDESCRIPTION: YAML configuration for publishing a service using both dubbo and triple protocols on different ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocols:\n   tri:\n     name: tri\n     port: 50051\n   dubbo:\n     name: dubbo\n     port: 20880\n```\n\n----------------------------------------\n\nTITLE: Registering MonitorFactory Extension in Dubbo\nDESCRIPTION: Shows how to register a custom MonitorFactory implementation with Dubbo's extension mechanism using a properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/monitor.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxMonitorFactory\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Consumer for Testing\nDESCRIPTION: Shell command to start the consumer application to verify that the Dubbo service is working properly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.gateway.apisix.dubbo.consumer.ConsumerApplication\"\n```\n\n----------------------------------------\n\nTITLE: Simple Return Null Mock Configuration\nDESCRIPTION: XML configuration for simple null return mock behavior in Dubbo 2.0.11+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/local-mock.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"return null\" />\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Registries with Vertical Bar Syntax\nDESCRIPTION: XML configuration showing how to temporarily connect to multiple registries using the vertical bar syntax, useful for testing environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Multi-registry configuration, using vertical bars to connect to multiple registries, and comma for multiple addresses in the same registry -->\n<dubbo:registry address=\"10.20.141.150:9090|10.20.154.177:9010\" />\n<!-- Reference the service -->\n<dubbo:reference id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing at Client Reference Level in Dubbo\nDESCRIPTION: XML configuration to set the load balancing strategy at the service consumer level. This example demonstrates setting 'roundrobin' as the strategy when referencing a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo REST Example\nDESCRIPTION: Commands to download, build, and run the Dubbo REST example project. This setup allows testing of REST-style service access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the example code\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# Run directly\nmvn spring-boot:run\n# Or package and run\nmvn clean package -DskipTests\njava -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Setting Default Consumer Protocol in YAML\nDESCRIPTION: YAML configuration to specify the default protocol for all service consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n consumer:\n   protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Parameters in XML\nDESCRIPTION: Demonstrates how to configure QOS parameters using XML configuration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"demo-provider\">\n    <dubbo:parameter key=\"qos.enable\" value=\"true\"/>\n    <dubbo:parameter key=\"qos.accept.foreign.ip\" value=\"false\"/>\n    <dubbo:parameter key=\"qos.port\" value=\"33333\"/>\n  </dubbo:application>\n  <dubbo:registry address=\"multicast://224.5.6.7:1234\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n  <dubbo:service interface=\"org.apache.dubbo.demo.provider.DemoService\" ref=\"demoService\"/>\n  <bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Installing Nacos with dubboctl\nDESCRIPTION: Command to install Nacos and other components like dubbo-control-plane and prometheus using dubboctl tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ dubboctl install --profile=demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Filter in dubbo-go YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to apply the Sentinel filter to a specific service reference in dubbo-go. It shows the consumer-side configuration for a UserProvider service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nreferences:\n  \"UserProvider\":\n    registry: \"hangzhouzk\"\n    protocol : \"dubbo\"\n    interface : \"com.ikurento.user.UserProvider\"\n    cluster: \"failover\"\n    filter: \"myConsumerFilter\"\n    methods :\n    - name: \"GetUser\"\n      retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed Token Authorization in Dubbo XML\nDESCRIPTION: Shows how to configure a fixed password-like token at the provider level. This setting applies a specific token value to all services exposed by the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/token-authorization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--固定token令牌，相当于密码-->\n<dubbo:provider token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-Side Concurrent Calls at Method Level with Annotations\nDESCRIPTION: Java annotation configuration to limit the concurrent calls from a client to a specific method to a maximum of 10 using the @DubboReference annotation with method attributes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(actives=10, methods = {@Method(name=\"sayHello\",executes=10)})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Declaring Dubbo Service with Multiple Protocols\nDESCRIPTION: Java annotation to expose a service implementation under multiple protocols defined in the configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(protocol=\"dubbo-id,triple-id\")\nprivate DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Exporting Dubbo Services using Protocol Configuration\nDESCRIPTION: This method handles the export of Dubbo services based on protocol configuration. It determines whether to export services locally, remotely, or both based on the scope parameter. The process includes configuring URLs, creating Invokers, and registering with service registries if available.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\n    \n    // 省略无关代码\n    \n    if (ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\n            .hasExtension(url.getProtocol())) {\n        // 加载 ConfiguratorFactory，并生成 Configurator 实例，然后通过实例配置 url\n        url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory.class)\n                .getExtension(url.getProtocol()).getConfigurator(url).configure(url);\n    }\n\n    String scope = url.getParameter(Constants.SCOPE_KEY);\n    // 如果 scope = none，则什么都不做\n    if (!Constants.SCOPE_NONE.toString().equalsIgnoreCase(scope)) {\n        // scope != remote，导出到本地\n        if (!Constants.SCOPE_REMOTE.toString().equalsIgnoreCase(scope)) {\n            exportLocal(url);\n        }\n\n        // scope != local，导出到远程\n        if (!Constants.SCOPE_LOCAL.toString().equalsIgnoreCase(scope)) {\n            if (registryURLs != null && !registryURLs.isEmpty()) {\n                for (URL registryURL : registryURLs) {\n                    url = url.addParameterIfAbsent(Constants.DYNAMIC_KEY, registryURL.getParameter(Constants.DYNAMIC_KEY));\n                    // 加载监视器链接\n                    URL monitorUrl = loadMonitor(registryURL);\n                    if (monitorUrl != null) {\n                        // 将监视器链接作为参数添加到 url 中\n                        url = url.addParameterAndEncoded(Constants.MONITOR_KEY, monitorUrl.toFullString());\n                    }\n\n                    String proxy = url.getParameter(Constants.PROXY_KEY);\n                    if (StringUtils.isNotEmpty(proxy)) {\n                        registryURL = registryURL.addParameter(Constants.PROXY_KEY, proxy);\n                    }\n\n                    // 为服务提供类(ref)生成 Invoker\n                    Invoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(Constants.EXPORT_KEY, url.toFullString()));\n                    // DelegateProviderMetaDataInvoker 用于持有 Invoker 和 ServiceConfig\n                    DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n\n                    // 导出服务，并生成 Exporter\n                    Exporter<?> exporter = protocol.export(wrapperInvoker);\n                    exporters.add(exporter);\n                }\n                \n            // 不存在注册中心，仅导出服务\n            } else {\n                Invoker<?> invoker = proxyFactory.getInvoker(ref, (Class) interfaceClass, url);\n                DelegateProviderMetaDataInvoker wrapperInvoker = new DelegateProviderMetaDataInvoker(invoker, this);\n\n                Exporter<?> exporter = protocol.export(wrapperInvoker);\n                exporters.add(exporter);\n            }\n        }\n    }\n    this.urls.add(url);\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Protocol Options Configuration\nDESCRIPTION: Comprehensive configuration of Dubbo protocol including server, client, codec, serialization, and threading options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"9090\" server=\"netty\" client=\"netty\" codec=\"dubbo\" serialization=\"hessian2\" charset=\"UTF-8\" threadpool=\"fixed\" threads=\"100\" queues=\"0\" iothreads=\"9\" buffer=\"8192\" accepts=\"1000\" payload=\"8388608\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Service via HTTP\nDESCRIPTION: Example of accessing a Dubbo service using HTTP/1.1 POST request with curl command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50051/org.apache.dubbo.demo.DemoService/sayHello\n```\n\n----------------------------------------\n\nTITLE: Dubbo MonitorConfig Class Definition\nDESCRIPTION: Configuration class for Dubbo monitoring functionality. Contains settings for monitor connection, authentication, and reporting intervals.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MonitorConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Sending Behavior in Asynchronous Calls\nDESCRIPTION: Example of configuring whether to wait for message sending completion in asynchronous calls using the sent parameter. This controls whether exceptions are thrown if message sending fails.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name = \"sayHello\", timeout = 5000, sent = true)})  \nprivate AsyncService asyncService;  \n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Dubbo and Apollo\nDESCRIPTION: Maven dependencies required for integrating Dubbo with Apollo configuration center. Includes Dubbo core, Apollo OpenAPI, and Apollo Client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.0.9</version>\n</dependency>\n<dependency>\n    <groupId>com.ctrip.framework.apollo</groupId>\n    <artifactId>apollo-openapi</artifactId>\n    <version>2.0.0</version>\n</dependency>\n<dependency>\n    <groupId>com.ctrip.framework.apollo</groupId>\n    <artifactId>apollo-client</artifactId>\n    <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Services with Multiple Registry Centers in Dubbo (XML Configuration)\nDESCRIPTION: This snippet demonstrates how to configure a Dubbo service to register with multiple registry centers simultaneously. It defines two registry centers (Hangzhou and Qingdao) and registers a HelloService to both of them.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" default=\"false\" />\n    <!-- 向多个注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"hangzhouRegistry,qingdaoRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Instance Dubbo Applications\nDESCRIPTION: This code demonstrates how to create multiple Dubbo instances using DubboBootstrap. It shows the creation of service and reference configurations, setting up multiple applications and modules, and managing their lifecycles independently.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/multi-instance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    ServiceConfig<DemoService> service = new ServiceConfig<>();\n    service.setInterface(DemoService.class);\n    service.setRef(new DemoServiceImpl());\n\n    ReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();\n    reference1.setInterface(DemoService.class);\n\n    ReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();\n    reference2.setInterface(DemoService.class);\n\n\t// 创建一个启动器（自动创建新 ApplicationModel）\n    DubboBootstrap bootstrap1 = DubboBootstrap.newInstance();\n\t// 指定应用名\n    bootstrap1.application(new ApplicationConfig(\"dubbo-demo-app-1\"))\n        .registry(new RegistryConfig(\"nacos://localhost:8848\"))\n        // 创建一个模块\n        .newModule()\n        \t// 在模块内发布服务\n    \t\t.service(service)\n        .endModule()\n        // 创建一个模块\n        .newModule()\n        \t// 在模块内订阅服务\n    \t\t.reference(reference1)\n        .endModule()\n        .start();\n\n\t// 创建一个启动器（自动创建新 ApplicationModel）\n    DubboBootstrap bootstrap2 = DubboBootstrap.newInstance();\n\t// 指定应用名\n    bootstrap2.application(new ApplicationConfig(\"dubbo-demo-app-2\"))\n        .registry(new RegistryConfig(\"nacos://localhost:8848\"))\n        // 创建一个模块\n        .newModule()\n        \t// 在模块内订阅服务\n    \t\t.reference(reference2)\n        .endModule()\n        .start();\n\n\t// stub1 与 stub2 是两个独立的订阅，互相隔离\n\n\t// 订阅的 stub\n    DemoService stub1 = reference1.get();\n    System.out.println(stub1.sayHello(\"Hello World!\"));\n\n\t// 订阅的 stub\n    DemoService stub2 = reference2.get();\n    System.out.println(stub2.sayHello(\"Hello World!\"));\n\n    bootstrap1.stop();\n    bootstrap2.stop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo-specific Parameters in Dubbo\nDESCRIPTION: Properties configuration to set Apollo-specific parameters in Dubbo, such as apollo.meta and env. These parameters can be used to customize the Apollo integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=apollo://localhost:8080\n\ndubbo.config-center.prameters.apollo.meta=xxx\ndubbo.config-center.prameters.env=xxx\n```\n\n----------------------------------------\n\nTITLE: Using dubbo:protocol XML Configuration Element\nDESCRIPTION: Example of the dubbo:protocol XML element which corresponds to the ProtocolConfig class in Dubbo. This configuration allows specifying service provider protocol settings like port, host, thread pool configurations, and other parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Trust Settings via Java\nDESCRIPTION: Demonstrates configuration of auto-trust serialization settings using ApplicationConfig\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setAutoTrustSerializeClass(true);\napplicationConfig.setTrustSerializeClassLevel(3);\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo REST Example\nDESCRIPTION: Commands to download, build, and run the Dubbo REST example project. This setup allows testing of REST-style service access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the example code\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# Run directly\nmvn spring-boot:run\n# Or package and run\nmvn clean package -DskipTests\njava -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo REST Example\nDESCRIPTION: Commands to download, build, and run the Dubbo REST example project. This setup allows testing of REST-style service access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the example code\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# Run directly\nmvn spring-boot:run\n# Or package and run\nmvn clean package -DskipTests\njava -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Initializing DefaultFuture for RPC Request in Java\nDESCRIPTION: This snippet shows the constructor of DefaultFuture, which initializes the object with request ID, channel, and timeout. It also stores mappings of request ID to DefaultFuture and channel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nthis.timeout = timeout > 0 ? timeout : channel.getUrl().getPositiveParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);\n// 存储 <requestId, DefaultFuture> 映射关系到 FUTURES 中\nFUTURES.put(id, this);\nCHANNELS.put(id, channel);\n```\n\n----------------------------------------\n\nTITLE: Defining API Interface and Data Structures\nDESCRIPTION: Implementation of the service interface and data structures used for communication between client and server. Includes a User structure and UserProvider interface with initialization code for Hessian serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage api\n\nimport (\n\t\"context\"\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\thessian \"github.com/apache/dubbo-go-hessian2\"\n\t\"time\"\n)\n\n//1. 定义传输结构， 如需 Java 互通，字段需要与 Java 侧对应，首字母大写\ntype User struct {\n\tID   string\n\tName string\n\tAge  int32\n\tTime time.Time\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn \"org.apache.dubbo.User\" // 如果与 Java 互通，需要与 Java 侧 User class全名对应,\n}\n\n\nvar (\n\tUserProviderClient = &UserProvider{} // 客户端指针\n)\n\n// 2。 定义客户端存根类：UserProvider\ntype UserProvider struct {\n\t// dubbo标签，用于适配go侧客户端大写方法名 -> java侧小写方法名，只有 dubbo 协议客户端才需要使用\n\tGetUser  func(ctx context.Context, req int32) (*User, error) //`dubbo:\"getUser\"`\n}\n\nfunc init(){\n\thessian.RegisterPOJO(&User{}) // 注册传输结构到 hessian 库\n\t// 注册客户端存根类到框架，实例化客户端接口指针 userProvider\n\tconfig.SetConsumerService(UserProviderClient)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Interface Caching in Dubbo with XML\nDESCRIPTION: XML configuration for enabling LRU caching on a client-side Dubbo service reference at the interface level. This applies caching to all methods of the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.DemoService\" cache=\"lru\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin Console\nDESCRIPTION: Sets up port forwarding to access the Dubbo Admin console\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/dubbo-admin -n dubbo-system 38080:38080\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo2 IP Specification Plugin Dependency\nDESCRIPTION: Maven dependency configuration for adding the Dubbo2 IP specification plugin to the project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-cluster-specify-address-dubbo2</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Tags for Dynamic Routing\nDESCRIPTION: Java code example showing how to set tags for dynamic routing on the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"Hangzhou\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Using XML\nDESCRIPTION: Shows XML-based configuration for Dubbo provider, including application setup, registry configuration, and service exposure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- dubbo-provier.xml -->\n\n  <dubbo:application name=\"demo-provider\"/>\n  <dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n\n  <dubbo:registry address=\"zookeeper://127.0.0.1:2181\" simplified=\"true\"/>\n  <dubbo:metadata-report address=\"redis://127.0.0.1:6379\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n  <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n  <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Service-Specific Protocol Configuration\nDESCRIPTION: Configuration to specify the Dubbo protocol for a specific service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" protocol=\"dubbo\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Service-specific Deadline Mechanism\nDESCRIPTION: Enable deadline mechanism for specific service using @DubboReference annotation with parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(timeout=5000, parameters={\"enable-timeout-countdown\", \"true\"})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring New Version Service Provider\nDESCRIPTION: XML configuration for defining a new version (2.0.0) of a service provider in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"2.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Generic Service API Programming\nDESCRIPTION: Demonstrates programmatic configuration and invocation of generic services using Dubbo's API approach.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-generic-invoke.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig application = new ApplicationConfig()ApplicationConfig application = new ApplicationConfig();\napplication.setName(\"api-generic-consumer\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://127.0.0.1:2181\");\n\napplication.setRegistry(registry);\n\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();\n// weak type interface name\nreference.setInterface(\"com.alibaba.dubbo.samples.generic.api.IUserService\");\n// declared as a generalized interface\nreference.setGeneric(true);\n\nreference.setApplication(application);\n\n// replace all interface references with com.alibaba.dubbo.rpc.service.GenericService\nGenericService genericService = reference.get();\n\nString name = (String) genericService.$invoke(\"delete\", new String[]{int.class.getName()}, new Object[]{1});\nSystem.out.println(name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Container in Java for Dubbo\nDESCRIPTION: This code demonstrates how to create a custom container by implementing the Container interface in Dubbo. It includes placeholders for start and stop methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\norg.apache.dubbo.container.Container;\n\npublic class XxxContainer implements Container {\n    public Status start() {\n        // ...\n    }\n    public Status stop() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Dubbo Server Thread Pool Exhaustion\nDESCRIPTION: This log excerpt shows a warning when the Dubbo server thread pool becomes exhausted. It indicates that the concurrency limit has been reached, which causes new requests to be rejected to protect the server from overload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[27/02/23 05:37:40:040 CST] NettyServerWorker-5-2  WARN support.AbortPolicyWithReport:  [DUBBO] Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-30.221.144.195:20880, Pool Size: 20 (active: 20, core: 20, max: 20, largest: 20), Task: 27 (completed: 7), ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in Properties File\nDESCRIPTION: This properties snippet shows various ways to enable Kryo serialization in a dubbo.properties file, including global, consumer, and service-specific configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.serialization=kryo\n\n# or\ndubbo.consumer.serialization=kryo\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=kryo\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Dependencies for Non-IDL Mode\nDESCRIPTION: Command to install the Dubbo core and web transport libraries required for implementing the non-IDL mode client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apachedubbo/dubbo @apachedubbo/dubbo-web\n```\n\n----------------------------------------\n\nTITLE: Accessing serializeCheckStatus via HTTP in Dubbo\nDESCRIPTION: This snippet shows how to use a curl command to access the 'serializeCheckStatus' QoS command in Dubbo via HTTP. It returns the result in JSON format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeCheckStatus      \n{\"checkStatus\":\"WARN\",\"allowedPrefix\":[...],\"checkSerializable\":true,\"disAllowedPrefix\":[...]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer in XML\nDESCRIPTION: Spring XML configuration for consuming a Dubbo service, including application settings and service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    <context:property-placeholder/>\n\n    <dubbo:application name=\"demo-consumer\"/>\n\n    <dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n    <dubbo:reference id=\"demoService\" check=\"true\" interface=\"org.apache.dubbo.samples.basic.api.DemoService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer in XML\nDESCRIPTION: Spring XML configuration for consuming a Dubbo service, including application settings and service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    <context:property-placeholder/>\n\n    <dubbo:application name=\"demo-consumer\"/>\n\n    <dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n    <dubbo:reference id=\"demoService\" check=\"true\" interface=\"org.apache.dubbo.samples.basic.api.DemoService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider with Spring XML\nDESCRIPTION: This XML configuration declares a Dubbo service provider, including application name, registry address, service implementation bean, and service exposure. It enables token verification for all services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    <context:property-placeholder/>\n\n    <dubbo:application name=\"demo-provider\"/>\n\n    <dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n    <dubbo:provider token=\"true\"/>\n\n    <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n\n    <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Logger in XML\nDESCRIPTION: Demonstrates how to configure the logging framework in the dubbo.xml file. This approach uses XML configuration to set log4j as the logger for the Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/logger-strategy.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application logger=\"log4j\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Telnet Handlers in Dubbo XML\nDESCRIPTION: XML configuration for specifying Telnet handlers in Dubbo protocols and providers. This allows customization of available Telnet commands.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/telnet-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol telnet=\"xxx,yyy\" />\n<!-- Default value setting, used when <dubbo:protocol> does not have a telnet attribute -->\n<dubbo:provider telnet=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing BroadcastClusterInvoker in Dubbo\nDESCRIPTION: This code snippet demonstrates the implementation of BroadcastClusterInvoker, which calls each service provider sequentially. If any provider throws an error, an exception is thrown after all invocations are completed. This class is typically used to notify all providers to update cache or local resource information like logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class BroadcastClusterInvoker<T> extends AbstractClusterInvoker<T> {\n\n    @Override\n    public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        checkInvokers(invokers, invocation);\n        RpcContext.getContext().setInvokers((List) invokers);\n        RpcException exception = null;\n        Result result = null;\n        // 遍历 Invoker 列表，逐个调用\n        for (Invoker<T> invoker : invokers) {\n            try {\n                // 进行远程调用\n                result = invoker.invoke(invocation);\n            } catch (RpcException e) {\n                exception = e;\n                logger.warn(e.getMessage(), e);\n            } catch (Throwable e) {\n                exception = new RpcException(e.getMessage(), e);\n                logger.warn(e.getMessage(), e);\n            }\n        }\n        \n        // exception 不为空，则抛出异常\n        if (exception != null) {\n            throw exception;\n        }\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Defined Routes in Istio Virtual Services\nDESCRIPTION: This command retrieves and displays the YAML configuration of the virtual services, showing the routing rules for each microservice in the Bookinfo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservices -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Security via Properties File\nDESCRIPTION: Properties configuration example for setting the serialization security check level in Dubbo through Spring Properties or dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.serialize-check-status=STRICT\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go Client Reference\nDESCRIPTION: This YAML configuration sets up the Dubbo-go client reference, specifying the protocol, interface, group, and version to match the Java server configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreferences:\n  GreeterClientImpl:\n    protocol: tri\n    interface: com.apache.dubbo.sample.basic.IGreeter # must be compatible with grpc or dubbo-java\n    group: dubbogo # 需要与服务端对应 默认为空\n    version: v1.0.1 # 需要与服务端对应 默认为空\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Maven Plugin for Native Image Processing\nDESCRIPTION: This XML configuration sets up the Dubbo Maven Plugin for Native Image processing. It specifies the main class and configures the plugin to run during the process-sources phase, executing the dubbo-process-aot goal.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/maven-plugin.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-maven-plugin</artifactId>\n    <version>${dubbo.version}</version>\n    <configuration>\n        <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>process-sources</phase>\n            <goals>\n                <goal>dubbo-process-aot</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Importing Interface Library in Rebar Config (Erlang)\nDESCRIPTION: This code demonstrates how to import both the Dubbo Erlang library and a custom interface library into a project's rebar.config. It includes placeholders for the interface library's Git repository URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n{deps, [\n    {dubboerl, {git, \"https://github.com/apache/dubbo-erlang.git\", {branch, \"master\"}}},\n    {dubbo_service,{git,\"${INTERFACE_LIB_URL}\",{branch,\"master\"}}} %% replace ${INTERFACE_LIB_URL} with your lib git repo URL\n]}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocols in Spring Boot YAML\nDESCRIPTION: Configuration in application.yml to define multiple protocols with different ports for Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocols:\n    dubbo-id:\n      name: dubbo\n      port: 20880\n    tri-id:\n      name: tri\n      port: 50051\n```\n\n----------------------------------------\n\nTITLE: addService Method in MetadataInfo\nDESCRIPTION: Implementation of the addService method in MetadataInfo that generates service-level metadata and adds the URL to the exported service URLs collection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic synchronized void addService(URL url) {\n        // fixme, pass in application mode context during initialization of MetadataInfo.\n        //元数据参数过滤器扩展获取:MetadataParamsFilter\n        if (this.loader == null) {\n            this.loader = url.getOrDefaultApplicationModel().getExtensionLoader(MetadataParamsFilter.class);\n        }\n        //元数据参数过滤器获取\n        List<MetadataParamsFilter> filters = loader.getActivateExtension(url, \"params-filter\");\n        // generate service level metadata\n        //生成服务级别的元数据\n        ServiceInfo serviceInfo = new ServiceInfo(url, filters);\n        this.services.put(serviceInfo.getMatchKey(), serviceInfo);\n        // extract common instance level params\n        extractInstanceParams(url, filters);\n\n        if (exportedServiceURLs == null) {\n            exportedServiceURLs = new ConcurrentSkipListMap<>();\n        }\n        addURL(exportedServiceURLs, url);\n        updated = true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom PageHandler in Dubbo SPI Configuration\nDESCRIPTION: Properties file content for registering a custom PageHandler implementation with Dubbo's SPI (Service Provider Interface) mechanism. This file should be placed in the META-INF/dubbo directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/page.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxPageHandler\n```\n\n----------------------------------------\n\nTITLE: Accessing ApplicationModel Using Static Methods (Original Method)\nDESCRIPTION: Shows the original static method approach for obtaining shared application instance data before the multiple-instance transformation in Dubbo 3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/develop.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nApplicationModel.getConfigManager()\nApplicationModel.getEnvironment()\nApplicationModel.getServiceRepository()\nApplicationModel.getExecutorRepository()\nApplicationModel.getName()\n```\n\n----------------------------------------\n\nTITLE: Accessing Zookeeper Container\nDESCRIPTION: Command to access the Zookeeper container's shell.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it zookeeper bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Groups for Dubbo Providers in XML\nDESCRIPTION: This snippet shows how to define service groups for different implementations of the same interface on the provider side. It uses the 'group' attribute in the dubbo:service tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-group.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service group=\"feedback\" interface=\"com.xxx.IndexService\" />\n<dubbo:service group=\"member\" interface=\"com.xxx.IndexService\" />\n```\n\n----------------------------------------\n\nTITLE: Virtual Service Configuration for Istio Routing\nDESCRIPTION: This YAML snippet shows the configuration of virtual services in Istio, defining routing rules for the details, productpage, ratings, and reviews services to their respective v1 subsets.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer with Spring Annotations\nDESCRIPTION: Shows how to configure a Dubbo service consumer using @Configuration and @EnableDubbo annotations. It sets up application, consumer, and registry configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.action\")\n@ComponentScan(value = {\"com.alibaba.dubbo.samples.action\"})\nstatic class ConsumerConfiguration {\n    @Bean // #1\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"dubbo-annotation-consumer\");\n        return applicationConfig;\n    }\n\n    @Bean // #2\n    public ConsumerConfig consumerConfig() {\n        ConsumerConfig consumerConfig = new ConsumerConfig();\n        consumerConfig.setTimeout(3000);\n        return consumerConfig;\n    }\n\n    @Bean // #3\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout Rule in YAML for Dubbo Service\nDESCRIPTION: This YAML configuration sets a new timeout of 2000ms for the UserService provider. It uses the Dubbo v3.0 configuration format to adjust the timeout parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/timeout.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Class for Primitive Return Types in REST Services\nDESCRIPTION: Example of creating a wrapper class for primitive return types since JAXB cannot directly serialize primitive types. This pattern implements the Data Transfer Object (DTO) pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class RegistrationResult implements Serializable {\n    \n    private Long id;\n    \n    public RegistrationResult() {\n    }\n    \n    public RegistrationResult(Long id) {\n        this.id = id;\n    }\n    \n    public Long getId() {\n        return id;\n    }\n    \n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Method-Level Timeout on Consumer Side\nDESCRIPTION: Configures a 5-second timeout specifically for the sayHello method of DemoService on the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name = \"sayHello\", timeout = 5000)})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Server with YAML\nDESCRIPTION: Defines the Dubbo server configuration using a YAML file. This includes service definitions, protocol settings, and network binding information for the Dubbo server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: dubbo\nservice:\n  org.apache.dubbo.sample.tri.Greeter:\n    version: 1.0.0\n    group: test\n    protocol: triple\n    registry: ''\n    serializer: json\n    protocol_configs:\n      triple:\n        ip: 0.0.0.0\n        port: '8888'\n        name: triple\nprotocols:\n  triple:\n    ip: 0.0.0.0\n    port: '8888'\n    name: triple\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Key Generation\nDESCRIPTION: Demonstrates how to customize the cache key generation strategy by providing a custom KeyGenerator implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nKeyGenerator keyGenerator = new ...\nReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator);\n```\n\n----------------------------------------\n\nTITLE: Creating Business Tables for the Microservices Example in SQL\nDESCRIPTION: SQL script for creating the necessary business tables: storage_tbl for inventory, order_tbl for orders, and account_tbl for user accounts. These tables store the application data for the example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS `storage_tbl`;\nCREATE TABLE `storage_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `commodity_code` varchar(255) DEFAULT NULL,\n  `count` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY (`commodity_code`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `order_tbl`;\nCREATE TABLE `order_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` varchar(255) DEFAULT NULL,\n  `commodity_code` varchar(255) DEFAULT NULL,\n  `count` int(11) DEFAULT 0,\n  `money` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `account_tbl`;\nCREATE TABLE `account_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` varchar(255) DEFAULT NULL,\n  `money` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Dubbo REST Service Interface\nDESCRIPTION: Dubbo service interface with Spring MVC annotations for REST endpoint exposure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/users\")\npublic interface UserService {\n    @GetMapping(value = \"/list\")\n    List<User> getUsers();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Authentication in YAML\nDESCRIPTION: YAML configuration for authenticating with a Nacos server using username and password credentials. This ensures secure access to the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo\n registry\n   address: nacos://localhost:8848?username=nacos&password=nacos\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Jib\nDESCRIPTION: Maven command to build and push Docker image using Jib plugin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile jib:build\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service in XML\nDESCRIPTION: This XML configuration file sets up the Dubbo service, specifying the application name, registry, protocol, and service interface to expose.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- dubbo provider info, used to compute dependency -->\n    <dubbo:application name=\"demo-provider\"/>\n\n    <dubbo:registry protocol=\"zookeeper\" address=\"localhost:2181\"/>\n\n    <!-- dubbo protocol, used to expose service at port 20880 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n    <!-- realize a service as a local bean -->\n    <bean id=\"demoProvider\" class=\"com.alibaba.dubbo.demo.provider.DemoProviderImpl\"/>\n\n    <!-- claim for service interfaces to expose -->\n    <dubbo:service interface=\"com.alibaba.dubbo.demo.DemoProvider\" ref=\"demoProvider\" version=\"1.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Starter Dependencies for Dubbo-Nacos\nDESCRIPTION: Additional Maven dependencies specifically for Spring Boot applications using Dubbo with Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-nacos-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Sample Shop Application in Kubernetes\nDESCRIPTION: Command to deploy the complete mall project to a Kubernetes cluster using a predefined configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/architecture.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/10-task/dubbo-samples-shop/deploy/All.yml\n```\n\n----------------------------------------\n\nTITLE: Multi-Connection Service Configuration\nDESCRIPTION: Configuration for setting up multiple connections for services and references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" connections=\"1\"/>\n<dubbo:reference interface=\"...\" connections=\"1\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Scanning via Properties in Dubbo\nDESCRIPTION: Shows how to set auto-scanning and trust level configurations using Spring Properties or dubbo.properties. This method provides flexibility in managing scanning settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.auto-trust-serialize-class=true\ndubbo.application.trust-serialize-class-level=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider in Erlang sys.config\nDESCRIPTION: Shows how to configure a Dubbo service provider in the sys.config file under the dubboerl application. Includes the basic structure for mapping Erlang implementation modules to Java interface definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/languages/erlang/service.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{provider,[\n\t\t{module_implements,interface_module,interface_fullname,[Options]},\n\t\t%% eg:\n\t\t{userOperator_impl,userOperator,<<\"org.apache.dubbo.erlang.sample.service.facade.UserOperator\">>,[Option]}\n\t]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Local Stub for Dubbo Service in Java\nDESCRIPTION: Demonstrates how to create a local stub implementation for a Dubbo service. The stub includes error handling, local caching, and parameter validation capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-stub.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class BarServiceStub implements BarService {\n    private final BarSer    vice barService;\n    \n    // 构造函数传入真正的远程代理对象\n    public BarServiceStub(BarService barService){\n        this.barService = barService;\n    }\n \n    public String sayHello(String name) {\n        // 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等\n        try {\n            return barService.sayHello(name);\n        } catch (Exception e) {\n            // 你可以容错，可以做任何AOP拦截事项\n            return \"容错数据\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Sample Application Deployment Status\nDESCRIPTION: Command to verify the status of the deployed Dubbo sample application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/prometheus.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl -n dubbo-demo get deployments\n```\n\n----------------------------------------\n\nTITLE: Defining Unary Service Interface\nDESCRIPTION: Java interface definition for unary RPC method using generated protobuf classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/tri.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.hello.HelloReply;\nimport org.apache.dubbo.hello.HelloRequest;\n\npublic interface IGreeter {\n    /**\n     * <pre>\n     *  Sends a greeting\n     * </pre>\n     */\n    HelloReply sayHello(HelloRequest request);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Client Application\nDESCRIPTION: Client implementation that invokes the UserProvider service. It initializes the Dubbo-go framework, makes an RPC call to the GetUser method, and logs the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/logger\" // dubbogo 框架日志\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\" // dubbogo 框架依赖，所有dubbogo进程都需要隐式引入一次\n\t\"dubbo3-demo/api\"\n)\n\n// export DUBBO_GO_CONFIG_PATH=dubbogo.yml 运行前需要设置环境变量，指定配置文件位置\nfunc main(){\n  // 启动框架\n\tif err := config.Load(); err != nil{\n\t\tpanic(err)\n\t}\n\tvar i int32 = 1\n  // 发起调用\n\tuser, err := api.UserProviderClient.GetUser(context.TODO(), i)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlogger.Infof(\"response result: %+v\", user)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider\nDESCRIPTION: XML configuration for the service provider, including application name, registry address, and service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"rpc-callback-demo\" />\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.callback.implicit.NormalDemoService\" />\n<dubbo:service interface=\"org.apache.dubbo.callback.implicit.IDemoService\" ref=\"demoService\" version=\"1.0.0\" group=\"cn\"/>\n```\n\n----------------------------------------\n\nTITLE: Local Property File Saving\nDESCRIPTION: Handles saving metadata to local property files with versioning support\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nprivate void saveProperties(MetadataIdentifier metadataIdentifier, String value, boolean add, boolean sync) {\n        if (file == null) {\n            return;\n        }\n\n        try {\n            if (add) {\n                properties.setProperty(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY), value);\n            } else {\n                properties.remove(metadataIdentifier.getUniqueKey(KeyTypeEnum.UNIQUE_KEY));\n            }\n            long version = lastCacheChanged.incrementAndGet();\n            if (sync) {\n            \t//获取最新修改版本持久化到磁盘\n                new SaveProperties(version).run();\n            } else {\n                reportCacheExecutor.execute(new SaveProperties(version));\n            }\n\n        } catch (Throwable t) {\n            logger.warn(t.getMessage(), t);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Connection Limits in Dubbo XML\nDESCRIPTION: Demonstrates how to limit the number of connections accepted by the server side to 10 connections using either provider or protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-connections.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" accepts=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Centralized Metadata Mode in Dubbo\nDESCRIPTION: This configuration enables the centralized metadata mode for Dubbo's application-level service discovery. It changes the default point-to-point metadata mode to use remote centralized metadata storage in Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo.registry.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat as REST Server in Dubbo\nDESCRIPTION: XML configuration to set up Tomcat as the REST server in Dubbo. The protocol is set to REST with port 8080 and server type as tomcat.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8080\" server=\"tomcat\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding RMI Protocol Dependency in Maven\nDESCRIPTION: Maven dependency configuration for including RMI protocol support in Dubbo 3.x applications\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-rmi</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Virtual Services YAML Configuration for Bookinfo Services\nDESCRIPTION: YAML configuration showing the virtual services that route traffic to version 1 of the details, productpage, ratings, and reviews services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Dubbo Parameter Validation Interface\nDESCRIPTION: Interface demonstrating direct parameter validation using JSR303 annotations in Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/parameter-validation.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotNull;\n \npublic interface ValidationService {\n    void save(@NotNull ValidationParameter parameter); // Validate parameter is not null\n    void delete(@Min(1) int id); // Directly validate basic type parameter\n}\n```\n\n----------------------------------------\n\nTITLE: Fallback to Registry Configuration for Metadata Center in Dubbo\nDESCRIPTION: The useRegistryAsMetadataCenterIfNecessary method uses registry center configuration as a fallback when no explicit metadata configuration is available, filtering and transforming registry configs into metadata configs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate void useRegistryAsMetadataCenterIfNecessary() {\n\t\t//配置缓存中查询元数据配置\n        Collection<MetadataReportConfig> metadataConfigs = configManager.getMetadataConfigs();\n\t\t//配置存在则直接返回\n        if (CollectionUtils.isNotEmpty(metadataConfigs)) {\n            return;\n        }\n\t\t////查询是否有注册中心设置了默认配置isDefault 设置为true的注册中心则为默认注册中心列表,如果没有注册中心设置为默认注册中心,则获取所有未设置默认配置的注册中心列表\n        List<RegistryConfig> defaultRegistries = configManager.getDefaultRegistries();\n        if (defaultRegistries.size() > 0) {\n        //多注册中心遍历\n            defaultRegistries\n                .stream()\n                //筛选符合条件的注册中心 (筛选逻辑就是查看是否有对应协议的扩展支持)\n                .filter(this::isUsedRegistryAsMetadataCenter)\n                //注册中心配置映射为元数据中心  映射就是获取需要的配置\n                .map(this::registryAsMetadataCenter)\n                //将元数据中心配置存储在配置缓存中方便后续使用\n                .forEach(metadataReportConfig -> {\n              \n                    if (metadataReportConfig.getId() == null) {\n                        Collection<MetadataReportConfig> metadataReportConfigs = configManager.getMetadataConfigs();\n                        if (CollectionUtils.isNotEmpty(metadataReportConfigs)) {\n                            for (MetadataReportConfig existedConfig : metadataReportConfigs) {\n                                if (existedConfig.getId() == null && existedConfig.getAddress().equals(metadataReportConfig.getAddress())) {\n                                    return;\n                                }\n                            }\n                        }\n                        configManager.addMetadataReport(metadataReportConfig);\n                    } else {\n                        Optional<MetadataReportConfig> configOptional = configManager.getConfig(MetadataReportConfig.class, metadataReportConfig.getId());\n                        if (configOptional.isPresent()) {\n                            return;\n                        }\n                        configManager.addMetadataReport(metadataReportConfig);\n                    }\n                    logger.info(\"use registry as metadata-center: \" + metadataReportConfig);\n                });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Port Number for Dubbo REST Protocol\nDESCRIPTION: XML configuration for specifying the port number to be used by the Dubbo REST protocol. By default, port 80 is used if not explicitly configured.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Mapping in Dubbo REST\nDESCRIPTION: ExceptionMapper implementation for handling NotFoundException with custom response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_35\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomExceptionMapper implements ExceptionMapper<NotFoundException> {\n\n    public Response toResponse(NotFoundException e) {     \n        return Response.status(Response.Status.NOT_FOUND).entity(\"Oops! the requested resource is not found!\").type(\"text/plain\").build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validator in Java for Dubbo\nDESCRIPTION: Example implementation of a custom Validator interface in Java for Dubbo. It shows the structure and required methods for creating a new validator that can be used with the validation extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/validation.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.validation.Validator;\n \npublic class XxxValidator implements Validator {\n    public XxxValidator(URL url) {\n        // ...\n    }\n    public void validate(Invocation invocation) throws Exception {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available QoS Commands\nDESCRIPTION: This snippet shows the output of the 'help' command in the Dubbo QoS telnet interface, which lists all available commands.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndubbo>help\n+---------+----------------------------------------------------------------------------------+\n|    help | help command                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|      ls | ls service                                                                       |\n+---------+----------------------------------------------------------------------------------+\n| offline | offline dubbo                                                                    |\n+---------+----------------------------------------------------------------------------------+\n|  online | online dubbo                                                                     |\n+---------+----------------------------------------------------------------------------------+\n|    quit | quit telnet console                                                              |\n+---------+----------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Disabling Detailed Profiler in Dubbo QoS\nDESCRIPTION: Command to disable the detailed profiler mode in Dubbo QoS. This does not affect the simple profiler mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/profiler.md#2025-04-08_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>disableDetailProfiler\nOK\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Listener in Java\nDESCRIPTION: This code snippet shows how to register a metrics listener using Spring's BeanFactory. It adds the AggregateMetricsCollector as a listener to the DefaultMetricsCollector, implementing a producer-consumer pattern for metrics collection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerListener() {\n    applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class).addListener(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry SPI Extension\nDESCRIPTION: SPI configuration file to register the Etcd registry implementation with Dubbo's extension system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\netcd=org.apache.dubbo.registry.etcd.EtcdServiceDiscoveryFactory\n```\n\n----------------------------------------\n\nTITLE: Defining AccountService Interface in Java\nDESCRIPTION: Interface for the Account service that handles debiting balance from user accounts. This defines the contract for financial transactions in the system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface AccountService {\n\n    /**\n     * debit balance of user's account\n     */\n    void debit(String userId, int money);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client with Zipkin\nDESCRIPTION: XML configuration for a Dubbo client application with Zipkin tracing. It sets up a reference to GreetingService and configures Zipkin tracing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"dubbo-client\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"greetingService\" check=\"false\" interface=\"com.alibaba.dubbo.samples.api.GreetingService\" filter=\"tracing\"/>\n\n<!-- Zipkin configuration (similar to service configurations) -->\n<bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n    <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n</bean>\n\n<bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n    <property name=\"localServiceName\" value=\"client\"/>\n    <!-- ... (similar to service configurations) ... -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Application Deployer\nDESCRIPTION: The initialize() method in DefaultApplicationDeployer handles the initialization process for Dubbo, including starting the config center and loading application configs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void initialize() {\n        if (initialized) {\n            return;\n        }\n        // Ensure that the initialization is completed when concurrent calls\n        synchronized (startLock) {\n            if (initialized) {\n                return;\n            }\n            // register shutdown hook\n            registerShutdownHook();\n\n            startConfigCenter();\n\n            loadApplicationConfigs();\n\n            initModuleDeployers();\n\n            // @since 2.7.8\n            startMetadataCenter();\n\n            initialized = true;\n\n            if (logger.isInfoEnabled()) {\n                logger.info(getIdentifier() + \" has been initialized!\");\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Router Snapshots in Dubbo\nDESCRIPTION: The getRecentRouterSnapshot command displays historical router status information. This system stores up to 32 results and provides detailed information about router chain processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/router-snapshot.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>getRecentRouterSnapshot\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n···\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export in Properties\nDESCRIPTION: Properties file configuration for Dubbo port unification, setting Triple as the main protocol with Dubbo as an extension protocol on port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.name=tri\ndubbo.protocol.ext-protocol=dubbo,\ndubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Configuring New Version Service Provider in Dubbo XML\nDESCRIPTION: XML configuration for defining a new version (2.0.0) of a Dubbo service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-versions.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"2.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Spring Boot Application for Dubbo Provider\nDESCRIPTION: Spring Boot main application class for the Dubbo service provider that bootstraps the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoProviderApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoProviderApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Provider Metadata Task in AbstractMetadataReport\nDESCRIPTION: This method performs the actual storage of provider metadata. It handles caching, JSON conversion, and error handling. It also triggers a retry mechanism if the storage fails.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nprivate void storeProviderMetadataTask(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {\n    try {\n        if (logger.isInfoEnabled()) {\n            logger.info(\"store provider metadata. Identifier : \" + providerMetadataIdentifier + \"; definition: \" + serviceDefinition);\n        }\n        allMetadataReports.put(providerMetadataIdentifier, serviceDefinition);\n        failedReports.remove(providerMetadataIdentifier);\n        Gson gson = new Gson();\n        String data = gson.toJson(serviceDefinition);\n        doStoreProviderMetadata(providerMetadataIdentifier, data);\n        saveProperties(providerMetadataIdentifier, data, true, !syncReport);\n    } catch (Exception e) {\n        failedReports.put(providerMetadataIdentifier, serviceDefinition);\n        metadataReportRetry.startRetryTask();\n        logger.error(\"Failed to put provider metadata \" + providerMetadataIdentifier + \" in  \" + serviceDefinition + \", cause: \" + e.getMessage(), e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dubbo Dashboards into Existing Grafana Installation\nDESCRIPTION: This shell script automates the process of importing Dubbo dashboards into an existing Grafana installation. It sets variables for Grafana host, credentials, data source, and Dubbo version, then loops through dashboard IDs to import them.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/grafana.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ # Address of Grafana\n$ GRAFANA_HOST=\"http://localhost:3000\"\n$ # Login credentials, if authentication is used\n$ GRAFANA_CRED=\"USER:PASSWORD\"\n$ # The name of the Prometheus data source to use\n$ GRAFANA_DATASOURCE=\"Prometheus\"\n$ # The version of Dubbo to deploy\n$ VERSION=3.2.0\n$ # Import all Dubbo dashboards\n$ for DASHBOARD in 18469 4701; do\n$     #REVISION=\"$(curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions -s | jq \".items[] | select(.description | contains(\\\"${VERSION}\\\")) | .revision\")\"\n$     REVISION=1\n$     curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions/${REVISION}/download > /tmp/dashboard.json\n$     echo \"Importing $(cat /tmp/dashboard.json | jq -r '.title') (revision ${REVISION}, id ${DASHBOARD})...\"\n$     curl -s -k -u \"$GRAFANA_CRED\" -XPOST \\\n$         -H \"Accept: application/json\" \\\n$         -H \"Content-Type: application/json\" \\\n$         -d \"{\\\"dashboard\\\":$(cat /tmp/dashboard.json),\\\"overwrite\\\":true, \\\n$             \\\"inputs\\\":[{\\\"name\\\":\\\"DS_PROMETHEUS\\\",\\\"type\\\":\\\"datasource\\\", \\\n$             \\\"pluginId\\\":\\\"prometheus\\\",\\\"value\\\":\\\"$GRAFANA_DATASOURCE\\\"}]}\" \\\n$         $GRAFANA_HOST/api/dashboards/import\n$     echo -e \"\\nDone\\n\"\n$ done\n```\n\n----------------------------------------\n\nTITLE: Adding Webservice Protocol Dependencies in Maven\nDESCRIPTION: XML configuration to add the necessary dependencies for using the Webservice protocol in Dubbo 3. It includes the Dubbo RPC Webservice extension and Apache CXF libraries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-webservice</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-frontend-simple</artifactId>\n    <version>2.6.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-transports-http</artifactId>\n    <version>2.6.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Configuration Center in Dubbo (Java)\nDESCRIPTION: Java code to programmatically configure Apollo as the configuration center for Dubbo. Creates a ConfigCenterConfig instance and sets the Apollo server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"apollo://localhost:8080\");\n```\n\n----------------------------------------\n\nTITLE: Adding Webservice Protocol Dependencies in Maven\nDESCRIPTION: XML configuration to add the necessary dependencies for using the Webservice protocol in Dubbo 3. It includes the Dubbo RPC Webservice extension and Apache CXF libraries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-webservice</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-frontend-simple</artifactId>\n    <version>2.6.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.cxf</groupId>\n    <artifactId>cxf-rt-transports-http</artifactId>\n    <version>2.6.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Multiple Port Configuration\nDESCRIPTION: Configuration for running Dubbo protocol on multiple ports with different identifiers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"dubbo1\" name=\"dubbo\" port=\"20880\" />\n<dubbo:protocol id=\"dubbo2\" name=\"dubbo\" port=\"20881\" />\n```\n\n----------------------------------------\n\nTITLE: Etcd Metadata Center YAML Configuration\nDESCRIPTION: YAML configuration for setting up etcd as a metadata center in Dubbo, specifying the connection address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: etcd://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Thread Pool in Java\nDESCRIPTION: Java implementation example of a custom thread pool extension implementing the ThreadPool interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/threadpool.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.threadpool.ThreadPool;\nimport java.util.concurrent.Executor;\n \npublic class XxxThreadPool implements ThreadPool {\n    public Executor getExecutor() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty as REST Server in Dubbo\nDESCRIPTION: Configuring embedded Jetty as the REST server implementation in Dubbo, which is the default option if server is not specified.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"jetty\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Rules in YAML for Dubbo VirtualService and DestinationRule\nDESCRIPTION: A complete YAML configuration example showing how to define routing rules with fallback logic. The example demonstrates hierarchical routing from specific conditions (method with parameter types) to more general ones (interface level), with proper subset definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo-route\nspec:\n  hosts:\n  - demo  // 统一定义为应用名 \n  dubbo:\n  - service:\n    - exact: com.taobao.hsf.demoService:1.0.0\n    - exact: com.taobao.hsf.demoService:2.0.0\n    routedetail:\n    - name: sayHello-String-method-route\n      match: \n      - method:\n          name_match: \n            exact: \"sayHello\"\n            .....\n          argp:\n          - string\n      route:\n      - destination:\n          host: demo\n          subset: v1\n        fallback:\n          destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n\n      - name: sayHello-method-route\n        match: \n        - method:\n            name_match: \n              exact: \"s-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n\n      - name: interface-route \n        route:\n        - destination: \n          host: demo\n          subset: v3\n\n  - service:\n      \n      ....\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: demo-route\nspec:\n  host: demo\n  subsets:\n  - name: v1\n    labels:\n      sigma.ali/mg: v1-host\n\n  - name: v2\n    labels:\n      sigma.ali/mg: v2-host\n\n  - name: v3\n    labels:\n      sigma.ali/mg: v3-host\n```\n\n----------------------------------------\n\nTITLE: Implementing Weighted Round-Robin Load Balancing for Dubbo in Java\nDESCRIPTION: This snippet shows the core implementation of the weighted round-robin load balancing algorithm for Dubbo. It manages a nested map structure to store WeightedRoundRobin objects for each service method and URL. The doSelect method performs the actual load balancing logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/loadbalance.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate ConcurrentMap<String, ConcurrentMap<String, WeightedRoundRobin>> methodWeightMap = new ConcurrentHashMap<String, ConcurrentMap<String, WeightedRoundRobin>>();\n\n// 原子更新锁\nprivate AtomicBoolean updateLock = new AtomicBoolean();\n\n@Override\nprotected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n    String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n    // 获取 url 到 WeightedRoundRobin 映射表，如果为空，则创建一个新的\n    ConcurrentMap<String, WeightedRoundRobin> map = methodWeightMap.get(key);\n    if (map == null) {\n        methodWeightMap.putIfAbsent(key, new ConcurrentHashMap<String, WeightedRoundRobin>());\n        map = methodWeightMap.get(key);\n    }\n    int totalWeight = 0;\n    long maxCurrent = Long.MIN_VALUE;\n    \n    // 获取当前时间\n    long now = System.currentTimeMillis();\n    Invoker<T> selectedInvoker = null;\n    WeightedRoundRobin selectedWRR = null;\n\n    // ... (rest of the method implementation)\n\n    if (selectedInvoker != null) {\n        // 让 current 减去权重总和，等价于 current -= totalWeight\n        selectedWRR.sel(totalWeight);\n        // 返回具有最大 current 的 Invoker\n        return selectedInvoker;\n    }\n    \n    // should not happen here\n    return invokers.get(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Full Triple Protocol Request Message Example\nDESCRIPTION: This example provides a complete Triple protocol request message, including the request line, headers, and body. It demonstrates the use of various Triple-specific headers and JSON payload encoding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPOST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1\nHost: 127.0.0.1:30551\nContent-Type: application/json\nAccept: application/json\nContent-Length: 11\nAccept-Encoding: compress, gzip\ntri-protocol-version: 1.0.0\ntri-service-version: 1.0.0\ntri-service-group: dubbo\ntri-service-timeout: 3000\n\n[{\"world\"}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface-Level Load Balancing in Dubbo-go\nDESCRIPTION: This snippet illustrates how to set a load balancing strategy for a specific service interface in Dubbo-go. It uses the 'roundrobin' strategy as an example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\t//...\n)\n\nsvc, err := greet.NewGreetService(cli, client.WithLoadBalance(\"roundrobin\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-assembly with injectExtension Method in Dubbo SPI\nDESCRIPTION: This method handles automatic dependency injection for extension instances by finding setter methods, identifying required dependencies, and obtaining them through ExtensionFactory. It searches for public set methods with a single parameter and injects the appropriate extension instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate T injectExtension(T instance) {\n    for (Method method : instance.getClass().getMethods()) {\n        if (method.getName().startsWith(\"set\")\n                && method.getParameterTypes().length == 1\n                && Modifier.isPublic(method.getModifiers())) {\n            Class<?> pt = method.getParameterTypes()[0];\n          \n            String property = method.getName().length() > 3 ? method.getName().substring(3, 4).toLowerCase() + method.getName().substring(4) : \"\";\n            Object object = objectFactory.getExtension(pt, property);\n            if (object != null) {\n                method.invoke(instance, object);\n            }\n        }\n    }\n    return instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check in YAML for Dubbo Golang\nDESCRIPTION: This YAML configuration demonstrates how to disable the default health check for all consumers and enable it for a specific service. It sets the global consumer check to false and enables check for 'myservice'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/start-check.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    check : false\n    reference: \n      myserivce:\n       check: true \n```\n\n----------------------------------------\n\nTITLE: Application Configuration Loading Process in Dubbo\nDESCRIPTION: Illustrates how Dubbo loads application configurations through the ConfigManager, which delegates configuration loading to specific handlers for different configuration types like applications, monitors, metrics, protocols, registries, and metadata reports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadApplicationConfigs() {\n\t\t//发布器还是不处理配置加载的逻辑还是交给配置管理器\n        configManager.loadConfigs();\n    }\n```\n\nLANGUAGE: java\nCODE:\n```\n @Override\n    public void loadConfigs() {\n        // application config has load before starting config center\n        // load dubbo.applications.xxx\n        //加载应用配置\n        loadConfigsOfTypeFromProps(ApplicationConfig.class);\n\n        // load dubbo.monitors.xxx\n        //加载监控配置\n        loadConfigsOfTypeFromProps(MonitorConfig.class);\n\n        // load dubbo.metrics.xxx\n        //加载指标监控配置\n        loadConfigsOfTypeFromProps(MetricsConfig.class);\n\n        // load multiple config types:\n        // load dubbo.protocols.xxx\n        //加载协议配置\n        loadConfigsOfTypeFromProps(ProtocolConfig.class);\n\n        // load dubbo.registries.xxx\n        loadConfigsOfTypeFromProps(RegistryConfig.class);\n\n        // load dubbo.metadata-report.xxx\n        //加载元数据配置\n        loadConfigsOfTypeFromProps(MetadataReportConfig.class);\n\n        // config centers has bean loaded before starting config center\n        //loadConfigsOfTypeFromProps(ConfigCenterConfig.class);\n\t\t\n\t\t//刷新配置\n        refreshAll();\n\t\t\n\t\t//检查配置\n        checkConfigs();\n\n        // set model name\n        if (StringUtils.isBlank(applicationModel.getModelName())) {\n            applicationModel.setModelName(applicationModel.getApplicationName());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Server in Rust\nDESCRIPTION: Implements a Dubbo server in Rust, including service registration, configuration loading, and implementation of the Greeter service. This sets up the server to listen for incoming RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    register_server(GreeterServerImpl {\n        name: \"greeter\".to_string(),\n    });\n\n    // Dubbo::new().start().await;\n    Dubbo::new()\n        .with_config({\n            let r = RootConfig::new();\n            match r.load() {\n                Ok(config) => config,\n                Err(_err) => panic!(\"err: {:?}\", _err), // response was droped\n            }\n        })\n        .start()\n        .await;\n}\n\n#[allow(dead_code)]\n#[derive(Default, Clone)]\nstruct GreeterServerImpl {\n    name: String,\n}\n\n// #[async_trait]\n#[async_trait]\nimpl Greeter for GreeterServerImpl {\n    async fn greet(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        println!(\"GreeterServer::greet {:?}\", request.metadata);\n\n        Ok(Response::new(GreeterReply {\n            message: \"hello, dubbo-rust\".to_string(),\n        }))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry in Dubbo XML\nDESCRIPTION: XML configuration for defining and referencing a registry in Dubbo. This snippet shows how to define a registry, reference it in a service, and set a default registry for providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"xxx1\" address=\"xxx://ip:port\" />\n<dubbo:service registry=\"xxx1\" />\n<dubbo:provider registry=\"xxx1\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Interface in Go\nDESCRIPTION: Core interface definition for Dubbo filters that specifies the Invoke and OnResponse methods required for request/response interception.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Filter interface defines the functions of a filter\n// Extension - Filter\ntype Filter interface {\n\t// Invoke is the core function of a filter, it determines the process of the filter\n\tInvoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result\n\t// OnResponse updates the results from Invoke and then returns the modified results.\n\tOnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Implementation\nDESCRIPTION: Implementation of the Dubbo service interface that provides user data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class UserServiceImpl implements UserService {\n    @Override\n    public List<User> getUsers() {\n        return Collections.singletonList(new User(1L, \"Dubbo provider!\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Full Triple Protocol Request Message Example\nDESCRIPTION: This example provides a complete Triple protocol request message, including the request line, headers, and body. It demonstrates the use of various Triple-specific headers and JSON payload encoding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nPOST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1\nHost: 127.0.0.1:30551\nContent-Type: application/json\nAccept: application/json\nContent-Length: 11\nAccept-Encoding: compress, gzip\ntri-protocol-version: 1.0.0\ntri-service-version: 1.0.0\ntri-service-group: dubbo\ntri-service-timeout: 3000\n\n[{\"world\"}]\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Kubernetes Cluster\nDESCRIPTION: Command to start a local Kubernetes cluster using Minikube.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Implementing UDP Connection in Getty\nDESCRIPTION: Code snippet showing the implementation of UDP connection in the Getty library, including error handling and connection verification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-getty.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/alexstocks/getty/blob/master/client.go#L141\n```\n\n----------------------------------------\n\nTITLE: Verifying Zookeeper Service Registration\nDESCRIPTION: Commands to check if the service URL has been successfully registered in Zookeeper using the zkCli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Enter Zookeeper bin directory, for example '$HOST_PATH/apache-zookeeper-3.5.9-bin/bin'\n$ ./zkCli.sh\n[zk: localhost:2181(CONNECTED) 0] ls /services/dubbo_registry_zookeeper_server\n[30.221.147.198:20000]\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Provider Instances in Dubbo\nDESCRIPTION: A YAML configuration example showing how to temporarily disable specific provider instances. This is typically used to remove a problematic provider machine from service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-rule.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: application\nkey: demo-provider\nenabled: true\nconfigs:\n- addresses: [\"10.20.153.10:20880\"]\n  side: provider\n  parameters:\n    disabled: true\n...\n```\n\n----------------------------------------\n\nTITLE: Virtual Service YAML Configuration for Bookinfo Services\nDESCRIPTION: YAML configuration showing how virtual services are defined to route traffic to v1 of details, productpage, ratings, and reviews services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Defining Headless Service for Dubbo Consumer\nDESCRIPTION: This manifest defines a headless Kubernetes service for the Dubbo consumer application. Similar to the provider service, it uses a selector for pods labeled 'app: dubbo-samples-apiserver-consumer' and exposes TCP port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: dubbo-samples-apiserver-consumer\n  namespace: dubbo-demo\nspec:\n  clusterIP: None\n  selector:\n    app: dubbo-samples-apiserver-consumer\n  ports:\n    - protocol: TCP\n      port: 20880\n      targetPort: 20880\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Service via HTTP using cURL\nDESCRIPTION: Shell command using cURL to access the Dubbo service via HTTP/1.1 POST request. It demonstrates how to pass parameters in JSON format as the HTTP payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50051/org.apache.dubbo.demo.DemoService/sayHello\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Method in Dubbo Reference\nDESCRIPTION: XML configuration for specifying a merge method on service reference. Uses the merger attribute to define how returned results should be combined.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\".addAll\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Arguments in Dubbo XML\nDESCRIPTION: Example showing how to configure method arguments using dubbo:argument as a child element of dubbo:method. This specific example sets a callback parameter for the findXxx method with a timeout of 3000ms and 2 retries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-argument.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\">\n    <dubbo:argument index=\"0\" callback=\"true\" />\n</dubbo:method>\n```\n\n----------------------------------------\n\nTITLE: Calling a Non-Protobuf Service in Dubbo-go\nDESCRIPTION: This Go code shows how to create a client and call a non-protobuf service using the triple protocol in Dubbo-go. It creates a new client, dials the service, and makes a unary call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncliDubbo, _ := client.NewClient(\n\tclient.WithClientProtocolTriple(),\n\tclient.WithClientSerialization(constant.Hessian2Serialization),\n)\n\nconnDubbo, _ := cliDubbo.Dial(\"GreetProvider\")\nipanic(err)\n}\nvar respDubbo string\nif err = connDubbo.CallUnary(context.Background(), []interface{}{\"hello\", \"new\", \"dubbo\"}, &respDubbo, \"SayHello\"); err != nil {\n\tlogger.Errorf(\"GreetProvider.Greet err: %s\", err)\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-Side Concurrent Calls at Method Level in XML\nDESCRIPTION: XML configuration to limit the concurrent calls from a client to a specific method to a maximum of 10. This provides method-level control for client requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" actives=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Implements the DemoService interface with a DemoServiceImpl class. The implementation logs incoming requests and returns a response including the consumer's and provider's addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/1-learn-from-a-demo.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.rpc.RpcContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class DemoServiceImpl implements DemoService {\n    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);\n\n    @Override\n    public String sayHello(String name) {\n        logger.info(\"Hello \" + name + \", request from consumer: \" + RpcContext.getServiceContext().getRemoteAddress());\n        return \"Hello \" + name + \", response from provider: \" + RpcContext.getServiceContext().getLocalAddress();\n    }\n\n    @Override\n    public CompletableFuture<String> sayHelloAsync(String name) {\n        return null;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Provider Instances in Dubbo\nDESCRIPTION: YAML configuration that temporarily disables a specific provider instance by IP address. This is commonly used to remove problematic provider machines from the service pool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-rule.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: application\nkey: demo-provider\nenabled: true\nconfigs:\n- addresses: [\"10.20.153.10:20880\"]\n  side: provider\n  parameters:\n    disabled: true\n...\n```\n\n----------------------------------------\n\nTITLE: Creating ReferenceConfig Instance for Dubbo-Go Generic Call\nDESCRIPTION: This code snippet demonstrates how to create a ReferenceConfig instance for a specific service interface using the newRefConf function.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nrefConf := newRefConf(\"example.dubbo.io\", \"org.apache.dubbo.sample.UserProvider\", \"tri\")\n```\n\n----------------------------------------\n\nTITLE: Detailed Startup Error Log\nDESCRIPTION: Example of detailed error log showing provider not available error\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 12:49:18:018 CST] main ERROR deploy.DefaultModuleDeployer:  [DUBBO] Model start failed: Dubbo Module[1.1.1] start failed: java.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.samples.api.GreetingsService. No provider available for the service org.apache.dubbo.samples.api.GreetingsService from the url consumer://30.221.144.195/org.apache.dubbo.samples.api.GreetingsService?application=first-dubbo-consumer&background=false&dubbo=2.0.2&environment=product&executor-management-mode=default&file-cache=true&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=54580&register.ip=30.221.144.195&release=3.2.0-beta.6-SNAPSHOT&side=consumer&sticky=false&timestamp=1677473358611&unloadClusterRelated=false to the consumer 30.221.144.195 use dubbo version 3.2.0-beta.6-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Enabling Centralized Metadata Registration in Properties\nDESCRIPTION: Properties configuration to enable centralized metadata registration in Dubbo even in introspection mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=local\ndubbo.metadata-report.report-metadata=true\n```\n\n----------------------------------------\n\nTITLE: Dubbo Configuration Rule Template\nDESCRIPTION: A comprehensive YAML template showing the structure of configuration rules in Dubbo, including both consumer and provider side configurations with various parameters that can be adjusted.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-rule.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: application/service\nkey: app-name/group+service+version\nenabled: true\nconfigs:\n- addresses: [\"0.0.0.0\"]\n  providerAddresses: [\"1.1.1.1:20880\", \"2.2.2.2:20881\"]\n  side: consumer\n  applications/services: []\n  parameters:\n    timeout: 1000\n    cluster: failfase\n    loadbalance: random\n- addresses: [\"0.0.0.0:20880\"]\n  side: provider\n  applications/services: []\n  parameters:\n    threadpool: fixed\n    threads: 200\n    iothreads: 4\n    dispatcher: all\n    weight: 200\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Networker in Java\nDESCRIPTION: Shows how to create a custom Networker implementation in Java. The XxxNetworker class implements the Networker interface and provides the lookup method for group discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/networker.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.p2p.Networker;\n \npublic class XxxNetworker implements Networker {\n    public Group lookup(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration\nDESCRIPTION: YAML configuration for logging settings including level, encoding, and output paths.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlevel: \"error\"\ndevelopment: true\ndisableCaller: false\ndisableStacktrace: false\nsampling:\nencoding: \"console\"\n\nencoderConfig:\n  messageKey: \"message\"\n  levelKey: \"level\"\n  timeKey: \"time\"\n  nameKey: \"logger\"\n  callerKey: \"caller\"\n  stacktraceKey: \"stacktrace\"\n  lineEnding: \"\"\n  levelEncoder: \"capital\"\n  timeEncoder: \"iso8601\"\n  durationEncoder: \"seconds\"\n  callerEncoder: \"short\"\n  nameEncoder: \"\"\n\noutputPaths:\n  - \"stderr\"\nerrorOutputPaths:\n  - \"stderr\"\ninitialFields:\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom RegistryFactory in Java\nDESCRIPTION: Example implementation of a custom RegistryFactory in Java. This class, XxxRegistryFactory, implements the RegistryFactory interface and creates instances of XxxRegistry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.registry.RegistryFactory;\nimport org.apache.dubbo.registry.Registry;\nimport org.apache.dubbo.common.URL;\n\npublic class XxxRegistryFactory implements RegistryFactory {\n    public Registry getRegistry(URL url) {\n        return new XxxRegistry(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP/2 Configuration in Triple\nDESCRIPTION: This snippet shows how Triple initializes HTTP/2 configuration, setting the default flow control window size and adding custom outbound flow controllers for both server and client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-backpressure.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nTriple在初次建立连接时，通过 `TripleHttpProtocol` 初始化 HTTP/2 配置，\n默认流控窗口 `DEFAULT_WINDOW_INIT_SIZE = MIB_8`，\n并在服务端和客户端加入自己的 outbound 流控接口。\n```\n\n----------------------------------------\n\nTITLE: SPI Usage Example\nDESCRIPTION: Example of loading and using SPI extensions in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboSPITest {\n\n    @Test\n    public void sayHello() throws Exception {\n        ExtensionLoader<DemoSpi> extensionLoader = \n            ExtensionLoader.getExtensionLoader(DemoSpi.class);\n        DemoSpi demoSpi = extensionLoader.getExtension(\"demoSpiImpl\");\n        demoSpi.sayHello();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Caching Extension Classes in Dubbo (Java)\nDESCRIPTION: This method processes and caches different types of extension classes, including adaptive classes, wrapper classes, and regular extension classes. It handles annotations and naming conventions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                       boolean overridden) throws NoSuchMethodException {\n    if (!type.isAssignableFrom(clazz)) {\n        throw new IllegalStateException(\"Error occurred when loading extension class (interface: \" +\n                type + \", class line: \" + clazz.getName() + \"), class \"\n                + clazz.getName() + \" is not subtype of interface.\");\n    }\n    if (clazz.isAnnotationPresent(Adaptive.class)) {\n        cacheAdaptiveClass(clazz, overridden);\n    } else if (isWrapperClass(clazz)) {\n        cacheWrapperClass(clazz);\n    } else {\n        clazz.getConstructor();\n        if (StringUtils.isEmpty(name)) {\n            name = findAnnotationName(clazz);\n            if (name.length() == 0) {\n                throw new IllegalStateException(\"No such extension name for the class \" + clazz.getName() + \" in the config \" + resourceURL);\n            }\n        }\n\n        String[] names = NAME_SEPARATOR.split(name);\n        if (ArrayUtils.isNotEmpty(names)) {\n            cacheActivateClass(clazz, names[0]);\n            for (String n : names) {\n                cacheName(clazz, n);\n                saveInExtensionClass(extensionClasses, clazz, n, overridden);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for QOS Parameters\nDESCRIPTION: Shows how to configure QOS parameters using XML configuration in Dubbo applications. Parameters are set through application parameter elements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n  <dubbo:application name=\"demo-provider\">\n    <dubbo:parameter key=\"qos-enable\" value=\"true\"/>\n    <dubbo:parameter key=\"qos-accept-foreign-ip\" value=\"false\"/>\n    <dubbo:parameter key=\"qos-port\" value=\"33333\"/>\n  </dubbo:application>\n  <dubbo:registry address=\"multicast://224.5.6.7:1234\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n  <dubbo:service interface=\"org.apache.dubbo.demo.provider.DemoService\" ref=\"demoService\"/>\n  <bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Maximum Concurrency Calculation for HeuristicSmoothingFlowControl\nDESCRIPTION: Formula for calculating the maximum concurrency value in the HeuristicSmoothingFlowControl algorithm, which determines how many concurrent requests a provider can handle.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nmaxConcurrency = maxQPS * noLoadLatency * (1 + alpha) / avgLatency\n```\n\n----------------------------------------\n\nTITLE: Apollo命名空间和分组配置\nDESCRIPTION: 通过XML方式为Apollo配置中心配置命名空间和分组，将服务治理规则与配置文件托管分离。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo namespace=\"governance\" group =\"dubbo\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Service Reference Configuration\nDESCRIPTION: Demonstrates basic configuration for referencing a Redis service using Map interface with group specification in Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" group=\"member\" />\n```\n\n----------------------------------------\n\nTITLE: Injecting Sentinel Filter via Package Import\nDESCRIPTION: This code demonstrates how to inject the Sentinel filter into dubbo-go by importing the adapter package. This method uses the init() function to automatically register the filter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t_ \"github.com/alibaba/sentinel-golang/adapter/dubbo\"\n)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handling in Dubbo REST Protocol\nDESCRIPTION: The RestHandler class implements HttpHandler to process HTTP requests. It converts servlet requests into Dubbo RPC invocations, invokes the target service, and handles the response. It manages status codes based on invocation results and encodes responses in the appropriate media type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate class RestHandler implements HttpHandler<HttpServletRequest, HttpServletResponse> {\n\n        @Override\n        public void handle(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws IOException, ServletException {\n             // There are servlet request and nettyRequest\n            RequestFacade request = RequestFacadeFactory.createRequestFacade(servletRequest);\n            RpcContext.getServiceContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());\n//            dispatcher.service(request, servletResponse);\n\n            Pair<RpcInvocation, Invoker> build = null;\n            try {\n                // Create RPCInvocation based on request information\n                build = RPCInvocationBuilder.build(request, servletRequest, servletResponse);\n            } catch (PathNoFoundException e) {\n                servletResponse.setStatus(404);\n            }\n\n            Invoker invoker = build.getSecond();\n\n            Result invoke = invoker.invoke(build.getFirst());\n\n            // TODO handling exceptions\n            if (invoke.hasException()) {\n                servletResponse.setStatus(500);\n            } else {\n\n                try {\n                    Object value = invoke.getValue();\n                    String accept = request.getHeader(RestConstant.ACCEPT);\n                    MediaType mediaType = MediaTypeUtil.convertMediaType(accept);\n                    // TODO write response\n                    HttpMessageCodecManager.httpMessageEncode(servletResponse.getOutputStream(), value, invoker.getUrl(), mediaType);\n                    servletResponse.setStatus(200);\n                } catch (Exception e) {\n                    servletResponse.setStatus(500);\n                }\n            }\n\n            // TODO add Attachment header\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying User-Based Routing in Istio\nDESCRIPTION: This command applies a virtual service configuration that routes traffic based on user identity, specifically routing requests from user 'jason' to the v2 subset of the reviews service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Package\nDESCRIPTION: Maven command for packaging Dubbo code\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/mesh/mesh.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Applications with Pinpoint Agent\nDESCRIPTION: Command-line instructions for building and running both Dubbo provider and consumer applications with Pinpoint agent integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n\njava -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-provider -Dpinpoint.applicationName=DP target/demo-provider-0.0.1-SNAPSHOT.jar\n\njava -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-comsumer-0.0.1-SNAPSHOT-exec.jar\n```\n\n----------------------------------------\n\nTITLE: Cluster Extension SPI Configuration\nDESCRIPTION: Properties file configuration for registering the custom cluster implementation with Dubbo's SPI mechanism\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/cluster.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxCluster\n```\n\n----------------------------------------\n\nTITLE: 定义Java服务提供者接口\nDESCRIPTION: 定义UserProvider接口，包含GetUser1方法，该方法接收用户ID参数并返回User对象。这是泛化调用的目标服务接口。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n//import org.apache.dubbo.rpc.filter.GenericFilter;\n\npublic interface UserProvider {\n\tUser GetUser1(String userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Centralized Metadata Registration in Introspection Mode\nDESCRIPTION: Properties configuration to enable centralized metadata registration while in introspection mode in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=local\ndubbo.metadata-report.report-metadata=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in Java for Dubbo\nDESCRIPTION: Example implementation of a custom Validation interface in Java for Dubbo. It demonstrates the structure and required method for creating a new validation extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/validation.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.validation.Validation;\n \npublic class XxxValidation implements Validation {\n    public Object getValidator(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicast Parameter in Consumer Element for Dubbo\nDESCRIPTION: Alternative XML configuration to disable unicast mode at the consumer level in Dubbo, which ensures all consumers can receive broadcast messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer>\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: AsyncContext Implementation Example\nDESCRIPTION: Implementation of asynchronous service execution using AsyncContext\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Port for Dubbo REST Protocol\nDESCRIPTION: XML configuration to set a custom port for the Dubbo REST protocol. The default port is 80 if not specified.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Service Discovery Group Behavior\nDESCRIPTION: Configuration property to control whether Nacos service discovery uses the default group behavior introduced in Dubbo 3.1. Setting this property to false maintains the Dubbo 3.0.x behavior of using DEFAULT_GROUP instead of the configured group value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.0-to-3.1-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.nacos-service-discovery.use-default-group=false\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-Side Connections in Dubbo XML Configuration\nDESCRIPTION: This XML snippet demonstrates how to limit the number of connections accepted by the server side to 10 using either the <dubbo:provider> or <dubbo:protocol> tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-connections.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" accepts=\"10\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties\nDESCRIPTION: Properties configuration for Dubbo consumer service with mesh integration settings including mesh enable flag and timeout configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=dubbo-samples-mesh-consumer\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=N/A\ndubbo.protocol.name=tri\ndubbo.protocol.port=20880\ndubbo.consumer.timeout=30000\ndubbo.application.qosEnable=true\ndubbo.application.qosAcceptForeignIp=true\ndubbo.consumer.meshEnable=true\n```\n\n----------------------------------------\n\nTITLE: Updating Dubbo Spring Boot Starter to 3.2.0 in Maven POM\nDESCRIPTION: This XML snippet demonstrates how to update the Dubbo Spring Boot Starter dependency to version 3.2.0 in a Maven project's pom.xml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.1-to-3.2-compatibility-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Config Scope Model Initializer in Dubbo\nDESCRIPTION: Implementation of ConfigScopeModelInitializer that adds a FrameworkModelCleaner destroy listener to the framework model. This handles cleanup tasks when the framework is shut down.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ConfigScopeModelInitializer implements ScopeModelInitializer {\n\n    @Override\n    public void initializeFrameworkModel(FrameworkModel frameworkModel) {\n        frameworkModel.addDestroyListener(new FrameworkModelCleaner());\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Active Load Balancing for Service\nDESCRIPTION: XML configuration to set the loadbalance attribute to 'leastactive' at the service level, ensuring that clients use the least active load balancing strategy when accessing this service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Adaptive Extension Retrieval in Java\nDESCRIPTION: Method to get or create an adaptive extension instance using double-checked locking pattern for thread safety.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic T getAdaptiveExtension() {\n    Object instance = cachedAdaptiveInstance.get();\n    if (instance == null) {\n            synchronized (cachedAdaptiveInstance) {\n                instance = cachedAdaptiveInstance.get();\n                if (instance == null) {\n                      instance = createAdaptiveExtension();\n                      cachedAdaptiveInstance.set(instance); \n                }\n            }        \n    }\n\n    return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with Java Configuration\nDESCRIPTION: This Java configuration class sets up a Dubbo provider using annotations to expose REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.samples.rest.impl\")\nstatic class ProviderConfiguration {\n    @Bean\n    public ProtocolConfig protocolConfig() {\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        protocolConfig.setName(\"rest\");\n        protocolConfig.setPort(8080);\n        protocolConfig.setServer(\"netty\");\n        return protocolConfig;\n    }\n\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"rest-provider\");\n        return applicationConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties\nDESCRIPTION: Properties configuration for Dubbo provider service with mesh integration settings including application name, metadata service port, registry, protocol and QoS settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=dubbo-samples-mesh-provider\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=N/A\ndubbo.protocol.name=tri\ndubbo.protocol.port=50052\ndubbo.application.qosEnable=true\ndubbo.application.qosAcceptForeignIp=true\n```\n\n----------------------------------------\n\nTITLE: Obtaining ExtensionLoader in Dubbo's Layered Model\nDESCRIPTION: Demonstrates how to obtain an ExtensionLoader object for a specific type (TypeBuilder) using the FrameworkModel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nmodel.getExtensionLoader(TypeBuilder.class)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties\nDESCRIPTION: Properties configuration for Dubbo provider service with mesh integration settings including application name, metadata service port, registry, protocol and QoS settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=dubbo-samples-mesh-provider\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=N/A\ndubbo.protocol.name=tri\ndubbo.protocol.port=50052\ndubbo.application.qosEnable=true\ndubbo.application.qosAcceptForeignIp=true\n```\n\n----------------------------------------\n\nTITLE: Implementing DemoService with Isolated Thread Pool Using @DubboService Annotation\nDESCRIPTION: This snippet shows a DemoService implementation using @DubboService annotation with a reference to a custom executor. It specifies version \"1.0.0\" and group \"Group1\", and uses the executor named \"executor-demo-service\" for thread isolation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// \"executor-hello-service\" is beanName\n@DubboService(executor = \"executor-demo-service\", version = \"1.0.0\", group = \"Group1\")\npublic class DemoServiceImplV1 implements DemoService {\n\n  @Override\n  public String sayName(String name) {\n    return \"server name\";\n  }\n\n  @Override\n  public Box getBox() {\n    return null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-Go Client with Error Handling\nDESCRIPTION: Client implementation that demonstrates how to handle errors returned from Dubbo-Go RPC methods. The client makes two requests - one that succeeds and one that fails, showing how to check and process the error response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/helloworld/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"right name\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"call Greet success: %s\", resp.Greeting)\n\n\tresp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: \"wrong name\"})\n\tif err != nil {\n\t\tlogger.Errorf(\"call Greet failed, err: %s\", err.Error())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Annotations for Prometheus Discovery\nDESCRIPTION: YAML configuration showing the required Kubernetes annotations to enable Prometheus auto-discovery of Dubbo instances. These annotations specify the scrape settings including path and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/prometheus.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n   prometheus.io/scrape: \"true\"\n   prometheus.io/path: /management/prometheus\n   prometheus.io/port: \"22222\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RestMethodMetadata Class in Dubbo's Rest Protocol\nDESCRIPTION: Java class definition for RestMethodMetadata which contains method-level REST metadata including request information, parameter handling, and reflection data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class RestMethodMetadata implements Serializable {\n\n    private MethodDefinition method; // method 定义信息（name ,pramType,returnType）\n\n    private RequestMetadata request;// 请求元信息\n\n    private Integer urlIndex;\n\n    private Integer bodyIndex;\n\n    private Integer headerMapIndex;\n\n    private String bodyType;\n\n    private Map<Integer, Collection<String>> indexToName;\n\n    private List<String> formParams;\n\n    private Map<Integer, Boolean> indexToEncoded;\n\n    private ServiceRestMetadata serviceRestMetadata;\n\n    private List<ArgInfo> argInfos;\n\n    private Method reflectMethod;\n\n    /**\n     *  make a distinction between mvc & resteasy\n     */\n    private Class codeStyle;\n```\n\n----------------------------------------\n\nTITLE: 实现Dubbo服务接口并注册到ShenYu网关\nDESCRIPTION: 通过@ShenyuDubboClient注解将Dubbo服务方法注册到ShenYu网关，包含路径和描述信息的定义。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * DubboTestServiceImpl.\n */\n@Service(\"dubboTestService\")\npublic class DubboTestServiceImpl implements DubboTestService {\n    \n    @Override\n    @ShenyuDubboClient(path = \"/findById\", desc = \"Query by Id\")\n    public DubboTest findById(final String id) {\n        return new DubboTest(id, \"hello world shenyu Apache, findById\");\n    }\n\n    //......\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Non-Protobuf Service in Dubbo-go\nDESCRIPTION: This Go code demonstrates how to publish a non-protobuf service using the triple protocol in Dubbo-go. It creates a new instance, configures the protocol, and registers the GreetProvider service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nins, err := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_server\"),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20001)),\n)\n\nsrvDubbo, err := ins.NewServer()\nif err != nil {\n\tpanic(err)\n}\nif err = srvDubbo.Register(&GreetProvider{}, nil, server.WithInterface(\"GreetProvider\")); err != nil {\n\tpanic(err)\n}\nif err = srvDubbo.Serve(); err != nil {\n\tlogger.Error(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from Protocol Buffer Definition\nDESCRIPTION: Command to generate Go code from the Protocol Buffer definition using protoc with go and go-triple plugins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative \\\n    --go-triple_out=. --go-triple_opt=paths=source_relative \\\n    ./greet.proto\n```\n\n----------------------------------------\n\nTITLE: Limiting Service Concurrency at Server-Side\nDESCRIPTION: Configures the maximum number of concurrent executions (10) for all methods of a service on the server side using the executes attribute.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" executes=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Zookeeper Configuration File\nDESCRIPTION: Sample content for the zoo.cfg configuration file with essential parameters including tickTime, clientPort, and admin server settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntickTime=2000\nclientPort=2181\nadmin.enableServer=false\n```\n\n----------------------------------------\n\nTITLE: Defining Greet Service in Protocol Buffers\nDESCRIPTION: This protobuf definition outlines the GreetService with two RPC methods: Greet and GreetTimeout. It also defines the request and response message structures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/timeout.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/timeout/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n  rpc GreetTimeout(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring heuristicSmoothingFlowControl in XML\nDESCRIPTION: Enables the heuristicSmoothingFlowControl adaptive flow control algorithm at the provider level using XML configuration. The algorithm monitors CPU usage to determine request acceptance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/adaptive-concurrency-control.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider flowcontrol=\"heuristicSmoothingFlowControl\" />\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing Resource Files\nDESCRIPTION: Reads and parses configuration files line by line, handling comments and key-value pairs for extension definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                          java.net.URL resourceURL, boolean overridden, String... excludedPackages) {\n    try {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\n            String line;\n            String clazz = null;\n            while ((line = reader.readLine()) != null) {\n                final int ci = line.indexOf('#');\n                if (ci >= 0) {\n                    line = line.substring(0, ci);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    try {\n                        String name = null;\n                        int i = line.indexOf('=');\n                        if (i > 0) {\n                            name = line.substring(0, i).trim();\n                            clazz = line.substring(i + 1).trim();\n                        } else {\n                            clazz = line;\n                        }\n                        if (StringUtils.isNotEmpty(clazz) && !isExcluded(clazz, excludedPackages)) {\n                            loadClass(extensionClasses, resourceURL, Class.forName(clazz, true, classLoader), name, overridden);\n                        }\n                    } catch (Throwable t) {\n                        IllegalStateException e = new IllegalStateException(\"Failed to load extension class (interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\n                        exceptions.put(line, e);\n                    }\n                }\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", class file: \" + resourceURL + \") in \" + resourceURL, t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing Configuration in Istio VirtualService\nDESCRIPTION: This YAML configuration shows a VirtualService that routes traffic to different versions of the 'reviews' service based on user identity. Requests from user 'jason' are routed to v2, while all other users are directed to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Enabling Deadline Mechanism with YAML\nDESCRIPTION: Configure timeout with deadline mechanism enabled using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    timeout: 5000\n    parameters.enable-timeout-countdown: true\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing Resource Files\nDESCRIPTION: Reads and parses configuration files line by line, handling comments and key-value pairs for extension definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                          java.net.URL resourceURL, boolean overridden, String... excludedPackages) {\n    try {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\n            String line;\n            String clazz = null;\n            while ((line = reader.readLine()) != null) {\n                final int ci = line.indexOf('#');\n                if (ci >= 0) {\n                    line = line.substring(0, ci);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    try {\n                        String name = null;\n                        int i = line.indexOf('=');\n                        if (i > 0) {\n                            name = line.substring(0, i).trim();\n                            clazz = line.substring(i + 1).trim();\n                        } else {\n                            clazz = line;\n                        }\n                        if (StringUtils.isNotEmpty(clazz) && !isExcluded(clazz, excludedPackages)) {\n                            loadClass(extensionClasses, resourceURL, Class.forName(clazz, true, classLoader), name, overridden);\n                        }\n                    } catch (Throwable t) {\n                        IllegalStateException e = new IllegalStateException(\"Failed to load extension class (interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\n                        exceptions.put(line, e);\n                    }\n                }\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", class file: \" + resourceURL + \") in \" + resourceURL, t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Thread Stack Information for Debugging Serialization Issues\nDESCRIPTION: Command to generate a thread dump file for analyzing stack information when troubleshooting serialization exceptions in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/23.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultMetricsCollector Class in Java\nDESCRIPTION: Implements the MetricsCollector interface to store and manage various metrics using ConcurrentHashMaps.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class DefaultMetricsCollector implements MetricsCollector {\n    private Boolean collectEnabled = false;\n    private final List<MetricsListener> listeners = new ArrayList<>();\n    private final ApplicationModel applicationModel;\n    private final String applicationName;\n\n    private final Map<MethodMetric, AtomicLong> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> processingRequests = new ConcurrentHashMap<>();\n\n    private final Map<MethodMetric, AtomicLong> lastRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> minRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> maxRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> avgRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> totalRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> rtCount = new ConcurrentHashMap<>();\n }\n```\n\n----------------------------------------\n\nTITLE: Module Deployer Service Start Implementation\nDESCRIPTION: Details the ModuleDeployer start method which handles service exporting and referencing, with support for both synchronous and asynchronous initialization patterns and proper state transitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public synchronized Future start() throws IllegalStateException {\n    \t//模块发布器已经停止或者启动失败则直接抛出异常返回\n        if (isStopping() || isStopped() || isFailed()) {\n            throw new IllegalStateException(getIdentifier() + \" is stopping or stopped, can not start again\");\n        }\n\n        try {\n        \t//启动中或者已经启动了则直接返回一个Future对象 \n            if (isStarting() || isStarted()) {\n                return startFuture;\n            }\n\t\t\t//切换模块启动状态为STARTING\n            onModuleStarting();\n\n            // initialize\n            //如果应用未初始化则初始化（非正常逻辑）\n            applicationDeployer.initialize();\n            //模块发布器进行初始化\n            initialize();\n\n            // export services\n            //暴露服务\n            exportServices();\n\n            // prepare application instance\n            // exclude internal module to avoid wait itself\n            if (moduleModel != moduleModel.getApplicationModel().getInternalModule()) {\n                applicationDeployer.prepareInternalModule();\n            }\n\n            // refer services\n\t\t\t//引用服务\n            referServices();\n\n            // if no async export/refer services, just set started\n            //非异步启动则直接切换状态为STARTED\n            if (asyncExportingFutures.isEmpty() && asyncReferringFutures.isEmpty()) {\n                onModuleStarted();\n            } else {\n            //如果是异步的则等待服务发布和服务引用异步回调\n                frameworkExecutorRepository.getSharedExecutor().submit(() -> {\n                    try {\n                        // wait for export finish\n                        waitExportFinish();\n                        // wait for refer finish\n                        waitReferFinish();\n                    } catch (Throwable e) {\n                        logger.warn(\"wait for export/refer services occurred an exception\", e);\n                    } finally {\n                    \t//异步回调完成 所有服务都启动了，再切换状态\n                        onModuleStarted();\n                    }\n                });\n            }\n        } catch (Throwable e) {\n            onModuleFailed(getIdentifier() + \" start failed: \" + e, e);\n            throw e;\n        }\n        return startFuture;\n    }\n```\n\n----------------------------------------\n\nTITLE: Building and Verifying Maven Package Release\nDESCRIPTION: Commands to build, test, and deploy Maven packages with the release profile, ensuring all components work correctly before pushing to Maven Central.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy\n```\n\n----------------------------------------\n\nTITLE: Client Application for Calling Dubbo Services\nDESCRIPTION: Java client application that initializes a Spring context from client.xml, obtains a remote proxy to GreetingService, and makes a remote call. This demonstrates how to consume Dubbo services with Zipkin tracing enabled.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.client;\n\nimport com.alibaba.dubbo.samples.api.GreetingService;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Application {\n\n    public static void main(String[] args) {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/client.xml\");\n        context.start();\n        // Obtain the remote proxy and initiate the call\n        GreetingService greetingService = (GreetingService) context.getBean(\"greetingService\");\n        System.out.println(greetingService.greeting(\"world\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HelloService Application Startup\nDESCRIPTION: Java class to start the HelloService application by loading the Spring XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.alibaba.dubbo.samples.service.hello;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/hello-service.xml\");\n        context.start();\n\n        System.out.println(\"Hello service started\");\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Merger Extension in Dubbo XML\nDESCRIPTION: XML configuration for specifying a merger extension in Dubbo. The 'merger' attribute is used to define the merger to be used for a method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/merger.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method merger=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Zookeeper Integration with Curator 5 for Non-Spring Boot Applications\nDESCRIPTION: For non-Spring Boot applications using Zookeeper Server 3.8.0 or higher, this snippet shows how to integrate Zookeeper with Dubbo using a dependency that manages all required Zookeeper and Curator dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-dependencies-zookeeper-curator5</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating Method for Adaptive Extension Class in Dubbo\nDESCRIPTION: Method that generates the implementation for a specific method in the adaptive extension class. It composes the method signature including return type, name, arguments, and exceptions, then adds the method content.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate String generateMethod(Method method) {\n    String methodReturnType = method.getReturnType().getCanonicalName();\n    String methodName = method.getName();\n    // 生成方法内容\n    String methodContent = generateMethodContent(method);\n    String methodArgs = generateMethodArguments(method);\n    String methodThrows = generateMethodThrows(method);\n    return String.format(CODE_METHOD_DECLARATION, methodReturnType, methodName, methodArgs, methodThrows, methodContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Service-Level Flow Control in XML\nDESCRIPTION: Applies the heuristicSmoothingFlowControl adaptive flow control algorithm to a specific service interface. This allows for granular flow control at the individual service level instead of globally.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/adaptive-concurrency-control.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" flowcontrol=\"heuristicSmoothingFlowControl\" />\n```\n\n----------------------------------------\n\nTITLE: Default Dubbo Admin configuration profile in YAML\nDESCRIPTION: Default YAML configuration for Dubbo Admin, specifying enabled components and their versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dubbo.apache.org/v1alpha1\nkind: DubboOperator\nmetadata:\n  namespace: dubbo-system\nspec:\n  profile: default\n  namespace: dubbo-system\n  componentsMeta:\n    admin:\n      enabled: true\n    grafana:\n      enabled: true\n      repoURL: https://grafana.github.io/helm-charts\n      version: 6.52.4\n    nacos:\n      enabled: true\n    zookeeper:\n      enabled: true\n      repoURL: https://charts.bitnami.com/bitnami\n      version: 11.1.6\n    prometheus:\n      enabled: true\n      repoURL: https://prometheus-community.github.io/helm-charts\n      version: 20.0.2\n    skywalking:\n      enabled: true\n      repoURL: https://apache.jfrog.io/artifactory/skywalking-helm\n      version: 4.3.0\n    zipkin:\n      enabled: true\n      repoURL: https://openzipkin.github.io/zipkin\n      version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Dependencies for Dubbo API-based Projects\nDESCRIPTION: XML configuration for including the necessary dependencies for OpenTelemetry tracing with OTLP exporter in a Dubbo API-based project. This includes the core dubbo-tracing library, the OpenTelemetry bridge, and the OTLP exporter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/otlp.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- Required, core dependency of dubbo-tracing -->\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-tracing</artifactId>\n    </dependency>\n    <!-- Opentelemetry as Tracer -->\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-tracing-bridge-otel</artifactId>\n    </dependency>\n    <!-- OTlp as exporter -->\n    <dependency>\n        <groupId>io.opentelemetry</groupId>\n        <artifactId>opentelemetry-exporter-otlp</artifactId>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Configuration Using Dubbo QoS Telnet Commands\nDESCRIPTION: Connect to the Dubbo QoS service on port 22222 and use the getConfig command to check the registry configuration details of a provider application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n➜ telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>getConfig RegistryConfig\nApplicationModel: Dubbo Application[1.1](first-dubbo-provider)\nRegistryConfig: null\n<dubbo:registry address=\"nacos://127.0.0.1:8848\" protocol=\"nacos\" port=\"8848\" />\n\n```\n\n----------------------------------------\n\nTITLE: External Servlet Mapping Configuration for Dubbo REST in XML\nDESCRIPTION: Shows the servlet mapping configuration in web.xml when using an external servlet container with Dubbo REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<servlet-mapping>\n     <servlet-name>dispatcher</servlet-name>\n     <url-pattern>/services/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Metadata Center in XML\nDESCRIPTION: XML configuration to enable Zookeeper as the metadata center for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Optimized RoundRobinLoadBalance with Constant Time Complexity\nDESCRIPTION: The first optimization of RoundRobinLoadBalance that addresses performance issues with large weights. It uses an index-based approach to achieve constant time complexity for server selection, avoiding the need for extensive weight decrementing operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> indexSeqs = new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size();\n        int maxWeight = 0;\n        int minWeight = Integer.MAX_VALUE;\n        final List<Invoker<T>> invokerToWeightList = new ArrayList<>();\n        \n        // 查找最大和最小权重\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            maxWeight = Math.max(maxWeight, weight);\n            minWeight = Math.min(minWeight, weight);\n            if (weight > 0) {\n                invokerToWeightList.add(invokers.get(i));\n            }\n        }\n        \n        // 获取当前服务对应的调用序列对象 AtomicPositiveInteger\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            // 创建 AtomicPositiveInteger，默认值为0\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n        \n        // 获取下标序列对象 AtomicPositiveInteger\n        AtomicPositiveInteger indexSeq = indexSeqs.get(key);\n        if (indexSeq == null) {\n            // 创建 AtomicPositiveInteger，默认值为 -1\n            indexSeqs.putIfAbsent(key, new AtomicPositiveInteger(-1));\n            indexSeq = indexSeqs.get(key);\n        }\n\n        if (maxWeight > 0 && minWeight < maxWeight) {\n            length = invokerToWeightList.size();\n            while (true) {\n                int index = indexSeq.incrementAndGet() % length;\n                int currentWeight = sequence.get() % maxWeight;\n\n                // 每循环一轮（index = 0），重新计算 currentWeight\n                if (index == 0) {\n                    currentWeight = sequence.incrementAndGet() % maxWeight;\n                }\n                \n                // 检测 Invoker 的权重是否大于 currentWeight，大于则返回\n                if (getWeight(invokerToWeightList.get(index), invocation) > currentWeight) {\n                    return invokerToWeightList.get(index);\n                }\n            }\n        }\n        \n        // 所有 Invoker 权重相等，此时进行普通的轮询即可\n        return invokers.get(sequence.incrementAndGet() % length);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Application\nDESCRIPTION: Commands for building Docker image and generating Kubernetes deployment manifests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/deploy.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl build --dockerfile=./Dockerfile\ndubboctl deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Dubbo Demo Page\nDESCRIPTION: YAML front matter configuration for a Hugo page that sets up a demo layout with specific settings including title, custom layout path, and hiding the table of contents.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/demo/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Demo\"\nlayout: \"shortcodes/blocks/demo-en\"\ntoc_hide: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Dependency for Dubbo Metadata Center\nDESCRIPTION: Maven dependency configuration required for using Consul as a metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-metadata-report-consul</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring DispatcherServlet for Dubbo Webservice\nDESCRIPTION: XML configuration for setting up the DispatcherServlet in a web application to handle Dubbo Webservice requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<servlet>\n         <servlet-name>dubbo</servlet-name>\n         <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n         <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n         <servlet-name>dubbo</servlet-name>\n         <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Client-Side Controller Implementation in Java\nDESCRIPTION: The UserController class implements a Spring MVC REST controller that references a Dubbo service. It exposes an endpoint to find users by ID that calls the Dubbo client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class UserController {\n\n\t@Reference(version = \"1.0.0\")\n\tprivate UserService userService;\n\n\t@GetMapping(\"/user/{id}\")\n\tpublic User findUserById(@PathVariable Integer id) {\n\t\treturn userService.findUser(id);\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Consumer-side Configuration for REST Service References\nDESCRIPTION: Consumer-side configuration for timeout and connection limits when calling REST services. While possible, it's generally recommended to configure these at the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxx\" interface=\"xxx\" timeout=\"2000\" connections=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Method-Level Caching in Dubbo with Annotations\nDESCRIPTION: Java annotation configuration for enabling LRU caching on a specific method of a client-side Dubbo service reference. This applies caching only to the specified method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(methods = {@Method(name=\"sayHello\",cache = \"lru\")})\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Machine-Specific Access Log Configuration in YAML\nDESCRIPTION: YAML configuration for enabling access logs for a specific machine instance. This configuration allows targeted logging for debugging specific instances by matching IP addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - match\n     address:\n       oneof:\n        - wildcard: \"{ip}:*\"\n    side: provider\n    parameters:\n      accesslog: true\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Service Routes in Istio\nDESCRIPTION: YAML configuration showing virtual service definitions that route traffic to v1 versions of Bookinfo microservices. The configuration includes route rules for details, productpage, ratings, and reviews services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Timeout on Provider Side\nDESCRIPTION: Specifies a 5-second timeout for DemoService implementation using @DubboService annotation on the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(timeout=5000)\npublic class DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider in Java\nDESCRIPTION: Java main class to start the Dubbo service provider using Spring context\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Provider {\n    public static void main(String[] args) throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/dubbo-demo-provider.xml\"});\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Etcd ServiceDiscovery Core Logic\nDESCRIPTION: Main implementation of the Etcd-based service discovery including registration, unregistration and instance management functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class EtcdServiceDiscovery extends AbstractServiceDiscovery {\n\n    private final Set<String> services = new ConcurrentHashSet<>();\n    private final Map<String, InstanceChildListener> childListenerMap = new ConcurrentHashMap<>();\n\n    EtcdClient etcdClient;\n\n    public EtcdServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {\n        super(applicationModel, registryURL);\n        EtcdTransporter etcdTransporter = applicationModel.getExtensionLoader(EtcdTransporter.class).getAdaptiveExtension();\n\n        etcdClient = etcdTransporter.connect(registryURL);\n\n        etcdClient.addStateListener(state -> {\n            if (state == StateListener.CONNECTED) {\n                try {\n                    recover();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        });\n\n        this.registryURL = registryURL;\n    }\n\n    @Override\n    public void doRegister(ServiceInstance serviceInstance) {\n        try {\n            String path = toPath(serviceInstance);\n            etcdClient.putEphemeral(path, new Gson().toJson(serviceInstance));\n            services.add(serviceInstance.getServiceName());\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to register \" + serviceInstance + \" to etcd \" + etcdClient.getUrl()\n                + \", cause: \" + (OptionUtil.isProtocolError(e)\n                ? \"etcd3 registry may not be supported yet or etcd3 registry is not available.\"\n                : e.getMessage()), e);\n        }\n    }\n\n    @Override\n    protected void doUnregister(ServiceInstance serviceInstance) {\n        try {\n            String path = toPath(serviceInstance);\n            etcdClient.delete(path);\n            services.remove(serviceInstance.getServiceName());\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to unregister \" + serviceInstance + \" to etcd \" + etcdClient.getUrl() + \", cause: \" + e.getMessage(), e);\n        }\n    }\n\n    @Override\n    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {\n        for (String serviceName : listener.getServiceNames()) {\n            registerServiceWatcher(serviceName, listener);\n        }\n    }\n\n    @Override\n    public List<ServiceInstance> getInstances(String serviceName) {\n        List<String> children = etcdClient.getChildren(toParentPath(serviceName));\n        if (CollectionUtils.isEmpty(children)) {\n            return Collections.emptyList();\n        }\n        List<ServiceInstance> list = new ArrayList<>(children.size());\n        for (String child : children) {\n            ServiceInstance serviceInstance = new Gson().fromJson(etcdClient.getKVValue(child), DefaultServiceInstance.class);\n            list.add(serviceInstance);\n        }\n        return list;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Contract Definition\nDESCRIPTION: Interface definition that serves as the service contract between Dubbo providers and consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dubbo Registry Implementations via Properties\nDESCRIPTION: Properties file configuration showing common registry implementations supported by Dubbo including Nacos and Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Dubbo对外支持的常用注册中心实现\nnacos=org.apache.dubbo.registry.nacos.NacosServiceDiscoveryFactory\nzookeeper=org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastjson2 in Properties File\nDESCRIPTION: Properties file configuration options for enabling Fastjson2 serialization at different levels: protocol, consumer, and reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson2.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.serialization=fastjson2\n\n# or\ndubbo.consumer.serialization=fastjson2\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=fastjson2\n```\n\n----------------------------------------\n\nTITLE: Modifying Timeout with Dynamic Configuration Rule in Dubbo YAML\nDESCRIPTION: This YAML snippet shows how to dynamically modify the timeout parameter for a specific service (UserService) to 2000ms using Dubbo's dynamic configuration rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nkey: org.apache.dubbo.samples.UserService\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Generic Client\nDESCRIPTION: Go code demonstrating how to configure and make generic calls to Java server using Triple protocol and Hessian2 serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic-2.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 初始化 Reference 配置\nrefConf := config.NewReferenceConfigBuilder().\n  SetInterface(\"org.apache.dubbo.UserProvider\").\n  SetRegistryIDs(\"zk\").\n  SetProtocol(tripleConst.TRIPLE).\n  SetGeneric(true).\n  SetSerialization(\"hessian2\").\n  Build()\n\n// 构造 Root 配置，引入注册中心模块\nrootConfig := config.NewRootConfigBuilder().\n  AddRegistry(\"zk\", config.NewRegistryConfigWithProtocolDefaultPort(\"zookeeper\")).\n  Build()\n\n// Reference 配置初始化，因为需要使用注册中心进行服务发现，需要传入经过配置的 rootConfig\nif err := refConf.Init(rootConfig); err != nil{\n  panic(err)\n}\n\n// 泛化调用加载、服务发现\nrefConf.GenericLoad(appName)\n\ntime.Sleep(time.Second)\n\n// 发起泛化调用\nresp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(\n  context.TODO(),\n  \"getUser1\",\n  []string{\"java.lang.String\"},\n  []hessian.Object{\"A003\"},\n)\n\nif err != nil {\n  panic(err)\n}\nlogger.Infof(\"GetUser1(userId string) res: %+v\", resp)\n```\n\n----------------------------------------\n\nTITLE: Configuring ShenYu Client and Dubbo Registry\nDESCRIPTION: YAML configuration for the Dubbo example, including server settings, Dubbo registry configuration, and ShenYu client registration properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 8011\n  address: 0.0.0.0\n  servlet:\n    context-path: /\nspring:\n  main:\n    allow-bean-definition-overriding: true\ndubbo:\n  registry:\n    address: zookeeper://localhost:2181  # dubbo registration center\n    \nshenyu:\n  register:\n    registerType: http # Registration method\n    serverLists: http://localhost:9095 # Registration address\n    props:\n      username: admin \n      password: 123456\n  client:\n    dubbo:\n      props:\n        contextPath: /dubbo  \n        appName: dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring TPS Limiter in Dubbo-go Server\nDESCRIPTION: This snippet demonstrates how to set up a simple rate limiting strategy on the server side in Dubbo-go using the TpsLimiter component. It includes method selection and configuration of rate limiting parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/traffic/sentinel.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nserver.WithTpsLimiter(\"method-service\") // Currently supports implementations like method-service, polaris, etc.\nserver.WithTpsLimiterXxx() // Set rate limiting related thresholds, please fill in according to the specific method\n//tps.limit.strategy: \"slidingWindow\"\n//tps.limit.rejected.handler: \"default\"\n//tps.limit.interval: 1000\n//tps.limit.rate: 3\n```\n\n----------------------------------------\n\nTITLE: Defining DubboMethodMatch in VirtualService\nDESCRIPTION: Example of a DubboMethodMatch configuration within a VirtualService. It shows how to specify matching criteria for method names, argument count, argument types, and values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - method: #DubboMethodRequest\n        - name_match:\n          argc:\n          args:\n          argp:\n          headers:\n```\n\n----------------------------------------\n\nTITLE: Implementing GreetingService in Java\nDESCRIPTION: This Java class implements the GreetingService interface. It includes a dependency on HelloService, simulates processing delay, and calls the HelloService's hello method within its greeting method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.service.greeting;\n\nimport com.alibaba.dubbo.samples.api.GreetingService;\nimport com.alibaba.dubbo.samples.api.HelloService;\n\nimport java.util.Random;\n\npublic class GreetingServiceImpl implements GreetingService {\n    // Downstream dependency service, which gets the HelloService proxy from spring container at runtime\n    private HelloService helloService;\n\n    public void setHelloService(HelloService helloService) {\n        this.helloService = helloService;\n    }\n\n    @Override\n    public String greeting(String message) {\n        try {\n            // Simulate business logic processing time with sleep\n            Thread.sleep(new Random(System.currentTimeMillis()).nextInt(1000));\n        } catch (InterruptedException e) {\n            // no op\n        }\n        return \"greeting, \" + helloService.hello(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Service Routes in Istio\nDESCRIPTION: YAML configuration showing virtual service definitions that route traffic to v1 versions of Bookinfo microservices. The configuration includes route rules for details, productpage, ratings, and reviews services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUser Service Handler in Go\nDESCRIPTION: Implementation of the UserProvider service handler that returns user information based on the input CallUserStruct.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (u *UserProvider) GetUser(ctx context.Context, userStruct *CallUserStruct) (*User, error) {\n\tfmt.Printf(\"=======================\\nreq:%#v\\n\", userStruct)\n\trsp := User{\"A002\", \"Alex Stocks\", 18, userStruct.SubInfo}\n\tfmt.Printf(\"=======================\\nrsp:%#v\\n\", rsp)\n\treturn &rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Routing Rule in YAML\nDESCRIPTION: YAML configuration for a conditional routing rule that directs all calls to the getInfo method of UserService to a specific host.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nconditions:\n  - 'method=getInfo => host = {your ip address}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Connection Limits for REST Services\nDESCRIPTION: Service-side configuration for consumer timeout and maximum connections. This sets limits for consumers calling this REST service within the Dubbo ecosystem.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"xxx\" ref=\"xxx\" protocol=\"rest\" timeout=\"2000\" connections=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Dubbo-Go-Pixiu Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Dubbo-Go-Pixiu Getting Started Overview page. It includes page aliases for URL redirection, description, link title, title, document type, and weight for ordering in the navigation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/overview/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/docs3-v2/dubbo-go-pixiu/overview/\n    - /en/docs3-v2/dubbo-go-pixiu/overview/\n    - /en/overview/reference/pixiu/overview/\n    - /en/overview/mannual/dubbo-go-pixiu/overview/\ndescription: Getting Started Overview\nlinkTitle: Getting Started Overview\ntitle: Getting Started Overview\ntype: docs\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Adding msgpack Dependencies in Maven\nDESCRIPTION: These XML snippets show how to add the required msgpack dependencies to the Maven project for both provider and consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/msgpack-serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.msgpack</groupId>\n    <artifactId>msgpack-core</artifactId>\n    <version>0.8.22</version>\n</dependency>\n\n<dependency>\n    <groupId>org.msgpack</groupId>\n    <artifactId>jackson-dataformat-msgpack</artifactId>\n    <version>0.8.22</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Deployment\nDESCRIPTION: Commands for building and running Dubbo application in Docker\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -f ./Dockerfile -t quickstart\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run quickstart -p port1:port2\n```\n\n----------------------------------------\n\nTITLE: Specifying Direct Connection via JVM Parameter\nDESCRIPTION: Maps a service to a specific provider URL using JVM -D parameter at application startup, which has the highest priority among configuration methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Probe Configuration\nDESCRIPTION: Example configuration for liveness, readiness, and startup probes in Kubernetes deployment manifests. Defines health check endpoints and timing parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /live\n    port: 22222\n  initialDelaySeconds: 5\n  periodSeconds: 5\nreadinessProbe:\n  httpGet:\n    path: /ready\n    port: 22222\n  initialDelaySeconds: 5\n  periodSeconds: 5\nstartupProbe:\n  httpGet:\n    path: /startup\n    port: 22222\n  failureThreshold: 30\n  periodSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Multiple Registry Centers Configuration in YAML\nDESCRIPTION: Demonstrates how to configure multiple registry centers with different addresses and modes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registries\n  beijingRegistry\n   register-mode: instance # New users are advised to use this; old users should remove this configuration if they wish to continue using the old service discovery model\n   address: zookeeper://localhost:2181\n  shanghaiRegistry\n   register-mode: instance # New users are advised to use this; old users should remove this configuration if they wish to continue using the old service discovery model\n   address: zookeeper://localhost:2182\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter in Java for Dubbo\nDESCRIPTION: This code snippet shows the implementation of a custom Filter called AppendedFilter. It intercepts the service invocation, modifies the response by appending a string, and returns the modified result.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.filter.provider;\n\nimport org.apache.dubbo.rpc.Filter;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.apache.dubbo.rpc.AsyncRpcResult;\n\npublic class AppendedFilter implements Filter {\n\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        Result result= invoker.invoke(invocation);\n        // Obtain the returned value\n        Result appResponse = ((AsyncRpcResult) result).getAppResponse();\n        // Appended value\n        appResponse.setValue(appResponse.getValue()+\"'s customized AppendedFilter\");\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connections Using Property File\nDESCRIPTION: Shows how to use a properties file to map multiple service connections. This method is useful when dealing with many services and is supported in Dubbo versions 1.0.15 and above.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njava -Ddubbo.resolve.file=xxx.properties\n```\n\n----------------------------------------\n\nTITLE: Using Registry as Configuration Center\nDESCRIPTION: Fallback mechanism to use registry center as configuration center when no explicit config center is specified.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate void useRegistryAsConfigCenterIfNecessary() {\n        if (environment.getDynamicConfiguration().isPresent()) {\n            return;\n        }\n        if (CollectionUtils.isNotEmpty(configManager.getConfigCenters())) {\n            return;\n        }\n        configManager.loadConfigsOfTypeFromProps(RegistryConfig.class);\n        List<RegistryConfig> defaultRegistries = configManager.getDefaultRegistries();\n        if (defaultRegistries.size() > 0) {\n            defaultRegistries\n                .stream()\n                .filter(this::isUsedRegistryAsConfigCenter)\n                .map(this::registryAsConfigCenter)\n                .forEach(configCenter -> {\n                    if (configManager.getConfigCenter(configCenter.getId()).isPresent()) {\n                        return;\n                    }\n                    configManager.addConfigCenter(configCenter);\n                    logger.info(\"use registry as config-center: \" + configCenter);\n                });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Dubbo Spring Boot Starter Dependency\nDESCRIPTION: Updates the Dubbo Spring Boot Starter dependency to version 3.2.0. This is required for Spring Boot applications using Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.1-to-3.2-compatibility-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Specifying Dubbo Labels via JVM Arguments and Environment Variables\nDESCRIPTION: Configuration method to tag machines or instances by specifying key-value pairs to be added to the URL using 'dubbo.labels' or 'DUBBO_LABELS'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/isolation.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# JVM Arguments\n-Ddubbo.labels = \"tag1=value1; tag2=value2\"\n\n# Environment Variables\nDUBBO_LABELS = \"tag1=value1; tag2=value2\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invoker with Minimum Active Number\nDESCRIPTION: Code snippet showing how the Minimum Active Call load balancing algorithm selects an Invoker when there is only one with the minimum active number.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (leastCount == 1) {\n    // if there is only one minimum value then return directly\n    return invokers.get(leastIndexs[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Interface-Application Mapping in Zookeeper using zkCli\nDESCRIPTION: Shell command example showing how to view the interface-application name mapping stored in Zookeeper using the zkCli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_6\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 26] get /dubbo/mapping/org.apache.dubbo.demo.DemoService\ndemo-provider,two-demo-provider,dubbo-demo-annotation-provider\ncZxid = 0x25a80f\nctime = Thu Jun 10 01:36:40 CST 2021\nmZxid = 0x25a918\nmtime = Fri Jun 11 18:46:40 CST 2021\npZxid = 0x25a80f\ncversion = 0\ndataVersion = 2\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 62\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven settings.xml for Apache Release\nDESCRIPTION: XML configuration to add to Maven settings.xml for Apache repository authentication and GPG passphrase, required for deploying artifacts to Apache repositories.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n...\n <servers>\n   <!-- To publish a snapshot of some part of Maven -->\n   <server>\n     <id>apache.snapshots.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n   <!-- To stage a release of some part of Maven -->\n   <server>\n     <id>apache.releases.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n  ...\n     <!-- gpg passphrase used when generate key -->\n    <server>\n     <id>gpg.passphrase</id>\n     <passphrase><!-- yourKeyPassword --></passphrase>\n   </server>\n </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Placing JAX-RS Annotations on Interface in Dubbo REST\nDESCRIPTION: Alternative approach to place JAX-RS annotations on the service interface instead of the implementation class, which is required when using Dubbo-generated consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/users\")\npublic interface UserService {\n    \n    @GET\n    @Path(\"/{id : \\\\d+}\")\n    @Produces({MediaType.APPLICATION_JSON})\n    User getUser(@PathParam(\"id\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Server via Quickstart Script\nDESCRIPTION: Commands to download and run the Zipkin quickstart script, which installs and starts the Zipkin server using in-memory storage.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSL https://zipkin.io/quickstart.sh | bash -s\n$ java -jar zipkin.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization in Dubbo XML\nDESCRIPTION: XML configuration for specifying the serialization method in Dubbo protocols and providers. This allows setting the serialization at both the protocol and provider levels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"xxx\" />\n<dubbo:provider serialization=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Maven Plugin for Native Image Support\nDESCRIPTION: Maven plugin configuration for generating AOT metadata for Native Image support in Dubbo applications. This configuration specifies the main class and executes the dubbo-process-aot goal during the process-sources phase.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/maven-plugin.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-maven-plugin</artifactId>\n    <version>${dubbo.version}</version>\n    <configuration>\n        <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>process-sources</phase>\n            <goals>\n                <goal>dubbo-process-aot</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Active Load Balancing in Provider Side XML\nDESCRIPTION: XML configuration to set the loadbalance attribute to leastactive for a service, which distributes requests to the provider with the least number of active connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Scanning via Java ApplicationConfig\nDESCRIPTION: Demonstrates how to configure automatic class scanning and trust levels using ApplicationConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setAutoTrustSerializeClass(true);\napplicationConfig.setTrustSerializeClassLevel(3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Groups using API\nDESCRIPTION: Demonstrates how to configure Dubbo service groups programmatically using the API for both providers and consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nServiceConfig<DemoService> service = new ServiceConfig<>();\nservice.setInterface(DemoService.class);\nservice.setGroup(\"demo\");\n\nServiceConfig<DemoService> service2 = new ServiceConfig<>();\nservice.setInterface(DemoService.class);\nservice.setGroup(\"demo2\");\n```\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<DemoService> reference = new ReferenceConfig<>();\nreference.setInterface(DemoService.class);\nreference.setGroup(\"demo\");\n\nReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();\nreference2.setInterface(DemoService.class);\nreference2.setGroup(\"demo2\");\n\nReferenceConfig<DemoService> reference3 = new ReferenceConfig<>();\nreference3.setInterface(DemoService.class);\nreference3.setGroup(\"*\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty IO Threads for REST Protocol in Dubbo XML\nDESCRIPTION: Demonstrates how to configure both IO worker threads and processing threads when using Netty as the REST server in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" iothreads=\"5\" threads=\"100\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Nacos Configuration Center in Properties\nDESCRIPTION: Properties configuration to enable Nacos as a configuration center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Implementing Failsafe Pattern in Dubbo Cluster\nDESCRIPTION: Implementation of FailsafeClusterInvoker that logs exceptions instead of throwing them on failure. Suitable for operations like audit logging where failure can be safely ignored.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class FailsafeClusterInvoker<T> extends AbstractClusterInvoker<T> {\n\n    @Override\n    public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        try {\n            checkInvokers(invokers, invocation);\n            Invoker<T> invoker = select(loadbalance, invocation, invokers, null);\n            return invoker.invoke(invocation);\n        } catch (Throwable e) {\n            logger.error(\"Failsafe ignore exception: \" + e.getMessage(), e);\n            return new RpcResult();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Parameters in Makefile\nDESCRIPTION: Modifies the Makefile to specify the image address, version to be built, and the name for installation via Helm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_5\n\nLANGUAGE: makefile\nCODE:\n```\nIMAGE = xxx/dubbo-go-client\nTAG = 1.0.0\nHELM_INSTALL_NAME = dubbo-go-client\n```\n\n----------------------------------------\n\nTITLE: Implementing RequestMetadata Class in Dubbo's Rest Protocol\nDESCRIPTION: Java class definition for RequestMetadata which stores HTTP request information including method, path, parameters, headers, content types and accepted response formats.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class RequestMetadata implements Serializable {\n\n    private static final long serialVersionUID = -240099840085329958L;\n\n    private String method;// 请求method\n\n    private String path;// 请求url\n\n\n    private Map<String, List<String>> params // param参数?拼接\n\n    private Map<String, List<String>> headers// header;\n\n    private Set<String> consumes // content-type;\n\n    private Set<String> produces // Accept;\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Injection\nDESCRIPTION: Command to enable automatic injection mode for the Kubernetes namespace to connect with Zookeeper registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/deploy.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label namespace dubbo-demo dubbo-injection=enabled --overwrite\n```\n\n----------------------------------------\n\nTITLE: Using String Constants for Media Types in Dubbo REST\nDESCRIPTION: Defining media types using string constants instead of MediaType enums in JAX-RS annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Produces({\"application/json\", \"text/xml\"})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Setting Dubbo Environment Variables\nDESCRIPTION: Examples of setting various Dubbo configuration options using environment variables. These variables control aspects such as application name, registry address, and protocol settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nDUBBO_APPLICATION_NAME=\"dubbo-demo\"\nDUBBO_REGISTRY_ADDRESS=\"nacos://host:port\"\nDUBBO_PROTOCOL_PORT=\"20880\"\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Serialization Extension\nDESCRIPTION: Directory structure showing the required files and their locations for implementing a custom serialization extension in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxSerialization.java (implements Serialization interface)\n                |-XxxObjectInput.java (implements ObjectInput interface)\n                |-XxxObjectOutput.java (implements ObjectOutput interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.common.serialize.Serialization (plain text file, content: xxx=com.xxx.XxxSerialization)\n```\n\n----------------------------------------\n\nTITLE: Configuring Graceful Shutdown Parameters in Dubbo-go YAML\nDESCRIPTION: YAML configuration for customizing graceful shutdown behavior including timeout settings, consumer update wait time, and internal signal handling. Defines various timeouts and flags to control the shutdown process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/graceful_shutdown.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  shutdown:\n    timeout:60\n    step-timeout:3\n    consumer-update-wait-time:3\n    internal-signal:true\n    offline-request-window-timeout:0\n```\n\n----------------------------------------\n\nTITLE: Checking Third-Party License Compliance\nDESCRIPTION: Maven command to generate and check third-party license files for compliance with Apache policies, ensuring no Category X dependencies like GPL/LGPL are included.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmvn license:add-third-party -Dlicense.useMissingFile\nfind . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Registration Listener in Java\nDESCRIPTION: Implements ApplicationListener to scan for @ShenyuDubboClient annotations and register Dubbo services with ShenYu Admin during Spring context refresh.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class ApacheDubboServiceBeanListener implements ApplicationListener<ContextRefreshedEvent> {\n  @Override\n  public void onApplicationEvent(ContextRefreshedEvent event) {\n    // Read Dubbo ServiceBean\n    // Construct metadata and URI objects\n    // Register with shenyu-admin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Redis Registry using Redis CLI\nDESCRIPTION: Commands to interact with the Redis registry using the Redis CLI, retrieving provider information for a specific service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/redis.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./src/redis-cli\nhgetall /dubbo/com.foo.BarService/providers\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Settings for Dubbo Service\nDESCRIPTION: This snippet shows how to configure method-level settings for a Dubbo service reference. It demonstrates setting timeout and retry values for a specific method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n...\n \n// 方法级配置\nList<MethodConfig> methods = new ArrayList<MethodConfig>();\nMethodConfig method = new MethodConfig();\nmethod.setName(\"sayHello\");\nmethod.setTimeout(10000);\nmethod.setRetries(0);\nmethods.add(method);\n \n// 引用远程服务\nReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n...\nreference.setMethods(methods); // 设置方法级配置\n \n...\n```\n\n----------------------------------------\n\nTITLE: Using CompletableFuture with Callback in Dubbo 2.7\nDESCRIPTION: Example of making an asynchronous call in Dubbo 2.7 using CompletableFuture and processing the result with a callback using whenComplete.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nCompletableFuture<String> future = asyncService.sayHiAsync(\"Han MeiMei\");\nfuture.whenComplete((retValue, exception) -> {\n    if (exception == null) {\n        System.out.println(retValue);\n    } else {\n        exception.printStackTrace();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Generic Call in Dubbo-Go\nDESCRIPTION: This code shows how to perform a generic invocation on the GetUser method of the UserProvider service using the ReferenceConfig instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nresp, err := refConf.\n\tGetRPCService().(*generic.GenericService).\n\tInvoke(\n\t\tcontext.TODO(),\n\t\t\"GetUser\",\n\t\t[]string{\"java.lang.String\"},\n\t\t[]hessian.Object{\"A003\"},\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo for Multi-Protocol Publishing with Triple Protocol\nDESCRIPTION: YAML configuration for enabling both dubbo and HTTP/Triple protocols on the same service port. This allows the service to accept both dubbo binary protocol calls from backend services and HTTP requests from frontend clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    dubbo: dubbo\n    port: 20880\n    ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Limiting Service Concurrency per Client (Reference Side)\nDESCRIPTION: Alternative configuration for limiting the maximum number of concurrent executions (10) per client using the reference configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Path Patterns with Variables in Pixiu\nDESCRIPTION: This snippet shows how to define path patterns in Pixiu that include variables. Variables in paths are prefixed with a colon (:) and can be used to extract values from specific URL segments for use in downstream processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/trie.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\npath: '/api/v1/test-dubbo/user/name/:name'\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Provider Exporter in Java\nDESCRIPTION: Exports a service invoker as a REST endpoint. Handles URL mapping, metadata resolution and exporter lifecycle management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\n    URL url = invoker.getUrl();\n    final String uri = serviceKey(url);\n    Exporter<T> exporter = (Exporter<T>) exporterMap.get(uri);\n    if (exporter != null) {\n        if (Objects.equals(exporter.getInvoker().getUrl(), invoker.getUrl())) {\n            return exporter;\n        }\n    }\n    Map<PathMatcher, RestMethodMetadata> metadataMap = MetadataResolver.resolveProviderServiceMetadata(url.getServiceModel().getProxyObject().getClass(),url);\n    PathAndInvokerMapper.addPathAndInvoker(metadataMap, invoker);\n    final Runnable runnable = doExport(proxyFactory.getProxy(invoker, true), invoker.getInterface(), invoker.getUrl());\n    exporter = new AbstractExporter<T>(invoker) {\n        @Override\n        public void afterUnExport() {\n            exporterMap.remove(uri);\n            if (runnable != null) {\n                try {\n                    runnable.run();\n                } catch (Throwable t) {\n                    logger.warn(PROTOCOL_UNSUPPORTED, \"\", \"\", t.getMessage(), t);\n                }\n            }\n        }\n    };\n    exporterMap.put(uri, exporter);\n    return exporter;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Publishing in Dubbo\nDESCRIPTION: XML configuration example showing how to publish a Dubbo service using multiple protocols simultaneously (dubbo, grpc, and rest). This allows the same service to be accessible via different communication protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.DemoService\" protocol=\"dubbo, grpc, rest\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining UserProvider struct for Dubbo Go client\nDESCRIPTION: Creates a UserProvider struct for the client-side with a function signature for GetUser and a Reference method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntype UserProvider struct {\n\tGetUser func(ctx context.Context, req []interface{}, rsp *User) error\n}\n\nfunc (u *UserProvider) Reference() string {\n\treturn \"UserProvider\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Provider v2 on Kubernetes\nDESCRIPTION: This command deploys the v2 version of the Dubbo provider using a Kubernetes deployment manifest.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/provider/Deployment-v2.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Monitor in XML\nDESCRIPTION: The dubbo:monitor element is used to configure the monitoring center in Apache Dubbo. It corresponds to the org.apache.dubbo.config.MonitorConfig class. This configuration allows specifying the monitoring protocol and address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-monitor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:monitor protocol=\"dubbo\" address=\"10.20.130.230:12080\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo SPI for Custom Filter\nDESCRIPTION: SPI configuration to register the custom AppendedFilter implementation with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nappended=org.apache.dubbo.samples.extensibility.filter.provider.AppendedFilter\n```\n\n----------------------------------------\n\nTITLE: Registering Serialization Extension in Dubbo\nDESCRIPTION: Properties file content for registering the custom Serialization implementation with Dubbo's extension mechanism. This file should be placed in the META-INF/dubbo directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxSerialization\n```\n\n----------------------------------------\n\nTITLE: Write Stream Method for Bidirectional Streaming\nDESCRIPTION: Demonstrates the writeStream approach for bidirectional streaming, where the client writes multiple messages individually and then signals completion with done_writing().\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream = stub.bi_stream()\n# Use the write method to send messages\nstream.write(greeter_pb2.GreeterRequest(name=\"jock\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"jane\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"alice\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"dave\"))\n# Call done_writing to notify the server that the client has finished writing\nstream.done_writing()\n```\n\n----------------------------------------\n\nTITLE: Limiting Service Concurrency per Client (Reference Side)\nDESCRIPTION: Alternative configuration for limiting the maximum number of concurrent executions (10) per client using the reference configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing Configuration in Istio\nDESCRIPTION: YAML configuration for user-based routing that directs traffic from user 'jason' to v2 of the reviews service while all other users are routed to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Triple Protocol\nDESCRIPTION: Example of handling exceptions in the consumer side when using the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ntry {\n\tgreeterProxy.echo(REQUEST_MSG);\n} catch (YourCustomizedException e) {\n\t e.printStackTrace();\n } catch (RpcException e) {\n\te.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying GPG Signatures of Release Artifacts\nDESCRIPTION: Commands to verify the GPG signatures of the source and binary release packages to ensure they were signed by an Apache committer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngpg --verify apache-dubbo-2.6.3-source-release.zip.asc apache-dubbo-2.6.3-source-release.zip\ngpg --verify apache-dubbo-2.6.3-bin-release.zip.asc apache-dubbo-2.6.3-bin-release.zip\n```\n\n----------------------------------------\n\nTITLE: Provider SPI Configuration for Custom Protocol\nDESCRIPTION: SPI configuration file for registering the custom edubbo protocol in the provider, mapping it to the EnhancedProtocol implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nedubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol\n```\n\n----------------------------------------\n\nTITLE: Provider SPI Configuration for Custom Protocol\nDESCRIPTION: SPI configuration file for registering the custom edubbo protocol in the provider, mapping it to the EnhancedProtocol implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nedubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Token Verification in Dubbo Provider\nDESCRIPTION: Configuration to enable token verification at the global provider level. The first example shows how to generate a random UUID token, while the second example demonstrates using a fixed token value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/token-authorization.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Random token, generated using UUID -->\n<dubbo:provider token=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Fixed token, equivalent to a password -->\n<dubbo:provider token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Global Token Verification in Dubbo Provider\nDESCRIPTION: Configuration to enable token verification at the global provider level. The first example shows how to generate a random UUID token, while the second example demonstrates using a fixed token value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/token-authorization.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Random token, generated using UUID -->\n<dubbo:provider token=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Fixed token, equivalent to a password -->\n<dubbo:provider token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Dependency for Dubbo Metadata Center\nDESCRIPTION: Maven dependency configuration required for using Redis as a metadata center in Dubbo. Requires jedis client version 3.10.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>3.10.0</version>\n    </dependency>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol in dubbo.properties File\nDESCRIPTION: Shows how to configure the Dubbo protocol using properties file approach instead of XML. This is an alternative configuration method that can be used with dubbo.properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.service.protocol=dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go Framework Logger with Zap\nDESCRIPTION: Example showing how to initialize a Dubbo instance with configured logger settings using Zap and setting the log level to 'warn'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, err := dubbo.NewInstance(\n\tdubbo.WithLogger(\n\t\tlog.WithLevel(\"warn\"),\n\t\tlog.WithZap(),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: ZooKeeper Dynamic Configuration Factory Extension Definition\nDESCRIPTION: Extension configuration that maps the ZooKeeper protocol to its dynamic configuration factory implementation, enabling ZooKeeper to be used as a configuration center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nzookeeper=org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory\n```\n\n----------------------------------------\n\nTITLE: Initializing Heartbeat Timer in Dubbo HeaderExchangeClient\nDESCRIPTION: This code snippet shows how Dubbo initializes the heartbeat timer in the HeaderExchangeClient class. It creates a HashedWheelTimer for heartbeat detection if needed, based on configuration parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class HeaderExchangeClient implements ExchangeClient {\n    private int heartbeat;\n    private int heartbeatTimeout;\n    private HashedWheelTimer heartbeatTimer;\n    public HeaderExchangeClient(Client client, boolean needHeartbeat) {\n        this.client = client;\n        this.channel = new HeaderExchangeChannel(client);\n        this.heartbeat = client.getUrl().getParameter(Constants.HEARTBEAT_KEY, dubbo != null && dubbo.startsWith(\"1.0.\") ? Constants.DEFAULT_HEARTBEAT : 0);\n        this.heartbeatTimeout = client.getUrl().getParameter(Constants.HEARTBEAT_TIMEOUT_KEY, heartbeat * 3);\n        if (needHeartbeat) {\n            long tickDuration = calculateLeastDuration(heartbeat);\n            heartbeatTimer = new HashedWheelTimer(new NamedThreadFactory(\"dubbo-client-heartbeat\", true), tickDuration,\n                    TimeUnit.MILLISECONDS, Constants.TICKS_PER_WHEEL);\n            startHeartbeatTimer();\n        }\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Dump Directory in Dubbo\nDESCRIPTION: These configurations show how to set the directory for thread pool dumps in Dubbo using different configuration formats (properties, XML, and YAML).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.application.dump.directory=/tmp\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" dump-directory=\"/tmp\"/>\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n    dump-directory: /tmp\n```\n\n----------------------------------------\n\nTITLE: Activating Filter for Provider Side\nDESCRIPTION: This code snippet demonstrates how to activate a Filter or ClusterFilter on the provider side using the @Activate annotation with the provider group value. This ensures the filter will be applied to incoming service requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = CommonConstants.PROVIDER)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to injvm in Dubbo\nDESCRIPTION: Sets injvm as the default protocol for all service providers in the Dubbo configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Registry Service Consumer in XML\nDESCRIPTION: XML configuration for a consumer showing how to set up connections to multiple registry centers with different load balancing preferences.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"beijingRegistry\" address=\"zookeeper://${zookeeper.address1}\" default=\"false\" preferred=\"true\" weight=\"100\"/>\n<dubbo:registry id=\"shanghaiRegistry\" address=\"zookeeper://${zookeeper.address2}\" default=\"true\" weight=\"20\"/>\n\n<dubbo:reference interface=\"org.apache.dubbo.samples.multi.registry.api.DemoService\"/>\n\n<dubbo:reference  interface=\"org.apache.dubbo.samples.multi.registry.api.DemoService\" registry=\"beijingRegistry, shanghaiRegistry\"/>\n\n<dubbo:reference interface=\"org.apache.dubbo.samples.multi.registry.api.HelloService\" registry=\"beijingRegistry\"/>\n\n<dubbo:reference interface=\"org.apache.dubbo.samples.multi.registry.api.HelloService\" registry=\"shanghaiRegistry,shanghaiRegistry\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Hash Arguments for Consistent Hash Load Balancing in Dubbo\nDESCRIPTION: This snippet shows how to configure the hash arguments for the Consistent Hash load balancing strategy in Dubbo. It specifies which parameters should be used for hashing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/load-balance.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Push Events Through Application Logs\nDESCRIPTION: Search application logs for events indicating the registry has pushed service invoker changes to the consumer, which confirms service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 11:02:05:005 CST] main  INFO integration.RegistryDirectory:  [DUBBO] Received invokers changed event from registry. Registry type: interface. Service Key: org.apache.dubbo.samples.api.GreetingsService. Urls Size : 1. Invokers Size : 1. Available Size: 1. Available Invokers : 30.221.144.195:20880, dubbo version: 3.2.0-beta.6, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in Dubbo Protocol\nDESCRIPTION: XML configuration to enable Kryo serialization in Dubbo RPC by setting the serialization attribute in the dubbo:protocol element.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Element Names with JAXB in Dubbo REST\nDESCRIPTION: Using JAXB annotations to customize the XML element names when serializing Java objects in REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class User implements Serializable {\n    \n    @XmlElement(name=\"username\") \n    private String name;  \n}\n```\n\n----------------------------------------\n\nTITLE: Starting Go Server for Dubbo Intercommunication\nDESCRIPTION: This command starts the Go server implementation on port 50052. It's the first step in setting up the Java client to Go server communication scenario.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run go/go-server/cmd/server.go\n```\n\n----------------------------------------\n\nTITLE: Dubbo MetadataReportConfig Class Definition\nDESCRIPTION: Configuration class for Dubbo metadata reporting functionality. Contains properties for metadata center connection, authentication, and reporting behavior.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MetadataReportConfig\n```\n\n----------------------------------------\n\nTITLE: Handling POJO Parameters in Dubbo Generic Calls\nDESCRIPTION: This example demonstrates how to pass POJO parameters in generic calls by using Map representations. It shows how to structure the Map with class information and property values for the POJO parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nString[] parameterTypes = new String[]{\"com.alibaba.dubbo.samples.generic.api.Params\"};\nMap<String, Object> params = new HashMap<String, Object>();\nparam.put(\"class\", \"com.alibaba.dubbo.samples.generic.api.Params\");\nparam.put(\"query\", \"a=b\");\nObject user = userService.$invoke(\"get\", parameterTypes, new Object[]{param});\nSystem.out.println(\"sample one result: \" + user);\n```\n\n----------------------------------------\n\nTITLE: Configuring MessagePack in Spring Boot YAML\nDESCRIPTION: YAML configuration to enable MessagePack serialization in a Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   serialization: msgpack\n```\n\n----------------------------------------\n\nTITLE: Deploying Containers to Kubernetes\nDESCRIPTION: Commands for deploying provider and consumer containers to Kubernetes\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/mesh/mesh.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\ncd ./dubbo-samples-xds-provider/src/main/resources/k8s\nkubectl apply -f Deployment.yml\nkubectl apply -f Service.yml\ncd ../../../../../dubbo-samples-xds-consumer/src/main/resources/k8s\nkubectl apply -f Deployment.yml\ncd ../../../../../\n```\n\n----------------------------------------\n\nTITLE: Implementing the @Service Annotation in Dubbo\nDESCRIPTION: Shows the implementation of the @Service annotation used to configure Dubbo service providers, including all available properties for customization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.config.annotation;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE}) // #1\n@Inherited\npublic @interface Service {\n    Class<?> interfaceClass() default void.class; // #2\n    String interfaceName() default \"\"; // #3\n    String version() default \"\"; // #4\n    String group() default \"\"; // #5\n    boolean export() default true; // #6\n    boolean register() default true; // #7\n    \n    String application() default \"\"; // #8\n    String module() default \"\"; // #9\n    String provider() default \"\"; // #10\n    String[] protocol() default {}; // #11\n    String monitor() default \"\"; // #12\n    String[] registry() default {}; // #13\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Dubbo Consumer\nDESCRIPTION: Maven POM configuration file that sets up dependencies for Spring Boot, Dubbo, and related testing frameworks. Includes repository configuration and build plugins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.example</groupId>\n\t<artifactId>demo-consumer</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>demo-consumer</name>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>sonatype-nexus-snapshots</id>\n\t\t\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.boot</groupId>\n\t\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t\t<version>0.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.example</groupId>\n\t\t\t<artifactId>demo-api</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<classifier>exec</classifier>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper in Docker Container\nDESCRIPTION: Docker command to start a Zookeeper container. It maps port 2181, disables the admin server, sets restart policy, and specifies the Zookeeper version to use.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name some-zookeeper -p 2181:2181 -e JVMFLAGS=\"-Dzookeeper.admin.enableServer=false\" --restart always -d zookeeper:3.8.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-level Governance Rules in Dubbo\nDESCRIPTION: A YAML configuration example that shows how to modify the weight parameter for all services provided by an application on a specific port. This demonstrates application-level rule configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# 将应用demo（key:demo）在20880端口上提供（side:provider）的所有服务（scope:application）的权重修改为1000（weight:1000）。\n---\nconfigVersion: v2.7\nscope: application\nkey: demo\nenabled: true\nconfigs:\n- addresses: [\"0.0.0.0:20880\"]\n  side: provider\n  parameters:\n  weight: 1000\n  ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Interfaces\nDESCRIPTION: Methods to export or reference Dubbo service interfaces. These operations automatically trigger module startup if needed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/workflow.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nServiceConfig.export()\nReferenceConfig.get()\n```\n\n----------------------------------------\n\nTITLE: Referencing Services in DefaultModuleDeployer in Dubbo\nDESCRIPTION: Implementation of service reference handling in Dubbo's DefaultModuleDeployer. This method manages the lifecycle of service references, handling async referencing, refreshing, and error handling for service references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate void referServices() {\n     //这个是获取配置的所有的ReferenceConfigBase类型对象\n    configManager.getReferences().forEach(rc -> {\n        try {\n            ReferenceConfig<?> referenceConfig = (ReferenceConfig<?>) rc;\n            if (!referenceConfig.isRefreshed()) {\n                //刷新引用配置\n                referenceConfig.refresh();\n            }\n\n            if (rc.shouldInit()) {\n                if (referAsync || rc.shouldReferAsync()) {\n                    ExecutorService executor = executorRepository.getServiceReferExecutor();\n                    CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {\n                        try {\n                            //间接的通过缓存对象来引用服务配置\n                            referenceCache.get(rc);\n                        } catch (Throwable t) {\n                            logger.error(getIdentifier() + \" refer async catch error : \" + t.getMessage(), t);\n                        }\n                    }, executor);\n\n                    asyncReferringFutures.add(future);\n                } else {\n                    //间接的通过缓存对象来引用服务配置\n                    referenceCache.get(rc);\n                }\n            }\n        } catch (Throwable t) {\n            logger.error(getIdentifier() + \" refer catch error.\");\n            //出现异常销毁引用配置\n            referenceCache.destroy(rc);\n            throw t;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd as Configuration Center in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Etcd as the configuration center for Dubbo. It specifies the address of the Etcd server using the etcd protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/others.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: etcd://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Client with Timeout Handling\nDESCRIPTION: This Go code creates a Dubbo-go client with a 3-second timeout, then makes calls to both Greet and GreetTimeout methods, demonstrating timeout handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/timeout.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/timeout/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"tri://127.0.0.1:20000\"),\n\t\tclient.WithClientRequestTimeout(3*time.Second),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// test timeout\n\tresp, err := svc.GreetTimeout(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(\"call [greet.GreetService.GreetTimeout] service timeout\")\n\t\tlogger.Error(err)\n\t} else {\n\t\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n\t}\n\n\t// test normal\n\tresp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Consul Registry Dependency in Maven for Dubbo\nDESCRIPTION: This XML snippet shows how to add the Consul registry dependency to a Maven project for use with Dubbo 3.x. The dependency is required as Consul support is no longer embedded in Dubbo core.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/consul.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-registry-consul</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Executors Using XML in Dubbo\nDESCRIPTION: This snippet demonstrates configuring isolated thread pools for Dubbo services using XML configuration. The example defines custom thread pools through bean definitions and assigns them to specific services using the executor attribute. The configuration requires executor-management-mode=\"isolation\" to enable thread pool isolation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n  <!-- NOTE: we need config executor-management-mode=\"isolation\" -->\n  <dubbo:application name=\"demo-provider\" executor-management-mode=\"isolation\">\n  </dubbo:application>\n\n  <dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n  <dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n  <dubbo:registry id=\"registry1\" address=\"zookeeper://127.0.0.1:2181?registry-type=service\"/>\n\n  <dubbo:protocol name=\"dubbo\" port=\"-1\"/>\n  <dubbo:protocol name=\"tri\" port=\"-1\"/>\n\n  <!-- expose three service with dubbo and tri protocol-->\n  <bean id=\"demoServiceV1\" class=\"org.apache.dubbo.config.spring.impl.DemoServiceImpl\"/>\n  <bean id=\"helloServiceV2\" class=\"org.apache.dubbo.config.spring.impl.HelloServiceImpl\"/>\n  <bean id=\"helloServiceV3\" class=\"org.apache.dubbo.config.spring.impl.HelloServiceImpl\"/>\n\n  <!-- customized thread pool -->\n  <bean id=\"executor-demo-service\"\n        class=\"org.apache.dubbo.config.spring.isolation.spring.support.DemoServiceExecutor\"/>\n  <bean id=\"executor-hello-service\"\n        class=\"org.apache.dubbo.config.spring.isolation.spring.support.HelloServiceExecutor\"/>\n\n  <!-- this service use [executor=\"executor-demo-service\"] as isolated thread pool-->\n  <dubbo:service executor=\"executor-demo-service\"\n                 interface=\"org.apache.dubbo.config.spring.api.DemoService\" version=\"1.0.0\" group=\"Group1\"\n                 timeout=\"3000\" ref=\"demoServiceV1\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n  <!-- this service use [executor=\"executor-hello-service\"] as isolated thread pool-->\n  <dubbo:service executor=\"executor-hello-service\"\n                 interface=\"org.apache.dubbo.config.spring.api.HelloService\" version=\"2.0.0\" group=\"Group2\"\n                 timeout=\"5000\" ref=\"helloServiceV2\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n  <!-- not set executor for this service, the default executor built using threadpool parameter of the protocolConfig -->\n  <dubbo:service interface=\"org.apache.dubbo.config.spring.api.HelloService\" version=\"3.0.0\" group=\"Group3\"\n                 timeout=\"5000\" ref=\"helloServiceV3\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: 配置Zookeeper集群模式 (Properties)\nDESCRIPTION: Zookeeper集群模式的配置示例。此配置包括了单机模式的所有参数，并额外定义了集群中的服务器地址。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/home/dubbo/zookeeper-3.3.3/data\nclientPort=2181\nserver.1=10.20.153.10:2555:3555\nserver.2=10.20.153.11:2555:3555\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Connection Limits in Dubbo XML\nDESCRIPTION: XML configuration to limit client service connections to 10. Can be specified either through reference or service elements. Reference configuration takes precedence if both are specified.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Protocol Provider\nDESCRIPTION: Provider implementation for Triple protocol service with Dubbo configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/tri.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws InterruptedException {\n    ServiceConfig<IGreeter> service = new ServiceConfig<>();\n    service.setInterface(IGreeter.class);\n    service.setRef(new IGreeter1Impl());\n    // 这里需要显示声明使用的协议为triple \n    service.setProtocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051));\n    service.setApplication(new ApplicationConfig(\"demo-provider\"));\n    service.setRegistry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"));\n    service.export();\n    System.out.println(\"dubbo service started\");\n    new CountDownLatch(1).await();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dispatcher for Dubbo Protocol in YAML\nDESCRIPTION: YAML configuration example showing how to configure the thread model dispatcher for Dubbo protocol. This sets the dispatcher to 'all' which represents the All Dispatcher thread model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n  protocol:\n    name: dubbo\n    port: -1\n    dispatcher: all\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Consumer to Kubernetes\nDESCRIPTION: Commands to deploy the Dubbo consumer service and deployment to Kubernetes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Deploy Service\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/consumer/Service.yml\n\n# Deploy Deployment\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/consumer/Deployment.yml\n```\n\n----------------------------------------\n\nTITLE: 获取服务接口代理对象的ProxyFactory实现\nDESCRIPTION: 该代码展示了ProxyFactory的getProxy方法实现，主要用于获取服务接口列表并为接口生成代理对象。代码支持普通接口和泛化调用两种方式。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic <T> T getProxy(Invoker<T> invoker) throws RpcException {\n    // 调用重载方法\n    return getProxy(invoker, false);\n}\n\npublic <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {\n    Class<?>[] interfaces = null;\n    // 获取接口列表\n    String config = invoker.getUrl().getParameter(\"interfaces\");\n    if (config != null && config.length() > 0) {\n        // 切分接口列表\n        String[] types = Constants.COMMA_SPLIT_PATTERN.split(config);\n        if (types != null && types.length > 0) {\n            interfaces = new Class<?>[types.length + 2];\n            // 设置服务接口类和 EchoService.class 到 interfaces 中\n            interfaces[0] = invoker.getInterface();\n            interfaces[1] = EchoService.class;\n            for (int i = 0; i < types.length; i++) {\n                // 加载接口类\n                interfaces[i + 1] = ReflectUtils.forName(types[i]);\n            }\n        }\n    }\n    if (interfaces == null) {\n        interfaces = new Class<?>[]{invoker.getInterface(), EchoService.class};\n    }\n\n    // 为 http 和 hessian 协议提供泛化调用支持，参考 pull request #1827\n    if (!invoker.getInterface().equals(GenericService.class) && generic) {\n        int len = interfaces.length;\n        Class<?>[] temp = interfaces;\n        // 创建新的 interfaces 数组\n        interfaces = new Class<?>[len + 1];\n        System.arraycopy(temp, 0, interfaces, 0, len);\n        // 设置 GenericService.class 到数组中\n        interfaces[len] = GenericService.class;\n    }\n\n    // 调用重载方法\n    return getProxy(invoker, interfaces);\n}\n\npublic abstract <T> T getProxy(Invoker<T> invoker, Class<?>[] types);\n```\n\n----------------------------------------\n\nTITLE: Generated Dubbo Stub Interface for Protobuf Service\nDESCRIPTION: Example of Java code generated by Dubbo Maven Plugin for Protobuf service. This code creates a Dubbo interface with synchronous and asynchronous methods for the Protobuf service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/maven-plugin.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.dubbo.demo;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic final class DemoServiceDubbo {\n    private static final AtomicBoolean registered = new AtomicBoolean();\n\n    private static Class<?> init() {\n        Class<?> clazz = null;\n        try {\n            clazz = Class.forName(DemoServiceDubbo.class.getName());\n            if (registered.compareAndSet(false, true)) {\n                org.apache.dubbo.common.serialize.protobuf.support.ProtobufUtils.marshaller(\n                        org.apache.dubbo.demo.HelloReply.getDefaultInstance());\n                org.apache.dubbo.common.serialize.protobuf.support.ProtobufUtils.marshaller(\n                        org.apache.dubbo.demo.HelloRequest.getDefaultInstance());\n            }\n        } catch (ClassNotFoundException e) {\n// ignore\n        }\n        return clazz;\n    }\n\n    private DemoServiceDubbo() {\n    }\n\n    public static final String SERVICE_NAME = \"org.apache.dubbo.demo.DemoService\";\n\n    /**\n     * Code generated for Dubbo\n     */\n    public interface IDemoService extends org.apache.dubbo.rpc.model.DubboStub {\n\n        static Class<?> clazz = init();\n\n        org.apache.dubbo.demo.HelloReply sayHello(org.apache.dubbo.demo.HelloRequest request);\n\n        CompletableFuture<org.apache.dubbo.demo.HelloReply> sayHelloAsync(org.apache.dubbo.demo.HelloRequest request);\n\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo-Python with Zookeeper Support\nDESCRIPTION: Commands to clone the Dubbo-Python repository and install it with Zookeeper support. This is a prerequisite for using Zookeeper as a registry in Dubbo-Python.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/apache/dubbo-python.git\ncd dubbo-python && pip install .[zookeeper]\n```\n\n----------------------------------------\n\nTITLE: Disabling Registration in Dubbo XML Configuration\nDESCRIPTION: These XML snippets show how to configure a Dubbo registry to disable service registration. This is useful when you want a service to subscribe to other services but not register itself, typically during development or testing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/subscribe-only.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090\" register=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090?register=false\" />\n```\n\n----------------------------------------\n\nTITLE: BaseFilter Interface Definition in Java\nDESCRIPTION: Complete definition of the BaseFilter interface including the invoke method and Listener interface for handling response callbacks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic interface BaseFilter {\n    /**\n     * Always call invoker.invoke() in the implementation to hand over the request to the next filter node.\n     */\n    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;\n\n    /**\n     * This callback listener applies to both synchronous and asynchronous calls, please put logics that need to be executed\n     * on return of rpc result in onResponse or onError respectively based on it is normal return or exception return.\n     * <p>\n     * There's something that needs to pay attention on legacy synchronous style filer refactor, the thing is, try to move logics\n     * previously defined in the 'finally block' to both onResponse and onError.\n     */\n    interface Listener {\n\n        /**\n         * This method will only be called on successful remote rpc execution, that means, the service in on remote received\n         * the request and the result (normal or exceptional) returned successfully.\n         */\n        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);\n\n        /**\n         * This method will be called on detection of framework exceptions, for example, TimeoutException, NetworkException\n         * Exception raised in Filters, etc.\n         */\n        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message with Code in Dubbo Java\nDESCRIPTION: Example of how an error message with code is displayed in Dubbo logs. It includes the error code, thread information, and a link to the documentation for troubleshooting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/intro.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[31/07/22 02:43:07:796 CST] main  WARN support.AbortPolicyWithReport:  [DUBBO] Thread pool is EXHAUSTED! Thread Name: Test, Pool Size: 0 (active: 0, core: 1, max: 1, largest: 0), Task: 0 (completed: 0), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://10.20.130.230:20880!, dubbo version: , current host: 10.20.130.230, error code: 0-1. This may be caused by too much client requesting provider, go to https://dubbo.apache.org/faq/0/1 to find instructions.\n```\n\n----------------------------------------\n\nTITLE: Configuring EnvoyFilter for HTTP to Dubbo Protocol Conversion\nDESCRIPTION: EnvoyFilter configuration that enables HTTP to Dubbo protocol conversion. It sets up routing rules, method mappings, and parameter transformations for converting HTTP requests to Dubbo protocol calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-higress.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: http-dubbo-transcoder-test\n  namespace: higress-system\nspec:\n  configPatches:\n  - applyTo: HTTP_FILTER\n    match:\n      context: GATEWAY\n      listener:\n        filterChain:\n          filter:\n            name: envoy.filters.network.http_connection_manager\n            subFilter:\n              name: envoy.filters.http.router\n    patch:\n      operation: INSERT_BEFORE\n      value:\n        name: envoy.filters.http.http_dubbo_transcoder\n        typed_config:\n          '@type': type.googleapis.com/udpa.type.v1.TypedStruct\n          type_url: type.googleapis.com/envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder\n  - applyTo: HTTP_ROUTE\n    match:\n      context: GATEWAY\n      routeConfiguration:\n        vhost:\n          route:\n            name: demo\n    patch:\n      operation: MERGE\n      value:\n        route:\n          upgrade_configs:\n          - connect_config:\n              allow_post: true\n            upgrade_type: CONNECT\n        typed_per_filter_config:\n          envoy.filters.http.http_dubbo_transcoder:\n            '@type': type.googleapis.com/udpa.type.v1.TypedStruct\n            type_url: type.googleapis.com/envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder\n            value:\n              request_validation_options:\n                reject_unknown_method: true\n                reject_unknown_query_parameters: true\n              services_mapping:\n              - group: dev\n                method_mapping:\n                - name: sayName\n                  parameter_mapping:\n                  - extract_key: p\n                    extract_key_spec: ALL_QUERY_PARAMETER\n                    mapping_type: java.lang.String\n                  passthrough_setting:\n                    passthrough_all_headers: true\n                  path_matcher:\n                    match_http_method_spec: ALL_GET\n                    match_pattern: /dubbo/hello\n                name: org.apache.dubbo.samples.gateway.api.DemoService\n                version: 1.0.0\n              url_unescape_spec: ALL_CHARACTERS_EXCEPT_RESERVED\n  - applyTo: CLUSTER\n    match:\n      cluster:\n        service: gateway-higress-dubbo.DEFAULT-GROUP.public.nacos\n      context: GATEWAY\n    patch:\n      operation: MERGE\n      value:\n        upstream_config:\n          name: envoy.upstreams.http.dubbo_tcp\n          typed_config:\n            '@type': type.googleapis.com/udpa.type.v1.TypedStruct\n            type_url: type.googleapis.com/envoy.extensions.upstreams.http.dubbo_tcp.v3.DubboTcpConnectionPoolProto\n```\n\n----------------------------------------\n\nTITLE: Disabling Health Check via Client Configuration\nDESCRIPTION: Go code example demonstrating how to disable health checks when creating a new Dubbo client using the WithClientCheck option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/start-check.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientCheck(false),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastjson Serialization in Properties\nDESCRIPTION: Properties file configuration options for enabling Fastjson serialization at different levels: protocol, consumer, and reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.serialization=fastjson\n\n# or\ndubbo.consumer.serialization=fastjson\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=fastjson\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Implements the HelloService interface with a DubboService annotation, providing concrete implementations for the defined methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class HelloServiceImpl implements HelloService {\n\n    @Override\n    public String sayHello(String name) {\n        return \"sayHello: \" + name;\n    }\n\n    @Override\n    public CompletableFuture<String> sayHelloAsync(String name) {\n        // ...\n    }\n\n    @Override\n    public CompletableFuture<Person> sayHelloAsyncComplex(String name) {\n         // ...\n    }\n\n    @Override\n    public CompletableFuture<GenericType<Person>> sayHelloAsyncGenericComplex(String name) {\n         // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Executors Using XML in Dubbo\nDESCRIPTION: This snippet demonstrates configuring isolated thread pools for Dubbo services using XML configuration. The example defines custom thread pools through bean definitions and assigns them to specific services using the executor attribute. The configuration requires executor-management-mode=\"isolation\" to enable thread pool isolation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n  <!-- NOTE: we need config executor-management-mode=\"isolation\" -->\n  <dubbo:application name=\"demo-provider\" executor-management-mode=\"isolation\">\n  </dubbo:application>\n\n  <dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n  <dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n  <dubbo:registry id=\"registry1\" address=\"zookeeper://127.0.0.1:2181?registry-type=service\"/>\n\n  <dubbo:protocol name=\"dubbo\" port=\"-1\"/>\n  <dubbo:protocol name=\"tri\" port=\"-1\"/>\n\n  <!-- expose three service with dubbo and tri protocol-->\n  <bean id=\"demoServiceV1\" class=\"org.apache.dubbo.config.spring.impl.DemoServiceImpl\"/>\n  <bean id=\"helloServiceV2\" class=\"org.apache.dubbo.config.spring.impl.HelloServiceImpl\"/>\n  <bean id=\"helloServiceV3\" class=\"org.apache.dubbo.config.spring.impl.HelloServiceImpl\"/>\n\n  <!-- customized thread pool -->\n  <bean id=\"executor-demo-service\"\n        class=\"org.apache.dubbo.config.spring.isolation.spring.support.DemoServiceExecutor\"/>\n  <bean id=\"executor-hello-service\"\n        class=\"org.apache.dubbo.config.spring.isolation.spring.support.HelloServiceExecutor\"/>\n\n  <!-- this service use [executor=\"executor-demo-service\"] as isolated thread pool-->\n  <dubbo:service executor=\"executor-demo-service\"\n                 interface=\"org.apache.dubbo.config.spring.api.DemoService\" version=\"1.0.0\" group=\"Group1\"\n                 timeout=\"3000\" ref=\"demoServiceV1\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n  <!-- this service use [executor=\"executor-hello-service\"] as isolated thread pool-->\n  <dubbo:service executor=\"executor-hello-service\"\n                 interface=\"org.apache.dubbo.config.spring.api.HelloService\" version=\"2.0.0\" group=\"Group2\"\n                 timeout=\"5000\" ref=\"helloServiceV2\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n  <!-- not set executor for this service, the default executor built using threadpool parameter of the protocolConfig -->\n  <dubbo:service interface=\"org.apache.dubbo.config.spring.api.HelloService\" version=\"3.0.0\" group=\"Group3\"\n                 timeout=\"5000\" ref=\"helloServiceV3\" registry=\"registry1\" protocol=\"dubbo,tri\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Triple Response Handler Exception Pattern\nDESCRIPTION: Log pattern showing exception in client response handler\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/10.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMeet Exception on ClientResponseHandler, status code is:xxx\n```\n\n----------------------------------------\n\nTITLE: Querying Dubbo Registry Configuration via QoS\nDESCRIPTION: Uses Dubbo's QoS service to check the registry configuration of a Dubbo application. This helps verify if the correct registry is being used for service publishing and discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n➜ telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>getConfig RegistryConfig\nApplicationModel: Dubbo Application[1.1](first-dubbo-provider)\nRegistryConfig: null\n<dubbo:registry address=\"nacos://127.0.0.1:8848\" protocol=\"nacos\" port=\"8848\" />\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Metrics in Java\nDESCRIPTION: This snippet shows how to configure Dubbo's metrics collection. It includes options for enabling various types of metrics, setting collection levels, and configuring export settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MetricsConfig metricsConfig = new MetricsConfig();\nmetricsConfig.setEnableJvm(true);\nmetricsConfig.setEnableMetadata(true);\nmetricsConfig.setEnableRegistry(true);\nmetricsConfig.setEnableRpc(true);\nmetricsConfig.setExportMetricsService(true);\nmetricsConfig.setExportServicePort(9090);\nmetricsConfig.setExportServiceProtocol(\"prometheus\");\nmetricsConfig.setRpcLevel(\"METHOD\");\nmetricsConfig.setUseGlobalRegistry(false);\n```\n\n----------------------------------------\n\nTITLE: Main Logic for Retrieving Activated Extensions\nDESCRIPTION: Core method implementing the logic for retrieving activated extensions based on URL, values, and group. It handles caching, filtering, and sorting of extensions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/7-Dubbo的SPI扩展机制之自动激活扩展Activate源码解析.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic List<T> getActivateExtension(URL url, String[] values, String group) {\n    checkDestroyed();\n    Map<Class<?>, T> activateExtensionsMap = new TreeMap<>(activateComparator);\n    List<String> names = values == null ? new ArrayList<>(0) : asList(values);\n    Set<String> namesSet = new HashSet<>(names);\n    if (!namesSet.contains(REMOVE_VALUE_PREFIX + DEFAULT_KEY)) {\n        // ... (rest of the method implementation)\n    }\n    // ... (additional logic for handling default extensions)\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Simple Registry as a Dubbo Service\nDESCRIPTION: XML configuration for exposing the Simple registry center as a Dubbo service. It defines the application name, protocol port, service interface, and registry implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/simple.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <!-- 当前应用信息配置 -->\n    <dubbo:application name=\"simple-registry\" />\n    <!-- 暴露服务协议配置 -->\n    <dubbo:protocol port=\"9090\" />\n    <!-- 暴露服务配置 -->\n    <dubbo:service interface=\"org.apache.dubbo.registry.RegistryService\" ref=\"registryService\" registry=\"N/A\" ondisconnect=\"disconnect\" callbacks=\"1000\">\n        <dubbo:method name=\"subscribe\"><dubbo:argument index=\"1\" callback=\"true\" /></dubbo:method>\n        <dubbo:method name=\"unsubscribe\"><dubbo:argument index=\"1\" callback=\"false\" /></dubbo:method>\n    </dubbo:service>\n    <!-- 简单注册中心实现，可自行扩展实现集群和状态同步 -->\n    <bean id=\"registryService\" class=\"org.apache.dubbo.registry.simple.SimpleRegistryService\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Prometheus Discovery for Dubbo\nDESCRIPTION: YAML configuration for setting up Prometheus to discover Dubbo instances through the HTTP service discovery interface provided by Dubbo Admin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/prometheus.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'dubbo'\n  http_sd_configs:\n    - url: http://{admin-address}/api/dev/metrics/prometheus\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Dubbo Documentation Page\nDESCRIPTION: This YAML frontmatter defines metadata for the main Dubbo documentation page, including page aliases, description, title, and content type specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/overview/\ndescription: Dubbo Documentation\nlinkTitle: Documentation\ntitle: Dubbo Documentation\ntype: docs\n---\n```\n\n----------------------------------------\n\nTITLE: Adding REST-style Annotations to Dubbo Interface\nDESCRIPTION: Java code example showing how to add Spring Web annotations to a Dubbo service interface. This enables REST-style HTTP access with custom paths, making the service more friendly for HTTP clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/triple\")\npublic interface DemoService {\n    @GetMapping(value = \"/demo\")\n    String sayHello();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Client for Streaming Communication\nDESCRIPTION: Configuration and initialization of a Dubbo client that references a streaming service. The code configures the ReferenceConfig to use the Triple protocol and obtains a proxy to the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\tReferenceConfig<Greeter> ref = new ReferenceConfig<>();\n\tref.setInterface(Greeter.class);\n\tref.setProtocol(CommonConstants.TRIPLE);\n\n\tDubboBootstrap.getInstance().reference(ref).start();\n\tGreeter greeter = ref.get();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty as REST Server in Dubbo\nDESCRIPTION: Configuring embedded Netty as the REST server implementation in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"netty\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing SerializationOptimizer for FST Performance\nDESCRIPTION: Java implementation of the SerializationOptimizer interface to register classes for optimized serialization, which significantly improves FST performance especially for nested objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class SerializationOptimizerImpl implements SerializationOptimizer {\n\n    public Collection<Class> getSerializableClasses() {\n        List<Class> classes = new LinkedList<Class>();\n        classes.add(BidRequest.class);\n        classes.add(BidResponse.class);\n        classes.add(Device.class);\n        classes.add(Geo.class);\n        classes.add(Impression.class);\n        classes.add(SeatBid.class);\n        return classes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Refresh Implementation in AbstractConfig Class\nDESCRIPTION: Refreshes configuration properties from multiple sources. This method retrieves configuration from the environment, extracts properties with a preferred prefix, and assigns them to the configuration object. It also supports pre and post-processing hooks for customization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic void refresh() {\n        refreshed.set(true);\n        try {\n            // check and init before do refresh\n            //刷新之前执行的逻辑 这里并做什么逻辑\n            preProcessRefresh();\n\t\t\n\t\t\t//获取当前域模型的环境信息对象\n            Environment environment = getScopeModel().getModelEnvironment();\n            List<Map<String, String>> configurationMaps = environment.getConfigurationMaps();\n\n            // Search props starts with PREFIX in order\n            String preferredPrefix = null;\n            for (String prefix : getPrefixes()) {\n                if (ConfigurationUtils.hasSubProperties(configurationMaps, prefix)) {\n                    preferredPrefix = prefix;\n                    break;\n                }\n            }\n            if (preferredPrefix == null) {\n                preferredPrefix = getPrefixes().get(0);\n            }\n            // Extract sub props (which key was starts with preferredPrefix)\n            Collection<Map<String, String>> instanceConfigMaps = environment.getConfigurationMaps(this, preferredPrefix);\n            Map<String, String> subProperties = ConfigurationUtils.getSubProperties(instanceConfigMaps, preferredPrefix);\n            InmemoryConfiguration subPropsConfiguration = new InmemoryConfiguration(subProperties);\n\n            if (logger.isDebugEnabled()) {\n                String idOrName = \"\";\n                if (StringUtils.hasText(this.getId())) {\n                    idOrName = \"[id=\" + this.getId() + \"]\";\n                } else {\n                    String name = ReflectUtils.getProperty(this, \"getName\");\n                    if (StringUtils.hasText(name)) {\n                        idOrName = \"[name=\" + name + \"]\";\n                    }\n                }\n                logger.debug(\"Refreshing \" + this.getClass().getSimpleName() + idOrName +\n                    \" with prefix [\" + preferredPrefix +\n                    \"], extracted props: \" + subProperties);\n            }\n\n            assignProperties(this, environment, subProperties, subPropsConfiguration);\n\n            // process extra refresh of subclass, e.g. refresh method configs\n            processExtraRefresh(preferredPrefix, subPropsConfiguration);\n\n        } catch (Exception e) {\n            logger.error(\"Failed to override field value of config bean: \" + this, e);\n            throw new IllegalStateException(\"Failed to override field value of config bean: \" + this, e);\n        }\n\n        postProcessRefresh();\n    }\n```\n\n----------------------------------------\n\nTITLE: Docker Background Start Command\nDESCRIPTION: Command to start Dubbo-Go-Pixiu Docker container in detached mode with configuration file mounting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/deployment.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -itd --name dubbo-go-pixiu -p 8883:8883 \\\n    -v /yourpath/conf.yaml:/etc/pixiu/conf.yaml \\\n    -v /yourpath/log.yml:/etc/pixiu/log.yml \\\n    apache/dubbo-go-pixiu:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom RouterFactory in Java\nDESCRIPTION: Example Java implementation of a RouterFactory interface that creates custom routers for Dubbo service selection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/router.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.cluster.RouterFactory;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.RpcException;\n \npublic class XxxRouterFactory implements RouterFactory {\n    public Router getRouter(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC and ServiceAccount for Dubbo Services in Kubernetes\nDESCRIPTION: This manifest creates a dedicated namespace for Dubbo demos, sets up RBAC permissions for service discovery, and creates a service account for Dubbo components. The role grants permissions to access Kubernetes resources like pods, services, and endpoints that are needed by Dubbo for service registration and discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: dubbo-demo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: dubbo-demo\n  name: dubbo-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\"]\n    verbs: [\"get\", \"watch\", \"list\", \"update\", \"patch\"]\n  - apiGroups: [\"\", \"service.dubbo.apache.org\"]\n    resources: [\"services\", \"endpoints\", \"virtualservices\", \"destinationrules\"]\n    verbs: [\"get\", \"watch\", \"list\"]\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: dubbo-sa\n  namespace: dubbo-demo\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: dubbo-sa-bind\n  namespace: dubbo-demo\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: dubbo-role\nsubjects:\n  - kind: ServiceAccount\n    name: dubbo-sa\n```\n\n----------------------------------------\n\nTITLE: Limiting Service Concurrency per Client\nDESCRIPTION: Configures the maximum number of concurrent executions (10) per client for all methods of a service using the actives attribute, which can be specified either on the service or reference side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/concurrency-control.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" actives=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol Method in DubboBootstrap Class in Java\nDESCRIPTION: This method in DubboBootstrap converts a single ProtocolConfig object into a list and calls the protocols method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/11-Dubbo启动器DubboBootstrap添加协议配置信息ProtocolConfig.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic DubboBootstrap protocol(ProtocolConfig protocolConfig) {\n    return protocols(singletonList(protocolConfig));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractRegistry Constructor in Dubbo\nDESCRIPTION: Constructor implementation for AbstractRegistry that handles local caching configuration, file persistence settings, and property loading. It configures registry behavior including cache file location and synchronization options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n   \n    public AbstractRegistry(URL url) {\n        setUrl(url);\n        registryManager = url.getOrDefaultApplicationModel().getBeanFactory().getBean(RegistryManager.class);\n         //是否本地缓存默认为true\n        localCacheEnabled = url.getParameter(REGISTRY_LOCAL_FILE_CACHE_ENABLED, true);\n        registryCacheExecutor = url.getOrDefaultFrameworkModel().getBeanFactory()\n            .getBean(FrameworkExecutorRepository.class).getSharedExecutor();\n        if (localCacheEnabled) {\n            // Start file save timer 是否同步缓存默认为false\n            syncSaveFile = url.getParameter(REGISTRY_FILESAVE_SYNC_KEY, false);\n             //默认缓存的文件路径与文件名字为：/Users/song/.dubbo/dubbo-registry-dubbo-demo-api-provider-127.0.0.1-2181.cache\n            String defaultFilename = System.getProperty(USER_HOME) + DUBBO_REGISTRY +\n                url.getApplication() + \"-\" + url.getAddress().replaceAll(\":\", \"-\") + CACHE;\n               //未指定缓存的文件名字则用默认的文件名字\n            String filename = url.getParameter(FILE_KEY, defaultFilename);\n            File file = null;\n            //父目录创建，保证目录存在\n            if (ConfigUtils.isNotEmpty(filename)) {\n                file = new File(filename);\n                if (!file.exists() && file.getParentFile() != null && !file.getParentFile().exists()) {\n                    if (!file.getParentFile().mkdirs()) {\n                        throw new IllegalArgumentException(\"Invalid registry cache file \" + file + \", cause: Failed to create directory \" + file.getParentFile() + \"!\");\n                    }\n                }\n            }\n            this.file = file;\n            // When starting the subscription center,\n            // we need to read the local cache file for future Registry fault tolerance processing.\n            //加载本地磁盘文件\n            loadProperties();\n            //变更推送\n            notify(url.getBackupUrls());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Kubernetes Cluster\nDESCRIPTION: Command to start a local Kubernetes cluster using Minikube for development and testing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Consuming Bytes in DefaultHttpLocalFlowController\nDESCRIPTION: This code demonstrates how the DefaultHttpLocalFlowController handles inbound flow control by consuming bytes and updating the flow control window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-backpressure.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nInbound 流量会通过 `DefaultHttpLocalFlowController` 的 `consumeBytes` 方法实现流控窗口更新与发送。\n```\n\n----------------------------------------\n\nTITLE: Referencing Simple Registry Service by Interface\nDESCRIPTION: XML configuration for referencing the Simple registry service by its interface name with group and version parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/simple.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.registry.RegistryService\" group=\"simple\" version=\"1.0.0\" ... >\n```\n\n----------------------------------------\n\nTITLE: Structuring Metadata JSON for Dubbo Service\nDESCRIPTION: Example of the metadata JSON structure used by Dubbo Admin for service testing, including method signatures and complex type definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/service-test.md#2025-04-08_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"methods\": [\n        {\n            \"name\": \"sayHello\",\n            \"parameterTypes\": [\n                \"org.apache.dubbo.demo.model.User\"\n            ],\n            \"returnType\": \"org.apache.dubbo.demo.model.Result\"\n        }\n    ],\n    \"types\": [\n        {\n            \"type\": \"char\"\n        },\n        {\n            \"type\": \"long\"\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.Result\",\n            \"properties\": {\n                \"msg\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                },\n                \"userName\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.User\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"java.lang.Long\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"long\"\n                        }\n                    }\n                },\n                \"username\": {\n                    \"type\": \"java.lang.Sring\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in YAML\nDESCRIPTION: Shows the YAML configuration for enabling Zookeeper as a configuration center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Service Registry in Dubbo Go\nDESCRIPTION: Shows how to specify which registry center a particular service should register to. This example registers the GreetService specifically to the Zookeeper registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsrv, _ := ins.NewServer()\n\ngreet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}, server.WithRegistryIDs([]string{\"zookeeper\"}))\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Code Compilation in Dubbo (Java)\nDESCRIPTION: Changes to JavassistCompiler and JdkCompiler to first attempt loading pre-compiled classes before dynamic compilation. This modification helps avoid runtime code generation issues in native image environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-graalvm-support.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic Class<?> doCompile(String name, String source) throws Throwable {\n  try {\n    Class<?> res = Class.forName(name);\n    return res;\n  } catch (Throwable ex) {\n    //ignore\n  }\n    CtClassBuilder builder = new CtClassBuilder();\n    builder.setClassName(name)\n    //......\n```\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic Class<?> doCompile(String name, String sourceCode) throws Throwable {\n  try {\n    Class<?> res = Class.forName(name);\n    return res;\n  } catch (Throwable ex) {\n    //ignore\n  }\n  int i = name.lastIndexOf('.');\n  String packageName = i < 0 ? \"\" : name.substring(0, i);\n  //......\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dubbo Default Dependencies using Maven\nDESCRIPTION: This snippet shows the output of running 'mvn dependency:tree' command to analyze Dubbo's default dependencies. It reveals that Dubbo relies on Spring Context, Javassist, and Netty by default.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/dependencies.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] +- com.alibaba:dubbo:jar:2.5.9-SNAPSHOT:compile\n[INFO] |  +- org.springframework:spring-context:jar:4.3.10.RELEASE:compile\n[INFO] |  +- org.javassist:javassist:jar:3.21.0-GA:compile\n[INFO] |  \\- org.jboss.netty:netty:jar:3.2.5.Final:compile\n```\n\n----------------------------------------\n\nTITLE: Converting Registry Config to Metadata Config in Java\nDESCRIPTION: This method filters default registries, checks if they can be used as metadata centers, and converts eligible RegistryConfig instances to MetadataReportConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate void useRegistryAsMetadataCenterIfNecessary() {\n    Collection<MetadataReportConfig> metadataConfigs = configManager.getMetadataConfigs();\n    \n    //...省略掉空判断\n    List<RegistryConfig> defaultRegistries = configManager.getDefaultRegistries();\n    if (defaultRegistries.size() > 0) {\n        defaultRegistries\n            .stream()\n            .filter(this::isUsedRegistryAsMetadataCenter)\n            .map(this::registryAsMetadataCenter)\n            .forEach(metadataReportConfig -> {\n              //...省略掉具体的逻辑\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTP Keep-Alive for Dubbo REST Services\nDESCRIPTION: XML configuration to disable HTTP keep-alive (long connections) for REST services in Dubbo. By default, keep-alive is enabled for better performance with persistent connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" keepalive=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Extension Instance Creation\nDESCRIPTION: Helper method for instantiating extension instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nprivate Object createExtensionInstance(Class<?> type) throws ReflectiveOperationException {\n        return instantiationStrategy.instantiate(type);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Namespace for Traffic Governance Rules\nDESCRIPTION: XML snippet demonstrating how to set the namespace parameter for Dubbo's config-center to specify the location of traffic governance rules in Apollo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center namespace=\"governance\" address=\"apollo://localhost:8080\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger in Java\nDESCRIPTION: Example of implementing a custom Logger interface in Java for Dubbo's logging extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/logger-adapter.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.common.logger.Logger;\n\npublic class XxxLogger implements Logger {\n    public XxxLogger(URL url) {\n        // ...\n    }\n    public void info(String msg) {\n        // ...\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP requests to Dubbo-go services via Pixiu\nDESCRIPTION: Example of using curl to make a POST request to a Dubbo-go service via the Pixiu gateway, showing how to format the request path and JSON payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/pixiu-nacos-triple.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -d '{\"name\":\"laurence\"}' http://30.XXX.XXX.XX:8881/dubbogoDemoServer/org.apache.dubbo.laurence.samples.UserProvider/SayHello\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Dubbo Proxyless Mesh\nDESCRIPTION: Commands to build Docker images for the provider and consumer components, which are required for Kubernetes deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ./dubbo-samples-xds-provider/\n# dubbo-samples-xds/dubbo-samples-xds-provider/Dockerfile\ndocker build -t apache/dubbo-demo:dubbo-samples-xds-provider_0.0.1 .\ncd ../dubbo-samples-xds-consumer/\n# dubbo-samples-xds/dubbo-samples-xds-consumer/Dockerfile\ndocker build -t apache/dubbo-demo:dubbo-samples-xds-consumer_0.0.1 .\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Cloning Dubbo Source Code with Git\nDESCRIPTION: Command to check out the latest Dubbo source code from GitHub repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/apache/dubbo.git\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-Side Concurrent Execution at Service Level with Annotations\nDESCRIPTION: Java annotation configuration to limit the concurrent execution for a service implementation to a maximum of 10 threads. This is the annotation equivalent of the XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(executes=10)\nprivate DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Customizing Cache Key Generation in ReferenceConfigCache\nDESCRIPTION: This snippet demonstrates how to customize the cache key generation strategy by providing a custom KeyGenerator when obtaining the cache. By default, ReferenceConfigCache uses service Group, interface, and version as the cache key.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nKeyGenerator keyGenerator = new ...  \nReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator);  \n```\n\n----------------------------------------\n\nTITLE: Configuring Webservice Protocol in Dubbo (XML)\nDESCRIPTION: XML configuration examples for setting up Webservice protocol in Dubbo, including protocol definition, default protocol, service protocol, and multi-port configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"webservice\" port=\"8080\" server=\"jetty\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"webservice\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"webservice\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"webservice1\" name=\"webservice\" port=\"8080\" />\n<dubbo:protocol id=\"webservice2\" name=\"webservice\" port=\"8081\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RMI Protocol in Dubbo XML Configuration\nDESCRIPTION: Basic XML configuration to define RMI protocol with port specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rmi\" port=\"1099\" />\n```\n\n----------------------------------------\n\nTITLE: Setting injvm Priority for Reference and Service\nDESCRIPTION: Alternative XML configuration to prioritize injvm protocol for service references and implementations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference injvm=\"true\" .../>\n<dubbo:service injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Creating Service Instance in Dubbo\nDESCRIPTION: This method creates a DefaultServiceInstance object with service metadata, storage type, and custom metadata. It allows for extension through ServiceInstanceCustomizer to add custom metadata.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprotected ServiceInstance createServiceInstance(MetadataInfo metadataInfo) {\n    DefaultServiceInstance instance = new DefaultServiceInstance(serviceName, applicationModel);\n    instance.setServiceMetadata(metadataInfo);\n    setMetadataStorageType(instance, metadataType);\n    ServiceInstanceMetadataUtils.customizeInstance(instance, applicationModel);\n    return instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Trusted Classes in Dubbo (Properties)\nDESCRIPTION: Shows how to define a list of trusted classes in a properties file for Dubbo's serialization security. This file should be placed in the resource directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.allowlist\nio.dubbo.test\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Streaming\nDESCRIPTION: Java implementation of server-side streaming in the GreeterImpl class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void serverStream(GreeterRequest request, StreamObserver<GreeterReply> responseObserver) {\n\tLOGGER.info(\"receive request: {}\", request.getName());\n\tfor (int i = 0; i < 10; i++) {\n\t\tGreeterReply reply = GreeterReply.newBuilder().setMessage(\"reply from serverStream. \" + i).build();\n\t\tresponseObserver.onNext(reply);\n\t}\n\tresponseObserver.onCompleted();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Settings for Apache Dubbo in Java\nDESCRIPTION: This snippet represents the RpcConfig class in Apache Dubbo's Spring Boot autoconfiguration. It is used to configure RPC-related settings, although no specific properties are listed in this context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.spring.boot.autoconfigure.DubboConfigurationProperties$RpcConfig\n```\n\n----------------------------------------\n\nTITLE: Method Name Mapping for Custom Redis Interfaces\nDESCRIPTION: XML configuration that maps custom method names to Redis standard methods (get, set, delete) using Spring's p-namespace. This enables use of interfaces with non-standard method names for Redis operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/redis.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"com.foo.CacheService\" url=\"redis://10.20.153.10:6379\" p:set=\"putFoo\" p:get=\"getFoo\" p:delete=\"removeFoo\" />\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Dubbo Server\nDESCRIPTION: Command to start the Node.js server that hosts the Dubbo service using the tsx runtime for TypeScript execution.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx server.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Parameters in Dubbo Protocol\nDESCRIPTION: Examples showing how to set custom parameters in a Dubbo protocol configuration using both explicit parameter tags and shorthand property notation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"napoli\">\n   <dubbo:parameter key=\"http://10.20.160.198/wiki/display/dubbo/napoli.queue.name\" value=\"xxx\" />\n</dubbo:protocol>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"jms\" p:queue=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Examining Dubbo Error Log Output\nDESCRIPTION: Example of a Dubbo error log showing routing failure details, including provider availability and router chain status. The log shows the routing process through different router implementations and their outcomes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 11:33:16:016 CST] main  WARN cluster.SingleRouterChain:  [DUBBO] No provider available after the route for the service org.apache.dubbo.samples.api.GreetingsService from registry 30.221.144.195 on the consumer 30.221.144.195 using the dubbo version 3.2.0-beta.6-SNAPSHOT. Router snapshot is below: \n[ Parent (Input: 1) (Current Node Output: 1) (Chain Node Output: 0) ] Input: 30.221.144.195:20880 -> Chain Node Output: Empty\n  [ MockInvokersSelector (Input: 1) (Current Node Output: 1) (Chain Node Output: 0) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 30.221.144.195:20880\n    [ StandardMeshRuleRouter (Input: 1) (Current Node Output: 1) (Chain Node Output: 0) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 30.221.144.195:20880\n      [ TagStateRouter (Input: 1) (Current Node Output: 0) (Chain Node Output: 0) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: Empty, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195, error code: 2-2. This may be caused by No provider available after route for the service, go to https://dubbo.apache.org/faq/2/2 to find instructions\n```\n\n----------------------------------------\n\nTITLE: Configuring Old Version Service Provider\nDESCRIPTION: XML configuration for defining an old version (1.0.0) of a service provider in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting GPG Keys\nDESCRIPTION: Commands for deleting both private and public GPG keys when there are multiple keys present and cleanup is needed. The process requires first deleting the private key followed by the public key.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n### First delete the private key, then delete the public key\n$ gpg --yes --delete-secret-keys shenglicao2@gmail.com   ### Old private key, just specify the email\n$ gpg --delete-keys 1808C6444C781C0AEA0AAD4C4D6A8007D20DB8A4\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Framework for Dubbo REST Protocol\nDESCRIPTION: Specifies the JSON framework to be used by Dubbo's REST protocol. This configuration allows developers to choose between various JSON parsing libraries such as Jackson, fastjson2, fastjson, or gson.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.triple.rest.json-framework=jackson\n```\n\n----------------------------------------\n\nTITLE: Configuring XDS Registration in Dubbo-go\nDESCRIPTION: Configuration file for Dubbo-go application to use XDS protocol for service registration with Istio, specifying service interface and port settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    xds:\n      protocol: xds\n      address: istiod.istio-system.svc.cluster.local:15010\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      GreeterServerImpl:\n        interface: \"\" # read from stub\n```\n\n----------------------------------------\n\nTITLE: Configuring Tracing Settings for Apache Dubbo in Java\nDESCRIPTION: This snippet defines the TracingConfig class in Apache Dubbo, which contains properties for configuring tracing functionality. It includes options to enable tracing and set various tracing-related parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.TracingConfig\n```\n\n----------------------------------------\n\nTITLE: Service Implementation - Java\nDESCRIPTION: Implementation of the DemoService interface with @DubboService annotation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RMI Protocol in Dubbo XML Configuration\nDESCRIPTION: Basic XML configuration to define RMI protocol with port specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rmi\" port=\"1099\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Reference in Dubbo XML\nDESCRIPTION: XML configuration for an asynchronous service reference in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"asyncService\" timeout=\"10000\" interface=\"com.alibaba.dubbo.samples.async.api.AsyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo Service with cURL\nDESCRIPTION: cURL command to test the running Dubbo service using the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50051/com.example.demo.dubbo.api.DemoService/sayHello/\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service and Messages for Dubbo\nDESCRIPTION: This snippet defines a Protobuf service called DemoService with a SayHello RPC method, along with HelloRequest and HelloReply message types. It includes options for Java code generation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/maven-plugin.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\noption java_package = \"org.apache.dubbo.demo\";\noption java_outer_classname = \"DemoServiceProto\";\noption objc_class_prefix = \"DEMOSRV\";\n\npackage demoservice;\n\n// The demo service definition.\nservice DemoService {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Parameters in Dubbo Protocol\nDESCRIPTION: Examples showing how to set custom parameters in a Dubbo protocol configuration using both explicit parameter tags and shorthand property notation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"napoli\">\n   <dubbo:parameter key=\"http://10.20.160.198/wiki/display/dubbo/napoli.queue.name\" value=\"xxx\" />\n</dubbo:protocol>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"jms\" p:queue=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Consumer Metadata from Zookeeper\nDESCRIPTION: Shell command to retrieve consumer metadata stored in Zookeeper using zkCli.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 10] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/consumer/demo-consumer\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Properties Configuration File\nDESCRIPTION: Shows how Dubbo loads the properties configuration file by refreshing properties through ConfigUtils, which searches for configuration files in JVM parameters, environment variables, or default locations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic PropertiesConfiguration(ScopeModel scopeModel) {\n        this.scopeModel = scopeModel;\n        refresh();\n    }\n\n    public void refresh() {\n    \t//配置获取的过程是借助工具类ConfigUtils来获取的\n        properties = ConfigUtils.getProperties(scopeModel.getClassLoaders());\n    }\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration for Dubbo Provider\nDESCRIPTION: Kubernetes deployment manifest for deploying the Dubbo service provider with Nacos integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: gateway-higress-triple-provider\n    namespace: default\n    labels:\n        app: gateway-higress-triple-provider\nspec:\n    replicas: 1\n    selector:\n        matchLabels:\n            app: gateway-higress-triple-provider\n    template:\n        metadata:\n            labels:\n                app: gateway-higress-triple-provider\n        spec:\n            containers:\n                -   name: gateway-higress-triple-provider\n                    image: docker.io/allenyi/higress-triple:2.0.0\n                    imagePullPolicy: IfNotPresent\n                    ports:\n                        - containerPort: 50052\n                    env:\n                        - name: NACOS_ADDRESS\n                          value: nacos-server.default.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Exporting Dubbo Service Provider\nDESCRIPTION: This code snippet shows the export method for a Dubbo service provider. It handles the exporting of invokers, manages exporters, and sets up metadata for REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\n    URL url = invoker.getUrl();\n    final String uri = serviceKey(url);\n    Exporter<T> exporter = (Exporter<T>) exporterMap.get(uri);\n    if (exporter != null) {\n        // When modifying the configuration through override, you need to re-expose the newly modified service.\n        if (Objects.equals(exporter.getInvoker().getUrl(), invoker.getUrl())) {\n            return exporter;\n        }\n    }\n\n    // TODO  addAll metadataMap to RPCInvocationBuilder metadataMap\n    Map<PathMatcher, RestMethodMetadata> metadataMap = MetadataResolver.resolveProviderServiceMetadata(url.getServiceModel().getProxyObject().getClass(),url);\n\n    PathAndInvokerMapper.addPathAndInvoker(metadataMap, invoker);\n\n    final Runnable runnable = doExport(proxyFactory.getProxy(invoker, true), invoker.getInterface(), invoker.getUrl());\n    exporter = new AbstractExporter<T>(invoker) {\n        @Override\n        public void afterUnExport() {\n            exporterMap.remove(uri);\n            if (runnable != null) {\n                try {\n                    runnable.run();\n                } catch (Throwable t) {\n                    logger.warn(PROTOCOL_UNSUPPORTED, \"\", \"\", t.getMessage(), t);\n                }\n            }\n        }\n    };\n    exporterMap.put(uri, exporter);\n    return exporter;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Priority for injvm at Reference and Service Level\nDESCRIPTION: Configures injvm priority at the reference and service level, providing fine-grained control over which specific services should prefer local calling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference injvm=\"true\" .../>\n<dubbo:service injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ExtensionFactory in Java\nDESCRIPTION: Example of implementing the ExtensionFactory interface to create a custom extension loading mechanism in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/extension-factory.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.common.extension.ExtensionFactory;\n\npublic class XxxExtensionFactory implements ExtensionFactory {\n    public Object getExtension(Class<?> type, String name) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing Configuration for Reviews Service\nDESCRIPTION: This YAML configuration defines a virtual service in Istio to route traffic from user 'jason' to v2 of the reviews service, while all other users are routed to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Streaming\nDESCRIPTION: Java implementation of bidirectional streaming in the GreeterImpl class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic StreamObserver<GreeterRequest> biStream(StreamObserver<GreeterReply> responseObserver) {\n\treturn new StreamObserver<GreeterRequest>() {\n\t\t@Override\n\t\tpublic void onNext(GreeterRequest data) {\n\t\t\tGreeterReply resp = GreeterReply.newBuilder().setMessage(\"reply from biStream \" + data.getName()).build();\n\t\t\tresponseObserver.onNext(resp);\n\t\t}\n\n\t\t@Override\n\t\tpublic void onError(Throwable throwable) {\n\n\t\t}\n\n\t\t@Override\n\t\tpublic void onCompleted() {\n\n\t\t}\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightweight REST Servers in Dubbo XML\nDESCRIPTION: Shows how to configure the lightweight TJWS or Sun HTTP server as REST server implementations in Dubbo for testing or low-load environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tjws\"/> (tjws is now deprecated)\n<dubbo:protocol name=\"rest\" server=\"sunhttp\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Thread Dump Using JStack\nDESCRIPTION: Command to generate a thread dump of a Java process and save it to a file for analysis of thread pool issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/18.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo to Use RMI Protocol in XML\nDESCRIPTION: This XML configuration sets Dubbo to use the RMI protocol. When RMI is used, the Netty dependency is not required.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/dependencies.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<protocol name=\"rmi\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Retry in Dubbo XML\nDESCRIPTION: This XML configuration demonstrates how to set retry counts for failover cluster strategy. It shows both global service-level configuration and method-level configuration for fine-grained control.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service retries=\"2\" />\n\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Custom KeyGenerator for ReferenceConfigCache in Java\nDESCRIPTION: Demonstrates how to customize the caching strategy by implementing a custom KeyGenerator for ReferenceConfigCache.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/reference-config-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nKeyGenerator keyGenerator = new ...\nReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator );\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with Annotation-based Isolated Thread Pools\nDESCRIPTION: This snippet shows the configuration class for a Dubbo provider using annotations. It defines the application, registry, and protocol configurations along with custom thread pool executors. The executor-management-mode is set to \"isolation\" to enable thread pool isolation for services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.config.spring.isolation.spring.annotation.provider\")\npublic class ProviderConfiguration {\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n        return registryConfig;\n    }\n\n    // NOTE: we need config executor-management-mode=\"isolation\"\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"provider-app\");\n\n        applicationConfig.setExecutorManagementMode(\"isolation\");\n        return applicationConfig;\n    }\n\n    // expose services with dubbo protocol\n    @Bean\n    public ProtocolConfig dubbo() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo\");\n        return protocolConfig;\n    }\n\n    // expose services with tri protocol\n    @Bean\n    public ProtocolConfig tri() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"tri\");\n        return protocolConfig;\n    }\n\n    // customized thread pool\n    @Bean(\"executor-demo-service\")\n    public Executor demoServiceExecutor() {\n        return new DemoServiceExecutor();\n    }\n\n    // customized thread pool\n    @Bean(\"executor-hello-service\")\n    public Executor helloServiceExecutor() {\n        return new HelloServiceExecutor();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo LoadBalance Interface Definition\nDESCRIPTION: Java interface definition of the Dubbo LoadBalance SPI that must be implemented to create custom load balancing strategies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@SPI(RandomLoadBalance.NAME)\npublic interface LoadBalance {\n    @Adaptive(\"loadbalance\")\n    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Bootstrap with XML in Java\nDESCRIPTION: This Java class demonstrates how to bootstrap a Dubbo service consumer using XML configuration. It loads the XML context, obtains the DemoService bean, and performs remote method invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.consumer;\n\nimport org.apache.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} consumer demo XML bootstrap\n */\npublic class DemoServiceConsumerXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-consumer-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService consumer (XML) is starting...\");\n        DemoService demoService = context.getBean(\"demoService\", DemoService.class);\n        for (int i = 0; i < 10; i++) {\n            System.out.println(demoService.sayName(\"mercyblitz\"));\n        }\n        context.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Service Address in Dubbo\nDESCRIPTION: Code snippet demonstrating how to register a Redis service address using RegistryFactory with Zookeeper as the registry. This shows the configuration needed to expose a Redis-based service in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"redis://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with Annotation-based Isolated Thread Pools\nDESCRIPTION: This snippet shows the configuration class for a Dubbo provider using annotations. It defines the application, registry, and protocol configurations along with custom thread pool executors. The executor-management-mode is set to \"isolation\" to enable thread pool isolation for services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.config.spring.isolation.spring.annotation.provider\")\npublic class ProviderConfiguration {\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n        return registryConfig;\n    }\n\n    // NOTE: we need config executor-management-mode=\"isolation\"\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"provider-app\");\n\n        applicationConfig.setExecutorManagementMode(\"isolation\");\n        return applicationConfig;\n    }\n\n    // expose services with dubbo protocol\n    @Bean\n    public ProtocolConfig dubbo() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo\");\n        return protocolConfig;\n    }\n\n    // expose services with tri protocol\n    @Bean\n    public ProtocolConfig tri() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"tri\");\n        return protocolConfig;\n    }\n\n    // customized thread pool\n    @Bean(\"executor-demo-service\")\n    public Executor demoServiceExecutor() {\n        return new DemoServiceExecutor();\n    }\n\n    // customized thread pool\n    @Bean(\"executor-hello-service\")\n    public Executor helloServiceExecutor() {\n        return new HelloServiceExecutor();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating avgLatency in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the average latency within the window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/3a3acfdb05be7d3985835d43e492d3b9.svg)\n```\n\n----------------------------------------\n\nTITLE: 安装Dubbo依赖和Protobuf代码生成工具\nDESCRIPTION: 安装开发Dubbo服务所需的NPM包，包括Protocol Buffer代码生成工具和Dubbo相关依赖。这些工具用于从IDL定义生成TypeScript代码。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Protocol with Dubbo SPI (Provider)\nDESCRIPTION: SPI configuration for provider side that maps the 'edubbo' protocol name to the EnhancedProtocol implementation, enabling Dubbo to load the protocol when referenced in configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nedubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring Weight-Based Routing with VirtualService and DestinationRule in Dubbo\nDESCRIPTION: This YAML configuration defines a VirtualService and a DestinationRule for implementing weight-based routing in Dubbo. The VirtualService specifies a 60-40 weight distribution between v1 and v2 subsets of the 'reviews' service. The DestinationRule defines these subsets based on version labels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/examples/routing/weight-rule-deployment.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: reviews-route\nspec:\n  hosts:\n  - reviews.prod.svc.cluster.local\n  dubbo:\n    - name: weightRoute\n      routedetail:\n       - name: weght\n         route:\n          - destination:\n             host: reviews.prod.svc.cluster.local\n             subset: v1\n             weight: 60\n\n          - destination:\n             host: reviews.prod.svc.cluster.local\n             subset: v2\n             weight: 40\n\n\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: reviews-route\nspec:\n  host: reviews.prod.svc.cluster.local\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider in Java\nDESCRIPTION: Java implementation of the DemoProvider interface with concrete implementations of remote methods including request handling and response generation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoProviderImpl implements DemoProvider {\n    public String sayHello(String name) {\n        System.out.println(\"[\" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()) + \"] Hello \" + name + \", request from consumer: \" + RpcContext.getContext().getRemoteAddress());\n        return \"Hello \" + name + \", response form provider: \" + RpcContext.getContext().getLocalAddress();\n    }\n    @Override\n    public String echo()  {\n        System.out.println(\"receive....\");\n        return \"pang\";\n    }\n    @Override\n    public void test() {\n        System.out.println(\"test\");\n    }\n    @Override\n    public UserResponse getUserInfo(UserRequest request) {\n        System.out.println(request);\n        UserResponse response = new UserResponse();\n        response.setStatus(\"ok\");\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"id\", \"1\");\n        map.put(\"name\", \"test\");\n        response.setInfo(map);\n        return response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Triple Servlet Support with HTTP/2 curl\nDESCRIPTION: curl command demonstrating how to test the Triple Servlet support using HTTP/2 protocol. The example shows the request and response headers, highlighting how Triple works with HTTP/2 through the Servlet API.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --http2-prior-knowledge -v 'http://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world'\n# Output\n#* [HTTP/2] [1] OPENED stream for http://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world\n#* [HTTP/2] [1] [:method: GET]\n#* [HTTP/2] [1] [:scheme: http]\n#* [HTTP/2] [1] [:authority: localhost:50052]\n#* [HTTP/2] [1] [:path: /org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world]\n#>\n#* Request completely sent off\n#< HTTP/2 200\n#< content-type: application/json\n#< date: Sun, 25 Aug 2024 03:38:12 GMT\n#<\n#\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status\nDESCRIPTION: Commands to check the status of deployed client and server deployments in the Kubernetes cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get deployment       \nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndubbo-go-client-v1   1/1     1            1           22m\ndubbo-go-server-v1   1/1     1            1           49m\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Alibaba Dubbo Dependency with Apache Dubbo in XML\nDESCRIPTION: Shows the original com.alibaba:dubbo Maven dependency (version 2.6.5) that needs to be replaced during the upgrade process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>dubbo</artifactId>\n\t<version>2.6.5</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering service in ZookeeperRegistry\nDESCRIPTION: This snippet shows the implementation of doRegister in ZookeeperRegistry class, which creates a node in Zookeeper for a service. The node path follows the format /${group}/${serviceInterface}/providers/${url}.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprotected void doRegister(URL url) {\n    try {\n        // 通过 Zookeeper 客户端创建节点，节点路径由 toUrlPath 方法生成，路径格式如下:\n        //   /${group}/${serviceInterface}/providers/${url}\n        // 比如\n        //   /dubbo/org.apache.dubbo.DemoService/providers/dubbo%3A%2F%2F127.0.0.1......\n        zkClient.create(toUrlPath(url), url.getParameter(Constants.DYNAMIC_KEY, true));\n    } catch (Throwable e) {\n        throw new RpcException(\"Failed to register...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Redis Service in Dubbo XML Configuration\nDESCRIPTION: This snippet shows how to reference a Redis service in Dubbo's XML configuration. It includes examples of referencing a Map interface with a group, direct point-to-point connection, and using a custom interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" group=\"member\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" url=\"redis://10.20.153.10:6379\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"com.foo.StoreService\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Consumer Registration to Nacos (Method 1)\nDESCRIPTION: YAML configuration to enable registration of consumer URLs to Nacos registry by setting register-consumer-url parameter in the address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n  registry:\n    address: nacos://localhost:8848?register-consumer-url=true\n```\n\n----------------------------------------\n\nTITLE: Setting Zone for Registry Selection\nDESCRIPTION: Code example showing how to set a zone parameter in RpcContext to direct traffic to a specific registry cluster based on the zone attribute.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(\"registry_zone\", \"qingdao\");\n```\n\n----------------------------------------\n\nTITLE: Testing Triple Servlet Integration with HTTP/2 curl Command\nDESCRIPTION: curl command to test the Triple protocol with Servlet integration using HTTP/2, demonstrating the ability to send requests through the reused Spring Boot servlet port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --http2-prior-knowledge -v 'http://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world'\n# 输出如下\n#* [HTTP/2] [1] OPENED stream for http://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world\n#* [HTTP/2] [1] [:method: GET]\n#* [HTTP/2] [1] [:scheme: http]\n#* [HTTP/2] [1] [:authority: localhost:50052]\n#* [HTTP/2] [1] [:path: /org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world]\n#>\n#* Request completely sent off\n#< HTTP/2 200\n#< content-type: application/json\n#< date: Sun, 25 Aug 2024 03:38:12 GMT\n#<\n#\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo and Protocol Buffer Dependencies\nDESCRIPTION: Commands to install the required dependencies for Protocol Buffer code generation and Dubbo functionality, including protoc generators and Dubbo client libraries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo\n```\n\n----------------------------------------\n\nTITLE: Method Configuration Processing in Dubbo URL Assembly\nDESCRIPTION: This code handles the processing of method configurations, including argument validation and parameter mapping for each method defined in the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\n    if (methods != null && !methods.isEmpty()) {\n        for (MethodConfig method : methods) {\n            appendParameters(map, method, method.getName());\n\n            String retryKey = method.getName() + \".retry\";\n            if (map.containsKey(retryKey)) {\n                String retryValue = map.remove(retryKey);\n                if (\"false\".equals(retryValue)) {\n                    map.put(method.getName() + \".retries\", \"0\");\n                }\n            }\n            \n            List<ArgumentConfig> arguments = method.getArguments();\n            if (arguments != null && !arguments.isEmpty()) {\n                for (ArgumentConfig argument : arguments) {\n                    if (argument.getType() != null && argument.getType().length() > 0) {\n                        Method[] methods = interfaceClass.getMethods();\n                        if (methods != null && methods.length > 0) {\n                            for (int i = 0; i < methods.length; i++) {\n                                String methodName = methods[i].getName();\n                                if (methodName.equals(method.getName())) {\n                                    Class<?>[] argtypes = methods[i].getParameterTypes();\n                                    if (argument.getIndex() != -1) {\n                                        if (argtypes[argument.getIndex()].getName().equals(argument.getType())) {\n                                            appendParameters(map, argument, method.getName() + \".\" + argument.getIndex());\n                                        } else {\n                                            throw new IllegalArgumentException(\"argument config error: ...\");\n                                        }\n                                    } else {\n                                        for (int j = 0; j < argtypes.length; j++) {\n                                            Class<?> argclazz = argtypes[j];\n                                            if (argclazz.getName().equals(argument.getType())) {\n                                                appendParameters(map, argument, method.getName() + \".\" + j);\n                                                if (argument.getIndex() != -1 && argument.getIndex() != j) {\n                                                    throw new IllegalArgumentException(\"argument config error: ...\");\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else if (argument.getIndex() != -1) {\n                        appendParameters(map, argument, method.getName() + \".\" + argument.getIndex());\n                    } else {\n                        throw new IllegalArgumentException(\"argument config must set index or type\");\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Admin Console using Maven\nDESCRIPTION: Steps to clone, build, and run the Dubbo admin console using Maven and Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/introduction.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/apache/dubbo-admin.git\ncd dubbo-admin\nmvn clean package\ncd dubbo-admin-distribution/target\njava -jar dubbo-admin-0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: A simple Java interface definition for a Dubbo service that will be exposed via the triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Provider Settings with dubbo:provider XML Element\nDESCRIPTION: The dubbo:provider element is used to configure default settings for service providers in Dubbo. It sets default values for dubbo:service and dubbo:protocol elements. The configuration corresponds to the org.apache.dubbo.config.ProviderConfig class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-provider.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:provider\n  id=\"myProvider\"\n  protocol=\"dubbo\"\n  host=\"192.168.1.100\"\n  threads=\"100\"\n  payload=\"4194304\"\n  server=\"netty\"\n  client=\"netty\"\n  codec=\"dubbo\"\n  serialization=\"hessian2\"\n  default=\"true\"\n  filter=\"myFilter\"\n  listener=\"myListener\"\n  threadpool=\"fixed\"\n  accepts=\"1000\"\n  version=\"1.0.0\"\n  group=\"myGroup\"\n  delay=\"5000\"\n  timeout=\"2000\"\n  retries=\"3\"\n  connections=\"10\"\n  loadbalance=\"random\"\n  async=\"false\"\n  stub=\"true\"\n  mock=\"false\"\n  token=\"true\"\n  registry=\"myRegistry\"\n  dynamic=\"true\"\n  accesslog=\"true\"\n  owner=\"admin@example.com\"\n  document=\"http://example.com/api-docs\"\n  weight=\"100\"\n  executes=\"200\"\n  actives=\"300\"\n  proxy=\"javassist\"\n  cluster=\"failover\"\n  deprecated=\"false\"\n  queues=\"100\"\n  charset=\"UTF-8\"\n  buffer=\"16384\"\n  iothreads=\"4\"\n  telnet=\"status,exit\"\n  contextpath=\"/api\"\n  layer=\"service\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Client in Dubbo-go\nDESCRIPTION: Client-side implementation for streaming communication in Dubbo-go. This code shows how to initialize a client and test all three streaming patterns (bidirectional, client-to-server, and server-to-client) as well as normal unary calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"tri://127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tTestClient(svc)\n}\n\nfunc TestClient(cli greet.GreetService) {\n\tif err := testUnary(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testBidiStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testClientStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testServerStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n\nfunc testUnary(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE unary call\")\n\tresp, err := cli.Greet(context.Background(), &greet.GreetRequest{Name: \"triple\"})\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE unary call resp: %s\", resp.Greeting)\n\treturn nil\n}\n\nfunc testBidiStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE bidi stream\")\n\tstream, err := cli.GreetStream(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tif sendErr := stream.Send(&greet.GreetStreamRequest{Name: \"triple\"}); sendErr != nil {\n\t\treturn err\n\t}\n\tresp, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE bidi stream resp: %s\", resp.Greeting)\n\tif err := stream.CloseRequest(); err != nil {\n\t\treturn err\n\t}\n\tif err := stream.CloseResponse(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc testClientStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE client stream\")\n\tstream, err := cli.GreetClientStream(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor i := 0; i < 5; i++ {\n\t\tif sendErr := stream.Send(&greet.GreetClientStreamRequest{Name: \"triple\"}); sendErr != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tresp, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE client stream resp: %s\", resp.Greeting)\n\treturn nil\n}\n\nfunc testServerStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE server stream\")\n\tstream, err := cli.GreetServerStream(context.Background(), &greet.GreetServerStreamRequest{Name: \"triple\"})\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor stream.Recv() {\n\t\tlogger.Infof(\"TRIPLE server stream resp: %s\", stream.Msg().Greeting)\n\t}\n\tif stream.Err() != nil {\n\t\treturn err\n\t}\n\tif err := stream.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Multiple Reads with Timeout Handling\nDESCRIPTION: Shows how to manually read multiple responses from a stream with timeout handling, checking for EOF (end of stream) and None (timeout) values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Use read method to receive messages\n# If no message arrives within the specified time, returns None\n# If the server has finished sending messages, returns EOF\nwhile True:\n    i = stream.read(timeout=0.5)\n    if i is dubbo.classes.EOF:\n        break\n    elif i is None:\n        print(\"No message received\")\n        continue\n    print(f\"Received response: {i.message}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Apache Public Keys for Signature Verification\nDESCRIPTION: Commands to download and import Apache public keys for verifying the GPG signatures of release artifacts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://dist.apache.org/repos/dist/dev/dubbo/KEYS >> KEYS # download public keys to local directory\n$ gpg --import KEYS # import keys\n$ gpg —edit-key liujun\n  > trust # type trust command\n```\n\n----------------------------------------\n\nTITLE: Configuring Polaris Registry in Dubbo Go YAML\nDESCRIPTION: Example YAML configuration for using Polaris as a registry center in Dubbo Go. It specifies the Polaris server IP, namespace, and authentication token when required.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    polarisMesh:\n      protocol: polaris\n      address: ${北极星服务端IP}:8091\n      namespace: ${北极星命名空间信息}\n      token: ${北极星资源鉴权 token}   # 如果北极星服务端开启了针对客户端的鉴权，则需要配置该参数\n```\n\n----------------------------------------\n\nTITLE: 使用AsyncContext实现Provider端异步 (Java)\nDESCRIPTION: 使用Dubbo提供的AsyncContext接口实现Provider端异步执行,适用于没有CompletableFuture签名接口的情况。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            // 如果要使用上下文，则必须要放在第一句执行\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            // 写回响应\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用AsyncContext实现Provider端异步 (Java)\nDESCRIPTION: 使用Dubbo提供的AsyncContext接口实现Provider端异步执行,适用于没有CompletableFuture签名接口的情况。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            // 如果要使用上下文，则必须要放在第一句执行\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            // 写回响应\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Simple Java interface definition for a Dubbo service that will be exposed via the gateway.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection with Dubbo XML\nDESCRIPTION: Defines a direct service reference using XML configuration, bypassing the registry and connecting directly to the specified provider URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.alibaba.xxx.XxxService\" url=\"dubbo://localhost:20890\" />\n```\n\n----------------------------------------\n\nTITLE: Starting the gRPC Server in Go\nDESCRIPTION: This command runs the gRPC server implementation in Go. The server.go file should contain the necessary code to start and run the gRPC service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run server.go\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Configuration\nDESCRIPTION: Commands to apply the generated Kubernetes configuration and check deployment status.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/deploy.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f ./kube.yaml\nkubectl get services -n dubbo-demo\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Code from Protocol Buffer Definitions\nDESCRIPTION: Command to generate TypeScript code from Protocol Buffer definitions using protoc with ES and Apache Dubbo ES plugins, creating service client interfaces and message type definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nPATH=$PATH:$(pwd)/node_modules/.bin \\\n  protoc -I src/util/proto \\\n  --es_out src/util/gen \\\n  --es_opt target=ts \\\n  --apache-dubbo-es_out src/util/gen \\\n  --apache-dubbo-es_opt target=ts \\\n  example.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring DubboBootstrap with Multi-Instance Support\nDESCRIPTION: Shows various ways to configure DubboBootstrap with multi-instance support, including creating new application instances, adding modules with services and references, and using default instances for backward compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/model.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Create new application instance, share FrameworkModel  \nDubboBootstrap.newInstance(FrameworkModel)  // SharedFrameworkModel -> NewApplicationModel  \n    .addModule()  // New ModuleModel  \n    \t.addReference(ReferenceConfig)  // Attach service configuration to the module  \n    \t.addReference(ReferenceConfig)  \n    \t.addService(ServiceConfig)  \n    .endModule()  \n    .addModule()  \n    \t.addReference(ReferenceConfig)  \n    \t.addService(ServiceConfig)  \n    .endModule()  \n    .addRegistry()  \n    .addConfigCenter()  \n    .start()  \n\n// Compatible with old Bootstrap API, using default application instance  \nDubboBootstrap.getInstance()      // DefaultFrameworkModel -> DefaultApplicationModel  \n    .addReference(ReferenceConfig) // DefaultApplicationModel -> DefaultModuleModel  \n    .addService(ServiceConfig)  // DefaultApplicationModel -> DefaultModuleModel  \n    .setRegistry()              // DefaultApplicationModel  \n    .start()  \n\n// Create new application instance  \nDubboBootstrap.newInstance()      // DefaultFrameworkModel -> NewApplicationModel  \n    .addReference(ReferenceConfig) // NewApplicationModel -> DefaultModuleModel  \n    .addService(ServiceConfig)  // NewApplicationModel -> DefaultModuleModel  \n    .setRegistry()              // NewApplicationModel  \n    .start()  \n```\n\n----------------------------------------\n\nTITLE: Configuring Global Random Token Authorization in Dubbo XML\nDESCRIPTION: Sets up global token authorization using a randomly generated UUID as the token. This configuration applies to all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/token-authorization.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:provider token=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to Hessian\nDESCRIPTION: XML configuration to set Hessian as the default protocol for providers\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"hessian\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Dubbo Java Class\nDESCRIPTION: This snippet demonstrates how to initialize a logger in a Dubbo class using the LoggerFactory. It shows the standard way of obtaining an ErrorTypeAwareLogger instance for a specific class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * ChannelListenerDispatcher\n */\npublic class ChannelHandlerDispatcher implements ChannelHandler {\n\n    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ChannelHandlerDispatcher.class);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Generic Invocation via Dubbo API\nDESCRIPTION: Demonstrates how to configure a generic service reference using Dubbo's API, and then perform generic invocations. It includes examples of invoking methods with basic types and using Map to represent POJO parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.rpc.service.GenericService; \n... \n \n// 引用远程服务 \n// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>(); \n// 弱类型接口名\nreference.setInterface(\"com.xxx.XxxService\");  \nreference.setVersion(\"1.0.0\");\n// 声明为泛化接口 \nreference.setGeneric(true);  \n\n// 用org.apache.dubbo.rpc.service.GenericService可以替代所有接口引用  \nGenericService genericService = reference.get(); \n \n// 基本类型以及Date,List,Map等不需要转换，直接调用 \nObject result = genericService.$invoke(\"sayHello\", new String[] {\"java.lang.String\"}, new Object[] {\"world\"}); \n \n// 用Map表示POJO参数，如果返回值为POJO也将自动转成Map \nMap<String, Object> person = new HashMap<String, Object>(); \nperson.put(\"name\", \"xxx\"); \nperson.put(\"password\", \"yyy\"); \n// 如果返回POJO将自动转成Map \nObject result = genericService.$invoke(\"findPerson\", new String[]\n{\"com.xxx.Person\"}, new Object[]{person}); \n \n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Dubbo-go 3.0\nDESCRIPTION: YAML configuration for setting up Nacos as the registry in Dubbo-go 3.0. Includes application info, registry details, and service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: myApp\n    module: opensource\n    organization: dubbo\n    owner: laurence\n    version: myversion\n    environment: pro\n  registries:\n    nacosWithCustomGroup:\n      protocol: nacos\n      address: 127.0.0.1:8848\n      group: myGroup\n      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1\n      username: abc\n      password: abc\n  protocols:\n    dubbo:\n      name: dubbo\n      port: 20000\n  provider:\n    services:\n      UserProviderWithCustomGroupAndVersion:\n        interface: org.apache.dubbo.UserProvider.Test\n        version: myInterfaceVersion\n        group: myInterfaceGroup\n```\n\n----------------------------------------\n\nTITLE: In-Memory Configuration Storage with InmemoryConfiguration\nDESCRIPTION: Demonstrates Dubbo's InmemoryConfiguration class which provides an internal storage mechanism for configuration using a LinkedHashMap to store and manage key-value pairs in memory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class InmemoryConfiguration implements Configuration {\n\n    private String name;\n\n    // stores the configuration key-value pairs\n    private Map<String, String> store = new LinkedHashMap<>();\n\n    public InmemoryConfiguration() {\n    }\n\n    public InmemoryConfiguration(String name) {\n        this.name = name;\n    }\n\n    public InmemoryConfiguration(Map<String, String> properties) {\n        this.setProperties(properties);\n    }\n\n    @Override\n    public Object getInternalProperty(String key) {\n        return store.get(key);\n    }\n\n    /**\n     * Add one property into the store, the previous value will be replaced if the key exists\n     */\n    public void addProperty(String key, String value) {\n        store.put(key, value);\n    }\n\n    /**\n     * Add a set of properties into the store\n     */\n    public void addProperties(Map<String, String> properties) {\n        if (properties != null) {\n            this.store.putAll(properties);\n        }\n    }\n\n    /**\n     * set store\n     */\n    public void setProperties(Map<String, String> properties) {\n        if (properties != null) {\n            this.store = properties;\n        }\n    }\n\n    public Map<String, String> getProperties() {\n        return store;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Remote Service Reference in Dubbo\nDESCRIPTION: Configures a service reference to force remote calling by setting the scope to 'remote', overriding the default behavior of preferring local services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference ... scope=\"remote\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LoggerAdapter in Java\nDESCRIPTION: Example of implementing a custom LoggerAdapter interface in Java for Dubbo's logging extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/logger-adapter.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.common.logger.LoggerAdapter;\n\npublic class XxxLoggerAdapter implements LoggerAdapter {\n    public Logger getLogger(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncService Interface in Java\nDESCRIPTION: Defines a simple interface with a synchronous method signature that will be implemented asynchronously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Weighted Random Selection for Minimum Active Invokers\nDESCRIPTION: Code snippet showing how multiple Invokers with the minimum active number are selected using weighted random when weights are not equal and total weight is positive.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (! sameWeight && totalWeight > 0) {\n    // if the weights are not equal and the toatl weight is greater than 0 then choose randomly according to total weight\n\n    int offsetWeight = random.nextInt(totalWeight);\n\n    // and determine which segment the random value falls on.\n\n    for (int i = 0; i < leastCount; i++) {\n        int leastIndex = leastIndexs[i];\n        offsetWeight -= getWeight(invokers.get(leastIndex), invocation);\n        if (offsetWeight <= 0)\n            return invokers.get(leastIndex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Failback Pattern in Dubbo Cluster\nDESCRIPTION: Implementation of FailbackClusterInvoker that returns empty results on failure and retries failed invocations through scheduled tasks. Suitable for message notification operations with automatic retry mechanism every 5 seconds.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class FailbackClusterInvoker<T> extends AbstractClusterInvoker<T> {\n\n    private static final long RETRY_FAILED_PERIOD = 5 * 1000;\n\n    private final ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2,\n            new NamedInternalThreadFactory(\"failback-cluster-timer\", true));\n\n    private final ConcurrentMap<Invocation, AbstractClusterInvoker<?>> failed = new ConcurrentHashMap<Invocation, AbstractClusterInvoker<?>>();\n    private volatile ScheduledFuture<?> retryFuture;\n\n    @Override\n    protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        try {\n            checkInvokers(invokers, invocation);\n            Invoker<T> invoker = select(loadbalance, invocation, invokers, null);\n            return invoker.invoke(invocation);\n        } catch (Throwable e) {\n            logger.error(\"Failback to invoke method ...\");\n            addFailed(invocation, this);\n            return new RpcResult();\n        }\n    }\n\n    private void addFailed(Invocation invocation, AbstractClusterInvoker<?> router) {\n        if (retryFuture == null) {\n            synchronized (this) {\n                if (retryFuture == null) {\n                    retryFuture = scheduledExecutorService.scheduleWithFixedDelay(new Runnable() {\n                        @Override\n                        public void run() {\n                            try {\n                                retryFailed();\n                            } catch (Throwable t) {\n                                logger.error(\"Unexpected error occur at collect statistic\", t);\n                            }\n                        }\n                    }, RETRY_FAILED_PERIOD, RETRY_FAILED_PERIOD, TimeUnit.MILLISECONDS);\n                }\n            }\n        }\n        failed.put(invocation, router);\n    }\n\n    void retryFailed() {\n        if (failed.size() == 0) {\n            return;\n        }\n        for (Map.Entry<Invocation, AbstractClusterInvoker<?>> entry : new HashMap<Invocation, AbstractClusterInvoker<?>>(failed).entrySet()) {\n            Invocation invocation = entry.getKey();\n            Invoker<?> invoker = entry.getValue();\n            try {\n                invoker.invoke(invocation);\n                failed.remove(invocation);\n            } catch (Throwable e) {\n                logger.error(\"Failed retry to invoke method ...\");\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics by Application Name and Keyword\nDESCRIPTION: Demonstrates how to filter metrics by specifying an application name and keyword using the metrics_default command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> metrics_default dubbo-springboot-demo-provider registry\n```\n\n----------------------------------------\n\nTITLE: ZookeeperMetadataReportFactory's createMetadataReport Implementation\nDESCRIPTION: This concise implementation of the factory method creates a new ZookeeperMetadataReport instance by passing the URL and ZookeeperTransporter to its constructor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public MetadataReport createMetadataReport(URL url) {\n        return new ZookeeperMetadataReport(url, zookeeperTransporter);\n    }\n```\n\n----------------------------------------\n\nTITLE: Dual Protocol Configuration in YAML\nDESCRIPTION: Extended YAML configuration to support both Dubbo and Triple protocols on the same port with Triple as preferred protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n    ext-protocol: tri\n    preferred-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Enabling dubbo-proxy Plugin in APISIX Configuration YAML\nDESCRIPTION: Configuration snippet for enabling the dubbo-proxy plugin in the Apache APISIX config.yaml file. This must be added to the plugins section to enable APISIX to proxy Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Add this in config.yaml\nplugins:\n  - ... # plugin you need\n  - dubbo-proxy\n```\n\n----------------------------------------\n\nTITLE: Querying Metrics by Application Name and Keyword\nDESCRIPTION: Demonstrates how to filter metrics by specifying an application name and keyword using the metrics_default command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> metrics_default dubbo-springboot-demo-provider registry\n```\n\n----------------------------------------\n\nTITLE: Performing Echo Test on Dubbo Service in Java\nDESCRIPTION: Demonstrates how to cast a Dubbo service to EchoService and perform an echo test. The test sends a string \"OK\" and expects the same string as a response to verify service availability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/echo-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nEchoService echoService = (EchoService) demoService;\n\nString status = (String) echoService.$echo(\"OK\");\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo-Python from source\nDESCRIPTION: Commands to clone and install Dubbo-Python from source code repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/apache/dubbo-python.git\ncd dubbo-python && pip install .\n```\n\n----------------------------------------\n\nTITLE: Pixiu HTTP Proxy Configuration\nDESCRIPTION: YAML configuration for Pixiu HTTP proxy setup, defining listener settings, routing rules, and cluster configuration for forwarding HTTP requests to backend servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\" # 使用 HTTP Listener\n      address:\n        socket_address:\n          address: \"0.0.0.0\" # 监听地址设置为 0.0.0.0\n          port: 8888  # 端口设置为 8888\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager  # NetworkFilter 设置为 httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/user\"    # 设置路由规则，将 /user 前缀的请求转发给名称为 user 的 cluster 集群\n                      route:\n                        cluster: \"user\"\n                        cluster_not_found_response_code: 505\n                http_filters:\n                  - name: dgp.filter.http.httpproxy  # 使用 dgp.filter.http.httpproxy 这个 HttpFilter 来进行转发\n                    config:\n\n  clusters:\n    - name: \"user\"  # 配置一个名称为 user 的 集群，其中有一个实例，地址是 127.0.0.1:1314\n      lb_policy: \"random\" \n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n```\n\n----------------------------------------\n\nTITLE: Configuring DubboMethodArg in VirtualService\nDESCRIPTION: Example of a DubboMethodArg configuration within a VirtualService. It demonstrates how to define matching rules for specific method arguments, including their index, type, and value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - method:\n        - args: #DubboMethodArg\n          - index:\n            str_value:\n            type:\n            num_value:\n            bool_value:\n            reserve:\n```\n\n----------------------------------------\n\nTITLE: Advanced Mock Configurations\nDESCRIPTION: Various advanced mock configurations including force/fail behaviors and method-level mocking.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/local-mock.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw com.foo.MockException\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:return fake\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:throw com.foo.MockException\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"demoService\" check=\"false\" interface=\"com.foo.BarService\">\n    <dubbo:parameter key=\"sayHello.mock\" value=\"force:return fake\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Defining BoolMatch in VirtualService\nDESCRIPTION: Example of a BoolMatch configuration within a VirtualService. It shows how to match boolean values in method arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - method:\n        - args: \n          - index: 1\n            type: java.lang.Boolean\n            bool_value: #BoolMatch\n              - exact: true\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface with Protocol Buffers\nDESCRIPTION: Example protobuf definition for a Dubbo service interface showing the UserProvider service with a SayHello method and associated message types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/http_triple.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\npackage org.apache.dubbo.quickstart.samples;\n\nservice UserProvider {\n  rpc SayHello (HelloRequest) returns (User) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Failover Cluster Invoker in Dubbo-Go\nDESCRIPTION: This code snippet shows the implementation of a failover cluster invoker in Dubbo-Go. It creates a new invoker that extends the base cluster invoker with failover capabilities, which is the default strategy in the framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc newFailoverClusterInvoker(directory cluster.Directory) protocol.Invoker {\n    return &failoverClusterInvoker{\n  baseClusterInvoker: newBaseClusterInvoker(directory),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Consumer\nDESCRIPTION: Shows how to configure TLS security on the consumer side, including setting up trust certificates and handling mutual TLS authentication with client certificates.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/tls.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (!mutualTls) {}\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n} else {\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n    sslConfig.setClientKeyCertChainPath(args[1]);\n    sslConfig.setClientPrivateKeyPath(args[2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Routing Configuration in Dubbo Rust\nDESCRIPTION: YAML configuration for tag routing that labels all service providers and consumers with IP 127.0.0.1 as 'local'. This enables tag-based service discovery and invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/router-module.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v1.0\nforce: false\nenabled: true\nkey: application\ntags:\n  - name: local\n    match:\n      - key: ip\n        value: 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Querying Router Snapshot Results\nDESCRIPTION: Command to retrieve recent router snapshot results, showing detailed routing chain information including input/output addresses and router states at each step.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>getRecentRouterSnapshot\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n```\n\n----------------------------------------\n\nTITLE: Using DubboBootstrap API for Service Provider Configuration\nDESCRIPTION: This snippet demonstrates how to use the DubboBootstrap API to configure a Dubbo service provider. It simplifies the configuration process and provides better control over the startup process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.bootstrap.DubboBootstrap;\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ProviderConfig;\nimport org.apache.dubbo.config.ServiceConfig;\nimport com.xxx.DemoService;\nimport com.xxx.DemoServiceImpl;\n\npublic class DemoProvider {\n    public static void main(String[] args) {\n\n        ConfigCenterConfig configCenter = new ConfigCenterConfig();\n        configCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n\n        // 服务提供者协议配置\n        ProtocolConfig protocol = new ProtocolConfig();\n        protocol.setName(\"dubbo\");\n        protocol.setPort(12345);\n        protocol.setThreads(200);\n\n        // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口\n        // 服务提供者暴露服务配置\n        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n        demoServiceConfig.setInterface(DemoService.class);\n        demoServiceConfig.setRef(new DemoServiceImpl());\n        demoServiceConfig.setVersion(\"1.0.0\");\n        \n        // 第二个服务配置\n        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();\n        fooServiceConfig.setInterface(FooService.class);\n        fooServiceConfig.setRef(new FooServiceImpl());\n        fooServiceConfig.setVersion(\"1.0.0\");\n        \n        ...\n\n        // 通过DubboBootstrap简化配置组装，控制启动过程\n        DubboBootstrap.getInstance()\n                .application(\"demo-provider\") // 应用配置\n                .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\")) // 注册中心配置\n                .protocol(protocol) // 全局默认协议配置\n                .service(demoServiceConfig) // 添加ServiceConfig\n                .service(fooServiceConfig)\n                .start()    // 启动Dubbo\n                .await();   // 挂起等待(防止进程退出）\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Method for Service Discovery Registration in Dubbo\nDESCRIPTION: This is a template method for registering service discovery data. It creates a service instance, validates it, updates the instance revision if necessary, and then calls the doRegister method to be implemented by subclasses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic synchronized void register() throws RuntimeException {\n    this.serviceInstance = createServiceInstance(this.metadataInfo);\n    if (!isValidInstance(this.serviceInstance)) {\n        logger.warn(\"No valid instance found, stop registering instance address to registry.\");\n        return;\n    }\n\n    boolean revisionUpdated = calOrUpdateInstanceRevision(this.serviceInstance);\n    if (revisionUpdated) {\n        reportMetadata(this.metadataInfo);\n        doRegister(this.serviceInstance);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Filter SPI Interface in Java\nDESCRIPTION: The base SPI interface definition for Dubbo Filter with module scope extension point declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SPI(scope = ExtensionScope.MODULE)\npublic interface Filter extends BaseFilter {}\n```\n\n----------------------------------------\n\nTITLE: Importing GPG Public Keys\nDESCRIPTION: Commands to download and import GPG public keys for release verification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl https://dist.apache.org/repos/dist/dev/dubbo/KEYS >> KEYS # Download public keys to local directory\n$ gpg --import KEYS # Import keys\n$ gpg —edit-key liujun\n   > trust # Type trust command\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Dubbo Reference (Annotation)\nDESCRIPTION: Java annotation configuration for referencing Dubbo service across different namespaces.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(providedBy = \"istio-demo-dubbo-producer\",providerPort = 20885, providerNamespace = \"istio-demo\")\n```\n\n----------------------------------------\n\nTITLE: Using ReferenceConfigCache in Dubbo Java\nDESCRIPTION: Demonstrates how to use ReferenceConfigCache to get and cache ReferenceConfig instances. The cache.get() method will cache the Reference object and call ReferenceConfig.get() to start the ReferenceConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/reference-config-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n......\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\n// cache.get方法中会缓存 Reference对象，并且调用ReferenceConfig.get方法启动ReferenceConfig\nXxxService xxxService = cache.get(reference);\n// 注意！ Cache会持有ReferenceConfig，不要在外部再调用ReferenceConfig的destroy方法，导致Cache内的ReferenceConfig失效！\n// 使用xxxService对象\nxxxService.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Using Annotations Instead of XML for Dubbo REST Services in Java\nDESCRIPTION: Demonstrates how to use Dubbo and JAX-RS annotations to replace XML configuration for REST services, including service definition and path mapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\n@Service(protocol = \"rest\")\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user\n        userRepository.save(user);\n    }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for Router Conditions in Dubbo\nDESCRIPTION: This method implements pattern matching for URL attributes. It handles different scenarios based on the contents of the 'matches' and 'mismatches' collections, applying different matching logic for inclusion and exclusion patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/router.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean isMatch(String value, URL param) {\n    // 情况一：matches 非空，mismatches 为空\n    if (!matches.isEmpty() && mismatches.isEmpty()) {\n        // 遍历 matches 集合，检测入参 value 是否能被 matches 集合元素匹配到。\n        // 举个例子，如果 value = 10.20.153.11，matches = [10.20.153.*],\n        // 此时 isMatchGlobPattern 方法返回 true\n        for (String match : matches) {\n            if (UrlUtils.isMatchGlobPattern(match, value, param)) {\n                return true;\n            }\n        }\n        \n        // 如果所有匹配项都无法匹配到入参，则返回 false\n        return false;\n    }\n\n    // 情况二：matches 为空，mismatches 非空\n    if (!mismatches.isEmpty() && matches.isEmpty()) {\n        for (String mismatch : mismatches) {\n            // 只要入参被 mismatches 集合中的任意一个元素匹配到，就返回 false\n            if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) {\n                return false;\n            }\n        }\n        // mismatches 集合中所有元素都无法匹配到入参，此时返回 true\n        return true;\n    }\n\n    // 情况三：matches 非空，mismatches 非空\n    if (!matches.isEmpty() && !mismatches.isEmpty()) {\n        // matches 和 mismatches 均为非空，此时优先使用 mismatches 集合元素对入参进行匹配。\n        // 只要 mismatches 集合中任意一个元素与入参匹配成功，就立即返回 false，结束方法逻辑\n        for (String mismatch : mismatches) {\n            if (UrlUtils.isMatchGlobPattern(mismatch, value, param)) {\n                return false;\n            }\n        }\n        // mismatches 集合元素无法匹配到入参，此时再使用 matches 继续匹配\n        for (String match : matches) {\n            // 只要 matches 集合中任意一个元素与入参匹配成功，就立即返回 true\n            if (UrlUtils.isMatchGlobPattern(match, value, param)) {\n                return true;\n            }\n        }\n        \n        // 全部失配，则返回 false\n        return false;\n    }\n    \n    // 情况四：matches 和 mismatches 均为空，此时返回 false\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Metrics Aggregation Configuration Class Definition\nDESCRIPTION: Configuration class for metrics aggregation including QPS, response time, and time window settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.nested.AggregationConfig\n```\n\n----------------------------------------\n\nTITLE: Obtaining SPI Extension Instances (New Method)\nDESCRIPTION: Demonstrates the new approach for obtaining SPI extension instances through ScopeModel or ExtensionDirector after the multiple-instance transformation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/develop.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\napplicationModel.getExtensionLoader(Cluster.class).getExtension(name, wrap);\n```\n\n----------------------------------------\n\nTITLE: Remote Dubbo-Go Configuration in YAML\nDESCRIPTION: This YAML configuration is stored in Zookeeper and loaded remotely by the Dubbo-Go application. It defines registries and protocols for the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/remote.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      timeout: 3s\n      address: '127.0.0.1:2181'\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n```\n\n----------------------------------------\n\nTITLE: Destroying Cached ReferenceConfig\nDESCRIPTION: Shows how to properly evict and destroy a ReferenceConfig instance from the cache, ensuring proper resource cleanup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\ncache.destroy(reference);\n```\n\n----------------------------------------\n\nTITLE: 定义异步服务接口 (Java)\nDESCRIPTION: 定义了同步和异步调用方法的服务接口,异步方法返回CompletableFuture对象。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    /**\n     * 同步调用方法\n     */\n    String invoke(String param);\n    /**\n     * 异步调用方法\n     */\n    CompletableFuture<String> asyncInvoke(String param);\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Remote Dubbo Service\nDESCRIPTION: Java code snippet showing how to call a remote Dubbo service method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndemoService.sayHello(\"world\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Consumer\nDESCRIPTION: Shows how to configure TLS security on the consumer side, including setting up trust certificates and handling mutual TLS authentication with client certificates.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/tls.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (!mutualTls) {}\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n} else {\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n    sslConfig.setClientKeyCertChainPath(args[1]);\n    sslConfig.setClientPrivateKeyPath(args[2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Java interface definition for the Dubbo service with a simple greeting method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-higress.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.gateway.api;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: 定义异步服务接口 (Java)\nDESCRIPTION: 定义了同步和异步调用方法的服务接口,异步方法返回CompletableFuture对象。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    /**\n     * 同步调用方法\n     */\n    String invoke(String param);\n    /**\n     * 异步调用方法\n     */\n    CompletableFuture<String> asyncInvoke(String param);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Protobuf Service for Dubbo Intercommunication\nDESCRIPTION: This Protobuf definition outlines a Greeter service with a SayHello RPC method. It includes package definitions for both Go and Java, ensuring compatibility between the two implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n//protoc --go_out=. --go_opt=paths=source_relative --go-triple_out=. greet.proto\nsyntax = \"proto3\";\npackage org.apache.dubbo.sample;\n\noption go_package = \"github.com/apache/dubbo-go-samples/java_interop/protobuf-triple/go/proto;proto\";\n//package of go\noption java_package = 'org.apache.dubbo.sample';\noption java_multiple_files = true;\noption java_outer_classname = \"HelloWorldProto\";\noption objc_class_prefix = \"WH\";\n\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello(HelloRequest) returns (HelloReply);\n  // Sends a greeting via stream\n  //  rpc SayHelloStream (stream HelloRequest) returns (stream HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Logging\nDESCRIPTION: Shows how to configure access logging in Dubbo-Go server with options for default logging or custom log file paths.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsrv, err := server.NewServer(\n\tserver.WithAccesslog(\"true\"),\n\t// server.WithAccesslog(\"default\"),\n\t// server.WithAccesslog(\"/your/path/to/store/the/log/logfile\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Groups in XML\nDESCRIPTION: Shows how to configure Dubbo service groups using XML configuration for both providers and consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo\"/>\n\n<dubbo:service interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo2\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo\"/>\n\n<dubbo:reference id=\"demoService2\" interface=\"org.apache.dubbo.example.service.DemoService\" group=\"demo2\"/>\n\n<dubbo:reference id=\"demoService3\" interface=\"org.apache.dubbo.example.service.DemoService\" group=\"*\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML\nDESCRIPTION: XML configuration for consuming a Dubbo service. Defines the application name, registry address (Zookeeper), and references the remote service interface with check=false option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-consumer\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:reference id=\"demoService\" check=\"false\" interface=\"org.apache.dubbo.demo.DemoServiceDubbo$IDemoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Service Interface in Java\nDESCRIPTION: Java interface definition for the MetricsService, which serves as the exit point for Dubbo to expose metric data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MetricsService {\n\n    String DEFAULT_EXTENSION_NAME = \"default\";\n\n    String VERSION = \"1.0.0\";\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(List<MetricsCategory> categories);\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, List<MetricsCategory> categories);\n\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, String methodName, Class<?>[] parameterTypes, List<MetricsCategory> categories);\n}\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Generic Service\nDESCRIPTION: Shows how to configure and expose generic services on the server side using Dubbo's API approach.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-generic-invoke.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"api-generic-provider\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://127.0.0.1:2181\");\n\napplication.setRegistry(registry);\n\nGenericService genericService = new GenericServiceImpl();\n\nServiceConfig<GenericService> service = new ServiceConfig<GenericService>();\nservice.setApplication(application);\nservice.setInterface(\"com.alibaba.dubbo.samples.generic.api.HelloService\");\nservice.setRef(genericService);\nservice.export();\n\nServiceConfig<GenericService> service2 = new ServiceConfig<GenericService>();\nservice2.setApplication(application);\nservice2.setInterface(\"com.alibaba.dubbo.samples.generic.api.HiService\");\nservice2.setRef(genericService);\nservice2.export();\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Dubbo Instances\nDESCRIPTION: This code demonstrates how to create and use multiple Dubbo instances using the DubboBootstrap API. It shows the creation of service and reference configurations, setting up multiple applications and modules, and managing their lifecycles independently.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/multi-instance.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    ServiceConfig<DemoService> service = new ServiceConfig<>();\n    service.setInterface(DemoService.class);\n    service.setRef(new DemoServiceImpl());\n\n    ReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();\n    reference1.setInterface(DemoService.class);\n\n    ReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();\n    reference2.setInterface(DemoService.class);\n\n\t// Create a launcher (automatically create a new ApplicationModel)\n    DubboBootstrap bootstrap1 = DubboBootstrap.newInstance();\n\t// Specify application name\n    bootstrap1.application(new ApplicationConfig(\"dubbo-demo-app-1\"))\n        .registry(new RegistryConfig(\"nacos://localhost:8848\"))\n        // Create a module\n        .newModule()\n        \t// Publish service within the module\n    \t\t.service(service)\n        .endModule()\n        // Create a module\n        .newModule()\n        \t// Subscribe to service within the module\n    \t\t.reference(reference1)\n        .endModule()\n        .start();\n\n\t// Create a launcher (automatically create a new ApplicationModel)\n    DubboBootstrap bootstrap2 = DubboBootstrap.newInstance();\n\t// Specify application name\n    bootstrap2.application(new ApplicationConfig(\"dubbo-demo-app-2\"))\n        .registry(new RegistryConfig(\"nacos://localhost:8848\"))\n        // Create a module\n        .newModule()\n        \t// Subscribe to service within the module\n    \t\t.reference(reference2)\n        .endModule()\n        .start();\n\n\t// stub1 and stub2 are two independent subscriptions, isolated from each other.\n\n\t// Subscribed stub\n    DemoService stub1 = reference1.get();\n    System.out.println(stub1.sayHello(\"Hello World!\"));\n\n\t// Subscribed stub\n    DemoService stub2 = reference2.get();\n    System.out.println(stub2.sayHello(\"Hello World!\"));\n\n    bootstrap1.stop();\n    bootstrap2.stop();\n```\n\n----------------------------------------\n\nTITLE: Application-Level Conditional Routing in Nacos\nDESCRIPTION: YAML configuration for application-level conditional routing to be stored in Nacos. Routes all requests from IP 127.0.0.1 to services with ports between 8000 and 8888.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/router-module.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v1.0\nscope: \"application\"\nforce: false\nenabled: true\nkey: application\nconditions:\n  - ip=127.0.0.1 => port=8000~8888\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service for Triple Protocol\nDESCRIPTION: This Protobuf definition example shows how to define a simple gRPC service called 'Greeter' with a 'greet' method. It includes message definitions for request and response types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.samples.tri.unary;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Deployer with Metadata Center in Dubbo\nDESCRIPTION: The initialize method in DefaultApplicationDeployer that handles the initialization sequence, including starting the metadata center alongside other components like config center and module deployers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n @Override\n    public void initialize() {\n        if (initialized) {\n            return;\n        }\n        // Ensure that the initialization is completed when concurrent calls\n        synchronized (startLock) {\n            if (initialized) {\n                return;\n            }\n            // register shutdown hook\n            registerShutdownHook();\n\n            startConfigCenter();\n\n            loadApplicationConfigs();\n\n            initModuleDeployers();\n\n            // @since 2.7.8\n            startMetadataCenter();\n\n            initialized = true;\n\n            if (logger.isInfoEnabled()) {\n                logger.info(getIdentifier() + \" has been initialized!\");\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Path Pattern Specification in Dubbo-Go-Pixiu\nDESCRIPTION: Example of a URL path pattern in Pixiu configuration that demonstrates the pattern matching capability with variable extraction from the URL path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/trie.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\npath: '/api/v1/test-dubbo/user/name/:name'\n```\n\n----------------------------------------\n\nTITLE: Configuring Service with Hessian Protocol\nDESCRIPTION: XML configuration to specify Hessian protocol for a specific service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"hessian\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DubboRouteDetail in VirtualService\nDESCRIPTION: Example of a DubboRouteDetail configuration within a VirtualService. It shows the structure for defining detailed routing rules including matching criteria and destinations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail: #DubboRouteDetail\n    - name:\n      match:\n      route:\n      mirror:\n      retries:\n      timeout:\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Invocation in Dubbo-go Client\nDESCRIPTION: Go code demonstrating how to create a generic service reference using the Triple protocol and hessian2 serialization. This code initializes the reference configuration, sets up the registry, and invokes the remote Java service using generic call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 初始化 Reference 配置\nrefConf := config.NewReferenceConfigBuilder().\n  SetInterface(\"org.apache.dubbo.UserProvider\").\n  SetRegistryIDs(\"zk\").\n  SetProtocol(tripleConst.TRIPLE).\n  SetGeneric(true).\n  SetSerialization(\"hessian2\").\n  Build()\n\n// 构造 Root 配置，引入注册中心模块\nrootConfig := config.NewRootConfigBuilder().\n  AddRegistry(\"zk\", config.NewRegistryConfigWithProtocolDefaultPort(\"zookeeper\")).\n  Build()\n\n// Reference 配置初始化，因为需要使用注册中心进行服务发现，需要传入经过配置的 rootConfig\nif err := refConf.Init(rootConfig); err != nil{\n  panic(err)\n}\n\n// 泛化调用加载、服务发现\nrefConf.GenericLoad(appName)\n\ntime.Sleep(time.Second)\n\n// 发起泛化调用\nresp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(\n  context.TODO(),\n  \"getUser1\",\n  []string{\"java.lang.String\"},\n  []hessian.Object{\"A003\"},\n)\n\nif err != nil {\n  panic(err)\n}\nlogger.Infof(\"GetUser1(userId string) res: %+v\", resp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Service Call in Java\nDESCRIPTION: Shows how to call the asynchronous service from the Consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/async-consumer.xml\"});\n    context.start();\n\n    AsyncService asyncService = (AsyncService) context.getBean(\"asyncService\");\n    System.out.println(asyncService.sayHello(\"async call request\"));\n \n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Nodes for Consistent Hash Algorithm\nDESCRIPTION: XML configuration to specify the number of virtual nodes used in the consistent hash load balancing algorithm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:parameter key=\"hash.nodes\" value=\"320\" />\n```\n\n----------------------------------------\n\nTITLE: Java Service Name Example\nDESCRIPTION: Example showing how Dubbo converts Java class names to internal format by adding L prefix and semicolon suffix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncom.alibaba.middleware.hsf.guide.api.param.ModifyOrderPriceParam\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Service Provider with Skywalking Agent\nDESCRIPTION: Command to start the Dubbo provider with Skywalking agent configuration for monitoring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-provider -Dskywalking.collector.servers=localhost:10800 dubbo-provider/target/dubbo-provider.jar\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Web Transport Library\nDESCRIPTION: Command to install the Dubbo Web transport library which enables browser applications to communicate with Dubbo services over HTTP.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @apachedubbo/dubbo-web\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Provider Pods Status\nDESCRIPTION: Commands to list Dubbo Provider pods and check their deployment logs to verify successful startup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Check the pod list\nkubectl get pods -l app=dubbo-samples-apiserver-provider\n\n# Check pod deployment logs\nkubectl logs your-pod-id\n```\n\n----------------------------------------\n\nTITLE: Setting Unicast Parameter for Dubbo Consumer Application\nDESCRIPTION: This configuration sets the 'unicast' parameter to false for a Dubbo consumer application. This is necessary when multiple consumer processes are running on the same machine or when the consumer and provider are on the same machine.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/multicast.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"demo-consumer\">\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:application>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:consumer>\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: Installing Delve debugger for Go\nDESCRIPTION: Commands for installing the Delve debugger, which is required for remote debugging of the Go-based dubbo-pilot service. Shows the installation process and verification steps.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/go-delve/delve.git\nmake install\n\nwhich dlv\n/root/go/bin/dlv\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Service Interface with CompletableFuture in Dubbo\nDESCRIPTION: Interface definition for a Dubbo service that supports both synchronous and asynchronous calls. The asynchronous method returns a CompletableFuture object to allow non-blocking operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {  \n    /**  \n     * Synchronous call method  \n     */  \n    String invoke(String param);  \n    /**  \n     * Asynchronous call method  \n     */  \n    CompletableFuture<String> asyncInvoke(String param);  \n}  \n```\n\n----------------------------------------\n\nTITLE: Installing Skywalking for Dubbo using Kubernetes\nDESCRIPTION: This command creates Skywalking resources in a Kubernetes cluster using a configuration file provided by the Dubbo community. It's a quick way to set up Skywalking for testing or experimental purposes with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/skywalking.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/skywalking.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Stub in Spring XML for Dubbo Consumer\nDESCRIPTION: Shows how to configure a local stub for a Dubbo consumer interface using Spring XML. Two variations are provided: one using a boolean flag and another specifying the stub class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-stub.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Message for Go-Java Interoperability\nDESCRIPTION: This Protobuf definition declares a User message type with name, id, and age fields. It's used for serialization in both Go and Java implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage User {\n  string name = 1;\n  string id = 2;\n  int32 age = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Parameters in Dubbo Protocol Configuration\nDESCRIPTION: Illustrates how to set custom parameters for a Dubbo protocol using the parameter tag, useful for protocol-specific configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"napoli\">\n   <dubbo:parameter key=\"http://10.20.160.198/wiki/display/dubbo/napoli.queue.name\" value=\"xxx\" />\n</dubbo:protocol>\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Dump for Deserialization Failure Analysis in Java\nDESCRIPTION: Command to generate a thread dump for analyzing the deserialization error by capturing the stack trace information to a log file for further investigation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/6.md#2025-04-08_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Creating Dubbo Instance with Multiple Registries in Go\nDESCRIPTION: Initializes a Dubbo instance with multiple registry centers (Nacos and Zookeeper) using the API configuration method. This allows a single Dubbo application to connect to different registry services simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithRegistry(\n\t    registryWithID(\"nacos\"),\n\t\tregistry.WithNacos(),\n\t\tregistry.WithAddress(\"127.0.0.1:8848\"),\n\t),\n\tdubbo.WithRegistry(\n\t    registryWithID(\"zookeeper\"),\n\t\tregistry.WithZookeeper(),\n\t\tregistry.WithAddress(\"127.0.0.1:2181\"),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the gRPC Server in Dubbo-go-Pixiu\nDESCRIPTION: Shell command to run the gRPC server implementation using Go. This starts the server that will handle the gRPC requests proxied by Pixiu.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run server.go\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin with Dubboctl (Shell)\nDESCRIPTION: Shell commands for installing Dubbo Admin using Dubboctl, including options for setting component configurations and enabling/disabling components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl manifest install\n\n# or\n\ndubboctl manifest generate | kubectl apply -f -\n\ndubboctl install --set spec.components.admin.replicas=2\n\ndubboctl install --set spec.componentsMeta.admin.enabled=true, spec.componentsMeta.grafana.enabled=false\n\ndubboctl install --set spec.componentsMeta.grafana.repoURL=https://grafana.github.io/helm-charts, spec.componentsMeta.grafana.version=6.31.0\n\nkubectl get pod -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin Components with Helm (Shell)\nDESCRIPTION: Helm commands for adding repositories and installing Zookeeper, Prometheus, Grafana, Skywalking, and Zipkin components for Dubbo Admin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add https://charts.bitnami.com/bitnami\nhelm repo add https://prometheus-community.github.io/helm-charts\nhelm repo add https://grafana.github.io/helm-charts\nhelm repo add https://apache.jfrog.io/artifactory/skywalking-helm\nhelm repo add https://openzipkin.github.io/zipkin\n\nhelm install zookeeper bitnami/zookeeper -n dubbo-system\n\nhelm install prometheus prometheus-community/prometheus -n dubbo-system\n\nhelm install grafana grafana/grafana -n dubbo-system\n\nhelm install skywalking skywalking/skywalking -n dubbo-system\n\nhelm install zipkin openzipkin/zipkin -n dubbo-system\n\nhelm ls -n dubbo-system ; kubectl get pods -n dubbo-system --output wide\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fastify Server with Dubbo\nDESCRIPTION: Creates and configures a Fastify server with Dubbo plugin integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fastify } from \"fastify\";\nimport { fastifyDubboPlugin } from \"@apachedubbo/dubbo-fastify\";\nimport routes from \"./dubbo\";\n\nasync function main() {\n  const server = fastify();\n  await server.register(fastifyDubboPlugin, {\n    routes,\n  });\n  server.get(\"/\", (_, reply) => {\n    reply.type(\"text/plain\");\n    reply.send(\"Hello World!\");\n  });\n  await server.listen({ host: \"localhost\", port: 8080 });\n  console.log(\"server is listening at\", server.addresses());\n}\n\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Implementing Protobuf Serialization in Dubbo Python Server\nDESCRIPTION: Shows how to set up a Dubbo Python server with protobuf serialization. It defines a 'sayHello' method handler with custom deserializer and serializer functions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef say_hello(request):\n    print(f\"Received request: {request}\")\n    return greeter_pb2.GreeterReply(message=f\"{request.name} Dubbo!\")\n\n\nif __name__ == \"__main__\":\n    # build a method handler\n    method_handler = RpcMethodHandler.unary(\n        say_hello,\n        request_deserializer=greeter_pb2.GreeterRequest.FromString,\n        response_serializer=greeter_pb2.GreeterReply.SerializeToString,\n    )\n    # build a service handler\n    service_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.proto.Greeter\",\n        method_handlers={\"sayHello\": method_handler},\n    )\n\n    service_config = ServiceConfig(service_handler)\n\n    # start the server\n    server = dubbo.Server(service_config).start()\n\n    input(\"Press Enter to stop the server...\\n\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Protobuf Serialization in Dubbo Python Server\nDESCRIPTION: Shows how to set up a Dubbo Python server with protobuf serialization. It defines a 'sayHello' method handler with custom deserializer and serializer functions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef say_hello(request):\n    print(f\"Received request: {request}\")\n    return greeter_pb2.GreeterReply(message=f\"{request.name} Dubbo!\")\n\n\nif __name__ == \"__main__\":\n    # build a method handler\n    method_handler = RpcMethodHandler.unary(\n        say_hello,\n        request_deserializer=greeter_pb2.GreeterRequest.FromString,\n        response_serializer=greeter_pb2.GreeterReply.SerializeToString,\n    )\n    # build a service handler\n    service_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.proto.Greeter\",\n        method_handlers={\"sayHello\": method_handler},\n    )\n\n    service_config = ServiceConfig(service_handler)\n\n    # start the server\n    server = dubbo.Server(service_config).start()\n\n    input(\"Press Enter to stop the server...\\n\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Point-to-Point Direct Connection in Dubbo\nDESCRIPTION: This snippet demonstrates how to configure a point-to-point direct connection in Dubbo, bypassing the registry center by specifying the target address directly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n...\n\n// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\nReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); \n// 如果点对点直连，可以用reference.setUrl()指定目标地址，设置url后将绕过注册中心，\n// 其中，协议对应provider.setProtocol()的值，端口对应provider.setPort()的值，\n// 路径对应service.setPath()的值，如果未设置path，缺省path为接口名\nreference.setUrl(\"dubbo://10.20.130.230:20880/com.xxx.DemoService\"); \n \n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Check Mode via Spring XML\nDESCRIPTION: Demonstrates setting the serialization check status through Spring XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" serialize-check-status=\"STRICT\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Namespace for Traffic Governance Rules\nDESCRIPTION: XML configuration to specify the Apollo namespace for traffic governance rules. The namespace determines where Dubbo stores and retrieves the traffic governance rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center namespace=\"governance\" address=\"apollo://localhost:8080\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Routes in Dubbo-go-Pixiu using JSON\nDESCRIPTION: This snippet demonstrates how to configure URL-based routing in Pixiu using a JSON configuration file. It shows the structure for mapping a REST endpoint to a Dubbo service, including path parameters, HTTP method specifications, and integration request details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/trie.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nname: server\ndescription: server sample\nresources:\n  - path: '/api/v1/test-dubbo/user/name/:name'\n    type: restful\n    description: user\n    methods:\n      - httpVerb: GET\n        enable: true\n        timeout: 1000ms\n        inboundRequest:\n          requestType: http\n          uri:\n            - name: name\n              required: true\n        integrationRequest:\n          requestType: dubbo\n          mappingParams:\n            - name: uri.name\n              mapTo: 0\n              mapType: \"string\"\n          applicationName: \"UserProvider\"\n          interface: \"com.dubbogo.server.UserService\"\n          method: \"GetUserByName\"\n          group: \"test\"\n          version: 1.0.0\n          clusterName: \"test_dubbo\"\n\n\n```\n\n----------------------------------------\n\nTITLE: Maven Release Commands\nDESCRIPTION: Shell commands for executing Maven release process including installation, deployment, and release preparation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy\n$ mvn release:prepare -Prelease -Darguments=\"-DskipTests\" -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID-DdryRun=true\n$ mvn release:clean\n$ mvn release:prepare -Prelease -Darguments=\"-DskipTests\" -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID -DpushChanges=false\n$ mvn -Prelease release:perform -Darguments=\"-DskipTests\" -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID\n```\n\n----------------------------------------\n\nTITLE: Connecting to Zookeeper with CLI Client\nDESCRIPTION: Command to connect to a running Zookeeper server using the command-line interface client. The command specifies the server address and port to connect to.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bin/zkCli.sh -server 127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Setting QOS Port via JVM Parameters\nDESCRIPTION: Configures the QOS module port through JVM system properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-Ddubbo.application.qos-port=33333\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo REST Service with cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to test the exposed Dubbo REST service by making GET and POST requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:8080/users/1\n{\"id\":1,\"name\":\"username-1\"}\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"id\":1,\"name\":\"Larry Page\"}' http://localhost:8080/users/register\n1\n```\n\n----------------------------------------\n\nTITLE: Registering Shutdown Hook in Spring's AbstractApplicationContext\nDESCRIPTION: Method to register a shutdown hook in Spring's AbstractApplicationContext. This hook is executed when the JVM shuts down, allowing for proper cleanup of resources.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic void registerShutdownHook() {\n\tif (this.shutdownHook == null) {\n\t\t// No shutdown hook registered yet.\n\t\tthis.shutdownHook = new Thread() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tsynchronized (startupShutdownMonitor) {\n\t\t\t\t\tdoClose();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tRuntime.getRuntime().addShutdownHook(this.shutdownHook);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Optimizer in Dubbo Protocol\nDESCRIPTION: XML configuration to specify the SerializationOptimizer implementation class for Kryo serialization, which enables automatic registration of serializable classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/serialization.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\" optimizer=\"org.apache.dubbo.demo.SerializationOptimizerImpl\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Check Mode via Spring XML\nDESCRIPTION: Demonstrates setting the serialization check status through Spring XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" serialize-check-status=\"STRICT\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in Dubbo Protocol\nDESCRIPTION: XML configuration to enable FST serialization in Dubbo RPC by setting the serialization attribute in the dubbo:protocol element.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"fst\"/>\n```\n\n----------------------------------------\n\nTITLE: Server XDS Configuration\nDESCRIPTION: YAML configuration for the server-side Dubbo-go application using XDS protocol for service registry\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    xds:\n      protocol: xds\n      address: istiod.istio-system.svc.cluster.local:15010\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      GreeterServerImpl:\n        interface: \"\" # read from stub\n```\n\n----------------------------------------\n\nTITLE: Enabling Consumer Registration to Nacos (Method 2)\nDESCRIPTION: YAML configuration to enable registration of consumer URLs to Nacos registry by setting register-consumer-url as a separate parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n  registry:\n    address: nacos://localhost:8848\n    parameters.register-consumer-url: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Sample Application in Kubernetes\nDESCRIPTION: Command to deploy a sample Dubbo application with metrics collection enabled.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/prometheus.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml\n```\n\n----------------------------------------\n\nTITLE: Parsing Extension Configuration Files in Dubbo (Java)\nDESCRIPTION: This method reads and parses extension configuration files, loading classes using reflection. It handles comments, key-value pairs, and caches the loaded classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadResource(Map<String, Class<?>> extensionClasses, ClassLoader classLoader,\n                          java.net.URL resourceURL, boolean overridden, String... excludedPackages) {\n    try {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(resourceURL.openStream(), StandardCharsets.UTF_8))) {\n            String line;\n            String clazz = null;\n            while ((line = reader.readLine()) != null) {\n                final int ci = line.indexOf('#');\n                if (ci >= 0) {\n                    line = line.substring(0, ci);\n                }\n                line = line.trim();\n                if (line.length() > 0) {\n                    try {\n                        String name = null;\n                        int i = line.indexOf('=');\n                        if (i > 0) {\n                            name = line.substring(0, i).trim();\n                            clazz = line.substring(i + 1).trim();\n                        } else {\n                            clazz = line;\n                        }\n                        if (StringUtils.isNotEmpty(clazz) && !isExcluded(clazz, excludedPackages)) {\n                            loadClass(extensionClasses, resourceURL, Class.forName(clazz, true, classLoader), name, overridden);\n                        }\n                    } catch (Throwable t) {\n                        IllegalStateException e = new IllegalStateException(\"Failed to load extension class (interface: \" + type + \", class line: \" + line + \") in \" + resourceURL + \", cause: \" + t.getMessage(), t);\n                        exceptions.put(line, e);\n                    }\n                }\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", class file: \" + resourceURL + \") in \" + resourceURL, t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Configuration Class Definition\nDESCRIPTION: Configuration class for Dubbo's distributed tracing functionality with options for enabling/disabling tracing features.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.TracingConfig\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Branch to Forked Repository in Git\nDESCRIPTION: Command for pushing the local development branch to the contributor's forked repository on GitHub. This is done after making changes and before creating a pull request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/new-contributor-guide_dev.md#2025-04-08_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin up-dev-issue#${issue-number}\n```\n\n----------------------------------------\n\nTITLE: Setting Priority for injvm at Consumer and Provider Level\nDESCRIPTION: Configures injvm priority at the consumer and provider level, which makes local calls preferred over remote calls when possible.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer injvm=\"true\" .../>\n<dubbo:provider injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Registry with Full Address in Dubbo\nDESCRIPTION: XML configuration snippet for setting up a multicast registry in Dubbo by specifying the complete multicast address including protocol, IP, and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"multicast://224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in Java\nDESCRIPTION: Demonstrates programmatic configuration to enable Zookeeper as a configuration center in Dubbo using Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n```\n\n----------------------------------------\n\nTITLE: Configuring GreetingService with Dubbo and Zipkin\nDESCRIPTION: XML configuration for exposing GreetingService as a Dubbo service with Zipkin tracing. It includes a reference to HelloService and configures Zipkin tracing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"greeting-service-provider\"/>\n\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<dubbo:protocol name=\"dubbo\" port=\"20881\"/>\n\n<dubbo:reference id=\"helloService\" check=\"false\" interface=\"com.alibaba.dubbo.samples.api.HelloService\" filter=\"tracing\"/>\n\n<bean id=\"greetingService\" class=\"com.alibaba.dubbo.samples.service.greeting.GreetingServiceImpl\">\n    <property name=\"helloService\" ref=\"helloService\"/>\n</bean>\n\n<dubbo:service interface=\"com.alibaba.dubbo.samples.api.GreetingService\" ref=\"greetingService\" filter=\"tracing\"/>\n\n<!-- Zipkin configuration (similar to HelloService) -->\n<bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n    <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n</bean>\n\n<bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n    <property name=\"localServiceName\" value=\"greeting-service\"/>\n    <!-- ... (similar to HelloService configuration) ... -->\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Defining a VirtualService in YAML\nDESCRIPTION: Example of defining a basic VirtualService resource for Dubbo traffic routing. It includes the apiVersion, kind, metadata, and spec sections with hosts and dubbo route configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service with Protocol Buffers\nDESCRIPTION: Defines an ExampleService with Say method using Protocol Buffers IDL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage apache.dubbo.demo.example.v1;\n\nmessage SayRequest {\n  string sentence = 1;\n}\n\nmessage SayResponse {\n  string sentence = 1;\n}\n\nservice ExampleService {\n  rpc Say(SayRequest) returns (SayResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Server with cURL for Dubbo Intercommunication\nDESCRIPTION: This cURL command tests the Go server by sending a POST request to the SayHello endpoint. It verifies that the server is running and responding correctly before proceeding with the Java client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:50052/org.apache.dubbo.sample.Greeter/sayHello\n```\n\n----------------------------------------\n\nTITLE: 配置Apache ShenYu网关的Apache Dubbo插件依赖\nDESCRIPTION: 在ShenYu网关启动前需要引入的Apache Dubbo插件相关依赖配置，包括Dubbo核心依赖和Zookeeper注册中心依赖。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- apache shenyu  apache dubbo plugin start-->\n<dependency>\n    <groupId>org.apache.shenyu</groupId>\n    <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>\n    <version>${project.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>2.7.5</version>\n</dependency>\n<!-- Dubbo zookeeper registry dependency start -->\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-client</artifactId>\n    <version>4.0.1</version>\n    <exclusions>\n        <exclusion>\n            <artifactId>log4j</artifactId>\n            <groupId>log4j</groupId>\n        </exclusion>\n    </exclusions>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>4.0.1</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-recipes</artifactId>\n    <version>4.0.1</version>\n</dependency>\n<!-- Dubbo zookeeper registry dependency end -->\n<!-- apache dubbo plugin end-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing with OpenTelemetry and Zipkin in Dubbo Spring Boot\nDESCRIPTION: Maven dependency configuration to enable Dubbo tracing with OpenTelemetry as the tracer and Zipkin as the export destination for a Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>\n    <version>3.2.1-SNAPSHOT</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Failfast Pattern in Dubbo Cluster\nDESCRIPTION: Implementation of FailfastClusterInvoker that makes only one invocation attempt and immediately throws an exception on failure. Suitable for non-idempotent write operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class FailfastClusterInvoker<T> extends AbstractClusterInvoker<T> {\n\n    @Override\n    public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        checkInvokers(invokers, invocation);\n        Invoker<T> invoker = select(loadbalance, invocation, invokers, null);\n        try {\n            return invoker.invoke(invocation);\n        } catch (Throwable e) {\n            if (e instanceof RpcException && ((RpcException) e).isBiz()) {\n                throw (RpcException) e;\n            }\n            throw new RpcException(..., \"Failfast invoke providers ...\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Prometheus Configuration for Dubbo Admin Integration\nDESCRIPTION: YAML configuration for Prometheus to use Dubbo Admin's service discovery API for finding Dubbo instances to monitor. This approach allows for more advanced service discovery beyond basic Kubernetes annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/prometheus.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'dubbo'\n  http_sd_configs:\n    - url: http://{admin-address}/api/dev/metrics/prometheus\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shutdown Callbacks in Dubbo-go\nDESCRIPTION: Go code example showing how to add custom callback functions that will be executed after the shutdown process completes in Dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/deploy2/graceful_shutdown.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nextension.AddCustomShutdownCallback(func() {\n\t// 用户自定义操作\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty as REST Server in Dubbo XML\nDESCRIPTION: Shows how to configure an embedded Netty server as the REST server implementation in Dubbo configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"netty\"/>\n```\n\n----------------------------------------\n\nTITLE: AbstractMetadataReport Constructor Implementation\nDESCRIPTION: This constructor initializes the base functionality for all metadata report implementations. It handles configuration settings, file-based caching, retry logic, and scheduled reporting. The method sets up file paths, loads properties, configures synchronization behavior, and schedules periodic metadata publishing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n public AbstractMetadataReport(URL reportServerURL) {\n //设置url 如:zookeeper://127.0.0.1:2181/org.apache.dubbo.metadata.report.MetadataReport?application=dubbo-demo-api-provider&client=&port=2181&protocol=zookeeper\n        setUrl(reportServerURL);\n        // Start file save timer\n        //缓存的文件名字\n        //格式为: 用户目录+/.dubbo/dubbo-metadata- + 应用程序名字application + url地址(IP+端口) + 后缀.cache 如下所示\n        ///Users/song/.dubbo/dubbo-metadata-dubbo-demo-api-provider-127.0.0.1-2181.cache\n        String defaultFilename = System.getProperty(USER_HOME) + DUBBO_METADATA +\n            reportServerURL.getApplication() + \"-\" +\n            replace(reportServerURL.getAddress(), \":\", \"-\") + CACHE;\n            //如果用户配置了缓存文件名字则以用户配置为准file\n        String filename = reportServerURL.getParameter(FILE_KEY, defaultFilename);\n        File file = null;\n        //文件名字不为空\n        if (ConfigUtils.isNotEmpty(filename)) {\n            file = new File(filename);\n            //文件和父目录不存在则创建文件目录\n            if (!file.exists() && file.getParentFile() != null && !file.getParentFile().exists()) {\n                if (!file.getParentFile().mkdirs()) {\n                    throw new IllegalArgumentException(\"Invalid service store file \" + file + \", cause: Failed to create directory \" + file.getParentFile() + \"!\");\n                }\n            }\n            // if this file exists, firstly delete it.\n            //还未初始化则已存在的历史文件删除掉\n            if (!initialized.getAndSet(true) && file.exists()) {\n                file.delete();\n            }\n        }\n        //赋值给成员变量后续继续可以用\n        this.file = file;\n        //文件存在则直接加载文件中的内容\n        loadProperties();\n        //sync-report配置的值为同步配置还异步配置,true是同步配置,默认为false为异步配置\n        syncReport = reportServerURL.getParameter(SYNC_REPORT_KEY, false);\n        //重试属性与逻辑也封装了一个类型 创建对象\n        //retry-times重试次数配置 默认为100次\n        //retry-period 重试间隔配置 默认为3000\n        metadataReportRetry = new MetadataReportRetry(reportServerURL.getParameter(RETRY_TIMES_KEY, DEFAULT_METADATA_REPORT_RETRY_TIMES),\n            reportServerURL.getParameter(RETRY_PERIOD_KEY, DEFAULT_METADATA_REPORT_RETRY_PERIOD));\n            \n        // cycle report the data switch\n        //是否定期从元数据中心同步配置\n        //cycle-report配置默认为true\n        if (reportServerURL.getParameter(CYCLE_REPORT_KEY, DEFAULT_METADATA_REPORT_CYCLE_REPORT)) {\n        //开启重试定时器 24个小时间隔从元数据中心同步一次\n            reportTimerScheduler = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"DubboMetadataReportTimer\", true));\n            reportTimerScheduler.scheduleAtFixedRate(this::publishAll, calculateStartTime(), ONE_DAY_IN_MILLISECONDS, TimeUnit.MILLISECONDS);\n        }\n\t\t\n        this.reportMetadata = reportServerURL.getParameter(REPORT_METADATA_KEY, false);\n        this.reportDefinition = reportServerURL.getParameter(REPORT_DEFINITION_KEY, true);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining DeserializingFunction Type in Python\nDESCRIPTION: Type definition for deserialization functions that take bytes data and return any type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# A function that takes an argument of type bytes and returns data of any type\nDeserializingFunction = Callable[[bytes], Any]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shutdown Callbacks in Dubbo-go\nDESCRIPTION: Go code example showing how to add custom callback functions that will be executed after the shutdown process completes in Dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/deploy2/graceful_shutdown.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nextension.AddCustomShutdownCallback(func() {\n\t// 用户自定义操作\n})\n```\n\n----------------------------------------\n\nTITLE: Using AsyncContext for Context Switching in Java\nDESCRIPTION: Demonstrates how to use AsyncContext's signalContextSwitch() method for easier context switching in asynchronous execution.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IRepository Interface in Java\nDESCRIPTION: Defines an interface IRepository for implementing data storage functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface IRepository {\n    void save(String data);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zookeeper nodes in ZookeeperClient\nDESCRIPTION: This method creates nodes in Zookeeper, handling both the parent path creation and determining whether to create ephemeral or persistent nodes based on the ephemeral parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic void create(String path, boolean ephemeral) {\n    if (!ephemeral) {\n        // 如果要创建的节点类型非临时节点，那么这里要检测节点是否存在\n        if (checkExists(path)) {\n            return;\n        }\n    }\n    int i = path.lastIndexOf('/');\n    if (i > 0) {\n        // 递归创建上一级路径\n        create(path.substring(0, i), false);\n    }\n    \n    // 根据 ephemeral 的值创建临时或持久节点\n    if (ephemeral) {\n        createEphemeral(path);\n    } else {\n        createPersistent(path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 配置手动注册\nDESCRIPTION: 通过设置 delay = -1 和 manual-register = true 来禁止自动注册,实现手动控制服务上线。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: -1\n  application:\n    manual-register: true\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo-Go-Pixiu with Docker\nDESCRIPTION: Docker commands for pulling and running Dubbo-Go-Pixiu, along with instructions for starting the provider and running tests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/quickstart.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull phial3/dubbo-go-pixiu:latest\n\ndocker run --name pixiuname -p 8883:8883 \\\n    -v /yourpath/conf.yaml:/etc/pixiu/conf.yaml \\\n    -v /yourpath/log.yml:/etc/pixiu/log.yml \\\n    apache/dubbo-go-pixiu:latest\n\n# Start provider that uses zookeeper as the registration center first\ncd samples/dubbogo/simple/resolve/server\n\n# Add required environment variables, specifying the location of the provider's configuration file\nexport DUBBO_GO_CONFIG_PATH=\"../profiles/dev/server.yml\"\nexport APP_LOG_CONF_FILE=\"../profiles/dev/log.yml\"\n\n# Start provider\ngo run server.go user.go\n\n# Go to the test directory and start the test example\ncd samples/dubbogo/simple/resolve/test\n\ngo test  pixiu_test.go\n```\n\n----------------------------------------\n\nTITLE: Configuring the Reference and Creating a Proxy in Dubbo-Go\nDESCRIPTION: This snippet shows how Dubbo-Go configures a reference to a service, obtains the invoker, and creates a proxy. It demonstrates the difference in handling a single URL versus multiple URLs with cluster strategies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n    if len(c.urls) == 1 {\n  // 这一步访问到registry/protocol/protocol.go registryProtocol.Refer\n  c.invoker = extension.GetProtocol(c.urls[0].Protocol).Refer(*c.urls[0])\n  // （一）拿到了真实的invokers\n    } else {\n  // 如果有多个注册中心，即有多个invoker,则采取集群策略\n  invokers := make([]protocol.Invoker, 0, len(c.urls))\n  ...\n  cluster := extension.GetCluster(hitClu)\n  // If 'zone-aware' policy select, the invoker wrap sequence would be:\n  // ZoneAwareClusterInvoker(StaticDirectory) ->\n  // FailoverClusterInvoker(RegistryDirectory, routing happens here) -> Invoker\n  c.invoker = cluster.Join(directory.NewStaticDirectory(invokers))\n    }\n    // （二）create proxy，为函数配置代理\n    if c.Async {\n  callback := GetCallback(c.id)\n  c.pxy = extension.GetProxyFactory(consumerConfig.ProxyFactory).GetAsyncProxy(c.invoker, callback, cfgURL)\n    } else {\n  // 这里c.invoker已经是目的addr了\n  c.pxy = extension.GetProxyFactory(consumerConfig.ProxyFactory).GetProxy(c.invoker, cfgURL)\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Security Check in Spring XML\nDESCRIPTION: XML configuration example for setting the serialization security check status in a Dubbo application to protect against insecure deserialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" serialize-check-status=\"STRICT\"/>\n```\n\n----------------------------------------\n\nTITLE: Decoding RPC Invocation in DecodeableRpcInvocation (Java)\nDESCRIPTION: This snippet shows the decode method in DecodeableRpcInvocation class. It deserializes various RPC invocation details such as Dubbo version, path, method name, parameter types, and arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic class DecodeableRpcInvocation extends RpcInvocation implements Codec, Decodeable {\n    \n\t@Override\n    public Object decode(Channel channel, InputStream input) throws IOException {\n        ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType)\n                .deserialize(channel.getUrl(), input);\n\n        // 通过反序列化得到 dubbo version，并保存到 attachments 变量中\n        String dubboVersion = in.readUTF();\n        request.setVersion(dubboVersion);\n        setAttachment(Constants.DUBBO_VERSION_KEY, dubboVersion);\n\n        // 通过反序列化得到 path，version，并保存到 attachments 变量中\n        setAttachment(Constants.PATH_KEY, in.readUTF());\n        setAttachment(Constants.VERSION_KEY, in.readUTF());\n\n        // 通过反序列化得到调用方法名\n        setMethodName(in.readUTF());\n        try {\n            Object[] args;\n            Class<?>[] pts;\n            // 通过反序列化得到参数类型字符串，比如 Ljava/lang/String;\n            String desc = in.readUTF();\n            if (desc.length() == 0) {\n                pts = DubboCodec.EMPTY_CLASS_ARRAY;\n                args = DubboCodec.EMPTY_OBJECT_ARRAY;\n            } else {\n                // 将 desc 解析为参数类型数组\n                pts = ReflectUtils.desc2classArray(desc);\n                args = new Object[pts.length];\n                for (int i = 0; i < args.length; i++) {\n                    try {\n                        // 解析运行时参数\n                        args[i] = in.readObject(pts[i]);\n                    } catch (Exception e) {\n                        if (log.isWarnEnabled()) {\n                            log.warn(\"Decode argument failed: \" + e.getMessage(), e);\n                        }\n                    }\n                }\n            }\n            \n            // 设置参数类型数组\n            setParameterTypes(pts);\n\n            // 通过反序列化得到原 attachment 的内容\n            Map<String, String> map = (Map<String, String>) in.readObject(Map.class);\n            if (map != null && map.size() > 0) {\n                Map<String, String> attachment = getAttachments();\n                if (attachment == null) {\n                    attachment = new HashMap<String, String>();\n                }\n                // 将 map 与当前对象中的 attachment 集合进行融合\n                attachment.putAll(map);\n                setAttachments(attachment);\n            }\n            \n            // 对 callback 类型的参数进行处理\n            for (int i = 0; i < args.length; i++) {\n                args[i] = decodeInvocationArgument(channel, this, pts, i, args[i]);\n            }\n\n            // 设置参数列表\n            setArguments(args);\n\n        } catch (ClassNotFoundException e) {\n            throw new IOException(StringUtils.toString(\"Read invocation data failed.\", e));\n        } finally {\n            if (in instanceof Cleanable) {\n                ((Cleanable) in).cleanup();\n            }\n        }\n        return this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GZIP Compression Interceptor\nDESCRIPTION: WriterInterceptor implementation that adds GZIP compression to the output stream.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\npublic class GZIPWriterInterceptor implements WriterInterceptor {\n \n    @Override\n    public void aroundWriteTo(WriterInterceptorContext context)\n                    throws IOException, WebApplicationException {\n        OutputStream outputStream = context.getOutputStream();\n        context.setOutputStream(new GZIPOutputStream(outputStream));\n        context.proceed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dubbo-Go Packages\nDESCRIPTION: Imports necessary Dubbo-Go packages for service implementation including protocols, registries, and filters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\thessian \"github.com/apache/dubbo-go-hessian2\"\n\t_ \"github.com/apache/dubbo-go/cluster/cluster_impl\"\n\t_ \"github.com/apache/dubbo-go/cluster/loadbalance\"\n\t\"github.com/apache/dubbo-go/common/logger\"\n\t_ \"github.com/apache/dubbo-go/common/proxy/proxy_factory\"\n\t\"github.com/apache/dubbo-go/config\"\n\t_ \"github.com/apache/dubbo-go/filter/filter_impl\"\n\t_ \"github.com/apache/dubbo-go/protocol/dubbo\"\n\t_ \"github.com/apache/dubbo-go/registry/protocol\"\n\t_ \"github.com/apache/dubbo-go/registry/zookeeper\"\n)\n```\n\n----------------------------------------\n\nTITLE: Pixiu HTTP Proxy Configuration\nDESCRIPTION: YAML configuration for setting up Pixiu as an HTTP proxy. Defines listener settings, routing rules, and cluster configuration for forwarding HTTP requests to a backend server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\" # Use HTTP Listener\n      address:\n        socket_address:\n          address: \"0.0.0.0\" # Set the listening address to 0.0.0.0\n          port: 8888  # Set port to 8888\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager  # Set NetworkFilter to httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/user\"    # Set routing rules to forward requests with /user prefix to the cluster named user\n                      route:\n                        cluster: \"user\"\n                        cluster_not_found_response_code: 505\n                http_filters:\n                  - name: dgp.filter.http.httpproxy  # Use dgp.filter.http.httpproxy for forwarding\n                    config:\n\n  clusters:\n    - name: \"user\"  # Configure a cluster named user with one instance at address 127.0.0.1:1314\n      lb_policy: \"random\" \n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry for Individual Services in Dubbo Go\nDESCRIPTION: This snippet demonstrates how to specify which registration center a particular service should register to, using the WithRegistryIDs option when registering a service handler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsrv, _ := ins.NewServer()\n\ngreet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}, server.WithRegistryIDs([]string{\"zookeeper\"}))\n```\n\n----------------------------------------\n\nTITLE: Loading Registry Center URLs in Dubbo\nDESCRIPTION: The loadRegistries method loads and processes registry center configurations, converting them into URLs. It handles address validation, parameter appending, and URL parsing, eventually returning a list of registry URLs that meet specific conditions for service export or subscription.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprotected List<URL> loadRegistries(boolean provider) {\n    // 检测是否存在注册中心配置类，不存在则抛出异常\n    checkRegistry();\n    List<URL> registryList = new ArrayList<URL>();\n    if (registries != null && !registries.isEmpty()) {\n        for (RegistryConfig config : registries) {\n            String address = config.getAddress();\n            if (address == null || address.length() == 0) {\n                // 若 address 为空，则将其设为 0.0.0.0\n                address = Constants.ANYHOST_VALUE;\n            }\n\n            // 从系统属性中加载注册中心地址\n            String sysaddress = System.getProperty(\"dubbo.registry.address\");\n            if (sysaddress != null && sysaddress.length() > 0) {\n                address = sysaddress;\n            }\n            // 检测 address 是否合法\n            if (address.length() > 0 && !RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) {\n                Map<String, String> map = new HashMap<String, String>();\n                // 添加 ApplicationConfig 中的字段信息到 map 中\n                appendParameters(map, application);\n                // 添加 RegistryConfig 字段信息到 map 中\n                appendParameters(map, config);\n                \n                // 添加 path、pid，protocol 等信息到 map 中\n                map.put(\"path\", RegistryService.class.getName());\n                map.put(\"dubbo\", Version.getProtocolVersion());\n                map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));\n                if (ConfigUtils.getPid() > 0) {\n                    map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));\n                }\n                if (!map.containsKey(\"protocol\")) {\n                    if (ExtensionLoader.getExtensionLoader(RegistryFactory.class).hasExtension(\"remote\")) {\n                        map.put(\"protocol\", \"remote\");\n                    } else {\n                        map.put(\"protocol\", \"dubbo\");\n                    }\n                }\n\n                // 解析得到 URL 列表，address 可能包含多个注册中心 ip，\n                // 因此解析得到的是一个 URL 列表\n                List<URL> urls = UrlUtils.parseURLs(address, map);\n                for (URL url : urls) {\n                    url = url.addParameter(Constants.REGISTRY_KEY, url.getProtocol());\n                    // 将 URL 协议头设置为 registry\n                    url = url.setProtocol(Constants.REGISTRY_PROTOCOL);\n                    // 通过判断条件，决定是否添加 url 到 registryList 中，条件如下：\n                    // (服务提供者 && register = true 或 null) \n                    //    || (非服务提供者 && subscribe = true 或 null)\n                    if ((provider && url.getParameter(Constants.REGISTER_KEY, true))\n                            || (!provider && url.getParameter(Constants.SUBSCRIBE_KEY, true))) {\n                        registryList.add(url);\n                    }\n                }\n            }\n        }\n    }\n    return registryList;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level in Dubbo\nDESCRIPTION: Demonstrates how to use the 'switchLogLevel' command to change the log level. Valid levels are ALL, TRACE, DEBUG, INFO, WARN, ERROR, OFF.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/logger-management.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> switchLogLevel WARN\n```\n\n----------------------------------------\n\nTITLE: Implementing the Invoke Method for Failover Cluster Strategy in Dubbo-Go\nDESCRIPTION: This snippet shows the Invoke method implementation for the failover cluster strategy. It demonstrates how the strategy selects invokers from the directory, applies load balancing, and implements retry logic when invocations fail.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Invoker 函数\nfunc (invoker *failoverClusterInvoker) Invoke(ctx context.Context, invocation protocol.Invocation) protocol.Result {\n    ...\n    //调用List方法拿到directory缓存的所有invokers\n    invokers := invoker.directory.List(invocation)\n    if err := invoker.checkInvokers(invokers, invocation); err != nil {// 检查是否可以实现调用\n  return &protocol.RPCResult{Err: err}\n    }\n    // 获取来自用户方向传入的\n    methodName := invocation.MethodName()\n    retries := getRetries(invokers, methodName)\n    loadBalance := getLoadBalance(invokers[0], invocation)\n    for i := 0; i <= retries; i++ {\n  // 重要！这里是集群策略的体现，失败后重试！\n  //Reselect before retry to avoid a change of candidate `invokers`.\n  //NOTE: if `invokers` changed, then `invoked` also lose accuracy.\n  if i > 0 {\n    if err := invoker.checkWhetherDestroyed(); err != nil {\n    return &protocol.RPCResult{Err: err}\n    }\n    invokers = invoker.directory.List(invocation)\n    if err := invoker.checkInvokers(invokers, invocation); err != nil {\n    return &protocol.RPCResult{Err: err}\n    }\n  }\n  // 这里是负载均衡策略的体现！选择特定ivk进行调用。\n  ivk := invoker.doSelect(loadBalance, invocation, invokers, invoked)\n  if ivk == nil {\n    continue\n  }\n  invoked = append(invoked, ivk)\n  //DO INVOKE\n  result = ivk.Invoke(ctx, invocation)\n  if result.Error() != nil {\n    providers = append(providers, ivk.GetUrl().Key())\n    continue\n  }\n  return result\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in Python\nDESCRIPTION: Client implementation showing service stub creation and remote method invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport dubbo\nfrom dubbo.configs import ReferenceConfig\n\nclass UnaryServiceStub:\n    def __init__(self, client: dubbo.Client):\n        self.unary = client.unary(method_name=\"unary\")\n\n    def say_hello(self, message: bytes) -> bytes:\n        return self.unary(message)\n\nif __name__ == \"__main__\":\n    # Create a client\n    reference_config = ReferenceConfig.from_url(\n        \"tri://127.0.0.1:50051/org.apache.dubbo.samples.HelloWorld\"\n    )\n    dubbo_client = dubbo.Client(reference_config)\n    unary_service_stub = UnaryServiceStub(dubbo_client)\n\n    # Call the remote method\n    result = unary_service_stub.say_hello(b\"Hello from client\")\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry with Backup Addresses\nDESCRIPTION: Configures the Etcd registry with a primary address and backup addresses using the 'backup' parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/etcd.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"etcd://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Viewing Application-level Metadata in Zookeeper\nDESCRIPTION: Example of using zkCli to view application-level metadata for a demo provider in Zookeeper. Shows the complete JSON metadata including all services provided by the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_14\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 33] get /dubbo/metadata/demo-provider/da3be833baa2088c5f6776fb7ab1a436\n{\"app\":\"demo-provider\",\"revision\":\"da3be833baa2088c5f6776fb7ab1a436\",\"services\":{\"org.apache.dubbo.demo.DemoService:dubbo\":{\"name\":\"org.apache.dubbo.demo.DemoService\",\"protocol\":\"dubbo\",\"path\":\"org.apache.dubbo.demo.DemoService\",\"params\":{\"side\":\"provider\",\"release\":\"\",\"methods\":\"sayHello,sayHelloAsync\",\"deprecated\":\"false\",\"dubbo\":\"2.0.2\",\"pid\":\"38298\",\"interface\":\"org.apache.dubbo.demo.DemoService\",\"service-name-mapping\":\"true\",\"timeout\":\"3000\",\"generic\":\"false\",\"metadata-type\":\"remote\",\"delay\":\"5000\",\"application\":\"demo-provider\",\"dynamic\":\"true\",\"REGISTRY_CLUSTER\":\"registry1\",\"anyhost\":\"true\",\"timestamp\":\"1626887121829\"}},\"org.apache.dubbo.demo.RestDemoService:1.0.0:rest\":{\"name\":\"org.apache.dubbo.demo.RestDemoService\",\"version\":\"1.0.0\",\"protocol\":\"rest\",\"path\":\"org.apache.dubbo.demo.RestDemoService\",\"params\":{\"side\":\"provider\",\"release\":\"\",\"methods\":\"getRemoteApplicationName,sayHello,hello,error\",\"deprecated\":\"false\",\"dubbo\":\"2.0.2\",\"pid\":\"38298\",\"interface\":\"org.apache.dubbo.demo.RestDemoService\",\"service-name-mapping\":\"true\",\"version\":\"1.0.0\",\"timeout\":\"5000\",\"generic\":\"false\",\"revision\":\"1.0.0\",\"metadata-type\":\"remote\",\"delay\":\"5000\",\"application\":\"demo-provider\",\"dynamic\":\"true\",\"REGISTRY_CLUSTER\":\"registry1\",\"anyhost\":\"true\",\"timestamp\":\"1626887120943\"}}}}\ncZxid = 0x25b336\nctime = Thu Jul 22 01:05:55 CST 2021\nmZxid = 0x25b336\nmtime = Thu Jul 22 01:05:55 CST 2021\npZxid = 0x25b336\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 1286\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Enabling Nacos Configuration Center in Java\nDESCRIPTION: Java code to programmatically configure Nacos as a configuration center for Dubbo, creating and setting up a ConfigCenterConfig object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"nacos://127.0.0.1:8848\");\n```\n\n----------------------------------------\n\nTITLE: Referencing MonitorFactory Interface in Java\nDESCRIPTION: Identifies the MonitorFactory interface in the org.apache.dubbo.monitor package, which is used for implementing custom monitoring statistics strategies in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/14.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.dubbo.monitor.MonitorFactory\n```\n\n----------------------------------------\n\nTITLE: Zookeeper Metadata Path Structure without Version or Group\nDESCRIPTION: Shows the simplified path structure used in Zookeeper when version or group is not specified in Dubbo configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nProvider: /dubbo/metadata/{interface name}/provider/{application name} \nConsumer: /dubbo/metadata/{interface name}/consumer/{application name}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example without Wrapper Object\nDESCRIPTION: Shows the raw JSON format returned when returning a primitive type directly without a wrapper object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n1001\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Metrics Sample Application\nDESCRIPTION: Kubernetes command to deploy a sample Dubbo application with metrics collection enabled from the dubbo-samples GitHub repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/prometheus.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml\n```\n\n----------------------------------------\n\nTITLE: Destroying Unused Invokers in Dubbo Registry Directory\nDESCRIPTION: This method cleans up invokers that are no longer needed after a refresh operation. It compares old and new invoker maps, identifies invokers that should be removed, and properly destroys them to prevent resource leaks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate void destroyUnusedInvokers(Map<String, Invoker<T>> oldUrlInvokerMap, Map<String, Invoker<T>> newUrlInvokerMap) {\n    if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) {\n        destroyAllInvokers();\n        return;\n    }\n   \n    List<String> deleted = null;\n    if (oldUrlInvokerMap != null) {\n        // 获取新生成的 Invoker 列表\n        Collection<Invoker<T>> newInvokers = newUrlInvokerMap.values();\n        // 遍历老的 <url, Invoker> 映射表\n        for (Map.Entry<String, Invoker<T>> entry : oldUrlInvokerMap.entrySet()) {\n            // 检测 newInvokers 中是否包含老的 Invoker\n            if (!newInvokers.contains(entry.getValue())) {\n                if (deleted == null) {\n                    deleted = new ArrayList<String>();\n                }\n                // 若不包含，则将老的 Invoker 对应的 url 存入 deleted 列表中\n                deleted.add(entry.getKey());\n            }\n        }\n    }\n\n    if (deleted != null) {\n        // 遍历 deleted 集合，并到老的 <url, Invoker> 映射关系表查出 Invoker，销毁之\n        for (String url : deleted) {\n            if (url != null) {\n                // 从 oldUrlInvokerMap 中移除 url 对应的 Invoker\n                Invoker<T> invoker = oldUrlInvokerMap.remove(url);\n                if (invoker != null) {\n                    try {\n                        // 销毁 Invoker\n                        invoker.destroy();\n                    } catch (Exception e) {\n                        logger.warn(\"destroy invoker...\");\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Classes from Configuration Files in Dubbo (Java)\nDESCRIPTION: This method loads extension classes from various configuration directories using different loading strategies. It caches the default SPI extension name and processes both Apache and Alibaba package structures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Class<?>> loadExtensionClasses() {\n    cacheDefaultExtensionName();\n\n    Map<String, Class<?>> extensionClasses = new HashMap<>();\n    \n    for (LoadingStrategy strategy : strategies) {\n        loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());\n        loadDirectory(extensionClasses, strategy.directory(), type.getName().replace(\"org.apache\", \"com.alibaba\"), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());\n    }\n\n    return extensionClasses;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with Java Annotations\nDESCRIPTION: This Java configuration class sets up a Dubbo provider application with isolated executor management, custom thread pools, and exposes services using both Dubbo and Tri protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.config.spring.isolation.spring.annotation.provider\")\npublic class ProviderConfiguration {\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n        return registryConfig;\n    }\n\n    // NOTE: we need config executor-management-mode=\"isolation\"\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig(\"provider-app\");\n\n        applicationConfig.setExecutorManagementMode(\"isolation\");\n        return applicationConfig;\n    }\n\n    // expose services with dubbo protocol\n    @Bean\n    public ProtocolConfig dubbo() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo\");\n        return protocolConfig;\n    }\n\n    // expose services with tri protocol\n    @Bean\n    public ProtocolConfig tri() {\n        ProtocolConfig protocolConfig = new ProtocolConfig(\"tri\");\n        return protocolConfig;\n    }\n\n    // customized thread pool\n    @Bean(\"executor-demo-service\")\n    public Executor demoServiceExecutor() {\n        return new DemoServiceExecutor();\n    }\n\n    // customized thread pool\n    @Bean(\"executor-hello-service\")\n    public Executor helloServiceExecutor() {\n        return new HelloServiceExecutor();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Protocol Buffer定义Dubbo服务\nDESCRIPTION: 使用Protocol Buffer IDL定义RPC服务、请求和响应消息。这个例子定义了一个名为ExampleService的服务，包含一个Say方法及其请求和响应类型。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage apache.dubbo.demo.example.v1;\n\nmessage SayRequest {\n  string sentence = 1;\n}\n\nmessage SayResponse {\n  string sentence = 1;\n}\n\nservice ExampleService {\n  rpc Say(SayRequest) returns (SayResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Client Configuration in YAML\nDESCRIPTION: Defines the client-side configuration for dubbo-go, including registry settings and service references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nregistries :\n  \"demoZk\":\n    protocol: \"zookeeper\"\n    timeout : \"3s\"\n    address: \"127.0.0.1:2181\"\n    username: \"\"\n    password: \"\"\nreferences:\n  \"UserProvider\":\n    registry: \"demoZk\"\n    protocol : \"dubbo\"\n    interface : \"com.ikurento.user.UserProvider\"\n    cluster: \"failover\"\n    methods :\n    - name: \"GetUser\"\n      retries: 3\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Interface with Asynchronous Overload in Java\nDESCRIPTION: This example shows how to add an asynchronous overload method to an existing synchronous Dubbo service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic interface GreetingsService {\n    String sayHi(String name);\n\n    default CompletableFuture<String> sayHi(String name, boolean isAsync) {\n      return CompletableFuture.completedFuture(sayHello(name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Apache Dubbo Dependencies in Maven XML\nDESCRIPTION: Shows the new org.apache.dubbo:dubbo dependency configuration with proper dependency management using BOM pattern for version 3.3.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n    <dubbo.version>3.3.0</dubbo.version>\n</properties>\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-dependencies-bom</artifactId>\n            <version>${dubbo.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Using cd Command in Dubbo QoS\nDESCRIPTION: Sets the service context for all subsequent commands to target a specific service. This can be used via Telnet or HTTP interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/qos-list.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd org.demo.DemoService\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Consumer in Java\nDESCRIPTION: This code snippet shows how to configure TLS for a Dubbo Consumer. It includes setting up trust certificates and, in the case of mutual TLS, client certificates and private keys.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/tls.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (!mutualTls) {}\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n} else {\n    sslConfig.setClientTrustCertCollectionPath(args[0]);\n    sslConfig.setClientKeyCertChainPath(args[1]);\n    sslConfig.setClientPrivateKeyPath(args[2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio with custom Pilot image\nDESCRIPTION: Uses istioctl to deploy Istio with a custom Pilot image for debugging purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nout/linux_amd64/istioctl --set .values.pilot.image=bobtthp/pilot:debug install\n```\n\n----------------------------------------\n\nTITLE: 全局配置延迟注册\nDESCRIPTION: 在 YAML 配置文件中设置全局延迟注册时间为 5 秒。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    delay: 5000\n```\n\n----------------------------------------\n\nTITLE: Deploying Nacos Server in Kubernetes\nDESCRIPTION: Kubernetes configuration for deploying Nacos server with standalone mode and exposing it as a K8s service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-higress.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nacos-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nacos-server\n  template:\n    metadata:\n      labels:\n        app: nacos-server\n    spec:\n      containers:\n      - env:\n        - name: MODE\n          value: standalone\n        image: nacos/nacos-server:v2.2.0\n        imagePullPolicy: Always\n        name: nacos-server\n        ports:\n          - containerPort: 8848\n            name: server\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nacos-server\nspec:\n  ports:\n  - port: 8848\n    name: server\n    protocol: TCP\n    targetPort: 8848\n  selector:\n    app: nacos-server\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Chart.yaml\nDESCRIPTION: Modifies the Chart.yaml file to specify the current application name as 'dubbo-go-client', which will create a service with that name during deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nname: dubbo-go-client\ndescription: dubbo-go-client\n```\n\n----------------------------------------\n\nTITLE: Defining a Dubbo Service Interface\nDESCRIPTION: Java interface definition for a Dubbo service using the dubbo protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Method in Dubbo XML\nDESCRIPTION: XML configuration to enable asynchronous calls for a specific method in Dubbo 2.6.x.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"fooService\" interface=\"com.alibaba.foo.FooService\">\n      <dubbo:method name=\"findFoo\" async=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Server-Side Service Implementation in Java\nDESCRIPTION: The UserServiceImpl class implements the UserService interface with business logic to find users by ID. It includes validation that throws exceptions for invalid IDs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Service(version = \"1.0.0\")\npublic class UserServiceImpl implements UserService {\n\t@Override\n\tpublic User findUser(int id) {\n\t\tif (id < 1) {\n\t\t\tthrow new IllegalArgumentException(\"user id < 1, id: \" + id);\n\t\t}\n\t\tfor (User user : users) {\n\t\t\tif (user.getId() == id) {\n\t\t\t\treturn user;\n\t\t\t}\n\t\t}\n\t\tthrow new RuntimeException(\"Can not find user, id: \" + id);\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Port Multi-Protocol in Dubbo\nDESCRIPTION: This YAML configuration shows how to set up single-port multi-protocol support in Dubbo, allowing both dubbo and tri protocols on the same port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   name: dubbo\n   ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Port Multi-Protocol in Dubbo\nDESCRIPTION: This YAML configuration shows how to set up single-port multi-protocol support in Dubbo, allowing both dubbo and tri protocols on the same port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   name: dubbo\n   ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo Annotations for REST Service Configuration in Java\nDESCRIPTION: Demonstrates how to use Dubbo and JAX-RS annotations to configure REST services without XML. This provides a more concise and code-centric approach to service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n@Service(protocol = \"rest\")\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user\n        userRepository.save(user);\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Dependencies - OpenTelemetry\nDESCRIPTION: Maven dependency configuration for OpenTelemetry-based tracing with Zipkin exporter\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/zipkin.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Port in Properties File\nDESCRIPTION: Sets the QOS module port through dubbo.properties file. The default port is 22222, but can be customized.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qos-port=33333\n```\n\n----------------------------------------\n\nTITLE: 使用cURL访问Dubbo服务\nDESCRIPTION: 通过HTTP POST请求访问Dubbo服务。这个例子展示了如何使用cURL发送JSON格式的请求，并包含了必要的Dubbo服务元数据头。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \\\n --header 'Content-Type: application/json' \\\n --header 'TRI-Service-Version: 1.0.0' \\\n --header 'TRI-Service-group: dubbo' \\\n --data '{\"sentence\": \"Hello World\"}' \\\n http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer service definition showing different types of streaming methods including unary, server streaming, client streaming and bidirectional streaming.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n  rpc GreetStream(stream GreetStreamRequest) returns (stream GreetStreamResponse) {}\n  rpc GreetClientStream(stream GreetClientStreamRequest) returns (GreetClientStreamResponse) {}\n  rpc GreetServerStream(GreetServerStreamRequest) returns (stream GreetServerStreamResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring scanBasePackages in @EnableDubbo Annotation for Java\nDESCRIPTION: The issue occurs when the scanBasePackages parameter in the @EnableDubbo annotation is not configured. To resolve this error, you need to properly set the scanBasePackages value to specify which packages Dubbo should scan for services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/5/29.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@EnableDubbo(scanBasePackages = \"com.example.package\")\n```\n\n----------------------------------------\n\nTITLE: Setting Service Discovery Migration Mode via System Property\nDESCRIPTION: Java code to configure the service discovery migration mode through system property for all references in a Dubbo 3.0 consumer application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-samples.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSystem.setProperty(\"dubbo.application.service-discovery.migration\", \"APPLICATION_FIRST\");\n```\n\n----------------------------------------\n\nTITLE: Implementing MysqlRepository in Java\nDESCRIPTION: Provides an implementation of IRepository for MySQL storage.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MysqlRepository implements IRepository {\n    public void save(String data) {\n        System.out.println(\"Save \" + data + \" to Mysql\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Router Snapshot Collection in Dubbo\nDESCRIPTION: The disableRouterSnapshot command deactivates router result collection mode for specified services. The serviceName parameter supports pattern matching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/router-snapshot.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>disableRouterSnapshot com.dubbo.*\nOK. Found service count: 1\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Setting Call-Level Retry Count in Dubbo-Go\nDESCRIPTION: Specifies the retry count at the individual call level with the highest priority, overriding both client and service level configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/retry.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"}, client.WithCallRetries(6))\n```\n\n----------------------------------------\n\nTITLE: Verifying Dubbo Framework Readiness\nDESCRIPTION: The 'ready' command checks if the current Dubbo framework can provide services normally. It returns a boolean value indicating the readiness status, which may be temporarily offline.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/probe.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>ready\ntrue\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtensionLoader Dependency Injection in Dubbo\nDESCRIPTION: Demonstrates how to use ExtensionLoader with different model scopes to get adaptive extensions of Protocol class. Shows the SPI annotation with framework scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/model.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nModuleModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  \nApplicationModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  \nFrameworkModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  \n\n@SPI(scope = FRAMEWORK)  \npublic interface Protocol {  \n}  \n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Report in Dubbo\nDESCRIPTION: XML configuration for setting up Nacos as a metadata report center in Dubbo. Specifies the connection address for the Nacos server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"nacos://127.0.0.1:8848\"/>\n```\n\n----------------------------------------\n\nTITLE: Exporting Providers in Dubbo REST Protocol\nDESCRIPTION: This method exports service providers in Dubbo's REST protocol. It resolves service metadata, adds path mappings for the invoker, and creates an exporter object that manages the service's lifecycle. When unexporting, it cleans up resources.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\n        URL url = invoker.getUrl();\n        final String uri = serviceKey(url);\n        Exporter<T> exporter = (Exporter<T>) exporterMap.get(uri);\n        if (exporter != null) {\n            // When modifying the configuration through override, you need to re-expose the newly modified service.\n            if (Objects.equals(exporter.getInvoker().getUrl(), invoker.getUrl())) {\n                return exporter;\n            }\n        }\n\n        // TODO addAll metadataMap to RPCInvocationBuilder metadataMap\n        Map<PathMatcher, RestMethodMetadata> metadataMap = MetadataResolver.resolveProviderServiceMetadata(url.getServiceModel().getProxyObject().getClass(),url);\n\n        PathAndInvokerMapper.addPathAndInvoker(metadataMap, invoker);\n\n        final Runnable runnable = doExport(proxyFactory.getProxy(invoker, true), invoker.getInterface(), invoker.getUrl());\n        exporter = new AbstractExporter<T>(invoker) {\n            @Override\n            public void afterUnExport() {\n                exporterMap.remove(uri);\n                if (runnable != null) {\n                    try {\n                        runnable.run();\n                    } catch (Throwable t) {\n                        logger.warn(PROTOCOL_UNSUPPORTED, \"\", \"\", t.getMessage(), t);\n                    }\n                }\n            }\n        };\n        exporterMap.put(uri, exporter);\n        return exporter;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum HTTP Connections for Tomcat REST Server in Dubbo XML\nDESCRIPTION: Demonstrates how to limit the maximum number of concurrent HTTP connections to protect REST server from being overloaded.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" accepts=\"500\" server=\"tomcat/>\n```\n\n----------------------------------------\n\nTITLE: Taking a Service Offline via QoS\nDESCRIPTION: This snippet shows how to use the 'offline' command to dynamically withdraw a service in Dubbo QoS.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndubbo>offline org.apache.dubbo.demo.provider.DemoService\nOK\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Services for Version 1 Routing in Istio\nDESCRIPTION: This command applies virtual services to route all traffic to v1 of each microservice in the Bookinfo application using Istio's traffic management features.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Calculating remeasureStartUs in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the start time for the next reset of the window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/c7da904b9a4c890456499b09d01938d3.svg)\n```\n\n----------------------------------------\n\nTITLE: Adding Consul Configuration Center Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the dependency for the Consul configuration center extension in a Maven project file. It specifies the group ID, artifact ID, and version of the required library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/others.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-configcenter-consul</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: 在XML中关闭特定服务的启动检查\nDESCRIPTION: 通过在dubbo:reference标签中设置check=\"false\"来关闭某个特定服务的启动时检查。这样即使该服务没有提供者也不会报错。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/preflight-check.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" check=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Java interface definition for the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Fastjson in Dubbo\nDESCRIPTION: Maven dependencies required to enable Fastjson serialization in a Dubbo application. Includes both the Dubbo Fastjson serialization extension and the core Fastjson library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-fastjson</artifactId>\n      <version>3.3.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>fastjson</artifactId>\n        <version>1.2.83</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Removing Application Route Rules in Istio\nDESCRIPTION: This command removes the previously applied route rules for the Bookinfo application, cleaning up the Istio configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in Dubbo (Java)\nDESCRIPTION: Java code to programmatically enable Zookeeper as the configuration center for Dubbo. It creates a ConfigCenterConfig object and sets the Zookeeper address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n```\n\n----------------------------------------\n\nTITLE: Sample Provider Metadata JSON\nDESCRIPTION: Example JSON structure of metadata stored for a Dubbo provider service, including parameters and method information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n \"parameters\": {\n  \"side\": \"provider\",\n  \"methods\": \"sayHello\",\n  \"dubbo\": \"2.0.2\",\n  \"threads\": \"100\",\n  \"interface\": \"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\",\n  \"threadpool\": \"fixed\",\n  \"version\": \"1.1.1\",\n  \"generic\": \"false\",\n  \"revision\": \"1.1.1\",\n  \"valid\": \"true\",\n  \"application\": \"metadatareport-configcenter-provider\",\n  \"default.timeout\": \"5000\",\n  \"group\": \"d-test\",\n  \"anyhost\": \"true\"\n },\n \"canonicalName\": \"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\",\n \"codeSource\": \"file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/\",\n \"methods\": [{\n  \"name\": \"sayHello\",\n  \"parameterTypes\": [\"java.lang.String\"],\n  \"returnType\": \"java.lang.String\"\n }],\n \"types\": [{\n  \"type\": \"java.lang.String\",\n  \"properties\": {\n   \"value\": {\n    \"type\": \"char[]\"\n   },\n   \"hash\": {\n    \"type\": \"int\"\n   }\n  }\n }, {\n  \"type\": \"int\"\n }, {\n  \"type\": \"char\"\n }]\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Configuration in Properties\nDESCRIPTION: Configuration file entry for the QosProtocolWrapper implementation in Dubbo's Protocol SPI system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\nqos=org.apache.dubbo.qos.protocol.QosProtocolWrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Telnet Handlers in Dubbo XML\nDESCRIPTION: XML configuration for specifying Telnet handlers in Dubbo protocol and provider settings. It shows how to set custom Telnet handlers and default values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol telnet=\"xxx,yyy\" />\n<!-- 缺省值设置，当<dubbo:protocol>没有配置telnet属性时，使用此配置 -->\n<dubbo:provider telnet=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Go HTTP Client for Dubbo\nDESCRIPTION: Go implementation for calling Dubbo HTTP services using net/http package\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n     )\n  \n    func main() {\n    url := \"http://localhost:8888/services/curl\"\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n    fmt.Println(\"Error creating request:\", err)\n    return\n    }\n  \n    req.Header.Set(\"rest-service-group\", \"test\")\n    req.Header.Set(\"rest-service-version\", \"1.0.0\")\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(\"Error sending request:\", err)\n        return\n    }\n  \n    defer resp.Body.Close()\n```\n\n----------------------------------------\n\nTITLE: Resource Loading with Class Loaders\nDESCRIPTION: Method to load resources using multiple class loaders in parallel. Uses a thread pool for concurrent resource loading and caching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\npublic static Map<ClassLoader, Set<URL>> loadResources(String fileName, List<ClassLoader> classLoaders) {\n        Map<ClassLoader, Set<URL>> resources = new ConcurrentHashMap<>();\n        CountDownLatch countDownLatch = new CountDownLatch(classLoaders.size());\n        for (ClassLoader classLoader : classLoaders) {\n            GlobalResourcesRepository.getGlobalExecutorService().submit(() -> {\n                resources.put(classLoader, loadResources(fileName, classLoader));\n                countDownLatch.countDown();\n            });\n        }\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return Collections.unmodifiableMap(new LinkedHashMap<>(resources));\n    }\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with POST Request via curl\nDESCRIPTION: Shell command demonstrating how to call the GetUser method on the gRPC service through Pixiu using an HTTP POST request with a JSON payload containing a userId parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser -X POST -d '{\"userId\":1}'\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Admin on VM\nDESCRIPTION: Runs Dubbo Admin with an override configuration file on a VM.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndubbo-admin run -f override-configuration.yml\n```\n\n----------------------------------------\n\nTITLE: Redis Metadata Center Properties Configuration\nDESCRIPTION: Properties file configuration for setting up Redis as a metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=redis://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Running Java Server and Go Client for Application-Level Service Discovery\nDESCRIPTION: Shell commands to start the Java server and Go client for demonstrating application-level service discovery interoperability between dubbo-java and dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd service\ncd java-server\nsh run.sh\n\ncd go-client\ngo run client.go\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service in Java with JAX-RS Annotations\nDESCRIPTION: Example of implementing a REST service with JAX-RS annotations to specify HTTP method, path, and content type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Service with Streaming\nDESCRIPTION: Protobuf service definition including bidirectional and server streaming methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.samples.tri.streaming;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc biStream(stream GreeterRequest) returns (stream GreeterReply);\n  rpc serverStream(GreeterRequest) returns (stream GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exchanger Interface in Java\nDESCRIPTION: Example implementation of the Exchanger interface that creates custom ExchangeServer and ExchangeClient instances based on provided URLs and handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exchanger.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.exchange.Exchanger;\n \n \npublic class XxxExchanger implements Exchanger {\n    public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {\n        return new XxxExchangeServer(url, handler);\n    }\n    public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException {\n        return new XxxExchangeClient(url, handler);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Registry with URL Simplification in Java\nDESCRIPTION: Creates a registry configuration bean for the provider side with URL simplification enabled and extra keys for retries and owner parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic RegistryConfig registryConfig() {\n    RegistryConfig registryConfig = new RegistryConfig();\n    registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n    registryConfig.setSimplified(true);\n    registryConfig.setExtraKeys(\"retries,owner\");\n    return registryConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Triple Protocol Service in Dubbo-go\nDESCRIPTION: This Go code snippet shows how to create a client and call a service using the triple protocol in Dubbo-go. It creates a new client, initializes the GreetService, and makes a remote procedure call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientURL(\"127.0.0.1:20000\"),\n)\n\nsvc, err := greet.NewGreetService(cli)\nresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Routing Rule in YAML for Dubbo\nDESCRIPTION: Example YAML configuration for a conditional routing rule in Dubbo. This rule forwards all calls to the getComment method of org.apache.dubbo.samples.CommentService to address instances tagged with region=Hangzhou.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/condition-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nforce: true\nruntime: true\nenabled: true\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - method=getComment => region=Hangzhou\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Service Address in Java\nDESCRIPTION: This snippet demonstrates how to register a Redis service address using the RegistryFactory and Registry classes in Dubbo. It includes setting up a Zookeeper registry and registering a Redis URL with various parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"redis://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Adapter in XML\nDESCRIPTION: Demonstrates how to configure the Logger Adapter extension in Dubbo's XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/logger-adapter.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application logger=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper with Docker Compose\nDESCRIPTION: This shell command starts Zookeeper using Docker Compose. It requires Docker and Docker Compose to be installed and available on the system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/httpfilter/dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f {CURRENT_PATH}/dubbo-go-pixiu-samples/dubbohttpproxy/docker/docker-compose.yml && docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining REST Service Interface in Java\nDESCRIPTION: Example of defining a simple REST service interface for user registration in Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface UserService {\n   void registerUser(User user);\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure Definition in JSON\nDESCRIPTION: JSON structure for defining response format with type annotations and Java class mappings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"string\",\n  \"Name\": \"string\",\n  \"Age\": \"int\",\n  \"JavaClassName\":  \"string@com.ikurento.user.User\",\n  \"SubInfo\": {\n    \"SubID\": \"string\",\n    \"SubMale\": \"bool\",\n    \"SubAge\": \"int\",\n    \"JavaClassName\":\"string@com.ikurento.user.SubInfo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Propagation in Java\nDESCRIPTION: Shows how to manually propagate the RpcContext when switching threads in an asynchronous Provider implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    // 保存当前线程的上下文\n    RpcContext context = RpcContext.getContext();\n    public CompletableFuture<String> sayHello(String name) {\n        return CompletableFuture.supplyAsync(() -> {\n            // 设置到新线程中\n            RpcContext.setContext(context);\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Group for Nacos Registry\nDESCRIPTION: YAML configuration for Nacos registry with a custom group name, which provides an additional layer of isolation within the namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   group: dubbo\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Adaptive Extension Class in Java\nDESCRIPTION: Sample of dynamically generated adaptive extension class showing URL parameter handling, extension loading, and method delegation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.common.extension.adaptive;\n\nimport org.apache.dubbo.common.extension.ExtensionLoader;\n\n\npublic class HasAdaptiveExt$Adaptive implements org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt {\n    public java.lang.String echo(org.apache.dubbo.common.URL arg0,\n        java.lang.String arg1) {\n        // URL null check\n        if (arg0 == null) {\n            throw new IllegalArgumentException(\"url == null\");\n        }\n\n        org.apache.dubbo.common.URL url = arg0;\n        // Get extension name\n        String extName = url.getParameter(\"has.adaptive.ext\", \"adaptive\");\n        // Extension name null check\n        if (extName == null) {\n            throw new IllegalStateException(\n                \"Failed to get extension (org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt) name from url (\" +\n                url.toString() + \") use keys([has.adaptive.ext])\");\n        }\n        // Get extension\n        org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt extension = (org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt) ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.extension.adaptive.HasAdaptiveExt.class)\n                                                                                                                                                         .getExtension(extName);\n        // Execute corresponding method\n        return extension.echo(arg0, arg1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo Version Compatibility Table in Markdown\nDESCRIPTION: This markdown table presents a detailed comparison of different Dubbo versions, including branch information, latest version numbers, JDK compatibility, Spring Boot support, component versions, and additional details. It covers versions from 3.3.x down to 2.5.x, highlighting maintenance status and upgrade paths.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/versions.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| <span style=\"display:inline-block;min-width:120px\">Dubbo Branch</span> | <span style=\"display:inline-block;min-width:100px\">Latest Version</span> | <span style=\"display:inline-block;min-width:80px\">JDK</span> | Spring Boot | <span style=\"display:inline-block;min-width:80px\">Component Version</span> | Details |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| 3.3.x (Current Document) | 3.3.0 | 8, 17, 21 | [2.x、3.x](/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot/#dubbo-spring-boot-starter) | [Details](https://github.com/apache/dubbo/blob/dubbo-3.3.0/dubbo-dependencies-bom/pom.xml#L91) | - [Version Change Log](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide/) <br/><br/>  - **Production Ready (Recommended, Long-term Maintenance)!** Latest Triple protocol upgrade, built-in Metrics, Tracing, GraalVM support, etc. |\n| [3.2.x](https://dubbo-202409.staged.apache.org/zh-cn/overview/mannual/java-sdk/) | 3.2.10 | 8, 17 | [2.x、3.x](/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot/#dubbo-spring-boot-starter) | [Details](https://github.com/apache/dubbo/blob/dubbo-3.2.10/dubbo-dependencies-bom/pom.xml#L91) | - [Version Change Log](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.1-to-3.2-compatibility-guide/) <br/><br/>  - Production Ready (Long-term Maintenance)! |\n| [3.1.x](https://dubbo-202409.staged.apache.org/zh-cn/overview/mannual/java-sdk/) | 3.1.11 | 8, 17 | [2.x、3.x](/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot/#dubbo-spring-boot-starter) | [Details](https://github.com/apache/dubbo/blob/dubbo-3.1.11/dubbo-dependencies-bom/pom.xml#L91) | - [Version Change Log](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.0-to-3.1-compatibility-guide/) <br/><br/>  - Security fixes only! |\n| [3.0.x](https://dubbo-202409.staged.apache.org/zh-cn/docs/) | 3.0.15 | 8 | [2.x](/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot/#dubbo-spring-boot-starter) | [Details](https://github.com/apache/dubbo/blob/dubbo-3.0.15/dubbo-dependencies-bom/pom.xml#L91) | - [Version Change Log](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/2.x-to-3.x-compatibility-guide/) <br/><br/>  - No longer maintained!  |\n| [2.7.x](https://dubbo-202409.staged.apache.org/zh-cn/docsv2.7/) | 2.7.23 | 8 | [2.x](/en/overview/mannual/java-sdk/reference-manual/config/spring/spring-boot/#dubbo-spring-boot-starter) | [Details](https://raw.githubusercontent.com/apache/dubbo/dubbo-2.7.23/dubbo-dependencies-bom/pom.xml) | - [Learn how to upgrade to Dubbo3](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration/) <br/><br/>  - No longer maintained!  |\n| 2.6.x | 2.6.20 | 6, 7 | - | _ | - [Learn how to upgrade to Dubbo3](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration/)  <br/><br/>  - No longer maintained! |\n| 2.5.x | 2.5.10 | 6, 7 | - | - | - [Learn how to upgrade to Dubbo3](/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration/)  <br/><br/>  - No longer maintained! |\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Java interface definition for the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings in Properties File\nDESCRIPTION: Restricts QOS commands to local host only through dubbo.properties, preventing remote hosts from executing commands.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qos-accept-foreign-ip=false\n```\n\n----------------------------------------\n\nTITLE: Enabling Deadline Mechanism in YAML\nDESCRIPTION: Configures timeout with deadline mechanism enabled using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    timeout: 5000\n    parameters.enable-timeout-countdown: true\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Tracer Dependency in Maven\nDESCRIPTION: XML configuration for adding the OpenTelemetry tracer bridge dependency to a Maven project. This dependency enables OpenTelemetry tracing functionality in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/29.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-tracing-bridge-otel</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration for Service Discovery Migration Step\nDESCRIPTION: YAML format dynamic configuration for service discovery migration that can be pushed through a configuration center at runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-samples.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstep: FORCE_INTERFACE\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in XML for Dubbo Services\nDESCRIPTION: XML configuration snippet for setting up database connections in Dubbo services. This example shows where to configure the database URL, username, and password for microservices.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n    <property name=\"url\" value=\"jdbc:mysql://x.x.x.x:3306/xxx\" />\n    <property name=\"username\" value=\"xxx\" />\n    <property name=\"password\" value=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Calls for dubbo-go Client\nDESCRIPTION: This YAML configuration shows how to enable signing on the client side in dubbo-go. It includes settings for enabling sign filter, specifying AK/SK, and other reference-related configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-trusted-call.md#2025-04-08_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nreferences:\n  \"UserProvider\":\n    # 可以指定多个registry，使用逗号隔开;不指定默认向所有注册中心注册\n    registry: \"hangzhouzk\"\n    protocol: \"dubbo\"\n    interface: \"com.ikurento.user.UserProvider\"\n    cluster: \"failover\"\n    # 本服务开启sign filter，需要签名\n    filter: \"sign\"\n    # 默认实现通过配置文件配置AK、SK\n    params:\n      .accessKeyId: \"SYD8-23DF\"\n      .secretAccessKey: \"BSDY-FDF1\"\n    methods:\n      - name: \"GetUser\"\n        retries: 3\n```\n\n----------------------------------------\n\nTITLE: SPI Interface and Implementation Example\nDESCRIPTION: Example of creating an SPI interface and implementation in Dubbo\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@SPI\npublic interface DemoSpi {\n    void say();\n}\n\npublic class DemoSpiImpl implements DemoSpi {\n    public void say() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Object for Dubbo Service Reference (Java)\nDESCRIPTION: This method creates a proxy object for the Dubbo service reference. It handles both local and remote references, and sets up the necessary invokers and URLs for the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n private T createProxy(Map<String, String> referenceParameters) {\n     //本地引用 这里为false\n        if (shouldJvmRefer(referenceParameters)) {\n            createInvokerForLocal(referenceParameters);\n        } else {\n            urls.clear();\n            if (StringUtils.isNotEmpty(url)) {\n                //url存在则为点对点引用\n                // user specified URL, could be peer-to-peer address, or register center's address.\n                parseUrl(referenceParameters);\n            } else {\n                // if protocols not in jvm checkRegistry\n                //这里不是local协议默认这里为空\n                if (!LOCAL_PROTOCOL.equalsIgnoreCase(getProtocol())) {\n                    //从注册表中获取URL并将其聚合。这个其实就是初始化一下注册中心的url配置\n                    aggregateUrlFromRegistry(referenceParameters);\n                }\n            }\n            //这个代码非常重要 创建远程引用，创建远程引用调用器\n            createInvokerForRemote();\n        }\n\n        if (logger.isInfoEnabled()) {\n            logger.info(\"Referred dubbo service: [\" + referenceParameters.get(INTERFACE_KEY) + \"].\" +\n                (Boolean.parseBoolean(referenceParameters.get(GENERIC_KEY)) ?\n                    \" it's GenericService reference\" : \" it's not GenericService reference\"));\n        }\n\n        URL consumerUrl = new ServiceConfigURL(CONSUMER_PROTOCOL, referenceParameters.get(REGISTER_IP_KEY), 0,\n            referenceParameters.get(INTERFACE_KEY), referenceParameters);\n        consumerUrl = consumerUrl.setScopeModel(getScopeModel());\n        consumerUrl = consumerUrl.setServiceModel(consumerModel);\n        MetadataUtils.publishServiceDefinition(consumerUrl, consumerModel.getServiceModel(), getApplicationModel());\n\n        // create service proxy\n        return (T) proxyFactory.getProxy(invoker, ProtocolUtils.isGeneric(generic));\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing React Application with Dubbo Client (IDL Mode)\nDESCRIPTION: React component implementation that uses the generated Dubbo client to communicate with the backend service. It creates a transport, initializes a client, and handles form submission to send messages to the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from \"react\";\nimport \"./App.css\";\n\nimport { createPromiseClient } from \"@apachedubbo/dubbo\";\nimport { createDubboTransport } from \"@apachedubbo/dubbo-web\";\n\n// Import service definition that you want to connect to.\nimport { ExampleService } from \"./util/gen/example_dubbo\";\n\n// The transport defines what type of endpoint we're hitting.\n// In our example we'll be communicating with a Dubbo endpoint.\nconst transport = createDubboTransport({\n  baseUrl: \"http://localhost:8080\",\n});\n\n// Here we make the client itself, combining the service\n// definition with the transport.\nconst client = createPromiseClient(ExampleService, transport, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [messages, setMessages] = useState<\n    {\n      fromMe: boolean;\n      message: string;\n    }[]\n  >([]);\n  return (\n    <>\n      <ol>\n        {messages.map((msg, index) => (\n          <li key={index}>{`${msg.fromMe ? \"ME:\" : \"Dubbo Server:\"} ${msg.message}`}</li>\n        ))}\n      </ol>\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n          // Clear inputValue since the user has submitted.\n          setInputValue(\"\");\n          // Store the inputValue in the chain of messages and\n          // mark this message as coming from \"me\"\n          setMessages((prev) => [\n            ...prev,\n            {\n              fromMe: true,\n              message: inputValue,\n            },\n          ]);\n          const response = await client.say({\n            sentence: inputValue,\n          });\n          setMessages((prev) => [\n            ...prev,\n            {\n              fromMe: false,\n              message: response.sentence,\n            },\n          ]);\n        }}\n      >\n        <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Configuring UTF-8 Encoding for Chinese Characters in REST Response\nDESCRIPTION: Example of configuring UTF-8 encoding in the REST response to support Chinese characters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({\"application/json; charset=UTF-8\", \"text/xml; charset=UTF-8\"})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Interface Streaming Methods\nDESCRIPTION: Implementation of streaming methods defined with Java interfaces. The class implements both bidirectional streaming and server-side streaming methods using Dubbo's StreamObserver interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class WrapGreeterImpl implements WrapGreeter {\n\n    //...\n\n    @Override\n    public StreamObserver<String> sayHelloStream(StreamObserver<String> response) {\n        return new StreamObserver<String>() {\n            @Override\n            public void onNext(String data) {\n                System.out.println(data);\n                response.onNext(\"hello,\"+data);\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                throwable.printStackTrace();\n            }\n\n            @Override\n            public void onCompleted() {\n                System.out.println(\"onCompleted\");\n                response.onCompleted();\n            }\n        };\n    }\n\n    @Override\n    public void sayHelloServerStream(String request, StreamObserver<String> response) {\n        for (int i = 0; i < 10; i++) {\n            response.onNext(\"hello,\" + request);\n        }\n        response.onCompleted();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: This snippet demonstrates how to define a Java interface as a Dubbo service. It shows the basic structure of a Dubbo service interface declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-introduction.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Service-Specific RMI Protocol Configuration\nDESCRIPTION: XML configuration to specify RMI protocol for individual services\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" protocol=\"rmi\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to RMI\nDESCRIPTION: XML configuration to set RMI as the default protocol for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"rmi\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Migration Log Example\nDESCRIPTION: Example log showing successful migration to APPLICATION_FIRST mode for a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[26/02/23 03:27:07:007 CST] main  INFO migration.MigrationRuleHandler:  [DUBBO] Succeed Migrated to APPLICATION_FIRST mode. Service Name: org.apache.dubbo.samples.api.GreetingsService, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 192.168.31.5\n```\n\n----------------------------------------\n\nTITLE: Local Process Deployment Steps\nDESCRIPTION: Commands for packaging and running Dubbo application locally\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\nLANGUAGE: shell\nCODE:\n```\njava -jar ./quickstart-service/target/quickstart-service-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection and Server Options in Dubbo Webservice\nDESCRIPTION: XML configurations for setting up direct connections to Webservice endpoints and configuring different server options like Jetty and Servlet Bridge.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"helloService\" interface=\"HelloWorld\" url=\"webservice://10.20.153.10:8080/com.foo.HelloWorld\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol ... server=\"jetty\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol ... server=\"servlet\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Provider Interface for msgpack Serialization\nDESCRIPTION: This Java interface defines the methods that will be implemented by the Dubbo provider using msgpack serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/msgpack-serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MsgpackService {\n    int tint(int i);\n    long tlong(long i);\n    List<String> tlist(List<String> l);\n    String multiParams(String str, int i, MyParam myParam);\n}\n```\n\n----------------------------------------\n\nTITLE: Default getExtensionLoader Method in ExtensionAccessor Interface\nDESCRIPTION: Shows the default implementation of getExtensionLoader in the ExtensionAccessor interface, which delegates to the ExtensionDirector.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ndefault <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        return this.getExtensionDirector().getExtensionLoader(type);\n    }\n```\n\n----------------------------------------\n\nTITLE: Mapping Dubbo Error Codes to HTTP Status Codes\nDESCRIPTION: Provides a reference table for mapping Dubbo error codes to corresponding HTTP status codes and error messages in the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n status http-status  \t  message\n 20     200             ok\n 25     400 \t\t\t\tserialize error\n 30     408 \t\t\t\tclient side timeout\n 31     408 \t\t\t\tserver side timeout\n 35     500 \t\t\t\tchannel inactive, directly return the unfinished requests\n 40     400 \t\t\t\trequest format error\n 50     500 \t\t\t\tresponse format error\n 60     404 \t\t\t\tservice not found.\n 70     500 \t\t\t\tservice error\n 80     500 \t\t\t\tinternal server error\n 90     500 \t\t\t\tinternal client error\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Connection and Session Timeouts in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure connection and session timeout values for Zookeeper in a Dubbo application. It specifies the Zookeeper address, register mode, and timeout values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: zookeeper://localhost:2181\n   register-mode: instance # New users please set this value to enable application-level service discovery, optional values are interface, instance, all\n   timeout: 30 * 1000 * # Connection timeout, default 30s\n   session: 60 * 1000 * # Session timeout, default 60s\n```\n\n----------------------------------------\n\nTITLE: Ingress Resource Configuration for Dubbo Service\nDESCRIPTION: YAML configuration for the Ingress resource that defines HTTP routes to the Dubbo service based on service interface path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: gateway-higress-triple-provider.DEFAULT-GROUP.public.nacos\n  name: demo\n  namespace: default #与应用部署namespace保持一致\nspec:\n    ingressClassName: higress\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        resource:\n                            apiGroup: networking.higress.io\n                            kind: McpBridge\n                            name: default\n                    path: /org.apache.dubbo.samples.gateway.api.DemoService\n                    pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Dynamic Local/Remote Invocation Configuration\nDESCRIPTION: Java code to dynamically configure whether a single invocation should be local or remote using RpcContext\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getServiceContext().setLocalInvoke(false);\n```\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getServiceContext().setLocalInvoke(true);\n```\n\n----------------------------------------\n\nTITLE: Enabling Consumer Registration in Parameters Style\nDESCRIPTION: YAML configuration to enable consumer registration in Nacos using the parameters property. Alternative way to make consumer interfaces visible in the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n  registry:\n    address: nacos://localhost:8848\n    parameters.register-consumer-url: true\n```\n\n----------------------------------------\n\nTITLE: Defining RouterFactory Interface in Go\nDESCRIPTION: Interface definition for RouterFactory in dubbo-go which creates router instances with URL configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// RouterFactory router create factory\ntype RouterFactory interface {\n\t// NewRouter creates router instance with URL\n\tNewRouter(*common.URL) (Router, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting QoS Server in Java\nDESCRIPTION: This method initializes and starts the Quality of Service (QoS) server based on the provided URL parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void startQosServer(URL url) {\n        try {\n            if (!hasStarted.compareAndSet(false, true)) {\n                return;\n            }\n\n            boolean qosEnable = url.getParameter(QOS_ENABLE, true);\n            if (!qosEnable) {\n                logger.info(\"qos won't be started because it is disabled. \" +\n                        \"Please check dubbo.application.qos.enable is configured either in system property, \" +\n                        \"dubbo.properties or XML/spring-boot configuration.\");\n                return;\n            }\n\n            String host = url.getParameter(QOS_HOST);\n            int port = url.getParameter(QOS_PORT, QosConstants.DEFAULT_PORT);\n            boolean acceptForeignIp = Boolean.parseBoolean(url.getParameter(ACCEPT_FOREIGN_IP, \"false\"));\n            Server server = frameworkModel.getBeanFactory().getBean(Server.class);\n            server.setHost(host);\n            server.setPort(port);\n            server.setAcceptForeignIp(acceptForeignIp);\n            server.start();\n\n        } catch (Throwable throwable) {\n            logger.warn(\"Fail to start qos server: \", throwable);\n        }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider in Erlang\nDESCRIPTION: This snippet demonstrates how to configure a service provider in the sys.config file for dubboerl. It shows the basic structure for registering service implementations with their corresponding Java interface names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/erlang/service.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{provider,[\n\t\t{module_implements,interface_module,interface_fullname,[Options]},\n\t\t%% eg:\n\t\t{userOperator_impl,userOperator,<<\"org.apache.dubbo.erlang.sample.service.facade.UserOperator\">>,[Option]}\n\t]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in Non-IDL Mode\nDESCRIPTION: Code snippet showing how to create a Dubbo client without using IDL-generated code, using direct service and method name strings to make RPC calls to the backend service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n// set backend server to connect\nconst transport = createDubboTransport({\n  baseUrl: \"http://localhost:8080\",\n});\n// init client\nconst client = createPromiseClient(transport);\n\nfunction App() {\n  // ...\n  // call remote Dubbo service\n  const response = await client.call(\n    \"apache.dubbo.demo.example.v1.ExampleService\",\n    \"say\",\n    {\n      sentence: inputValue,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reference Configuration for Dubbo Services in Java\nDESCRIPTION: The basic code for creating a ReferenceConfig object to configure a Dubbo service consumer. This is typically the first step when setting up a consumer in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/20-Dubbo3服务引用配置ReferenceConfig.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<DemoService> reference = new ReferenceConfig<>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider in XML\nDESCRIPTION: XML configuration for the service provider including application name, registry, and service definition\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"rpc-callback-demo\" />\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.callback.implicit.NormalDemoService\" />\n<dubbo:service interface=\"org.apache.dubbo.callback.implicit.IDemoService\" ref=\"demoService\" version=\"1.0.0\" group=\"cn\"/>\n```\n\n----------------------------------------\n\nTITLE: 实现Go客户端泛化调用Java服务\nDESCRIPTION: 使用Dubbo-go API配置和实现对Java服务的泛化调用。代码配置了Triple协议和hessian2序列化，并使用GenericService的Invoke方法发起调用，获取User对象的响应结果。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 初始化 Reference 配置\nrefConf := config.NewReferenceConfigBuilder().\n  SetInterface(\"org.apache.dubbo.UserProvider\").\n  SetRegistryIDs(\"zk\").\n  SetProtocol(tripleConst.TRIPLE).\n  SetGeneric(true).\n  SetSerialization(\"hessian2\").\n  Build()\n\n// 构造 Root 配置，引入注册中心模块\nrootConfig := config.NewRootConfigBuilder().\n  AddRegistry(\"zk\", config.NewRegistryConfigWithProtocolDefaultPort(\"zookeeper\")).\n  Build()\n\n// Reference 配置初始化，因为需要使用注册中心进行服务发现，需要传入经过配置的 rootConfig\nif err := refConf.Init(rootConfig); err != nil{\n  panic(err)\n}\n\n// 泛化调用加载、服务发现\nrefConf.GenericLoad(appName)\n\ntime.Sleep(time.Second)\n\n// 发起泛化调用\nresp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(\n  context.TODO(),\n  \"getUser1\",\n  []string{\"java.lang.String\"},\n  []hessian.Object{\"A003\"},\n)\n\nif err != nil {\n  panic(err)\n}\nlogger.Infof(\"GetUser1(userId string) res: %+v\", resp)\n```\n\n----------------------------------------\n\nTITLE: Testing Triple Protocol REST Endpoint\nDESCRIPTION: Shell command example showing how to test the configured REST endpoint using curl, demonstrating the HTTP GET request with a query parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \"localhost/triple/demo/hello?name=HigressTriple\"\n\n\"Hello HigressTriple\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Load Balancing in Dubbo (Java)\nDESCRIPTION: This code snippet shows the implementation of the Random Load Balance strategy in Dubbo. It handles both weighted and unweighted scenarios, selecting an invoker based on random distribution and weights if applicable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    private final Random random = new Random();\n\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();      // total invoker\n        int totalWeight = 0;               // Sum of invokers' weights\n\n        // Determine if all the invokers have the same weight\n        // If the weights are the same, it is simple to generate an index directly from Random.\n        boolean sameWeight = true;\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            totalWeight += weight; // Sum\n            if (sameWeight && i > 0 && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false;\n            }\n        }\n\n        if (totalWeight > 0 && !sameWeight) {\n            // If not all of the invoker weights are the same, load balancer will randomly choose invoker based on its weight. The greater the weight, the greater the probability of being selected\n            int offset = random.nextInt(totalWeight);\n            for (int i = 0; i < length; i++) {\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    return invokers.get(i);\n                }\n            }\n        }\n        // If all invokers have the same weight\n        return invokers.get(random.nextInt(length));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Interface with Memcached in Dubbo\nDESCRIPTION: This XML configuration shows how to use a custom interface with Memcached in Dubbo, directly specifying the Memcached server URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/memcached.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"com.foo.CacheService\" url=\"memcached://10.20.153.10:11211\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Methods\nDESCRIPTION: Example of defining service methods with basic request-response handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass UnaryServiceServicer:\n    def say_hello(self, message: bytes) -> bytes:\n        print(f\"Received message from client: {message}\")\n        return b\"Hello from server\"\n```\n\n----------------------------------------\n\nTITLE: Pixiu YAML Configuration\nDESCRIPTION: Main configuration file structure for Pixiu showing static resources setup including listeners, filters, routes and Dubbo proxy configuration with Zookeeper registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8883\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"*\"\n                http_filters:\n                  - name: dgp.filter.http.dubboproxy\n                    config:\n                      dubboProxyConfig:\n                        auto_resolve: true\n                        registries:\n                          \"zookeeper\":\n                            protocol: \"zookeeper\"\n                            timeout: \"3s\"\n                            address: \"127.0.0.1:2181\"\n                            username: \"\"\n                            password: \"\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Dubbo Serialization Constants in Java\nDESCRIPTION: This snippet shows how to reference the built-in serialization constants in Dubbo. It's used to check for conflicts with custom serialization implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/6/9.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.dubbo.common.serialize.Constants\n```\n\n----------------------------------------\n\nTITLE: Registering Random LoadBalance Implementation in Dubbo-go\nDESCRIPTION: This code shows how a specific implementation (RandomLoadBalance) is registered with the extension system. The init function automatically executes when the package is imported, registering the implementation with a constant key that can be referenced in configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage random\n\nimport (\n\t\"math/rand\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/extension\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n)\n\nfunc init() {\n\textension.SetLoadbalance(constant.LoadBalanceKeyRandom, NewRandomLoadBalance)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the APISIX-Proxied Dubbo Service\nDESCRIPTION: cURL command to test the HTTP endpoint in APISIX that proxies to the Dubbo service, showing the expected response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9080/demo  -H \"Host: example.org\"  -X POST --data '{\"name\": \"hello\"}'\n\n< HTTP/1.1 200 OK\n< Date: Sun, 26 Dec 2021 11:33:27 GMT\n< Content-Type: text/plain; charset=utf-8\n< Content-Length: 14\n< Connection: keep-alive\n< test: 123\n< Server: APISIX/2.11.0\n<\ndubbo success\n```\n\n----------------------------------------\n\nTITLE: Dynamic Local/Remote Invocation Configuration\nDESCRIPTION: Java code to dynamically configure whether a single invocation should be local or remote using RpcContext\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getServiceContext().setLocalInvoke(false);\n```\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getServiceContext().setLocalInvoke(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection and Server Options in Dubbo Webservice\nDESCRIPTION: XML configurations for setting up direct connections to Webservice endpoints and configuring different server options like Jetty and Servlet Bridge.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"helloService\" interface=\"HelloWorld\" url=\"webservice://10.20.153.10:8080/com.foo.HelloWorld\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol ... server=\"jetty\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol ... server=\"servlet\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Consumer in Java\nDESCRIPTION: This code snippet shows a Spring REST controller that consumes the Dubbo HelloService. It includes error simulation and adds a delay to the controller method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/tracing-with-skywalking.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.skywalking.demo.consumer;\n\n@RestController\npublic class ConsumerController {\n\n\tprivate static int COUNT = 0;\n\n\t@Reference(version = \"${demo.service.version}\",\n\t\tapplication = \"${dubbo.application.id}\",\n\t\turl = \"dubbo://localhost:20880\", timeout = 60000)\n\tprivate HelloService helloService;\n\n\t@GetMapping(\"/sayHello/{name}\")\n\tpublic String sayHello(@PathVariable(name = \"name\") String name) {\n\t\tif ((COUNT++) % 3 == 0){\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\tLockSupport.parkNanos(TimeUnit.SECONDS.toNanos(2));\n\t\treturn helloService.sayHello(name);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Using XML\nDESCRIPTION: A simple example of configuring a Dubbo consumer using XML. It demonstrates how to set up application, registry, protocol, and reference to remote services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"com.alibaba.dubbo.demo.DemoService\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Deploying Nacos in Kubernetes\nDESCRIPTION: Shell command to deploy Nacos service registry in a Kubernetes cluster using a predefined YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/2-advanced/dubbo-samples-gateway/dubbo-samples-gateway-higress/dubbo-samples-gateway-higress-triple/deploy/nacos/Nacos.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Avro Serialization in Spring Boot YAML\nDESCRIPTION: YAML configuration to enable Avro serialization in Spring Boot application.yml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   serialization: avro\n```\n\n----------------------------------------\n\nTITLE: Spring-Compatible RMI Configuration\nDESCRIPTION: XML configuration for enabling Spring compatibility mode in RMI protocol\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rmi\" codec=\"spring\" />\n```\n\n----------------------------------------\n\nTITLE: System Properties Configuration for QOS\nDESCRIPTION: Shows how to configure QOS parameters using JVM system properties, including enabling/disabling QOS, setting port, and security options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-Ddubbo.application.qos-enable=true\n-Ddubbo.application.qos-port=33333\n-Ddubbo.application.qos-accept-foreign-ip=false\n```\n\n----------------------------------------\n\nTITLE: Creating TAP Device\nDESCRIPTION: Command to create a TAP network interface device using OpenVPN with device name tap0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo openvpn --mktun --dev tap0\n```\n\n----------------------------------------\n\nTITLE: Spring-Compatible RMI Configuration\nDESCRIPTION: XML configuration for enabling Spring compatibility mode in RMI protocol\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rmi\" codec=\"spring\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Gson Serialization Dependencies in Maven\nDESCRIPTION: This snippet shows the Maven dependencies required to use Gson serialization in a Dubbo application. It includes both the Dubbo Gson serialization extension and the core Gson library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/gson.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-gson</artifactId>\n      <version>3.3.0</version>\n    </dependency>\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>2.10.1</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service to Use Multiple Protocols in Dubbo\nDESCRIPTION: This Java code snippet demonstrates how to configure a Dubbo service to use multiple protocols using the @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(protocol=\"dubbo-id,triple-id\")\nprivate DemoServiceImpl implements DemoService {}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Grafana Service\nDESCRIPTION: Command to set up port forwarding for accessing the Grafana web interface locally.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/grafana.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward service/grafana 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Status Export in Dubbo\nDESCRIPTION: These configurations demonstrate how to control thread pool status export in Dubbo using different configuration formats (properties, XML, and YAML).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.application.dump.enable=true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" dump-enable=\"false\"/>\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n    dump-enable: false\n```\n\n----------------------------------------\n\nTITLE: Generating Protocol Code\nDESCRIPTION: Command to generate TypeScript code from Protocol Buffer definitions\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nPATH=$PATH:$(pwd)/node_modules/.bin \\\n  protoc -I proto \\\n  --es_out gen \\\n  --es_opt target=ts \\\n  --apache-dubbo-es_out gen \\\n  --apache-dubbo-es_opt target=ts \\\n  example.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet-based REST Protocol with External Server\nDESCRIPTION: XML configuration for using an external application server for REST services. When using this approach, port and contextpath must match the external server's settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Apache Dubbo Registry\nDESCRIPTION: Command to edit the Redis configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nvi redis.conf\n```\n\n----------------------------------------\n\nTITLE: Service Registration in ServiceDiscoveryRegistry\nDESCRIPTION: Implementation of the register method in ServiceDiscoveryRegistry that checks if the URL should be registered and then delegates to doRegister method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public final void register(URL url) {\n       //逻辑判断比如只有side为提供者时候才能注册\n        if (!shouldRegister(url)) { // Should Not Register\n            return;\n        }\n        doRegister(url);\n    }\n```\n\n----------------------------------------\n\nTITLE: Simple Profiler Consumer Example\nDESCRIPTION: Example of consumer-side simple profiler output showing request timing and context\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/profiler.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[19/07/22 07:08:35:035 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 1003.015746 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\ninvocation context:\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 285821581299853\n+-[ Offset: 0.000000ms; Usage: 1003.015746ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi\n  +-[ Offset: 7.987015ms; Usage: 994.207928ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Callback in XML\nDESCRIPTION: XML configuration for the service consumer, including the reference to the remote service and method-level configuration for callbacks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id =\"demoCallback\" class = \"org.apache.dubbo.callback.implicit.NotifyImpl\" />\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.callback.implicit.IDemoService\" version=\"1.0.0\" group=\"cn\" >\n      <dubbo:method name=\"get\" async=\"true\" onreturn = \"demoCallback.onreturn\" onthrow=\"demoCallback.onthrow\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Adding FastJSON2 Dependency for Serialization\nDESCRIPTION: Maven dependency configuration for adding FastJSON2 serialization support to a Dubbo application, which is required when switching to FastJSON2 serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.alibaba.fastjson2</groupId>\n  <artifactId>fastjson2</artifactId>\n  <version>${fastjson2.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Service Reference Caching in SimpleReferenceCache in Dubbo\nDESCRIPTION: Implementation of the SimpleReferenceCache get method that handles caching of service references. It uses a flyweight pattern to manage reference objects, maintaining caches based on reference type and key to optimize resource usage.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Override\n@SuppressWarnings(\"unchecked\")\npublic <T> T get(ReferenceConfigBase<T> rc) {\n     //这个生成的key规则是这样的 服务分组/服务接口:版本号  详细的代码就不看了\n     //例如： group/link.elastic.dubbo.entity.DemoService:1.0\n    String key = generator.generateKey(rc);\n    //服务类型 如果是泛化调用则这个类型为GenericService\n    Class<?> type = rc.getInterfaceClass();\n\n    //服务是否为单例的这里默认值都为空，为单例模式\n    boolean singleton = rc.getSingleton() == null || rc.getSingleton();\n    T proxy = null;\n    // Check existing proxy of the same 'key' and 'type' first.\n    if (singleton) {\n        //一般为单例的 这个方法是从缓存中获取\n        proxy = get(key, (Class<T>) type);\n    } else {\n        //非单例容易造成内存泄露，无法从缓存中获取\n        logger.warn(\"Using non-singleton ReferenceConfig and ReferenceCache at the same time may cause memory leak. \" +\n            \"Call ReferenceConfig#get() directly for non-singleton ReferenceConfig instead of using ReferenceCache#get(ReferenceConfig)\");\n    }\n    //前面是从缓存中拿，如果缓存中获取不到则开始引用服务\n    if (proxy == null) {\n        //获取或者创建值，为引用类型referencesOfType对象（类型为Map<Class<?>, List<ReferenceConfigBase<?>>>）缓存对象生成值（值不存咋时候会生成一个）\n        List<ReferenceConfigBase<?>> referencesOfType = referenceTypeMap.computeIfAbsent(type, _t -> Collections.synchronizedList(new ArrayList<>()));\n        //每次走到这里都会添加一个ReferenceConfigBase 引用配置对象（单例的从缓存中拿到就可以直接返回了）\n        referencesOfType.add(rc);\n\n        //与前面一样 前面是类型映射，这里是key映射\n        List<ReferenceConfigBase<?>> referenceConfigList = referenceKeyMap.computeIfAbsent(key, _k -> Collections.synchronizedList(new ArrayList<>()));\n        referenceConfigList.add(rc);\n        //开始引用服务\n        proxy = rc.get();\n    }\n\n    return proxy;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JDK Serialization Support\nDESCRIPTION: Maven dependency configuration for enabling JDK serialization support in Dubbo 3.3.x (with security risks).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-serialization-jdk</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hessian Protocol in Dubbo\nDESCRIPTION: XML configuration to define Hessian protocol with Jetty server\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"hessian\" port=\"8080\" server=\"jetty\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Etcd Configuration Center Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the dependency for the Etcd configuration center extension in a Maven project file. It specifies the group ID, artifact ID, and version of the required library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/others.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-configcenter-etcd</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Hessian Ports\nDESCRIPTION: XML configuration for setting up multiple Hessian protocol endpoints with different ports in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"hessian1\" name=\"hessian\" port=\"8080\" />\n<dubbo:protocol id=\"hessian2\" name=\"hessian\" port=\"8081\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balancing at Server Side in Dubbo\nDESCRIPTION: XML configuration for setting the load balancing strategy for specific methods at the service provider level. This shows how to configure 'roundrobin' strategy for individual methods within a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Installation\nDESCRIPTION: Commands to verify Helm installation status\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm ls -n dubbo-system\n\nkubget deployments -n dubbo-system --output wide\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Check Mode via Java ApplicationConfig\nDESCRIPTION: Shows how to set the serialization check status using ApplicationConfig in Java code. Supports STRICT, WARN, and DISABLE modes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setSerializeCheckStatus(\"STRICT\");\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Control Plane via Shell Commands\nDESCRIPTION: Commands to download, install and run the Dubbo Control Plane (dubbo-control-plane) in a Linux environment. The installation includes downloading the package, setting environment variables, and running the control plane in universal mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/console.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/releases/downloadDubbo.sh | sh -\n\ncd dubbo-$version\nexport PATH=$PWD/bin:$PATH\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubbo-cp run --mode universal --config conf/dubbo.yml\n```\n\n----------------------------------------\n\nTITLE: Implementing PrometheusMetricsReporter in Java\nDESCRIPTION: This snippet shows the implementation of PrometheusMetricsReporter, which uses PrometheusMeterRegistry to get Prometheus-formatted sample data. It also includes initialization and scheduling of push jobs to the Prometheus server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n//PrometheusMetricsReporter\n    public String getResponse() {\n        return prometheusRegistry.scrape();\n    }\n\n   SimpleMeterRegistry meterRegistry = new SimpleMeterRegistry();\n\n   @Override\n    public void doInit() {\n        addMeterRegistry(prometheusRegistry);\n        schedulePushJob();\n    }\n\n    private void schedulePushJob() {\n         //这里的URL是DefaultMetricsReporter中定义的指标报告URL，提供了指标服务的具体地址\n        boolean pushEnabled = url.getParameter(PROMETHEUS_PUSHGATEWAY_ENABLED_KEY, false);\n        if (pushEnabled) {\n       ...\n            pushJobExecutor.scheduleWithFixedDelay(() -> push(pushGateway, job), pushInterval, pushInterval, TimeUnit.SECONDS);\n        }\n    }\n\n    protected void push(PushGateway pushGateway, String job) {\n        ...\n            refreshData();\n            //将本次采样数据添加到pushGateway，等待下次抓取\n            pushGateway.pushAdd(prometheusRegistry.getPrometheusRegistry(), job);\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Client in Golang\nDESCRIPTION: Command to run the Dubbo client application written in Golang.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./go-client/cmd/main.go\n```\n\n----------------------------------------\n\nTITLE: Reporting Metadata in Dubbo\nDESCRIPTION: This method reports metadata to a metadata center if configured. It checks if the metadata should be reported based on the storage type and publishes the app metadata if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprotected void reportMetadata(MetadataInfo metadataInfo) {\n    if (metadataReport != null) {\n        SubscriberMetadataIdentifier identifier = new SubscriberMetadataIdentifier(serviceName, metadataInfo.getRevision());\n        if ((DEFAULT_METADATA_STORAGE_TYPE.equals(metadataType) && metadataReport.shouldReportMetadata()) || REMOTE_METADATA_STORAGE_TYPE.equals(metadataType)) {\n            metadataReport.publishAppMetadata(identifier, metadataInfo);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service\nDESCRIPTION: Java implementation of the Dubbo service interface with version and group configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-higress.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Service(version = \"${demo.service.version}\", group = \"${demo.service.group}\")\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Cloud REST Controller Implementation\nDESCRIPTION: REST controller implementation in Spring Cloud that exposes a user list endpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    @GetMapping(\"/list\")\n    public List<User> getUser() {\n        return Collections.singletonList(new User(1L, \"spring cloud server\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 for Dubbo Consumer\nDESCRIPTION: XML configuration to enable Netty4 on the consumer side in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/netty4.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer client=\"netty4\" />\n```\n\n----------------------------------------\n\nTITLE: Building Internal ID in Dubbo Model Hierarchy\nDESCRIPTION: Method to build an internal ID for models in the Dubbo hierarchy. The IDs follow a hierarchical pattern where FrameworkModel is 1, ApplicationModel is 1.1, and ModuleModel is 1.1.1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n protected String buildInternalId(String parentInternalId, long childIndex) {\n        // FrameworkModel    1\n        // ApplicationModel  1.1\n        // ModuleModel       1.1.1\n        if (StringUtils.hasText(parentInternalId)) {\n            return parentInternalId + \".\" + childIndex;\n        } else {\n            return \"\" + childIndex;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Implements the DemoProvider interface with business logic for each method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo2-js.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoProviderImpl implements DemoProvider {\n    public String sayHello(String name) {\n        System.out.println(\"[\" + new SimpleDateFormat(\"HH:mm:ss\").format(new Date()) + \"] Hello \" + name + \", request from consumer: \" + RpcContext.getContext().getRemoteAddress());\n        return \"Hello \" + name + \", response form provider: \" + RpcContext.getContext().getLocalAddress();\n    }\n    @Override\n    public String echo()  {\n        System.out.println(\"receive....\");\n        return \"pang\";\n    }\n    @Override\n    public void test() {\n        System.out.println(\"test\");\n    }\n    @Override\n    public UserResponse getUserInfo(UserRequest request) {\n        System.out.println(request);\n        UserResponse response = new UserResponse();\n        response.setStatus(\"ok\");\n        Map<String, String> map = new HashMap<String, String>();\n        map.put(\"id\", \"1\");\n        map.put(\"name\", \"test\");\n        response.setInfo(map);\n        return response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol with Host and Port in XML\nDESCRIPTION: Shows how to explicitly set both the host and port for the Dubbo protocol using XML configuration. This allows specifying a custom host, which can be an IP address or a domain name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/set-host.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20890\" host=\"www.example.com\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Control Plane\nDESCRIPTION: Commands to download and run dubbo-control-plane for deployment verification\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/release/downloadDubbo.sh | sh -\ncd dubbo-$version/bin\n```\n\nLANGUAGE: shell\nCODE:\n```\n./dubbo-cp run\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Kubernetes Service Troubleshooting\nDESCRIPTION: This command generates a stack trace for a Java process, which can be used to analyze and diagnose issues with unavailable services in a Kubernetes environment. The output is redirected to a log file for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/1/21.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Defining Service Using Protobuf IDL\nDESCRIPTION: Example of defining an RPC service using Protobuf IDL, suitable for cross-language development scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.springboot.demo.idl;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Service URL Export Logic in ServiceConfig\nDESCRIPTION: The implementation that exports service URLs for all configured protocols. It registers the service in the module repository, creates provider models, loads registry URLs, and exports the service for each protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n private void doExportUrls() {\n        //模块服务存储库\n        ModuleServiceRepository repository = getScopeModel().getServiceRepository();\n        ServiceDescriptor serviceDescriptor;\n        //ref为服务实现类型 这里对应我们例子的DemoServiceImpl\n        final boolean serverService = ref instanceof ServerService;\n        if(serverService){\n            serviceDescriptor=((ServerService) ref).getServiceDescriptor();\n            repository.registerService(serviceDescriptor);\n        }else{\n        \t//我们代码走这个逻辑 注册服务 这个注册不是向注册中心注册 这个是解析服务接口将服务方法等描述信息存放在了服务存储ModuleServiceRepository类型对象的成员变量services中\n            serviceDescriptor = repository.registerService(getInterfaceClass());\n        }\n        //提供者领域模型， 提供者领域模型 封装了一些提供者需要的就基本属性同时内部解析封装方法信息 ProviderMethodModel 列表 ， 服务标识符 格式group/服务接:版本号\n        providerModel = new ProviderModel(getUniqueServiceName(),\n        \t//服务实现类DemoServiceImpl\n            ref,\n            //服务描述符 描述符里面包含了服务接口的方法信息，不过服务接口通过反射也可以拿到方法信息\n            serviceDescriptor,\n            //服务配置\n            this,\n            //当前所处模型\n            getScopeModel(),\n            //当前服务接口的元数据对象\n            serviceMetadata);\n\t\t\n\t\t//模块服务存储库存储提供者模型对象ModuleServiceRepository\n        repository.registerProvider(providerModel);\n\t\t//获取配置的注册中心列表 ，同时将注册中心配置转URL （在Dubbo中URL就是配置信息的一种形式）\n\t\t//这里会获取到两个  由dubbo.application.register-mode 双注册配置决定\n\t\t//注册中心 registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-api-provider&dubbo=2.0.2&pid=9008&registry=zookeeper&release=3.0.8&timestamp=1653703292768\n\t  //service-discovery-registry://8.131.79.126:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-api-provider&dubbo=2.0.2&pid=10275&registry=zookeeper&release=3.0.8&timestamp=1653704425920\n\t  //参数dubbo是dubbo协议的版本不是Dubbo版本 Dubbo RPC protocol version, for compatibility, it must not be between 2.0.10 ~ 2.6.2\n\t   //这里后面详细说下 服务双注册  dubbo.application.register-mode\n        List<URL> registryURLs = ConfigValidationUtils.loadRegistries(this, true);\n\n        for (ProtocolConfig protocolConfig : protocols) {\n            String pathKey = URL.buildKey(getContextPath(protocolConfig)\n                    .map(p -> p + \"/\" + path)\n                    .orElse(path), group, version);\n            // stub service will use generated service name\n            if(!serverService) {\n                // In case user specified path, register service one more time to map it to path.\n                //模块服务存储库ModuleServiceRepository存储服务接口信息\n               repository.registerService(pathKey, interfaceClass);\n            }\n            //导出根据协议导出配置到注册中心\n            doExportUrlsFor1Protocol(protocolConfig, registryURLs);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: createDiscovery Method in ZookeeperServiceDiscoveryFactory\nDESCRIPTION: Implementation of createDiscovery method in ZookeeperServiceDiscoveryFactory that creates a new ZookeeperServiceDiscovery instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    protected ServiceDiscovery createDiscovery(URL registryURL) {\n        return new ZookeeperServiceDiscovery(applicationModel, registryURL);\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: MetricsCat Class Definition for Metrics Event Listener Management\nDESCRIPTION: Definition of the MetricsCat class which functions as a factory for creating event listeners for specific metrics. It captures the relationship between metrics keys, place types, and metrics collectors to create appropriate listeners.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MetricsCat {\n\n    private MetricsPlaceType placeType;\n    private final Function<CombMetricsCollector<TimeCounterEvent>, AbstractMetricsListener> eventFunc;\n\n    public MetricsCat(MetricsKey metricsKey, BiFunction<MetricsKey, CombMetricsCollector<TimeCounterEvent>, AbstractMetricsListener> biFunc) {\n        this.eventFunc = collector -> biFunc.apply(metricsKey, collector);\n    }\n\n    public MetricsCat(MetricsKey metricsKey, TpFunction<MetricsKey, MetricsPlaceType, CombMetricsCollector<TimeCounterEvent>, AbstractMetricsListener> tpFunc) {\n        this.eventFunc = collector -> tpFunc.apply(metricsKey, placeType, collector);\n    }\n\n    public MetricsCat setPlaceType(MetricsPlaceType placeType) {\n        this.placeType = placeType;\n        return this;\n    }\n\n    public Function<CombMetricsCollector<TimeCounterEvent>, AbstractMetricsListener> getEventFunc() {\n        return eventFunc;\n    }\n\n    //一个接受三个入参，一个返回值的函数接口。通过构造函数我们可以知道这三个入参分别是MetricsKey, MetricsPlaceType, CombMetricsCollector<TimeCounterEvent>，返回值为AbstractMetricsListener。\n    @FunctionalInterface\n    public interface TpFunction<T, U, K, R> {\n        R apply(T t, U u, K k);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Services with Default Registry Association\nDESCRIPTION: Example of defining Dubbo services using annotations that will automatically register with all global default registries without specifying registry IDs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {}\n\n@DubboService\npublic class HelloServiceImpl implements HelloService {}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Provider with Health Probes in Kubernetes\nDESCRIPTION: This deployment manifest creates a Dubbo provider application with 3 replicas using the specified container image. It configures liveness, readiness, and startup probes on port 22222 for health monitoring and uses the previously defined service account for RBAC permissions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dubbo-samples-apiserver-provider\n  namespace: dubbo-demo\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dubbo-samples-apiserver-provider\n  template:\n    metadata:\n      labels:\n        app: dubbo-samples-apiserver-provider\n    spec:\n      serviceAccountName: dubbo-sa\n      containers:\n        - name: server\n          image: apache/dubbo-deemo:dubbo-samples-apiserver-provider_0.0.1\n          ports:\n            - containerPort: 20880\n          livenessProbe:\n            httpGet:\n              path: /live\n              port: 22222\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 22222\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          startupProbe:\n            httpGet:\n              path: /startup\n              port: 22222\n            failureThreshold: 30\n            periodSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Token Authorization in Dubbo (YAML)\nDESCRIPTION: Demonstrates how to add token verification at the registry center to control permissions using either a UUID or specific token value. This prevents consumers from bypassing the registry center to access providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    token: true #UUID\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    token: 123456\n```\n\n----------------------------------------\n\nTITLE: Using ls Command to List Dubbo Services\nDESCRIPTION: The ls command lists all services provided and consumed by Dubbo, showing Provider and Consumer services along with registration status and address counts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>ls\nAs Provider side:\n+------------------------------------------------------------------------+---------------------+\n|                          Provider Service Name                         |         PUB         |\n+------------------------------------------------------------------------+---------------------+\n|DubboInternal - UserRead/org.apache.dubbo.metadata.MetadataService:1.0.0|                     |\n+------------------------------------------------------------------------+---------------------+\n|               com.dubbo.dubbointegration.UserReadService               |nacos-A(Y)/nacos-I(Y)|\n+------------------------------------------------------------------------+---------------------+\nAs Consumer side:\n+-----------------------------------------+-----------------+\n|          Consumer Service Name          |       NUM       |\n+-----------------------------------------+-----------------+\n|com.dubbo.dubbointegration.BackendService|nacos-AF(I-2,A-2)|\n+-----------------------------------------+-----------------+\n\n```\n\n----------------------------------------\n\nTITLE: Getting Bean from ScopeBeanFactory in Java\nDESCRIPTION: This method retrieves a bean from the current scope or parent scope if not found in the current scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\npublic <T> T getBean(String name, Class<T> type) {\n        T bean = getBeanInternal(name, type);\n        if (bean == null && parent != null) {\n            return parent.getBean(name, type);\n        }\n        return bean;\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application-level Metadata from Zookeeper\nDESCRIPTION: Shell command to retrieve application-level metadata stored in Zookeeper using zkCli.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 33] get /dubbo/metadata/demo-provider/da3be833baa2088c5f6776fb7ab1a436\n```\n\n----------------------------------------\n\nTITLE: Setting up VM Binary Path\nDESCRIPTION: Creates symbolic link for dubbo-admin binary in VM installation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nln -s dubbo-admin-0.1.0/bin/dubbo-admin /usr/local/bin/dubbo-admin\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider Application\nDESCRIPTION: Shell commands to clone the Dubbo samples repository and start the provider application for testing APISIX integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone -b master --depth 1 https://github.com/apache/dubbo-samples\n$ cd dubbo-samples/2-advanced/dubbo-samples-gateway/dubbo-samples-gateway-apisix/dubbo-samples-gateway-apisix-dubbo\n\n$ mvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.gateway.apisix.dubbo.provider.ProviderApplication\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo API Interface\nDESCRIPTION: Java interface definition for the service API that will be shared between provider and consumer. This simple interface defines a single method for the demo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoapi;\n\npublic interface HelloService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Service Using ServiceConfig in Java\nDESCRIPTION: This snippet demonstrates how to publish a service using ServiceConfig in Dubbo. It sets up a DemoService with version 1.0.0 and exports it.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n    demoServiceConfig.setInterface(DemoService.class);\n    demoServiceConfig.setRef(new DemoServiceImpl());\n    demoServiceConfig.setVersion(\"1.0.0\");\n\n    demoServiceConfig.export(); // this service will be registered to the default instance of DubboBootstrap.getInstance()\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Service Using ServiceConfig in Java\nDESCRIPTION: This snippet demonstrates how to publish a service using ServiceConfig in Dubbo. It sets up a DemoService with version 1.0.0 and exports it.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/api.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();\n    demoServiceConfig.setInterface(DemoService.class);\n    demoServiceConfig.setRef(new DemoServiceImpl());\n    demoServiceConfig.setVersion(\"1.0.0\");\n\n    demoServiceConfig.export(); // this service will be registered to the default instance of DubboBootstrap.getInstance()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dubbo Host and Port via Environment Variables\nDESCRIPTION: Demonstrates how to use environment variables to configure Dubbo's host and port settings. This is particularly useful in Docker environments where different addresses are needed for binding and registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDUBBO_IP_TO_REGISTRY // IP address to register with the registry\nDUBBO_PORT_TO_REGISTRY // Port to register with the registry\nDUBBO_IP_TO_BIND // IP address to bind for listening\nDUBBO_PORT_TO_BIND // Port to bind for listening\n\n// Protocol-specific examples\nHESSIAN_DUBBO_PORT_TO_BIND // Port to bind for Hessian protocol\nDUBBO_DUBBO_PORT_TO_BIND // Port to bind for Dubbo protocol\nHESSIAN_DUBBO_IP_TO_REGISTRY // IP to register for Hessian protocol\nDUBBO_DUBBO_IP_TO_REGISTRY // IP to register for Dubbo protocol\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Configuration for QOS\nDESCRIPTION: Shows how to configure QOS parameters in Spring Boot applications using application.properties or application.yml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qos-enable=true\ndubbo.application.qos-port=33333\ndubbo.application.qos-accept-foreign-ip=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Simplified Registry Data in Dubbo 2.7\nDESCRIPTION: XML configuration to enable simplified mode for the registry in Dubbo 2.7, which reduces the amount of data stored in the registry by only keeping essential parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\" simplified=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Interface Redis Service Configuration\nDESCRIPTION: Illustrates how to configure Redis service reference using a custom interface in Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"com.foo.StoreService\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Defining AccountService Interface in Java for User Balance Management\nDESCRIPTION: Interface defining the account service responsible for managing user account balances. It contains a single method that deducts money from a user's account.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface AccountService {\n\n    /**\n     * Debit from user account\n     */\n    void debit(String userId, int money);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TUN Device\nDESCRIPTION: Command to create a TUN network interface device using OpenVPN with device name tun0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo openvpn --mktun --dev tun0\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache File Size Properties\nDESCRIPTION: System properties that control the maximum cache file size in Dubbo. The default maximum file size is Long.MAX_VALUE (2^63-1).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/5.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.mapping.cache.maxFileSize\ndubbo.meta.cache.maxFileSize\n```\n\n----------------------------------------\n\nTITLE: Available Configuration Center Implementations in Dubbo\nDESCRIPTION: Lists the factory implementations available for different configuration center providers, including Zookeeper, Nacos, Etcd, Consul, Apollo, and FileSystem.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/config-center.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* `org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory`\n* `org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory`\n* `org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfigurationFactory`\n* `org.apache.dubbo.configcenter.consul.ConsulDynamicConfigurationFactory`\n* `org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory`\n* `org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory`\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Troubleshooting in Bash\nDESCRIPTION: This command generates a stack trace log file for a Java process to help diagnose issues related to non-existent Kubernetes Pods. It uses the jstack utility to capture the stack information of a specified process ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/20.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: SHA512 Signature Generation\nDESCRIPTION: Commands for generating SHA512 signatures for source and binary release packages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nshasum -a 512 apache-dubbo-${release_version}-src.zip >> apache-dubbo-${release_version}-src.zip.sha512\nshasum -b -a 512 apache-dubbo-${release_version}-bin.zip >> apache-dubbo-${release_version}-bin.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Failover Strategy for Service Provider in Dubbo\nDESCRIPTION: XML configuration for setting the failover strategy with retry count at the method level for a service provider. This allows fine-grained control of retry behavior for specific methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoService\"cluster=\"failover\">\n     <dubbo:method name=\"sayHello\" retries=\"2\" />\n </dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: 刷新 Invoker 列表的核心实现\nDESCRIPTION: refreshInvoker 方法根据传入的 invokerUrls 列表刷新 Invoker 列表。它处理禁用服务的情况，将 URL 转换为 Invoker，建立方法名到 Invoker 列表的映射，并销毁不再使用的 Invoker 实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void refreshInvoker(List<URL> invokerUrls) {\n    // invokerUrls 仅有一个元素，且 url 协议头为 empty，此时表示禁用所有服务\n    if (invokerUrls != null && invokerUrls.size() == 1 && invokerUrls.get(0) != null\n            && Constants.EMPTY_PROTOCOL.equals(invokerUrls.get(0).getProtocol())) {\n        // 设置 forbidden 为 true\n        this.forbidden = true;\n        this.methodInvokerMap = null;\n        // 销毁所有 Invoker\n        destroyAllInvokers();\n    } else {\n        this.forbidden = false;\n        Map<String, Invoker<T>> oldUrlInvokerMap = this.urlInvokerMap;\n        if (invokerUrls.isEmpty() && this.cachedInvokerUrls != null) {\n            // 添加缓存 url 到 invokerUrls 中\n            invokerUrls.addAll(this.cachedInvokerUrls);\n        } else {\n            this.cachedInvokerUrls = new HashSet<URL>();\n            // 缓存 invokerUrls\n            this.cachedInvokerUrls.addAll(invokerUrls);\n        }\n        if (invokerUrls.isEmpty()) {\n            return;\n        }\n        // 将 url 转成 Invoker\n        Map<String, Invoker<T>> newUrlInvokerMap = toInvokers(invokerUrls);\n        // 将 newUrlInvokerMap 转成方法名到 Invoker 列表的映射\n        Map<String, List<Invoker<T>>> newMethodInvokerMap = toMethodInvokers(newUrlInvokerMap);\n        // 转换出错，直接打印异常，并返回\n        if (newUrlInvokerMap == null || newUrlInvokerMap.size() == 0) {\n            logger.error(new IllegalStateException(\"urls to invokers error ...\"));\n            return;\n        }\n        // 合并多个组的 Invoker\n        this.methodInvokerMap = multiGroup ? toMergeMethodInvokerMap(newMethodInvokerMap) : newMethodInvokerMap;\n        this.urlInvokerMap = newUrlInvokerMap;\n        try {\n            // 销毁无用 Invoker\n            destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap);\n        } catch (Exception e) {\n            logger.warn(\"destroyUnusedInvokers error. \", e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class.forName() Usage in Java\nDESCRIPTION: This snippet shows the typical usage of Class.forName() method, which is often the source of the 'Reflection class not found' error. It's important to ensure that the className parameter refers to an existing class in the classpath.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/7.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nClass.forName(className)\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Provider\nDESCRIPTION: Configuration code for setting up TLS security on the Provider side. Includes options for server certificates and mutual TLS authentication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/tls.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSslConfig sslConfig = new SslConfig();\nsslConfig.setServerKeyCertChainPath(\"path to cert\");\nsslConfig.setServerPrivateKeyPath(args[1]);\n// 如果开启双向 cert 认证\nif (mutualTls) {\n  sslConfig.setServerTrustCertCollectionPath(args[2]);\n}\n\nProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo/grpc\");\nprotocolConfig.setSslEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplicationConfig in Java\nDESCRIPTION: Java code example for configuring serialization check status and serializable check.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setSerializeCheckStatus(\"STRICT\");\napplicationConfig.setAutoTrustSerializeClass(true);\napplicationConfig.setTrustSerializeClassLevel(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Dubbo Application Compiler in XML\nDESCRIPTION: This XML configuration sets the Dubbo application compiler to use JDK. When this is set, the Javassist dependency is not needed for bytecode generation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/dependencies.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application compiler=\"jdk\" />\n```\n\n----------------------------------------\n\nTITLE: TypeDefinitionBuilder.initBuilders Example\nDESCRIPTION: A specific example showing how Dubbo's extension mechanism is used to initialize TypeBuilder instances in the TypeDefinitionBuilder class. This demonstrates getting all supported extension instances of a specific type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static void initBuilders(FrameworkModel model) {\n        Set<TypeBuilder> tbs = model.getExtensionLoader(TypeBuilder.class).getSupportedExtensionInstances();\n        BUILDERS = new ArrayList<>(tbs);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing StorageService in Java\nDESCRIPTION: Implementation of the StorageService interface. This class handles the actual storage deduction by updating the storage database through the StorageDAO.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class StorageServiceImpl implements StorageService {\n\n  private StorageDAO storageDAO;\n  \n    @Override\n    public void deduct(String commodityCode, int count) {\n        Storage storage = new Storage();\n        storage.setCount(count);\n        storage.setCommodityCode(commodityCode);\n        storageDAO.update(storage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Provider Deployment\nDESCRIPTION: Commands to view the list of provider pods and check deployment logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# View pod list\nkubectl get pods -l app=dubbo-samples-mesh-provider\n\n# View pod deployment logs\nkubectl logs your-pod-id\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Configuration with Logs in Dubbo\nDESCRIPTION: Log example showing the registry configuration for a Dubbo service. This helps verify the registry settings that a Dubbo service is using.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 09:36:46:046 CST] main  INFO context.ConfigManager:  [DUBBO] <dubbo:registry address=\"nacos://127.0.0.1:8848\" protocol=\"nacos\" port=\"8848\" />, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Cluster Fault Tolerance Strategy in Dubbo\nDESCRIPTION: Java implementation of a custom Cluster interface to create a user-defined fault tolerance strategy. This example shows the skeleton code needed to extend Dubbo's built-in fault tolerance mechanisms.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.cluster.Cluster;\nimport org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;\nimport org.apache.dubbo.rpc.cluster.Directory;\nimport org.apache.dubbo.rpc.cluster.LoadBalance;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.RpcException;\n\nimport java.util.List;\n\npublic class XxxCluster implements Cluster {\n\n    @Override\n    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {\n        return new AbstractClusterInvoker<T>() {\n            @Override\n            protected Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n                // your custimzed fault tolarence strategy goes here\n            }\n        };\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Parameter Transformation\nDESCRIPTION: Plugin responsible for transforming HTTP request parameters into RPC service parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.base.RpcParamTransformPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: MigrationRuleListener onRefer Method Implementation\nDESCRIPTION: The onRefer method creates a MigrationRuleHandler for an invoker and initializes migration rule execution. This handler manages the migration strategy for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void onRefer(RegistryProtocol registryProtocol, ClusterInvoker<?> invoker, URL consumerUrl, URL registryURL) {\n       //创建一个对应invoker对象的MigrationRuleHandler类型对象 然后将其存放在缓存Map<MigrationInvoker, MigrationRuleHandler>类型对象handles中\n        MigrationRuleHandler<?> migrationRuleHandler = handlers.computeIfAbsent((MigrationInvoker<?>) invoker, _key -> {\n            ((MigrationInvoker<?>) invoker).setMigrationRuleListener(this);\n            return new MigrationRuleHandler<>((MigrationInvoker<?>) invoker, consumerUrl);\n        });\n\n      //迁移规则执行 rule是封装了迁移的配置规则的信息对应类型MigrationRule类型，在初始化对象的时候进行了配置初始化\n        migrationRuleHandler.doMigrate(rule);\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling Configuration Center in Dubbo-Go\nDESCRIPTION: This snippet demonstrates how to enable and configure a configuration center (Zookeeper in this case) in a Dubbo-Go application using the dubbo.WithConfigCenter() function.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/configuration/remote.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, err := dubbo.NewInstance(\n    dubbo.WithConfigCenter(\n    \tconfig_center.WithZookeeper(),\n    \tconfig_center.WithDataID(\"dubbo-go-samples-configcenter-zookeeper-server\"),\n    \tconfig_center.WithAddress(\"127.0.0.1:2181\"),\n    \tconfig_center.WithGroup(\"dubbogo\"),\n\t),\n)\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hystrix on Dubbo Consumer\nDESCRIPTION: Java code showing how to configure Hystrix on the Dubbo consumer side. It references a remote service and adds a fallback method that executes when the service call fails.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Reference(version = \"1.0.0\")\n    private HelloService demoService;\n\n    @HystrixCommand(fallbackMethod = \"reliable\")\n    public String doSayHello(String name) {\n        return demoService.sayHello(name);\n    }\n    public String reliable(String name) {\n        return \"hystrix fallback value\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application Name via JVM Parameter in Java\nDESCRIPTION: Sets the Dubbo application name using a JVM parameter. This is part of the core Dubbo configuration and identifies the application in the Dubbo ecosystem.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n-Ddubbo.application.name=\"dubbo-demo\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Metadata Center Configuration in Java\nDESCRIPTION: This snippet shows how the DefaultApplicationDeployer class parses the metadata center configuration, using registry center addresses as metadata center if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate void startMetadataCenter() {\n    useRegistryAsMetadataCenterIfNecessary();\n    //...省略掉其他代码防止受到干扰\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Invocation in Spring XML for Dubbo\nDESCRIPTION: Demonstrates how to declare a generic service reference in Spring configuration for Dubbo. The 'generic' attribute is set to 'true' to enable generic invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" generic=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Registry with Simple Address\nDESCRIPTION: Basic configuration for Dubbo to use Consul as registry. This example shows how to specify a single Redis server address using the address attribute.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/consul.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Check Mode via Properties\nDESCRIPTION: Shows how to configure serialization check status using properties files or system properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.serialize-check-status=STRICT\n```\n\nLANGUAGE: properties\nCODE:\n```\n-Ddubbo.application.serialize-check-status=STRICT\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Documentation Page\nDESCRIPTION: YAML frontmatter block defining the page type, title, link title and weight for the documentation section of the Dubbo website.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/facade-docs/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: docs\ntitle: \"Documentation\"\nlinkTitle: \"Documentation\"\nweight: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties for Service Mesh\nDESCRIPTION: This properties file configures the Dubbo provider for use in a service mesh environment, including application name, protocol, and QoS settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\n# provider\ndubbo.application.name=dubbo-samples-mesh-provider\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=N/A\ndubbo.protocol.name=tri\ndubbo.protocol.port=50052\ndubbo.application.qosEnable=true\n# To allow Kubernetes cluster to access the probe normally, QOS must be enabled for remote access. This operation may pose security risks; please assess carefully before enabling.\ndubbo.application.qosAcceptForeignIp=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Protocol Options\nDESCRIPTION: Demonstrates a comprehensive configuration of the Dubbo protocol with various options including server implementation, serialization method, thread pool settings, buffer sizes, and maximum payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"9090\" server=\"netty\" client=\"netty\" codec=\"dubbo\" serialization=\"hessian2\" charset=\"UTF-8\" threadpool=\"fixed\" threads=\"100\" queues=\"0\" iothreads=\"9\" buffer=\"8192\" accepts=\"1000\" payload=\"8388608\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Dubbo Remote Service\nDESCRIPTION: Java code snippet showing how to reference a Dubbo remote service using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ConsumerApplication {\n    @DubboReference\n    private DemoService demoService;\n}\n```\n\n----------------------------------------\n\nTITLE: Using jstack to collect thread dump for Stream Closure Exception diagnosis\nDESCRIPTION: Command for capturing stack information using jstack to analyze the Stream Closure Exception. This command dumps the complete thread stack of a Java process to a log file for further diagnosis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/5.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Adding REST Protocol Support Dependencies\nDESCRIPTION: Maven dependency configuration for maintaining REST protocol compatibility in Dubbo 3.3.x.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-rest</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring REST Service Provider\nDESCRIPTION: Implementation class for the Spring REST service interface using @DubboService annotation. Contains business logic for handling various REST endpoints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(interfaceClass = SpringRestDemoService.class ,protocol = \"rest\")\npublic class SpringRestDemoServiceImpl implements SpringRestDemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello, \" + name;\n    }\n    \n    // ... additional implementations\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Parameters with RpcContext in Java\nDESCRIPTION: Shows how to use generic type parameters to directly retrieve specific request/response types from Dubbo's RpcContext without casting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse(HttpServletResponse.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Telnet Handler in Java\nDESCRIPTION: Example of implementing a custom TelnetHandler in Java for Apache Dubbo. This class defines the behavior of a new Telnet command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/telnet-handler.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.telnet.TelnetHandler;\n \n@Help(parameter=\"...\", summary=\"...\", detail=\"...\")\n \npublic class XxxTelnetHandler implements TelnetHandler {\n    public String telnet(Channel channel, String message) throws RemotingException {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logger Interface Definition in Dubbo-Go\nDESCRIPTION: The interface definition for the logger component in Dubbo-Go, showing all available logging methods at different severity levels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Logger interface {\n\tInfo(args ...interface{})\n\tWarn(args ...interface{})\n\tError(args ...interface{})\n\tDebug(args ...interface{})\n\tFatal(args ...interface{})\n\n\tInfof(fmt string, args ...interface{})\n\tWarnf(fmt string, args ...interface{})\n\tErrorf(fmt string, args ...interface{})\n\tDebugf(fmt string, args ...interface{})\n\tFatalf(fmt string, args ...interface{})\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Configuration for Async Processor\nDESCRIPTION: Maven dependency and plugin configuration for dubbo-async-processer\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>dubbo-async-processer</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n</dependency>\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.7.0</version>\n    <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <annotationProcessorPaths>\n            <path>\n                <groupId>com.alibaba</groupId>\n                <artifactId>dubbo-async-processer</artifactId>\n                <version>1.0.0-SNAPSHOT</version>\n            </path>\n        </annotationProcessorPaths>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Group Isolation in YAML Format\nDESCRIPTION: YAML configuration for setting up group isolation in Zookeeper for Dubbo, allowing logical separation of environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo\n registry\n   address: zookeeper://localhost:2181\n   group: daily1\n```\n\n----------------------------------------\n\nTITLE: Network Connectivity Check using CMD Commands\nDESCRIPTION: Example of using the ping command to check network connectivity between client and server in a Dubbo environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/6/1.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`ping`\n```\n\n----------------------------------------\n\nTITLE: Defining a RESTful Service Interface with JAX-RS Annotations in Java\nDESCRIPTION: This code snippet demonstrates how to define a Dubbo service interface with JAX-RS annotations for RESTful API exposure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_50\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\")\npublic interface UserService {\n    \n    @GET\n    @Path(\"{id : \\\\d+}\")\n    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n    User getUser(@PathParam(\"id\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reconnection and Disconnection Logic in Dubbo ReconnectTimerTask\nDESCRIPTION: This code snippet demonstrates the implementation of the doTask method in Dubbo's ReconnectTimerTask. It checks if the last read time exceeds the heartbeat timeout and performs reconnection for clients or disconnection for servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprotected void doTask(Channel channel) {\n    Long lastRead = lastRead(channel);\n    Long now = now();\n    if (lastRead != null && now - lastRead > heartbeatTimeout) {\n        if (channel instanceof Client) {\n            ((Client) channel).reconnect();\n        } else {\n            channel.close();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 on Consumer Side in Dubbo\nDESCRIPTION: Sets the client implementation to Netty4 for consumers in Dubbo configuration. This enables the consumer to use Netty4 for communicating with providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/netty4.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer client=\"netty4\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven API Package Dependencies\nDESCRIPTION: Maven POM configuration for the API package defining the service interface\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo-api</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Defining Java User Model\nDESCRIPTION: Java class definition for User model with serializable properties including id, name, age and timestamp.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic-2.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n\tprivate String id;\n\n  private String name;\n\n  private int age;\n\n  private Date time = new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying User-Based Routing for Reviews Service with Kubectl\nDESCRIPTION: Command to enable user-based routing where traffic from user 'jason' is routed to reviews:v2 while all other users are routed to reviews:v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@\n```\n\n----------------------------------------\n\nTITLE: Defining RpcContext Structure for Seata Go\nDESCRIPTION: This snippet defines the RpcContext structure used to identify connection information in Seata Go. It includes fields for version, transaction service group, client role, application ID, client ID, resource sets, and the Getty session.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-seata.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype RpcContext struct {\n  Version                 string\n  TransactionServiceGroup string\n  ClientRole              meta.TransactionRole\n  ApplicationId           string\n  ClientId                string\n  ResourceSets            *model.Set\n  Session                 getty.Session\n}\n```\n\n----------------------------------------\n\nTITLE: TypeBuilder Interface Definition\nDESCRIPTION: Defines the TypeBuilder interface, which is an SPI extension used for building type definitions in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@SPI(scope = ExtensionScope.FRAMEWORK)\npublic interface TypeBuilder extends Prioritized {\n\n    /**\n     * Whether the build accept the class passed in.\n     */\n    boolean accept(Class<?> clazz);\n\n    /**\n     * Build type definition with the type or class.\n     */\n    TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinition> typeCache);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Buffer Code Generation with build.rs\nDESCRIPTION: Build script that configures the Dubbo Protocol Buffer code generator to compile the proto files and generate Rust code stubs for the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// ./build.rs\nfn main() {\n    dubbo_build::prost::configure()\n        .compile(&[\"proto/greeter.proto\"], &[\"proto/\"])\n        .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Admin configuration YAML\nDESCRIPTION: Comprehensive YAML configuration for Dubbo Admin, including environment settings, storage options, and external service configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment: universal # ENV: DUBBO_ENVIRONMENT\nmode: standalone # ENV: DUBBO_MODE\n\nstore:\n  type: memory # ENV: DUBBO_STORE_TYPE\n\n  kubernetes:\n    systemNamespace: dubbo-system # ENV: DUBBO_STORE_KUBERNETES_SYSTEM_NAMESPACE\n\n  mysql:\n    host: 127.0.0.1 # ENV: DUBBO_STORE_POSTGRES_HOST\n    port: 15432 # ENV: DUBBO_STORE_POSTGRES_PORT\n    user: dubbo # ENV: DUBBO_STORE_POSTGRES_USER\n    password: dubbo # ENV: DUBBO_STORE_POSTGRES_PASSWORD\n    dbName: dubbo # ENV: DUBBO_STORE_POSTGRES_DB_NAME\n    connectionTimeout: 5 # ENV: DUBBO_STORE_POSTGRES_CONNECTION_TIMEOUT\n    maxOpenConnections: 50 # ENV: DUBBO_STORE_POSTGRES_MAX_OPEN_CONNECTIONS\n    maxIdleConnections: 50  # ENV: DUBBO_STORE_POSTGRES_MAX_IDLE_CONNECTIONS\n    tls:\n      mode: disable # ENV: DUBBO_STORE_POSTGRES_TLS_MODE\n      certPath: # ENV: DUBBO_STORE_POSTGRES_TLS_CERT_PATH\n      keyPath: # ENV: DUBBO_STORE_POSTGRES_TLS_KEY_PATH\n      caPath: # ENV: DUBBO_STORE_POSTGRES_TLS_ROOT_CERT_PATH\n    minReconnectInterval: \"10s\" # ENV: DUBBO_STORE_POSTGRES_MIN_RECONNECT_INTERVAL\n    maxReconnectInterval: \"60s\" # ENV: DUBBO_STORE_POSTGRES_MAX_RECONNECT_INTERVAL\nserver:\n\tport: 38080\nregistry:\n  address: xxx\nmetadata-center:\n  address: xxx\nconfig-center:\n\taddress: xxx\nexternal-services:\n  prometheus:\n\t\t  url: \"http://metrics.telemetry:9090/\"\n  tracing:\n    enabled: true\n    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'\n    use_grpc: true\n    url: 'http://my-jaeger-host/jaeger'\n\tgrafana:\n      enabled: true\n      in_cluster_url: 'http://grafana.telemetry:3000/'\n      url: 'http://my-ingress-host/grafana'\n\n# 更多配置\n```\n\n----------------------------------------\n\nTITLE: 使用Properties格式的Dubbo配置示例（应用级别）\nDESCRIPTION: 展示了Dubbo中应用级别的配置格式，包括应用名称、注册中心地址和协议端口等基本配置项。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=demo-provider\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.port=-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Buffer Code Generation with build.rs\nDESCRIPTION: Build script that configures the Dubbo Protocol Buffer code generator to compile the proto files and generate Rust code stubs for the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// ./build.rs\nfn main() {\n    dubbo_build::prost::configure()\n        .compile(&[\"proto/greeter.proto\"], &[\"proto/\"])\n        .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Size for Dubbo REST Services\nDESCRIPTION: XML configuration that sets the thread pool size for REST services in Dubbo. This controls the number of concurrent requests that can be processed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" threads=\"500\"/>\n```\n\n----------------------------------------\n\nTITLE: Launching Zipkin Container\nDESCRIPTION: Docker command to start a Zipkin server instance on port 9411\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/zipkin.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 9411:9411 --name zipkin openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Building RPC Invocations for Dubbo REST Requests\nDESCRIPTION: This code snippet shows the RPCInvocationBuilder class, which is responsible for constructing RPC invocations from REST requests in a Dubbo service. It handles parameter parsing and invocation context setup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n{\n    private static final ParamParserManager paramParser = new ParamParserManager();\n\n    public static Pair<RpcInvocation, Invoker> build(RequestFacade request, Object servletRequest, Object servletResponse) {\n        // 获取invoker\n        Pair<Invoker, RestMethodMetadata> invokerRestMethodMetadataPair = getRestMethodMetadata(request);\n\n        RpcInvocation rpcInvocation = createBaseRpcInvocation(request, invokerRestMethodMetadataPair.getSecond());\n\n        ProviderParseContext parseContext = createParseContext(request, servletRequest, servletResponse, invokerRestMethodMetadataPair.getSecond());\n        // 参数构建\n        Object[] args = paramParser.providerParamParse(parseContext);\n\n        rpcInvocation.setArguments(args);\n\n        return Pair.make(rpcInvocation, invokerRestMethodMetadataPair.getFirst());\n    }\n\n    private static ProviderParseContext createParseContext(RequestFacade request, Object servletRequest, Object servletResponse, RestMethodMetadata restMethodMetadata) {\n        ProviderParseContext parseContext = new ProviderParseContext(request);\n        parseContext.setResponse(servletResponse);\n        parseContext.setRequest(servletRequest);\n\n        Object[] objects = new Object[restMethodMetadata.getArgInfos().size()];\n        parseContext.setArgs(Arrays.asList(objects));\n        parseContext.setArgInfos(restMethodMetadata.getArgInfos());\n\n        return parseContext;\n    }\n\n    private static RpcInvocation createBaseRpcInvocation(RequestFacade request, RestMethodMetadata restMethodMetadata) {\n        RpcInvocation rpcInvocation = new RpcInvocation();\n\n        int localPort = request.getLocalPort();\n        String localAddr = request.getLocalAddr();\n        int remotePort = request.getRemotePort();\n        String remoteAddr = request.getRemoteAddr();\n\n        String HOST = request.getHeader(RestConstant.HOST);\n        String GROUP = request.getHeader(RestConstant.GROUP);\n\n        String PATH = request.getHeader(RestConstant.PATH);\n        String VERSION = request.getHeader(RestConstant.VERSION);\n\n        String METHOD = restMethodMetadata.getMethod().getName();\n        String[] PARAMETER_TYPES_DESC = restMethodMetadata.getMethod().getParameterTypes();\n\n        rpcInvocation.setParameterTypes(restMethodMetadata.getReflectMethod().getParameterTypes());\n\n        rpcInvocation.setMethodName(METHOD);\n        rpcInvocation.setAttachment(RestConstant.GROUP, GROUP);\n        rpcInvocation.setAttachment(RestConstant.METHOD, METHOD);\n        rpcInvocation.setAttachment(RestConstant.PARAMETER_TYPES_DESC, PARAMETER_TYPES_DESC);\n        rpcInvocation.setAttachment(RestConstant.PATH, PATH);\n        rpcInvocation.setAttachment(RestConstant.VERSION, VERSION);\n        rpcInvocation.setAttachment(RestConstant.HOST, HOST);\n        rpcInvocation.setAttachment(RestConstant.REMOTE_ADDR, remoteAddr);\n        rpcInvocation.setAttachment(RestConstant.LOCAL_ADDR, localAddr);\n        rpcInvocation.setAttachment(RestConstant.REMOTE_PORT, remotePort);\n        rpcInvocation.setAttachment(RestConstant.LOCAL_PORT, localPort);\n\n        Enumeration<String> attachments = request.getHeaders(RestConstant.DUBBO_ATTACHMENT_HEADER);\n\n        while (attachments != null && attachments.hasMoreElements()) {\n            String s =  attachments.nextElement();\n\n            String[] split = s.split(\"=\");\n\n            rpcInvocation.setAttachment(split[0], split[1]);\n        }\n\n        // TODO set path,version,group and so on\n        return rpcInvocation;\n    }\n\n    private static Pair<Invoker, RestMethodMetadata> getRestMethodMetadata(RequestFacade request) {\n        String path = request.getRequestURI();\n        String version = request.getHeader(RestConstant.VERSION);\n        String group = request.getHeader(RestConstant.GROUP);\n        int port = request.getIntHeader(RestConstant.REST_PORT);\n\n        return PathAndInvokerMapper.getRestMethodMetadata(path, version, group, port);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Admin configuration YAML\nDESCRIPTION: Comprehensive YAML configuration for Dubbo Admin, including environment settings, storage options, and external service configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment: universal # ENV: DUBBO_ENVIRONMENT\nmode: standalone # ENV: DUBBO_MODE\n\nstore:\n  type: memory # ENV: DUBBO_STORE_TYPE\n\n  kubernetes:\n    systemNamespace: dubbo-system # ENV: DUBBO_STORE_KUBERNETES_SYSTEM_NAMESPACE\n\n  mysql:\n    host: 127.0.0.1 # ENV: DUBBO_STORE_POSTGRES_HOST\n    port: 15432 # ENV: DUBBO_STORE_POSTGRES_PORT\n    user: dubbo # ENV: DUBBO_STORE_POSTGRES_USER\n    password: dubbo # ENV: DUBBO_STORE_POSTGRES_PASSWORD\n    dbName: dubbo # ENV: DUBBO_STORE_POSTGRES_DB_NAME\n    connectionTimeout: 5 # ENV: DUBBO_STORE_POSTGRES_CONNECTION_TIMEOUT\n    maxOpenConnections: 50 # ENV: DUBBO_STORE_POSTGRES_MAX_OPEN_CONNECTIONS\n    maxIdleConnections: 50  # ENV: DUBBO_STORE_POSTGRES_MAX_IDLE_CONNECTIONS\n    tls:\n      mode: disable # ENV: DUBBO_STORE_POSTGRES_TLS_MODE\n      certPath: # ENV: DUBBO_STORE_POSTGRES_TLS_CERT_PATH\n      keyPath: # ENV: DUBBO_STORE_POSTGRES_TLS_KEY_PATH\n      caPath: # ENV: DUBBO_STORE_POSTGRES_TLS_ROOT_CERT_PATH\n    minReconnectInterval: \"10s\" # ENV: DUBBO_STORE_POSTGRES_MIN_RECONNECT_INTERVAL\n    maxReconnectInterval: \"60s\" # ENV: DUBBO_STORE_POSTGRES_MAX_RECONNECT_INTERVAL\nserver:\n\tport: 38080\nregistry:\n  address: xxx\nmetadata-center:\n  address: xxx\nconfig-center:\n\taddress: xxx\nexternal-services:\n  prometheus:\n\t\t  url: \"http://metrics.telemetry:9090/\"\n  tracing:\n    enabled: true\n    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'\n    use_grpc: true\n    url: 'http://my-jaeger-host/jaeger'\n\tgrafana:\n      enabled: true\n      in_cluster_url: 'http://grafana.telemetry:3000/'\n      url: 'http://my-ingress-host/grafana'\n\n# 更多配置\n```\n\n----------------------------------------\n\nTITLE: 定义 Dubbo 服务接口\nDESCRIPTION: 在 Dubbo XML 配置中定义对外暴露的服务接口。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/v3-service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.basic.api.GreetingService\" ref=\"greetingService\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export with Java API\nDESCRIPTION: Java API configuration for setting up a protocol with port unification. Creates a ProtocolConfig object for Triple protocol and adds Dubbo as an extension protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nProtocolConfig config = new ProtocolConfig(CommonConstants.TRIPLE, -1);\n\nconfig.setExtProtocol(CommonConstants.DUBBO+\",\");\n```\n\n----------------------------------------\n\nTITLE: Removing Application Route Rules in Istio\nDESCRIPTION: This command removes the previously applied routing rules for the Bookinfo application, cleaning up the Istio configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Using Shared Logger Component\nDESCRIPTION: Shows how to use the shared logger component in business applications by importing and using the logger package.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport app_logger \"github.com/dubbogo/gost/log/logger\"\n\napp_logger.Info(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Proxy in XML\nDESCRIPTION: This XML snippet shows how to set the Dubbo consumer to use JDK proxy. Similar to the provider configuration, this eliminates the need for the Javassist dependency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/dependencies.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer proxy=\"jdk\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Interface in Java\nDESCRIPTION: This snippet shows how to implement a Dubbo service interface. It provides a basic implementation of the UserReadService interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic UserReadServiceImpl implements UserReadService{\n    public User getUserById(Long userId){\n        return xxx;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: License Compliance Check\nDESCRIPTION: Commands for checking third-party dependency licenses compliance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmvn license:add-third-party -Dlicense.useMissingFile\nfind . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL\n```\n\n----------------------------------------\n\nTITLE: 配置静态标签路由规则的 Provider XML 配置\nDESCRIPTION: 通过 XML 配置方式为 Dubbo 服务提供者指定静态标签，使用 dubbo:provider 或 dubbo:service 标签设置 tag 属性值为 \"gray\"。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider tag=\"gray\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo 3.2 Maven Dependency\nDESCRIPTION: The Maven dependency configuration for upgrading to Dubbo 3.2.0.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo REST Dependencies\nDESCRIPTION: Maven dependencies required for using Dubbo HTTP with different REST client implementations (okhttp or httpclient)\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-rpc-rest</artifactId>\n            <version>${dubbo-rpc-rest_version}</version>\n         </dependency>\n\n         <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>mockwebserver</artifactId>\n            <version>${okhttp_version}</version>\n         </dependency>\n         or\n         <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>${httpclient_version}</version>\n         </dependency>\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper with Docker Compose\nDESCRIPTION: Command to start the Zookeeper container in detached mode using the Docker Compose configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ./zookeeper.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Alternative Multicast Registry Configuration in Dubbo XML\nDESCRIPTION: Shows an alternative way to configure the Multicast registry in Dubbo XML, explicitly specifying the protocol as 'multicast'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/multicast.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry protocol=\"multicast\" address=\"224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Repeated Fields in Protobuf\nDESCRIPTION: Shows how to define an array (repeated field) in Protobuf. The example demonstrates a message with a repeated uint32 field, which translates to an ArrayList in Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VipIDToRidReq {\n    repeated uint32 vipID = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Zipkin Server and Viewing Output\nDESCRIPTION: Command to start the Zipkin server and example of the startup output, showing successful initialization and the port it's running on.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ java -jar zipkin.jar\nPicked up JAVA_TOOL_OPTIONS: -Djava.awt.headless=true\n                                    ********\n                                  **        **\n                                 *            *\n                                **            **\n                                **            **\n                                 **          **\n                                  **        **\n                                    ********\n                                      ****\n                                      ****\n        ****                          ****\n     ******                           ****                                 ***\n  ****************************************************************************\n    *******                           ****                                 ***\n        ****                          ****\n                                       **\n                                       **\n\n\n             *****      **     *****     ** **       **     **   **\n               **       **     **  *     ***         **     **** **\n              **        **     *****     ****        **     **  ***\n             ******     **     **        **  **      **     **   **\n\n:: Powered by Spring Boot ::         (v2.0.5.RELEASE)\n\n...\n\no.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) 9411 (http) with context path ''\n2018-10-10 18:40:31.605  INFO 21072 --- [           main] z.s.ZipkinServer                         : Started ZipkinServer in 6.835 seconds (JVM running for 8.35)\n```\n\n----------------------------------------\n\nTITLE: Caching Activated Class in Dubbo's ExtensionLoader\nDESCRIPTION: Method to cache the activated class during extension loading process. It handles both new and old versions of the Activate annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/7-Dubbo的SPI扩展机制之自动激活扩展Activate源码解析.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void cacheActivateClass(Class<?> clazz, String name) {\n    Activate activate = clazz.getAnnotation(Activate.class);\n    if (activate != null) {\n        cachedActivates.put(name, activate);\n    } else {\n        com.alibaba.dubbo.common.extension.Activate oldActivate = clazz.getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);\n        if (oldActivate != null) {\n            cachedActivates.put(name, oldActivate);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Dubbo Consumer\nDESCRIPTION: Shell commands to compile and run the Dubbo consumer application using Maven and Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ../dubbo-samples-spring-boot-consumer\nmvn clean package\njava -jar ./target/dubbo-samples-spring-boot-consumer-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Reference to the Dubbo Configuration Bean Initializer class in Java\nDESCRIPTION: Fully qualified class name reference for the Dubbo Configuration Bean Initializer that may be the source of initialization errors. This class is responsible for initializing Dubbo configuration beans in a Spring context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/5/39.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.spring.context.DubboConfigBeanInitializer\n```\n\n----------------------------------------\n\nTITLE: Configuring Delayed Service Registration in Java\nDESCRIPTION: Demonstrates how to configure delayed service registration using the @DubboService annotation with a delay parameter to allow service warm-up time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(delay = 5000)\npublic class DemoServiceImpl implements DemoService {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties\nDESCRIPTION: Application properties configuration for the Dubbo provider including service version, application name, protocol settings, and registry configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# Spring boot application\nspring.application.name = dubbo-provider-demo\nserver.port = 9090\nmanagement.port = 9091\n\n# Service version\ndemo.service.version = 1.0.0\n\n# Base packages to scan Dubbo Components (e.g @Service , @Reference)\ndubbo.scan.basePackages  = com.example.demoprovider\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id = dubbo-provider-demo\ndubbo.application.name = dubbo-provider-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id = dubbo\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = 12345\n\n## RegistryConfig Bean\ndubbo.registry.id = my-registry\ndubbo.registry.address = N/A\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in XML\nDESCRIPTION: Basic XML configuration for setting up Nacos registry with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"nacos://localhost:8848\" register-mode=\"instance\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating Ephemeral Nodes in Zookeeper with Curator Client in Java\nDESCRIPTION: This method creates an ephemeral node in Zookeeper using the Curator client. It has a flaw where it silently catches NodeExistsException without verifying if the existing node belongs to the current session, which can lead to registration failures during Zookeeper session expiration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-practice-from-guazi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    public void createEphemeral(String path) {\n        try {\n            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicast Parameter for Multicast in Dubbo XML\nDESCRIPTION: Shows how to set the 'unicast' parameter to false in Dubbo configuration to enable multiple consumers on the same machine to receive messages. This is necessary when multiple consumer processes are running on the same machine or when providers and consumers are on the same machine.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"demo-consumer\">\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:application>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:consumer>\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: Application-Level Conditional Routing Configuration\nDESCRIPTION: YAML configuration for application-level conditional routing that routes requests from IP 127.0.0.1 to servers with ports between 8000 and 8888. This affects all services since Dubbo Rust does not differentiate at application level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/router-module.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v1.0\nscope: \"application\"\nforce: false\nenabled: true\nkey: application\nconditions:\n  - ip=127.0.0.1 => port=8000~8888\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level QPS Flow Control\nDESCRIPTION: Implementation of QPS-based flow control at the service level in Sentinel. Sets a maximum of 10 QPS for the DemoService interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/sentinel.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFlowRule flowRule = new FlowRule();\nflowRule.setResource(DemoService.class.getName());\nflowRule.setCount(10);\nflowRule.setLimitApp(\"default\");\nflowRule.setGrade(RuleConstant.FLOW_GRADE_QPS);\nFlowRuleManager.loadRules(Collections.singletonList(flowRule));\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Triple Rest Protocol\nDESCRIPTION: YAML configuration to enable debug logging for Triple protocol and Dubbo remoting components, useful for troubleshooting REST mapping registration and request handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  level:\n    \"org.apache.dubbo.rpc.protocol.tri\": debug\n    \"org.apache.dubbo.remoting\": debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress for Dubbo Triple Protocol\nDESCRIPTION: Kubernetes Ingress configuration that sets up routing for the Triple protocol service through Higress. Routes requests with prefix /triple/demo to the specified Nacos service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    higress.io/destination: gateway-higress-triple-provider.DEFAULT-GROUP.public.nacos\n  name: demo\n  namespace: default\nspec:\n    ingressClassName: higress\n    rules:\n        - http:\n              paths:\n                  - backend:\n                        resource:\n                            apiGroup: networking.higress.io\n                            kind: McpBridge\n                            name: default\n                    path: /triple/demo\n                    pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Protocol Extension Configuration - Properties\nDESCRIPTION: Properties file configuration for registering the custom protocol implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxProtocol\n```\n\n----------------------------------------\n\nTITLE: Installing Higress using Docker\nDESCRIPTION: This command installs Higress using Docker. It requires Docker to be installed on the local machine and uses curl to fetch and execute the installation script. The command specifies Nacos as the configuration center with authentication parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/higress.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://higress.io/standalone/get-higress.sh | bash -s -- -a -c nacos://192.168.0.1:8848 --nacos-username=nacos --nacos-password=nacos\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Merger Exception in Dubbo XML\nDESCRIPTION: XML configuration to disable merging for a specific method (getMenuItems) while merging results for all other methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/group-merger.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\">\n    <dubbo:method name=\"getMenuItems\" merger=\"false\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Merger for Specific Groups in Dubbo XML\nDESCRIPTION: XML configuration to merge results from specified groups (aaa and bbb) for a service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/group-merger.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"aaa,bbb\" merger=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Protocol in Dubbo with Spring XML\nDESCRIPTION: Spring XML configuration that exposes a REST service on port 8080 using Dubbo's protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 用rest协议在8080端口暴露服务 -->\n<dubbo:protocol name=\"rest\" port=\"8080\"/>\n \n<!-- 声明需要暴露的服务接口 -->\n<dubbo:service interface=\"xxx.UserService\" ref=\"userService\"/>\n \n<!-- 和本地bean一样实现服务 -->\n<bean id=\"userService\" class=\"xxx.UserServiceImpl\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Configuration\nDESCRIPTION: YAML configuration for enabling and configuring Dubbo tracing with Zipkin\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/zipkin.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  tracing:\n    enabled: true # Default is false\n    sampling:\n      probability: 0.5 # Sampling rate, default is 0.1\n    propagation:\n      type: W3C # Propagator type: W3C/B3, default is W3C\n    tracing-exporter:\n      zipkin-config:\n        endpoint: http://localhost:9411/api/v2/spans\n        connect-timeout: 1s # Connection timeout, default is 1s\n        read-timeout: 10s # Data transmission timeout, default is 10s\n\n# Output tracing information to logging\nlogging:\n  pattern:\n    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo-Go Client with Nacos Registry\nDESCRIPTION: This command runs the Dubbo-Go client application that connects to the server using Nacos for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ go run ./go-client/cmd/client.go\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using JAX-RS Context Annotation in Java\nDESCRIPTION: Demonstrates how to obtain the client IP address in a REST service method using the standard JAX-RS @Context annotation to inject the HttpServletRequest. This approach maintains JAX-RS compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) {\n    System.out.println(\"Client address is \" + request.getRemoteAddr());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Consumer with @Reference Annotation\nDESCRIPTION: The @Reference annotation is used to configure Dubbo service consumers. This example shows how to inject and use a remote Dubbo service in a consumer component.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@Component\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Parameters on Dubbo Service Consumer Side\nDESCRIPTION: This example demonstrates how to set implicit parameters on the service consumer side using RpcContext.getContext().setAttachment(). The parameters will be sent to the provider side during the next remote call and then cleared automatically.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/attachment.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nRpcContext.getContext().setAttachment(\"index\", \"1\"); // 隐式传参，后面的远程调用都会隐式将这些参数发送到服务器端，类似cookie，用于框架集成，不建议常规业务使用\nxxxService.xxx(); // 远程调用\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Java Service Interface\nDESCRIPTION: Java interface definition for UserProvider service with a GetUser1 method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic-2.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic interface UserProvider {\n\tUser GetUser1(String userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo HTTP Headers Example\nDESCRIPTION: Example of Dubbo-specific HTTP headers including service key information, connection settings, and RPC context attachments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n// service key header\npath: com.demo.TestInterface\ngroup: demo\nport: 80 \nversion: 1.0.0\n\n// 保证长连接\nKeep-Alive,Connection: keep-alive\nKeep-alive: 60\n\n// RPCContext Attachment\nuserId: 123456\n```\n\n----------------------------------------\n\nTITLE: Adding Protobuf Metadata Parsing Dependency\nDESCRIPTION: Maven dependency configuration required for proper parsing of Google Protobuf service metadata in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/pb-generic-reference.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-metadata-definition-protobuf</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Settings in Dubbo XML\nDESCRIPTION: Demonstrates how to configure method-level settings for a Dubbo reference, including timeout and retry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.XxxService\">\n   <dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Logging Filter in Dubbo REST XML\nDESCRIPTION: This XML configuration snippet shows how to enable the built-in LoggingFilter for HTTP request/response logging in Dubbo REST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_45\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Registry with XML Element\nDESCRIPTION: Sets the registry to non-dynamic mode using XML configuration element. This prevents automatic service provider management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/static-service.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.141.150:9090\" dynamic=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring External Servlet Container as REST Server in Dubbo XML\nDESCRIPTION: Demonstrates how to configure Dubbo to use an external application server's servlet container for REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Using dubbo-maven-plugin for Triple and Protobuf Support\nDESCRIPTION: Demonstrates the simplified Maven configuration for Triple protocol with Protobuf using the dubbo-maven-plugin, replacing the previous configuration that required multiple plugins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-maven-plugin</artifactId>\n            <version>${dubbo.version}</version>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>compile</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Release Verification Commands\nDESCRIPTION: Commands for verifying release package signatures and checksums.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nshasum -c apache-dubbo-${release_version}-src.zip.sha512\nshasum -c apache-dubbo-${release_version}-bin.zip.sha512\ngpg --verify apache-dubbo-${release_version}-src.zip.asc\n```\n\n----------------------------------------\n\nTITLE: Implementing UserProvider service in Go for Dubbo\nDESCRIPTION: Defines a UserProvider struct with a GetUser method to handle user requests and a Reference method to provide a unique service identifier.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype UserProvider struct {\n}\n\nfunc (u *UserProvider) GetUser(ctx context.Context, req []interface{}) (*User, error) {\n\tprintln(\"req:%#v\", req)\n\trsp := User{\"A001\", \"hellowworld\", 18, time.Now()}\n\tprintln(\"rsp:%#v\", rsp)\n\treturn &rsp, nil\n}\n\nfunc (u *UserProvider) Reference() string {\n\treturn \"UserProvider\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Registry Service in Dubbo\nDESCRIPTION: XML configuration for exposing Simple Registry as a Dubbo service. Includes application configuration, protocol settings, and service definitions with callback methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/simple.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <!-- 当前应用信息配置 -->\n    <dubbo:application name=\"simple-registry\" />\n    <!-- 暴露服务协议配置 -->\n    <dubbo:protocol port=\"9090\" />\n    <!-- 暴露服务配置 -->\n    <dubbo:service interface=\"org.apache.dubbo.registry.RegistryService\" ref=\"registryService\" registry=\"N/A\" ondisconnect=\"disconnect\" callbacks=\"1000\">\n        <dubbo:method name=\"subscribe\"><dubbo:argument index=\"1\" callback=\"true\" /></dubbo:method>\n        <dubbo:method name=\"unsubscribe\"><dubbo:argument index=\"1\" callback=\"false\" /></dubbo:method>\n    </dubbo:service>\n    <!-- 简单注册中心实现，可自行扩展实现集群和状态同步 -->\n    <bean id=\"registryService\" class=\"org.apache.dubbo.registry.simple.SimpleRegistryService\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Replacing Fastjson with Gson for JSON Serialization (Java)\nDESCRIPTION: Substitutes Fastjson with Gson for JSON serialization to avoid issues with cglib dynamic proxies in native image environments. This change is implemented in the InMemoryWritableMetadataService class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-graalvm-support.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic void publishServiceDefinition(URL providerUrl) {\n  try {\n    if (!ProtocolUtils.isGeneric(providerUrl.getParameter(GENERIC_KEY))) {\n      String interfaceName = providerUrl.getParameter(INTERFACE_KEY);\n      if (StringUtils.isNotEmpty(interfaceName)) {\n        Class interfaceClass = Class.forName(interfaceName);\n        ServiceDefinition serviceDefinition = ServiceDefinitionBuilder.build(interfaceClass);\n        String data = new Gson().toJson(serviceDefinition);\n        serviceDefinitions.put(providerUrl.getServiceKey(), data);\n        return;\n      }\n  //......\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Protocol in Dubbo\nDESCRIPTION: XML configuration to set injvm protocol for individual services\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: 使用Spring Annotation方式配置Dubbo服务\nDESCRIPTION: 展示了如何使用Spring注解方式实现Dubbo服务，通过@Service注解标记服务实现类。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  // AnnotationService服务实现\n  \n  @Service\n  public class AnnotationServiceImpl implements AnnotationService {\n      @Override\n      public String sayHello(String name) {\n          System.out.println(\"async provider received: \" + name);\n          return \"annotation: hello, \" + name;\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: ModuleEnvironment Initialization in Dubbo\nDESCRIPTION: Implementation of the initialize method for ModuleEnvironment that creates an OrderedPropertiesConfiguration instance. This is part of the module extension initialization process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n  @Override\n    public void initialize() throws IllegalStateException {\n        this.orderedPropertiesConfiguration = new OrderedPropertiesConfiguration(moduleModel);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties\nDESCRIPTION: Application properties configuration for the Dubbo consumer, including Spring Boot settings and Dubbo-specific configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\n# Spring boot application\nspring.application.name=dubbo-consumer-demo\nserver.port=8080\nmanagement.port=8081\n\n# Service Version\ndemo.service.version=1.0.0\n\n# Dubbo Config properties\n## ApplicationConfig Bean\ndubbo.application.id=dubbo-consumer-demo\ndubbo.application.name=dubbo-consumer-demo\n\n## ProtocolConfig Bean\ndubbo.protocol.id=dubbo\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n```\n\n----------------------------------------\n\nTITLE: InjvmProtocol Export Implementation\nDESCRIPTION: Simple implementation of the InjvmProtocol export method that creates and returns an InjvmExporter instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n    return new InjvmExporter<T>(invoker, invoker.getUrl().getServiceKey(), exporterMap);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Filter Plugin in Pixiu\nDESCRIPTION: Creates a Plugin type that registers the demo filter with Pixiu's filter system. The init function ensures the filter is registered when the package is imported.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//important\nfunc init() {\n   filter.RegisterHttpFilter(&Plugin{})\n}\n\ntype Plugin struct {\n}\n\nfunc (p *Plugin) Kind() string {\n   return \"dgp.filters.demo\"\n}\n\nfunc (p *Plugin) CreateFilterFactory() (filter.HttpFilterFactory, error) {\n\treturn &DemoFilterFactory{conf: &Config{}}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractMetricsReporter's Data Refresh in Java\nDESCRIPTION: This snippet shows the implementation of the refreshData method in AbstractMetricsReporter. It iterates through all collectors, collects samples, and adapts Dubbo's metric types to micrometer's metric types for multi-monitoring system support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n//AbstractMetricsRepoter\n\n    private void initCollectors() {\n     ...\n        List<MetricsCollector> otherCollectors = beanFactory.getBeansOfType(MetricsCollector.class);\n        collectors.addAll(otherCollectors);\n    }\n\n    public void refreshData() {\n        collectors.forEach(collector -> {\n            List<MetricSample> samples = collector.collect();\n            for (MetricSample sample : samples) {\n                ...\n                 //将Dubbo的度量类型适配为micrometer的度量类型，并将其添加到CompositeMeterRegistry中，借此实现多监控系统的支持。\n            }\n     });        \n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Client\nDESCRIPTION: Maven command to start the Dubbo client application\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn -Dexec.mainClass=org.apache.dubbo.samples.client.Application exec:java\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitor Interface in Java\nDESCRIPTION: Demonstrates the implementation of the Monitor interface. The count method is called to record statistics for service invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/monitor.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.monitor.Monitor;\n \npublic class XxxMonitor implements Monitor {\n    public void count(URL statistics) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application Properties for Dubbo\nDESCRIPTION: Complete example of Spring Boot application properties for configuring Dubbo. This includes application name, component scanning, protocol settings, registry configuration, and default service version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n  ## application.properties\n\n  # Spring boot application\n  spring.application.name=dubbo-externalized-configuration-provider-sample\n\n  # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\n  dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n\n  # Dubbo Application\n  ## The default value of dubbo.application.name is ${spring.application.name}\n  ## dubbo.application.name=${spring.application.name}\n\n  # Dubbo Protocol\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=12345\n\n  ## Dubbo Registry\n  dubbo.registry.address=N/A\n\n  ## service default version\n  dubbo.provider.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Static Variable Usage in Java\nDESCRIPTION: This snippet shows how static variables are used in Java to bind object references to a class, which is a common pattern in Dubbo's earlier versions for managing global configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/multi-instance.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n    public static Object obj;\n}\nTest.obj = xxx;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in application.yml\nDESCRIPTION: This YAML snippet demonstrates how to configure OpenTelemetry tracing in the application.yml file, including enabling tracing, setting sampling rate, propagation type, and OTLP exporter settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/tracing-opentelemetry.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  tracing:\n    enabled: true # default is false\n    sampling:\n      probability: 0.5 # sampling rate, default is 0.1\n    propagation:\n      type: W3C # W3C/B3 default is W3C\n    tracing-exporter:\n      otlp-config:\n        endpoint: http://localhost:4317\n        timeout: 10s # default is 10s\n        compression-method: none # none/gzip The method used to compress payloads, default is \"none\"\n        headers: # customized added headers, default is empty\n          auth: admin\n\n# tracing info output to logging\nlogging:\n  level:\n    root: info\n  pattern:\n    console: '[%d{dd/MM/yy HH:mm:ss:SSS z}] %t %5p %c{2} [%X{traceId:-}, %X{spanId:-}]: %m%n'\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous API Interface in Dubbo 2.7\nDESCRIPTION: Java interface definition for an asynchronous service in Dubbo 2.7, which uses CompletableFuture for explicit asynchronous method declaration alongside the synchronous method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic interface AsyncService {\n    String sayHello(String name);\n    default CompletableFuture<String> sayHiAsync(String name) {\n        return CompletableFuture.completedFuture(sayHello(name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in Dubbo (Properties)\nDESCRIPTION: Properties configuration to enable Zookeeper as the configuration center for Dubbo. It specifies the Zookeeper address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Adding Native Dependencies for Dubbo\nDESCRIPTION: Required dependencies for Dubbo native support. These dependencies are necessary because Dubbo has not included certain packages in the distribution by default that are needed for native support with JDK17.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-graalvm-support.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-config-spring6</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-native</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Registry in Dubbo XML\nDESCRIPTION: Demonstrates how to configure Multicast registry in Dubbo using XML. It shows two equivalent ways to specify the Multicast address and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry address=\"multicast://224.5.6.7:1234\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry protocol=\"multicast\" address=\"224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP Request Body for Dubbo RPC Call in JSON\nDESCRIPTION: The HTTP request body should contain a single JSON object with a 'param' field. The 'param' value is a list of method parameters in the order they appear in the method signature.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/appendix/http-to-dubbo-default-stragety.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"param\": [\"value1\", \"value2\", ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Catching RpcException in Triple Protocol\nDESCRIPTION: This code shows how exceptions are caught on the consumer side when using Triple protocol. Instead of catching specific exception types, all provider exceptions are wrapped in RpcException, limiting the ability to handle specific exception types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    try {\n        greeterProxy.echo(REQUEST_MSG);\n    } catch (RpcException e) {\n        e.printStackTrace();\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Parameters on Client Side in Java Dubbo\nDESCRIPTION: Code example showing how to set implicit parameters from client side that will be passed to server during remote calls, similar to cookies. The parameters are set in RpcContext.getClientAttachment() and will be sent to the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getClientAttachment().setAttachment(\"index\", \"1\"); // 隐式传参，后面的远程调用都会隐式将这些参数发送到服务器端，类似cookie，比如用于框架集成\nxxxService.xxx(); // 远程调用\n// ...\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application Properties for Dubbo\nDESCRIPTION: Complete example of Spring Boot application properties for configuring Dubbo. This includes application name, component scanning, protocol settings, registry configuration, and default service version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n  ## application.properties\n\n  # Spring boot application\n  spring.application.name=dubbo-externalized-configuration-provider-sample\n\n  # Base packages to scan Dubbo Component: @com.alibaba.dubbo.config.annotation.Service\n  dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n\n  # Dubbo Application\n  ## The default value of dubbo.application.name is ${spring.application.name}\n  ## dubbo.application.name=${spring.application.name}\n\n  # Dubbo Protocol\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=12345\n\n  ## Dubbo Registry\n  dubbo.registry.address=N/A\n\n  ## service default version\n  dubbo.provider.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Implementation\nDESCRIPTION: Implementation of the GreetingsService interface that provides the actual service functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class GreetingsServiceImpl implements GreetingsService {\n    @Override\n    public String sayHi(String name) {\n        return \"hi, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating EWMA for Adaptive Load Balancing in Dubbo\nDESCRIPTION: Formula for calculating the exponential weighted moving average (EWMA) used in the adaptive load balancing algorithm, where beta is a smoothing parameter defaulted to 0.5.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\newma = beta * lastLatency + (1 - beta) * ewma\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Dispatcher Extension in Properties File\nDESCRIPTION: Properties file content for registering a custom Dispatcher implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/dispatcher.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxDispatcher\n```\n\n----------------------------------------\n\nTITLE: Adding Sentinel Dubbo Adapter Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add the Sentinel Dubbo Adapter dependency to a Maven project's pom.xml file. This is the first step to integrate Sentinel with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/sentinel-introduction-for-dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-dubbo-adapter</artifactId>\n    <version>x.y.z</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Forcing Remote Service Reference\nDESCRIPTION: XML configuration to force remote service reference instead of local\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference ... scope=\"remote\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Interface Check via Java\nDESCRIPTION: Shows how to configure Serializable interface checking using ApplicationConfig in Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setCheckSerializable(true);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Merger Strategy in Dubbo XML\nDESCRIPTION: XML configuration to specify a custom merger strategy (mymerge) for a specific method (getMenuItems).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/group-merger.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\"mymerge\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Properties File Configuration for QOS\nDESCRIPTION: Demonstrates how to configure QOS using dubbo.properties file placed in the project's src/main/resources directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qos-enable=true\ndubbo.application.qos-port=33333\ndubbo.application.qos-accept-foreign-ip=false\n```\n\n----------------------------------------\n\nTITLE: Example of Telnet Session with QOS Commands\nDESCRIPTION: Demonstrates connecting to the QOS module via telnet and using the 'ls' command to list consumer and provider services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n➜  ~ telnet localhost 22222\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄\n  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███\n  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███\n  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███\n  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███\n  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███\n  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███\n  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀\n\n\ndubbo>ls\nAs Provider side:\n+----------------------------------+---+\n|       Provider Service Name      |PUB|\n+----------------------------------+---+\n|org.apache.dubbo.demo.DemoService| N |\n+----------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Dubbo Service Call with gRPC Protocol\nDESCRIPTION: Example of making an asynchronous call to a Dubbo service using the gRPC protocol. It demonstrates the usage of the generated asynchronous method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n\t// ...\n  GreeterGrpc.IGreeter greeter = (GreeterGrpc.IGreeter) context.getBean(\"greeter\");\n  ListenableFuture<HelloReply> future =   \n        greeter.sayHelloAsync(HelloRequest.newBuilder().setName(\"world!\").build());\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Storage in Config Center\nDESCRIPTION: Properties to configure the registry and metadata storage addresses in a config center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=zookeeper://127.0.0.1:2181\n### 注意驼峰式风格\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181 ###元数据存储的地址\n```\n\n----------------------------------------\n\nTITLE: REST Service Implementation with Path Annotations in Java\nDESCRIPTION: Shows a REST service implementation with JAX-RS @Path annotations defining URL routes. Combined with contextpath configuration, these paths form complete URL endpoints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }   \n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Dubbo RPC Protocol Documentation\nDESCRIPTION: YAML front matter that defines metadata for a documentation page about Dubbo RPC Protocol. It includes page aliases for URL redirection, description, title information, document type, and navigation weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/docs3-v2/java-sdk/reference-manual/protocol/\n    - /en/docs3-v2/java-sdk/reference-manual/protocol/\n    - /en/overview/what/ecosystem/protocol/\ndescription: Dubbo RPC Protocol Guide\nlinkTitle: RPC Protocol\ntitle: RPC Protocol\ntype: docs\nweight: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Forcing Remote Service Reference\nDESCRIPTION: XML configuration to force remote service reference instead of local\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference ... scope=\"remote\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Mock Configuration in Dubbo XML\nDESCRIPTION: Simple XML configuration examples for enabling mock functionality in Dubbo service references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-mock.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"com.foo.BarServiceMock\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Java Interface for Dubbo Service\nDESCRIPTION: Java interface definition for the UserProvider service that contains a GetUser1 method which takes a userId string and returns a User object. This interface defines the service contract for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n//import org.apache.dubbo.rpc.filter.GenericFilter;\n\npublic interface UserProvider {\n\tUser GetUser1(String userId);\n}\n```\n\n----------------------------------------\n\nTITLE: Output of All Monitoring Metrics Command in Dubbo\nDESCRIPTION: Example output from the 'metrics_default' command showing various metrics including registry directory and register response time metrics with their respective values and labels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>metrics_default\ndubbo.registry.directory.num.disable.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,interface=dubbo-springboot-demo-provider/org.apache.dubbo.metrics.service.MetricsService:1.0.0,ip=10.224.214.80,} 0.0\ndubbo.register.rt.milliseconds.max{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,ip=10.224.214.80,} 153.0\n\n```\n\n----------------------------------------\n\nTITLE: Networker SPI Configuration File\nDESCRIPTION: Properties file content for registering the custom Networker implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/networker.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxNetworker\n```\n\n----------------------------------------\n\nTITLE: Identifying Server Thread Pool Exhaustion in Dubbo\nDESCRIPTION: A log example showing when the Dubbo server thread pool is exhausted. This indicates the server is receiving more requests than it can handle with its current thread pool configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n[27/02/23 05:37:40:040 CST] NettyServerWorker-5-2  WARN support.AbortPolicyWithReport:  [DUBBO] Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-30.221.144.195:20880, Pool Size: 20 (active: 20, core: 20, max: 20, largest: 20), Task: 27 (completed: 7), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://30.221.144.195:20880!, dubbo version: 3.1.7, current host: 30.221.144.195, error code: 0-1. This may be caused by too much client requesting provider, go to https://dubbo.apache.org/faq/0/1 to find instructions.\n```\n\n----------------------------------------\n\nTITLE: Server-Side Request Reception Output\nDESCRIPTION: Server-side output showing the received request data structure after deserialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n=======================\nreq:&main.CallUserStruct{ID:\"A000\", Male:true, SubInfo:main.SubInfo{SubID:\"A001\", SubMale:false, SubAge:18}}\n=======================\n```\n\n----------------------------------------\n\nTITLE: Resource Loading Implementation with Caching\nDESCRIPTION: Detailed implementation of resource loading with soft reference caching support. Handles native mode and uses class loader hierarchy for resource discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\npublic static Set<URL> loadResources(String fileName, ClassLoader currentClassLoader) {\n        Map<ClassLoader, Map<String, Set<URL>>> classLoaderCache;\n        if (classLoaderResourcesCache == null || (classLoaderCache = classLoaderResourcesCache.get()) == null) {\n            synchronized (ClassLoaderResourceLoader.class) {\n                if (classLoaderResourcesCache == null || (classLoaderCache = classLoaderResourcesCache.get()) == null) {\n                    classLoaderCache = new ConcurrentHashMap<>();\n                    classLoaderResourcesCache = new SoftReference<>(classLoaderCache);\n                }\n            }\n        }\n        if (!classLoaderCache.containsKey(currentClassLoader)) {\n            classLoaderCache.putIfAbsent(currentClassLoader, new ConcurrentHashMap<>());\n        }\n        Map<String, Set<URL>> urlCache = classLoaderCache.get(currentClassLoader);\n        if (!urlCache.containsKey(fileName)) {\n            Set<URL> set = new LinkedHashSet<>();\n            Enumeration<URL> urls;\n            try {\n                urls = currentClassLoader.getResources(fileName);\n                boolean isNative = NativeUtils.isNative();\n                if (urls != null) {\n                    while (urls.hasMoreElements()) {\n                        URL url = urls.nextElement();\n                        if (isNative) {\n                            setRef(url);\n                        }\n                        set.add(url);\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            urlCache.put(fileName, set);\n        }\n        return urlCache.get(fileName);\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Service Definition\nDESCRIPTION: Placeholder example showing a basic Kubernetes service definition structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: service\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo Service via HTTP Request\nDESCRIPTION: Curl command to test the HTTP to Dubbo protocol conversion by making an HTTP request to the configured endpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-higress.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"localhost/dubbo/hello?p=abc\" \n```\n\n----------------------------------------\n\nTITLE: Getting Injection Object using AdaptiveExtensionInjector in Java\nDESCRIPTION: This method iterates through all extension injectors to find and return the first available extension object for the given type and name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n @Override\n    public <T> T getInstance(Class<T> type, String name) {\n        for (ExtensionInjector injector : injectors) {\n            T extension = injector.getInstance(type, name);\n            if (extension != null) {\n                return extension;\n            }\n        }\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Registry with Separate Protocol and Address in Dubbo\nDESCRIPTION: Alternative XML configuration for multicast registry in Dubbo where protocol and address are specified as separate attributes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"multicast\" address=\"224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Service Definition\nDESCRIPTION: Placeholder example showing a basic Kubernetes service definition structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: service\n```\n\n----------------------------------------\n\nTITLE: Applying User-Based Routing in Istio\nDESCRIPTION: This command applies a virtual service to enable user-based routing in Istio, specifically routing traffic from user 'jason' to v2 of the reviews service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Client\nDESCRIPTION: Maven command to start the Dubbo client for the streaming example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.streaming.TriStreamClient\"\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Element Names with JAXB Annotations\nDESCRIPTION: Demonstrates how to use JAXB annotations to customize the mapping of Java object properties to XML elements, such as customizing element names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class User implements Serializable {\n    \n    @XmlElement(name=\"username\") \n    private String name;  \n}\n```\n\n----------------------------------------\n\nTITLE: Service Interface Definition - Java\nDESCRIPTION: Standard Dubbo service interface definition\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Client\nDESCRIPTION: Maven command to start the Dubbo client for the streaming example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.streaming.TriStreamClient\"\n```\n\n----------------------------------------\n\nTITLE: 使用Spring XML方式配置Dubbo服务\nDESCRIPTION: 展示了如何使用Spring XML方式配置Dubbo的应用、注册中心、协议和服务暴露等信息。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <!-- dubbo-provier.xml -->\n  \n  <dubbo:application name=\"demo-provider\"/>\n  <dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n  \n  <dubbo:registry address=\"zookeeper://127.0.0.1:2181\" simplified=\"true\"/>\n  <dubbo:metadata-report address=\"redis://127.0.0.1:6379\"/>\n  <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n  \n  <bean id=\"demoService\" class=\"org.apache.dubbo.samples.basic.impl.DemoServiceImpl\"/>\n  <dubbo:service interface=\"org.apache.dubbo.samples.basic.api.DemoService\" ref=\"demoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Spring Boot YAML\nDESCRIPTION: This YAML configuration snippet shows how to set the Dubbo protocol to 'tri' (Triple) in a Spring Boot application.yml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ndubbo:\n protocol:\n   name: tri\n```\n\n----------------------------------------\n\nTITLE: Generated Async Interface\nDESCRIPTION: Automatically generated asynchronous interface by dubbo-async-processer\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.api;\nimport java.util.concurrent.CompletableFuture;\n@javax.annotation.Generated(\"com.alibaba.dubbo.async.processor.AsyncAnnotationProcessor\")\n@org.apache.dubbo.common.config.AsyncFor(com.alibaba.dubbo.samples.api.GreetingsService.class)\npublic interface GreetingsServiceAsync extends GreetingsService {\nCompletableFuture<java.lang.String> sayHiAsync(java.lang.String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Pixiu Gateway Start Command\nDESCRIPTION: Command to start the Pixiu gateway with a specified configuration file path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npixiu gateway start -c /pixiu/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultCoordinator for Seata Transaction Coordinator in Go\nDESCRIPTION: This snippet shows the implementation of the DefaultCoordinator, which handles server-side logic for the Transaction Coordinator. It includes methods for managing connections, processing registration requests from Transaction and Resource Managers, and routing transaction messages to appropriate handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-seata.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (coordinator *DefaultCoordinator) OnOpen(session getty.Session) error {\n  log.Infof(\"got getty_session:%s\", session.Stat())\n  return nil\n}\n\nfunc (coordinator *DefaultCoordinator) OnError(session getty.Session, err error) {\n  // 释放 TCP 连接\n  SessionManager.ReleaseGettySession(session)\n  session.Close()\n  log.Errorf(\"getty_session{%s} got error{%v}, will be closed.\", session.Stat(), err)\n}\n\nfunc (coordinator *DefaultCoordinator) OnClose(session getty.Session) {\n  log.Info(\"getty_session{%s} is closing......\", session.Stat())\n}\n\nfunc (coordinator *DefaultCoordinator) OnMessage(session getty.Session, pkg interface{}) {\n  log.Debugf(\"received message:{%v}\", pkg)\n  rpcMessage, ok := pkg.(protocal.RpcMessage)\n  if ok {\n    _, isRegTM := rpcMessage.Body.(protocal.RegisterTMRequest)\n    if isRegTM {\n      // 将 TransactionManager 信息和 TCP 连接建立映射关系\n      coordinator.OnRegTmMessage(rpcMessage, session)\n      return\n    }\n\n    heartBeat, isHeartBeat := rpcMessage.Body.(protocal.HeartBeatMessage)\n    if isHeartBeat && heartBeat == protocal.HeartBeatMessagePing {\n      coordinator.OnCheckMessage(rpcMessage, session)\n      return\n    }\n\n    if rpcMessage.MessageType == protocal.MSGTYPE_RESQUEST ||\n      rpcMessage.MessageType == protocal.MSGTYPE_RESQUEST_ONEWAY {\n      log.Debugf(\"msgId:%s, body:%v\", rpcMessage.Id, rpcMessage.Body)\n      _, isRegRM := rpcMessage.Body.(protocal.RegisterRMRequest)\n      if isRegRM {\n        // 将 ResourceManager 信息和 TCP 连接建立映射关系\n        coordinator.OnRegRmMessage(rpcMessage, session)\n      } else {\n        if SessionManager.IsRegistered(session) {\n          defer func() {\n            if err := recover(); err != nil {\n              log.Errorf(\"Catch Exception while do RPC, request: %v,err: %w\", rpcMessage, err)\n            }\n          }()\n          // 处理事务消息，全局事务注册、分支事务注册、分支事务提交、全局事务回滚等\n          coordinator.OnTrxMessage(rpcMessage, session)\n        } else {\n          session.Close()\n          log.Infof(\"close a unhandled connection! [%v]\", session)\n        }\n      }\n    } else {\n      resp, loaded := coordinator.futures.Load(rpcMessage.Id)\n      if loaded {\n        response := resp.(*getty2.MessageFuture)\n        response.Response = rpcMessage.Body\n        response.Done <- true\n        coordinator.futures.Delete(rpcMessage.Id)\n      }\n    }\n  }\n}\n\nfunc (coordinator *DefaultCoordinator) OnCron(session getty.Session) {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Discovery Migration Mode for Specific Reference\nDESCRIPTION: Java code example for setting the service discovery migration mode for a specific service reference in Dubbo 3.0 consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-samples.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>(applicationModel.newModule());\nreferenceConfig.setInterface(DemoService.class);\nreferenceConfig.setParameters(new HashMap<>());\nreferenceConfig.getParameters().put(\"migration.step\", mode);\nreturn referenceConfig.get();\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Services\nDESCRIPTION: PostgreSQL-formatted output showing how to get the service information from the Kubernetes cluster to find the external IP of the Pixiu gateway.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/http_triple.md#2025-04-08_snippet_3\n\nLANGUAGE: pgsql\nCODE:\n```\n$ kubectl get svc -n dubbogo-triple-nacos\nNAME             TYPE           CLUSTER-IP        EXTERNAL-IP     PORT(S)          AGE\ndubbo-go-nacos   ClusterIP      192.168.123.204   <none>          8848/TCP         32s\npixiu            LoadBalancer   192.168.156.175   30.XXX.XXX.XX   8881:30173/TCP   32s\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Field Names with Jackson in Dubbo REST\nDESCRIPTION: Using Jackson annotations to customize the JSON field names when serializing Java objects in REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class User implements Serializable {\n    \n    @JsonProperty(\"username\")\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Pixiu HTTP Route Configuration\nDESCRIPTION: Example of HTTP route configuration that forwards requests with /user prefix to a specific cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/user\"\n                      route:\n                        cluster: \"user\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Container Extension in Dubbo\nDESCRIPTION: This snippet shows the content of the META-INF/dubbo/org.apache.dubbo.container.Container file, which registers the custom container implementation with Dubbo's extension mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxContainer\n```\n\n----------------------------------------\n\nTITLE: RegistryMetricsCollector Constructor for Listener Registration\nDESCRIPTION: The constructor of RegistryMetricsCollector that registers metrics event listeners. It processes each category in CategorySet.ALL and registers the appropriate listeners for event posting, completion, and error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class RegistryMetricsCollector extends CombMetricsCollector<TimeCounterEvent> {\n  public RegistryMetricsEventMulticaster(RegistryMetricsCollector collector) {\n\n        CategorySet.ALL.forEach(categorySet ->\n        {\n            //通过 MetricsCat 实例中的定义的监听器创建逻辑，逐个注册监听器\n            super.addListener(categorySet.getPost().getEventFunc().apply(collector));\n            if (categorySet.getFinish() != null) {\n                super.addListener(categorySet.getFinish().getEventFunc().apply(collector));\n            }\n            if (categorySet.getError() != null) {\n                super.addListener(categorySet.getError().getEventFunc().apply(collector));\n            }\n        });\n    }\n//...\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixiu with the Custom Filter\nDESCRIPTION: YAML configuration that sets up a listener on port 8888 and includes the custom demo filter in the HTTP filter chain.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8888\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/\"\n                http_filters:\n                  - name: dgp.filters.demo\n                    config:\n```\n\n----------------------------------------\n\nTITLE: 合并多组 Invoker 列表的实现\nDESCRIPTION: toMergeMethodInvokerMap 方法用于处理多组服务配置的情况，它将不同组的 Invoker 列表按照分组合并，以支持调用不同分组实现的服务。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, List<Invoker<T>>> toMergeMethodInvokerMap(Map<String, List<Invoker<T>>> methodMap) {\n    Map<String, List<Invoker<T>>> result = new HashMap<String, List<Invoker<T>>>();\n    // 遍历入参\n    for (Map.Entry<String, List<Invoker<T>>> entry : methodMap.entrySet()) {\n        String method = entry.getKey();\n        List<Invoker<T>> invokers = entry.getValue();\n        // group -> Invoker 列表\n        Map<String, List<Invoker<T>>> groupMap = new HashMap<String, List<Invoker<T>>>();\n        // 遍历 Invoker 列表\n        for (Invoker<T> invoker : invokers) {\n            // 获取分组配置\n            String group = invoker.getUrl().getParameter(Constants.GROUP_KEY, \"\");\n            List<Invoker<T>> groupInvokers = groupMap.get(group);\n            if (groupInvokers == null) {\n                groupInvokers = new ArrayList<Invoker<T>>();\n                // 缓存 <group, List<Invoker>> 到 groupMap 中\n                groupMap.put(group, groupInvokers);\n            }\n            // 存储 invoker 到 groupInvokers\n            groupInvokers.add(invoker);\n        }\n        if (groupMap.size() == 1) {\n            // 如果 groupMap 中仅包含一组键值对，此时直接取出该键值对的值即可\n            result.put(method, groupMap.values().iterator().next());\n        \n        // groupMap.size() > 1 成立，表示 groupMap 中包含多组键值对，比如：\n        // {\n        //     \"dubbo\": [invoker1, invoker2, invoker3, ...],\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Spring Boot YAML\nDESCRIPTION: This YAML configuration snippet shows how to set the Dubbo protocol to 'tri' (Triple) in a Spring Boot application.yml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ndubbo:\n protocol:\n   name: tri\n```\n\n----------------------------------------\n\nTITLE: Verifying Client Logs\nDESCRIPTION: Command to check the client application logs to verify successful calls to the server application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods  | grep client | awk '{print $1}' | xargs kubectl logs \n...\n2022-04-07T04:13:55.777Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:13:56.778Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:13:57.779Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:13:58.781Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:13:59.782Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:14:00.784Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n2022-04-07T04:14:01.785Z        INFO    cmd/app.go:29   call server response = name:\"Hello laurence\" id:\"v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: 创建代码生成目标目录\nDESCRIPTION: 创建用于存放生成代码的目录。Protocol Buffer编译器将在这个目录下生成TypeScript代码文件。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p gen\n```\n\n----------------------------------------\n\nTITLE: SPI 配置文件定义\nDESCRIPTION: Dubbo SPI 机制的配置文件，用于注册自定义容器实现类，让 Dubbo 能够识别并加载自定义容器。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxContainer\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple RMI Ports for Different Services\nDESCRIPTION: XML configuration showing how to define multiple RMI protocols with different ports and reference them in service definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"rmi1\" name=\"rmi\" port=\"1099\" />\n<dubbo:protocol id=\"rmi2\" name=\"rmi\" port=\"2099\" />\n \n<dubbo:service protocol=\"rmi1\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Spring Boot Configuration Maps\nDESCRIPTION: Configuration properties for Dubbo Spring Boot integration. These define maps of named configurations for various Dubbo components like protocols, registries, and providers that can be referenced throughout the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-centers=<map<string,ConfigCenterConfig>> # Multiple configurations for ConfigCenterBean.\ndubbo.consumers=<map<string,ConsumerConfig>> # Multiple configurations for Consumer.\ndubbo.metadata-reports=<map<string,MetadataReportConfig>> # Multiple configurations for MetadataReportConfig.\ndubbo.metricses=<map<string,MetricsConfig>> # Multiple configurations for MetricsConfig.\ndubbo.modules=<map<string,ModuleConfig>> # Multiple configurations for Module.\ndubbo.monitors=<map<string,MonitorConfig>> # Multiple configurations for Monitor.\ndubbo.protocols=<map<string,ProtocolConfig>> # Multiple configurations for Protocol.\ndubbo.providers=<map<string,ProviderConfig>> # Multiple configurations for Provider.\ndubbo.registries=<map<string,RegistryConfig>> # Multiple configurations for Registry.\ndubbo.tracings=<map<string,TracingConfig>> # Multiple configurations for TracingConfig.\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request and Response Objects from RpcContext\nDESCRIPTION: Demonstrates how to access HttpServletRequest and HttpServletResponse objects from Dubbo's RpcContext to provide additional flexibility for implementing complex features.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest() != null && RpcContext.getContext().getRequest() instanceof HttpServletRequest) {\n    System.out.println(\"Client address is \" + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse() != null && RpcContext.getContext().getResponse() instanceof HttpServletResponse) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum HTTP Connections for Dubbo REST Server\nDESCRIPTION: XML configuration that sets the maximum number of concurrent HTTP connections that a Dubbo REST server will accept. This prevents server overload by limiting connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" accepts=\"500\" server=\"tomcat/>\n```\n\n----------------------------------------\n\nTITLE: Servlet Mapping Configuration for Dubbo REST in web.xml\nDESCRIPTION: Servlet mapping configuration in web.xml that must align with Dubbo's contextpath setting when using an external servlet container. The URL pattern must match the contextpath in Dubbo's protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<servlet-mapping>\n     <servlet-name>dispatcher</servlet-name>\n     <url-pattern>/services/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Creating Protocol Server in DubboProtocol\nDESCRIPTION: This snippet demonstrates the createServer method in DubboProtocol. It configures the URL with necessary parameters, creates an ExchangeServer, and binds it to handle requests. It also performs client type validation and sets up the DubboProtocolServer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nprivate ProtocolServer createServer(URL url) {\n  \t\t//下面将url增加了心跳参数最终如下dubbo://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&bind.ip=192.168.1.9&bind.port=20880&channel.readonly.sent=true&codec=dubbo&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&heartbeat=60000&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=6700&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1654225251112\n        url = URLBuilder.from(url)\n                // send readonly event when server closes, it's enabled by default\n                .addParameterIfAbsent(CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString())\n                // enable heartbeat by default\n                .addParameterIfAbsent(HEARTBEAT_KEY, String.valueOf(DEFAULT_HEARTBEAT))\n                .addParameter(CODEC_KEY, DubboCodec.NAME)\n                .build();\n       //这里服务端使用的网络库这里是默认值netty\n        String str = url.getParameter(SERVER_KEY, DEFAULT_REMOTING_SERVER);\n\n        if (StringUtils.isNotEmpty(str) && !url.getOrDefaultFrameworkModel().getExtensionLoader(Transporter.class).hasExtension(str)) {\n            throw new RpcException(\"Unsupported server type: \" + str + \", url: \" + url);\n        }\n\t\t//dubbo交换器层对象创建\n        ExchangeServer server;\n        try {\n        \t//这个方法会绑定端口，关于交换器与传输网络层到后面统一说\n        \t//这里通过绑定url和请求处理器来创建交换器对象\n            server = Exchangers.bind(url, requestHandler);\n        } catch (RemotingException e) {\n            throw new RpcException(\"Fail to start server(url: \" + url + \") \" + e.getMessage(), e);\n        }\n\n        str = url.getParameter(CLIENT_KEY);\n        if (StringUtils.isNotEmpty(str)) {\n            Set<String> supportedTypes = url.getOrDefaultFrameworkModel().getExtensionLoader(Transporter.class).getSupportedExtensions();\n            if (!supportedTypes.contains(str)) {\n                throw new RpcException(\"Unsupported client type: \" + str);\n            }\n        }\n\n        DubboProtocolServer protocolServer = new DubboProtocolServer(server);\n        //关闭等待时长默认为10秒\n        loadServerProperties(protocolServer);\n        return protocolServer;\n    }\n```\n\n----------------------------------------\n\nTITLE: 定义Dubbo服务XML配置\nDESCRIPTION: Dubbo服务的XML配置示例，包含应用名称、注册中心地址、协议和端口设置，以及Dubbo服务接口定义。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans /* ...... * />\n\n    <dubbo:application name=\"test-dubbo-service\"/>\n    <dubbo:registry address=\"${dubbo.registry.address}\"/>\n    <dubbo:protocol name=\"dubbo\" port=\"20888\"/>\n\n    <dubbo:service timeout=\"10000\" interface=\"org.apache.shenyu.examples.dubbo.api.service.DubboTestService\" ref=\"dubboTestService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Dubbo ExporterListener Extension\nDESCRIPTION: Directory structure for implementing a custom ExporterListener extension in a Maven project, showing the required files and their locations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exporter-listener.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxExporterListener.java (implements ExporterListener interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.ExporterListener (plain text file, content: xxx=com.xxx.XxxExporterListener)\n```\n\n----------------------------------------\n\nTITLE: Adding Zipkin Tracing to Dubbo Service\nDESCRIPTION: XML configuration that adds Zipkin tracing filters to a Dubbo service. It configures the OkHttp sender to send trace data to the Zipkin server and sets up tracing beans for distributed tracing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- 1. Modify Dubbo service exposure configuration to add the zipkin tracing filter in the filter chain -->\n    <dubbo:service interface=\"com.alibaba.dubbo.samples.api.HelloService\" ref=\"helloService\" filter=\"tracing\"/>\n\n    <!-- 2. Zipkin related configurations -->\n    <!-- Use OKHttp to send trace information to Zipkin Server. Here, the Zipkin Server runs locally -->\n    <bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n        <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n    </bean>\n\n    <bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n        <property name=\"localServiceName\" value=\"hello-service\"/>\n        <property name=\"spanReporter\">\n            <bean class=\"zipkin2.reporter.beans.AsyncReporterFactoryBean\">\n                <property name=\"sender\" ref=\"sender\"/>\n                <!-- wait up to half a second for any in-flight spans on close -->\n                <property name=\"closeTimeout\" value=\"500\"/>\n            </bean>\n        </property>\n        <property name=\"currentTraceContext\">\n            <bean class=\"brave.spring.beans.CurrentTraceContextFactoryBean\">\n                <property name=\"scopeDecorators\">\n                    <bean class=\"brave.context.slf4j.MDCScopeDecorator\" factory-method=\"create\"/>\n                </property>\n            </bean>\n        </property>\n    </bean>\n```\n\n----------------------------------------\n\nTITLE: Creating Nacos Registry in Dubbo Rust\nDESCRIPTION: This snippet demonstrates how to create a Nacos registry instance using a URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n//通过Url创建注册中心实例\nlet nacos_url = Url::from_url(\"127.0.0.1:1221\").unwrap();\nlet registry = NacosRegistry::new(nacos_url);\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Example in Java\nDESCRIPTION: Example of traditional try-catch exception handling that can be replaced with mock implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-mock.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOffer offer = null;\ntry {\n    offer = offerService.findOffer(offerId);\n} catch (RpcException e) {\n   logger.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Tag for Dynamic Routing in Dubbo Consumer\nDESCRIPTION: Java code example showing how to set a region-specific tag ('Hangzhou') in the consumer application to route traffic to instances in that region.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"Hangzhou\");\n```\n\n----------------------------------------\n\nTITLE: Checking Service Registration with Logs in Dubbo\nDESCRIPTION: Log example showing a successful service registration to a registry. This confirms that a Dubbo service has been properly registered to the configured registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[26/02/23 04:34:41:041 CST] main  INFO config.ServiceConfig:  [DUBBO] Register dubbo service org.apache.dubbo.samples.api.GreetingsService url dubbo://*** to registry 127.0.0.1:8848, dubbo version: 3.1.7, current host: 192.168.31.5\n```\n\n----------------------------------------\n\nTITLE: Displaying Defined Routes in Istio\nDESCRIPTION: This command displays the defined routes in Istio as YAML, showing the virtual services configuration for routing traffic to v1 of each microservice.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservices -o yaml\n```\n\n----------------------------------------\n\nTITLE: Servlet Mapping Configuration for Dubbo REST in web.xml\nDESCRIPTION: Servlet mapping configuration in web.xml that must align with Dubbo's contextpath setting when using an external servlet container. The URL pattern must match the contextpath in Dubbo's protocol configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<servlet-mapping>\n     <servlet-name>dispatcher</servlet-name>\n     <url-pattern>/services/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo-Go-Pixiu Documentation\nDESCRIPTION: YAML configuration block defining metadata for a documentation page including aliases, description, title and weight settings for the page structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/samples/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/docs3-v2/dubbo-go-pixiu/user/samples/\n    - /en/docs3-v2/dubbo-go-pixiu/user/samples/\n    - /en/overview/reference/pixiu/user/samples/\n    - /en/overview/mannual/dubbo-go-pixiu/user/samples/\ndescription: Case Introduction\nlinkTitle: Case Introduction\ntitle: Case Introduction\ntype: docs\nweight: 70\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Pods for Dubbo Demo\nDESCRIPTION: Shell command to list pods in the dubbo-demo namespace, used to identify the machines deploying the User application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get pods -n dubbo-demo\n# list result here\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML\nDESCRIPTION: This XML configuration sets up a Dubbo consumer to use the REST protocol for calling the UserService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"rest-consumer\"/>\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n    <dubbo:reference id=\"userService\" interface=\"org.apache.dubbo.samples.rest.api.UserService\" protocol=\"rest\"/>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Dubbo Node.js Server\nDESCRIPTION: TypeScript code snippet showing how to configure CORS in a Dubbo Node.js server to allow browser requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/ web/web-announcement.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport cors from \"@fastify/cors\";\n\nasync function main() {\n  const server = fastify();\n  ...\n  await server.register(cors, {\n    origin: true,\n  });\n  ...\n  await server.listen({ host: \"localhost\", port: 8080 });\n  ...\n}\n\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Setting DubboGo Config Path Environment Variable\nDESCRIPTION: Sets the path to the dubbogo.yml configuration file using environment variable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport DUBBO_GO_CONFIG_PATH=\"../conf/dubbogo.yml\"\n```\n\n----------------------------------------\n\nTITLE: Protocol Configuration - XML\nDESCRIPTION: XML configuration examples for declaring and referencing protocol extensions in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Declare protocol, if no id is configured, name will be used as id -->\n<dubbo:protocol id=\"xxx1\" name=\"xxx\" />\n<!-- Reference protocol, if no protocol attribute is configured, it will automatically scan protocol configuration in ApplicationContext -->\n<dubbo:service protocol=\"xxx1\" />\n<!-- Default value for referenced protocol, used when <dubbo:service> does not configure protocol attribute -->\n<dubbo:provider protocol=\"xxx1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML\nDESCRIPTION: XML configuration file for a Dubbo service consumer using Nacos as the registry center. This defines application information, registry settings, and the reference to the remote DemoService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息，用于计算依赖关系 -->\n    <dubbo:application name=\"dubbo-consumer-xml-demo\"/>\n\n    <!-- 使用 Nacos 注册中心 -->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- 引用服务接口 -->\n    <dubbo:reference id=\"demoService\" interface=\"com.alibaba.dubbo.demo.service.DemoService\" version=\"2.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Creating Generation Directory\nDESCRIPTION: Creates directory for generated code files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p gen\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Service Discovery Default Group in Dubbo 3.1\nDESCRIPTION: This YAML configuration disables the use of the default group for Nacos service discovery in Dubbo 3.1. It allows users to maintain the previous behavior of not aligning the 'group' attribute with Nacos registry groups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.0-to-3.1-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo.nacos-service-discovery.use-default-group=false\n```\n\n----------------------------------------\n\nTITLE: Testing Service with cURL\nDESCRIPTION: cURL command to test the Dubbo service endpoint using HTTP/1.1\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n --header 'Content-Type: application/json' \\\n --header 'TRI-Service-Version: 1.0.0' \\\n --header 'TRI-Service-group: dubbo' \\\n --data '{\"sentence\": \"Hello World\"}' \\\n http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say\n```\n\n----------------------------------------\n\nTITLE: Configuring GRPC Version in Dubbo Dependencies\nDESCRIPTION: Setting GRPC version in dubbo-dependencies-bom\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/mesh/mesh.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n<grpc.version>1.41.0</grpc.version>\n```\n\n----------------------------------------\n\nTITLE: Starting Seata Server on Windows\nDESCRIPTION: Batch command to start the Seata Server on Windows systems. This launches the transaction coordinator needed for distributed transactions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./seata-server.bat\n```\n\n----------------------------------------\n\nTITLE: Client Configuration XML Fragment\nDESCRIPTION: Partial XML configuration for the client application showing the beginning of the Spring beans definition. The full configuration would include similar Dubbo and Zipkin tracing setup as seen in the service configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n```\n\n----------------------------------------\n\nTITLE: 使用Properties格式的Dubbo扩展配置示例\nDESCRIPTION: 展示了Dubbo中扩展参数的配置格式，支持通过数组形式传递额外的参数信息。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.parameters=[{item1:value1},{item2:value2}]\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.parameters=[{item3:value3}]\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Initialization\nDESCRIPTION: Initializes environment configurations from various sources including system properties, JVM parameters, environment variables, and external configurations. Also handles migration rules for Dubbo 2 to Dubbo 3 upgrades.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void initialize() throws IllegalStateException {\n        if (initialized.compareAndSet(false, true)) {\n            this.propertiesConfiguration = new PropertiesConfiguration(scopeModel);\n            this.systemConfiguration = new SystemConfiguration();\n            this.environmentConfiguration = new EnvironmentConfiguration();\n            this.externalConfiguration = new InmemoryConfiguration(\"ExternalConfig\");\n            this.appExternalConfiguration = new InmemoryConfiguration(\"AppExternalConfig\");\n            this.appConfiguration = new InmemoryConfiguration(\"AppConfig\");\n            loadMigrationRule();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Service Initialization Method in ServiceConfig\nDESCRIPTION: The initialization method called before service export that sets up service metadata, listeners, and generates the service key in the format 'group/serviceInterface:version'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic void init() {\n        if (this.initialized.compareAndSet(false, true)) {\n        \t//加载服务监听器 这里暂时没有服务监听器扩展\n            // load ServiceListeners from extension\n            ExtensionLoader<ServiceListener> extensionLoader = this.getExtensionLoader(ServiceListener.class);\n            this.serviceListeners.addAll(extensionLoader.getSupportedExtensionInstances());\n        }\n        //服务提供者配置传递给元数据配置对象 一个服务提供者配置会有一个元数据配置，服务配置\n        initServiceMetadata(provider);\n        //元数据\n        serviceMetadata.setServiceType(getInterfaceClass());\n        \n        serviceMetadata.setTarget(getRef());\n        //元数据的key格式为 group/服务接口:版本号\n        serviceMetadata.generateServiceKey();\n    }\n```\n\n----------------------------------------\n\nTITLE: Service Export Implementation in ServiceConfig\nDESCRIPTION: The core implementation of service export that checks for export status, sets the service path if empty, and delegates to URL export methods. After exporting, it marks the service as exported.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprotected synchronized void doExport() {\n\t\t//取消发布\n        if (unexported) {\n            throw new IllegalStateException(\"The service \" + interfaceClass.getName() + \" has already unexported!\");\n        }\n        //已经发布\n        if (exported) {\n            return;\n        }\n\t\t//服务路径 为空则设置为接口名，本例子中为link.elastic.dubbo.entity.DemoService\n        if (StringUtils.isEmpty(path)) {\n            path = interfaceName;\n        }\n        //导出URL\n        doExportUrls();\n        //\n        exported();\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Generic Methods to Access HttpServletRequest and HttpServletResponse in Dubbo REST\nDESCRIPTION: Demonstrates a simpler approach to access HttpServletRequest and HttpServletResponse using generic methods in RpcContext. These methods return null if the request/response doesn't match the specified type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse(HttpServletResponse.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Group in YAML\nDESCRIPTION: YAML configuration to specify a custom group for Nacos. Groups provide additional categorization within a namespace in Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   group: dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Group in YAML\nDESCRIPTION: YAML configuration to specify a custom group for Nacos. Groups provide additional categorization within a namespace in Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   group: dubbo\n```\n\n----------------------------------------\n\nTITLE: Iterator-based Multiple Reads on Server Side\nDESCRIPTION: Demonstrates how a server can implement a client streaming method that processes multiple incoming requests using an iterator and returns a single response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef client_stream(self, request_iterator):\n    response = \"\"\n    for request in request_iterator:\n        print(f\"Received request: {request.name}\")\n        response += f\"{request.name} \"\n    return greeter_pb2.GreeterReply(message=response)\n```\n\n----------------------------------------\n\nTITLE: Calling Dubbo Service with dubbo2.js in TypeScript\nDESCRIPTION: Example of calling a Dubbo service method using dubbo2.js in TypeScript.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo2-js.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {demoService} from './dubboConfig'\n\ndemoService.sayHello('kirito').then(({res,err})=>{\n    console.log(res)\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RPC Service Handler\nDESCRIPTION: Setup of RPC service handler with service name and method handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nservice_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.HelloWorld\",\n        method_handlers=[method_handler],\n    )\n```\n\n----------------------------------------\n\nTITLE: DubboGo Server Implementation\nDESCRIPTION: Go implementation of the Greet service server with configuration loading.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\n\t\"dubbo.apache.org/dubbo-go/v3\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/config_yaml/proto\"\n)\n\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tname := req.Name\n\tif name != \"ConfigTest\" {\n\t\terrInfo := fmt.Sprintf(\"name is not right: %s\", name)\n\t\treturn nil, errors.New(errInfo)\n\t}\n\n\tresp := &greet.GreetResponse{Greeting: req.Name + \"-Success\"}\n\treturn resp, nil\n}\n\nfunc main() {\n\tgreet.SetProviderService(&GreetTripleServer{})\n\tif err := dubbo.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\tselect {}\n}\n```\n\n----------------------------------------\n\nTITLE: Mock Service Implementation in Java\nDESCRIPTION: Example of a Java mock service implementation that provides fallback data when RpcException occurs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-mock.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.foo;\npublic class BarServiceMock implements BarService {\n    public String sayHello(String name) {\n        // 你可以伪造容错数据，此方法只在出现RpcException时被执行\n        return \"容错数据\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Response Logging Filter\nDESCRIPTION: ClientResponseFilter implementation that logs HTTP response details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\npublic class LoggingFilter implements ClientResponseFilter {\n \n    public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException {\n        System.out.println(\"status: \" + resCtx.getStatus());\n\t    System.out.println(\"date: \" + resCtx.getDate());\n\t    System.out.println(\"last-modified: \" + resCtx.getLastModified());\n\t    System.out.println(\"location: \" + resCtx.getLocation());\n\t    System.out.println(\"headers:\");\n\t    for (Entry<String, List<String>> header : resCtx.getHeaders().entrySet()) {\n     \t    System.out.print(\"\\t\" + header.getKey() + \" :\");\n\t        for (String value : header.getValue()) {\n\t            System.out.print(value + \", \");\n\t        }\n\t        System.out.print(\"\\n\");\n\t    }\n\t    System.out.println(\"media-type: \" + resCtx.getMediaType().getType());\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activated Extensions with URL and Key\nDESCRIPTION: Method to get activated extensions using URL and key parameters, which then calls an overloaded version with additional parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/7-Dubbo的SPI扩展机制之自动激活扩展Activate源码解析.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic List<T> getActivateExtension(URL url, String key) {\n    return getActivateExtension(url, key, null);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spring Context in Dubbo using Arthas OGNL Command\nDESCRIPTION: This snippet demonstrates how to retrieve the Spring context in a Dubbo application using Arthas' OGNL command. It accesses the SpringExtensionFactory to get the context and then invokes a bean method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ognl '#context=@com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory@contexts.iterator.next, #context.getBean(\"userServiceImpl\").findUser(1)'\n@User[\n    id=@Integer[1],\n    name=@String[Deanna Borer],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Same Zone Priority for Multi-Registry Load Balancing\nDESCRIPTION: XML configuration example demonstrating how to set up zone-based priority for multi-registry load balancing. This ensures traffic is preferentially routed to services in the same zone.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/2.7.5.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- The selection will match with the zone key in the traffic, preferring to dispatch traffic to addresses in the same zone -->\n<dubbo:registry address=\"zookeeper://${zookeeper.address1}\" zone=\"beijing\" />\n```\n\n----------------------------------------\n\nTITLE: Using @EnableDubbo Annotation in Dubbo\nDESCRIPTION: The @EnableDubbo annotation is a convenient combination of @EnableDubboConfig and @DubboComponentScan. It allows scanning for Dubbo service providers (@Service) and consumers (@Reference) in specified packages or classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.dubbo.config.spring.context.annotation;\n\n@EnableDubboConfig\n@DubboComponentScan\npublic @interface EnableDubbo {\n    /**\n     * Base packages to scan for annotated @Service classes.\n     * <p>\n     * Use {@link #scanBasePackageClasses()} for a type-safe alternative to String-based\n     * package names.\n     *\n     * @return the base packages to scan\n     * @see DubboComponentScan#basePackages()\n     */\n    @AliasFor(annotation = DubboComponentScan.class, attribute = \"basePackages\")\n    String[] scanBasePackages() default {};\n\n    /**\n     * Type-safe alternative to {@link #scanBasePackages()} for specifying the packages to\n     * scan for annotated @Service classes. The package of each class specified will be\n     * scanned.\n     *\n     * @return classes from the base packages to scan\n     * @see DubboComponentScan#basePackageClasses\n     */\n    @AliasFor(annotation = DubboComponentScan.class, attribute = \"basePackageClasses\")\n    Class<?>[] scanBasePackageClasses() default {};    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service in XML\nDESCRIPTION: XML configuration for exposing the Dubbo service, including application info, registry, protocol, and service declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo2-js.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- 提供方应用信息，用于计算依赖关系 -->\n    <dubbo:application name=\"demo-provider\"/>\n\n    <dubbo:registry protocol=\"zookeeper\" address=\"localhost:2181\"/>\n\n    <!-- 用dubbo协议在20880端口暴露服务 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n    <!-- 和本地bean一样实现服务 -->\n    <bean id=\"demoProvider\" class=\"com.alibaba.dubbo.demo.provider.DemoProviderImpl\"/>\n\n    <!-- 声明需要暴露的服务接口 -->\n    <dubbo:service interface=\"com.alibaba.dubbo.demo.DemoProvider\" ref=\"demoProvider\" version=\"1.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Removing Application Route Rules in Istio\nDESCRIPTION: This command removes the application route rules previously applied to the Bookinfo application in Istio.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cluster Extension in Java\nDESCRIPTION: Example implementation of a custom Cluster interface showing the required method implementations and class structure\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/cluster.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.cluster.Cluster;\nimport org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;\nimport org.apache.dubbo.rpc.cluster.Directory;\nimport org.apache.dubbo.rpc.cluster.LoadBalance;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.RpcException;\n \npublic class XxxCluster implements Cluster {\n    public <T> Invoker<T> merge(Directory<T> directory) throws RpcException {\n        return new AbstractClusterInvoker<T>(directory) {\n            public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n                // ...\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Dubbo Dynamic Proxy with Arthas Jad Command\nDESCRIPTION: This code demonstrates using Arthas's jad command to decompile Dubbo's dynamically generated Wrapper class, showing how the proxy works with service method invocations. The decompiled code reveals the implementation of the invokeMethod method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n$ jad com.alibaba.dubbo.common.bytecode.Wrapper1\n\nClassLoader:\n+-sun.misc.Launcher$AppClassLoader@5c647e05\n  +-sun.misc.Launcher$ExtClassLoader@59878d35\n\nLocation:\n/Users/hengyunabc/.m2/repository/com/alibaba/dubbo/2.5.10/dubbo-2.5.10.jar\n\npackage com.alibaba.dubbo.common.bytecode;\n\npublic class Wrapper1\nextends Wrapper\nimplements ClassGenerator.DC {\n\n    public Object invokeMethod(Object object, String string, Class[] arrclass, Object[] arrobject) throws InvocationTargetException {\n        UserServiceImpl userServiceImpl;\n        try {\n            userServiceImpl = (UserServiceImpl)object;\n        }\n        catch (Throwable throwable) {\n            throw new IllegalArgumentException(throwable);\n        }\n        try {\n            if (\"findUser\".equals(string) && arrclass.length == 1) {\n                return userServiceImpl.findUser(((Number)arrobject[0]).intValue());\n            }\n            if (\"listUsers\".equals(string) && arrclass.length == 0) {\n                return userServiceImpl.listUsers();\n            }\n            if (\"findUserByName\".equals(string) && arrclass.length == 1) {\n                return userServiceImpl.findUserByName((String)arrobject[0]);\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Triple REST Demo Sample\nDESCRIPTION: Commands to download the Triple REST sample project from GitHub and run it using Maven. This demonstrates how to obtain and execute the sample code to test the REST capabilities of the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 获取示例代码\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# 运行\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Force and Fail Mock Configurations\nDESCRIPTION: Advanced XML configurations for forced mock behavior and exception throwing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-mock.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:return fake\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"force:throw com.foo.MockException\" />\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dubbo via Telnet (Shell)\nDESCRIPTION: Demonstrates how to connect to a Dubbo service using Telnet or netcat for service governance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/telnet.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntelnet localhost 20880\n```\n\nLANGUAGE: sh\nCODE:\n```\necho status | nc -i 1 localhost 20880\n```\n\n----------------------------------------\n\nTITLE: Identifying Wrapper Classes in Dubbo\nDESCRIPTION: The isWrapperClass method that determines if a class is a Wrapper by checking if it has a constructor that takes the current type as a parameter, following the decorator pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n private boolean isWrapperClass(Class<?> clazz) {\n        try {\n            clazz.getConstructor(type);\n            return true;\n        } catch (NoSuchMethodException e) {\n            return false;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Registry Configuration in YAML\nDESCRIPTION: Basic configuration example showing how to specify a registry address in a Spring Boot application's YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/overview.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registry\n  address: {protocol}://{cluster-address}\n```\n\n----------------------------------------\n\nTITLE: 安装Fastify和Dubbo Fastify插件\nDESCRIPTION: 安装Fastify Web框架和Dubbo的Fastify集成插件。这些包用于创建HTTP服务器并集成Dubbo服务。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install fastify @apachedubbo/dubbo-fastify\n```\n\n----------------------------------------\n\nTITLE: Retrieving Adaptive Extension in Dubbo's ExtensionLoader\nDESCRIPTION: Method that retrieves or creates an adaptive extension instance with caching mechanism. If the adaptive extension doesn't exist in cache, it creates one and stores it for future use.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic T getAdaptiveExtension() {\n    // 从缓存中获取自适应拓展\n    Object instance = cachedAdaptiveInstance.get();\n    if (instance == null) {\n        // 如果存在异常，则直接抛出\n        if (createAdaptiveInstanceError != null) {\n            throw new IllegalStateException(\"Failed to create adaptive instance: \" +\n                    createAdaptiveInstanceError.toString(),\n                    createAdaptiveInstanceError);\n        }\n\n        synchronized (cachedAdaptiveInstance) {\n            instance = cachedAdaptiveInstance.get();\n            // double check\n            if (instance == null) {\n                try {\n                    // 创建自适应拓展\n                    // 这里分为两种情况：一种是存在 Adaptive 类，另一个是需要生成 Adaptive 类\n                    instance = createAdaptiveExtension();\n                    cachedAdaptiveInstance.set(instance);\n                } catch (Throwable t) {\n                    createAdaptiveInstanceError = t;\n                    throw new IllegalStateException(\"Failed to create adaptive instance: \" + t.toString(), t);\n                }\n            }\n        }\n    }\n\n    return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Response Logging Filter\nDESCRIPTION: ClientResponseFilter implementation that logs HTTP response details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\npublic class LoggingFilter implements ClientResponseFilter {\n \n    public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException {\n        System.out.println(\"status: \" + resCtx.getStatus());\n\t    System.out.println(\"date: \" + resCtx.getDate());\n\t    System.out.println(\"last-modified: \" + resCtx.getLastModified());\n\t    System.out.println(\"location: \" + resCtx.getLocation());\n\t    System.out.println(\"headers:\");\n\t    for (Entry<String, List<String>> header : resCtx.getHeaders().entrySet()) {\n     \t    System.out.print(\"\\t\" + header.getKey() + \" :\");\n\t        for (String value : header.getValue()) {\n\t            System.out.print(value + \", \");\n\t        }\n\t        System.out.print(\"\\n\");\n\t    }\n\t    System.out.println(\"media-type: \" + resCtx.getMediaType().getType());\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Testing RPC Server with cURL\nDESCRIPTION: cURL command to test the RPC server endpoint by sending a JSON request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:20000/greet.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service via HTTP Proxy\nDESCRIPTION: These curl commands test the gRPC service through the HTTP proxy. The first command performs a GET request, while the second performs a POST request with a JSON payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser -X POST -d '{\"userId\":1}'\n```\n\n----------------------------------------\n\nTITLE: 在 Consumer 中设置流量标签\nDESCRIPTION: 在服务消费方发起调用前，通过 RpcContext 设置 tag 标签，确保请求被路由到具有相同标签的提供方实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"gray\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Dubbo Service with @Service Annotation\nDESCRIPTION: This Java code shows how to declare a Dubbo service using the @Service annotation in the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class UserServiceImpl implements UserService {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dubbo for Spring Boot Applications\nDESCRIPTION: For Spring Boot applications, this snippet shows how to use the Dubbo Spring Boot starter dependency, which simplifies integration with Spring Boot by providing auto-configuration capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Accessing RPC Service via HTTP\nDESCRIPTION: cURL command to access the RPC service using an HTTP POST request with JSON payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:20000/greet.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount for Dubbo in Kubernetes\nDESCRIPTION: Command to apply a YAML configuration that creates a namespace and ServiceAccount for Dubbo applications to interact with Kubernetes API-SERVER.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Initialize the namespace and account\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/dubbo-samples-kubernetes/dubbo-samples-apiserver-provider/src/main/resources/k8s/ServiceAccount.yml\n\n# Switch namespace\nkubens dubbo-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Check Mode via Java ApplicationConfig\nDESCRIPTION: Shows how to configure the serialization check status using ApplicationConfig in Java\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setSerializeCheckStatus(\"STRICT\");\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Dependencies for Docsy Theme\nDESCRIPTION: Commands to install the required PostCSS dependencies for the Docsy theme. These must be run from the root directory of the project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install --save-dev autoprefixer\n$ npm install -D postcss\n$ npm install --save-dev postcss-cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Spring Boot Dubbo Consumer Application\nDESCRIPTION: Main application class for Dubbo consumer demo showing Spring Boot initialization with component scanning configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication(scanBasePackages = \"com.alibaba.boot.dubbo.demo.consumer.controller\")\npublic class DubboConsumerDemo {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DubboConsumerDemo.class,args);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Registry Registration With Failback Mechanism in Java\nDESCRIPTION: This code shows Dubbo's registration method with failback capability. It attempts to register a URL, and if that fails, it adds the URL to a failedRegistered collection for later retry, unless specific checks require immediate failure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-practice-from-guazi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    public void register(URL url) {\n        super.register(url);\n        failedRegistered.remove(url);\n        failedUnregistered.remove(url);\n        try {\n            // Sending a registration request to the server side\n            doRegister(url);\n        } catch (Exception e) {\n            Throwable t = e;\n\n            // If the startup detection is opened, the Exception is thrown directly.\n            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)\n                    && url.getParameter(Constants.CHECK_KEY, true)\n                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n            boolean skipFailback = t instanceof SkipFailbackWrapperException;\n            if (check || skipFailback) {\n                if (skipFailback) {\n                    t = t.getCause();\n                }\n                throw new IllegalStateException(\"Failed to register \" + url + \" to registry \" + getUrl().getAddress() + \", cause: \" + t.getMessage(), t);\n            } else {\n                logger.error(\"Failed to register \" + url + \", waiting for retry, cause: \" + t.getMessage(), t);\n            }\n\n            // Record a failed registration request to a failed list, retry regularly\n            failedRegistered.add(url);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Annotating Response Properties in Java\nDESCRIPTION: Example of adding Dubbo-Api-Docs annotations to a response bean class. The @ResponseProperty annotation is used to describe each field of the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-api-docs.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class QuickStartRespBean {\n\n  @ResponseProperty(value = \"Response code\", example = \"500\")\n  private int code;\n\n  @ResponseProperty(\"Response message\")\n  private String msg;\n\n  // getter/setter略...\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Application - Shell Commands\nDESCRIPTION: Maven commands to build and run the Dubbo application locally\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nchmod a+x ./mvnw\n./mvnw clean install -DskipTests\n./mvnw compile -pl quickstart-service exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.quickstart.QuickStartApplication\"\n```\n\n----------------------------------------\n\nTITLE: 配置动态修改超时时间的规则\nDESCRIPTION: 通过动态配置规则修改特定服务的超时参数，将 timeout 值调整为 2000ms，无需重启服务即可生效。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nkey: org.apache.dubbo.samples.UserService\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: Installing orjson Package for JSON Serialization\nDESCRIPTION: Command to install the orjson package used for JSON serialization in the example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install orjson\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Dubbo-Go Client\nDESCRIPTION: Sets environment variables to specify the locations of configuration files for the Dubbo-Go client. This approach separates configuration from code and allows for different configurations in different environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport CONF_CONSUMER_FILE_PATH=\"xxx\"\nexport APP_LOG_CONF_FILE=\"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Graceful Offline Configuration\nDESCRIPTION: Kubernetes preStop hook configuration for graceful instance removal from registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npreStop:\n\texec:\n\t  command: [\"/bin/sh\",\"-c\",\"curl /offline; sleep 10\"]\n```\n\n----------------------------------------\n\nTITLE: 使用Properties格式的Dubbo多配置项示例\nDESCRIPTION: 展示了Dubbo中多配置项的格式，允许配置多个注册中心和多个协议，每个都有独立的配置信息。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registries.unit1.address=zookeeper://127.0.0.1:2181\ndubbo.registries.unit2.address=zookeeper://127.0.0.1:2182\n\ndubbo.protocols.dubbo.name=dubbo\ndubbo.protocols.dubbo.port=20880\ndubbo.protocols.hessian.name=hessian\ndubbo.protocols.hessian.port=8089\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Route in APISIX for Dubbo Service\nDESCRIPTION: cURL command to create an HTTP route in APISIX that exposes the Dubbo service with the dubbo-proxy plugin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9180/apisix/admin/routes/1  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"uris\": [\n        \"/demo\"\n    ],\n    \"plugins\": {\n        \"dubbo-proxy\": {\n            \"service_name\": \"org.apache.dubbo.samples.gateway.apisix.dubbo.api.ApisixService\",\n            \"method\": \"apisixDubbo\"\n        }\n    },\n    \"upstream_id\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Dubbo Release Packages\nDESCRIPTION: Maven commands to build, test, and deploy Dubbo release packages, including installing locally and deploying snapshots to the Maven central repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Module Extensions in Dubbo\nDESCRIPTION: Code that initializes module extensions by calling the initModuleExt method. This is part of the module initialization process in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\ninitModuleExt();\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider to Use Custom Protocol\nDESCRIPTION: Application properties configuration for the provider that specifies 'edubbo' as the protocol to use for exposing services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# 自定义协议\ndubbo.provider.protocol=edubbo\n```\n\n----------------------------------------\n\nTITLE: Installing APISIX with Docker\nDESCRIPTION: Shell commands to clone the APISIX Docker repository and navigate to the example directory for installation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/apache/apisix-docker.git\n$ cd apisix-docker/example\n```\n\n----------------------------------------\n\nTITLE: Defining NotifyListener Interface in Java\nDESCRIPTION: Java interface definition for NotifyListener, which is triggered when a service change notification is received. It includes contracts for handling full data set notifications and ensuring notification order.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface NotifyListener { \n    void notify(List<URL> urls);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Interface-Level Caching in Dubbo with XML\nDESCRIPTION: XML configuration for enabling LRU caching on a server-side Dubbo service at the interface level. This applies caching to all methods of the service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/result-cache.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"demoService\" class=\"org.apache.dubbo.demo.provider.DemoServiceImpl\"/>\n<dubbo:service interface=\"com.foo.DemoService\" ref=\"demoService\" cache=\"lru\" />\n```\n\n----------------------------------------\n\nTITLE: Writing RPC Response in ShenYu\nDESCRIPTION: The RPCMessageWriter's writeWith method processes the response result for RPC (including Dubbo) service calls, handling both successful results and exceptions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.response.strategy.RPCMessageWriter#writeWith()\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure with Go Module Initialization\nDESCRIPTION: Sets up the initial directory structure for the Dubbo-go quickstart project and initializes a Go module named 'dubbo3-demo'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nquickstart\n├── api\n│   └── api.go\n├── client\n│   ├── client.go\n│   └── dubbogo.yml\n├── go.mod\n└── server\n    ├── dubbogo.yml\n    └── server.go\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Routing in Dubbo-Go-Pixiu Gateway\nDESCRIPTION: Example of a Pixiu API configuration file that defines a RESTful resource with URL path pattern matching. This configuration routes requests matching the specified path to a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/trie.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nname: server\ndescription: server sample\nresources:\n  - path: '/api/v1/test-dubbo/user/name/:name'\n    type: restful\n    description: user\n    methods:\n      - httpVerb: GET\n        enable: true\n        timeout: 1000ms\n        inboundRequest:\n          requestType: http\n          uri:\n            - name: name\n              required: true\n        integrationRequest:\n          requestType: dubbo\n          mappingParams:\n            - name: uri.name\n              mapTo: 0\n              mapType: \"string\"\n          applicationName: \"UserProvider\"\n          interface: \"com.dubbogo.server.UserService\"\n          method: \"GetUserByName\"\n          group: \"test\"\n          version: 1.0.0\n          clusterName: \"test_dubbo\"\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Inheritance-like Structure in Go for Hessian2 Serialization\nDESCRIPTION: Example of how to use anonymous struct fields to simulate Java inheritance in Go for Hessian serialization. This shows a Dog struct that embeds an Animal struct, along with a field that uses the hessian:\"-\" tag to be excluded from serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/releases/dubbo-go-hessian2-1.6.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Dog struct {\n    Animal\n    Gender  string\n    DogName string `hessian:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RMI Protocol for Spring Compatibility\nDESCRIPTION: XML configuration to make the RMI protocol in Dubbo compatible with Spring's RMI implementation by setting the codec to 'spring'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rmi\" codec=\"spring\" />\n```\n\n----------------------------------------\n\nTITLE: Directory Loading with Strategy Parameters\nDESCRIPTION: Method to load extensions from specific directories based on loading strategy parameters. Includes compatibility handling for Alibaba extensions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, LoadingStrategy strategy, String type) {\n \t\t//加载并根据策略的参数来加载\n        loadDirectory(extensionClasses, strategy.directory(), type, strategy.preferExtensionClassLoader(),\n            strategy.overridden(), strategy.includedPackages(), strategy.excludedPackages(), strategy.onlyExtensionClassLoaderPackages());\n            //下面两行就是要兼容alibaba的扩展包了  \n        String oldType = type.replace(\"org.apache\", \"com.alibaba\");\n        loadDirectory(extensionClasses, strategy.directory(), oldType, strategy.preferExtensionClassLoader(),\n            strategy.overridden(), strategy.includedPackagesInCompatibleType(), strategy.excludedPackages(), strategy.onlyExtensionClassLoaderPackages());\n    }\n```\n\n----------------------------------------\n\nTITLE: Making an Asynchronous Dubbo Call in Erlang\nDESCRIPTION: This snippet illustrates how to make an asynchronous call using Dubbo in Erlang. It sends a request and receives a request reference, with the response being handled in a separate callback function.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\nRequest = #userInfoRequest{requestId = 123, username = \"testname\"},\n{ok,RequestRef} = userOperator:queryUserInfo(Request).\n\n%% you can receive the message after.\nhandle_cast({msg_back,RequestRef,Response,RpcContent}, State).\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Sticky Connection in Dubbo XML\nDESCRIPTION: This XML snippet demonstrates how to configure a sticky connection for an entire service reference in Dubbo. It uses the 'sticky' attribute set to 'true' on the 'dubbo:reference' element.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/stickiness.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\" sticky=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Failed HTTP Response in Triple Protocol\nDESCRIPTION: Shows the structure of a failed HTTP response in the Triple protocol, including error status, content type, and JSON error message.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nContent-Length: 46\n{\"status\":20,\"message\":\"request format error\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Callback in Java\nDESCRIPTION: Implements the Notify interface to handle onreturn and onthrow events for the consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass NotifyImpl implements Notify {\n    public Map<Integer, Person>    ret    = new HashMap<Integer, Person>();\n    public Map<Integer, Throwable> errors = new HashMap<Integer, Throwable>();\n    \n    public void onreturn(Person msg, Integer id) {\n        System.out.println(\"onreturn:\" + msg);\n        ret.put(id, msg);\n    }\n    \n    public void onthrow(Throwable ex, Integer id) {\n        errors.put(id, ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Exception Mapper\nDESCRIPTION: Extended RpcExceptionMapper for custom validation error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\npublic class MyValidationExceptionMapper extends RpcExceptionMapper {\n\n    protected Response handleConstraintViolationException(ConstraintViolationException cve) {\n        ViolationReport report = new ViolationReport();\n        for (ConstraintViolation cv : cve.getConstraintViolations()) {\n            report.addConstraintViolation(new RestConstraintViolation(\n                    cv.getPropertyPath().toString(),\n                    cv.getMessage(),\n                    cv.getInvalidValue() == null ? \"null\" : cv.getInvalidValue().toString()));\n        }\n        // 采用json输出代替xml输出\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Priority for Multi-Registry Load Balancing\nDESCRIPTION: XML configuration example showing how to set a preferred registry in a multi-registry setup. This configuration ensures that addresses from the preferred registry will be prioritized when available.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/2.7.5.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Addresses from the preferred=\"true\" registry will be prioritized, falling back to others only when no available addresses are found -->\n<dubbo:registry address=\"zookeeper://${zookeeper.address1}\" preferred=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS Writer Interceptor for GZIP Compression\nDESCRIPTION: Example of a JAX-RS WriterInterceptor that adds GZIP compression to HTTP responses. This interceptor modifies the output stream to compress the response body.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\npublic class GZIPWriterInterceptor implements WriterInterceptor {\n \n    @Override\n    public void aroundWriteTo(WriterInterceptorContext context)\n                    throws IOException, WebApplicationException {\n        OutputStream outputStream = context.getOutputStream();\n        context.setOutputStream(new GZIPOutputStream(outputStream));\n        context.proceed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Method Not Found Error Stack Trace in Dubbo\nDESCRIPTION: Error stack trace showing a method not found exception in Dubbo when the system cannot locate the 'sayHi123' method in the GreetingsService interface. The error occurs during application startup when validating method configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n[27/02/23 02:49:31:031 CST] main ERROR deploy.DefaultApplicationDeployer:  [DUBBO] Dubbo Application[1.1](first-dubbo-consumer) start failure, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195, error code: 5-14. This may be caused by , go to https://dubbo.apache.org/faq/5/14 to find instructions. \njava.lang.IllegalStateException: Failed to override field value of config bean: <dubbo:reference sticky=\"false\" interface=\"org.apache.dubbo.samples.api.GreetingsService\" />\n\tat org.apache.dubbo.config.AbstractConfig.refresh(AbstractConfig.java:690)\n\tat java.util.concurrent.ConcurrentHashMap$ValuesView.forEach(ConcurrentHashMap.java:4707)\n\tat org.apache.dubbo.config.context.ModuleConfigManager.refreshAll(ModuleConfigManager.java:180)\n\tat org.apache.dubbo.config.deploy.DefaultModuleDeployer.loadConfigs(DefaultModuleDeployer.java:317)\n\tat org.apache.dubbo.config.deploy.DefaultModuleDeployer.initialize(DefaultModuleDeployer.java:113)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.initModuleDeployers(DefaultApplicationDeployer.java:238)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.initialize(DefaultApplicationDeployer.java:211)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.start(DefaultApplicationDeployer.java:616)\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:226)\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:215)\n\tat org.apache.dubbo.samples.client.Application.main(Application.java:56)\nCaused by: java.lang.IllegalStateException: Found invalid method config, the interface org.apache.dubbo.samples.api.GreetingsService not found method \"sayHi123\" : [<dubbo:method return=\"true\" name=\"sayHi123\" sent=\"true\" timeout=\"1000\" />]\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(AbstractInterfaceConfig.java:399)\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.lambda$processExtraRefresh$2(AbstractInterfaceConfig.java:369)\n\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)\n\tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)\n\tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(AbstractInterfaceConfig.java:370)\n\tat org.apache.dubbo.config.AbstractConfig.refreshWithPrefixes(AbstractConfig.java:735)\n\tat org.apache.dubbo.config.ReferenceConfigBase.preProcessRefresh(ReferenceConfigBase.java:140)\n\tat org.apache.dubbo.config.AbstractConfig.refresh(AbstractConfig.java:686)\n```\n\n----------------------------------------\n\nTITLE: Using online Command to Bring Services Online\nDESCRIPTION: The online command brings services online, useful when using delayed publishing. It can be used to bring all services online or specific services matching a regex pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// Bring all services online\ndubbo>online\nOK\n\n// Bring some services online based on regex\ndubbo>online com.*\nOK\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Bootstrap\nDESCRIPTION: Main class for bootstrapping the Dubbo consumer application. Initializes Spring context, retrieves the consumer bean, and makes a remote service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ConsumerBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);\n        context.start();\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);\n        String hello = greetingServiceConsumer.doSayHello(\"zookeeper\");\n        System.out.println(\"result: \" + hello);\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Bootstrap\nDESCRIPTION: Main class for bootstrapping the Dubbo consumer application. Initializes Spring context, retrieves the consumer bean, and makes a remote service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ConsumerBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);\n        context.start();\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);\n        String hello = greetingServiceConsumer.doSayHello(\"zookeeper\");\n        System.out.println(\"result: \" + hello);\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface-Level Service Discovery for Specific Registry in YAML\nDESCRIPTION: YAML configuration to set interface-level service discovery for a specific registry instance. This allows for registry-specific service discovery configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   register-mode: interface #indicates continuing to use the old version service discovery model, optional values are interface, instance, all\n```\n\n----------------------------------------\n\nTITLE: Configuring Version-Agnostic Service Consumer in Dubbo XML\nDESCRIPTION: XML configuration for defining a version-agnostic consumer reference using wildcard (*) in Dubbo. Supported in version 2.2.0 and above.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-versions.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"*\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Failed HTTP Response in Triple Protocol\nDESCRIPTION: Shows the structure of a failed HTTP response in the Triple protocol, including error status, content type, and JSON error message.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nContent-Length: 46\n{\"status\":20,\"message\":\"request format error\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo Module Stopping Error in Bash\nDESCRIPTION: Shows an error message indicating that a Dubbo Module is stopping or stopped and cannot be started again.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCaused by: java.lang.IllegalStateException: Dubbo Module[1.1.1] is stopping or stopped, can not start again\n```\n\n----------------------------------------\n\nTITLE: Installing dubbo2.js via NPM\nDESCRIPTION: Shell command to install the dubbo2.js package using npm\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dubbo2.js --save\n```\n\n----------------------------------------\n\nTITLE: Calling Overloaded Asynchronous Dubbo Service in Java\nDESCRIPTION: This example shows how to call an overloaded asynchronous Dubbo service method from the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/async-consumer.xml\"});\n    context.start();\n\n    GreetingsService greetingsService = (GreetingsService) context.getBean(\"greetingsService\");\n    CompletableFuture<String> future = greetingsService.sayHi(\"async call reqeust\", true);\n    System.out.println(\"async call ret :\" + future.get());\n\n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Exception Mapper\nDESCRIPTION: Extended RpcExceptionMapper for custom validation error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_40\n\nLANGUAGE: java\nCODE:\n```\npublic class MyValidationExceptionMapper extends RpcExceptionMapper {\n\n    protected Response handleConstraintViolationException(ConstraintViolationException cve) {\n        ViolationReport report = new ViolationReport();\n        for (ConstraintViolation cv : cve.getConstraintViolations()) {\n            report.addConstraintViolation(new RestConstraintViolation(\n                    cv.getPropertyPath().toString(),\n                    cv.getMessage(),\n                    cv.getInvalidValue() == null ? \"null\" : cv.getInvalidValue().toString()));\n        }\n        // 采用json输出代替xml输出\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Filter Validation Process Commands\nDESCRIPTION: Shell commands for troubleshooting filter validation errors by checking process status and generating thread dumps.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/5/36.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps -eaf |grep <error service>\n```\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Verifying Dubbo REST Service Exposure in Zookeeper\nDESCRIPTION: This snippet shows how to use zkCli to verify that the Dubbo REST service has been properly exposed and registered in Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 10] ls /dubbo/org.apache.dubbo.samples.rest.api.UserService/providers\n[dubbo%3A%2F%2F192.168.2.132%3A20880%2Forg.apache.dubbo.samples.rest.api.UserService%3Fanyhost%3Dtrue%26application%3Drest-provider%26bean.name%3Dorg.apache.dubbo.samples.rest.api.UserService%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dorg.apache.dubbo.samples.rest.api.UserService%26methods%3DgetUser%2CregisterUser%26pid%3D27386%26server%3Dnetty4%26side%3Dprovider%26timestamp%3D1546341537392, rest%3A%2F%2F192.168.2.132%3A8080%2Forg.apache.dubbo.samples.rest.api.UserService%3Fanyhost%3Dtrue%26application%3Drest-provider%26bean.name%3Dorg.apache.dubbo.samples.rest.api.UserService%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dorg.apache.dubbo.samples.rest.api.UserService%26methods%3DgetUser%2CregisterUser%26pid%3D27386%26server%3Dnetty%26side%3Dprovider%26timestamp%3D1546341536194]\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider with AnnotationConfigApplicationContext\nDESCRIPTION: This Java code demonstrates how to start a Dubbo provider using AnnotationConfigApplicationContext and the ProviderConfiguration class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class RestProvider {\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class);\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo Module Stopping Error in Bash\nDESCRIPTION: Shows an error message indicating that a Dubbo Module is stopping or stopped and cannot be started again.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCaused by: java.lang.IllegalStateException: Dubbo Module[1.1.1] is stopping or stopped, can not start again\n```\n\n----------------------------------------\n\nTITLE: Matching URL Conditions in Dubbo Router\nDESCRIPTION: This method matches URL conditions against specified patterns. It extracts values from URLs based on key names (like 'host', 'method'), and then performs pattern matching to determine if the URL satisfies the routing conditions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/router.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean matchCondition(Map<String, MatchPair> condition, URL url, URL param, Invocation invocation) {\n    // 将服务提供者或消费者 url 转成 Map\n    Map<String, String> sample = url.toMap();\n    boolean result = false;\n    // 遍历 condition 列表\n    for (Map.Entry<String, MatchPair> matchPair : condition.entrySet()) {\n        // 获取匹配项名称，比如 host、method 等\n        String key = matchPair.getKey();\n        String sampleValue;\n        // 如果 invocation 不为空，且 key 为 method(s)，表示进行方法匹配\n        if (invocation != null && (Constants.METHOD_KEY.equals(key) || Constants.METHODS_KEY.equals(key))) {\n            // 从 invocation 获取被调用方法的名称\n            sampleValue = invocation.getMethodName();\n        } else {\n            // 从服务提供者或消费者 url 中获取指定字段值，比如 host、application 等\n            sampleValue = sample.get(key);\n            if (sampleValue == null) {\n                // 尝试通过 default.xxx 获取相应的值\n                sampleValue = sample.get(Constants.DEFAULT_KEY_PREFIX + key);\n            }\n        }\n        \n        // --------------------✨ 分割线 ✨-------------------- //\n        \n        if (sampleValue != null) {\n            // 调用 MatchPair 的 isMatch 方法进行匹配\n            if (!matchPair.getValue().isMatch(sampleValue, param)) {\n                // 只要有一个规则匹配失败，立即返回 false 结束方法逻辑\n                return false;\n            } else {\n                result = true;\n            }\n        } else {\n            // sampleValue 为空，表明服务提供者或消费者 url 中不包含相关字段。此时如果 \n            // MatchPair 的 matches 不为空，表示匹配失败，返回 false。比如我们有这样\n            // 一条匹配条件 loadbalance = random，假设 url 中并不包含 loadbalance 参数，\n            // 此时 sampleValue = null。既然路由规则里限制了 loadbalance 必须为 random，\n            // 但 sampleValue = null，明显不符合规则，因此返回 false\n            if (!matchPair.getValue().matches.isEmpty()) {\n                return false;\n            } else {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocationDO Class in Java\nDESCRIPTION: Definition of the LocationDO class with simple field types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/service-test.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class LocationDO {\n    private String address;\n    private int postNum;\n\n    @Override\n    public String toString() {\n        return \"LocationDO{\" +\n                \"address='\" + address + '\\'' +\n                \", postNum=\" + postNum +\n                '}';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Ingress for Dubbo Service\nDESCRIPTION: Shell command to create a Kubernetes Ingress resource that routes HTTP traffic to the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/2-advanced/dubbo-samples-gateway/dubbo-samples-gateway-higress/dubbo-samples-gateway-higress-triple/deploy/ingress/Ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Control Plane with Manifests\nDESCRIPTION: Command to install the dubbo-control-plane component using dubboctl manifests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubboctl manifests install --profile=control-plane\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Service Handlers in Dubbo-go\nDESCRIPTION: Server-side implementation of streaming handlers for Dubbo-go. This code demonstrates how to handle different streaming patterns including bidirectional streaming, client-to-server streaming, and server-to-client streaming in the service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: req.Name}\n\treturn resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetStream(ctx context.Context, stream greet.GreetService_GreetStreamServer) error {\n\tfor {\n\t\treq, err := stream.Recv()\n\t\tif err != nil {\n\t\t\tif triple.IsEnded(err) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\treturn fmt.Errorf(\"triple BidiStream recv error: %s\", err)\n\t\t}\n\t\tif err := stream.Send(&greet.GreetStreamResponse{Greeting: req.Name}); err != nil {\n\t\t\treturn fmt.Errorf(\"triple BidiStream send error: %s\", err)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (srv *GreetTripleServer) GreetClientStream(ctx context.Context, stream greet.GreetService_GreetClientStreamServer) (*greet.GreetClientStreamResponse, error) {\n\tvar reqs []string\n\tfor stream.Recv() {\n\t\treqs = append(reqs, stream.Msg().Name)\n\t}\n\tif stream.Err() != nil && !triple.IsEnded(stream.Err()) {\n\t\treturn nil, fmt.Errorf(\"triple ClientStream recv err: %s\", stream.Err())\n\t}\n\tresp := &greet.GreetClientStreamResponse{\n\t\tGreeting: strings.Join(reqs, \",\"),\n\t}\n\n\treturn resp, nil\n}\n\nfunc (srv *GreetTripleServer) GreetServerStream(ctx context.Context, req *greet.GreetServerStreamRequest, stream greet.GreetService_GreetServerStreamServer) error {\n\tfor i := 0; i < 5; i++ {\n\t\tif err := stream.Send(&greet.GreetServerStreamResponse{Greeting: req.Name}); err != nil {\n\t\t\treturn fmt.Errorf(\"triple ServerStream send err: %s\", err)\n\t\t}\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Control Plane with Manifests\nDESCRIPTION: Command to install the dubbo-control-plane component using dubboctl manifests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubboctl manifests install --profile=control-plane\n```\n\n----------------------------------------\n\nTITLE: Configuring DubboRoute in VirtualService\nDESCRIPTION: Example showing the structure of a DubboRoute within a VirtualService. It includes fields for name, service, fault injection, mirroring, retries, timeout, and route details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo: #DubboRoute\n  - name:\n    service:\n    fault:\n    mirror:\n    retries:\n    timeout:\n    routedetail:\n```\n\n----------------------------------------\n\nTITLE: Using Generic Method to Access HTTP Request and Response\nDESCRIPTION: Shows how to use generic methods to directly retrieve typed HTTP request and response objects from RpcContext, which simplifies programming by eliminating type casting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse(HttpServletResponse.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Client Serialization in Dubbo Python\nDESCRIPTION: Client-side implementation using JSON for multi-parameter serialization in Dubbo Python, demonstrating custom serialization with orjson.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef request_serializer(name: str, age: int) -> bytes:\n    return orjson.dumps({\"name\": name, \"age\": age})\n\ndef response_deserializer(data: bytes) -> str:\n    json_dict = orjson.loads(data)\n    return json_dict[\"message\"]\n\nclass GreeterServiceStub:\n    def __init__(self, client: dubbo.Client):\n        self.unary = client.unary(\n            method_name=\"unary\",\n            request_serializer=request_serializer,\n            response_deserializer=response_deserializer,\n        )\n\n    def say_hello(self, name: str, age: int):\n        return self.unary(name, age)\n\nif __name__ == \"__main__\":\n    reference_config = ReferenceConfig.from_url(\n        \"tri://127.0.0.1:50051/org.apache.dubbo.samples.serialization.json\"\n    )\n    dubbo_client = dubbo.Client(reference_config)\n\n    stub = GreeterServiceStub(dubbo_client)\n    result = stub.say_hello(\"dubbo-python\", 18)\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider\nDESCRIPTION: Implements the HelloService interface with a simple service that introduces a 1-second delay before responding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.skywalking.demo.provider;\n\n@Service(version = \"${demo.service.version}\",\n\tapplication = \"${dubbo.application.id}\",\n\tprotocol = \"${dubbo.protocol.id}\",\n\tregistry = \"${dubbo.registry.id}\", timeout = 60000)\npublic class HelloServiceImpl implements HelloService {\n\n\tpublic String sayHello(String name) {\n\t\tLockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1));\n\t\treturn \"Hello, \" + name;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Conditions for Consumer and Provider URLs in Dubbo ConditionRouter\nDESCRIPTION: These methods are used to match the URL against consumer ('when') and provider ('then') conditions. The matchWhen method checks if the consumer URL matches the condition, while matchThen verifies if a provider URL matches.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/router.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nboolean matchWhen(URL url, Invocation invocation) {\n    // 服务消费者条件为 null 或空，均返回 true，比如：\n    //     => host != 172.22.3.91\n    // 表示所有的服务消费者都不得调用 IP 为 172.22.3.91 的机器上的服务\n    return whenCondition == null || whenCondition.isEmpty() \n        || matchCondition(whenCondition, url, null, invocation);  // 进行条件匹配\n}\n\nprivate boolean matchThen(URL url, URL param) {\n    // 服务提供者条件为 null 或空，表示禁用服务\n    return !(thenCondition == null || thenCondition.isEmpty()) \n        && matchCondition(thenCondition, url, param, null);  // 进行条件匹配\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Protocol Configuration to DubboBootstrap in Java\nDESCRIPTION: This code shows how to add a ProtocolConfig object to DubboBootstrap using the protocol method. It sets the protocol type to Dubbo and uses port -1 to allocate an available port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/11-Dubbo启动器DubboBootstrap添加协议配置信息ProtocolConfig.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n.protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n```\n\n----------------------------------------\n\nTITLE: Executing Request Chain in ShenyuWebHandler\nDESCRIPTION: The entry point of a request in ShenYu gateway is ShenyuWebHandler, which implements the WebHandler interface from Spring WebFlux. It executes a chain of plugins using the chain of responsibility design pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.web.handler.ShenyuWebHandler.DefaultShenyuPluginChain#execute()\n```\n\n----------------------------------------\n\nTITLE: Accessing Spring Context in Dubbo Using Arthas OGNL\nDESCRIPTION: This example shows how to use Arthas's ognl command to access the Spring context maintained by Dubbo's SpringExtensionFactory. It demonstrates retrieving a bean from the context and invoking methods on it directly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ognl '#context=@com.alibaba.dubbo.config.spring.extension.SpringExtensionFactory@contexts.iterator.next, #context.getBean(\"userServiceImpl\").findUser(1)'\n@User[\n    id=@Integer[1],\n    name=@String[Deanna Borer],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring WAR Packaging for External Servlet Container in Dubbo\nDESCRIPTION: Maven configuration to change the packaging type to WAR for deploying Dubbo REST services in an external servlet container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n    <packaging>war</packaging>\n```\n\n----------------------------------------\n\nTITLE: Service Export Template Method in ServiceConfig\nDESCRIPTION: The main export method in ServiceConfig that serves as a template method for service export. It ensures the module is started, performs synchronization, refreshes configuration if needed, and delegates to the appropriate export method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n    @Override\n    public void export() {\n    \t//已经导出过服务直接放那会\n        if (this.exported) {\n            return;\n        }\n\n        // ensure start module, compatible with old api usage\n        //确保模块启动了(基本的初始化操作执行了)\n        getScopeModel().getDeployer().start();\n\t\t//悲观锁\n        synchronized (this) {\n        \t//双重校验\n            if (this.exported) {\n                return;\n            }\n\t\t\t//配置是否刷新 前面初始化时候已经刷新过配置\n            if (!this.isRefreshed()) {\n                this.refresh();\n            }\n            //服务导出配置配置为false则不导出\n            if (this.shouldExport()) {\n            \t//服务发布前初始化一下元数据对象\n                this.init();\n\t\t\t\n                if (shouldDelay()) {\n                \t//配置了服务的延迟发布配置则走延迟发布逻辑\n                    doDelayExport();\n                } else {\n                \t//导出服务\n                    doExport();\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Java Server and Go Client for Interface-Level Service Discovery\nDESCRIPTION: Shell commands to start the Java server and Go client for demonstrating interface-level service discovery interoperability, specifically for dubbo2 users.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/service-discovery.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd interface\ncd java-server\nsh run.sh\n\ncd go-client\ngo run client.go\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderService in Java\nDESCRIPTION: Implementation of the OrderService interface. This class handles order creation, calculates order amount, debits the user's account, and persists the order details to the database.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class OrderServiceImpl implements OrderService {\n\n    private OrderDAO orderDAO;\n\n    private AccountService accountService;\n\n    public Order create(String userId, String commodityCode, int orderCount) {\n\n        int orderMoney = calculate(commodityCode, orderCount);\n\n        accountService.debit(userId, orderMoney);\n\n        Order order = new Order();\n        order.userId = userId;\n        order.commodityCode = commodityCode;\n        order.count = orderCount;\n        order.money = orderMoney;\n\n        return orderDAO.insert(order);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Dubbo-go Server with cURL\nDESCRIPTION: Shell command using cURL to test if the RPC server is working properly. This sends a JSON request to the Greet service endpoint on the local server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:20000/greet.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Exposing Monitoring Service without Registry in Dubbo\nDESCRIPTION: XML configuration for exposing a simple monitoring center service without registering it to the registry center. Sets the application name, protocol, and service configuration with registry=\"N/A\".\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/simple-monitor.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n \n    <!-- 当前应用信息配置 -->\n    <dubbo:application name=\"simple-monitor\" />\n     \n    <!-- 暴露服务协议配置 -->\n    <dubbo:protocol port=\"7070\" />\n \n    <!-- 暴露服务配置 -->\n    <dubbo:service interface=\"org.apache.dubbo.monitor.MonitorService\" ref=\"monitorService\" registry=\"N/A\" />\n \n    <bean id=\"monitorService\" class=\"org.apache.dubbo.monitor.simple.SimpleMonitorService\" />   \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic in FailoverClusterInvoker (Java)\nDESCRIPTION: This snippet shows the doInvoke method of FailoverClusterInvoker, which implements the retry logic. It retrieves the retry count, selects an invoker using load balancing, and attempts the invocation, retrying on failure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class FailoverClusterInvoker<T> extends AbstractClusterInvoker<T> {\n\n    // 省略部分代码\n\n    @Override\n    public Result doInvoke(Invocation invocation, final List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        List<Invoker<T>> copyinvokers = invokers;\n        checkInvokers(copyinvokers, invocation);\n        // 获取重试次数\n        int len = getUrl().getMethodParameter(invocation.getMethodName(), Constants.RETRIES_KEY, Constants.DEFAULT_RETRIES) + 1;\n        if (len <= 0) {\n            len = 1;\n        }\n        RpcException le = null;\n        List<Invoker<T>> invoked = new ArrayList<Invoker<T>>(copyinvokers.size());\n        Set<String> providers = new HashSet<String>(len);\n        // 循环调用，失败重试\n        for (int i = 0; i < len; i++) {\n            if (i > 0) {\n                checkWhetherDestroyed();\n                // 在进行重试前重新列举 Invoker，这样做的好处是，如果某个服务挂了，\n                // 通过调用 list 可得到最新可用的 Invoker 列表\n                copyinvokers = list(invocation);\n                // 对 copyinvokers 进行判空检查\n                checkInvokers(copyinvokers, invocation);\n            }\n\n            // 通过负载均衡选择 Invoker\n            Invoker<T> invoker = select(loadbalance, invocation, copyinvokers, invoked);\n            // 添加到 invoker 到 invoked 列表中\n            invoked.add(invoker);\n            // 设置 invoked 到 RPC 上下文中\n            RpcContext.getContext().setInvokers((List) invoked);\n            try {\n                // 调用目标 Invoker 的 invoke 方法\n                Result result = invoker.invoke(invocation);\n                return result;\n            } catch (RpcException e) {\n                if (e.isBiz()) {\n                    throw e;\n                }\n                le = e;\n            } catch (Throwable e) {\n                le = new RpcException(e.getMessage(), e);\n            } finally {\n                providers.add(invoker.getUrl().getAddress());\n            }\n        }\n        \n        // 若重试失败，则抛出异常\n        throw new RpcException(..., \"Failed to invoke the method ...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Annotating Dubbo Service in Java\nDESCRIPTION: Example of implementing a Dubbo service and adding Dubbo-Api-Docs annotations. The @ApiModule annotation describes the service module, and @ApiDoc describes the specific method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-api-docs.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@DubboService\n@ApiModule(value = \"quick start demo\", apiInterface = IQuickStartDemo.class, version = \"v0.1\")\npublic class QuickStartDemoImpl implements IQuickStartDemo {\n\n  @ApiDoc(value = \"quick start demo\", version = \"v0.1\", description = \"this api is a quick start demo\", responseClassDescription=\"A quick start response bean\")\n  @Override\n  public QuickStartRespBean quickStart(@RequestParam(value = \"strParam\", required = true) String strParam, QuickStartRequestBean beanParam) {\n    return new QuickStartRespBean(200, \"hello \" + beanParam.getName() + \", \" + beanParam.toString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization in Dubbo XML\nDESCRIPTION: XML configuration examples showing how to specify serialization method at protocol and provider levels in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/serialize.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 协议的序列化方式 -->\n<dubbo:protocol serialization=\"xxx\" />\n<!-- 缺省值设置，当<dubbo:protocol>没有配置serialization时，使用此配置 -->\n<dubbo:provider serialization=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing at Consumer Level in Dubbo\nDESCRIPTION: XML configuration example for setting the load balancing strategy at the service consumer level. This affects how the client distributes requests across multiple providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"...\" loadbalance=\"roundrobin\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Name Format\nDESCRIPTION: Format specification for Dubbo service names including group, interface name and version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n${group}/${interfaceName}:${version}\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard gRPC Client to Call Both gRPC and Dubbo-go Servers\nDESCRIPTION: Implementation of a standard gRPC client that calls both the gRPC server and the Dubbo-go server using the gRPC client interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/dubbogo/gost/log/logger\"\n\n\tpb \"github.com/apache/dubbo-go-samples/rpc/grpc/proto\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\nfunc main() {\n\t// test connect with grpc\n\tgrpcConn, err := grpc.Dial(\"127.0.0.1:20001\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer grpcConn.Close()\n\tc := pb.NewGreetServiceClient(grpcConn)\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tresp, err := c.Greet(ctx, &pb.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n\n\t// test connect with dubbo\n\tdubboConn, err := grpc.Dial(\"127.0.0.1:20000\", grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlogger.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer dubboConn.Close()\n\tc = pb.NewGreetServiceClient(dubboConn)\n\tctx, cancel = context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tresp, err = c.Greet(ctx, &pb.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering Monitoring Center through Registry in Dubbo\nDESCRIPTION: XML configuration for discovering the monitoring center service through the registry. Also includes alternative configuration using properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/simple-monitor.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:monitor protocol=\"registry\" />\n```\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.monitor.protocol=registry\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Dubbo Proxyless Mesh\nDESCRIPTION: Commands to create and switch to the Kubernetes namespace for deploying the Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize namespace\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/dubbo-samples-xds/deploy/Namespace.yml\n\n# Switch namespace\nkubens dubbo-demo\n```\n\n----------------------------------------\n\nTITLE: Provider-Side Service Level Load Balancing Configuration\nDESCRIPTION: XML configuration to set a load balancing strategy for all methods of a service at the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n```\n\n----------------------------------------\n\nTITLE: Querying All Monitoring Metrics via Telnet\nDESCRIPTION: Shows how to connect to Dubbo via telnet and query all available monitoring metrics using the metrics_default command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> metrics_default\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service in XML Configuration\nDESCRIPTION: XML configuration for a Dubbo service, including the application name, registry address, protocol settings, and service interface definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans /* ...... * />\n\n    <dubbo:application name=\"test-dubbo-service\"/>\n    <dubbo:registry address=\"${dubbo.registry.address}\"/>\n    <dubbo:protocol name=\"dubbo\" port=\"20888\"/>\n\n    <dubbo:service timeout=\"10000\" interface=\"org.apache.shenyu.examples.dubbo.api.service.DubboTestService\" ref=\"dubboTestService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Referencing Simple Registry Service by Address with Group and Version\nDESCRIPTION: XML configuration for referencing the Simple registry service by combining address with group and version parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/simple.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"127.0.0.1:9090\" group=\"simple\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: 执行 Dubbo 回声测试 (Java)\nDESCRIPTION: 展示如何获取服务引用并将其转换为 EchoService 接口来执行回声测试。代码先从 Spring 上下文获取服务引用，然后强制转型为 EchoService，最后调用 $echo 方法进行测试并验证结果。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/echo-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 远程服务引用\nMemberService memberService = ctx.getBean(\"memberService\"); \n \nEchoService echoService = (EchoService) memberService; // 强制转型为EchoService\n\n// 回声测试可用性\nString status = echoService.$echo(\"OK\"); \n \nassert(status.equals(\"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Pixiu Gateway\nDESCRIPTION: Command to start Pixiu in gateway mode using a configuration file. Requires absolute path to the config file after -c flag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixiu gateway start -c /config/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring MessagePack in Properties File\nDESCRIPTION: Various property configurations to enable MessagePack serialization at different levels including protocol, consumer, and reference levels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.serialization=msgpack\n\n# or\ndubbo.consumer.serialization=msgpack\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=msgpack\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Filter for Request Tracking\nDESCRIPTION: Java implementation of MetricsFilter, which provides request metrics tracking for the provider side in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Activate(group = PROVIDER, order = -1)\npublic class MetricsFilter implements Filter, ScopeModelAware {\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        collector.increaseTotalRequests(interfaceName, methodName, group, version);\n        collector.increaseProcessingRequests(interfaceName, methodName, group, version);\n        Long startTime = System.currentTimeMillis();\n        try {\n            Result invoke = invoker.invoke(invocation);\n            collector.increaseSucceedRequests(interfaceName, methodName, group, version);\n            return invoke;\n        } catch (RpcException e) {\n            collector.increaseFailedRequests(interfaceName, methodName, group, version);\n            throw e;\n        } finally {\n            Long endTime = System.currentTimeMillis();\n            Long rt = endTime - startTime;\n            collector.addRT(interfaceName, methodName, group, version, rt);\n            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Graceful Shutdown in Dubbo-go using YAML\nDESCRIPTION: YAML configuration for graceful shutdown in Dubbo-go. Parameters include timeout, step-timeout, consumer-update-wait-time, internal-signal, and offline-request-window-timeout with their default values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/deploy2/graceful_shutdown.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  shutdown:\n    timeout:60\n    step-timeout:3\n    consumer-update-wait-time:3\n    internal-signal:true\n    offline-request-window-timeout:0\n```\n\n----------------------------------------\n\nTITLE: Starting the Hugo Local Development Server\nDESCRIPTION: Command to start the Hugo local development server with fast render disabled. Includes a note on troubleshooting module downloads by setting GOPROXY.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/README.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhugo server --disableFastRender\n# If you get stuck with 'hugo: downloading modules …' after running this command, please try to set GOPROXY by running `export GOPROXY=\"https://goproxy.cn|https://proxy.golang.com.cn\"` and try again.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Service Consumer with Annotation\nDESCRIPTION: A consumer component that uses @Reference to inject the remote GreetingService and provides a method to invoke the remote service. This allows the consumer to use the interface without implementing it locally.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Component(\"annotatedConsumer\")\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Dubbo Reference Manual Page\nDESCRIPTION: YAML frontmatter configuration block that specifies metadata for a documentation page. Sets the content type as advanced documentation, defines the page title as 'Reference Manual', sets up navigation linking, and assigns a weight of 5 for sorting purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/java-sdk/v2.x/reference-manual/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: advanced-docs\ntitle: \"Reference Manual\"\nlinkTitle: \"Reference Manual\"\nweight: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Random Token Authorization in Dubbo XML\nDESCRIPTION: Sets up global token authorization using a randomly generated UUID token for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/token-authorization.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider token=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Filter for Request Tracking\nDESCRIPTION: Java implementation of MetricsFilter, which provides request metrics tracking for the provider side in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Activate(group = PROVIDER, order = -1)\npublic class MetricsFilter implements Filter, ScopeModelAware {\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        collector.increaseTotalRequests(interfaceName, methodName, group, version);\n        collector.increaseProcessingRequests(interfaceName, methodName, group, version);\n        Long startTime = System.currentTimeMillis();\n        try {\n            Result invoke = invoker.invoke(invocation);\n            collector.increaseSucceedRequests(interfaceName, methodName, group, version);\n            return invoke;\n        } catch (RpcException e) {\n            collector.increaseFailedRequests(interfaceName, methodName, group, version);\n            throw e;\n        } finally {\n            Long endTime = System.currentTimeMillis();\n            Long rt = endTime - startTime;\n            collector.addRT(interfaceName, methodName, group, version, rt);\n            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Server and Client\nDESCRIPTION: Commands to navigate to the example directory and run the server and client applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/helloworld\npython server.py\npython client.py\n```\n\n----------------------------------------\n\nTITLE: Starting Pixiu Gateway\nDESCRIPTION: Command to start Pixiu in gateway mode using a configuration file. Requires absolute path to the config file after -c flag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npixiu gateway start -c /config/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with Java Configuration\nDESCRIPTION: This Java configuration class sets up a Dubbo consumer using annotations to reference REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.samples.rest.comp\")\n@ComponentScan({\"org.apache.dubbo.samples.rest.comp\"})\nstatic class ConsumerConfiguration {\n    @Bean\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"rest-consumer\");\n        return applicationConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Check Extension in Dubbo XML\nDESCRIPTION: XML configuration for specifying status checkers in Dubbo protocol and provider settings. It demonstrates how to set custom status checkers or use default configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/status-checker.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol status=\"xxx,yyy\" />\n<!-- Default value setting. When the <dubbo:protocol> does not have a status attribute configured, this configuration is used -->\n<dubbo:provider status=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Framework Service Repository from Module Model in Dubbo\nDESCRIPTION: Code that demonstrates how to access the framework service repository through a module model using the ScopeModelUtil utility class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nScopeModelUtil.getFrameworkModel(moduleModel).getServiceRepository()\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Repository\nDESCRIPTION: MongoDB implementation of the IRepository interface that saves data to MongoDB database.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MongoRepository implements IRepository {\n    public void save(String data) {\n        System.out.println(\"Save \" + data + \" to Mongo\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Dubbo Service Interface in Java\nDESCRIPTION: Demonstrates how to define a simple Dubbo service interface that will be implemented by service providers and consumed by clients. This interface declares a single method 'hello' that takes a string argument and returns a string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/service-definition.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n    String hello(String arg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DubboMatchRequest in VirtualService\nDESCRIPTION: Example of a DubboMatchRequest configuration within a VirtualService. It demonstrates how to define matching rules for requests based on method, source labels, attachments, headers, and thresholds.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match: #DubboMatchRequest\n      - name:\n        method:\n        sourceLabels:\n        attachments:\n        headers:\n        threshold:\n```\n\n----------------------------------------\n\nTITLE: Verifying Prometheus Deployment in Kubernetes\nDESCRIPTION: Command to check if Prometheus server is running correctly in the Kubernetes cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/prometheus.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl -n dubbo-system get svc prometheus-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go with Zookeeper Registry\nDESCRIPTION: Code example showing how to initialize a Dubbo-Go instance with Zookeeper registry configuration. Sets up the registry address and protocol settings for the server instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, _ := dubbo.NewInstance(\n\tdubbo.WithName(\"dubbo_registry_nacos_server\"),\n\tdubbo.WithRegistry(\n\t\tregistry.WithZookeeper(),\n\t\tregistry.WithAddress(\"127.0.0.1:2181\"),\n\t),\n\tdubbo.WithProtocol(\n\t\tprotocol.WithTriple(),\n\t\tprotocol.WithPort(20000),\n\t),\n)\n\nsrv, err := ins.NewServer()\n```\n\n----------------------------------------\n\nTITLE: Configuring RMI Response Timeout\nDESCRIPTION: Java command line parameter for setting RMI transport response timeout\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -Dsun.rmi.transport.tcp.responseTimeout=3000\n```\n\n----------------------------------------\n\nTITLE: Initiating Dubbo Remote Service Call from Client\nDESCRIPTION: This snippet shows how to start a Spring context, retrieve a service consumer bean, and initiate a remote call using Dubbo. It demonstrates the complete client-side workflow from context initialization to result handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ConsumerBootstrap {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class); // #1\n        context.start(); // #2\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class); // #3\n        String hello = greetingServiceConsumer.doSayHello(\"annotation\"); // #4\n        System.out.println(\"result: \" + hello); // #5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying ReferenceConfig in Cache\nDESCRIPTION: This code shows how to properly destroy a ReferenceConfig that is stored in the cache. This ensures resources are released correctly when the service is no longer needed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/reference-config-cache.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfigCache cache = ReferenceConfigCache.getCache();  \ncache.destroy(reference);  \n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with YAML\nDESCRIPTION: YAML configuration file for the Dubbo service, specifying service details, protocol settings, and network configurations for the Triple RPC protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ./dubbo.yaml\nname: dubbo\nservice:\n  org.apache.dubbo.sample.tri.Greeter:\n    version: 1.0.0\n    group: test\n    protocol: triple\n    registry: ''\n    serializer: json\n    protocol_configs:\n      triple:\n        ip: 0.0.0.0\n        port: '8888'\n        name: triple\nprotocols:\n  triple:\n    ip: 0.0.0.0\n    port: '8888'\n    name: triple\n```\n\n----------------------------------------\n\nTITLE: Configuring Invoker Listener in Dubbo XML\nDESCRIPTION: XML configuration examples for setting up reference service listeners and default listeners for reference services in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/invoker-listener.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Reference Service Listener -->\n<dubbo:reference listener=\"xxx,yyy\" /> \n<!-- Default Listener for Reference Services -->\n<dubbo:consumer listener=\"xxx,yyy\" /> \n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Group Invokers in Dubbo Service Directory\nDESCRIPTION: This code handles cases where multiple service groups exist by using cluster to join invokers from the same group and organizing them by method. It's part of the invoker list refresh logic in Dubbo's RegistryDirectory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n} else if (groupMap.size() > 1) {\n    List<Invoker<T>> groupInvokers = new ArrayList<Invoker<T>>();\n    for (List<Invoker<T>> groupList : groupMap.values()) {\n        // 通过集群类合并每个分组对应的 Invoker 列表\n        groupInvokers.add(cluster.join(new StaticDirectory<T>(groupList)));\n    }\n    // 缓存结果\n    result.put(method, groupInvokers);\n} else {\n    result.put(method, invokers);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Hystrix in Spring Boot Application\nDESCRIPTION: Java code showing how to enable Hystrix in a Spring Boot application by adding the @EnableHystrix annotation to the Application class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableHystrix\npublic class ProviderApplication {\n```\n\n----------------------------------------\n\nTITLE: Kubernetes and Istio Commands\nDESCRIPTION: Common Kubernetes and Istio commands for debugging and managing pods, including log viewing and sidecar injection controls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it ${your pod id} -c istio-proxy curl http://127.0.0.1:15000/config_dump > config_dump\n\nkubectl exec -it ${your pod id} -c istio-proxy -- /bin/bash\n\nkubectl logs ${your pod id} -n ${your namespace}\n\nkubectl logs ${your pod id} -n ${your namespace} -c istio-proxy\n\nkubectl label namespace ${your namespace} istio-injection=enabled --overwrite\n\nkubectl label namespace ${your namespace} istio-injection=disabled --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Components for Native Support\nDESCRIPTION: YAML configuration example for Dubbo that specifies compatible components for native image compilation. It includes settings for serialization (Fastjson2), protocol, registry, config center, and metadata reporting using Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-graalvm-support.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: ${spring.application.name}\n    logger: slf4j\n  protocol:\n    name: dubbo\n    port: -1\n    serialization: fastjson2\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n  config-center:\n    address: zookeeper://127.0.0.1:2181\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n  provider:\n    serialization: fastjson2\n  consumer:\n    serialization: fastjson2\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Components for Native Support\nDESCRIPTION: YAML configuration example for Dubbo that specifies compatible components for native image compilation. It includes settings for serialization (Fastjson2), protocol, registry, config center, and metadata reporting using Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-graalvm-support.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: ${spring.application.name}\n    logger: slf4j\n  protocol:\n    name: dubbo\n    port: -1\n    serialization: fastjson2\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n  config-center:\n    address: zookeeper://127.0.0.1:2181\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n  provider:\n    serialization: fastjson2\n  consumer:\n    serialization: fastjson2\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractConfig in Java\nDESCRIPTION: These constructors initialize the AbstractConfig class, setting up the ScopeModel and calling postProcessAfterScopeModelChanged.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic AbstractConfig() {\n        this(ApplicationModel.defaultModel());\n    }\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic AbstractConfig(ScopeModel scopeModel) {\n        this.setScopeModel(scopeModel);\n    }\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic final void setScopeModel(ScopeModel scopeModel) {\n        if (this.scopeModel != scopeModel) {\n            checkScopeModel(scopeModel);\n            ScopeModel oldScopeModel = this.scopeModel;\n            this.scopeModel = scopeModel;\n            this.postProcessAfterScopeModelChanged(oldScopeModel, this.scopeModel);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Registry Service Provider in XML\nDESCRIPTION: XML configuration showing how to register services to multiple registry centers simultaneously, enabling cross-region service availability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"beijingRegistry\" address=\"zookeeper://${zookeeper.address1}\" default=\"false\"/>\n<dubbo:registry id=\"shanghaiRegistry\" address=\"zookeeper://${zookeeper.address2}\" />\n\n<dubbo:service interface=\"org.apache.dubbo.samples.multi.registry.api.HelloService\" ref=\"helloService\" registry=\"shanghaiRegistry,beijingRegistry\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.multi.registry.api.DemoService\" ref=\"demoService\" registry=\"shanghaiRegistry,beijingRegistry\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Class Generation using ClassGenerator in Dubbo\nDESCRIPTION: Code for generating wrapper class using Dubbo's ClassGenerator. Includes adding fields, methods and handling class generation through Javassist. The code sets up class structure and handles property/method access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nlong id = WRAPPER_CLASS_COUNTER.getAndIncrement();\nClassGenerator cc = ClassGenerator.newInstance(cl);\ncc.setClassName((Modifier.isPublic(c.getModifiers()) ? Wrapper.class.getName() : c.getName() + \"$sw\") + id);\ncc.setSuperClass(Wrapper.class);\n\ncc.addDefaultConstructor();\n\ncc.addField(\"public static String[] pns;\");\ncc.addField(\"public static \" + Map.class.getName() + \" pts;\");\ncc.addField(\"public static String[] mns;\");\ncc.addField(\"public static String[] dmns;\");\nfor (int i = 0, len = ms.size(); i < len; i++)\n    cc.addField(\"public static Class[] mts\" + i + \";\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Destination Rules in Istio\nDESCRIPTION: This command displays the subset definitions (destination rules) in Istio as YAML, showing how traffic is routed to specific service versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get destinationrules -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo-go Service in Protocol Buffers\nDESCRIPTION: Defines the GreetService with a Greet RPC method using Protocol Buffers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/attachments.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/context/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LivenessProbe Interface in Java\nDESCRIPTION: Example of implementing the LivenessProbe interface to create a custom liveness probe for Dubbo. The check() method should be implemented to define the liveness check logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/liveness.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\npublic class XxxLivenessProbe implements LivenessProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Registry with URL Parameter\nDESCRIPTION: Alternative method to set registry to non-dynamic mode using URL parameter syntax in XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/static-service.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.141.150:9090?dynamic=false\" />\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for HTTP Proxy Sample\nDESCRIPTION: Shows the basic directory layout for the HTTP proxy sample implementation, including pixiu configuration, server, and test directories.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- pixiu # pixiu configuration files\n- server # http server\n- test # client or unit test\n```\n\n----------------------------------------\n\nTITLE: Getting and Initializing Domain Model Initializers in Dubbo\nDESCRIPTION: This code retrieves ScopeModelInitializer extensions via SPI and invokes their initializeFrameworkModel method to pass the FrameworkModel object. The framework iterates through all available initializers to set up the model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nExtensionLoader<ScopeModelInitializer> initializerExtensionLoader = this.getExtensionLoader(ScopeModelInitializer.class);\n    //获取ScopeModelInitializer类型的支持的扩展集合，这里当前版本存在8个扩展类型实现\n    Set<ScopeModelInitializer> initializers = initializerExtensionLoader.getSupportedExtensionInstances();\n    //遍历这些扩展实现调用他们的initializeFrameworkModel方法来传递FrameworkModel类型对象，细节我们待会再详细说下\n    for (ScopeModelInitializer initializer : initializers) {\n        initializer.initializeFrameworkModel(this);\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Classes in Dubbo\nDESCRIPTION: Core method that loads extension classes using different strategies. Handles caching of default extensions and uses different loading strategies for Dubbo internal, Dubbo regular, and Java SPI extensions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nprivate Map<String, Class<?>> loadExtensionClasses() {\n  \t\t//检查扩展加载器是否被销毁\n        checkDestroyed();\n        //缓存默认的扩展名到成员变量cachedDefaultName中\n        cacheDefaultExtensionName();\n\t\t//加载到的扩展集合\n        Map<String, Class<?>> extensionClasses = new HashMap<>();\n        for (LoadingStrategy strategy : strategies) {\n            loadDirectory(extensionClasses, strategy, type.getName());\n            if (this.type == ExtensionInjector.class) {\n                loadDirectory(extensionClasses, strategy, ExtensionFactory.class.getName());\n            }\n        }\n        return extensionClasses;\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Registry Configuration in Dubbo\nDESCRIPTION: Several equivalent ways to configure Redis as a registry in Dubbo applications, including simple configuration with a single Redis instance and more complex configurations with multiple servers for backup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Kubernetes and Istio Commands\nDESCRIPTION: Common Kubernetes and Istio commands for debugging and managing pods, including log viewing and sidecar injection controls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it ${your pod id} -c istio-proxy curl http://127.0.0.1:15000/config_dump > config_dump\n\nkubectl exec -it ${your pod id} -c istio-proxy -- /bin/bash\n\nkubectl logs ${your pod id} -n ${your namespace}\n\nkubectl logs ${your pod id} -n ${your namespace} -c istio-proxy\n\nkubectl label namespace ${your namespace} istio-injection=enabled --overwrite\n\nkubectl label namespace ${your namespace} istio-injection=disabled --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring Failsafe Strategy at Service Provider Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the failsafe strategy at the service provider level. Failsafe strategy ignores failures, logs them, and returns empty results, suitable for non-critical operations like audit logging.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoService\" cluster=\"failsafe\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Mapper in Dubbo REST Protocol\nDESCRIPTION: XML configuration to register a custom ExceptionMapper with Dubbo REST protocol. This connects the exception handler to the REST processing pipeline.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.CustomExceptionMapper\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failsafe Strategy at Service Consumer Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the failsafe strategy at the service consumer level. Consumer-side configurations take precedence over provider-side configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"failsafe\"/>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Request Processing Call Stack\nDESCRIPTION: Shows the call stack for request processing in Dubbo, starting from NettyHandler's messageReceived down to thread pool execution.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nNettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)\n  —> AbstractPeer#received(Channel, Object)\n    —> MultiMessageHandler#received(Channel, Object)\n      —> HeartbeatHandler#received(Channel, Object)\n        —> AllChannelHandler#received(Channel, Object)\n          —> ExecutorService#execute(Runnable)\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtensionLoader with ExtensionFactory\nDESCRIPTION: This constructor initializes an ExtensionLoader for a specific type, setting up the objectFactory to handle dependency injection. For all extension types except ExtensionFactory itself, it creates an adaptive extension instance for ExtensionFactory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate ExtensionLoader(Class<?> type) {\n        this.type = type;\n        objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Router Snapshot Collection in Dubbo\nDESCRIPTION: The enableRouterSnapshot command activates router result collection mode for specified services. The serviceName parameter supports pattern matching. This command may impact performance and should be used carefully.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/router-snapshot.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>enableRouterSnapshot com.dubbo.*\nOK. Found service count: 1. This will cause performance degradation, please be careful!\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hystrix in Spring Boot Application\nDESCRIPTION: Java code showing how to enable Hystrix in a Spring Boot application by adding the @EnableHystrix annotation to the Application class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@EnableHystrix\npublic class ProviderApplication {\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider with Spring\nDESCRIPTION: Spring configuration class for Dubbo provider that enables component scanning and loads properties from an external file. It uses @EnableDubbo to activate Dubbo annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.impl\")\n@PropertySource(\"classpath:/spring/dubbo-provider.properties\")\nstatic class ProviderConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicast Parameter for Dubbo Consumer Application\nDESCRIPTION: Illustrates how to set the 'unicast' parameter to false in the consumer application configuration to enable multiple consumers on the same machine to receive messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/multicast.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"demo-consumer\">\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:application>\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapper Objects for Primitive Return Types in REST\nDESCRIPTION: Creating a wrapper class for primitive return types to support proper XML serialization in JAX-RS, following the Data Transfer Object pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class RegistrationResult implements Serializable {\n    \n    private Long id;\n    \n    public RegistrationResult() {\n    }\n    \n    public RegistrationResult(Long id) {\n        this.id = id;\n    }\n    \n    public Long getId() {\n        return id;\n    }\n    \n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a Greeter service with a unary RPC method. This IDL defines the request and response message structures along with the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// ./proto/greeter.proto\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.sample.tri;\n\n\n// The request message containing the user's name.\nmessage GreeterRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  // unary\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceConfig Object in Java\nDESCRIPTION: This snippet shows the creation of a ServiceConfig object, which is the first step in configuring a Dubbo service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();\n```\n\n----------------------------------------\n\nTITLE: Specifying Merge Method in Dubbo XML\nDESCRIPTION: XML configuration to specify a merge method (addAll) for aggregating results from multiple groups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/group-merger.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\">\n    <dubbo:method name=\"getMenuItems\" merger=\".addAll\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Iterator-based Multiple Writes in Client Stream Mode\nDESCRIPTION: Shows how to implement multiple writes using an iterator approach in client streaming mode. This creates a generator function that yields multiple request objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Use an iterator to send multiple requests\ndef request_generator():\n    for i in [\"hello\", \"world\", \"from\", \"dubbo-python\"]:\n        yield greeter_pb2.GreeterRequest(name=str(i))\n\n# Call the remote method and return a read_stream\nstream = stub.client_stream(request_generator())\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo-go-pixiu Gateway\nDESCRIPTION: This command starts the Dubbo-go-pixiu gateway using the specified configuration file. It sets up the proxy to route HTTP requests to the gRPC backend service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./dubbo-go-pixiu gateway start --config {CURRENT_PATH}/samples/http/grpc/pixiu/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Stub in Dubbo Consumer XML\nDESCRIPTION: XML configuration examples for enabling local stub functionality in Dubbo consumer. Shows both simple boolean configuration and specific implementation class configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-stub.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum HTTP Connections for Tomcat Server\nDESCRIPTION: XML configuration for setting the maximum number of concurrent HTTP connections that the REST server can accept, applicable only with Tomcat server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" accepts=\"500\" server=\"tomcat/>\n```\n\n----------------------------------------\n\nTITLE: Referencing Dubbo Service with @Reference Annotation\nDESCRIPTION: Demonstrates how to reference a Dubbo service using the @Reference annotation on a member variable. This allows for remote service calls through the interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n@Component(\"annotatedConsumer\")\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n\n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace for Nacos Registry (Method 1)\nDESCRIPTION: YAML configuration for Nacos registry with a custom namespace specified directly in the address URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n registry:\n   address: nacos://localhost:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\n```\n\n----------------------------------------\n\nTITLE: Listing Invokers in RegistryDirectory\nDESCRIPTION: The doList method in RegistryDirectory implements the logic for listing Invokers. It retrieves Invokers from a local cache based on method name and arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic List<Invoker<T>> doList(Invocation invocation) {\n    if (forbidden) {\n        throw new RpcException(RpcException.FORBIDDEN_EXCEPTION,\n            \"No provider available from registry ...\");\n    }\n    List<Invoker<T>> invokers = null;\n    Map<String, List<Invoker<T>>> localMethodInvokerMap = this.methodInvokerMap;\n    if (localMethodInvokerMap != null && localMethodInvokerMap.size() > 0) {\n        String methodName = RpcUtils.getMethodName(invocation);\n        Object[] args = RpcUtils.getArguments(invocation);\n        if (args != null && args.length > 0 && args[0] != null\n                && (args[0] instanceof String || args[0].getClass().isEnum())) {\n            invokers = localMethodInvokerMap.get(methodName + \".\" + args[0]);\n        }\n        if (invokers == null) {\n            invokers = localMethodInvokerMap.get(methodName);\n        }\n        if (invokers == null) {\n            invokers = localMethodInvokerMap.get(Constants.ANY_VALUE);\n        }\n    }\n\n    return invokers == null ? new ArrayList<Invoker<T>>(0) : invokers;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ThreadPool in Java for Dubbo\nDESCRIPTION: Java implementation of a custom ThreadPool for Dubbo. This example shows the basic structure of a ThreadPool implementation, including the package declaration and method signature.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/threadpool.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.xxx;\n\nimport org.apache.dubbo.common.threadpool.ThreadPool;\nimport java.util.concurrent.Executor;\n\npublic class XxxThreadPool implements ThreadPool {\n    public Executor getExecutor() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ListDoubleMatch in VirtualService\nDESCRIPTION: Example of a ListDoubleMatch configuration within a VirtualService. It demonstrates how to define a list of double value matching rules for method arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - method:\n        - args:\n          - index: 1\n            type: java.lang.Double\n            num_value: #ListDoubleMatch\n              oneof:\n              - range:\n                  start: 1\n                  end: 100\n```\n\n----------------------------------------\n\nTITLE: Getting Named Extensions in Dubbo\nDESCRIPTION: Method to retrieve a named extension instance with caching support. Uses double-checked locking pattern for thread-safe lazy initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic T getExtension(String name) {\n        Holder<Object> holder = cachedInstances.get(name);\n        if (holder == null) {\n            cachedInstances.putIfAbsent(name, new Holder<Object>());\n            holder = cachedInstances.get(name);\n        }\n        Object instance = holder.get();\n        if (instance == null) {\n            synchronized (holder) {\n                instance = holder.get();\n                if (instance == null) {\n                    instance = createExtension(name);\n                    holder.set(instance);\n                }\n            }\n        }\n        return (T) instance;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Connection Limits in Dubbo XML\nDESCRIPTION: Limits the number of connections the server accepts to a maximum of 10. This can be configured either at the provider level or protocol level to prevent server overload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" accepts=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Spring Boot Application for Dubbo Provider\nDESCRIPTION: Main Spring Boot application class that bootstraps the Dubbo provider. This class serves as the entry point for the Dubbo provider application that will be monitored by Pinpoint.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoProviderApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoProviderApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: LocationDO Class Definition in Java\nDESCRIPTION: Class definition for LocationDO containing address and postal information\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/test.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class LocationDO {\n    private String address;\n    private int postNum;\n\n    @Override\n    public String toString() {\n        return \"LocationDO{\" +\n                \"address='\" + address + \"'\" +\n                \", postNum=\" + postNum +\n                \"}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Service via HTTP\nDESCRIPTION: Demonstrates accessing the Dubbo service using HTTP POST request with cURL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncurl \\\n --header 'Content-Type: application/json' \\\n --header 'TRI-Service-Version: 1.0.0' \\\n --header 'TRI-Service-group: dubbo' \\\n --data '{\"sentence\": \"Hello World\"}' \\\n http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Types in Dubbo Properties\nDESCRIPTION: Specifies the container types to be loaded using the dubbo.properties file in the classpath.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.container=spring,jetty,log4j\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Propagation Configuration Properties\nDESCRIPTION: Configuration properties for the context propagation method in Dubbo's distributed tracing system. Controls how tracing context is propagated between services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.tracing.propagation.type=<string> # Tracing context propagation type. Default: W3C\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis MetadataReportFactory in Dubbo\nDESCRIPTION: Adds a MetadataReportFactory implementation for Redis by defining the factory in META-INF/dubbo/internal directory. This allows Dubbo to support Redis as a metadata storage option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nredis=org.apache.dubbo.metadata.store.redis.RedisMetadataReportFactory\n```\n\n----------------------------------------\n\nTITLE: Configuring Dual Registration Mode in YAML\nDESCRIPTION: YAML configuration example for enabling dual registration mode (both interface-level and application-level) in Dubbo 3.0 service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-samples.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# 双注册\ndubbo:\n    registry:\n        register-mode: all\n```\n\n----------------------------------------\n\nTITLE: Calculating maxQPS in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the maximum QPS within the window cycle.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/d5cf045bc17267befc176f3d76273267.svg)\n```\n\n----------------------------------------\n\nTITLE: Opening Server Port in DubboProtocol\nDESCRIPTION: This snippet shows the openServer method in DubboProtocol, which is responsible for opening the server port for RPC communication. It uses a double-checked locking pattern to ensure thread safety when creating the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate void openServer(URL url) {\n        checkDestroyed();\n        // find server. 地址作为key这里是192.168.1.9:20880\n        String key = url.getAddress();\n        // client can export a service which only for server to invoke\n        //默认提供者开启服务，消费者是不能开启服务的\n        boolean isServer = url.getParameter(IS_SERVER_KEY, true);\n        if (isServer) {\n            //协议服务器 下面一个双重校验锁检查，如果为空则创建服务\n            ProtocolServer server = serverMap.get(key);\n            if (server == null) {\n                synchronized (this) {\n                    server = serverMap.get(key);\n                    if (server == null) {\n                        serverMap.put(key, createServer(url));\n                    }else {\n                        server.reset(url);\n                    }\n                }\n            } else {\n                // server supports reset, use together with override\n                server.reset(url);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining RouterChain Interface in Go\nDESCRIPTION: Interface definition for Chain in dubbo-go which determines the target invokers list with chain and provides ability to add routers to the chain.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Chain\ntype Chain interface {\n\t// Route determine the target invokers list with chain.\n\tRoute([]protocol.Invoker, *common.URL, protocol.Invocation) []protocol.Invoker\n\t// AddRouters add routers\n\tAddRouters([]Router)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AbstractClusterInvoker in Dubbo\nDESCRIPTION: The AbstractClusterInvoker class is the base class for different cluster implementations in Dubbo. It provides the abstract doInvoke method that must be implemented by concrete cluster strategies to define how to handle invocations across multiple invokers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster.support;\n\npublic abstract class AbstractClusterInvoker<T> implements ClusterInvoker<T> {\n    \n    protected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: JavassistProxyFactory中实现代理创建\nDESCRIPTION: 使用Javassist动态代理技术实现代理对象创建的具体方法，创建InvokerInvocationHandler并使用Proxy工具类生成代理实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic <T> T getProxy(Invoker<T> invoker, Class<?>[] interfaces) {\n    // 生成 Proxy 子类（Proxy 是抽象类）。并调用 Proxy 子类的 newInstance 方法创建 Proxy 实例\n    return (T) Proxy.getProxy(interfaces).newInstance(new InvokerInvocationHandler(invoker));\n}\n```\n\n----------------------------------------\n\nTITLE: UserProvider Service Implementation\nDESCRIPTION: Example implementation of a UserProvider service with GetUser method that handles user data requests\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (u *UserProvider) GetUser(ctx context.Context, userStruct *CallUserStruct) (*User, error) {\n\tfmt.Printf(\"=======================\\nreq:%#v\\n\", userStruct)\n\trsp := User{\"A002\", \"Alex Stocks\", 18, userStruct.SubInfo}\n\tfmt.Printf(\"=======================\\nrsp:%#v\\n\", rsp)\n\treturn &rsp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Adaptive Protocol Extension in Dubbo\nDESCRIPTION: Demonstrates how to retrieve and use adaptive Protocol extensions in Dubbo. The code shows getting an adaptive Protocol implementation through ExtensionLoader and using it to reference a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboAdaptiveTest {\n\n    @Test\n    public void sayHello() throws Exception {\n        URL url = URL.valueOf(\"dubbo://localhost/test\");\n        Protocol adaptiveProtocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        adaptiveProtocol.refer(type, url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixiu YAML for gRPC Service Integration\nDESCRIPTION: This YAML configuration defines the static resources for Pixiu, including listeners, filters, and clusters. It sets up an HTTP listener that routes requests to a gRPC backend service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8881\n      filter_chains:\n        filters:\n          - name: dgp.filter.httpconnectionmanager\n            config:\n              route_config:\n                routes:\n                  - match:\n                      prefix: \"/api/v1\"\n                    route:\n                      cluster: \"test-grpc\"\n                      cluster_not_found_response_code: 505\n              http_filters:\n                - name: dgp.filter.http.grpcproxy\n                  config:\n                    path: /mnt/d/WorkSpace/GoLandProjects/dubbo-go-pixiu/samples/http/grpc/proto\n                - name: dgp.filter.http.response\n                  config:\n              server_name: \"test-http-grpc\"\n              generate_request_id: false\n      config:\n        idle_timeout: 5s\n        read_timeout: 5s\n        write_timeout: 5s\n  clusters:\n    - name: \"test-grpc\"\n      lb_policy: \"RoundRobin\"\n      endpoints:\n        - socket_address:\n            address: 127.0.0.1\n            port: 50001\n            protocol_type: \"GRPC\"\n  timeout_config:\n    connect_timeout: \"5s\"\n    request_timeout: \"10s\"\n  shutdown_config:\n    timeout: \"60s\"\n    step_timeout: \"10s\"\n    reject_policy: \"immediacy\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 with SLF4J\nDESCRIPTION: XML configuration for Log4j2 when using SLF4J as the logging facade for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n    <Appenders>\n        <File name=\"Dubbo\" fileName=\"dubbo.log\">\n          <PatternLayout>\n            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n</Pattern>\n          </PatternLayout>\n        </File>\n    </Appenders>\n    <Loggers>\n        <Logger name=\"org.apache.dubbo\" level=\"info\" additivity=\"false\">\n            <AppenderRef ref=\"Dubbo\"/>\n        </Logger>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Load Balance Configuration in Properties File\nDESCRIPTION: Configures method-level load balancing strategy using dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.loadbalance=roundrobin\n```\n\n----------------------------------------\n\nTITLE: Adding Seata Global Transaction Annotation in Java\nDESCRIPTION: Enhanced business method with Seata's @GlobalTransactional annotation. This annotation enables distributed transaction management across multiple microservices.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    @GlobalTransactional\n    public void purchase(String userId, String commodityCode, int orderCount) {\n        ......\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Strategy at Service Provider Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the broadcast strategy at the service provider level. Broadcast calls all providers, fails if any provider fails, suitable for cache or log updates across all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoService\" cluster=\"broadcast\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RequestMetadata Class for Dubbo REST Requests\nDESCRIPTION: This Java class defines the metadata structure for REST requests in Dubbo. It includes information about the HTTP method, path, parameters, headers, and content type specifications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class RequestMetadata implements Serializable {\n\n    private static final long serialVersionUID = -240099840085329958L;\n\n    private String method;// request method\n\n    private String path;// request url\n\n    private Map<String, List<String>> params // param parameters? concatenated\n\n    private Map<String, List<String>> headers// header;\n\n    private Set<String> consumes // content-type;\n\n    private Set<String> produces // Accept;\n```\n\n----------------------------------------\n\nTITLE: Configuring Curator Dependencies for Dubbo 2.7.3\nDESCRIPTION: Maven dependency configuration for Curator Framework and Recipes version 4.2.0, required for compatibility with Dubbo 2.7.3. This configuration addresses version compatibility issues between Dubbo and Curator.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-practice-from-guazi.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>4.2.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-recipes</artifactId>\n    <version>4.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Telnet Handler in Dubbo SPI\nDESCRIPTION: Properties file content for registering a custom TelnetHandler implementation with Dubbo's SPI (Service Provider Interface) mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nxxx=com.xxx.XxxTelnetHandler\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo3 IP Specification Plugin Dependency\nDESCRIPTION: Maven dependency configuration for adding the Dubbo3 IP specification plugin to the project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-cluster-specify-address-dubbo3</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application values.yaml\nDESCRIPTION: Modifies the values.yaml file to specify the image to be deployed and the current application version as 'v1', which is used for mesh traffic rule control.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  repository:  xxx/dubbo-go-client\n  pullPolicy: Always\n  tag: \"1.0.0\"\n\n# Dubbo-go-mesh version control labels\nversion:\n  labels:\n    dubbogoAppVersion: v1\n```\n\n----------------------------------------\n\nTITLE: Getting Activated Extensions in Dubbo\nDESCRIPTION: Example of how to retrieve activated Filter extensions using the getActivateExtension method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/7-Dubbo的SPI扩展机制之自动激活扩展Activate源码解析.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nList<Filter> filters;\nfilters = ScopeModelUtil.getExtensionLoader(Filter.class, moduleModels.get(0)).getActivateExtension(url, key, group);\n```\n\n----------------------------------------\n\nTITLE: Disabling Simple Profiler in Dubbo QoS\nDESCRIPTION: Command to disable the simple profiler mode in Dubbo QoS. This also disables the detailed profiler mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/profiler.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>disableSimpleProfiler\nOK\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Registry and Metadata in Properties\nDESCRIPTION: This snippet demonstrates how to specify the registry and metadata report addresses in the Dubbo configuration center, which will override local application.properties settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-admin.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# /dubbo/config/dubbo/dubbo.properties\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Registry and Metadata in Properties\nDESCRIPTION: This snippet demonstrates how to specify the registry and metadata report addresses in the Dubbo configuration center, which will override local application.properties settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-admin.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# /dubbo/config/dubbo/dubbo.properties\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Deploying Nacos on Kubernetes\nDESCRIPTION: Commands to clone the nacos-k8s repository and quickly start Nacos on Kubernetes without persistent volumes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nacos-group/nacos-k8s.git\ncd nacos-k8s\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd nacos-k8s\nchmod +x quick-startup.sh\n./quick-startup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry Address with Dubbo Spring Externalized Configuration\nDESCRIPTION: Properties configuration that demonstrates how to set up Nacos as the registry center using Dubbo Spring externalized configuration, specifying the Nacos server address and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n## 其他属性保持不变\n\n## Nacos registry address\ndubbo.registry.address = nacos://10.20.153.10:8848\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Events in Dubbo (Java)\nDESCRIPTION: The ChannelEventRunnable class handles different channel states, with a focus on received messages. It delegates the actual processing to a ChannelHandler object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ChannelEventRunnable implements Runnable {\n    \n    private final ChannelHandler handler;\n    private final Channel channel;\n    private final ChannelState state;\n    private final Throwable exception;\n    private final Object message;\n    \n    @Override\n    public void run() {\n        // 检测通道状态，对于请求或响应消息，此时 state = RECEIVED\n        if (state == ChannelState.RECEIVED) {\n            try {\n                // 将 channel 和 message 传给 ChannelHandler 对象，进行后续的调用\n                handler.received(channel, message);\n            } catch (Exception e) {\n                logger.warn(\"... operation error, channel is ... message is ...\");\n            }\n        } \n        \n        // 其他消息类型通过 switch 进行处理\n        else {\n            switch (state) {\n            case CONNECTED:\n                try {\n                    handler.connected(channel);\n                } catch (Exception e) {\n                    logger.warn(\"... operation error, channel is ...\");\n                }\n                break;\n            case DISCONNECTED:\n                // ...\n            case SENT:\n                // ...\n            case CAUGHT:\n                // ...\n            default:\n                logger.warn(\"unknown state: \" + state + \", message is \" + message);\n            }\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dubbo Properties File Path\nDESCRIPTION: Explains how ConfigUtils retrieves the path to the dubbo.properties file. It first checks JVM parameters, then environment variables, and finally defaults to a predefined path if neither source provides a value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static Properties getProperties(Set<ClassLoader> classLoaders) {\n\t\t//这个配置的KEY是dubbo.properties.file System.getProperty是从JVM参数中获取配置的 一般情况下我们在启动Java进程的时候会指定Dubbo配置文件 如配置:\n\t\t//-Ddubbo.properties.file=/dubbo.properties\n        String path = System.getProperty(CommonConstants.DUBBO_PROPERTIES_KEY);\n        \n        if (StringUtils.isEmpty(path)) {\n        //优先级最高的JVM参数拿不到数据则从 环境变量中获取,这个配置key也是dubbo.properties.file  System.getenv是从环境变量中获取数据\n        //例如我们在环境变量中配置 dubbo.properties.file=/dubbo.properties\n            path = System.getenv(CommonConstants.DUBBO_PROPERTIES_KEY);\n            if (StringUtils.isEmpty(path)) {\n            \t//如果在JVM参数和环境变量都拿不到这个配置文件的路径我们就用默认的吧\n            \t//默认的路径是类路径下的资源文件 这个路径是: dubbo.properties \n                path = CommonConstants.DEFAULT_DUBBO_PROPERTIES;\n            }\n        }\n        return ConfigUtils.loadProperties(classLoaders, path, false, true);\n    }\n```\n\n----------------------------------------\n\nTITLE: Data Structure Definitions\nDESCRIPTION: Definitions for CallUserStruct and SubInfo structures with Java class name implementations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype CallUserStruct struct {\n\tID      string\n\tMale    bool\n\tSubInfo SubInfo // Nested structure\n}\nfunc (cs CallUserStruct) JavaClassName() string {\n\treturn \"com.ikurento.user.CallUserStruct\"\n}\n\ntype SubInfo struct {\n\tSubID   string\n\tSubMale bool\n\tSubAge  int\n}\n\nfunc (s SubInfo) JavaClassName() string {\n\treturn \"com.ikurento.user.SubInfo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User-Based Routing Configuration in Istio\nDESCRIPTION: This command displays the virtual service configuration for the reviews service, showing the user-based routing rule for user 'jason'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservice reviews -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Protobuf Plugin\nDESCRIPTION: Maven configuration for compiling protobuf files using protobuf-maven-plugin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/tri.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<extensions>\n    <extension>\n        <groupId>kr.motd.maven</groupId>\n        <artifactId>os-maven-plugin</artifactId>\n        <version>1.6.1</version>\n    </extension>\n</extensions>\n<plugins>\n    <plugin>\n        <groupId>org.xolstice.maven.plugins</groupId>\n        <artifactId>protobuf-maven-plugin</artifactId>\n        <version>0.6.1</version>\n        <configuration>\n            <protocArtifact>com.google.protobuf:protoc:3.7.1:exe:${os.detected.classifier}</protocArtifact>\n            <pluginId>triple-java</pluginId>\n            <outputDirectory>build/generated/source/proto/main/java</outputDirectory>\n        </configuration>\n        <executions>\n            <execution>\n                <goals>\n                    <goal>compile</goal>\n                    <goal>test-compile</goal>\n                </goals>\n            </execution>\n        </executions>\n    </plugin>\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Service with AsyncContext in Java\nDESCRIPTION: Implementation of a Dubbo service that uses AsyncContext to execute business logic in a separate thread while maintaining a synchronous interface, avoiding blocking the Dubbo thread pool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/async-execute-on-provider.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            // 如果要使用上下文，则必须要放在第一句执行\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            // 写回响应\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Web.xml Configuration for External Servlet Container\nDESCRIPTION: The required web.xml configuration when using an external servlet container for REST services in Dubbo, including required listeners and servlet mappings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>\n    </context-param>\n    \n    <listener>\n        <listener-class>org.apache.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n    \n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: 运行Dubbo客户端\nDESCRIPTION: 执行TypeScript客户端代码，调用Dubbo服务。这个命令使用tsx直接运行客户端代码。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpx tsx client.ts\n```\n\n----------------------------------------\n\nTITLE: Building and pushing debug image for Pilot\nDESCRIPTION: Builds a debug version of the Pilot image with Delve included and pushes it to a Docker registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-builder --targets pilot --hub docker.io/bobtthp --push --tag debug\n```\n\n----------------------------------------\n\nTITLE: Registering LoadBalance Extension in Dubbo\nDESCRIPTION: Properties file configuration to register a custom LoadBalance implementation with Dubbo's SPI mechanism, allowing Dubbo to discover and use the custom implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/load-balance.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxLoadBalance\n```\n\n----------------------------------------\n\nTITLE: Implementing Invoker Listing in Java for Apache Dubbo\nDESCRIPTION: This code snippet shows the list method in the AbstractClusterInvoker class. It demonstrates how Invokers are listed by calling the Directory's list method in Dubbo's clustering mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprotected List<Invoker<T>> list(Invocation invocation) throws RpcException {\n    // 调用 Directory 的 list 方法列举 Invoker\n    List<Invoker<T>> invokers = directory.list(invocation);\n    return invokers;\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Stack Trace for Flow Closure Exception Analysis\nDESCRIPTION: Command to generate a stack trace log file for analyzing flow closure exceptions. This allows developers to diagnose the cause of the exception by examining thread states and execution paths.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/4/5.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Using Attributes for Custom Parameters in Dubbo Protocol\nDESCRIPTION: Demonstrates an alternative way to set custom parameters for a Dubbo protocol using attributes directly on the protocol tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"jms\" p:queue=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Metrics Aggregation in XML\nDESCRIPTION: These XML snippets show how to configure Dubbo metrics aggregation. The first snippet enables aggregation, while the second snippet also sets bucket number and time window parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metrics>\n  <dubbo:aggregation enable=\"true\" />\n</dubbo:metrics>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metrics>\n  <dubbo:aggregation enable=\"true\" bucket-num=\"5\" time-window-seconds=\"10\"/>\n</dubbo:metrics>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer in Erlang sys.config\nDESCRIPTION: This snippet demonstrates how to configure a Dubbo consumer in the sys.config file for an Erlang application. It shows the basic structure for adding consumer interfaces within the dubboerl application configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/languages/erlang/reference.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{consumer,[\n\t\t{<<\"interface fullname\">>,[Option]},\n\t\t%% eg:\n\t\t{<<\"org.apache.dubbo.erlang.sample.service.facade.UserOperator\">>,[]},\n\t]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Verifying User-Based Routing Configuration\nDESCRIPTION: Command to confirm the virtual service rule for reviews is created with correct user-based routing configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservice reviews -o yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Tomcat Container Thread\nDESCRIPTION: Implementation of Tomcat's container thread startup mechanism in Spring Boot's embedded servlet container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    private void startDaemonAwaitThread() {\n        Thread awaitThread = new Thread(\"container-\" + (containerCounter.get())) {\n\n            @Override\n            public void run() {\n                TomcatEmbeddedServletContainer.this.tomcat.getServer().await();\n            }\n\n        };\n        awaitThread.setContextClassLoader(getClass().getClassLoader());\n        awaitThread.setDaemon(false);\n        awaitThread.start();\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Service Interface for AsyncContext in Java\nDESCRIPTION: Definition of a synchronous Dubbo service interface that will be implemented asynchronously using AsyncContext.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/async-execute-on-provider.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Client Stream Request Using Iterator in Dubbo Python\nDESCRIPTION: Shows how to implement client streaming using an iterator to send multiple requests to the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef request_generator():\n    for i in [\"hello\", \"world\", \"from\", \"dubbo-python\"]:\n        yield greeter_pb2.GreeterRequest(name=str(i))\n\n# Call the remote method and return a read_stream\nstream = stub.client_stream(request_generator())\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests and Style Checks\nDESCRIPTION: Maven commands to run all unit tests and optionally enable RAT and style plugin checks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test # This will run all unit tests\n# You can also open rat and style plugin to check if every file meets requirements.\nmvn clean test -Drat.skip=false -Dcheckstyle.skip=false\n```\n\n----------------------------------------\n\nTITLE: Starting Seata Server with Docker Compose\nDESCRIPTION: Command to navigate to the dockercompose directory and use Docker Compose to start the seata-server in detached mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/transaction/seata.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../dockercompose\ndocker-compose -f docker-compose.yml up -d seata-server\n```\n\n----------------------------------------\n\nTITLE: Echo Service API for Testing\nDESCRIPTION: API for echo testing of Dubbo services\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/api.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.rpc.service.EchoService\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service using Protocol Buffer\nDESCRIPTION: Example of defining a Dubbo service using Protocol Buffer (IDL) in a .proto file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/ web/web-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage apache.dubbo.demo.example.v1;\n\nmessage SayRequest {\n  string sentence = 1;\n}\n\nmessage SayResponse {\n  string sentence = 1;\n}\n\nservice ExampleService {\n  rpc Say(SayRequest) returns (SayResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Consumer Properties Configuration\nDESCRIPTION: Properties file configuration for Dubbo consumer, defining application name, registry address using Zookeeper, and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=demo-consumer\ndubbo.registry.address=zookeeper://$DOCKER_HOST:2181\ndubbo.consumer.timeout=3000\n```\n\n----------------------------------------\n\nTITLE: Module Startup Process in DefaultApplicationDeployer\nDESCRIPTION: Shows how the DefaultApplicationDeployer starts modules by preparing internal modules first and then starting all pending modules through their respective deployers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void doStart() {\n\t\t// 启动模块\n        startModules();\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate void startModules() {\n        // ensure init and start internal module first\n        //确保初始化并首先启动内部模块,Dubbo3中将模块分为内部和外部，内部是核心代码已经提供的一些服务比如元数据服务，外部是我们自己写的服务\n        prepareInternalModule();\n\n        // filter and start pending modules, ignore new module during starting, throw exception of module start\n        //启动所有的模块 （启动所有的服务）\n        for (ModuleModel moduleModel : new ArrayList<>(applicationModel.getModuleModels())) {\n        \t//这个状态默认就是PENDING的\n            if (moduleModel.getDeployer().isPending()) {\n            \t//模块启动器，发布服务\n                moduleModel.getDeployer().start();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Simplified GraalVM Native Image Configuration in Dubbo 3.2\nDESCRIPTION: The new simplified configuration using native-maven-plugin and dubbo-maven-plugin in Dubbo 3.2, which reduces manual configuration and automates the generation of required native image configuration files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n\t<groupId>org.graalvm.buildtools</groupId>\n\t<artifactId>native-maven-plugin</artifactId>\n\t<version>0.9.20</version>\n\t<configuration>\n\t    <classesDirectory>${project.build.outputDirectory}</classesDirectory>\n\t    <metadataRepository>\n\t        <enabled>true</enabled>\n\t    </metadataRepository>\n\t    <requiredVersion>22.3</requiredVersion>\n\t    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>\n\t</configuration>\n</plugin>\n<plugin>\n\t<groupId>org.apache.dubbo</groupId>\n\t<artifactId>dubbo-maven-plugin</artifactId>\n\t<version>${project.version}</version>\n\t<configuration>\n\t    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>\n\t</configuration>\n\t<executions>\n\t    <execution>\n\t        <phase>process-sources</phase>\n\t        <goals>\n\t            <goal>dubbo-process-aot</goal>\n\t        </goals>\n\t    </execution>\n\t</executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Components in Go\nDESCRIPTION: Demonstrates how to initialize an application, get a client for a component, and call component methods in the proposed programming model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/google-service-weaver-paper-2023.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n    if err := weaver.Init(context.Background()); err != nil {\n        log.Fatal(err)\n    }\n    hello, err := weaver.Get[Hello](context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n    greeting, err := hello.Greet(context.Background(), \"world\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsafe Java Serialization in Dubbo\nDESCRIPTION: This snippet shows the unsafe configuration of Java serialization in Dubbo. It is not recommended due to security risks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/4.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nserialization=\"java\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Route Rules with Kubectl\nDESCRIPTION: Command to remove the application route rules when finished with the tutorial to clean up the environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: REST Service Implementation\nDESCRIPTION: Implementation of the REST service interface with Dubbo service annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@DubboService()\npublic class RestDemoServiceImpl implements RestDemoService {\n    private static Map<String, Object> context;\n    private boolean called;\n\n    @Override\n    public String sayHello(String name) {\n        called = true;\n        return \"Hello, \" + name;\n    }\n\n    public boolean isCalled() {\n        return called;\n    }\n\n    @Override\n    public Integer hello(Integer a, Integer b) {\n        context = RpcContext.getServerAttachment().getObjectAttachments();\n        return a + b;\n    }\n\n    @Override\n    public String error() {\n        throw new RuntimeException();\n    }\n\n    public static Map<String, Object> getAttachments() {\n        return context;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Services with Triple Protocol in Java\nDESCRIPTION: Example code demonstrating how to define and implement REST services using Triple protocol with the Basic dialect. Shows service interface with mapping annotations, implementation class with DubboService annotation, and a data model for request/response objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rest.demo;\n\nimport org.apache.dubbo.remoting.http12.rest.Mapping;\nimport org.apache.dubbo.remoting.http12.rest.Param;\n\n// 服务接口\npublic interface DemoService {\n    String hello(String name);\n\n    @Mapping(path = \"/hi\", method = HttpMethods.POST)\n    String hello(User user, @Param(value = \"c\", type = ParamType.Header) int count);\n}\n\n// 服务实现\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello(String name) {\n        return \"Hello \" + name;\n    }\n\n    @Override\n    public String hello(User user, int count) {\n        return \"Hello \" + user.getTitle() + \". \" + user.getName() + \", \" + count;\n    }\n}\n\n// 模型\n@Data\npublic class User {\n    private String title;\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UserProvider Service\nDESCRIPTION: Creates a UserProvider service implementation with GetUser method and Reference identifier.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UserProvider struct {\n}\n\nfunc (u *UserProvider) GetUser(ctx context.Context, req []interface{}) (*User, error) {\n\tprintln(\"req:%#v\", req)\n\trsp := User{\"A001\", \"hellowworld\", 18, time.Now()}\n\tprintln(\"rsp:%#v\", rsp)\n\treturn &rsp, nil\n}\n\nfunc (u *UserProvider) Reference() string {\n\treturn \"UserProvider\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to injvm in Dubbo XML Configuration\nDESCRIPTION: This configuration sets the default protocol for all providers to injvm, enabling local calls by default.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Downloading protoc binary release using curl\nDESCRIPTION: This code demonstrates how to download a specific version of the Protocol Buffer Compiler binary package directly from GitHub using curl.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protoc-installation.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ PB_REL=\"https://github.com/protocolbuffers/protobuf/releases\"\n$ curl -LO $PB_REL/download/v{{< param protoc-version >}}/protoc-{{< param protoc-version >}}-linux-x86_64.zip\n```\n\n----------------------------------------\n\nTITLE: Updating Service Method to Use Wrapper Return Type in Java\nDESCRIPTION: Modified service method signature that uses a wrapper object instead of a primitive type. This enables proper XML and JSON serialization for the return value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRegistrationResult registerUser(User user);\n```\n\n----------------------------------------\n\nTITLE: Verifying Zookeeper Registration\nDESCRIPTION: Commands to check if the service URL is properly registered in Zookeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./zkCli.sh\n[zk: localhost:2181(CONNECTED) 0] ls /services/dubbo_registry_zookeeper_server\n[30.221.147.198:20000]\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Handler\nDESCRIPTION: Implementation of the callback interface that stores results and errors in maps for later retrieval.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass NotifyImpl implements Notify {\n    public Map<Integer, Person>    ret    = new HashMap<Integer, Person>();\n    public Map<Integer, Throwable> errors = new HashMap<Integer, Throwable>();\n    \n    public void onreturn(Person msg, Integer id) {\n        System.out.println(\"onreturn:\" + msg);\n        ret.put(id, msg);\n    }\n    \n    public void onthrow(Throwable ex, Integer id) {\n        errors.put(id, ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to injvm in Dubbo XML Configuration\nDESCRIPTION: This configuration sets the default protocol for all providers to injvm, enabling local calls by default.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Readiness Probe in Java\nDESCRIPTION: Example of implementing a custom ReadinessProbe interface in Java. The check() method should be implemented to define the readiness logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/readiness.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\npublic class XxxReadinessProbe implements ReadinessProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Annotation Configuration\nDESCRIPTION: Example of using Dubbo @Service annotation to expose a service with timeout configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nimport com.alibaba.dubbo.config.annotation.Service;\n\n@Service(timeout = 5000)\npublic class AnnotateServiceImpl implements AnnotateService { \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Report with Annotation\nDESCRIPTION: Java code snippet showing how to configure a MetadataReportConfig bean using annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic MetadataReportConfig metadataReportConfig() {\n    MetadataReportConfig metadataReportConfig = new MetadataReportConfig();\n    metadataReportConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n    return metadataReportConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoker Selection Logic in Dubbo 3 Migration\nDESCRIPTION: Java code snippet demonstrating the invoker selection logic based on migration step and promotion ratio during the APPLICATION_FIRST phase.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-rule.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// currentAvailableInvoker is based on MigrationAddressComparator's result\nif (currentAvailableInvoker != null) {\n    if (step == APPLICATION_FIRST) {\n        // call ratio calculation based on random value\n        if (ThreadLocalRandom.current().nextDouble(100) > promotion) {\n            return invoker.invoke(invocation);\n        }\n    }\n    return currentAvailableInvoker.invoke(invocation);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Dubbo Services with ls Command\nDESCRIPTION: Shows how to use the ls command to display both provider and consumer services along with their registration status and connection counts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>ls\nAs Provider side:\n+------------------------------------------------------------------------+---------------------+\n|                          Provider Service Name                         |         PUB         |\n+------------------------------------------------------------------------+---------------------+\n|DubboInternal - UserRead/org.apache.dubbo.metadata.MetadataService:1.0.0|                     |\n+------------------------------------------------------------------------+---------------------+\n|               com.dubbo.dubbointegration.UserReadService               |nacos-A(Y)/nacos-I(Y)|\n+------------------------------------------------------------------------+---------------------+\nAs Consumer side:\n+-----------------------------------------+-----------------+\n|          Consumer Service Name          |       NUM       |\n+-----------------------------------------+-----------------+\n|com.dubbo.dubbointegration.BackendService|nacos-AF(I-2,A-2)|\n+-----------------------------------------+-----------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Trust Lists via Properties Files\nDESCRIPTION: Examples of allow and block list configuration in properties files\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.allowlist\nio.dubbo.test\n```\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.blockedlist\nio.dubbo.block\n```\n\n----------------------------------------\n\nTITLE: Enabling Serializable Interface Check in Dubbo (XML)\nDESCRIPTION: Shows how to enable Serializable interface checks using Spring XML configuration in Dubbo. This setting ensures only Serializable classes are deserialized.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" check-serializable=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Authentication in YAML Format\nDESCRIPTION: YAML configuration for Nacos registry with authentication credentials (username and password).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo\n registry\n   address: nacos://localhost:8848?username=nacos&password=nacos\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Hessian Protocol Dependency\nDESCRIPTION: Maven dependency configuration required to use Hessian protocol in Dubbo 3+\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-hessian</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Server\nDESCRIPTION: Maven command to start the Dubbo server application\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn -Dexec.mainClass=org.apache.dubbo.samples.provider.Application exec:java\n```\n\n----------------------------------------\n\nTITLE: Adding Legacy Zookeeper Spring Boot Starter\nDESCRIPTION: Configuration for adding Dubbo Zookeeper Spring Boot Starter for Zookeeper 3.4.x integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Decoding Request Data in ExchangeCodec (Java)\nDESCRIPTION: This snippet shows the initial decoding process in ExchangeCodec class. It checks the magic number, decodes the message header, and calls the decodeBody method for further processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ExchangeCodec extends TelnetCodec {\n    \n    @Override\n    public Object decode(Channel channel, ChannelBuffer buffer) throws IOException {\n        int readable = buffer.readableBytes();\n        // 创建消息头字节数组\n        byte[] header = new byte[Math.min(readable, HEADER_LENGTH)];\n        // 读取消息头数据\n        buffer.readBytes(header);\n        // 调用重载方法进行后续解码工作\n        return decode(channel, buffer, readable, header);\n    }\n\n    @Override\n    protected Object decode(Channel channel, ChannelBuffer buffer, int readable, byte[] header) throws IOException {\n        // 检查魔数是否相等\n        if (readable > 0 && header[0] != MAGIC_HIGH\n                || readable > 1 && header[1] != MAGIC_LOW) {\n            int length = header.length;\n            if (header.length < readable) {\n                header = Bytes.copyOf(header, readable);\n                buffer.readBytes(header, length, readable - length);\n            }\n            for (int i = 1; i < header.length - 1; i++) {\n                if (header[i] == MAGIC_HIGH && header[i + 1] == MAGIC_LOW) {\n                    buffer.readerIndex(buffer.readerIndex() - header.length + i);\n                    header = Bytes.copyOf(header, i);\n                    break;\n                }\n            }\n            // 通过 telnet 命令行发送的数据包不包含消息头，所以这里\n            // 调用 TelnetCodec 的 decode 方法对数据包进行解码\n            return super.decode(channel, buffer, readable, header);\n        }\n        \n        // 检测可读数据量是否少于消息头长度，若小于则立即返回 DecodeResult.NEED_MORE_INPUT\n        if (readable < HEADER_LENGTH) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n\n        // 从消息头中获取消息体长度\n        int len = Bytes.bytes2int(header, 12);\n        // 检测消息体长度是否超出限制，超出则抛出异常\n        checkPayload(channel, len);\n\n        int tt = len + HEADER_LENGTH;\n        // 检测可读的字节数是否小于实际的字节数\n        if (readable < tt) {\n            return DecodeResult.NEED_MORE_INPUT;\n        }\n        \n        ChannelBufferInputStream is = new ChannelBufferInputStream(buffer, len);\n\n        try {\n            // 继续进行解码工作\n            return decodeBody(channel, is, header);\n        } finally {\n            if (is.available() > 0) {\n                try {\n                    StreamUtils.skipUnusedStream(is);\n                } catch (IOException e) {\n                    logger.warn(e.getMessage(), e);\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for Dubbo-Go Client\nDESCRIPTION: Imports all necessary Dubbo-Go packages for client implementation, including cluster, loadbalance, proxy, protocol, and registry components. The blank imports ensure that the packages' init functions are executed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\thessian \"github.com/apache/dubbo-go-hessian2\"\n\t_ \"github.com/apache/dubbo-go/cluster/cluster_impl\"\n\t_ \"github.com/apache/dubbo-go/cluster/loadbalance\"\n\t_ \"github.com/apache/dubbo-go/common/proxy/proxy_factory\"\n\t\"github.com/apache/dubbo-go/config\"\n\t_ \"github.com/apache/dubbo-go/filter/filter_impl\"\n\t_ \"github.com/apache/dubbo-go/protocol/dubbo\"\n\t_ \"github.com/apache/dubbo-go/registry/protocol\"\n\t_ \"github.com/apache/dubbo-go/registry/zookeeper\"\n\n\tgxlog \"github.com/dubbogo/gost/log\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Dependencies for ShenYu Gateway\nDESCRIPTION: Maven dependencies required for integrating Apache Dubbo with ShenYu gateway, including the ShenYu Dubbo plugin, Dubbo core, and Zookeeper registry dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n        <!-- apache shenyu  apache dubbo plugin start-->\n        <dependency>\n            <groupId>org.apache.shenyu</groupId>\n            <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>\n            <version>${project.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo</artifactId>\n            <version>2.7.5</version>\n        </dependency>\n        <!-- Dubbo zookeeper registry dependency start -->\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-client</artifactId>\n            <version>4.0.1</version>\n            <exclusions>\n                <exclusion>\n                    <artifactId>log4j</artifactId>\n                    <groupId>log4j</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-framework</artifactId>\n            <version>4.0.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-recipes</artifactId>\n            <version>4.0.1</version>\n        </dependency>\n        <!-- Dubbo zookeeper registry dependency end -->\n        <!-- apache dubbo plugin end-->\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin on VM\nDESCRIPTION: Commands to download and install Dubbo Admin on a VM, including adding it to the executable path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -\n# Admin 要组织好发行版本\n```\n\nLANGUAGE: shell\nCODE:\n```\nln -s dubbo-admin-0.1.0/bin/dubbo-admin /usr/local/bin/dubbo-admin\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubbo-admin run -f override-configuration.yml\n```\n\n----------------------------------------\n\nTITLE: Java Method for Handling text/plain in Triple Protocol\nDESCRIPTION: Java implementation for receiving text/plain content in a Triple server. The method accepts a single String parameter containing the plain text content.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    public ServerResponse greetString(String world){\n        System.out.println(\"Hello:\" + world);\n        return new ServerResponse(\"Server Received url form.\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty3 with Nested References on Consumer Side in Dubbo\nDESCRIPTION: Example of using Netty3 for a specific set of references in Dubbo. This configuration nests the service references inside the consumer tag to apply Netty3 only to those specific references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/netty4.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer client=\"netty\">\n  <dubbo:reference />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in Properties File\nDESCRIPTION: Properties file configuration options for enabling FST serialization at protocol, consumer, or reference level using dubbo.properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.protocol.serialization=fst\n\n# or\ndubbo.consumer.serialization=fst\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=fst\n```\n\n----------------------------------------\n\nTITLE: Native Image Plugin Configuration\nDESCRIPTION: Maven plugin configuration for GraalVM native-image including build arguments, initialization settings, and runtime configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-graalvm-support.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.graalvm.nativeimage</groupId>\n  <artifactId>native-image-maven-plugin</artifactId>\n  <version>21.0.0.2</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>native-image</goal>\n      </goals>\n      <phase>package</phase>\n    </execution>\n  </executions>\n  <configuration>\n    <skip>false</skip>\n    <imageName>demo-native-provider</imageName>\n    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>\n    <buildArgs>\n      --no-fallback\n      --initialize-at-build-time=org.slf4j.MDC\n      --initialize-at-build-time=org.slf4j.LoggerFactory\n      --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder\n      --initialize-at-build-time=org.apache.log4j.helpers.Loader\n      --initialize-at-build-time=org.apache.log4j.Logger\n      --initialize-at-build-time=org.apache.log4j.helpers.LogLog\n      --initialize-at-build-time=org.apache.log4j.LogManager\n      --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent\n      --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory\n      --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter\n      --initialize-at-run-time=io.netty.channel.epoll.Epoll\n      --initialize-at-run-time=io.netty.channel.epoll.Native\n      --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop\n      --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray\n      --initialize-at-run-time=io.netty.channel.DefaultFileRegion\n      --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray\n      --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop\n      --initialize-at-run-time=io.netty.channel.kqueue.Native\n      --initialize-at-run-time=io.netty.channel.unix.Errors\n      --initialize-at-run-time=io.netty.channel.unix.IovArray\n      --initialize-at-run-time=io.netty.channel.unix.Limits\n      --initialize-at-run-time=io.netty.channel.unix.Socket\n      --initialize-at-run-time=io.netty.channel.ChannelHandlerMask\n      --report-unsupported-elements-at-runtime\n      --allow-incomplete-classpath\n      --enable-url-protocols=http\n      -H:+ReportExceptionStackTraces\n    </buildArgs>\n```\n\n----------------------------------------\n\nTITLE: Testing Event Notifications in Java\nDESCRIPTION: Test code demonstrating how to use the configured service and verify that callbacks are correctly invoked.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nIDemoService demoService = (IDemoService) context.getBean(\"demoService\");\nNotifyImpl notify = (NotifyImpl) context.getBean(\"demoCallback\");\nint requestId = 2;\nPerson ret = demoService.get(requestId);\nAssert.assertEquals(null, ret);\n//for Test：只是用来说明callback正常被调用，业务具体实现自行决定.\nfor (int i = 0; i < 10; i++) {\n    if (!notify.ret.containsKey(requestId)) {\n        Thread.sleep(200);\n    } else {\n        break;\n    }\n}\nAssert.assertEquals(requestId, notify.ret.get(requestId).getId());\n```\n\n----------------------------------------\n\nTITLE: 使用RpcContext进行Consumer端异步调用 (Java)\nDESCRIPTION: 展示了如何使用RpcContext在Consumer端进行异步调用,包括获取Future引用和添加回调。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/async.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// 此调用会立即返回null\nasyncService.sayHello(\"world\");\n// 拿到调用的Future引用，当结果返回后，会被通知和设置到此Future\nCompletableFuture<String> helloFuture = RpcContext.getServiceContext().getCompletableFuture();\n// 为Future添加回调\nhelloFuture.whenComplete((retValue, exception) -> {\n    if (exception == null) {\n        System.out.println(retValue);\n    } else {\n        exception.printStackTrace();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer using Java API\nDESCRIPTION: This snippet shows how to configure a Dubbo service consumer using Java API. It sets up the application and registry configurations, then creates a reference to the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.config.ApplicationConfig;\nimport org.apache.dubbo.config.RegistryConfig;\nimport org.apache.dubbo.config.ConsumerConfig;\nimport org.apache.dubbo.config.ReferenceConfig;\nimport com.xxx.DemoService;\n\npublic class DemoConsumer {\n    public static void main(String[] args) {\n        // 当前应用配置\n        ApplicationConfig application = new ApplicationConfig();\n        application.setName(\"demo-consumer\");\n\n        // 连接注册中心配置\n        RegistryConfig registry = new RegistryConfig();\n        registry.setAddress(\"zookeeper://10.20.130.230:2181\");\n\n        // 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接\n        // 引用远程服务\n        ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\n        reference.setApplication(application);\n        reference.setRegistry(registry); // 多个注册中心可以用setRegistries()\n        reference.setInterface(DemoService.class);\n        reference.setVersion(\"1.0.0\");\n\n        // 和本地bean一样使用demoService\n        // 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用\n        DemoService demoService = reference.get();\n        demoService.sayHello(\"Dubbo\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Method Mapping Configuration\nDESCRIPTION: Illustrates configuration for mapping custom method names to standard Redis operations using Spring p-namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/redis.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"com.foo.CacheService\" url=\"redis://10.20.153.10:6379\" p:set=\"putFoo\" p:get=\"getFoo\" p:delete=\"removeFoo\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Service Consumer with Skywalking Agent\nDESCRIPTION: Command to start the Dubbo consumer with Skywalking agent configuration for monitoring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njava -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-consumer -Dskywalking.collector.servers=localhost:10800 dubbo-consumer/target/dubbo-consumer.jar\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Admin UI\nDESCRIPTION: URL to access the Dubbo Admin Console web interface after starting the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/admin-console.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhttp://127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Dubbo属性配置示例\nDESCRIPTION: 常见的Dubbo属性配置示例，包括注册中心地址、元数据中心、协议和QoS端口等配置项。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# 将注册中心地址、元数据中心地址等配置集中管理，可以做到统一环境、减少开发侧感知。\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.registry.simplified=true\n\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n\ndubbo.application.qos.port=33333\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Protocol and Address in Dubbo\nDESCRIPTION: Configures a Redis registry by specifying the protocol and address separately.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo REST Service with @DubboService\nDESCRIPTION: Implementation class for the RESTEasy-style service interface. It annotates the class with @DubboService to expose it as a Dubbo service, implements the defined REST endpoints, and provides additional utility methods for tracking call state and context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@DubboService()\n    public class RestDemoServiceImpl implements RestDemoService {\n        private static Map<String, Object> context;\n        private boolean called;\n\n\n        @Override\n        public String sayHello(String name) {\n            called = true;\n            return \"Hello, \" + name;\n        }\n\n\n        public boolean isCalled() {\n            return called;\n        }\n\n        @Override\n        public Integer hello(Integer a, Integer b) {\n            context = RpcContext.getServerAttachment().getObjectAttachments();\n            return a + b;\n        }\n\n\n        @Override\n        public String error() {\n            throw new RuntimeException();\n        }\n\n        public static Map<String, Object> getAttachments() {\n            return context;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Forking Strategy at Service Consumer Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the forking strategy at the service consumer level. Consumer-side configurations take precedence over provider-side configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"forking\"/>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Curator Dependencies for Dubbo 2.7.3 Compatibility\nDESCRIPTION: XML configuration for upgrading Curator Framework and Recipes dependencies to version 4.2.0 to ensure compatibility with Dubbo 2.7.3, which is not compatible with older versions of Curator.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/guazi.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>4.2.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-recipes</artifactId>\n    <version>4.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PageHandler in Java for Dubbo\nDESCRIPTION: Example of a Java class implementing the PageHandler interface for creating a custom peer-to-peer network node aggregator extension in Dubbo. This class should be placed in the appropriate package structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/page.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.container.page.PageHandler;\n \npublic class XxxPageHandler implements PageHandler {\n    public Group lookup(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Deployment State Enumeration\nDESCRIPTION: Defines the state enumeration used by Dubbo deployers to track the deployment lifecycle from pending through various states to completion or failure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic enum DeployState {\n    /**\n     * Unknown state\n     */\n    UNKNOWN,\n\n    /**\n     * Pending, wait for start\n     */\n    PENDING,\n\n    /**\n     * Starting\n     */\n    STARTING,\n\n    /**\n     * Started\n     */\n    STARTED,\n\n    /**\n     * Stopping\n     */\n    STOPPING,\n\n    /**\n     * Stopped\n     */\n    STOPPED,\n\n    /**\n     * Failed\n     */\n    FAILED\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Metadata in Zookeeper\nDESCRIPTION: Example of using zkCli to get provider metadata for a DemoService from Zookeeper. Shows the complete JSON metadata stored for a service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 8] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/provider/demo-provider\n{\"parameters\":{\"side\":\"provider\",\"interface\":\"org.apache.dubbo.demo.DemoService\",\"metadata-type\":\"remote\",\"application\":\"demo-provider\",\"dubbo\":\"2.0.2\",\"release\":\"\",\"anyhost\":\"true\",\"delay\":\"5000\",\"methods\":\"sayHello,sayHelloAsync\",\"deprecated\":\"false\",\"dynamic\":\"true\",\"timeout\":\"3000\",\"generic\":\"false\"},\"canonicalName\":\"org.apache.dubbo.demo.DemoService\",\"codeSource\":\"file:/Users/apple/IdeaProjects/dubbo/dubbo-demo/dubbo-demo-interface/target/classes/\",\"methods\":[{\"name\":\"sayHelloAsync\",\"parameterTypes\":[\"java.lang.String\"],\"returnType\":\"java.util.concurrent.CompletableFuture\"},{\"name\":\"sayHello\",\"parameterTypes\":[\"java.lang.String\"],\"returnType\":\"java.lang.String\"}],\"types\":[{\"type\":\"java.util.concurrent.CompletableFuture\",\"properties\":{\"result\":\"java.lang.Object\",\"stack\":\"java.util.concurrent.CompletableFuture.Completion\"}},{\"type\":\"java.lang.Object\"},{\"type\":\"java.lang.String\"},{\"type\":\"java.util.concurrent.CompletableFuture.Completion\",\"properties\":{\"next\":\"java.util.concurrent.CompletableFuture.Completion\",\"status\":\"int\"}},{\"type\":\"int\"}]}\ncZxid = 0x25a9b1\nctime = Mon Jun 28 21:35:17 CST 2021\nmZxid = 0x25a9b1\nmtime = Mon Jun 28 21:35:17 CST 2021\npZxid = 0x25a9b1\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 1061\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider in Erlang sys.config\nDESCRIPTION: Example configuration for setting up a Dubbo service provider in Erlang. The configuration should be added under the dubboerl application settings in sys.config. It demonstrates how to map implementation modules to their corresponding Java interface definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/service.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{provider,[\n\t\t{module_implements,interface_module,interface_fullname,[Options]},\n\t\t%% eg:\n\t\t{userOperator_impl,userOperator,<<\"org.apache.dubbo.erlang.sample.service.facade.UserOperator\">>,[Option]}\n\t]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArgInfo Class in Dubbo's Rest Protocol\nDESCRIPTION: Java class definition for ArgInfo which stores method argument metadata including index, annotation attributes, parameter types, and form content handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ArgInfo {\n    /**\n     * method arg index 0,1,2,3\n     */\n    private int index;\n    /**\n     * method annotation name or name\n     */\n    private String annotationNameAttribute;\n\n    /**\n     * param annotation type\n     */\n    private Class paramAnnotationType;\n\n    /**\n     * param Type\n     */\n    private Class paramType;\n\n    /**\n     * param name\n     */\n    private String paramName;\n\n    /**\n     * url split(\"/\") String[n]  index\n     */\n    private int urlSplitIndex;\n\n    private Object defaultValue;\n\n    private boolean formContentType;\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo XML Provider Configuration\nDESCRIPTION: Example of basic Dubbo provider configuration in XML format showing essential elements like application, registry, protocol, service and reference configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:service interface=\"com.alibaba.dubbo.demo.DemoService\" ref=\"demoServiceLocal\" />  \n    <dubbo:reference id=\"demoServiceRemote\" interface=\"com.alibaba.dubbo.demo.DemoService\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Main Function Implementation\nDESCRIPTION: Implements the main function to load configuration and start the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  config.Load()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout and Connection Limits for REST Service Consumers\nDESCRIPTION: XML configuration on the consumer side that sets the maximum timeout and HTTP connections for consuming a REST service in Dubbo. Provider-side configuration is generally preferred.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxx\" interface=\"xxx\" timeout=\"2000\" connections=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing ServiceConfigBase Constructor in Java\nDESCRIPTION: Creates a ServiceMetadata object and adds an attribute to it. The ServiceMetadata class currently has no usage in Dubbo. Service-level data like name, version, business service class loader, and security information are stored here, along with an AttributeMap for extensions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic ServiceConfigBase() {\n\t\t//服务元数据对象创建\n        serviceMetadata = new ServiceMetadata();\n        //为服务元数据对象\n        serviceMetadata.addAttribute(\"ORIGIN_CONFIG\", this);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Bootstrap in Java\nDESCRIPTION: Java bootstrap class that initializes the Spring context with XML configuration and demonstrates service consumption with multiple iterations. Shows integration with DemoService interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.consumer;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} consumer demo XML bootstrap\n */\npublic class DemoServiceConsumerXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-consumer-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService consumer (XML) is starting...\");\n        DemoService demoService = context.getBean(\"demoService\", DemoService.class);\n        for (int i = 0; i < 10; i++) {\n            System.out.println(demoService.sayName(\"Little Horse Brother (mercyblitz)\"));\n        }\n        context.close();\n    }\n```\n\n----------------------------------------\n\nTITLE: ZookeeperMetadataReport Constructor Implementation\nDESCRIPTION: This constructor initializes a ZookeeperMetadataReport by passing configuration to the parent class and establishing a connection to Zookeeper. It validates the URL, sets up the root path, and connects to Zookeeper using the provided transporter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic ZookeeperMetadataReport(URL url, ZookeeperTransporter zookeeperTransporter) {\n\t\t//url即配置 配置传递给抽象类 做一些公共的逻辑\n\t\t//url参考:zookeeper://127.0.0.1:2181/org.apache.dubbo.metadata.report.MetadataReport?application=dubbo-demo-api-provider&client=&port=2181&protocol=zookeeper\n        super(url);\n        if (url.isAnyHost()) {\n            throw new IllegalStateException(\"registry address == null\");\n        }\n        String group = url.getGroup(DEFAULT_ROOT);\n        if (!group.startsWith(PATH_SEPARATOR)) {\n            group = PATH_SEPARATOR + group;\n        }\n        this.root = group;\n        //连接Zookeeper\n        zkClient = zookeeperTransporter.connect(url);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating XML-Compatible Wrapper Object for Primitive Return Types in Java\nDESCRIPTION: Implements a wrapper class with JAXB annotations to properly serialize primitive long values as XML/JSON in RESTful services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class RegistrationResult implements Serializable {\n    \n    private Long id;\n    \n    public RegistrationResult() {\n    }\n    \n    public RegistrationResult(Long id) {\n        this.id = id;\n    }\n    \n    public Long getId() {\n        return id;\n    }\n    \n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with IP-Specific Routing\nDESCRIPTION: Consumer implementation that uses the address router feature to target a specific provider instance by IP and port. It creates an Address object with the desired endpoint details and attaches it to the RpcContext.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/invoke-with-specified-ip.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 需要依赖的class\nimport org.apache.dubbo.rpc.RpcContext;\nimport org.apache.dubbo.rpc.cluster.router.address.Address;\n    \n@RestController\npublic class TestServiceConsumer {\n    @DubboReference(interfaceClass = TestService.class,group = \"dev\",parameters = {\"router\",\"address\"})\n    private TestService testService;\n\n   @GetMapping(\"/invokeByIpPortSpecified\")\n       public String invokeByIp(){\n           try {\n               // 根据provider的ip,port创建Address实例\n               Address address = new Address(\"10.220.47.253\", 20880);\n               RpcContext.getContext().setObjectAttachment(\"address\", address);\n               return testService.sayHello(\"Tom\");\n           }catch (Throwable ex){\n               return ex.getMessage();\n           }\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dubbo-go Modules\nDESCRIPTION: This code demonstrates how to import all built-in Dubbo-go modules. The blank import syntax is used to ensure the init functions from all necessary packages are executed without directly using the packages in the code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting with Protocol Listener Wrapper in Java\nDESCRIPTION: This method wraps the exported invoker with listeners, with special handling for registry protocols and service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        //注册中心地址则直接导出\n         // 服务发现service-discovery-registry的导出会走这个逻辑\n        if (UrlUtils.isRegistry(invoker.getUrl())) {\n            return protocol.export(invoker);\n        }\n        // 先导出对象 再创建过滤器包装对象 执行监听器逻辑\n        return new ListenerExporterWrapper<T>(protocol.export(invoker),\n                Collections.unmodifiableList(ScopeModelUtil.getExtensionLoader(ExporterListener.class, invoker.getUrl().getScopeModel())\n                        .getActivateExtension(invoker.getUrl(), EXPORTER_LISTENER_KEY)));\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Debugging xDS Stub Error in Dubbo\nDESCRIPTION: Command to dump the Java thread stack trace to a file for analyzing the cause of xDS Stub Error. This is useful when a pod is down or has crashed to identify the root cause of the issue.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/28.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings in XML\nDESCRIPTION: XML configuration example for serialization security settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-provider\" serialize-check-status=\"STRICT\" check-serializable=\"true\" auto-trust-serialize-class=\"true\" trust-serialize-class-level=\"3\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Virtual Services Configuration with Kubectl\nDESCRIPTION: Command to view the defined virtual service routes, showing how traffic is routed to v1 of each microservice.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservices -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Metadata Report in Dubbo\nDESCRIPTION: XML configuration for setting up Redis as a metadata report center in Dubbo. Specifies the connection address for the Redis server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"redis://127.0.0.1:6779\"/>\n```\n\n----------------------------------------\n\nTITLE: Default Extension Loading\nDESCRIPTION: Implementation for loading the default extension for a given type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic T getDefaultExtension() {\n        getExtensionClasses();\n        if (StringUtils.isBlank(cachedDefaultName) || \"true\".equals(cachedDefaultName)) {\n            return null;\n        }\n        return getExtension(cachedDefaultName);\n    }\n```\n\n----------------------------------------\n\nTITLE: Save Properties Worker\nDESCRIPTION: Worker class for executing property saving tasks\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nprivate class SaveProperties implements Runnable {\n        private long version;\n\n        private SaveProperties(long version) {\n            this.version = version;\n        }\n\n        @Override\n        public void run() {\n            doSaveProperties(version);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Dubbo @Service Annotation Definition\nDESCRIPTION: The @Service annotation definition showing all available attributes for configuring a Dubbo service provider, including interface specification, versioning, grouping, and various configuration references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.dubbo.config.annotation;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE}) // #1\n@Inherited\npublic @interface Service {\n    Class<?> interfaceClass() default void.class; // #2\n    String interfaceName() default \"\"; // #3\n    String version() default \"\"; // #4\n    String group() default \"\"; // #5\n    boolean export() default true; // #6\n    boolean register() default true; // #7\n    \n    String application() default \"\"; // #8\n    String module() default \"\"; // #9\n    String provider() default \"\"; // #10\n    String[] protocol() default {}; // #11\n    String monitor() default \"\"; // #12\n    String[] registry() default {}; // #13\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Consumer Pods Status\nDESCRIPTION: Commands to list Dubbo Consumer pods and check their logs to verify successful service consumption.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Check the pod list\nkubectl get pods -l app=dubbo-samples-apiserver-consumer\n\n# Check pod deployment logs\nkubectl logs your-pod-id\n```\n\n----------------------------------------\n\nTITLE: 使用XML配置Zookeeper作为配置中心\nDESCRIPTION: 通过XML方式配置Zookeeper作为Dubbo的配置中心，指定配置中心地址。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Dubbo Contribution\nDESCRIPTION: Series of git commands to properly sync and prepare code for contributing to the Dubbo project. These commands help contributors create a clean pull request by synchronizing with the upstream repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:apache/dubbo.git\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b your_awesome_patch\n... add some work\ngit push origin your_awesome_patch\n```\n\n----------------------------------------\n\nTITLE: URLConnection Sender Dependency\nDESCRIPTION: Maven dependency for using URLConnectionSender with Zipkin\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/zipkin.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.zipkin.reporter2</groupId>\n    <artifactId>zipkin-sender-urlconnection</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Router Snapshot in Dubbo QoS\nDESCRIPTION: This command enables router snapshot sampling for services matching the pattern 'com.dubbo.*'. It returns the number of services affected and a performance warning.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>enableRouterSnapshot com.dubbo.*\nOK. Found service count: 1. This will cause performance degradation, please be careful!\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Defining LoadBalance Interface with SPI Annotations in Java\nDESCRIPTION: Defines the LoadBalance interface as an extension point using Dubbo's SPI annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@SPI(RandomLoadBalance.NAME)\npublic interface LoadBalance {\n\n    @Adaptive(\"loadbalance\")\n    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Centralized Metadata Registration in Self-Introspection Mode\nDESCRIPTION: Properties configuration to enable centralized metadata registration while in self-introspection mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=local\ndubbo.metadata-report.report-metadata=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Center in Dubbo 2.7\nDESCRIPTION: XML configuration to set up a Zookeeper-based metadata center in Dubbo 2.7, which stores the complete service metadata separately from the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Dubbo Reference (XML)\nDESCRIPTION: XML configuration for referencing Dubbo service across different namespaces.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"demoService\" check=\"true\"\n                  interface=\"org.apache.dubbo.samples.basic.api.DemoService\"\n                  provider-port=\"20885\"\n                  provided-by=\"istio-dubbo-producer\"\n                  provider-namespace=\"istio-demo\"/>\n```\n\n----------------------------------------\n\nTITLE: Example Maven Project Structure\nDESCRIPTION: Directory structure for implementing a custom Networker extension in a Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/networker.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxNetworker.java (implements Networker interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.remoting.p2p.Networker (plain text file, content: xxx=com.xxx.XxxNetworker)\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Cluster Extension\nDESCRIPTION: Directory structure showing the required files and their locations for implementing a custom cluster extension\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/cluster.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxCluster.java (implements Cluster interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.cluster.Cluster (plain text file with content: xxx=com.xxx.XxxCluster)\n```\n\n----------------------------------------\n\nTITLE: Nacos Metadata Configuration without Version or Group\nDESCRIPTION: Shows the configuration structure used in Nacos when version or group is not specified, maintaining colons as placeholders.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nProvider: namespace: 'public', dataId: '{service name}:::provider:{application name}', group: 'dubbo'\nConsumer: namespace: 'public', dataId: '{service name}:::consumer:{application name}', group: 'dubbo'\n```\n\n----------------------------------------\n\nTITLE: Abstract Proxy Invoker in Dubbo (Java)\nDESCRIPTION: The AbstractProxyInvoker class provides a template for invoking methods on a proxy object. It handles exceptions and wraps the result in an RpcResult object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class AbstractProxyInvoker<T> implements Invoker<T> {\n\n    @Override\n    public Result invoke(Invocation invocation) throws RpcException {\n        try {\n            // 调用 doInvoke 执行后续的调用，并将调用结果封装到 RpcResult 中，并\n            return new RpcResult(doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments()));\n        } catch (InvocationTargetException e) {\n            return new RpcResult(e.getTargetException());\n        } catch (Throwable e) {\n            throw new RpcException(\"Failed to invoke remote proxy method ...\");\n        }\n    }\n    \n    protected abstract Object doInvoke(T proxy, String methodName, Class<?>[] parameterTypes, Object[] arguments) throws Throwable;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timeout in Dubbo YAML Configuration\nDESCRIPTION: Configure the global default timeout to 5 seconds for all services using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    timeout: 5000\n```\n\n----------------------------------------\n\nTITLE: Installing Complete Stack\nDESCRIPTION: Installs all Dubbo components in one command using Helm\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin-all dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for Dubbo Consumer Module\nDESCRIPTION: Maven POM configuration for the Dubbo service consumer with dependencies on Spring Boot Web, Dubbo Spring Boot Starter, and the demo-api module.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.example</groupId>\n\t<artifactId>demo-consumer</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>demo-consumer</name>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>sonatype-nexus-snapshots</id>\n\t\t\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.boot</groupId>\n\t\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t\t<version>0.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.example</groupId>\n\t\t\t<artifactId>demo-api</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<classifier>exec</classifier>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: Starting Daemon Await Thread in Tomcat Embedded Servlet Container\nDESCRIPTION: Method to start a non-daemon thread that keeps the application running by continuously checking a flag in a loop. This is part of the TomcatEmbeddedServletContainer class in Spring Boot.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate void startDaemonAwaitThread() {\n\tThread awaitThread = new Thread(\"container-\" + (containerCounter.get())) {\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tTomcatEmbeddedServletContainer.this.tomcat.getServer().await();\n\t\t}\n\n\t};\n\tawaitThread.setContextClassLoader(getClass().getClassLoader());\n\tawaitThread.setDaemon(false);\n\tawaitThread.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider-side Service Timeout\nDESCRIPTION: Set timeout duration for DemoService implementation on the provider side using @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(timeout=5000)\npublic class DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Defining Greeter Service with Protobuf\nDESCRIPTION: Protocol Buffers service definition for a Greeter service with request and response message types. Includes package declaration and service method definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.samples.tri.unary;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Entry Size Limits in Java for Dubbo\nDESCRIPTION: Java System Properties to configure the cache entry size limits for Dubbo's mapping and metadata caches. These properties control the maximum number of entries allowed in the respective caches.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/4.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndubbo.mapping.cache.entrySize=10000\ndubbo.meta.cache.entrySize=100\n```\n\n----------------------------------------\n\nTITLE: Post-processing After ScopeModel Change in ServiceConfigBase\nDESCRIPTION: This method updates the provider's ScopeModel if it exists and differs from the current ScopeModel in ServiceConfigBase.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n@Override\n    protected void postProcessAfterScopeModelChanged(ScopeModel oldScopeModel, ScopeModel newScopeModel) {\n        super.postProcessAfterScopeModelChanged(oldScopeModel, newScopeModel);\n        if (this.provider != null && this.provider.getScopeModel() != scopeModel) {\n            this.provider.setScopeModel(scopeModel);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration in Dubbo-go\nDESCRIPTION: Initializes the router, event dispatcher, metadata report, and loads consumer configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Load() {\n    initRouter()\n    extension.SetAndInitGlobalDispatcher(GetBaseConfig().EventDispatcherType)\n    if err := startMetadataReport(GetApplicationConfig().MetadataType, GetBaseConfig().MetadataReportConfig); err != nil {\n      logger.Errorf(\"Provider starts metadata report error, and the error is {%#v}\", err)\n      return\n    }\n    loadConsumerConfig()\n}\n```\n\n----------------------------------------\n\nTITLE: Content Layout HTML Structure\nDESCRIPTION: HTML template structure defining the layout for Bookinfo documentation sections including traffic management and security information blocks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./traffic/\" >}}'>Traffic Management</a>\n                </h4>\n                <p>Tasks that demonstrate how to use Istio's traffic routing features.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./security/\" >}}'>Security</a>\n                </h4>\n                <p>Demonstrates how to secure Dubbo mesh.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Project\nDESCRIPTION: Git command to clone the Dubbo samples repository for demonstration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone -b master --depth 1 https://github.com/apache/dubbo-samples\n```\n\n----------------------------------------\n\nTITLE: Calculating QPS in AutoConcurrencyLimier\nDESCRIPTION: Formula for calculating the QPS (Queries Per Second) value within the current time window. Uses the total request count and the duration of the sampling window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nqps = totalReqCount * 1000000 / (samplingTimeUs - startSampleTimeUs)\n```\n\n----------------------------------------\n\nTITLE: Java Internal Name Format\nDESCRIPTION: The converted internal format of the service name used by Dubbo, with L prefix and semicolon suffix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-protocol.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nLcom/alibaba/middleware/hsf/guide/api/param/ModifyOrderPriceParam;\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Annotations for Prometheus Auto-Discovery of Dubbo Services\nDESCRIPTION: Example YAML showing the Kubernetes annotations needed for Prometheus to automatically discover and scrape metrics from Dubbo pods. These annotations specify the scrape path and port for metrics collection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/prometheus.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n   prometheus.io/scrape: \"true\"\n   prometheus.io/path: /management/prometheus\n   prometheus.io/port: \"22222\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Upstream in APISIX for Dubbo Service\nDESCRIPTION: cURL command to create an upstream in APISIX pointing to the Dubbo service registered in Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9180/apisix/admin/upstreams/1  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"service_name\": \"gateway-apisix-dubbo\",\n\t\"type\": \"roundrobin\",\n\t\"discovery_type\": \"nacos\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Generating Adaptive Method Content in Java\nDESCRIPTION: Complex method that generates the implementation content for an adaptive method, handling URL checks, extension name assignment, and method invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate String generateMethodContent(Method method) {\n    // The method must have the @Adaptive annotation\n    Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\n    StringBuilder code = new StringBuilder(512);\n    if (adaptiveAnnotation == null) {\n        // Not annotated with @Adaptive, generate exception message\n        return generateUnsupported(method);\n    } else {\n        // Get the index of the URL type in the parameter list\n        int urlTypeIndex = getUrlTypeIndex(method);\n        \n        if (urlTypeIndex != -1) {\n            // If there is a URL in the parameter list, generate a null check for the URL\n            code.append(generateUrlNullCheck(urlTypeIndex));\n        } else {\n            // If there is no URL type parameter in the parameter list, check if the parameter object has a getUrl method\n            // If yes, generate a URL null check\n            code.append(generateUrlAssignmentIndirectly(method));\n        }\n        // Parse the value attribute from the Adaptive annotation\n        String[] value = getMethodAdaptiveValue(adaptiveAnnotation);\n        // If there is an Invocation type parameter in the parameter list, generate a null check and obtain methodName.\n        boolean hasInvocation = hasInvocationArgument(method);\n        \n        code.append(generateInvocationArgumentNullCheck(method));\n        code.append(generateExtNameAssignment(value, hasInvocation));\n        // check extName == null?\n        code.append(generateExtNameNullCheck(value));\n    \n        // Generate obtaining the extension (using ExtensionLoader.getExtension method)\n        code.append(generateExtensionAssignment());\n\n        // Generate return statement\n        code.append(generateReturnAndInvocation(method));\n    }\n\n    return code.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Element Names with JAXB Annotations in Java\nDESCRIPTION: Shows how to customize the XML element names in serialized output using JAXB annotations on Java class fields.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class User implements Serializable {\n    \n    @XmlElement(name=\"username\") \n    private String name;  \n}\n```\n\n----------------------------------------\n\nTITLE: Service-Level Conditional Routing in Nacos\nDESCRIPTION: YAML configuration for service-level conditional routing to be stored in Nacos. Routes all calls to 'greet' method to services with IPs matching the pattern '127.*'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/router-module.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v1.0\nscope: \"service\"\nforce: false\nenabled: true\nkey: \"org.apache.dubbo.sample.tri.Greeter\"\nconditions:\n  - method=greet => ip=127.*\n```\n\n----------------------------------------\n\nTITLE: Defining Greeter Service with Protobuf\nDESCRIPTION: Protocol Buffers service definition for a Greeter service with request and response message types. Includes package declaration and service method definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/idl.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\noption java_multiple_files = true;\npackage org.apache.dubbo.samples.tri.unary;\n\nmessage GreeterRequest {\n  string name = 1;\n}\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n  rpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Future Object in Java\nDESCRIPTION: Demonstrates how to obtain and use a Future object for asynchronous calls in Dubbo 2.6.x.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n// this call will return null immediately\nfooService.findFoo(fooId);\n// Obtain the Future instance. When the result is returned, Future instance will be notified and the result will be set to Future instance.\nFuture<Foo> fooFuture = RpcContext.getContext().getFuture();\nfooFuture.get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo REST Service using Spring XML\nDESCRIPTION: Spring XML configuration that exposes a service through both REST and native Dubbo protocols. It defines the application name, registry (Zookeeper), and configures protocol details like ports and transport mechanisms.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"rest-provider\"/> <!-- #1 -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/> <!-- #2 -->\n    <dubbo:protocol name=\"rest\" port=\"8080\" server=\"netty\"/> <!-- #3 -->\n    <dubbo:protocol name=\"dubbo\" server=\"netty4\"/> <!-- #4 -->\n    <dubbo:service interface=\"org.apache.dubbo.samples.rest.api.UserService\" protocol=\"rest,dubbo\" ref=\"userService\"/>  <!-- #5 -->\n    <bean id=\"userService\" class=\"org.apache.dubbo.samples.rest.impl.UserServiceImpl\"/>\n</beans> <!-- #6 -->\n```\n\n----------------------------------------\n\nTITLE: Protocol Interface Definition\nDESCRIPTION: Example of Protocol interface definition with adaptive methods in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"dubbo\")\npublic interface Protocol {\n    @Adaptive\n    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;\n\n    @Adaptive\n    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;\n}\n\npublic class DubboProtocol extends AbstractProtocol {\n    ......\n    @Override\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        return protocolBindingRefer(type, url);\n    }\n    \n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        ......\n        return exporter;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example with Wrapper Object\nDESCRIPTION: Demonstrates the JSON format returned when using a wrapper object for primitive types in REST responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\"id\": 1001}\n```\n\n----------------------------------------\n\nTITLE: Calling Asynchronous Service in Java\nDESCRIPTION: Demonstrates how to call an asynchronous service and handle the CompletableFuture result in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/async-consumer.xml\"});\n    context.start();\n    final AsyncService asyncService = (AsyncService) context.getBean(\"asyncService\");\n\n    CompletableFuture<String> future = asyncService.sayHello(\"async call request\");\n    future.whenComplete((v, t) -> {\n        if (t != null) {\n            t.printStackTrace();\n        } else {\n            System.out.println(\"Response: \" + v);\n        }\n    });\n    System.out.println(\"Executed before response return.\");\n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Configuration Through Application Logs\nDESCRIPTION: Search for registry configuration in application logs by looking for specific log patterns that display the registry address and protocol information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 09:36:46:046 CST] main  INFO context.ConfigManager:  [DUBBO] <dubbo:registry address=\"nacos://127.0.0.1:8848\" protocol=\"nacos\" port=\"8848\" />, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Check via Properties File\nDESCRIPTION: Configuration in dubbo.properties file to disable checks for a specific service, all consumer services, or registry connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/preflight-check.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.reference.com.foo.BarService.check=false\ndubbo.consumer.check=false\ndubbo.registry.check=false\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Telnet Handler in Dubbo SPI\nDESCRIPTION: Properties file content for registering a custom TelnetHandler implementation with Dubbo's Service Provider Interface (SPI) mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/telnet-handler.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nxxx=com.xxx.XxxTelnetHandler\n```\n\n----------------------------------------\n\nTITLE: Traditional Spring Configuration with Hystrix\nDESCRIPTION: Configuration class for traditional Spring applications showing setup of AOP support and Hystrix command aspect.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    @Configuration\n    @EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.annotation.action\")\n    @PropertySource(\"classpath:/spring/dubbo-consumer.properties\")\n    @ComponentScan(value = {\"com.alibaba.dubbo.samples.annotation.action\"})\n    @EnableAspectJAutoProxy\n    static public class ConsumerConfiguration {\n\n        @Bean\n        public HystrixCommandAspect hystrixCommandAspect() {\n            return new HystrixCommandAspect();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dubbo QoS via Telnet\nDESCRIPTION: This snippet demonstrates how to connect to the Dubbo QoS interface using telnet on the default port 22222.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ telnet localhost 22222\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Callback in Java\nDESCRIPTION: Implements the Notify interface to handle onreturn and onthrow events, storing results and errors in maps.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass NotifyImpl implements Notify {\n    public Map<Integer, Person>    ret    = new HashMap<Integer, Person>();\n    public Map<Integer, Throwable> errors = new HashMap<Integer, Throwable>();\n    \n    public void onreturn(Person msg, Integer id) {\n        System.out.println(\"onreturn:\" + msg);\n        ret.put(id, msg);\n    }\n    \n    public void onthrow(Throwable ex, Integer id) {\n        errors.put(id, ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 配置中心优先级设置\nDESCRIPTION: 通过系统属性设置配置中心的配置优先级，默认配置中心的优先级高于本地配置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n-Ddubbo.config-center.highest-priority=false\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in YAML\nDESCRIPTION: Spring Boot YAML configuration to enable FST serialization for Dubbo protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n protocol:\n   serialization: fst\n```\n\n----------------------------------------\n\nTITLE: Querying All Monitoring Metrics in Dubbo using Telnet\nDESCRIPTION: This command connects to Dubbo's QoS port via telnet and executes the 'metrics_default' command to retrieve all monitoring metrics available in the system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> metrics_default\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Dubbo Filter in Application Properties\nDESCRIPTION: Configuration in application.properties to activate the custom AppendedFilter for all Provider services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# Apply AppendedFilter\ndubbo.provider.filter=appended\n```\n\n----------------------------------------\n\nTITLE: Scanning Wrapper Classes in Dubbo's ExtensionLoader\nDESCRIPTION: Code from the loadClass method in ExtensionLoader that identifies and caches Wrapper classes. This method determines if a class is a Wrapper by checking if it has annotations or special constructor parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n //扩展子类型是否存在这个注解@Adaptive\n        if (clazz.isAnnotationPresent(Adaptive.class)) {\n            cacheAdaptiveClass(clazz, overridden);\n        } else if (isWrapperClass(clazz)) {\n        //扩展子类型构造器中是否有这个类型的接口 (这个可以想象下我们了解的Java IO流中的类型使用到的装饰器模式 构造器传个类型)\n            cacheWrapperClass(clazz);\n        } else {\n```\n\n----------------------------------------\n\nTITLE: Cloning Dubbo Sample Project\nDESCRIPTION: Command to clone the Dubbo samples repository for deployment examples\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -b master --depth 1 https://github.com/apache/dubbo-samples\n```\n\n----------------------------------------\n\nTITLE: Defining the Registry Interface in Dubbogo\nDESCRIPTION: The Registry interface in Dubbogo defines core methods for service registration and discovery. It allows providers to register services and consumers to subscribe to them. The interface includes Register, UnRegister, Subscribe, and UnSubscribe methods along with documentation explaining contract requirements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Registry Extension - Registry\ntype Registry interface {\n\tcommon.Node\n\n\t// Register is used for service provider calling, register services\n\t// to registry. And it is also used for service consumer calling, register\n\t// services cared about, for dubbo's admin monitoring.\n\tRegister(url *common.URL) error\n\n\t// UnRegister is required to support the contract:\n\t// 1. If it is the persistent stored data of dynamic=false, the\n\t//    registration data can not be found, then the IllegalStateException\n\t//    is thrown, otherwise it is ignored.\n\t// 2. Unregister according to the full url match.\n\t// url Registration information, is not allowed to be empty, e.g:\n\t// dubbo://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&application=kylin\n\tUnRegister(url *common.URL) error\n\n\t// Subscribe is required to support the contract:\n\t// When creating new registry extension, pls select one of the\n\t// following modes.\n\t// Will remove in dubbogo version v1.1.0\n\t// mode1: return Listener with Next function which can return\n\t//        subscribe service event from registry\n\t// Deprecated!\n\t// subscribe(event.URL) (Listener, error)\n\t// Will replace mode1 in dubbogo version v1.1.0\n\t// mode2: callback mode, subscribe with notify(notify listener).\n\tSubscribe(*common.URL, NotifyListener) error\n\n\t// UnSubscribe is required to support the contract:\n\t// 1. If don't subscribe, ignore it directly.\n\t// 2. Unsubscribe by full URL match.\n\t// url Subscription condition, not allowed to be empty, e.g.\n\t// consumer://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&application=kylin\n\t// listener A listener of the change event, not allowed to be empty\n\tUnSubscribe(*common.URL, NotifyListener) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Provider in XML\nDESCRIPTION: XML configuration for the service provider, including application name, registry address, and service definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"rpc-callback-demo\" />\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.callback.implicit.NormalDemoService\" />\n<dubbo:service interface=\"org.apache.dubbo.callback.implicit.IDemoService\" ref=\"demoService\" version=\"1.0.0\" group=\"cn\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider with Properties\nDESCRIPTION: Properties file for Dubbo service provider configuration using Nacos as registry. Sets application name, registry address, and protocol settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n## application\ndubbo.application.name = dubbo-provider-demo\n\n## Nacos registry address\ndubbo.registry.address = nacos://127.0.0.1:8848\n\n## Dubbo Protocol\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = -1\n```\n\n----------------------------------------\n\nTITLE: 实现 Container 接口的自定义容器\nDESCRIPTION: 自定义容器实现示例，展示了如何实现 Container 接口的 start() 和 stop() 方法来创建自定义容器。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \norg.apache.dubbo.container.Container;\n \n \npublic class XxxContainer implements Container {\n    public Status start() {\n        // ...\n    }\n    public Status stop() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Registry Interface in Dubbogo\nDESCRIPTION: The Registry interface in Dubbogo defines core methods for service registration and discovery. It allows providers to register services and consumers to subscribe to them. The interface includes Register, UnRegister, Subscribe, and UnSubscribe methods along with documentation explaining contract requirements.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/registry.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Registry Extension - Registry\ntype Registry interface {\n\tcommon.Node\n\n\t// Register is used for service provider calling, register services\n\t// to registry. And it is also used for service consumer calling, register\n\t// services cared about, for dubbo's admin monitoring.\n\tRegister(url *common.URL) error\n\n\t// UnRegister is required to support the contract:\n\t// 1. If it is the persistent stored data of dynamic=false, the\n\t//    registration data can not be found, then the IllegalStateException\n\t//    is thrown, otherwise it is ignored.\n\t// 2. Unregister according to the full url match.\n\t// url Registration information, is not allowed to be empty, e.g:\n\t// dubbo://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&application=kylin\n\tUnRegister(url *common.URL) error\n\n\t// Subscribe is required to support the contract:\n\t// When creating new registry extension, pls select one of the\n\t// following modes.\n\t// Will remove in dubbogo version v1.1.0\n\t// mode1: return Listener with Next function which can return\n\t//        subscribe service event from registry\n\t// Deprecated!\n\t// subscribe(event.URL) (Listener, error)\n\t// Will replace mode1 in dubbogo version v1.1.0\n\t// mode2: callback mode, subscribe with notify(notify listener).\n\tSubscribe(*common.URL, NotifyListener) error\n\n\t// UnSubscribe is required to support the contract:\n\t// 1. If don't subscribe, ignore it directly.\n\t// 2. Unsubscribe by full URL match.\n\t// url Subscription condition, not allowed to be empty, e.g.\n\t// consumer://10.20.153.10/org.apache.dubbo.foo.BarService?version=1.0.0&application=kylin\n\t// listener A listener of the change event, not allowed to be empty\n\tUnSubscribe(*common.URL, NotifyListener) error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin using dubboctl\nDESCRIPTION: Commands to install Dubbo Admin using dubboctl, including options for customizing components and configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl manifest install # 使用默认 manifests 安装\n\n# or\n\ndubboctl manifest generate | kubectl apply -f -\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install --set spec.components.admin.replicas=2 # 设置组件的配置\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install --set spec.componentsMeta.admin.enabled=true, spec.componentsMeta.grafana.enabled=false\n# 开启或关闭组件\n```\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install --set spec.componentsMeta.grafana.repoURL=https://grafana.github.io/helm-charts, spec.componentsMeta.grafana.version=6.31.0\n# 设置需远程拉取组件的仓库地址与版本\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pod -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/dubbo-admin -n dubbo-system 38080:38080\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Based Registry Selection in XML\nDESCRIPTION: XML configuration showing how to set up zone-based registry selection to prioritize traffic routing to the same zone.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 选址时会和流量中的 zone key 做匹配，流量会优先派发到相同 zone 的地址 -->\n<dubbo:registry address=\"zookeeper://${zookeeper.address1}\" zone=\"beijing\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Long-Running Thread in JUnit Test\nDESCRIPTION: JUnit test method that creates a non-daemon thread that sleeps for 1000 seconds. This is used to demonstrate thread behavior in IDE-run tests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Test\npublic void test() {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Thread.sleep(1000000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }).start();\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing with Zipkin in Dubbo Spring Boot\nDESCRIPTION: This XML snippet shows how to add the necessary dependency to enable tracing and export data to Zipkin in a Dubbo Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/tracing/tracing.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>\n    <version>3.2.1-SNAPSHOT</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Deploying Release Artifacts to Apache Maven Repository\nDESCRIPTION: Maven commands for deploying the release artifacts to the Apache Maven repository. These commands build with the release profile and deploy the artifacts to staging repositories, skipping tests during deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy -Prelease -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractServiceNameMapping in Java\nDESCRIPTION: Constructor for AbstractServiceNameMapping class that sets up the application model and mapping cache manager using LRU cache.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic AbstractServiceNameMapping(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        this.mappingCacheManager = new MappingCacheManager(\"\",\n            applicationModel.getFrameworkModel().getBeanFactory()\n            .getBean(FrameworkExecutorRepository.class).getCacheRefreshingScheduledExecutor());\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with XML in Java\nDESCRIPTION: This XML configuration file sets up a Dubbo service consumer, defining the application, registry, and service reference. It uses the Nacos registry to discover and reference a DemoService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- \n\nProvider application information for dependency calculation\n -->\n    <dubbo:application name=\"dubbo-consumer-xml-demo\"/>\n\n    <!-- Using the Nacos registry-->\n    <dubbo:registry address=\"nacos://127.0.0.1:8848\"/>\n\n    <!-- Reference service interface -->\n    <dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.service.DemoService\" version=\"2.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Conditional Routing Rule in YAML for Dubbo CommentService\nDESCRIPTION: Demonstrates region-based conditional routing configuration for Dubbo service. Routes CommentService calls to instances with matching region tags.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - '=> region = $region'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with Spring Configuration\nDESCRIPTION: Shows how to define a ConsumerConfiguration class to assemble Dubbo services in a client application. Uses Spring annotations to enable Dubbo, specify component scanning packages, and load properties from an external file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.action\")\n@PropertySource(\"classpath:/spring/dubbo-consumer.properties\")\n@ComponentScan(value = {\"com.alibaba.dubbo.samples.action\"})\nstatic class ConsumerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: SimpleMetricsEventMulticaster Event Publishing Implementation\nDESCRIPTION: Implementation of the publishEvent method in SimpleMetricsEventMulticaster that distributes events to appropriate listeners. It validates events and loops through registered listeners to find those that support the event type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n//SimpleMetricsEventMulticaster\npublic void publishEvent(MetricsEvent event) {\n        if (event instanceof EmptyEvent) {\n            return;\n        }\n        if (validateIfApplicationConfigExist(event)) return;\n        for (MetricsListener listener : listeners) {\n            if (listener.isSupport(event)) {\n                listener.onEvent(event);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining User Transport Structure in Java for Dubbo Service\nDESCRIPTION: Java class definition for the User transport structure that implements Serializable interface with basic user properties including id, name, age, and timestamp.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n\tprivate String id;\n\n  private String name;\n\n  private int age;\n\n  private Date time = new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for Dubbo REST Logging\nDESCRIPTION: This XML configuration snippet shows how to configure Log4j to enable INFO level logging for Dubbo REST support classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_46\n\nLANGUAGE: XML\nCODE:\n```\n<logger name=\"org.apache.dubbo.rpc.protocol.rest.support\">\n    <level value=\"INFO\"/>\n    <appender-ref ref=\"CONSOLE\"/>\n</logger>\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard gRPC Server\nDESCRIPTION: Implementation of a standard gRPC server that provides the same GreetService interface. This server will be called by the Dubbo-go client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype server struct {\n\tpb.UnimplementedGreetServiceServer\n}\n\nfunc (s *server) Greet(ctx context.Context, req *pb.GreetRequest) (*pb.GreetResponse, error) {\n\tresp := &pb.GreetResponse{Greeting: \"grpc:\" + req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:20001\")\n\tif err != nil {\n\t\tlogger.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterGreetServiceServer(s, &server{})\n\tlogger.Infof(\"server listening at %v\", lis.Addr())\n\tif err := s.Serve(lis); err != nil {\n\t\tlogger.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Struct with Hessian2 Encoding\nDESCRIPTION: Defines a User struct with JavaClassName implementation for Hessian2 encoding compatibility with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tId   string\n\tName string\n\tAge  int32\n\tTime time.Time\n}\n\nfunc (u User) JavaClassName() string {\n\treturn \"org.apache.dubbo.User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Registration through Application Logs\nDESCRIPTION: This snippet shows the log pattern to look for when confirming if a service has been registered to the remote registry. The log entry indicates that a service has been registered to a registry at a specific address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n[26/02/23 04:34:41:041 CST] main  INFO config.ServiceConfig:  [DUBBO] Register dubbo service org.apache.dubbo.samples.api.GreetingsService url dubbo://*** to registry 127.0.0.1:8848, dubbo version: 3.1.7, current host: 192.168.31.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Shutdown Wait Time\nDESCRIPTION: Shell configuration to set the graceful shutdown wait time for Dubbo services. This example sets the wait time to 20000 milliseconds (20 seconds), overriding the default value of 10000 milliseconds.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-gracefully-shutdown.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndubbo.service.shutdown.wait=20000\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Authentication in Properties Format\nDESCRIPTION: Properties file configuration for Nacos registry with authentication credentials using the username:password@host format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.registry.address: nacos://nacos:nacos@localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Mapping Services in Properties File\nDESCRIPTION: Demonstrates the content of a properties file used for mapping service names to provider URLs. This file is referenced by the dubbo.resolve.file JVM parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ncom.alibaba.xxx.XxxService=dubbo://localhost:20890\n```\n\n----------------------------------------\n\nTITLE: Starting the Dubbo Triple Server\nDESCRIPTION: Command to compile and run the Dubbo Triple server that will be called by a standard gRPC client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.grpc.interop.server.TriOpServer\"\n```\n\n----------------------------------------\n\nTITLE: Extended Logger Interface for Error Codes in Dubbo Java\nDESCRIPTION: New methods added to the ErrorTypeAwareLogger interface in Dubbo 3.1 to support error codes. These methods allow specifying the error code, cause, and extended information when logging warnings or errors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/intro.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid warn(String code, String cause, String extendedInformation, String msg);\nvoid warn(String code, String cause, String extendedInformation, String msg, Throwable e);\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin with Minimal Profile\nDESCRIPTION: Specifies a minimal profile when installing Dubbo Admin to control which components are installed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install --set profile=minimal # 指定不同的 profile，即安装组件的组合\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Center Extension Interfaces in Java\nDESCRIPTION: Defines the core interfaces for the Dubbo configuration center extension: DynamicConfigurationFactory and DynamicConfiguration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/config-center.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.configcenter.DynamicConfigurationFactory\norg.apache.dubbo.configcenter.DynamicConfiguration\n```\n\n----------------------------------------\n\nTITLE: Creating Zookeeper Registry in Dubbo Rust\nDESCRIPTION: These snippets show two ways to create a Zookeeper registry: directly with a server address and using the default method which relies on an environment variable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n//直接创建Zookeeper注册中心\nlet zkr = ZookeeperRegistry::new(\"127.0.0.1:1221\");\n```\n\nLANGUAGE: rust\nCODE:\n```\n//使用default方法创建Zookeeper注册中心会默认使用环境变量中的值ZOOKEEPER_SERVERS\nlet zkr = ZookeeperRegistry::default();\n```\n\n----------------------------------------\n\nTITLE: Property File Saving Implementation\nDESCRIPTION: Detailed implementation of saving properties to local file with file locking mechanism\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nprivate void doSaveProperties(long version) {\n\t\t//不是最新的就不要持久化了\n        if (version < lastCacheChanged.get()) {\n            return;\n        }\n        if (file == null) {\n            return;\n        }\n        // Save\n        try {\n        \t//创建本地文件锁:\n        \t//路径为:\n        \t///Users/song/.dubbo/dubbo-metadata-dubbo-demo-api-provider-127.0.0.1-2181.cache.lock\n            File lockfile = new File(file.getAbsolutePath() + \".lock\");\n            //锁文件不存在则创建锁文件\n            if (!lockfile.exists()) {\n                lockfile.createNewFile();\n            }\n            //随机访问文件工具类对象创建 读写权限\n            try (RandomAccessFile raf = new RandomAccessFile(lockfile, \"rw\");\n            //文件文件Channel\n            //返回与此文件关联的唯一FileChannel对象。\n                FileChannel channel = raf.getChannel()) {\n                //FileChannel中的lock()与tryLock()方法都是尝试去获取在某一文件上的独有锁（以下简称独有锁），可以实现进程间操作的互斥。区别在于lock()会阻塞（blocking）方法的执行，tryLock()则不会。\n                FileLock lock = channel.tryLock();\n                //如果多个线程同时进来未获取锁的则抛出异常\n                if (lock == null) {\n                    throw new IOException(\"Can not lock the metadataReport cache file \" + file.getAbsolutePath() + \", ignore and retry later, maybe multi java process use the file, please config: dubbo.metadata.file=xxx.properties\");\n                }\n                // Save\n                try {\n                \t//文件不存在则创建本地元数据缓存文件\n                \t///Users/song/.dubbo/dubbo-metadata-dubbo-demo-api-provider-127.0.0.1-2181.cache\n                    if (!file.exists()) {\n                        file.createNewFile();\n                    }\n\n                    Properties tmpProperties;\n                    if (!syncReport) {\n                        // When syncReport = false, properties.setProperty and properties.store are called from the same\n                        // thread(reportCacheExecutor), so deep copy is not required\n                        tmpProperties = properties;\n                    } else {\n                        // Using store method and setProperty method of the this.properties will cause lock contention\n                        // under multi-threading, so deep copy a new container\n                        //异步存储会导致锁争用 使用此的store方法和setProperty方法。属性将导致多线程下的锁争用，因此深度复制新容器\n                        tmpProperties = new Properties();\n                        Set<Map.Entry<Object, Object>> entries = properties.entrySet();\n                        for (Map.Entry<Object, Object> entry : entries) {\n                            tmpProperties.setProperty((String) entry.getKey(), (String) entry.getValue());\n                        }\n                    }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom gRPC Configuration for Dubbo\nDESCRIPTION: Implementation of a custom GrpcConfigurator to configure gRPC-specific settings for Dubbo services. It allows customization of server builder, channel builder, and call options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MyGrpcConfigurator implements GrpcConfigurator {\n    private final ExecutorService executor = Executors\n            .newFixedThreadPool(200, new NamedThreadFactory(\"Customized-grpc\", true));\n\n    @Override\n    public NettyServerBuilder configureServerBuilder(NettyServerBuilder builder, URL url) {\n        return builder.executor(executor);\n    }\n\n    @Override\n    public NettyChannelBuilder configureChannelBuilder(NettyChannelBuilder builder, URL url)\n    {\n        return builder.flowControlWindow(10);\n    }\n\n    @Override\n    public CallOptions configureCallOptions(CallOptions options, URL url) {\n        return options.withOption(CallOptions.Key.create(\"key\"), \"value\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastjson Serialization in XML\nDESCRIPTION: XML configuration options for enabling Fastjson serialization at protocol, consumer, and reference levels in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"fastjson\" />\n\n<!-- or -->\n<dubbo:consumer serialization=\"fastjson\" />\n\n<!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"fastjson\" />\n```\n\n----------------------------------------\n\nTITLE: Defining User Transport Structure in Java for Dubbo Service\nDESCRIPTION: Java class definition for the User transport structure that implements Serializable interface with basic user properties including id, name, age, and timestamp.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n\tprivate String id;\n\n  private String name;\n\n  private int age;\n\n  private Date time = new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path for REST Services in Dubbo\nDESCRIPTION: XML configuration for setting a base context path for all REST services in Dubbo, similar to the context path in Java web applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balance in Dubbo XML\nDESCRIPTION: XML configuration for setting load balance strategy at protocol or provider level. This shows how to specify which load balancing algorithm to use for service invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/load-balance.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol loadbalance=\"xxx\" />\n<!-- Default value settings, when <dubbo:protocol> does not configure loadbalance, this configuration is used -->\n<dubbo:provider loadbalance=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin components using Helm\nDESCRIPTION: Helm commands to add repositories and install various components of Dubbo Admin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add https://charts.bitnami.com/bitnami\nhelm repo add https://prometheus-community.github.io/helm-charts\nhelm repo add https://grafana.github.io/helm-charts\nhelm repo add https://apache.jfrog.io/artifactory/skywalking-helm\nhelm repo add https://openzipkin.github.io/zipkin\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install zookeeper bitnami/zookeeper -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install prometheus prometheus-community/prometheus -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install grafana grafana/grafana -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install skywalking skywalking/skywalking -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install zipkin openzipkin/zipkin -n dubbo-system\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm ls -n dubbo-system ；kubectl get pods -n dubbo-system --output wide\n```\n\n----------------------------------------\n\nTITLE: Generating jstack Log for Dubbo Client Closure Analysis\nDESCRIPTION: This command generates a jstack log file for analyzing the stack trace of a Dubbo process experiencing client closure errors. It captures the current state of all threads in the Java process identified by [PID].\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/7.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: ArgInfo Class Definition\nDESCRIPTION: Java class representing method argument information, including index, annotation name, parameter type, and URL split information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ArgInfo {\n    /**\n     * method arg index 0,1,2,3\n     */\n    private int index;\n    /**\n     * method annotation name or name\n     */\n    private String annotationNameAttribute;\n\n    /**\n     * param annotation type\n     */\n    private Class paramAnnotationType;\n\n    /**\n     * param Type\n     */\n    private Class paramType;\n\n    /**\n     * param name\n     */\n    private String paramName;\n\n    /**\n     * url split(\"/\") String[n]  index\n     */\n    private int urlSplitIndex;\n\n    private Object defaultValue;\n\n    private boolean formContentType;\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Provider in Java\nDESCRIPTION: Implements the IDemoService interface on the provider side. The get method returns a new Person object with the given ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass NormalDemoService implements IDemoService {\n    public Person get(int id) {\n        return new Person(id, \"charles`son\", 4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Service Definition Metadata in Java\nDESCRIPTION: This method publishes service definition metadata for both providers and consumers. It retrieves metadata reports, constructs metadata identifiers, and stores the metadata using the appropriate report implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npublic static void publishServiceDefinition(URL url, ServiceDescriptor serviceDescriptor, ApplicationModel applicationModel) {\n    if (getMetadataReports(applicationModel).size() == 0) {\n        String msg = \"Remote Metadata Report Server is not provided or unavailable, will stop registering service definition to remote center!\";\n        logger.warn(msg);\n    }\n\n    try {\n        String side = url.getSide();\n        if (PROVIDER_SIDE.equalsIgnoreCase(side)) {\n            String serviceKey = url.getServiceKey();\n            FullServiceDefinition serviceDefinition = serviceDescriptor.getFullServiceDefinition(serviceKey);\n\n            if (StringUtils.isNotEmpty(serviceKey) && serviceDefinition != null) {\n                serviceDefinition.setParameters(url.getParameters());\n                for (Map.Entry<String, MetadataReport> entry : getMetadataReports(applicationModel).entrySet()) {\n                    MetadataReport metadataReport = entry.getValue();\n                    if (!metadataReport.shouldReportDefinition()) {\n                        logger.info(\"Report of service definition is disabled for \" + entry.getKey());\n                        continue;\n                    }\n                    metadataReport.storeProviderMetadata(\n                        new MetadataIdentifier(\n                            url.getServiceInterface(),\n                            url.getVersion() == null ? \"\" : url.getVersion(),\n                            url.getGroup() == null ? \"\" : url.getGroup(),\n                            PROVIDER_SIDE,\n                            applicationModel.getApplicationName())\n                        , serviceDefinition);\n                }\n            }\n        } else {\n            for (Map.Entry<String, MetadataReport> entry : getMetadataReports(applicationModel).entrySet()) {\n                MetadataReport metadataReport = entry.getValue();\n                if (!metadataReport.shouldReportDefinition()) {\n                    logger.info(\"Report of service definition is disabled for \" + entry.getKey());\n                    continue;\n                }\n                metadataReport.storeConsumerMetadata(\n                    new MetadataIdentifier(\n                        url.getServiceInterface(),\n                        url.getVersion() == null ? \"\" : url.getVersion(),\n                        url.getGroup() == null ? \"\" : url.getGroup(),\n                        CONSUMER_SIDE,\n                        applicationModel.getApplicationName()),\n                    url.getParameters());\n            }\n        }\n    } catch (Exception e) {\n        logger.error(\"publish service definition metadata error.\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Istio VirtualService for Traffic Management\nDESCRIPTION: Istio VirtualService configuration that routes all traffic to the v1 subset of the Dubbo-go server, demonstrating traffic routing capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: dubbo-go-server\nspec:\n  hosts:\n    - dubbo-go-server\n  http:\n  - route:\n    - destination:\n        host: dubbo-go-server\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Server Configuration\nDESCRIPTION: YAML configuration for Dubbo server including application, registry, service, and protocol settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napplication:\n  organization: \"dubbo.io\"\n  name: \"UserInfoServer\"\n  module: \"dubbo-go user-info server\"\n  version: \"0.0.1\"\n  environment: \"dev\"\n\nregistries:\n  \"demoZk\":\n    protocol: \"zookeeper\"\n    timeout: \"3s\"\n    address: \"127.0.0.1:2181\"\n\nservices:\n  \"UserProvider\":\n    registry: \"demoZk\"\n    protocol: \"dubbo\"\n    interface: \"org.apache.dubbo.UserProvider\"\n    loadbalance: \"random\"\n    warmup: \"100\"\n    cluster: \"failover\"\n    methods:\n      - name: \"GetUser\"\n        retries: 1\n        loadbalance: \"random\"\n\nprotocols:\n  \"dubbo\":\n    name: \"dubbo\"\n    port: 20000\n\nprotocol_conf:\n  dubbo:\n    session_number: 700\n    session_timeout: \"180s\"\n    getty_session_param:\n      compress_encoding: false\n      tcp_no_delay: true\n      tcp_keep_alive: true\n      keep_alive_period: \"120s\"\n      tcp_r_buf_size: 262144\n      tcp_w_buf_size: 65536\n      pkg_rq_size: 1024\n      pkg_wq_size: 512\n      tcp_read_timeout: \"1s\"\n      tcp_write_timeout: \"5s\"\n      wait_timeout: \"1s\"\n      max_msg_len: 1024000\n      session_name: \"server\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Arguments in Dubbo\nDESCRIPTION: Example demonstrating how to configure method argument properties like callback functionality within a method declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\">\n   <dubbo:argument index=\"0\" callback=\"true\" />\n</dubbo:method>\n```\n\n----------------------------------------\n\nTITLE: Enabling Apollo Configuration Center in Dubbo (XML)\nDESCRIPTION: XML configuration to enable Apollo as the configuration center for Dubbo. Specifies the Apollo server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center address=\"apollo://localhost:8080\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Backup Servers in Dubbo XML\nDESCRIPTION: Configuration for Redis registry with backup servers using the URL format and backup parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Consul Registry Dependency in Maven\nDESCRIPTION: Adds the Consul registry extension dependency to a Dubbo project. This module is required since Dubbo 3 as Consul adapter is no longer embedded in the core.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/consul.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-registry-consul</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Spring Framework ShutdownHook Registration Implementation\nDESCRIPTION: This code snippet shows how Spring Framework registers a shutdown hook that will execute the doClose method when the JVM is shutting down. The shutdown hook is registered as a non-daemon thread that synchronizes on startupShutdownMonitor to safely perform cleanup operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void registerShutdownHook() {\n        if (this.shutdownHook == null) {\n            // No shutdown hook registered yet.\n            this.shutdownHook = new Thread() {\n                @Override\n                public void run() {\n                    synchronized (startupShutdownMonitor) {\n                        doClose();\n                    }\n                }\n            };\n            Runtime.getRuntime().addShutdownHook(this.shutdownHook);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol for Dubbo in Erlang\nDESCRIPTION: This code snippet demonstrates how to configure the serialization protocol for Dubbo in Erlang. It shows the addition of the 'protocol' setting to the 'dubboerl' application configuration in the sys.config file. The example sets the protocol to 'hessian'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{protocol,hessian}\n]}\n```\n\n----------------------------------------\n\nTITLE: Service Subscription with Multiple Registries in Java\nDESCRIPTION: Demonstrates how to configure a service to subscribe from specific registry centers using @DubboReference annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(registry = {\"beijingRegistry\"})\nprivate DemoService demoService\n```\n\n----------------------------------------\n\nTITLE: Configuring Failfast Strategy at Service Consumer Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the failfast strategy at the service consumer level. Consumer-side configurations take precedence over provider-side configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"failfast\"/>\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-side Concurrent Calls at Service Level with Annotations\nDESCRIPTION: Annotation-based configuration to limit concurrent call count of all methods in a service to a maximum of 10 per client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(actives=10)\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Committing Release Files to Apache SVN\nDESCRIPTION: Commands to check SVN status and commit the prepared release files to the Apache SVN repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ svn status\n$ svn commit -m 'prepare for ${release_version} RC1'\n```\n\n----------------------------------------\n\nTITLE: Extension Instantiation Strategy\nDESCRIPTION: Strategy implementation for instantiating extension objects with constructor matching and parameter injection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\npublic <T> T instantiate(Class<T> type) throws ReflectiveOperationException {\n        Constructor<T> defaultConstructor = null;\n        try {\n            defaultConstructor = type.getConstructor();\n        } catch (NoSuchMethodException e) {\n        }\n        List<Constructor> matchedConstructors = new ArrayList<>();\n        Constructor<?>[] declaredConstructors = type.getConstructors();\n        for (Constructor<?> constructor : declaredConstructors) {\n            if (isMatched(constructor)) {\n                matchedConstructors.add(constructor);\n            }\n        }\n        if (defaultConstructor != null) {\n            matchedConstructors.remove(defaultConstructor);\n        }\n        Constructor targetConstructor;\n        if (matchedConstructors.size() > 1) {\n            throw new IllegalArgumentException(\"Expect only one but found \" +\n                matchedConstructors.size() + \" matched constructors for type: \" + type.getName() +\n                \", matched constructors: \" + matchedConstructors);\n        } else if (matchedConstructors.size() == 1) {\n            targetConstructor = matchedConstructors.get(0);\n        } else if (defaultConstructor != null) {\n            targetConstructor = defaultConstructor;\n        } else {\n            throw new IllegalArgumentException(\"None matched constructor was found for type: \" + type.getName());\n        }\n        Class[] parameterTypes = targetConstructor.getParameterTypes();\n        Object[] args = new Object[parameterTypes.length];\n        for (int i = 0; i < parameterTypes.length; i++) {\n            args[i] = getArgumentValueForType(parameterTypes[i]);\n        }\n        return (T) targetConstructor.newInstance(args);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer with msgpack Serialization\nDESCRIPTION: This Java code demonstrates how to consume the Dubbo service using msgpack serialization in a Spring controller.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/msgpack-serialization.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@DubboReference(interfaceClass = MsgpackService.class)\nprivate MsgpackService msgPackService;\n\n@GetMapping(\"/msgpack\")\npublic String testMsgpack(){\n    int v1 = msgPackService.tint(1);\n    long v2 = msgPackService.tlong(2);\n    List<String> v3 = msgPackService.tlist(Lists.newArrayList(\"1\",\"2\",\"3\"));\n    String v4 = msgPackService.multiParams(\"hello\", 3, new MyParam(\"Tom\", 24));\n    return \"msgpack\"+v1+\" \"+v2+\" \"+v3+\" \"+v4;\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Dubbo-go Applications\nDESCRIPTION: Commands to set environment variables and run both the server and client applications. Each application needs the DUBBO_GO_CONFIG_PATH environment variable to locate its configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport DUBBO_GO_CONFIG_PATH=dubbogo.yml\ngo run .\n```\n\n----------------------------------------\n\nTITLE: getExtensionDirector Method in ScopeModel Class\nDESCRIPTION: Illustrates the getExtensionDirector method in the ScopeModel class, which returns the extensionDirector object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public ExtensionDirector getExtensionDirector() {\n        return extensionDirector;\n    }\n```\n\n----------------------------------------\n\nTITLE: Obtaining SPI Extension Instances (Original Method)\nDESCRIPTION: Shows the original static method approach for obtaining SPI extension instances before the multiple-instance transformation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/develop.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nExtensionLoader.getExtensionLoader(Cluster.class).getExtension(name, wrap);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Properties in Java Application\nDESCRIPTION: Configuration for changing the default username, password, and JWT secret token in the application.properties file for Java-based deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/notices/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nadmin.root.user.name=root\nadmin.root.user.password=root\nadmin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Filter in Go for Pixiu\nDESCRIPTION: Defines a DemoFilter that logs the request body in the Decode stage, reverses the text, and returns it as a mock response. In the Encode stage, it logs the response with a configurable prefix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DemoFilter struct {\n   logPrefix string\n}\n\n// Decode阶段，发生在调用Upstream之前\nfunc (f *DemoFilter) Decode(ctx *contexthttp.HttpContext) filter.FilterStatus {\n   body, _ := ioutil.ReadAll(ctx.Request.Body)\n   logger.Infof(\"request body: %s\", body)\n\n   //reverse res str\n   runes := []rune(string(body))\n   for i := 0; i < len(runes)/2; i += 1 {\n      runes[i], runes[len(runes)-1-i] = runes[len(runes)-1-i], runes[i]\n   }\n   reverse := string(runes)\n\n   //mock response\n   ctx.SendLocalReply(200, []byte(reverse))\n   return filter.Stop\n}\n\n// Encode阶段，此时可以获取到Upstream的Response\nfunc (f *DemoFilter) Encode(ctx *contexthttp.HttpContext) filter.FilterStatus {\n   res := ctx.SourceResp.(string)\n   logger.Infof(\"%s: %s\", f.logPrefix, res)\n   return filter.Continue\n}\n```\n\n----------------------------------------\n\nTITLE: Metrics Constants Definition in RegistryMetricsEventMulticaster\nDESCRIPTION: Declaration of metrics constants in the MCat interface within RegistryMetricsEventMulticaster. These constants define metrics collectors for notification events and directory updates, establishing the logic for handling metrics events.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//RegistryMetricsEventMulticaster.MCat\nMetricsCat APPLICATION_NOTIFY_FINISH = new MetricsCat(MetricsKey.NOTIFY_METRIC_NUM_LAST,\n            (key, placeType, collector) -> AbstractMetricsListener.onFinish(key,\n                event -> {\n                    collector.addRt(event.appName(), placeType.getType(), event.getTimePair().calc());\n                    Map<String, Integer> lastNumMap = Collections.unmodifiableMap(event.getAttachmentValue(ATTACHMENT_KEY_LAST_NUM_MAP));\n                    lastNumMap.forEach(\n                        (k, v) -> collector.setNum(key, event.appName(), k, v));\n\n                }\n            ));\n\n        MetricsCat APPLICATION_DIRECTORY_POST = new MetricsCat(MetricsKey.DIRECTORY_METRIC_NUM_VALID, (key, placeType, collector) -> AbstractMetricsListener.onEvent(key,\n            event ->\n            {\n                Map<MetricsKey, Map<String, Integer>> summaryMap = event.getAttachmentValue(ATTACHMENT_DIRECTORY_MAP);\n                summaryMap.forEach((metricsKey, map) ->\n                    map.forEach(\n                        (k, v) -> collector.setNum(metricsKey, event.appName(), k, v)));\n            }\n        ));\n//...\n```\n\n----------------------------------------\n\nTITLE: Creating Swagger UI HTML Page for Dubbo REST Services\nDESCRIPTION: HTML template for integrating Swagger UI with Dubbo REST services. The page loads the Swagger UI interface and connects it to the OpenAPI specification at 'openapi.json'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>API UI</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"webjars/swagger-ui/3.20.3/swagger-ui.css\" >\n    <link rel=\"icon\" type=\"image/png\" href=\"webjars/swagger-ui/3.20.3/favicon-32x32.png\" sizes=\"32x32\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"webjars/swagger-ui/3.20.3/favicon-16x16.png\" sizes=\"16x16\" />\n    <style>\n        html\n        {\n            box-sizing: border-box;\n            overflow: -moz-scrollbars-vertical;\n            overflow-y: scroll;\n        }\n\n        *,\n        *:before,\n        *:after\n        {\n            box-sizing: inherit;\n        }\n\n        body\n        {\n            margin:0;\n            background: #fafafa;\n        }\n    </style>\n</head>\n\n<body>\n<div id=\"swagger-ui\"></div>\n\n<script src=\"webjars/swagger-ui/3.20.3/swagger-ui-bundle.js\"> </script>\n<script src=\"webjars/swagger-ui/3.20.3/swagger-ui-standalone-preset.js\"> </script>\n<script>\n    window.onload = function () {\n        window.ui = SwaggerUIBundle({\n            url: \"openapi.json\",\n            dom_id: '#swagger-ui',\n            deepLinking: true,\n            presets: [\n                SwaggerUIBundle.presets.apis,\n                SwaggerUIStandalonePreset\n            ],\n            plugins: [\n                SwaggerUIBundle.plugins.DownloadUrl\n            ],\n            layout: \"StandaloneLayout\"\n        });\n    };\n</script>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SVN Checkout for Dubbo Release\nDESCRIPTION: Commands for checking out the Dubbo release directory from Apache SVN repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsvn checkout https://dist.apache.org/repos/dist/dev/dubbo\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo-Go's Logger Component in Application Code\nDESCRIPTION: Demonstrates how to reuse Dubbo-Go's logger component in application code by importing from the gost package.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport app_logger \"github.com/dubbogo/gost/log/logger\"\n\napp_logger.Info(\"hello\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer in XML\nDESCRIPTION: XML configuration for the Consumer to reference the asynchronous service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"asyncService\" interface=\"com.alibaba.dubbo.samples.async.api.AsyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider\nDESCRIPTION: Spring configuration class for enabling Dubbo and defining provider settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.impl\")\n@PropertySource(\"classpath:/spring/dubbo-provider.properties\")\nstatic class ProviderConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Version Service Consumer\nDESCRIPTION: XML configuration for defining a new version (2.0.0) service consumer reference in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"2.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Values in Dubbo-go Server\nDESCRIPTION: Shows how to retrieve additional parameters from the context in the server, where the value type is map[string]interface{}.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/attachments.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nattachments := ctx.Value(constant.AttachmentKey).(map[string]interface{})\nlogger.Infof(\"Dubbo attachment key1 = %s\", value1.([]string)[0])\nlogger.Infof(\"Dubbo attachment key2 = %s\", value2.([]string)[0])\n```\n\n----------------------------------------\n\nTITLE: Checking Zookeeper Registry Entries\nDESCRIPTION: Shell commands to inspect Dubbo service registration information in Zookeeper, showing how to connect to Zookeeper and list registered consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it zookeeper bash\nbash-4.4# bin/zkCli.sh -server localhost:218\nConnecting to localhost:2181\n...\nWelcome to ZooKeeper!\nJLine support is enabled\n...\n[zk: localhost:2181(CONNECTED) 4] ls /dubbo/com.alibaba.dubbo.samples.api.GreetingService/consumers\n[consumer%3A%2F%2F192.168.99.1%2Fcom.alibaba.dubbo.samples.api.GreetingService%3Fapplication%3Ddemo-consumer%26category%3Dconsumers%26check%3Dfalse%26default.timeout%3D3000%26dubbo%3D2.6.2%26interface%3Dcom.alibaba.dubbo.samples.api.GreetingService%26methods%3DsayHello%26pid%3D82406%26side%3Dconsumer%26timestamp%3D1533274951195]\n```\n\n----------------------------------------\n\nTITLE: Dubbo ModuleConfig Class Definition\nDESCRIPTION: Configuration class for Dubbo modules. Manages module-level settings including export/reference behavior and monitoring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ModuleConfig\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Dependency for Dubbo Metadata Center\nDESCRIPTION: XML configuration to add the Jedis dependency for Redis implementation in Dubbo's metadata center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n\t<dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>3.10.0</version>\n    </dependency>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Dispatcher Implementation in Java\nDESCRIPTION: Example implementation of the Dispatcher interface in Java, showing the required lookup method that needs to be implemented.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/dispatcher.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.remoting.Dispatcher;\n \npublic class XxxDispatcher implements Dispatcher {\n    public Group lookup(URL url) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for Dubbo Provider Module\nDESCRIPTION: Maven POM configuration for the Dubbo service provider with dependencies on Spring Boot and Dubbo Spring Boot Starter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/pinpoint.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.example</groupId>\n\t<artifactId>demo-provider</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>demo-provider</name>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.0.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>sonatype-nexus-snapshots</id>\n\t\t\t<url>https://oss.sonatype.org/content/repositories/snapshots</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba.boot</groupId>\n\t\t\t<artifactId>dubbo-spring-boot-starter</artifactId>\n\t\t\t<version>0.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.example</groupId>\n\t\t\t<artifactId>demo-api</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with Java Config\nDESCRIPTION: This Java code shows how to configure a Dubbo service using Java Config instead of annotations, allowing for more complex configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class ProviderConfiguration {\n    @Bean\n    public ServiceBean demoService() {\n        ServiceBean service = new ServiceBean();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        service.setGroup(\"dev\");\n        service.setVersion(\"1.0.0\");\n        Map<String, String> parameters = new HashMap<>();\n        service.setParameters(parameters);\n        return service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service with Java Config\nDESCRIPTION: This Java code shows how to configure a Dubbo service using Java Config instead of annotations, allowing for more complex configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/develop/springboot.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class ProviderConfiguration {\n    @Bean\n    public ServiceBean demoService() {\n        ServiceBean service = new ServiceBean();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        service.setGroup(\"dev\");\n        service.setVersion(\"1.0.0\");\n        Map<String, String> parameters = new HashMap<>();\n        service.setParameters(parameters);\n        return service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Rule Loading in ConfigUtils\nDESCRIPTION: Handles loading of migration rules from file system or classpath resources. Implements file reading and error handling for migration configuration files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic static String loadMigrationRule(Set<ClassLoader> classLoaders, String fileName) {\n        String rawRule = \"\";\n        if (checkFileNameExist(fileName)) {\n            try {\n                try (FileInputStream input = new FileInputStream(fileName)) {\n                    return readString(input);\n                }\n            } catch (Throwable e) {\n                logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\n            }\n        }\n        try {\n            List<ClassLoader> classLoadersToLoad = new LinkedList<>();\n            classLoadersToLoad.add(ClassUtils.getClassLoader());\n            classLoadersToLoad.addAll(classLoaders);\n            for (Set<URL> urls : ClassLoaderResourceLoader.loadResources(fileName, classLoadersToLoad).values()) {\n                for (URL url : urls) {\n                    InputStream is = url.openStream();\n                    if (is != null) {\n                        return readString(is);\n                    }\n                }\n            }\n        } catch (Throwable e) {\n            logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\n        }\n        return rawRule;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Response Logging Filter\nDESCRIPTION: A JAX-RS ClientResponseFilter implementation that logs HTTP response details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_34\n\nLANGUAGE: java\nCODE:\n```\npublic class LoggingFilter implements ClientResponseFilter {\n \n    public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException {\n        System.out.println(\"status: \" + resCtx.getStatus());\n\t    System.out.println(\"date: \" + resCtx.getDate());\n\t    System.out.println(\"last-modified: \" + resCtx.getLastModified());\n\t    System.out.println(\"location: \" + resCtx.getLocation());\n\t    System.out.println(\"headers:\");\n\t    for (Entry<String, List<String>> header : resCtx.getHeaders().entrySet()) {\n     \t    System.out.print(\"\\t\" + header.getKey() + \" :\");\n\t        for (String value : header.getValue()) {\n\t            System.out.print(value + \", \");\n\t        }\n\t        System.out.print(\"\\n\");\n\t    }\n\t    System.out.println(\"media-type: \" + resCtx.getMediaType().getType());\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: 由 Dubbo Protoc 插件生成的接口定义\nDESCRIPTION: 通过 Dubbo 提供的 protoc 编译插件将 Protobuf IDL 预编译为 Java 接口定义。这是自动生成的代码示例，包含服务名称和方法定义。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Generated by dubbo protoc plugin\npublic interface Greeter extends org.apache.dubbo.rpc.model.DubboStub {\n    String JAVA_SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n    String SERVICE_NAME = \"org.apache.dubbo.springboot.demo.idl.Greeter\";\n\n    org.apache.dubbo.springboot.demo.idl.GreeterReply greet(org.apache.dubbo.springboot.demo.idl.GreeterRequest request);\n    // more generated codes here...\n}\n```\n\n----------------------------------------\n\nTITLE: Triple Request Serialization Error Pattern\nDESCRIPTION: Log pattern showing serialization failure in Triple request\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/10.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSerialize triple request failed, service=%s method=%s\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Server in Rust\nDESCRIPTION: Server implementation of the Greeter service with configuration loading and request handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/rust/first-release.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    register_server(GreeterServerImpl {\n        name: \"greeter\".to_string(),\n    });\n\n    // Dubbo::new().start().await;\n    Dubbo::new()\n        .with_config({\n            let r = RootConfig::new();\n            match r.load() {\n                Ok(config) => config,\n                Err(_err) => panic!(\"err: {:?}\", _err), // response was dropped\n            }\n        })\n        .start()\n        .await;\n}\n\nstruct GreeterServerImpl {\n    name: String,\n}\n\nimpl Greeter for GreeterServerImpl {\n    async fn greet(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        println!(\"GreeterServer::greet {:?}\", request.metadata);\n\n        Ok(Response::new(GreeterReply {\n            message: \"hello, dubbo-rust\".to_string(),\n        }))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Processing\nDESCRIPTION: ResponsePlugin handles the response result information from the gateway uniformly. The specific processing is determined by different implementations of MessageWriter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.response.ResponsePlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry Using Protocol and Address in Dubbo XML\nDESCRIPTION: Alternative configuration for Redis registry center in Dubbo using separate protocol and address attributes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Downloading Dubboctl Installation Script\nDESCRIPTION: Downloads the Dubbo Admin release using a curl command that executes an installer script with a specific version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -\n# Admin 要组织好发行版本\n```\n\n----------------------------------------\n\nTITLE: Configuring Hessian2 Serialization in Dubbo using XML\nDESCRIPTION: This snippet illustrates how to configure Hessian2 as the serialization method in Dubbo using XML. It shows configuration at protocol, consumer, and specific reference levels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/hessian.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"hessian2\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"hessian2\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"hessian2\" />\n```\n\n----------------------------------------\n\nTITLE: Release Announcement Email Template\nDESCRIPTION: Template for sending release announcement emails to the Dubbo community mailing list. Includes placeholders for version numbers and relevant links to source, binary releases and release notes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nHello Community,\n\nThe Apache Dubbo team is pleased to announce that the\n2.6.6 has just been released.\n\nApache Dubbo™  is a high-performance, java-based, open-source\nRPC framework. Dubbo offers three key functionalities, which include\ninterface-based remote call, fault tolerance & load balancing, and\nautomatic service registration & discovery.\n\nBoth the source release[1] and the maven binary release[2] are available\nnow, you can also find the detailed release notes here[3].\n\n\nIf you have any usage questions, or have problems when upgrading or find\nany problems about enhancements included in this release, please don't\nhesitate to let us know by sending feedback to this mailing list or filing\nan issue on GitHub[4].\n\n\n[1] https://dubbo.apache.org/en/blog/2020/05/18/past-releases/\n[2] https://repo1.maven.org/maven2/org/apache/dubbo/dubbo\n[3] https://github.com/apache/dubbo/releases\n[4] https://github.com/apache/dubbo/issues\n```\n\n----------------------------------------\n\nTITLE: Viewing and Managing GPG Keys\nDESCRIPTION: Commands for listing GPG keys, identifying the key ID, sending the public key to a keyserver, and optionally deleting keys. These steps are necessary for properly managing keys used for Apache releases.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ gpg --list-keys\npub   rsa4096/28681CB1 2018-04-26 # 28681CB1 is the key id\nuid       [ultimate] liujun (apache-dubbo) <liujun@apache.org>\nsub   rsa4096/D3D6984B 2018-04-26\n\n# Send public key to keyserver via key id\n$ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1\n# Here, pgpkeys.mit.edu is a randomly chosen keyserver. The list of keyservers is available at: https://sks-keyservers.net/status/, which are automatically synchronized with each other, so any one can be chosen.\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Metadata Center in YAML\nDESCRIPTION: YAML configuration to enable Zookeeper as the metadata center for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Nacos Docker\nDESCRIPTION: Commands to clone the nacos-docker repository and start Nacos using Docker Compose.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nacos-group/nacos-docker.git\ncd nacos-docker\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f example/standalone-derby.yaml up\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Nacos Docker\nDESCRIPTION: Commands to clone the nacos-docker repository and start Nacos using Docker Compose.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nacos-group/nacos-docker.git\ncd nacos-docker\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f example/standalone-derby.yaml up\n```\n\n----------------------------------------\n\nTITLE: Complete Dubbo Consumer XML Configuration Example\nDESCRIPTION: A complete XML configuration example for a Dubbo consumer that references a user service. It includes application, registry, protocol settings and service reference with check=false option.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-consumer-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:application name=\"hello-world-app\" />  \n    <dubbo:registry address=\"multicast://224.5.6.7:1234\" />  \n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />  \n    <dubbo:reference id=\"userReadService\" interface=\"com.package.UserReadService\"check=\"false\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing MetricsFilter for Provider in Java\nDESCRIPTION: Implements a MetricsFilter to collect metrics for Dubbo providers, including request counts and response times.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = PROVIDER, order = -1)\npublic class MetricsFilter implements Filter, ScopeModelAware {\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        collector.increaseTotalRequests(interfaceName, methodName, group, version);\n        collector.increaseProcessingRequests(interfaceName, methodName, group, version);\n        Long startTime = System.currentTimeMillis();\n        try {\n            Result invoke = invoker.invoke(invocation);\n            collector.increaseSucceedRequests(interfaceName, methodName, group, version);\n            return invoke;\n        } catch (RpcException e) {\n            collector.increaseFailedRequests(interfaceName, methodName, group, version);\n            throw e;\n        } finally {\n            Long endTime = System.currentTimeMillis();\n            Long rt = endTime - startTime;\n            collector.addRT(interfaceName, methodName, group, version, rt);\n            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-side Concurrent Executions at Method Level with Annotations\nDESCRIPTION: Annotation-based configuration to limit the concurrent execution count of a specific method to a maximum of 10 threads on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(executes=10, methods = {@Method(name=\"sayHello\",executes=10)})\nprivate DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: Post-processing After ScopeModel Change in AbstractConfig\nDESCRIPTION: This is an empty method in AbstractConfig that serves as a template for subclasses to override and implement their own post-processing logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nprotected void postProcessAfterScopeModelChanged(ScopeModel oldScopeModel, ScopeModel newScopeModel) {\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Tag for Service Consumer in Java\nDESCRIPTION: This one-line code shows how to set a routing tag for a service consumer using RpcContext. This tag will be used to match with the appropriate service provider during routing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/routing-rule-deprecated.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY,\"red\");\n```\n\n----------------------------------------\n\nTITLE: Creating Istio DestinationRule for Traffic Routing\nDESCRIPTION: Istio DestinationRule configuration that defines subsets for v1 and v2 versions of the Dubbo-go server based on the version labels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: dubbo-go-server\nspec:\n  host: dubbo-go-server\n  subsets:\n    - name: v1\n      labels:\n        dubbogoAppVersion: v1 # Corresponding to version label specified in chart/app/values.yaml in application template\n    - name: v2\n      labels:\n        dubbogoAppVersion: v2\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Filter Invoke Method in Go\nDESCRIPTION: Go code snippet showing the implementation of the Invoke method for the GenericFilter, which handles generic invocations in Dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/pixiu/dubbo-go-pixiu-animal.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (ef *GenericFilter) Invoke(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation) protocol.Result {\n  if invocation.MethodName() == constant.GENERIC && len(invocation.Arguments()) == 3 {\n    oldArguments := invocation.Arguments()\n    if oldParams, ok := oldArguments[2].([]interface{}); ok {\n      newParams := make([]hessian.Object, 0, len(oldParams))\n      for i := range oldParams {\n        newParams = append(newParams, hessian.Object(struct2MapAll(oldParams[i])))\n      }\n      newArguments := []interface{}{\n        oldArguments[0],\n        oldArguments[1],\n        newParams,\n      }\n      newInvocation := invocation2.NewRPCInvocation(invocation.MethodName(), newArguments, invocation.Attachments())\n      newInvocation.SetReply(invocation.Reply())\n      return invoker.Invoke(ctx, newInvocation)\n    }\n  }\n  return invoker.Invoke(ctx, invocation)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JAX-RS REST Service Provider\nDESCRIPTION: Implementation class for the JAX-RS REST service interface using @DubboService annotation with protocol, version, and group specifications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(interfaceClass =JaxRsRestDemoService.class ,protocol = \"rest\",version = \"1.0.0\",group = \"test\")\npublic class JaxRsRestDemoServiceImpl implements JaxRsRestDemoService {\n    // ... method implementations\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Repository for Dubbo\nDESCRIPTION: Adds the Dubbo Helm repository and updates the repository cache for Helm installations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add dubbo https://dubbo.apache.org/charts\n$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: Initializing DubboBootstrap with Protocol Configuration in Java\nDESCRIPTION: This snippet demonstrates how to initialize DubboBootstrap with various configurations, including protocol configuration using ProtocolConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/11-Dubbo启动器DubboBootstrap添加协议配置信息ProtocolConfig.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDubboBootstrap bootstrap = DubboBootstrap.getInstance();\nbootstrap.application(new ApplicationConfig(\"dubbo-demo-api-provider\"))\n         .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n         .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n         .service(service)\n         .start()\n         .await();\n```\n\n----------------------------------------\n\nTITLE: Implementing Protobuf Server Serialization in Dubbo Python\nDESCRIPTION: Example of server-side implementation using protobuf for serialization and deserialization in a Dubbo Python RPC server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass GreeterServiceServicer:\n    def say_hello(self, request):\n        print(f\"Received request: {request}\")\n        return greeter_pb2.GreeterReply(message=f\"Hello, {request.name}\")\n\ndef build_service_handler():\n    # build a method handler\n    method_handler = RpcMethodHandler.unary(\n        GreeterServiceServicer().say_hello,\n        method_name=\"sayHello\",\n        request_deserializer=greeter_pb2.GreeterRequest.FromString,\n        response_serializer=greeter_pb2.GreeterReply.SerializeToString,\n    )\n    # build a service handler\n    service_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.data.Greeter\",\n        method_handlers=[method_handler],\n    )\n    return service_handler\n\nif __name__ == \"__main__\":\n    # build a service handler\n    service_handler = build_service_handler()\n    service_config = ServiceConfig(\n        service_handler=service_handler, host=\"127.0.0.1\", port=50051\n    )\n\n    # start the server\n    server = dubbo.Server(service_config).start()\n\n    input(\"Press Enter to stop the server...\\n\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Host in Java\nDESCRIPTION: Illustrates the Java code used internally by Dubbo to retrieve the default host address when not explicitly configured. This uses the InetAddress class to get the local host address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/set-host.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nInetAddress.getLocalHost().getHostAddress()\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Client to Call Both Dubbo-go and gRPC Servers\nDESCRIPTION: Implementation of a Dubbo-go client that calls both the Dubbo-go server and the gRPC server using the same service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"dubbo.apache.org/dubbo-go/v3/client\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n\tgreet \"github.com/apache/dubbo-go-samples/rpc/grpc/proto\"\n\t\"github.com/dubbogo/gost/log/logger\"\n)\n\nfunc main() {\n\t// test connect with dubbo\n\tdubboCli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(dubboCli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n\n\t// test connect with grpc\n\tgrpcCli, err := client.NewClient(\n\t\tclient.WithClientURL(\"127.0.0.1:20001\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsvc, err = greet.NewGreetService(grpcCli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: \"hello world\"})\n\tif err != nil {\n\t\tlogger.Error(err)\n\t}\n\tlogger.Infof(\"Greet response: %s\", resp.Greeting)\n}\n```\n\n----------------------------------------\n\nTITLE: Input Validation Interface Example\nDESCRIPTION: Service interface with JSR 303 bean validation annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\npublic interface UserService {\n   \n    User getUser(@Min(value=1L, message=\"User ID must be greater than 1\") Long id);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating SHA512 Signature for Binary Release\nDESCRIPTION: Command to generate SHA512 checksum for the binary release zip file, using the -b flag to indicate it's a binary file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -b -a 512 apache-dubbo-${release_version}-bin-release.zip >> apache-dubbo-${release_version}-bin-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Samples with Maven\nDESCRIPTION: Maven commands to clone and build the Dubbo samples project, showing the build process and success output.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/apache/dubbo-samples.git\n$ cd dubbo-samples/java/dubbo-samples-api/\n$ mvn clean package\nINFO] Scanning for projects...\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] Building dubbo-samples-api 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ dubbo-samples-api ---\n...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 2.182 s\n[INFO] Finished at: 2018-05-28T14:56:08+08:00\n[INFO] Final Memory: 20M/353M\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service with Protocol Buffer IDL\nDESCRIPTION: Protocol Buffer definition file that declares the ExampleService with a Say method, including request and response message types with a sentence field.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage apache.dubbo.demo.example.v1;\n\nmessage SayRequest {\n  string sentence = 1;\n}\n\nmessage SayResponse {\n  string sentence = 1;\n}\n\nservice ExampleService {\n  rpc Say(SayRequest) returns (SayResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProtocolFilterWrapper as a Decorator for Protocol\nDESCRIPTION: This implementation of the Protocol interface serves as a wrapper (decorator) for other Protocol implementations. It has a copy constructor that accepts a Protocol instance, allowing it to add filtering functionality while delegating to the wrapped Protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ProtocolFilterWrapper implements Protocol {\n\n    private final Protocol protocol;\n\n    // One parameter is the copy constructor of Protocol\n    public ProtocolFilterWrapper(Protocol protocol) {\n        if (protocol == null) {\n            throw new IllegalArgumentException(\"protocol == null\");\n        }\n        this.protocol = protocol;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo RPC Exception Example\nDESCRIPTION: Example of the RpcException thrown when no provider is available from the registry for a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nException in thread \"main\" org.apache.dubbo.rpc.RpcException: No provider available from registry 127.0.0.1:2181 for service org.apache.dubbo.samples.api.GreetingsService on consumer 30.221.146.226 use dubbo version 3.2.0-beta.4, please check status of providers(disabled, not registered or in blacklist).\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper in Docker with Custom Configuration\nDESCRIPTION: Docker command that mounts a local zoo.cfg configuration file to the container. This allows for customized Zookeeper configuration in a Docker environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --name some-zookeeper --restart always -e JVMFLAGS=\"-Dzookeeper.admin.enableServer=false\" -d -v $(pwd)/zoo.cfg:/conf/zoo.cfg\n```\n\n----------------------------------------\n\nTITLE: 使用Protoc生成TypeScript代码\nDESCRIPTION: 使用Protocol Buffer编译器(protoc)从IDL定义生成TypeScript代码。命令生成服务接口和消息类型的实现文件。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nPATH=$PATH:$(pwd)/node_modules/.bin \\\n  protoc -I proto \\\n  --es_out gen \\\n  --es_opt target=ts \\\n  --apache-dubbo-es_out gen \\\n  --apache-dubbo-es_opt target=ts \\\n  example.proto\n```\n\n----------------------------------------\n\nTITLE: Identifying URL Parameter Issue in Dubbo CacheableFailbackRegistry\nDESCRIPTION: The error occurs when CacheableFailbackRegistry.toUrlsWithoutEmpty is called with a provider that has no parameters in the Collection<String> providers argument. This results in receiving a URL with no parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/5.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nCacheableFailbackRegistry.toUrlsWithoutEmpty(Collection<String> providers)\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Dubbo Readiness Probe Extension\nDESCRIPTION: Illustrates the recommended Maven project structure for implementing a custom readiness probe in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxReadinessProbe.java (implements ReadinessProbe interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.ReadinessProbe (plain text file, content: xxx=com.xxx.XxxReadinessProbe)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Externalized Configuration in YAML\nDESCRIPTION: YAML configuration for enabling global externalized configuration with Nacos, specifying the server address and optional configuration file name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: nacos://127.0.0.1:2181\n    config-file: dubbo.properties # optional\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Invoker for Dubbo Service Reference (Java)\nDESCRIPTION: This method creates a remote invoker for the Dubbo service reference. It handles different scenarios such as single URL, multiple URLs, and registry URLs, and sets up the appropriate cluster and directory for the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/21-Dubbo3消费者引用服务入口.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void createInvokerForRemote() {\n     //这个url 为注册协议如registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-api-consumer&dubbo=2.0.2&pid=6204&qos.enable=false&qos.port=-1&registry=zookeeper&release=3.0.9&timestamp=1657439419495\n        if (urls.size() == 1) {\n            URL curUrl = urls.get(0);\n            //这个SPI对象是由字节码动态生成的自适应对象Protocol$Adaptie直接看看不到源码，后续可以解析一个字节码生成的类型，这里后续来调用链路即可\n            invoker = protocolSPI.refer(interfaceClass, curUrl);\n            if (!UrlUtils.isRegistry(curUrl)) {\n                List<Invoker<?>> invokers = new ArrayList<>();\n                invokers.add(invoker);\n                invoker = Cluster.getCluster(scopeModel, Cluster.DEFAULT).join(new StaticDirectory(curUrl, invokers), true);\n            }\n        } else {\n            List<Invoker<?>> invokers = new ArrayList<>();\n            URL registryUrl = null;\n            for (URL url : urls) {\n                // For multi-registry scenarios, it is not checked whether each referInvoker is available.\n                // Because this invoker may become available later.\n                invokers.add(protocolSPI.refer(interfaceClass, url));\n\n                if (UrlUtils.isRegistry(url)) {\n                    // use last registry url\n                    registryUrl = url;\n                }\n            }\n\n            if (registryUrl != null) {\n                // registry url is available\n                // for multi-subscription scenario, use 'zone-aware' policy by default\n                String cluster = registryUrl.getParameter(CLUSTER_KEY, ZoneAwareCluster.NAME);\n                // The invoker wrap sequence would be: ZoneAwareClusterInvoker(StaticDirectory) -> FailoverClusterInvoker\n                // (RegistryDirectory, routing happens here) -> Invoker\n                invoker = Cluster.getCluster(registryUrl.getScopeModel(), cluster, false).join(new StaticDirectory(registryUrl, invokers), false);\n            } else {\n                // not a registry url, must be direct invoke.\n                if (CollectionUtils.isEmpty(invokers)) {\n                    throw new IllegalArgumentException(\"invokers == null\");\n                }\n                URL curUrl = invokers.get(0).getUrl();\n                String cluster = curUrl.getParameter(CLUSTER_KEY, Cluster.DEFAULT);\n                invoker = Cluster.getCluster(scopeModel, cluster).join(new StaticDirectory(curUrl, invokers), true);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Seata Server on Unix-Based Systems\nDESCRIPTION: Shell command to start the Seata Server on Mac OS or Linux. This launches the transaction coordinator needed for distributed transactions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./seata-server.sh\n```\n\n----------------------------------------\n\nTITLE: Core Model APIs for Dubbo\nDESCRIPTION: Core model classes representing URL and RPC exceptions\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/api.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.common.URL\norg.apache.dubbo.rpc.RpcException\n```\n\n----------------------------------------\n\nTITLE: ASC Signature Generation\nDESCRIPTION: Command for generating ASC signature for source release package.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngpg --armor --output apache-dubbo-${release_version}-src.zip.asc --detach-sig apache-dubbo-${release_version}-src.zip\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Service\nDESCRIPTION: XML configuration for enabling validation in Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=xxx.UserService\" ref=\"userService\" protocol=\"rest\" validation=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path for REST Services in Dubbo XML\nDESCRIPTION: Demonstrates how to set a base context path for all REST services in Dubbo, similar to a web application context path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\"/>\n```\n\n----------------------------------------\n\nTITLE: 配置应用级服务发现\nDESCRIPTION: 在 YAML 中配置使用应用级服务发现模式。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    address: \"nacos://127.0.0.1:8848\"\n    register-mode: instance # 新用户请设置此值，表示启用应用级服务发现，可选值 interface、instance、all\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client in Rust\nDESCRIPTION: Client implementation for making RPC calls to the Greeter service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/rust/first-release.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    let mut cli = GreeterClient::new().with_uri(\"http://127.0.0.1:8888\".to_string());\n\n    println!(\"# unary call\");\n    let resp = cli\n        .greet(Request::new(GreeterRequest {\n            name: \"message from client\".to_string(),\n        }))\n        .await;\n    let resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, body) = resp.into_parts();\n    println!(\"Response: {:?}\", body);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Compiler Extension in Properties File\nDESCRIPTION: This snippet shows the content of the META-INF/dubbo/org.apache.dubbo.common.compiler.Compiler file, which is used to register the custom Compiler implementation with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/compiler.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxCompiler\n```\n\n----------------------------------------\n\nTITLE: Defining JVM Buffer Memory Usage Metric in Prometheus\nDESCRIPTION: This snippet defines a Prometheus gauge metric for JVM buffer memory usage. It estimates the memory used by the Java virtual machine for different buffer pools.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_7\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool\n# TYPE jvm_buffer_memory_used_bytes gauge\njvm_buffer_memory_used_bytes{id=\"direct\",} 1.679975E7\njvm_buffer_memory_used_bytes{id=\"mapped\",} 0.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Metadata in Zookeeper using zkCli\nDESCRIPTION: Shell command example showing how to view service provider metadata stored in Zookeeper using the zkCli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_4\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 8] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/provider/demo-provider\n{\"parameters\":{\"side\":\"provider\",\"interface\":\"org.apache.dubbo.demo.DemoService\",\"metadata-type\":\"remote\",\"application\":\"demo-provider\",\"dubbo\":\"2.0.2\",\"release\":\"\",\"anyhost\":\"true\",\"delay\":\"5000\",\"methods\":\"sayHello,sayHelloAsync\",\"deprecated\":\"false\",\"dynamic\":\"true\",\"timeout\":\"3000\",\"generic\":\"false\"},\"canonicalName\":\"org.apache.dubbo.demo.DemoService\",\"codeSource\":\"file:/Users/apple/IdeaProjects/dubbo/dubbo-demo/dubbo-demo-interface/target/classes/\",\"methods\":[{\"name\":\"sayHelloAsync\",\"parameterTypes\":[\"java.lang.String\"],\"returnType\":\"java.util.concurrent.CompletableFuture\"},{\"name\":\"sayHello\",\"parameterTypes\":[\"java.lang.String\"],\"returnType\":\"java.lang.String\"}],\"types\":[{\"type\":\"java.util.concurrent.CompletableFuture\",\"properties\":{\"result\":\"java.lang.Object\",\"stack\":\"java.util.concurrent.CompletableFuture.Completion\"}},{\"type\":\"java.lang.Object\"},{\"type\":\"java.lang.String\"},{\"type\":\"java.util.concurrent.CompletableFuture.Completion\",\"properties\":{\"next\":\"java.util.concurrent.CompletableFuture.Completion\",\"status\":\"int\"}},{\"type\":\"int\"}]}\ncZxid = 0x25a9b1\nctime = Mon Jun 28 21:35:17 CST 2021\nmZxid = 0x25a9b1\nmtime = Mon Jun 28 21:35:17 CST 2021\npZxid = 0x25a9b1\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 1061\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Cluster Configuration\nDESCRIPTION: Definition of a service cluster including load balancing policy and endpoint information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  clusters:\n    - name: \"user\"\n      lb_policy: \"RoundRobin\"\n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n```\n\n----------------------------------------\n\nTITLE: Installing Monitoring Components\nDESCRIPTION: Installs Grafana and Prometheus components using Helm\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin-grafana dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-prometheus dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Adding Native Dependencies in Maven\nDESCRIPTION: Maven dependencies required for native image support including dubbo-config-spring6 and dubbo-native.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-config-spring6</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-native</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check for Specific Service Calls\nDESCRIPTION: Go code example showing how to create a health service instance and perform health checks with check option disabled for specific service calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/start-check.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsvc, err := health.NewHealth(cli)\nsvc.Check(context.Background(), &health.HealthCheckRequest{Service: \"greet.GreetService\"}, client.WithCheck(false))\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Protocol SPI Configuration\nDESCRIPTION: Properties file showing the configuration for common protocols supported by Dubbo, including dubbo and tri protocols with their implementation classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Common protocols supported by Dubbo\ndubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol\ntri=org.apache.dubbo.rpc.protocol.tri.TripleProtocol\n```\n\n----------------------------------------\n\nTITLE: Querying Interface-Level Service Discovery in Zookeeper\nDESCRIPTION: This snippet demonstrates how to query service information through the Zookeeper command line using the interface-level service discovery path `/dubbo/${interfaceName}/providers`. The result displays the full service URL with all parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 1] ls /dubbo/org.apache.dubbo.samples.api.GreetingsService/providers\n[dubbo%3A%2F%2F30.221.144.195%3A20880%2Forg.apache.dubbo.samples.api.GreetingsService%3Fanyhost%3Dtrue%26application%3Dfirst-dubbo-provider%26background%3Dfalse%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26environment%3Dproduct%26executor-management-mode%3Ddefault%26file-cache%3Dtrue%26generic%3Dfalse%26interface%3Dorg.apache.dubbo.samples.api.GreetingsService%26methods%3DsayHi%26pid%3D37828%26prefer.serialization%3Dfastjson2%2Chessian2%26release%3D3.2.0-beta.6-SNAPSHOT%26service-name-mapping%3Dtrue%26side%3Dprovider%26timestamp%3D1677463548624]\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check for Specific Service Calls\nDESCRIPTION: Go code example showing how to create a health service instance and perform health checks with check option disabled for specific service calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/start-check.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsvc, err := health.NewHealth(cli)\nsvc.Check(context.Background(), &health.HealthCheckRequest{Service: \"greet.GreetService\"}, client.WithCheck(false))\n```\n\n----------------------------------------\n\nTITLE: Installing Error Message in Kubernetes Pod Deployment\nDESCRIPTION: JSON error output showing a failed pod synchronization issue when deploying a Dubbo application in Kubernetes. This shows the error structure that occurs during deployment attempts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-k8s.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Pod\",\n  \"namespace\": \"lzumwsrddf831iwarhehd14zh2-default\",\n  \"name\": \"dubbo-k8s-demo-610694273-jq238\",\n  \"uid\": \"12892e67-8bc8-11e8-b96a-00163e02c37b\",\n  \"apiVersion\": \"v1\",\n  \"resourceVersion\": \"850282769\"\n}, \"reason\": \"FailedSync\", \"message\": \"Error syncing pod\", \"\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Git Repository for Pull Requests in Shell\nDESCRIPTION: Demonstrates how to synchronize your forked repository with the upstream repository before submitting a pull request to Apache Dubbo. This ensures your PR will be clean and based on the latest code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:apache/dubbo.git\ngit fetch upstream\ngit rebase upstream/master\ngit checkout -b your_awesome_patch\n... add some work\ngit push origin your_awesome_patch\n```\n\n----------------------------------------\n\nTITLE: Register-Only Mode Configuration in YAML\nDESCRIPTION: Configuration to disable service subscription while maintaining registration capability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    subscribe: false\n```\n\n----------------------------------------\n\nTITLE: ExtensionDirector's createExtensionLoader Method\nDESCRIPTION: Creates an ExtensionLoader for a given type if the scope matches the current ExtensionDirector's scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate <T> ExtensionLoader<T> createExtensionLoader(Class<T> type) {\n        ExtensionLoader<T> loader = null;\n        if (isScopeMatched(type)) {\n            loader = createExtensionLoader0(type);\n        } else {\n            // if scope is not matched, ignore it\n        }\n        return loader;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Authentication for Service Provider\nDESCRIPTION: Sets up authentication requirements for a Dubbo service provider. The configuration enables service authentication with 'service.auth=true' and parameter signature verification with 'param.sign=true'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/auth.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Service(parameters = {\"service.auth\",\"true\",\"param.sign\",\"true\"})\npublic class AuthDemoServiceImpl implements AuthService {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Undo Log Table for Seata AT Mode\nDESCRIPTION: SQL script to create the undo_log table required for Seata's AT transaction mode. This table stores transaction context information for rollback operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- for AT mode you must to init this sql for you business database. the seata server not need it.\nCREATE TABLE IF NOT EXISTS `undo_log`\n(\n    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',\n    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',\n    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',\n    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',\n    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',\n    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)\n    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';\nALTER TABLE `undo_log` ADD INDEX `ix_log_created` (`log_created`);\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Metrics API Dependency for Micrometer Integration\nDESCRIPTION: Add the Dubbo Metrics API dependency to your project's classpath to enable Micrometer and related metrics functionality. This dependency is required for collecting observability data from Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/skywalking.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-metrics-api</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: This Protocol Buffer definition creates a simple greeting service with request and response messages, which will be implemented by both Dubbo-Go and gRPC servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/rpc/grpc/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo Admin Guide Page\nDESCRIPTION: YAML front matter block that defines metadata for a documentation page about Dubbo's admin console, including page aliases, title, type and weight for navigation ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - /en/overview/reference/admin/\n  - /en/overview/reference/admin/\ndescription: \"\"\nlinkTitle: Control Panel\ntitle: Admin Console User Guide\ntype: docs\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer Bootstrap with Annotations in Java\nDESCRIPTION: This Java class demonstrates the implementation of a Dubbo service consumer using annotations. It uses @EnableDubbo for activation, @Reference for service injection, and shows how to perform remote method invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.consumer;\n\nimport org.apache.dubbo.config.annotation.Reference;\nimport org.apache.dubbo.config.spring.context.annotation.EnableDubbo;\nimport org.apache.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.PropertySource;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\n\n/**\n * {@link DemoService} consumer demo\n */\n@EnableDubbo\n@PropertySource(value = \"classpath:/consumer-config.properties\")\npublic class DemoServiceConsumerBootstrap {\n\n    @Reference(version = \"${demo.service.version}\")\n    private DemoService demoService;\n\n    @PostConstruct\n    public void init() {\n        for (int i = 0; i < 10; i++) {\n            System.out.println(demoService.sayName(\"mercyblitz\"));\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(DemoServiceConsumerBootstrap.class);\n        context.refresh();\n        context.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Parameters to Access Request/Response in RpcContext\nDESCRIPTION: Shows a simplified approach to access HttpServletRequest and HttpServletResponse from RpcContext using generic type parameters. This avoids explicit type checking and casting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest(HttpServletRequest.class) != null) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRequest(HttpServletRequest.class).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse(HttpServletResponse.class) != null) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse(HttpServletResponse.class));\n}\n```\n\n----------------------------------------\n\nTITLE: 使用DubboReference注入服务实例\nDESCRIPTION: 使用@DubboReference注解注入Dubbo服务实例。这是在执行回声测试前，客户端需要获取的服务引用。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/echo-service.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Image Agent\nDESCRIPTION: JVM argument to enable the native-image agent for generating configuration files needed for native image compilation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/_index.md#2025-04-08_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n-agentlib:native-image-agent=config-output-dir=/tmp/config/,config-write-period-secs=300,config-write-initial-delay-secs=5\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo-Go Server with Triple Protocol\nDESCRIPTION: This code implements a Dubbo-Go server using the Triple protocol to be compatible with gRPC. It creates a greeting service that prepends 'dubbo:' to the request name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: \"dubbo:\" + req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Flow Control Rules in Go\nDESCRIPTION: This code demonstrates how to set up flow control rules in Sentinel using hard-coded configuration. It creates a QPS flow control rule for a specific dubbo consumer method that rejects requests when the QPS exceeds 10.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n_, err := flow.LoadRules([]*flow.FlowRule{\n\t{\n\t\tID:                666,\n\t\tResource:         \"dubbo:consumer:com.ikurento.user.UserProvider:myGroup:1.0.0:hello()\",\n\t\tMetricType:        flow.QPS,\n\t\tCount:             10,\n\t\tControlBehavior:   flow.Reject,\n\t},\n})\nif err != nil {\n\t// 加载规则失败，进行相关处理\n}\n```\n\n----------------------------------------\n\nTITLE: Context Passing in Async Services\nDESCRIPTION: Example of context handling in asynchronous service implementation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    // Save the context of the current thread\n    RpcContext context = RpcContext.getContext();\n    public CompletableFuture<String> sayHello(String name) {\n        return CompletableFuture.supplyAsync(() -> {\n            // Set context into new thread\n            RpcContext.setContext(context);\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hessian2 Serialization in Dubbo using Properties\nDESCRIPTION: This snippet demonstrates how to set Hessian2 as the serialization method in Dubbo using properties file. It shows different levels of configuration: protocol, consumer, and specific service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/hessian.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.protocol.serialization=hessian2\n\n# or\ndubbo.consumer.serialization=hessian2\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=hessian2\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Dependencies - Brave\nDESCRIPTION: Maven dependency configuration for Brave-based tracing with Zipkin exporter\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/zipkin.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-tracing-brave-zipkin-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Router Snapshots in Dubbo QoS\nDESCRIPTION: This command retrieves the most recent router snapshots. It shows detailed routing information for each service, including input and output of different router stages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>getRecentRouterSnapshot\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n···\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Starting Nacos Server in Standalone Mode\nDESCRIPTION: Commands to start the Nacos server in standalone mode for different operating systems.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Linux/Unix/Mac\nsh startup.sh -m standalone\n\n# Ubuntu\nbash startup.sh -m standalone\n\n# Windows\nstartup.cmd -m standalone\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serialization in Java\nDESCRIPTION: Example implementation of a custom serialization extension for Dubbo by implementing the Serialization interface, which handles serializing and deserializing objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/serialize.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.serialize.Serialization;\nimport org.apache.dubbo.common.serialize.ObjectInput;\nimport org.apache.dubbo.common.serialize.ObjectOutput;\n \n \npublic class XxxSerialization implements Serialization {\n    public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException {\n        return new XxxObjectOutput(output);\n    }\n    public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException {\n        return new XxxObjectInput(input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Consumer with Broadcast2 Cluster Mode in Java\nDESCRIPTION: A Java example showing a Spring REST controller that references a Dubbo service with the broadcast2 cluster mode. This configuration allows the consumer to collect responses from all service providers, which are stored in RpcContext for further processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/broadcast-resp-collect.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class TestServiceConsumer {\n\n    @Reference(interfaceClass = DubboHealthService.class,cluster = \"broadcast2\")\n    private DubboHealthService dubboHealthService;\n    \n     @GetMapping(\"/health\")\n         public String broadCast(){\n             try{\n                 dubboHealthService.health();\n             }catch (Exception e){\n                 Map<String, String> m = RpcContext.getServerContext().getAttachments();\n                 return m.toString()+\"|\"+\"fail\";\n             }\n             Map<String, String> m = RpcContext.getServerContext().getAttachments();\n             return m.toString()+\"|\"+\"success\";\n         }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the StartupProbe Interface in Java\nDESCRIPTION: Example of a custom implementation of the StartupProbe interface. The check() method should contain the logic to determine if the application has successfully started up.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/startup.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \npublic class XxxStartupProbe implements StartupProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Registry Configuration - Protocol Style\nDESCRIPTION: Alternative configuration style specifying Redis protocol and address separately.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Control Plane with Registry\nDESCRIPTION: Command to run the Dubbo control plane with a specified registry address. This is part of the traditional VM setup for cross-cluster communication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/openatom-opensopurce-competition-2024.md#2025-04-08_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndubbo-cp run --registry-address=nacos://xxx\n```\n\n----------------------------------------\n\nTITLE: Redis Metadata Key Structure for Dubbo\nDESCRIPTION: Shows the key structure used for storing provider and consumer metadata in Redis. The keys include service name, version, group, and application name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nProvider: {service name}:{version}:{group}:provider:{application name}\nConsumer: {service name}:{version}:{group}:consumer:{application name}\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference for Dubbo Admin\nDESCRIPTION: Link to the official GitHub repository documentation for additional configuration and usage information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/admin-console.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttps://github.com/apache/dubbo-admin\n```\n\n----------------------------------------\n\nTITLE: Graceful Offline Process\nDESCRIPTION: Commands for gracefully taking a Dubbo instance offline\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-vm.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://offline\nsleep 10\nkill dubbo-pid\n```\n\n----------------------------------------\n\nTITLE: Parameter-based Conditional Routing in Dubbo YAML\nDESCRIPTION: This YAML configuration demonstrates conditional routing based on request parameters, specifically routing requests with method 'getDetail' and first argument 'dubbo' to port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconditions:\n  - method=getDetail&arguments[0]=dubbo => port=20880\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo Application Start Failure in Bash\nDESCRIPTION: Displays an error message showing that a Dubbo Application failed to start.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[DUBBO] Dubbo Application[1.1](first-dubbo-consumer) start failure\n```\n\n----------------------------------------\n\nTITLE: Adding Nacos Spring Boot Starter\nDESCRIPTION: Configuration for adding Dubbo Nacos Spring Boot Starter dependency for service registration and discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-nacos-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Pixiu Cluster Configuration\nDESCRIPTION: Cluster configuration example showing load balancing and endpoint settings for a service group.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  clusters:\n    - name: \"user\"\n      lb_policy: \"RoundRobin\"\n      endpoints:\n        - id: 1\n          socket_address:\n            address: 127.0.0.1\n            port: 1314\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Interface in Go for Dubbo-go\nDESCRIPTION: The core Protocol interface in Dubbo-go that defines three essential methods: Export for exposing services, Refer for referencing remote services, and Destroy for shutting down all invokers and exporters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Protocol interface {\n\t// Export service for remote invocation\n\tExport(invoker Invoker) Exporter\n\t// Refer a remote service\n\tRefer(url *common.URL) Invoker\n\t// Destroy will destroy all invoker and exporter, so it only is called once.\n\tDestroy()\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Dubbo Rust Client with Streaming Support\nDESCRIPTION: Complete implementation of a Dubbo Rust client that demonstrates all four communication models: Unary calls, Client streaming, Server streaming, and Bidirectional streaming. The client uses futures and async/await for managing streaming data flows.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// ./src/greeter/client.rs\npub mod protos {\n    include!(concat!(env!(\"OUT_DIR\"), \"/org.apache.dubbo.sample.tri.rs\"));\n}\n\nuse dubbo::codegen::*;\nuse futures_util::StreamExt;\nuse protos::{greeter_client::GreeterClient, GreeterRequest};\n\n#[tokio::main]\nasync fn main() {\n    let mut cli = GreeterClient::new().with_uri(\"http://127.0.0.1:8888\".to_string());\n\n    println!(\"# unary call\");\n    let resp = cli\n        .greet(Request::new(GreeterRequest {\n            name: \"message from client\".to_string(),\n        }))\n        .await;\n    let resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, body) = resp.into_parts();\n    println!(\"Response: {:?}\", body);\n\n    println!(\"# client stream\");\n    let data = vec![\n        GreeterRequest {\n            name: \"msg1 from client streaming\".to_string(),\n        },\n        GreeterRequest {\n            name: \"msg2 from client streaming\".to_string(),\n        },\n        GreeterRequest {\n            name: \"msg3 from client streaming\".to_string(),\n        },\n    ];\n    let req = futures_util::stream::iter(data);\n    let resp = cli.greet_client_stream(req).await;\n    let client_streaming_resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, resp_body) = client_streaming_resp.into_parts();\n    println!(\"client streaming, Response: {:?}\", resp_body);\n\n    println!(\"# bi stream\");\n    let data = vec![\n        GreeterRequest {\n            name: \"msg1 from client\".to_string(),\n        },\n        GreeterRequest {\n            name: \"msg2 from client\".to_string(),\n        },\n        GreeterRequest {\n            name: \"msg3 from client\".to_string(),\n        },\n    ];\n    let req = futures_util::stream::iter(data);\n\n    let bidi_resp = cli.greet_stream(req).await.unwrap();\n\n    let (parts, mut body) = bidi_resp.into_parts();\n    println!(\"parts: {:?}\", parts);\n    while let Some(item) = body.next().await {\n        match item {\n            Ok(v) => {\n                println!(\"reply: {:?}\", v);\n            }\n            Err(err) => {\n                println!(\"err: {:?}\", err);\n            }\n        }\n    }\n    let trailer = body.trailer().await.unwrap();\n    println!(\"trailer: {:?}\", trailer);\n\n    println!(\"# server stream\");\n    let resp = cli\n        .greet_server_stream(Request::new(GreeterRequest {\n            name: \"server streaming req\".to_string(),\n        }))\n        .await\n        .unwrap();\n\n    let (parts, mut body) = resp.into_parts();\n    println!(\"parts: {:?}\", parts);\n    while let Some(item) = body.next().await {\n        match item {\n            Ok(v) => {\n                println!(\"reply: {:?}\", v);\n            }\n            Err(err) => {\n                println!(\"err: {:?}\", err);\n            }\n        }\n    }\n    let trailer = body.trailer().await.unwrap();\n    println!(\"trailer: {:?}\", trailer);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with application/xml Content-Type\nDESCRIPTION: Example of an application/xml HTTP request to a Triple protocol endpoint, containing XML-encoded data representing a User object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetXml HTTP/1.1\nHost: 192.168.202.1:50052\nContent-Type: application/xml\nContent-Length: 86\nAccept: application/xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<User>\n    <username>JohnDoe</username>\n    <location>New York</location>\n</User>\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Dependencies with NPM\nDESCRIPTION: Installs required Protocol Buffers and Dubbo packages for code generation and runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Properties in Zookeeper\nDESCRIPTION: Example of specifying registry and metadata center addresses in the Zookeeper config center for Dubbo 2.7 compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/introduction.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# /dubbo/config/dubbo/dubbo.properties\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Admin Console (Shell)\nDESCRIPTION: Command to port-forward the Dubbo Admin service and instructions for accessing the console via a web browser.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/dubbo-admin -n dubbo-system 38080:38080\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Retry with NewClient in Dubbo-Go\nDESCRIPTION: Creates a new Dubbo-Go client with a retry count of 3, which will automatically retry failed requests up to 3 times before returning an error.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/retry.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientURL(\"tri://127.0.0.1:20000\"),\n\tclient.WithClientRetries(3),\n)\n```\n\n----------------------------------------\n\nTITLE: ModuleConfigManager Initialization Method in Dubbo\nDESCRIPTION: Implementation of the initialize method for ModuleConfigManager that sets up configuration mode and other properties. It handles config mode settings, duplicate interface handling, and logs the configuration settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void initialize() throws IllegalStateException {\n        if (!initialized.compareAndSet(false, true)) {\n            return;\n        }\n        //获取组合配置对象\n        CompositeConfiguration configuration = scopeModel.getModelEnvironment().getConfiguration();\n\n        // dubbo.config.mode\n        //3.3.4.1提到过这里再重复一次 dubbo.config.mode获取配置模式，配置模式对应枚举类型ConfigMode，目前有这么几个STRICT，OVERRIDE，OVERRIDE_ALL，OVERRIDE_IF_ABSENT，IGNORE，这个配置决定了属性覆盖的顺序，当有同一个配置key多次出现时候，以最新配置为准，还是以最老的那个配置为准，还是配置重复则抛出异常，默认值为严格模式STRICT重复则抛出异常\n        String configModeStr = (String) configuration.getProperty(ConfigKeys.DUBBO_CONFIG_MODE);\n        try {\n            if (StringUtils.hasText(configModeStr)) {\n                this.configMode = ConfigMode.valueOf(configModeStr.toUpperCase());\n            }\n        } catch (Exception e) {\n            String msg = \"Illegal '\" + ConfigKeys.DUBBO_CONFIG_MODE + \"' config value [\" + configModeStr + \"], available values \" + Arrays.toString(ConfigMode.values());\n            logger.error(msg, e);\n            throw new IllegalArgumentException(msg, e);\n        }\n\n        // dubbo.config.ignore-duplicated-interface\n        //忽略重复的接口（服务/引用）配置。默认值为false\n        String ignoreDuplicatedInterfaceStr = (String) configuration\n            .getProperty(ConfigKeys.DUBBO_CONFIG_IGNORE_DUPLICATED_INTERFACE);\n        if (ignoreDuplicatedInterfaceStr != null) {\n            this.ignoreDuplicatedInterface = Boolean.parseBoolean(ignoreDuplicatedInterfaceStr);\n        }\n\n        // print 打印配置信息到控制台\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(ConfigKeys.DUBBO_CONFIG_MODE, configMode);\n        map.put(ConfigKeys.DUBBO_CONFIG_IGNORE_DUPLICATED_INTERFACE, this.ignoreDuplicatedInterface);\n        logger.info(\"Config settings: \" + map);\n    }\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Async Method Settings\nDESCRIPTION: XML configuration examples showing how to configure message sending behavior and return value handling for async methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findFoo\" async=\"true\" sent=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findFoo\" async=\"true\" return=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Checking for Port Usage with Unix Commands\nDESCRIPTION: Unix/Linux commands to check for processes that are already using the Dubbo default port (20880). These commands help identify which process is preventing Dubbo from binding to the required port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlsof -i:20880\n```\n\nLANGUAGE: bash\nCODE:\n```\nnetstat -ano | grep 20880\n```\n\n----------------------------------------\n\nTITLE: Setting up Dubboctl Path\nDESCRIPTION: Creates a symbolic link to add dubboctl to system PATH\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nln -s dubbo-admin-0.1.0/bin/dubboctl /usr/local/bin/dubboctl\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo API Docs Dependencies in Maven POM\nDESCRIPTION: Maven dependencies required to use Dubbo API Docs annotations and core functionality in a Dubbo project. The version should match the Dubbo version being used.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/apidocs.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-api-docs-annotations</artifactId>\n    <version>${dubbo-version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-api-docs-core</artifactId>\n    <version>${dubbo-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Selecting Invokers with Sticky Session Support (Java)\nDESCRIPTION: This snippet demonstrates the select method in FailoverClusterInvoker, which chooses an invoker while supporting sticky sessions. It handles the sticky invoker logic and falls back to regular selection if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nprotected Invoker<T> select(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\n    if (invokers == null || invokers.isEmpty())\n        return null;\n    // 获取调用方法名\n    String methodName = invocation == null ? \"\" : invocation.getMethodName();\n\n    // 获取 sticky 配置，sticky 表示粘滞连接。所谓粘滞连接是指让服务消费者尽可能的\n    // 调用同一个服务提供者，除非该提供者挂了再进行切换\n    boolean sticky = invokers.get(0).getUrl().getMethodParameter(methodName, Constants.CLUSTER_STICKY_KEY, Constants.DEFAULT_CLUSTER_STICKY);\n    {\n        // 检测 invokers 列表是否包含 stickyInvoker，如果不包含，\n        // 说明 stickyInvoker 代表的服务提供者挂了，此时需要将其置空\n        if (stickyInvoker != null && !invokers.contains(stickyInvoker)) {\n            stickyInvoker = null;\n        }\n        \n        // 在 sticky 为 true，且 stickyInvoker != null 的情况下。如果 selected 包含 \n        // stickyInvoker，表明 stickyInvoker 对应的服务提供者可能因网络原因未能成功提供服务。\n        // 但是该提供者并没挂，此时 invokers 列表中仍存在该服务提供者对应的 Invoker。\n        if (sticky && stickyInvoker != null && (selected == null || !selected.contains(stickyInvoker))) {\n            // availablecheck 表示是否开启了可用性检查，如果开启了，则调用 stickyInvoker 的 \n            // isAvailable 方法进行检查，如果检查通过，则直接返回 stickyInvoker。\n            if (availablecheck && stickyInvoker.isAvailable()) {\n                return stickyInvoker;\n            }\n        }\n    }\n    \n    // 如果线程走到当前代码处，说明前面的 stickyInvoker 为空，或者不可用。\n    // 此时继续调用 doSelect 选择 Invoker\n    Invoker<T> invoker = doSelect(loadbalance, invocation, invokers, selected);\n\n    // 如果 sticky 为 true，则将负载均衡组件选出的 Invoker 赋值给 stickyInvoker\n    if (sticky) {\n        stickyInvoker = invoker;\n    }\n    return invoker;\n}\n```\n\n----------------------------------------\n\nTITLE: Source Code Download Command\nDESCRIPTION: Git clone command to download Dubbo-Go-Pixiu source code from GitHub repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/deployment.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:apache/dubbo-go-pixiu.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Fixed Token Authorization in Dubbo XML\nDESCRIPTION: Establishes global token authorization using a fixed token value. This acts as a password for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/token-authorization.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:provider token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Logger via JVM Arguments\nDESCRIPTION: Sets the Dubbo logger to SLF4J using JVM arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njava -Ddubbo.application.logger=slf4j\n```\n\n----------------------------------------\n\nTITLE: Setting Service-Level Retry Count in Dubbo-Go\nDESCRIPTION: Configures a service-specific retry count of 5, which overrides the client-level retry configuration for this particular service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/retry.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsvc, err := greet.NewGreetService(cli, client.WithClientRetries(5))\n```\n\n----------------------------------------\n\nTITLE: Registering DemoFilter Plugin in Go\nDESCRIPTION: Creates and registers a Plugin struct for the DemoFilter. The init function registers the plugin, and the Plugin struct implements methods to specify the filter kind and create the filter factory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n   filter.RegisterHttpFilter(&Plugin{})\n}\n\ntype Plugin struct {\n}\n\nfunc (p *Plugin) Kind() string {\n   return \"dgp.filters.demo\"\n}\n\nfunc (p *Plugin) CreateFilterFactory() (filter.HttpFilterFactory, error) {\n\treturn &DemoFilterFactory{conf: &Config{}}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Java Interface Streaming Methods\nDESCRIPTION: Client code for invoking streaming methods defined with Java interfaces. The example demonstrates how to invoke both server-side streaming and bidirectional streaming methods and handle their responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\ndelegate.sayHelloServerStream(\"server stream\", new StreamObserver<String>() {\n    @Override\n    public void onNext(String data) {\n        System.out.println(data);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        throwable.printStackTrace();\n    }\n\n    @Override\n    public void onCompleted() {\n        System.out.println(\"onCompleted\");\n    }\n});\n\n\nStreamObserver<String> request = delegate.sayHelloStream(new StreamObserver<String>() {\n    @Override\n    public void onNext(String data) {\n        System.out.println(data);\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        throwable.printStackTrace();\n    }\n\n    @Override\n    public void onCompleted() {\n        System.out.println(\"onCompleted\");\n    }\n});\nfor (int i = 0; i < n; i++) {\n    request.onNext(\"stream request\" + i);\n}\nrequest.onCompleted();\n```\n\n----------------------------------------\n\nTITLE: Implementing 'Inheritance' in Go for Dubbo-go-hessian2\nDESCRIPTION: Demonstrates how to use anonymous structs in Go to mimic Java inheritance for Dubbo-go-hessian2 serialization. It also shows how to ignore specific fields using the hessian tag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/dubbo-go-hessian2-1.6.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Dog struct {\n    Animal\n    Gender  string\n    DogName string `hessian:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Logging Framework in Dubbo LoggerFactory\nDESCRIPTION: This static block in LoggerFactory initializes the logging framework for Dubbo. It first checks for a system property to determine the logger, then falls back to a predefined order of logger adapters if not specified. It handles various logging frameworks including SLF4J, JCL, Log4j, JDK, and Log4j2.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic {\n    String logger = System.getProperty(\"dubbo.application.logger\", \"\");\n    switch (logger) {\n        case Slf4jLoggerAdapter.NAME:\n            setLoggerAdapter(new Slf4jLoggerAdapter());\n            break;\n        case JclLoggerAdapter.NAME:\n            setLoggerAdapter(new JclLoggerAdapter());\n            break;\n        case Log4jLoggerAdapter.NAME:\n            setLoggerAdapter(new Log4jLoggerAdapter());\n            break;\n        case JdkLoggerAdapter.NAME:\n            setLoggerAdapter(new JdkLoggerAdapter());\n            break;\n        case Log4j2LoggerAdapter.NAME:\n            setLoggerAdapter(new Log4j2LoggerAdapter());\n            break;\n        default:\n            List<Class<? extends LoggerAdapter>> candidates = Arrays.asList(\n                Log4jLoggerAdapter.class,\n                Slf4jLoggerAdapter.class,\n                Log4j2LoggerAdapter.class,\n                JclLoggerAdapter.class,\n                JdkLoggerAdapter.class\n            );\n            boolean found = false;\n            // try to use the first available adapter\n            for (Class<? extends LoggerAdapter> clazz : candidates) {\n                try {\n                    LoggerAdapter loggerAdapter = clazz.getConstructor().newInstance();\n                    loggerAdapter.getLogger(LoggerFactory.class);\n                    if (loggerAdapter.isConfigured()) {\n                        setLoggerAdapter(loggerAdapter);\n                        found = true;\n                        break;\n                    }\n                } catch (Exception | LinkageError ignored) {\n                    // ignore\n                }\n            }\n            if (found) {\n                break;\n            }\n\n            System.err.println(\"Dubbo: Unable to find a proper configured logger to log out.\");\n            for (Class<? extends LoggerAdapter> clazz : candidates) {\n                try {\n                    LoggerAdapter loggerAdapter = clazz.getConstructor().newInstance();\n                    loggerAdapter.getLogger(LoggerFactory.class);\n                    setLoggerAdapter(loggerAdapter);\n                    found = true;\n                    break;\n                } catch (Throwable ignored) {\n                    // ignore\n                }\n            }\n            if (found) {\n                System.err.println(\"Dubbo: Using default logger: \" + loggerAdapter.getClass().getName() + \". \" +\n                    \"If you cannot see any log, please configure -Ddubbo.application.logger property to your preferred logging framework.\");\n            } else {\n                System.err.println(\"Dubbo: Unable to find any available logger adapter to log out. Dubbo logs will be ignored. \" +\n                    \"Please configure -Ddubbo.application.logger property and add corresponding logging library to classpath.\");\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Wrapper Class Pattern in Dubbo\nDESCRIPTION: This code demonstrates the structure of a wrapper class in Dubbo's extension mechanism. A wrapper class has a copy constructor that accepts an instance of the same type, following the decorator pattern to enable AOP functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nclass A{\n    private A a;\n    public A(A a){\n        this.a = a;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Properties from File and Classpath\nDESCRIPTION: Details how Dubbo loads properties from configuration files. It first attempts to load from a direct file path, then falls back to classpath resources, supporting both local system configurations and those bundled in JARs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static Properties loadProperties(Set<ClassLoader> classLoaders, String fileName, boolean allowMultiFile, boolean optional) {\n        Properties properties = new Properties();\n        // add scene judgement in windows environment Fix 2557\n        //检查文件是否存在 直接加载配置文件如果加载到了配置文件则直接返回\n        if (checkFileNameExist(fileName)) {\n            try {\n                FileInputStream input = new FileInputStream(fileName);\n                try {\n                    properties.load(input);\n                } finally {\n                    input.close();\n                }\n            } catch (Throwable e) {\n                logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\n            }\n            return properties;\n        }\n\n\t\t//为什么会有下面的逻辑呢,如果仅仅使用上面的加载方式只能加载到本系统下的配置文件,无法加载封装在jar中的根路径的配置\n        Set<java.net.URL> set = null;\n        try {\n            List<ClassLoader> classLoadersToLoad = new LinkedList<>();\n            classLoadersToLoad.add(ClassUtils.getClassLoader());\n            classLoadersToLoad.addAll(classLoaders);\n            //这个方法loadResources在扩展加载的时候说过\n            set = ClassLoaderResourceLoader.loadResources(fileName, classLoadersToLoad).values().stream().reduce(new LinkedHashSet<>(), (a, i) -> {\n                a.addAll(i);\n                return a;\n            });\n        } catch (Throwable t) {\n            logger.warn(\"Fail to load \" + fileName + \" file: \" + t.getMessage(), t);\n        }\n\n        if (CollectionUtils.isEmpty(set)) {\n            if (!optional) {\n                logger.warn(\"No \" + fileName + \" found on the class path.\");\n            }\n            return properties;\n        }\n\n        if (!allowMultiFile) {\n            if (set.size() > 1) {\n                String errMsg = String.format(\"only 1 %s file is expected, but %d dubbo.properties files found on class path: %s\",\n                    fileName, set.size(), set);\n                logger.warn(errMsg);\n            }\n\n            // fall back to use method getResourceAsStream\n            try {\n                properties.load(ClassUtils.getClassLoader().getResourceAsStream(fileName));\n            } catch (Throwable e) {\n                logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\n            }\n            return properties;\n        }\n\n        logger.info(\"load \" + fileName + \" properties file from \" + set);\n\n        for (java.net.URL url : set) {\n            try {\n                Properties p = new Properties();\n                InputStream input = url.openStream();\n                if (input != null) {\n                    try {\n                        p.load(input);\n                        properties.putAll(p);\n                    } finally {\n                        try {\n                            input.close();\n                        } catch (Throwable t) {\n                        }\n                    }\n                }\n            } catch (Throwable e) {\n                logger.warn(\"Fail to load \" + fileName + \" file from \" + url + \"(ignore this file): \" + e.getMessage(), e);\n            }\n        }\n\n        return properties;\n    }\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Stack Trace for Debugging\nDESCRIPTION: Command to generate a stack trace log file for debugging Java process issues\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/10.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Address Class Structure for IP Specification\nDESCRIPTION: The Address class structure used for specifying IP addresses, showing its parameters and prioritization logic. It supports specifying URLs, IP with port, or just IP, with an option to create new invokers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster.specifyaddress;\n\npublic class Address implements Serializable {\n    // ip - priority: 3\n    private String ip;\n\n    // ip+port - priority: 2\n    private int port;\n\n    // address - priority: 1\n    private URL urlAddress;\n    \n    private boolean needToCreate = false;\n\n    // ignore setter and getter\n}\n```\n\n----------------------------------------\n\nTITLE: 配置Zookeeper单机模式 (Properties)\nDESCRIPTION: Zookeeper单机模式的配置示例。这个配置文件定义了Zookeeper的基本参数，包括时间设置、数据目录和客户端端口。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/home/dubbo/zookeeper-3.3.3/data\nclientPort=2181\n```\n\n----------------------------------------\n\nTITLE: Viewing Provider Metadata in Redis\nDESCRIPTION: Example of using Redis client to get provider metadata for a DemoService. Shows the complete JSON metadata stored for a service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_9\n\nLANGUAGE: shell script\nCODE:\n```\n127.0.0.1:6379> get org.apache.dubbo.demo.DemoService:::provider:demo-provider\n\"{\\\"parameters\\\":{\\\"side\\\":\\\"provider\\\",\\\"interface\\\":\\\"org.apache.dubbo.demo.DemoService\\\",\\\"metadata-type\\\":\\\"remote\\\",\\\"application\\\":\\\"demo-provider\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"\\\",\\\"anyhost\\\":\\\"true\\\",\\\"delay\\\":\\\"5000\\\",\\\"methods\\\":\\\"sayHello,sayHelloAsync\\\",\\\"deprecated\\\":\\\"false\\\",\\\"dynamic\\\":\\\"true\\\",\\\"timeout\\\":\\\"3000\\\",\\\"generic\\\":\\\"false\\\"},\\\"canonicalName\\\":\\\"org.apache.dubbo.demo.DemoService\\\",\\\"codeSource\\\":\\\"file:/Users/apple/IdeaProjects/dubbo/dubbo-demo/dubbo-demo-interface/target/classes/\\\",\\\"methods\\\":[{\\\"name\\\":\\\"sayHello\\\",\\\"parameterTypes\\\":[\\\"java.lang.String\\\"],\\\"returnType\\\":\\\"java.lang.String\\\"},{\\\"name\\\":\\\"sayHelloAsync\\\",\\\"parameterTypes\\\":[\\\"java.lang.String\\\"],\\\"returnType\\\":\\\"java.util.concurrent.CompletableFuture\\\"}],\\\"types\\\":[{\\\"type\\\":\\\"java.util.concurrent.CompletableFuture\\\",\\\"properties\\\":{\\\"result\\\":\\\"java.lang.Object\\\",\\\"stack\\\":\\\"java.util.concurrent.CompletableFuture.Completion\\\"}},{\\\"type\\\":\\\"java.lang.Object\\\"},{\\\"type\\\":\\\"java.lang.String\\\"},{\\\"type\\\":\\\"java.util.concurrent.CompletableFuture.Completion\\\",\\\"properties\\\":{\\\"next\\\":\\\"java.util.concurrent.CompletableFuture.Completion\\\",\\\"status\\\":\\\"int\\\"}},{\\\"type\\\":\\\"int\\\"}]}\"\n```\n\n----------------------------------------\n\nTITLE: Adaptive Extension Usage Example\nDESCRIPTION: Example of using adaptive extensions in Dubbo with URL-based protocol selection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_27\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboAdaptiveTest {\n\n    @Test\n    public void sayHello() throws Exception {\n        URL url = URL.valueOf(\"dubbo://localhost/test\");\n        Protocol adaptiveProtocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        adaptiveProtocol.refer(type, url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Logger Interface Methods in Dubbo\nDESCRIPTION: New warn-level methods added to ErrorTypeAwareLogger interface for error code support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/intro.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvoid warn(String code, String cause, String extendedInformation, String msg);\nvoid warn(String code, String cause, String extendedInformation, String msg, Throwable e);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Internal ApplicationConfig to ApplicationModel in Dubbo\nDESCRIPTION: This code creates an ApplicationConfig with the internal application name and sets it in the ApplicationConfigManager. It also sets the model name to DUBBO_INTERNAL_APPLICATION, configuring the internal application model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n //获取ConfigManager类型对象，然后设置添加当前应用配置对象\n   internalApplicationModel.getApplicationConfigManager().setApplication(\n        new ApplicationConfig(internalApplicationModel, CommonConstants.DUBBO_INTERNAL_APPLICATION));\n        //设置公开的模块名字为常量DUBBO_INTERNAL_APPLICATION\n    internalApplicationModel.setModelName(CommonConstants.DUBBO_INTERNAL_APPLICATION);\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider with Skywalking Agent\nDESCRIPTION: Command to start a Dubbo provider application with the Skywalking agent attached. The agent collects tracing data and sends it to the Skywalking OAP server. Note that the plugins directory should be removed to ensure using Dubbo's Micrometer integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/tracing/skywalking.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar dubbo-samples-spring-boot-tracing-skwalking-provider-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Check via JVM Parameters\nDESCRIPTION: Command-line JVM parameters that can be used to disable different types of checks during application startup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/preflight-check.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -Ddubbo.reference.com.foo.BarService.check=false\njava -Ddubbo.consumer.check=false \njava -Ddubbo.registry.check=false\n```\n\n----------------------------------------\n\nTITLE: Dubbo LoggerFactory Initialization Process\nDESCRIPTION: This static initialization block from LoggerFactory demonstrates how Dubbo selects a logging implementation. It first checks the dubbo.application.logger system property, then tries to load logging frameworks in a specified priority order until one is successfully loaded.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// search common-used logging frameworks\nstatic {\n    String logger = System.getProperty(\"dubbo.application.logger\", \"\");\n    switch (logger) {\n        case Slf4jLoggerAdapter.NAME:\n            setLoggerAdapter(new Slf4jLoggerAdapter());\n            break;\n        case JclLoggerAdapter.NAME:\n            setLoggerAdapter(new JclLoggerAdapter());\n            break;\n        case Log4jLoggerAdapter.NAME:\n            setLoggerAdapter(new Log4jLoggerAdapter());\n            break;\n        case JdkLoggerAdapter.NAME:\n            setLoggerAdapter(new JdkLoggerAdapter());\n            break;\n        case Log4j2LoggerAdapter.NAME:\n            setLoggerAdapter(new Log4j2LoggerAdapter());\n            break;\n        default:\n            List<Class<? extends LoggerAdapter>> candidates = Arrays.asList(\n                Log4jLoggerAdapter.class,\n                Slf4jLoggerAdapter.class,\n                Log4j2LoggerAdapter.class,\n                JclLoggerAdapter.class,\n                JdkLoggerAdapter.class\n            );\n            boolean found = false;\n            // try to use the first available adapter\n            for (Class<? extends LoggerAdapter> clazz : candidates) {\n                try {\n                    LoggerAdapter loggerAdapter = clazz.getConstructor().newInstance();\n                    loggerAdapter.getLogger(LoggerFactory.class);\n                    if (loggerAdapter.isConfigured()) {\n                        setLoggerAdapter(loggerAdapter);\n                        found = true;\n                        break;\n                    }\n                } catch (Exception | LinkageError ignored) {\n                    // ignore\n                }\n            }\n            if (found) {\n                break;\n            }\n\n            System.err.println(\"Dubbo: Unable to find a proper configured logger to log out.\");\n            for (Class<? extends LoggerAdapter> clazz : candidates) {\n                try {\n                    LoggerAdapter loggerAdapter = clazz.getConstructor().newInstance();\n                    loggerAdapter.getLogger(LoggerFactory.class);\n                    setLoggerAdapter(loggerAdapter);\n                    found = true;\n                    break;\n                } catch (Throwable ignored) {\n                    // ignore\n                }\n            }\n            if (found) {\n                System.err.println(\"Dubbo: Using default logger: \" + loggerAdapter.getClass().getName() + \". \" +\n                    \"If you cannot see any log, please configure -Ddubbo.application.logger property to your preferred logging framework.\");\n            } else {\n                System.err.println(\"Dubbo: Unable to find any available logger adapter to log out. Dubbo logs will be ignored. \" +\n                    \"Please configure -Ddubbo.application.logger property and add corresponding logging library to classpath.\");\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Network Filter Route Configuration\nDESCRIPTION: Example of route configuration within a network filter, showing path-based routing to a specific cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/user\"\n                      route:\n                        cluster: \"user\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderService with Account Integration in Java\nDESCRIPTION: Order service implementation that creates a new order and calls the account service to deduct payment. It demonstrates the nested service call that is part of the distributed transaction.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class OrderServiceImpl implements OrderService {\n\n    private OrderDAO orderDAO;\n\n    private AccountService accountService;\n\n    public Order create(String userId, String commodityCode, int orderCount) {\n\n        int orderMoney = calculate(commodityCode, orderCount);\n\n        accountService.debit(userId, orderMoney);\n\n        Order order = new Order();\n        order.userId = userId;\n        order.commodityCode = commodityCode;\n        order.count = orderCount;\n        order.money = orderMoney;\n\n        return orderDAO.insert(order);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Protocol Extensions\nDESCRIPTION: XML configuration for registering filters and interceptors in Dubbo REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.TraceInterceptor, xxx.TraceFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol with XML\nDESCRIPTION: XML configuration for enabling Triple protocol with Hessian serialization. This shows how to configure the protocol in a Dubbo XML configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/triple/wrapper.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"tri\" serialization=\"hessian\"/>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for HTTP Proxy Sample\nDESCRIPTION: Shows the basic directory structure for the HTTP proxy sample implementation, including locations for Pixiu configuration, server code, and test files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- pixiu # Pixiu configuration file\n- server # http server\n- test # client or unit test\n```\n\n----------------------------------------\n\nTITLE: Defining DubboAttachmentMatch in VirtualService\nDESCRIPTION: Example of a DubboAttachmentMatch configuration within a VirtualService. It shows how to specify matching rules for Eagleeye context and Dubbo context attachments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - attachments: #DubboAttachmentMatch\n          eagleeyecontext:\n          dubbocontext:\n```\n\n----------------------------------------\n\nTITLE: Using dubbo:registry XML Configuration\nDESCRIPTION: Example of how to reference registry IDs in service or reference configurations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service registry=\"\">\n<!-- Service configuration using specified registry -->\n</dubbo:service>\n\n<dubbo:reference registry=\"\">\n<!-- Reference configuration using specified registry -->\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Sample Application Deployment Status\nDESCRIPTION: Kubernetes command to verify the status of the deployed Dubbo sample application in the dubbo-demo namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/prometheus.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl -n dubbo-demo get deployments\n```\n\n----------------------------------------\n\nTITLE: Generating SHA512 Signature for Source Release\nDESCRIPTION: Command to generate SHA512 checksum for the source release zip file, which will be used to verify the integrity of the downloaded artifacts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -a 512 apache-dubbo-${release_version}-source-release.zip >> apache-dubbo-${release_version}-source-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Custom Interface Redis Service Configuration\nDESCRIPTION: Shows how to configure Redis service reference using a custom service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"com.foo.StoreService\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Context Values in Dubbo-go Client\nDESCRIPTION: Demonstrates how to set additional parameters in the client context using constant.AttachmentKey.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/attachments.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\nctx = context.WithValue(ctx, constant.AttachmentKey, map[string]interface{}{\n    \"key1\": \"user defined value 1\",\n    \"key2\": \"user defined value 2\"\n})\n```\n\n----------------------------------------\n\nTITLE: Dubbo Method Not Found Error Stack Trace\nDESCRIPTION: Example stack trace showing a method not found error in Dubbo where the system cannot find method 'sayHi123' in the GreetingsService interface. The error occurs during application startup when validating method configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n[27/02/23 02:49:31:031 CST] main ERROR deploy.DefaultApplicationDeployer:  [DUBBO] Dubbo Application[1.1](first-dubbo-consumer) start failure, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195, error code: 5-14. This may be caused by , go to https://dubbo.apache.org/faq/5/14 to find instructions. \njava.lang.IllegalStateException: Failed to override field value of config bean: <dubbo:reference sticky=\"false\" interface=\"org.apache.dubbo.samples.api.GreetingsService\" />\n\tat org.apache.dubbo.config.AbstractConfig.refresh(AbstractConfig.java:690)\n\tat java.util.concurrent.ConcurrentHashMap$ValuesView.forEach(ConcurrentHashMap.java:4707)\n\tat org.apache.dubbo.config.context.ModuleConfigManager.refreshAll(ModuleConfigManager.java:180)\n\tat org.apache.dubbo.config.deploy.DefaultModuleDeployer.loadConfigs(DefaultModuleDeployer.java:317)\n\tat org.apache.dubbo.config.deploy.DefaultModuleDeployer.initialize(DefaultModuleDeployer.java:113)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.initModuleDeployers(DefaultApplicationDeployer.java:238)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.initialize(DefaultApplicationDeployer.java:211)\n\tat org.apache.dubbo.config.deploy.DefaultApplicationDeployer.start(DefaultApplicationDeployer.java:616)\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:226)\n\tat org.apache.dubbo.config.bootstrap.DubboBootstrap.start(DubboBootstrap.java:215)\n\tat org.apache.dubbo.samples.client.Application.main(Application.java:56)\nCaused by: java.lang.IllegalStateException: Found invalid method config, the interface org.apache.dubbo.samples.api.GreetingsService not found method \"sayHi123\" : [<dubbo:method return=\"true\" name=\"sayHi123\" sent=\"true\" timeout=\"1000\" />]\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.verifyMethodConfig(AbstractInterfaceConfig.java:399)\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.lambda$processExtraRefresh$2(AbstractInterfaceConfig.java:369)\n\tat java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:174)\n\tat java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)\n\tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\n\tat org.apache.dubbo.config.AbstractInterfaceConfig.processExtraRefresh(AbstractInterfaceConfig.java:370)\n\tat org.apache.dubbo.config.AbstractConfig.refreshWithPrefixes(AbstractConfig.java:735)\n\tat org.apache.dubbo.config.ReferenceConfigBase.preProcessRefresh(ReferenceConfigBase.java:140)\n\tat org.apache.dubbo.config.AbstractConfig.refresh(AbstractConfig.java:686)\n```\n\n----------------------------------------\n\nTITLE: Decoding Request Body in DubboCodec (Java)\nDESCRIPTION: This snippet shows the decodeBody method in DubboCodec class. It extracts information from the header, creates a Request object, and handles different types of requests including heartbeats and events.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboCodec extends ExchangeCodec implements Codec2 {\n\n    @Override\n    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {\n        // 获取消息头中的第三个字节，并通过逻辑与运算得到序列化器编号\n        byte flag = header[2], proto = (byte) (flag & SERIALIZATION_MASK);\n        Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto);\n        // 获取调用编号\n        long id = Bytes.bytes2long(header, 4);\n        // 通过逻辑与运算得到调用类型，0 - Response，1 - Request\n        if ((flag & FLAG_REQUEST) == 0) {\n            // 对响应结果进行解码，得到 Response 对象。这个非本节内容，后面再分析\n            // ...\n        } else {\n            // 创建 Request 对象\n            Request req = new Request(id);\n            req.setVersion(Version.getProtocolVersion());\n            // 通过逻辑与运算得到通信方式，并设置到 Request 对象中\n            req.setTwoWay((flag & FLAG_TWOWAY) != 0);\n            \n            // 通过位运算检测数据包是否为事件类型\n            if ((flag & FLAG_EVENT) != 0) {\n                // 设置心跳事件到 Request 对象中\n                req.setEvent(Request.HEARTBEAT_EVENT);\n            }\n            try {\n                Object data;\n                if (req.isHeartbeat()) {\n                    // 对心跳包进行解码，该方法已被标注为废弃\n                    data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));\n                } else if (req.isEvent()) {\n                    // 对事件数据进行解码\n                    data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));\n                } else {\n                    DecodeableRpcInvocation inv;\n                    // 根据 url 参数判断是否在 IO 线程上对消息体进行解码\n                    if (channel.getUrl().getParameter(\n                            Constants.DECODE_IN_IO_THREAD_KEY,\n                            Constants.DEFAULT_DECODE_IN_IO_THREAD)) {\n                        inv = new DecodeableRpcInvocation(channel, req, is, proto);\n                        // 在当前线程，也就是 IO 线程上进行后续的解码工作。此工作完成后，可将\n                        // 调用方法名、attachment、以及调用参数解析出来\n                        inv.decode();\n                    } else {\n                        // 仅创建 DecodeableRpcInvocation 对象，但不在当前线程上执行解码逻辑\n                        inv = new DecodeableRpcInvocation(channel, req,\n                                new UnsafeByteArrayInputStream(readMessageData(is)), proto);\n                    }\n                    data = inv;\n                }\n                \n                // 设置 data 到 Request 对象中\n                req.setData(data);\n            } catch (Throwable t) {\n                // 若解码过程中出现异常，则将 broken 字段设为 true，\n                // 并将异常对象设置到 Reqeust 对象中\n                req.setBroken(true);\n                req.setData(t);\n            }\n            return req;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Router Snapshot in Dubbo QoS\nDESCRIPTION: This command disables router snapshot sampling for services matching the pattern 'com.dubbo.*'. It returns the number of services affected by this operation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>disableRouterSnapshot com.dubbo.*\nOK. Found service count: 1\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Decoding Response Body in DubboCodec\nDESCRIPTION: The DubboCodec class handles decoding of response data from the byte stream. It extracts the response ID, status, and determines the appropriate deserialization strategy based on whether the response is a normal response, heartbeat event, or contains an error message.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboCodec extends ExchangeCodec implements Codec2 {\n\n    @Override\n    protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException {\n        byte flag = header[2], proto = (byte) (flag & SERIALIZATION_MASK);\n        Serialization s = CodecSupport.getSerialization(channel.getUrl(), proto);\n        // 获取请求编号\n        long id = Bytes.bytes2long(header, 4);\n        // 检测消息类型，若下面的条件成立，表明消息类型为 Response\n        if ((flag & FLAG_REQUEST) == 0) {\n            // 创建 Response 对象\n            Response res = new Response(id);\n            // 检测事件标志位\n            if ((flag & FLAG_EVENT) != 0) {\n                // 设置心跳事件\n                res.setEvent(Response.HEARTBEAT_EVENT);\n            }\n            // 获取响应状态\n            byte status = header[3];\n            // 设置响应状态\n            res.setStatus(status);\n            \n            // 如果响应状态为 OK，表明调用过程正常\n            if (status == Response.OK) {\n                try {\n                    Object data;\n                    if (res.isHeartbeat()) {\n                        // 反序列化心跳数据，已废弃\n                        data = decodeHeartbeatData(channel, deserialize(s, channel.getUrl(), is));\n                    } else if (res.isEvent()) {\n                        // 反序列化事件数据\n                        data = decodeEventData(channel, deserialize(s, channel.getUrl(), is));\n                    } else {\n                        DecodeableRpcResult result;\n                        // 根据 url 参数决定是否在 IO 线程上执行解码逻辑\n                        if (channel.getUrl().getParameter(\n                                Constants.DECODE_IN_IO_THREAD_KEY,\n                                Constants.DEFAULT_DECODE_IN_IO_THREAD)) {\n                            // 创建 DecodeableRpcResult 对象\n                            result = new DecodeableRpcResult(channel, res, is,\n                                    (Invocation) getRequestData(id), proto);\n                            // 进行后续的解码工作\n                            result.decode();\n                        } else {\n                            // 创建 DecodeableRpcResult 对象\n                            result = new DecodeableRpcResult(channel, res,\n                                    new UnsafeByteArrayInputStream(readMessageData(is)),\n                                    (Invocation) getRequestData(id), proto);\n                        }\n                        data = result;\n                    }\n                    \n                    // 设置 DecodeableRpcResult 对象到 Response 对象中\n                    res.setResult(data);\n                } catch (Throwable t) {\n                    // 解码过程中出现了错误，此时设置 CLIENT_ERROR 状态码到 Response 对象中\n                    res.setStatus(Response.CLIENT_ERROR);\n                    res.setErrorMessage(StringUtils.toString(t));\n                }\n            } \n            // 响应状态非 OK，表明调用过程出现了异常\n            else {\n                // 反序列化异常信息，并设置到 Response 对象中\n                res.setErrorMessage(deserialize(s, channel.getUrl(), is).readUTF());\n            }\n            return res;\n        } else {\n            // 对请求数据进行解码，前面已分析过，此处忽略\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Size for REST Services\nDESCRIPTION: XML configuration for specifying the thread pool size for REST services in Dubbo, effective when using Netty, Jetty, or Tomcat servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" threads=\"500\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Listener in Dubbo-Go-Pixiu\nDESCRIPTION: Basic configuration for setting up an HTTP listener with address and port specification. The listener is configured to accept HTTP requests on all interfaces (0.0.0.0) on port 8883.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/listener/http.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\" # Indicates the HTTP Listener is being introduced\n      address:\n        socket_address:\n          address: \"0.0.0.0\" # Address\n          port: 8883 # Port\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Listener in Dubbo-Go-Pixiu\nDESCRIPTION: Basic configuration for setting up an HTTP listener with address and port specification. The listener is configured to accept HTTP requests on all interfaces (0.0.0.0) on port 8883.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/listener/http.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\" # Indicates the HTTP Listener is being introduced\n      address:\n        socket_address:\n          address: \"0.0.0.0\" # Address\n          port: 8883 # Port\n```\n\n----------------------------------------\n\nTITLE: Migration Rule Handler's doMigrate Template Method\nDESCRIPTION: The doMigrate method in MigrationRuleHandler implements a template pattern to determine the migration step and threshold from configuration, then refreshes the invoker accordingly. The default step is APPLICATION_FIRST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic synchronized void doMigrate(MigrationRule rule) {\n        //默认情况下这个类型是MigrationInvoker\n        if (migrationInvoker instanceof ServiceDiscoveryMigrationInvoker) {\n            refreshInvoker(MigrationStep.FORCE_APPLICATION, 1.0f, rule);\n            return;\n        }\n\n      //迁移步骤，MigrationStep 一共有3种枚举情况：FORCE_INTERFACE, APPLICATION_FIRST, FORCE_APPLICATION\n        // initial step : APPLICATION_FIRST\n        MigrationStep step = MigrationStep.APPLICATION_FIRST;\n        float threshold = -1f;\n\n        try {\n            //获取配置的类型 默认走APPLICATION_FIRST\n            step = rule.getStep(consumerURL);\n            //threshold: 决策阈值（默认-1.0）计算与获取\n            threshold = rule.getThreshold(consumerURL);\n        } catch (Exception e) {\n            logger.error(\"Failed to get step and threshold info from rule: \" + rule, e);\n        }\n        //刷洗调用器对象 来进行决策服务发现模式\n        if (refreshInvoker(step, threshold, rule)) {\n            // refresh success, update rule\n            setMigrationRule(rule);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing Dubbo Services with QoS\nDESCRIPTION: Using telnet to connect to Dubbo's QoS port and listing available services with the ls command. This helps verify which services are available as providers and consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n➜ telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>ls\nAs Provider side:\n+------------------------------------------------------------------------------------+---+\n|                                Provider Service Name                               |PUB|\n+------------------------------------------------------------------------------------+---+\n|DubboInternal - first-dubbo-consumer/org.apache.dubbo.metadata.MetadataService:1.0.0|   |\n+------------------------------------------------------------------------------------+---+\nAs Consumer side:\n+---------------------------------------------+---------------------+\n|            Consumer Service Name            |         NUM         |\n+---------------------------------------------+---------------------+\n|org.apache.dubbo.samples.api.GreetingsService|zookeeper-AF(I-1,A-1)|\n+---------------------------------------------+---------------------+\n\ndubbo>\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring Dubbo Repository in Git\nDESCRIPTION: Instructions for forking the Dubbo repository, cloning it locally, and setting up the upstream remote. This is the initial setup required for contributing to the Dubbo project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/new-contributor-guide_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone ${your fork dubbo repo address，for example：https://github.com/${your github id}/dubbo.git}\ncd dubbo\n\ngit remote add upstream https://github.com/apache/dubbo.git\n\ngit remote -v\n\n    origin    ${your fork dubbo repo address} (fetch)\n    origin    ${your fork dubbo repo address} (push)\n    upstream    https://github.com/apache/dubbo.git (fetch)\n    upstream    https://github.com/apache/dubbo.git (push)\n\ngit fetch origin\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Compiling Dubbo Application for Native Image\nDESCRIPTION: Maven commands for compiling Dubbo applications to native binaries using GraalVM Native Image. Includes commands for both API and annotation/XML-based configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# API approach\nmvn clean install -P native -Dmaven.test.skip=true\n\n# Annotation and XML approach (Spring Boot 3 integration)\nmvn clean install -P native native:compile -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in Dubbo XML\nDESCRIPTION: This XML snippet demonstrates how to enable Kryo serialization in Dubbo's XML configuration, including global, consumer, and reference-specific settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"kryo\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"kryo\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"kryo\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Service Interface in Java\nDESCRIPTION: Defines the AsyncService interface with a goodbye method that will be invoked asynchronously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-invoke.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface AsyncService {\n    String goodbye(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parameters in Dubbo Protocol XML\nDESCRIPTION: This snippet demonstrates how to use the dubbo:parameter element to set custom parameters for a Dubbo protocol configuration. It shows setting a key-value pair for a Napoli queue name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-parameter.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"napoli\">\n    <dubbo:parameter key=\"http://10.20.160.198/wiki/display/dubbo/napoli.queue.name\" value=\"xxx\" />\n</dubbo:protocol>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go Client Connection Settings\nDESCRIPTION: YAML configuration for Dubbo-Go client that defines connection parameters, service references, registry information, and protocol configuration. It specifies timeouts, retry policies, and connection pool settings for optimal performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# dubbo client yaml configure file\n\ncheck: true\n# client\nrequest_timeout: \"3s\"\n# connect timeout\nconnect_timeout: \"3s\"\n\n# application config\napplication:\n  organization: \"dubbo.io\"\n  name: \"UserInfoClient\"\n  module: \"dubbo-go user-info client\"\n  version: \"0.0.1\"\n  environment: \"dev\"\n\n# registry config\nregistries:\n  \"demoZk\":\n    protocol: \"zookeeper\"\n    timeout: \"3s\"\n    address: \"127.0.0.1:2181\"\n    username: \"\"\n    password: \"\"\n\n# reference config\nreferences:\n  \"UserProvider\":\n    registry: \"demoZk\"\n    protocol: \"dubbo\"\n    interface: \"org.apache.dubbo.UserProvider\"\n    cluster: \"failover\"\n    methods:\n      - name: \"GetUser\"\n        retries: 3\n\n# protocol config\nprotocol_conf:\n  dubbo:\n    reconnect_interval: 0\n    connection_number: 1\n    heartbeat_period: \"5s\"\n    session_timeout: \"180s\"\n    pool_size: 64\n    pool_ttl: 600\n    getty_session_param:\n      compress_encoding: false\n      tcp_no_delay: true\n      tcp_keep_alive: true\n      keep_alive_period: \"120s\"\n      tcp_r_buf_size: 262144\n      tcp_w_buf_size: 65536\n      pkg_rq_size: 1024\n      pkg_wq_size: 512\n      tcp_read_timeout: \"1s\"\n      tcp_write_timeout: \"5s\"\n      wait_timeout: \"1s\"\n      max_msg_len: 1024000\n      session_name: \"client\"\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Exception Mapper\nDESCRIPTION: Custom implementation of RpcExceptionMapper for handling validation exceptions with JSON response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\npublic class MyValidationExceptionMapper extends RpcExceptionMapper {\n\n    protected Response handleConstraintViolationException(ConstraintViolationException cve) {\n        ViolationReport report = new ViolationReport();\n        for (ConstraintViolation cv : cve.getConstraintViolations()) {\n            report.addConstraintViolation(new RestConstraintViolation(\n                    cv.getPropertyPath().toString(),\n                    cv.getMessage(),\n                    cv.getInvalidValue() == null ? \"null\" : cv.getInvalidValue().toString()));\n        }\n        // 采用json输出代替xml输出\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 on Provider Side with Provider Tag in Dubbo\nDESCRIPTION: Sets the server implementation to Netty4 at the provider level in Dubbo provider configuration. This is an alternative approach to enable Netty4 for all protocols used by the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/netty4.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider server=\"netty4\" />\n```\n\n----------------------------------------\n\nTITLE: Removed Spring Framework Dependencies\nDESCRIPTION: List of Spring framework dependencies that are no longer transitively included in Dubbo 3.3.x and need to be explicitly added if required.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-core</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba.spring</groupId>\n      <artifactId>spring-context-support</artifactId>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Intercepting Invoker in RegistryProtocol for Service Discovery\nDESCRIPTION: The interceptInvoker method in RegistryProtocol loads RegistryProtocolListener implementations to control invoker behavior. The current available listener is MigrationRuleListener, which controls migration behavior through dynamically changing rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprotected <T> Invoker<T> interceptInvoker(ClusterInvoker<T> invoker, URL url, URL consumerUrl) {\n  //目前存在的扩展类型为RegistryProtocolListener监听器的实现类型MigrationRuleListener \n        List<RegistryProtocolListener> listeners = findRegistryProtocolListeners(url);\n        if (CollectionUtils.isEmpty(listeners)) {\n            return invoker;\n        }\n\n        for (RegistryProtocolListener listener : listeners) {\n            listener.onRefer(this, invoker, consumerUrl, url);\n        }\n        return invoker;\n    }\n```\n\n----------------------------------------\n\nTITLE: REST API URL Example in Dubbo\nDESCRIPTION: Example URL path that will be implemented for a user registration service in Dubbo using REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080/users/register\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom LoadBalance Extension in Dubbo\nDESCRIPTION: This snippet shows the content of the configuration file for adding a custom LoadBalance implementation named 'demo' in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndemo=com.dubbo.spi.demo.consumer.DemoLoadBalance\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightweight REST Server Options in Dubbo\nDESCRIPTION: XML configurations for selecting lightweight embedded REST server implementations (TJWS or Sun HTTP server) in Dubbo. These implementations are suitable for testing or low-load production environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tjws\"/> (tjws is now deprecated)\n<dubbo:protocol name=\"rest\" server=\"sunhttp\"/>\n```\n\n----------------------------------------\n\nTITLE: 定义 REST 服务接口和实现类\nDESCRIPTION: 定义一个 UserService 接口及其实现类,使用 JAX-RS 注解配置 REST 服务。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface UserService {\n   void registerUser(User user);\n}\n\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Logging Configuration in Dubbo\nDESCRIPTION: Uses the 'loggerInfo' command to display available logger adapters, current adapter, and log level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/logger-management.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> loggerInfo\n```\n\n----------------------------------------\n\nTITLE: Installing OpenVPN Package\nDESCRIPTION: Shell command to install OpenVPN package using apt package manager on Ubuntu systems.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install openvpn\n```\n\n----------------------------------------\n\nTITLE: Implementing Forking Pattern in Dubbo Cluster\nDESCRIPTION: Implementation of ForkingClusterInvoker that makes parallel invocations to multiple providers and returns the first successful result. Suitable for high-performance read operations requiring quick response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ForkingClusterInvoker<T> extends AbstractClusterInvoker<T> {\n    \n    private final ExecutorService executor = Executors.newCachedThreadPool(\n            new NamedInternalThreadFactory(\"forking-cluster-timer\", true));\n\n    @Override\n    public Result doInvoke(final Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {\n        try {\n            checkInvokers(invokers, invocation);\n            final List<Invoker<T>> selected;\n            final int forks = getUrl().getParameter(Constants.FORKS_KEY, Constants.DEFAULT_FORKS);\n            final int timeout = getUrl().getParameter(Constants.TIMEOUT_KEY, Constants.DEFAULT_TIMEOUT);\n            if (forks <= 0 || forks >= invokers.size()) {\n                selected = invokers;\n            } else {\n                selected = new ArrayList<Invoker<T>>();\n                for (int i = 0; i < forks; i++) {\n                    Invoker<T> invoker = select(loadbalance, invocation, invokers, selected);\n                    if (!selected.contains(invoker)) {\n                        selected.add(invoker);\n                    }\n                }\n            }\n            \n            RpcContext.getContext().setInvokers((List) selected);\n            final AtomicInteger count = new AtomicInteger();\n            final BlockingQueue<Object> ref = new LinkedBlockingQueue<Object>();\n            for (final Invoker<T> invoker : selected) {\n                executor.execute(new Runnable() {\n                    @Override\n                    public void run() {\n                        try {\n                            Result result = invoker.invoke(invocation);\n                            ref.offer(result);\n                        } catch (Throwable e) {\n                            int value = count.incrementAndGet();\n                            if (value >= selected.size()) {\n                                ref.offer(e);\n                            }\n                        }\n                    }\n                });\n            }\n            \n            try {\n                Object ret = ref.poll(timeout, TimeUnit.MILLISECONDS);\n                if (ret instanceof Throwable) {\n                    Throwable e = (Throwable) ret;\n                    throw new RpcException(..., \"Failed to forking invoke provider ...\");\n                }\n                return (Result) ret;\n            } catch (InterruptedException e) {\n                throw new RpcException(\"Failed to forking invoke provider ...\");\n            }\n        } finally {\n            RpcContext.getContext().clearAttachments();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ApplicationModel Using Instance Methods (New Method)\nDESCRIPTION: Demonstrates the new approach for obtaining ApplicationModel instances and their data after the multiple-instance transformation, including various methods to access ApplicationModel and injecting it into components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/develop.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Get default instance, compatible with the original single application instance\nApplicationModel.defaultModel().getApplicationEnvironment();\n\n// Get ApplicationModel by Module\nmoduleModel.getApplicationModel();\n\n// Get ApplicationModel through URL\nScopeModelUtil.getApplicationModel(url.getScopeModel());\n\n// Obtain through Config configuration class\nScopeModelUtil.getApplicationModel(serviceConfig.getScopeModel());\n\n// SPI/Bean can use constructor injection\npublic ConfigManager(ApplicationModel applicationModel) {\n    this.applicationModel = applicationModel;\n}\n\n// SPI/Bean can inject by implementing ScopeModelAware interface\npublic class DefaultGovernanceRuleRepositoryImpl implements GovernanceRuleRepository, ScopeModelAware {\n\n    private ApplicationModel applicationModel;\n\n    @Override\n    public void setApplicationModel(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n    }\n    // ...\n}\n\n// Enumerate all Applications in FrameworkModel\nfor (ApplicationModel applicationModel : frameworkModel.getApplicationModels()) {\n    List<RegistryProtocolListener> listeners = applicationModel.getExtensionLoader(RegistryProtocolListener.class)\n        .getLoadedExtensionInstances();\n    if (CollectionUtils.isNotEmpty(listeners)) {\n        for (RegistryProtocolListener listener : listeners) {\n            listener.onDestroy();\n        }\n    }\n}\n\n// Enumerate all FrameworkModels\nfor (FrameworkModel frameworkModel : FrameworkModel.getAllInstances()) {\n    destroyProtocols(frameworkModel);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Configuration Center in DefaultApplicationDeployer\nDESCRIPTION: Core method for starting the configuration center, handling config loading, validation and environment setup. Supports multiple configuration centers and registry center fallback.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate void startConfigCenter() {\n        configManager.loadConfigsOfTypeFromProps(ApplicationConfig.class);\n        if (StringUtils.isBlank(applicationModel.getModelName())) {\n            applicationModel.setModelName(applicationModel.tryGetApplicationName());\n        }\n        configManager.loadConfigsOfTypeFromProps(ConfigCenterConfig.class);\n        useRegistryAsConfigCenterIfNecessary();\n        Collection<ConfigCenterConfig> configCenters = configManager.getConfigCenters();\n        if (CollectionUtils.isEmpty(configCenters)) {\n            ConfigCenterConfig configCenterConfig = new ConfigCenterConfig();\n            configCenterConfig.setScopeModel(applicationModel);\n            configCenterConfig.refresh();\n            ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);\n            if (configCenterConfig.isValid()) {\n                configManager.addConfigCenter(configCenterConfig);\n                configCenters = configManager.getConfigCenters();\n            }\n        } else {\n            for (ConfigCenterConfig configCenterConfig : configCenters) {\n                configCenterConfig.refresh();\n                ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);\n            }\n        }\n        if (CollectionUtils.isNotEmpty(configCenters)) {\n            CompositeDynamicConfiguration compositeDynamicConfiguration = new CompositeDynamicConfiguration();\n            for (ConfigCenterConfig configCenter : configCenters) {\n                environment.updateExternalConfigMap(configCenter.getExternalConfiguration());\n                environment.updateAppExternalConfigMap(configCenter.getAppExternalConfiguration());\n                compositeDynamicConfiguration.addConfiguration(prepareEnvironment(configCenter));\n            }\n            environment.setDynamicConfiguration(compositeDynamicConfiguration);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Refreshing Application-level Invoker in MigrationInvoker\nDESCRIPTION: The refreshServiceDiscoveryInvoker method updates the application-level service discovery invoker. Similar to the interface-level method, it sets up a listener to recalculate the preferred invoker when addresses change.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprotected void refreshServiceDiscoveryInvoker(CountDownLatch latch) {\n        clearListener(serviceDiscoveryInvoker);\n        if (needRefresh(serviceDiscoveryInvoker)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Re-subscribing instance addresses, current interface \" + type.getName());\n            }\n\n            if (serviceDiscoveryInvoker != null) {\n                serviceDiscoveryInvoker.destroy();\n            }\n            serviceDiscoveryInvoker = registryProtocol.getServiceDiscoveryInvoker(cluster, registry, type, url);\n        }\n        setListener(serviceDiscoveryInvoker, () -> {\n            latch.countDown();\n            if (reportService.hasReporter()) {\n                reportService.reportConsumptionStatus(\n                    reportService.createConsumptionReport(consumerUrl.getServiceInterface(), consumerUrl.getVersion(), consumerUrl.getGroup(), \"app\"));\n            }\n            if (step == APPLICATION_FIRST) {\n                calcPreferredInvoker(rule);\n            }\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key Fingerprint\nDESCRIPTION: Command for generating a GPG key fingerprint, which is used to verify the authenticity of the public key. This fingerprint should be published on the Apache ID website for verification purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Generate public key fingerprint with fingerprint parameter:\n$ gpg --fingerprint liujun\npub   rsa4096 2019-10-17 [SC]\n      1376 A2FF 67E4 C477 5739  09BD 7DB6 8550 D366 E4C0\nuid           [ultimate] liujun (CODE SIGNING KEY) <liujun@apache.org>\nsub   rsa4096 2019-10-17 [E]\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Protocol Buffer Files with protoc Command\nDESCRIPTION: Shell command for generating the required Go protocol buffer files for gRPC using the protoc compiler. This command generates both standard Go code and gRPC service code from a proto file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative hello_grpc.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Extension in Dubbo XML\nDESCRIPTION: XML configuration for specifying the thread pool implementation at protocol or provider level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/threadpool.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol threadpool=\"xxx\" />\n<!-- Default value configuration, used when <dubbo:protocol> does not configure threadpool -->\n<dubbo:provider threadpool=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: RPC Response Handling\nDESCRIPTION: RPCMessageWriter processes response results from RPC calls, extracting the result or handling exceptions as needed for Dubbo service calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.response.strategy.RPCMessageWriter#writeWith()\n```\n\n----------------------------------------\n\nTITLE: Starting Pixiu Gateway Command\nDESCRIPTION: Command line instruction for starting the Pixiu gateway with a specified configuration file path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/samples/http_proxy.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npixiu gateway start -c /pixiu/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connections via File Mapping in Dubbo\nDESCRIPTION: These snippets show how to use file mapping for configuring multiple direct connections. The first command specifies the mapping file path, and the properties file content maps service names to provider URLs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/explicit-target.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -Ddubbo.resolve.file=xxx.properties\n```\n\nLANGUAGE: properties\nCODE:\n```\ncom.alibaba.xxx.XxxService=dubbo://localhost:20890\n```\n\n----------------------------------------\n\nTITLE: Checking Third-Party Dependencies Compliance in Apache Dubbo\nDESCRIPTION: Shell commands to verify that all third-party dependencies comply with Apache Software Foundation regulations, specifically checking for GPL/LGPL licenses that fall under Category X.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/committer/release-guide_dev.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn license:add-third-party -Dlicense.useMissingFile\nfind . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL\n```\n\n----------------------------------------\n\nTITLE: Dubbo Metrics Histogram Configuration Class Definition\nDESCRIPTION: Configuration class for histogram metrics including bucket definitions and percentile calculations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.nested.HistogramConfig\n```\n\n----------------------------------------\n\nTITLE: Checking RPC Request Completion Status in Java\nDESCRIPTION: This method checks if the RPC request is completed by verifying if a response has been received.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic boolean isDone() {\n    // 通过检测 response 字段为空与否，判断是否收到了调用结果\n    return response != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Dubbo Router Extension\nDESCRIPTION: Maven project structure for implementing a custom RouterFactory extension in Dubbo, showing the required file organization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/router.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxRouterFactory.java (implements RouterFactory interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.cluster.RouterFactory (plain text file, content: xxx=com.xxx.XxxRouterFactory)\n\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Dubbo Quick Start Cards\nDESCRIPTION: HTML layout using Bootstrap cards to display quick start guide options for different Dubbo SDK implementations. The layout includes two cards arranged in a responsive grid for Java and Golang SDKs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/facade-docs/how/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4 mb-md-0\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href=\"/en/docs/v2.7/user/quick-start/\">Quick start</a>\n                </h4>\n                <p>Dubbo Java SDK</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4 mb-md-0\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href=\"/en/docs/v3.0/languages/golang/quick-start/\">Quick start</a>\n                </h4>\n                <p>Dubbo Golang SDK</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n```\n\n----------------------------------------\n\nTITLE: 定义Java用户实体类\nDESCRIPTION: 定义一个实现了Serializable接口的User类作为数据传输对象，包含id、name、age和time字段，用于在Dubbo服务之间传输用户数据。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n\tprivate String id;\n\n  private String name;\n\n  private int age;\n\n  private Date time = new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring web.xml for Dubbo REST with External Servlet Container\nDESCRIPTION: Web application deployment descriptor configuration for using Dubbo REST with an external servlet container. Includes context listener and servlet mappings for the API.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n    <context-param> <!-- #1 -->\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/spring/rest-provider.xml</param-value>\n    </context-param>\n\n    <listener>\n        <listener-class>com.alibaba.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <servlet> <!-- #2 -->\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/api/*</url-pattern>\n    </servlet-mapping>\n\n\n```\n\n----------------------------------------\n\nTITLE: Output of Keyword-Filtered Monitoring Metrics Command in Dubbo\nDESCRIPTION: Example output from the 'metrics_default' command with filters showing only registry-related metrics for the specified application, including subscription numbers and disabled directory counts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo> metrics_default dubbo-springboot-demo-provider registry\ndubbo.registry.subscribe.num.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,ip=10.224.214.80,} 0.0\ndubbo.registry.directory.num.disable.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,interface=dubbo-springboot-demo-provider/org.apache.dubbo.metrics.service.MetricsService:1.0.0,ip=10.224.214.80,} 0.0\n```\n\n----------------------------------------\n\nTITLE: Using count Command in Dubbo QoS\nDESCRIPTION: Shows service or method call count statistics. Only supports Dubbo protocol (not Triple protocol) and depends on Active/Limit Filter implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/qos-list.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncount org.demo.DemoService\ncount org.demo.DemoService methodName\n```\n\n----------------------------------------\n\nTITLE: Post-processing After ScopeModel Change in ServiceConfig\nDESCRIPTION: This method initializes the protocol and proxy factory objects after the ScopeModel has changed in ServiceConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Override\n    protected void postProcessAfterScopeModelChanged(ScopeModel oldScopeModel, ScopeModel newScopeModel) {\n        super.postProcessAfterScopeModelChanged(oldScopeModel, newScopeModel);\n        protocolSPI = this.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        proxyFactory = this.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n    }\n```\n\n----------------------------------------\n\nTITLE: Consuming Dubbo Service with Spring Context\nDESCRIPTION: Java code to start a Dubbo Consumer by loading the Spring XML configuration. Creates a context, retrieves the service reference, creates a request, invokes the remote service, and prints the result.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n  ClassPathXmlApplicationContext context = \n    new ClassPathXmlApplicationContext(\"spring/dubbo-consumer.xml\");\n  context.start();\n  IDemoService demoService = context.getBean(\"demoService\", IDemoService.class);\n  HelloRequest request = HelloRequest.newBuilder().setName(\"Hello\").build();\n  HelloReply reply = demoService.sayHello(request);\n  System.out.println(\"result: \" + reply.getMessage());\n  System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Pixiu Documentation Link\nDESCRIPTION: This YAML frontmatter configures a documentation page for Pixiu in the Apache Dubbo website. It sets the page to render as a link to another section, defines the page title, description, type, and weight in the navigation structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/pixiu.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n_build:\n    render: link\ndescription: Pixiu\nmanualLinkRelref: ./#pixiu\ntitle: Pixiu\ntype: docs\nweight: 80\n---\n```\n\n----------------------------------------\n\nTITLE: 创建Dubbo客户端调用服务\nDESCRIPTION: 使用Dubbo客户端SDK访问服务。这个TypeScript代码创建一个Promise客户端，配置传输层，并调用ExampleService的Say方法。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createPromiseClient } from \"@apachedubbo/dubbo\";\nimport { ExampleService } from \"./gen/example_dubbo\";\nimport { createDubboTransport } from \"@apachedubbo/dubbo-node\";\n\nconst transport = createDubboTransport({\n  baseUrl: \"http://localhost:8080\",\n  httpVersion: \"1.1\",\n});\n\nasync function main() {\n  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });\n  const res = await client.say({ sentence: \"Hello World\" });\n  console.log(res);\n}\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Consuming Generic Services in Dubbo Client\nDESCRIPTION: This snippet demonstrates how to consume services that are implemented generically on the provider side. It configures and obtains references to multiple services, then makes regular (non-generic) calls to these services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"api-generic-consumer\");\n\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://127.0.0.1:2181\");\n\napplication.setRegistry(registry);\n\nReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();\n// 弱类型接口名\nreference.setInterface(HiService.class);\nreference.setApplication(application);\n\nHiService hiService = (HiService) reference.get();\nSystem.out.println(hiService.hi(\"dubbo\"));\n\nReferenceConfig<GenericService> reference2 = new ReferenceConfig<GenericService>();\n// 弱类型接口名\nreference2.setInterface(HelloService.class);\nreference2.setApplication(application);\n\nHelloService helloService = (HelloService) reference2.get();\nSystem.out.println(helloService.hello(\"community\"));\n```\n\n----------------------------------------\n\nTITLE: RESTEasy API Definition for Dubbo Service\nDESCRIPTION: This interface defines a REST API using RESTEasy/JAX-RS annotations. It exposes methods for GET and POST operations with parameter binding via @QueryParam and request body. The interface includes an additional method for internal state checking not exposed via REST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/demoService\")\npublic interface RestDemoService {\n    @GET\n    @Path(\"/hello\")\n    Integer hello(@QueryParam(\"a\")Integer a, @QueryParam(\"b\") Integer b);\n\n    @GET\n    @Path(\"/error\")\n    String error();\n\n    @POST\n    @Path(\"/say\")\n    @Consumes({MediaType.TEXT_PLAIN})\n    String sayHello(String name);\n\n    boolean isCalled();\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing All Metadata\nDESCRIPTION: Main method to trigger publication of all metadata reports\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nvoid publishAll() {\n        logger.info(\"start to publish all metadata.\");\n        this.doHandleMetadataCollection(allMetadataReports);\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Services for v1 Routing in Istio\nDESCRIPTION: This command applies virtual services to route all traffic to v1 of each microservice in the Bookinfo application using Istio.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Configuring RMI Protocol in dubbo.properties\nDESCRIPTION: A simple configuration in dubbo.properties file to set RMI as the service protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.service.protocol=rmi\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Round Robin for Multi-Registry Load Balancing\nDESCRIPTION: XML configuration example showing how to set up weighted load balancing between multiple registries. This allows distributing traffic between different registry clusters according to specified weights.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/releases/2.7.5.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Addresses from Beijing and Shanghai clusters will distribute traffic at a ratio of 10:1 -->\n<dubbo:registry id=\"beijing\" address=\"zookeeper://${zookeeper.address1}\" weight=\"100\" />\n<dubbo:registry id=\"shanghai\" address=\"zookeeper://${zookeeper.address2}\" weight=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-side Concurrent Calls at Method Level in XML\nDESCRIPTION: XML configuration to limit the concurrent call count of the sayHello method in com.foo.BarService to a maximum of 10 per client.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" actives=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Multiple Read Stream Operations in Dubbo Python\nDESCRIPTION: Shows how to continuously read from a stream with timeout handling and EOF detection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwhile True:\n    i = stream.read(timeout=0.5)\n    if i is dubbo.classes.EOF:\n        break\n    elif i is None:\n        print(\"No message received\")\n        continue\n    print(f\"Received response: {i.message}\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Observability Components Table\nDESCRIPTION: A markdown table structure defining the schema for documenting observability components and their plugin requirements in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Component Name   | Required Plugin | Plugin Version | Notes |\n| ---------------- | ---------------- | ---------------- | ---- |\n| Micrometer       |                  |                  |      |\n```\n\n----------------------------------------\n\nTITLE: DefaultApplicationDeployer Start Method Implementation\nDESCRIPTION: Illustrates the main logic of the DefaultApplicationDeployer's start method, which handles application state transitions, initialization of core components, and module startup while preventing duplicate startups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public Future start() {\n    \t//启动锁，防止重复启动\n        synchronized (startLock) {\n            //发布器,状态已经设置为停止或者失败了就直接抛出异常\n            if (isStopping() || isStopped() || isFailed()) {\n                throw new IllegalStateException(getIdentifier() + \" is stopping or stopped, can not start again\");\n            }\n\n            try {\n                // maybe call start again after add new module, check if any new module\n                //可能在添加新模块后再次调用start，检查是否有任何新模块\n                //这里遍历当前应用程序下的所有模块如果某个模块是PENDING状态则这里hasPendingModule的值为true\n                boolean hasPendingModule = hasPendingModule();\n\t\t\t\t//发布器状态正在启动中\n                if (isStarting()) {\n                    // currently, is starting, maybe both start by module and application\n                    // if it has new modules, start them\n                    //存在挂起的模块\n                    if (hasPendingModule) {\n                     \t//启动模块\n                        startModules();\n                    }\n                    // if it is starting, reuse previous startFuture\n                    //模块异步启动中\n                    return startFuture;\n                }\n\n                // if is started and no new module, just return\n                //如果已启动且没有新模块，直接返回\n                if (isStarted() && !hasPendingModule) {\n                    return CompletableFuture.completedFuture(false);\n                }\n\n                // pending -> starting : first start app\n                // started -> starting : re-start app\n                //启动状态切换，将启动状态切换到STARTING（pending和started状态无需切换）\n                onStarting();\n\t\t\t\t//核心初始化逻辑，这里主要做一些应用级别启动比如配置中心，元数据中心\n                initialize();\n\t\t\t\t//启动模块（我们的服务提供和服务引用是在这个模块级别的）\n                doStart();\n            } catch (Throwable e) {\n                onFailed(getIdentifier() + \" start failure\", e);\n                throw e;\n            }\n\n            return startFuture;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: XML Output Example from Wrapper Object in Dubbo REST\nDESCRIPTION: Example of XML output format when using a wrapper object for returning primitive values from REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<registrationResult>\n    <id>1002</id>\n</registrationResult>\n```\n\n----------------------------------------\n\nTITLE: Debug Output from Dubbo-Go CLI\nDESCRIPTION: Client-side debug output showing request object creation, connection details, and response handling with timing information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &{ID:A000 Male:true SubInfo:0xc00006ea20 JavaClassName:com.ikurento.user.CallUserStruct}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &{SubID:A001 SubMale:false SubAge:18 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 Created pkg:\n2020/10/26 20:47:45 &{ID: Name: Age:0 JavaClassName:com.ikurento.user.User SubInfo:0xc00006ec90}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &{SubID: SubMale:false SubAge:0 JavaClassName:com.ikurento.user.SubInfo}\n\n\n2020/10/26 20:47:45 connected to localhost:20001!\n2020/10/26 20:47:45 try calling interface:com.ikurento.user.UserProvider.GetUser\n2020/10/26 20:47:45 with protocol:dubbo\n\n2020/10/26 20:47:45 After 3ms , Got Rsp:\n2020/10/26 20:47:45 &{ID:A002 Name:Alex Stocks Age:18 JavaClassName: SubInfo:0xc0001241b0}\n2020/10/26 20:47:45 SubInfo:\n2020/10/26 20:47:45 &{SubID:A001 SubMale:false SubAge:18 JavaClassName:}\n```\n\n----------------------------------------\n\nTITLE: Dubbo MetricsConfig Class Definition\nDESCRIPTION: Configuration class for Dubbo metrics collection and reporting. Includes settings for various metrics types and export configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.MetricsConfig\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo 2 Specify Address Plugin Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding the Dubbo 2 specify-address plugin to your project. This is the compatibility version for Dubbo 2.x environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-cluster-specify-address-dubbo2</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Network Interface Configuration Output\nDESCRIPTION: Sample output showing network interface configuration details for newly created TUN and TAP devices.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntap0      Link encap:Ethernet  HWaddr 7a:a2:a8:f1:6b:df\n          BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n\ntun0      Link encap:UNSPEC  HWaddr 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00\n          inet addr:10.154.30.131  P-t-P:10.154.30.131  Mask:255.255.255.255\n          UP POINTOPOINT NOARP MULTICAST  MTU:1500  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:100\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n```\n\n----------------------------------------\n\nTITLE: Implementing QoS Command for DefaultMetricsReporter in Java\nDESCRIPTION: This snippet shows the implementation of a QoS command that uses DefaultMetricsReporter to retrieve specific metric data. It refreshes the data and calls getResponseWithName to get the metric value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n//Qos命令\npublic class DefaultMetricsReporterCmd implements BaseCommand {\n...\nprivate String getResponseByApplication(ApplicationModel applicationModel, String metricsName) {\n        String response = \"DefaultMetricsReporter not init\";\n        MetricsReporter metricsReporter = applicationModel.getBeanFactory().getBean(DefaultMetricsReporter.class);\n        if (metricsReporter != null) {\n            metricsReporter.refreshData();\n            //获取指定名称指标的数据\n            response = metricsReporter.getResponseWithName(metricsName);\n        }\n        return response;\n    }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export with Java API in Dubbo\nDESCRIPTION: Java API configuration for enabling multiple protocols on the same port in Dubbo. The ProtocolConfig is set with Triple as the main protocol and Dubbo as an extension protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nProtocolConfig config = new ProtocolConfig(CommonConstants.TRIPLE, -1);\n\nconfig.setExtProtocol(CommonConstants.DUBBO+\",\");\n```\n\n----------------------------------------\n\nTITLE: Consuming Dubbo Service with gRPC Protocol in Java\nDESCRIPTION: Java code to consume the Dubbo service using the gRPC protocol. It initializes the Spring context, retrieves the service reference, and makes a service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n  ClassPathXmlApplicationContext context =\n    new ClassPathXmlApplicationContext(\"spring/dubbo-demo-consumer.xml\");\n  context.start();\n\n  GreeterGrpc.IGreeter greeter = (GreeterGrpc.IGreeter) context.getBean(\"greeter\");\n\n  HelloReply reply = greeter.sayHello(HelloRequest.newBuilder().setName(\"world!\").build());\n  System.out.println(\"Result: \" + reply.getMessage());\n\n  System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Default ApplicationModel in FrameworkModel\nDESCRIPTION: Method to reset the default ApplicationModel in FrameworkModel. It selects the first public ApplicationModel as the default and logs the change when the global default application is being reset.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void resetDefaultAppModel() {\n        synchronized (instLock) {\n            if (this.defaultAppModel != null && !this.defaultAppModel.isDestroyed()) {\n                return;\n            }\n            //取第一个公开的应用模型做为默认应用模型\n            ApplicationModel oldDefaultAppModel = this.defaultAppModel;\n            if (pubApplicationModels.size() > 0) {\n                this.defaultAppModel = pubApplicationModels.get(0);\n            } else {\n                this.defaultAppModel = null;\n            }\n            if (defaultInstance == this && oldDefaultAppModel != this.defaultAppModel) {\n                if (LOGGER.isInfoEnabled()) {\n                    LOGGER.info(\"Reset global default application from \" + safeGetModelDesc(oldDefaultAppModel) + \" to \" + safeGetModelDesc(this.defaultAppModel));\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring HelloService as a Dubbo Service Provider\nDESCRIPTION: XML configuration for exposing HelloServiceImpl as a Dubbo service using Zookeeper as the registry center and Dubbo's native protocol on port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n    <!-- Define the application name for HelloService -->\n    <dubbo:application name=\"hello-service-provider\"/>\n\n    <!-- Specify the registry address -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n    <!-- Use Dubbo's native protocol to expose service on port 20880 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n    <!-- Declare the implementation of HelloServiceImpl as a spring bean -->\n    <bean id=\"helloService\" class=\"com.alibaba.dubbo.samples.service.hello.HelloServiceImpl\"/>\n\n    <!-- Declare HelloServiceImpl as a Dubbo service -->\n    <dubbo:service interface=\"com.alibaba.dubbo.samples.api.HelloService\" ref=\"helloService\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Stack/Admin using dubboctl\nDESCRIPTION: 使用 dubboctl 命令行工具安装 Dubbo Stack/Admin，通过统一入口将治理组件的安装和配置纳入 Dubbo 体系中的前置步骤，屏蔽架构差异。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install dubbo-stack\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixiu Listener in YAML\nDESCRIPTION: YAML configuration snippet for setting up a Pixiu listener, specifying the protocol, address, port and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/pixiu/dubbo-go-pixiu-animal.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners: \n  - name: \"net/http\" \n    address: \n      socket_address: \n        protocol_type: \"HTTP\" \n        address: \"0.0.0.0\" \n        port: 8888 \n    config: \n      idle_timeout: 5s \n      read_timeout: 5s \n      write_timeout: 5s\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Pixiu Documentation Link\nDESCRIPTION: This YAML frontmatter configures a documentation page for Pixiu in the Apache Dubbo website. It sets the page to render as a link to another section, defines the page title, description, type, and weight in the navigation structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/pixiu.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n_build:\n    render: link\ndescription: Pixiu\nmanualLinkRelref: ./#pixiu\ntitle: Pixiu\ntype: docs\nweight: 80\n---\n```\n\n----------------------------------------\n\nTITLE: Extension Creation Implementation in Java\nDESCRIPTION: Core logic for creating and wrapping SPI extensions in Dubbo, including wrapper class handling and initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nprivate T createExtension(String name, boolean wrap) {\n\tClass<?> clazz = getExtensionClasses().get(name);\n\tT instance = (T) extensionInstances.get(clazz);\n\t// ...\n\tif (wrap) { // If the caller indicates that AOP is needed, i.e., wrap=true\n\t\tList<Class<?>> wrapperClassesList = new ArrayList<>();\n\t\tif (cachedWrapperClasses != null) {\n\t\t\twrapperClassesList.addAll(cachedWrapperClasses);\n\t\t\twrapperClassesList.sort(WrapperComparator.COMPARATOR);\n\t\t\tCollections.reverse(wrapperClassesList);\n\t\t}\n\n\t\tif (CollectionUtils.isNotEmpty(wrapperClassesList)) {\n\t\t\tfor (Class<?> wrapperClass : wrapperClassesList) {\n\t\t\t    // Use @Wrapper annotation to determine whether the current wrapper class should take effect\n\t\t\t\tWrapper wrapper = wrapperClass.getAnnotation(Wrapper.class);\n\t\t\t\tboolean match = (wrapper == null)\n\t\t\t\t\t\t|| ((ArrayUtils.isEmpty(wrapper.matches())\n\t\t\t\t\t\t\t\t\t|| ArrayUtils.contains(wrapper.matches(), name))\n\t\t\t\t\t\t\t\t&& !ArrayUtils.contains(wrapper.mismatches(), name));\n\t\t\t\tif (match) {\n\t\t\t\t\tinstance = injectExtension(\n\t\t\t\t\t\t\t(T) wrapperClass.getConstructor(type).newInstance(instance));\n\t\t\t\t\tinstance = postProcessAfterInitialization(instance, name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a REST Service Method with Long Return Type in Java\nDESCRIPTION: Shows a JAX-RS service method signature returning a primitive long type, which requires a wrapper object for proper XML serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nlong registerUser(User user);\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper in Docker Container\nDESCRIPTION: Command to start a Zookeeper instance in Docker with port 2181 exposed to the host machine. The --rm flag ensures container cleanup after stopping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --name zookeeper -p 2181:2181 zookeeper\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Server in YAML\nDESCRIPTION: YAML configuration for the Dubbo Server, registering the Dubbo2 protocol interface 'com.dubbogo.pixiu.UserService'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/quickstart.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    zk:\n      protocol: zookeeper\n      timeout: 3s\n      address: 127.0.0.1:2181\n  protocols:\n    dubbo:\n      name: dubbo\n      port: 20000\n  provider:\n    registry-ids: zk\n    services:\n      UserProvider:\n        group: test\n        version: 1.0.0\n        cluster: test_dubbo\n        serialization: hessian2\n        interface: com.dubbogo.pixiu.UserService\n```\n\n----------------------------------------\n\nTITLE: Implementing Script Routing Rule in Dubbo YAML and JavaScript\nDESCRIPTION: This snippet demonstrates a script routing rule in Dubbo using YAML for configuration and JavaScript for the routing logic. It filters invokers based on a specific host address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nkey: demo-provider\ntype: javascript\nenabled: true\nscript: |\n  (function route(invokers,invocation,context) {\n      var result = new java.util.ArrayList(invokers.size());\n      for (i = 0; i < invokers.size(); i ++) {\n          if (\"10.20.3.3\".equals(invokers.get(i).getUrl().getHost())) {\n              result.add(invokers.get(i));\n          }\n      }\n      return result;\n  } (invokers, invocation, context));\n```\n\n----------------------------------------\n\nTITLE: Installing dubbo2.js in Node.js\nDESCRIPTION: This command installs the dubbo2.js library using npm for Node.js projects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dubbo2.js --save\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Services for v1 Routing in Istio\nDESCRIPTION: Command to apply virtual services that route all traffic to v1 of each microservice in the Bookinfo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Configuring Unicast Parameter in Application Element for Dubbo Consumer\nDESCRIPTION: XML configuration to disable unicast mode at the application level for Dubbo consumers, necessary when multiple consumers run on the same machine or when provider and consumer are on the same machine.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/multicast.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"demo-consumer\">\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:application>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Failover Strategy for Service Consumer in Dubbo\nDESCRIPTION: XML configuration for setting the failover strategy with retry count at the method level for a service consumer. This provides the highest precedence configuration for retry behavior.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.demo.DemoService\" cluster=\"failover\">\n     <dubbo:method name=\"sayHello\" retries=\"3\" />\n </dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Router Snapshots in Dubbo\nDESCRIPTION: Example output of the getRecentRouterSnapshot QoS command in Dubbo, showing detailed router snapshots for a service. This includes information on various routers in the chain such as MockInvokersSelector, StandardMeshRuleRouter, TagStateRouter, ServiceStateRouter, and AppStateRouter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/router-snapshot.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>getRecentRouterSnapshot\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: \n[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880\n  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n      [ TagStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Disable Tag Router. Reason: tagRouterRule is invalid or disabled ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n        [ ServiceStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n          [ AppStateRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: Directly return. Reason: Invokers from previous router is empty or conditionRouters is empty. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880\n\n···\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Node.js Dependencies\nDESCRIPTION: Command to install required Protocol Buffer and Dubbo dependencies for Node.js development\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo Mesh Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Dubbo Mesh documentation page, including aliases, description, title, and navigation settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/docs3-v2/java-sdk/reference-manual/mesh/\n    - /en/docs3-v2/java-sdk/reference-manual/mesh/\ndescription: Dubbo Mesh User Guide\nlinkTitle: Mesh Manual\ntitle: Mesh Manual\ntype: docs\nweight: 98\ntoc_hide: true\n```\n\n----------------------------------------\n\nTITLE: Starting Delve debugger in Kubernetes pod\nDESCRIPTION: Executes the Delve debugger inside the Istio Pilot pod for remote debugging.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndlv --listen=:8015 --headless=true --api-version=2 --log attach `ps -ef |grep pilot-discovery| awk '{print $2}'`\n```\n\n----------------------------------------\n\nTITLE: Formatting Successful HTTP Response in Triple Protocol\nDESCRIPTION: Demonstrates the format of a successful HTTP response in the Triple protocol, including status code, content type, and body.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 11\n\nhello world\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Registry Address in Dubbo XML\nDESCRIPTION: This snippet shows how to configure the Multicast registry address in Dubbo's XML configuration. It sets the multicast address and port for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/multicast.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry address=\"multicast://224.5.6.7:1234\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry protocol=\"multicast\" address=\"224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Router Rules in YAML\nDESCRIPTION: YAML configuration for router_config.yml file which defines condition routing rules including priority, force execution setting, and condition expressions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# dubbo router yaml configure file\npriority: 1\nforce: true\nconditions : [\"host = 1.1.1.1 => host = 192.168.199.214\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Mock Admin Dependency in Maven\nDESCRIPTION: XML configuration for adding the Dubbo Mock Admin dependency to a Maven project. This dependency is required to enable service mocking functionality for consumer applications, which allows intercepting requests to providers and returning custom mock data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/console.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<denpendency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-mock-admin</artifactId>\n  <version>${version}</version>\n</denpendency>\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Consumer Configuration in Java\nDESCRIPTION: Java code to load the Spring XML configuration for the Dubbo service consumer and invoke the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/dubbo-demo-consumer.xml\");\n        context.start();\n        GreetingsService greetingsService = (GreetingsService) context.getBean(\"greetingsService\");\n\n        String message = greetingsService.sayHi(\"dubbo\");\n        System.out.println(\"Receive result ======> \" + message);\n        System.in.read();\n        System.exit(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Random LoadBalance Implementation in Go\nDESCRIPTION: Example of registering a random load balancing implementation using the init() function pattern. Shows how extensions are registered with the extension module.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage random\n\nimport (\n\t\"math/rand\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/extension\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol\"\n)\n\nfunc init() {\n\textension.SetLoadbalance(constant.LoadBalanceKeyRandom, NewRandomLoadBalance)\n}\n```\n\n----------------------------------------\n\nTITLE: 配置Dubbo消息派发扩展的XML示例\nDESCRIPTION: 通过dubbo:protocol标签指定dispatcher属性，或通过dubbo:provider标签设置默认派发器。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/impls/dispatcher.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol dispatcher=\"xxx\" />\n<!-- 缺省值设置，当<dubbo:protocol>没有配置dispatcher属性时，使用此配置 -->\n<dubbo:provider dispatcher=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service Interface in Dubbo\nDESCRIPTION: Java implementation of the UserService interface with simple business logic. The implementation handles the REST operations defined in the interface without needing to add the JAX-RS annotations again.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class UserServiceImpl implements UserService {\n    private final AtomicLong id = new AtomicLong();\n\n    public User getUser(Long id) {\n        return new User(id, \"username-\" + id);\n    }\n\n    public Long registerUser(User user) {\n        return id.incrementAndGet();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RMI Response Timeout via Java Command Line Arguments\nDESCRIPTION: Command line argument to configure the timeout parameter for RMI responses, as Dubbo's timeout configuration doesn't affect RMI protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njava -Dsun.rmi.transport.tcp.responseTimeout=3000\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Metadata Storage Dependency in Maven\nDESCRIPTION: XML snippet to add the Dubbo Redis metadata storage dependency to a Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-metadata-report-redis</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Service in Dubbo XML\nDESCRIPTION: Configures the CallbackService in Dubbo XML, specifying the callback argument in the addListener method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-invoke.md#2025-04-08_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"callbackService\" class=\"com.alibaba.dubbo.samples.callback.impl.CallbackServiceImpl\"/>\n\n<dubbo:service interface=\"com.alibaba.dubbo.samples.callback.api.CallbackService\" ref=\"callbackService\" connections=\"1\" callbacks=\"1000\">\n    <dubbo:method name=\"addListener\">\n        <dubbo:argument index=\"1\" callback=\"true\"/>\n        <!--<dubbo:argument type=\"com.demo.CallbackListener\" callback=\"true\" />-->\n    </dubbo:method>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Consumer Configuration in Java\nDESCRIPTION: Java code to load the Spring XML configuration for the Dubbo service consumer and invoke the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/dubbo-demo-consumer.xml\");\n        context.start();\n        GreetingsService greetingsService = (GreetingsService) context.getBean(\"greetingsService\");\n\n        String message = greetingsService.sayHi(\"dubbo\");\n        System.out.println(\"Receive result ======> \" + message);\n        System.in.read();\n        System.exit(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Readiness Probe Extension\nDESCRIPTION: Shows the required project directory structure for implementing a custom Readiness probe extension, including Java source and resource files placement.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxReadinessProbe.java (实现ReadinessProbe接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.ReadinessProbe (纯文本文件，内容为：xxx=com.xxx.XxxReadinessProbe)\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Mock Admin Dependency in Maven\nDESCRIPTION: XML configuration for adding the Dubbo Mock Admin dependency to a Maven project. This dependency is required to enable service mocking functionality for consumer applications, which allows intercepting requests to providers and returning custom mock data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/observability/console.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<denpendency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-mock-admin</artifactId>\n  <version>${version}</version>\n</denpendency>\n```\n\n----------------------------------------\n\nTITLE: doRegister Method in ServiceDiscoveryRegistry\nDESCRIPTION: Implementation of the doRegister method that adds a registry-cluster key to the URL and delegates to the serviceDiscovery to handle the actual registration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n   @Override\n    public void doRegister(URL url) {\n        // fixme, add registry-cluster is not necessary anymore\n        url = addRegistryClusterKey(url);\n        serviceDiscovery.register(url);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Web.xml Configuration for Dubbo REST with External Servlet Container\nDESCRIPTION: Required web.xml configuration when using Dubbo REST with an external servlet container, including listeners and servlet mappings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>\n    </context-param>\n    \n    <listener>\n        <listener-class>org.apache.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n    \n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Tracing Dubbo Filters Using Arthas\nDESCRIPTION: This snippet demonstrates how to use Arthas's trace command to monitor and measure the execution time of different filters in Dubbo's runtime stack. It shows detailed call stacks with timing information for each filter invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ trace com.alibaba.dubbo.rpc.Filter *\nPress Ctrl+C to abort.\nAffect(class-cnt:19 , method-cnt:59) cost in 1441 ms.\n`---ts=2018-12-05 19:07:26;thread_name=DubboServerHandler-30.5.125.152:20880-thread-10;id=3e;is_daemon=true;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@5c647e05\n    `---[8.435844ms] com.alibaba.dubbo.rpc.filter.EchoFilter:invoke()\n        +---[0.124572ms] com.alibaba.dubbo.rpc.Invocation:getMethodName()\n        +---[0.065123ms] java.lang.String:equals()\n        `---[7.762928ms] com.alibaba.dubbo.rpc.Invoker:invoke()\n            `---[7.494124ms] com.alibaba.dubbo.rpc.filter.ClassLoaderFilter:invoke()\n                +---[min=0.00355ms,max=0.049922ms,total=0.057637ms,count=3] java.lang.Thread:currentThread()\n                +---[0.0126ms] java.lang.Thread:getContextClassLoader()\n                +---[0.02188ms] com.alibaba.dubbo.rpc.Invoker:getInterface()\n                +---[0.004115ms] java.lang.Class:getClassLoader()\n                +---[min=0.003906ms,max=0.014058ms,total=0.017964ms,count=2] java.lang.Thread:setContextClassLoader()\n                `---[7.033486ms] com.alibaba.dubbo.rpc.Invoker:invoke()\n                    `---[6.869488ms] com.alibaba.dubbo.rpc.filter.GenericFilter:invoke()\n                        +---[0.01481ms] com.alibaba.dubbo.rpc.Invocation:getMethodName()\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Stream Observer\nDESCRIPTION: Java implementation of a StreamObserver to handle streaming responses on the client side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/streaming.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate static class SampleStreamObserver implements StreamObserver<GreeterReply> {\n\t@Override\n\tpublic void onNext(GreeterReply data) {\n\t\tLOGGER.info(\"stream <- reply:{}\", data);\n\t}\n\n\t// ......\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Java Interface from Protobuf\nDESCRIPTION: Shows a Java interface generated from a Protobuf definition, including methods for unary, server streaming, and bidirectional streaming calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/migration/migration-triple.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface PbGreeter {\n\n    static final String JAVA_SERVICE_NAME = \"org.apache.dubbo.sample.tri.PbGreeter\";\n    static final String SERVICE_NAME = \"org.apache.dubbo.sample.tri.PbGreeter\";\n\n    static final boolean inited = PbGreeterDubbo.init();\n\n    org.apache.dubbo.sample.tri.GreeterReply greet(org.apache.dubbo.sample.tri.GreeterRequest request);\n\n    default CompletableFuture<org.apache.dubbo.sample.tri.GreeterReply> greetAsync(org.apache.dubbo.sample.tri.GreeterRequest request){\n        return CompletableFuture.supplyAsync(() -> greet(request));\n    }\n\n    void greetServerStream(org.apache.dubbo.sample.tri.GreeterRequest request, org.apache.dubbo.common.stream.StreamObserver<org.apache.dubbo.sample.tri.GreeterReply> responseObserver);\n\n    org.apache.dubbo.common.stream.StreamObserver<org.apache.dubbo.sample.tri.GreeterRequest> greetStream(org.apache.dubbo.common.stream.StreamObserver<org.apache.dubbo.sample.tri.GreeterReply> responseObserver);\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Profiler Log Output Example in Java\nDESCRIPTION: Example log output from Dubbo's detailed profiler mode, showing more granular timing information for a consumer-side request, including filter execution times.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/profiler.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[19/07/22 07:10:59:059 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 990.828336 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\ninvocation context:\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 285965458479241\n+-[ Offset: 0.000000ms; Usage: 990.828336ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi\n  +-[ Offset: 0.852044ms; Usage: 989.899439ms, 99% ] Filter org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter invoke.\n     +-[ Offset: 1.814858ms; Usage: 988.924876ms, 99% ] Filter org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter invoke.\n        +-[ Offset: 1.853211ms; Usage: 988.877928ms, 99% ] Filter org.apache.dubbo.monitor.support.MonitorClusterFilter invoke.\n           +-[ Offset: 1.873243ms; Usage: 988.661708ms, 99% ] Filter org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter invoke.\n              +-[ Offset: 2.159140ms; Usage: 0.504939ms, 0% ] Router route.\n              +-[ Offset: 8.125823ms; Usage: 981.748366ms, 99% ] Cluster org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker invoke.\n                 +-[ Offset: 8.258359ms; Usage: 981.612033ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Module Environment in Dubbo\nDESCRIPTION: The getModelEnvironment() method lazily loads the ModuleEnvironment using the extension loader mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public ModuleEnvironment getModelEnvironment() {\n        if (moduleEnvironment == null) {\n            moduleEnvironment = (ModuleEnvironment) this.getExtensionLoader(ModuleExt.class)\n                .getExtension(ModuleEnvironment.NAME);\n        }\n        return moduleEnvironment;\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Check via XML Configuration\nDESCRIPTION: XML configuration examples showing how to disable startup checks for a specific service, all consumer services, or the registry connection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/preflight-check.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" check=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer check=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry check=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Inspecting Custom ExecutorRepository Implementation in Java\nDESCRIPTION: To resolve the shutdown exception, check if a custom implementation of org.apache.dubbo.common.threadpool.manager.ExecutorRepository is being used. Examine the custom shutdown method for potential issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/17.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.dubbo.common.threadpool.manager.ExecutorRepository\n```\n\n----------------------------------------\n\nTITLE: Implementing SayHello Method for Version 2\nDESCRIPTION: Modified implementation of the SayHello method in the GreeterServerImpl to return version number v2.0.0 as identifier for the new service version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *GreeterServerImpl) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {\n\treturn &api.User{Name: \"Hello \" + in.Name, Id: \"v2.0.0\"}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Metadata Storage Task\nDESCRIPTION: Executes the actual storage of provider metadata including error handling and retry logic\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate void storeProviderMetadataTask(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {\n        try {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"store provider metadata. Identifier : \" + providerMetadataIdentifier + \"; definition: \" + serviceDefinition);\n            }\n            allMetadataReports.put(providerMetadataIdentifier, serviceDefinition);\n            failedReports.remove(providerMetadataIdentifier);\n            Gson gson = new Gson();\n            String data = gson.toJson(serviceDefinition);\n             //内存中的元数据同步到元数据中心\n            doStoreProviderMetadata(providerMetadataIdentifier, data);\n            //内存中的元数据同步到本地文件\n            saveProperties(providerMetadataIdentifier, data, true, !syncReport);\n        } catch (Exception e) {\n            // retry again. If failed again, throw exception.\n            failedReports.put(providerMetadataIdentifier, serviceDefinition);\n            metadataReportRetry.startRetryTask();\n            logger.error(\"Failed to put provider metadata \" + providerMetadataIdentifier + \" in  \" + serviceDefinition + \", cause: \" + e.getMessage(), e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Public Key to KEYS File\nDESCRIPTION: Command to append the user's GPG public key to the KEYS file for release verification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg -a --export your_key_id >> KEYS\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Public Key to KEYS File\nDESCRIPTION: Command to append the user's GPG public key to the KEYS file for release verification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg -a --export your_key_id >> KEYS\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Java Documentation\nDESCRIPTION: YAML configuration block that defines metadata and rendering settings for a Java documentation page. Specifies build rendering as link, sets description and title to 'Java', configures manual link reference, sets type to docs, and assigns a weight of 10 for ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/java.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Java\nmanualLinkRelref: ./#java\ntitle: Java\ntype: docs\nweight: 10\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Defines a DemoService interface with synchronous and asynchronous methods for a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/19-重新来过从一个服务消费者的Demo说起.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface DemoService {\n    String sayHello(String name);\n\n    default CompletableFuture<String> sayHelloAsync(String name) {\n        return CompletableFuture.completedFuture(sayHello(name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protoc on macOS using Homebrew\nDESCRIPTION: This snippet demonstrates installing Protocol Buffer Compiler on macOS using the Homebrew package manager and checking the installed version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protoc-installation.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install protobuf\n$ protoc --version  # Ensure compiler version is 3+\n```\n\n----------------------------------------\n\nTITLE: Configuring heuristicSmoothingFlowControl in Properties File\nDESCRIPTION: Enables the heuristicSmoothingFlowControl adaptive flow control algorithm at the provider level using properties configuration. This algorithm checks CPU usage and adjusts request acceptance accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/adaptive-concurrency-control.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.provider.flowcontrol=heuristicSmoothingFlowControl\n```\n\n----------------------------------------\n\nTITLE: Adaptive Extension Class Generation\nDESCRIPTION: Method to generate the adaptive extension class code and compile it\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate Class<?> createAdaptiveExtensionClass() {\n    String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\n    ClassLoader classLoader = findClassLoader();\n    org.apache.dubbo.common.compiler.Compiler compiler = ExtensionLoader.getExtensionLoader(org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n    return compiler.compile(code, classLoader);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Access Log Format in Dubbo\nDESCRIPTION: Example of access log output format from a Dubbo application showing timestamp, IP addresses, service method calls, and parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[2022-12-30 12:36:31.15900] -> [2022-12-30 12:36:31.16000] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService login(java.lang.String,java.lang.String) [\"test\",\"\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:33.95900] -> [2022-12-30 12:36:33.95900] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:31.93500] -> [2022-12-30 12:36:34.93600] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n```\n\n----------------------------------------\n\nTITLE: Viewing Access Log Format in Dubbo\nDESCRIPTION: Example of access log output format from a Dubbo application showing timestamp, IP addresses, service method calls, and parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[2022-12-30 12:36:31.15900] -> [2022-12-30 12:36:31.16000] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService login(java.lang.String,java.lang.String) [\"test\",\"\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:33.95900] -> [2022-12-30 12:36:33.95900] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n[2022-12-30 12:36:31.93500] -> [2022-12-30 12:36:34.93600] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) [\"test\"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103\n```\n\n----------------------------------------\n\nTITLE: Destroying Cached ReferenceConfig in Java\nDESCRIPTION: Shows how to properly destroy and remove a ReferenceConfig from the cache, ensuring proper resource cleanup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/reference-config-cache.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\ncache.destroy(reference);\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Server in Dubbo HTTP Protocol\nDESCRIPTION: Configuration for using Jetty as the HTTP server implementation (default option).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/http.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol ... server=\"jetty\" />\n```\n\n----------------------------------------\n\nTITLE: Port forwarding for remote debugging\nDESCRIPTION: Sets up port forwarding to allow remote debugging connection to the Delve debugger running in the Kubernetes pod.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward -n istio-system istiod-fd5d9f77-2ncjq 8015:8015\n```\n\n----------------------------------------\n\nTITLE: Processing plain text in Java Triple server\nDESCRIPTION: Java method for handling plain text requests in Triple. The text content is automatically mapped to a String parameter with proper charset decoding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/support-more-content-types.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    public ServerResponse greetUrlForm(String world){\n        System.out.println(\"Hello:\"+ world);\n        return new ServerResponse(\"Server Received url form.\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Login Credentials in Kubernetes\nDESCRIPTION: This command retrieves the login credentials for the installed Grafana instance from Kubernetes secrets, decoding the base64-encoded username and password.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/grafana.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secrets grafana -o jsonpath=\"{.data.admin-user}\" | base64 --decode ; echo && kubectl get secrets grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Go Consumer\nDESCRIPTION: Demonstrates how to create a Dubbo Go consumer that calls the Java Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-history.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar userProvider = new(UserProvider)\nconfig.SetConsumerService(userProvider)\nhessian.RegisterPOJO(&User{})\n\nvar getUser = func(userId string) (*User, error) {\n    resp, err := userProvider.GetUser(userId)\n    if err != nil {\n        return nil, err\n    }\n    return resp.(*User), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Rust Server with Request Handling\nDESCRIPTION: This code shows how to implement a Dubbo Rust server using the generated stubs from the IDL. It creates a server implementation for the Greeter service, registers it with Dubbo, and starts the server with configuration loaded from a file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/rust/first-release.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    register_server(GreeterServerImpl {\n        name: \"greeter\".to_string(),\n    });\n\n    // Dubbo::new().start().await;\n    Dubbo::new()\n        .with_config({\n            let r = RootConfig::new();\n            match r.load() {\n                Ok(config) => config,\n                Err(_err) => panic!(\"err: {:?}\", _err), // response was droped\n            }\n        })\n        .start()\n        .await;\n}\n\nstruct GreeterServerImpl {\n    name: String,\n}\n\nimpl Greeter for GreeterServerImpl {\n    async fn greet(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        println!(\"GreeterServer::greet {:?}\", request.metadata);\n\n        Ok(Response::new(GreeterReply {\n            message: \"hello, dubbo-rust\".to_string(),\n        }))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common Scope Model Initializer in Dubbo\nDESCRIPTION: Implementation of CommonScopeModelInitializer that registers FrameworkExecutorRepository into the bean factory of the framework model. This handles common execution resources used by the framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CommonScopeModelInitializer implements ScopeModelInitializer {\n    @Override\n    public void initializeFrameworkModel(FrameworkModel frameworkModel) {\n        ScopeBeanFactory beanFactory = frameworkModel.getBeanFactory();\n        beanFactory.registerBean(FrameworkExecutorRepository.class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider Bootstrap with XML Configuration\nDESCRIPTION: Java class that bootstraps a Dubbo service provider using XML-based configuration by loading the context from an XML file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.provider;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} provider demo XML bootstrap\n */\npublic class DemoServiceProviderXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-provider-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService provider (XML) is starting...\");\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Protocol Parameters in Dubbo XML\nDESCRIPTION: This snippet shows an alternative way to set custom parameters for a Dubbo protocol configuration. It uses the p: namespace to set a queue parameter for the JMS protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/xml/dubbo-parameter.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"jms\" p:queue=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing WeightedRoundRobin Class for Dubbo Load Balancing in Java\nDESCRIPTION: This snippet defines the WeightedRoundRobin class used in Dubbo's load balancing. It manages weight, current value, and last update time for each invoker. The class provides methods to set weight, increase current value, and select invokers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate AtomicLong current = new AtomicLong(0);\n// 最后一次更新时间\nprivate long lastUpdate;\n\npublic void setWeight(int weight) {\n    this.weight = weight;\n    // 初始情况下，current = 0\n    current.set(0);\n}\npublic long increaseCurrent() {\n    // current = current + weight；\n    return current.addAndGet(weight);\n}\npublic void sel(int total) {\n    // current = current - total;\n    current.addAndGet(-1 * total);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Destination Rules in Istio\nDESCRIPTION: This command retrieves and displays the YAML configuration of the destination rules, which define subsets for the Bookinfo microservices.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get destinationrules -o yaml\n```\n\n----------------------------------------\n\nTITLE: UserSpecifiedAddressUtil Class for Setting Address\nDESCRIPTION: The utility class used to set the target address for Dubbo calls. It provides the setAddress method that must be called immediately before making the RPC call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster.specifyaddress;\n\npublic class UserSpecifiedAddressUtil {\n    \n    public static void setAddress(Address address) { ... }\n    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Group References for Dubbo Consumers in XML\nDESCRIPTION: This snippet demonstrates how to reference specific service groups on the consumer side. It uses the 'group' attribute in the dubbo:reference tag to specify which group implementation to use.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-group.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"feedbackIndexService\" group=\"feedback\" interface=\"com.xxx.IndexService\" />\n<dubbo:reference id=\"memberIndexService\" group=\"member\" interface=\"com.xxx.IndexService\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Simple Registry in Dubbo\nDESCRIPTION: XML configuration snippets showing different ways to reference the Simple Registry service, including direct address reference and service group/version specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/simple.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"127.0.0.1:9090\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.registry.RegistryService\" group=\"simple\" version=\"1.0.0\" ... >\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"127.0.0.1:9090\" group=\"simple\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat as REST Server in Dubbo\nDESCRIPTION: XML configuration for setting up Tomcat as the embedded REST server implementation in Dubbo, which is recommended for high-performance scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tomcat\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Status Checker in Dubbo SPI\nDESCRIPTION: Configuration for registering a custom status checker implementation with Dubbo's SPI (Service Provider Interface) mechanism. This properties file maps the custom implementation to a name that can be used in Dubbo configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/status-checker.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxStatusChecker\n```\n\n----------------------------------------\n\nTITLE: Tomcat Server Initialization Log Output in Dubbo\nDESCRIPTION: Sample log output when starting a Dubbo service using embedded Tomcat as the REST server. Shows the initialization of the Tomcat service and HTTP protocol handler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nJan 01, 2019 10:15:12 PM org.apache.catalina.core.StandardContext setPath\nWARNING: A context path must either be an empty string or start with a '/' and do not end with a '/'. The path [/] does not meet these criteria and has been changed to []\nJan 01, 2019 10:15:13 PM org.apache.coyote.AbstractProtocol init\nINFO: Initializing ProtocolHandler [\"http-nio-8080\"]\nJan 01, 2019 10:15:13 PM org.apache.tomcat.util.net.NioSelectorPool getSharedSelector\nINFO: Using a shared selector for servlet write/read\nJan 01, 2019 10:15:13 PM org.apache.catalina.core.StandardService startInternal\nINFO: Starting service [Tomcat]\nJan 01, 2019 10:15:13 PM org.apache.catalina.core.StandardEngine startInternal\nINFO: Starting Servlet Engine: Apache Tomcat/8.5.31\nJan 01, 2019 10:15:13 PM org.apache.coyote.AbstractProtocol start\nINFO: Starting ProtocolHandler [\"http-nio-8080\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Cluster Invoker in Dubbo-Go\nDESCRIPTION: This snippet shows how a cluster invoker is created in Dubbo-Go using the directory and cluster extension. It demonstrates the integration of the directory with a specific cluster strategy to create a failover cluster invoker.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// （四）new cluster invoker，将directory写入集群，获得具有集群策略的invoker\n    cluster := extension.GetCluster(serviceUrl.GetParam(constant.CLUSTER_KEY, constant.DEFAULT_CLUSTER))\n    invoker := cluster.Join(directory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer with Spring XML\nDESCRIPTION: This XML configuration declares a Dubbo service consumer, including application name, registry address, and reference to the remote service. The 'check' attribute ensures the service exists before proceeding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n    <context:property-placeholder/>\n\n    <dubbo:application name=\"demo-consumer\"/>\n\n    <dubbo:registry address=\"zookeeper://${zookeeper.address:127.0.0.1}:2181\"/>\n\n    <dubbo:reference id=\"demoService\" check=\"true\" interface=\"org.apache.dubbo.samples.basic.api.DemoService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Generating Eclipse Project Files\nDESCRIPTION: Maven command to generate project files for Eclipse IDE.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: Importing Dubbo and Zookeeper Dependencies in Maven POM\nDESCRIPTION: This XML snippet demonstrates how to import Dubbo and Zookeeper client dependencies in a Maven project's pom.xml file. It includes the Curator framework for Zookeeper client and the Dubbo framework itself.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <!-- 1. Zookeeper client dependency -->\n    <dependency>\n        <groupId>org.apache.curator</groupId>\n        <artifactId>curator-framework</artifactId>\n        <version>2.12.0</version>\n        <exclusions>\n            <exclusion>\n                <groupId>io.netty</groupId>\n                <artifactId>netty</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <!-- 2. Dubbo dependency -->\n    <dependency>\n        <groupId>com.alibaba</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>2.6.2</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Accessing HttpServletRequest and HttpServletResponse from RpcContext in Java\nDESCRIPTION: Demonstrates how to access the HttpServletRequest and HttpServletResponse objects from Dubbo's RpcContext. This approach provides flexibility for implementing complex features that require HTTP header access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nif (RpcContext.getContext().getRequest() != null && RpcContext.getContext().getRequest() instanceof HttpServletRequest) {\n    System.out.println(\"Client address is \" + ((HttpServletRequest) RpcContext.getContext().getRequest()).getRemoteAddr());\n}\n\nif (RpcContext.getContext().getResponse() != null && RpcContext.getContext().getResponse() instanceof HttpServletResponse) {\n    System.out.println(\"Response object from RpcContext: \" + RpcContext.getContext().getResponse());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct Connection via XML in Dubbo\nDESCRIPTION: This XML snippet shows how to configure a direct connection to a specific service provider using the url attribute in the <dubbo:reference> tag. This method bypasses the registry center for the specified service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/explicit-target.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"xxxService\" interface=\"com.alibaba.xxx.XxxService\" url=\"dubbo://localhost:20890\" />\n```\n\n----------------------------------------\n\nTITLE: Getting Framework Model with ScopeModelUtil in Dubbo\nDESCRIPTION: Implementation of the getFrameworkModel method in ScopeModelUtil, which retrieves the FrameworkModel based on the provided scope model. It navigates the model hierarchy to find the appropriate FrameworkModel instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic static FrameworkModel getFrameworkModel(ScopeModel scopeModel) {\n        if (scopeModel == null) {\n            return FrameworkModel.defaultModel();\n        }\n        //通过成员变量获取(构造器初始化的时候将FrameworkModel赋值给了ApplicationModel的成员变量\n        if (scopeModel instanceof ApplicationModel) {\n        \t//直接获取\n            return ((ApplicationModel) scopeModel).getFrameworkModel();\n        } else if (scopeModel instanceof ModuleModel) {\n            ModuleModel moduleModel = (ModuleModel) scopeModel;\n            //间接通过ApplicationModel获取，不越级获取\n            return moduleModel.getApplicationModel().getFrameworkModel();\n        } else if (scopeModel instanceof FrameworkModel) {\n            return (FrameworkModel) scopeModel;\n        } else {\n            throw new IllegalArgumentException(\"Unable to get FrameworkModel from \" + scopeModel);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Identifying Excessive Instance Creation in Dubbo Java SDK\nDESCRIPTION: This snippet refers to the class responsible for creating too many instances in Dubbo. The issue is related to org.apache.dubbo.common.timer.HashedWheelTimer, which may lead to potential memory leaks if not managed properly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/21.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.common.timer.HashedWheelTimer\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Protocol by Extending DubboProtocol\nDESCRIPTION: Implementation of EnhancedProtocol that wraps the DubboProtocol implementation to add custom functionality. This demonstrates how to create a custom protocol by delegating to an existing protocol implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.extensibility.protocol.common;\n\nimport org.apache.dubbo.common.URL;\nimport org.apache.dubbo.rpc.Protocol;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Exporter;\nimport org.apache.dubbo.rpc.ProtocolServer;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.apache.dubbo.rpc.model.FrameworkModel;\nimport org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;\n\nimport java.util.List;\n\npublic class EnhancedProtocol implements Protocol {\n\n    public EnhancedProtocol(FrameworkModel frameworkModel) {\n        this.protocol = new DubboProtocol(frameworkModel);\n    }\n\n    private final Protocol protocol;\n\n    @Override\n    public int getDefaultPort() {\n        return this.protocol.getDefaultPort();\n    }\n\n    @Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        // do something\n        return this.protocol.export(invoker);\n    }\n\n    @Override\n    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        // do something\n        return this.protocol.refer(type, url);\n    }\n\n    @Override\n    public void destroy() {\n        this.protocol.destroy();\n    }\n\n    @Override\n    public List<ProtocolServer> getServers() {\n        return protocol.getServers();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Method-Level Mock Configuration\nDESCRIPTION: XML configuration example for specifying mock behavior at method level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-mock.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"demoService\" check=\"false\" interface=\"com.foo.BarService\">\n    <dubbo:parameter key=\"sayHello.mock\" value=\"force:return fake\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Extension Loading with Wrapper Support\nDESCRIPTION: Main extension loading implementation that handles caching, wrapper mechanisms and extension creation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic T getExtension(String name, boolean wrap) {\n        checkDestroyed();\n        if (StringUtils.isEmpty(name)) {\n            throw new IllegalArgumentException(\"Extension name == null\");\n        }\n        if (\"true\".equals(name)) {\n            return getDefaultExtension();\n        }\n        String cacheKey = name;\n        if (!wrap) {\n            cacheKey += \"_origin\";\n        }\n        final Holder<Object> holder = getOrCreateHolder(cacheKey);\n        Object instance = holder.get();\n        if (instance == null) {\n            synchronized (holder) {\n                instance = holder.get();\n                if (instance == null) {\n                    instance = createExtension(name, wrap);\n                    holder.set(instance);\n                }\n            }\n        }\n        return (T) instance;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring IdleStateHandler for Dubbo Client in Java\nDESCRIPTION: This code snippet shows how to configure the IdleStateHandler for a Dubbo client using Netty. It sets up a read timeout of 60 seconds for the client channel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nbootstrap.handler(new ChannelInitializer<NioSocketChannel>() {\n    @Override\n    protected void initChannel(NioSocketChannel ch) throws Exception {\n        ch.pipeline().addLast(\"clientIdleHandler\", new IdleStateHandler(60, 0, 0));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Apache Dubbo Homepage\nDESCRIPTION: Steps to set up the development environment and build the Apache Dubbo homepage. This includes SVN checkout, modifying content, building with ANT, and committing changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/apache-dubbo-page_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 1. Install SVN (pre-installed on Mac OS X/Linux, needs installation on Windows)\n# 2. SVN checkout\nsvn checkout https://svn.apache.org/repos/asf/incubator/public/trunk\n\n# 3. Modify content/projects/dubbo.xml\n\n# 4. Install ANT and build\n./build.sh  # or build.bat on Windows\n\n# 5. Preview: Open target/site/projects/dubbo.html in browser\n\n# 6. Commit changes\nsvn commit dubbo.xml -m \"update dubbo project information\"\n```\n\n----------------------------------------\n\nTITLE: Exposing a Simple Monitoring Service to Registry Center in Dubbo\nDESCRIPTION: XML configuration for exposing a simple monitoring center service to the registry center. It configures the application name, registry connection, protocol, and exposes the MonitorService interface implemented by SimpleMonitorService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/simple-monitor.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n \n   <!-- 当前应用信息配置 -->\n   <dubbo:application name=\"simple-monitor\" />\n \n   <!-- 连接注册中心配置 -->\n   <dubbo:registry address=\"127.0.0.1:9090\" />\n \n   <!-- 暴露服务协议配置 -->\n   <dubbo:protocol port=\"7070\" />\n \n   <!-- 暴露服务配置 -->\n   <dubbo:service interface=\"org.apache.dubbo.monitor.MonitorService\" ref=\"monitorService\" />\n \n   <bean id=\"monitorService\" class=\"org.apache.dubbo.monitor.simple.SimpleMonitorService\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Napoli Protocol Parameters in Dubbo XML\nDESCRIPTION: Example showing how to configure custom parameters for Napoli protocol using dubbo:parameter tag. The parameter sets a queue name using a URL-based key.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-parameter.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"napoli\">\n    <dubbo:parameter key=\"http://10.20.160.198/wiki/display/dubbo/napoli.queue.name\" value=\"xxx\" />\n</dubbo:protocol>\n```\n\n----------------------------------------\n\nTITLE: Installing GPG on macOS using Homebrew\nDESCRIPTION: Commands to install GPG (GNU Privacy Guard) on macOS using Homebrew package manager and verify the installed version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew install gpg\n$ gpg --version #检查版本，应该为2.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Connection Settings in Properties\nDESCRIPTION: This snippet shows how to configure the registry, config center, and metadata report addresses for Dubbo Admin in the application.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-admin.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nadmin.registry.address=zookeeper://127.0.0.1:2181\nadmin.config-center=zookeeper://127.0.0.1:2181\nadmin.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: 配置 Dubbo 容器扩展启动命令\nDESCRIPTION: 通过 Main 类启动 Dubbo 容器并指定要加载的容器类型，包括 spring、jetty 和 log4j 容器。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava org.apache.dubbo.container.Main spring jetty log4j\n```\n\n----------------------------------------\n\nTITLE: Direct Connection to Monitoring Center in Dubbo\nDESCRIPTION: Configuration for directly connecting to a monitoring center service without using a registry. Provides three different ways to configure the connection: using full dubbo URL, simplified address, or properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/simple-monitor.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:monitor address=\"dubbo://127.0.0.1:7070/org.apache.dubbo.monitor.MonitorService\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:monitor address=\"127.0.0.1:7070\" />\n```\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.monitor.address=127.0.0.1:7070\n```\n\n----------------------------------------\n\nTITLE: Querying Dubbo Service Address Information via QoS\nDESCRIPTION: Example of using telnet to connect to Dubbo's QoS service on port 22222 and querying service address information using the getAddress command. Shows full response including registry details, migration steps, and both interface and application-level addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n➜ telnet 127.0.0.1 22222        \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>getAddress org.apache.dubbo.samples.api.GreetingsService\nConsumerModel: org.apache.dubbo.samples.api.GreetingsService@38b2d161\n\nRegistry: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=first-dubbo-consumer&dubbo=2.0.2&environment=product&executor-management-mode=default&file-cache=true&interface=org.apache.dubbo.registry.RegistryService&pid=44482&release=3.2.0-beta.6-SNAPSHOT\nMigrationStep: APPLICATION_FIRST\nInterface-Level: \nAll Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&prefer.serialization=fastjson2,hessian2&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider\n\nValid Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&prefer.serialization=fastjson2,hessian2&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider\n\nDisabled Invokers: \n\nApplication-Level: \nAll Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-consumer&background=false&deprecated=false&dubbo=2.0.2&dubbo.endpoints=[{\"port\":20880,\"protocol\":\"dubbo\"}]&dubbo.metadata-service.url-params={\"prefer.serialization\":\"fastjson2,hessian2\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.2.0-beta.6-SNAPSHOT\",\"side\":\"provider\",\"port\":\"20880\",\"protocol\":\"dubbo\"}&dubbo.metadata.revision=e37fc5748b33c325056556550d33dde7&dubbo.metadata.storage-type=local&dynamic=true&environment=product&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=44482&prefer.serialization=fastjson2,hessian2&register.ip=30.221.144.195&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=consumer&sticky=false&timestamp=1677466879396&unloadClusterRelated=false\n\nValid Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-consumer&background=false&deprecated=false&dubbo=2.0.2&dubbo.endpoints=[{\"port\":20880,\"protocol\":\"dubbo\"}]&dubbo.metadata-service.url-params={\"prefer.serialization\":\"fastjson2,hessian2\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.2.0-beta.6-SNAPSHOT\",\"side\":\"provider\",\"port\":\"20880\",\"protocol\":\"dubbo\"}&dubbo.metadata.revision=e37fc5748b33c325056556550d33dde7&dubbo.metadata.storage-type=local&dynamic=true&environment=product&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=44482&prefer.serialization=fastjson2,hessian2&register.ip=30.221.144.195&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=consumer&sticky=false&timestamp=1677466879396&unloadClusterRelated=false\n\nDisabled Invokers: \n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Setting Serializable Check via Properties in Dubbo\nDESCRIPTION: Illustrates how to enable Serializable interface checks using Spring Properties or dubbo.properties configuration. This method allows for easy configuration management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.check-serializable=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Properties in Docker\nDESCRIPTION: Configuration for changing the default username, password, and JWT secret token in the properties file for Docker-based deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/notices/admin.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nadmin.root.user.name=root\nadmin.root.user.password=root\nadmin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Report Address in Properties File\nDESCRIPTION: Property to configure the metadata report address in a dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Querying Dubbo Service Address Information via QoS\nDESCRIPTION: Example of using telnet to connect to Dubbo's QoS service on port 22222 and querying service address information using the getAddress command. Shows full response including registry details, migration steps, and both interface and application-level addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n➜ telnet 127.0.0.1 22222        \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>getAddress org.apache.dubbo.samples.api.GreetingsService\nConsumerModel: org.apache.dubbo.samples.api.GreetingsService@38b2d161\n\nRegistry: zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=first-dubbo-consumer&dubbo=2.0.2&environment=product&executor-management-mode=default&file-cache=true&interface=org.apache.dubbo.registry.RegistryService&pid=44482&release=3.2.0-beta.6-SNAPSHOT\nMigrationStep: APPLICATION_FIRST\nInterface-Level: \nAll Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&prefer.serialization=fastjson2,hessian2&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider\n\nValid Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-provider&background=false&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&prefer.serialization=fastjson2,hessian2&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=provider\n\nDisabled Invokers: \n\nApplication-Level: \nAll Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-consumer&background=false&deprecated=false&dubbo=2.0.2&dubbo.endpoints=[{\"port\":20880,\"protocol\":\"dubbo\"}]&dubbo.metadata-service.url-params={\"prefer.serialization\":\"fastjson2,hessian2\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.2.0-beta.6-SNAPSHOT\",\"side\":\"provider\",\"port\":\"20880\",\"protocol\":\"dubbo\"}&dubbo.metadata.revision=e37fc5748b33c325056556550d33dde7&dubbo.metadata.storage-type=local&dynamic=true&environment=product&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=44482&prefer.serialization=fastjson2,hessian2&register.ip=30.221.144.195&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=consumer&sticky=false&timestamp=1677466879396&unloadClusterRelated=false\n\nValid Invokers: \ndubbo://30.221.144.195:20880/org.apache.dubbo.samples.api.GreetingsService?anyhost=true&application=first-dubbo-consumer&background=false&deprecated=false&dubbo=2.0.2&dubbo.endpoints=[{\"port\":20880,\"protocol\":\"dubbo\"}]&dubbo.metadata-service.url-params={\"prefer.serialization\":\"fastjson2,hessian2\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.2.0-beta.6-SNAPSHOT\",\"side\":\"provider\",\"port\":\"20880\",\"protocol\":\"dubbo\"}&dubbo.metadata.revision=e37fc5748b33c325056556550d33dde7&dubbo.metadata.storage-type=local&dynamic=true&environment=product&executor-management-mode=default&file-cache=true&generic=false&interface=org.apache.dubbo.samples.api.GreetingsService&methods=sayHi&pid=44482&prefer.serialization=fastjson2,hessian2&register.ip=30.221.144.195&release=3.2.0-beta.6-SNAPSHOT&service-name-mapping=true&side=consumer&sticky=false&timestamp=1677466879396&unloadClusterRelated=false\n\nDisabled Invokers: \n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractMethodConfig in Java\nDESCRIPTION: This constructor initializes the AbstractMethodConfig by calling its parent constructor with a default ModuleModel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic AbstractMethodConfig() {\n        super(ApplicationModel.defaultModel().getDefaultModule());\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Proportional Traffic Routing for Dubbo Service in YAML\nDESCRIPTION: This YAML configuration sets up a VirtualService and DestinationRule for the DetailService. It routes 60% of traffic to v1 and 40% to v2 of the service for the 'getDetail' method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/mesh-rule.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: details\nspec:\n  dubbo:\n   - name: detail-service-traffic-split\n     match:\n      - name:\n        services:\n         - exact: \"org.apache.dubbo.demo.DetailService\"\n        method:\n         name_match:\n          exact: \"getDetail\"\n     route:\n      - destination:\n         subset: details-v1\n        weight: 60\n      - destination:\n         subset: details-v2\n        weight: 40\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: reviews-route\nspec:\n  subsets:\n    - name: details-v1\n      labels:\n        detail_version: v1 # 'version' is a reserved key in Dubbo, so must not be used.\n    - name: details-v2\n      labels:\n        detail_version: v2 # 'version' is a reserved key in Dubbo, so must not be used.\n```\n\n----------------------------------------\n\nTITLE: ModuleModel Construction and Initialization\nDESCRIPTION: Handles creation and initialization of ModuleModel objects, managing internal IDs, service repositories, and configuration managers. Includes module registration with ApplicationModel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic ModuleModel(ApplicationModel applicationModel, boolean isInternal) {\n        super(applicationModel, ExtensionScope.MODULE, isInternal);\n        Assert.notNull(applicationModel, \"ApplicationModel can not be null\");\n        this.applicationModel = applicationModel;\n        applicationModel.addModule(this, isInternal);\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(getDesc() + \" is created\");\n        }\n        initialize();\n        Assert.notNull(serviceRepository, \"ModuleServiceRepository can not be null\");\n        Assert.notNull(moduleConfigManager, \"ModuleConfigManager can not be null\");\n        Assert.assertTrue(moduleConfigManager.isInitialized(), \"ModuleConfigManager can not be initialized\");\n        ApplicationDeployer applicationDeployer = applicationModel.getDeployer();\n        if (applicationDeployer != null) {\n            applicationDeployer.notifyModuleChanged(this, DeployState.PENDING);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing main function for Dubbo Go client\nDESCRIPTION: Defines the main function for the Dubbo Go client application, which loads the configuration, waits for initialization, and makes a service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\tconfig.Load()\n\ttime.Sleep(3e9)\n\n\tprintln(\"\\n\\n\\nstart to test dubbo\")\n\tuser := &User{}\n\terr := userProvider.GetUser(context.TODO(), []interface{}{\"A001\"}, user)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tprintln(\"response result: %v\\n\", user)\n}\nfunc println(format string, args ...interface{}) {\n\tfmt.Printf(\"\\033[32;40m\"+format+\"\\033[0m\\n\", args...)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SerializingFunction Type in Python\nDESCRIPTION: Type definition for serialization functions that take any number of arguments and return bytes data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# A function that takes any number of arguments and returns data of type bytes\nSerializingFunction = Callable[..., bytes]\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Dubbo Provider\nDESCRIPTION: Shell commands to compile and run the Dubbo provider application using Maven and Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ./dubbo-samples-spring-boot-provider\nmvn clean package\njava -jar ./target/dubbo-samples-spring-boot-provider-1.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Listing Root Nodes in Zookeeper\nDESCRIPTION: Command to list all child nodes under the root path in Zookeeper, showing both system 'zookeeper' and user-created 'hello-zone' nodes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nls /\n```\n\n----------------------------------------\n\nTITLE: 安装Zookeeper (Shell)\nDESCRIPTION: 下载、解压和初始配置Zookeeper的Shell命令序列。这些命令用于获取Zookeeper压缩包，解压缩，并复制示例配置文件。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwget http://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz\ntar zxvf zookeeper-3.3.3.tar.gz\ncd zookeeper-3.3.3\ncp conf/zoo_sample.cfg conf/zoo.cfg\n```\n\n----------------------------------------\n\nTITLE: Implementing DepartmentDO Class in Java\nDESCRIPTION: Definition of the DepartmentDO class with a nested LocationDO object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/service-test.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class DepartmentDO {\n\n    private String departName;\n    private LocationDO departLocation;\n\n    @Override\n    public String toString() {\n        return \"DepartmentDO{\" +\n                \"departName='\" + departName + '\\'' +\n                \", departLocation=\" + departLocation.toString() +\n                '}';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Definition of @EnableDubboConfigBindings Annotation\nDESCRIPTION: The declaration of @EnableDubboConfigBindings which contains multiple @EnableDubboConfigBinding annotations for binding multiple configuration types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic @interface EnableDubboConfigBindings {\n\n    /**\n     * The value of {@link EnableDubboConfigBindings}\n     *\n     * @return non-null\n     */\n    EnableDubboConfigBinding[] value();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maven Project Structure for Dubbo Startup Probe Extension\nDESCRIPTION: Illustrates the recommended project structure for implementing a custom StartupProbe extension in a Maven project, showing the proper organization of Java implementation files and SPI configuration resources.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/startup.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxStartupProbe.java (implements StartupProbe interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.StartupProbe (plain text file, content: xxx=com.xxx.XxxStartupProbe)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Settings in Kubernetes ConfigMap\nDESCRIPTION: This snippet shows the properties to be modified in a Kubernetes ConfigMap for securing Dubbo Admin deployments on Kubernetes clusters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/admin.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nadmin.root.user.name=root\nadmin.root.user.password=root\nadmin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: ExtensionLoader's initInstantiationStrategy Method\nDESCRIPTION: Initializes the instantiation strategy for the ExtensionLoader, using a ScopeModelAwareExtensionProcessor if available.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate void initInstantiationStrategy() {\n        for (ExtensionPostProcessor extensionPostProcessor : extensionPostProcessors) {\n            if (extensionPostProcessor instanceof ScopeModelAccessor) {\n                instantiationStrategy = new InstantiationStrategy((ScopeModelAccessor) extensionPostProcessor);\n                break;\n            }\n        }\n        if (instantiationStrategy == null) {\n            instantiationStrategy = new InstantiationStrategy();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Routing in Dubbo with YAML\nDESCRIPTION: YAML configuration template for Dubbo script routing that dynamically filters provider instances. This example filters traffic to only use providers with a specific host IP address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/script-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nkey: demo-provider\ntype: javascript\nenabled: true\nscript: |\n  (function route(invokers,invocation,context) {\n      var result = new java.util.ArrayList(invokers.size());\n      for (i = 0; i < invokers.size(); i ++) {\n          if (\"10.20.3.3\".equals(invokers.get(i).getUrl().getHost())) {\n              result.add(invokers.get(i));\n          }\n      }\n      return result;\n  } (invokers, invocation, context));\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP Interface for QOS Commands\nDESCRIPTION: Shows how to access QOS commands through HTTP interface, which offers an alternative to telnet access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n➜  ~ curl \"localhost:22222/ls?arg1=xxx&arg2=xxxx\"\nAs Provider side:\n+----------------------------------+---+\n|       Provider Service Name      |PUB|\n+----------------------------------+---+\n|org.apache.dubbo.demo.DemoService| N |\n+----------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Metadata Center in XML\nDESCRIPTION: Configuration to enable Zookeeper as a metadata center using XML configuration format in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:metadata-report address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Health Check in Dubbo Golang Client Initialization\nDESCRIPTION: This Go code snippet shows how to create a new Dubbo client with the health check disabled using the WithClientCheck option set to false.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/start-check.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientCheck(false),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding ApplicationModel to FrameworkModel in Dubbo\nDESCRIPTION: Method to add an ApplicationModel to the FrameworkModel container. It assigns an internal ID to the application model and adds it to collections, differentiating between internal and public application models.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvoid addApplication(ApplicationModel applicationModel) {\n        // can not add new application if it's destroying\n        //检查FrameworkModel对象是否已经被标记为销毁状态，如果已经被销毁了则抛出异常无需执行逻辑\n        checkDestroyed();\n        synchronized (instLock) {\n        \t//如果还未添加过当前参数传递应用模型\n            if (!this.applicationModels.contains(applicationModel)) {\n            \t//为当前应用模型生成内部id\n                applicationModel.setInternalId(buildInternalId(getInternalId(), appIndex.getAndIncrement()));\n                //添加到成员变量集合applicationModels中\n                this.applicationModels.add(applicationModel);\n                //如果非内部的则也向公开应用模型集合pubApplicationModels中添加一下\n                if (!applicationModel.isInternal()) {\n                    this.pubApplicationModels.add(applicationModel);\n                }\n                resetDefaultAppModel();\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Queue Warning Size in Dubbo\nDESCRIPTION: This snippet shows the default configuration for the connection queue warning size in Dubbo. The warning is triggered when the number of connections exceeds this limit. Users can adjust this value to change the threshold at which warnings are issued.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/6/7.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nconnect.queue.warning.size=1000\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Proxyless Mesh Application\nDESCRIPTION: Commands to clone the sample repository and build the application with Maven.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/dubbo-samples-xds\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Transport Extensions in Dubbo XML\nDESCRIPTION: XML configuration examples showing how to configure transport implementations in Dubbo, including setting the same transport for both server and client, different implementations for each, and default settings at the provider level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/remoting.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Server and client use the same transport implementation -->\n<dubbo:protocol transporter=\"xxx\" /> \n<!-- Server and client use different transport implementations -->\n<dubbo:protocol server=\"xxx\" client=\"xxx\" /> \n<!-- Default settings, used when <dubbo:protocol> does not configure transporter/server/client attributes -->\n<dubbo:provider transporter=\"xxx\" server=\"xxx\" client=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Options for Dubbo Build\nDESCRIPTION: Export command to set the required MAVEN_OPTS environment variables for memory allocation before building Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport MAVEN_OPTS=-Xmx1024m -XX:MaxPermSize=512m\n```\n\n----------------------------------------\n\nTITLE: Setting Headless Property in YAML Frontmatter for Hugo\nDESCRIPTION: YAML frontmatter configuration that sets the 'headless' property to true. In Hugo, this indicates that the content file should not generate its own HTML output but can still be used as a content source for other templates.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/_common-resources/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nheadless: true\n---\n```\n\n----------------------------------------\n\nTITLE: Registering StartupProbe Extension in Dubbo\nDESCRIPTION: Configuration file for registering the custom StartupProbe implementation with Dubbo. This file should be placed in the META-INF/dubbo directory of the project resources.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/startup.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nxxx=com.xxx.XxxStartupProbe\n```\n\n----------------------------------------\n\nTITLE: Example URL Data Retrieval Code Generated for Protocol Interface Methods\nDESCRIPTION: Generated code examples for Protocol interface's refer and export methods, showing the null checking and URL extraction logic. For the refer method, URL is directly available as parameter, while for export method, URL is retrieved via a getter method from Invoker parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/adaptive-extension.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nrefer:\nif (arg1 == null) \n    throw new IllegalArgumentException(\"url == null\");\ncom.alibaba.dubbo.common.URL url = arg1;\n\nexport:\nif (arg0 == null) \n    throw new IllegalArgumentException(\"com.alibaba.dubbo.rpc.Invoker argument == null\");\nif (arg0.getUrl() == null) \n    throw new IllegalArgumentException(\"com.alibaba.dubbo.rpc.Invoker argument getUrl() == null\");\ncom.alibaba.dubbo.common.URL url = arg0.getUrl();\n```\n\n----------------------------------------\n\nTITLE: Adding Protobuf Dependencies in Maven\nDESCRIPTION: This XML snippet shows the Maven dependencies required for using Protobuf and Protobuf-JSON serialization with the Triple protocol. It includes the core Protobuf Java library and the Protobuf Java Util library for JSON support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/protobuf.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n\t<dependency>\n\t\t<groupId>com.google.protobuf</groupId>\n\t\t<artifactId>protobuf-java</artifactId>\n\t\t<version>3.19.6</version>\n\t</dependency>\n\t<!-- Provides support for protobuf-json format requests -->\n\t<dependency>\n\t\t<groupId>com.google.protobuf</groupId>\n\t\t<artifactId>protobuf-java-util</artifactId>\n\t\t<version>3.19.6</version>\n\t</dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Dubbo Docker Image with Maven\nDESCRIPTION: Maven command using jib-maven-plugin to build and push a Docker image for a Dubbo application without requiring a local Docker daemon.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/deploy-on-k8s.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Package and push the image\nmvn compile jib:build\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Source Code\nDESCRIPTION: Shell commands to clone the Dubbo samples repository and navigate to the Seata example directory. These commands fetch the example code needed to demonstrate Seata with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd dubbo-samples/2-advanced/dubbo-samples-seata\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Istio Routing Rules\nDESCRIPTION: Command to remove the application route rules when finished with the tutorial.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: RestMethodMetadata Class Definition\nDESCRIPTION: Java class representing REST method metadata, including method definition, request metadata, URL and body indexes, and parameter information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class RestMethodMetadata implements Serializable {\n\n    private MethodDefinition method; // method 定义信息（name ,pramType,returnType）\n\n    private RequestMetadata request;// 请求元信息\n\n    private Integer urlIndex;\n\n    private Integer bodyIndex;\n\n    private Integer headerMapIndex;\n\n    private String bodyType;\n\n    private Map<Integer, Collection<String>> indexToName;\n\n    private List<String> formParams;\n\n    private Map<Integer, Boolean> indexToEncoded;\n\n    private ServiceRestMetadata serviceRestMetadata;\n\n    private List<ArgInfo> argInfos;\n\n    private Method reflectMethod;\n\n    /**\n     *  make a distinction between mvc & resteasy\n     */\n    private Class codeStyle;\n\n```\n\n----------------------------------------\n\nTITLE: Example of Zookeeper Registry URL in Dubbo\nDESCRIPTION: Example URL structure used for Zookeeper registry connection in Dubbo, showing the format and parameters passed to the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nzookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-api-provider&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=39884&release=3.0.8\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Protocol in Dubbo\nDESCRIPTION: Basic configuration for enabling HTTP protocol in Dubbo with port specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/http.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"http\" port=\"8080\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Routing Rule in Dubbo YAML\nDESCRIPTION: This snippet demonstrates a conditional routing rule that forwards service calls to address subsets with matching region tags. It uses YAML configuration to define the rule for the CommentService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - '=> region = $region'\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service with Protobuf IDL\nDESCRIPTION: Protobuf service definition for a simple greeter RPC service with unary request/response messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/rust/first-release.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.sample.tri;\n\n\n// The request message containing the user's name.\nmessage GreeterRequest {\nstring name = 1;\n}\n\n// The response message containing the greetings\nmessage GreeterReply {\nstring message = 1;\n}\n\nservice Greeter{\n// unary\nrpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Dubbo Wrapper Extension Classes\nDESCRIPTION: Examples of Dubbo extension classes implementing the Wrapper mechanism. These classes follow the naming convention of ending with 'Wrapper'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n class org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper\n class org.apache.dubbo.qos.protocol.QosProtocolWrapper\n class org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper\n class org.apache.dubbo.qos.protocol.QosProtocolWrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Services with Spring Annotations\nDESCRIPTION: Example of configuring Dubbo services using Spring annotations. Shows how to annotate a service implementation class and use properties file for configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/overview.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class AnnotationServiceImpl implements AnnotationService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"async provider received: \" + name);\n        return \"annotation: hello, \" + name;\n    }\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=annotation-provider\ndubbo.registry.address=zookeeper://127.0.0.1:2181\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Enabling MSE Microservices Governance with JVM Parameters\nDESCRIPTION: JVM parameter configuration to enable MSE (Microservices Engine) capabilities for traffic governance in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/dianxiaomi.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSERVICE_OPTS=\"${SERVICE_OPTS} -Dmse.enable=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Check Status in Java\nDESCRIPTION: This snippet shows how to configure the serialization check status to WARN mode using a Java system property. This is recommended for users upgrading to Dubbo 3.2.0 to monitor for potential security issues before enabling strong validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n-Ddubbo.application.serialize-check-status=WARN\n```\n\n----------------------------------------\n\nTITLE: Implementing Triple Protocol Consumer\nDESCRIPTION: Consumer implementation for calling Triple protocol service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/tri.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n    ReferenceConfig<IGreeter> ref = new ReferenceConfig<>();\n    ref.setInterface(IGreeter.class);\n    ref.setCheck(false);\n    ref.setInterface(IGreeter.class);\n    ref.setCheck(false);\n    ref.setProtocol(CommonConstants.TRIPLE);\n    ref.setLazy(true);\n    ref.setTimeout(100000);\n    ref.setApplication(new ApplicationConfig(\"demo-consumer\"));\n    ref.setRegistry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"));\n    final IGreeter iGreeter = ref.get();\n\n    System.out.println(\"dubbo ref started\");\n    try {\n        final HelloReply reply = iGreeter.sayHello(HelloRequest.newBuilder()\n                .setName(\"name\")\n                .build());\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(\"Reply:\" + reply);\n    } catch (Throwable t) {\n        t.printStackTrace();\n    }\n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Zookeeper Client Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding the Zookeeper client library to the project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.zookeeper</groupId>\n    <artifactId>zookeeper</artifactId>\n    <version>3.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining RestMethodMetadata Class for Dubbo REST Methods\nDESCRIPTION: This Java class defines the metadata structure for individual REST methods in Dubbo. It includes information about the method definition, request metadata, URL and body indices, parameter mappings, and code style (MVC or RESTEasy).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RestMethodMetadata implements Serializable {\n\n    private MethodDefinition method; // method definition info (name, paramType, returnType)\n\n    private RequestMetadata request;// request meta info\n\n    private Integer urlIndex;\n\n    private Integer bodyIndex;\n\n    private Integer headerMapIndex;\n\n    private String bodyType;\n\n    private Map<Integer, Collection<String>> indexToName;\n\n    private List<String> formParams;\n\n    private Map<Integer, Boolean> indexToEncoded;\n\n    private ServiceRestMetadata serviceRestMetadata;\n\n    private List<ArgInfo> argInfos;\n\n    private Method reflectMethod;\n\n    /**\n     *  make a distinction between mvc & resteasy\n     */\n    private Class codeStyle;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Api-Docs in Spring Boot\nDESCRIPTION: Configuration class to enable Dubbo-Api-Docs in a Spring Boot application. The @EnableDubboApiDocs annotation activates the Dubbo-Api-Docs functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-api-docs.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@Profile(\"dev\")  // 配合 Profile 一起使用, 在 profile 为 dev 时才会加载该配制类\n@EnableDubboApiDocs  // 开启 Dubbo-Api-Docs\npublic class DubboDocConfig {\n}\n```\n\n----------------------------------------\n\nTITLE: Application First Migration Logic in MigrationInvoker\nDESCRIPTION: The migrateToApplicationFirstInvoker method refreshes both interface-level and application-level invokers, then calculates the preferred invoker to use based on the current state of providers and the migration rule.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n @Override\n    public void migrateToApplicationFirstInvoker(MigrationRule newRule) {\n        CountDownLatch latch = new CountDownLatch(0);\n        //刷新接口级服务发现Invoker \n        refreshInterfaceInvoker(latch);\n        //刷新应用级服务发现Invoker类型对象\n        refreshServiceDiscoveryInvoker(latch);\n\n        // directly calculate preferred invoker, will not wait until address notify\n        // calculation will re-occurred when address notify later\n        //计算当前使用应用级还是接口级服务发现的Invoker对象\n        calcPreferredInvoker(newRule);\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Project with Maven\nDESCRIPTION: Maven command to build the Dubbo project, skipping tests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmvn clean package install -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Exporting Dubbo Provider with REST Protocol Support\nDESCRIPTION: This method exports a service invoker by registering it with REST metadata. It resolves service metadata, adds path and invoker mappings, and creates an exporter that can be retrieved using a URI key.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic <T> Exporter<T> export(final Invoker<T> invoker) throws RpcException {\n            URL url = invoker.getUrl();\n            final String uri = serviceKey(url);\n            Exporter<T> exporter = (Exporter<T>) exporterMap.get(uri);\n            if (exporter != null) {\n                // When modifying the configuration through override, you need to re-expose the newly modified service.\n                if (Objects.equals(exporter.getInvoker().getUrl(), invoker.getUrl())) {\n                    return exporter;\n                }\n            }\n\n\n            // TODO  addAll metadataMap to RPCInvocationBuilder metadataMap\n            Map<PathMatcher, RestMethodMetadata> metadataMap = MetadataResolver.resolveProviderServiceMetadata(url.getServiceModel().getProxyObject().getClass(),url);\n\n            PathAndInvokerMapper.addPathAndInvoker(metadataMap, invoker);\n\n\n            final Runnable runnable = doExport(proxyFactory.getProxy(invoker, true), invoker.getInterface(), invoker.getUrl());\n            exporter = new AbstractExporter<T>(invoker) {\n                @Override\n                public void afterUnExport() {\n                    exporterMap.remove(uri);\n                    if (runnable != null) {\n                        try {\n                            runnable.run();\n                        } catch (Throwable t) {\n                            logger.warn(PROTOCOL_UNSUPPORTED, \"\", \"\", t.getMessage(), t);\n                        }\n                    }\n                }\n            };\n            exporterMap.put(uri, exporter);\n            return exporter;\n        }\n```\n\n----------------------------------------\n\nTITLE: Configuring EtcdServiceDiscoveryFactory SPI\nDESCRIPTION: This snippet shows how to configure the EtcdServiceDiscoveryFactory as an SPI extension in the ServiceDiscoveryFactory configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\netcd=org.apache.dubbo.registry.etcd.EtcdServiceDiscoveryFactory\n```\n\n----------------------------------------\n\nTITLE: Configuration for Dubbo Service with ShenYu Registration\nDESCRIPTION: YAML configuration for a Dubbo service that registers with ShenYu gateway. It defines server settings, Dubbo registry configuration, and ShenYu client registration properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  port: 8011\n  address: 0.0.0.0\n  servlet:\n    context-path: /\nspring:\n  main:\n    allow-bean-definition-overriding: true\ndubbo:\n  registry:\n    address: zookeeper://localhost:2181  # The registry used by dubbo\n    \nshenyu:\n  register:\n    registerType: http #Registration Method\n    serverLists: http://localhost:9095 #Registration Address\n    props:\n      username: admin \n      password: 123456\n  client:\n    dubbo:\n      props:\n        contextPath: /dubbo  \n        appName: dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Services with Spring Boot\nDESCRIPTION: Example of configuring Dubbo services using Spring Boot properties. Demonstrates setting up application name, scan packages, protocol, registry, and service version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/overview.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.application.name=dubbo-externalized-configuration-provider-sample\n\ndubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service\n\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n\ndubbo.registry.address=N/A\n\ndemo.service.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: SPI Configuration File Content\nDESCRIPTION: META-INF/services configuration file content listing implementation classes for the IRepository interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncom.demo.MongoRepository\ncom.demo.MysqlRepository\n```\n\n----------------------------------------\n\nTITLE: Registering Custom ThreadPool in Dubbo SPI File\nDESCRIPTION: Properties file content for registering a custom ThreadPool implementation with Dubbo's SPI mechanism. This file maps the extension name to the fully qualified class name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/threadpool.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nxxx=com.xxx.XxxThreadPool\n```\n\n----------------------------------------\n\nTITLE: ModuleServiceRepository Constructor Implementation in Dubbo\nDESCRIPTION: Constructor for ModuleServiceRepository that initializes the module model and obtains the framework service repository. It establishes the relationship between module-level and framework-level repositories.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic ModuleServiceRepository(ModuleModel moduleModel) {\n\t\t//初始化模块模型\n        this.moduleModel = moduleModel;\n        //\n        frameworkServiceRepository = ScopeModelUtil.getFrameworkModel(moduleModel).getServiceRepository();\n    }\n```\n\n----------------------------------------\n\nTITLE: Next Maximum Concurrency Calculation in AutoConcurrencyLimier\nDESCRIPTION: Formula for calculating the next maximum concurrency value in the AutoConcurrencyLimier algorithm, which applies Little's Law with an exploration factor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nnextMaxConcurrency = qps * noLoadLatency * (1.0 + exploreRatio) / 1000.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Metrics Collector in Java\nDESCRIPTION: Java class implementation of DefaultMetricsCollector, responsible for storing all metric data in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic class DefaultMetricsCollector implements MetricsCollector {\n    private Boolean collectEnabled = false;\n    private final List<MetricsListener> listeners = new ArrayList<>();\n    private final ApplicationModel applicationModel;\n    private final String applicationName;\n\n    private final Map<MethodMetric, AtomicLong> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> processingRequests = new ConcurrentHashMap<>();\n\n    private final Map<MethodMetric, AtomicLong> lastRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> minRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, LongAccumulator> maxRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> avgRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> totalRT = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, AtomicLong> rtCount = new ConcurrentHashMap<>();\n }\n```\n\n----------------------------------------\n\nTITLE: Registering Different Services to Different Registry Centers\nDESCRIPTION: Example demonstrating how to register different services to different registry centers. Shows configuration for registering services specifically designed for China and International sites.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-registry.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n    <!-- 向中文站注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"chinaRegistry\" />\n    <!-- 向国际站注册中心注册 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" registry=\"intlRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry in Dubbo\nDESCRIPTION: This snippet demonstrates how to configure the etcd registry in the Dubbo application properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/registry.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=etcd://host:port\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo with Maven\nDESCRIPTION: Maven command to clean and install Dubbo from source code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Creating Hugo Front Matter Template\nDESCRIPTION: Basic Hugo front matter template that automatically sets the title (replacing hyphens with spaces and capitalizing) and date. The draft status is set to true by default.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/archetypes/default.md#2025-04-08_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo-go-pixiu Gateway\nDESCRIPTION: This shell command starts the Dubbo-go-pixiu gateway using a specified configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/httpfilter/dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./dubbo-go-pixiu gateway start --config {CURRENT_PATH}pixiu/conf.yaml\n```\n\n----------------------------------------\n\nTITLE: Sample Provider Metadata JSON\nDESCRIPTION: Example of the metadata content stored for a provider service including interface and method information\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parameters\": {\n    \"side\": \"provider\",\n    \"interface\": \"link.elastic.dubbo.entity.DemoService\",\n    \"pid\": \"38680\",\n    \"application\": \"dubbo-demo-api-provider\",\n    \"dubbo\": \"2.0.2\",\n    \"release\": \"3.0.8\",\n    \"anyhost\": \"true\",\n    \"bind.ip\": \"192.168.1.9\",\n    \"methods\": \"sayHello,sayHelloAsync\",\n    \"background\": \"false\",\n    \"deprecated\": \"false\",\n    \"dynamic\": \"true\",\n    \"service-name-mapping\": \"true\",\n    \"generic\": \"false\",\n    \"bind.port\": \"20880\",\n    \"timestamp\": \"1653097653865\"\n  },\n  \"canonicalName\": \"link.elastic.dubbo.entity.DemoService\",\n  \"codeSource\": \"file:/Users/song/Desktop/Computer/A/code/gitee/weaving-a-net/weaving-test/dubbo-test/target/classes/\",\n  \"methods\": [\n    {\n      \"name\": \"sayHello\",\n      \"parameterTypes\": [\n        \"java.lang.String\"\n      ],\n      \"returnType\": \"java.lang.String\",\n      \"annotations\": [\n        \n      ]\n    },\n    {\n      \"name\": \"sayHelloAsync\",\n      \"parameterTypes\": [\n        \"java.lang.String\"\n      ],\n      \"returnType\": \"java.util.concurrent.CompletableFuture\",\n      \"annotations\": [\n        \n      ]\n    }\n  ],\n  \"types\": [\n    {\n      \"type\": \"java.util.concurrent.CompletableFuture\",\n      \"properties\": {\n        \"result\": \"java.lang.Object\",\n        \"stack\": \"java.util.concurrent.CompletableFuture.Completion\"\n      }\n    },\n    {\n      \"type\": \"java.lang.Object\"\n    },\n    {\n      \"type\": \"java.lang.String\"\n    },\n    {\n      \"type\": \"java.util.concurrent.CompletableFuture.Completion\",\n      \"properties\": {\n        \"next\": \"java.util.concurrent.CompletableFuture.Completion\",\n        \"status\": \"int\"\n      }\n    },\n    {\n      \"type\": \"int\"\n    }\n  ],\n  \"annotations\": [\n    \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Serialization Extension in Java\nDESCRIPTION: Java code example showing how to implement a custom Serialization extension for Dubbo. It includes the main Serialization class and references to ObjectInput and ObjectOutput implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.serialize.Serialization;\nimport org.apache.dubbo.common.serialize.ObjectInput;\nimport org.apache.dubbo.common.serialize.ObjectOutput;\n \n \npublic class XxxSerialization implements Serialization {\n    public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException {\n        return new XxxObjectOutput(output);\n    }\n    public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException {\n        return new XxxObjectInput(input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MessagePack Dependencies in Maven\nDESCRIPTION: Maven dependencies required for enabling MessagePack serialization in Dubbo, including the core MessagePack library and Jackson data format support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/msgpack.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-msgpack</artifactId>\n      <version>3.3.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.msgpack</groupId>\n        <artifactId>msgpack-core</artifactId>\n        <version>0.9.3</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.msgpack</groupId>\n        <artifactId>jackson-dataformat-msgpack</artifactId>\n        <version>0.9.3</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Classes in Dubbo (Java)\nDESCRIPTION: This method retrieves extension classes from cache or loads them if not present. It uses double-checked locking for thread safety.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Class<?>> getExtensionClasses() {\n    Map<String, Class<?>> classes = cachedClasses.get();\n    if (classes == null) {\n        synchronized (cachedClasses) {\n            classes = cachedClasses.get();\n            if (classes == null) {\n                classes = loadExtensionClasses();\n                cachedClasses.set(classes);\n            }\n        }\n    }\n    return classes;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dubbo Scan Path with Spring Boot Annotation\nDESCRIPTION: This snippet shows how to specify the Dubbo scan path using the @DubboComponentScan annotation in a Spring Boot application. It sets the base package for scanning Dubbo components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\n@DubboComponentScan(basePackages = \"com.alibaba.dubbo.test.service.impl\")\npublic class ProviderTestApp {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LoadBalance Interface with SPI Annotations in Java\nDESCRIPTION: This snippet shows the LoadBalance interface in Dubbo, annotated with @SPI and @Adaptive annotations for extension point functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@SPI(RandomLoadBalance.NAME)\npublic interface LoadBalance {\n\n    @Adaptive(\"loadbalance\")\n    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Invoker Chain in Dubbo ProtocolFilterWrapper\nDESCRIPTION: This code snippet from ProtocolFilterWrapper.java demonstrates how Dubbo constructs the filter chain for invocations. It shows the process of building an invoker chain by applying activated filters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/first-dubbo-filter.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {\n        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n            return protocol.refer(type, url);\n        }\n        return buildInvokerChain(protocol.refer(type, url), Constants.REFERENCE_FILTER_KEY, Constants.CONSUMER);\n    }\n    \n    private static <T> Invoker<T> buildInvokerChain(final Invoker<T> invoker, String key, String group) {\n        Invoker<T> last = invoker;\n        List<Filter> filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);\n        if (filters.size() > 0) {\n            for (int i = filters.size() - 1; i >= 0; i --) {\n                final Filter filter = filters.get(i);\n                final Invoker<T> next = last;\n                last = new Invoker<T>() {\n\n                    public Class<T> getInterface() {\n                        return invoker.getInterface();\n                    }\n\n                    public URL getUrl() {\n                        return invoker.getUrl();\n                    }\n\n                    public boolean isAvailable() {\n                        return invoker.isAvailable();\n                    }\n\n                    public Result invoke(Invocation invocation) throws RpcException {\n                        return filter.invoke(next, invocation);\n                    }\n\n                    public void destroy() {\n                        invoker.destroy();\n                    }\n\n                    @Override\n                    public String toString() {\n                        return invoker.toString();\n                    }\n                };\n            }\n        }\n        return last;\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Admin on VM\nDESCRIPTION: Starts Dubbo Admin with custom configuration on VM\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndubbo-admin run -f override-configuration.yml\n```\n\n----------------------------------------\n\nTITLE: ArgInfo Class Definition\nDESCRIPTION: Class for storing method argument information including index, annotations, and parameter types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ArgInfo {\n    private int index;\n    private String annotationNameAttribute;\n    private Class paramAnnotationType;\n    private Class paramType;\n    private String paramName;\n    private int urlSplitIndex;\n    private Object defaultValue;\n    private boolean formContentType;\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Diagnosis in Bash\nDESCRIPTION: This command generates a stack trace log file for a Java process to aid in diagnosing xDS file read failures. It uses the jstack utility to capture the stack information of a specified process ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/29.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Diagnosis in Bash\nDESCRIPTION: This command generates a stack trace log file for a Java process to aid in diagnosing xDS file read failures. It uses the jstack utility to capture the stack information of a specified process ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/29.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Dynamic Configuration Rule for Timeout Settings\nDESCRIPTION: Example of dynamically modifying service timeout parameters without restart\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: service\nkey: org.apache.dubbo.samples.UserService\nenabled: true\nconfigs:\n  - side: provider\n    parameters:\n      timeout: 2000\n```\n\n----------------------------------------\n\nTITLE: DubboBootstrap Start Method Implementation\nDESCRIPTION: Shows how the DubboBootstrap start() method and its overloaded version initiate the application startup process by delegating to the applicationDeployer and handling future resolution.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n public DubboBootstrap start() {\n \t\t//调用重载的方法进行启动参数代表是否等待启动结束\n        this.start(true);\n        return this;\n    }\n```\n\nLANGUAGE: java\nCODE:\n```\npublic DubboBootstrap start(boolean wait) {\n\t\t//这个发布器是在ApplicationModel对象创建之后初始化的时候进行初始化的具体类型为DefaultApplicationDeployer\n        Future future = applicationDeployer.start();\n      \n        if (wait) {\n            try {\n              //等待异步启动的结果\n                future.get();\n            } catch (Exception e) {\n            \t//启动失败则抛出一个异常\n                throw new IllegalStateException(\"await dubbo application start finish failure\", e);\n            }\n        }\n        return this;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go Server with YAML\nDESCRIPTION: YAML configuration for the server side of the Dubbo-go application, specifying registry settings, protocol details, and service definitions including interface names and ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK: # 定义服务注册发现中心\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n  protocols:\n    dubbo:\n      name: dubbo # 协议名 dubbo\n      port: 20000 # 监听端口\n  provider:\n    services:\n      UserProvider: # 服务提供结构类名\n        interface: org.apache.dubbo.UserProvider  # 接口需要与 go/java 客户端对应\n```\n\n----------------------------------------\n\nTITLE: Maven Settings.xml Configuration for Apache Deployment\nDESCRIPTION: XML configuration for Maven's settings.xml file that enables deploying artifacts to Apache's repositories. This includes server credentials for both snapshot and release repositories, as well as GPG passphrase configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n...\n <servers>\n   <!-- To publish a snapshot of some part of Maven -->\n   <server>\n     <id>apache.snapshots.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n   <!-- To stage a release of some part of Maven -->\n   <server>\n     <id>apache.releases.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n  ...\n     <!-- gpg passphrase used when generate key -->\n    <server>\n     <id>gpg.passphrase</id>\n     <passphrase><!-- yourKeyPassword --></passphrase>\n   </server>\n </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Protocol as injvm in Dubbo XML\nDESCRIPTION: This snippet demonstrates how to set the protocol for a specific service to injvm, ensuring that the service uses local calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Go Documentation Link\nDESCRIPTION: YAML frontmatter configuration for a Go documentation page in the Dubbo website. It sets up a link page that points to another section using the 'render: link' option and 'manualLinkRelref' property.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/go.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Go\nmanualLinkRelref: ./#go\ntitle: Go\ntype: docs\nweight: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Types at Class Level in Dubbo REST\nDESCRIPTION: Setting Consumes and Produces annotations at the class level to apply them to all methods in the service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/users\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\npublic class UserServiceImpl implements UserService {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Interface for Redis Service\nDESCRIPTION: XML configuration showing how to reference a Redis service using a custom interface instead of the standard Map interface, while still specifying the direct Redis URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"com.foo.StoreService\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Hessian Protocol Dependencies in Maven\nDESCRIPTION: Required Maven dependencies for using Hessian protocol with Dubbo 3. Includes both the Dubbo RPC Hessian module and the Hessian core library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-hessian</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.caucho</groupId>\n    <artifactId>hessian</artifactId>\n    <version>4.0.7</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: 配置只订阅不注册\nDESCRIPTION: 在 YAML 中配置服务只订阅不注册到注册中心。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    register: false\n```\n\n----------------------------------------\n\nTITLE: 在XML中关闭注册中心启动检查\nDESCRIPTION: 通过在dubbo:registry标签中设置check=\"false\"来关闭注册中心的启动时检查。这样即使注册订阅失败也不会报错。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/preflight-check.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry check=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Welcome Email for Apache Dubbo Mailing List Subscription\nDESCRIPTION: This code snippet displays the content of the welcome email sent after successfully subscribing to the Apache Dubbo mailing list. It includes confirmation of the subscription and important information about the mailing list.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/mailing-list-subscription-guide_dev.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfrom: dev-help@dubbo.apache.org\nto: hello@example.com\ndate: Sat, Feb 24, 2018 at 3:14 PM\nsubject: WELCOME to dev@dubbo.apache.org\nmailed-by: apache.org\n\nHi! This is the ezmlm program. I'm managing the\ndev@dubbo.apache.org mailing list.\n\nI'm working for my owner, who can be reached\nat dev-owner@dubbo.apache.org.\n\nAcknowledgment: I have added the address\n\n   hello@example.com\n\nto the dev mailing list.\n\nWelcome to dev@dubbo.apache.org!\n\nPlease save this message so that you know the address you are\nsubscribed under, in case you later want to unsubscribe or change your\nsubscription address.\n\n...\n```\n\n----------------------------------------\n\nTITLE: Implementation of CombMetricsCollector Methods for Metrics Collection\nDESCRIPTION: Core methods in CombMetricsCollector that handle metrics collection by delegating to BaseStatComposite. These methods include setNum, increment, and addRt which are used to set values, increment counters, and add response time metrics respectively.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//CombMetricsCollector\n...\n   private final BaseStatComposite stats;\n...\n@Override\n    public void setNum(MetricsKey metricsKey, String applicationName, String serviceKey, int num) {\n        this.stats.setServiceKey(metricsKey, applicationName, serviceKey, num);\n    }\n\n    @Override\n    public void increment(String applicationName, MetricsKey metricsKey) {\n        this.stats.incrementApp(metricsKey, applicationName, SELF_INCREMENT_SIZE);\n    }\n\n    public void increment(String applicationName, String serviceKey, MetricsKey metricsKey, int size) {\n        this.stats.incrementServiceKey(metricsKey, applicationName, serviceKey, size);\n    }\n\n    @Override\n    public void addRt(String applicationName, String registryOpType, Long responseTime) {\n        stats.calcApplicationRt(applicationName, registryOpType, responseTime);\n    }\n\n    public void addRt(String applicationName, String serviceKey, String registryOpType, Long responseTime) {\n        stats.calcServiceKeyRt(applicationName, serviceKey, registryOpType, responseTime);\n    }\n...\n```\n\n----------------------------------------\n\nTITLE: 在 Consumer 中设置区域标签\nDESCRIPTION: 在服务消费方发起调用前，通过 RpcContext 设置地区标签，将请求路由到指定区域的提供方实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"Hangzhou\");\n```\n\n----------------------------------------\n\nTITLE: 配置 Dubbo 服务引用 (XML)\nDESCRIPTION: 使用 Spring XML 配置方式定义 Dubbo 服务引用。这个配置声明了一个 id 为 memberService 的服务引用，指向 com.xxx.MemberService 接口。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/echo-service.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"memberService\" interface=\"com.xxx.MemberService\" />\n```\n\n----------------------------------------\n\nTITLE: 实现 HTTP GET 方法\nDESCRIPTION: 在 UserService 中添加一个获取用户资料的 GET 方法。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@GET\n@Path(\"{id : \\\\d+}\")\n@Produces({MediaType.APPLICATION_JSON})\npublic User getUser(@PathParam(\"id\") Long id) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Testing Maven Release Process\nDESCRIPTION: Maven commands for compiling, packaging, and validating the release process in the release branch. These commands ensure that all components package correctly with proper signatures before actual deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy\n```\n\n----------------------------------------\n\nTITLE: Building ServiceConfig for MetadataService in Dubbo\nDESCRIPTION: This method creates a ServiceConfig object for the MetadataService in Dubbo. It sets up various configurations including application, registry, protocol, and method configs. It also specifies special settings like not registering to the registry center and limiting connections and parallel executions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate ServiceConfig<MetadataService> buildServiceConfig() {\n    ApplicationConfig applicationConfig = getApplicationConfig();\n    ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();\n    serviceConfig.setScopeModel(applicationModel.getInternalModule());\n    serviceConfig.setApplication(applicationConfig);\n    \n    RegistryConfig registryConfig = new RegistryConfig(\"N/A\");\n    registryConfig.setId(\"internal-metadata-registry\");\n    \n    serviceConfig.setRegistry(registryConfig);\n    serviceConfig.setRegister(false);\n    serviceConfig.setProtocol(generateMetadataProtocol());\n    serviceConfig.setInterface(MetadataService.class);\n    serviceConfig.setDelay(0);\n    serviceConfig.setRef(metadataService);\n    serviceConfig.setGroup(applicationConfig.getName());\n    serviceConfig.setVersion(MetadataService.VERSION);\n    serviceConfig.setMethods(generateMethodConfig());\n    serviceConfig.setConnections(1);\n    serviceConfig.setExecutes(100);\n\n    return serviceConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Filtered Metrics Query\nDESCRIPTION: Example output showing registry-related metrics for a specific application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/default_metrics.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo> metrics_default dubbo-springboot-demo-provider registry\ndubbo.registry.subscribe.num.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,ip=10.224.214.80,} 0.0\ndubbo.registry.directory.num.disable.total{application.module.id=1.1,application.name=dubbo-springboot-demo-provider,application.version=,git.commit.id=,hostname=hujundeMacBook-Pro.local,interface=dubbo-springboot-demo-provider/org.apache.dubbo.metrics.service.MetricsService:1.0.0,ip=10.224.214.80,} 0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Basic interface definition for a Dubbo service that declares a sayHello method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: Basic interface definition for a Dubbo service that declares a sayHello method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Registry Dependency in Maven\nDESCRIPTION: Maven dependency configuration for including Redis registry support in Dubbo 3.x projects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-registry-redis</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for Dubbo Demo Page in YAML\nDESCRIPTION: This YAML frontmatter sets up the configuration for a Dubbo demo page. It specifies the title, layout, and hides the table of contents.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/demo/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Demo\"\nlayout: \"shortcodes/blocks/demo-zh\"\ntoc_hide: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring SerializationOptimizer in Dubbo XML\nDESCRIPTION: This XML snippet shows how to configure the SerializationOptimizer implementation in Dubbo's XML configuration to optimize Kryo serialization performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\" optimizer=\"org.apache.dubbo.demo.SerializationOptimizerImpl\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Networker Extension in Dubbo XML\nDESCRIPTION: Demonstrates how to configure the Networker extension in Dubbo's XML configuration. It shows setting the networker for a specific protocol and setting a default networker for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/networker.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol networker=\"xxx\" />\n<!-- 缺省值设置，当<dubbo:protocol>没有配置networker属性时，使用此配置 -->\n<dubbo:provider networker=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Module Cache for Hugo\nDESCRIPTION: Command to clear the local Hugo module cache before starting the server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/README.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhugo mod clean\n```\n\n----------------------------------------\n\nTITLE: Refreshing Interface-level Invoker in MigrationInvoker\nDESCRIPTION: The refreshInterfaceInvoker method updates the interface-level invoker used for service discovery. It sets up a listener to recalculate the preferred invoker when addresses change.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected void refreshInterfaceInvoker(CountDownLatch latch) {\n        clearListener(invoker);\n        if (needRefresh(invoker)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Re-subscribing interface addresses for interface \" + type.getName());\n            }\n\n            if (invoker != null) {\n                invoker.destroy();\n            }\n            invoker = registryProtocol.getInvoker(cluster, registry, type, url);\n        }\n        setListener(invoker, () -> {\n            latch.countDown();\n            if (reportService.hasReporter()) {\n                reportService.reportConsumptionStatus(\n                    reportService.createConsumptionReport(consumerUrl.getServiceInterface(), consumerUrl.getVersion(), consumerUrl.getGroup(), \"interface\"));\n            }\n            if (step == APPLICATION_FIRST) {\n                calcPreferredInvoker(rule);\n            }\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Refreshing Interface-level Invoker in MigrationInvoker\nDESCRIPTION: The refreshInterfaceInvoker method updates the interface-level invoker used for service discovery. It sets up a listener to recalculate the preferred invoker when addresses change.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected void refreshInterfaceInvoker(CountDownLatch latch) {\n        clearListener(invoker);\n        if (needRefresh(invoker)) {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Re-subscribing interface addresses for interface \" + type.getName());\n            }\n\n            if (invoker != null) {\n                invoker.destroy();\n            }\n            invoker = registryProtocol.getInvoker(cluster, registry, type, url);\n        }\n        setListener(invoker, () -> {\n            latch.countDown();\n            if (reportService.hasReporter()) {\n                reportService.reportConsumptionStatus(\n                    reportService.createConsumptionReport(consumerUrl.getServiceInterface(), consumerUrl.getVersion(), consumerUrl.getGroup(), \"interface\"));\n            }\n            if (step == APPLICATION_FIRST) {\n                calcPreferredInvoker(rule);\n            }\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: SPI Implementation Configuration\nDESCRIPTION: Configuration file content for mapping SPI implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_23\n\nLANGUAGE: text\nCODE:\n```\ndemoSpiImpl = com.xxx.xxx.DemoSpiImpl\n```\n\n----------------------------------------\n\nTITLE: Configuring Destination Rules in YAML for Mesh Routing\nDESCRIPTION: Example YAML configuration for dist_rule.yml that defines destination rules in Dubbo-go 3.0 mesh routing. This file works together with virtual_service.yaml to control traffic routing based on defined patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/3.0_feature.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndest_rule.png\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana with Default Dubbo Dashboards in Kubernetes\nDESCRIPTION: This command installs Grafana in a Kubernetes cluster using a pre-configured YAML file that includes default Dubbo community metrics dashboards.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/grafana.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/grafana.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service in Java\nDESCRIPTION: Implementation of the DemoService interface using @DubboService annotation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-triple-with-apisix-gateway.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting and Registering Service with RegistryProtocol in Java\nDESCRIPTION: This method handles the export and registration of a service, including configuration overrides, local export, registry center registration, and service startup notification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public <T> Exporter<T> export(final Invoker<T> originInvoker) throws RpcException {\n       //service-discovery-registry://8.131.79.126:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-api-provider&dubbo=2.0.2&pid=14256&registry=zookeeper&release=3.0.8&timestamp=1653710477057\n        URL registryUrl = getRegistryUrl(originInvoker);\n        // url to export locally\n        //dubbo://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&bind.ip=192.168.1.9&bind.port=20880&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=14256&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1653710479073\n        URL providerUrl = getProviderUrl(originInvoker);\n\n        // Subscribe the override data\n        // FIXME When the provider subscribes, it will affect the scene : a certain JVM exposes the service and call\n        //  the same service. Because the subscribed is cached key with the name of the service, it causes the\n        //  subscription information to cover.\n        //provider://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&bind.ip=192.168.1.9&bind.port=20880&category=configurators&check=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=14256&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1653710479073\n        \n        final URL overrideSubscribeUrl = getSubscribedOverrideUrl(providerUrl);\n        //override配置\n        final OverrideListener overrideSubscribeListener = new OverrideListener(overrideSubscribeUrl, originInvoker);\n        Map<URL, NotifyListener> overrideListeners = getProviderConfigurationListener(providerUrl).getOverrideListeners();\n        overrideListeners.put(registryUrl, overrideSubscribeListener);\n\n        providerUrl = overrideUrlWithConfig(providerUrl, overrideSubscribeListener);\n        \n        //export invoker\n        final ExporterChangeableWrapper<T> exporter = doLocalExport(originInvoker, providerUrl);\n\n        // url to registry\n        //通过URL获取 注册中心Registry操作对象\n        final Registry registry = getRegistry(registryUrl);\n        //需要向注册中心注册地址转换\n        //dubbo://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=14656&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1653711086189\n        final URL registeredProviderUrl = getUrlToRegistry(providerUrl, registryUrl);\n\n        // decide if we need to delay publish (provider itself and registry should both need to register)\n        boolean register = providerUrl.getParameter(REGISTER_KEY, true) && registryUrl.getParameter(REGISTER_KEY, true);\n        //是否向注册中心注册\n        if (register) {\n            register(registry, registeredProviderUrl);\n        }\n\n        // register stated url on provider model\n        registerStatedUrl(registryUrl, registeredProviderUrl, register);\n\n\n        exporter.setRegisterUrl(registeredProviderUrl);\n        exporter.setSubscribeUrl(overrideSubscribeUrl);\n\n        if (!registry.isServiceDiscovery()) {\n            // Deprecated! Subscribe to override rules in 2.6.x or before.\n            registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);\n        }\n\t\t//内置监听器通知 这个不是通知消费者的\n        notifyExport(exporter);\n        //Ensure that a new exporter instance is returned every time export\n        return new DestroyableExporter<>(exporter);\n    }\n```\n\n----------------------------------------\n\nTITLE: Dubbo Schema Declaration for XML Configuration\nDESCRIPTION: Shows the correct namespace declarations and schema locations for Dubbo XML configuration. This is essential for XML validation and proper IDE support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n```\n\n----------------------------------------\n\nTITLE: 创建并启动Dubbo服务器\nDESCRIPTION: 使用Fastify创建HTTP服务器并注册Dubbo服务。这个服务器将在指定端口监听请求，并提供之前实现的ExampleService服务。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { fastify } from \"fastify\";\nimport { fastifyDubboPlugin } from \"@apachedubbo/dubbo-fastify\";\nimport routes from \"./dubbo\";\n\nasync function main() {\n  const server = fastify();\n  await server.register(fastifyDubboPlugin, {\n    routes,\n  });\n  server.get(\"/\", (_, reply) => {\n    reply.type(\"text/plain\");\n    reply.send(\"Hello World!\");\n  });\n  await server.listen({ host: \"localhost\", port: 8080 });\n  console.log(\"server is listening at\", server.addresses());\n}\n\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Documentation Build Settings in YAML\nDESCRIPTION: YAML frontmatter configuration that defines how Go documentation should be rendered and displayed. Sets the build render mode to 'link', specifies the description and title as 'Go', configures the document type as 'docs', and sets the weight for ordering to 20.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/download/go.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Go\nmanualLinkRelref: ./#go\ntitle: Go\ntype: docs\nweight: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Size for REST Services in Dubbo XML\nDESCRIPTION: Shows how to configure the thread pool size for REST protocol services in Dubbo to control concurrency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" threads=\"500\"/>\n```\n\n----------------------------------------\n\nTITLE: Default Dubbo Operator Configuration (YAML)\nDESCRIPTION: Default YAML configuration for the Dubbo Operator, including component settings and versions for Admin, Grafana, Nacos, Zookeeper, Prometheus, Skywalking, and Zipkin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dubbo.apache.org/v1alpha1\nkind: DubboOperator\nmetadata:\n  namespace: dubbo-system\nspec:\n  profile: default\n  namespace: dubbo-system\n  componentsMeta:\n    admin:\n      enabled: true\n    grafana:\n      enabled: true\n      repoURL: https://grafana.github.io/helm-charts\n      version: 6.52.4\n    nacos:\n      enabled: true\n    zookeeper:\n      enabled: true\n      repoURL: https://charts.bitnami.com/bitnami\n      version: 11.1.6\n    prometheus:\n      enabled: true\n      repoURL: https://prometheus-community.github.io/helm-charts\n      version: 20.0.2\n    skywalking:\n      enabled: true\n      repoURL: https://apache.jfrog.io/artifactory/skywalking-helm\n      version: 4.3.0\n    zipkin:\n      enabled: true\n      repoURL: https://openzipkin.github.io/zipkin\n      version: 0.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Queue Warning Size in Dubbo\nDESCRIPTION: Sets the warning threshold for the number of connections in the queue. When the number of connections exceeds this value, Dubbo will issue a warning. The default value is 1000.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/faq/6/7.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconnect.queue.warning.size=1000\n```\n\n----------------------------------------\n\nTITLE: Maven Command for Annotation/XML-based Dubbo Native Compilation\nDESCRIPTION: Maven command to compile a Dubbo application using annotation or XML configuration with SpringBoot3 integration for GraalVM native image. It includes the native:compile goal to generate the executable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-graalvm-support.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n mvn clean install -P native native:compile -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Registry with Multiple Addresses\nDESCRIPTION: Sets up the Etcd registry with multiple server addresses for high availability, separating the protocol from the address list.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/etcd.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"etcd\" address=\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo3 Spring Boot Starter\nDESCRIPTION: Configuration for adding Dubbo3 Spring Boot Starter dependency for Spring Boot applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: JAX-RS Client Implementation Example\nDESCRIPTION: Example of using JAX-RS Client API to consume Dubbo REST services from non-Dubbo clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nUser user = new User();\nuser.setName(\"Larry\");\n\nClient client = ClientBuilder.newClient();\nWebTarget target = client.target(\"http://localhost:8080/services/users/register.json\");\nResponse response = target.request().post(Entity.entity(user, MediaType.APPLICATION_JSON_TYPE));\n\ntry {\n    if (response.getStatus() != 200) {\n        throw new RuntimeException(\"Failed with HTTP error code : \" + response.getStatus());\n    }\n    System.out.println(\"The generated id is \" + response.readEntity(RegistrationResult.class).getId());\n} finally {\n    response.close();\n    client.close(); // 在真正开发中不要每次关闭client，比如HTTP长连接是由client持有的\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-Go Logger Instance\nDESCRIPTION: Demonstrates how to initialize a Dubbo instance with custom logger configuration using Zap logger and setting warning level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/logger.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nins, err := dubbo.NewInstance(\n\tdubbo.WithLogger(\n\t\tlog.WithLevel(\"warn\"),\n\t\tlog.WithZap(),\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties\nDESCRIPTION: Defines the external configuration properties for a Dubbo consumer application, including the application name, ZooKeeper registry address, and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=demo-consumer\ndubbo.registry.address=zookeeper://$DOCKER_HOST:2181\ndubbo.consumer.timeout=3000\n```\n\n----------------------------------------\n\nTITLE: REST Request Handler Implementation\nDESCRIPTION: HTTP handler implementation for processing REST requests, building RPC invocations and handling responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate class RestHandler implements HttpHandler<HttpServletRequest, HttpServletResponse> {\n    @Override\n    public void handle(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws IOException, ServletException {\n        RequestFacade request = RequestFacadeFactory.createRequestFacade(servletRequest);\n        RpcContext.getServiceContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());\n        Pair<RpcInvocation, Invoker> build = null;\n        try {\n            build = RPCInvocationBuilder.build(request, servletRequest, servletResponse);\n        } catch (PathNoFoundException e) {\n            servletResponse.setStatus(404);\n        }\n        Invoker invoker = build.getSecond();\n        Result invoke = invoker.invoke(build.getFirst());\n        if (invoke.hasException()) {\n            servletResponse.setStatus(500);\n        } else {\n            try {\n                Object value = invoke.getValue();\n                String accept = request.getHeader(RestConstant.ACCEPT);\n                MediaType mediaType = MediaTypeUtil.convertMediaType(accept);\n                HttpMessageCodecManager.httpMessageEncode(servletResponse.getOutputStream(), value, invoker.getUrl(), mediaType);\n                servletResponse.setStatus(200);\n            } catch (Exception e) {\n                servletResponse.setStatus(500);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Implementation in ServiceDiscoveryRegistry\nDESCRIPTION: Implementation of getServiceDiscovery method in ServiceDiscoveryRegistry that obtains a ServiceDiscoveryFactory extension and uses it to get a ServiceDiscovery instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nprivate ServiceDiscovery getServiceDiscovery(URL registryURL) {\n//服务发现工厂对象的获取这里是ServiceDiscoveryFactory类型，这里对应ZookeeperServiceDiscoveryFactory\n        ServiceDiscoveryFactory factory = getExtension(registryURL);\n        //服务发现工厂对象获取服务发现对象\n        return factory.getServiceDiscovery(registryURL);\n    }\n```\n\n----------------------------------------\n\nTITLE: Viewing Warned Classes in Dubbo QoS Console (Bash)\nDESCRIPTION: Shows how to use telnet to access Dubbo's QoS console and view the list of classes that have triggered serialization warnings. This is useful for identifying potential security issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____\n  / _ \\ / / / // _ ) / _ ) / __ \\\n / // // /_/ // _  |/ _  |/ /_/ /\n/____/ \\____//____//____/ \\____/\ndubbo>serializeWarnedClasses\nWarnedClasses:\nio.dubbo.test.NotSerializable\nio.dubbo.test2.NotSerializable\nio.dubbo.test2.OthersSerializable\norg.apache.dubbo.samples.NotSerializable\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Handler in Java\nDESCRIPTION: Implementation of the callback interface that stores results and errors in maps\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass NotifyImpl implements Notify {\n    public Map<Integer, Person>    ret    = new HashMap<Integer, Person>();\n    public Map<Integer, Throwable> errors = new HashMap<Integer, Throwable>();\n    \n    public void onreturn(Person msg, Integer id) {\n        System.out.println(\"onreturn:\" + msg);\n        ret.put(id, msg);\n    }\n    \n    public void onthrow(Throwable ex, Integer id) {\n        errors.put(id, ex);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ReferenceConfig Caching Implementation in Java\nDESCRIPTION: Demonstrates how to initialize and use ReferenceConfigCache to cache ReferenceConfig instances. The cache helps prevent performance issues and memory leaks by reusing ReferenceConfig objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/reference-config-cache.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n......\nReferenceConfigCache cache = ReferenceConfigCache.getCache();\n// cache.get方法中会缓存 Reference对象，并且调用ReferenceConfig.get方法启动ReferenceConfig\nXxxService xxxService = cache.get(reference);\n// 注意！ Cache会持有ReferenceConfig，不要在外部再调用ReferenceConfig的destroy方法，导致Cache内的ReferenceConfig失效！\n// 使用xxxService对象\nxxxService.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Configuring DispatcherServlet for Dubbo HTTP Protocol\nDESCRIPTION: XML configuration for setting up the DispatcherServlet in a web application to handle Dubbo HTTP requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/http.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n         <servlet-name>dubbo</servlet-name>\n         <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n         <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n         <servlet-name>dubbo</servlet-name>\n         <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Building and pushing dubbo-pilot image to Docker registry\nDESCRIPTION: Command for compiling dubbo-pilot and pushing the resulting image to a Docker registry. Uses docker-builder with specific targets and hub options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntools/docker-builder/docker-builder --targets pilot --hub docker.io/bobtthp --push\n```\n\n----------------------------------------\n\nTITLE: Building and pushing dubbo-pilot image to Docker registry\nDESCRIPTION: Command for compiling dubbo-pilot and pushing the resulting image to a Docker registry. Uses docker-builder with specific targets and hub options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntools/docker-builder/docker-builder --targets pilot --hub docker.io/bobtthp --push\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Metadata Center Address in YAML\nDESCRIPTION: YAML configuration to set the Consul metadata center address for Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: consul://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RegistryFactory in Dubbo Properties\nDESCRIPTION: Properties file configuration for registering a custom RegistryFactory implementation in Dubbo. This file maps the 'xxx' key to the fully qualified class name of XxxRegistryFactory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/registry.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxRegistryFactory\n```\n\n----------------------------------------\n\nTITLE: Creating a New Development Branch in Git\nDESCRIPTION: Commands for creating a new local branch based on the upstream master branch. This is part of the workflow for starting work on a new issue or feature in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/new-contributor-guide_dev.md#2025-04-08_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngit checkout -b up-dev-issue#${issue-number} upstream/master\n```\n\n----------------------------------------\n\nTITLE: Configuring Kryo Serialization in Spring Boot\nDESCRIPTION: YAML configuration for enabling Kryo serialization in a Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/kryo.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n protocol:\n   serialization: kryo\n```\n\n----------------------------------------\n\nTITLE: Adding Consul Dependency for Dubbo Metadata Center\nDESCRIPTION: XML configuration to add the Consul dependency for metadata center implementation in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-metadata-report-consul</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Zookeeper Integration with Curator 5 for Spring Boot Applications\nDESCRIPTION: For Spring Boot applications using Zookeeper Server 3.8.0 or higher, this snippet shows how to integrate Zookeeper with Dubbo using Curator 5 through the dedicated starter dependency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Stack Trace for Dubbo Routing Analysis\nDESCRIPTION: Command to generate a stack trace log file for analyzing routing delays and potential deadlocks in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/40.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Calculating nextMaxConcurrency in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the next maximum concurrency value for the current window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/09852cc0ef125b43a37719796cb8baae.svg)\n```\n\n----------------------------------------\n\nTITLE: Creating Weight-Based Routing in Istio VirtualService YAML\nDESCRIPTION: Configures an Istio VirtualService to route 90% of traffic to v1 and 10% to v2 of the application for gray testing purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: dubbo-go-server\nspec:\n  hosts:\n    - dubbo-go-server\n  http:\n    - route:\n      - destination:\n          host: dubbo-go-server\n          subset: v1\n        weight: 90\n      - destination:\n          host: dubbo-go-server\n          subset: v2\n        weight: 10\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Thread Pool Extension\nDESCRIPTION: Directory structure showing the required files and their locations for implementing a custom thread pool extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/threadpool.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxThreadPool.java (implements ThreadPool interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.common.threadpool.ThreadPool (plain text file, content: xxx=com.xxx.XxxThreadPool)\n```\n\n----------------------------------------\n\nTITLE: Consuming a Service in Java\nDESCRIPTION: Sample code showing how to consume a Dubbo service in a client application. The service is transparently invoked as if it were a local service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 和调用本地服务一样，完全透明。\n@Reference\nprivate GreetingService greetingService;\n\npublic void doSayHello(String name) {\n  greetingService.sayHi(\"Hello world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumers in Erlang's sys.config File\nDESCRIPTION: This snippet demonstrates how to configure Dubbo consumer interfaces in the sys.config file under the dubboerl application configuration. It shows the basic structure for defining service interfaces including a specific example for the UserOperator service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/reference.md#2025-04-08_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{dubboerl,[\n\t%% other config ...\n\t{consumer,[\n\t\t{<<\"interface fullname\">>,[Option]},\n\t\t%% eg:\n\t\t{<<\"org.apache.dubbo.erlang.sample.service.facade.UserOperator\">>,[]},\n\t]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Registering Metadata and Instance in Dubbo\nDESCRIPTION: This utility method registers metadata and instance information for service discovery. It uses the RegistryManager to get ServiceDiscovery instances and calls their register method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static void registerMetadataAndInstance(ApplicationModel applicationModel) {\n    LOGGER.info(\"Start registering instance address to registry.\");\n    RegistryManager registryManager = applicationModel.getBeanFactory().getBean(RegistryManager.class);\n    registryManager.getServiceDiscoveries().forEach(ServiceDiscovery::register);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TypeScript Server\nDESCRIPTION: Starts the Dubbo server using tsx runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nnpx tsx server.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Invokers in AbstractDirectory\nDESCRIPTION: The list method in AbstractDirectory encapsulates the process of listing Invokers. It calls the doList template method and applies routing if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic List<Invoker<T>> list(Invocation invocation) throws RpcException {\n    if (destroyed) {\n        throw new RpcException(\"Directory already destroyed...\");\n    }\n    \n    List<Invoker<T>> invokers = doList(invocation);\n    \n    List<Router> localRouters = this.routers;\n    if (localRouters != null && !localRouters.isEmpty()) {\n        for (Router router : localRouters) {\n            try {\n                if (router.getUrl() == null || router.getUrl().getParameter(Constants.RUNTIME_KEY, false)) {\n                    invokers = router.route(invokers, getConsumerUrl(), invocation);\n                }\n            } catch (Throwable t) {\n                logger.error(\"Failed to execute router: ...\");\n            }\n        }\n    }\n    return invokers;\n}\n\nprotected abstract List<Invoker<T>> doList(Invocation invocation) throws RpcException;\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Port in dubbo.properties\nDESCRIPTION: Sets the QOS module port to 33333 using the dubbo.properties configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\ndubbo.application.qos.port=33333\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Dubbo LivenessProbe Extension\nDESCRIPTION: Illustrates the recommended Maven project structure for implementing a Dubbo LivenessProbe extension, including the placement of Java files and configuration resources.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/liveness.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxLivenessProbe.java (实现LivenessProbe接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.LivenessProbe (纯文本文件，内容为：xxx=com.xxx.XxxLivenessProbe)\n```\n\n----------------------------------------\n\nTITLE: Checking Service Export with Logs in Dubbo\nDESCRIPTION: Log example showing a successful service export to a local registry. This helps verify that a Dubbo service has been properly published to the local registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[26/02/23 04:34:41:041 CST] main  INFO config.ServiceConfig:  [DUBBO] Export dubbo service org.apache.dubbo.samples.api.GreetingsService to local registry url : injvm://***, dubbo version: 3.1.7, current host: 192.168.31.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Connections in Dubbo XML\nDESCRIPTION: XML configuration for enabling lazy connections in Dubbo protocol, where connections are only established when actual service calls are made.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/config-connections.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" lazy=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Interfaces with ifconfig\nDESCRIPTION: These shell commands demonstrate various operations for configuring network interfaces using the ifconfig command, including enabling/disabling interfaces, setting IP addresses, and modifying interface properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nifconfig eth0 up\nifconfig eth0 down\n\nifconfig eth0 add 33ffe:3240:800:1005::2/64\nifconfig eth0 del 33ffe:3240:800:1005::2/64\n\nifconfig eth0 hw ether 00:AA:BB:CC:dd:EE\n\nifconfig eth0 192.168.2.10\nifconfig eth0 192.168.2.10 netmask 255.255.255.0\nifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255\n\nifconfig eth0 arp\nifconfig eth0 -arp\n\nifconfig eth0 mtu 1500\n```\n\n----------------------------------------\n\nTITLE: Configuring Hystrix on Dubbo Provider\nDESCRIPTION: Implementation of Dubbo service provider with Hystrix command configuration including circuit breaker and timeout settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Service(version = \"1.0.0\")\npublic class HelloServiceImpl implements HelloService {\n    @HystrixCommand(commandProperties = {\n                    @HystrixProperty(name = \"circuitBreaker.requestVolumeThreshold\", value = \"10\"),\n                    @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"2000\") })\n    @Override\n    public String sayHello(String name) {\n        // System.out.println(\"async provider received: \" + name);\n        // return \"annotation: hello, \" + name;\n        throw new RuntimeException(\"Exception to show hystrix enabled.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Read Stream Operation in Dubbo Python\nDESCRIPTION: Shows how to read a single response from a stream.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = stream.read()\nprint(f\"Received response: {result.message}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing GZIP Writer Interceptor\nDESCRIPTION: A WriterInterceptor implementation that adds GZIP compression to the output stream.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_32\n\nLANGUAGE: java\nCODE:\n```\npublic class GZIPWriterInterceptor implements WriterInterceptor {\n \n    @Override\n    public void aroundWriteTo(WriterInterceptorContext context)\n                    throws IOException, WebApplicationException {\n        OutputStream outputStream = context.getOutputStream();\n        context.setOutputStream(new GZIPOutputStream(outputStream));\n        context.proceed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Dubbo Service Provider Demo\nDESCRIPTION: Demonstrates the initialization and startup of a Dubbo service provider using DubboBootstrap to configure application, registry, protocol, and service components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/12-全局视野来看Dubbo3的服务启动生命周期.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws Exception {\n            startWithBootstrap();\n    }\n    private static void startWithBootstrap() {\n    \t//前面的文章都在说这个服务配置对象的创建,中间又说了分层域模型,扩展加载机制\n        ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();\n        //为服务配置下服务接口和服务实现,下面两行用来初始化对象就不详细说了\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        //这一个篇章主要说这里:\n        DubboBootstrap bootstrap = DubboBootstrap.getInstance();\n        //初始化应用配置\n        bootstrap.application(new ApplicationConfig(\"dubbo-demo-api-provider\"))\n        //初始化注册中心配置\n            .registry(new RegistryConfig(\"zookeeper://127.0.0.1:2181\"))\n            //初始化协议配置\n            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))\n            //初始化服务配置\n            .service(service)\n            //启动\n            .start()\n            .await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Protocol using YAML Configuration in Dubbo-go\nDESCRIPTION: Example YAML configuration for a Dubbo-go client using the Triple protocol. This configuration specifies the reference interface and protocol for the client implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    references:\n      GreeterClientImpl:\n        protocol: tri # set protcol to tri\n        interface: com.apache.dubbo.sample.basic.IGreeter \n```\n\n----------------------------------------\n\nTITLE: Configuring Server Registry with Advanced Options\nDESCRIPTION: Example of configuring a Nacos registry for a Dubbo-go server with advanced options using RegistryConfigBuilder, including protocol, address, group, namespace, credentials, and timeout.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/_index.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nrc := config.NewRootConfigBuilder().\n    SetProvider(config.NewProviderConfigBuilder().\n        AddService(\"GreeterProvider\", /*...*/).\n        SetRegistryIDs(\"registryKey\"). // use defined registryID\n        Build()).\n    AddRegistry(\"registryKey\", config.NewRegistryConfigBuilder().\n        SetProtocol(\"nacos\").\n        SetAddress(\"127.0.0.1:8848\").\n        SetGroup(\"dubbo-go\").\n        SetNamespace(\"dubbo\").\n        SetUsername(\"admin\").\n        SetPassword(\"admin\").\n        SetTimeout(\"3s\").\n        Build()).\n    Build()\n```\n\n----------------------------------------\n\nTITLE: Defining StateRouter Interface in Dubbo\nDESCRIPTION: The StateRouter interface provides high-performance routing capabilities in Dubbo 3. It includes methods for route filtering, notification of address changes, and resource cleanup, operating on BitList collections for better performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/service-invocation.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.rpc.cluster.router.state;\n\npublic interface StateRouter<T> {\n\n    BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, URL url, Invocation invocation,\n                     boolean needToPrintMessage, Holder<RouterSnapshotNode<T>> nodeHolder) throws RpcException;\n\n    void notify(BitList<Invoker<T>> invokers);\n\n    void stop();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Application Extensions in Dubbo\nDESCRIPTION: Method to initialize all ApplicationExt extensions. In the current version, there are two extension implementations: ConfigManager and Environment. Each extension's initialize method is called during application startup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n   private void initApplicationExts() {\n   //这个扩展实现一共有两个可以看下面那个图扩展类型为ConfigManager和Environment\n        Set<ApplicationExt> exts = this.getExtensionLoader(ApplicationExt.class).getSupportedExtensionInstances();\n        for (ApplicationExt ext : exts) {\n            ext.initialize();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface Configuration Metadata from Zookeeper\nDESCRIPTION: Example of fetching interface configuration metadata from Zookeeper. The metadata is stored under /dubbo/metadata/{application name}/{revision}.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/overview.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 33] get /dubbo/metadata/demo-provider/da3be833baa2088c5f6776fb7ab1a436\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface Configuration Metadata from Zookeeper\nDESCRIPTION: Example of fetching interface configuration metadata from Zookeeper. The metadata is stored under /dubbo/metadata/{application name}/{revision}.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/overview.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 33] get /dubbo/metadata/demo-provider/da3be833baa2088c5f6776fb7ab1a436\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo Ecosystem Documentation\nDESCRIPTION: YAML front matter block defining metadata for a documentation page about the Dubbo ecosystem. Specifies the page type, title, link title, weight for ordering, and description fields.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/facade-docs/what/ecosystem.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: docs\ntitle: \"Dubbo Ecosystem\"\nlinkTitle: \"Dubbo Ecosystem\"\nweight: 3\ndescription: \"\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Zookeeper CLI\nDESCRIPTION: Command to start the Zookeeper command-line interface (zkCli) within the container to manage and interact with Zookeeper data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/zkCli.sh -server 127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Avro Serialization in Properties File\nDESCRIPTION: Properties file configuration options for enabling Avro serialization at different levels: protocol, consumer, or reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.serialization=avro\n\n# or\ndubbo.consumer.serialization=avro\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=avro\n```\n\n----------------------------------------\n\nTITLE: Adaptive Extension Class Creation in Dubbo\nDESCRIPTION: Implementation of adaptive extension class creation with dependency injection\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate T createAdaptiveExtension() {\n    try {\n        return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Can not create adaptive extension ...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Services in Istio for Version-Based Routing\nDESCRIPTION: YAML configuration for Istio VirtualService resources that route all traffic to v1 versions of the Bookinfo microservices. This configuration demonstrates how to define route rules in Istio.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Thread Dumps for Analyzing Dubbo Timeout Issues\nDESCRIPTION: Command for capturing thread dumps from a Java process to analyze where threads might be stuck, helping to identify the cause of slow processing that leads to client timeouts in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/6/2.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Implementing GET Method with Path Parameters in Java\nDESCRIPTION: Example of implementing a GET method with path parameters to retrieve user information by ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n@GET\n@Path(\"{id : \\\\d+}\")\n@Produces({MediaType.APPLICATION_JSON})\npublic User getUser(@PathParam(\"id\") Long id) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Services in Istio for Version-Based Routing\nDESCRIPTION: YAML configuration for Istio VirtualService resources that route all traffic to v1 versions of the Bookinfo microservices. This configuration demonstrates how to define route rules in Istio.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Maven 项目结构示例\nDESCRIPTION: 展示了实现 Dubbo 容器扩展的 Maven 项目结构，包括实现类位置和 SPI 配置文件位置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxContainer.java (实现Container接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.container.Container (纯文本文件，内容为：xxx=com.xxx.XxxContainer)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Nacos\nDESCRIPTION: Docker Compose configuration for setting up Nacos server in standalone mode\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-triple-with-apisix-gateway.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  nacos:\n    image: nacos/nacos-server:v2.1.1\n    container_name: nacos-standalone\n    environment:\n    - PREFER_HOST_MODE=hostname\n    - MODE=standalone\n    ports:\n    - \"8848:8848\"\n    - \"9848:9848\"\n    networks:\n      apisix:\n```\n\n----------------------------------------\n\nTITLE: Dubbo Component Scanning Configuration\nDESCRIPTION: Shows how to configure component scanning for Dubbo services using either annotation or XML approaches.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-basic-usage-dubbo-provider-configuration.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@SpringBootApplication\n@DubboComponentScan(basePackages = \"com.alibaba.dubbo.test.service.impl\")\npublic class ProviderTestApp {\n    // ...\n}\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:annotation package=\"com.chanshuyi.service.impl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-level Routing with No Fallback in Dubbo\nDESCRIPTION: YAML configuration example demonstrating how to configure a method-level route that will fail instead of falling back when no addresses are available. The configuration shows different routing behaviors for different methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo-route\nspec:\n  hosts:\n  - demo  // 统一定义为应用名 \n  dubbo:\n  - service:\n    - exact: com.taobao.hsf.demoService:1.0.0\n    - exact: com.taobao.hsf.demoService:2.0.0\n    routedetail:\n      - name: sayHello-String-method-route\n        match: \n        - method:\n            name_match: \n              exact: \"sayHello\"\n              .....\n            argp:\n            - string\n        route:\n        - destination:\n            host: demo\n            subset: v1\n          fallback:\n            destination:\n              host: demo\n              subset: v2\n            fallback:\n              destination:\n                host: demo\n                subset: v3\n\n      - name: sayHello-method-route\n        match: \n        - method:\n            name_match: \n              exact: \"s-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n      - name: some-method-route\n        match: \n        - method:\n            name_match: \n              exact: \"some-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v4\n            \n      - name: interface-route \n        route:\n        - destination: \n          host: demo\n          subset: v3\n\n  - service:\n\n      ....\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: demo-route\nspec:\n  host: demo\n  subsets:\n  - name: v1\n    labels:\n      sigma.ali/mg: v1-host\n\n  - name: v2\n    labels:\n      sigma.ali/mg: v2-host\n\n  - name: v3\n    labels:\n      sigma.ali/mg: v3-host\n```\n\n----------------------------------------\n\nTITLE: Processing Adaptive Annotation Values in Dubbo Extension Mechanism\nDESCRIPTION: This code processes the Adaptive annotation values in Dubbo's extension mechanism. If the annotation has no explicit values, it converts the interface name to a dot-separated format (e.g., LoadBalance becomes load.balance) to be used as the key for extension lookup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/adaptive-extension.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfor (Method method : methods) {\n    Class<?> rt = method.getReturnType();\n    Class<?>[] pts = method.getParameterTypes();\n    Class<?>[] ets = method.getExceptionTypes();\n\n    Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\n    StringBuilder code = new StringBuilder(512);\n    if (adaptiveAnnotation == null) {\n        // ${无 Adaptive 注解方法代码生成逻辑}\n    } else {\n        // ${获取 URL 数据}\n        \n        String[] value = adaptiveAnnotation.value();\n        // value 为空数组\n        if (value.length == 0) {\n            // 获取类名，并将类名转换为字符数组\n            char[] charArray = type.getSimpleName().toCharArray();\n            StringBuilder sb = new StringBuilder(128);\n            // 遍历字节数组\n            for (int i = 0; i < charArray.length; i++) {\n                // 检测当前字符是否为大写字母\n                if (Character.isUpperCase(charArray[i])) {\n                    if (i != 0) {\n                        // 向 sb 中添加点号\n                        sb.append(\".\");\n                    }\n                    // 将字符变为小写，并添加到 sb 中\n                    sb.append(Character.toLowerCase(charArray[i]));\n                } else {\n                    // 添加字符到 sb 中\n                    sb.append(charArray[i]);\n                }\n            }\n            value = new String[]{sb.toString()};\n        }\n        \n        // 省略无关代码\n    }\n    \n    // 省略无关逻辑\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Thread Dump Directory in Properties File\nDESCRIPTION: This snippet shows how to specify the export path for thread dumps in the dubbo.properties file. It sets the dump directory to '/tmp'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/dump.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.application.dump.directory=/tmp\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Thread Dump Directory in XML\nDESCRIPTION: This XML configuration demonstrates how to set the thread dump export directory for a Dubbo application. It uses the 'dump.directory' parameter to specify the '/tmp' directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/dump.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application ...>\n    <dubbo:parameter key=\"dump.directory\" value=\"/tmp\" />\n</dubbo:application>\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol Upgrade in Dubbo\nDESCRIPTION: YAML configuration example showing how to configure a Dubbo provider to support both a new serialization protocol (fastjson2) and the legacy protocol (hessian2). The 'prefer-serialization' setting allows prioritizing the new protocol while maintaining backward compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization-upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo.provider.prefer-serialization=fastjson2,hessian2\ndubbo.provider.serialization=hessian2\n```\n\n----------------------------------------\n\nTITLE: Defining injvm Protocol in Dubbo XML Configuration\nDESCRIPTION: Configures the injvm protocol definition in Dubbo, which is a pseudo-protocol that doesn't open ports or initiate remote calls, but only associates directly within the JVM while executing the Dubbo Filter chain.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/local-call.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Service Subscription Through Application Logs\nDESCRIPTION: Search application logs for specific patterns showing service subscription activities and registry push events.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 11:02:05:005 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer://***/org.apache.dubbo.samples.api.GreetingsService?***, dubbo version: 3.2.0-beta.6, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Service in Spring XML\nDESCRIPTION: Spring XML configuration to expose the REST service using Dubbo's REST protocol on port 8080.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- 用rest协议在8080端口暴露服务 -->\n<dubbo:protocol name=\"rest\" port=\"8080\"/>\n \n<!-- 声明需要暴露的服务接口 -->\n<dubbo:service interface=\"xxx.UserService\" ref=\"userService\"/>\n \n<!-- 和本地bean一样实现服务 -->\n<bean id=\"userService\" class=\"xxx.UserServiceImpl\" />\n```\n\n----------------------------------------\n\nTITLE: MacOS Network Interface Configuration\nDESCRIPTION: Sample output showing network interface configuration on MacOS system, demonstrating platform differences.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nlo0: flags=8049<UP,LOOPBACK,RUNNING,MULTICAST> mtu 16384\n\toptions=1203<RXCSUM,TXCSUM,TXSTATUS,SW_TIMESTAMP>\n\tinet 127.0.0.1 netmask 0xff000000\n\tinet6 ::1 prefixlen 128\n\tinet6 fe80::1%lo0 prefixlen 64 scopeid 0x1\n\tnd6 options=201<PERFORMNUD,DAD>\n```\n\n----------------------------------------\n\nTITLE: Handling TCP Compression in Getty\nDESCRIPTION: Code snippet demonstrating how TCP compression is handled in the Getty library, addressing timeout issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-getty.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/alexstocks/getty/blob/master/conn.go#L228\n```\n\n----------------------------------------\n\nTITLE: Local Protocol Export in Dubbo\nDESCRIPTION: This snippet shows the doLocalExport method which handles local protocol export in Dubbo. It creates an ExporterChangeableWrapper using an InvokerDelegate and exports the service using the protocol's export method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate <T> ExporterChangeableWrapper<T> doLocalExport(final Invoker<T> originInvoker, URL providerUrl) {\n        String key = getCacheKey(originInvoker);\n\n        return (ExporterChangeableWrapper<T>) bounds.computeIfAbsent(key, s -> {\n            Invoker<?> invokerDelegate = new InvokerDelegate<>(originInvoker, providerUrl);\n            //代码中用的这个protoco对象是dubbo自动生成的适配器对象protocol$Adaptive 适配器对象会根据当前协议的参数来查询具体的协议扩展对象\n            return new ExporterChangeableWrapper<>((Exporter<T>) protocol.export(invokerDelegate), originInvoker);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Tag Properties via Java Command Line\nDESCRIPTION: Example of setting Dubbo provider tags via Java command line properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\njava -jar xxx-provider.jar -Ddubbo.provider.tag=gray\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoRepository in Java\nDESCRIPTION: Provides an implementation of IRepository for MongoDB storage.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/introduction-to-dubbo-spi.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MongoRepository implements IRepository {\n    public void save(String data) {\n        System.out.println(\"Save \" + data + \" to Mongo\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LivenessProbe in Java for Dubbo\nDESCRIPTION: Demonstrates how to create a custom LivenessProbe implementation in Java for Dubbo. The check() method should be implemented to define the liveness logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/liveness.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \npublic class XxxLivenessProbe implements LivenessProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Python Dubbo Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about Python in Apache Dubbo. It specifies the page should be rendered as a link, sets the description and title, and defines the document type and weight for ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/python.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Python\nmanualLinkRelref: ./#python\ntitle: Python\ntype: docs\nweight: 50\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Interface in Go for Dubbogo Framework\nDESCRIPTION: This code snippet defines the Protocol interface for the Dubbogo microservice framework. It includes three methods: Export for exposing services for remote invocation, Refer for referencing remote services, and Destroy for cleaning up resources when shutting down.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Protocol interface {\n\t// Export service for remote invocation\n\tExport(invoker Invoker) Exporter\n\t// Refer a remote service\n\tRefer(url *common.URL) Invoker\n\t// Destroy will destroy all invoker and exporter, so it only is called once.\n\tDestroy()\n}\n```\n\n----------------------------------------\n\nTITLE: Activate Annotation Definition\nDESCRIPTION: Definition of the @Activate annotation used for controlling extension activation conditions in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface Activate {\n    String[] group() default {};\n    String[] value() default {};\n    int order() default 0;\n    String[] onClass() default {};\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing User-Based Routing Configuration for Reviews Service\nDESCRIPTION: Command to confirm the user-based routing rule for the reviews service is correctly configured.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservice reviews -o yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance Strategy at Service Consumer Level\nDESCRIPTION: Configures the roundrobin load balancing strategy on the consumer side using the @DubboReference annotation. This configuration has higher priority than provider-side configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(loadbalance = \"roundrobin\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Custom Invoker Implementation - Java\nDESCRIPTION: Example implementation of a custom Invoker class extending AbstractInvoker.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.support.AbstractInvoker;\n \npublic class XxxInvoker<T> extends AbstractInvoker<T> {\n    public XxxInvoker(Class<T> type, URL url) throws RemotingException{\n        super(type, url);\n    }\n    \n    @Override\n    protected Result doInvoke(Invocation invocation) throws Throwable {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS ClientResponseFilter in Java for Dubbo REST\nDESCRIPTION: This code snippet demonstrates how to create a custom JAX-RS ClientResponseFilter to log response details on the client side of a Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\npublic class LoggingFilter implements ClientResponseFilter {\n \n    public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException {\n        System.out.println(\"status: \" + resCtx.getStatus());\n\t    System.out.println(\"date: \" + resCtx.getDate());\n\t    System.out.println(\"last-modified: \" + resCtx.getLastModified());\n\t    System.out.println(\"location: \" + resCtx.getLocation());\n\t    System.out.println(\"headers:\");\n\t    for (Entry<String, List<String>> header : resCtx.getHeaders().entrySet()) {\n     \t    System.out.print(\"\\t\" + header.getKey() + \" :\");\n\t        for (String value : header.getValue()) {\n\t            System.out.print(value + \", \");\n\t        }\n\t        System.out.print(\"\\n\");\n\t    }\n\t    System.out.println(\"media-type: \" + resCtx.getMediaType().getType());\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Running Triple Rest Sample Project\nDESCRIPTION: Commands to download and run the Triple Rest sample project using Maven or package it as a JAR file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get sample code\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# Run directly\nmvn spring-boot:run\n# Or package and run\nmvn clean package -DskipTests\njava -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Setting Load Balance Strategy at Service Consumer Level\nDESCRIPTION: Configures the roundrobin load balancing strategy on the consumer side using the @DubboReference annotation. This configuration has higher priority than provider-side configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(loadbalance = \"roundrobin\")\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry-Only Mode in Dubbo using XML\nDESCRIPTION: These code snippets demonstrate how to configure a Dubbo service to register with a registry without subscribing from it. This is useful in scenarios with multiple registry centers where a service is deployed only in one environment but needs to be visible across registries.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/registry-only.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"hzRegistry\" address=\"10.20.153.10:9090\" />\n<dubbo:registry id=\"qdRegistry\" address=\"10.20.141.150:9090\" subscribe=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"hzRegistry\" address=\"10.20.153.10:9090\" />\n<dubbo:registry id=\"qdRegistry\" address=\"10.20.141.150:9090?subscribe=false\" />\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Service with Protobuf IDL for Dubbo Rust\nDESCRIPTION: This snippet shows how to define a Dubbo service using Protocol Buffers IDL. It defines a simple Greeter service with a unary RPC method that accepts a GreeterRequest and returns a GreeterReply.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/rust/first-release.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// ./proto/greeter.proto\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.sample.tri;\n\n\n// The request message containing the user's name.\nmessage GreeterRequest {\nstring name = 1;\n}\n\n// The response message containing the greetings\nmessage GreeterReply {\nstring message = 1;\n}\n\nservice Greeter{\n// unary\nrpc greet(GreeterRequest) returns (GreeterReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgInfo Class for Dubbo REST Method Arguments\nDESCRIPTION: This Java class defines the structure for argument information in Dubbo REST methods. It includes details such as argument index, annotation name, parameter type, and URL split index.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ArgInfo {\n    /**\n     * method arg index 0,1,2,3\n     */\n    private int index;\n    /**\n     * method annotation name or name\n     */\n    private String annotationNameAttribute;\n\n    /**\n     * param annotation type\n     */\n    private Class paramAnnotationType;\n\n    /**\n     * param Type\n     */\n    private Class paramType;\n\n    /**\n     * param name\n     */\n    private String paramName;\n\n    /**\n     * url split(\"/\") String[n]  index\n     */\n    private int urlSplitIndex;\n\n    private Object defaultValue;\n\n    private boolean formContentType;\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in Properties\nDESCRIPTION: Properties file configuration options to enable FST serialization at protocol, consumer, or reference level in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.protocol.serialization=fst\n\n# or\ndubbo.consumer.serialization=fst\n\n# or\ndubbo.reference.com.demo.DemoService.serialization=fst\n```\n\n----------------------------------------\n\nTITLE: Configuring File Mapping for Direct Connection\nDESCRIPTION: Specifies a properties file path for service-to-URL mappings using the dubbo.resolve.file JVM parameter, useful when dealing with many services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njava -Ddubbo.resolve.file=xxx.properties\n```\n\n----------------------------------------\n\nTITLE: Reading Implicit Parameters on Provider Side in Dubbo\nDESCRIPTION: Demonstrates how to retrieve implicit parameters passed from the client within a service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class XxxServiceImpl implements XxxService {\n\n    public void xxx() {\n        // Get the parameters implicitly passed from the client, e.g., for framework integration\n        String index = RpcContext.getServerAttachment().getAttachment(\"index\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Stack Trace for Dubbo Load Mapping Error\nDESCRIPTION: This command generates a stack trace log file for a specific process ID to help diagnose Dubbo load mapping errors. It uses the jstack utility to dump the Java thread stack traces.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/25.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Reading Implicit Parameters on Provider Side in Dubbo\nDESCRIPTION: Demonstrates how to retrieve implicit parameters passed from the client within a service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class XxxServiceImpl implements XxxService {\n\n    public void xxx() {\n        // Get the parameters implicitly passed from the client, e.g., for framework integration\n        String index = RpcContext.getServerAttachment().getAttachment(\"index\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiler SPI Interface Definition\nDESCRIPTION: Interface definition for the compiler SPI with Javassist as the default implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"javassist\")\npublic interface Compiler {\n    Class<?> compile(String code, ClassLoader classLoader);\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Command for API-based Dubbo Native Compilation\nDESCRIPTION: Maven command to compile a Dubbo application using the API approach for GraalVM native image. This command activates the native profile and skips tests during the build process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-graalvm-support.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n mvn clean install -P native -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Examining Dubbo's Ephemeral Node Creation in CuratorZookeeperClient\nDESCRIPTION: This code snippet shows the createEphemeral method in CuratorZookeeperClient class that creates ephemeral nodes in Zookeeper. The root cause of the registration recovery issue was identified in this method, which silently ignores NodeExistsException without verifying if the existing node belongs to the current session.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/guazi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    public void createEphemeral(String path) {\n        try {\n            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Provider in XML\nDESCRIPTION: XML configuration for the asynchronous Provider, setting the async attribute to true.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"asyncService\" class=\"com.alibaba.dubbo.samples.async.impl.AsyncServiceImpl\"/>\n<dubbo:service async=\"true\" interface=\"com.alibaba.dubbo.samples.async.api.AsyncService\" ref=\"asyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Dubbo Website Repository\nDESCRIPTION: Command to clone the Apache Dubbo website repository from GitHub to your local machine.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/apache/dubbo-website.git\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider in Java\nDESCRIPTION: A simple Dubbo service provider implementation with a health method. This example shows how providers can be configured to participate in broadcast invocations from consumers using the broadcast2 cluster mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/broadcast-resp-collect.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class DubboHealthServiceImpl implements DubboHealthService {\n\n    @Override\n    public String health() {\n//        int i = 1/0;\n        return \"i am provider2\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Dubbo Service Registration Output\nDESCRIPTION: Shows the console output when a Dubbo consumer registers with ZooKeeper and subscribes to service providers. The output includes registration and subscription log messages with detailed information about the consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n[03/08/18 01:42:31:031 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Register: consumer://192.168.99.1/com.alibaba.dubbo.samples.api.GreetingService?application=demo-consumer&category=consumers&check=false&default.timeout=3000&dubbo=2.6.2&interface=com.alibaba.dubbo.samples.api.GreetingService&methods=sayHello&pid=82406&side=consumer&timestamp=1533274951195, dubbo version: 2.6.2, current host: 192.168.99.1 #1\n[03/08/18 01:42:31:031 CST] main  INFO zookeeper.ZookeeperRegistry:  [DUBBO] Subscribe: consumer://192.168.99.1/com.alibaba.dubbo.samples.api.GreetingService?application=demo-consumer&category=providers,configurators,routers&default.timeout=3000&dubbo=2.6.2&interface=com.alibaba.dubbo.samples.api.GreetingService&methods=sayHello&pid=82406&side=consumer&timestamp=1533274951195, dubbo version: 2.6.2, current host: 192.168.99.1 #2\n...\nresult: hello, zookeeper\n```\n\n----------------------------------------\n\nTITLE: Access Log Parameter Configuration\nDESCRIPTION: The essential parameters needed to enable access logging in Dubbo. The accesslog parameter can be set to true for default logging or to a file path for separate log output.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/traffic-management/accesslog.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  accesslog: true\n```\n\n----------------------------------------\n\nTITLE: Setting Profiler Warning Percentage in Dubbo QoS\nDESCRIPTION: Command to set the warning percentage for timeouts in Dubbo QoS profiler. The profilerWarnPercent parameter ranges from 0.0 to 1.0, with a default value of 0.75.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/profiler.md#2025-04-08_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>setProfilerWarnPercent 0.75\nOK\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Checking Service Publication through Application Logs\nDESCRIPTION: This snippet shows the log pattern to look for when confirming if a service has been published locally. The log entry indicates that a service has been exported to the local registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[26/02/23 04:34:41:041 CST] main  INFO config.ServiceConfig:  [DUBBO] Export dubbo service org.apache.dubbo.samples.api.GreetingsService to local registry url : injvm://***, dubbo version: 3.1.7, current host: 192.168.31.5\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Service Provider in Java\nDESCRIPTION: This Java code initializes the Dubbo service provider using the XML configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Provider {\n    public static void main(String[] args) throws Exception {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{\"META-INF/spring/dubbo-demo-provider.xml\"});\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Mode in Dubbo XML\nDESCRIPTION: Demonstrates how to configure the cluster mode on both service provider and consumer sides using XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/fault-tolerent-strategy.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service cluster=\"failsafe\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference cluster=\"failsafe\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Connected UDP in Go\nDESCRIPTION: Code snippet for testing connected UDP functionality in Go, demonstrating various UDP API calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-getty.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/alexstocks/go-practice/blob/master/udp-tcp-http/udp/connected-udp.go\n```\n\n----------------------------------------\n\nTITLE: Dubbo Serialization Extension Configuration\nDESCRIPTION: Properties file configuration for registering custom serialization implementation with Dubbo's extension system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/serialize.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxSerialization\n```\n\n----------------------------------------\n\nTITLE: Using ArrayList for Ordered Multiple Interface Proxy Invocation (Java)\nDESCRIPTION: Replaces the use of Set with ArrayList to maintain the order of multiple interfaces when creating proxies. This change ensures consistent behavior in proxy creation for services with multiple interfaces.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-graalvm-support.md#2025-04-08_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic <T> T getProxy(Invoker<T> invoker, boolean generic) throws RpcException {\n  List<Class<?>> interfaces = new ArrayList<>();\n  String config = invoker.getUrl().getParameter(INTERFACES);\n  if (config != null && config.length() > 0) {\n    String[] types = COMMA_SPLIT_PATTERN.split(config);\n    for (String type : types) {\n      // TODO can we load successfully for a different classloader?.\n      interfaces.add(ReflectUtils.forName(type));\n    }\n  }\n  //......\n```\n\n----------------------------------------\n\nTITLE: 应用实例元数据示例\nDESCRIPTION: 展示了应用级服务发现中每个实例的元数据格式。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/v3-service-discovery.md#2025-04-08_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"provider-app-name\",\n\t\"id\": \"192.168.0.102:20880\",\n\t\"address\": \"192.168.0.102\",\n\t\"port\": 20880,\n\t\"sslPort\": null,\n\t\"payload\": {\n\t\t\"id\": null,\n\t\t\"name\": \"provider-app-name\",\n\t\t\"metadata\": {\n\t\t\t\"metadataService\": \"{\\\"dubbo\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"2.7.5\\\",\\\"port\\\":\\\"20881\\\"}}\",\n\t\t\t\"endpoints\": \"[{\\\"port\\\":20880,\\\"protocol\\\":\\\"dubbo\\\"}]\",\n\t\t\t\"storage-type\": \"local\",\n\t\t\t\"revision\": \"6785535733750099598\",\n\t\t}\n\t},\n\t\"registrationTimeUTC\": 1583461240877,\n\t\"serviceType\": \"DYNAMIC\",\n\t\"uriSpec\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Classes from Multiple Sources\nDESCRIPTION: Loads extension classes from various META-INF directories using different loading strategies and caches the default SPI extension name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Class<?>> loadExtensionClasses() {\n    cacheDefaultExtensionName();\n\n    Map<String, Class<?>> extensionClasses = new HashMap<>();\n    \n    for (LoadingStrategy strategy : strategies) {\n        loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());\n        loadDirectory(extensionClasses, strategy.directory(), type.getName().replace(\"org.apache\", \"com.alibaba\"), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());\n    }\n\n    return extensionClasses;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Consumer Deployment\nDESCRIPTION: Commands to view the list of consumer pods, check deployment logs, and view Istio proxy logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# View pod list\nkubectl get pods -l app=dubbo-samples-mesh-consumer\n\n# View pod deployment logs\nkubectl logs your-pod-id\n\n# View pod istio-proxy logs\nkubectl logs your-pod-id -c istio-proxy\n```\n\n----------------------------------------\n\nTITLE: Server Implementation in Go\nDESCRIPTION: Implementation of the GreeterServerImpl service with a SayHello method that returns a versioned response\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *GreeterServerImpl) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {\n\treturn &api.User{Name: \"Hello \" + in.Name, Id: \"v1.0.0\"}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Generic Client in Go\nDESCRIPTION: Go code snippet demonstrating how Pixiu dynamically configures and initializes a Dubbo generic client for making RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/pixiu/dubbo-go-pixiu-animal.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreferenceConfig := dg.NewReferenceConfig(irequest.Interface, context.TODO())\n  referenceConfig.InterfaceName = irequest.Interface\n  referenceConfig.Cluster = constant.DEFAULT_CLUSTER\n  var registers []string\n  for k := range dgCfg.Registries {\n    registers = append(registers, k)\n  }\n  referenceConfig.Registry = strings.Join(registers, \",\")\n\n  if len(irequest.DubboBackendConfig.Protocol) == 0 {\n    referenceConfig.Protocol = dubbo.DUBBO\n  } else {\n    referenceConfig.Protocol = irequest.DubboBackendConfig.Protocol\n  }\n\n  referenceConfig.Version = irequest.DubboBackendConfig.Version\n  referenceConfig.Group = irequest.Group\n  referenceConfig.Generic = true\n  if len(irequest.DubboBackendConfig.Retries) == 0 {\n    referenceConfig.Retries = \"3\"\n  } else {\n    referenceConfig.Retries = irequest.DubboBackendConfig.Retries\n  }\n  dc.lock.Lock()\n  defer dc.lock.Unlock()\n  referenceConfig.GenericLoad(key)\n  clientService := referenceConfig.GetRPCService().(*dg.GenericService)\n```\n\n----------------------------------------\n\nTITLE: Redis Registry Configuration - Multiple Nodes\nDESCRIPTION: Configuration for multiple Redis registry nodes using comma-separated addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/redis.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing MetadataServiceNameMapping in Java\nDESCRIPTION: Constructor for MetadataServiceNameMapping class that sets up the application model and metadata report instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npublic MetadataServiceNameMapping(ApplicationModel applicationModel) {\n        super(applicationModel);\n        metadataReportInstance = applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in Properties\nDESCRIPTION: Properties configuration to enable Nacos as the metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Code Generation Implementation\nDESCRIPTION: Core method for generating adaptive extension class source code\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic String generate() {\n    if (!hasAdaptiveMethod()) {\n        throw new IllegalStateException(\"No adaptive method exist on extension \" + type.getName() + \", refuse to create the adaptive class!\");\n    }\n\n    StringBuilder code = new StringBuilder();\n    code.append(generatePackageInfo());\n    code.append(generateImports());\n    code.append(generateClassDeclaration());\n\n    Method[] methods = type.getMethods();\n    for (Method method : methods) {\n        code.append(generateMethod(method));\n    }\n    code.append(\"}\");\n\n    if (logger.isDebugEnabled()) {\n        logger.debug(code.toString());\n    }\n    return code.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Dubbo Caller Shutdown Errors\nDESCRIPTION: This command generates a stack trace log file for a Java process to diagnose Dubbo caller shutdown errors. It uses the jstack utility to capture the thread dump of the specified process ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/17.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Multiple Registry Configuration with Usage Control\nDESCRIPTION: Extended registry configuration example showing how to configure registry with optional configuration center and metadata center settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/overview.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registry\n  address: nacos://localhost:8848\n config-center\n  address: apollo://localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Native Dependency\nDESCRIPTION: Maven dependency configuration for including the dubbo-native module, which contains generated SPI code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/_index.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-native</artifactId>\n    <version>${project.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry with Spring XML\nDESCRIPTION: XML configuration showing how to set up Nacos as a registry center for Dubbo using Spring XML configuration. The registry address uses the nacos:// protocol prefix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n \n    <!-- Provider application info for dependency calculation -->\n    <dubbo:application name=\"dubbo-provider-xml-demo\"  />\n \n    <!-- Use Nacos registry -->\n    <dubbo:registry address=\"nacos://10.20.153.10:8848\" />\n \t...\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Concurrency for Adaptive Rate Limiting in Java\nDESCRIPTION: Formula for calculating the maximum concurrency allowed in Dubbo's HeuristicSmoothingFlowControl algorithm. It uses QPS, latency, and other metrics to dynamically adjust the concurrency limit.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nmaxConcurrency = maxQPS * ((1 + alpha) * noLoadLatency) / (1 - cpuLoad)\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Chain in ShenYu WebHandler\nDESCRIPTION: This snippet shows the entry point for request handling in ShenYu gateway. It uses the Chain of Responsibility pattern to connect all plugins.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.web.handler.ShenyuWebHandler.DefaultShenyuPluginChain#execute()\n```\n\n----------------------------------------\n\nTITLE: Application-Level Registration Model Example in JSON\nDESCRIPTION: An example of the new application-level registration model in JSON format, showing how applications and their instances are registered in Dubbo-go v1.5.0 and later.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-app-registry.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"application1\": [\n  {\"name\":\"instance1\", \"ip\":\"127.0.0.1\", \"metadata\":{}},\n  {\"name\":\"instance2\", \"ip\":\"127.0.0.2\", \"metadata\":{}},\n  {\"name\":\"instanceN\", \"ip\":\"127.0.0.3\", \"metadata\":{}}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Dubbo Rust Client for RPC Communication\nDESCRIPTION: This snippet demonstrates how to create a Dubbo Rust client to call the remote Greeter service. It connects to a server at a specified URI, sends a unary request, and handles the response or potential errors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/rust/first-release.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::main]\nasync fn main() {\n    let mut cli = GreeterClient::new().with_uri(\"http://127.0.0.1:8888\".to_string());\n\n    println!(\"# unary call\");\n    let resp = cli\n        .greet(Request::new(GreeterRequest {\n            name: \"message from client\".to_string(),\n        }))\n        .await;\n    let resp = match resp {\n        Ok(resp) => resp,\n        Err(err) => return println!(\"{:?}\", err),\n    };\n    let (_parts, body) = resp.into_parts();\n    println!(\"Response: {:?}\", body);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Properties in Dubbo XML\nDESCRIPTION: This XML snippet shows the structure of the dubbo:application element used to configure application properties in Dubbo. It includes attributes for name, version, owner, organization, and other settings that affect service governance and performance optimization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-application.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application\n  name=\"string\"\n  version=\"string\"\n  owner=\"string\"\n  organization=\"string\"\n  architecture=\"string\"\n  environment=\"string\"\n  compiler=\"string\"\n  logger=\"string\"\n  metadata-type=\"string\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading JVM Parameters in SystemConfiguration\nDESCRIPTION: Illustrates how Dubbo loads configuration from JVM system properties using the SystemConfiguration class, which simply wraps System.getProperty and System.getProperties methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n public class SystemConfiguration implements Configuration {\n\n    @Override\n    public Object getInternalProperty(String key) {\n        return System.getProperty(key);\n    }\n\n    public Map<String, String> getProperties() {\n        return (Map) System.getProperties();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jstack to Analyze ZK Destruction Exceptions in Dubbo\nDESCRIPTION: Command to capture Java thread stack information for diagnosing ZK destruction exceptions. The command outputs the stack trace to a log file for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/81/2.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: 接口级服务发现的注册数据示例\nDESCRIPTION: 展示了在接口级服务发现模式下,Provider 实例向注册中心注册的数据格式。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/v3-service-discovery.md#2025-04-08_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\ndubbo://192.168.0.103:20880/org.apache.dubbo.samples.basic.api.DemoService?anyhost=true&application=demo-provider&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.samples.basic.api.DemoService&methods=testVoid,sayHello&pid=995&release=2.7.7&side=provider&timestamp=1596988171266\n\ndubbo://192.168.0.103:20880/org.apache.dubbo.samples.basic.api.GreetingService?anyhost=true&application=demo-provider&default=true&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.samples.basic.api.GreetingService&methods=greeting&pid=995&release=2.7.7&side=provider&timestamp=1596988170816\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Sample interface definition for a Dubbo service with a simple method declaration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.service;\n\npublic interface DemoService {\n    String sayName(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Dump Export Path in Dubbo Properties\nDESCRIPTION: This snippet shows how to configure the export path for thread dumps in Dubbo using properties file. It sets the dump directory to /tmp using the dubbo.application.dump.directory property.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.application.dump.directory=/tmp\n```\n\n----------------------------------------\n\nTITLE: ExtensionLoader Constructor\nDESCRIPTION: Initializes an ExtensionLoader with the given type, ExtensionDirector, and ScopeModel, setting up various components needed for extension loading.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nExtensionLoader(Class<?> type, ExtensionDirector extensionDirector, ScopeModel scopeModel) {\n        this.type = type;\n        this.extensionDirector = extensionDirector;\n        this.extensionPostProcessors = extensionDirector.getExtensionPostProcessors();\n        initInstantiationStrategy();\n        this.injector = (type == ExtensionInjector.class ? null : extensionDirector.getExtensionLoader(ExtensionInjector.class)\n            .getAdaptiveExtension());\n        this.activateComparator = new ActivateComparator(extensionDirector);\n        this.scopeModel = scopeModel;\n    }\n```\n\n----------------------------------------\n\nTITLE: Request Handling with Retry Logic in Dubbo Gateway\nDESCRIPTION: Implementation of received method handling requests with retry mechanism. Includes message decoding, error handling, and retry logic for Request objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/zhengcaiyun.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void received(Channel channel, Object message) throws RemotingException {\n    // Decode\n    decode(message);\n    try {\n        handler.handleRequest(channel, message);\n    } catch (RetryHandleException e) {\n        if (message instanceof Request) {\n            ErrorData errorData = (ErrorData) ((Request) message).getData();\n            // If customized, perform retry\n            retry(errorData.getData());\n        } else {\n            // Retry only once, and only Request will throw a RetryHandleException\n            throw new RemotingException(channel, \"Unknown error encountered when retry handle: \" + e.getMessage());\n        }\n        handler.received(channel, message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Networker Extension in XML\nDESCRIPTION: XML configuration examples for setting up the Networker extension in Dubbo protocol and provider configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/networker.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol networker=\"xxx\" />\n<!-- Default setting. When <dubbo:protocol> does not configure the networker attribute, use this configuration -->\n<dubbo:provider networker=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Higress McpBridge Resource Configuration\nDESCRIPTION: YAML configuration for the McpBridge resource that defines the connection between Higress and Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: nacos-service-resource\n  namespace: higress-system\nspec:\n  registries:\n  - domain: nacos-server.default.svc.cluster.local\n    nacosGroups:\n    - DEFAULT_GROUP\n    name: nacos-service-resource\n    port: 8848\n    type: nacos2\n```\n\n----------------------------------------\n\nTITLE: Registering consumer service and POJO in Go for Dubbo client\nDESCRIPTION: Initializes the Dubbo Go client configuration by registering the UserProvider as a consumer service and User POJO for Hessian2 serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc init() {\n\tconfig.SetConsumerService(userProvider)\n\thessian.RegisterPOJO(&User{})\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Consumer with AnnotationConfigApplicationContext\nDESCRIPTION: This Java code demonstrates how to start a Dubbo consumer using AnnotationConfigApplicationContext and the ConsumerConfiguration class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class RestConsumer {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);\n        context.start();\n\n        UserService userService = context.getBean(UserServiceComponent.class);\n        System.out.println(\">>> \" + userService.getUser(1L));\n\n        User user = new User(2L, \"Larry Page\");\n        System.out.println(\">>> \" + userService.registerUser(user));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace for Nacos Registry\nDESCRIPTION: Sets a custom namespace for the Nacos registry in application.yml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: nacos://localhost:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\n   register-mode: instance\n```\n\n----------------------------------------\n\nTITLE: Exposing Service with Annotations in Simplified Registry\nDESCRIPTION: Java code example showing how to expose a Dubbo service using annotations with registry simplification enabled. The annotations contain multiple properties but only those specified will be sent to the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// 暴露服务\n@Service(version = \"1.1.8\", group = \"d-test\", executes = 4500, retries = 7, owner = \"victanno\", timeout = 5300)\npublic class AnnotationServiceImpl implements AnnotationService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"async provider received: \" + name);\n        return \"annotation: hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbo Application\nDESCRIPTION: Methods to start a Dubbo application instance. These methods initialize application configuration and start both internal and external modules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/workflow.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDubboBootstrap.start()\nApplicationModel.getDeployer().start()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Logger in Properties\nDESCRIPTION: Sets the logger for Dubbo to use SLF4J in a properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.logger=slf4j\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path for Dubbo REST Services\nDESCRIPTION: XML configuration that sets a base context path for all REST services in Dubbo. This creates a common URL prefix for all REST endpoints in the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Networker Extension\nDESCRIPTION: Demonstrates how to register a custom Networker implementation in the META-INF/dubbo/org.apache.dubbo.remoting.p2p.Networker file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/networker.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nxxx=com.xxx.XxxNetworker\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Mesh Route with Error Reporting\nDESCRIPTION: This YAML configuration shows how to set up routing rules that report errors when no fallback options are defined. It demonstrates a configuration where some routes have fallbacks while others will fail if no matching subset is found.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/mesh-rule.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo-route\nspec:\n  hosts:\n  - demo\n  dubbo:\n  - service:\n    - exact: com.taobao.hsf.demoService:1.0.0\n    - exact: com.taobao.hsf.demoService:2.0.0\n    routedetail:\n      - name: sayHello-String-method-route\n        match:\n        - method:\n            name_match:\n              exact: \"sayHello\"\n              .....\n            argp:\n            - string\n        route:\n        - destination:\n            host: demo\n            subset: v1\n          fallback:\n            destination:\n              host: demo\n              subset: v2\n            fallback:\n              destination:\n                host: demo\n                subset: v3\n\n      - name: sayHello-method-route\n        match:\n        - method:\n            name_match:\n              exact: \"s-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v2\n          fallback:\n            destination:\n              host: demo\n              subset: v3\n      - name: some-method-route\n        match:\n        - method:\n            name_match:\n              exact: \"some-method\"\n        route:\n        - destination:\n            host: demo\n            subset: v4\n\n      - name: interface-route\n        route:\n        - destination:\n          host: demo\n          subset: v3\n\n  - service:\n\n      ....\n---\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: DestinationRule\nmetadata:\n  name: demo-route\nspec:\n  host: demo\n  subsets:\n  - name: v1\n    labels:\n      sigma.ali/mg: v1-host\n\n  - name: v2\n    labels:\n      sigma.ali/mg: v2-host\n\n  - name: v3\n    labels:\n      sigma.ali/mg: v3-host\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export with Properties in Dubbo\nDESCRIPTION: Properties configuration for enabling multiple protocols on the same port in Dubbo. The Triple protocol is set as the main protocol with Dubbo as an extension protocol on port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.name=tri\ndubbo.protocol.ext-protocol=dubbo,\ndubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Apache Dubbo Release Announcement Email Template\nDESCRIPTION: Template for announcing a new Apache Dubbo release to the community, including details about available downloads, release notes, and feedback channels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/committer/release-guide_dev.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHello Community,\n\nThe Apache Dubbo team is pleased to announce that the\n2.6.6 has just been released.\n\nApache Dubbo™  is a high-performance, java based, open source\nRPC framework. Dubbo offers three key functionalities, which include\ninterface based remote call, fault tolerance & load balancing, and\nautomatic service registration & discovery.\n\nBoth the source release[1] and the maven binary release[2] are available\nnow, you can also find the detailed release notes here[3].\n\n\nIf you have any usage questions, or have problems when upgrading or find\nany problems about enhancements included in this release, please don't\nhesitate to let us know by sending feedback to this mailing list or filing\nan issue on GitHub[4].\n\n\n[1] https://dubbo.apache.org/en/blog/2020/05/18/past-releases/\n[2] https://repo1.maven.org/maven2/org/apache/dubbo/dubbo\n[3] https://github.com/apache/dubbo/releases\n[4] https://github.com/apache/dubbo/issues\n```\n\n----------------------------------------\n\nTITLE: Execution Results for Dubbo Configuration Bootstrap\nDESCRIPTION: The output of executing the DubboConfigurationBootstrap class, showing the names of the three ApplicationConfig beans.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_9\n\nLANGUAGE: text\nCODE:\n```\napplicationBean.name = dubbo-demo-application \napplicationBean2.name = dubbo-demo-application2 \napplicationBean3.name = dubbo-demo-application3 \n```\n\n----------------------------------------\n\nTITLE: Retrieving Interface-Application Mapping from Zookeeper\nDESCRIPTION: Shell command to retrieve the interface to application name mapping stored in Zookeeper using zkCli.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 26] get /dubbo/mapping/org.apache.dubbo.demo.DemoService\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tag Routing Configuration in YAML\nDESCRIPTION: YAML configuration example for dynamic tag routing rules that group provider instances based on matching conditions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nforce: true\nenabled: true\nkey: shop-detail\ntags:\n  - name: gray\n    match:\n      - key: env\n        value:\n          exact: gray\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Dubbo Service Interface\nDESCRIPTION: Basic interface definition for a Dubbo service that will be implemented by different versions and groups.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/version_group.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DevelopService {\n    String invoke(String param);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heartbeat Sending Logic in Dubbo HeartbeatTimerTask\nDESCRIPTION: This code snippet shows the implementation of the doTask method in Dubbo's HeartbeatTimerTask. It checks the last read and write times and sends a heartbeat request if the channel has been idle for longer than the heartbeat interval.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprotected void doTask(Channel channel) {\n    Long lastRead = lastRead(channel);\n    Long lastWrite = lastWrite(channel);\n    if ((lastRead != null && now() - lastRead > heartbeat)\n        || (lastWrite != null && now() - lastWrite > heartbeat)) {\n            Request req = new Request();\n            req.setVersion(Version.getProtocolVersion());\n            req.setTwoWay(true);\n            req.setEvent(Request.HEARTBEAT_EVENT);\n            channel.send(req);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Front Matter for Dubbo Upgrades Documentation in YAML\nDESCRIPTION: This YAML front matter defines metadata for a Hugo documentation page about Dubbo Java SDK upgrades and compatibility. It includes URL aliases for redirects, page description, title, content type specification, and weight for ordering in navigation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/docs3-v2/java-sdk/upgrades-and-compatibility/\n    - /en/docs3-v2/java-sdk/upgrades-and-compatibility/\n    - /en/overview/mannual/java-sdk/upgrades-and-compatibility/\ndescription: Upgrades and Compatibility\nlinkTitle: Upgrades and Compatibility\ntitle: Upgrades and Compatibility\ntype: docs\nweight: 200\n---\n```\n\n----------------------------------------\n\nTITLE: GPG Key Import and Trust\nDESCRIPTION: Commands for importing and trusting GPG keys for release verification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://dist.apache.org/repos/dist/dev/dubbo/KEYS >> KEYS\ngpg --import KEYS\ngpg --edit-key liujun\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Metadata JSON Structure\nDESCRIPTION: Example of the metadata JSON structure used by Dubbo Admin for service testing, including method signatures and parameter type definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/service-test.md#2025-04-08_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"methods\": [\n        {\n            \"name\": \"sayHello\",\n            \"parameterTypes\": [\n                \"org.apache.dubbo.demo.model.User\"\n            ],\n            \"returnType\": \"org.apache.dubbo.demo.model.Result\"\n        }\n    ],\n    \"types\": [\n        {\n            \"type\": \"char\"\n        },\n        {\n            \"type\": \"long\"\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.Result\",\n            \"properties\": {\n                \"msg\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                },\n                \"userName\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.User\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"java.lang.Long\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"long\"\n                        }\n                    }\n                },\n                \"username\": {\n                    \"type\": \"java.lang.Sring\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo故障恢复注册代码分析 - Java\nDESCRIPTION: Dubbo的FailbackRegistry类的register方法，用于服务注册。当注册失败时，会将失败的注册请求记录到列表中并定期重试。这段代码展示了Dubbo处理服务注册失败的机制，也是导致问题的关键部分之一。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/guazi.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    public void register(URL url) {\n        super.register(url);\n        failedRegistered.remove(url);\n        failedUnregistered.remove(url);\n        try {\n            // Sending a registration request to the server side\n            doRegister(url);\n        } catch (Exception e) {\n            Throwable t = e;\n\n            // If the startup detection is opened, the Exception is thrown directly.\n            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)\n                    && url.getParameter(Constants.CHECK_KEY, true)\n                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n            boolean skipFailback = t instanceof SkipFailbackWrapperException;\n            if (check || skipFailback) {\n                if (skipFailback) {\n                    t = t.getCause();\n                }\n                throw new IllegalStateException(\"Failed to register \" + url + \" to registry \" + getUrl().getAddress() + \", cause: \" + t.getMessage(), t);\n            } else {\n                logger.error(\"Failed to register \" + url + \", waiting for retry, cause: \" + t.getMessage(), t);\n            }\n\n            // Record a failed registration request to a failed list, retry regularly\n            failedRegistered.add(url);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Future in Dubbo 2.6 Asynchronous Calls\nDESCRIPTION: Example of making an asynchronous call in Dubbo 2.6 and retrieving the Future object from RpcContext to get the result.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nAsyncService.sayHello(\"Han Meimei\");\nFuture<String> fooFuture = RpcContext.getContext().getFuture();\nfooFuture.get();\n```\n\n----------------------------------------\n\nTITLE: Zookeeper Metadata Path Structure for Dubbo\nDESCRIPTION: Shows the path structure used for storing provider and consumer metadata in Zookeeper. The paths include interface name, version, group, and application name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nProvider: /dubbo/metadata/{interface name}/{version}/{group}/provider/{application name} \nConsumer: /dubbo/metadata/{interface name}/{version}/{group}/consumer/{application name}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom ExceptionMapper in Dubbo REST XML\nDESCRIPTION: This XML configuration snippet shows how to register a custom ExceptionMapper for a Dubbo REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_44\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.CustomExceptionMapper\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing at Method Level for Consumer in Dubbo\nDESCRIPTION: XML configuration example for setting the load balancing strategy for a specific method at the consumer level. This provides fine-grained control over how different method calls are distributed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"...\">\n    <dubbo:method name=\"...\" loadbalance=\"roundrobin\"/>\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Defining Session Management Maps for Seata Go\nDESCRIPTION: This snippet defines several maps used for session management in Seata Go. These maps store relationships between sessions, transaction roles, application IDs, and resource IDs, which are crucial for managing connections and routing messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-seata.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  // session -> transactionRole\n  // TM will register before RM, if a session is not the TM registered,\n  // it will be the RM registered\n  session_transactionroles = sync.Map{}\n\n  // session -> applicationId\n  identified_sessions = sync.Map{}\n\n  // applicationId -> ip -> port -> session\n  client_sessions = sync.Map{}\n\n  // applicationId -> resourceIds\n  client_resources = sync.Map{}\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Example in Triple Protocol\nDESCRIPTION: Illustrates a streaming request format in Triple protocol, which is compatible with gRPC over HTTP/2. It shows both the request and response headers and data format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHEADERS (flags = END_HEADERS)\n:method = POST\n:scheme = http\n:path = /google.pubsub.v2.PublisherService/CreateTopic\n:authority = pubsub.googleapis.com\ngrpc-timeout = 1S\ncontent-type = application/grpc+proto\ngrpc-encoding = gzip\nauthorization = Bearer y235.wef315yfh138vh31hv93hv8h3v\n\nDATA (flags = END_STREAM)\n<Length-Prefixed Message>\n\nHEADERS (flags = END_HEADERS)\n:status = 200\ngrpc-encoding = gzip\ncontent-type = application/grpc+proto\n\nDATA\n<Length-Prefixed Message>\n\nHEADERS (flags = END_STREAM, END_HEADERS)\ngrpc-status = 0 # OK\ntrace-proto-bin = jher831yy13JHy3hc\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface\nDESCRIPTION: Basic interface definition for a demo service that retrieves Person objects by ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface IDemoService {\n    public Person get(int id);\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting and Caching Wrapper Classes in ExtensionLoader\nDESCRIPTION: This code identifies wrapper classes by checking if they have a constructor that accepts the extension type. Detected wrapper classes are cached in cachedWrapperClasses for later use when wrapping extension instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\ntry {  \n  clazz.getConstructor(type);    \n  Set<Class<?>> wrappers = cachedWrapperClasses;\n  if (wrappers == null) {\n    cachedWrapperClasses = new ConcurrentHashSet<Class<?>>();\n    wrappers = cachedWrapperClasses;\n  }\n  wrappers.add(clazz);\n} catch (NoSuchMethodException e) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Server with Triple Protocol\nDESCRIPTION: Complete implementation of a Dubbo-go server using the Triple protocol to handle gRPC requests. The server implements the GreetService defined in the proto file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: \"dubbo:\" + req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Configuration in Go\nDESCRIPTION: This code shows part of the implementation for Apollo configuration center, including creating the client and initializing the configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-config-center.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc newApolloConfiguration(url *common.URL) (*apolloConfiguration, error) {\n\tc := &apolloConfiguration{\n\t\turl: url,\n\t}\n\tconfigAddr := c.getAddressWithProtocolPrefix(url)\n\tconfigCluster := url.GetParam(constant.CONFIG_CLUSTER_KEY, \"\")\n\n\tappId := url.GetParam(constant.CONFIG_APP_ID_KEY, \"\")\n\tnamespaces := getProperties(url.GetParam(constant.CONFIG_NAMESPACE_KEY, cc.DEFAULT_GROUP))\n\tc.appConf = &config.AppConfig{\n\t\tAppID:         appId,\n\t\tCluster:       configCluster,\n\t\tNamespaceName: namespaces,\n\t\tIP:            configAddr,\n\t}\n\n\tagollo.InitCustomConfig(func() (*config.AppConfig, error) {\n\t\treturn c.appConf, nil\n\t})\n\n\treturn c, agollo.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zookeeper Registry Instances\nDESCRIPTION: Demonstrates two methods of creating Zookeeper registry instances: direct creation with address and default creation using environment variables.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// Directly create Zookeeper registry\nlet zkr = ZookeeperRegistry::new(\"127.0.0.1:1221\");\n```\n\nLANGUAGE: rust\nCODE:\n```\n// Using the default method to create Zookeeper registry will use the value of ZOOKEEPER_SERVERS in the environment variables by default\nlet zkr = ZookeeperRegistry::default();\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Sentinel Filters with Custom Names\nDESCRIPTION: This code shows how to manually register Sentinel filters with custom names in dubbo-go. This approach gives more control over filter naming compared to the automatic import method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n  \"github.com/apache/dubbo-go/common/extension\"\n  sd \"github.com/alibaba/sentinel-golang/adapter/dubbo\"\n)\n\nfunc main(){\n  extension.SetFilter(\"myConsumerFilter\",sd.GetConsumerFilter())\n  extension.SetFilter(\"myProviderFilter\",sd.GetConsumerFilter())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Server with Triple Protocol\nDESCRIPTION: Complete implementation of a Dubbo-go server using the Triple protocol to handle gRPC requests. The server implements the GreetService defined in the proto file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype GreetTripleServer struct {\n}\n\nfunc (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {\n\tresp := &greet.GreetResponse{Greeting: \"dubbo:\" + req.Name}\n\treturn resp, nil\n}\n\nfunc main() {\n\tsrv, err := server.NewServer(\n\t\tserver.WithServerProtocol(\n\t\t\tprotocol.WithPort(20000),\n\t\t\tprotocol.WithTriple(),\n\t\t),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := srv.Serve(); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Protocol Message Structure in Dubbo\nDESCRIPTION: Example of an HTTP protocol message structure in Dubbo, showing the request format with headers, connection settings, and body content.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /test/path?  HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nContent-type: application/json\n\n\n{\"name\":\"dubbo\",\"age\":10,\"address\":\"hangzhou\"}\n```\n\n----------------------------------------\n\nTITLE: Instance Tagging Configuration in YAML\nDESCRIPTION: Examples of configuring instance tags using environment variables\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: detail\n    image: apache/demo-detail:latest\n    env:\n    - name: DUBBO_LABELS\n      value: \"region=hangzhou; env=gray\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: detail\n    image: apache/demo-detail:latest\n    env:\n    - name: DUBBO_ENV_KEYS\n      value: \"REGION, ENV\"\n    - name: REGION\n      value: \"hangzhou\"\n    - name: ENV\n      value: \"gray\"\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolConfig Class in Java for Apache Dubbo\nDESCRIPTION: This code snippet defines the ProtocolConfig class in the org.apache.dubbo.config package. It contains numerous configuration properties for the Dubbo protocol, including network settings, threading, serialization, and more.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.config;\n\npublic class ProtocolConfig {\n    private Integer accepts;\n    private String accesslog;\n    private Integer alive;\n    private Integer buffer;\n    private String charset;\n    private String client;\n    private String codec;\n    private String contextpath;\n    private Integer corethreads;\n    private Boolean default;\n    private String dispatcher;\n    private String exchanger;\n    private String extProtocol;\n    private String extension;\n    private Integer heartbeat;\n    private String host;\n    private String id;\n    private Integer iothreads;\n    private String jsonCheckLevel;\n    private Boolean keepAlive;\n    private Map<String, String> metaData;\n    private String name;\n    private Boolean needRefresh;\n    private String networker;\n    private String optimizer;\n    private Map<String, String> parameters;\n    private Integer payload;\n    private Integer port;\n    private String preferSerialization;\n    private List<String> prefixes;\n    private String prompt;\n    private Integer queues;\n    private Boolean register;\n    private ScopeModel scopeModel;\n    private String serialization;\n    private String server;\n    private Boolean sslEnabled;\n    private String status;\n    private String telnet;\n    private String threadPoolExhaustedListeners;\n    private String threadpool;\n    private Integer threads;\n    private String transporter;\n    \n    // Getters and setters would be here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Extensions in Dubbo\nDESCRIPTION: The initExtension() method in ExtensionLoader initializes lifecycle-aware extensions by calling their initialize() method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void initExtension(T instance) {\n        if (instance instanceof Lifecycle) {\n            Lifecycle lifecycle = (Lifecycle) instance;\n            lifecycle.initialize();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Java Thread Dump for ZooKeeper Startup Issue Analysis\nDESCRIPTION: This command generates a thread dump of the Java process experiencing the ZooKeeper startup exception. The output is redirected to a file named jstack.log for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/81/1.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implicit Parameters on Dubbo Service Provider Side\nDESCRIPTION: This example shows how to retrieve implicit parameters on the service provider side that were set by the consumer. It uses RpcContext.getContext().getAttachment() to access the transmitted parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/attachment.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class XxxServiceImpl implements XxxService {\n \n    public void xxx() {\n        // 获取客户端隐式传入的参数，用于框架集成，不建议常规业务使用\n        String index = RpcContext.getContext().getAttachment(\"index\"); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting ZooKeeper Nodes with ZooKeeper CLI\nDESCRIPTION: Demonstrates how to use the ZooKeeper CLI to inspect Dubbo service registration information stored in ZooKeeper. Shows the command to list consumers registered for a specific service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it zookeeper bash\nbash-4.4# bin/zkCli.sh -server localhost:218\nConnecting to localhost:2181\n...\nWelcome to ZooKeeper!\nJLine support is enabled\n...\n[zk: localhost:2181(CONNECTED) 4] ls /dubbo/com.alibaba.dubbo.samples.api.GreetingService/consumers\n[consumer%3A%2F%2F192.168.99.1%2Fcom.alibaba.dubbo.samples.api.GreetingService%3Fapplication%3Ddemo-consumer%26category%3Dconsumers%26check%3Dfalse%26default.timeout%3D3000%26dubbo%3D2.6.2%26interface%3Dcom.alibaba.dubbo.samples.api.GreetingService%26methods%3DsayHello%26pid%3D82406%26side%3Dconsumer%26timestamp%3D1533274951195]\n```\n\n----------------------------------------\n\nTITLE: Adding REST Protocol Compatibility Dependency\nDESCRIPTION: Maven dependency configuration to maintain REST protocol compatibility as a service consumer in Dubbo 3.3.x\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-rest</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Basic Log Structure Example\nDESCRIPTION: Example showing the basic structure of timing logs with field descriptions and hierarchy\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/profiler.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[Dubbo-Consumer] execute service interface#method cost actual time spent, this invocation almost (maybe already) timeout. Timeout: timeout duration\ninvocation context:\nrequest context\nthread info: \nStart time: request start time (nano time)\n+-[ Offset: current node start time; Usage: total time spent at current node, current node time spent ratio ] current node description\n  +-[ Offset: current node start time; Usage: total time spent at current node, current node time spent ratio ] current node description\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Throwing Mock in Dubbo XML\nDESCRIPTION: XML configurations to throw exceptions when service calls fail. Can use default RpcException or custom exceptions that have a String parameter constructor.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw com.foo.MockException\"/>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Log4j Dependencies in dubbo-spring-boot-actuator\nDESCRIPTION: This XML snippet shows the dependency tree for the dubbo-spring-boot-actuator module. Similar to the starter module, it includes log4j-api through Spring Boot components. Users should consider compatibility when upgrading log4j-core.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/log4j.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n[INFO] org.apache.dubbo:dubbo-spring-boot-actuator:jar:2.7.14-SNAPSHOT\n[INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.3.1.RELEASE:compile (optional) \n[INFO]    \\- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile\n[INFO]       \\- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile\n[INFO]          \\- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile\n[INFO]             \\- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile\n```\n\n----------------------------------------\n\nTITLE: Metadata JSON Structure\nDESCRIPTION: Example of metadata structure stored in Dubbo's metadata center showing method and type definitions\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/test.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"methods\": [\n        {\n            \"name\": \"sayHello\",\n            \"parameterTypes\": [\n                \"org.apache.dubbo.demo.model.User\"\n            ],\n            \"returnType\": \"org.apache.dubbo.demo.model.Result\"\n        }\n    ],\n    \"types\": [\n        {\n            \"type\": \"char\"\n        },\n        {\n            \"type\": \"long\"\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.Result\",\n            \"properties\": {\n                \"msg\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                },\n                \"userName\": {\n                    \"type\": \"java.lang.String\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        },\n        {\n            \"type\": \"org.apache.dubbo.demo.model.User\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"java.lang.Long\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"long\"\n                        }\n                    }\n                },\n                \"username\": {\n                    \"type\": \"java.lang.Sring\",\n                    \"properties\": {\n                        \"value\": {\n                            \"type\": \"char[]\"\n                        },\n                        \"hash\": {\n                            \"type\": \"int\"\n                        }\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom LoadBalance in Dubbo XML\nDESCRIPTION: This XML snippet demonstrates how to configure a custom LoadBalance implementation named 'demo' in Dubbo's XML configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"helloService\" interface=\"com.dubbo.spi.demo.api.IHelloService\" loadbalance=\"demo\" />\n```\n\n----------------------------------------\n\nTITLE: Executing Global Plugin in ShenYu\nDESCRIPTION: The GlobalPlugin is the first plugin executed in the chain. Its execute method builds the context information for the request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.global.GlobalPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for Dubbo Message Handling in Java\nDESCRIPTION: This code shows the implementation of retry logic for Dubbo message handling. It catches RetryHandleException and attempts to retry decoding and processing the message, providing a way to handle transient errors in message processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/zhengcaiyun.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n//handleRequest过程中的retry控制\n    public void received(Channel channel, Object message) throws RemotingException {\n        //解码\n        decode(message);\n        try {\n            handler.handleRequest(channel, message);\n        } catch (RetryHandleException e) {\n            if (message instanceof Request) {\n                ErrorData errorData = (ErrorData) ((Request) message).getData();\n                //有定制，进行重试\n                retry(errorData.getData());\n            } else {\n                // Retry only once, and only Request will throw an RetryHandleException\n                throw new RemotingException(channel, \"Unknown error encountered when retry handle: \" + e.getMessage());\n            }\n            handler.received(channel, message);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating UNDO_LOG Table for Seata AT Mode in SQL\nDESCRIPTION: SQL script for creating the undo_log table required by Seata's AT (Automatic Transaction) mode. This table stores information needed for transaction rollback in case of failures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Note that when Seata version is upgraded to 0.3.0+, it will change from a normal index to a unique index.\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Java REST Service Implementation with Path Annotations\nDESCRIPTION: Example of a REST service implementation using JAX-RS annotations. The @Path annotations define the URL mapping for the service and its methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"/register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AOP Protocol Wrapper in Java\nDESCRIPTION: Example of a QosProtocolWrapper class implementing the Protocol interface for AOP functionality in Dubbo. Shows required constructor pattern and error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic class QosProtocolWrapper implements Protocol, ScopeModelAware {\n    private final Protocol protocol;\n    public QosProtocolWrapper(Protocol protocol) {\n        if (protocol == null) {\n            throw new IllegalArgumentException(\"protocol == null\");\n        }\n        this.protocol = protocol;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Configuration Center Factories in Go\nDESCRIPTION: This code defines functions to register and retrieve configuration center factory implementations. It allows dynamically adding support for different configuration center types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-config-center.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage extension\n\nimport (\n\t\"github.com/apache/dubbo-go/config_center\"\n)\n\nvar (\n\tconfigCenterFactories = make(map[string]func() config_center.DynamicConfigurationFactory)\n)\n\n// SetConfigCenterFactory sets the DynamicConfigurationFactory with @name\nfunc SetConfigCenterFactory(name string, v func() config_center.DynamicConfigurationFactory) {\n\tconfigCenterFactories[name] = v\n}\n\n// GetConfigCenterFactory finds the DynamicConfigurationFactory with @name\nfunc GetConfigCenterFactory(name string) config_center.DynamicConfigurationFactory {\n\tif configCenterFactories[name] == nil {\n\t\tpanic(\"config center for \" + name + \" is not existing, make sure you have import the package.\")\n\t}\n\treturn configCenterFactories[name]()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in APISIX\nDESCRIPTION: YAML configuration to add Nacos discovery settings to the APISIX config.yaml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndiscovery:\n  nacos:\n    host:\n      - \"http://192.168.33.1:8848\"\n```\n\n----------------------------------------\n\nTITLE: Accessing serializeWarnedClasses via Telnet in Dubbo\nDESCRIPTION: This snippet demonstrates how to use the telnet command to access the 'serializeWarnedClasses' QoS command in Dubbo. It shows the connection process and the expected output format listing potentially unsafe classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222                          \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>serializeWarnedClasses\nWarnedClasses: \nio.dubbo.test.NotSerializable\nio.dubbo.test2.NotSerializable\nio.dubbo.test2.OthersSerializable\norg.apache.dubbo.samples.NotSerializable\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Metadata Registration in Properties\nDESCRIPTION: Properties configuration to enable remote interface configuration metadata registration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Implementing Failback Cluster in Java for Apache Dubbo\nDESCRIPTION: This code snippet demonstrates the implementation of the FailbackCluster class, which creates and returns a FailbackClusterInvoker object. It shows another example of how Cluster implementations in Dubbo generate Cluster Invokers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class FailbackCluster implements Cluster {\n\n    public final static String NAME = \"failback\";\n\n    @Override\n    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {\n        // 创建并返回 FailbackClusterInvoker 对象\n        return new FailbackClusterInvoker<T>(directory);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Simplification Properties in Dubbo\nDESCRIPTION: Properties to enable URL simplification and specify extra keys to include in the simplified URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.simplified=true\ndubbo.registry.extra-keys=retries,owner\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Simplification Properties in Dubbo\nDESCRIPTION: Properties to enable URL simplification and specify extra keys to include in the simplified URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.simplified=true\ndubbo.registry.extra-keys=retries,owner\n```\n\n----------------------------------------\n\nTITLE: Configuring FST Serialization in YAML\nDESCRIPTION: YAML configuration for activating FST serialization in Spring Boot applications using the application.yml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n protocol:\n   serialization: fst\n```\n\n----------------------------------------\n\nTITLE: Accessing serializeWarnedClasses via Telnet in Dubbo\nDESCRIPTION: This snippet demonstrates how to use the telnet command to access the 'serializeWarnedClasses' QoS command in Dubbo. It shows the connection process and the expected output format listing potentially unsafe classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222                          \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>serializeWarnedClasses\nWarnedClasses: \nio.dubbo.test.NotSerializable\nio.dubbo.test2.NotSerializable\nio.dubbo.test2.OthersSerializable\norg.apache.dubbo.samples.NotSerializable\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Registry Protocol Referring Process\nDESCRIPTION: Implements the process of referring a provider service from the registry center, creating a directory and invoker.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (proto *registryProtocol) Refer(url common.URL) protocol.Invoker {\n    var registryUrl = url\n    var serviceUrl = registryUrl.SubURL\n    // ... (code omitted for brevity)\n    directory, err := extension.GetDefaultRegistryDirectory(&registryUrl, reg)\n    if err != nil {\n      logger.Errorf(\"consumer service %v  create registry directory  error, error message is %s, and will return nil invoker!\",\n        serviceUrl.String(), err.Error())\n      return nil\n    }\n    err = reg.Register(*serviceUrl)\n    if err != nil {\n      logger.Errorf(\"consumer service %v register registry %v error, error message is %s\",\n        serviceUrl.String(), registryUrl.String(), err.Error())\n    }\n    cluster := extension.GetCluster(serviceUrl.GetParam(constant.CLUSTER_KEY, constant.DEFAULT_CLUSTER))\n    invoker := cluster.Join(directory)\n    proto.invokers = append(proto.invokers, invoker)\n    return invoker\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sliding Window Metrics with TimeWindowQuantile in Java\nDESCRIPTION: Implementation of a time-based sliding window for quantile metrics using the TDigest algorithm. The class rotates through multiple buckets, maintaining rolling statistics over a configurable time window for accurate percentile calculations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class TimeWindowQuantile {\n    private final double compression;\n    private final TDigest[] ringBuffer;\n    private int currentBucket;\n    private long lastRotateTimestampMillis;\n    private final long durationBetweenRotatesMillis;\n\n    public TimeWindowQuantile(double compression, int bucketNum, int timeWindowSeconds) {\n        this.compression = compression;\n        this.ringBuffer = new TDigest[bucketNum];\n        for (int i = 0; i < bucketNum; i++) {\n            this.ringBuffer[i] = TDigest.createDigest(compression);\n        }\n\n        this.currentBucket = 0;\n        this.lastRotateTimestampMillis = System.currentTimeMillis();\n        this.durationBetweenRotatesMillis = TimeUnit.SECONDS.toMillis(timeWindowSeconds) / bucketNum;\n    }\n\n    public synchronized double quantile(double q) {\n        TDigest currentBucket = rotate();\n        return currentBucket.quantile(q);\n    }\n\n    public synchronized void add(double value) {\n        rotate();\n        for (TDigest bucket : ringBuffer) {\n            bucket.add(value);\n        }\n    }\n\n    private TDigest rotate() {\n        long timeSinceLastRotateMillis = System.currentTimeMillis() - lastRotateTimestampMillis;\n        while (timeSinceLastRotateMillis > durationBetweenRotatesMillis) {\n            ringBuffer[currentBucket] = TDigest.createDigest(compression);\n            if (++currentBucket >= ringBuffer.length) {\n                currentBucket = 0;\n            }\n            timeSinceLastRotateMillis -= durationBetweenRotatesMillis;\n            lastRotateTimestampMillis += durationBetweenRotatesMillis;\n        }\n        return ringBuffer[currentBucket];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional Stream Writing in Dubbo Python\nDESCRIPTION: Example of writing multiple messages in a bidirectional stream using the writeStream method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstream = stub.bi_stream()\n# Use the write method to send messages\nstream.write(greeter_pb2.GreeterRequest(name=\"jock\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"jane\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"alice\"))\nstream.write(greeter_pb2.GreeterRequest(name=\"dave\"))\n# Call done_writing to notify the server that the client has finished writing\nstream.done_writing()\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Class for msgpack Serialization\nDESCRIPTION: This Java class defines an entity (MyParam) used in the msgpack serialization process, including a no-args constructor for deserialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/msgpack-serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Data\npublic class MyParam {\n    private String name;\n    private int age;\n\n    public MyParam(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    // 需要提供无参构造函数\n    public MyParam(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Extension Configuration for Wrapper Classes\nDESCRIPTION: This configuration file defines Protocol extension implementations, including wrapper classes like ProtocolFilterWrapper and ProtocolListenerWrapper. These wrapper classes enable the decorator pattern for Protocol implementations in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nfilter=org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper\nlistener=org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper\nmock=org.apache.dubbo.rpc.support.MockProtocol\n```\n\n----------------------------------------\n\nTITLE: Implementing ZookeeperMetadataReportFactory in Java\nDESCRIPTION: This class extends AbstractMetadataReportFactory to create metadata reports for Zookeeper. It maintains a Zookeeper transporter and application model, and implements the createMetadataReport factory method to instantiate ZookeeperMetadataReport objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ZookeeperMetadataReportFactory extends AbstractMetadataReportFactory {\n\t//与Zookeeper交互的传输器\n    private ZookeeperTransporter zookeeperTransporter;\n\t//应用程序模型\n    private ApplicationModel applicationModel;\n\n    public ZookeeperMetadataReportFactory(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        this.zookeeperTransporter = ZookeeperTransporter.getExtension(applicationModel);\n    }\n\n    @DisableInject\n    public void setZookeeperTransporter(ZookeeperTransporter zookeeperTransporter) {\n        this.zookeeperTransporter = zookeeperTransporter;\n    }\n\n    @Override\n    public MetadataReport createMetadataReport(URL url) {\n        return new ZookeeperMetadataReport(url, zookeeperTransporter);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Apache Dubbo Spring Boot Starter in Maven XML\nDESCRIPTION: Demonstrates how to use the org.apache.dubbo:dubbo-spring-boot-starter dependency for Spring Boot applications as an alternative to the standard dubbo dependency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-spring-boot-starter</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring External Servlet Container with Context Path for Dubbo REST\nDESCRIPTION: XML configuration that sets up Dubbo REST to use an external servlet container with a specific context path. The port and context path must match the external server's configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Raw JSON Format without Wrapper\nDESCRIPTION: Shows how a primitive return value would appear in JSON format without using a wrapper. This format is less structured and may cause issues with some clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n1001\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ThreadPool in Java\nDESCRIPTION: Example implementation of a custom ThreadPool interface. The extension provides a getExecutor method that returns an Executor instance to be used by Dubbo for processing service requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/impls/threadpool.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.threadpool.ThreadPool;\nimport java.util.concurrent.Executor;\n \npublic class XxxThreadPool implements ThreadPool {\n    public Executor getExecutor() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Stack/Admin using dubboctl\nDESCRIPTION: Command to install the Dubbo stack and admin components through the unified dubboctl command line tool. This is a prerequisite step for setting up the Dubbo governance system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install dubbo-stack\n```\n\n----------------------------------------\n\nTITLE: Example Properties File for Dubbo Configuration Binding\nDESCRIPTION: A properties file containing configurations for multiple ApplicationConfig beans, a ModuleConfig bean, and a RegistryConfig bean with custom prefixes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_12\n\nLANGUAGE: properties\nCODE:\n```\n# classpath:/META-INF/bindings.properties\n## 占位符值 : ApplicationConfig 外部配置属性前缀\napplications.prefix = dubbo.apps.\n\n## 多 ApplicationConfig Bean 绑定\ndubbo.apps.applicationBean.name = dubbo-demo-application\ndubbo.apps.applicationBean2.name = dubbo-demo-application2\ndubbo.apps.applicationBean3.name = dubbo-demo-application3\n\n## 单 ModuleConfig Bean 绑定\ndubbo.module.id = moduleBean\ndubbo.module.name = dubbo-demo-module\n\n## 单 RegistryConfig Bean 绑定\ndubbo.registry.address = zookeeper://192.168.99.100:32770\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo-Go-Pixiu Example with Shell Commands\nDESCRIPTION: Shell commands for preparing the environment, starting zookeeper, Dubbo server, Pixiu, and running test cases.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/quickstart.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# cd to the main example directory\ncd samples/dubbogo/simple/\n\n# Prepare the environment, start zk, and prepare the corresponding configuration files\n./start.sh prepare resolve\n\n# Start the dubbo server\n./start.sh startServer resolve\n\n# Start Pixiu \n./start.sh startPixiu resolve\n\n# Start Client test case\n./start.sh startTest resolve\n\n# Or use curl \ncurl -X POST 'http://localhost:8883/UserService/com.dubbogo.pixiu.UserService/GetUserByName' -d '{\"types\":\"string\",\"values\":\"tc\"}' -H 'Content-Type: application/json' -H 'x-dubbo-http1.1-dubbo-version: 1.0.0' -H 'x-dubbo-service-protocol: dubbo' -H 'x-dubbo-service-version: 1.0.0' -H 'x-dubbo-service-group: test'\n\n# Response {\"age\":15,\"code\":1,\"iD\":\"0001\",\"name\":\"tc\",\"time\":\"2021-08-01T18:08:41+08:00\"}\n```\n\n----------------------------------------\n\nTITLE: Adding JDK Serialization Support Dependency\nDESCRIPTION: Maven dependency configuration to enable JDK serialization support in Dubbo 3.3.x. Note that this may introduce security risks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-serialization-jdk</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in Java\nDESCRIPTION: Java code to programmatically configure Nacos as the metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMetadataReportConfig metadataConfig = new MetadataReportConfig();\nmetadataConfig.setAddress(\"nacos://127.0.0.1:8848\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Filters with YAML Configuration\nDESCRIPTION: YAML configuration to globally enable specific filters like 'accesslog' and 'tps' for all consumer RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/filter.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    filter: \"accesslog,tps\"\n```\n\n----------------------------------------\n\nTITLE: Checking Warned Classes via HTTP\nDESCRIPTION: Demonstrates how to query warned classes using HTTP GET request to return JSON formatted results.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeWarnedClasses\n{\"warnedClasses\":[\"io.dubbo.test2.NotSerializable\",\"org.apache.dubbo.samples.NotSerializable\",\"io.dubbo.test.NotSerializable\",\"io.dubbo.test2.OthersSerializable\"]}\n```\n\n----------------------------------------\n\nTITLE: Basic SPI Interface and Implementation\nDESCRIPTION: Example of defining a basic SPI interface and implementation class in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n@SPI\npublic interface DemoSpi {\n    void say();\n}\n\npublic class DemoSpiImpl implements DemoSpi {\n    public void say() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spring Boot Application\nDESCRIPTION: Main Spring Boot application class for bootstrapping the Dubbo provider\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoProviderApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoProviderApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Processing URL-encoded forms with Map parameter in Triple\nDESCRIPTION: Alternative Java method for receiving URL-encoded form data using a Map container. All form fields are collected into a single Map parameter for flexible access.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/support-more-content-types.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    public ServerResponse greetUrlForm(Map<String,Object> params){\n        System.out.println(\"Hello:\"+params.get(\"Hello\"));\n        System.out.println(\"Apache\"+params.get(\"Apache\"));\n        System.out.println(\"Id\"+params.get(\"Id\"));\n        return new ServerResponse(\"Server Received url form\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Definition in XML Configuration\nDESCRIPTION: XML bean configuration for defining a Dubbo service. This specifies the application name, registry address, protocol, and exposes the DubboTestService interface as a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<beans /* ...... * />\n\n    <dubbo:application name=\"test-dubbo-service\"/>\n    <dubbo:registry address=\"${dubbo.registry.address}\"/>\n    <dubbo:protocol name=\"dubbo\" port=\"20888\"/>\n\n    <dubbo:service timeout=\"10000\" interface=\"org.apache.shenyu.examples.dubbo.api.service.DubboTestService\" ref=\"dubboTestService\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Core Components using Configuration APIs\nDESCRIPTION: Core configuration classes for setting up Dubbo services, references, protocols, registries and other components\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/api.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ServiceConfig\norg.apache.dubbo.config.ReferenceConfig\norg.apache.dubbo.config.ProtocolConfig\norg.apache.dubbo.config.RegistryConfig\norg.apache.dubbo.config.MonitorConfig\norg.apache.dubbo.config.ApplicationConfig\norg.apache.dubbo.config.ModuleConfig\norg.apache.dubbo.config.ProviderConfig\norg.apache.dubbo.config.ConsumerConfig\norg.apache.dubbo.config.MethodConfig\norg.apache.dubbo.config.ArgumentConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Binary File SHA512 Signature\nDESCRIPTION: Command to generate a SHA512 hash signature specifically for binary release files, using the -b parameter to handle binary data properly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -b -a 512 apache-dubbo-${release_version}-bin.zip >> apache-dubbo-${release_version}-bin.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation ExceptionMapper in Java for Dubbo REST\nDESCRIPTION: This code snippet shows how to create a custom ExceptionMapper to handle validation exceptions and return JSON responses in a Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_49\n\nLANGUAGE: Java\nCODE:\n```\npublic class MyValidationExceptionMapper extends RpcExceptionMapper {\n\n    protected Response handleConstraintViolationException(ConstraintViolationException cve) {\n        ViolationReport report = new ViolationReport();\n        for (ConstraintViolation cv : cve.getConstraintViolations()) {\n            report.addConstraintViolation(new RestConstraintViolation(\n                    cv.getPropertyPath().toString(),\n                    cv.getMessage(),\n                    cv.getInvalidValue() == null ? \"null\" : cv.getInvalidValue().toString()));\n        }\n        // 采用json输出代替xml输出\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Mock Admin Dependency in Maven\nDESCRIPTION: XML configuration for adding the required dependency to enable mock functionality in a Dubbo consumer application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/mock.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-mock-admin</artifactId>\n  <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Compiler Extension in Java for Dubbo\nDESCRIPTION: This code snippet demonstrates how to implement a custom Compiler extension in Java for Dubbo. It shows the basic structure of the XxxCompiler class that implements the Compiler interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/compiler.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.common.compiler.Compiler;\n \npublic class XxxCompiler implements Compiler {\n    public Object getExtension(Class<?> type, String name) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding protoc to system PATH\nDESCRIPTION: This command demonstrates how to update the system PATH environment variable to include the directory containing the protoc executable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protoc-installation.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ export PATH=\"$PATH:$HOME/.local/bin\"\n```\n\n----------------------------------------\n\nTITLE: Nacos Metadata Configuration Structure\nDESCRIPTION: Describes how metadata is organized in Nacos using namespace, dataId, and group concepts. Shows the structure for both provider and consumer metadata.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nProvider: namespace: 'public', dataId: '{service name}:{version}:{group}:provider:{application name}', group: 'dubbo'\nConsumer: namespace: 'public', dataId: '{service name}:{version}:{group}:consumer:{application name}', group: 'dubbo'\n```\n\n----------------------------------------\n\nTITLE: Client Stream Handler Implementation in Dubbo Python\nDESCRIPTION: Demonstrates how to implement a client stream handler that processes multiple requests and returns a single response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/python-sdk/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef client_stream(self, request_iterator):\n    response = \"\"\n    for request in request_iterator:\n        print(f\"Received request: {request.name}\")\n        response += f\"{request.name} \"\n    return greeter_pb2.GreeterReply(message=response)\n```\n\n----------------------------------------\n\nTITLE: Implementing StaticDirectory in Dubbo\nDESCRIPTION: StaticDirectory is a simple implementation of AbstractDirectory that holds a static list of Invokers. It provides methods for checking availability and destroying the directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class StaticDirectory<T> extends AbstractDirectory<T> {\n\n    private final List<Invoker<T>> invokers;\n    \n    @Override\n    public Class<T> getInterface() {\n        return invokers.get(0).getInterface();\n    }\n    \n    @Override\n    public boolean isAvailable() {\n        if (isDestroyed()) {\n            return false;\n        }\n        for (Invoker<T> invoker : invokers) {\n            if (invoker.isAvailable()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void destroy() {\n        if (isDestroyed()) {\n            return;\n        }\n        super.destroy();\n        for (Invoker<T> invoker : invokers) {\n            invoker.destroy();\n        }\n        invokers.clear();\n    }\n\n    @Override\n    protected List<Invoker<T>> doList(Invocation invocation) throws RpcException {\n        return invokers;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Foreground Start Command\nDESCRIPTION: Command to start Dubbo-Go-Pixiu Docker container in foreground mode with configuration file mounting. Useful for monitoring startup and runtime logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/deployment.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name dubbo-go-pixiu -p 8883:8883 \\\n    -v /yourpath/conf.yaml:/etc/pixiu/conf.yaml \\\n    -v /yourpath/log.yml:/etc/pixiu/log.yml \\\n    apache/dubbo-go-pixiu:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Without Registry Simplification\nDESCRIPTION: XML configuration example showing a Dubbo provider without registry simplification enabled. This demonstrates the default behavior where all configuration properties are sent to the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"simplified-registry-nosimple-provider\"/>\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n<bean id=\"demoService\" class=\"org.apache.dubbo.samples.simplified.registry.nosimple.impl.DemoServiceImpl\"/>\n<dubbo:service async=\"true\" interface=\"org.apache.dubbo.samples.simplified.registry.nosimple.api.DemoService\" \n               version=\"1.2.3\" group=\"dubbo-simple\" ref=\"demoService\" \n               executes=\"4500\" retries=\"7\" owner=\"vict\" timeout=\"5300\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Dubbo Client\nDESCRIPTION: Shell command to start the Node.js Dubbo client in debug mode using ts-node\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=dubbo* ts-node main.ts\n```\n\n----------------------------------------\n\nTITLE: Encoding Dubbo Request in Java\nDESCRIPTION: Encodes a Dubbo Request object into a byte buffer, including setting header fields and serializing the request body.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprotected void encodeRequest(Channel channel, ChannelBuffer buffer, Request req) throws IOException {\n    Serialization serialization = getSerialization(channel);\n\n    // 创建消息头字节数组，长度为 16\n    byte[] header = new byte[HEADER_LENGTH];\n\n    // 设置魔数\n    Bytes.short2bytes(MAGIC, header);\n\n    // 设置数据包类型（Request/Response）和序列化器编号\n    header[2] = (byte) (FLAG_REQUEST | serialization.getContentTypeId());\n\n    // 设置通信方式(单向/双向)\n    if (req.isTwoWay()) {\n        header[2] |= FLAG_TWOWAY;\n    }\n    \n    // 设置事件标识\n    if (req.isEvent()) {\n        header[2] |= FLAG_EVENT;\n    }\n\n    // 设置请求编号，8个字节，从第4个字节开始设置\n    Bytes.long2bytes(req.getId(), header, 4);\n\n    // ... (remaining code omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting QoS Server with Netty in Java\nDESCRIPTION: This method sets up and starts the QoS server using Netty, configuring the server bootstrap and channel handlers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic void start() throws Throwable {\n        if (!started.compareAndSet(false, true)) {\n            return;\n        }\n        //1个主线程\n        boss = new NioEventLoopGroup(1, new DefaultThreadFactory(\"qos-boss\", true));\n        //0个从线程\n        worker = new NioEventLoopGroup(0, new DefaultThreadFactory(\"qos-worker\", true));\n        //服务端启动器，和参数设置\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(boss, worker);\n        serverBootstrap.channel(NioServerSocketChannel.class);\n        serverBootstrap.option(ChannelOption.SO_REUSEADDR, true);\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childHandler(new ChannelInitializer<Channel>() {\n\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                ch.pipeline().addLast(new QosProcessHandler(frameworkModel, welcome, acceptForeignIp));\n            }\n        });\n        try {\n            if (StringUtils.isBlank(host)) {\n                serverBootstrap.bind(port).sync();\n            } else {\n                serverBootstrap.bind(host, port).sync();\n            }\n\n            logger.info(\"qos-server bind localhost:\" + port);\n        } catch (Throwable throwable) {\n            logger.error(\"qos-server can not bind localhost:\" + port, throwable);\n            throw throwable;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring External Servlet Container for REST in Dubbo\nDESCRIPTION: XML configuration that instructs Dubbo to use an external application server's servlet container as the REST server implementation. This approach leverages existing application server capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vite Project for Dubbo-js Web Application\nDESCRIPTION: Commands to create a new Vite project with React and TypeScript, and install necessary Dubbo-related dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/ web/web-announcement.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vite@latest -- dubbo-web-example --template react-ts\ncd dubbo-web-example\nnpm install\n\nnpm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo\n```\n\n----------------------------------------\n\nTITLE: Generating Compatible Registry URLs in Java\nDESCRIPTION: This method generates compatible registry URLs based on the configured registration mode (interface, instance, or all) for both application-level and interface-level registrations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate static List<URL> genCompatibleRegistries(ScopeModel scopeModel, List<URL> registryList, boolean provider) {\n    List<URL> result = new ArrayList<>(registryList.size());\n    registryList.forEach(registryURL -> {\n        if (provider) {\n            String registerMode;\n            if (SERVICE_REGISTRY_PROTOCOL.equals(registryURL.getProtocol())) {\n               //为了更好理解这里简化掉服务发现注册地址配置的逻辑判断过程仅仅看当前例子提供的值走的逻辑\n            } else {\n                registerMode = registryURL.getParameter(REGISTER_MODE_KEY, ConfigurationUtils.getCachedDynamicProperty(scopeModel, DUBBO_REGISTER_MODE_DEFAULT_KEY, DEFAULT_REGISTER_MODE_ALL));\n                if (!isValidRegisterMode(registerMode)) {\n                    registerMode = DEFAULT_REGISTER_MODE_INTERFACE;\n                }\n                if ((DEFAULT_REGISTER_MODE_INSTANCE.equalsIgnoreCase(registerMode) || DEFAULT_REGISTER_MODE_ALL.equalsIgnoreCase(registerMode))\n                    && registryNotExists(registryURL, registryList, SERVICE_REGISTRY_PROTOCOL)) {\n                    URL serviceDiscoveryRegistryURL = URLBuilder.from(registryURL)\n                        .setProtocol(SERVICE_REGISTRY_PROTOCOL)\n                        .removeParameter(REGISTRY_TYPE_KEY)\n                        .build();\n                    result.add(serviceDiscoveryRegistryURL);\n                }\n                if (DEFAULT_REGISTER_MODE_INTERFACE.equalsIgnoreCase(registerMode) || DEFAULT_REGISTER_MODE_ALL.equalsIgnoreCase(registerMode)) {\n                    result.add(registryURL);\n                }\n            }\n    //省略掉若干代码和括号\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dubbo Core Dependency Version\nDESCRIPTION: Updates the core Dubbo dependency to version 3.2.0. This is the basic dependency required for using Dubbo framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.1-to-3.2-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Metadata from Zookeeper\nDESCRIPTION: Shell command to retrieve provider metadata stored in Zookeeper using zkCli.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 8] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/provider/demo-provider\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo's ContentType Constants for UTF-8 Encoding\nDESCRIPTION: Example of using Dubbo's predefined ContentType constants to configure UTF-8 encoding in REST responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo's ContentType Constants for UTF-8 Encoding\nDESCRIPTION: Example of using Dubbo's predefined ContentType constants to configure UTF-8 encoding in REST responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo's ContentType Constants for UTF-8 Encoding\nDESCRIPTION: Example of using Dubbo's predefined ContentType constants to configure UTF-8 encoding in REST responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Specific Protocol\nDESCRIPTION: XML configuration to set Hessian protocol for a specific service in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"hessian\" />\n```\n\n----------------------------------------\n\nTITLE: Setting RMI Response Timeout\nDESCRIPTION: Java command line parameter to configure RMI response timeout.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njava -Dsun.rmi.transport.tcp.responseTimeout=3000\n```\n\n----------------------------------------\n\nTITLE: Client Service Lookup Implementation in RMI\nDESCRIPTION: Code demonstrating how to lookup and invoke a remote service from the RMI client side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRegistry registry = LocateRegistry.getRegistry();\nHello stub = (Hello) registry.lookup(\"Hello\");\nString response = stub.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Executing Dubbo Plugin in ShenYu\nDESCRIPTION: The AbstractDubboPlugin class handles the core logic for Dubbo invocation, including metadata and parameter checks, and setting up the context for generic invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.dubbo.common.AbstractDubboPlugin\n```\n\n----------------------------------------\n\nTITLE: Viewing Service Name Mapping in Zookeeper\nDESCRIPTION: Example of using zkCli to view service name mapping for a DemoService. Shows how multiple application names are stored as comma-separated values for a single service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_17\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 26] get /dubbo/mapping/org.apache.dubbo.demo.DemoService\ndemo-provider,two-demo-provider,dubbo-demo-annotation-provider\ncZxid = 0x25a80f\nctime = Thu Jun 10 01:36:40 CST 2021\nmZxid = 0x25a918\nmtime = Fri Jun 11 18:46:40 CST 2021\npZxid = 0x25a80f\ncversion = 0\ndataVersion = 2\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 62\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Changing Logging Output Framework in Dubbo\nDESCRIPTION: Shows how to use the 'switchLogger' command to change the logging output framework. Valid options are slf4j, jcl, log4j, jdk, log4j2.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/logger-management.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\n> switchLogger slf4j\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer Application A in XML\nDESCRIPTION: XML configuration for a consumer application (Application A) showing how to reference services using specific protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference protocol=\"dubbo\" interface=\"org.apache.dubbo.samples.basic.api.DemoService1\"/>\n<dubbo:reference protocol=\"dubbo\" interface=\"org.apache.dubbo.samples.basic.api.DemoService2\"/>\n\n<dubbo:reference protocol=\"grpc\" interface=\"org.apache.dubbo.samples.basic.api.DemoService0\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering InvokerListener Extension in Properties\nDESCRIPTION: Properties file configuration for registering the custom InvokerListener implementation with Dubbo's extension system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/invoker-listener.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxInvokerListener\n```\n\n----------------------------------------\n\nTITLE: Detail Profiler Consumer Example\nDESCRIPTION: Example of consumer-side detailed profiler output showing filter chain and timing details\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/profiler.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n[19/07/22 07:10:59:059 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 990.828336 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\ninvocation context:\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 285965458479241\n+-[ Offset: 0.000000ms; Usage: 990.828336ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi\n  +-[ Offset: 0.852044ms; Usage: 989.899439ms, 99% ] Filter org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter invoke.\n     +-[ Offset: 1.814858ms; Usage: 988.924876ms, 99% ] Filter org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter invoke.\n        +-[ Offset: 1.853211ms; Usage: 988.877928ms, 99% ] Filter org.apache.dubbo.monitor.support.MonitorClusterFilter invoke.\n           +-[ Offset: 1.873243ms; Usage: 988.661708ms, 99% ] Filter org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter invoke.\n              +-[ Offset: 2.159140ms; Usage: 0.504939ms, 0% ] Router route.\n              +-[ Offset: 8.125823ms; Usage: 981.748366ms, 99% ] Cluster org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker invoke.\n                 +-[ Offset: 8.258359ms; Usage: 981.612033ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration with CAS in Nacos for Dubbo Service Mapping\nDESCRIPTION: Example of using Nacos ConfigService to publish configuration with CAS (Compare-And-Swap) operations. This approach prevents concurrent overwrites of service-to-application mappings by comparing MD5 tickets.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nConfigService configService = ...\nconfigService.publishConfigCas(key, group, content, ticket);\n```\n\n----------------------------------------\n\nTITLE: Spring MVC REST Controller Interface Definition\nDESCRIPTION: Defines a REST API interface using Spring MVC annotations for request mapping and parameter binding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@RestController()\n@RequestMapping(\"/demoService\")\npublic interface DemoService {\n    @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n    Integer hello(@RequestParam Integer a, @RequestParam Integer b);\n\n    @RequestMapping(value = \"/error\", method = RequestMethod.GET)\n    String error();\n\n    @RequestMapping(value = \"/say\", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)\n    String sayHello(@RequestBody String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom LoadBalance Implementation Example\nDESCRIPTION: Example implementation of a simple custom load balancing strategy that always selects the first invoker from the list.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.demo.dubbo;\npublic class DemoLoadBalance implements LoadBalance {\n    @Override\n    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        System.out.println(\"[DemoLoadBalance]Select the first invoker...\");\n        return invokers.get(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing at Server Service Level in Dubbo\nDESCRIPTION: XML configuration to set the load balancing strategy at the service provider level. This example shows how to specify 'roundrobin' as the load balancing strategy for a service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" loadbalance=\"roundrobin\" />\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to Triple Services via Pixiu\nDESCRIPTION: Bash command demonstrating how to call a Dubbo-go Triple service by sending an HTTP POST request to the Pixiu gateway with JSON payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/http_triple.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -d '{\"name\":\"laurence\"}' http://30.XXX.XXX.XX:8881/dubbogoDemoServer/org.apache.dubbo.laurence.samples.UserProvider/SayHello\n{\"name\":\"Hello laurence\",\"id\":\"12345\",\"age\":21}\n```\n\n----------------------------------------\n\nTITLE: Executing Greeter Client with Multiple RPC Patterns in Dubbo-Rust\nDESCRIPTION: Command to run the greeter client which demonstrates four different RPC communication patterns: unary calls, client streaming, bi-directional streaming, and server streaming. The output shows the responses received from the server for each pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/streaming.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ ./target/debug/greeter-client\n# unary call\nResponse: GreeterReply { message: \"hello, dubbo-rust\" }\n# client stream\nclient streaming, Response: GreeterReply { message: \"hello client streaming\" }\n# bi stream\nparts: Metadata { inner: {\"content-type\": \"application/grpc\", \"date\": \"Wed, 28 Sep 2022 23:34:20 GMT\"} }\nreply: GreeterReply { message: \"server reply: \\\"msg1 from client\\\"\" }\nreply: GreeterReply { message: \"server reply: \\\"msg2 from client\\\"\" }\nreply: GreeterReply { message: \"server reply: \\\"msg3 from client\\\"\" }\ntrailer: Some(Metadata { inner: {\"content-type\": \"application/grpc\", \"grpc-status\": \"0\", \"grpc-message\": \"poll trailer successfully.\", \"grpc-accept-encoding\": \"gzip,identity\"} })\n# server stream\nparts: Metadata { inner: {\"content-type\": \"application/grpc\", \"date\": \"Wed, 28 Sep 2022 23:34:20 GMT\"} }\nreply: GreeterReply { message: \"msg1 from server\" }\nreply: GreeterReply { message: \"msg2 from server\" }\nreply: GreeterReply { message: \"msg3 from server\" }\ntrailer: Some(Metadata { inner: {\"content-type\": \"application/grpc\", \"grpc-status\": \"0\", \"grpc-message\": \"poll trailer successfully.\", \"grpc-accept-encoding\": \"gzip,identity\"} })\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key Fingerprint\nDESCRIPTION: Command to generate and display a GPG key fingerprint, which is used to verify the authenticity of a public key and should be added to the Apache user profile.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# fingerprint参数生成公钥指纹：\n$ gpg --fingerprint liujun\npub   rsa4096 2019-10-17 [SC]\n      1376 A2FF 67E4 C477 5739  09BD 7DB6 8550 D366 E4C0\nuid           [ultimate] liujun (CODE SIGNING KEY) <liujun@apache.org>\nsub   rsa4096 2019-10-17 [E]\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Filter\nDESCRIPTION: XML configuration for enabling HTTP request/response logging in Dubbo REST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Calculating nextMaxConcurrency in AutoConcurrencyLimier\nDESCRIPTION: Formula for calculating the next maximum concurrency value based on the current window data. This uses qps, avgLatency, and an exploration ratio to optimize concurrency limits.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nnextMaxConcurrency = qps * avgLatency / 1000 * (1 + exploreRatio)\n```\n\n----------------------------------------\n\nTITLE: Sample Counter Configuration for Different Collectors\nDESCRIPTION: Configuration implementations for different types of metrics collectors including DefaultMetricsCollector and ThreadRejectMetricsCountSampler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void countConfigure(MetricsCountSampleConfigurer<String, MetricsEvent.Type, ApplicationMetric> sampleConfigure) {\n    sampleConfigure.configureMetrics(configure -> new ApplicationMetric(sampleConfigure.getSource()));\n}\n\n@Override\nprotected void countConfigure(MetricsCountSampleConfigurer<String, String, ThreadPoolRejectMetric> sampleConfigure) {\n    sampleConfigure.configureMetrics(configure -> new ThreadPoolRejectMetric(collector.getApplicationName(),configure.getSource()));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties in Java\nDESCRIPTION: This snippet defines the properties for a Dubbo consumer, including the application name, Nacos registry address, and service version. These properties are externalized in a .properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n## Dubbo Application info\ndubbo.application.name = dubbo-consumer-demo\n\n## Nacos registry address\ndubbo.registry.address = nacos://127.0.0.1:8848\n\n# @Reference version\ndemo.service.version= 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Control Filter in Dubbo REST\nDESCRIPTION: Example of a JAX-RS ContainerResponseFilter implementation that adds cache control headers to GET requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_31\n\nLANGUAGE: java\nCODE:\n```\npublic class CacheControlFilter implements ContainerResponseFilter {\n\n    public void filter(ContainerRequestContext req, ContainerResponseContext res) {\n        if (req.getMethod().equals(\"GET\")) {\n            res.getHeaders().add(\"Cache-Control\", \"someValue\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Instance for Generic Invocation in Go\nDESCRIPTION: Instantiates a User struct with sample data for use in generic invocation examples.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuser := &User{\n    ID:   \"1\",\n    Name: \"Zhangsan\",\n    Age:  20,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer with Spring Configuration\nDESCRIPTION: Spring configuration class that enables Dubbo functionality and component scanning. Uses @EnableDubbo annotation to activate Dubbo features and specifies the base package for scanning.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.action\")\n@PropertySource(\"classpath:/spring/dubbo-consumer.properties\")\n@ComponentScan(value = {\"com.alibaba.dubbo.samples.action\"})\nstatic class ConsumerConfiguration {}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Cluster Strategy via SPI in Dubbo\nDESCRIPTION: Configuration for registering a custom cluster strategy implementation with Dubbo's Service Provider Interface (SPI) mechanism. This maps the strategy name to the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nxxx=com.xxx.XxxCluster\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractServiceDiscovery in Java\nDESCRIPTION: Constructor for AbstractServiceDiscovery class that sets up metadata reporting and storage type based on the application model and registry URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic AbstractServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {\n        this(applicationModel.getApplicationName(), registryURL);\n        this.applicationModel = applicationModel;\n        MetadataReportInstance metadataReportInstance = applicationModel.getBeanFactory().getBean(MetadataReportInstance.class);\n        metadataType = metadataReportInstance.getMetadataType();\n        this.metadataReport = metadataReportInstance.getMetadataReport(registryURL.getParameter(REGISTRY_CLUSTER_KEY));\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Zookeeper Curator5 Spring Boot Starter\nDESCRIPTION: Configuration for adding Dubbo Zookeeper Curator5 Spring Boot Starter for Zookeeper 3.8.0+ integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring DoubleRangeMatch in VirtualService\nDESCRIPTION: Example of a DoubleRangeMatch configuration within a VirtualService. It demonstrates how to define a range match for double values in method arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/routers/virtualservice.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: service.dubbo.apache.org/v1alpha1\nkind: VirtualService\nmetadata:\n  name: demo/StandardRouter\nspec:\n  hosts:\n  dubbo:\n  - routedetail:\n    - match:\n      - method:\n        - args:\n          - index: 1\n            type: java.lang.Double\n            num_value:\n              oneof:\n              - range: #DoubleRangeMatch\n                  start: 1.2\n                  end: 1000.5\n```\n\n----------------------------------------\n\nTITLE: Validating IPv4 Addresses in Dubbo\nDESCRIPTION: This method checks if an IPv4 address is valid for use by Dubbo. It excludes loopback addresses, performs pattern matching, and checks against known special addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nstatic boolean isValidV4Address(InetAddress address) {\n    if (address == null || address.isLoopbackAddress()) {\n        return false;\n    }\n    String name = address.getHostAddress();\n    boolean result = (name != null\n            && IP_PATTERN.matcher(name).matches()\n            && !Constants.ANYHOST_VALUE.equals(name)\n            && !Constants.LOCALHOST_VALUE.equals(name));\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Dubbo Committer Guide\nDESCRIPTION: YAML configuration block that defines the metadata and properties for the Dubbo Committer Guide documentation page, including page aliases, description, title, and navigation weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/contact/committer/\ndescription: Dubbo Committer Guide\nlinkTitle: Committer Guide\ntitle: Committer Guide\ntype: docs\nweight: 3\n```\n\n----------------------------------------\n\nTITLE: Observing LDS Resources in Dubbo-Istio Integration\nDESCRIPTION: Demonstrates how to listen for Listener Discovery Service (LDS) updates from Istio and trigger Route Discovery Service (RDS) observations when LDS data changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/Dubbo-proxyless.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Listen\nvoid observeResource(Set<String> resourceNames, Consumer<Map<String, T>> consumer, boolean isReConnect);\n\n// Observe LDS updated\nldsProtocol.observeResource(ldsResourcesName, (newListener) -> {\n    // Inconsistent LDS data\n    if (!newListener.equals(listenerResult)) {\n        // Update LDS data\n        this.listenerResult = newListener;\n        // Trigger RDS listening\n        if (isRdsObserve.get()) {\n            createRouteObserve();\n        }\n    }\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Viewing Consumer Metadata in Redis\nDESCRIPTION: Example of using Redis client to get consumer metadata for a DemoService. Shows the metadata stored for a service consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_10\n\nLANGUAGE: shell script\nCODE:\n```\n127.0.0.1:6379> get org.apache.dubbo.demo.DemoService:::consumer:demo-consumer\n\"{\\\"side\\\":\\\"consumer\\\",\\\"interface\\\":\\\"org.apache.dubbo.demo.DemoService\\\",\\\"metadata-type\\\":\\\"remote\\\",\\\"application\\\":\\\"demo-consumer\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"\\\",\\\"sticky\\\":\\\"false\\\",\\\"check\\\":\\\"false\\\",\\\"methods\\\":\\\"sayHello,sayHelloAsync\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Using Curator API for CAS Operations in Service Name Mapping\nDESCRIPTION: Java code snippet showing how to use Curator API to implement Compare-And-Swap (CAS) operations for updating service name mappings in Zookeeper while avoiding concurrent modification issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nCuratorFramework client = ... \nclient.setData().withVersion(ticket).forPath(path, dataBytes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Service\nDESCRIPTION: Implementation class for the GreetingsService interface\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class GreetingsServiceImpl implements GreetingsService {\n    @Override\n    public String sayHi(String name) {\n        return \"hi, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service\nDESCRIPTION: Implementation class for the GreetingsService interface\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class GreetingsServiceImpl implements GreetingsService {\n    @Override\n    public String sayHi(String name) {\n        return \"hi, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo with Kubernetes Service Mode\nDESCRIPTION: Command to install Dubbo in Kubernetes Service mode with ingress enabled. This is part of the expected user experience for cross-cluster communication setup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/openatom-opensopurce-competition-2024.md#2025-04-08_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndubboctl install --mode=kubernetes --ingress-enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 with Nested References on Consumer Side in Dubbo\nDESCRIPTION: Example of using Netty4 for a specific set of references in Dubbo. This configuration nests the service references inside the consumer tag to apply Netty4 only to those specific references.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/netty4.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer client=\"netty4\">\n  <dubbo:reference />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Load Balancing in YAML\nDESCRIPTION: Sets the roundrobin load balancing strategy globally for all Dubbo service calls using YAML configuration. This affects all consumer requests to services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    loadbalance: roundrobin\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Extension in Dubbo XML\nDESCRIPTION: XML configuration examples for setting up cluster extensions in Dubbo protocol and provider settings\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/cluster.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol cluster=\"xxx\" />\n<!-- Default configuration; if <dubbo:protocol> does not configure cluster, this configuration will be used -->\n<dubbo:provider cluster=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Load Balancing in YAML\nDESCRIPTION: Sets the roundrobin load balancing strategy globally for all Dubbo service calls using YAML configuration. This affects all consumer requests to services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  consumer:\n    loadbalance: roundrobin\n```\n\n----------------------------------------\n\nTITLE: Processing Metadata Collection\nDESCRIPTION: Handles the collection of metadata by separating provider and consumer metadata for storage\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean doHandleMetadataCollection(Map<MetadataIdentifier, Object> metadataMap) {\n        if (metadataMap.isEmpty()) {\n            return true;\n        }\n        Iterator<Map.Entry<MetadataIdentifier, Object>> iterable = metadataMap.entrySet().iterator();\n        while (iterable.hasNext()) {\n            Map.Entry<MetadataIdentifier, Object> item = iterable.next();\n            if (PROVIDER_SIDE.equals(item.getKey().getSide())) {\n            \t//提供端的元数据则存储提供端元数据\n                this.storeProviderMetadata(item.getKey(), (FullServiceDefinition) item.getValue());\n            } else if (CONSUMER_SIDE.equals(item.getKey().getSide())) {\n            //消费端的元数据则存储提供端元数据\n                this.storeConsumerMetadata(item.getKey(), (Map) item.getValue());\n            }\n\n        }\n        return false;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Rust Server with Streaming Support\nDESCRIPTION: Complete implementation of a Dubbo Rust server that handles all four communication models: Unary calls, Client streaming, Server streaming, and Bidirectional streaming. The server processes streaming messages asynchronously using Tokio and futures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/streaming.md#2025-04-08_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// ./src/greeter/server.rs\npub mod protos {\n    include!(concat!(env!(\"OUT_DIR\"), \"/org.apache.dubbo.sample.tri.rs\"));\n}\n\nuse futures_util::StreamExt;\nuse protos::\n    greeter_server::{register_server, Greeter},\n    GreeterReply, GreeterRequest,\n};\n\nuse std::{io::ErrorKind, pin::Pin};\n\nuse async_trait::async_trait;\nuse futures_util::Stream;\nuse tokio::sync::mpsc;\nuse tokio_stream::wrappers::ReceiverStream;\n\nuse dubbo_config::RootConfig;\nuse dubbo::{codegen::*, Dubbo};\n\ntype ResponseStream =\n    Pin<Box<dyn Stream<Item = Result<GreeterReply, dubbo::status::Status>> + Send>>;\n\n#[tokio::main]\nasync fn main() {\n    register_server(GreeterServerImpl {\n        name: \"greeter\".to_string(),\n    });\n\n    // Dubbo::new().start().await;\n    Dubbo::new()\n        .with_config({\n            let r = RootConfig::new();\n            match r.load() {\n                Ok(config) => config,\n                Err(_err) => panic!(\"err: {:?}\", _err), // response was dropped\n            }\n        })\n        .start()\n        .await;\n}\n\n#[allow(dead_code)]\n#[derive(Default, Clone)]\nstruct GreeterServerImpl {\n    name: String,\n}\n\n// #[async_trait]\n#[async_trait]\nimpl Greeter for GreeterServerImpl {\n    async fn greet(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        println!(\"GreeterServer::greet {:?}\", request.metadata);\n\n        Ok(Response::new(GreeterReply {\n            message: \"hello, dubbo-rust\".to_string(),\n        }))\n    }\n\n    async fn greet_client_stream(\n        &self,\n        request: Request<Decoding<GreeterRequest>>,\n    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {\n        let mut s = request.into_inner();\n        loop {\n            let result = s.next().await;\n            match result {\n                Some(Ok(val)) => println!(\"result: {:?}\", val),\n                Some(Err(val)) => println!(\"err: {:?}\", val),\n                None => break,\n            }\n        }\n        Ok(Response::new(GreeterReply {\n            message: \"hello client streaming\".to_string(),\n        }))\n    }\n\n    type greetServerStreamStream = ResponseStream;\n    async fn greet_server_stream(\n        &self,\n        request: Request<GreeterRequest>,\n    ) -> Result<Response<Self::greetServerStreamStream>, dubbo::status::Status> {\n        println!(\"greet_server_stream: {:?}\", request.into_inner());\n\n        let data = vec![\n            Result::<_, dubbo::status::Status>::Ok(GreeterReply {\n                message: \"msg1 from server\".to_string(),\n            }),\n            Result::<_, dubbo::status::Status>::Ok(GreeterReply {\n                message: \"msg2 from server\".to_string(),\n            }),\n            Result::<_, dubbo::status::Status>::Ok(GreeterReply {\n                message: \"msg3 from server\".to_string(),\n            }),\n        ];\n        let resp = futures_util::stream::iter(data);\n\n        Ok(Response::new(Box::pin(resp)))\n    }\n\n    type greetStreamStream = ResponseStream;\n    async fn greet_stream(\n        &self,\n        request: Request<Decoding<GreeterRequest>>,\n    ) -> Result<Response<Self::greetStreamStream>, dubbo::status::Status> {\n        println!(\n            \"GreeterServer::greet_stream, grpc header: {:?}\",\n            request.metadata\n        );\n\n        let mut in_stream = request.into_inner();\n        let (tx, rx) = mpsc::channel(128);\n\n        tokio::spawn(async move {\n            while let Some(result) = in_stream.next().await {\n                match result {\n                    Ok(v) => {\n                        tx.send(Ok(GreeterReply {\n                            message: format!(\"server reply: {:?}\", v.name),\n                        }))\n                        .await\n                        .expect(\"working rx\")\n                    }\n                    Err(err) => {\n                        if let Some(io_err) = match_for_io_error(&err) {\n                            if io_err.kind() == ErrorKind::BrokenPipe {\n                                eprintln!(\"\\tclient disconnected: broken pipe\");\n                                break;\n                            }\n                        }\n\n                        match tx.send(Err(err)).await {\n                            Ok(_) => (),\n                            Err(_err) => break,\n                        }\n                    }\n                }\n            }\n            println!(\"\\tstream ended\");\n        });\n\n        let out_stream = ReceiverStream::new(rx);\n\n        Ok(Response::new(\n            Box::pin(out_stream) as Self::greetStreamStream\n        ))\n    }\n}\n\nfn match_for_io_error(err_status: &dubbo::status::Status) -> Option<&std::io::Error> {\n    let mut err: &(dyn std::error::Error + 'static) = err_status;\n\n    loop {\n        if let Some(io_err) = err.downcast_ref::<std::io::Error>() {\n            return Some(io_err);\n        }\n\n        err = match err.source() {\n            Some(err) => err,\n            None => return None,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Metadata Center YAML Configuration\nDESCRIPTION: YAML configuration for setting up Redis as a metadata center in Dubbo, specifying the connection address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: redis://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Load Balancing Strategy in Dubbo-go\nDESCRIPTION: This code shows how to use a predefined load balancing strategy (Round Robin in this case) when creating a new client in Dubbo-go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/load-balance/loadbalance.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncli, err := client.NewClient(\n\tclient.WithClientLoadBalanceRoundRobin(),\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Quickstart Project - Shell Commands\nDESCRIPTION: Shell commands to download and extract the Dubbo quickstart project template\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -O -# https://dubbo-demo.oss-cn-hangzhou.aliyuncs.com/quickstart/dubbo-quickstart.zip\nunzip dubbo-quickstart\ncd dubbo-quickstart\n```\n\n----------------------------------------\n\nTITLE: Building RPC Invocations from HTTP Requests in Dubbo\nDESCRIPTION: The RPCInvocationBuilder utility creates RPC invocations from HTTP requests. It extracts path information, headers, and parameters to construct a complete invocation object. It handles parameter parsing and builds the context required for invoking the target service method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n{\n    private static final ParamParserManager paramParser = new ParamParserManager();\n\n    public static Pair<RpcInvocation, Invoker> build(RequestFacade request, Object servletRequest, Object servletResponse) {\n \n        // Obtain invoker\n        Pair<Invoker, RestMethodMetadata> invokerRestMethodMetadataPair = getRestMethodMetadata(request);\n\n        RpcInvocation rpcInvocation = createBaseRpcInvocation(request, invokerRestMethodMetadataPair.getSecond());\n\n        ProviderParseContext parseContext = createParseContext(request, servletRequest, servletResponse, invokerRestMethodMetadataPair.getSecond());\n        // Parameter building\n        Object[] args = paramParser.providerParamParse(parseContext);\n\n        rpcInvocation.setArguments(args);\n\n        return Pair.make(rpcInvocation, invokerRestMethodMetadataPair.getFirst());\n    }\n\n    private static ProviderParseContext createParseContext(RequestFacade request, Object servletRequest, Object servletResponse, RestMethodMetadata restMethodMetadata) {\n        ProviderParseContext parseContext = new ProviderParseContext(request);\n        parseContext.setResponse(servletResponse);\n        parseContext.setRequest(servletRequest);\n\n        Object[] objects = new Object[restMethodMetadata.getArgInfos().size()];\n        parseContext.setArgs(Arrays.asList(objects));\n        parseContext.setArgInfos(restMethodMetadata.getArgInfos());\n\n        return parseContext;\n    }\n\n    private static RpcInvocation createBaseRpcInvocation(RequestFacade request, RestMethodMetadata restMethodMetadata) {\n        RpcInvocation rpcInvocation = new RpcInvocation();\n\n        int localPort = request.getLocalPort();\n        String localAddr = request.getLocalAddr();\n        int remotePort = request.getRemotePort();\n        String remoteAddr = request.getRemoteAddr();\n\n        String HOST = request.getHeader(RestConstant.HOST);\n        String GROUP = request.getHeader(RestConstant.GROUP);\n\n        String PATH = request.getHeader(RestConstant.PATH);\n        String VERSION = request.getHeader(RestConstant.VERSION);\n\n        String METHOD = restMethodMetadata.getMethod().getName();\n        String[] PARAMETER_TYPES_DESC = restMethodMetadata.getMethod().getParameterTypes();\n\n        rpcInvocation.setParameterTypes(restMethodMetadata.getReflectMethod().getParameterTypes());\n\n        rpcInvocation.setMethodName(METHOD);\n        rpcInvocation.setAttachment(RestConstant.GROUP, GROUP);\n        rpcInvocation.setAttachment(RestConstant.METHOD, METHOD);\n        rpcInvocation.setAttachment(RestConstant.PARAMETER_TYPES_DESC, PARAMETER_TYPES_DESC);\n        rpcInvocation.setAttachment(RestConstant.PATH, PATH);\n        rpcInvocation.setAttachment(RestConstant.VERSION, VERSION);\n        rpcInvocation.setAttachment(RestConstant.HOST, HOST);\n        rpcInvocation.setAttachment(RestConstant.REMOTE_ADDR, remoteAddr);\n        rpcInvocation.setAttachment(RestConstant.LOCAL_ADDR, localAddr);\n        rpcInvocation.setAttachment(RestConstant.REMOTE_PORT, remotePort);\n        rpcInvocation.setAttachment(RestConstant.LOCAL_PORT, localPort);\n\n        Enumeration<String> attachments = request.getHeaders(RestConstant.DUBBO_ATTACHMENT_HEADER);\n\n        while (attachments != null && attachments.hasMoreElements()) {\n            String s =  attachments.nextElement();\n\n            String[] split = s.split(\"=\");\n\n            rpcInvocation.setAttachment(split[0], split[1]);\n        }\n\n        // TODO set path, version, group and so on\n        return rpcInvocation;\n    }\n\n    private static Pair<Invoker, RestMethodMetadata> getRestMethodMetadata(RequestFacade request) {\n        String path = request.getRequestURI();\n        String version = request.getHeader(RestConstant.VERSION);\n        String group = request.getHeader(RestConstant.GROUP);\n        int port = request.getIntHeader(RestConstant.REST_PORT);\n\n        return PathAndInvokerMapper.getRestMethodMetadata(path, version, group, port);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Consumer Metadata in Redis\nDESCRIPTION: Example of using Redis client to get consumer metadata for a DemoService. Shows the metadata stored for a service consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_10\n\nLANGUAGE: shell script\nCODE:\n```\n127.0.0.1:6379> get org.apache.dubbo.demo.DemoService:::consumer:demo-consumer\n\"{\\\"side\\\":\\\"consumer\\\",\\\"interface\\\":\\\"org.apache.dubbo.demo.DemoService\\\",\\\"metadata-type\\\":\\\"remote\\\",\\\"application\\\":\\\"demo-consumer\\\",\\\"dubbo\\\":\\\"2.0.2\\\",\\\"release\\\":\\\"\\\",\\\"sticky\\\":\\\"false\\\",\\\"check\\\":\\\"false\\\",\\\"methods\\\":\\\"sayHello,sayHelloAsync\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: 应用级服务发现的注册数据示例\nDESCRIPTION: 展示了在应用级服务发现模式下,Provider 实例向注册中心注册的数据格式。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/v3-service-discovery.md#2025-04-08_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"name\": \"demo-provider\",\n\t\"id\": \"192.168.0.103:20880\",\n\t\"address\": \"192.168.0.103\",\n\t\"port\": 20880,\n  \"metadata\": {\n    \"dubbo.endpoints\": \"[{\\\"port\\\":20880,\\\"protocol\\\":\\\"dubbo\\\"}]\",\n    \"dubbo.metadata.storage-type\": \"local\",\n    \"dubbo.revision\": \"6785535733750099598\"\n  },\n\t\"time\": 1583461240877\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a POJO Instance in Java\nDESCRIPTION: Demonstrates how to create and populate a POJO instance with data. This is contrasted with the Map representation used in generic invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/generic-reference.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nPerson person = new PersonImpl(); \nperson.setName(\"xxx\"); \nperson.setPassword(\"yyy\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization for Dubbo Protocol\nDESCRIPTION: YAML configuration to set the serialization protocol for Dubbo RPC calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n    serialization: fastjson2\n```\n\n----------------------------------------\n\nTITLE: 使用Java API配置配置中心\nDESCRIPTION: 通过Java代码方式设置Dubbo的配置中心地址。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"zookeeper://127.0.0.1:2181\");\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Dubbo Contributor Guide\nDESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about contributing to Apache Dubbo. It specifies metadata such as the title, description, aliases, and page weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /en/contact/contributor/\ndescription: Dubbo Contributor Guide\nlinkTitle: Contributor Guide\ntitle: Contributor Guide\ntype: docs\nweight: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Triple Servlet Integration Sample\nDESCRIPTION: Commands to download and run the Triple Servlet integration sample. This shows how to test the capability to reuse existing servlet endpoints for Triple protocol HTTP traffic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# 获取样例代码\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-servlet\n# 直接运行\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Listener in Dubbo\nDESCRIPTION: Method to register the AggregateMetricsCollector as a listener to DefaultMetricsCollector, implementing a producer-consumer model. This binding occurs through Spring BeanFactory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerListener() {\n    applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class).addListener(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Feign Client Interface Definition\nDESCRIPTION: OpenFeign client interface for consuming Spring Cloud services from Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@FeignClient(name = \"spring-cloud-provider-for-dubbo\")\npublic interface UserServiceFeign {\n    @RequestMapping(value=\"/users/list\", method = RequestMethod.GET, produces = \"application/json\")\n    List<User> users();\n}\n```\n\n----------------------------------------\n\nTITLE: Feign Client Interface Definition\nDESCRIPTION: OpenFeign client interface for consuming Spring Cloud services from Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@FeignClient(name = \"spring-cloud-provider-for-dubbo\")\npublic interface UserServiceFeign {\n    @RequestMapping(value=\"/users/list\", method = RequestMethod.GET, produces = \"application/json\")\n    List<User> users();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GreetingService with Zipkin Tracing\nDESCRIPTION: Complete XML configuration for GreetingService, which calls HelloService. It includes Dubbo service configuration, references to downstream services, and Zipkin tracing setup on a different port to avoid conflicts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n\n    <!-- 1. Define the application name for GreetingService -->\n    <dubbo:application name=\"greeting-service-provider\"/>\n\n    <!-- 2. Specify the registry address -->\n    <dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n     <!-- 3. Use Dubbo's native protocol to expose service on port 20881 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20881\"/>\n    \n    <!-- 4. Declare the remote proxy for HelloService and add the tracing filter in Dubbo's filter chain -->\n    <dubbo:reference id=\"helloService\" check=\"false\" interface=\"com.alibaba.dubbo.samples.api.HelloService\" filter=\"tracing\"/>\n    \n    <!-- 5. Declare GreetingServiceImpl as a Spring bean and wire the HelloService remote proxy into it -->\n    <bean id=\"greetingService\" class=\"com.alibaba.dubbo.samples.service.greeting.GreetingServiceImpl\">\n        <property name=\"helloService\" ref=\"helloService\"/>\n    </bean>\n\n    <!-- 6. Declare GreetingServiceImpl as a Dubbo service and add the tracing filter in Dubbo's filter chain -->\n    <dubbo:service interface=\"com.alibaba.dubbo.samples.api.GreetingService\" ref=\"greetingService\" filter=\"tracing\"/>\n\n    <!-- 7. Zipkin related configuration -->\n    <bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n        <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n    </bean>\n\n    <bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n        <property name=\"localServiceName\" value=\"greeting-service\"/>\n        <property name=\"spanReporter\">\n            <bean class=\"zipkin2.reporter.beans.AsyncReporterFactoryBean\">\n                <property name=\"sender\" ref=\"sender\"/>\n                <!-- wait up to half a second for any in-flight spans on close -->\n                <property name=\"closeTimeout\" value=\"500\"/>\n            </bean>\n        </property>\n        <property name=\"currentTraceContext\">\n            <bean class=\"brave.spring.beans.CurrentTraceContextFactoryBean\">\n                <property name=\"scopeDecorators\">\n                    <bean class=\"brave.context.slf4j.MDCScopeDecorator\" factory-method=\"create\"/>\n                </property>\n            </bean>\n        </property>\n    </bean>\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Server\nDESCRIPTION: TypeScript server setup using Fastify with Dubbo plugin integration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fastify } from \"fastify\";\nimport { fastifyDubboPlugin } from \"@apachedubbo/dubbo-fastify\";\nimport routes from \"./dubbo\";\n\nasync function main() {\n  const server = fastify();\n  await server.register(fastifyDubboPlugin, {\n    routes,\n  });\n  server.get(\"/\", (_, reply) => {\n    reply.type(\"text/plain\");\n    reply.send(\"Hello World!\");\n  });\n  await server.listen({ host: \"localhost\", port: 8080 });\n  console.log(\"server is listening at\", server.addresses());\n}\n\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Viewing Consumer Metadata in Zookeeper\nDESCRIPTION: Example of using zkCli to get consumer metadata for a DemoService from Zookeeper. Shows the metadata stored for a service consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 10] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/consumer/demo-consumer\n{\"side\":\"consumer\",\"interface\":\"org.apache.dubbo.demo.DemoService\",\"metadata-type\":\"remote\",\"application\":\"demo-consumer\",\"dubbo\":\"2.0.2\",\"release\":\"\",\"sticky\":\"false\",\"check\":\"false\",\"methods\":\"sayHello,sayHelloAsync\"}\ncZxid = 0x25aa24\nctime = Mon Jun 28 21:57:43 CST 2021\nmZxid = 0x25aa24\nmtime = Mon Jun 28 21:57:43 CST 2021\npZxid = 0x25aa24\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 219\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Specifying Route Destination using DubboReference Annotation in Java\nDESCRIPTION: This code snippet demonstrates how to specify a routing destination for Dubbo services using the @DubboReference annotation with parameters. The annotation allows for method-level routing granularity by specifying the target environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/zhengcaiyun.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@DubboReference(check = false, parameters = {\"ENV_SHANGHAI\", \"ALL\"}) //all表示所有方法，可以单独指定\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Random Token Authorization in Dubbo XML\nDESCRIPTION: Enables token authorization for a specific service using a randomly generated UUID as the token. This configuration applies only to the specified service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/token-authorization.md#2025-04-08_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" token=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Tracing Baggage Configuration Properties\nDESCRIPTION: Configuration properties for baggage information in Dubbo's distributed tracing system. These settings control whether baggage propagation is enabled and which fields should be propagated remotely.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.tracing.baggage.enabled=<boolean> # Whether baggage is enabled or not. Default: true\ndubbo.tracing.baggage.remote-fields=<list<string>> # List of fields that are referenced the same in-process as on the wire.\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer to Use Custom Protocol\nDESCRIPTION: Application properties configuration for the consumer that specifies 'edubbo' as the protocol to use when referencing remote services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# 自定义协议\ndubbo.consumer.protocol=edubbo\n```\n\n----------------------------------------\n\nTITLE: Storing Provider Metadata\nDESCRIPTION: Handles the storage of provider metadata either synchronously or asynchronously based on configuration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void storeProviderMetadata(MetadataIdentifier providerMetadataIdentifier, ServiceDefinition serviceDefinition) {\n        if (syncReport) {\n            storeProviderMetadataTask(providerMetadataIdentifier, serviceDefinition);\n        } else {\n            reportCacheExecutor.execute(() -> storeProviderMetadataTask(providerMetadataIdentifier, serviceDefinition));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsService Interface in Java\nDESCRIPTION: This code snippet defines the MetricsService interface, which provides methods for querying metrics at different levels of granularity. It includes methods to get metrics by categories, service name, and method details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface MetricsService {\n\n    /**\n     * Default {@link MetricsService} extension name.\n     */\n    String DEFAULT_EXTENSION_NAME = \"default\";\n\n    /**\n     * The contract version of {@link MetricsService}, future updates\nmust ensure compatibility.\n     */\n    String VERSION = \"1.0.0\";\n\n    /**\n     * Get metrics by prefixes\n     *\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(List<MetricsCategory> categories);\n\n    /**\n     * Get metrics by interface and prefixes\n     *\n     * @param serviceUniqueName serviceUniqueName (eg.group/interfaceName:version)\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, List<MetricsCategory> categories);\n\n    /**\n     * Get metrics by interface, method, and prefixes\n     *\n     * @param serviceUniqueName serviceUniqueName (eg.group/interfaceName:version)\n     * @param methodName methodName\n     * @param parameterTypes method parameter types\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, String methodName, Class<?>[] parameterTypes, List<MetricsCategory> categories);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StorageService with DAO Pattern in Java\nDESCRIPTION: Storage service implementation that updates the inventory quantity in the database. It uses a DAO (Data Access Object) to interact with the storage table.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class StorageServiceImpl implements StorageService {\n\n  private StorageDAO storageDAO;\n  \n    @Override\n    public void deduct(String commodityCode, int count) {\n        Storage storage = new Storage();\n        storage.setCount(count);\n        storage.setCommodityCode(commodityCode);\n        storageDAO.update(storage);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Canary Environment Instances in Kubernetes\nDESCRIPTION: Command to deploy the canary environment instances for User, Detail, Comment, and Order applications, marked with the environment tag 'env=gray'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/isolation.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/10-task/dubbo-samples-shop/deploy/Gray.yml\n```\n\n----------------------------------------\n\nTITLE: AbstractMetricsListener Factory Method for Event Handling\nDESCRIPTION: Implementation of a factory method in AbstractMetricsListener that creates listener instances for handling metric events. This method defines the behavior for processing metrics events when they finish.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/2-指标收集器的指标采集流程.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n  //AbstractMetricsListener\n   public static AbstractMetricsListener onFinish(MetricsKey metricsKey, Consumer<TimeCounterEvent> finishFunc) {\n\n        return new AbstractMetricsListener(metricsKey) {\n            @Override\n            public void onEventFinish(TimeCounterEvent event) {\n                //此处是finishFunc就是之前 event ->{...} 中定义的lambda函数\n                finishFunc.accept(event);\n            }\n        };\n    }\n```\n\n----------------------------------------\n\nTITLE: Remote YAML Configuration for Dubbo-Go\nDESCRIPTION: This YAML configuration is pre-written into the Zookeeper cluster. It defines registry and protocol settings for the Dubbo-Go application, including the Zookeeper address and the triple protocol settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/remote.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      timeout: 3s\n      address: '127.0.0.1:2181'\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo-go Server Application\nDESCRIPTION: Server implementation that provides the UserProvider service. It includes the GetUser method implementation and necessary configuration for registering the service with the Dubbo-go framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/logger\" // dubbogo 框架日志\n\t\"dubbo.apache.org/dubbo-go/v3/config\"\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\" // dubbogo 框架依赖，所有dubbogo进程都需要隐式引入一次\n\t\"dubbo3-demo/api\"\n\t\"strconv\"\n\t\"time\"\n)\n\ntype UserProvider struct {\n}\n\n// 实现接口方法\nfunc (u *UserProvider) GetUser(ctx context.Context, req int32) (*api.User, error) {\n\tvar err error\n\tlogger.Infof(\"req:%#v\", req)\n\tuser := &api.User{}\n\tuser.ID = strconv.Itoa(int(req))\n\tuser.Name = \"laurence\"\n\tuser.Age = 22\n\tuser.Time = time.Now()\n\treturn user, err\n}\n\n//// MethodMapper 定义方法名映射，从 Go 的方法名映射到 Java 小写方法名，只有 dubbo 协议服务接口才需要使用\n//// go -> go 互通无需使用\n//func (s *UserProvider) MethodMapper() map[string]string {\n//\treturn map[string]string{\n//\t\t\"GetUser\": \"getUser\",\n//\t}\n//}\n\nfunc init(){\n\tconfig.SetProviderService(&UserProvider{}) // 注册服务提供者类，类名与配置文件中的 service 对应\n}\n\n// export DUBBO_GO_CONFIG_PATH=dubbogo.yml 运行前需要设置环境变量，指定配置文件位置\nfunc main() {\n\tif err := config.Load(); err != nil {\n\t\tpanic(err)\n\t}\n\tselect {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Dubbo Interface with Annotation\nDESCRIPTION: Interface definition using @DubboAsync annotation to enable asynchronous processing\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@DubboAsync\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using Dubbo RpcContext in Java\nDESCRIPTION: Shows how to obtain client IP address in a REST service using Dubbo's RpcContext, which provides a more elegant service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRemoteAddressString());\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using Dubbo RpcContext in Java\nDESCRIPTION: Shows how to obtain client IP address in a REST service using Dubbo's RpcContext, which provides a more elegant service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_25\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRemoteAddressString());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Cluster Invoker in Java for Apache Dubbo\nDESCRIPTION: This code snippet shows part of the AbstractClusterInvoker class implementation, specifically the invoke method. It demonstrates how Invokers are listed, LoadBalance is loaded, and the doInvoke method is called for further processing in Dubbo's clustering mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic Result invoke(final Invocation invocation) throws RpcException {\n    checkWhetherDestroyed();\n    LoadBalance loadbalance = null;\n\n    // 绑定 attachments 到 invocation 中.\n    Map<String, String> contextAttachments = RpcContext.getContext().getAttachments();\n    if (contextAttachments != null && contextAttachments.size() != 0) {\n        ((RpcInvocation) invocation).addAttachments(contextAttachments);\n    }\n\n    // 列举 Invoker\n    List<Invoker<T>> invokers = list(invocation);\n    if (invokers != null && !invokers.isEmpty()) {\n        // 加载 LoadBalance\n        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()\n                .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));\n    }\n    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);\n    \n    // 调用 doInvoke 进行后续操作\n    return doInvoke(invocation, invokers, loadbalance);\n}\n\n// 抽象方法，由子类实现\nprotected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,\n                                       LoadBalance loadbalance) throws RpcException;\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe Extension in Dubbo\nDESCRIPTION: Configuration file for registering the custom readiness probe with Dubbo. This file should be placed in the META-INF/dubbo directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nxxx=com.xxx.XxxReadinessProbe\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Config Mode with Properties\nDESCRIPTION: Example showing how to configure Dubbo's configuration mode using JVM arguments, environment variables, or configuration files. The config mode controls how Dubbo handles multiple instances of unique configuration classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# JVM -D\n-Ddubbo.config.mode=strict\n\n# Environment Variable\nDUBBO_CONFIG_MODE=strict\n\n# External Configuration (Configuration Center), Spring application Environment, dubbo.properties\ndubbo.config.mode=strict\n```\n\n----------------------------------------\n\nTITLE: Registering ThreadPool Extension with Dubbo SPI\nDESCRIPTION: Properties file configuration for registering a custom ThreadPool implementation with Dubbo's SPI (Service Provider Interface) mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/impls/threadpool.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxThreadPool\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe Extension in Dubbo\nDESCRIPTION: Configuration file for registering the custom readiness probe with Dubbo. This file should be placed in the META-INF/dubbo directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nxxx=com.xxx.XxxReadinessProbe\n```\n\n----------------------------------------\n\nTITLE: Installing Protoc Plugins for Go\nDESCRIPTION: Commands to install the necessary Protocol Buffer compiler plugins for Go, including protoc-gen-go and protoc-gen-go-triple.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/rpc.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install dubbo.apache.org/dubbo-go/v3/cmd/protoc-gen-go-triple@v3.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Interface in Java\nDESCRIPTION: Defines a basic synchronous interface for a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic interface FooService {\n    String findFoo(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Triple Rest Sample Project\nDESCRIPTION: Commands to clone the Dubbo sample repository and run the Triple Rest basic example using Maven or directly via Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 获取示例代码\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic\n# 直接运行\nmvn spring-boot:run\n# 或打包后运行\nmvn clean package -DskipTests\njava -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Adding RMI Protocol Dependency in Maven\nDESCRIPTION: Maven dependency configuration required to use RMI protocol in Dubbo 3.x projects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-rpc-rmi</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Logging Received Requests in Dubbo Service\nDESCRIPTION: Log output showing that the specified instance is receiving getInfo requests after applying the routing rule.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/host.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nReceived getInfo request......\n```\n\n----------------------------------------\n\nTITLE: Extracting Nacos Server Binary Package\nDESCRIPTION: Commands to unzip the downloaded Nacos server binary package and navigate to the bin directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunzip nacos-server-$version.zip\ncd nacos/bin\n#tar -xvf nacos-server-$version.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Testing Server with cURL\nDESCRIPTION: Command to test the running server using cURL with JSON payload\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/microservices.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:50051/greet.v1.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Setting Implicit Parameters in Dubbo Consumer\nDESCRIPTION: Demonstrates how to set implicit parameters on the consumer side using RpcContext.getContext().setAttachment(). The parameters are cleared after each remote call, so they need to be set for each call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/attachment.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nRpcContext.getContext().setAttachment(\"index\", \"1\"); // 隐式传参，后面的远程调用都会隐式将这些参数发送到服务器端，类似cookie，用于框架集成，不建议常规业务使用\nxxxService.xxx(); // 远程调用\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Node Count for Consistent Hash Load Balancing in Dubbo\nDESCRIPTION: This code demonstrates how to set the number of virtual nodes for the Consistent Hash load balancing algorithm in Dubbo. It adjusts the distribution of requests across providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/load-balance.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:parameter key=\"hash.nodes\" value=\"320\" />\n```\n\n----------------------------------------\n\nTITLE: Applying User-Based Routing for Reviews Service in Istio\nDESCRIPTION: This command applies a virtual service configuration to route traffic from user 'jason' to v2 of the reviews service, while all other traffic goes to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format Example with Wrapper Object\nDESCRIPTION: Example of how the JSON response will be structured when using a wrapper object for primitive return types, showing a more standardized format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\"id\": 1001}\n```\n\n----------------------------------------\n\nTITLE: Starting Heartbeat and Reconnect Timer Tasks in Dubbo\nDESCRIPTION: This code snippet demonstrates how Dubbo starts the heartbeat and reconnect timer tasks. It calculates the tick durations and schedules two tasks: HeartbeatTimerTask for sending heartbeats and ReconnectTimerTask for handling reconnections and disconnections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate void startHeartbeatTimer() {\n    long heartbeatTick = calculateLeastDuration(heartbeat);\n    long heartbeatTimeoutTick = calculateLeastDuration(heartbeatTimeout);\n    HeartbeatTimerTask heartBeatTimerTask = new HeartbeatTimerTask(cp, heartbeatTick, heartbeat);\n    ReconnectTimerTask reconnectTimerTask = new ReconnectTimerTask(cp, heartbeatTimeoutTick, heartbeatTimeout);\n\n    heartbeatTimer.newTimeout(heartBeatTimerTask, heartbeatTick, TimeUnit.MILLISECONDS);\n    heartbeatTimer.newTimeout(reconnectTimerTask, heartbeatTimeoutTick, TimeUnit.MILLISECONDS);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP2 Transport Layer Settings in Properties Format\nDESCRIPTION: Shows how to configure the Triple protocol's HTTP2 transport layer settings using properties format. These settings control header compression, server push, concurrent streams, window size, frame size, and header list size.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/principle.md#2025-04-08_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\n# Limit on the number of entries in the header compression index table for the other end\ndubbo.rpc.tri.header-table-size=4096\n\n# Enable server push functionality\ndubbo.rpc.tri.enable-push=false\n\n# The maximum number of concurrent streams allowed for the other end\ndubbo.rpc.tri.max-concurrent-streams=2147483647\n\n# The window size declared by the sender\ndubbo.rpc.tri.initial-window-size=1048576\n\n# Set the maximum number of bytes for frames\ndubbo.rpc.tri.max-frame-size=32768\n\n# Maximum number of bytes for uncompressed headers permitted for the other end\ndubbo.rpc.tri.max-header-list-size=8192\n```\n\n----------------------------------------\n\nTITLE: Retrieving RPC Result with Timeout in Java\nDESCRIPTION: This method retrieves the RPC result, waiting for the specified timeout. It uses a lock and condition variable to wait for the response, throwing a TimeoutException if the result is not received in time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Override\npublic Object get(int timeout) throws RemotingException {\n    if (timeout <= 0) {\n        timeout = Constants.DEFAULT_TIMEOUT;\n    }\n    \n    // 检测服务提供方是否成功返回了调用结果\n    if (!isDone()) {\n        long start = System.currentTimeMillis();\n        lock.lock();\n        try {\n            // 循环检测服务提供方是否成功返回了调用结果\n            while (!isDone()) {\n                // 如果调用结果尚未返回，这里等待一段时间\n                done.await(timeout, TimeUnit.MILLISECONDS);\n                // 如果调用结果成功返回，或等待超时，此时跳出 while 循环，执行后续的逻辑\n                if (isDone() || System.currentTimeMillis() - start > timeout) {\n                    break;\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        } finally {\n            lock.unlock();\n        }\n        \n        // 如果调用结果仍未返回，则抛出超时异常\n        if (!isDone()) {\n            throw new TimeoutException(sent > 0, channel, getTimeoutMessage(false));\n        }\n    }\n    \n    // 返回调用结果\n    return returnFromResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsService Interface in Java\nDESCRIPTION: Defines the MetricsService interface with methods to retrieve metrics by categories, service name, and method details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface MetricsService {\n\n    /**\n     * Default {@link MetricsService} extension name.\n     */\n    String DEFAULT_EXTENSION_NAME = \"default\";\n\n    /**\n     * The contract version of {@link MetricsService}, the future update must make sure compatible.\n     */\n    String VERSION = \"1.0.0\";\n\n    /**\n     * Get metrics by prefixes\n     *\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(List<MetricsCategory> categories);\n\n    /**\n     * Get metrics by interface and prefixes\n     *\n     * @param serviceUniqueName serviceUniqueName (eg.group/interfaceName:version)\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, List<MetricsCategory> categories);\n\n    /**\n     * Get metrics by interface、method and prefixes\n     *\n     * @param serviceUniqueName serviceUniqueName (eg.group/interfaceName:version)\n     * @param methodName methodName\n     * @param parameterTypes method parameter types\n     * @param categories categories\n     * @return metrics - key=MetricCategory value=MetricsEntityList\n     */\n    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, String methodName, Class<?>[] parameterTypes, List<MetricsCategory> categories);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Provider Changes Event with Logs in Dubbo\nDESCRIPTION: Log example showing successful provider change events received by a consumer. This confirms that a consumer is receiving updates about available providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 11:02:05:005 CST] main  INFO integration.RegistryDirectory:  [DUBBO] Received invokers changed event from registry. Registry type: interface. Service Key: org.apache.dubbo.samples.api.GreetingsService. Urls Size : 1. Invokers Size : 1. Available Size: 1. Available Invokers : 30.221.144.195:20880, dubbo version: 3.2.0-beta.6, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Extension Class in Java\nDESCRIPTION: This method creates an adaptive extension class using bytecode generation and compilation. It handles native configurations and uses a code generator to create the class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate Class<?> createAdaptiveExtensionClass() {\n        ClassLoader classLoader = type.getClassLoader();\n        try {\n            if (NativeUtils.isNative()) {\n                return classLoader.loadClass(type.getName() + \"$Adaptive\");\n            }\n        } catch (Throwable ignore) {\n\n        }\n        String code = new AdaptiveClassCodeGenerator(type, cachedDefaultName).generate();\n        org.apache.dubbo.common.compiler.Compiler compiler = extensionDirector.getExtensionLoader(\n    org.apache.dubbo.common.compiler.Compiler.class).getAdaptiveExtension();\n        return compiler.compile(type, code, classLoader);\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting HelloService Command\nDESCRIPTION: Maven command to start the HelloService application component.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn exec:java -Dexec.mainClass=com.alibaba.dubbo.samples.service.hello.Application\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Aggregation with AggregateMetricsCollector in Java\nDESCRIPTION: Core implementation of the AggregateMetricsCollector class that handles metrics collection and aggregation in Dubbo. It maintains various metric counters using TimeWindowCounter for requests, failures, QPS and TimeWindowQuantile for response times.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class AggregateMetricsCollector implements MetricsCollector, MetricsListener {\n    private int bucketNum;\n    private int timeWindowSeconds;\n\n    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();\n\n    private final ApplicationModel applicationModel;\n\n    private static final Integer DEFAULT_COMPRESSION = 100;\n    private static final Integer DEFAULT_BUCKET_NUM = 10;\n    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;\n\n//Configuration parsing in the constructor\n\n    public AggregateMetricsCollector(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        ConfigManager configManager = applicationModel.getApplicationConfigManager();\n        MetricsConfig config = configManager.getMetrics().orElse(null);\n        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {\n            // only registered when aggregation is enabled.\n            registerListener();\n\n            AggregationConfig aggregation = config.getAggregation();\n            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();\n            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RESTEasy Style API Definition for Dubbo\nDESCRIPTION: Interface defining a REST service using JAX-RS (RESTEasy) annotations. It defines endpoints with @Path, HTTP methods (@GET, @POST), and parameter handling using JAX-RS annotations like @QueryParam.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/demoService\")\n    public interface RestDemoService {\n        @GET\n        @Path(\"/hello\")\n        Integer hello(@QueryParam(\"a\")Integer a,@QueryParam(\"b\") Integer b);\n\n        @GET\n        @Path(\"/error\")\n        String error();\n\n        @POST\n        @Path(\"/say\")\n        @Consumes({MediaType.TEXT_PLAIN})\n        String sayHello(String name);\n\n        boolean isCalled();\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Formats at Class Level in REST Service\nDESCRIPTION: Example of configuring supported data formats at the class level for all methods in a REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\npublic class UserServiceImpl implements UserService {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Formats at Class Level in REST Service\nDESCRIPTION: Example of configuring supported data formats at the class level for all methods in a REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n@Path(\"users\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\npublic class UserServiceImpl implements UserService {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Invokers with JavassistProxyFactory in Dubbo (Java)\nDESCRIPTION: The JavassistProxyFactory class creates Invoker instances at runtime. It uses a Wrapper to invoke methods on the proxy object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class JavassistProxyFactory extends AbstractProxyFactory {\n    \n    // 省略其他方法\n\n    @Override\n    public <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) {\n        final Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf('$') < 0 ? proxy.getClass() : type);\n        // 创建匿名类对象\n        return new AbstractProxyInvoker<T>(proxy, type, url) {\n            @Override\n            protected Object doInvoke(T proxy, String methodName,\n                                      Class<?>[] parameterTypes,\n                                      Object[] arguments) throws Throwable {\n                // 调用 invokeMethod 方法进行后续的调用\n                return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extension Mechanism in Dubbo\nDESCRIPTION: Multiple examples showing how Dubbo's extension mechanism is used in various parts of the framework. These snippets demonstrate obtaining different types of extensions like TypeBuilder, ScopeModelInitializer, OrderedPropertiesProvider, and others from their respective extension loaders.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n// 使用扩展机制获取TypeBuilder\nSet<TypeBuilder> tbs = model.getExtensionLoader(TypeBuilder.class).getSupportedExtensionInstances();\n      \n//获取域模型初始化器ScopeModelInitializer扩展对象,执行初始化方法\nExtensionLoader<ScopeModelInitializer> initializerExtensionLoader = this.getExtensionLoader(ScopeModelInitializer.class);\n Set<ScopeModelInitializer> initializers = initializerExtensionLoader.getSupportedExtensionInstances();\n \n// OrderedPropertiesConfiguration 中获取有序配置提供器对象\nExtensionLoader<OrderedPropertiesProvider> propertiesProviderExtensionLoader = moduleModel.getExtensionLoader(OrderedPropertiesProvider.class);\n \n// ApplicationModel中获取配置管理器对象\n configManager = (ConfigManager) this.getExtensionLoader(ApplicationExt.class)\n                .getExtension(ConfigManager.NAME);\n       \n//ModuleModel中获取模块扩展对象\nSet<ModuleExt> exts = this.getExtensionLoader(ModuleExt.class).getSupportedExtensionInstances();\n\n// ApplicationModel中获Environment对象\nenvironment = (Environment) this.getExtensionLoader(ApplicationExt.class)\n                .getExtension(Environment.NAME);\n \n// ApplicationModel中获取应用初始化监听器ApplicationInitListener扩展对象\nExtensionLoader<ApplicationInitListener> extensionLoader = this.getExtensionLoader(ApplicationInitListener.class);\nSet<String> listenerNames = extensionLoader.getSupportedExtensions();\n      \n//ScopeModel中创建扩展访问器:\nthis.extensionDirector = new ExtensionDirector(parent != null ? parent.getExtensionDirector() : null, scope, this);\n```\n\n----------------------------------------\n\nTITLE: Decoding Messages in Dubbo (Java)\nDESCRIPTION: The DecodeHandler class handles the decoding of Decodeable objects, Requests, and Responses. It ensures that decoding can be performed in a thread pool if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class DecodeHandler extends AbstractChannelHandlerDelegate {\n\n    public DecodeHandler(ChannelHandler handler) {\n        super(handler);\n    }\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        if (message instanceof Decodeable) {\n            // 对 Decodeable 接口实现类对象进行解码\n            decode(message);\n        }\n\n        if (message instanceof Request) {\n            // 对 Request 的 data 字段进行解码\n            decode(((Request) message).getData());\n        }\n\n        if (message instanceof Response) {\n            // 对 Request 的 result 字段进行解码\n            decode(((Response) message).getResult());\n        }\n\n        // 执行后续逻辑\n        handler.received(channel, message);\n    }\n\n    private void decode(Object message) {\n        // Decodeable 接口目前有两个实现类，\n        // 分别为 DecodeableRpcInvocation 和 DecodeableRpcResult\n        if (message != null && message instanceof Decodeable) {\n            try {\n                // 执行解码逻辑\n                ((Decodeable) message).decode();\n            } catch (Throwable e) {\n                if (log.isWarnEnabled()) {\n                    log.warn(\"Call Decodeable.decode failed: \" + e.getMessage(), e);\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configurations from Properties in ConfigManager\nDESCRIPTION: Method for loading configurations from properties files, supporting multiple config instances with different IDs and single config instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic <T extends AbstractConfig> List<T> loadConfigsOfTypeFromProps(Class<T> cls) {\n        List<T> tmpConfigs = new ArrayList<>();\n        PropertiesConfiguration properties = environment.getPropertiesConfiguration();\n        Set<String> configIds = this.getConfigIdsFromProps(cls);\n        configIds.forEach(id -> {\n            if (!this.getConfig(cls, id).isPresent()) {\n                T config;\n                try {\n                    config = createConfig(cls, scopeModel);\n                    config.setId(id);\n                } catch (Exception e) {\n                    throw new IllegalStateException(\"create config instance failed, id: \" + id + \", type:\" + cls.getSimpleName());\n                }\n                String key = null;\n                boolean addDefaultNameConfig = false;\n                try {\n                    key = DUBBO + \".\" + AbstractConfig.getPluralTagName(cls) + \".\" + id + \".name\";\n                    if (properties.getProperty(key) == null) {\n                        properties.setProperty(key, id);\n                        addDefaultNameConfig = true;\n                    }\n                    config.refresh();\n                    this.addConfig(config);\n                    tmpConfigs.add(config);\n                } catch (Exception e) {\n                    logger.error(\"load config failed, id: \" + id + \", type:\" + cls.getSimpleName(), e);\n                    throw new IllegalStateException(\"load config failed, id: \" + id + \", type:\" + cls.getSimpleName());\n                } finally {\n                    if (addDefaultNameConfig && key != null) {\n                        properties.remove(key);\n                    }\n                }\n            }\n        });\n        if (this.getConfigs(cls).isEmpty()) {\n            List<Map<String, String>> configurationMaps = environment.getConfigurationMaps();\n            if (ConfigurationUtils.hasSubProperties(configurationMaps, AbstractConfig.getTypePrefix(cls))) {\n                T config;\n                try {\n                    config = createConfig(cls, scopeModel);\n                    config.refresh();\n                } catch (Exception e) {\n                    throw new IllegalStateException(\"create default config instance failed, type:\" + cls.getSimpleName());\n                }\n                this.addConfig(config);\n                tmpConfigs.add(config);\n            }\n        }\n        return tmpConfigs;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Maven Project Structure for Dubbo LivenessProbe Extension\nDESCRIPTION: Shows the recommended Maven project structure for implementing a custom LivenessProbe extension in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/liveness.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxLivenessProbe.java (Implements LivenessProbe interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.probe.LivenessProbe (Plain text file, content: xxx=com.xxx.XxxLivenessProbe)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple RMI Ports\nDESCRIPTION: XML configuration for multiple RMI protocol instances with different ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"rmi1\" name=\"rmi\" port=\"1099\" />\n<dubbo:protocol id=\"rmi2\" name=\"rmi\" port=\"2099\" />\n\n<dubbo:service interface=\"...\" protocol=\"rmi1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Backup Servers in Dubbo\nDESCRIPTION: Configures a Redis registry with backup servers for failover using URL format.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Catching Custom Exceptions on the Consumer Side\nDESCRIPTION: This snippet demonstrates how to catch custom exceptions on the consumer side in Dubbo. It calls a remote method and catches a specific custom exception type to handle it accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    greeterProxy.echo(REQUEST_MSG);\n} catch (IGreeterException e) {\n    //做相应的处理\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Custom Exceptions on the Consumer Side\nDESCRIPTION: This snippet demonstrates how to catch custom exceptions on the consumer side in Dubbo. It calls a remote method and catches a specific custom exception type to handle it accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    greeterProxy.echo(REQUEST_MSG);\n} catch (IGreeterException e) {\n    //做相应的处理\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Consumer with @Reference Annotation\nDESCRIPTION: Demonstrates how to reference a Dubbo service using @Reference annotation in a consumer component. The component autowires the GreetingService interface and provides a method to invoke the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"annotatedConsumer\")\npublic class GreetingServiceConsumer {\n    @Reference\n    private GreetingService greetingService;\n    \n    public String doSayHello(String name) {\n        return greetingService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RpcRemoteClient EventListener in Go for Seata\nDESCRIPTION: This snippet shows the implementation of the RpcRemoteClient, which handles opening connections, sending registration requests, and processing messages from the Transaction Coordinator. It includes methods for handling connection events and periodic tasks like sending heartbeats.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-seata.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (client *RpcRemoteClient) OnOpen(session getty.Session) error {\n  go func() \n    request := protocal.RegisterTMRequest{AbstractIdentifyRequest: protocal.AbstractIdentifyRequest{\n      ApplicationId:           client.conf.ApplicationId,\n      TransactionServiceGroup: client.conf.TransactionServiceGroup,\n    }}\n    // 建立连接后向 Transaction Coordinator 发起注册 TransactionManager 的请求\n    _, err := client.sendAsyncRequestWithResponse(session, request, RPC_REQUEST_TIMEOUT)\n    if err == nil {\n      // 将与 Transaction Coordinator 建立的连接保存在连接池供后续使用\n      clientSessionManager.RegisterGettySession(session)\n      client.GettySessionOnOpenChannel <- session.RemoteAddr()\n    }\n  }()\n\n  return nil\n}\n\n// OnError ...\nfunc (client *RpcRemoteClient) OnError(session getty.Session, err error) {\n  clientSessionManager.ReleaseGettySession(session)\n}\n\n// OnClose ...\nfunc (client *RpcRemoteClient) OnClose(session getty.Session) {\n  clientSessionManager.ReleaseGettySession(session)\n}\n\n// OnMessage ...\nfunc (client *RpcRemoteClient) OnMessage(session getty.Session, pkg interface{}) {\n  log.Info(\"received message:{%v}\", pkg)\n  rpcMessage, ok := pkg.(protocal.RpcMessage)\n  if ok {\n    heartBeat, isHeartBeat := rpcMessage.Body.(protocal.HeartBeatMessage)\n    if isHeartBeat && heartBeat == protocal.HeartBeatMessagePong {\n      log.Debugf(\"received PONG from %s\", session.RemoteAddr())\n    }\n  }\n\n  if rpcMessage.MessageType == protocal.MSGTYPE_RESQUEST ||\n    rpcMessage.MessageType == protocal.MSGTYPE_RESQUEST_ONEWAY {\n    log.Debugf(\"msgId:%s, body:%v\", rpcMessage.Id, rpcMessage.Body)\n\n    // 处理事务消息，提交 or 回滚\n    client.onMessage(rpcMessage, session.RemoteAddr())\n  } else {\n    resp, loaded := client.futures.Load(rpcMessage.Id)\n    if loaded {\n      response := resp.(*getty2.MessageFuture)\n      response.Response = rpcMessage.Body\n      response.Done <- true\n      client.futures.Delete(rpcMessage.Id)\n    }\n  }\n}\n\n// OnCron ...\nfunc (client *RpcRemoteClient) OnCron(session getty.Session) {\n  // 发送心跳\n  client.defaultSendRequest(session, protocal.HeartBeatMessagePing)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Protocols for Different Services in Dubbo\nDESCRIPTION: This XML configuration demonstrates how to use different protocols (dubbo and rmi) for different services in Dubbo. It sets up the application, registry, and defines two services using different protocols.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-protocols.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\"> \n    <dubbo:application name=\"world\"  />\n    <dubbo:registry id=\"registry\" address=\"10.20.141.150:9090\" username=\"admin\" password=\"hello1234\" />\n    <!-- 多协议配置 -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\" />\n    <dubbo:protocol name=\"rmi\" port=\"1099\" />\n    <!-- 使用dubbo协议暴露服务 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" protocol=\"dubbo\" />\n    <!-- 使用rmi协议暴露服务 -->\n    <dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" protocol=\"rmi\" /> \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Service in Dubbo 2.6 using XML\nDESCRIPTION: XML configuration to enable asynchronous mode for a service interface in Dubbo 2.6 by setting the async attribute to true.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"asyncService\" interface=\"org.apache.dubbo.demo.api.AsyncService\" async=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Defined Routes in Istio\nDESCRIPTION: This command retrieves and displays the YAML configuration of the virtual services, showing the routing rules for each microservice in the Bookinfo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/security/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservices -o yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Zookeeper Integration for Older Zookeeper Servers in Non-Spring Boot Applications\nDESCRIPTION: For non-Spring Boot applications using older Zookeeper Server (3.4.x), this snippet shows how to integrate Zookeeper with Dubbo using a dependency that provides compatibility with older Zookeeper versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-dependencies-zookeeper</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Registry Updates\nDESCRIPTION: Initiates the subscription process to receive updates from the registry about service changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (dir *RegistryDirectory) subscribe(url *common.URL) {\n    dir.consumerConfigurationListener.addNotifyListener(dir)\n    dir.referenceConfigurationListener = newReferenceConfigurationListener(dir, url)\n    dir.registry.Subscribe(url, dir)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Configuration Interface in Go\nDESCRIPTION: This code defines the DynamicConfiguration interface which specifies the methods that need to be implemented by each configuration center type, including getting/setting properties, adding/removing listeners, etc.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-config-center.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// DynamicConfiguration for modify listener and get properties file\ntype DynamicConfiguration interface {\n\tParser() parser.ConfigurationParser\n\tSetParser(parser.ConfigurationParser)\n\tAddListener(string, ConfigurationListener, ...Option)\n\tRemoveListener(string, ConfigurationListener, ...Option)\n\t// GetProperties get properties file\n\tGetProperties(string, ...Option) (string, error)\n\n\t// GetRule get Router rule properties file\n\tGetRule(string, ...Option) (string, error)\n\n\t// GetInternalProperty get value by key in Default properties file(dubbo.properties)\n\tGetInternalProperty(string, ...Option) (string, error)\n\n\t// PublishConfig will publish the config with the (key, group, value) pair\n\tPublishConfig(string, string, string) error\n\n\t// RemoveConfig will remove the config white the (key, group) pair\n\tRemoveConfig(string, string) error\n\n\t// GetConfigKeysByGroup will return all keys with the group\n\tGetConfigKeysByGroup(group string) (*gxset.HashSet, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Exchange Messages in Dubbo (Java)\nDESCRIPTION: The HeaderExchangeHandler class processes Request and Response objects. It handles both one-way and two-way communications, executing the service call and returning results for two-way communications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class HeaderExchangeHandler implements ChannelHandlerDelegate {\n\n    private final ExchangeHandler handler;\n\n    public HeaderExchangeHandler(ExchangeHandler handler) {\n        if (handler == null) {\n            throw new IllegalArgumentException(\"handler == null\");\n        }\n        this.handler = handler;\n    }\n\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());\n        ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);\n        try {\n            // 处理请求对象\n            if (message instanceof Request) {\n                Request request = (Request) message;\n                if (request.isEvent()) {\n                    // 处理事件\n                    handlerEvent(channel, request);\n                } \n                // 处理普通的请求\n                else {\n                    // 双向通信\n                    if (request.isTwoWay()) {\n                        // 向后调用服务，并得到调用结果\n                        Response response = handleRequest(exchangeChannel, request);\n                        // 将调用结果返回给服务消费端\n                        channel.send(response);\n                    } \n                    // 如果是单向通信，仅向后调用指定服务即可，无需返回调用结果\n                    else {\n                        handler.received(exchangeChannel, request.getData());\n                    }\n                }\n            }      \n            // 处理响应对象，服务消费方会执行此处逻辑，后面分析\n            else if (message instanceof Response) {\n                handleResponse(channel, (Response) message);\n            } else if (message instanceof String) {\n                // telnet 相关，忽略\n            } else {\n                handler.received(exchangeChannel, message);\n            }\n        } finally {\n            HeaderExchangeChannel.removeChannelIfDisconnected(channel);\n        }\n    }\n\n    Response handleRequest(ExchangeChannel channel, Request req) throws RemotingException {\n        Response res = new Response(req.getId(), req.getVersion());\n        // 检测请求是否合法，不合法则返回状态码为 BAD_REQUEST 的响应\n        if (req.isBroken()) {\n            Object data = req.getData();\n\n            String msg;\n            if (data == null)\n                msg = null;\n            else if\n                (data instanceof Throwable) msg = StringUtils.toString((Throwable) data);\n            else\n                msg = data.toString();\n            res.setErrorMessage(\"Fail to decode request due to: \" + msg);\n            // 设置 BAD_REQUEST 状态\n            res.setStatus(Response.BAD_REQUEST);\n\n            return res;\n        }\n        \n        // 获取 data 字段值，也就是 RpcInvocation 对象\n        Object msg = req.getData();\n        try {\n            // 继续向下调用\n            Object result = handler.reply(channel, msg);\n            // 设置 OK 状态码\n            res.setStatus(Response.OK);\n            // 设置调用结果\n            res.setResult(result);\n        } catch (Throwable e) {\n            // 若调用过程出现异常，则设置 SERVICE_ERROR，表示服务端异常\n            res.setStatus(Response.SERVICE_ERROR);\n            res.setErrorMessage(StringUtils.toString(e));\n        }\n        return res;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsEntity Class in Java\nDESCRIPTION: This code snippet defines the MetricsEntity class, which represents a single metric with properties for name, tags, category, and value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MetricsEntity {\n    private String name;\n    private Map<String, String> tags;\n    private MetricsCategory category;\n    private Object value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol Dispatcher in YAML\nDESCRIPTION: Example YAML configuration for setting the Dubbo protocol dispatcher to 'all' in a Spring Boot application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n  protocol:\n    name: dubbo\n    port: -1\n    dispatcher: all\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Detailed Directory Loading Implementation\nDESCRIPTION: Detailed implementation of directory loading with support for multiple classloaders and resource loading strategies. Handles extension loading based on different strategy parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/5 自适应扩展对象的创建getAdaptiveExtension方法.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                               boolean extensionLoaderClassLoaderFirst, boolean overridden, String[] includedPackages,\n                               String[] excludedPackages, String[] onlyExtensionClassLoaderPackages) {\n        String fileName = dir + type;\n        try {\n            List<ClassLoader> classLoadersToLoad = new LinkedList<>();\n            if (extensionLoaderClassLoaderFirst) {\n                ClassLoader extensionLoaderClassLoader = ExtensionLoader.class.getClassLoader();\n                if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {\n                    classLoadersToLoad.add(extensionLoaderClassLoader);\n                }\n            }\n            Set<ClassLoader> classLoaders = scopeModel.getClassLoaders();\n            if (CollectionUtils.isEmpty(classLoaders)) {\n                Enumeration<java.net.URL> resources = ClassLoader.getSystemResources(fileName);\n                if (resources != null) {\n                    while (resources.hasMoreElements()) {\n                        loadResource(extensionClasses, null, resources.nextElement(), overridden, includedPackages, excludedPackages, onlyExtensionClassLoaderPackages);\n                    }\n                }\n            } else {\n                classLoadersToLoad.addAll(classLoaders);\n            }\n            Map<ClassLoader, Set<java.net.URL>> resources = ClassLoaderResourceLoader.loadResources(fileName, classLoadersToLoad);\n            resources.forEach(((classLoader, urls) -> {\n                loadFromClass(extensionClasses, overridden, urls, classLoader, includedPackages, excludedPackages, onlyExtensionClassLoaderPackages);\n            }));\n        } catch (Throwable t) {\n            logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", description file: \" + fileName + \").\", t);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Post-processing After ScopeModel Change in AbstractInterfaceConfig\nDESCRIPTION: This method updates various configuration objects with the new ApplicationModel after the ScopeModel has changed in AbstractInterfaceConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/2-serviceconfig-config.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n@Override\n    protected void postProcessAfterScopeModelChanged(ScopeModel oldScopeModel, ScopeModel newScopeModel) {\n        super.postProcessAfterScopeModelChanged(oldScopeModel, newScopeModel);\n        ApplicationModel applicationModel = ScopeModelUtil.getApplicationModel(scopeModel);\n        if (this.configCenter != null && this.configCenter.getScopeModel() != applicationModel) {\n            this.configCenter.setScopeModel(applicationModel);\n        }\n        if (this.metadataReportConfig != null && this.metadataReportConfig.getScopeModel() != applicationModel) {\n            this.metadataReportConfig.setScopeModel(applicationModel);\n        }\n        if (this.monitor != null && this.monitor.getScopeModel() != applicationModel) {\n            this.monitor.setScopeModel(applicationModel);\n        }\n        if (this.metadataReportConfig != null && this.metadataReportConfig.getScopeModel() != applicationModel) {\n            this.metadataReportConfig.setScopeModel(applicationModel);\n        }\n        if (CollectionUtils.isNotEmpty(this.registries)) {\n            this.registries.forEach(registryConfig -> {\n                if (registryConfig.getScopeModel() != applicationModel) {\n                    registryConfig.setScopeModel(applicationModel);\n                }\n            });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Service Definition Dependency with Maven XML\nDESCRIPTION: Maven XML configuration to import the Dubbo service interface dependency. This allows the consumer to reference and use the DemoService interface without having direct access to the implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/service-definition.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-demo-interface</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Handling Service Changes in RegistryDirectory\nDESCRIPTION: The notify method in RegistryDirectory receives notifications about service changes from the registry. It categorizes URLs and refreshes the Invoker list accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic synchronized void notify(List<URL> urls) {\n    List<URL> invokerUrls = new ArrayList<URL>();\n    List<URL> routerUrls = new ArrayList<URL>();\n    List<URL> configuratorUrls = new ArrayList<URL>();\n    for (URL url : urls) {\n        String protocol = url.getProtocol();\n        String category = url.getParameter(Constants.CATEGORY_KEY, Constants.DEFAULT_CATEGORY);\n        if (Constants.ROUTERS_CATEGORY.equals(category)\n                || Constants.ROUTE_PROTOCOL.equals(protocol)) {\n            routerUrls.add(url);\n        } else if (Constants.CONFIGURATORS_CATEGORY.equals(category)\n                || Constants.OVERRIDE_PROTOCOL.equals(protocol)) {\n            configuratorUrls.add(url);\n        } else if (Constants.PROVIDERS_CATEGORY.equals(category)) {\n            invokerUrls.add(url);\n        } else {\n            logger.warn(\"Unsupported category ...\");\n        }\n    }\n    if (configuratorUrls != null && !configuratorUrls.isEmpty()) {\n        this.configurators = toConfigurators(configuratorUrls);\n    }\n    if (routerUrls != null && !routerUrls.isEmpty()) {\n        List<Router> routers = toRouters(routerUrls);\n        if (routers != null) {\n            setRouters(routers);\n        }\n    }\n    List<Configurator> localConfigurators = this.configurators;\n    this.overrideDirectoryUrl = directoryUrl;\n    if (localConfigurators != null && !localConfigurators.isEmpty()) {\n        for (Configurator configurator : localConfigurators) {\n            this.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);\n        }\n    }\n\n    refreshInvoker(invokerUrls);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Structure for Dubbo RPC Benchmark Testing Console\nDESCRIPTION: This HTML snippet sets up the basic structure for the Dubbo RPC Benchmark Testing Console. It includes necessary meta tags, links to external JavaScript and CSS files, and a container div for the Vue.js application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/performance/page-benchmarking.md#2025-04-08_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html lang=\"\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <title>dubbo-benchmark</title>\n    <script defer=\"defer\" src=\"/js/chunk-vendors.js\"></script>\n    <script defer=\"defer\" src=\"/js/app.js\"></script>\n    <link href=\"/css/chunk-vendors.css\" rel=\"stylesheet\">\n    <link href=\"/css/app.css\" rel=\"stylesheet\">\n</head>\n<body>\n<noscript><strong>We're sorry but dubbo-benchmark doesn't work properly without JavaScript enabled. Please enable it to\n    continue.</strong></noscript>\n<div id=\"app\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Logging Generic Invocation Results in Dubbo-go\nDESCRIPTION: Log output showing the result of the generic invocation, displaying the returned User object as a map structure with fields like age, class, id, name, sex, and time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/generic.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nINFO    cmd/client.go:89        GetUser1(userId string) res: map[age:48 class:org.apache.dubbo.User id:A003 name:Joe sex:MAN time:2021-10-04 14:03:03.37 +0800 CST]\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Registration in Dubbo XML Configuration\nDESCRIPTION: These XML snippets show how to configure a Dubbo registry to disable service registration. This is useful for development scenarios where you want to subscribe to services but not register the service being developed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/subscribe-only.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090\" register=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090?register=false\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Registration in Dubbo XML Configuration\nDESCRIPTION: These XML snippets show how to configure a Dubbo registry to disable service registration. This is useful for development scenarios where you want to subscribe to services but not register the service being developed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/subscribe-only.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090\" register=\"false\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"10.20.153.10:9090?register=false\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty IO Threads for Dubbo REST\nDESCRIPTION: XML configuration that sets both worker thread pool size and Netty IO thread count for REST services in Dubbo. This allows fine-tuning of thread allocation for optimal performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" iothreads=\"5\" threads=\"100\"/>\n```\n\n----------------------------------------\n\nTITLE: Serializing Dubbo Request Data in Java\nDESCRIPTION: Serializes the data field of a Dubbo Request object, including method name, parameter types, arguments, and attachments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprotected void encodeRequestData(Channel channel, ObjectOutput out, Object data, String version) throws IOException {\n    RpcInvocation inv = (RpcInvocation) data;\n\n    // 依次序列化 dubbo version、path、version\n    out.writeUTF(version);\n    out.writeUTF(inv.getAttachment(Constants.PATH_KEY));\n    out.writeUTF(inv.getAttachment(Constants.VERSION_KEY));\n\n    // 序列化调用方法名\n    out.writeUTF(inv.getMethodName());\n    // 将参数类型转换为字符串，并进行序列化\n    out.writeUTF(ReflectUtils.getDesc(inv.getParameterTypes()));\n    Object[] args = inv.getArguments();\n    if (args != null)\n        for (int i = 0; i < args.length; i++) {\n            // 对运行时参数进行序列化\n            out.writeObject(encodeInvocationArgument(channel, inv, i));\n        }\n    \n    // 序列化 attachments\n    out.writeObject(inv.getAttachments());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat as REST Server in Dubbo\nDESCRIPTION: Configuring embedded Tomcat as the REST server implementation in Dubbo for higher performance scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tomcat\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentinel in Go\nDESCRIPTION: This code initializes the Sentinel flow control component with specified configuration path and log directory. It demonstrates the basic setup required before using Sentinel in a dubbo-go application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-sentinel.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\tsentinel \"github.com/alibaba/sentinel-golang/api\"\n)\n\nfunc initSentinel() {\n\terr := sentinel.InitWithLogDir(confPath, logDir)\n\tif err != nil {\n\t\t// 初始化 Sentinel 失败\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Timeout in Dubbo-go Client\nDESCRIPTION: This snippet shows how to create a new Dubbo-go client with a global timeout setting of 3 seconds using the client.WithClientRequestTimeout() method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/timeout.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    cli, err := client.NewClient(\n        client.WithClientURL(\"tri://127.0.0.1:20000\"),\n        client.WithClientRequestTimeout(3 * time.Second),\n    )\n```\n\n----------------------------------------\n\nTITLE: Generating Method Content for Adaptive Extension in Dubbo\nDESCRIPTION: Complex method that generates the implementation content for an adaptive method. It handles URL parameter checking, extension name resolution, and dynamically dispatching to the appropriate extension implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate String generateMethodContent(Method method) {\n    // 该方法上必须有 @Adaptive 注解修饰\n    Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\n    StringBuilder code = new StringBuilder(512);\n    if (adaptiveAnnotation == null) {\n        // 没有 @Adaptive 注解修饰，生成异常信息\n        return generateUnsupported(method);\n    } else {\n        // 获取 URL 在参数列表上的索引\n        int urlTypeIndex = getUrlTypeIndex(method);\n        \n        if (urlTypeIndex != -1) {\n            // 如果参数列表上存在 URL，生成对 URL 进行空检查\n            code.append(generateUrlNullCheck(urlTypeIndex));\n        } else {\n            // 如果参数列表不存在 URL 类型的参数，那么就看参数列表上参数对象中是否包含 getUrl 方法\n            // 有的话，生成 URL 空检查\n            code.append(generateUrlAssignmentIndirectly(method));\n        }\n        // 解析 Adaptive 注解上的 value 属性\n        String[] value = getMethodAdaptiveValue(adaptiveAnnotation);\n        // 如果参数列表上有 Invocation 类型的参数，生成空检查并获取 methodName.\n        boolean hasInvocation = hasInvocationArgument(method);\n        \n        code.append(generateInvocationArgumentNullCheck(method));\n        // 这段逻辑主要就是为了生成 extName(也就是扩展名)\n        // 分为多种情况：\n        // 1.defaultExtName 是否存在\n        // 2.参数中是否存在 invocation 类型参数\n        // 3.是否是为 protocol 生成代理\n        // 为什么要对 protocol 单独考虑了？因为 URL 中有获取 protocol 值的方法\n        code.append(generateExtNameAssignment(value, hasInvocation));\n        // check extName == null?\n        code.append(generateExtNameNullCheck(value));\n    \n        // 生成获取扩展(使用 ExtensionLoader.getExtension 方法)\n        code.append(generateExtensionAssignment());\n\n        // 生成返回语句\n        code.append(generateReturnAndInvocation(method));\n    }\n\n    return code.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Port RMI Configuration\nDESCRIPTION: XML configuration for multiple RMI protocols with different ports\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"rmi1\" name=\"rmi\" port=\"1099\" />\n<dubbo:protocol id=\"rmi2\" name=\"rmi\" port=\"2099\" />\n\n<dubbo:service interface=\"...\" protocol=\"rmi1\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Gson Serialization in XML\nDESCRIPTION: This snippet illustrates how to enable Gson serialization in Dubbo using XML configuration at different levels: protocol, consumer, or specific service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/gson.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"gson\" />\n\n        <!-- or -->\n<dubbo:consumer serialization=\"gson\" />\n\n        <!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"gson\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper in Standalone Mode\nDESCRIPTION: Command to start the Zookeeper server in standalone mode after configuration. This uses the zkServer.sh script from the bin directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/zkServer.sh start\n```\n\n----------------------------------------\n\nTITLE: Apache Dubbo Release Announcement Email Template\nDESCRIPTION: Template for announcing the official release of an Apache Dubbo version to the community, including release notes and support information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/common.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nProject: [Announce] Apache Dubbo 3.0.9 released\n\nHello Dubbo Community,\n\nI am glad to announce that Apache Dubbo 3.0.9 was released.\n\nYou can check detailed release notes here:\nhttps://github.com/apache/dubbo/releases/tag/dubbo-3.0.9\n\nIf you have any questions using this version, please send mail to here or\nreport the issue <https://github.com/apache/dubbo/issues> on Github.\n\nBest regards,\nDubbo Team\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Simplification with Spring Bean for Provider\nDESCRIPTION: Java configuration using Spring Bean to enable registry simplification for a Dubbo provider. This is equivalent to the properties file approach but uses Java code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// 等同于dubbo.properties配置，用@Bean形式进行配置\n@Bean\npublic RegistryConfig registryConfig() {\n    RegistryConfig registryConfig = new RegistryConfig();\n    registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n    registryConfig.setSimplified(true);\n    registryConfig.setExtraKeys(\"retries,owner\");\n    return registryConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Console\nDESCRIPTION: Location of the main configuration file for the Dubbo admin console.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/introduction.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndubbo-admin-server/src/main/resources/application.properties\n```\n\n----------------------------------------\n\nTITLE: Creating a Vite React TypeScript Project for Dubbo Web Example\nDESCRIPTION: Commands to create a new Vite project with React and TypeScript template for developing a Dubbo web application. This sets up the foundation for the frontend part of the example.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vite@latest -- dubbo-web-example --template react-ts\ncd dubbo-web-example\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Filters and Interceptors in Dubbo REST XML\nDESCRIPTION: This XML configuration snippet shows how to register custom filters and interceptors for a Dubbo REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_41\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.TraceInterceptor, xxx.TraceFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty as REST Server Implementation in Dubbo\nDESCRIPTION: XML configuration that selects Jetty as the embedded REST server implementation in Dubbo. Jetty is the default implementation and provides good integration with Dubbo monitoring systems.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"jetty\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty as REST Server Implementation in Dubbo\nDESCRIPTION: XML configuration that selects Jetty as the embedded REST server implementation in Dubbo. Jetty is the default implementation and provides good integration with Dubbo monitoring systems.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"jetty\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Check for Dubbo RPC Calls in Java\nDESCRIPTION: This code snippet shows how Dubbo implements timeout checks for RPC calls using a timer task. It creates a new DefaultFuture and sets up a TimeoutCheckTask that runs after the specified timeout period to handle timeouts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-heartbeat-design.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static DefaultFuture newFuture(Channel channel, Request request, int timeout) {\n    final DefaultFuture future = new DefaultFuture(channel, request, timeout);\n    // timeout check\n    timeoutCheck(future);\n    return future;\n}\nprivate static void timeoutCheck(DefaultFuture future) {\n    TimeoutCheckTask task = new TimeoutCheckTask(future);\n    TIME_OUT_TIMER.newTimeout(task, future.getTimeout(), TimeUnit.MILLISECONDS);\n}\nprivate static class TimeoutCheckTask implements TimerTask {\n    private DefaultFuture future;\n    TimeoutCheckTask(DefaultFuture future) {\n        this.future = future;\n    }\n    @Override\n    public void run(Timeout timeout) {\n        if (future == null || future.isDone()) {\n            return;\n        }\n        // create exception response.\n        Response timeoutResponse = new Response(future.getId());\n        // set timeout status.\n        timeoutResponse.setStatus(future.isSent() ? Response.SERVER_TIMEOUT : Response.CLIENT_TIMEOUT);\n        timeoutResponse.setErrorMessage(future.getTimeoutMessage(true));\n        // handle response.\n        DefaultFuture.received(future.getChannel(), timeoutResponse);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Listener in Dubbo Application using Spring BeanFactory\nDESCRIPTION: Java method to register metrics listeners in a Dubbo application. This implementation establishes a producer-consumer pattern between AggregateMetricsCollector and DefaultMetricsCollector, facilitating extension through a listener list.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerListener() {\n    applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class).addListener(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pipe-separated Multiple Registry Center Addresses in Dubbo (XML Configuration)\nDESCRIPTION: This snippet shows a simplified approach for connecting to multiple registry centers using a pipe (|) separator in the address attribute. This is useful for temporary testing environments where services need to connect to different registry centers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/multi-registry.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置，竖号分隔表示同时连接多个不同注册中心，同一注册中心的多个集群地址用逗号分隔 -->\n    <dubbo:registry address=\"10.20.141.150:9090|10.20.154.177:9010\" />\n    <!-- 引用服务 -->\n    <dubbo:reference id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Java Methods for Handling application/x-www-form-urlencoded in Triple Protocol\nDESCRIPTION: Two alternative Java implementations for receiving application/x-www-form-urlencoded data in Triple - one using individual parameters and one using a Map to collect all form fields.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    public ServerResponse greetUrlForm(String hello, String apache, long id){\n        System.out.println(\"Hello:\" + hello);\n        System.out.println(\"Apache:\" + apache);\n        System.out.println(\"Id:\" + id);\n        return new ServerResponse(\"Server Received url form\");\n    }\n```\n\nLANGUAGE: java\nCODE:\n```\n    public ServerResponse greetUrlForm(Map<String, Object> params){\n        System.out.println(\"Hello:\" + params.get(\"Hello\"));\n        System.out.println(\"Apache:\" + params.get(\"Apache\"));\n        System.out.println(\"Id:\" + params.get(\"Id\"));\n        return new ServerResponse(\"Server Received url form\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing ReferenceConfigCache Key Generation in Dubbo Java\nDESCRIPTION: Demonstrates how to customize the caching strategy by providing a custom KeyGenerator when obtaining the cache instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/reference-config-cache.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nKeyGenerator keyGenerator = new ...\nReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator );\n```\n\n----------------------------------------\n\nTITLE: Configuring Configuration Center in Dubbo 2.7\nDESCRIPTION: XML configuration to set up a Zookeeper-based configuration center in Dubbo 2.7, which provides centralized management for external configurations and service governance rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:config-center address=\"zookeeper://127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Building Istio components with docker-builder\nDESCRIPTION: Uses the docker-builder tool to compile istioctl and build the dubbo-pilot image, pushing it to a private Docker registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-builder --targets istioctl\n\ntools/docker-builder/docker-builder --targets pilot --hub docker.io/bobtthp --push\n```\n\n----------------------------------------\n\nTITLE: Converting User Struct to Map for Dubbo-Go Generic Call\nDESCRIPTION: This example shows how the User struct is automatically converted to a map format when using the Map generic method in Dubbo-Go.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nusermap := map[interface{}]interface{} {\n    \"iD\": \t \"1\",\n    \"name\":  \"zhangsan\",\n    \"age\": \t 20,\n    \"class\": \"org.apache.dubbo.sample.User\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Rust Dependencies in Cargo.toml\nDESCRIPTION: This snippet demonstrates how to add the necessary Dubbo Rust dependencies to a Cargo.toml file. It includes runtime dependencies (dubbo, dubbo-config) and build dependencies (dubbo-build) needed for IDL compilation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/rust/first-release.md#2025-04-08_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# ./Cargo.toml\n[package]\nname = \"example-greeter\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\ndubbo = \"0.1.0\"\ndubbo-config = \"0.1.0\"\n\n[build-dependencies]\ndubbo-build = \"0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: 配置消费端不检查依赖服务\nDESCRIPTION: 使用 @DubboReference 注解配置消费端不检查依赖服务是否可用。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@DubboReference(check = false)\nprivate DemoService demoService;\n```\n\n----------------------------------------\n\nTITLE: Consuming Service with Annotations in Simplified Registry\nDESCRIPTION: Java code example showing how to consume a Dubbo service using annotations with registry simplification enabled. Only the default consumer keys will be sent to the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Component(\"annotationAction\")\npublic class AnnotationAction {\n\n    @Reference(version = \"1.1.8\", group = \"d-test\", owner = \"vvvanno\", retries = 4, actives = 6, timeout = 4500)\n    private AnnotationService annotationService;\n    public String doSayHello(String name) {\n        return annotationService.sayHello(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 配置Apollo作为配置中心\nDESCRIPTION: 通过XML方式配置Apollo作为Dubbo的配置中心，指定协议和地址。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center protocol=\"apollo\" address=\"127.0.0.1:2181\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Communication Models in Protocol Buffers IDL\nDESCRIPTION: A Protocol Buffers service definition that includes all four communication models: Unary, Client streaming, Server streaming, and Bidirectional streaming. This IDL defines the contract between clients and servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/streaming.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// ./proto/greeter.proto\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\n\npackage org.apache.dubbo.sample.tri;\n\n\n// The request message containing the user's name.\nmessage GreeterRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage GreeterReply {\n  string message = 1;\n}\n\nservice Greeter{\n\n  // unary\n  rpc greet(GreeterRequest) returns (GreeterReply);\n\n  // clientStream\n  rpc greetClientStream(stream GreeterRequest) returns (GreeterReply);\n\n  // serverStream\n  rpc greetServerStream(GreeterRequest) returns (stream GreeterReply);\n\n  // bi streaming\n  rpc greetStream(stream GreeterRequest) returns (stream GreeterReply);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Triple with HTTP/3 Protocol using curl\nDESCRIPTION: curl command to test the Triple protocol with HTTP/3 support, showing the QUIC protocol negotiation and successful HTTP/3 communication. Note that this requires a curl version with HTTP/3 support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl --http3 -vk 'https://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world'\n# 输出如下\n#* QUIC cipher selection: TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_CCM_SHA256\n#* Skipped certificate verification\n#* using HTTP/3\n#* [HTTP/3] [0] OPENED stream for https://localhost:50052/org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world\n#* [HTTP/3] [0] [:method: GET]\n#* [HTTP/3] [0] [:scheme: https]\n#* [HTTP/3] [0] [:authority: localhost:50052]\n#* [HTTP/3] [0] [:path: /org.apache.dubbo.demo.GreeterService/sayHelloAsync?request=world]\n#>\n#* Request completely sent off\n#< HTTP/3 200\n#< content-type: application/json\n#<\n#\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Direct Connection Configuration\nDESCRIPTION: XML configuration for direct connection to a Hessian service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"helloService\" interface=\"HelloWorld\" url=\"hessian://10.20.153.10:8080/helloWorld\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Admin Console\nDESCRIPTION: Command to start the Dubbo Admin Server using Maven and Spring Boot.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/admin-console.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmvn --projects dubbo-admin-server spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for REST Support\nDESCRIPTION: Log4j XML configuration for enabling INFO level logging for Dubbo REST support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<logger name=\"org.apache.dubbo.rpc.protocol.rest.support\">\n    <level value=\"INFO\"/>\n    <appender-ref ref=\"CONSOLE\"/>\n</logger>\n```\n\n----------------------------------------\n\nTITLE: Setting Thread-Level Routing Address for Dubbo Calls in Java\nDESCRIPTION: This code shows the most flexible way to route Dubbo calls by specifying the target address at the thread level. It allows dynamic routing decisions at runtime without changing method annotations or configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/zhengcaiyun.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nAddressZoneSpecify.setAddress(Enviroment.SHANGHAI);\ndemoService.play();\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Simplification with dubbo.properties\nDESCRIPTION: Properties file configuration that enables registry simplification. It turns on simplification and specifies which additional keys should be included in the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.simplified=true\ndubbo.registry.extra-keys=retries,owner\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Metadata JSON Structure\nDESCRIPTION: This JSON snippet illustrates the structure of metadata for a Dubbo service. It includes service parameters, canonical name, code source, methods with their details, and types used in the service. This structure is likely what gets serialized and stored in the metadata center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parameters\": {\n    \"side\": \"provider\",\n    \"interface\": \"link.elastic.dubbo.entity.DemoService\",\n    \"pid\": \"41457\",\n    \"application\": \"dubbo-demo-api-provider\",\n    \"dubbo\": \"2.0.2\",\n    \"release\": \"3.0.8\",\n    \"anyhost\": \"true\",\n    \"bind.ip\": \"192.168.1.9\",\n    \"methods\": \"sayHello,sayHelloAsync\",\n    \"background\": \"false\",\n    \"deprecated\": \"false\",\n    \"dynamic\": \"true\",\n    \"service-name-mapping\": \"true\",\n    \"generic\": \"false\",\n    \"bind.port\": \"20880\",\n    \"timestamp\": \"1653100253548\"\n  },\n  \"canonicalName\": \"link.elastic.dubbo.entity.DemoService\",\n  \"codeSource\": \"file:/Users/song/Desktop/Computer/A/code/gitee/weaving-a-net/weaving-test/dubbo-test/target/classes/\",\n  \"methods\": [\n    {\n      \"name\": \"sayHelloAsync\",\n      \"parameterTypes\": [\n        \"java.lang.String\"\n      ],\n      \"returnType\": \"java.util.concurrent.CompletableFuture\",\n      \"annotations\": [\n        \n      ]\n    },\n    {\n      \"name\": \"sayHello\",\n      \"parameterTypes\": [\n        \"java.lang.String\"\n      ],\n      \"returnType\": \"java.lang.String\",\n      \"annotations\": [\n        \n      ]\n    }\n  ],\n  \"types\": [\n    {\n      \"type\": \"java.util.concurrent.CompletableFuture\",\n      \"properties\": {\n        \"result\": \"java.lang.Object\",\n        \"stack\": \"java.util.concurrent.CompletableFuture.Completion\"\n      }\n    },\n    {\n      \"type\": \"java.lang.Object\"\n    },\n    {\n      \"type\": \"java.lang.String\"\n    },\n    {\n      \"type\": \"java.util.concurrent.CompletableFuture.Completion\",\n      \"properties\": {\n        \"next\": \"java.util.concurrent.CompletableFuture.Completion\",\n        \"status\": \"int\"\n      }\n    },\n    {\n      \"type\": \"int\"\n    }\n  ],\n  \"annotations\": [\n    \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Cache Pool in Dubbo-Istio Integration\nDESCRIPTION: Creates a concurrent hash map to store cached resources from Istio, where the key represents a single resource and T is the return result of different Discovery Services (DS).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/Dubbo-proxyless.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprotected Map<String, T> resourcesMap = new ConcurrentHashMap<>();\n```\n\n----------------------------------------\n\nTITLE: 通过properties文件配置启动检查\nDESCRIPTION: 使用dubbo.properties文件配置不同级别的启动检查设置。可以针对特定服务、所有引用、消费者或注册中心进行配置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/preflight-check.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.reference.com.foo.BarService.check=false\ndubbo.reference.check=false\ndubbo.consumer.check=false\ndubbo.registry.check=false\n```\n\n----------------------------------------\n\nTITLE: JAX-RS Path Annotations Example in Java\nDESCRIPTION: Demonstrates using JAX-RS @Path annotations to define REST service paths in a Dubbo REST service implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Mapping in Application-Level Discovery\nDESCRIPTION: This snippet shows how to check the service mapping information for application-level discovery using the Zookeeper command line with the path `/dubbo/mapping/${interfaceName}`. The result returns the application name mapped to the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 6] get /dubbo/mapping/org.apache.dubbo.samples.api.GreetingsService\nfirst-dubbo-provider\n```\n\n----------------------------------------\n\nTITLE: Setting Callback for ResponseFuture in Java\nDESCRIPTION: Shows how to set a callback for Dubbo's built-in ResponseFuture in version 2.6.x.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// this call will return null immediately\nfooService.findFoo(fooId);\n// get Dubbo's built-in ResponseFuture, and set the callback\nResponseFuture future = ((FutureAdapter)RpcContext.getContext().getFuture()).getFuture();\nfuture.setCallback(new ResponseCallback() {\n    @Override\n    public void done(Object response) {\n        System.out.print(response);\n    }\n\n    @Override\n    public void caught(Throwable exception) {\n        exception.printStackTrace();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Service Interface in Java\nDESCRIPTION: Defines the CallbackService interface with a method to add a listener.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback;\n\npublic interface CallbackService {\n    void addListener(String key, CallbackListener listener);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry for Dubbo Servers in Go\nDESCRIPTION: Demonstrates how to configure servers to register their services to specific registry centers. The first server registers to Zookeeper while the second server registers to Nacos.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 指定 server 下的服务注册到 zookeeper 注册中心\nsrv, _ := ins.NewServer(server.WithServerRegistryIDs([]string{\"zookeeper\"}))\n\n// 指定 server 下的服务注册到 nacos 注册中心\nsrv2, _ := ins.NewServer(server.WithServerRegistryIDs([]string{\"nacos\"}))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Provider Service with Timeout Handling\nDESCRIPTION: Example Dubbo provider service with a 1000ms timeout setting that demonstrates how thread interruption works when operations take longer than the timeout period.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/provider-timeout-release.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// 设置provider执行超时时间为1000ms\n@Service(interfaceClass = TestService.class,timeout = 1000)\npublic class TestServiceImpl implements TestService {\n    @Override\n    public Integer sum(int a, int b) {\n        CountDownLatch latch = new CountDownLatch(2);\n        AtomicInteger i = new AtomicInteger();\n\n        new Thread(()->{\n            i.incrementAndGet();\n            latch.countDown();\n        }).start();\n\n        new Thread(()->{\n            try {\n                TimeUnit.MILLISECONDS.sleep(2000); \n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n            i.incrementAndGet();\n            latch.countDown();\n        }).start();\n\n        try {\n            latch.await();\n            return i.get();\n        }catch (InterruptedException e){\n            // 业务执行超时，并且被打断，走入此逻辑\n            throw new RuntimeException(\"call sum timeout\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Dubbo Instances with Multiple Environment Variables YAML\nDESCRIPTION: This YAML configuration demonstrates how to tag Dubbo instances using multiple environment variables, allowing for more flexible and dynamic tagging in container deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: detail\n    image: apache/demo-detail:latest\n    env:\n    - name: DUBBO_ENV_KEYS\n      value: \"REGION, ENV\"\n    - name: REGION\n      value: \"hangzhou\"\n    - name: ENV\n      value: \"gray\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Java Thread Dump for Shutdown Error Analysis\nDESCRIPTION: Command to capture a thread dump of a Java process, saving the output to a log file for analyzing server shutdown errors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/4/8.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Protocol in Dubbo XML\nDESCRIPTION: Defines the HTTP protocol configuration for Dubbo, specifying the protocol name and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/http.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"http\" port=\"8080\" />\n```\n\n----------------------------------------\n\nTITLE: Tomcat Server Await Implementation\nDESCRIPTION: Core implementation of Tomcat's await mechanism that keeps the server running by periodically checking a stop flag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/spring-boot-dubbo-start-stop-analysis.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void await() {\n        // ...\n        if( port==-1 ) {\n            try {\n                awaitThread = Thread.currentThread();\n                while(!stopAwait) {\n                    try {\n                        Thread.sleep( 10000 );\n                    } catch( InterruptedException ex ) {\n                        // continue and check the flag\n                    }\n                }\n            } finally {\n                awaitThread = null;\n            }\n            return;\n        }\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Router Dependencies in Go\nDESCRIPTION: Import statements needed to use routing rules in dubbo-go. This includes both the router implementations and the config center implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"github.com/apache/dubbo-go/common\"\n\t\"github.com/apache/dubbo-go/protocol\"\n\t\n\t_ \"github.com/apache/dubbo-go/config_center/zookeeper\"\n\t_ \"github.com/apache/dubbo-go/cluster/router/condition\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Release Candidate Validation\nDESCRIPTION: Maven commands to run all unit tests and optionally enable RAT and checkstyle plugins to verify code quality and license compliance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test # This will run all unit tests\n# you can also open rat and style plugin to check if every file meets requirements.\nmvn clean test -Drat.skip=false -Dcheckstyle.skip=false\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Release Candidate Validation\nDESCRIPTION: Maven commands to run all unit tests and optionally enable RAT and checkstyle plugins to verify code quality and license compliance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean test # This will run all unit tests\n# you can also open rat and style plugin to check if every file meets requirements.\nmvn clean test -Drat.skip=false -Dcheckstyle.skip=false\n```\n\n----------------------------------------\n\nTITLE: Adding @GlobalTransactional Annotation with Seata for Distributed Transaction\nDESCRIPTION: Example of implementing distributed transaction control using Seata's @GlobalTransactional annotation on the business initiator method. This single annotation orchestrates the entire distributed transaction.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-fescar.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    @GlobalTransactional\n    public void purchase(String userId, String commodityCode, int orderCount) {\n        ......\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Console Properties\nDESCRIPTION: Configuration settings for the Dubbo Admin Console, including registry, configuration center, and metadata report addresses using ZooKeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/admin-console.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n配置文件为：\ndubbo-admin-server/src/main/resources/application.properties\n主要的配置有：\nadmin.registry.address=zookeeper://127.0.0.1:2181\nadmin.config-center=zookeeper://127.0.0.1:2181\nadmin.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Adjusting Provider Weight in Dubbo\nDESCRIPTION: YAML configuration that adjusts the weight parameter for a specific provider instance. This is typically used for capacity evaluation, with the default weight being 200.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-rule.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: application\nkey: demo-provider\nenabled: true\nconfigs:\n- addresses: [\"10.20.153.10:20880\"]\n  side: provider\n  parameters:\n    weight: 200\n...\n```\n\n----------------------------------------\n\nTITLE: Installing dubbogo-cli in Go\nDESCRIPTION: Command to install dubbogo-cli tool to $GOPATH/bin directory\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/dubbogo/dubbogo-cli@latest\n```\n\n----------------------------------------\n\nTITLE: JAX-RS Client Implementation Example\nDESCRIPTION: Example of using JAX-RS Client API to consume REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nUser user = new User();\nuser.setName(\"Larry\");\n\nClient client = ClientBuilder.newClient();\nWebTarget target = client.target(\"http://localhost:8080/services/users/register.json\");\nResponse response = target.request().post(Entity.entity(user, MediaType.APPLICATION_JSON_TYPE));\n\ntry {\n    if (response.getStatus() != 200) {\n        throw new RuntimeException(\"Failed with HTTP error code : \" + response.getStatus());\n    }\n    System.out.println(\"The generated id is \" + response.readEntity(RegistrationResult.class).getId());\n} finally {\n    response.close();\n    client.close(); // 在真正开发中不要每次关闭client，比如HTTP长连接是由client持有的\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Consumer Registration in Nacos\nDESCRIPTION: Configures Dubbo to register consumer URLs in the Nacos registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    register-mode: instance\n    address: nacos://localhost:8848?register-consumer-url=true\n```\n\n----------------------------------------\n\nTITLE: Dubbo Community Voting Email Template\nDESCRIPTION: Email template for initiating a community vote to release a new Apache Dubbo version. It includes links to release candidates, staging repository, git tag, and release notes, and requests community members to vote with their approval or disapproval.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nHello Dubbo Community,\n\nThis is a call for vote to release Apache Dubbo version 2.7.2.\n\nThe release candidates:\nhttps://dist.apache.org/repos/dist/dev/dubbo/2.7.2/\n\nThe staging repo:\nhttps://repository.apache.org/content/repositories/orgapachedubbo-1005\n\nGit tag for the release:\nhttps://github.com/apache/dubbo/tree/dubbo-2.7.2\n\nHash for the release tag:\nafab04c53edab38d52275d2a198ea1aff7a4f41e\n\nRelease Notes:\nhttps://github.com/apache/dubbo/releases/tag/untagged-4775c0a22c60fca55118\n\nThe artifacts have been signed with Key : 28681CB1, which can be found in the keys file:\nhttps://dist.apache.org/repos/dist/dev/dubbo/KEYS\n\nThe vote will be open for at least 72 hours or until necessary number of votes are reached.\n\nPlease vote accordingly:\n\n[ ] +1 approve \n[ ] +0 no opinion \n[ ] -1 disapprove with the reason\n\nThanks,\nThe Apache Dubbo Team\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Triple Rest Service with curl\nDESCRIPTION: Command to test a basic REST service using curl, showing how to call a method with GET parameters and the expected response output.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world\"\n# 输出如下\n#> GET /org.apache.dubbo.rest.demo.DemoService/hello?name=world HTTP/1.1\n#> Host: 127.0.0.1:8081\n#> User-Agent: curl/8.7.1\n#> Accept: */*\n#>\n#* Request completely sent off\n#< HTTP/1.1 200 OK\n#< content-type: application/json\n#< alt-svc: h2=\":8081\"\n#< content-length: 13\n#<\n#\"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Tagging Dubbo Instances with Multiple Environment Variables YAML\nDESCRIPTION: This YAML configuration demonstrates how to tag Dubbo instances using multiple environment variables, allowing for more flexible and dynamic tagging in container deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: detail\n    image: apache/demo-detail:latest\n    env:\n    - name: DUBBO_ENV_KEYS\n      value: \"REGION, ENV\"\n    - name: REGION\n      value: \"hangzhou\"\n    - name: ENV\n      value: \"gray\"\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Triple Protocol with Protobuf Support\nDESCRIPTION: Maven dependencies required for Triple protocol with Protobuf wrapper serialization support. Includes protobuf-java for core functionality and protobuf-java-util for protobuf-json format support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/triple/wrapper.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n\t<dependency>\n\t\t<groupId>com.google.protobuf</groupId>\n\t\t<artifactId>protobuf-java</artifactId>\n\t\t<version>3.19.6</version>\n\t</dependency>\n\t<!-- 提供 protobuf-json 格式请求支持 -->>\n\t<dependency>\n\t\t<groupId>com.google.protobuf</groupId>\n\t\t<artifactId>protobuf-java-util</artifactId>\n\t\t<version>3.19.6</version>\n\t</dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Content Cards with Hugo Template\nDESCRIPTION: This Hugo template generates a responsive grid of cards based on structured content data. It iterates over content items, creating cards with headings and lists of links. The template uses Hugo's templating syntax to access and render page parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/layouts/shortcodes/docs/document_box.md#2025-04-08_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ with .Page.Params.content -}}\n<div class=\"row\">\n{{ range $list_entry := . }}\n{{ range $heading, $items := $list_entry }}\n\n{{ range $items }}\n<div class=\"col-sm col-md-6 mb-4\">\n  <div class=\"h-100 card shadow\" href=\"#\">\n    <div class=\"card-body\">\n  {{ $item := . }}\n  {{ $name := $item.name }}\n  {{ $links := $item.links }}\n  <h4 class=\"card-title\">\n    {{ $item.name | $.Page.RenderString }}\n  </h4>\n    <ul>{{ range $links }}{{ $link := . }}<li>{{ $link | $.Page.RenderString }}</li>{{ end }}</ul>\n    </div>\n  </div>\n</div>\n{{ end }}\n{{ end }}\n{{ end }}\n</div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: 使用Properties配置Spring Annotation方式的Dubbo服务\nDESCRIPTION: 展示了Spring Annotation方式配置Dubbo时需要的属性文件配置，包括应用名称、注册中心和协议等。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n  ## dubbo.properties\n  \n  dubbo.application.name=annotation-provider\n  dubbo.registry.address=zookeeper://127.0.0.1:2181\n  dubbo.protocol.name=dubbo\n  dubbo.protocol.port=20880\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Stub with Spring XML in Dubbo\nDESCRIPTION: XML configuration showing how to enable local stubs for a Dubbo consumer. Two approaches are shown: setting stub=\"true\" which uses a default implementation name, or explicitly specifying the stub class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-stub.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"true\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer interface=\"com.foo.BarService\" stub=\"com.foo.BarServiceStub\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Static Variable Usage in Java\nDESCRIPTION: This snippet shows how static variables in Java can be used to bind behaviors holding object references to classes, which is a common practice in design patterns like Singleton and Factory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/multi-instance.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n    public static Object obj;\n}\nTest.obj = xxx;\n```\n\n----------------------------------------\n\nTITLE: Port forwarding for remote debugging\nDESCRIPTION: Command to set up port forwarding from the local machine to the Delve debugger running in the Kubernetes pod. This enables remote debugging tools to connect to the running service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  port-forward -n istio-system istiod-fd5d9f77-2ncjq 8015:8015\n```\n\n----------------------------------------\n\nTITLE: Updating Dubbo Core Dependency Version to 3.3.0\nDESCRIPTION: Updates the main Dubbo dependency artifact to version 3.3.0. This is the primary dependency change required for upgrading to Dubbo 3.3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a gRPC Service with Protobuf in Dubbo-go\nDESCRIPTION: This snippet shows how to define a gRPC service using Protocol Buffers (protobuf) for use with the triple protocol in Dubbo-go. It defines a GreetService with request and response messages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\npackage greet;\noption go_package = \"github.com/apache/dubbo-go-samples/helloworld/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting injvm Priority for Consumer and Provider\nDESCRIPTION: XML configuration to prioritize injvm protocol for consumers and providers\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer injvm=\"true\" .../>\n<dubbo:provider injvm=\"true\" .../>\n```\n\n----------------------------------------\n\nTITLE: Calculating noLoadLatency in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the no-load latency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/8c700211f5c7a13403e3088df9cd9f43.svg)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Provider and Consumer\nDESCRIPTION: Commands for building Docker images for XDS provider and consumer\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/mesh/mesh.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ncd ./dubbo-samples-xds-provider/\ndocker build -t apache/dubbo-demo:dubbo-samples-xds-provider_0.0.1 .\ncd ../dubbo-samples-xds-consumer/\ndocker build -t apache/dubbo-demo:dubbo-samples-xds-consumer_0.0.1 .\ncd ../\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Registry with Backup Servers\nDESCRIPTION: Configuration example showing how to specify a primary Redis server with backup servers using the backup parameter in the address URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/consul.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Defining FileRouterFactory Interface in Go\nDESCRIPTION: Interface definition for RouterFactory in dubbo-go which creates factory for parsing configuration files to generate router rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// RouterFactory router creates factory use for parse config file\ntype FileRouterFactory interface {\n\t// NewFileRouter create file router with config file\n\tNewFileRouter([]byte) (Router, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Signing Apache Releases\nDESCRIPTION: Interactive GPG command to generate a new key pair for signing Apache releases. The process guides through selecting encryption type, key size, expiration, and user identity information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --full-gen-key\ngpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     <n>  = key expires in n days\n     <n>w = key expires in n weeks\n     <n>m = key expires in n months\n     <n>y = key expires in n years\nKey is valid for? (0) \nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Robert Burrell Donkin\nEmail address: rdonkin@apache.org\nComment: CODE SIGNING KEY\nYou selected this USER-ID:\n   \"Robert Burrell Donkin (CODE SIGNING KEY) <rdonkin@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key. # 填入密码，以后打包过程中会经常用到\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Signing Apache Releases\nDESCRIPTION: Interactive GPG command to generate a new key pair for signing Apache releases. The process guides through selecting encryption type, key size, expiration, and user identity information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --full-gen-key\ngpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     <n>  = key expires in n days\n     <n>w = key expires in n weeks\n     <n>m = key expires in n months\n     <n>y = key expires in n years\nKey is valid for? (0) \nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Robert Burrell Donkin\nEmail address: rdonkin@apache.org\nComment: CODE SIGNING KEY\nYou selected this USER-ID:\n   \"Robert Burrell Donkin (CODE SIGNING KEY) <rdonkin@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key. # 填入密码，以后打包过程中会经常用到\n```\n\n----------------------------------------\n\nTITLE: Implementation of HystrixCommandAspect\nDESCRIPTION: Java code showing the implementation of HystrixCommandAspect which uses Spring AOP to intercept methods with @HystrixCommand and @HystrixCollapser annotations and wrap them with Hystrix functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Aspect\npublic class HystrixCommandAspect {\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)\")\n    public void hystrixCommandAnnotationPointcut() {\n    }\n    @Pointcut(\"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)\")\n    public void hystrixCollapserAnnotationPointcut() {\n    }\n\n    @Around(\"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()\")\n    public Object methodsAnnotatedWithHystrixCommand(final ProceedingJoinPoint joinPoint) throws Throwable {\n        Method method = getMethodFromTarget(joinPoint);\n        Validate.notNull(method, \"failed to get method from joinPoint: %s\", joinPoint);\n        if (method.isAnnotationPresent(HystrixCommand.class) && method.isAnnotationPresent(HystrixCollapser.class)) {\n            throw new IllegalStateException(\"method cannot be annotated with HystrixCommand and HystrixCollapser \" +\n                    \"annotations at the same time\");\n        }\n        MetaHolderFactory metaHolderFactory = META_HOLDER_FACTORY_MAP.get(HystrixPointcutType.of(method));\n        MetaHolder metaHolder = metaHolderFactory.create(joinPoint);\n        HystrixInvokable invokable = HystrixCommandFactory.getInstance().create(metaHolder);\n        ExecutionType executionType = metaHolder.isCollapserAnnotationPresent() ?\n                metaHolder.getCollapserExecutionType() : metaHolder.getExecutionType();\n\n        Object result;\n        try {\n            if (!metaHolder.isObservable()) {\n                result = CommandExecutor.execute(invokable, executionType, metaHolder);\n            } else {\n                result = executeObservable(invokable, executionType, metaHolder);\n            }\n        } catch (HystrixBadRequestException e) {\n            throw e.getCause() != null ? e.getCause() : e;\n        } catch (HystrixRuntimeException e) {\n            throw hystrixRuntimeExceptionToThrowable(metaHolder, e);\n        }\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing Configuration in Istio Virtual Service\nDESCRIPTION: This YAML snippet shows the configuration of a virtual service in Istio, defining routing rules for the reviews service based on the 'end-user' header, routing traffic from user 'jason' to v2 and all other traffic to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Method Invocation with Wrapper Class in Java\nDESCRIPTION: Generated Wrapper class implementation that handles method invocation through Javassist. It demonstrates how Dubbo dynamically creates proxy classes to invoke service methods at runtime.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic class Wrapper0 extends Wrapper implements ClassGenerator.DC {\n    public static String[] pns;\n    public static Map pts;\n    public static String[] mns;\n    public static String[] dmns;\n    public static Class[] mts0;\n\n    public Object invokeMethod(Object object, String string, Class[] arrclass, Object[] arrobject) throws InvocationTargetException {\n        DemoService demoService;\n        try {\n            demoService = (DemoService)object;\n        }\n        catch (Throwable throwable) {\n            throw new IllegalArgumentException(throwable);\n        }\n        try {\n            if (\"sayHello\".equals(string) && arrclass.length == 1) {\n                return demoService.sayHello((String)arrobject[0]);\n            }\n        }\n        catch (Throwable throwable) {\n            throw new InvocationTargetException(throwable);\n        }\n        throw new NoSuchMethodException(new StringBuffer().append(\"Not found method \\\"\").append(string).append(\"\\\" in class com.alibaba.dubbo.demo.DemoService.\").toString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Registry with Protocol and Address\nDESCRIPTION: Alternative configuration approach that explicitly specifies the protocol attribute as 'redis' and the address separately.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/others/consul.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Installing GPG on macOS\nDESCRIPTION: Command to install GPG (GNU Privacy Guard) on macOS using Homebrew and verify its version, which should be 2.x for compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew install gpg\n$ gpg --version #检查版本，应该为2.x\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Format in Dubbo Protocol\nDESCRIPTION: Example of an HTTP response format showing a successful response with content type and length headers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\nContent-Type: text/html\nContent-Length: 4\nDate: Fri, 28 Apr 2023 14:16:42 GMT\n\n\"success\"\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Request Handler in Java\nDESCRIPTION: Handles HTTP servlet requests by converting them to RPC invocations and processing the results. Manages request/response lifecycle and error handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate class RestHandler implements HttpHandler<HttpServletRequest, HttpServletResponse> {\n    @Override\n    public void handle(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws IOException, ServletException {\n        RequestFacade request = RequestFacadeFactory.createRequestFacade(servletRequest);\n        RpcContext.getServiceContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());\n        Pair<RpcInvocation, Invoker> build = null;\n        try {\n            build = RPCInvocationBuilder.build(request, servletRequest, servletResponse);\n        } catch (PathNoFoundException e) {\n            servletResponse.setStatus(404);\n        }\n        Invoker invoker = build.getSecond();\n        Result invoke = invoker.invoke(build.getFirst());\n        if (invoke.hasException()) {\n            servletResponse.setStatus(500);\n        } else {\n            try {\n                Object value = invoke.getValue();\n                String accept = request.getHeader(RestConstant.ACCEPT);\n                MediaType mediaType = MediaTypeUtil.convertMediaType(accept);\n                HttpMessageCodecManager.httpMessageEncode(servletResponse.getOutputStream(), value, invoker.getUrl(), mediaType);\n                servletResponse.setStatus(200);\n            } catch (Exception e) {\n                servletResponse.setStatus(500);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Method to Use Wrapper Return Type in Java\nDESCRIPTION: Updates the service method signature to use the wrapper class instead of primitive type for proper XML serialization in REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nRegistrationResult registerUser(User user);\n```\n\n----------------------------------------\n\nTITLE: 使用API方式配置Dubbo服务\nDESCRIPTION: 展示了如何使用纯Java API方式配置和暴露Dubbo服务，适合不使用Spring框架的场景。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/configuration-load-process.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws IOException {\n    ServiceConfig<GreetingsService> service = new ServiceConfig<>();\n    service.setApplication(new ApplicationConfig(\"first-dubbo-provider\"));\n    service.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n    service.setInterface(GreetingsService.class);\n    service.setRef(new GreetingsServiceImpl());\n    service.export();\n    System.out.println(\"first-dubbo-provider is running.\");\n    System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Dubbo Triple Client\nDESCRIPTION: Command to compile and run a Dubbo Triple client that will call the standard gRPC server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/grpc.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn compile exec:java -Dexec.mainClass=\"org.apache.dubbo.samples.tri.grpc.interop.client.TriOpClient\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Information Notice in Markdown\nDESCRIPTION: This code snippet uses a shortcode to display a notice informing users that the current document is no longer maintained. It provides a link to the latest version of the documentation for up-to-date information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{{% pageinfo %}} 此文档已经不再维护。您当前查看的是快照版本。如果想要查看最新版本的文档，请参阅[最新版本](/zh-cn/overview/mannual/golang-sdk/)。\n{{{% /pageinfo %}}\n```\n\n----------------------------------------\n\nTITLE: Creating Nacos Registry Instance\nDESCRIPTION: Shows how to create a Nacos registry instance using a URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Create registry instance through Url\nlet nacos_url = Url::from_url(\"127.0.0.1:1221\").unwrap();\nlet registry = NacosRegistry::new(nacos_url);\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Repository\nDESCRIPTION: Adds and updates the Dubbo Helm repository\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add dubbo https://dubbo.apache.org/charts\n$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: Adding Delve to Pilot Dockerfile\nDESCRIPTION: Dockerfile modification to include the Delve debugger in the pilot image. This addition enables remote debugging capabilities for the container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCOPY ${TARGETARCH:-amd64}/dlv /usr/local/bin/dlv\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Field Names with Jackson Annotations in Java\nDESCRIPTION: Demonstrates how to customize the JSON field names in serialized output using Jackson annotations on Java class properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class User implements Serializable {\n    \n    @JsonProperty(\"username\")\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: Module Extension Initialization Implementation in Dubbo\nDESCRIPTION: Implementation of the initModuleExt method that loads and initializes all supported ModuleExt extensions. Currently, only the ModuleEnvironment extension type is supported.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nprivate void initModuleExt() {\n//目前这里的扩展只支持有一个类型ModuleEnvironment\n        Set<ModuleExt> exts = this.getExtensionLoader(ModuleExt.class).getSupportedExtensionInstances();\n        for (ModuleExt ext : exts) {\n            ext.initialize();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: 实现 StartupProbe 接口的 Java 类示例\nDESCRIPTION: 展示了如何创建一个自定义的启动探针类，实现 StartupProbe 接口并提供 check 方法的实现。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/startup.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \npublic class XxxStartupProbe implements StartupProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Registry Configuration Class Definition\nDESCRIPTION: Configuration class for Dubbo registry settings including connection parameters, security settings, and service registration options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_17\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.RegistryConfig\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Shell commands for setting up environment variables for configuration files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/provider.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport CONF_PROVIDER_FILE_PATH=\"xxx\"\nexport APP_LOG_CONF_FILE=\"xxx\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Class for XML Serialization of Primitive Return Types\nDESCRIPTION: Implementation of a wrapper class for primitive return types to support JAXB serialization. This pattern follows the Data Transfer Object (DTO) approach to properly format return data in both XML and JSON.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class RegistrationResult implements Serializable {\n    \n    private Long id;\n    \n    public RegistrationResult() {\n    }\n    \n    public RegistrationResult(Long id) {\n        this.id = id;\n    }\n    \n    public Long getId() {\n        return id;\n    }\n    \n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Client in Go\nDESCRIPTION: Sets up the consumer service and registers POJO structures for RPC communication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n    config.SetConsumerService(userProvider)\n    hessian.RegisterPOJO(&User{})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RestMethodMetadata Class for Rest Protocol Method Details in Java\nDESCRIPTION: This class contains metadata for a specific REST method, including method definition, request details, parameter information, and distinctions between MVC and RESTEasy implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class RestMethodMetadata implements Serializable {\n    private MethodDefinition method;\n    private RequestMetadata request;\n    private Integer urlIndex;\n    private Integer bodyIndex;\n    private Integer headerMapIndex;\n    private String bodyType;\n    private Map<Integer, Collection<String>> indexToName;\n    private List<String> formParams;\n    private Map<Integer, Boolean> indexToEncoded;\n    private ServiceRestMetadata serviceRestMetadata;\n    private List<ArgInfo> argInfos;\n    private Method reflectMethod;\n    private Class codeStyle;\n    // ... other fields and methods\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RestMethodMetadata Class for Rest Protocol Method Details in Java\nDESCRIPTION: This class contains metadata for a specific REST method, including method definition, request details, parameter information, and distinctions between MVC and RESTEasy implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class RestMethodMetadata implements Serializable {\n    private MethodDefinition method;\n    private RequestMetadata request;\n    private Integer urlIndex;\n    private Integer bodyIndex;\n    private Integer headerMapIndex;\n    private String bodyType;\n    private Map<Integer, Collection<String>> indexToName;\n    private List<String> formParams;\n    private Map<Integer, Boolean> indexToEncoded;\n    private ServiceRestMetadata serviceRestMetadata;\n    private List<ArgInfo> argInfos;\n    private Method reflectMethod;\n    private Class codeStyle;\n    // ... other fields and methods\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Application\nDESCRIPTION: Maven command to compile and package the Dubbo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/tracing-with-skywalking.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Implementation in Java\nDESCRIPTION: Test code demonstrating the usage of async callbacks with assertions\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nIDemoService demoService = (IDemoService) context.getBean(\"demoService\");\nNotifyImpl notify = (NotifyImpl) context.getBean(\"demoCallback\");\nint requestId = 2;\nPerson ret = demoService.get(requestId);\nAssert.assertEquals(null, ret);\n//for Test：只是用来说明callback正常被调用，业务具体实现自行决定.\nfor (int i = 0; i < 10; i++) {\n    if (!notify.ret.containsKey(requestId)) {\n        Thread.sleep(200);\n    } else {\n        break;\n    }\n}\nAssert.assertEquals(requestId, notify.ret.get(requestId).getId());\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Extensions in Dubbo\nDESCRIPTION: This snippet shows how to configure multiple container extensions when starting Dubbo. It specifies the main class and the desired containers to load.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/container.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njava org.apache.dubbo.container.Main spring jetty log4j\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ExceptionMapper in Java for Dubbo REST\nDESCRIPTION: This code snippet shows how to create a custom ExceptionMapper to handle NotFoundException in a Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_43\n\nLANGUAGE: Java\nCODE:\n```\npublic class CustomExceptionMapper implements ExceptionMapper<NotFoundException> {\n\n    public Response toResponse(NotFoundException e) {     \n        return Response.status(Response.Status.NOT_FOUND).entity(\"Oops! the requested resource is not found!\").type(\"text/plain\").build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Code Signing\nDESCRIPTION: Commands to generate a GPG key pair for signing Apache releases. This process creates a 4096-bit RSA key with specified user information and a passphrase for protection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --full-gen-key\ngpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     <n>  = key expires in n days\n     <n>w = key expires in n weeks\n     <n>m = key expires in n months\n     <n>y = key expires in n years\nKey is valid for? (0) \nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Robert Burrell Donkin\nEmail address: rdonkin@apache.org\nComment: CODE SIGNING KEY\nYou selected this USER-ID:\n   \"Robert Burrell Donkin (CODE SIGNING KEY) <rdonkin@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key. # 填入密码，以后打包过程中会经常用到\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Push Protection in Dubbo Registry (YAML)\nDESCRIPTION: Shows how to enable empty push protection for the consumer side. This feature prevents the consumer from clearing its address list when the registry center accidentally pushes an empty address list, helping maintain service availability.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    enableEmptyProtection: true\n```\n\n----------------------------------------\n\nTITLE: Calculating remeasureStartUs in AutoConcurrencyLimier\nDESCRIPTION: Formula for determining the starting time for resetting the window in the next cycle. This helps in maintaining regular measurement cycles in the algorithm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nremeasureStartUs = now_us + halfSampleIntervalMs * 1000L\n```\n\n----------------------------------------\n\nTITLE: Installing protoc on Linux using apt package manager\nDESCRIPTION: This snippet shows how to install the Protocol Buffer Compiler on Linux using apt or apt-get package manager and verify the installed version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protoc-installation.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ apt install -y protobuf-compiler\n$ protoc --version  # Ensure compiler version is 3+\n```\n\n----------------------------------------\n\nTITLE: 使用Properties配置配置中心\nDESCRIPTION: 通过properties文件方式配置Dubbo的配置中心地址。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/config-center.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Using JAX-RS Context Annotation\nDESCRIPTION: Demonstrates how to retrieve client IP address in a REST service using the standard JAX-RS @Context annotation to inject the HttpServletRequest.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) {\n    System.out.println(\"Client address is \" + request.getRemoteAddr());\n} \n```\n\n----------------------------------------\n\nTITLE: Configuring ExporterListener in Dubbo XML\nDESCRIPTION: XML configuration to define service export listeners in Dubbo. Can be applied at the individual service level or as a default for all services in a provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exporter-listener.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Service export listener -->\n<dubbo:service listener=\"xxx,yyy\" />\n<!-- Default listener for service export -->\n<dubbo:provider listener=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Logging Error for Inaccessible Cache Path in Java\nDESCRIPTION: This snippet shows an error log when Dubbo's file-based caching mechanism fails to access its specified directory. It includes a stack trace indicating a FileAlreadyExistsException.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/3.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n2022-08-29 00:35:00,189 ERROR [org.apache.dubbo.common.cache.FileCacheStoreFactory:?] -  [DUBBO] Cache store path can't be created: , dubbo version: , current host: 10.0.1.1, error code: 0-3. This may be caused by inaccessible of cache path, go to https://dubbo.apache.org/faq/0/3 to find instructions. \njava.nio.file.FileAlreadyExistsException: [Path]\n\tat java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:87)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n\tat java.base/sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:521)\n\tat java.base/java.nio.file.Files.createDirectory(Files.java:700)\n\tat java.base/java.nio.file.Files.createAndCheckIsDirectory(Files.java:807)\n\tat java.base/java.nio.file.Files.createDirectories(Files.java:753)\n\tat org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(FileCacheStoreFactory.java:90)\n\t...\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana with Dubbo Dashboards on Kubernetes\nDESCRIPTION: This snippet shows how to install Grafana with pre-configured Dubbo dashboards on a Kubernetes cluster using a community-provided configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/grafana.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/grafana.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing Strategy in Dubbo\nDESCRIPTION: A YAML configuration example showing how to adjust the load balancing strategy for consumers. The default strategy is 'random' if not specified otherwise.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-rule.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nconfigVersion: v2.7\nscope: application\nkey: demo-consumer\nenabled: true\nconfigs:\n- side: consumer\n  parameters:\n    loadbalance: random\n...\n```\n\n----------------------------------------\n\nTITLE: Compiling Istio control tools using docker-builder\nDESCRIPTION: Demonstrates how to compile istioctl using the docker-builder tool. This produces several binaries including istioctl, pilot-agent, and pilot-discovery in the output directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-builder --targets istioctl\n\nCompilation completed:\n\nls  out/linux_amd64/\nistioctl  logs  pilot-agent  pilot-discovery\n```\n\n----------------------------------------\n\nTITLE: Defining a Java Method that Returns a Primitive Type\nDESCRIPTION: Shows a service method signature that returns a primitive long type. This approach needs to be modified for proper XML serialization because JAXB cannot directly serialize primitive types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nlong registerUser(User user);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service for APISIX Integration in Java\nDESCRIPTION: Implementation of the DemoService interface that receives HTTP request context from APISIX and returns HTTP response information. It demonstrates how to handle request data and construct the response with body, status, and headers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext) {\n        for (Map.Entry<String, Object> entry : httpRequestContext.entrySet()) {\n            System.out.println(\"Key = \" + entry.getKey() + \", Value = \" + entry.getValue());\n        }\n\n        Map<String, Object> ret = new HashMap<String, Object>();\n        ret.put(\"body\", \"dubbo success\\n\"); // http response body\n        ret.put(\"status\", \"200\"); // http response status\n        ret.put(\"test\", \"123\"); // http response header\n\n        return ret;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Telnet Commands in Dubbo\nDESCRIPTION: Shell commands demonstrating how to connect to a Dubbo service using Telnet and execute custom commands.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntelnet 127.0.0.1 20880\ndubbo> xxx args\n```\n\n----------------------------------------\n\nTITLE: SPI Configuration Example\nDESCRIPTION: Example of SPI implementation configuration file\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_11\n\nLANGUAGE: text\nCODE:\n```\ndemoSpiImpl = com.xxx.xxx.DemoSpiImpl\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Registry with YAML Configuration\nDESCRIPTION: Configuration for explicitly setting which registry should be the global default using the 'default' property. This determines which registry will be used for services that don't specify a registry ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo\n registries\n  beijingRegistry\n   address: zookeeper://localhost:2181\n   default: true\n  shanghaiRegistry\n   address: zookeeper://localhost:2182\n   default: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Dubbo Go Service Provider\nDESCRIPTION: Shows how to implement a Dubbo Go service provider that can be called by both Go and Java clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-history.md#2025-04-08_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype UserProvider struct {}\n\nfunc (u *UserProvider) GetUser(userId string) (*User, error) {\n    return &User{Id: userId, Name: \"username\" + userId}, nil\n}\n\nfunc init() {\n    config.SetProviderService(new(UserProvider))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger OpenAPI Servlet in web.xml for Dubbo REST\nDESCRIPTION: Web application configuration to enable Swagger OpenAPI documentation for Dubbo REST services. Adds servlet mappings for OpenAPI JSON and YAML endpoints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    ...\n\t<servlet> <!-- #3 -->\n        <servlet-name>openapi</servlet-name>\n        <servlet-class>io.swagger.v3.jaxrs2.integration.OpenApiServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>openapi</servlet-name>\n        <url-pattern>/openapi.json</url-pattern>\n        <url-pattern>/openapi.yaml</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger OpenAPI Servlet in web.xml for Dubbo REST\nDESCRIPTION: Web application configuration to enable Swagger OpenAPI documentation for Dubbo REST services. Adds servlet mappings for OpenAPI JSON and YAML endpoints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    ...\n\t<servlet> <!-- #3 -->\n        <servlet-name>openapi</servlet-name>\n        <servlet-class>io.swagger.v3.jaxrs2.integration.OpenApiServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>openapi</servlet-name>\n        <url-pattern>/openapi.json</url-pattern>\n        <url-pattern>/openapi.yaml</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Defining GreetingService Interface in Java\nDESCRIPTION: This Java code defines the GreetingService interface, which declares a single method 'greeting' that takes a String parameter and returns a String.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.api;\n\npublic interface GreetingService {\n    String greeting(String message);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Image Maven Plugin\nDESCRIPTION: Maven plugin configuration for GraalVM native-image, including build arguments and class initialization settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/_index.md#2025-04-08_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n    <groupId>org.graalvm.nativeimage</groupId>\n    <artifactId>native-image-maven-plugin</artifactId>\n    <version>21.0.0.2</version>\n    <executions>\n        <execution>\n            <goals>\n                <goal>native-image</goal>\n            </goals>\n            <phase>package</phase>\n        </execution>\n    </executions>\n    <configuration>\n        <skip>false</skip>\n        <imageName>demo-native-provider</imageName>\n        <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>\n        <buildArgs>\n            --no-fallback\n            --initialize-at-build-time=org.slf4j.MDC\n            --initialize-at-build-time=org.slf4j.LoggerFactory\n            --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder\n            --initialize-at-build-time=org.apache.log4j.helpers.Loader\n            --initialize-at-build-time=org.apache.log4j.Logger\n            --initialize-at-build-time=org.apache.log4j.helpers.LogLog\n            --initialize-at-build-time=org.apache.log4j.LogManager\n            --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent\n            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory\n            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter\n            --initialize-at-build-time=org.eclipse.collections.api.factory.Sets\n            --initialize-at-run-time=io.netty.channel.epoll.Epoll\n            --initialize-at-run-time=io.netty.channel.epoll.Native\n            --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop\n            --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray\n            --initialize-at-run-time=io.netty.channel.DefaultFileRegion\n            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray\n            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop\n            --initialize-at-run-time=io.netty.channel.kqueue.Native\n            --initialize-at-run-time=io.netty.channel.unix.Errors\n            --initialize-at-run-time=io.netty.channel.unix.IovArray\n            --initialize-at-run-time=io.netty.channel.unix.Limits\n            --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger\n            --initialize-at-run-time=io.netty.channel.unix.Socket\n            --initialize-at-run-time=io.netty.channel.ChannelHandlerMask\n\n            --report-unsupported-elements-at-runtime\n            --allow-incomplete-classpath\n            --enable-url-protocols=http\n            -H:+ReportExceptionStackTraces\n        </buildArgs>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Deserializing RPC Result in DecodeableRpcResult\nDESCRIPTION: The DecodeableRpcResult class handles the actual deserialization of the RPC response. It processes different types of responses including null values, normal values, exceptions, and responses with attachments. In Dubbo 2.6.4, responses can contain attachments which are key-value pairs sent alongside the response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npublic class DecodeableRpcResult extends RpcResult implements Codec, Decodeable {\n    \n    private Invocation invocation;\n\t\n    @Override\n    public void decode() throws Exception {\n        if (!hasDecoded && channel != null && inputStream != null) {\n            try {\n                // 执行反序列化操作\n                decode(channel, inputStream);\n            } catch (Throwable e) {\n                // 反序列化失败，设置 CLIENT_ERROR 状态到 Response 对象中\n                response.setStatus(Response.CLIENT_ERROR);\n                // 设置异常信息\n                response.setErrorMessage(StringUtils.toString(e));\n            } finally {\n                hasDecoded = true;\n            }\n        }\n    }\n    \n    @Override\n    public Object decode(Channel channel, InputStream input) throws IOException {\n        ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), serializationType)\n                .deserialize(channel.getUrl(), input);\n        \n        // 反序列化响应类型\n        byte flag = in.readByte();\n        switch (flag) {\n            case DubboCodec.RESPONSE_NULL_VALUE:\n                break;\n            case DubboCodec.RESPONSE_VALUE:\n                // ...\n                break;\n            case DubboCodec.RESPONSE_WITH_EXCEPTION:\n                // ...\n                break;\n                \n            // 返回值为空，且携带了 attachments 集合\n            case DubboCodec.RESPONSE_NULL_VALUE_WITH_ATTACHMENTS:\n                try {\n                    // 反序列化 attachments 集合，并存储起来 \n                    setAttachments((Map<String, String>) in.readObject(Map.class));\n                } catch (ClassNotFoundException e) {\n                    throw new IOException(StringUtils.toString(\"Read response data failed.\", e));\n                }\n                break;\n                \n            // 返回值不为空，且携带了 attachments 集合\n            case DubboCodec.RESPONSE_VALUE_WITH_ATTACHMENTS:\n                try {\n                    // 获取返回值类型\n                    Type[] returnType = RpcUtils.getReturnTypes(invocation);\n                    // 反序列化调用结果，并保存起来\n                    setValue(returnType == null || returnType.length == 0 ? in.readObject() :\n                            (returnType.length == 1 ? in.readObject((Class<?>) returnType[0])\n                                    : in.readObject((Class<?>) returnType[0], returnType[1])));\n                    // 反序列化 attachments 集合，并存储起来\n                    setAttachments((Map<String, String>) in.readObject(Map.class));\n                } catch (ClassNotFoundException e) {\n                    throw new IOException(StringUtils.toString(\"Read response data failed.\", e));\n                }\n                break;\n                \n            // 异常对象不为空，且携带了 attachments 集合\n            case DubboCodec.RESPONSE_WITH_EXCEPTION_WITH_ATTACHMENTS:\n                try {\n                    // 反序列化异常对象\n                    Object obj = in.readObject();\n                    if (obj instanceof Throwable == false)\n                        throw new IOException(\"Response data error, expect Throwable, but get \" + obj);\n                    // 设置异常对象\n                    setException((Throwable) obj);\n                    // 反序列化 attachments 集合，并存储起来\n                    setAttachments((Map<String, String>) in.readObject(Map.class));\n                } catch (ClassNotFoundException e) {\n                    throw new IOException(StringUtils.toString(\"Read response data failed.\", e));\n                }\n                break;\n            default:\n                throw new IOException(\"Unknown result flag, expect '0' '1' '2', get \" + flag);\n        }\n        if (in instanceof Cleanable) {\n            ((Cleanable) in).cleanup();\n        }\n        return this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Module in Java\nDESCRIPTION: This snippet demonstrates the configuration options for a Dubbo module. It includes settings for module identification, asynchronous operations, and reference management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ModuleConfig moduleConfig = new ModuleConfig();\nmoduleConfig.setName(\"my-module\");\nmoduleConfig.setVersion(\"1.0.0\");\nmoduleConfig.setOrganization(\"my-org\");\nmoduleConfig.setOwner(\"John Doe\");\nmoduleConfig.setBackground(false);\nmoduleConfig.setCheckReferenceTimeout(5000L);\nmoduleConfig.setExportAsync(true);\nmoduleConfig.setExportThreadNum(10);\nmoduleConfig.setReferAsync(true);\nmoduleConfig.setReferThreadNum(10);\n```\n\n----------------------------------------\n\nTITLE: 动态标签路由规则配置\nDESCRIPTION: 配置动态标签路由规则，将具有特定属性（如 env: gray）的实例动态归组到 gray 分组中，实现流量隔离。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nforce: true\nenabled: true\nkey: shop-detail\ntags:\n  - name: gray\n    match:\n      - key: env\n        value:\n          exact: gray\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Metadata Registration in Properties\nDESCRIPTION: Properties configuration to enable remote interface metadata registration in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.metadata-type=remote\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat as REST Server in Dubbo XML\nDESCRIPTION: Shows how to configure an embedded Tomcat server as the high-performance REST server implementation in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"tomcat\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Bean Validation Annotations in Service Interface\nDESCRIPTION: Example of adding JSR 303 validation annotation (@Min) to a service interface method for input validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_47\n\nLANGUAGE: java\nCODE:\n```\npublic interface UserService {\n   \n    User getUser(@Min(value=1L, message=\"User ID must be greater than 1\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Properties with Nacos Registry\nDESCRIPTION: Properties configuration for Dubbo application using Nacos as registry, specifying the application name and Nacos registry address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n## application\ndubbo.application.name = your-dubbo-application\n\n## Nacos registry address\ndubbo.registry.address = nacos://10.20.153.10:8848\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Metrics Dependency in Maven\nDESCRIPTION: Maven dependency configuration to enable metric collection in a Spring Boot project using Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-observability-starter</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: DubboGo Client Configuration\nDESCRIPTION: YAML configuration for DubboGo client including registry and consumer settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      timeout: 3s\n      address: 127.0.0.1:2181\n  consumer:\n    references:\n      GreetServiceImpl:\n        protocol: tri\n        interface: com.apache.dubbo.sample.Greeter\n        registry: demoZK\n        retries: 3\n        timeout: 3000\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Tracing Dependencies for Dubbo API\nDESCRIPTION: This XML snippet shows the dependencies required for using OpenTelemetry tracing with Dubbo API, including the core tracing dependency, OpenTelemetry bridge, and OTLP exporter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/tracing-opentelemetry.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-tracing</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-tracing-bridge-otel</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-otlp</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: 通过属性配置静态标签路由规则\nDESCRIPTION: 通过 XML 配置的另一种方式为 Dubbo 服务指定静态标签，使用 dubbo:service 标签设置 tag 属性值为 \"gray\"。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service tag=\"gray\"/>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Plugin Implementation\nDESCRIPTION: AbstractDubboPlugin is responsible for checking metadata, processing parameters, and initiating generic Dubbo calls. It sets special context information before making the RPC invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.dubbo.common.AbstractDubboPlugin\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS ContainerResponseFilter in Java for Dubbo REST\nDESCRIPTION: This code snippet demonstrates how to create a custom JAX-RS ContainerResponseFilter to set cache control headers for GET requests in a Dubbo REST service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_39\n\nLANGUAGE: Java\nCODE:\n```\npublic class CacheControlFilter implements ContainerResponseFilter {\n\n    public void filter(ContainerRequestContext req, ContainerResponseContext res) {\n        if (req.getMethod().equals(\"GET\")) {\n            res.getHeaders().add(\"Cache-Control\", \"someValue\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RequestMetadata Class Definition\nDESCRIPTION: Class for storing HTTP request metadata including method, path, parameters, headers and content type information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class RequestMetadata implements Serializable {\n    private static final long serialVersionUID = -240099840085329958L;\n    private String method;\n    private String path;\n    private Map<String, List<String>> params;\n    private Map<String, List<String>> headers;\n    private Set<String> consumes;\n    private Set<String> produces;\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet Bridge Server for Dubbo HTTP Protocol\nDESCRIPTION: Configures Servlet Bridge Server for Dubbo HTTP protocol, which is the recommended approach.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/http.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol ... server=\"servlet\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Java Dubbo Service Provider\nDESCRIPTION: Example of a simple Java Dubbo service provider that returns user information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-history.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class UserProviderImpl implements UserProvider {\n    public User getUser(String userId) {\n        return new User(userId, \"username\" + userId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Configuration Bootstrap Implementation\nDESCRIPTION: Main class that demonstrates loading and using Dubbo external configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Dubbo 配置引导类\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n */\npublic class DubboConfigurationBootstrap {\n\n    public static void main(String[] args) {\n        // 创建配置上下文\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        // 注册当前配置 Bean\n        context.register(DubboConfiguration.class);\n        context.refresh();\n \t    // application\n        ApplicationConfig applicationConfig = context.getBean(\"applicationBean\", ApplicationConfig.class);\n        System.out.printf(\"applicationBean.name = %s \\n\", applicationConfig.getName());\n\n        // module\n        ModuleConfig moduleConfig = context.getBean(\"moduleBean\", ModuleConfig.class);\n        System.out.printf(\"moduleBean.name = %s \\n\", moduleConfig.getName());\n\n        // registry\n        RegistryConfig registryConfig = context.getBean(RegistryConfig.class);\n        System.out.printf(\"registryConfig.name = %s \\n\", registryConfig.getAddress());\n\n        // protocol\n        ProtocolConfig protocolConfig = context.getBean(ProtocolConfig.class);\n        System.out.printf(\"protocolConfig.name = %s \\n\", protocolConfig.getName());\n        System.out.printf(\"protocolConfig.port = %s \\n\", protocolConfig.getPort());\n\n        // monitor\n        MonitorConfig monitorConfig = context.getBean(MonitorConfig.class);\n        System.out.printf(\"monitorConfig.name = %s \\n\", monitorConfig.getAddress());\n\n        // provider\n        ProviderConfig providerConfig = context.getBean(ProviderConfig.class);\n        System.out.printf(\"providerConfig.name = %s \\n\", providerConfig.getHost());\n\n        // consumer\n        ConsumerConfig consumerConfig = context.getBean(ConsumerConfig.class);\n        System.out.printf(\"consumerConfig.name = %s \\n\", consumerConfig.getClient());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo Configuration Bootstrap Implementation\nDESCRIPTION: Main class that demonstrates loading and using Dubbo external configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Dubbo 配置引导类\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n */\npublic class DubboConfigurationBootstrap {\n\n    public static void main(String[] args) {\n        // 创建配置上下文\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        // 注册当前配置 Bean\n        context.register(DubboConfiguration.class);\n        context.refresh();\n \t    // application\n        ApplicationConfig applicationConfig = context.getBean(\"applicationBean\", ApplicationConfig.class);\n        System.out.printf(\"applicationBean.name = %s \\n\", applicationConfig.getName());\n\n        // module\n        ModuleConfig moduleConfig = context.getBean(\"moduleBean\", ModuleConfig.class);\n        System.out.printf(\"moduleBean.name = %s \\n\", moduleConfig.getName());\n\n        // registry\n        RegistryConfig registryConfig = context.getBean(RegistryConfig.class);\n        System.out.printf(\"registryConfig.name = %s \\n\", registryConfig.getAddress());\n\n        // protocol\n        ProtocolConfig protocolConfig = context.getBean(ProtocolConfig.class);\n        System.out.printf(\"protocolConfig.name = %s \\n\", protocolConfig.getName());\n        System.out.printf(\"protocolConfig.port = %s \\n\", protocolConfig.getPort());\n\n        // monitor\n        MonitorConfig monitorConfig = context.getBean(MonitorConfig.class);\n        System.out.printf(\"monitorConfig.name = %s \\n\", monitorConfig.getAddress());\n\n        // provider\n        ProviderConfig providerConfig = context.getBean(ProviderConfig.class);\n        System.out.printf(\"providerConfig.name = %s \\n\", providerConfig.getHost());\n\n        // consumer\n        ConsumerConfig consumerConfig = context.getBean(ConsumerConfig.class);\n        System.out.printf(\"consumerConfig.name = %s \\n\", consumerConfig.getClient());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty as REST Server in Dubbo\nDESCRIPTION: XML configuration for setting up Netty as the embedded REST server implementation in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"netty\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Port in Dubbo XML\nDESCRIPTION: This snippet illustrates how to set a specific port for the Dubbo protocol in the XML configuration file. It allows you to override the default port (20880) for the Dubbo protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/hostname-binding.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"20880\">\n```\n\n----------------------------------------\n\nTITLE: Adding Thrift Dependency for Dubbo\nDESCRIPTION: XML configuration to add the Thrift library dependency to a Maven project for use with Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/thrift.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.thrift</groupId>\n    <artifactId>libthrift</artifactId>\n    <version>0.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Registering Dubbo ShutdownHook in JVM\nDESCRIPTION: Java implementation of the register method in DubboShutdownHook class that adds a shutdown hook to the JVM runtime. It ensures the hook is registered only once using atomic compare-and-set operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-gracefully-shutdown.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Register the ShutdownHook\n */\npublic void register() {\n    if (!registered.get() && registered.compareAndSet(false, true)) {\n        Runtime.getRuntime().addShutdownHook(getDubboShutdownHook());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Dump Directory in XML\nDESCRIPTION: Sets the output directory for Dubbo's automatic thread stack dumps using XML configuration. This approach uses a parameter within the dubbo:application element to specify the dump location.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/dump.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application ...>\n    <dubbo:parameter key=\"dump.directory\" value=\"/tmp\" />\n</dubbo:application>\n```\n\n----------------------------------------\n\nTITLE: Generating Code from Proto Definition\nDESCRIPTION: Generates TypeScript code from Protocol Buffer definition using protoc compiler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nPATH=$PATH:$(pwd)/node_modules/.bin \\\n  protoc -I proto \\\n  --es_out gen \\\n  --es_opt target=ts \\\n  --apache-dubbo-es_out gen \\\n  --apache-dubbo-es_opt target=ts \\\n  example.proto\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Service Provider in Java\nDESCRIPTION: This code demonstrates how to implement an asynchronous Dubbo service provider using CompletableFuture and supplyAsync.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public CompletableFuture<String> sayHello(String name) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IO Threads for Netty-based REST Server\nDESCRIPTION: Sets both IO worker thread count and general thread pool size for a Netty-based REST server. The iothreads parameter controls Netty's IO worker threads.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" iothreads=\"5\" threads=\"100\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface-Level Service Discovery in XML\nDESCRIPTION: XML configuration to maintain interface-level service discovery when upgrading to Dubbo 3. This setting should be applied to provider applications, and is optional for consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:application name=\"xxx\" register-mode=\"interface\">\n```\n\n----------------------------------------\n\nTITLE: Registering Exchanger Implementation in Dubbo SPI\nDESCRIPTION: Properties file configuration to register a custom Exchanger implementation with Dubbo's SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exchanger.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxExchanger\n```\n\n----------------------------------------\n\nTITLE: Calculating resetLatencyUs in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the timestamp for the next reset of all values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/1af4a6134ede96985302ee8a27f93df7.svg)\n```\n\n----------------------------------------\n\nTITLE: 配置Dubbo SPI扩展的Properties文件示例\nDESCRIPTION: Dubbo SPI扩展配置文件，将自定义的Dispatcher实现类与名称映射关联起来，放置在META-INF/dubbo/目录下。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/impls/dispatcher.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxDispatcher\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables in EnvironmentConfiguration\nDESCRIPTION: Shows how Dubbo loads configuration from environment variables using the EnvironmentConfiguration class, which wraps System.getenv to access environment variables directly or with modified OS-style keys.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class EnvironmentConfiguration implements Configuration {\n\n    @Override\n    public Object getInternalProperty(String key) {\n        String value = System.getenv(key);\n        if (StringUtils.isEmpty(value)) {\n            value = System.getenv(StringUtils.toOSStyleKey(key));\n        }\n        return value;\n    }\n\n    public Map<String, String> getProperties() {\n        return System.getenv();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Dubbo Operator Configuration (YAML)\nDESCRIPTION: Example of a custom YAML configuration for the Dubbo Operator, demonstrating how to enable/disable components and set specific component configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dubbo.apache.org/v1alpha1\nkind: DubboOperator\nmetadata:\n  namespace: dubbo-system\nspec:\n  profile: default\n  namespace: dubbo-system\n  componentsMeta:\n    admin:\n      enabled: true\n    grafana:\n      enabled: true\n      version: 6.31.0\n    prometheus:\n      enabled: false\n  components:\n    admin:\n      replicas: 3\n    grafana:\n      testFramework:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the GreetService that will be used by both Dubbo-go and gRPC implementations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/interop-grpc/call_grpc.md#2025-04-08_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/rpc/grpc/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using JAX-RS Context Annotation in Java\nDESCRIPTION: Demonstrates how to obtain client IP address in a REST service by injecting HttpServletRequest using the standard JAX-RS @Context annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) {\n    System.out.println(\"Client address is \" + request.getRemoteAddr());\n}\n```\n\n----------------------------------------\n\nTITLE: Response Encoding Implementation in Dubbo\nDESCRIPTION: Implementation of response encoding in Dubbo's ExchangeCodec and DubboCodec classes, showing how responses are serialized and formatted for network transmission.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npublic class ExchangeCodec extends TelnetCodec {\n\tpublic void encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {\n        if (msg instanceof Request) {\n            encodeRequest(channel, buffer, (Request) msg);\n        } else if (msg instanceof Response) {\n            encodeResponse(channel, buffer, (Response) msg);\n        } else {\n            super.encode(channel, buffer, msg);\n        }\n    }\n    \n    protected void encodeResponse(Channel channel, ChannelBuffer buffer, Response res) throws IOException {\n        int savedWriteIndex = buffer.writerIndex();\n        try {\n            Serialization serialization = getSerialization(channel);\n            byte[] header = new byte[HEADER_LENGTH];\n            Bytes.short2bytes(MAGIC, header);\n            header[2] = serialization.getContentTypeId();\n            if (res.isHeartbeat()) header[2] |= FLAG_EVENT;\n            byte status = res.getStatus();\n            header[3] = status;\n            Bytes.long2bytes(res.getId(), header, 4);\n\n            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH);\n            ChannelBufferOutputStream bos = new ChannelBufferOutputStream(buffer);\n            ObjectOutput out = serialization.serialize(channel.getUrl(), bos);\n           \n            if (status == Response.OK) {\n                if (res.isHeartbeat()) {\n                    encodeHeartbeatData(channel, out, res.getResult());\n                } else {\n                    encodeResponseData(channel, out, res.getResult(), res.getVersion());\n                }\n            } else { \n                out.writeUTF(res.getErrorMessage())\n            };\n            out.flushBuffer();\n            if (out instanceof Cleanable) {\n                ((Cleanable) out).cleanup();\n            }\n            bos.flush();\n            bos.close();\n\n            int len = bos.writtenBytes();\n            checkPayload(channel, len);\n            \n            Bytes.int2bytes(len, header, 12);\n            buffer.writerIndex(savedWriteIndex);\n            buffer.writeBytes(header); \n            buffer.writerIndex(savedWriteIndex + HEADER_LENGTH + len);\n        } catch (Throwable t) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用 EchoService 进行 Dubbo 服务回声测试\nDESCRIPTION: 演示如何将 Dubbo 服务引用转换为 EchoService 接口并执行回声测试。代码获取 memberService 实例，将其转型为 EchoService，然后调用 $echo 方法测试服务可用性。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/echo-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 远程服务引用\nMemberService memberService = ctx.getBean(\"memberService\"); \n \nEchoService echoService = (EchoService) memberService; // 强制转型为EchoService\n\n// 回声测试可用性\nString status = echoService.$echo(\"OK\"); \n \nassert(status.equals(\"OK\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Serialization in Dubbo Python Server\nDESCRIPTION: Shows how to set up a Dubbo Python server with custom JSON serialization using orjson. It defines custom deserializer and serializer functions and creates a method handler for the 'unary' method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef request_deserializer(data: bytes) -> Dict:\n    return orjson.loads(data)\n\n\ndef response_serializer(data: Dict) -> bytes:\n    return orjson.dumps(data)\n\n\ndef handle_unary(request):\n    print(f\"Received request: {request}\")\n    return {\"message\": f\"Hello, {request['name']}\"}\n\n\nif __name__ == \"__main__\":\n    # build a method handler\n    method_handler = RpcMethodHandler.unary(\n        handle_unary,\n        request_deserializer=request_deserializer,\n        response_serializer=response_serializer,\n    )\n    # build a service handler\n    service_handler = RpcServiceHandler(\n        service_name=\"org.apache.dubbo.samples.HelloWorld\",\n        method_handlers={\"unary\": method_handler},\n    )\n\n    service_config = ServiceConfig(service_handler)\n\n    # start the server\n    server = dubbo.Server(service_config).start()\n\n    input(\"Press Enter to stop the server...\\n\")\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsReporter Interface in Java\nDESCRIPTION: This snippet defines the MetricsReporter interface, which is responsible for initializing, refreshing, and retrieving metrics data. It includes methods for initialization, data refresh, and retrieving responses with or without specific metric names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MetricsReporter {\n    //初始化\n    void init();\n\n    //刷新统计数据，定时调用collect()\n    void refreshData();\n\n    //获取指标数据\n    String getResponse();\n    \n    //获取带指标名的指标样本（单个指标）\n    default String getResponseWithName(String metricsName) {   return null; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsReporter Interface in Java\nDESCRIPTION: This snippet defines the MetricsReporter interface, which is responsible for initializing, refreshing, and retrieving metrics data. It includes methods for initialization, data refresh, and retrieving responses with or without specific metric names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic interface MetricsReporter {\n    //初始化\n    void init();\n\n    //刷新统计数据，定时调用collect()\n    void refreshData();\n\n    //获取指标数据\n    String getResponse();\n    \n    //获取带指标名的指标样本（单个指标）\n    default String getResponseWithName(String metricsName) {   return null; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User and Order Services with Triple X in Java\nDESCRIPTION: This code snippet demonstrates how to use Triple X to handle both east-west and north-south traffic in Dubbo services. It shows the implementation of a UserService for east-west communication and an OrderService with RESTful endpoints for north-south traffic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/apache-33-release.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.test;\n\n@DubboService\npublic class UserServiceImpl implements UserService {\n   // Handles east-west requests\n}\n\n// Triple X also supports north-south traffic\n@DubboService\npublic class OrderService {\n   @GetMapping(\"/order/{orderId}\")\n   public Order getOrderById(@PathVariable(\"orderId\") String orderId) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User and Order Services with Triple X in Java\nDESCRIPTION: This code snippet demonstrates how to use Triple X to handle both east-west and north-south traffic in Dubbo services. It shows the implementation of a UserService for east-west communication and an OrderService with RESTful endpoints for north-south traffic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/apache-33-release.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.test;\n\n@DubboService\npublic class UserServiceImpl implements UserService {\n   // Handles east-west requests\n}\n\n// Triple X also supports north-south traffic\n@DubboService\npublic class OrderService {\n   @GetMapping(\"/order/{orderId}\")\n   public Order getOrderById(@PathVariable(\"orderId\") String orderId) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry for Server Services in Dubbo Go\nDESCRIPTION: This code shows how to specify which registration center a service under a specific server should register to, using server registration IDs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Specify that the service under the server registers to the zookeeper registration center\nsrv, _ := ins.NewServer(server.WithServerRegistryIDs([]string{\"zookeeper\"}))\n\n// Specify that the service under the server registers to the nacos registration center\nsrv2, _ := ins.NewServer(server.WithServerRegistryIDs([]string{\"nacos\"}))\n```\n\n----------------------------------------\n\nTITLE: Calculating Metadata Revision in Dubbo\nDESCRIPTION: This method calculates the revision of metadata info. It generates a string representation of the metadata and calculates an MD5 hash as the revision. If the revision has changed, it updates the revision and raw metadata info.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic synchronized String calAndGetRevision() {\n    if (revision != null && !updated) {\n        return revision;\n    }\n\n    updated = false;\n    if (CollectionUtils.isEmptyMap(services)) {\n        this.revision = EMPTY_REVISION;\n    } else {\n        StringBuilder sb = new StringBuilder();\n        sb.append(app);\n        for (Map.Entry<String, ServiceInfo> entry : new TreeMap<>(services).entrySet()) {\n            sb.append(entry.getValue().toDescString());\n        }\n        String tempRevision = RevisionResolver.calRevision(sb.toString());\n        if (!StringUtils.isEquals(this.revision, tempRevision)) {\n            if (logger.isInfoEnabled()) {\n                logger.info(String.format(\"metadata revision changed: %s -> %s, app: %s, services: %d\", this.revision, tempRevision, this.app, this.services.size()));\n            }\n            this.revision = tempRevision;\n            this.rawMetadataInfo = JsonUtils.getJson().toJson(this);\n        }\n    }\n    return revision;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Logger in Properties File\nDESCRIPTION: Shows how to specify the logging framework in the dubbo.properties configuration file. This example sets log4j as the logger through a configuration property.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/logger-strategy.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.logger=log4j\n```\n\n----------------------------------------\n\nTITLE: 配置Dubbo使用Zookeeper注册中心 (XML)\nDESCRIPTION: 在Dubbo中配置Zookeeper注册中心的XML示例。这些配置展示了如何在Dubbo中指定Zookeeper服务器地址，包括单个地址和多个地址的情况。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"zookeeper\" address=\"10.20.153.10:2181,10.20.153.11:2181\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Element Names with JAXB Annotations in Java\nDESCRIPTION: Demonstrates how to customize XML serialization by mapping object properties to specific XML element names using JAXB annotations. This allows control over the XML structure generated from Java objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class User implements Serializable {\n    \n    @XmlElement(name=\"username\") \n    private String name;  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS Client Response Filter\nDESCRIPTION: Example of a JAX-RS ClientResponseFilter that logs details of HTTP responses. This filter is used on the consumer side rather than the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_41\n\nLANGUAGE: java\nCODE:\n```\npublic class LoggingFilter implements ClientResponseFilter {\n \n    public void filter(ClientRequestContext reqCtx, ClientResponseContext resCtx) throws IOException {\n        System.out.println(\"status: \" + resCtx.getStatus());\n\t    System.out.println(\"date: \" + resCtx.getDate());\n\t    System.out.println(\"last-modified: \" + resCtx.getLastModified());\n\t    System.out.println(\"location: \" + resCtx.getLocation());\n\t    System.out.println(\"headers:\");\n\t    for (Entry<String, List<String>> header : resCtx.getHeaders().entrySet()) {\n     \t    System.out.print(\"\\t\" + header.getKey() + \" :\");\n\t        for (String value : header.getValue()) {\n\t            System.out.print(value + \", \");\n\t        }\n\t        System.out.print(\"\\n\");\n\t    }\n\t    System.out.println(\"media-type: \" + resCtx.getMediaType().getType());\n    } \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Preferences in XML\nDESCRIPTION: XML configuration for setting serialization protocol preferences in Dubbo, defining both the default serialization protocol and the preferred order for protocol negotiation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider serialization=\"hessian2\" prefer-serialization=\"fastjson2,hessian2\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Trust List Configuration Files\nDESCRIPTION: Example of allowlist and blockedlist configuration files for custom trusted/untrusted class definitions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/security/class-check.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.allowlist\nio.dubbo.test\n```\n\nLANGUAGE: properties\nCODE:\n```\n# security/serialize.blockedlist\nio.dubbo.block\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Server for Apache Dubbo Registry\nDESCRIPTION: Command to stop all running Redis server instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkillall redis-server\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Exception Mapper Implementation\nDESCRIPTION: Implementation of a custom exception mapper to handle validation errors with JSON response format instead of default XML.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_50\n\nLANGUAGE: java\nCODE:\n```\npublic class MyValidationExceptionMapper extends RpcExceptionMapper {\n\n    protected Response handleConstraintViolationException(ConstraintViolationException cve) {\n        ViolationReport report = new ViolationReport();\n        for (ConstraintViolation cv : cve.getConstraintViolations()) {\n            report.addConstraintViolation(new RestConstraintViolation(\n                    cv.getPropertyPath().toString(),\n                    cv.getMessage(),\n                    cv.getInvalidValue() == null ? \"null\" : cv.getInvalidValue().toString()));\n        }\n        // 采用json输出代替xml输出\n        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(report).type(ContentType.APPLICATION_JSON_UTF_8).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting pilot-discovery locally\nDESCRIPTION: Shows how to start the pilot-discovery service locally for debugging purposes. The command displays various configuration flags and initializes the mesh configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./out/linux_amd64/pilot-discovery\n\nStartup log:\n2022-09-24T15:31:56.751245Z\tinfo\tFLAG: --caCertFile=\"\"\n2022-09-24T15:31:56.751277Z\tinfo\tFLAG: --clusterAliases=\"[]\"\n2022-09-24T15:31:56.751280Z\tinfo\tFLAG: --clusterID=\"Kubernetes\"\n2022-09-24T15:31:56.751282Z\tinfo\tFLAG: --clusterRegistriesNamespace=\"istio-system\"\n2022-09-24T15:31:56.751284Z\tinfo\tFLAG: --configDir=\"\"\n2022-09-24T15:31:56.751286Z\tinfo\tFLAG: --ctrlz_address=\"localhost\"\n2022-09-24T15:31:56.751289Z\tinfo\tFLAG: --ctrlz_port=\"9876\"\n2022-09-24T15:31:56.751291Z\tinfo\tFLAG: --domain=\"cluster.local\"\n...\n2022-09-24T15:31:56.753814Z\tinfo\tinitializing mesh configuration ./etc/istio/config/mesh\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Log Database Table Structure\nDESCRIPTION: SQL schema definition for the mock_log table that records mock request history, storing request data, response values, and timestamps for debugging purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/mock.md#2025-04-08_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `mock_log` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Primary Key ID',\n  `method_id` int(11) DEFAULT NULL COMMENT 'Rule ID',\n  `request` text COMMENT 'Request Data',\n  `response` text COMMENT 'Return Value',\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Creation Time',\n  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Update Time',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Mock Request Record Table';\n```\n\n----------------------------------------\n\nTITLE: Generating JVM Thread Dump for Socket Connection Analysis\nDESCRIPTION: Command to generate a thread dump using jstack for analyzing socket connection issues. The output is redirected to a jstack.log file for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/1/38.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Business-Based Service Consumption Example\nDESCRIPTION: XML configuration for referencing services from multiple registries based on business requirements, allowing applications to call services from different sites.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Multi-registry configuration -->\n<dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n<dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n<!-- Reference the Chinese site's service -->\n<dubbo:reference id=\"chinaHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"chinaRegistry\" />\n<!-- Reference the international site's service -->\n<dubbo:reference id=\"intlHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"intlRegistry\" />\n```\n\n----------------------------------------\n\nTITLE: Triggering Asynchronous Invocation in Java\nDESCRIPTION: Demonstrates how to trigger an asynchronous invocation and retrieve the result using Future in Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-invoke.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nAsyncService service = ...;\nString result = service.goodbye(\"samples\");// returns NULL and DO NOT use!\nFuture<String> future = RpcContext.getContext().getFuture();\n... // other service thread logic\nresult = future.get(); // could use get(timeout, unit) to configure timeout, when it needs to get the asynchronous result\n```\n\n----------------------------------------\n\nTITLE: Calculating qps in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the QPS value within the time window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/c0e8b30fc1ecf9438bc2d574fb3da8b6.svg)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Zookeeper Instance\nDESCRIPTION: XML configuration for connecting to a single Zookeeper instance as registry center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/registry/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"zookeeper://10.20.153.10:2181\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Security via JVM Parameters\nDESCRIPTION: Configures QOS security settings through JVM system properties to restrict command execution to local host only.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/qos.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-Ddubbo.application.qos-accept-foreign-ip=false\n```\n\n----------------------------------------\n\nTITLE: Creating Dubbo-go Application with CLI\nDESCRIPTION: Command to create a new Dubbo-go application project template using the dubbogo-cli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/traffic_management.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dubbogo-cli newApp .\n```\n\n----------------------------------------\n\nTITLE: Creating DemoFilterFactory in Go\nDESCRIPTION: Implements a DemoFilterFactory struct with methods for preparing the filter chain, configuring the filter, and applying settings. It also defines a Config struct for filter configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\tDemoFilterFactory struct {\n\t\tconf *Config\n\t}\n\tConfig struct {\n\t\tLogPrefix string `yaml:\"logPrefix,omitempty\"`\n\t}\n)\n\nfunc (f *DemoFilterFactory) PrepareFilterChain(ctx *contexthttp.HttpContext, chain filter.FilterChain) error {\n   demo := &DemoFilter{logPrefix: f.conf.LogPrefix}\n\n   chain.AppendDecodeFilters(demo)\n   chain.AppendEncodeFilters(demo)\n   return nil\n}\n\nfunc (f *DemoFilterFactory) Config() interface{} {\n   return f.conf\n}\n\nfunc (f *DemoFilterFactory) Apply() error {\n   return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsCollector Interface in Java\nDESCRIPTION: This snippet defines the MetricsCollector interface, which is responsible for collecting metrics as MetricSample objects. It includes methods for checking if collection is enabled and performing the actual collection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@SPI\npublic interface MetricsCollector<E extends TimeCounterEvent> extends MetricsLifeListener<E> {\n\n    default boolean isCollectEnabled() {\n        return false;\n    }\n\n    /**\n     * Collect metrics as {@link MetricSample}\n     *\n     * @return List of MetricSample\n     */\n    List<MetricSample> collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsCollector Interface in Java\nDESCRIPTION: This snippet defines the MetricsCollector interface, which is responsible for collecting metrics as MetricSample objects. It includes methods for checking if collection is enabled and performing the actual collection.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/metrics/4-指标转换与导出.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@SPI\npublic interface MetricsCollector<E extends TimeCounterEvent> extends MetricsLifeListener<E> {\n\n    default boolean isCollectEnabled() {\n        return false;\n    }\n\n    /**\n     * Collect metrics as {@link MetricSample}\n     *\n     * @return List of MetricSample\n     */\n    List<MetricSample> collect();\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Annotation Migration - Dubbo Service Example\nDESCRIPTION: Example showing the migration from Spring Web Controller to Dubbo Service by changing the annotation from @Controller to @DubboService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\n```\n\n----------------------------------------\n\nTITLE: Spring Annotation Migration - Dubbo Service Example\nDESCRIPTION: Example showing the migration from Spring Web Controller to Dubbo Service by changing the annotation from @Controller to @DubboService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\n```\n\n----------------------------------------\n\nTITLE: Multiple Dubbo Configuration Properties Example\nDESCRIPTION: Example of properties file configuration for multiple Dubbo bean bindings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# multiple Bean definition\ndubbo.applications.applicationBean.name = dubbo-demo-application\ndubbo.applications.applicationBean2.name = dubbo-demo-application2\ndubbo.applications.applicationBean3.name = dubbo-demo-application3\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Mapper\nDESCRIPTION: XML configuration for registering custom exception mapper in Dubbo REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.CustomExceptionMapper\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Swagger UI Dependencies for Dubbo REST\nDESCRIPTION: Maven configuration to add Swagger UI support for Dubbo REST services using WebJars. This enables a visual interface for exploring and testing the REST API.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n    <properties>\n        <swagger.webjar.version>3.20.3</swagger.webjar.version>\n    </properties>\n    <dependencies> \n        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>swagger-ui</artifactId>\n            <version>${swagger.webjar.version}</version>\n        </dependency>\n    </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Service Reference Configuration in Java for Dubbo\nDESCRIPTION: Java code for referencing services with different protocols in Dubbo. The example shows how to configure a reference to the GreetingService with a specific protocol via the ReferenceConfig API.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nReferenceConfig<GreetingService> reference = new ReferenceConfig<>();\nreference.setInterface(GreetingService.class);\nreference.setListener(\"consumer\");\nreference.setProtocol(this.protocol);\n// reference.setProtocol(CommonConstants.DUBBO);\n// reference.setProtocol(CommonConstants.TRIPLE);\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics Listener in Dubbo Spring BeanFactory\nDESCRIPTION: Method to register the metrics collector as a listener with the DefaultMetricsCollector through Spring's BeanFactory, implementing a producer-consumer pattern for metrics data flow.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/merics/meter.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerListener() {\n    applicationModel.getBeanFactory().getBean(DefaultMetricsCollector.class).addListener(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating qps in AutoConcurrencyLimiter\nDESCRIPTION: Formula for calculating the QPS value within the time window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![img](/imgs/blog/proposals/heuristic-flow-control/c0e8b30fc1ecf9438bc2d574fb3da8b6.svg)\n```\n\n----------------------------------------\n\nTITLE: Installing with Minimal Profile\nDESCRIPTION: Installs Dubbo Admin with a minimal profile configuration\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install --set profile=minimal\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticator Interface in Go\nDESCRIPTION: This code snippet defines the Authenticator interface in Go, which includes methods for signing requests and authenticating signatures. It allows customization of signing and authentication methods through SPI mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-trusted-call.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Authenticator\ntype Authenticator interface {\n\n    // Sign\n    // give a sign to request\n    Sign(protocol.Invocation, *common.URL) error\n\n    // Authenticate\n    // verify the signature of the request is valid or not\n    Authenticate(protocol.Invocation, *common.URL) error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Annotations Instead of XML for REST Service Configuration\nDESCRIPTION: Example of using Dubbo and JAX-RS annotations to configure a REST service, replacing XML configuration. This combines Dubbo's @Service annotation with JAX-RS @Path and method annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_37\n\nLANGUAGE: java\nCODE:\n```\n@Service(protocol = \"rest\")\n@Path(\"/users\")\npublic class UserServiceImpl implements UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n       \n    @POST\n    @Path(\"/register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user\n        userRepository.save(user);\n    }\t\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Consumer with Callbacks in XML\nDESCRIPTION: XML configuration for the service consumer including callback methods and async settings\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<bean id =\"demoCallback\" class = \"org.apache.dubbo.callback.implicit.NotifyImpl\" />\n<dubbo:reference id=\"demoService\" interface=\"org.apache.dubbo.callback.implicit.IDemoService\" version=\"1.0.0\" group=\"cn\" >\n      <dubbo:method name=\"get\" async=\"true\" onreturn = \"demoCallback.onreturn\" onthrow=\"demoCallback.onthrow\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Configuring Higress McpBridge for Nacos Integration\nDESCRIPTION: Shell command to apply the McpBridge resource that connects Higress to Nacos service registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/2-advanced/dubbo-samples-gateway/dubbo-samples-gateway-higress/dubbo-samples-gateway-higress-triple/deploy/mcp/mcpbridge.yaml\n```\n\n----------------------------------------\n\nTITLE: Getting Destination Rules in Kubernetes\nDESCRIPTION: Command to display the corresponding subset definitions for the Bookinfo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get destinationrules -o yaml\n```\n\n----------------------------------------\n\nTITLE: Using Dubbo Help Command\nDESCRIPTION: Demonstrates how to use the help command to list all available commands or get detailed usage information for a specific command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/command.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n// List all commands\ndubbo>help\n\n// List specific usage of a single command\ndubbo>help online\n+--------------+----------------------------------------------------------------------------------+\n| COMMAND NAME | online                                                                           |\n+--------------+----------------------------------------------------------------------------------+\n|      EXAMPLE | online dubbo                                                                     |\n|              | online xx.xx.xxx.service                                                         |\n+--------------+----------------------------------------------------------------------------------+\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Consumer Bootstrap with XML Configuration\nDESCRIPTION: Java bootstrap class for a Dubbo service consumer using XML configuration. This class loads the Spring XML context, obtains the DemoService reference, and makes 10 RPC calls to demonstrate the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.consumer;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} consumer demo XML bootstrap\n */\npublic class DemoServiceConsumerXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-consumer-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService consumer (XML) is starting...\");\n        DemoService demoService = context.getBean(\"demoService\", DemoService.class);\n        for (int i = 0; i < 10; i++) {\n            System.out.println(demoService.sayName(\"小马哥（mercyblitz）\"));\n        }\n        context.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Pixiu Documentation\nDESCRIPTION: YAML front matter block defining metadata for a documentation page about Pixiu in the Apache Dubbo website. Specifies the page type, title, link title and navigation weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/pixiu/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: advanced-docs\ntitle: \"pixiu\"\nlinkTitle: \"pixiu\"\nweight: 3\n```\n\n----------------------------------------\n\nTITLE: Accessing serializeWarnedClasses via HTTP in Dubbo\nDESCRIPTION: This snippet shows how to use a curl command to access the 'serializeWarnedClasses' QoS command in Dubbo via HTTP. It returns the result in JSON format, listing potentially unsafe classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeWarnedClasses\n{\"warnedClasses\":[\"io.dubbo.test2.NotSerializable\",\"org.apache.dubbo.samples.NotSerializable\",\"io.dubbo.test.NotSerializable\",\"io.dubbo.test2.OthersSerializable\"]}\n```\n\n----------------------------------------\n\nTITLE: Defining Java Service Interface\nDESCRIPTION: Example of a Java service interface definition for an old Dubbo Java application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_dubbo_non_protobuf.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.samples.api;\n\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: GPG Signing Error Solution\nDESCRIPTION: Command to resolve the \"gpg: signing failed: Inappropriate ioctl for device\" error that may occur during the release process by setting the GPG TTY environment variable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nexport GPG_TTY=$(tty)\n```\n\n----------------------------------------\n\nTITLE: Startup Class for GreetingService\nDESCRIPTION: Java class that initializes a Spring context from the greeting-service.xml configuration file and starts the GreetingService application, which depends on HelloService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.service.greeting;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/greeting-service.xml\");\n        context.start();\n\n        System.out.println(\"Greeting service started\");\n        // press any key to exit\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Simplification via Properties File\nDESCRIPTION: Demonstrates how to configure URL simplification using dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_9\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.simplified=true\ndubbo.registry.extra-keys=retries,owner\n```\n\n----------------------------------------\n\nTITLE: Defining REST-style Dubbo Service with Spring Web Annotations\nDESCRIPTION: Java interface definition using Spring Web annotations to expose a Dubbo service with REST-style HTTP endpoints.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(\"/triple/demo\")\npublic interface DemoService {\n\n    @RequestMapping(method = RequestMethod.GET, value = \"/hello\")\n    String sayHello(@RequestParam(\"name\") String name);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Model Extension\nDESCRIPTION: Example of retrieving a ConfigManager extension object from ApplicationModel using the extension loading mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfigManager = (ConfigManager) this.getExtensionLoader(ApplicationExt.class)\n                .getExtension(ConfigManager.NAME);\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Model Extension\nDESCRIPTION: Example of retrieving a ConfigManager extension object from ApplicationModel using the extension loading mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/6-Dubbo的SPI扩展机制之普通扩展对象的创建与Wrapper机制的源码解析.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nconfigManager = (ConfigManager) this.getExtensionLoader(ApplicationExt.class)\n                .getExtension(ConfigManager.NAME);\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Push Protection in Dubbo Configuration\nDESCRIPTION: This configuration enables empty push protection in Dubbo 3.2.0. It's used to retain the last batch of provider information when the registry encounters issues, ensuring service availability. However, it may cause issues when rolling back from 3.x to earlier versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-32-release.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndubbo.application.enable-empty-protection=true\n```\n\n----------------------------------------\n\nTITLE: Starting Simple Registry with Dubbo Maven Plugin\nDESCRIPTION: This command starts a simple registry using Dubbo's Maven plugin. It specifies port 9099 for the registry. If no port is specified, the default port 9090 is used.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/maven.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmvn dubbo:registry -Dport=9099\n```\n\n----------------------------------------\n\nTITLE: Generating SHA512 Signature for Binary Release\nDESCRIPTION: Command to generate SHA512 signature for the binary release zip file, using the -b flag for binary files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -b -a 512 apache-dubbo-${release_version}-bin-release.zip >> apache-dubbo-${release_version}-bin-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Authentication in YAML Format\nDESCRIPTION: YAML configuration for setting up Zookeeper authentication with username and password in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo\n registry\n   address: zookeeper://localhost:2181\n   username: hello\n   password: 1234\n```\n\n----------------------------------------\n\nTITLE: Complete Single Dubbo Configuration Properties\nDESCRIPTION: Complete example of properties file for single Dubbo configuration bean binding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\n# 单 Dubbo 配置 Bean 绑定\n## application\ndubbo.application.id = applicationBean\ndubbo.application.name = dubbo-demo-application\n\n## module\ndubbo.module.id = moduleBean\ndubbo.module.name = dubbo-demo-module\n\n## registry\ndubbo.registry.address = zookeeper://192.168.99.100:32770\n\n## protocol\ndubbo.protocol.name = dubbo\ndubbo.protocol.port = 20880\n\n## monitor\ndubbo.monitor.address = zookeeper://127.0.0.1:32770\n\n## provider\ndubbo.provider.host = 127.0.0.1\n\n## consumer\ndubbo.consumer.client = netty\n```\n\n----------------------------------------\n\nTITLE: Global Plugin Context Building\nDESCRIPTION: GlobalPlugin is the first plugin executed in the chain, responsible for building context information necessary for request processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.global.GlobalPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Redis Method Mapping Configuration\nDESCRIPTION: Shows configuration for mapping custom method names to standard Redis operations using Spring p namespace in Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/redis.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"com.foo.CacheService\" url=\"redis://10.20.153.10:6379\" p:set=\"putFoo\" p:get=\"getFoo\" p:delete=\"removeFoo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe Extension in Dubbo\nDESCRIPTION: Configuration file for registering the custom readiness probe implementation with Dubbo's extension mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/readiness.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nxxx=com.xxx.XxxReadinessProbe\n```\n\n----------------------------------------\n\nTITLE: Configuring JAX-RS Extensions for Dubbo REST Protocol\nDESCRIPTION: XML configuration to register JAX-RS Filters, Interceptors, or DynamicFeatures with Dubbo REST protocol. Multiple extensions can be specified with comma separation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.TraceInterceptor, xxx.TraceFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Dubbo Server Configuration\nDESCRIPTION: YAML configuration for Dubbo server specifying REST protocol and instance registration mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    address: nacos://127.0.0.1:8848\n    register-mode: instance\n  protocol:\n    name: rest\n    port: 8090\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Service Interface in Java\nDESCRIPTION: Defines the IDemoService interface shared between service provider and consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface IDemoService {\n    public Person get(int id);\n}\n```\n\n----------------------------------------\n\nTITLE: Routing Transaction Messages in Seata Go Coordinator\nDESCRIPTION: This snippet shows how transaction messages are routed to specific handlers in the DefaultCoordinator based on their type code. It includes handling for global transactions, branch transactions, and status reports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-seata.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nswitch msg.GetTypeCode() {\n  case protocal.TypeGlobalBegin:\n    req := msg.(protocal.GlobalBeginRequest)\n    resp := coordinator.doGlobalBegin(req, ctx)\n    return resp\n  case protocal.TypeGlobalStatus:\n    req := msg.(protocal.GlobalStatusRequest)\n    resp := coordinator.doGlobalStatus(req, ctx)\n    return resp\n  case protocal.TypeGlobalReport:\n    req := msg.(protocal.GlobalReportRequest)\n    resp := coordinator.doGlobalReport(req, ctx)\n    return resp\n  case protocal.TypeGlobalCommit:\n    req := msg.(protocal.GlobalCommitRequest)\n    resp := coordinator.doGlobalCommit(req, ctx)\n    return resp\n  case protocal.TypeGlobalRollback:\n    req := msg.(protocal.GlobalRollbackRequest)\n    resp := coordinator.doGlobalRollback(req, ctx)\n    return resp\n  case protocal.TypeBranchRegister:\n    req := msg.(protocal.BranchRegisterRequest)\n    resp := coordinator.doBranchRegister(req, ctx)\n    return resp\n  case protocal.TypeBranchStatusReport:\n    req := msg.(protocal.BranchReportRequest)\n    resp := coordinator.doBranchReport(req, ctx)\n    return resp\n  default:\n    return nil\n  }\n```\n\n----------------------------------------\n\nTITLE: Telnet QOS Command Example\nDESCRIPTION: Example of using telnet to connect to Dubbo QOS and execute the 'ls' command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/overview.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n➜  ~ telnet localhost 22222\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄\n  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███\n  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███\n  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███\n  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███\n  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███\n  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███\n  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀\n\n\ndubbo>ls\nAs Provider side:\n+----------------------------------+---+\n|       Provider Service Name      |PUB|\n+----------------------------------+---+\n|org.apache.dubbo.demo.DemoService| N |\n+----------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Generating Java Thread Dump for Dubbo Timeout Analysis\nDESCRIPTION: Command to generate a thread dump for analyzing stack information when troubleshooting Dubbo client timeout issues. The output is redirected to a log file for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/3/4.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Service Governance YAML Front Matter\nDESCRIPTION: YAML front matter defining document metadata including aliases, title, and weight for the Dubbo architecture documentation page.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/overview.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n    - /zh/overview/what/overview/\n    - /zh/docs3-v2/java-sdk/concepts-and-architecture/overall-architecture/\n    - /zh-cn/docs3-v2/java-sdk/concepts-and-architecture/overall-architecture/\n    - /zh-cn/overview/mannual/java-sdk/concepts-and-architecture/overall-architecture/\ndescription: \"\"\nlinkTitle: 概念与架构\ntitle: 了解 Dubbo 核心概念和架构\ntype: docs\nweight: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Version\nDESCRIPTION: Shows how to display the version number of the currently running Dubbo instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/command.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndubbo>version\ndubbo version \"3.0.10-SNAPSHOT\"\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Evaluating Registry Eligibility as Configuration Center in Dubbo\nDESCRIPTION: Determines if a registry can be used as a configuration center by checking explicit configuration and extension support. It evaluates parameters from registry configuration and checks if the protocol supports dynamic configuration through extension mechanisms.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/13-Dubbo的三大中心之配置中心.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean isUsedRegistryAsCenter(RegistryConfig registryConfig, Supplier<Boolean> usedRegistryAsCenter,\n                                           String centerType,\n                                           Class<?> extensionClass) {\n        final boolean supported;\n\t\t\t//这个useAsConfigCenter参数是来自注册中心的配置 如果配置了这个值则以这个值为准,如果配置了false则这个注册中心不能做为配置中心\n        Boolean configuredValue = usedRegistryAsCenter.get();\n        if (configuredValue != null) { // If configured, take its value.\n            supported = configuredValue.booleanValue();\n        } else {                       // Or check the extension existence\n        \t//这个逻辑的话是判断下注册中心的协议是否满足要求,我们例子代码中使用的是zookeeper\n            String protocol = registryConfig.getProtocol();\n            //这个扩展是否支持的逻辑判断是这样的扫描扩展类 看一下当前扩展类型是否有对应协议的扩展 比如在扩展文件里面这样配置过后是支持的 protocol=xxxImpl\n            //动态配置的扩展类型为:interface org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory\n            //zookeeper协议肯定是支持的因为zookeeper协议实现了这个动态配置工厂 ,这个扩展类型为ZookeeperDynamicConfigurationFactory\n            //代码位置在dubbo-configcenter-zookeeper包中的org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory扩展配置中内容为zookeeper=org.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory\n            supported = supportsExtension(extensionClass, protocol);\n            //配置中心走注册中心会打印一条日志\n            if (logger.isInfoEnabled()) {\n                logger.info(format(\"No value is configured in the registry, the %s extension[name : %s] %s as the %s center\"\n                    , extensionClass.getSimpleName(), protocol, supported ? \"supports\" : \"does not support\", centerType));\n            }\n        }\n\n\t\t//配置中心走注册中心会打印一条日志\n        if (logger.isInfoEnabled()) {\n            logger.info(format(\"The registry[%s] will be %s as the %s center\", registryConfig,\n                supported ? \"used\" : \"not used\", centerType));\n        }\n        return supported;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider in Java\nDESCRIPTION: Service implementation that returns a Person object for a given ID\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/events-notify.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass NormalDemoService implements IDemoService {\n    public Person get(int id) {\n        return new Person(id, \"charles`son\", 4);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ASC Signature for Source Package\nDESCRIPTION: Command to create a detached GPG signature file (ASC) for the source release package, which will be used to verify the authenticity of the package.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --armor --output apache-dubbo-${release_version}-src.zip.asc --detach-sig apache-dubbo-${release_version}-src.zip\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Dubbo Documentation\nDESCRIPTION: YAML front matter block defining metadata for a documentation page about Dubbo's registry center, service discovery and load balancing features. Includes aliases, description, title and page type configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/\n    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/\ndescription: Registry Center\nlinkTitle: Extension Implementation\ntitle: Registry Center, Service Discovery, and Load Balancing\ntype: docs\nweight: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Export in XML\nDESCRIPTION: XML configuration for exporting a Dubbo service. It declares the service implementation bean and exposes the interface to be available for remote procedure calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- service implementation, as same as regular local bean -->\n<bean id=\"demoService\" class=\"org.apache.dubbo.samples.provider.DemoServiceImpl\"/>\n\n<!-- declare the service interface to be exported -->\n<dubbo:service interface=\"org.apache.dubbo.samples.apisix.DemoService\" ref=\"demoService\"/>\n```\n\n----------------------------------------\n\nTITLE: Spring Cloud Controller with Multiple Client Options\nDESCRIPTION: Spring Cloud controller implementation showing both RestTemplate and OpenFeign usage for calling Dubbo services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-spring-cloud.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class UserController {\n    private final RestTemplate restTemplate;\n    private final UserServiceFeign userServiceFeign;\n\n    public UserController(RestTemplate restTemplate,\n                          UserServiceFeign userServiceFeign) {\n        this.restTemplate = restTemplate;\n        this.userServiceFeign = userServiceFeign;\n    }\n\n    @RequestMapping(\"/rest/test1\")\n    public String doRestAliveUsingEurekaAndRibbon() {\n        String url = \"http://dubbo-provider-for-spring-cloud/users/list\";\n        System.out.println(\"url: \" + url);\n        return restTemplate.getForObject(url, String.class);\n    }\n\n    @RequestMapping(\"/rest/test2\")\n    public List<User> doRestAliveUsingFeign() {\n        return userServiceFeign.getUsers();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ExtensionDirector's createExtensionLoader0 Method\nDESCRIPTION: Creates and caches an ExtensionLoader instance for a given type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate <T> ExtensionLoader<T> createExtensionLoader0(Class<T> type) {\n        checkDestroyed();\n        ExtensionLoader<T> loader;\n        extensionLoadersMap.putIfAbsent(type, new ExtensionLoader<T>(type, this, scopeModel));\n        loader = (ExtensionLoader<T>) extensionLoadersMap.get(type);\n        return loader;\n    }\n```\n\n----------------------------------------\n\nTITLE: ExtensionDirector's createExtensionLoader0 Method\nDESCRIPTION: Creates and caches an ExtensionLoader instance for a given type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate <T> ExtensionLoader<T> createExtensionLoader0(Class<T> type) {\n        checkDestroyed();\n        ExtensionLoader<T> loader;\n        extensionLoadersMap.putIfAbsent(type, new ExtensionLoader<T>(type, this, scopeModel));\n        loader = (ExtensionLoader<T>) extensionLoadersMap.get(type);\n        return loader;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing the @Reference Annotation in Dubbo\nDESCRIPTION: Shows the implementation of the @Reference annotation used to configure Dubbo service consumers, including all available properties for customization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.config.annotation;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE}) // #1\npublic @interface Reference {\n    Class<?> interfaceClass() default void.class; // #2\n    String interfaceName() default \"\"; // #3\n    String version() default \"\"; // #4\n    String group() default \"\"; // #5\n    String url() default \"\"; // #6\n    \n    String application() default \"\"; // #7\n    String module() default \"\"; // #8\n    String consumer() default \"\"; // #9\n    String protocol() default \"\"; // #10\n    String monitor() default \"\"; // #11\n    String[] registry() default {}; // #12\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Dubbo-go Client with Nacos Registry\nDESCRIPTION: Command to run the Dubbo-go client application that discovers and connects to the server through the Nacos registry center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ go run ./go-client/cmd/client.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocols in Dubbo using XML\nDESCRIPTION: This XML configuration shows how to set up multiple protocols (dubbo and triple) in a Dubbo application using Spring XML.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"dubbo-id\" name=\"dubbo\" port=\"20880\"/>\n<dubbo:protocol id=\"triple-id\" name=\"tri\" port=\"50051\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocols in Dubbo using XML\nDESCRIPTION: This XML configuration shows how to set up multiple protocols (dubbo and triple) in a Dubbo application using Spring XML.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/multi-protocols.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"dubbo-id\" name=\"dubbo\" port=\"20880\"/>\n<dubbo:protocol id=\"triple-id\" name=\"tri\" port=\"50051\"/>\n```\n\n----------------------------------------\n\nTITLE: Example of Dubbo Service Provider URL\nDESCRIPTION: Example URL structure used for a Dubbo service provider, showing all the parameters that are included when registering a service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\ndubbo://192.168.1.9:20880/link.elastic.dubbo.entity.DemoService?anyhost=true&application=dubbo-demo-api-provider&background=false&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=link.elastic.dubbo.entity.DemoService&methods=sayHello,sayHelloAsync&pid=19559&release=3.0.8&service-name-mapping=true&side=provider&timestamp=1654938441023\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Exchanger Extension\nDESCRIPTION: Directory structure for implementing a custom Exchanger extension in Dubbo, showing the required files and their organization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exchanger.md#2025-04-08_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxExchanger.java (implements Exchanger interface)\n                |-XxxExchangeServer.java (implements ExchangeServer interface)\n                |-XxxExchangeClient.java (implements ExchangeClient interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.remoting.exchange.Exchanger (plain text file, content: xxx=com.xxx.XxxExchanger)\n```\n\n----------------------------------------\n\nTITLE: Handling plain text requests in Triple\nDESCRIPTION: Example of a text/plain HTTP request. This format sends simple text content with charset encoding specification, useful for simple string data exchange.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/support-more-content-types.md#2025-04-08_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetString HTTP/1.1\nHost: 192.168.202.1:50052\nContent-Type: text/plain; charset=UTF-8\nContent-Length: 6\nAccept: application/json\nWorld!\n```\n\n----------------------------------------\n\nTITLE: Accessing the istiod container for debugging\nDESCRIPTION: Command to access the running istiod container in the Kubernetes cluster. This is the first step to setting up remote debugging of the pilot service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/dubbo-pilot.md#2025-04-08_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl  exec -it -n istio-system istiod-fd5d9f77-2ncjq bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Path for Dubbo REST Services\nDESCRIPTION: Shows how to set a base context path for all REST services using the contextpath attribute in protocol configuration. This creates a common prefix for all service URLs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" contextpath=\"services\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry with Dubbo Externalized Configuration\nDESCRIPTION: Properties file configuration showing how to set up Nacos as a registry center for Dubbo using the externalized configuration approach. The registry address uses the nacos:// protocol prefix.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n## application\ndubbo.application.name = your-dubbo-application\n\n## Nacos registry address\ndubbo.registry.address = nacos://10.20.153.10:8848\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Maven Project Structure for QoS Permission Checker\nDESCRIPTION: Directory structure for implementing a custom QoS Permission Checker extension in a Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/qos-permission.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxPermissionChecker.java (Implementing the PermissionChecker interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.permission.PermissionChecker` (Plain text file, content: qosPermissionChecker=com.xxx.XxxPermissionChecker)\n```\n\n----------------------------------------\n\nTITLE: 执行回声测试\nDESCRIPTION: 将任意Dubbo服务实例转换为EchoService接口并调用$echo方法执行回声测试。方法会将传入的参数作为响应返回，用于验证服务连接是否正常。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/echo-service.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nEchoService echoService = (EchoService) demoService;\n\nString status = (String) echoService.$echo(\"OK\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Registry Address in Dubbo XML\nDESCRIPTION: Demonstrates how to configure the Multicast registry address in Dubbo using XML. The address includes the multicast IP and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/multicast.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:registry address=\"multicast://224.5.6.7:1234\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Warned Classes via Telnet\nDESCRIPTION: Shows how to use telnet to connect to Dubbo QoS port 22222 and execute the serializeWarnedClasses command to view classes that triggered serialization warnings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222                          \nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>serializeWarnedClasses\nWarnedClasses: \nio.dubbo.test.NotSerializable\nio.dubbo.test2.NotSerializable\nio.dubbo.test2.OthersSerializable\norg.apache.dubbo.samples.NotSerializable\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Setting Request Tags in Java Consumer Code\nDESCRIPTION: Java code example showing how to set tags on the consumer side for routing requests to specific provider instances.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"gray\");\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Port via JVM Parameter\nDESCRIPTION: Sets the QOS module port to 33333 using a JVM parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n-Ddubbo.application.qos.port=33333\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Dubbo Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Dubbo core features. Includes aliases for URL routing, page description, title information, and navigation weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/overview/core-features/\n    - /en/overview/core-features/\ndescription: Dubbo Core Features\nlinkTitle: Features\ntitle: Dubbo Core Features\ntype: docs\nweight: 4\n```\n\n----------------------------------------\n\nTITLE: Analyzing Log4j Dependencies in dubbo-common Module\nDESCRIPTION: This XML snippet shows the dependency tree for the dubbo-common module, revealing optional dependencies on log4j-core and log4j-api. Users should check if log4j dependencies are enabled in their projects and upgrade accordingly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/log4j.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n[INFO] --- maven-dependency-plugin:3.1.2:tree (default-cli) @ dubbo-common ---\n[INFO] org.apache.dubbo:dubbo-common:jar:2.7.14-SNAPSHOT\n[INFO] +- org.apache.logging.log4j:log4j-api:jar:2.11.1:provided\n[INFO] \\- org.apache.logging.log4j:log4j-core:jar:2.11.1:provided\n```\n\n----------------------------------------\n\nTITLE: Accessing Dubbo Triple Protocol Service with cURL\nDESCRIPTION: This snippet demonstrates how to use a cURL command to access a Dubbo server's Triple protocol service. It sends a JSON payload to a specific endpoint using the HTTP POST method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"sentence\": \"Hello Dubbo.\"}' \\\n    https://host:port/org.apache.dubbo.sample.GreetService/sayHello\n```\n\n----------------------------------------\n\nTITLE: Adding Brave Tracer Dependency in Maven\nDESCRIPTION: XML configuration for adding the Brave tracer bridge dependency to a Maven project. This dependency enables Brave tracing functionality in Dubbo applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/29.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-tracing-bridge-brave</artifactId>\n    <optional>true</optional>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Startup Class for HelloService\nDESCRIPTION: Java class that initializes a Spring context from the hello-service.xml configuration file and starts the HelloService application. The service remains running until a key is pressed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.samples.service.hello;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\npublic class Application {\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/hello-service.xml\");\n        context.start();\n\n        System.out.println(\"Hello service started\");\n        // press any key to exit\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting URL and Publishing Metadata in Java\nDESCRIPTION: Method in ServiceConfig class that exports the URL and publishes service metadata to the registry center if the scope is not local.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nprivate void exportUrl(URL url, List<URL> registryURLs) {\n        String scope = url.getParameter(SCOPE_KEY);\n        // don't export when none is configured\n        ...省略到若干代码\n            if (!SCOPE_LOCAL.equalsIgnoreCase(scope)) {\n                url = exportRemote(url, registryURLs);\n                if (!isGeneric(generic) && !getScopeModel().isInternal()) {\n                    MetadataUtils.publishServiceDefinition(url, providerModel.getServiceModel(), getApplicationModel());\n                }\n            }\n        }\n        this.urls.add(url);\n    }\n```\n\n----------------------------------------\n\nTITLE: Exporting URL and Publishing Metadata in Java\nDESCRIPTION: Method in ServiceConfig class that exports the URL and publishes service metadata to the registry center if the scope is not local.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nprivate void exportUrl(URL url, List<URL> registryURLs) {\n        String scope = url.getParameter(SCOPE_KEY);\n        // don't export when none is configured\n        ...省略到若干代码\n            if (!SCOPE_LOCAL.equalsIgnoreCase(scope)) {\n                url = exportRemote(url, registryURLs);\n                if (!isGeneric(generic) && !getScopeModel().isInternal()) {\n                    MetadataUtils.publishServiceDefinition(url, providerModel.getServiceModel(), getApplicationModel());\n                }\n            }\n        }\n        this.urls.add(url);\n    }\n```\n\n----------------------------------------\n\nTITLE: Launching Dubbo Provider Application\nDESCRIPTION: Bootstrap class to start the Dubbo provider application using Spring's AnnotationConfigApplicationContext. It initializes the context with the ProviderConfiguration and keeps the application running.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class ProviderBootstrap {\n    public static void main(String[] args) throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class);\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Service Call with Spring XML in Dubbo\nDESCRIPTION: This snippet shows how to declare a generic service reference in Spring XML configuration by setting the generic attribute to true. This allows the consumer to call services without having the actual interface classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"userService\" interface=\"com.alibaba.dubbo.samples.generic.api.IUserService\" generic=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Service Call with Spring XML in Dubbo\nDESCRIPTION: This snippet shows how to declare a generic service reference in Spring XML configuration by setting the generic attribute to true. This allows the consumer to call services without having the actual interface classes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-generic-invoke.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"userService\" interface=\"com.alibaba.dubbo.samples.generic.api.IUserService\" generic=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Zookeeper Metadata Storage\nDESCRIPTION: Stores metadata in Zookeeper by creating a node with service definition data\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {\n   \t\t//使用zkClient创建一个节点数据为参数V v是前面说的服务定义数据\n        zkClient.create(getNodePath(metadataIdentifier), v, false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Zookeeper Metadata Storage\nDESCRIPTION: Stores metadata in Zookeeper by creating a node with service definition data\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate void storeMetadata(MetadataIdentifier metadataIdentifier, String v) {\n   \t\t//使用zkClient创建一个节点数据为参数V v是前面说的服务定义数据\n        zkClient.create(getNodePath(metadataIdentifier), v, false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing BusinessService with Transaction Logic in Java\nDESCRIPTION: Implementation of the main business logic that orchestrates the purchase flow. It coordinates between storage deduction and order creation services as part of a complete purchase transaction.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class BusinessServiceImpl implements BusinessService {\n\n    private StorageService storageService;\n\n    private OrderService orderService;\n\n    /**\n     * purchase\n     */\n    public void purchase(String userId, String commodityCode, int orderCount) {\n\n        storageService.deduct(commodityCode, orderCount);\n\n        orderService.create(userId, commodityCode, orderCount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractServiceDiscovery with Service Name in Java\nDESCRIPTION: Overloaded constructor for AbstractServiceDiscovery that initializes service name, metadata info, and metadata cache manager.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic AbstractServiceDiscovery(String serviceName, URL registryURL) {\n        this.applicationModel = ApplicationModel.defaultModel();\n        this.registryURL = registryURL;\n        this.serviceName = serviceName;\n        this.metadataInfo = new MetadataInfo(serviceName);\n        this.metaCacheManager = new MetaCacheManager(getCacheNameSuffix(),\n            applicationModel.getFrameworkModel().getBeanFactory()\n            .getBean(FrameworkExecutorRepository.class).getCacheRefreshingScheduledExecutor());\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Maven Project Structure for QoS Permission Checker\nDESCRIPTION: Directory structure for implementing a custom QoS Permission Checker extension in a Maven project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/qos-permission.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxPermissionChecker.java (Implementing the PermissionChecker interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.qos.permission.PermissionChecker` (Plain text file, content: qosPermissionChecker=com.xxx.XxxPermissionChecker)\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Format in Dubbo Protocol\nDESCRIPTION: Example of an HTTP POST request format in Dubbo protocol, showing required headers including rest-service-version and rest-service-group for service uniqueness identification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/http.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /test/path  HTTP/1.1\nHost: localhost:8080\nContent-type: application/json\nAccept: text/html\nrest-service-version: 1.0.0\nrest-service-group: dubbo\n\n{\"name\":\"dubbo\",\"age\":10,\"address\":\"hangzhou\"}\n```\n\n----------------------------------------\n\nTITLE: Managing GPG Keys for Apache Release\nDESCRIPTION: Commands to view, send, and manage GPG keys including finding key IDs, sending keys to key servers, and setting default keys for signing Apache releases.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ gpg --list-keys\npub   rsa4096/28681CB1 2018-04-26 # 28681CB1就是key id\nuid       [ultimate] liujun (apache-dubbo) <liujun@apache.org>\nsub   rsa4096/D3D6984B 2018-04-26\n\n# 通过key id发送public key到keyserver\n$ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1\n# 其中，pgpkeys.mit.edu为随意挑选的keyserver，keyserver列表为：https://sks-keyservers.net/status/，为相互之间是自动同步的，选任意一个都可以。\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Logger for Dubbo REST Logging\nDESCRIPTION: Alternative Log4j XML configuration that enables INFO level logging at the root level. This will show HTTP logs along with all other INFO level logs.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n\t<level value=\"INFO\" />\n\t<appender-ref ref=\"CONSOLE\"/>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Setting Dubbo Admin Console Core Properties\nDESCRIPTION: Key configuration properties for specifying the addresses of config center, registry, and metadata center in the Dubbo admin console.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/introduction.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nadmin.config-center=zookeeper://127.0.0.1:2181\nadmin.registry.address=zookeeper://127.0.0.1:2181\nadmin.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Async Method\nDESCRIPTION: XML configuration to enable async execution for a specific method in the service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-call.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"asyncService\" interface=\"org.apache.dubbo.samples.governance.api.AsyncService\">\n      <dubbo:method name=\"sayHello\" async=\"true\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Specifying Direct Connection via JVM -D Parameter in Dubbo\nDESCRIPTION: This command demonstrates how to use a JVM -D parameter to specify a direct connection to a service provider. The key is the service name, and the value is the provider's URL. This configuration has the highest priority.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/explicit-target.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njava -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890\n```\n\n----------------------------------------\n\nTITLE: Adding XML Root Element Annotation for REST Services in Java\nDESCRIPTION: Demonstrates how to add the @XmlRootElement annotation to a Java class to enable XML serialization through JAXB for JAX-RS implementations in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class User implements Serializable {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Profile for Native Image Build\nDESCRIPTION: Maven profile configuration that includes necessary plugins for native image compilation including maven-compiler-plugin, spring-boot-maven-plugin, native-maven-plugin, and dubbo-maven-plugin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <profiles>\n        <profile>\n            <id>native</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-compiler-plugin</artifactId>\n                        <configuration>\n                            <release>17</release>\n                            <fork>true</fork>\n                            <verbose>true</verbose>\n                        </configuration>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.springframework.boot</groupId>\n                        <artifactId>spring-boot-maven-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <id>process-aot</id>\n                                <goals>\n                                    <goal>process-aot</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.graalvm.buildtools</groupId>\n                        <artifactId>native-maven-plugin</artifactId>\n                        <version>0.9.25</version>\n                        <configuration>\n                            <classesDirectory>${project.build.outputDirectory}</classesDirectory>\n                            <metadataRepository>\n                                <enabled>true</enabled>\n                            </metadataRepository>\n                            <requiredVersion>22.3</requiredVersion>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>add-reachability-metadata</id>\n                                <goals>\n                                    <goal>add-reachability-metadata</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>org.apache.dubbo</groupId>\n                        <artifactId>dubbo-maven-plugin</artifactId>\n                        <version>${dubbo.version}</version>\n                        <configuration>\n                            <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <phase>process-sources</phase>\n                                <goals>\n                                    <goal>dubbo-process-aot</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Tag in Dubbo Provider XML Configuration\nDESCRIPTION: Example of how to specify a static tag for a Dubbo provider or service using XML configuration. This sets a 'gray' tag that will be used for routing requests.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider tag=\"gray\"/>\n\n<!-- or -->\n\n<dubbo:service tag=\"gray\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application in YAML\nDESCRIPTION: This YAML configuration sets up the Dubbo application properties, including the application name, protocol settings (using dubbo protocol with dynamic port allocation), and registry configuration pointing to a local ZooKeeper instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/service-definition.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-demo\n  protocol:\n    name: dubbo\n    port: -1\n  registry:\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer to Use Custom LoadBalance\nDESCRIPTION: XML configuration to tell a consumer to use the custom load balancing strategy for a specific service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-loadbalance.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"helloService\" interface=\"com.demo.dubbo.api.IHelloService\" loadbalance=\"demo\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Route Rules to ZooKeeper in Java\nDESCRIPTION: This code demonstrates how to register routing rules to a ZooKeeper registry. It shows the process of creating a registry factory, getting a registry instance, and registering a condition-based routing rule.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/routing-rule-deprecated.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"route://0.0.0.0/com.foo.BarService?category=routers&dynamic=false&rule=\" + URL.encode(\"host = 10.20.153.10 => host = 10.20.153.11\")));\n```\n\n----------------------------------------\n\nTITLE: Pixiu Core Configuration Structure\nDESCRIPTION: Main YAML configuration showing the core components including listener, filters, and Dubbo proxy settings. Demonstrates static resource configuration with HTTP listener and Dubbo proxy integration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/configurations.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8883\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"*\"\n                http_filters:\n                  - name: dgp.filter.http.dubboproxy\n                    config:\n                      dubboProxyConfig:\n                        auto_resolve: true\n                        registries:\n                          \"zookeeper\":\n                            protocol: \"zookeeper\"\n                            timeout: \"3s\"\n                            address: \"127.0.0.1:2181\"\n                            username: \"\"\n                            password: \"\"\n```\n\n----------------------------------------\n\nTITLE: Example Response for Partial Failed Broadcast in Dubbo\nDESCRIPTION: Sample output showing a mixed response when one provider fails with an exception. The response includes both successful data and exception messages from providers, demonstrating how broadcast2 collects all responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/broadcast-resp-collect.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n>curl http://localhost:8081/health\n>{broadcast.results=[{\"ip\":\"10.220.47.253\",\"port\":20880,\"data\":\"i am provider1\"},{\"ip\":\"10.220.47.253\",\"port\":20881,\"exceptionMsg\":\"/ by zero\"}]}|success%     \n```\n\n----------------------------------------\n\nTITLE: Registry Configuration with Behavior Control\nDESCRIPTION: Configuration example showing how to disable default behavior of using registry as config and metadata center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/overview.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n registry\n  address: nacos://localhost:8848\n  use-as-config-center: false\n  use-as-metadata-report: false\n config-center\n   address: apollo://localhost:8848\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper Server Command\nDESCRIPTION: Command to start a local Zookeeper server instance required for Dubbo service registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ zkServer start\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Report Instance in Dubbo\nDESCRIPTION: The init method in MetadataReportInstance initializes metadata reporting by processing configurations, determining metadata type, retrieving factory extensions, and initializing metadata reports for each config.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n public void init(List<MetadataReportConfig> metadataReportConfigs) {\n \t\t//CAS判断是否有初始化过\n        if (!init.compareAndSet(false, true)) {\n            return;\n        }\n\t\t//元数据类型配置如果未配置则默认为local \n        this.metadataType = applicationModel.getApplicationConfigManager().getApplicationOrElseThrow().getMetadataType();\n        if (metadataType == null) {\n            this.metadataType = DEFAULT_METADATA_STORAGE_TYPE;\n        }\n\t\t//获取MetadataReportFactory 工厂类型\n        MetadataReportFactory metadataReportFactory = applicationModel.getExtensionLoader(MetadataReportFactory.class).getAdaptiveExtension();\n        \t//多元数据中心初始化\n        for (MetadataReportConfig metadataReportConfig : metadataReportConfigs) {\n            init(metadataReportConfig, metadataReportFactory);\n        }\n    }\n\t\n    private void init(MetadataReportConfig config, MetadataReportFactory metadataReportFactory) {\n    //配置转url\n        URL url = config.toUrl();\n        if (METADATA_REPORT_KEY.equals(url.getProtocol())) {\n            String protocol = url.getParameter(METADATA_REPORT_KEY, DEFAULT_DIRECTORY);\n            url = URLBuilder.from(url)\n                    .setProtocol(protocol)\n                    .setScopeModel(config.getScopeModel())\n                    .removeParameter(METADATA_REPORT_KEY)\n                    .build();\n        }\n        url = url.addParameterIfAbsent(APPLICATION_KEY, applicationModel.getCurrentConfig().getName());\n        String relatedRegistryId = isEmpty(config.getRegistry()) ? (isEmpty(config.getId()) ? DEFAULT_KEY : config.getId()) : config.getRegistry();\n \t\t//从元数据工厂中获取元数据\n        MetadataReport metadataReport = metadataReportFactory.getMetadataReport(url);\n        //缓存元数据到内存\n        if (metadataReport != null) {\n            metadataReports.put(relatedRegistryId, metadataReport);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing Metadata Report Instance in Dubbo\nDESCRIPTION: The init method in MetadataReportInstance initializes metadata reporting by processing configurations, determining metadata type, retrieving factory extensions, and initializing metadata reports for each config.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n public void init(List<MetadataReportConfig> metadataReportConfigs) {\n \t\t//CAS判断是否有初始化过\n        if (!init.compareAndSet(false, true)) {\n            return;\n        }\n\t\t//元数据类型配置如果未配置则默认为local \n        this.metadataType = applicationModel.getApplicationConfigManager().getApplicationOrElseThrow().getMetadataType();\n        if (metadataType == null) {\n            this.metadataType = DEFAULT_METADATA_STORAGE_TYPE;\n        }\n\t\t//获取MetadataReportFactory 工厂类型\n        MetadataReportFactory metadataReportFactory = applicationModel.getExtensionLoader(MetadataReportFactory.class).getAdaptiveExtension();\n        \t//多元数据中心初始化\n        for (MetadataReportConfig metadataReportConfig : metadataReportConfigs) {\n            init(metadataReportConfig, metadataReportFactory);\n        }\n    }\n\t\n    private void init(MetadataReportConfig config, MetadataReportFactory metadataReportFactory) {\n    //配置转url\n        URL url = config.toUrl();\n        if (METADATA_REPORT_KEY.equals(url.getProtocol())) {\n            String protocol = url.getParameter(METADATA_REPORT_KEY, DEFAULT_DIRECTORY);\n            url = URLBuilder.from(url)\n                    .setProtocol(protocol)\n                    .setScopeModel(config.getScopeModel())\n                    .removeParameter(METADATA_REPORT_KEY)\n                    .build();\n        }\n        url = url.addParameterIfAbsent(APPLICATION_KEY, applicationModel.getCurrentConfig().getName());\n        String relatedRegistryId = isEmpty(config.getRegistry()) ? (isEmpty(config.getId()) ? DEFAULT_KEY : config.getId()) : config.getRegistry();\n \t\t//从元数据工厂中获取元数据\n        MetadataReport metadataReport = metadataReportFactory.getMetadataReport(url);\n        //缓存元数据到内存\n        if (metadataReport != null) {\n            metadataReports.put(relatedRegistryId, metadataReport);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Upstream for Dubbo Provider in APISIX\nDESCRIPTION: HTTP request to create an upstream in APISIX that points to the Dubbo Provider. This defines where APISIX will route the Dubbo traffic after converting from HTTP.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9180/apisix/admin/upstreams/1  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '\n{\n    \"nodes\": {\n        \"127.0.0.1:20880\": 1\n    },\n    \"type\": \"roundrobin\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Method-Level Timeout on Provider Side\nDESCRIPTION: Specifies a 5-second timeout for the sayHello method in DemoService implementation on the provider side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/timeout.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DubboService(methods = {@Method(name = \"sayHello\", timeout = 5000)})\npublic class DemoServiceImpl implements DemoService{}\n```\n\n----------------------------------------\n\nTITLE: 配置基于区域的条件路由规则\nDESCRIPTION: 为特定服务配置条件路由规则，将请求路由到与消费端相同区域的提供方实例，通过 $region 变量引用消费端的区域值。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - '=> region = $region'\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper Docker Container\nDESCRIPTION: Command to run Zookeeper in a Docker container exposing port 2181.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm --name zookeeper -p 2181:2181 zookeeper\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Filter in Java\nDESCRIPTION: Demonstrates how to implement a Filter that supports the asynchronous Filter chain by overriding the onResponse method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = {Constants.PROVIDER, Constants.CONSUMER})\npublic class AsyncPostprocessFilter implements Filter {\n\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        return invoker.invoke(invoker, invocation);\n    }\n\n    @Override\n    public Result onResponse(Result result, Invoker<?> invoker, Invocation invocation) {\n        System.out.println(\"Filter get the return value: \" + result.getValue());\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Zookeeper Configuration File\nDESCRIPTION: Basic configuration settings for Zookeeper's zoo.cfg file. It defines essential parameters like tickTime (heartbeat interval), clientPort (listening port), and disables the admin server to prevent port conflicts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ntickTime=2000\nclientPort=2181\nadmin.enableServer=false\n```\n\n----------------------------------------\n\nTITLE: Testing Advanced Triple Rest Service with curl\nDESCRIPTION: Command to test a more advanced REST service with POST data, header parameters, and URL parameters, demonstrating content negotiation through file extension.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/tripe-rest-manual.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"c: 3\" -d 'name=Yang' \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr\"\n# 输出如下\n#> POST /org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr HTTP/1.1\n#> Host: 127.0.0.1:8081\n#> User-Agent: curl/8.7.1\n#> Accept: */*\n#> c: 3\n#> Content-Length: 9\n#> Content-Type: application/x-www-form-urlencoded\n#>\n#* upload completely sent off: 9 bytes\n#< HTTP/1.1 200 OK\n#< content-type: text/plain\n#< alt-svc: h2=\":8081\"\n#< content-length: 17\n#<\n#Hello Mr. Yang, 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer for Callback Service\nDESCRIPTION: Simple XML configuration for the Dubbo service consumer to reference the callback service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"callbackService\" interface=\"com.callback.CallbackService\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum HTTP Connections for Tomcat REST Server\nDESCRIPTION: Limits the maximum number of concurrent HTTP connections that a Tomcat-based REST server can accept. This provides basic protection against connection overload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" accepts=\"500\" server=\"tomcat/>\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with cURL\nDESCRIPTION: cURL command to make HTTP request to the Dubbo service endpoint\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '[\"Dubbo\"]' \\\n    http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi/\n```\n\n----------------------------------------\n\nTITLE: Implementing StartupProbe Interface in Java\nDESCRIPTION: Example of implementing the StartupProbe interface for a custom startup probe in Dubbo QOS. The check() method should be implemented to define the startup check logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/startup.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \npublic class XxxStartupProbe implements StartupProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Monitoring Components with Helm\nDESCRIPTION: Installs Grafana and Prometheus components for Dubbo monitoring using Helm.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin-grafana dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-prometheus dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Building Proto Files for DubboGo\nDESCRIPTION: Commands to generate Go code from protocol buffer definitions using protoc compiler.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/configuration/file.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd path_to_dubbogo-sample/config_yaml/proto\nprotoc --go_out=. --go-triple_out=. ./greet.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Telnet Extensions in Dubbo XML\nDESCRIPTION: XML configuration for enabling telnet handlers in Dubbo protocol and provider settings\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol telnet=\"xxx,yyy\" />\n<!-- Default value setting, when <dubbo:protocol> does not configure the telnet attribute, use this configuration -->\n<dubbo:provider telnet=\"xxx,yyy\" />\n```\n\n----------------------------------------\n\nTITLE: Business-Based Service Isolation Example\nDESCRIPTION: XML configuration showing how to register different services to different registries based on business requirements, separating services for different sites.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Multi-registry configuration -->\n<dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n<dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n<!-- Register to the Chinese site registry -->\n<dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"chinaRegistry\" />\n<!-- Register to the international site registry -->\n<dubbo:service interface=\"com.alibaba.hello.api.DemoService\" version=\"1.0.0\" ref=\"demoService\" registry=\"intlRegistry\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Zookeeper Container Shell\nDESCRIPTION: Command to access the Zookeeper container's shell for running Zookeeper commands and management tools.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it zookeeper bash\n```\n\n----------------------------------------\n\nTITLE: Extracting Zookeeper Archive in Local Installation\nDESCRIPTION: Commands to extract the downloaded Zookeeper archive file and navigate to the extracted directory. This is the first step after downloading Zookeeper for local installation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntar -zxvf apache-zookeeper-3.8.3.tar.gz\ncd apache-zookeeper-3.8.3\n```\n\n----------------------------------------\n\nTITLE: Implementing AdaptiveExtensionFactory for Flexible Extension Resolution\nDESCRIPTION: This adaptive implementation of ExtensionFactory delegates to all available ExtensionFactory implementations. It tries each factory in sequence until it finds the requested extension. This enables Dubbo to load extensions from multiple sources including SPI and Spring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Adaptive\npublic class AdaptiveExtensionFactory implements ExtensionFactory {\n\n    private final List<ExtensionFactory> factories;\n\n    public AdaptiveExtensionFactory() {\n        ExtensionLoader<ExtensionFactory> loader = ExtensionLoader.getExtensionLoader(ExtensionFactory.class);\n        List<ExtensionFactory> list = new ArrayList<ExtensionFactory>();\n        for (String name : loader.getSupportedExtensions()) {\n            list.add(loader.getExtension(name));\n        }\n        factories = Collections.unmodifiableList(list);\n    }\n\n    public <T> T getExtension(Class<T> type, String name) {\n        for (ExtensionFactory factory : factories) {\n            T extension = factory.getExtension(type, name);\n            if (extension != null) {\n                return extension;\n            }\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Vite Development Server\nDESCRIPTION: Command to start the Vite development server which serves the React application with hot module replacement for development.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/web-sdk/quick-start.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Global Plugin Processing\nDESCRIPTION: Global plugin implementation that constructs context information for request processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.global.GlobalPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Compression in Getty\nDESCRIPTION: Code snippet showing how WebSocket compression is handled in the Getty library, addressing CPU usage issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-getty.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/alexstocks/getty/blob/master/conn.go#L527\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Compression in Getty\nDESCRIPTION: Code snippet showing how WebSocket compression is handled in the Getty library, addressing CPU usage issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-getty.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nhttps://github.com/alexstocks/getty/blob/master/conn.go#L527\n```\n\n----------------------------------------\n\nTITLE: RPC Message Writing\nDESCRIPTION: Implementation for writing RPC response messages and handling exceptions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.response.strategy.RPCMessageWriter#writeWith()\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Fixed Token Authorization in Dubbo XML\nDESCRIPTION: Sets up token authorization for a specific service using a fixed token value. This acts as a password for the specified service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/token-authorization.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Port Multi-Protocol Support in Dubbo\nDESCRIPTION: Configuration for publishing both Dubbo and Triple protocols on a single port. This allows backward compatibility while enabling newer protocol features without requiring additional ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Port Multi-Protocol Support in Dubbo\nDESCRIPTION: Configuration for publishing both Dubbo and Triple protocols on a single port. This allows backward compatibility while enabling newer protocol features without requiring additional ports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    ext-protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Extracting Zookeeper Archive for Local Installation\nDESCRIPTION: Commands to extract the downloaded Zookeeper archive file and navigate to the installation directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntar -zxvf apache-zookeeper-3.8.3.tar.gz\ncd apache-zookeeper-3.8.3\n```\n\n----------------------------------------\n\nTITLE: Maven项目结构示例\nDESCRIPTION: 展示了实现Dubbo Dispatcher扩展时的Maven项目目录结构，包括Java实现类和SPI配置文件的位置。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/impls/dispatcher.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxDispatcher.java (实现Dispatcher接口)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.remoting.Dispatcher (纯文本文件，内容为：xxx=com.xxx.XxxDispatcher)\n```\n\n----------------------------------------\n\nTITLE: Committing Release Artifacts to Apache SVN\nDESCRIPTION: Commands to check the status of local SVN repository and commit the prepared release candidates to the Apache SVN server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ svn status\n$ svn commit -m 'prepare for ${release_version} RC1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Service to Use RMI Protocol\nDESCRIPTION: XML configuration to specify that a particular service should use the RMI protocol in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service protocol=\"rmi\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Same Region Priority Rule in YAML\nDESCRIPTION: This YAML configuration sets up a conditional routing rule for same region priority. It uses the 'region' identifier to match service providers in the same region as the consumer. If no matching providers are found, it allows cross-region calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/region.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nforce: false\nkey: org.apache.dubbo.samples.CommentService\nconditions:\n  - '=> region = $region'\n```\n\n----------------------------------------\n\nTITLE: Configuring ReferenceConfig for Generic Invocation in Go\nDESCRIPTION: Sets up a ReferenceConfig for generic invocation, including registry and service configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc newRefConf(appName, iface, protocol string) config.ReferenceConfig {\n\tregistryConfig := &config.RegistryConfig{\n\t\tProtocol: \"zookeeper\",\n\t\tAddress:  \"127.0.0.1:2181\",\n\t}\n\n\trefConf := config.ReferenceConfig{\n\t\tInterfaceName: iface,\n\t\tCluster:       \"failover\",\n\t\tRegistry:      []string{\"zk\"},\n\t\tProtocol:      protocol,\n\t\tGeneric:       \"true\",\n\t}\n\n\trootConfig := config.NewRootConfig(config.WithRootRegistryConfig(\"zk\", registryConfig))\n\t_ = rootConfig.Init()\n\t_ = refConf.Init(rootConfig)\n\trefConf.GenericLoad(appName)\n\n\treturn refConf\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activated Extensions with URL, Key, and Group\nDESCRIPTION: Overloaded method to get activated extensions using URL, key, and group parameters. It extracts values from the URL and calls another method with split values.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/7-Dubbo的SPI扩展机制之自动激活扩展Activate源码解析.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic List<T> getActivateExtension(URL url, String key, String group) {\n    String value = url.getParameter(key);\n    return getActivateExtension(url, StringUtils.isEmpty(value) ? null : COMMA_SPLIT_PATTERN.split(value), group);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Logging in Dubbo\nDESCRIPTION: XML configuration for enabling HTTP request/response logging in Dubbo REST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Configuration Center in Dubbo (YAML)\nDESCRIPTION: YAML configuration to enable Zookeeper as the configuration center for Dubbo. It specifies the Zookeeper address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  config-center\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Probes for Dubbo Applications\nDESCRIPTION: This YAML configuration demonstrates how to set up liveness, readiness, and startup probes for a Dubbo application running in Kubernetes. The probes connect to Dubbo's QOS module on port 22222 with different endpoints for each probe type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/brief.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /live\n    port: 22222\n  initialDelaySeconds: 5\n  periodSeconds: 5\nreadinessProbe:\n  httpGet:\n    path: /ready\n    port: 22222\n  initialDelaySeconds: 5\n  periodSeconds: 5\nstartupProbe:\n  httpGet:\n    path: /startup\n    port: 22222\n  failureThreshold: 30\n  periodSeconds: 10\n```\n\n----------------------------------------\n\nTITLE: 启动和停止Zookeeper (Shell)\nDESCRIPTION: 用于启动和停止Zookeeper服务器的Shell命令。这些命令使用Zookeeper提供的脚本来控制服务器的运行状态。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/zookeeper.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./bin/zkServer.sh start\n```\n\nLANGUAGE: sh\nCODE:\n```\n./bin/zkServer.sh stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Serialization Protocol in XML\nDESCRIPTION: Example of configuring serialization protocols using Dubbo XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider serialization=\"hessian2\" prefer-serialization=\"fastjson2,hessian2\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting with QoS Protocol Wrapper in Java\nDESCRIPTION: This method handles the export process with QoS (Quality of Service) considerations, starting the QoS server for registry exports.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/16-模块发布器发布服务全过程.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n         //注册中心导出的时候开启QOS 默认端口22222\n        if (UrlUtils.isRegistry(invoker.getUrl())) {\n            startQosServer(invoker.getUrl());\n            return protocol.export(invoker);\n        }\n        return protocol.export(invoker);\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Redis Registry using Telnet\nDESCRIPTION: Commands to interact with the Redis registry using Telnet, retrieving provider information for a specific service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/install/redis.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntelnet 127.0.0.1 6379\nhgetall /dubbo/com.foo.BarService/providers\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Provider with @Service Annotation in Dubbo\nDESCRIPTION: Demonstrates a complete implementation of a service provider using the @Service annotation to expose it as a Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class AnnotatedGreetingService implements GreetingService {\n    public String sayHello(String name) {\n        return \"hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: This code snippet defines the HelloService interface for a Dubbo service. It declares a single method sayHello that takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/tracing-with-skywalking.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage org.apache.skywalking.demo.interfaces;\n\npublic interface HelloService {\n\tString sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Extension Instance\nDESCRIPTION: Helper method that creates and injects dependencies into a new adaptive extension instance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate T createAdaptiveExtension() {        \n    return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Registry in Properties File\nDESCRIPTION: Configures the Nacos registry address and register mode in dubbo.properties file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.address=nacos://localhost:8848\ndubbo.registry.register-mode=instance\n```\n\n----------------------------------------\n\nTITLE: Defining Streaming Methods in Protocol Buffers for Dubbo\nDESCRIPTION: Protocol Buffer definition for a GreetService that includes unary and streaming methods. This showcases how to define server, client, and bidirectional streaming methods in proto file for Dubbo-go streaming communication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n  rpc GreetStream(stream GreetStreamRequest) returns (stream GreetStreamResponse) {}\n  rpc GreetClientStream(stream GreetClientStreamRequest) returns (GreetClientStreamResponse) {}\n  rpc GreetServerStream(GreetServerStreamRequest) returns (stream GreetServerStreamResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExporterListener Interface in Java\nDESCRIPTION: Sample Java implementation of the ExporterListener interface. Handles the exported and unexported events when services are published or unpublished.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/exporter-listener.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n \nimport org.apache.dubbo.rpc.ExporterListener;\nimport org.apache.dubbo.rpc.Exporter;\nimport org.apache.dubbo.rpc.RpcException;\n \n \npublic class XxxExporterListener implements ExporterListener {\n    public void exported(Exporter<?> exporter) throws RpcException {\n        // ...\n    }\n    public void unexported(Exporter<?> exporter) throws RpcException {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty IO Worker Thread Count\nDESCRIPTION: XML configuration for specifying the number of Netty IO worker threads in addition to the regular thread pool size, applicable only when using the Netty server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" iothreads=\"5\" threads=\"100\"/>\n```\n\n----------------------------------------\n\nTITLE: Listing Child Nodes in Zookeeper\nDESCRIPTION: Command to list all child nodes under the '/hello-zone' path, showing it currently has no children.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nls /hello-zone\n```\n\n----------------------------------------\n\nTITLE: Implementing Protobuf Serialization in Dubbo Python Client\nDESCRIPTION: Demonstrates how to use protobuf serialization in a Dubbo Python client. It sets up a GreeterServiceStub with custom serializer and deserializer functions for the 'sayHello' method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GreeterServiceStub:\n    def __init__(self, client: dubbo.Client):\n        self.unary = client.unary(\n            method_name=\"sayHello\",\n            request_serializer=greeter_pb2.GreeterRequest.SerializeToString,\n            response_deserializer=greeter_pb2.GreeterReply.FromString,\n        )\n\n    def say_hello(self, request):\n        return self.unary(request)\n\n\nif __name__ == \"__main__\":\n    reference_config = ReferenceConfig.from_url(\n        \"tri://127.0.0.1:50051/org.apache.dubbo.samples.proto.Greeter\"\n    )\n    dubbo_client = dubbo.Client(reference_config)\n\n    stub = GreeterServiceStub(dubbo_client)\n    result = stub.say_hello(greeter_pb2.GreeterRequest(name=\"hello\"))\n    print(result.message)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings using DubboBootstrap API\nDESCRIPTION: This snippet demonstrates how to configure global settings for a Dubbo application using the DubboBootstrap API. It includes settings for registry, protocol, config center, metadata report, metrics, SSL, provider, and consumer configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/api.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// 注册中心\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"zookeeper://192.168.10.1:2181\");\n...\n  \n// 服务提供者协议配置\nProtocolConfig protocol = new ProtocolConfig();\nprotocol.setName(\"dubbo\");\nprotocol.setPort(12345);\nprotocol.setThreads(200);\n...\n  \n// 配置中心\nConfigCenterConfig configCenter = new ConfigCenterConfig();\nconfigCenter.setAddress(\"zookeeper://192.168.10.2:2181\");\n...\n  \n// 元数据中心\nMetadataReportConfig metadataReport = new MetadataReportConfig();\nmetadataReport.setAddress(\"zookeeper://192.168.10.3:2181\");\n...\n  \n// Metrics\nMetricsConfig metrics = new MetricsConfig();\nmetrics.setProtocol(\"dubbo\");\n...\n  \n// SSL\nSslConfig ssl = new SslConfig();\nssl.setServerKeyCertChainPath(\"/path/ssl/server-key-cert-chain\");\nssl.setServerPrivateKeyPath(\"/path/ssl/server-private-key\");\n...\n  \n// Provider配置（ServiceConfig默认配置）\nProviderConfig provider = new ProviderConfig();\nprovider.setGroup(\"demo\");\nprovider.setVersion(\"1.0.0\");\n...\n  \n// Consumer配置（ReferenceConfig默认配置）\nConsumerConfig consumer = new ConsumerConfig();\nconsumer.setGroup(\"demo\");\nconsumer.setVersion(\"1.0.0\");\nconsumer.setTimeout(2000);\n...\n  \nDubboBootstrap.getInstance()\n    .application(\"demo-app\")\n    .registry(registry)\n    .protocol(protocol)\n    .configCenter(configCenter)\n    .metadataReport(metadataReport)\n    .module(new ModuleConfig(\"module\"))\n    .metrics(metrics)\n  \t.ssl(ssl)\n  \t.provider(provider)\n  \t.consumer(consumer)\n  \t...\n  \t.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Registry with Multiple Servers in Dubbo XML\nDESCRIPTION: Configuration for Redis registry with multiple servers using protocol and comma-separated addresses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/redis.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry protocol=\"redis\" address=\"10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Initiating Remote Calls with Dubbo Consumer\nDESCRIPTION: Demonstrates how to initiate remote calls using a Dubbo service consumer. It starts a Spring context, retrieves the consumer bean, and makes a remote call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\npublic class ConsumerBootstrap {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class); // #1\n        context.start(); // #2\n        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class); // #3\n        String hello = greetingServiceConsumer.doSayHello(\"annotation\"); // #4\n        System.out.println(\"result: \" + hello); // #5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Generic Invocation in Go\nDESCRIPTION: Demonstrates how to perform a generic invocation using the configured ReferenceConfig and GenericService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nrefConf := newRefConf(\"example.dubbo.io\", \"org.apache.dubbo.sample.UserProvider\", \"tri\")\n\nresp, err := refConf.\n\tGetRPCService().(*generic.GenericService).\n\tInvoke(\n\t\tcontext.TODO(),\n\t\t\"GetUser\",\n\t\t[]string{\"java.lang.String\"},\n\t\t[]hessian.Object{\"A003\"},\n    )\n```\n\n----------------------------------------\n\nTITLE: Dubbo No Provider Exception Example\nDESCRIPTION: Example of the IllegalStateException thrown when no service provider is available for a Dubbo service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.samples.api.GreetingsService. No provider available for the service org.apache.dubbo.samples.api.GreetingsService from the url consumer://*** to the consumer 30.221.146.226 use dubbo version 3.2.0-beta.4\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Aggregation for Dubbo Applications in Java\nDESCRIPTION: Java implementation of the AggregateMetricsCollector class that handles metrics aggregation in Dubbo applications. This class manages various performance counters and implements both MetricsCollector and MetricsListener interfaces to collect and process metrics data.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/metrics.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class AggregateMetricsCollector implements MetricsCollector, MetricsListener {\n    private int bucketNum;\n    private int timeWindowSeconds;\n\n    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();\n\n    private final ApplicationModel applicationModel;\n\n    private static final Integer DEFAULT_COMPRESSION = 100;\n    private static final Integer DEFAULT_BUCKET_NUM = 10;\n    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;\n\n//在构造函数中解析配置信息\n\n    public AggregateMetricsCollector(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        ConfigManager configManager = applicationModel.getApplicationConfigManager();\n        MetricsConfig config = configManager.getMetrics().orElse(null);\n        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {\n            // only registered when aggregation is enabled.\n            registerListener();\n\n            AggregationConfig aggregation = config.getAggregation();\n            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();\n            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format Example of Wrapped Return Value\nDESCRIPTION: Demonstrates the JSON format of a return value when using a wrapper object. The wrapper ensures a structured JSON object is returned rather than a primitive value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\"id\": 1001}\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin Components\nDESCRIPTION: Commands for installing Dubbo Admin components using default or custom manifests\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install # Install using default manifests\n\n# or\n\ndubboctl manifests | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Properties\nDESCRIPTION: Defines externalized configuration properties for a Dubbo service provider, including service version and name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# Provider @Service version\ndemo.service.version=1.0.0\ndemo.service.name = demoService\n```\n\n----------------------------------------\n\nTITLE: Installing Dubbo Admin Components\nDESCRIPTION: Commands for installing Dubbo Admin components using default or custom manifests\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndubboctl install # Install using default manifests\n\n# or\n\ndubboctl manifests | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Setting Request Tag in Dubbo Consumer Using RpcContext\nDESCRIPTION: Java code example showing how to set a tag in the consumer application before making a request. This ensures traffic is routed to providers with matching tags.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nRpcContext.getContext().setAttachment(Constants.TAG_KEY, \"gray\");\n```\n\n----------------------------------------\n\nTITLE: Dubbo No Provider Exception Example\nDESCRIPTION: Example of the IllegalStateException thrown when no service provider is available for a Dubbo service call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\njava.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.samples.api.GreetingsService. No provider available for the service org.apache.dubbo.samples.api.GreetingsService from the url consumer://*** to the consumer 30.221.146.226 use dubbo version 3.2.0-beta.4\n```\n\n----------------------------------------\n\nTITLE: 在 Spring 中配置 Dubbo 服务引用\nDESCRIPTION: 使用 Dubbo 的 XML 配置方式，定义一个远程服务引用。这里配置了 memberService 作为 com.xxx.MemberService 接口的服务引用。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/echo-service.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"memberService\" interface=\"com.xxx.MemberService\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Service Interface in Java\nDESCRIPTION: Defines the IDemoService interface that is shared between the service provider and consumer. It contains a single method to get a Person object by ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/events-notify.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterface IDemoService {\n    public Person get(int id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Repository\nDESCRIPTION: MySQL implementation of the IRepository interface that saves data to MySQL database.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MysqlRepository implements IRepository {\n    public void save(String data) {\n        System.out.println(\"Save \" + data + \" to Mysql\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Known Configuration Center Implementations in Java\nDESCRIPTION: Enumerates the known implementations of the configuration center extension for various backends like Zookeeper, Nacos, Etcd, Consul, Apollo, and FileSystem.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/config-center.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.configcenter.support.zookeeper.ZookeeperDynamicConfigurationFactory\norg.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory\norg.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfigurationFactory\norg.apache.dubbo.configcenter.consul.ConsulDynamicConfigurationFactory\norg.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfigurationFactory\norg.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL Data from Method Parameters in Dubbo Adaptive Extension\nDESCRIPTION: This code demonstrates how Dubbo extracts URL data from method parameters for generating adaptive extensions. It checks if a URL parameter exists directly in the method signature, and if not, tries to find a getter method that returns a URL from the available parameters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/adaptive-extension.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfor (Method method : methods) {\n    Class<?> rt = method.getReturnType();\n    Class<?>[] pts = method.getParameterTypes();\n    Class<?>[] ets = method.getExceptionTypes();\n\n    Adaptive adaptiveAnnotation = method.getAnnotation(Adaptive.class);\n    StringBuilder code = new StringBuilder(512);\n    if (adaptiveAnnotation == null) {\n        // ${无 Adaptive 注解方法代码生成逻辑}\n    } else {\n    \tint urlTypeIndex = -1;\n        // 遍历参数列表，确定 URL 参数位置\n        for (int i = 0; i < pts.length; ++i) {\n            if (pts[i].equals(URL.class)) {\n                urlTypeIndex = i;\n                break;\n            }\n        }\n        \n        // urlTypeIndex != -1，表示参数列表中存在 URL 参数\n        if (urlTypeIndex != -1) {\n            // 为 URL 类型参数生成判空代码，格式如下：\n            // if (arg + urlTypeIndex == null) \n            //     throw new IllegalArgumentException(\"url == null\");\n            String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"url == null\\\");\",\n                                     urlTypeIndex);\n            code.append(s);\n\n            // 为 URL 类型参数生成赋值代码，形如 URL url = arg1\n            s = String.format(\"\\n%s url = arg%d;\", URL.class.getName(), urlTypeIndex);\n            code.append(s);\n            \n        // 参数列表中不存在 URL 类型参数\n        } else {\n            String attribMethod = null;\n\n            LBL_PTS:\n            // 遍历方法的参数类型列表\n            for (int i = 0; i < pts.length; ++i) {\n                // 获取某一类型参数的全部方法\n                Method[] ms = pts[i].getMethods();\n                // 遍历方法列表，寻找可返回 URL 的 getter 方法\n                for (Method m : ms) {\n                    String name = m.getName();\n                    // 1. 方法名以 get 开头，或方法名大于3个字符\n                    // 2. 方法的访问权限为 public\n                    // 3. 非静态方法\n                    // 4. 方法参数数量为0\n                    // 5. 方法返回值类型为 URL\n                    if ((name.startsWith(\"get\") || name.length() > 3)\n                        && Modifier.isPublic(m.getModifiers())\n                        && !Modifier.isStatic(m.getModifiers())\n                        && m.getParameterTypes().length == 0\n                        && m.getReturnType() == URL.class) {\n                        urlTypeIndex = i;\n                        attribMethod = name;\n                        \n                        // 结束 for (int i = 0; i < pts.length; ++i) 循环\n                        break LBL_PTS;\n                    }\n                }\n            }\n            if (attribMethod == null) {\n                // 如果所有参数中均不包含可返回 URL 的 getter 方法，则抛出异常\n                throw new IllegalStateException(\"fail to create adaptive class for interface ...\");\n            }\n\n            // 为可返回 URL 的参数生成判空代码，格式如下：\n            // if (arg + urlTypeIndex == null) \n            //     throw new IllegalArgumentException(\"参数全限定名 + argument == null\");\n            String s = String.format(\"\\nif (arg%d == null) throw new IllegalArgumentException(\\\"%s argument == null\\\");\",\n                                     urlTypeIndex, pts[urlTypeIndex].getName());\n            code.append(s);\n\n            // 为 getter 方法返回的 URL 生成判空代码，格式如下：\n            // if (argN.getter方法名() == null) \n            //     throw new IllegalArgumentException(参数全限定名 + argument getUrl() == null);\n            s = String.format(\"\\nif (arg%d.%s() == null) throw new IllegalArgumentException(\\\"%s argument %s() == null\\\");\",\n                              urlTypeIndex, attribMethod, pts[urlTypeIndex].getName(), attribMethod);\n            code.append(s);\n\n            // 生成赋值语句，格式如下：\n            // URL全限定名 url = argN.getter方法名()，比如 \n            // com.alibaba.dubbo.common.URL url = invoker.getUrl();\n            s = String.format(\"%s url = arg%d.%s();\", URL.class.getName(), urlTypeIndex, attribMethod);\n            code.append(s);\n        }\n        \n        // 省略无关代码\n    }\n    \n    // 省略无关代码\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exceptions with ExceptionBuilder Pattern\nDESCRIPTION: This code shows how to use an ExceptionBuilder pattern to create and return custom exceptions to the consumer. This approach constructs a custom exception with description information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprovider.send(new ExceptionBuilders.IGreeterExceptionBuilder()\n    .setDescription('异常描述信息'); \n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exceptions with ExceptionBuilder Pattern\nDESCRIPTION: This code shows how to use an ExceptionBuilder pattern to create and return custom exceptions to the consumer. This approach constructs a custom exception with description information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-exception.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprovider.send(new ExceptionBuilders.IGreeterExceptionBuilder()\n    .setDescription('异常描述信息'); \n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol to Hessian\nDESCRIPTION: XML configuration to set Hessian as the default protocol for all providers in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/hessian.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"hessian\" />\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo Service Consumer\nDESCRIPTION: Maven command to run the Dubbo service consumer application with IPv4 stack preference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn -Djava.net.preferIPv4Stack=true -Dexec.mainClass=org.apache.dubbo.samples.consumer.Application exec:java\n[INFO] Scanning for projects...\n[INFO]                                                                         \n[INFO] ------------------------------------------------------------------------\n[INFO] Building dubbo-samples-api 1.0-SNAPSHOT\n[INFO] ------------------------------------------------------------------------\n[INFO]\n[INFO] --- exec-maven-plugin:1.6.0:java (default-cli) @ dubbo-samples-api ---\nlog4j:WARN No appenders could be found for logger (org.apache.dubbo.common.logger.LoggerFactory).\nlog4j:WARN Please initialize the log4j system properly.\nlog4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.\nhi, dubbo\n```\n\n----------------------------------------\n\nTITLE: Dubbo No Provider Error Patterns\nDESCRIPTION: Common patterns for no provider error messages in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNo provider available for the service ${serviceName}\n\nNo provider available from registry ${registryAddress} for service ${serviceName}\n```\n\n----------------------------------------\n\nTITLE: Voting Result Announcement Template\nDESCRIPTION: Email template for announcing the results of a community vote for an Apache Dubbo release. It lists the binding and non-binding votes received and confirms that the release process will proceed.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nWe've received 3 +1 binding votes and one +1 non-binding vote:\n\n+1 binding, Ian Luo\n+1 binding, Huxing Zhang\n+1 binding, Jun Liu\n\n+1 non-binding, Jerrick\n\nI will start to release today.\n\nBest regards,\nThe Apache Dubbo Team\n```\n\n----------------------------------------\n\nTITLE: 配置中文字符支持\nDESCRIPTION: 配置 HTTP 响应的 contentType 为 UTF-8 编码以支持中文字符。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Nested Message Definitions in Protobuf\nDESCRIPTION: Demonstrates nested message definitions in Protobuf, showing how complex data structures can be represented. The example includes a map field containing nested message types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple.md#2025-04-08_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BatchAnchorInfoRes {\n    map<uint32, AnchorInfo> list = 1; // User info map list\n}\n/*\n* The functionality of the corresponding interface: Batch or single retrieval of user info\n*/\nmessage AnchorInfo {\n    uint32 ownerUid = 1 [json_name=\"uid\"]; // User id\n    string nickName = 2 [json_name=\"nn\"]; // User nickname\n    string smallAvatar = 3 [json_name=\"savt\"]; // User avatar full path - small\n    string middleAvatar = 4 [json_name=\"mavt\"]; // User avatar full path - medium\n    string bigAvatar = 5 [json_name=\"bavt\"]; // User avatar full path - large\n    string avatar = 6 [json_name=\"avt\"]; // User avatar\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Simple Registry Service by Address\nDESCRIPTION: XML configuration for referencing the Simple registry service using its IP address and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/simple.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"127.0.0.1:9090\" />\n```\n\n----------------------------------------\n\nTITLE: Transforming RPC Parameters in ShenYu\nDESCRIPTION: The RpcParamTransformPlugin reads parameters from the HTTP request and saves them to the exchange object for passing to the RPC service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.base.RpcParamTransformPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Protocol for msgpack Serialization\nDESCRIPTION: This Java code snippet demonstrates how to configure the Dubbo protocol to use msgpack serialization in a Spring Bean configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/msgpack-serialization.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Bean\npublic ProtocolConfig msgpackProtocol(){\n    ProtocolConfig protocolConfig = new ProtocolConfig();\n    protocolConfig.setName(\"dubbo\");\n    protocolConfig.setId(\"msgpack\");\n    protocolConfig.setSerialization(\"msgpack\");\n    return protocolConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service in XML\nDESCRIPTION: Spring XML configuration for exposing the Dubbo service with ZooKeeper registry and protocol settings\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\"\n       xmlns=\"http://www.springframework.org/schema/beans\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\">\n\n    <!-- Provider application information, used for dependency calculation -->\n    <dubbo:application name=\"demo-provider\"/>\n\n    <dubbo:registry protocol=\"zookeeper\" address=\"localhost:2181\"/>\n\n    <!-- Expose the service on port 20880 using the dubbo protocol -->\n    <dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n    <!-- Implement the service like a local bean -->\n    <bean id=\"demoProvider\" class=\"com.alibaba.dubbo.demo.provider.DemoProviderImpl\"/>\n\n    <!-- Declare the service interface that needs to be exposed -->\n    <dubbo:service interface=\"com.alibaba.dubbo.demo.DemoProvider\" ref=\"demoProvider\" version=\"1.0.0\"/>\n\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registries in YAML for Dubbo Go\nDESCRIPTION: YAML configuration example for setting up multiple registry centers in Dubbo Go. This configuration registers services to both Zookeeper and Nacos registries simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    zookeeper: # 指定 zookeeper 注册中心\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n    nacos: # 指定 nacos 注册中心\n      protocol: nacos\n      address: 127.0.0.1:8848\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n```\n\n----------------------------------------\n\nTITLE: Querying Dubbo Service via HTTP\nDESCRIPTION: This curl command sends a POST request to query a Dubbo service through the HTTP proxy. It includes necessary headers for Dubbo service identification and JSON payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/httpfilter/dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8888/UserService/com.dubbogo.pixiu.UserService/GetUserByName -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-dubbo-http1.1-dubbo-version: 1.0.0' \\\n  -H 'x-dubbo-service-protocol: dubbo' \\\n  -H 'x-dubbo-service-version: 1.0.0' \\\n  -H 'x-dubbo-service-group: test' \\\n  -d '{\"types\":\"string\",\"values\":\"tc\"}'\n```\n\n----------------------------------------\n\nTITLE: Checking Out Apache Dubbo SVN Repository\nDESCRIPTION: SVN command to check out the Apache Dubbo repository to prepare for release distribution.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ svn checkout https://dist.apache.org/repos/dist/dev/dubbo\n# 假定本地目录为 ~/apache/incubator/dubbo\n```\n\n----------------------------------------\n\nTITLE: Creating UserServiceComponent for Dubbo Consumer\nDESCRIPTION: This Java code shows how to create a UserServiceComponent that references and implements the UserService interface for the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-rest.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class UserServiceComponent implements UserService {\n    @Reference\n    private UserService userService;\n\n    @Override\n    public User getUser(Long id) {\n        return userService.getUser(id);\n    }\n\n    @Override\n    public Long registerUser(User user) {\n        return userService.registerUser(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Base Plugin Execution Logic\nDESCRIPTION: The execute method in AbstractShenyuPlugin determines whether a plugin should execute based on selector and rule matching logic. This is part of the template method design pattern implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.base.AbstractShenyuPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Creating Adaptive Extension Instance in Dubbo\nDESCRIPTION: Method that creates an adaptive extension instance by getting the adaptive extension class, instantiating it through reflection, and injecting dependencies into it.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate T createAdaptiveExtension() {\n    try {\n        // 获取自适应拓展类，并通过反射实例化\n        return injectExtension((T) getAdaptiveExtensionClass().newInstance());\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Can not create adaptive extension ...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Merger for All Groups in Dubbo XML\nDESCRIPTION: XML configuration to search and merge results from all groups for a service reference.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/group-merger.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.xxx.MenuService\" group=\"*\" merger=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with application/x-www-form-urlencoded Content-Type\nDESCRIPTION: Example of an application/x-www-form-urlencoded HTTP request to a Triple protocol endpoint, containing form fields in the request body.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetUrlForm HTTP/1.1\nHost: 192.168.202.1:50052\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 33\nAccept: application/json\nHello=World&Apache=Dubbo&id=10086\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Storage Properties in Dubbo\nDESCRIPTION: Properties to configure metadata storage settings like address, credentials, retry behavior and refresh cycle.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/metadata.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\ndubbo.metadata-report.username=xxx        ##非必须\ndubbo.metadata-report.password=xxx        ##非必须\ndubbo.metadata-report.retry-times=30       ##非必须,default值100\ndubbo.metadata-report.retry-period=5000    ##非必须,default值3000\ndubbo.metadata-report.cycle-report=false   ##非必须,default值true\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Serialization Exceptions in Dubbo\nDESCRIPTION: An example error log showing a serialization exception where a class doesn't implement the Serializable interface. This is a common issue causing request failures in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nio.netty.handler.codec.EncoderException: java.lang.IllegalArgumentException: [Serialization Security] Serialized class org.apache.dubbo.samples.api.GreetingsService$Data has not implement Serializable interface. Current mode is strict check, will disallow to deserialize it by default. \n\tat io.netty.handler.codec.MessageToByteEncoder.write(MessageToByteEncoder.java:125)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:881)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:863)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:968)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:856)\n\tat io.netty.handler.timeout.IdleStateHandler.write(IdleStateHandler.java:304)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:879)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:863)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:968)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:856)\n\tat io.netty.channel.ChannelDuplexHandler.write(ChannelDuplexHandler.java:115)\n\tat org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.write(NettyClientHandler.java:88)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:879)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)\n\tat io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.IllegalArgumentException: [Serialization Security] Serialized class org.apache.dubbo.samples.api.GreetingsService$Data has not implement Serializable interface. Current mode is strict check, will disallow to deserialize it by default. \n\tat org.apache.dubbo.common.utils.DefaultSerializeClassChecker.loadClass(DefaultSerializeClassChecker.java:112)\n\tat org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory.getDefaultSerializer(Hessian2SerializerFactory.java:49)\n\tat com.alibaba.com.caucho.hessian.io.SerializerFactory.getSerializer(SerializerFactory.java:393)\n\tat com.alibaba.com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:411)\n\tat org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput.writeObject(Hessian2ObjectOutput.java:99)\n\tat org.apache.dubbo.rpc.protocol.dubbo.DubboCodec.encodeRequestData(DubboCodec.java:208)\n\tat org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:261)\n\tat org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:75)\n\tat org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:47)\n\tat org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:69)\n\tat io.netty.handler.codec.MessageToByteEncoder.write(MessageToByteEncoder.java:107)\n\t... 22 more\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Metadata Center in YAML\nDESCRIPTION: YAML configuration to enable Nacos as the metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/metadata-center/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  metadata-report:\n    address: nacos://127.0.0.1:8848\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Application\nDESCRIPTION: YAML configuration for the Dubbo consumer application, including application name, protocol, and registry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/quick-start.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-consumer\n  protocol:\n    name: dubbo\n    port: -1\n  registry:\n    id: zk-registry\n    address: zookeeper://127.0.0.1:2181\n  config-center:\n    address: zookeeper://127.0.0.1:2181\n  metadata-report:\n    address: zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Calculating resetLatencyUs in AutoConcurrencyLimier\nDESCRIPTION: Formula for determining the timestamp for resetting all values, including window values and noLoadLatency. This timestamp is measured in microseconds.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nresetLatencyUs = now_us + halfSampleIntervalMs * 2 * 1000L\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Dubbo Client in Debug Mode\nDESCRIPTION: This shell command runs the Node.js Dubbo client in debug mode, enabling detailed logging of the Dubbo interactions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=dubbo* ts-node main.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Registries in YAML for Dubbo Go\nDESCRIPTION: YAML configuration example for setting up multiple registry centers in Dubbo Go. This configuration registers services to both Zookeeper and Nacos registries simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/service-discovery/multi_registry.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    zookeeper: # 指定 zookeeper 注册中心\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n    nacos: # 指定 nacos 注册中心\n      protocol: nacos\n      address: 127.0.0.1:8848\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Classes in Dubbo\nDESCRIPTION: Methods for loading and caching extension classes from configuration files. Supports multiple configuration paths and handles default extension annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi-2.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Class<?>> getExtensionClasses() {\n        Map<String, Class<?>> classes = cachedClasses.get();\n        if (classes == null) {\n            synchronized (cachedClasses) {\n                classes = cachedClasses.get();\n                if (classes == null) {\n                    classes = loadExtensionClasses();\n                    cachedClasses.set(classes);\n                }\n            }\n        }\n        return classes;\n    }\n\nprivate Map<String, Class<?>> loadExtensionClasses() {\n        final SPI defaultAnnotation = type.getAnnotation(SPI.class);\n        if (defaultAnnotation != null) {\n            String value = defaultAnnotation.value();\n            if (value != null && (value = value.trim()).length() > 0) {\n                String[] names = NAME_SEPARATOR.split(value);\n                if (names.length > 1) {\n                    throw new IllegalStateException(\"more than 1 default extension name on extension \" + type.getName());\n                }\n                if (names.length == 1) cachedDefaultName = names[0];\n            }\n        }\n\n        Map<String, Class<?>> extensionClasses = new HashMap<String, Class<?>>();\n        loadFile(extensionClasses, DUBBO_INTERNAL_DIRECTORY);\n        loadFile(extensionClasses, DUBBO_DIRECTORY);\n        loadFile(extensionClasses, SERVICES_DIRECTORY);\n        return extensionClasses;\n}\n```\n\n----------------------------------------\n\nTITLE: 配置 Dubbo REST 服务\nDESCRIPTION: 在 Spring 配置文件中声明 REST 协议并暴露服务。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<!-- 用rest协议在8080端口暴露服务 -->\n<dubbo:protocol name=\"rest\" port=\"8080\"/>\n \n<!-- 声明需要暴露的服务接口 -->\n<dubbo:service interface=\"xxx.UserService\" ref=\"userService\"/>\n \n<!-- 和本地bean一样实现服务 -->\n<bean id=\"userService\" class=\"xxx.UserServiceImpl\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Container in Dubbo Properties\nDESCRIPTION: Sets the location for loading Spring configurations in the Dubbo service container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.spring.config=classpath*:META-INF/spring/*.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go application in YAML\nDESCRIPTION: YAML configuration for a Dubbo-go application that sets the application name, which is used in the URL path for HTTP requests to the Pixiu gateway.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/gateway/pixiu-nacos-triple.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n\tapplication:\n  \tname: my-dubbogo-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-only Registration Mode in YAML\nDESCRIPTION: YAML configuration example for enabling only application-level registration in Dubbo 3.0 service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-samples.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# 仅应用级注册\ndubbo:\n    registry:\n        register-mode: instance\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Implementation\nDESCRIPTION: Test code demonstrating how to use the service with callbacks and verify the results.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nIDemoService demoService = (IDemoService) context.getBean(\"demoService\");\nNotifyImpl notify = (NotifyImpl) context.getBean(\"demoCallback\");\nint requestId = 2;\nPerson ret = demoService.get(requestId);\nAssert.assertEquals(null, ret);\n//for Test：used to indicate that callback is called normally, the specific implementation is left to the business.\nfor (int i = 0; i < 10; i++) {\n    if (!notify.ret.containsKey(requestId)) {\n        Thread.sleep(200);\n    } else {\n        break;\n    }\n}\nAssert.assertEquals(requestId, notify.ret.get(requestId).getId());\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronous Interface for AsyncContext Usage in Dubbo\nDESCRIPTION: Service interface with synchronous method signature that will be implemented asynchronously using AsyncContext.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/async-execute-on-provider.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface AsyncService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HelloService with Dubbo and Zipkin\nDESCRIPTION: XML configuration for exposing HelloService as a Dubbo service with Zipkin tracing. It sets up Zookeeper for service registration, exposes the service on port 20880, and configures Zipkin tracing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- 定义 HelloService 的应用名 -->\n<dubbo:application name=\"hello-service-provider\"/>\n\n<!-- 指定注册中心地址 -->\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\n\n<!-- 使用 Dubbo 原生协议在 20880 端口上暴露服务 -->\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\n\n<!-- 将 HelloServiceImpl 的实现声明成一个 spring bean -->\n<bean id=\"helloService\" class=\"com.alibaba.dubbo.samples.service.hello.HelloServiceImpl\"/>\n\n<!-- 将 HelloServiceImpl 声明成一个 Dubbo 服务 -->\n<dubbo:service interface=\"com.alibaba.dubbo.samples.api.HelloService\" ref=\"helloService\"/>\n\n<!-- Zipkin configuration -->\n<bean id=\"sender\" class=\"zipkin2.reporter.beans.OkHttpSenderFactoryBean\">\n    <property name=\"endpoint\" value=\"http://localhost:9411/api/v2/spans\"/>\n</bean>\n\n<bean id=\"tracing\" class=\"brave.spring.beans.TracingFactoryBean\">\n    <property name=\"localServiceName\" value=\"hello-service\"/>\n    <property name=\"spanReporter\">\n        <bean class=\"zipkin2.reporter.beans.AsyncReporterFactoryBean\">\n            <property name=\"sender\" ref=\"sender\"/>\n            <property name=\"closeTimeout\" value=\"500\"/>\n        </bean>\n    </property>\n    <property name=\"currentTraceContext\">\n        <bean class=\"brave.spring.beans.CurrentTraceContextFactoryBean\">\n            <property name=\"scopeDecorators\">\n                <bean class=\"brave.context.slf4j.MDCScopeDecorator\" factory-method=\"create\"/>\n            </property>\n        </bean>\n    </property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with GET Request via curl\nDESCRIPTION: Shell command demonstrating how to call the GetUser method on the gRPC service through Pixiu using a simple HTTP GET request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser\n```\n\n----------------------------------------\n\nTITLE: Validating IPv6 Addresses in Dubbo\nDESCRIPTION: This method checks if an IPv6 address is valid for use by Dubbo. It considers the java.net.preferIPv6Addresses system property and tests if the address is reachable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-network-interfaces.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nstatic boolean isValidV6Address(Inet6Address address) {\n    boolean preferIpv6 = Boolean.getBoolean(\"java.net.preferIPv6Addresses\");\n    if (!preferIpv6) {\n        return false;\n    }\n    try {\n        return address.isReachable(100);\n    } catch (IOException e) {\n        // ignore\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Callback Implementation\nDESCRIPTION: Test code demonstrating how to use the service with callbacks and verify the results.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nIDemoService demoService = (IDemoService) context.getBean(\"demoService\");\nNotifyImpl notify = (NotifyImpl) context.getBean(\"demoCallback\");\nint requestId = 2;\nPerson ret = demoService.get(requestId);\nAssert.assertEquals(null, ret);\n//for Test：used to indicate that callback is called normally, the specific implementation is left to the business.\nfor (int i = 0; i < 10; i++) {\n    if (!notify.ret.containsKey(requestId)) {\n        Thread.sleep(200);\n    } else {\n        break;\n    }\n}\nAssert.assertEquals(requestId, notify.ret.get(requestId).getId());\n```\n\n----------------------------------------\n\nTITLE: Executing Abstract ShenYu Plugin\nDESCRIPTION: This method in the AbstractShenyuPlugin class executes the matching logic for selectors and rules to determine if a plugin should be executed for a request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.base.AbstractShenyuPlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Starting GreetingService Command\nDESCRIPTION: Maven command to start the GreetingService application component.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn exec:java -Dexec.mainClass=com.alibaba.dubbo.samples.service.greeting.Application\n```\n\n----------------------------------------\n\nTITLE: Configuring Old Version Service Consumer in Dubbo XML\nDESCRIPTION: XML configuration for defining an old version (1.0.0) consumer reference in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-versions.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" version=\"1.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Serialization in Dubbo Python Client\nDESCRIPTION: Demonstrates custom JSON serialization in a Dubbo Python client using orjson. It defines custom serializer and deserializer functions and sets up a GreeterServiceStub with these functions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/python-sdk/custom-serialization.md#2025-04-08_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef request_serializer(data: Dict) -> bytes:\n    return orjson.dumps(data)\n\n\ndef response_deserializer(data: bytes) -> Dict:\n    return orjson.loads(data)\n\n\nclass GreeterServiceStub:\n    def __init__(self, client: dubbo.Client):\n        self.unary = client.unary(\n            method_name=\"unary\",\n            request_serializer=request_serializer,\n            response_deserializer=response_deserializer,\n        )\n\n    def say_hello(self, request):\n        return self.unary(request)\n\n\nif __name__ == \"__main__\":\n    reference_config = ReferenceConfig.from_url(\n        \"tri://127.0.0.1:50051/org.apache.dubbo.samples.serialization.json\"\n    )\n    dubbo_client = dubbo.Client(reference_config)\n\n    stub = GreeterServiceStub(dubbo_client)\n    result = stub.say_hello({\"name\": \"world\"})\n    print(result)\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with JWT Support\nDESCRIPTION: Commands for downloading and installing Istio with first-party JWT support enabled\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/mesh/mesh.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncurl -L https://istio.io/downloadIstio | sh -\ncd istio-1.xx.x\nexport PATH=$PWD/bin:$PATH\nistioctl install --set profile=demo --set values.global.jwtPolicy=first-party-jwt -y\n```\n\n----------------------------------------\n\nTITLE: Async Filter Chain Implementation\nDESCRIPTION: Example of extending Filter to support asynchronous Filter chain processing\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = {Constants.PROVIDER, Constants.CONSUMER})\npublic class AsyncPostprocessFilter extends AbstractPostProcessFilter {\n\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        return postProcessResult(invoker.invoke(invocation), invoker, invocation);\n    }\n\n    @Override\n    protected Result doPostProcess(Result result, Invoker<?> invoker, Invocation invocation) {\n        System.out.println(\"Filter get the return value: \" + result.getValue());\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Client\nDESCRIPTION: TypeScript client implementation for accessing the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPromiseClient } from \"@apachedubbo/dubbo\";\nimport { ExampleService } from \"./gen/example_dubbo\";\nimport { createDubboTransport } from \"@apachedubbo/dubbo-node\";\n\nconst transport = createDubboTransport({\n  baseUrl: \"http://localhost:8080\",\n  httpVersion: \"1.1\",\n});\n\nasync function main() {\n  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });\n  const res = await client.say({ sentence: \"Hello World\" });\n  console.log(res);\n}\nvoid main();\n```\n\n----------------------------------------\n\nTITLE: Configuring External Servlet Container for REST in Dubbo\nDESCRIPTION: XML configuration for using an external application server's servlet container as the REST server in Dubbo, recommended when deploying to a Java application server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Apache Releases\nDESCRIPTION: Interactive GPG command to generate a new key pair for signing Apache releases. The command walks through key type selection, key size, expiration settings, and user identification information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --full-gen-key\ngpg (GnuPG) 2.0.12; Copyright (C) 2009 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n        0 = key does not expire\n     <n>  = key expires in n days\n     <n>w = key expires in n weeks\n     <n>m = key expires in n months\n     <n>y = key expires in n years\nKey is valid for? (0) \nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Robert Burrell Donkin\nEmail address: rdonkin@apache.org\nComment: CODE SIGNING KEY\nYou selected this USER-ID:\n   \"Robert Burrell Donkin (CODE SIGNING KEY) <rdonkin@apache.org>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key. # Enter password, which will be used frequently during the packaging process\n```\n\n----------------------------------------\n\nTITLE: Referencing Services from Multiple Registry Centers\nDESCRIPTION: Example showing how to reference services from multiple registry centers. Demonstrates configuration for consuming the same service from both China and International registry centers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-registry.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置 -->\n    <dubbo:registry id=\"chinaRegistry\" address=\"10.20.141.150:9090\" />\n    <dubbo:registry id=\"intlRegistry\" address=\"10.20.154.177:9010\" default=\"false\" />\n    <!-- 引用中文站服务 -->\n    <dubbo:reference id=\"chinaHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"chinaRegistry\" />\n    <!-- 引用国际站站服务 -->\n    <dubbo:reference id=\"intlHelloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" registry=\"intlRegistry\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Release Announcement Email Template\nDESCRIPTION: Email template for announcing a completed Apache Dubbo release to the community. It includes a brief description of Dubbo, links to source and binary releases, release notes, and information for providing feedback.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nHello Community,\n\nThe Apache Dubbo team is pleased to announce that the\n2.6.6 has just been released.\n\nApache Dubbo™  is a high-performance, java based, open source\nRPC framework. Dubbo offers three key functionalities, which include\ninterface based remote call, fault tolerance & load balancing, and\nautomatic service registration & discovery.\n\nBoth the source release[1] and the maven binary release[2] are available\nnow, you can also find the detailed release notes here[3].\n\n\nIf you have any usage questions, or have problems when upgrading or find\nany problems about enhancements included in this release, please don't\nhesitate to let us know by sending feedback to this mailing list or filing\nan issue on GitHub[4].\n\n\n[1] https://dubbo.apache.org/en/blog/2020/05/18/past-releases/\n[2] https://repo1.maven.org/maven2/org/apache/dubbo/dubbo\n[3] https://github.com/apache/dubbo/releases\n[4] https://github.com/apache/dubbo/issues\n```\n\n----------------------------------------\n\nTITLE: Local Service Export in Dubbo\nDESCRIPTION: Implementation of local service export functionality in Dubbo. Handles URL protocol verification, local service configuration, and export through InjvmProtocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate void exportLocal(URL url) {\n    if (!Constants.LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) {\n        URL local = URL.valueOf(url.toFullString())\n            .setProtocol(Constants.LOCAL_PROTOCOL)\n            .setHost(LOCALHOST)\n            .setPort(0);\n        ServiceClassHolder.getInstance().pushServiceClass(getServiceClass(ref));\n        Exporter<?> exporter = protocol.export(\n            proxyFactory.getInvoker(ref, (Class) interfaceClass, local));\n        exporters.add(exporter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo SPI Interface in Java\nDESCRIPTION: Demonstrates how to define a Dubbo SPI interface using the @SPI annotation, specifying the default implementation and scope.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@SPI(value = \"dubbo\", scope = ExtensionScope.FRAMEWORK)\npublic interface Protocol {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dubbo Server with cURL\nDESCRIPTION: cURL command to test if the Dubbo server is working as expected by sending a POST request.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"Content-Type: application/json\" \\\n    --data '{\"name\": \"Dubbo\"}' \\\n    http://localhost:20000/greet.GreetService/Greet\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Settings for Services and References\nDESCRIPTION: Shows how to configure the number of connections used by a service or reference. This allows control over connection pooling for specific service interactions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service connections=\"1\"/>\n<dubbo:reference connections=\"1\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balance (Provider)\nDESCRIPTION: Sets load balancing strategy for specific methods in the service provider using JavaConfig.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class DubboConfiguration {\n    @Bean\n    public ServiceBean demoService() {\n    \tMethodConfig method = new MethodConfig();\n\t\tmethod.setName(\"sayHello\");\n\t\tmethod.setLoadbalance(\"roundrobin\");\n\n        ServiceBean service = new ServiceBean();\n        service.setInterface(DemoService.class);\n        service.setRef(new DemoServiceImpl());\n        service.addMethod(method)\n        return service;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing and Verifying IP-Specific Dubbo Invocation\nDESCRIPTION: Example command and result demonstrating that the request consistently routes to the specified provider instance (port 20880) when using the address router feature.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/invoke-with-specified-ip.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n>curl http://localhost:8081/invokeByIpPortSpecified\n>Hello Tom i am provider1             \n```\n\n----------------------------------------\n\nTITLE: Dubbo Client Application\nDESCRIPTION: Java class for the Dubbo client application that invokes the GreetingService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/use-zipkin-in-dubbo.md#2025-04-08_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npackage com.alibaba.dubbo.samples.client;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport com.alibaba.dubbo.samples.api.GreetingService;\n\npublic class Application {\n    public static void main(String[] args) {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/client.xml\");\n        context.start();\n        GreetingService greetingService = (GreetingService) context.getBean(\"greetingService\");\n        System.out.println(greetingService.greeting(\"world\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider\nDESCRIPTION: Java implementation of the HelloService interface with Dubbo service annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider.provider;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.example.demoapi.HelloService;\n\n@Service(version = \"${demo.service.version}\",\n        application = \"${dubbo.application.id}\",\n        protocol = \"${dubbo.protocol.id}\",\n        registry = \"${dubbo.registry.id}\")\npublic class HelloServiceImpl implements HelloService {\n    static int i = 0;\n    @Override\n    public String sayHello(String name) {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException(\"ex\");\n        }\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client with Registry\nDESCRIPTION: Demonstrates how to configure a Dubbo client with different registry options (Zookeeper or Nacos) based on environment variables. Includes registry creation and client initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet mut builder = ClientBuilder::new();\n\n// Get registry address via env\nif let Ok(zk_servers) = env::var(\"ZOOKEEPER_SERVERS\") {\n    // Create registry\n    let zkr = ZookeeperRegistry::new(&zk_servers);\n    // Bind registry\n    let directory = RegistryDirectory::new(Box::new(zkr));\n    builder = builder.with_directory(Box::new(directory));\n} else if let Ok(nacos_url_str) = env::var(\"NACOS_URL\") {\n    // NACOS_URL=nacos://mse-96efa264-p.nacos-ans.mse.aliyuncs.com\n    // Create registry\n    let nacos_url = Url::from_url(&nacos_url_str).unwrap();\n    let registry = NacosRegistry::new(nacos_url);\n    // Bind registry\n    let directory = RegistryDirectory::new(Box::new(registry));\n    builder = builder.with_directory(Box::new(directory));\n} else {\n    builder = builder.with_host(\"http://127.0.0.1:8888\");\n}\n\nlet mut cli = GreeterClient::new(builder);\n```\n\n----------------------------------------\n\nTITLE: Configuring DemoFilter in YAML\nDESCRIPTION: YAML configuration for adding the DemoFilter to Pixiu's filter chain. This configuration is added to the Pixiu configuration file to enable the custom filter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8888\n      filter_chains:\n          filters:\n            - name: dgp.filter.httpconnectionmanager\n              config:\n                route_config:\n                  routes:\n                    - match:\n                        prefix: \"/\"\n                http_filters:\n                  - name: dgp.filters.demo\n                    config:\n```\n\n----------------------------------------\n\nTITLE: Registering Proxy Factory Extension\nDESCRIPTION: Properties file content for registering the custom proxy factory implementation with Dubbo's extension loading mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/proxy-factory.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxProxyFactory\n```\n\n----------------------------------------\n\nTITLE: Running Dubbo-Go Server with Nacos Registry\nDESCRIPTION: This command runs the Dubbo-Go server application that uses Nacos as the registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/service-discovery/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go run ./go-server/cmd/server.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastjson2 in XML\nDESCRIPTION: XML configuration options for enabling Fastjson2 serialization in Dubbo using protocol, consumer, or reference tags.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson2.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol serialization=\"fastjson2\" />\n\n<!-- or -->\n<dubbo:consumer serialization=\"fastjson2\" />\n\n<!-- or -->\n<dubbo:reference interface=\"xxx\" serialization=\"fastjson2\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Fallback Handler\nDESCRIPTION: Configuration of fallback logic for consumer-side flow control events in Sentinel.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/rate-limit/sentinel.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nDubboAdapterGlobalConfig.setConsumerFallback((invoker, invocation, ex) -> {\n\tSystem.out.println(\"Blocked by Sentinel: \" + ex.getClass().getSimpleName() + \", \" + invocation);\n\treturn AsyncRpcResult.newDefaultAsyncResult(ex.toRuntimeException(), invocation);\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Dubbo Services for Spring Cloud Consumption\nDESCRIPTION: XML configuration to expose Dubbo services using REST protocol or dual protocols (REST and Dubbo). This enables Spring Cloud applications to consume Dubbo services, facilitating coexistence between the two systems.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/connect-heterogeneous-microservices.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"xxx.NewService\" protocol=\"rest,dubbo\"/>\n```\n\n----------------------------------------\n\nTITLE: Service Metadata Format in Dubbo 2.6\nDESCRIPTION: Example of service metadata stored in Zookeeper in Dubbo 2.6, showing all parameters including many non-essential ones for service governance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndubbo://30.5.120.185:20880/com.alibaba.dubbo.demo.DemoService?\nanyhost=true&\napplication=demo-provider&\ninterface=com.alibaba.dubbo.demo.DemoService&\nmethods=sayHello&\nbean.name=com.alibaba.dubbo.demo.DemoService&\ndubbo=2.0.2&\nexecutes=4500&\ngeneric=false&\nowner=kirito&\npid=84228&\nretries=7&\nside=provider&\ntimestamp=1552965771067\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client with Registry\nDESCRIPTION: Demonstrates how to configure a Dubbo client with different registry options (Zookeeper or Nacos) based on environment variables. Includes registry creation and client initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet mut builder = ClientBuilder::new();\n\n// Get registry address via env\nif let Ok(zk_servers) = env::var(\"ZOOKEEPER_SERVERS\") {\n    // Create registry\n    let zkr = ZookeeperRegistry::new(&zk_servers);\n    // Bind registry\n    let directory = RegistryDirectory::new(Box::new(zkr));\n    builder = builder.with_directory(Box::new(directory));\n} else if let Ok(nacos_url_str) = env::var(\"NACOS_URL\") {\n    // NACOS_URL=nacos://mse-96efa264-p.nacos-ans.mse.aliyuncs.com\n    // Create registry\n    let nacos_url = Url::from_url(&nacos_url_str).unwrap();\n    let registry = NacosRegistry::new(nacos_url);\n    // Bind registry\n    let directory = RegistryDirectory::new(Box::new(registry));\n    builder = builder.with_directory(Box::new(directory));\n} else {\n    builder = builder.with_host(\"http://127.0.0.1:8888\");\n}\n\nlet mut cli = GreeterClient::new(builder);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider\nDESCRIPTION: Java implementation of the HelloService interface with Dubbo service annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider.provider;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.example.demoapi.HelloService;\n\n@Service(version = \"${demo.service.version}\",\n        application = \"${dubbo.application.id}\",\n        protocol = \"${dubbo.protocol.id}\",\n        registry = \"${dubbo.registry.id}\")\npublic class HelloServiceImpl implements HelloService {\n    static int i = 0;\n    @Override\n    public String sayHello(String name) {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException(\"ex\");\n        }\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider\nDESCRIPTION: Java implementation of the HelloService interface with Dubbo service annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.demoprovider.provider;\n\nimport com.alibaba.dubbo.config.annotation.Service;\nimport com.example.demoapi.HelloService;\n\n@Service(version = \"${demo.service.version}\",\n        application = \"${dubbo.application.id}\",\n        protocol = \"${dubbo.protocol.id}\",\n        registry = \"${dubbo.registry.id}\")\npublic class HelloServiceImpl implements HelloService {\n    static int i = 0;\n    @Override\n    public String sayHello(String name) {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException(\"ex\");\n        }\n        return \"Hello \" + name + \"!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Service Execution Timeout in Dubbo\nDESCRIPTION: A log example showing when a Dubbo service execution takes longer than the configured timeout. This helps identify slow service implementations that could be causing request failures.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n[27/02/23 05:30:04:004 CST] DubboServerHandler-30.221.144.195:20880-thread-5  WARN filter.ProfilerServerFilter:  [DUBBO] [Dubbo-Provider] execute service org.apache.dubbo.samples.api.GreetingsService:0.0.0#sayHi cost 3001.533827 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms\nclient: fd00:1:5:5200:a0a1:52b:e079:8582:58731\ninvocation context:\ninput=284;\npath=org.apache.dubbo.samples.api.GreetingsService;\nremote.application=first-dubbo-consumer;\ndubbo=2.0.2;\ninterface=org.apache.dubbo.samples.api.GreetingsService;\nversion=0.0.0;\ntimeout=1000;\nthread info: \nStart time: 4237588012688\n+-[ Offset: 0.000000ms; Usage: 3001.533827ms, 100% ] Receive request. Server invoke begin.\n  +-[ Offset: 0.045578ms; Usage: 3001.436721ms, 99% ] Receive request. Server biz impl invoke begin., dubbo version: 3.1.7, current host: 30.221.144.195, error code: 3-7. This may be caused by , go to https://dubbo.apache.org/faq/3/7 to find instructions.\n```\n\n----------------------------------------\n\nTITLE: Throwing Flow Control Exception in Triple\nDESCRIPTION: This code shows how Triple throws a specific flow control exception when the window size is 0, which is then propagated to the client's business layer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/triple-backpressure.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n窗口为0时抛出特定异常\n```\n\n----------------------------------------\n\nTITLE: Defining System Load Average Metric in Prometheus\nDESCRIPTION: This snippet defines a Prometheus gauge metric for system load average over 1 minute. It represents the sum of runnable entities queued and running on available processors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_10\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time\n# TYPE system_load_average_1m gauge\nsystem_load_average_1m 0.0\n```\n\n----------------------------------------\n\nTITLE: Apache Parent POM Configuration for Dubbo 2.7.0+\nDESCRIPTION: XML snippet showing the required Apache parent POM configuration for Dubbo versions 2.7.0 and above. This is a required configuration for releasing to Apache repositories.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n<groupId>org.apache</groupId>\n<artifactId>apache</artifactId>\n<version>19</version>\n</parent>\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Resources in Dubbo (Java)\nDESCRIPTION: This method loads extension resources from specified directories using class loaders. It handles different class loader scenarios and processes each found resource.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                           boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages) {\n    String fileName = dir + type;\n    try {\n        Enumeration<java.net.URL> urls = null;\n        ClassLoader classLoader = findClassLoader();\n\n        if (extensionLoaderClassLoaderFirst) {\n            ClassLoader extensionLoaderClassLoader = ExtensionLoader.class.getClassLoader();\n            if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {\n                urls = extensionLoaderClassLoader.getResources(fileName);\n            }\n        }\n\n        if (urls == null || !urls.hasMoreElements()) {\n            if (classLoader != null) {\n                urls = classLoader.getResources(fileName);\n            } else {\n                urls = ClassLoader.getSystemResources(fileName);\n            }\n        }\n\n        if (urls != null) {\n            while (urls.hasMoreElements()) {\n                java.net.URL resourceURL = urls.nextElement();\n                loadResource(extensionClasses, classLoader, resourceURL, overridden, excludedPackages);\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", description file: \" + fileName + \").\", t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Triple REST Services with curl\nDESCRIPTION: curl commands to test the Triple REST services, demonstrating both simple GET requests and more complex POST requests with custom headers and parameters. The examples show how Triple automatically handles REST-style parameter passing and response formatting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world\"\n# Output\n#> GET /org.apache.dubbo.rest.demo.DemoService/hello?name=world HTTP/1.1\n#>\n#< HTTP/1.1 200 OK\n#< content-type: application/json\n#< content-length: 13\n#<\n#\"Hello world\"\n#\n# Code Explanation\n# You can see the output \"Hello world\", the double quotes are because the default output content-type is application/json.\n# This example shows that Triple defaults to exporting services to /{serviceInterface}/{methodName} paths, supporting parameter passing via URL.\n\ncurl -v -H \"c: 3\" -d 'name=Yang' \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr\"\n# Output\n#> POST /org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr HTTP/1.1\n#> c: 3\n#> Content-Length: 9\n#> Content-Type: application/x-www-form-urlencoded\n#>\n#< HTTP/1.1 200 OK\n#< content-type: text/plain\n#< content-length: 17\n#<\n#Hello Mr. Yang, 3\n#\n# Code Explanation\n# You can see the output Hello Mr. Yang, 3, without double quotes because the suffix txt requires a text/plain output.\n# This example demonstrates how to customize paths with the Mapping annotation and the source of parameters with the Param annotation, which supports parameter passing through post body or URL.\n```\n\n----------------------------------------\n\nTITLE: Implementing service registration in FailbackRegistry\nDESCRIPTION: This code snippet shows the register method in FailbackRegistry abstract class which provides template method pattern for service registration. It handles failures and delegates actual registration to the doRegister method that subclasses must implement.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic void register(URL url) {\n    super.register(url);\n    failedRegistered.remove(url);\n    failedUnregistered.remove(url);\n    try {\n        // 模板方法，由子类实现\n        doRegister(url);\n    } catch (Exception e) {\n        Throwable t = e;\n\n        // 获取 check 参数，若 check = true 将会直接抛出异常\n        boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)\n                && url.getParameter(Constants.CHECK_KEY, true)\n                && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());\n        boolean skipFailback = t instanceof SkipFailbackWrapperException;\n        if (check || skipFailback) {\n            if (skipFailback) {\n                t = t.getCause();\n            }\n            throw new IllegalStateException(\"Failed to register\");\n        } else {\n            logger.error(\"Failed to register\");\n        }\n\n        // 记录注册失败的链接\n        failedRegistered.add(url);\n    }\n}\n\nprotected abstract void doRegister(URL url);\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Status Export in Dubbo YAML\nDESCRIPTION: This snippet demonstrates configuring thread dump settings in Dubbo using YAML. It shows how to disable dumps by setting dump-enable to false in the application configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n    dump-enable: false\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Service Proxy in Dubbo-Go\nDESCRIPTION: This snippet demonstrates how Dubbo-Go implements a proxy for an RPC service. It creates proxy functions for each method in the service interface, converting regular method calls into RPC invocations through the invoker chain.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// Implement\n// proxy implement\n// In consumer, RPCService like:\n//      type XxxProvider struct {\n//    Yyy func(ctx context.Context, args []interface{}, rsp *Zzz) error\n//      }\n// Implement 实现的过程，就是proxy根据函数名和返回值，通过调用invoker 构造出拥有远程调用逻辑的代理函数\n// 将当前rpc所有可供调用的函数注册到proxy.rpc内\nfunc (p *Proxy) Implement(v common.RPCService) {\n    // makeDubboCallProxy 这是一个构造代理函数，这个函数的返回值是func(in []reflect.Value) []reflect.Value 这样一个函数\n    // 这个被返回的函数是请求实现的载体，由他来发起调用获取结果\n    makeDubboCallProxy := func(methodName string, outs []reflect.Type) func(in []reflect.Value) []reflect.Value {\n  return func(in []reflect.Value) []reflect.Value {\n    // 根据methodName和outs的类型，构造这样一个函数，这个函数能将in 输入的value转换为输出的value\n    // 这个函数具体的实现如下：\n    ...\n    // 目前拿到了 methodName、所有入参的interface和value，出参数reply\n    // （一）根据这些生成一个 rpcinvocation\n    inv = invocation_impl.NewRPCInvocationWithOptions(\n    invocation_impl.WithMethodName(methodName),\n    invocation_impl.WithArguments(inIArr),\n    invocation_impl.WithReply(reply.Interface()),\n    invocation_impl.WithCallBack(p.callBack),\n    invocation_impl.WithParameterValues(inVArr))\n    for k, value := range p.attachments {\n    inv.SetAttachments(k, value)\n    }\n    // add user setAttachment\n    atm := invCtx.Value(constant.AttachmentKey) // 如果传入的ctx里面有attachment，也要写入inv\n    if m, ok := atm.(map[string]string); ok {\n    for k, value := range m {\n        inv.SetAttachments(k, value)\n    }\n    }\n    // 至此构造inv完毕\n    // (二）触发Invoker 之前已经将cluster_invoker放入proxy，使用Invoke方法，通过getty远程过程调用\n    result := p.invoke.Invoke(invCtx, inv)\n    // 如果有attachment，则加入\n    if len(result.Attachments()) > 0 {\n    invCtx = context.WithValue(invCtx, constant.AttachmentKey, result.Attachments())\n    }\n    ...\n  }\n    }\n    numField := valueOfElem.NumField()\n    for i := 0; i < numField; i++ {\n  t := typeOf.Field(i)\n  methodName := t.Tag.Get(\"dubbo\")\n  if methodName == \"\" {\n    methodName = t.Name\n  }\n  f := valueOfElem.Field(i)\n  if f.Kind() == reflect.Func && f.IsValid() && f.CanSet() { // 针对于每个函数\n    outNum := t.Type.NumOut()\n    // 规定函数输出只能有1/2个\n    if outNum != 1 && outNum != 2 {\n    logger.Warnf(\"method %s of mtype %v has wrong number of in out parameters %d; needs exactly 1/2\",\n        t.Name, t.Type.String(), outNum)\n    continue\n    }\n    // The latest return type of the method must be error.\n    // 规定最后一个返回值一定是error\n    if returnType := t.Type.Out(outNum - 1); returnType != typError {\n    logger.Warnf(\"the latest return type %s of method %q is not error\", returnType, t.Name)\n    continue\n    }\n    // 获取到所有的出参类型，放到数组里\n    var funcOuts = make([]reflect.Type, outNum)\n    for i := 0; i < outNum; i++ {\n    funcOuts[i] = t.Type.Out(i)\n    }\n    // do method proxy here:\n    // （三）调用make函数，传入函数名和返回值，获得能调用远程的proxy，将这个proxy替换掉原来的函数位置\n    f.Set(reflect.MakeFunc(f.Type(), makeDubboCallProxy(methodName, funcOuts)))\n    logger.Debugf(\"set method [%s]\", methodName)\n  }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Temporary Multi-Registry Configuration Using Address Separator\nDESCRIPTION: Example showing how to temporarily connect to multiple registry centers using the vertical bar separator in the address field. Useful for testing environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/multi-registry.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">\n    <dubbo:application name=\"world\"  />\n    <!-- 多注册中心配置，竖号分隔表示同时连接多个不同注册中心，同一注册中心的多个集群地址用逗号分隔 -->\n    <dubbo:registry address=\"10.20.141.150:9090|10.20.154.177:9010\" />\n    <!-- 引用服务 -->\n    <dubbo:reference id=\"helloService\" interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" />\n</beans>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation Interface\nDESCRIPTION: Service interface with JSR 303 bean validation annotation for input parameter validation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_39\n\nLANGUAGE: java\nCODE:\n```\npublic interface UserService {\n   \n    User getUser(@Min(value=1L, message=\"User ID must be greater than 1\") Long id);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo to Consume Spring Cloud Services via REST\nDESCRIPTION: XML configuration for a Dubbo application to consume Spring Cloud services using the REST protocol. This allows Dubbo applications to interact with existing Spring Cloud services during migration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/connect-heterogeneous-microservices.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface =\"xxx.SpringService\" protocol=\"rest\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface in Java\nDESCRIPTION: This code snippet shows how to define the DemoService interface which declares a sayHello method that accepts a name parameter and returns a greeting string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo;\n\npublic interface DemoService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dubbo Dynamic Proxy Implementation with Arthas in Java\nDESCRIPTION: This snippet shows the dynamically generated Wrapper class by Dubbo using Javassist. It demonstrates how method invocations are handled for a UserServiceImpl class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.common.bytecode;\n\npublic class Wrapper1\nextends Wrapper\nimplements ClassGenerator.DC {\n\n    public Object invokeMethod(Object object, String string, Class[] arrclass, Object[] arrobject) throws InvocationTargetException {\n        UserServiceImpl userServiceImpl;\n        try {\n            userServiceImpl = (UserServiceImpl)object;\n        }\n        catch (Throwable throwable) {\n            throw new IllegalArgumentException(throwable);\n        }\n        try {\n            if (\"findUser\".equals(string) && arrclass.length == 1) {\n                return userServiceImpl.findUser(((Number)arrobject[0]).intValue());\n            }\n            if (\"listUsers\".equals(string) && arrclass.length == 0) {\n                return userServiceImpl.listUsers();\n            }\n            if (\"findUserByName\".equals(string) && arrclass.length == 1) {\n                return userServiceImpl.findUserByName((String)arrobject[0]);\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Adding Fastjson2 Maven Dependency\nDESCRIPTION: Maven configuration to add Fastjson2 dependency to a Dubbo project. Requires version 2.0.23 of the fastjson2 library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fastjson2.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.alibaba.fastjson2</groupId>\n        <artifactId>fastjson2</artifactId>\n        <version>2.0.23</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Selecting and Reselecting Invokers (Java)\nDESCRIPTION: This snippet shows the doSelect and reselect methods in FailoverClusterInvoker. doSelect uses a LoadBalance to choose an invoker and may call reselect if the chosen invoker is unsuitable. reselect attempts to find alternative invokers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/cluster.md#2025-04-08_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nprivate Invoker<T> doSelect(LoadBalance loadbalance, Invocation invocation, List<Invoker<T>> invokers, List<Invoker<T>> selected) throws RpcException {\n    if (invokers == null || invokers.isEmpty())\n        return null;\n    if (invokers.size() == 1)\n        return invokers.get(0);\n    if (loadbalance == null) {\n        // 如果 loadbalance 为空，这里通过 SPI 加载 Loadbalance，默认为 RandomLoadBalance\n        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(Constants.DEFAULT_LOADBALANCE);\n    }\n    \n    // 通过负载均衡组件选择 Invoker\n    Invoker<T> invoker = loadbalance.select(invokers, getUrl(), invocation);\n\n\t// 如果 selected 包含负载均衡选择出的 Invoker，或者该 Invoker 无法经过可用性检查，此时进行重选\n    if ((selected != null && selected.contains(invoker))\n            || (!invoker.isAvailable() && getUrl() != null && availablecheck)) {\n        try {\n            // 进行重选\n            Invoker<T> rinvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);\n            if (rinvoker != null) {\n                // 如果 rinvoker 不为空，则将其赋值给 invoker\n                invoker = rinvoker;\n            } else {\n                // rinvoker 为空，定位 invoker 在 invokers 中的位置\n                int index = invokers.indexOf(invoker);\n                try {\n                    // 获取 index + 1 位置处的 Invoker，以下代码等价于：\n                    //     invoker = invokers.get((index + 1) % invokers.size());\n                    invoker = index < invokers.size() - 1 ? invokers.get(index + 1) : invokers.get(0);\n                } catch (Exception e) {\n                    logger.warn(\"... may because invokers list dynamic change, ignore.\");\n                }\n            }\n        } catch (Throwable t) {\n            logger.error(\"cluster reselect fail reason is : ...\");\n        }\n    }\n    return invoker;\n}\n\nprivate Invoker<T> reselect(LoadBalance loadbalance, Invocation invocation,\n    List<Invoker<T>> invokers, List<Invoker<T>> selected, boolean availablecheck) throws RpcException {\n\n    List<Invoker<T>> reselectInvokers = new ArrayList<Invoker<T>>(invokers.size() > 1 ? (invokers.size() - 1) : invokers.size());\n\n    // 下面的 if-else 分支逻辑有些冗余，pull request #2826 对这段代码进行了简化，可以参考一下\n    // 根据 availablecheck 进行不同的处理\n    if (availablecheck) {\n        // 遍历 invokers 列表\n        for (Invoker<T> invoker : invokers) {\n            // 检测可用性\n            if (invoker.isAvailable()) {\n                // 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中\n                if (selected == null || !selected.contains(invoker)) {\n                    reselectInvokers.add(invoker);\n                }\n            }\n        }\n        \n        // reselectInvokers 不为空，此时通过负载均衡组件进行选择\n        if (!reselectInvokers.isEmpty()) {\n            return loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n\n    // 不检查 Invoker 可用性\n    } else {\n        for (Invoker<T> invoker : invokers) {\n            // 如果 selected 列表不包含当前 invoker，则将其添加到 reselectInvokers 中\n            if (selected == null || !selected.contains(invoker)) {\n                reselectInvokers.add(invoker);\n            }\n        }\n        if (!reselectInvokers.isEmpty()) {\n            // 通过负载均衡组件进行选择\n            return loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n    }\n\n    {\n        // 若线程走到此处，说明 reselectInvokers 集合为空，此时不会调用负载均衡组件进行筛选。\n        // 这里从 selected 列表中查找可用的 Invoker，并将其添加到 reselectInvokers 集合中\n        if (selected != null) {\n            for (Invoker<T> invoker : selected) {\n                if ((invoker.isAvailable())\n                        && !reselectInvokers.contains(invoker)) {\n                    reselectInvokers.add(invoker);\n                }\n            }\n        }\n        if (!reselectInvokers.isEmpty()) {\n            // 再次进行选择，并返回选择结果\n            return loadbalance.select(reselectInvokers, getUrl(), invocation);\n        }\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe-Only Mode Configuration in YAML\nDESCRIPTION: Configuration to disable service registration while maintaining subscription capability for development and testing purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/registry.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registry:\n    register: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Failfast Strategy at Service Provider Level in Dubbo XML\nDESCRIPTION: XML configuration for setting the failfast strategy at the service provider level. Failfast immediately reports errors without retrying, suitable for non-idempotent operations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-cluster-error-handling.md#2025-04-08_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.demo.DemoService\" ref=\"demoService\" cluster=\"failfast\" />\n```\n\n----------------------------------------\n\nTITLE: Downloading Dubbo Admin with Dubboctl\nDESCRIPTION: Downloads the Dubbo Admin release version using curl and installs dubboctl command line tool\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -\n```\n\n----------------------------------------\n\nTITLE: Generating Java Stack Trace for Dubbo Server Diagnosis\nDESCRIPTION: This command generates a stack trace of a Java process, which can be used to diagnose performance issues in a Dubbo server. It outputs the stack information to a file named jstack.log for further analysis.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/3/7.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Server with Registry\nDESCRIPTION: Shows how to register a service implementation and configure a Dubbo server with a Zookeeper registry. Includes service registration, registry creation, and framework initialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Register service\nregister_server(GreeterServerImpl {\n    name: \"greeter\".to_string(),\n});\n\n// Create registry\nlet zkr = ZookeeperRegistry::default();\n\nlet r = RootConfig::new();\nlet r = match r.load() {\n    Ok(config) => config,\n    Err(_err) => panic!(\"err: {:?}\", _err), // response was dropped\n};\n\n// Start Dubbo framework\nlet mut f = Dubbo::new()\n    .with_config(r)\n    // Bind the created registry to the Dubbo framework\n    .add_registry(\"zookeeper\", Box::new(zkr));\nf.start().await;\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Protocol Port in Dubbo XML\nDESCRIPTION: Shows how to configure a custom port number for the REST protocol in Dubbo instead of the default port 80.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer-side Invocation for Rest Protocol in Java\nDESCRIPTION: This method handles the consumer-side invocation for the Rest protocol. It resolves metadata, creates a request template, and processes the response asynchronously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n@Override\nprotected Result doInvoke(Invocation invocation) {\n    try {\n        RestMethodMetadata restMethodMetadata = metadataMap.get(invocation.getMethodName())\n            .get(ParameterTypesComparator.getInstance(invocation.getParameterTypes()));\n        \n        RequestTemplate requestTemplate = new RequestTemplate(invocation, restMethodMetadata.getRequest().getMethod(),\n            url.getAddress(), getContextPath(url));\n        \n        HttpConnectionCreateContext httpConnectionCreateContext = new HttpConnectionCreateContext();\n        httpConnectionCreateContext.setConnectionConfig(new HttpConnectionConfig());\n        httpConnectionCreateContext.setRequestTemplate(requestTemplate);\n        httpConnectionCreateContext.setRestMethodMetadata(restMethodMetadata);\n        httpConnectionCreateContext.setInvocation(invocation);\n        httpConnectionCreateContext.setUrl(url);\n        \n        for (HttpConnectionPreBuildIntercept intercept : httpConnectionPreBuildIntercepts) {\n            intercept.intercept(httpConnectionCreateContext);\n        }\n        \n        CompletableFuture<RestResult> future = finalRefClient.getClient().send(requestTemplate);\n        CompletableFuture<AppResponse> responseFuture = new CompletableFuture<>();\n        AsyncRpcResult asyncRpcResult = new AsyncRpcResult(responseFuture, invocation);\n        \n        future.whenComplete((r, t) -> {\n            // ... handle response\n        });\n        \n        return asyncRpcResult;\n    } catch (RpcException e) {\n        // ... handle exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SVN Commit Release Files\nDESCRIPTION: Commands for committing prepared release files to Apache SVN repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsvn status\nsvn commit -m 'prepare for ${release_version} RC1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving MetadataReport from Factory in Java\nDESCRIPTION: This snippet shows how to obtain a metadata report object from a metadata factory. It takes a URL object (which contains configuration) and passes it to the getMetadataReport method of a metadata factory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/15-Dubbo的三大中心之元数据中心源码解析.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n//从元数据工厂中获取元数据 ,url对象可以理解为配置\n MetadataReport metadataReport = metadataReportFactory.getMetadataReport(url);\n```\n\n----------------------------------------\n\nTITLE: Implementing AllChannelHandler for Thread Dispatching\nDESCRIPTION: AllChannelHandler implementation that handles different channel events and dispatches them to thread pools based on configured strategy\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class AllChannelHandler extends WrappedChannelHandler {\n\n    public AllChannelHandler(ChannelHandler handler, URL url) {\n        super(handler, url);\n    }\n\n    /** 处理连接事件 */\n    @Override\n    public void connected(Channel channel) throws RemotingException {\n        // 获取线程池\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            // 将连接事件派发到线程池中处理\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CONNECTED));\n        } catch (Throwable t) {\n            throw new ExecutionException(..., \" error when process connected event .\", t);\n        }\n    }\n\n    /** 处理断开事件 */\n    @Override\n    public void disconnected(Channel channel) throws RemotingException {\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.DISCONNECTED));\n        } catch (Throwable t) {\n            throw new ExecutionException(..., \"error when process disconnected event .\", t);\n        }\n    }\n\n    /** 处理请求和响应消息，这里的 message 变量类型可能是 Request，也可能是 Response */\n    @Override\n    public void received(Channel channel, Object message) throws RemotingException {\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            // 将请求和响应消息派发到线程池中处理\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));\n        } catch (Throwable t) {\n            if(message instanceof Request && t instanceof RejectedExecutionException){\n                Request request = (Request)message;\n                // 如果通信方式为双向通信，此时将 Server side ... threadpool is exhausted \n                // 错误信息封装到 Response 中，并返回给服务消费方。\n                if(request.isTwoWay()){\n                    String msg = \"Server side(\" + url.getIp() + \",\" + url.getPort() \n                        + \") threadpool is exhausted ,detail msg:\" + t.getMessage();\n                    Response response = new Response(request.getId(), request.getVersion());\n                    response.setStatus(Response.SERVER_THREADPOOL_EXHAUSTED_ERROR);\n                    response.setErrorMessage(msg);\n                    // 返回包含错误信息的 Response 对象\n                    channel.send(response);\n                    return;\n                }\n            }\n            throw new ExecutionException(..., \" error when process received event .\", t);\n        }\n    }\n\n    /** 处理异常信息 */\n    @Override\n    public void caught(Channel channel, Throwable exception) throws RemotingException {\n        ExecutorService cexecutor = getExecutorService();\n        try {\n            cexecutor.execute(new ChannelEventRunnable(channel, handler, ChannelState.CAUGHT, exception));\n        } catch (Throwable t) {\n            throw new ExecutionException(..., \"error when process caught event ...\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining injvm Protocol in Dubbo XML Configuration\nDESCRIPTION: This snippet shows how to define the injvm protocol in Dubbo's XML configuration. The injvm protocol is used for local calls within the JVM.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-call.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"injvm\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go Client with YAML\nDESCRIPTION: YAML configuration for the client side of the Dubbo-go application, specifying registry settings and reference definitions including the interface name and protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/quickstart/quickstart_dubbo.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  registries:\n    demoZK: # 定义服务注册发现中心\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n  consumer:\n    references:\n      UserProvider: # 存根类名\n        protocol: dubbo # dubbo 协议，默认 hessian2 序列化方式\n        interface: org.apache.dubbo.UserProvider # 接口需要与 go/java 客户端对应\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Service Address in Dubbo\nDESCRIPTION: Demonstrates how to register a Redis service address using RegistryFactory and Registry interfaces. Uses Zookeeper for service registration with Redis provider URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/redis.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();\nRegistry registry = registryFactory.getRegistry(URL.valueOf(\"zookeeper://10.20.153.10:2181\"));\nregistry.register(URL.valueOf(\"redis://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash\"));\n```\n\n----------------------------------------\n\nTITLE: Checking Installation Status\nDESCRIPTION: Verifies the installation by checking pods in dubbo-system namespace\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pod -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Event Notification Callbacks\nDESCRIPTION: Java implementation of notification callback methods for handling successful returns and exceptions in asynchronous Dubbo calls. Shows how to process return values and exceptions in callback methods.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-async-client.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class NotifyImpl implements Notify{\n\n    public Map<Integer, String> ret = new HashMap<Integer, String>();\n    \n    public void onreturn(String name, int id) {\n        ret.put(id, name);\n        System.out.println(\"onreturn: \" + name);\n    }\n\n    public void onthrow(Throwable ex, String name, int id) {\n        System.out.println(\"onthrow: \" + name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Redis Service Connection Configuration\nDESCRIPTION: Demonstrates point-to-point connection configuration to Redis service using explicit URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider with Spring Context\nDESCRIPTION: Java code to start a Dubbo Provider by loading the Spring XML configuration. Creates a ClassPathXmlApplicationContext, starts it, and keeps the application running by waiting for user input.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-supporting-grpc-http2-and-protobuf.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n  ClassPathXmlApplicationContext context = \n    new ClassPathXmlApplicationContext(\"spring/dubbo-provider.xml\");\n  context.start();\n  System.in.read();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Host Address in Dubbo Properties File\nDESCRIPTION: This example demonstrates how to configure a custom host address using the Dubbo properties file. This method is an alternative to XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/hostname-binding.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.protocol.host=205.182.23.201\n```\n\n----------------------------------------\n\nTITLE: Enabling Nacos Configuration Center in XML\nDESCRIPTION: XML configuration to enable Nacos as a configuration center for Dubbo, specifying the Nacos server address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center address=\"nacos://127.0.0.1:8848\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Stream Handlers in Go\nDESCRIPTION: Client implementation demonstrating how to establish and use different types of streams including testing functions for unary, bidirectional, client and server streaming patterns.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/rpc/streaming.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tcli, err := client.NewClient(\n\t\tclient.WithClientURL(\"tri://127.0.0.1:20000\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsvc, err := greet.NewGreetService(cli)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tTestClient(svc)\n}\n\nfunc TestClient(cli greet.GreetService) {\n\tif err := testUnary(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testBidiStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testClientStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n\n\tif err := testServerStream(cli); err != nil {\n\t\tlogger.Error(err)\n\t}\n}\n\nfunc testUnary(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE unary call\")\n\tresp, err := cli.Greet(context.Background(), &greet.GreetRequest{Name: \"triple\"})\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE unary call resp: %s\", resp.Greeting)\n\treturn nil\n}\n\nfunc testBidiStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE bidi stream\")\n\tstream, err := cli.GreetStream(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tif sendErr := stream.Send(&greet.GreetStreamRequest{Name: \"triple\"}); sendErr != nil {\n\t\treturn err\n\t}\n\tresp, err := stream.Recv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE bidi stream resp: %s\", resp.Greeting)\n\tif err := stream.CloseRequest(); err != nil {\n\t\treturn err\n\t}\n\tif err := stream.CloseResponse(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc testClientStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE client stream\")\n\tstream, err := cli.GreetClientStream(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor i := 0; i < 5; i++ {\n\t\tif sendErr := stream.Send(&greet.GreetClientStreamRequest{Name: \"triple\"}); sendErr != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tresp, err := stream.CloseAndRecv()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Infof(\"TRIPLE client stream resp: %s\", resp.Greeting)\n\treturn nil\n}\n\nfunc testServerStream(cli greet.GreetService) error {\n\tlogger.Info(\"start to test TRIPLE server stream\")\n\tstream, err := cli.GreetServerStream(context.Background(), &greet.GreetServerStreamRequest{Name: \"triple\"})\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor stream.Recv() {\n\t\tlogger.Infof(\"TRIPLE server stream resp: %s\", stream.Msg().Greeting)\n\t}\n\tif stream.Err() != nil {\n\t\treturn err\n\t}\n\tif err := stream.Close(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Etcd Registry Dependency in Maven\nDESCRIPTION: Adds the Etcd registry adapter as a separate module dependency for Dubbo 3 and later versions. This is required as the Etcd registry is no longer embedded in Dubbo core.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/others/etcd.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-registry-etcd</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Request Parameters in JSON for Dubbo-Go CLI\nDESCRIPTION: JSON configuration file (userCall.json) defining request parameters with type annotations and values. Includes nested structures and required JavaClassName fields for server-side mapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"string@A000\",\n  \"Male\": \"bool@true\",\n  \"SubInfo\": {\n    \"SubID\": \"string@A001\",\n    \"SubMale\": \"bool@false\",\n    \"SubAge\": \"int@18\",\n    \"JavaClassName\":\"string@com.ikurento.user.SubInfo\"\n  },\n  \"JavaClassName\": \"string@com.ikurento.user.CallUserStruct\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced HTTP to Dubbo Conversion Service in Java\nDESCRIPTION: Implementation of a generic HTTP to Dubbo converter service that uses reflection to call any Dubbo method. This approach allows existing Dubbo services that don't follow the Map<String, Object> interface pattern to be exposed through APISIX.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboInvocationParameter {\n    private String type;\n    private String value;\n}\n\npublic class DubboInvocation {\n    private String service;\n    private String method;\n    private DubboInvocationParameter[] parameters;\n}\n\npublic interface HTTP2DubboService {\n    Map<String, Object> invoke(Map<String, Object> context)  throws Exception;\n}\n\n\n@Component\npublic class HTTP2DubboServiceImpl implements HTTP2DubboService {\n\n    @Autowired\n    private ApplicationContext appContext;\n\n    @Override\n    public Map<String, Object> invoke(Map<String, Object> context) throws Exception {\n        DubboInvocation invocation = JSONObject.parseObject((byte[]) context.get(\"body\"), DubboInvocation.class);\n        Object[] args = new Object[invocation.getParameters().size()];\n        for (int i = 0; i < args.length; i++) {\n            DubboInvocationParameter parameter = invocation.getParameters().get(i);\n            args[i] = JSONObject.parseObject(parameter.getValue(), Class.forName(parameter.getType()));\n        }\n\n        Object svc = appContext.getBean(Class.forName(invocation.getService()));\n        Object result = svc.getClass().getMethod(invocation.getMethod()).invoke(args);\n        Map<String, Object> httpResponse = new HashMap<>();\n        httpResponse.put(\"status\", 200);\n        httpResponse.put(\"body\", JSONObject.toJSONString(result));\n        return httpResponse;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Single Dubbo Configuration Properties Example\nDESCRIPTION: Example of properties file configuration for single Dubbo bean binding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n## application\ndubbo.application.id = applicationBean\ndubbo.application.name = dubbo-demo-application\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Provider in Java\nDESCRIPTION: Demonstrates how to use AsyncContext to implement asynchronous execution in the Provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public String sayHello(String name) {\n        final AsyncContext asyncContext = RpcContext.startAsync();\n        new Thread(() -> {\n            asyncContext.signalContextSwitch();\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            asyncContext.write(\"Hello \" + name + \", response from provider.\");\n        }).start();\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Installation Status\nDESCRIPTION: Verifies the installation by checking pods in dubbo-system namespace\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pod -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Implementing AggregateMetricsCollector in Java\nDESCRIPTION: This code defines an AggregateMetricsCollector class that implements MetricsCollector and MetricsListener interfaces. It initializes various metrics collections and configures aggregation settings based on the application configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/metrics.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AggregateMetricsCollector implements MetricsCollector, MetricsListener {\n    private int bucketNum;\n    private int timeWindowSeconds;\n\n    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();\n\n    private final ApplicationModel applicationModel;\n\n    private static final Integer DEFAULT_COMPRESSION = 100;\n    private static final Integer DEFAULT_BUCKET_NUM = 10;\n    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;\n\n    public AggregateMetricsCollector(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        ConfigManager configManager = applicationModel.getApplicationConfigManager();\n        MetricsConfig config = configManager.getMetrics().orElse(null);\n        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {\n            // only registered when aggregation is enabled.\n            registerListener();\n\n            AggregationConfig aggregation = config.getAggregation();\n            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();\n            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Implementation in Properties File for Dubbo\nDESCRIPTION: This snippet shows the content of the org.apache.dubbo.rpc.Protocol file that should be placed in the resources/META-INF/services/ directory. It maps the custom protocol name to the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/spi.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncustomized=com.spi.demo.CustomizedProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI Implementation in Properties File for Dubbo\nDESCRIPTION: This snippet shows the content of the org.apache.dubbo.rpc.Protocol file that should be placed in the resources/META-INF/services/ directory. It maps the custom protocol name to the implementation class.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/spi.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncustomized=com.spi.demo.CustomizedProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Service in Dubbo XML\nDESCRIPTION: XML configuration for an asynchronous service in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<bean id=\"asyncService\" class=\"com.alibaba.dubbo.samples.async.impl.AsyncServiceImpl\"/>\n<dubbo:service interface=\"com.alibaba.dubbo.samples.async.api.AsyncService\" ref=\"asyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Field Names with Jackson Annotations\nDESCRIPTION: Shows how to use Jackson annotations to customize the mapping of Java object properties to JSON fields, such as customizing field names.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class User implements Serializable {\n    \n    @JsonProperty(\"username\")\n    private String name;\n}\n```\n\n----------------------------------------\n\nTITLE: GPG Signing Fix Command\nDESCRIPTION: Command to resolve the 'gpg: signing failed: Inappropriate ioctl for device' error during release signing process by setting the GPG TTY environment variable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport GPG_TTY=$(tty)\n```\n\n----------------------------------------\n\nTITLE: RESTEasy Service Interface Definition\nDESCRIPTION: Defines a REST API interface using RESTEasy/JAX-RS annotations for path mapping and parameter binding.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/demoService\")\npublic interface RestDemoService {\n    @GET\n    @Path(\"/hello\")\n    Integer hello(@QueryParam(\"a\")Integer a,@QueryParam(\"b\") Integer b);\n\n    @GET\n    @Path(\"/error\")\n    String error();\n\n    @POST\n    @Path(\"/say\")\n    @Consumes({MediaType.TEXT_PLAIN})\n    String sayHello(String name);\n\n    boolean isCalled();\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Advanced Dubbo REST Service with cURL\nDESCRIPTION: Demonstrates testing an advanced Dubbo service with custom path mapping, header parameters, and POST body data using cURL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"c: 3\" -d 'name=Yang' \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr\"\n```\n\n----------------------------------------\n\nTITLE: XML Format Example with Wrapper Object\nDESCRIPTION: Illustrates the XML format when using a wrapper object for return values. The wrapper creates a well-structured XML document with named elements rather than a plain value.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<registrationResult>\n    <id>1002</id>\n</registrationResult>\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Interface in Dubbo\nDESCRIPTION: A simple service interface definition for the GreetingService that will be implemented by the service provider and consumed by service consumers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic interface GreetingService {\n    String sayHello(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Node in Zookeeper\nDESCRIPTION: Example of creating a data node in Zookeeper named '/hello-zone' with the value 'world' using the zkCli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncreate /hello-zone 'world'\n```\n\n----------------------------------------\n\nTITLE: Defining MetricsCategory Enum in Java\nDESCRIPTION: This code snippet defines the MetricsCategory enum, which represents different categories of metrics such as response time (RT), queries per second (QPS), and request count.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic enum MetricsCategory {\n    RT,\n    QPS,\n    REQUESTS,\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GPG Keys\nDESCRIPTION: Commands for viewing, sending, and managing GPG keys including listing keys and sending them to keyservers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --list-keys\n$ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1\n$ gpg --yes --delete-secret-keys shenglicao2@gmail.com\n$ gpg --delete-keys 1808C6444C781C0AEA0AAD4C4D6A8007D20DB8A4\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol for All Services\nDESCRIPTION: Configures dubbo as the default protocol for all services provided by this provider. This applies the protocol setting globally to all services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo Configuration Bean in Java\nDESCRIPTION: Example of creating an ApplicationConfig bean using Java configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-externalized-configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n    @Bean\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"dubbo-annotation-consumer\");\n        return applicationConfig;\n    }\n```\n\n----------------------------------------\n\nTITLE: Registering Telnet Handler in Properties File\nDESCRIPTION: Properties file configuration for registering a custom telnet handler implementation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/telnet-handler.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxTelnetHandler\n```\n\n----------------------------------------\n\nTITLE: Removing Istio HPA Configuration\nDESCRIPTION: Command to delete the horizontal pod autoscaler for istiod to ensure single instance deployment, which is required for Dubbo-go service discovery functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/istio.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl delete hpa istiod -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Implementing MetricsFilter in Java for Dubbo\nDESCRIPTION: This code snippet shows the implementation of MetricsFilter, which intercepts method invocations to collect metrics. It tracks total requests, processing requests, successful requests, failed requests, and response time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Activate(group = PROVIDER, order = -1)\npublic class MetricsFilter implements Filter, ScopeModelAware {\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        collector.increaseTotalRequests(interfaceName, methodName, group, version);\n        collector.increaseProcessingRequests(interfaceName, methodName, group, version);\n        Long startTime = System.currentTimeMillis();\n        try {\n            Result invoke = invoker.invoke(invocation);\n            collector.increaseSucceedRequests(interfaceName, methodName, group, version);\n            return invoke;\n        } catch (RpcException e) {\n            collector.increaseFailedRequests(interfaceName, methodName, group, version);\n            throw e;\n        } finally {\n            Long endTime = System.currentTimeMillis();\n            Long rt = endTime - startTime;\n            collector.addRT(interfaceName, methodName, group, version, rt);\n            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Registry for Traffic Routing in XML\nDESCRIPTION: XML configuration showing how to set a preferred registry center that should be tried first when routing traffic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 来自 preferred=\"true\" 注册中心的地址将被优先选择，只有该中心无可用地址时才 Fallback 到其他注册中心 -->\n<dubbo:registry address=\"zookeeper://${zookeeper.address1}\" preferred=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: 在XML中关闭所有服务的启动检查\nDESCRIPTION: 通过在dubbo:consumer标签中设置check=\"false\"来关闭所有服务的启动时检查。这样所有服务即使没有提供者也不会报错。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/preflight-check.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:consumer check=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Registry Selection in XML\nDESCRIPTION: XML configuration showing how to set up weighted registry selection to control traffic distribution between multiple registry centers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/multiple-protocols-registries.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 来自北京和上海集群的地址，将以 10:1 的比例来分配流量 -->\n<dubbo:registry id=\"beijing\" address=\"zookeeper://${zookeeper.address1}\" weight=\"100\" />\n<dubbo:registry id=\"shanghai\" address=\"zookeeper://${zookeeper.address2}\" weight=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Helm Installation Status\nDESCRIPTION: Verifies the Helm installation by listing releases and checking deployments in the dubbo-system namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nhelm ls -n dubbo-system\n\nkubectl get deployments -n dubbo-system --output wide\n```\n\n----------------------------------------\n\nTITLE: Retrieving Istio Virtual Services YAML Configuration\nDESCRIPTION: This command displays the defined virtual service routes that direct traffic to v1 versions of the Bookinfo microservices. The YAML output shows the configuration for each service directing traffic to their respective v1 subsets.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/traffic/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - details\n    http:\n    - route:\n      - destination:\n          host: details\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - productpage\n    http:\n    - route:\n      - destination:\n          host: productpage\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - ratings\n    http:\n    - route:\n      - destination:\n          host: ratings\n          subset: v1\n- apiVersion: networking.istio.io/v1beta1\n  kind: VirtualService\n  ...\n  spec:\n    hosts:\n    - reviews\n    http:\n    - route:\n      - destination:\n          host: reviews\n          subset: v1\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Directories in Java for Apache Dubbo\nDESCRIPTION: This method loads extension classes from specified directories. It uses class loaders to find resources and then loads them using the loadResource method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadDirectory(Map<String, Class<?>> extensionClasses, String dir, String type,\n                           boolean extensionLoaderClassLoaderFirst, boolean overridden, String... excludedPackages) {\n    // fileName = 文件夹路径 + type 全限定名 \n    String fileName = dir + type;\n    try {\n        Enumeration<java.net.URL> urls = null;\n        ClassLoader classLoader = findClassLoader();\n\n        // try to load from ExtensionLoader's ClassLoader first\n        if (extensionLoaderClassLoaderFirst) {\n            ClassLoader extensionLoaderClassLoader = ExtensionLoader.class.getClassLoader();\n            if (ClassLoader.getSystemClassLoader() != extensionLoaderClassLoader) {\n                urls = extensionLoaderClassLoader.getResources(fileName);\n            }\n        }\n        // 根据文件名加载所有的同名文件\n        if (urls == null || !urls.hasMoreElements()) {\n            if (classLoader != null) {\n                urls = classLoader.getResources(fileName);\n            } else {\n                urls = ClassLoader.getSystemResources(fileName);\n            }\n        }\n\n        if (urls != null) {\n            while (urls.hasMoreElements()) {\n                java.net.URL resourceURL = urls.nextElement();\n                // 加载资源\n                loadResource(extensionClasses, classLoader, resourceURL, overridden, excludedPackages);\n            }\n        }\n    } catch (Throwable t) {\n        logger.error(\"Exception occurred when loading extension class (interface: \" +\n                type + \", description file: \" + fileName + \").\", t);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Aggregate Metrics Collector in Java for Dubbo\nDESCRIPTION: A Java implementation of the AggregateMetricsCollector class that collects and aggregates metrics data using time window counters. It handles configuration of bucket numbers and time windows from Dubbo's configuration system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class AggregateMetricsCollector implements MetricsCollector, MetricsListener {\n    private int bucketNum;\n    private int timeWindowSeconds;\n\n    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();\n    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();\n\n    private final ApplicationModel applicationModel;\n\n    private static final Integer DEFAULT_COMPRESSION = 100;\n    private static final Integer DEFAULT_BUCKET_NUM = 10;\n    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;\n\n// In the constructor, parse the configuration information\n\n    public AggregateMetricsCollector(ApplicationModel applicationModel) {\n        this.applicationModel = applicationModel;\n        ConfigManager configManager = applicationModel.getApplicationConfigManager();\n        MetricsConfig config = configManager.getMetrics().orElse(null);\n        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {\n            // only registered when aggregation is enabled.\n            registerListener();\n\n            AggregationConfig aggregation = config.getAggregation();\n            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();\n            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Release Source Code\nDESCRIPTION: Maven commands to compile and test the source code, including options to run RAT and checkstyle plugins to verify license headers and code style.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean test # This will run all unit tests\n# you can also open rat and style plugin to check if every file meets requirements.\nmvn clean test -Drat.skip=false -Dcheckstyle.skip=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Routing Rule in YAML for Dubbo\nDESCRIPTION: This YAML snippet demonstrates how to configure a tag routing rule for the 'shop-detail' application in Dubbo. It defines a 'gray' environment tag that matches instances with 'env=gray'.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/tag-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nforce: true\nenabled: true\nkey: shop-detail\ntags:\n  - name: gray\n    match:\n      - key: env\n        value:\n          exact: gray\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty Container in Dubbo Properties\nDESCRIPTION: Configures Jetty container settings including port, directory for static files, and pages to display.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.jetty.port=8080\ndubbo.jetty.directory=/foo/bar\ndubbo.jetty.page=log,status,system\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Page in YAML for Dubbo Website\nDESCRIPTION: This YAML front matter block sets the 'headless' property to true, indicating that the associated page or component should be rendered without a typical header or layout. This configuration is commonly used in static site generators or content management systems to create partial templates or components that can be included in other pages without their own headers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/_common-resources/index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nheadless: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Security in dubbo.properties\nDESCRIPTION: Disables acceptance of commands from foreign IP addresses using the dubbo.properties configuration file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\ndubbo.application.qos.accept.foreign.ip=false\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper in Standalone Mode\nDESCRIPTION: Command to start Zookeeper server in standalone mode using the zkServer.sh script.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbin/zkServer.sh start\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application with Properties File\nDESCRIPTION: A typical example of a dubbo.properties configuration file. It sets the application name, owner, and registry address using property notation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/properties.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.name=foo\ndubbo.application.owner=bar\ndubbo.registry.address=10.20.153.10:9090\n```\n\n----------------------------------------\n\nTITLE: Maven Project Structure for Dubbo Extensions\nDESCRIPTION: Displays the recommended Maven project structure for implementing a custom LoadBalance extension in Dubbo, showing the file organization pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/load-balance.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n |-main\n    |-java\n        |-com\n            |-xxx\n                |-XxxLoadBalance.java (implements LoadBalance interface)\n    |-resources\n        |-META-INF\n            |-dubbo\n                |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file, content: xxx=com.xxx.XxxLoadBalance)\n```\n\n----------------------------------------\n\nTITLE: Registering Serialization Optimizer in XML\nDESCRIPTION: XML configuration to register a SerializationOptimizer implementation with Dubbo protocol to optimize serialization performance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" serialization=\"kryo\" optimizer=\"org.apache.dubbo.demo.SerializationOptimizerImpl\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Maven Central Repository in settings.xml\nDESCRIPTION: XML configuration for Maven's settings.xml file to authenticate with Apache repositories for snapshot and release deployments, including GPG passphrase setup.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<settings>\n...\n <servers>\n   <!-- To publish a snapshot of some part of Maven -->\n   <server>\n     <id>apache.snapshots.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n   <!-- To stage a release of some part of Maven -->\n   <server>\n     <id>apache.releases.https</id>\n     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>\n     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>\n   </server>\n  ...\n     <!-- gpg passphrase used when generate key -->\n    <server>\n     <id>gpg.passphrase</id>\n     <passphrase><!-- yourKeyPassword --></passphrase>\n   </server>\n </servers>\n</settings>\n```\n\n----------------------------------------\n\nTITLE: Spring MVC Style REST API Definition for Dubbo\nDESCRIPTION: Interface defining a REST service using Spring MVC annotations. It specifies HTTP methods, paths, and parameter handling for different endpoints using @RestController and @RequestMapping annotations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/v3.2_rest_protocol_design.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@RestController()\n    @RequestMapping(\"/demoService\")\n    public interface DemoService {\n        @RequestMapping(value = \"/hello\", method = RequestMethod.GET)\n        Integer hello(@RequestParam Integer a, @RequestParam Integer b);\n\n        @RequestMapping(value = \"/error\", method = RequestMethod.GET)\n        String error();\n\n        @RequestMapping(value = \"/say\", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)\n        String sayHello(@RequestBody String name);\n    }\n```\n\n----------------------------------------\n\nTITLE: Spring.factories Configuration for Hystrix Circuit Breaker\nDESCRIPTION: Properties configuration file entry that declares the Hystrix Circuit Breaker configuration class to be loaded by Spring's EnableCircuitBreakerImportSelector.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\norg.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker=\\\norg.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace in YAML (Parameters Style)\nDESCRIPTION: YAML configuration to specify a custom namespace for Nacos using the parameters property. This is an alternative way to set the namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   parameters.namespace: 5cbb70a5-xxx-xxx-xxx-d43479ae0932\n```\n\n----------------------------------------\n\nTITLE: Exporting Metrics via HTTP Server for Prometheus Pull in Dubbo\nDESCRIPTION: Method to set up an HTTP server that exposes metrics endpoints for Prometheus to pull data from. The implementation configures port, path, and responds with metrics data scraped from the Prometheus registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nprivate void exportHttpServer() {\n    boolean exporterEnabled = url.getParameter(PROMETHEUS_EXPORTER_ENABLED_KEY, false);\n    if (exporterEnabled) {\n        int port = url.getParameter(PROMETHEUS_EXPORTER_METRICS_PORT_KEY, PROMETHEUS_DEFAULT_METRICS_PORT);\n        String path = url.getParameter(PROMETHEUS_EXPORTER_METRICS_PATH_KEY, PROMETHEUS_DEFAULT_METRICS_PATH);\n        if (!path.startsWith(\"/\")) {\n            path = \"/\" + path;\n        }\n\n        try {\n            prometheusExporterHttpServer = HttpServer.create(new InetSocketAddress(port), 0);\n            prometheusExporterHttpServer.createContext(path, httpExchange -> {\n                String response = prometheusRegistry.scrape();\n                httpExchange.sendResponseHeaders(200, response.getBytes().length);\n                try (OutputStream os = httpExchange.getResponseBody()) {\n                    os.write(response.getBytes());\n                }\n            });\n\n            httpServerThread = new Thread(prometheusExporterHttpServer::start);\n            httpServerThread.start();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Dubbo Consumer with Timeout Settings\nDESCRIPTION: Example Dubbo consumer configuration with a 3000ms timeout, which is longer than the provider's processing time, to demonstrate how timeout exceptions are propagated from the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/provider-timeout-release.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    // 设置consumer超时时间大于服务端执行时间2000\n    @Reference(check = false,interfaceClass = TestService.class,timeout = 3000)\n    private TestService testService;\n\n    @GetMapping(\"/sum\")\n    public String consumeSum(){\n        Integer ret = 0;\n        try{\n             ret = testService.sum(1,1);\n        }catch (Exception e){\n           return e.getMessage();\n        }\n        return String.valueOf(ret);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring DispatcherServlet for Dubbo HTTP Protocol\nDESCRIPTION: Sets up the DispatcherServlet for handling Dubbo HTTP requests, including servlet definition and mapping.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/http.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n         <servlet-name>dubbo</servlet-name>\n         <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n         <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n         <servlet-name>dubbo</servlet-name>\n         <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Deploying Release Artifacts to Maven Central\nDESCRIPTION: Maven commands to deploy release artifacts to Maven Central with the release profile, skipping tests to expedite the process while ensuring proper staging.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn clean install -Prelease\n$ mvn deploy -Prelease -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Validation Configuration in Dubbo\nDESCRIPTION: XML configuration for enabling validation in Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=xxx.UserService\" ref=\"userService\" protocol=\"rest\" validation=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Generating Language-Specific Content Grid in Hugo for Apache Dubbo Website\nDESCRIPTION: This Hugo template creates a responsive grid layout for language-specific content. It dynamically generates columns with headings and item lists, handling repository links and content rendering. The template uses custom page parameters and string manipulations to build the final HTML structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/layouts/shortcodes/docs/prog-lang-home-content.md#2025-04-08_snippet_0\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ $lang := lower ($.Page.Params.language | default $.Page.Params.title) -}}\n{{ $src_repo_url := $.Page.Params.src_repo | default (printf \"https://github.com/apache/dubbo-%s\" $lang) -}}\n{{ $src_repo_link := printf \"[dubbo-%s repo](%s)\" $lang $src_repo_url -}}\n\n{{ with .Page.Params.content -}}\n<div class=\"row flex-col flex-md-row o-lang-home__list\">\n{{ range $list_entry := . }}\n{{ range $heading, $items := $list_entry }}\n{{ $hd := printf \"### %s\" (humanize $heading) -}}\n<div class=\"col-12 col-md-4\">\n\n{{ $hd }}\n\n<ul>\n{{ range $items }}\n  {{ $item := replace . \"$src_repo_url\" $src_repo_url }}\n  {{ $item = replace $item \"$src_repo_link\" $src_repo_link }}\n  <li>{{ $item | $.Page.RenderString }}</li>\n{{ end }}\n</ul>\n</div>\n{{ end }}\n{{ end }}\n</div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sentinel Dubbo Consumer Filter in Java\nDESCRIPTION: This Java code demonstrates how to manually disable the Sentinel Dubbo consumer filter if needed. It creates a ConsumerConfig bean and sets the filter to exclude the Sentinel Dubbo consumer filter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/sentinel-introduction-for-dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic ConsumerConfig consumerConfig() {\n    ConsumerConfig consumerConfig = new ConsumerConfig();\n    consumerConfig.setFilter(\"-sentinel.dubbo.consumer.filter\");\n    return consumerConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Service in Java\nDESCRIPTION: Implements the CallbackService interface with a map to store listeners and a thread to trigger notifications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.callback.impl;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport com.callback.CallbackListener;\nimport com.callback.CallbackService;\n\npublic class CallbackServiceImpl implements CallbackService {\n     \n    private final Map<String, CallbackListener> listeners = new ConcurrentHashMap<String, CallbackListener>();\n  \n    public CallbackServiceImpl() {\n        Thread t = new Thread(new Runnable() {\n            public void run() {\n                while(true) {\n                    try {\n                        for(Map.Entry<String, CallbackListener> entry : listeners.entrySet()){\n                           try {\n                               entry.getValue().changed(getChanged(entry.getKey()));\n                           } catch (Throwable t) {\n                               listeners.remove(entry.getKey());\n                           }\n                        }\n                        Thread.sleep(5000); // Regularly trigger change notification\n                    } catch (Throwable t) { // Fault tolerance\n                        t.printStackTrace();\n                    }\n                }\n            }\n        });\n        t.setDaemon(true);\n        t.start();\n    }\n  \n    public void addListener(String key, CallbackListener listener) {\n        listeners.put(key, listener);\n        listener.changed(getChanged(key)); // Send change notification\n    }\n     \n    private String getChanged(String key) {\n        return \"Changed: \" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Protocol Message Structure Example\nDESCRIPTION: Example of an HTTP request message format showing headers and JSON body payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /test/path?  HTTP/1.1\nHost: localhost:8080\nConnection: keep-alive\nContent-type: application/json\n\n{\"name\":\"dubbo\",\"age\":10,\"address\":\"hangzhou\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Default GPG Key for Apache Release\nDESCRIPTION: Configuration for setting the default GPG key when multiple keys exist on the system by modifying the gpg.conf file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# If you have more than 1 secret key in your keyring, you may want to\n# uncomment the following option and set your preferred keyid.\ndefault-key 28681CB1\n```\n\n----------------------------------------\n\nTITLE: Checking Serialization Status via Telnet\nDESCRIPTION: Shows how to use telnet to connect to Dubbo QoS port 22222 and execute the serializeCheckStatus command to view current serialization security configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/security.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> telnet 127.0.0.1 22222\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n   ___   __  __ ___   ___   ____     \n  / _ \\ / / / // _ ) / _ ) / __ \\  \n / // // /_/ // _  |/ _  |/ /_/ /    \n/____/ \\____//____//____/ \\____/   \ndubbo>serializeCheckStatus\nCheckStatus: WARN\n\nCheckSerializable: true\n\nAllowedPrefix:\n...\n\nDisAllowedPrefix:\n...\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Client in TypeScript\nDESCRIPTION: TypeScript configuration for dubbo2.js client including service proxy setup and method implementations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo2-js.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dubbo, java, TDubboCallResult } from 'dubbo2.js'\n\nconst dubbo = new Dubbo({\n  application: {name: 'demo-provider'},\n  register: 'localhost:2181',\n  dubboVersion: '2.0.0',\n  interfaces: [\n    'com.alibaba.dubbo.demo.DemoProvider',\n  ],\n});\n\ninterface IDemoService {\n  sayHello(name: string): TDubboCallResult<string>;\n}\n\nexport const demoService = dubbo.proxyService<IDemoService>({\n  dubboInterface: 'com.alibaba.dubbo.demo.DemoProvider',\n  version: '1.0.0',\n  methods: {\n    sayHello(name: string) {\n      return [java.String(name)];\n    },\n\n    echo() {},\n\n    test() {},\n\n    getUserInfo() {\n      return [\n        java.combine('com.alibaba.dubbo.demo.UserRequest', {\n          id: 1,\n          name: 'nodejs',\n          email: 'node@qianmi.com',\n        }),\n      ];\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Apache Maven Parent POM Configuration\nDESCRIPTION: XML configuration showing the Apache parent POM setup required for Dubbo project versions 2.7.0 and above.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n<groupId>org.apache</groupId>\n<artifactId>apache</artifactId>\n<version>19</version>\n</parent>\n```\n\n----------------------------------------\n\nTITLE: Consul Metadata Center YAML Configuration\nDESCRIPTION: YAML configuration for setting up Consul as a metadata center in Dubbo, specifying the connection address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo\n  metadata-report\n    address: consul://127.0.0.1:1111\n```\n\n----------------------------------------\n\nTITLE: Listing Root Nodes in Zookeeper\nDESCRIPTION: Command to list all nodes at the root path in Zookeeper's data hierarchy, executed from within the Zookeeper CLI shell.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nls /\n```\n\n----------------------------------------\n\nTITLE: Defining JVM GC Memory Allocation Metric in Prometheus\nDESCRIPTION: This snippet defines a Prometheus counter metric for JVM garbage collection memory allocation. It tracks the increase in young heap memory pool size between GC cycles.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_8\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next\n# TYPE jvm_gc_memory_allocated_bytes_total counter\njvm_gc_memory_allocated_bytes_total 2.9884416E9\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command to build and push Docker image using dubboctl.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ dubboctl build\n```\n\n----------------------------------------\n\nTITLE: Adding Service Dependency in Maven POM.xml\nDESCRIPTION: This XML snippet shows how to add a dependency to the service interface package in a Maven project. This is required for consumer applications to know the service contract defined by the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/service-definition.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-demo-interface</artifactId>\n    <version>3.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Go Client for Dubbo Intercommunication\nDESCRIPTION: This command starts the Go client, which will make a call to the previously started Java server. It completes the demonstration of bidirectional intercommunication between Go and Java implementations using the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo run go/go-client/cmd/client.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Default GPG Key in Configuration File\nDESCRIPTION: Instructions for setting the default GPG key in the gpg.conf file when multiple keys exist on the system, allowing the release process to use the correct key automatically.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# If you have more than 1 secret key in your keyring, you may want to\n# uncomment the following option and set your preferred keyid.\ndefault-key 28681CB1\n```\n\n----------------------------------------\n\nTITLE: Limiting Client-Side Connections in Dubbo XML Configuration\nDESCRIPTION: This XML snippet shows how to limit the number of connections used by the client side to 10 using either the <dubbo:reference> or <dubbo:service> tag. If both are configured, <dubbo:reference> takes precedence.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/config-connections.md#2025-04-08_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing UserInfoDO Class in Java\nDESCRIPTION: Definition of the UserInfoDO class with nested complex types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/service-test.md#2025-04-08_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class UserInfoDO {\n    private int id;\n    private LocationDO locationDO;\n    private DepartmentDO departmentDO;\n\n    @Override\n    public String toString() {\n        return \"UserInfoDO{\" +\n                \"id=\" + id +\n                \", locationDO=\" + locationDO.toString() +\n                \", departmentDO=\" + departmentDO.toString() +\n                '}';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet Bridge Server for Webservice in Dubbo (XML)\nDESCRIPTION: XML configuration for setting up a Servlet Bridge Server and DispatcherServlet for Webservice protocol in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/webservice.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol ... server=\"servlet\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<servlet>\n         <servlet-name>dubbo</servlet-name>\n         <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n         <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n         <servlet-name>dubbo</servlet-name>\n         <url-pattern>/*</url-pattern>\n</servlet-mapping>\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Logging for Dubbo REST\nDESCRIPTION: XML configuration to enable the built-in LoggingFilter for Dubbo REST protocol. This filter logs all HTTP headers and message bodies for debugging purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"org.apache.dubbo.rpc.protocol.rest.support.LoggingFilter\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up SVN Environment for Release Distribution\nDESCRIPTION: Commands to checkout Apache Dubbo's distribution directory from SVN and create a new directory for the current release version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ svn checkout https://dist.apache.org/repos/dist/dev/dubbo\n# 假定本地目录为 ~/apache/dubbo\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Dump Directory in Properties File\nDESCRIPTION: Sets the output directory for Dubbo's automatic thread stack dumps using a properties file. This configuration specifies where the dump files will be saved when a thread pool becomes full.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/dump.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# dubbo.properties\ndubbo.application.dump.directory=/tmp\n```\n\n----------------------------------------\n\nTITLE: Thread Pool Extension Configuration File\nDESCRIPTION: Properties file content for registering the custom thread pool implementation with Dubbo's extension mechanism.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/threadpool.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nxxx=com.xxx.XxxThreadPool\n```\n\n----------------------------------------\n\nTITLE: Creating User Instance for Dubbo-Go Generic Call Example\nDESCRIPTION: This code creates an instance of the User struct with sample data to demonstrate how it would be used in a normal (non-generic) call.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// an instance of the User\nuser := &User{\n    ID:   \"1\",\n    Name: \"Zhangsan\",\n    Age:  20,\n}\n```\n\n----------------------------------------\n\nTITLE: Dubbo HTTP Headers Definition\nDESCRIPTION: Specification of required Dubbo HTTP headers including service key, connection settings, and RPC context information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n// service key header\npath: com.demo.TestInterface\ngroup: demo\nport: 80\nversion: 1.0.0\n\n// Ensure long connection\nKeep-Alive, Connection: keep-alive\nKeep-alive: 60\n\n// RPCContext Attachment\nuserId: 123456\n```\n\n----------------------------------------\n\nTITLE: Using Maven Release Plugin for Dubbo Release\nDESCRIPTION: Maven commands to prepare and perform releases using the maven-release-plugin, including a dry run to validate the process and the actual release preparation and deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn release:prepare -Prelease -Darguments=\"-DskipTests\" -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID-DdryRun=true\n```\n\n----------------------------------------\n\nTITLE: Defining User Struct for Generic Invocation in Go\nDESCRIPTION: Defines a User struct with ID, Name, and Age fields, along with a JavaClassName method for Dubbo compatibility.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/generic.md#2025-04-08_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tID   string\n\tName string\n\tAge  int32\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn \"org.apache.dubbo.sample.User\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Provider in Java\nDESCRIPTION: This snippet demonstrates how to set up TLS configuration for a Dubbo provider. It includes setting server key and certificate paths, and optionally enabling mutual TLS authentication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/tls.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSslConfig sslConfig = new SslConfig();\nsslConfig.setServerKeyCertChainPath(\"path to cert\");\nsslConfig.setServerPrivateKeyPath(args[1]);\n// 如果开启双向 cert 认证\nif (mutualTls) {\n  sslConfig.setServerTrustCertCollectionPath(args[2]);\n}\n\nProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo/grpc\");\nprotocolConfig.setSslEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Fixing GPG Signing Error in Apache Dubbo Release Process\nDESCRIPTION: Shell command to fix the 'gpg: signing failed: Inappropriate ioctl for device' error by setting the GPG_TTY environment variable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/committer/release-guide_dev.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport GPG_TTY=$(tty)\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Helm Components\nDESCRIPTION: Commands for installing different Dubbo components using Helm\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/setup/install.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm install dubbo-admin dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-nacos dubbo/dubbo-stack -n dubbo-system\n\nhelm install dubbo-admin-zookeeper dubbo/dubbo-stack -n dubbo-system\n```\n\n----------------------------------------\n\nTITLE: Running Zookeeper in Docker Container\nDESCRIPTION: Docker command to run Zookeeper 3.8.3 in a container with port mapping and JVM flags to disable the admin server, set to restart automatically.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name some-zookeeper -p 2181:2181 -e JVMFLAGS=\"-Dzookeeper.admin.enableServer=false\" --restart always -d zookeeper:3.8.3\n```\n\n----------------------------------------\n\nTITLE: ConsumerConfig Properties Definition in Java\nDESCRIPTION: Defines the complete set of configuration properties available in the ConsumerConfig class of Apache Dubbo. This includes settings for connection management, threading, timeout handling, load balancing, and service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ConsumerConfig {\n    Integer actives;              // Maximum concurrent invocations\n    Boolean async;               // Enable asynchronous invocation\n    Boolean auth;                // Enable service authentication\n    String cache;                // Cache provider type\n    Integer callbacks;           // Callback limits\n    Boolean check;               // Check if provider exists\n    String client;               // Client type\n    String cluster;              // Cluster type\n    Integer connections;         // Connection limits\n    Integer timeout;             // Remote invocation timeout\n    String loadbalance;          // Load balancing strategy\n    // ... additional properties\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User-Based Routing Configuration in Istio\nDESCRIPTION: This command retrieves and displays the YAML configuration of the virtual service for the reviews service, showing the user-based routing rules.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/traffic/request-routing.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservice reviews -o yaml\n```\n\n----------------------------------------\n\nTITLE: Loading Migration Configuration in Dubbo\nDESCRIPTION: Demonstrates how Dubbo loads migration rules from dubbo-migration.yaml configuration file, following a similar pattern to other configuration sources by checking JVM parameters, environment variables, and using a default path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/14-Dubbo配置加载全解析.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n  private void loadMigrationRule() {\n  \t//JVM参数的dubbo.migration.file配置\n        String path = System.getProperty(CommonConstants.DUBBO_MIGRATION_KEY);\n        if (StringUtils.isEmpty(path)) {\n        //环境变量的dubbo.migration.file配置\n            path = System.getenv(CommonConstants.DUBBO_MIGRATION_KEY);\n            if (StringUtils.isEmpty(path)) {\n            //默认的迁移配置文件 dubbo-migration.yaml\n                path = CommonConstants.DEFAULT_DUBBO_MIGRATION_FILE;\n            }\n        }\n        this.localMigrationRule = ConfigUtils.loadMigrationRule(scopeModel.getClassLoaders(), path);\n    }\n```\n\n----------------------------------------\n\nTITLE: ConsumerConfig Properties Definition in Java\nDESCRIPTION: Defines the complete set of configuration properties available in the ConsumerConfig class of Apache Dubbo. This includes settings for connection management, threading, timeout handling, load balancing, and service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.ConsumerConfig {\n    Integer actives;              // Maximum concurrent invocations\n    Boolean async;               // Enable asynchronous invocation\n    Boolean auth;                // Enable service authentication\n    String cache;                // Cache provider type\n    Integer callbacks;           // Callback limits\n    Boolean check;               // Check if provider exists\n    String client;               // Client type\n    String cluster;              // Cluster type\n    Integer connections;         // Connection limits\n    Integer timeout;             // Remote invocation timeout\n    String loadbalance;          // Load balancing strategy\n    // ... additional properties\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DemoFilter with cURL\nDESCRIPTION: Shell command to test the implemented DemoFilter using cURL. It sends a POST request to the configured endpoint and displays the reversed response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/dev/filter-extension.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8888/demo -d \"eiv al tse'c\"\n\nc'est la vie%\n```\n\n----------------------------------------\n\nTITLE: Verifying GPG Signatures of Release Packages\nDESCRIPTION: Commands to verify the GPG signatures of both source and binary release packages, ensuring they were properly signed with trusted keys.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ngpg --verify apache-dubbo-3.0.4-src.zip.asc apache-dubbo-3.0.4-src.zip\ngpg --verify apache-dubbo-3.0.4-bin.zip.asc apache-dubbo-3.0.4-bin.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregated Total Requests Metric in Prometheus\nDESCRIPTION: This snippet defines a Prometheus gauge metric for aggregated total requests. It includes labels for application name, group, hostname, interface, IP, method, and version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_9\n\nLANGUAGE: prometheus\nCODE:\n```\n# HELP requests_total_aggregate Aggregated Total Requests\n# TYPE requests_total_aggregate gauge\nrequests_total_aggregate{application_name=\"metrics-provider\",group=\"\",hostname=\"iZ8lgm9icspkthZ\",interface=\"org.apache.dubbo.samples.metrics.prometheus.api.DemoService\",ip=\"172.28.236.104\",method=\"sayHello\",version=\"\",} 39.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Access Logging in YAML\nDESCRIPTION: Configures access logging for Dubbo providers using YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/logging.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  provider:\n    accesslog: true\n```\n\n----------------------------------------\n\nTITLE: UserInfoDO Class Definition in Java\nDESCRIPTION: Class definition for UserInfoDO containing complex nested objects including LocationDO and DepartmentDO\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/test.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class UserInfoDO {\n    private int id;\n    private LocationDO locationDO;\n    private DepartmentDO departmentDO;\n\n    @Override\n    public String toString() {\n        return \"UserInfoDO{\" +\n                \"id=\" + id +\n                \", locationDO=\" + locationDO.toString() +\n                \", departmentDO=\" + departmentDO.toString() +\n                \"}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface and Complex Types in Java\nDESCRIPTION: Example of a UserService interface and related complex data objects including UserInfoDO, DepartmentDO, and LocationDO classes with nested relationships.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/service-test.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//org.apache.dubbo.demo.api.UserService\nResult getUser(String name, UserInfoDO userInfoDO);\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class UserInfoDO {\n    private int id;\n    private LocationDO locationDO;\n    private DepartmentDO departmentDO;\n\n    @Override\n    public String toString() {\n        return \"UserInfoDO{\" +\n                \"id=\" + id +\n                \", locationDO=\" + locationDO.toString() +\n                \", departmentDO=\" + departmentDO.toString() +\n                \"}\";\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class DepartmentDO {\n\n    private String departName;\n    private LocationDO departLocation;\n\n    @Override\n    public String toString() {\n        return \"DepartmentDO{\" +\n                \"departName='\" + departName + '\\'' +\n                \", departLocation=\" + departLocation.toString() +\n                \"}\";\n    }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class LocationDO {\n    private String address;\n    private int postNum;\n\n    @Override\n    public String toString() {\n        return \"LocationDO{\" +\n                \"address='\" + address + '\\'' +\n                \", postNum=\" + postNum +\n                \"}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using Dubbo RpcContext in Java\nDESCRIPTION: Shows how to get the client IP address in a REST service method using Dubbo's RpcContext. This approach provides a cleaner API signature but is specific to Dubbo's implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id) {\n    System.out.println(\"Client address is \" + RpcContext.getContext().getRemoteAddressString());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RMI Protocol for Specific Service\nDESCRIPTION: XML configuration to specify RMI protocol for an individual service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/others/rmi.md#2025-04-08_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"...\" protocol=\"rmi\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Services and Objects in Dubbo-Go Client\nDESCRIPTION: Initializes the Dubbo-Go client by registering the consumer service and POJO (Plain Old Java Object) for Hessian serialization. This must be done before attempting to make remote calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tconfig.SetConsumerService(userProvider)\n\thessian.RegisterPOJO(&User{})\n}\n```\n\n----------------------------------------\n\nTITLE: Processing XML in Java Triple server\nDESCRIPTION: Java method for handling XML requests in Triple. The XML content is automatically unmarshalled into a corresponding Java object using standard XML binding mechanisms.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/support-more-content-types.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public ServerResponse greetXml(User user) {\n        System.out.println(user.getUsername());\n        System.out.println(user.getLocation());\n        return new ServerResponse(\"Server Received xml.\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer with Spring XML\nDESCRIPTION: Spring configuration for consuming a remote Dubbo service. It creates a reference to the remote service interface and injects it into a consumer action bean, maintaining the same usage pattern as with local services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/preface/usage.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 增加引用远程服务配置 -->\n<dubbo:reference id=\"xxxService\" interface=\"com.xxx.XxxService\" />\n<!-- 和本地服务一样使用远程服务 -->\n<bean id=\"xxxAction\" class=\"com.xxx.XxxAction\"> \n    <property name=\"xxxService\" ref=\"xxxService\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Dubbo (Java)\nDESCRIPTION: This method performs dependency injection on extension instances using setter methods. It uses reflection to identify setter methods and injects dependencies from an ObjectFactory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate T injectExtension(T instance) {\n\n    if (objectFactory == null) {\n        return instance;\n    }\n\n    try {\n        for (Method method : instance.getClass().getMethods()) {\n            if (!isSetter(method)) {\n                continue;\n            }\n            if (method.getAnnotation(DisableInject.class) != null) {\n                continue;\n            }\n            Class<?> pt = method.getParameterTypes()[0];\n            if (ReflectUtils.isPrimitives(pt)) {\n                continue;\n            }\n\n            try {\n                String property = getSetterProperty(method);\n                Object object = objectFactory.getExtension(pt, property);\n                if (object != null) {\n                    method.invoke(instance, object);\n                }\n            } catch (Exception e) {\n                logger.error(\"Failed to inject via method \" + method.getName()\n                        + \" of interface \" + type.getName() + \": \" + e.getMessage(), e);\n            }\n\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return instance;\n}\n```\n\n----------------------------------------\n\nTITLE: ServiceRestMetadata Class Definition\nDESCRIPTION: Core class for storing REST service metadata including interface details, version, group and method information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/v3.2_rest_protocol_design.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ServiceRestMetadata implements Serializable {\n    private String serviceInterface; // com.demo.TestInterface\n    private String version; // 1.0.0\n    private String group; // demo\n    private Set<RestMethodMetadata> meta; // method metadata\n    private int port; // port for provider service key\n    private boolean consumer; // consumer flag\n    private Class codeStyle;\n    private Map<PathMatcher, RestMethodMetadata> pathToServiceMap;\n    private Map<String, Map<ParameterTypesComparator, RestMethodMetadata>> methodToServiceMa\n```\n\n----------------------------------------\n\nTITLE: Adding GPG Public Key to KEYS File\nDESCRIPTION: Command to append your GPG public key to the Apache KEYS file, which is used by release voters to verify the signed artifacts.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg -a --export your_key_id >> KEYS\n```\n\n----------------------------------------\n\nTITLE: 将 URL 列表转换为 Invoker 映射表\nDESCRIPTION: toInvokers 方法负责将 URL 列表转换为 <URL, Invoker> 映射关系。它会检查服务提供者协议是否被消费者支持，合并 URL，并创建或复用 Invoker 实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/directory.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Invoker<T>> toInvokers(List<URL> urls) {\n    Map<String, Invoker<T>> newUrlInvokerMap = new HashMap<String, Invoker<T>>();\n    if (urls == null || urls.isEmpty()) {\n        return newUrlInvokerMap;\n    }\n    Set<String> keys = new HashSet<String>();\n    // 获取服务消费端配置的协议\n    String queryProtocols = this.queryMap.get(Constants.PROTOCOL_KEY);\n    for (URL providerUrl : urls) {\n        if (queryProtocols != null && queryProtocols.length() > 0) {\n            boolean accept = false;\n            String[] acceptProtocols = queryProtocols.split(\",\");\n            // 检测服务提供者协议是否被服务消费者所支持\n            for (String acceptProtocol : acceptProtocols) {\n                if (providerUrl.getProtocol().equals(acceptProtocol)) {\n                    accept = true;\n                    break;\n                }\n            }\n            if (!accept) {\n                // 若服务提供者协议头不被消费者所支持，则忽略当前 providerUrl\n                continue;\n            }\n        }\n        // 忽略 empty 协议\n        if (Constants.EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) {\n            continue;\n        }\n        // 通过 SPI 检测服务端协议是否被消费端支持，不支持则抛出异常\n        if (!ExtensionLoader.getExtensionLoader(Protocol.class).hasExtension(providerUrl.getProtocol())) {\n            logger.error(new IllegalStateException(\"Unsupported protocol...\"));\n            continue;\n        }\n        \n        // 合并 url\n        URL url = mergeUrl(providerUrl);\n\n        String key = url.toFullString();\n        if (keys.contains(key)) {\n            // 忽略重复 url\n            continue;\n        }\n        keys.add(key);\n        // 将本地 Invoker 缓存赋值给 localUrlInvokerMap\n        Map<String, Invoker<T>> localUrlInvokerMap = this.urlInvokerMap;\n        // 获取与 url 对应的 Invoker\n        Invoker<T> invoker = localUrlInvokerMap == null ? null : localUrlInvokerMap.get(key);\n        // 缓存未命中\n        if (invoker == null) {\n            try {\n                boolean enabled = true;\n                if (url.hasParameter(Constants.DISABLED_KEY)) {\n                    // 获取 disable 配置，取反，然后赋值给 enable 变量\n                    enabled = !url.getParameter(Constants.DISABLED_KEY, false);\n                } else {\n                    // 获取 enable 配置，并赋值给 enable 变量\n                    enabled = url.getParameter(Constants.ENABLED_KEY, true);\n                }\n                if (enabled) {\n                    // 调用 refer 获取 Invoker\n                    invoker = new InvokerDelegate<T>(protocol.refer(serviceType, url), url, providerUrl);\n                }\n            } catch (Throwable t) {\n                logger.error(\"Failed to refer invoker for interface...\");\n            }\n            if (invoker != null) {\n                // 缓存 Invoker 实例\n                newUrlInvokerMap.put(key, invoker);\n            }\n            \n        // 缓存命中\n        } else {\n            // 将 invoker 存储到 newUrlInvokerMap 中\n            newUrlInvokerMap.put(key, invoker);\n        }\n    }\n    keys.clear();\n    return newUrlInvokerMap;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PodMonitor for Dubbo in Kubernetes\nDESCRIPTION: YAML configuration for setting up PodMonitor and RBAC for Dubbo metrics in Kubernetes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/observability/rpc_metrics.md#2025-04-08_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\n  name: podmonitor\n  labels:\n    app: podmonitor\n  namespace: monitoring\nspec:\n  namespaceSelector:\n    matchNames:\n      - dubbo-system\n  selector:\n    matchLabels:\n      app-type: dubbo\n  podMetricsEndpoints:\n    - port: metrics # ref to dubbo-app port name metrics\n      path: /prometheus\n---\n# rbac\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: dubbo-system\n  name: pod-reader\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n\n---\n# rbac\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: pod-reader-binding\n  namespace: dubbo-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: pod-reader\nsubjects:\n  - kind: ServiceAccount\n    name: prometheus-k8s\n    namespace: monitoring\n```\n\n----------------------------------------\n\nTITLE: Processing and Caching Extension Classes\nDESCRIPTION: Processes loaded classes, handles annotations, and manages various caching mechanisms for different types of extensions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadClass(Map<String, Class<?>> extensionClasses, java.net.URL resourceURL, Class<?> clazz, String name,\n                       boolean overridden) throws NoSuchMethodException {\n    if (!type.isAssignableFrom(clazz)) {\n        throw new IllegalStateException(\"Error occurred when loading extension class (interface: \" +\n                type + \", class line: \" + clazz.getName() + \"), class \"\n                + clazz.getName() + \" is not subtype of interface.\");\n    }\n    if (clazz.isAnnotationPresent(Adaptive.class)) {\n        cacheAdaptiveClass(clazz, overridden);\n    } else if (isWrapperClass(clazz)) {\n        cacheWrapperClass(clazz);\n    } else {\n        clazz.getConstructor();\n        if (StringUtils.isEmpty(name)) {\n            name = findAnnotationName(clazz);\n            if (name.length() == 0) {\n                throw new IllegalStateException(\"No such extension name for the class \" + clazz.getName() + \" in the config \" + resourceURL);\n            }\n        }\n\n        String[] names = NAME_SEPARATOR.split(name);\n        if (ArrayUtils.isNotEmpty(names)) {\n            cacheActivateClass(clazz, names[0]);\n            for (String n : names) {\n                cacheName(clazz, n);\n                saveInExtensionClass(extensionClasses, clazz, n, overridden);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Services with Enabled Router Snapshots in Dubbo\nDESCRIPTION: The getEnabledRouterSnapshot command lists all services that currently have router snapshot collection enabled.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/router-snapshot.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>getEnabledRouterSnapshot\ncom.dubbo.dubbointegration.BackendService\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin for Dubbo via Kubernetes\nDESCRIPTION: Command to quickly deploy Zipkin in a Kubernetes environment using a pre-configured YAML file provided by the Dubbo community. This setup is intended for testing or demonstration purposes only.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/zipkin.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/zipkin.yaml\n```\n\n----------------------------------------\n\nTITLE: Handling Thread Interruption in Java\nDESCRIPTION: When a thread's interrupt() method is called while the thread is in wait, sleep, or join states, an InterruptedException is thrown. The interrupt status of the thread is set to true but doesn't affect normal execution unless the thread is in one of these blocking states.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/6.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ninterrupt()\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Services for Routing to v1 Services with Kubectl\nDESCRIPTION: This command applies virtual services configuration that routes all traffic to version 1 of each microservice in the Bookinfo application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@\n```\n\n----------------------------------------\n\nTITLE: Generating SHA512 Signature for Source Release\nDESCRIPTION: Command to generate SHA512 signature for the source release zip file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -a 512 apache-dubbo-${release_version}-source-release.zip >> apache-dubbo-${release_version}-source-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty as REST Server in Dubbo XML\nDESCRIPTION: Shows how to configure an embedded Jetty server as the REST server implementation in Dubbo using XML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"jetty\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace for Nacos Registry (Method 2)\nDESCRIPTION: YAML configuration for Nacos registry with a custom namespace specified as a separate parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   parameters.namespace: 5cbb70a5-xxx-xxx-xxx-d43479ae0932\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo 3 Migration Rules in YAML\nDESCRIPTION: Example YAML configuration for Dubbo 3 migration rules, specifying consumer application, migration step, threshold, proportion, delay, and interface/application specific settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkey: demo-consumer\nstep: APPLICATION_FIRST\nthreshold: 1.0\nproportion: 60\ndelay: 0\nforce: false\ninterfaces:\n  - serviceKey: DemoService:1.0.0\n    threshold: 0.5\n    proportion: 30\n    delay: 0\n    force: true\n    step: APPLICATION_FIRST\n  - serviceKey: GreetingService:1.0.0\n    step: FORCE_APPLICATION\n```\n\n----------------------------------------\n\nTITLE: Registering Service Instance in Dubbo\nDESCRIPTION: This method registers the service instance and sets up a scheduled task to refresh metadata and instance information periodically. It uses ServiceInstanceMetadataUtils to register metadata and instance, and then schedules a task to refresh this information every 30 seconds.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/18-Dubbo3元数据服务MetadataService的导出.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void registerServiceInstance() {\n    try {\n        registered = true;\n        ServiceInstanceMetadataUtils.registerMetadataAndInstance(applicationModel);\n    } catch (Exception e) {\n        logger.error(\"Register instance error\", e);\n    }\n    if (registered) {\n        asyncMetadataFuture = frameworkExecutorRepository.getSharedScheduledExecutor().scheduleWithFixedDelay(() -> {\n            if (applicationModel.isDestroyed()) {\n                return;\n            }\n            try {\n                if (!applicationModel.isDestroyed() && registered) {\n                    ServiceInstanceMetadataUtils.refreshMetadataAndInstance(applicationModel);\n                }\n            } catch (Exception e) {\n                if (!applicationModel.isDestroyed()) {\n                    logger.error(\"Refresh instance and metadata error\", e);\n                }\n            }\n        }, 0, ConfigurationUtils.get(applicationModel, METADATA_PUBLISH_DELAY_KEY, DEFAULT_METADATA_PUBLISH_DELAY), TimeUnit.MILLISECONDS);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Basic REST Service with cURL\nDESCRIPTION: Demonstrates how to test a basic Dubbo REST service using cURL. The service returns a simple greeting message.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world\"\n```\n\n----------------------------------------\n\nTITLE: Web Application Configuration for Dubbo REST with External Servlet Container\nDESCRIPTION: Web.xml configuration required when using an external servlet container for Dubbo REST services. This setup integrates Dubbo's REST functionality with the external servlet container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>\n    </context-param>\n    \n    <listener>\n        <listener-class>org.apache.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n    \n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Web Application Configuration for Dubbo REST with External Servlet Container\nDESCRIPTION: Web.xml configuration required when using an external servlet container for Dubbo REST services. This setup integrates Dubbo's REST functionality with the external servlet container.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>\n    </context-param>\n    \n    <listener>\n        <listener-class>org.apache.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n    \n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Testing Basic REST Service with cURL\nDESCRIPTION: Demonstrates how to test a basic Dubbo REST service using cURL. The service returns a simple greeting message.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/rest.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world\"\n```\n\n----------------------------------------\n\nTITLE: Interface-level Service Registration in RegistryProtocol\nDESCRIPTION: Core code for interface-level service registration in RegistryProtocol's export method that handles getting the registry and registering the provider URL.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// url to registry 这里registry对象的类型为ZookeeperRegistry\n        final Registry registry = getRegistry(registryUrl);\n        \n        final URL registeredProviderUrl = getUrlToRegistry(providerUrl, registryUrl);\n        // decide if we need to delay publish (provider itself and registry should both need to register)\n        boolean register = providerUrl.getParameter(REGISTER_KEY, true) && registryUrl.getParameter(REGISTER_KEY, true);\n        //这一个方法里面会将提供者的url配置写入Zookeeper的provider节点下面\n        if (register) {\n            register(registry, registeredProviderUrl);\n        }\n```\n\n----------------------------------------\n\nTITLE: Designing Resource Observation Container for Dubbo-Istio Integration\nDESCRIPTION: Implements a map structure to observe the cache pool, where the key represents resources to be observed and the value is a list of consumers that can retrieve data from the cache pool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/Dubbo-proxyless.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprotected Map<Set<String>, List<Consumer<Map<String, T>>>> consumerObserveMap = new ConcurrentHashMap<>();\n```\n\n----------------------------------------\n\nTITLE: Committing Release Candidate to Apache SVN\nDESCRIPTION: SVN commands to check status and commit the release candidate files to the Apache SVN repository.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ svn status\n$ svn commit -m 'prepare for ${release_version} RC1'\n```\n\n----------------------------------------\n\nTITLE: Protocol Interface Implementation Example\nDESCRIPTION: Example showing Protocol interface with adaptive annotations\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/spis/dubbo-spi.md#2025-04-08_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"dubbo\")\npublic interface Protocol {\n    @Adaptive\n    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;\n\n    @Adaptive\n    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Protocol Ports\nDESCRIPTION: Sets up two Dubbo protocol instances on different ports, allowing services to be exposed on multiple ports. This is useful for service segmentation or migration scenarios.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol id=\"dubbo1\" name=\"dubbo\" port=\"20880\" />\n<dubbo:protocol id=\"dubbo2\" name=\"dubbo\" port=\"20881\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Module\nDESCRIPTION: Methods to initialize and start a Dubbo module. This can be done either through Spring context configuration or manual module deployment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-instance/workflow.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nModuleModel.getDeployer().start()\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Side Implicit Parameters on Consumer in Dubbo\nDESCRIPTION: Demonstrates how to read implicit parameters on the consumer side that were set by the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/attachment.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nxxxService.xxx(); // Remote call\nString result = RpcContext.getServerContext().getAttachment(\"result\");\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Callback Service and Listener Interfaces in Java\nDESCRIPTION: Defines the CallbackService interface with an addListener method and the CallbackListener interface for parameter callbacks.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-invoke.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic interface CallbackService {\n    void addListener(String key, CallbackListener listener);\n}\n\npublic interface CallbackListener {\n    void changed(String msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go using API Approach\nDESCRIPTION: Example demonstrating how to configure Dubbo-go using the API approach with builder pattern instead of configuration files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/concept/configuration.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // init rootConfig with config api\n    rc := config.NewRootConfigBuilder().\n        SetConsumer(config.NewConsumerConfigBuilder().\n            SetRegistryIDs(\"zookeeper\").\n            AddReference(\"GreeterClientImpl\", config.NewReferenceConfigBuilder().\n                SetInterface(\"org.apache.dubbo.UserProvider\").\n                SetProtocol(\"tri\").\n                Build()).\n            Build()).\n        AddRegistry(\"zookeeper\", config.NewRegistryConfigWithProtocolDefaultPort(\"zookeeper\")).\n        Build()\n    \n    // validate consumer greeterProvider\n    if err := rc.Init(); err != nil{\n        panic(err)\n    }\n    \n    // run rpc invocation\n    testSayHello()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider with Spring XML\nDESCRIPTION: Spring configuration for exposing a local service as a remote Dubbo service. It defines the service implementation bean and adds a Dubbo service declaration to expose it remotely.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/preface/usage.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 和本地服务一样实现远程服务 -->\n<bean id=\"xxxService\" class=\"com.xxx.XxxServiceImpl\" /> \n<!-- 增加暴露远程服务配置 -->\n<dubbo:service interface=\"com.xxx.XxxService\" ref=\"xxxService\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Tag Routing in XML\nDESCRIPTION: XML configuration examples for setting static tags on Dubbo providers to enable traffic routing based on tags.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider tag=\"gray\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service tag=\"gray\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Environment Variables for MSE Traffic Governance\nDESCRIPTION: Environment variable configuration for identifying gray environment instances and enabling traffic tracing in Alibaba Cloud MSE microservices governance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/users/dianxiaomi.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalicloud.service.tag=gray\n```\n\nLANGUAGE: bash\nCODE:\n```\nprofiler.micro.service.tag.trace.enable=true\n```\n\n----------------------------------------\n\nTITLE: Examining Log4j Dependencies in dubbo-spring-boot-starter\nDESCRIPTION: This XML snippet displays the dependency tree for the dubbo-spring-boot-starter module. It shows that log4j-api is included through Spring Boot components, but log4j-api itself has no security issues. Users should consider compatibility when upgrading log4j-core.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/log4j.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n[INFO] --- maven-dependency-plugin:3.1.2:tree (default-cli) @ dubbo-spring-boot-starter ---\n[INFO] org.apache.dubbo:dubbo-spring-boot-starter:jar:2.7.14-SNAPSHOT\n[INFO] \\- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile (optional) \n[INFO]    \\- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile (optional) \n[INFO]       \\- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile (optional) \n[INFO]          \\- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile (optional) \n```\n\n----------------------------------------\n\nTITLE: Configuring Global Fixed Token Authorization in Dubbo XML\nDESCRIPTION: Sets up global token authorization using a fixed token (like a password) for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/token-authorization.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Router Interface in Go\nDESCRIPTION: Interface definition for Router in dubbo-go which determines the target invoker list, provides priority, and returns the URL in router.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-router.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Router\ntype Router interface {\n\t// Route determine the target invoker list.\n\tRoute([]protocol.Invoker, *common.URL, protocol.Invocation) []protocol.Invoker\n\t// Priority return priority in router\n\t// 0 to ^int(0) is better\n\tPriority() int64\n\t// URL return URL in router\n\tURL() common.URL\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Profiles for GraalVM Native Image Build\nDESCRIPTION: Maven profile configuration for enabling GraalVM Native Image compilation of Dubbo applications. Includes plugins for Maven compiler, Spring Boot, Native Image, and Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/graalvm/support-graalvm.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n    <profile>\n        <id>native</id>\n        <build>\n            <plugins>\n                <plugin>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <configuration>\n                        <release>17</release>\n                        <fork>true</fork>\n                        <verbose>true</verbose>\n                    </configuration>\n                </plugin>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>process-aot</id>\n                            <goals>\n                                <goal>process-aot</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.graalvm.buildtools</groupId>\n                    <artifactId>native-maven-plugin</artifactId>\n                    <version>0.9.25</version>\n                    <configuration>\n                        <classesDirectory>${project.build.outputDirectory}</classesDirectory>\n                        <metadataRepository>\n                            <enabled>true</enabled>\n                        </metadataRepository>\n                        <requiredVersion>22.3</requiredVersion>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>add-reachability-metadata</id>\n                            <goals>\n                                <goal>add-reachability-metadata</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.dubbo</groupId>\n                    <artifactId>dubbo-maven-plugin</artifactId>\n                    <version>${dubbo.version}</version>\n                    <configuration>\n                        <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <phase>process-sources</phase>\n                            <goals>\n                                <goal>dubbo-process-aot</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </build>\n    </profile>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Threshold Detection in Java for Dubbo 3 Migration\nDESCRIPTION: Java code snippet showing the core logic for threshold detection when comparing new (application-level) and old (interface-level) address counts during migration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/proposals/service-discovery-rule.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (((float) newAddressSize / (float) oldAddressSize) >= threshold) {\n    return true;\n}\nreturn false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side Service Discovery in Dubbo Rust\nDESCRIPTION: This snippet demonstrates how to register a service, create a Zookeeper registry, and start the Dubbo framework with the configured registry on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/rust-sdk/service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n//注册服务\nregister_server(GreeterServerImpl {\n    name: \"greeter\".to_string(),\n});\n\n//创建注册中心\nlet zkr = ZookeeperRegistry::default();\n\nlet r = RootConfig::new();\nlet r = match r.load() {\n    Ok(config) => config,\n    Err(_err) => panic!(\"err: {:?}\", _err), // response was droped\n};\n\n//启动Dubbo框架\nlet mut f = Dubbo::new()\n    .with_config(r)\n    //将创建出的注册中心绑定Dubbo框架\n    .add_registry(\"zookeeper\", Box::new(zkr));\nf.start().await;\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Triple HTTP/3 Sample\nDESCRIPTION: Commands to download and run the Triple HTTP/3 protocol sample. This demonstrates how to test the HTTP/3 capabilities implemented in the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple-3.3.md#2025-04-08_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# 获取样例代码\ngit clone --depth=1 https://github.com/apache/dubbo-samples.git\ncd dubbo-samples/2-advanced/dubbo-samples-triple-http3\n# 直接运行\nmvn spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Configuring and Referencing Dubbo Service Consumer using Java API\nDESCRIPTION: This snippet shows how to configure a Dubbo service consumer programmatically, including application configuration, registry connection, and service reference. It demonstrates the process of obtaining a proxy to the remote service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/configuration/api.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.dubbo.rpc.config.ApplicationConfig;\nimport org.apache.dubbo.rpc.config.RegistryConfig;\nimport org.apache.dubbo.rpc.config.ConsumerConfig;\nimport org.apache.dubbo.rpc.config.ReferenceConfig;\nimport com.xxx.XxxService;\n \n// 当前应用配置\nApplicationConfig application = new ApplicationConfig();\napplication.setName(\"yyy\");\n \n// 连接注册中心配置\nRegistryConfig registry = new RegistryConfig();\nregistry.setAddress(\"10.20.130.230:9090\");\nregistry.setUsername(\"aaa\");\nregistry.setPassword(\"bbb\");\n \n// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接\n \n// 引用远程服务\nReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏\nreference.setApplication(application);\nreference.setRegistry(registry); // 多个注册中心可以用setRegistries()\nreference.setInterface(XxxService.class);\nreference.setVersion(\"1.0.0\");\n \n// 和本地bean一样使用xxxService\nXxxService xxxService = reference.get(); // 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用\n```\n\n----------------------------------------\n\nTITLE: Setting up Dubbo API Module POM\nDESCRIPTION: XML configuration for the API module Maven project. This defines the basic project structure for the shared interfaces between Dubbo provider and consumer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/pinpoint.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>demo-api</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Service in Spring XML\nDESCRIPTION: Demonstrates how to declare a generic service reference in Spring XML configuration using the generic='true' attribute.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-generic-invoke.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"userService\" interface=\"com.alibaba.dubbo.samples.generic.api.IUserService\" generic=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace in YAML (URL Style)\nDESCRIPTION: YAML configuration to specify a custom namespace for Nacos using URL parameters. Namespaces provide isolation between different environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n registry:\n   address: nacos://localhost:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status of Dubbo Demo\nDESCRIPTION: Command to verify the status of deployments in the dubbo-demo namespace.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/grafana.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl -n dubbo-demo get deployments\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Hugo Java Documentation Page\nDESCRIPTION: YAML front matter configuration for a Hugo documentation page that defines metadata for the Java section of the Apache Dubbo website. It specifies rendering as a link, description, manual link reference, title, content type, and weight for ordering in the navigation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/download/java.md#2025-04-08_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n_build:\n    render: link\ndescription: Java\nmanualLinkRelref: ./#java\ntitle: Java\ntype: docs\nweight: 10\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA512 Checksums for Release Candidates\nDESCRIPTION: Commands to verify the SHA512 checksums of the source and binary release packages to ensure their integrity.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -c apache-dubbo-${release_version}-source-release.zip.sha512\n$ shasum -c apache-dubbo-${release_version}-bin-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Namespace in YAML (URL Style)\nDESCRIPTION: YAML configuration to specify a custom namespace for Nacos using URL parameters. Namespaces provide isolation between different environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n registry:\n   address: nacos://localhost:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932\n```\n\n----------------------------------------\n\nTITLE: 创建服务定义目录和文件\nDESCRIPTION: 创建Protocol Buffer文件目录结构，并准备IDL文件。这个步骤为后续定义Dubbo服务做准备。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/nodejs-sdk/quick-start.md#2025-04-08_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p proto && touch proto/example.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Check via System Property in Dubbo\nDESCRIPTION: Demonstrates enabling Serializable interface checks using System Property configuration in Dubbo. This method allows for runtime configuration changes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\n-Ddubbo.application.check-serializable=true\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Provider\nDESCRIPTION: Main class to bootstrap the Dubbo provider application using Spring context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-zk.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class ProviderBootstrap {\n    public static void main(String[] args) throws Exception {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class);\n        context.start();\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache Dubbo Release Vote Email Template\nDESCRIPTION: Template for sending release vote emails to the Apache community, including required components like release candidate links, staging repo, git tag, hash, and release notes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/common.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nProject: [VOTE] Release Apache Dubbo 3.0.10 RC1\n\nHello Community,\n\nThis is a call for vote to release Apache Dubbo version 3.0.10\n\nThe release candidates:\nhttps://dist.apache.org/repos/dist/dev/dubbo/dubbo/3.0.10/\n\nThe staging repo:\nhttps://repository.apache.org/content/repositories/orgapachedubbo-1216/\n\nGit tag for the release:\nhttps://github.com/apache/dubbo/tree/dubbo-3.0.10\n\nHash for the release tag:\ne7894ca374e966a1d807e34b2744f276b843f39f\n\nRelease Notes:\nhttps://github.com/apache/dubbo/releases/tag/dubbo-3.0.10\n\nThe artifacts have been signed with Key 2B249EDD, which can be\nfound in the keys file:\nhttps://dist.apache.org/repos/dist/dev/dubbo/KEYS\n\nThe vote will be open for at least 72 hours or until the necessary number of\nvotes are reached.\n\nPlease vote accordingly:\n\n[ ] +1 approve\n[ ] +0 no opinion\n[ ] -1 disapprove with the reason\n\nThanks,\nThe Apache Dubbo Team\n```\n\n----------------------------------------\n\nTITLE: Configuring External Servlet Container for REST in Dubbo\nDESCRIPTION: Configuring Dubbo to use an external servlet container as the REST server when deployed in Java application servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" server=\"servlet\"/>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dubbo Spring Boot Starter in Maven\nDESCRIPTION: Maven dependency configuration for upgrading to Dubbo 3.3.0 Spring Boot starter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Maven Dependency for Dubbo Extension Development\nDESCRIPTION: This XML snippet shows how to include the minimal dependency required for implementing a Dubbo extension. It references only the API jar for the specific extension point, in this case the serialization API.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/dubbo-extension-guide_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-serialization-api</artifactId>\n    <version>${dubbo.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Static Tag via Java Properties for Dubbo Provider\nDESCRIPTION: Command line example showing how to specify a 'gray' tag for a Dubbo provider instance using Java system properties when starting the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\njava -jar xxx-provider.jar -Ddubbo.provider.tag=gray\n```\n\n----------------------------------------\n\nTITLE: Installing dubboctl Command Line Tool\nDESCRIPTION: Commands to download and install the dubboctl tool for managing Dubbo deployments on Kubernetes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/quick-start/deploy.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/release/downloadDubbo.sh | sh -\n\ncd dubbo-$version\nexport PATH=$PWD/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dubbo Spring Boot Starter in Maven\nDESCRIPTION: Maven dependency configuration for upgrading to Dubbo 3.3.0 Spring Boot starter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Interface for APISIX Integration in Java\nDESCRIPTION: The Dubbo interface definition required for integration with APISIX. It uses a Map<String, Object> for both input and output parameters to pass HTTP request context information to Dubbo and return HTTP response information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DemoService {\n\n    /**\n     * standard samples dubbo infterace demo\n     * @param context pass http infos\n     * @return Map<String, Object></> pass to response http\n     **/\n    Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Server for Dubbo Service\nDESCRIPTION: This Go struct implements the server-side logic for the Greeter service. It defines a SayHello method that processes the incoming request and returns a User object.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GreeterProvider struct {\n\tapi.GreeterProviderBase\n}\n\nfunc (s *GreeterProvider) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {\n\tlogger.Infof(\"Dubbo3 GreeterProvider get user name = %s\\n\", in.Name)\n\treturn &api.User{Name: \"Hello \" + in.Name, Id: \"12345\", Age: 21}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StorageService Interface in Java\nDESCRIPTION: Interface for the Storage service that handles deducting storage count for a given commodity. This interface defines the core functionality needed for inventory management.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-fescar.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface StorageService {\n\n    /**\n     * deduct storage count\n     */\n    void deduct(String commodityCode, int count);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializable Interface Check in Dubbo (Java)\nDESCRIPTION: Demonstrates how to enable Serializable interface checks using ApplicationConfig in Java. This configuration rejects deserialization of classes not implementing Serializable.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nApplicationConfig applicationConfig = new ApplicationConfig();\napplicationConfig.setCheckSerializable(true);\n```\n\n----------------------------------------\n\nTITLE: Customized Dubbo Admin configuration profile in YAML\nDESCRIPTION: Example of a customized YAML configuration for Dubbo Admin, overriding specific component settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: dubbo.apache.org/v1alpha1\nkind: DubboOperator\nmetadata:\n  namespace: dubbo-system\nspec:\n  profile: default\n  namespace: dubbo-system\n  componentsMeta:\n    admin:\n      enabled: true\n    grafana:\n      enabled: true\n      version: 6.31.0\n    prometheus:\n      enabled: false\n  components:\n    admin:\n      replicas: 3\n    grafana:\n      testFramework:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Service Interface with Protocol Buffers\nDESCRIPTION: Protocol Buffers definition that specifies the GreetService with a Greet method, including request and response message structures. This proto file defines the contract between the client and server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/error/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Service Interface with Protocol Buffers\nDESCRIPTION: Protocol Buffers definition that specifies the GreetService with a Greet method, including request and response message structures. This proto file defines the contract between the client and server.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/tutorial/rpc/error.md#2025-04-08_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"github.com/apache/dubbo-go-samples/error/proto;greet\";\n\nmessage GreetRequest {\n  string name = 1;\n}\n\nmessage GreetResponse {\n  string greeting = 1;\n}\n\nservice GreetService {\n  rpc Greet(GreetRequest) returns (GreetResponse) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Including Demo Content Shortcode in HTML\nDESCRIPTION: This HTML shortcode includes the Chinese version of the Dubbo demo content block.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/demo/_index.md#2025-04-08_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< blocks/demo-zh >}}\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Invoker Selection Logic in refreshInvoker\nDESCRIPTION: The refreshInvoker method implements the decision logic to choose between different service discovery strategies based on the migration step. It returns a boolean indicating whether the migration was successful.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/22-Dubbo3消费者自动感应决策应用级服务发现原理.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n private boolean refreshInvoker(MigrationStep step, Float threshold, MigrationRule newRule) {\n        if (step == null || threshold == null) {\n            throw new IllegalStateException(\"Step or threshold of migration rule cannot be null\");\n        }\n        MigrationStep originStep = currentStep;\n\n        if ((currentStep == null || currentStep != step) || !currentThreshold.equals(threshold)) {\n            boolean success = true;\n            switch (step) {\n                case APPLICATION_FIRST:\n                    //默认和配置了应用级优先的服务发现则走这里\n                    migrationInvoker.migrateToApplicationFirstInvoker(newRule);\n                    break;\n                case FORCE_APPLICATION:\n                //配置了应用级服务发现则走这里\n                    success = migrationInvoker.migrateToForceApplicationInvoker(newRule);\n                    break;\n                case FORCE_INTERFACE:\n                //配置了接口级服务发现则走这里\n                default:\n                    success = migrationInvoker.migrateToForceInterfaceInvoker(newRule);\n            }\n\n            if (success) {\n                setCurrentStepAndThreshold(step, threshold);\n                logger.info(\"Succeed Migrated to \" + step + \" mode. Service Name: \" + consumerURL.getDisplayServiceKey());\n                report(step, originStep, \"true\");\n            } else {\n                // migrate failed, do not save new step and rule\n                logger.warn(\"Migrate to \" + step + \" mode failed. Probably not satisfy the threshold you set \"\n                        + threshold + \". Please try re-publish configuration if you still after check.\");\n                report(step, originStep, \"false\");\n            }\n\n            return success;\n        }\n        // ignore if step is same with previous, will continue override rule for MigrationInvoker\n        return true;\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface for APISIX Proxy\nDESCRIPTION: Java interface definition for a Dubbo service that can be exposed via APISIX, using Map for HTTP request context and response.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface ApisixService {\n\n    /**\n     * standard samples dubbo interface demo\n     * @param context pass HTTP info\n     * @return Map<String, Object> to pass to HTTP response\n     **/\n    Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dubbo-Go Components in Go\nDESCRIPTION: Shows how to import all built-in Dubbo-Go modules using the blank identifier pattern to trigger init() functions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/golang-sdk/refer/sourcecode/aop_and_extension.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t_ \"dubbo.apache.org/dubbo-go/v3/imports\"\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA512 Signatures\nDESCRIPTION: Commands to verify the SHA512 signatures for both source and binary release packages.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -c apache-dubbo-${release_version}-source-release.zip.sha512\n$ shasum -c apache-dubbo-${release_version}-bin-release.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring JMS Protocol Parameters in Dubbo XML\nDESCRIPTION: Alternative syntax for configuring protocol parameters using the p: namespace attribute. This example sets a queue parameter for the JMS protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-parameter.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"jms\" p:queue=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Service Reference Configuration\nDESCRIPTION: Shows XML configuration for referencing a Redis service using Map interface with group specification.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/redis.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" group=\"member\" />\n```\n\n----------------------------------------\n\nTITLE: Analyzing Serialization Exception in Dubbo RPC Calls\nDESCRIPTION: This exception log shows a failure in Dubbo's RPC call when a class doesn't implement the Serializable interface. The log reveals the complete stack trace, highlighting the error occurring during the serialization process with Hessian2 serializer.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/request-failed.md#2025-04-08_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nio.netty.handler.codec.EncoderException: java.lang.IllegalArgumentException: [Serialization Security] Serialized class org.apache.dubbo.samples.api.GreetingsService$Data has not implement Serializable interface. Current mode is strict check, will disallow to deserialize it by default. \n\tat io.netty.handler.codec.MessageToByteEncoder.write(MessageToByteEncoder.java:125)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:881)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:863)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:968)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:856)\n\tat io.netty.handler.timeout.IdleStateHandler.write(IdleStateHandler.java:304)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:879)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:863)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:968)\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:856)\n\tat io.netty.channel.ChannelDuplexHandler.write(ChannelDuplexHandler.java:115)\n\tat org.apache.dubbo.remoting.transport.netty4.NettyClientHandler.write(NettyClientHandler.java:88)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:879)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:940)\n\tat io.netty.channel.AbstractChannelHandlerContext$WriteTask.run(AbstractChannelHandlerContext.java:1247)\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.IllegalArgumentException: [Serialization Security] Serialized class org.apache.dubbo.samples.api.GreetingsService$Data has not implement Serializable interface. Current mode is strict check, will disallow to deserialize it by default. \n\tat org.apache.dubbo.common.utils.DefaultSerializeClassChecker.loadClass(DefaultSerializeClassChecker.java:112)\n\tat org.apache.dubbo.common.serialize.hessian2.Hessian2SerializerFactory.getDefaultSerializer(Hessian2SerializerFactory.java:49)\n\tat com.alibaba.com.caucho.hessian.io.SerializerFactory.getSerializer(SerializerFactory.java:393)\n\tat com.alibaba.com.caucho.hessian.io.Hessian2Output.writeObject(Hessian2Output.java:411)\n\tat org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput.writeObject(Hessian2ObjectOutput.java:99)\n\tat org.apache.dubbo.rpc.protocol.dubbo.DubboCodec.encodeRequestData(DubboCodec.java:208)\n\tat org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encodeRequest(ExchangeCodec.java:261)\n\tat org.apache.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:75)\n\tat org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:47)\n\tat org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:69)\n\tat io.netty.handler.codec.MessageToByteEncoder.write(MessageToByteEncoder.java:107)\n\t... 22 more\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service for Dubbo with Istio\nDESCRIPTION: This YAML configuration defines a headless Kubernetes Service for Dubbo provider, specifying the protocol name to start with 'grpc' to support Istio traffic interception. This is important because Istio only supports 'http' and 'grpc' traffic forwarding in Proxyless mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: dubbo-samples-xds-provider\nspec:\n  clusterIP: None\n  selector:\n    demo: provider\n  ports:\n    - name: grpc-tri\n      protocol: TCP\n      port: 50052\n      targetPort: 50052\n```\n\n----------------------------------------\n\nTITLE: Apache Dubbo Vote Result Email Template\nDESCRIPTION: Template for announcing the results of a release vote, including vote counts from PMC members and reference to the voting thread.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/committer/release-guide/common.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nProject: [RESULT] [VOTE] Release Apache Dubbo 2.7.16 RC1\n\nHello Dubbo Community,\n\nThe release vote finished, We've received\n\n+1 binding, Jun Liu\n+1 binding, Laurence\n+1 binding, Hao Guo\n\nThe vote and result thread:\nhttps://lists.apache.org/thread/o4hk0b0rok78kw7ftqh0ly49wg8whgps\nThe vote passed. I am working on the further release process, thanks.\n\nBest regards,\nThe Apache Dubbo Team\n```\n\n----------------------------------------\n\nTITLE: Direct Point-to-Point Connection to Redis Service\nDESCRIPTION: XML configuration for directly connecting to a Redis service without going through a registry, specifying the Redis server address in the URL attribute.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/redis.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"store\" interface=\"java.util.Map\" url=\"redis://10.20.153.10:6379\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Dubbo Admin on DockerHub\nDESCRIPTION: This snippet references the Dockerfile used for building the Dubbo Admin image version 0.1.0 on DockerHub. It's located in the project's docker directory and serves as a template for creating Docker images for new Dubbo Admin releases.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/build-new-docker-image-in-dockerhub.md#2025-04-08_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Reference to Dockerfile for version 0.1.0\n# Located at: https://github.com/apache/dubbo-admin/blob/develop/docker/0.1.0/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Cluster ID in Kubernetes Deployment\nDESCRIPTION: This YAML snippet demonstrates how to set the Istio cluster ID in a Kubernetes Deployment by configuring the ISTIO_META_CLUSTER_ID environment variable. This is necessary when using self-built Istio production clusters or clusters provided by cloud vendors.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dubbo-samples-xds-consumer\nspec:\n  selector:\n    matchLabels:\n      demo: consumer\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        demo: consumer\n    spec:\n      containers:\n        - env:\n            - name: ISTIO_META_CLUSTER_ID\n              value: Kubernetes\n        - name: dubbo-samples-xds-provider\n          image: xxx\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Dubbo Admin Console Access\nDESCRIPTION: Sets up port forwarding to access the Dubbo Admin console from localhost.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/dubbo-admin -n dubbo-system 38080:38080\n```\n\n----------------------------------------\n\nTITLE: Updating Dubbo Spring Boot Starter to 3.3.0\nDESCRIPTION: Updates the Dubbo Spring Boot Starter dependency to version 3.3.0, which is an alternative approach for Spring Boot applications upgrading to Dubbo 3.3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Service with JAX-RS Annotations in Dubbo\nDESCRIPTION: Implementation of the UserService interface with JAX-RS annotations to configure the REST endpoint path, HTTP method, and content type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/users\")\npublic class UserServiceImpl implements UserService {\n       \n    @POST\n    @Path(\"/register\")\n    @Consumes({MediaType.APPLICATION_JSON})\n    public void registerUser(User user) {\n        // save the user...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 配置基于请求参数的条件路由规则\nDESCRIPTION: 根据请求方法和参数值配置条件路由规则，将满足条件的请求路由到指定端口的提供方实例。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconditions:\n  - method=getDetail&arguments[0]=dubbo => port=20880\n```\n\n----------------------------------------\n\nTITLE: Simplified Service Metadata Format in Dubbo 2.7\nDESCRIPTION: Example of simplified service metadata stored in Zookeeper in Dubbo 2.7 when simplified=true, showing only essential parameters for service governance.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-27-features.md#2025-04-08_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndubbo://30.5.120.185:20880/org.apache.dubbo.demo.api.DemoService?\napplication=demo-provider&\ndubbo=2.0.2&\nrelease=2.7.0&\ntimestamp=1552975501873\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo 3 Specify Address Plugin Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding the Dubbo 3 specify-address plugin to your project. This plugin allows runtime specification of target IP addresses for Dubbo 3.x calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-cluster-specify-address-dubbo3</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Proto Directory Structure\nDESCRIPTION: Shell commands to create the directory structure for proto files\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/nodejs/first-nodejs-release-announcement.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p proto && touch proto/example.proto\n```\n\n----------------------------------------\n\nTITLE: Defining Consumer Callback Interface in Java\nDESCRIPTION: Defines the Notify interface for handling callback events on the consumer side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/events-notify.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ninterface Notify {\n    public void onreturn(Person msg, Integer id);\n    public void onthrow(Throwable ex, Integer id);\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Dubbo Instances with Environment Variables YAML\nDESCRIPTION: This YAML snippet shows how to tag Dubbo instances using environment variables in a container specification, allowing for dynamic tagging based on deployment environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/introduction.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: detail\n    image: apache/demo-detail:latest\n    env:\n    - name: DUBBO_LABELS\n      value: \"region=hangzhou; env=gray\"\n```\n\n----------------------------------------\n\nTITLE: Service Consumer Implementation - Java\nDESCRIPTION: Consumer component that references and calls the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/quick-start/starter.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class Consumer implements CommandLineRunner {\n    @DubboReference\n    private DemoService demoService;\n\n    @Override\n    public void run(String... args) throws Exception {\n        String result = demoService.sayHello(\"world\");\n        System.out.println(\"Receive result ======> \" + result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating maxConcurrency in HeuristicSmoothingFlowControl\nDESCRIPTION: Formula for calculating the maximum concurrency value for service providers in the HeuristicSmoothingFlowControl algorithm. This calculation uses maxQPS and the acceptable delay increase (alpha) to determine the optimal concurrency limit.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmaxConcurrency = maxQPS * (1.0 + alpha) * avgLatency / 1000\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo 3 Specify Address Plugin Dependency in Maven\nDESCRIPTION: Maven dependency configuration for adding the Dubbo 3 specify-address plugin to your project. This plugin allows runtime specification of target IP addresses for Dubbo 3.x calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/specify-ip.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-cluster-specify-address-dubbo3</artifactId>\n  <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Performing Maven Release Deployment for Dubbo\nDESCRIPTION: Maven command to perform the release deployment step, which downloads the tag source, compiles it, and publishes all artifacts to the configured Maven repository in staging state.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ mvn -Prelease release:perform -Darguments=\"-DskipTests\" -DautoVersionSubmodules=true -Dusername=YOUR GITHUB ID\n```\n\n----------------------------------------\n\nTITLE: Release Announcement Email Template for Apache Dubbo\nDESCRIPTION: A template for the release announcement email that should be sent to dev@dubbo.apache.org and general@incubator.apache.org after completing the formal release process. The template includes information about the release, links to resources, and a disclaimer about the project's incubation status.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nHello Community,\n\nThe Apache Dubbo team is pleased to announce that the\n2.6.6 has just been released.\n\nApache Dubbo™  is a high-performance, java based, open source\nRPC framework. Dubbo offers three key functionalities, which include\ninterface based remote call, fault tolerance & load balancing, and\nautomatic service registration & discovery.\n\nBoth the source release[1] and the maven binary release[2] are available\nnow, you can also find the detailed release notes in here[3].\n\n\nIf you have any usage questions, or have problems when upgrading or find\nany problems about enhancements included in this release, please don't\nhesitate to let us know by sending feedback to this mailing list or filing\nan issue on GitHub[4].\n\n\n\n=====\n*Disclaimer*\n\nApache Dubbo is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF.\n\n\n[1] https://dubbo.apache.org/en/blog/2020/05/18/past-releases/\n[2] http://central.maven.org/maven2/com/alibaba/dubbo\n[3] https://github.com/apache/dubbo/releases\n[4] https://github.com/apache/dubbo/issues\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Info\nDESCRIPTION: Command to verify the Kubernetes cluster is running properly and kubectl is bound to the default local cluster.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl cluster-info\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Container with JVM Parameters\nDESCRIPTION: Initiates the Dubbo container using JVM parameters to specify the container types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\njava org.apache.dubbo.container.Main -Ddubbo.container=spring,jetty,log4j\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo Protocol Configuration in YAML\nDESCRIPTION: Initial YAML configuration for publishing Dubbo protocol on port 20880.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-triple.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  protocol:\n    name: dubbo\n    port: 20880\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Consumer Properties for Service Mesh\nDESCRIPTION: This properties file configures the Dubbo consumer for use in a service mesh environment, including application name, protocol, and mesh-specific settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_11\n\nLANGUAGE: properties\nCODE:\n```\n# consumer\ndubbo.application.name=dubbo-samples-mesh-consumer\ndubbo.application.metadataServicePort=20885\ndubbo.registry.address=N/A\ndubbo.protocol.name=tri\ndubbo.protocol.port=20880\ndubbo.consumer.timeout=30000\ndubbo.application.qosEnable=true\n# To allow Kubernetes cluster to access the probe normally, QOS must be enabled for remote access. This operation may pose security risks; please assess carefully before enabling.\ndubbo.application.qosAcceptForeignIp=true\n# Mark to enable mesh sidecar proxy mode\ndubbo.consumer.meshEnable=true\n```\n\n----------------------------------------\n\nTITLE: Software License Agreement Template for Apache Software Foundation\nDESCRIPTION: A template of the Software License Agreement required for donating code to Apache projects. The agreement covers copyright and patent licenses, warranties, liability limitations, and requires details like signatory information and code repository links.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/contact/contributor/software-donation-guide_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nLicense Agreement\n\n\n    This License Agreement is entered into as of the _12th_ day of\n___April____, __2018__ by ___ABC Software Co., Ltd.____ (\"Licensor\"),\nin favor of The Apache Software Foundation, a Delaware nonstock\nmembership corporation (the \"Foundation\").\n\n    WHEREAS, Licensor owns or has sufficient rights to contribute the\nsoftware source code and other related intellectual property as\nitemized on Exhibit A (\"Software\") under the terms of this agreement\nto the Foundation for use within Foundation software development\nprojects (\"Projects\").\n\n    NOW, THEREFORE, FOR GOOD AND VALUABLE CONSIDERATION, the receipt\nand legal sufficiency of which are hereby acknowledged, the parties\nhereto, intending to be legally bound, agree as follows:\n\n1. Subject to the terms and conditions of this License, Licensor\nhereby grants to the Foundation:\n\n  a) a non-exclusive, worldwide, royalty-free, irrevocable\n     copyright license to reproduce, prepare derivative works of,\n     publicly display, publicly perform, distribute and sublicense,\n     internally and externally, the Software and such derivative\n     works, in source code and object code form; and,\n\n  b) a non-exclusive, worldwide, royalty-free, irrevocable\n     patent license under Licensed Patents to make, use, sell,\n     offer to sell, import and otherwise transfer the Software\n     in source code and object code form. \"Licensed Patents\" mean\n     patent claims owned by Licensor which are necessarily\n     infringed by the use or sale of the Software alone.\n\n2. Licensor represents that, to Licensor's knowledge, Licensor is\nlegally entitled to grant the above license. Licensor agrees to notify\nthe Foundation of any facts or circumstances of which Licensor becomes\naware and which makes or would make Licensor's representations in this\nLicense Agreement inaccurate in any respect.\n\n3. This Software is provided AS-IS, WITHOUT WARRANTIES OR CONDITIONS\nOF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,\nANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY\nOR FITNESS FOR A PARTICULAR PURPOSE.  NEITHER THE LICENSOR NOR ITS\nSUPPLIERS WILL BE LIABLE TO THE FOUNDATION OR ITS LICENSEES FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OR DISTRIBUTION OF THE WORK OR THE EXERCISE OF ANY RIGHTS\nGRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nThis License Agreement is the entire agreement of the parties\nwith respect to its subject matter, and may only be amended by a\nwriting signed by each party. This License Agreement may be\nexecuted in one or more counterparts, each of which shall be\nconsidered an original.\n\n    IN WITNESS WHEREOF, Licensor has executed this License Agreement\nas of the date first written above.\n\n\n    LICENSOR:\n\n\n    Signed By: _____________________________________   <--- Your boss's sign here\n\n    Print Name: _____Lei Li_________________________   <--- Your boss's name here\n\n    Title: ____Director_____________________________   <--- Your boss's title here\n\n    Representing: ____ABC Software Co., Ltd. _______ \n\n    ________________________________________________\n\n    Contact Name: ____Lei Li________________________   <--- Your boss's name here\n\n    Contact Email: ____lilei@abc.com________________   <--- Your boss's email here\n\nExhibit A\n\nList of software and other intellectual property covered by this agreement:\n\n* Github address where your code is hosted\n* Pull request link\n```\n\n----------------------------------------\n\nTITLE: Using Spring Property Namespace for Dubbo Configuration\nDESCRIPTION: Alternative way to configure custom parameters in Dubbo using Spring's property namespace (p:). This example sets a 'queue' parameter for JMS protocol using the p: namespace syntax.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/configuration/xml.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:dubbo=\"http://dubbo.apache.org/schema/dubbo\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd\">  \n    <dubbo:protocol name=\"jms\" p:queue=\"your_queue\" />  \n</beans>\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Deployment Definition\nDESCRIPTION: Placeholder example showing a basic Kubernetes deployment definition structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: deployment\n```\n\n----------------------------------------\n\nTITLE: Configuring Nacos Configuration Center in Dubbo-go 3.0\nDESCRIPTION: A YAML configuration for setting up Nacos as a configuration center in Dubbo-go 3.0. It specifies the protocol, address, data ID, namespace, and group required to connect to the Nacos configuration service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/config-center-dynamic.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  config-center:\n    protocol: nacos\n    address: 127.0.0.1:8848\n    data-id: dubbo-go-samples-configcenter-nacos-server\n    namespace: myNamespaceID # 可选配置  nacos namespace ID, 默认是 public\n    group: mygroup # 可选配置  nacos group, 默认是 DEFAULT_GROUP\n```\n\n----------------------------------------\n\nTITLE: Verifying SHA512 Hashes of Release Packages\nDESCRIPTION: Commands to verify the integrity of release packages by checking their SHA512 hash signatures against the generated hash files.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ shasum -c apache-dubbo-${release_version}-src.zip.sha512\n$ shasum -c apache-dubbo-${release_version}-bin.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Image with Dubbo Maven Plugin\nDESCRIPTION: Maven plugin configuration for Dubbo native image processing, specifying the main class and execution phase.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-maven-plugin</artifactId>\n    <version>${dubbo.version}</version>\n    <configuration>\n        <mainClass>org.apache.dubbo.registry.consumer.NativeDemoConsumerRegistryApplication</mainClass>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>process-sources</phase>\n            <goals>\n                <goal>dubbo-process-aot</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Logger\nDESCRIPTION: Properties configuration to specify the logging framework for Dubbo\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.logger=slf4j\n```\n\n----------------------------------------\n\nTITLE: Compiler Code Export Implementation\nDESCRIPTION: Java code showing how to export generated code during compilation process for Dubbo SPI support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-graalvm-support.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic Class<?> doCompile(String name, String source) throws Throwable {\n  System.out.println(\"--->write code:\" + name);\n  Files.write(Paths.get(\"/tmp/sources/\" + name), source.getBytes());\n  ......\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hessian2 Serializable User Struct in Go\nDESCRIPTION: This Go struct defines a User type that implements the JavaClassName method for Hessian2 serialization compatibility with Java. It also registers the POJO for Hessian serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n  ID   string\n  Name string\n  Age  int32\n}\n\nfunc (u *User) JavaClassName() string {\n\treturn \"org.apache.dubbo.User\"\n}\n\nfunc init(){\n\thessian.RegisterPOJO(&User{})  \n}\n```\n\n----------------------------------------\n\nTITLE: Generating IntelliJ IDEA Project Files\nDESCRIPTION: Maven command to generate project files for IntelliJ IDEA IDE.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo 3.x Maven Dependencies\nDESCRIPTION: XML snippet showing how to include Dubbo 3.x dependencies in a Maven project. It specifies both the core Dubbo library and Spring Boot starter at version 3.1.3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/2.x-to-3.x-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo</artifactId>\n  <version>3.1.3</version>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.dubbo</groupId>\n  <artifactId>dubbo-spring-boot-starter</artifactId>\n  <version>3.1.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Basic Kubernetes Deployment Definition\nDESCRIPTION: Placeholder example showing a basic Kubernetes deployment definition structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/deploy/deploy-on-kubernetes-service.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: deployment\n```\n\n----------------------------------------\n\nTITLE: Dubbo Provider Bootstrap Class\nDESCRIPTION: Bootstrap class for starting the Dubbo service provider with annotation-based configuration and service scanning.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo.demo.provider;\n\nimport org.apache.dubbo.config.spring.context.annotation.EnableDubbo;\nimport org.apache.dubbo.demo.service.DemoService;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.annotation.PropertySource;\nimport java.io.IOException;\n\n@EnableDubbo(scanBasePackages = \"org.apache.dubbo.demo.service\")\n@PropertySource(value = \"classpath:/provider-config.properties\")\npublic class DemoServiceProviderBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.register(DemoServiceProviderBootstrap.class);\n        context.refresh();\n        System.out.println(\"DemoService provider is starting...\");\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Eclipse Workspace for Maven\nDESCRIPTION: Maven command to configure the Eclipse workspace for Maven integration, specifying the workspace path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmvn eclipse:configure-workspace -Declipse.workspace=/path/to/the/workspace/\n```\n\n----------------------------------------\n\nTITLE: Fixing GPG Signing Error in Apache Dubbo Release Process\nDESCRIPTION: A shell command to resolve the 'gpg: signing failed: Inappropriate ioctl for device' error that may occur during the signing process of Apache Dubbo releases. This command sets the GPG_TTY environment variable to the current terminal.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nexport GPG_TTY=$(tty)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client IP Using JAX-RS Context Annotation in Dubbo REST\nDESCRIPTION: Shows how to get client IP address using the standard JAX-RS @Context annotation to inject HttpServletRequest. This method only works when server is set to tjws, tomcat, jetty, or servlet.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npublic User getUser(@PathParam(\"id\") Long id, @Context HttpServletRequest request) {\n    System.out.println(\"Client address is \" + request.getRemoteAddr());\n}\n```\n\n----------------------------------------\n\nTITLE: Managing GPG Keys for Apache Release\nDESCRIPTION: Commands to view, publish, set default, and manage GPG keys for Apache releases. Includes viewing key IDs, sending public keys to keyservers, configuring default keys, and deleting unwanted keys.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --list-keys\npub   rsa4096/28681CB1 2018-04-26 # 28681CB1就是key id\nuid       [ultimate] liujun (apache-dubbo) <liujun@apache.org>\nsub   rsa4096/D3D6984B 2018-04-26\n\n# 通过key id发送public key到keyserver\n$ gpg --keyserver pgpkeys.mit.edu --send-key 28681CB1\n# 其中，pgpkeys.mit.edu为随意挑选的keyserver，keyserver列表为：https://sks-keyservers.net/status/，为相互之间是自动同步的，选任意一个都可以。\n```\n\n----------------------------------------\n\nTITLE: Using the RPC Service in Dubbo-Go Client\nDESCRIPTION: This snippet shows how a client uses the RPC service in Dubbo-Go. After configuration loading, the client can call the remote service method as if it were a local function, thanks to the proxy implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n    config.Load()\n    user := &User{}\n    err := userProvider.GetUser(context.TODO(), []interface{}{\"A001\"}, user)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Source Package Verification in Apache Dubbo\nDESCRIPTION: Shell commands to run all unit tests and optionally enable rat and style plugins to verify that all files meet Apache requirements during the release process.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/committer/release-guide_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean test # This will run all unit tests\n# you can also open rat and style plugin to check if every file meets requirements.\nmvn clean test -Drat.skip=false -Dcheckstyle.skip=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Application Properties in Spring\nDESCRIPTION: This snippet demonstrates how to configure Dubbo application properties using Spring's application.properties file. It includes settings for the application name, protocol, port, and registry address.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/principals/configuration.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Dubbo Application\n## The default value of dubbo.application.name is ${spring.application.name}\n## dubbo.application.name=${spring.application.name}\n\n# Dubbo Protocol\ndubbo.protocol.name=dubbo\ndubbo.protocol.port=12345\n\n## Dubbo Registry\ndubbo.registry.address=N/A\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Dubbo Documentation\nDESCRIPTION: YAML frontmatter block that configures the documentation page metadata, including the page type, display title, link title, and navigation weight.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/java-sdk/v3.x/advanced-features-and-usage/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: advanced-docs\ntitle: \"Advanced Features & Usage\"\nlinkTitle: \"Advanced Features & Usage\"\nweight: 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregated Multiple Registries\nDESCRIPTION: XML configuration for creating an aggregated registry that combines addresses from multiple registry clusters into a single pool for load balancing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry address=\"multiple://127.0.0.1:2181?separator=;&reference-registry=zookeeper://address11?backup=address12,address13;zookeeper://address21?backup=address22,address23\" />\n```\n\n----------------------------------------\n\nTITLE: Register Method in AbstractServiceDiscovery\nDESCRIPTION: Implementation of the register method in AbstractServiceDiscovery that adds the service URL to the metadata information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/17-Dubbo服务提供者的双注册原理.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public void register(URL url) {\n      //metadaInfo类型为MetadataInfo类型，用来操作元数据的\n        metadataInfo.addService(url);\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining User Data Structure in Java for Dubbo Service\nDESCRIPTION: Java class definition of a User structure that will be transferred between services. It implements Serializable and contains basic user information fields.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/sourcecode/generic-2.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.apache.dubbo;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Serializable {\n\tprivate String id;\n\n  private String name;\n\n  private int age;\n\n  private Date time = new Date();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SHA512 Signatures for Release Files\nDESCRIPTION: Commands to create SHA512 hash signatures for both source and binary release packages, with special handling for binary files using the -b flag.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/contact/committer/release-guide/java-sdk.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ shasum -a 512 apache-dubbo-${release_version}-src.zip >> apache-dubbo-${release_version}-src.zip.sha512\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider for Callbacks\nDESCRIPTION: XML configuration for the Dubbo service provider that exposes the callback service and specifies which parameter is a callback type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"callbackService\" class=\"com.callback.impl.CallbackServiceImpl\" />\n<dubbo:service interface=\"com.callback.CallbackService\" ref=\"callbackService\" connections=\"1\" callbacks=\"1000\">\n    <dubbo:method name=\"addListener\">\n        <dubbo:argument index=\"1\" callback=\"true\" />\n        <!--也可以通过指定类型的方式-->\n        <!--<dubbo:argument type=\"com.demo.CallbackListener\" callback=\"true\" />-->\n    </dubbo:method>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider for Callbacks\nDESCRIPTION: XML configuration for the Dubbo service provider that exposes the callback service and specifies which parameter is a callback type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/callback-parameter.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"callbackService\" class=\"com.callback.impl.CallbackServiceImpl\" />\n<dubbo:service interface=\"com.callback.CallbackService\" ref=\"callbackService\" connections=\"1\" callbacks=\"1000\">\n    <dubbo:method name=\"addListener\">\n        <dubbo:argument index=\"1\" callback=\"true\" />\n        <!--也可以通过指定类型的方式-->\n        <!--<dubbo:argument type=\"com.demo.CallbackListener\" callback=\"true\" />-->\n    </dubbo:method>\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Downgrade Rules in Dubbo\nDESCRIPTION: YAML configuration for downgrading the CommentService in Dubbo. The rule forces the service to return a mock comment instead of making the actual service call, effectively short-circuiting weak dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/mock.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: consumer\n    parameters:\n      mock: force:return Mock Comment\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Downgrade Rules in Dubbo\nDESCRIPTION: YAML configuration for downgrading the CommentService in Dubbo. The rule forces the service to return a mock comment instead of making the actual service call, effectively short-circuiting weak dependencies.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/traffic-management/mock.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nenabled: true\nconfigs:\n  - side: consumer\n    parameters:\n      mock: force:return Mock Comment\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty4 on Provider Side with Protocol Tag in Dubbo\nDESCRIPTION: Sets the server implementation to Netty4 at the protocol level in Dubbo provider configuration. This allows the provider to use Netty4 as the underlying communication framework.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/netty4.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol server=\"netty4\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Admin Configuration Options (YAML)\nDESCRIPTION: YAML configuration options for controlling the behavior of Dubbo Admin, including environment type and operating mode.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Environment type. Available values are: \"kubernetes\" or \"universal\"\nenvironment: universal # ENV: DUBBO_ENVIRONMENT\n# Mode in which Dubbo CP is running. Available values are: \"standalone\", \"global\", \"zone\"\nmode: standalone # ENV: DUBBO_MODE\n```\n\n----------------------------------------\n\nTITLE: Creating ephemeral nodes in Zookeeper\nDESCRIPTION: This method creates ephemeral nodes in Zookeeper using the Curator framework. Ephemeral nodes are temporary and will be removed when the client session ends.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic void createEphemeral(String path) {\n    try {\n        // 通过 Curator 框架创建节点\n        client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n    } catch (NodeExistsException e) {\n    } catch (Exception e) {\n        throw new IllegalStateException(e.getMessage(), e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP to Dubbo Proxy in APISIX\nDESCRIPTION: HTTP request to test the Dubbo service through APISIX. This curl command sends a POST request to the configured endpoint and displays the response with header and body information from the Dubbo service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9080/demo  -H \"Host: example.org\"  -X POST --data '{\"name\": \"hello\"}'\n\n< HTTP/1.1 200 OK\n< Date: Sun, 26 Dec 2021 11:33:27 GMT\n< Content-Type: text/plain; charset=utf-8\n< Content-Length: 14\n< Connection: keep-alive\n< test: 123\n< Server: APISIX/2.11.0\n<\ndubbo success\n```\n\n----------------------------------------\n\nTITLE: Checking out Dubbo SVN Repository\nDESCRIPTION: Command to checkout the Apache Dubbo SVN repository to a local directory for release preparation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/prepare-an-apache-release.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ svn checkout https://dist.apache.org/repos/dist/dev/dubbo\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus for Dubbo in Kubernetes\nDESCRIPTION: Command to install Prometheus using a Dubbo community-provided configuration. This setup is recommended for testing or evaluation purposes, not for production environments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/prometheus.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo 2.7.x Version Comparison Table in Markdown\nDESCRIPTION: This markdown table compares different 2.7.x versions of Dubbo, listing important features and upgrade recommendations for each version.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/new-features-in-a-glance.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|      | 版本    | 重要功能                                                     | 升级建议                      |\n| ---- | ------- | ------------------------------------------------------------ | ------------------------------- |\n| 1    | 2.7.6   | bugfix of 2.7.5<br /> 服务鉴权 | **推荐生产使用**            |\n| 2    | 2.7.5   | 服务自省<br />HTTP/2（gRPC） <br />Protobuf <br />TLS<br />性能优化<br /><br />https://github.com/apache/dubbo/releases/tag/dubbo-2.7.5 | 不建议大规模生产使用            |\n| 3    | 2.7.4.1 | [bugfixes and enhancements of 2.7.3](https://github.com/apache/dubbo/releases/tag/dubbo-2.7.4.1) | **推荐生产使用**                |\n| 4    | 2.7.3   | [bigfixes of and enhancements of 2.7.2](https://github.com/apache/dubbo/releases/tag/dubbo-2.7.3) | **推荐生产使用**                |\n| 5    | 2.7.2   | [bigfixes of and enhancements of 2.7.1](https://github.com/apache/dubbo/releases/tag/dubbo-2.7.2)      | 不建议大规模生产使用            |\n| 6    | 2.7.1   | [bigfixes of and enhancements of 2.7.0](https://github.com/apache/dubbo/releases/tag/dubbo-2.7.1)      | 不建议大规模生产使用            |\n| 7    | 2.7.0   | 异步编程模型 - 消费端/提供端异步<br />服务治理规则增强<br />简化的注册模型<br />配置中心、元数据中心<br />package 重构<br /><br />https://github.com/apache/dubbo/releases/tag/dubbo-2.7.0 | beta 版本，2.6.x 重构后首个版本 |\n```\n\n----------------------------------------\n\nTITLE: Iterating Pages with Hugo Template\nDESCRIPTION: This code snippet demonstrates how to get a page reference and iterate through its regular pages recursively in Hugo templates. It generates HTML links with titles for each page found in the 'advanced-features-and-usage' section.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/layouts/shortcodes/docs/section_list.md#2025-04-08_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $page := .Site.GetPage \"advanced-features-and-usage\" }}\n\n{{ range $page.RegularPagesRecursive }}\n<div>\n    <h5 class=\"mt-3\"><a href=\"{{ .RelPermalink }}\">{{ .Title }}</a></h5>\n</div>\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Adding Reactive Dependencies in Maven\nDESCRIPTION: Add the necessary dependencies for using Reactor with Triple protocol in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.reactivestreams</groupId>\n    <artifactId>reactive-streams</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.projectreactor</groupId>\n    <artifactId>reactor-core</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Reactive Dependencies in Maven\nDESCRIPTION: Add the necessary dependencies for using Reactor with Triple protocol in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/reactive.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.reactivestreams</groupId>\n    <artifactId>reactive-streams</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.projectreactor</groupId>\n    <artifactId>reactor-core</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Framework Liveness\nDESCRIPTION: The 'live' command checks whether the current Dubbo framework is running normally. It returns a boolean value indicating the liveness status, which may be permanently abnormal if false.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/probe.md#2025-04-08_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ndubbo>live\ntrue\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Disabling Keep-alive for REST Protocol\nDESCRIPTION: Configuration to switch from the default HTTP long connections to short connections. This setting works only with netty and tomcat servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" keepalive=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Starting Dubbo Container with Multiple Container Types\nDESCRIPTION: Starts the Dubbo container with Spring, Jetty, and Log4j containers specified as command-line arguments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/service-container.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njava org.apache.dubbo.container.Main spring jetty log4j\n```\n\n----------------------------------------\n\nTITLE: Dubbo Service Consumer Implementation\nDESCRIPTION: Implementation of a Dubbo service consumer that invokes the remote GreetingsService.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-101.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) {\n        ReferenceConfig<GreetingsService> reference = new ReferenceConfig<>();\n        reference.setApplication(new ApplicationConfig(\"first-dubbo-client\"));\n        reference.setRegistry(new RegistryConfig(\"multicast://224.5.6.7:1234\"));\n        reference.setInterface(GreetingsService.class);\n        GreetingsService greetingsService = reference.get();\n        String message = greetingsService.sayHi(\"dubbo\");\n        System.out.println(message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CompletableFuture Interface in Java\nDESCRIPTION: Shows the implementation of a CompletableFuture-based asynchronous service in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public CompletableFuture<String> sayHello(String name) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CompletableFuture Interface in Java\nDESCRIPTION: Shows the implementation of a CompletableFuture-based asynchronous service in Dubbo 2.7.0+.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-new-async.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class AsyncServiceImpl implements AsyncService {\n    public CompletableFuture<String> sayHello(String name) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"async response from provider.\";\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Region Service Registration Example\nDESCRIPTION: XML configuration example for registering services to multiple registries across different regions, useful when services can't be deployed in all regions simultaneously.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:registry id=\"hangzhouRegistry\" address=\"10.20.141.150:9090\" />\n<dubbo:registry id=\"qingdaoRegistry\" address=\"10.20.141.151:9010\" default=\"false\" />\n<!-- Register to multiple registries -->\n<dubbo:service interface=\"com.alibaba.hello.api.HelloService\" version=\"1.0.0\" ref=\"helloService\" registry=\"hangzhouRegistry,qingdaoRegistry\" />\n```\n\n----------------------------------------\n\nTITLE: Proxy类实现动态代理类生成\nDESCRIPTION: Proxy类的getProxy方法实现，用于生成接口的代理类和Proxy子类。该方法将接口信息转换为代理类，并实现方法调用逻辑，同时使用缓存提高性能。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static Proxy getProxy(Class<?>... ics) {\n    // 调用重载方法\n    return getProxy(ClassHelper.getClassLoader(Proxy.class), ics);\n}\n\npublic static Proxy getProxy(ClassLoader cl, Class<?>... ics) {\n    if (ics.length > 65535)\n        throw new IllegalArgumentException(\"interface limit exceeded\");\n\n    StringBuilder sb = new StringBuilder();\n    // 遍历接口列表\n    for (int i = 0; i < ics.length; i++) {\n        String itf = ics[i].getName();\n        // 检测类型是否为接口\n        if (!ics[i].isInterface())\n            throw new RuntimeException(itf + \" is not a interface.\");\n\n        Class<?> tmp = null;\n        try {\n            // 重新加载接口类\n            tmp = Class.forName(itf, false, cl);\n        } catch (ClassNotFoundException e) {\n        }\n\n        // 检测接口是否相同，这里 tmp 有可能为空\n        if (tmp != ics[i])\n            throw new IllegalArgumentException(ics[i] + \" is not visible from class loader\");\n\n        // 拼接接口全限定名，分隔符为 ;\n        sb.append(itf).append(';');\n    }\n\n    // 使用拼接后的接口名作为 key\n    String key = sb.toString();\n\n    Map<String, Object> cache;\n    synchronized (ProxyCacheMap) {\n        cache = ProxyCacheMap.get(cl);\n        if (cache == null) {\n            cache = new HashMap<String, Object>();\n            ProxyCacheMap.put(cl, cache);\n        }\n    }\n\n    Proxy proxy = null;\n    synchronized (cache) {\n        do {\n            // 从缓存中获取 Reference<Proxy> 实例\n            Object value = cache.get(key);\n            if (value instanceof Reference<?>) {\n                proxy = (Proxy) ((Reference<?>) value).get();\n                if (proxy != null) {\n                    return proxy;\n                }\n            }\n\n            // 并发控制，保证只有一个线程可以进行后续操作\n            if (value == PendingGenerationMarker) {\n                try {\n                    // 其他线程在此处进行等待\n                    cache.wait();\n                } catch (InterruptedException e) {\n                }\n            } else {\n                // 放置标志位到缓存中，并跳出 while 循环进行后续操作\n                cache.put(key, PendingGenerationMarker);\n                break;\n            }\n        }\n        while (true);\n    }\n\n    long id = PROXY_CLASS_COUNTER.getAndIncrement();\n    String pkg = null;\n    ClassGenerator ccp = null, ccm = null;\n    try {\n        // 创建 ClassGenerator 对象\n        ccp = ClassGenerator.newInstance(cl);\n\n        Set<String> worked = new HashSet<String>();\n        List<Method> methods = new ArrayList<Method>();\n\n        for (int i = 0; i < ics.length; i++) {\n            // 检测接口访问级别是否为 protected 或 private\n            if (!Modifier.isPublic(ics[i].getModifiers())) {\n                // 获取接口包名\n                String npkg = ics[i].getPackage().getName();\n                if (pkg == null) {\n                    pkg = npkg;\n                } else {\n                    if (!pkg.equals(npkg))\n                        // 非 public 级别的接口必须在同一个包下，否者抛出异常\n                        throw new IllegalArgumentException(\"non-public interfaces from different packages\");\n                }\n            }\n            \n            // 添加接口到 ClassGenerator 中\n            ccp.addInterface(ics[i]);\n\n            // 遍历接口方法\n            for (Method method : ics[i].getMethods()) {\n                // 获取方法描述，可理解为方法签名\n                String desc = ReflectUtils.getDesc(method);\n                // 如果方法描述字符串已在 worked 中，则忽略。考虑这种情况，\n                // A 接口和 B 接口中包含一个完全相同的方法\n                if (worked.contains(desc))\n                    continue;\n                worked.add(desc);\n\n                int ix = methods.size();\n                // 获取方法返回值类型\n                Class<?> rt = method.getReturnType();\n                // 获取参数列表\n                Class<?>[] pts = method.getParameterTypes();\n\n                // 生成 Object[] args = new Object[1...N]\n                StringBuilder code = new StringBuilder(\"Object[] args = new Object[\").append(pts.length).append(\"];\");\n                for (int j = 0; j < pts.length; j++)\n                    // 生成 args[1...N] = ($w)$1...N;\n                    code.append(\" args[\").append(j).append(\"] = ($w)$\").append(j + 1).append(\";\");\n                // 生成 InvokerHandler 接口的 invoker 方法调用语句，如下：\n                // Object ret = handler.invoke(this, methods[1...N], args);\n                code.append(\" Object ret = handler.invoke(this, methods[\" + ix + \"], args);\");\n\n                // 返回值不为 void\n                if (!Void.TYPE.equals(rt))\n                    // 生成返回语句，形如 return (java.lang.String) ret;\n                    code.append(\" return \").append(asArgument(rt, \"ret\")).append(\";\");\n\n                methods.add(method);\n                // 添加方法名、访问控制符、参数列表、方法代码等信息到 ClassGenerator 中 \n                ccp.addMethod(method.getName(), method.getModifiers(), rt, pts, method.getExceptionTypes(), code.toString());\n            }\n        }\n\n        if (pkg == null)\n            pkg = PACKAGE_NAME;\n\n        // 构建接口代理类名称：pkg + \".proxy\" + id，比如 org.apache.dubbo.proxy0\n        String pcn = pkg + \".proxy\" + id;\n        ccp.setClassName(pcn);\n        ccp.addField(\"public static java.lang.reflect.Method[] methods;\");\n        // 生成 private java.lang.reflect.InvocationHandler handler;\n        ccp.addField(\"private \" + InvocationHandler.class.getName() + \" handler;\");\n\n        // 为接口代理类添加带有 InvocationHandler 参数的构造方法，比如：\n        // porxy0(java.lang.reflect.InvocationHandler arg0) {\n        //     handler=$1;\n    \t// }\n        ccp.addConstructor(Modifier.PUBLIC, new Class<?>[]{InvocationHandler.class}, new Class<?>[0], \"handler=$1;\");\n        // 为接口代理类添加默认构造方法\n        ccp.addDefaultConstructor();\n        \n        // 生成接口代理类\n        Class<?> clazz = ccp.toClass();\n        clazz.getField(\"methods\").set(null, methods.toArray(new Method[0]));\n\n        // 构建 Proxy 子类名称，比如 Proxy1，Proxy2 等\n        String fcn = Proxy.class.getName() + id;\n        ccm = ClassGenerator.newInstance(cl);\n        ccm.setClassName(fcn);\n        ccm.addDefaultConstructor();\n        ccm.setSuperClass(Proxy.class);\n        // 为 Proxy 的抽象方法 newInstance 生成实现代码，形如：\n        // public Object newInstance(java.lang.reflect.InvocationHandler h) { \n        //     return new org.apache.dubbo.proxy0($1);\n        // }\n        ccm.addMethod(\"public Object newInstance(\" + InvocationHandler.class.getName() + \" h){ return new \" + pcn + \"($1); }\");\n        // 生成 Proxy 实现类\n        Class<?> pc = ccm.toClass();\n        // 通过反射创建 Proxy 实例\n        proxy = (Proxy) pc.newInstance();\n    } catch (RuntimeException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new RuntimeException(e.getMessage(), e);\n    } finally {\n        if (ccp != null)\n            // 释放资源\n            ccp.release();\n        if (ccm != null)\n            ccm.release();\n        synchronized (cache) {\n            if (proxy == null)\n                cache.remove(key);\n            else\n                // 写缓存\n                cache.put(key, new WeakReference<Proxy>(proxy));\n            // 唤醒其他等待线程\n            cache.notifyAll();\n        }\n    }\n    return proxy;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo-Api-Docs Dependencies in Maven\nDESCRIPTION: Maven dependencies required for using Dubbo-Api-Docs in a Dubbo project. Include these in the project's pom.xml file.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-api-docs.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-api-docs-annotations</artifactId>\n    <version>${dubbo-version}</version>\n</dependency>\n\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-api-docs-core</artifactId>\n    <version>${dubbo-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: QPS Calculation in AutoConcurrencyLimier\nDESCRIPTION: Formula for calculating QPS (Queries Per Second) in the AutoConcurrencyLimier algorithm based on request count and sample time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/heuristic-flow-control.md#2025-04-08_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nqps = totalReqCount / ((samplingTimeUs - startSampleTimeUs) / 1000000.0)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Metadata Center with Properties\nDESCRIPTION: Configuration to enable Zookeeper as a metadata center using Properties file format in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Enabling Zookeeper Metadata Center with Properties\nDESCRIPTION: Configuration to enable Zookeeper as a metadata center using Properties file format in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.metadata-report.address=zookeeper://127.0.0.1:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Group for Externalized Configuration\nDESCRIPTION: XML snippet showing how to set the group parameter for Dubbo's config-center to determine the location of externalized configuration in Apollo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:config-center group=\"demo-provider\" address=\"apollo://localhost:8080\"/>\n```\n\n----------------------------------------\n\nTITLE: IP-based Conditional Routing Rule in YAML\nDESCRIPTION: Example of excluding a specific host IP from the service availability list\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/_index.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n=> host != 172.22.3.91\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Settings for Docker Deployment\nDESCRIPTION: This snippet demonstrates how to modify the security configurations for Dubbo Admin when deploying via Docker, using the properties file located at /dubbo/dubbo-admin/properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/admin.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nadmin.root.user.name=root\nadmin.root.user.password=root\nadmin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: Rendering Service Mesh Deployment Options in HTML\nDESCRIPTION: This HTML snippet creates a responsive grid layout to display two deployment options for Dubbo Mesh: Istio & Envoy Example and Istio & Proxyless Example. Each option is presented in a card format with a title and brief description.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./migration/dubbo-mesh/\" >}}'>Istio & Envoy Example</a>\n                </h4>\n                <p>Demonstrates the Dubbo service access based on the Envoy proxy in the Istio service mesh framework.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./migration/proxyless/\" >}}'>Istio & Proxyless Example</a>\n                </h4>\n                <p>Demonstrates Dubbo Proxyless access to the Istio service mesh framework.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Runnable for Dubbo Benchmark Testing in Java\nDESCRIPTION: This code snippet demonstrates how to implement the AbstractClientRunnable class for benchmark testing in Dubbo. It shows the implementation of the invoke method that creates a proxy for the service interface and calls the desired method on it.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/benchmark-tool.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic Object invoke(ServiceFactory serviceFactory) {\n  DemoService demoService = (DemoService) serviceFactory.get(DemoService.class);\n  return demoService.sendRequest(\"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for Proxyless Bookinfo Page\nDESCRIPTION: This code snippet defines the front matter for the Markdown page, including metadata such as aliases, description, title, and weight for the Proxyless Bookinfo example documentation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-proxyless/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\naliases:\n    - /zh/overview/tasks/mesh/bookinfo-proxyless/\n    - /zh-cn/overview/tasks/mesh/bookinfo-proxyless/\ndescription: 通过完整的 Bookinfo 示例操作演示 Dubbo Proxyless 接入 Istio 服务网格体系。\nlinkTitle: Proxyless Bookinfo\nno_list: true\ntitle: Proxyless Bookinfo 示例\ntype: docs\nweight: 70\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Codec Interface for Dubbo Protocol in Java\nDESCRIPTION: This code snippet defines the Codec2 interface in Dubbo, which is responsible for encoding and decoding messages according to the Dubbo protocol. It includes methods for encoding objects into byte buffers and decoding byte buffers into objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SPI\npublic interface Codec2 {\n\n    @Adaptive({Constants.CODEC_KEY})\n    void encode(Channel channel, ChannelBuffer buffer, Object message) throws IOException;\n\n    @Adaptive({Constants.CODEC_KEY})\n    Object decode(Channel channel, ChannelBuffer buffer) throws IOException;\n\n\n    enum DecodeResult {\n        NEED_MORE_INPUT, SKIP_SOME_INPUT\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo Protocol Configuration in XML\nDESCRIPTION: Example of a basic Dubbo protocol configuration in XML format that only specifies the port without explicitly setting the host. In this case, Dubbo will determine the host automatically using InetAddress.getLocalHost().getHostAddress().\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    <dubbo:protocol name=\"dubbo\" port=\"20890\" />\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Dubbo Protocol Configuration in XML\nDESCRIPTION: Example of a basic Dubbo protocol configuration in XML format that only specifies the port without explicitly setting the host. In this case, Dubbo will determine the host automatically using InetAddress.getLocalHost().getHostAddress().\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/set-host.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    <dubbo:protocol name=\"dubbo\" port=\"20890\" />\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a JAX-RS Container Response Filter in Dubbo REST\nDESCRIPTION: Example of a JAX-RS ContainerResponseFilter that adds cache control headers to GET responses. This filter intercepts HTTP responses before they're sent to clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_38\n\nLANGUAGE: java\nCODE:\n```\npublic class CacheControlFilter implements ContainerResponseFilter {\n\n    public void filter(ContainerRequestContext req, ContainerResponseContext res) {\n        if (req.getMethod().equals(\"GET\")) {\n            res.getHeaders().add(\"Cache-Control\", \"someValue\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Service Method to Use Wrapper Object\nDESCRIPTION: Demonstrates how to modify a service method to use a wrapper object instead of returning a primitive type, which resolves XML serialization issues and provides better structured responses.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nRegistrationResult registerUser(User user);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Properties in Helm Values\nDESCRIPTION: YAML configuration for changing the default username, password, and JWT secret token in Helm chart values for Helm-based deployments.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/notices/admin.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  admin.root.user.name: root\n  admin.root.user.password: root\n  admin.check.signSecret: 86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Global Registries in Spring Boot\nDESCRIPTION: Configuration example for setting up multiple global registries in a Spring Boot application using YAML format. This defines two registries named beijingRegistry and shanghaiRegistry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/multiple-registry.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo\n registries\n  beijingRegistry\n   address: zookeeper://localhost:2181\n  shanghaiRegistry\n   address: zookeeper://localhost:2182\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dubbo Core Dependency in Maven\nDESCRIPTION: Maven dependency configuration for upgrading to Dubbo 3.3.0 core library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/version/3.2-to-3.3-compatibility-guide.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Downloading Dubbo Admin for VM Installation\nDESCRIPTION: Downloads the Dubbo Admin release for VM installation using a curl command.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -\n# Admin 要组织好发行版本\n```\n\n----------------------------------------\n\nTITLE: Handling Dubbo Protocol Messages (Java)\nDESCRIPTION: The DubboProtocol class contains logic for handling Dubbo protocol messages. It retrieves the appropriate Invoker for a given service and invokes the service method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboProtocol extends AbstractProtocol {\n\n    public static final String NAME = \"dubbo\";\n    \n    private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() {\n\n        @Override\n        public Object reply(ExchangeChannel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                Invocation inv = (Invocation) message;\n                // 获取 Invoker 实例\n                Invoker<?> invoker = getInvoker(channel, inv);\n                if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {\n                    // 回调相关，忽略\n                }\n                RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());\n                // 通过 Invoker 调用具体的服务\n                return invoker.invoke(inv);\n            }\n            throw new RemotingException(channel, \"Unsupported request: ...\");\n        }\n        \n        // 忽略其他方法\n    }\n    \n    Invoker<?> getInvoker(Channel channel, Invocation inv) throws RemotingException {\n        // 忽略回调和本地存根相关逻辑\n        // ...\n        \n        int port = channel.getLocalAddress().getPort();\n        \n        // 计算 service key，格式为 groupName/serviceName:serviceVersion:port。比如：\n        //   dubbo/com.alibaba.dubbo.demo.DemoService:1.0.0:20880\n        String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY));\n\n        // 从 exporterMap 查找与 serviceKey 相对应的 DubboExporter 对象，\n        // 服务导出过程中会将 <serviceKey, DubboExporter> 映射关系存储到 exporterMap 集合中\n        DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);\n\n        if (exporter == null)\n            throw new RemotingException(channel, \"Not found exported service ...\");\n\n        // 获取 Invoker 对象，并返回\n        return exporter.getInvoker();\n    }\n    \n    // 忽略其他方法\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dubbo Protocol Messages (Java)\nDESCRIPTION: The DubboProtocol class contains logic for handling Dubbo protocol messages. It retrieves the appropriate Invoker for a given service and invokes the service method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/service-invoking-process.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboProtocol extends AbstractProtocol {\n\n    public static final String NAME = \"dubbo\";\n    \n    private ExchangeHandler requestHandler = new ExchangeHandlerAdapter() {\n\n        @Override\n        public Object reply(ExchangeChannel channel, Object message) throws RemotingException {\n            if (message instanceof Invocation) {\n                Invocation inv = (Invocation) message;\n                // 获取 Invoker 实例\n                Invoker<?> invoker = getInvoker(channel, inv);\n                if (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) {\n                    // 回调相关，忽略\n                }\n                RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());\n                // 通过 Invoker 调用具体的服务\n                return invoker.invoke(inv);\n            }\n            throw new RemotingException(channel, \"Unsupported request: ...\");\n        }\n        \n        // 忽略其他方法\n    }\n    \n    Invoker<?> getInvoker(Channel channel, Invocation inv) throws RemotingException {\n        // 忽略回调和本地存根相关逻辑\n        // ...\n        \n        int port = channel.getLocalAddress().getPort();\n        \n        // 计算 service key，格式为 groupName/serviceName:serviceVersion:port。比如：\n        //   dubbo/com.alibaba.dubbo.demo.DemoService:1.0.0:20880\n        String serviceKey = serviceKey(port, path, inv.getAttachments().get(Constants.VERSION_KEY), inv.getAttachments().get(Constants.GROUP_KEY));\n\n        // 从 exporterMap 查找与 serviceKey 相对应的 DubboExporter 对象，\n        // 服务导出过程中会将 <serviceKey, DubboExporter> 映射关系存储到 exporterMap 集合中\n        DubboExporter<?> exporter = (DubboExporter<?>) exporterMap.get(serviceKey);\n\n        if (exporter == null)\n            throw new RemotingException(channel, \"Not found exported service ...\");\n\n        // 获取 Invoker 对象，并返回\n        return exporter.getInvoker();\n    }\n    \n    // 忽略其他方法\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in YAML Format\nDESCRIPTION: YAML configuration for setting up Zookeeper as a registration center in Dubbo. This specifies the Zookeeper address for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo\n registry\n   address: zookeeper://localhost:2181\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Registry in YAML Format\nDESCRIPTION: YAML configuration for setting up Zookeeper as a registration center in Dubbo. This specifies the Zookeeper address for service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/zookeeper.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml\ndubbo\n registry\n   address: zookeeper://localhost:2181\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus for Dubbo in Kubernetes\nDESCRIPTION: Command to quickly install Prometheus in a Kubernetes cluster using the configuration provided by the Dubbo community. This installation is suitable for testing purposes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/prometheus.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: XML Response Format Example with Wrapper Object\nDESCRIPTION: Example of how the XML response will be structured when using a wrapper object for primitive return types, showing proper element nesting.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<registrationResult>\n    <id>1002</id>\n</registrationResult>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unary Request in Triple Protocol over HTTP/1\nDESCRIPTION: This snippet shows an example of a unary request using the Triple protocol over HTTP/1. It includes both the request and response headers and bodies, demonstrating the use of JSON encoding for the payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1\n> Host: 127.0.0.1:30551\n> Content-Type: application/json\n>\n> [\"Dubbo\"]\n\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n<\n< {\"greeting\": \"Hello, Dubbo!\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Observer for Istio Communication in Dubbo\nDESCRIPTION: Handles responses from Istio by processing discovery responses, updating the local cache pool, and sending acknowledgment messages. This implements a bidirectional stream communication pattern.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/Dubbo-proxyless.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ResponseObserver implements XXX {\n        ...\n        public void onNext(DiscoveryResponse value) {\n            // Accept data from Istio and split\n            Map<String, T> newResult = decodeDiscoveryResponse(value);\n            // Local cache pool data\n            Map<String, T> oldResource = resourcesMap;\n            // Refresh cache pool data\n            discoveryResponseListener(oldResource, newResult);\n            resourcesMap = newResult;\n            // for ACK\n            requestObserver.onNext(buildDiscoveryRequest(Collections.emptySet(), value));\n        }\n        ...\n        public void discoveryResponseListener(Map<String, T> oldResult, \n                                              Map<String, T> newResult) {\n            ....\n        }\t\n}\n// Specific implementation left to LDS, RDS, EDS\nprotected abstract Map<String, T> decodeDiscoveryResponse(DiscoveryResponse response){\n\t// Compare new data with cache pool resources to extract resources absent in either pool\n    ...\n    for (Map.Entry<Set<String>, List<Consumer<Map<String, T>>>> entry : consumerObserveMap.entrySet()) {\n    // Skip if not present in the local cache pool\n    ...\n\t// Aggregate resources\n    Map<String, T> dsResultMap = entry.getKey()\n        .stream()\n        .collect(Collectors.toMap(k -> k, v -> newResult.get(v)));\n    // Refresh cache pool data\n    entry.getValue().forEach(o -> o.accept(dsResultMap));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unary Request in Triple Protocol over HTTP/1\nDESCRIPTION: This snippet shows an example of a unary request using the Triple protocol over HTTP/1. It includes both the request and response headers and bodies, demonstrating the use of JSON encoding for the payload.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/protocols/triple-spec.md#2025-04-08_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1\n> Host: 127.0.0.1:30551\n> Content-Type: application/json\n>\n> [\"Dubbo\"]\n\n< HTTP/1.1 200 OK\n< Content-Type: application/json\n<\n< {\"greeting\": \"Hello, Dubbo!\"}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with multipart/formdata Content-Type\nDESCRIPTION: Example of a multipart/formdata HTTP request to a Triple protocol endpoint, containing text, JSON, and binary image data separated by boundary markers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/proposals/support-more-content-types.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetPojo HTTP/1.1\nHost: 192.168.202.1:50052\nContent-Type: multipart/form-data; boundary=example-part-boundary\nAccept: application/json\n--example-part-boundary\nContent-Disposition: form-data; name=\"username\"\nContent-Type: text/plain\nLuYue\n--example-part-boundary\nContent-Disposition: form-data; name=\"userdetail\"\nContent-Type: application/json\n{\n    \"location\":\"beijing\",\n    \"username\":\"LuYue\"\n}\n--example-part-boundary\nContent-Disposition: form-data; name=\"userimg\";filename=\"user.jpeg\"\nContent-Type: image/jpeg\n<binary image data>\n--example-part-boundary--\n```\n\n----------------------------------------\n\nTITLE: Hugo Template for Content Card Grid\nDESCRIPTION: A Hugo template that generates a responsive grid of cards using Bootstrap classes. The template accesses page parameters and iterates through nested content structures to render individual cards with titles and descriptions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/layouts/shortcodes/docs/content_box.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ with .Page.Params.content -}}\n<div class=\"row\">\n{{ range $list_entry := . }}\n{{ range $heading, $items := $list_entry }}\n\n{{ range $items }}\n<div class=\"col-sm col-md-6 mb-4\">\n  <div class=\"h-100 card shadow\" href=\"#\">\n    <div class=\"card-body\">\n  {{ $item :=. }}\n  <h4 class=\"card-title\">\n    {{ $item.name | $.Page.RenderString }}\n  </h4>\n  <p>{{ $item.description }}</p>\n    </div>\n  </div>\n</div>\n{{ end }}\n{{ end }}\n{{ end }}\n</div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection Mode in Dubbo REST\nDESCRIPTION: XML configuration for switching from the default HTTP keep-alive (long connection) mode to short connection mode, effective only with Netty and Tomcat servers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/rest.md#2025-04-08_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" keepalive=\"false\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for Dubbo REST Logging\nDESCRIPTION: Log4j XML configuration to enable INFO level logging for the Dubbo REST support package. This is required to see the HTTP logs generated by LoggingFilter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<logger name=\"org.apache.dubbo.rpc.protocol.rest.support\">\n    <level value=\"INFO\"/>\n    <appender-ref ref=\"CONSOLE\"/>\n</logger>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hystrix on Dubbo Consumer\nDESCRIPTION: Implementation of Dubbo consumer with Hystrix fallback configuration for handling failures gracefully.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-integrate-with-hystrix.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    @Reference(version = \"1.0.0\")\n    private HelloService demoService;\n\n    @HystrixCommand(fallbackMethod = \"reliable\")\n    public String doSayHello(String name) {\n        return demoService.sayHello(name);\n    }\n    public String reliable(String name) {\n        return \"hystrix fallback value\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Apache Dubbo Community Vote Email Template\nDESCRIPTION: Template for initiating a vote to release a new Apache Dubbo version, including details about release candidates, staging repositories, Git tags, and release notes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/committer/release-guide_dev.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHello Dubbo Community,\n\nThis is a call for vote to release Apache Dubbo version 2.7.2.\n\nThe release candidates:\nhttps://dist.apache.org/repos/dist/dev/dubbo/2.7.2/\n\nThe staging repo:\nhttps://repository.apache.org/content/repositories/orgapachedubbo-1005\n\nGit tag for the release:\nhttps://github.com/apache/dubbo/tree/dubbo-2.7.2\n\nHash for the release tag:\nafab04c53edab38d52275d2a198ea1aff7a4f41e\n\nRelease Notes:\nhttps://github.com/apache/dubbo/releases/tag/untagged-4775c0a22c60fca55118\n\nThe artifacts have been signed with Key : 28681CB1, which can be found in the keys file:\nhttps://dist.apache.org/repos/dist/dev/dubbo/KEYS\n\nThe vote will be open for at least 72 hours or until necessary number of votes are reached.\n\nPlease vote accordingly:\n\n[ ] +1 approve \n[ ] +0 no opinion \n[ ] -1 disapprove with the reason\n\nThanks,\nThe Apache Dubbo Team\n```\n\n----------------------------------------\n\nTITLE: ExtensionDirector's getExtensionLoader Method\nDESCRIPTION: Implements the logic for obtaining an ExtensionLoader in the ExtensionDirector class, including caching and creation of loaders.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\n    public <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {\n        checkDestroyed();\n        if (type == null) {\n            throw new IllegalArgumentException(\"Extension type == null\");\n        }\n        if (!type.isInterface()) {\n            throw new IllegalArgumentException(\"Extension type (\" + type + \") is not an interface!\");\n        }\n        if (!withExtensionAnnotation(type)) {\n            throw new IllegalArgumentException(\"Extension type (\" + type +\n                \") is not an extension, because it is NOT annotated with @\" + SPI.class.getSimpleName() + \"!\");\n        }\n\n        ExtensionLoader<T> loader = (ExtensionLoader<T>) extensionLoadersMap.get(type);\n        ExtensionScope scope = extensionScopeMap.get(type);\n        if (scope == null) {\n            SPI annotation = type.getAnnotation(SPI.class);\n            scope = annotation.scope();\n            extensionScopeMap.put(type, scope);\n        }\n        if (loader == null && scope == ExtensionScope.SELF) {\n            loader = createExtensionLoader0(type);\n        }\n        if (loader == null) {\n            if (this.parent != null) {\n                loader = this.parent.getExtensionLoader(type);\n            }\n        }\n        if (loader == null) {\n            loader = createExtensionLoader(type);\n        }\n        return loader;\n    }\n```\n\n----------------------------------------\n\nTITLE: Handling multipart/formdata requests in Triple\nDESCRIPTION: Example of a multipart/formdata HTTP request containing text, JSON, and binary data parts. This format allows sending mixed content types within a single request with boundary delimiters.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/support-more-content-types.md#2025-04-08_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetPojo HTTP/1.1\nHost: 192.168.202.1:50052\nContent-Type: multipart/form-data; boundary=example-part-boundary\nAccept: application/json\n \n--example-part-boundary\nContent-Disposition: form-data; name=\"username\"\nContent-Type: text/plain\n    \nLuYue\n--example-part-boundary\nContent-Disposition: form-data; name=\"userdetail\"\nContent-Type: application/json\n \n{\n    \"location\":\"beijing\",\n    \"username\":\"LuYue\"\n}\n--example-part-boundary\nContent-Disposition: form-data; name=\"userimg\";filename=\"user.jpeg\"\nContent-Type: image/jpeg\n<binary-image data>\n--example-part-boundary--\n```\n\n----------------------------------------\n\nTITLE: HTML Layout for Dubbo Extensions Documentation\nDESCRIPTION: HTML markup defining a card-based layout for displaying different Dubbo extension types. The layout includes four cards describing Custom Filter, Custom Router, Custom Protocol, and Custom Registry Center capabilities.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/extensibility/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"td-content list-page\">\n    <div class=\"lead\"></div><header class=\"article-meta\">\n    </header><div class=\"row\">\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\" href=\"#\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./filter/\" >}}'>Custom Filter</a>\n                </h4>\n                <p>Custom filters can be dynamically loaded using the SPI mechanism, allowing for unified processing and validation of returned results, reducing interruptions for developers.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./router/\" >}}'>Custom Router</a>\n                </h4>\n                <p>Custom routing strategies can be implemented based on actual usage scenarios during service calls, effectively improving service throughput and latency.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./protocol/\" >}}'>Custom Protocol</a>\n                </h4>\n                <p>Custom transport protocols can be used for different heterogeneous systems, masking the differences between protocols for better system integration.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm col-md-6 mb-4\">\n        <div class=\"h-100 card shadow\">\n            <div class=\"card-body\">\n                <h4 class=\"card-title\">\n                    <a href='{{< relref \"./registry/\" >}}'>Custom Registry Center</a>\n                </h4>\n                <p>Integrating services from different registry centers into the Dubbo framework, custom registry centers serve as a cutting edge for bridging heterogeneous service systems.</p>\n            </div>\n        </div>\n    </div>\n</div>\n<hr>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Window Quantile for Metrics Aggregation in Dubbo\nDESCRIPTION: A sliding window implementation using TDigest algorithm for calculating accurate quantile metrics. The class manages time-based rotation of buckets to maintain recent metrics data within the configured time window.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/metrics.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class TimeWindowQuantile {\n    private final double compression;\n    private final TDigest[] ringBuffer;\n    private int currentBucket;\n    private long lastRotateTimestampMillis;\n    private final long durationBetweenRotatesMillis;\n\n    public TimeWindowQuantile(double compression, int bucketNum, int timeWindowSeconds) {\n        this.compression = compression;\n        this.ringBuffer = new TDigest[bucketNum];\n        for (int i = 0; i < bucketNum; i++) {\n            this.ringBuffer[i] = TDigest.createDigest(compression);\n        }\n\n        this.currentBucket = 0;\n        this.lastRotateTimestampMillis = System.currentTimeMillis();\n        this.durationBetweenRotatesMillis = TimeUnit.SECONDS.toMillis(timeWindowSeconds) / bucketNum;\n    }\n\n    public synchronized double quantile(double q) {\n        TDigest currentBucket = rotate();\n        return currentBucket.quantile(q);\n    }\n\n    public synchronized void add(double value) {\n        rotate();\n        for (TDigest bucket : ringBuffer) {\n            bucket.add(value);\n        }\n    }\n\n    private TDigest rotate() {\n        long timeSinceLastRotateMillis = System.currentTimeMillis() - lastRotateTimestampMillis;\n        while (timeSinceLastRotateMillis > durationBetweenRotatesMillis) {\n            ringBuffer[currentBucket] = TDigest.createDigest(compression);\n            if (++currentBucket >= ringBuffer.length) {\n                currentBucket = 0;\n            }\n            timeSinceLastRotateMillis -= durationBetweenRotatesMillis;\n            lastRotateTimestampMillis += durationBetweenRotatesMillis;\n        }\n        return ringBuffer[currentBucket];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Generic Implementation via Dubbo API\nDESCRIPTION: Java code demonstrating how to expose a generic service implementation using Dubbo's API. It sets up a ServiceConfig, configures the service interface and implementation, and exports the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/generic-impl.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// 用org.apache.dubbo.rpc.service.GenericService可以替代所有接口实现\nGenericService xxxService = new XxxGenericService();\n\n// 该实例很重量，里面封装了所有与注册中心及服务提供方连接，请缓存\nServiceConfig<GenericService> service = new ServiceConfig<GenericService>();\n// 弱类型接口名\nservice.setInterface(\"com.xxx.XxxService\");\n// if you need to set different version for service\nservice.setVersion(\"1.0.0\");\n// 指向一个通用服务实现\nservice.setRef(xxxService);\n\n// 暴露及注册服务\nservice.export();\n```\n\n----------------------------------------\n\nTITLE: Handling Response in ShenYu\nDESCRIPTION: The ResponsePlugin is the last plugin executed in the chain. It handles the gateway's response result using different MessageWriter implementations based on the invocation type.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\norg.apache.shenyu.plugin.response.ResponsePlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Dubbo Golang Blog Post\nDESCRIPTION: This YAML frontmatter defines metadata for a blog post or documentation page about Dubbo's Golang implementation. It specifies the title, link, weight for ordering, and a brief description of the content.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Golang\"\nlinkTitle: \"Golang\"\nweight: 30\ndescription: \"Dubbo Blog for Golang\"\n---\n```\n\n----------------------------------------\n\nTITLE: Project Structure Display\nDESCRIPTION: Directory structure of the generated Dubbo-go application template showing key files and folders\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/deploy.md#2025-04-08_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n.\n├── Makefile\n├── api\n│   └── api.proto\n├── build\n│   └── Dockerfile\n├── chart\n│   ├── app\n│   │   ├── Chart.yaml\n│   │   ├── templates\n│   │   │   ├── _helpers.tpl\n│   │   │   ├── deployment.yaml\n│   │   │   ├── service.yaml\n│   │   │   └── serviceaccount.yaml\n│   │   └── values.yaml\n│   └── nacos_env\n│       ├── Chart.yaml\n│       ├── templates\n│       │   ├── _helpers.tpl\n│       │   ├── deployment.yaml\n│       │   └── service.yaml\n│       └── values.yaml\n├── cmd\n│   └── app.go\n├── conf\n│   └── dubbogo.yaml\n├── go.mod\n├── go.sum\n└── pkg\n    └── service\n        └── service.go\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration Operations in Dubbo-go 3.0\nDESCRIPTION: A Go implementation demonstrating how to use Dubbo-go's Config API for dynamic configuration. It shows initializing a dynamic configuration instance, publishing configurations, reading configuration data, and subscribing to configuration changes using listeners.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/config-center-dynamic.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst configCenterNacosServerConfig = `# set in config center, group is 'dubbo', dataid is 'dubbo-go-samples-configcenter-nacos-server', namespace is default 'public'\ndubbo:\n  registries:\n    demoZK:\n      protocol: zookeeper\n      address: 127.0.0.1:2181\n  protocols:\n    triple:\n      name: tri\n      port: 20000\n  provider:\n    services:\n      GreeterProvider:\n        interface: com.apache.dubbo.sample.basic.IGreeter # must be compatible with grpc or dubbo-java`\n\ntype GreeterProvider struct {\n  api.GreeterProviderBase\n}\n\nfunc (s *GreeterProvider) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {\n  logger.Infof(\"Dubbo3 GreeterProvider get user name = %s\\n\", in.Name)\n  return &api.User{Name: \"Hello \" + in.Name, Id: \"12345\", Age: 21}, nil\n}\n\n// There is no need to export DUBBO_GO_CONFIG_PATH, as you are using config api to set config\nfunc main() {\n\t // 获取动态配置实例 dynamicConfig\n  dynamicConfig, err := config.NewConfigCenterConfigBuilder().\n    SetProtocol(\"nacos\").\n    SetAddress(\"127.0.0.1:8848\").\n    SetGroup(\"dubbo\").\n    Build().GetDynamicConfiguration()\n  if err != nil {\n    panic(err)\n  }\n  \n  // 使用 dynamicConfig 结构来发布配置\n  if err := dynamicConfig.PublishConfig(\"dubbo-go-samples-configcenter-nacos-server\", \"dubbo\", configCenterNacosServerConfig); err != nil {\n    panic(err)\n  }\n  \n   // 使用 dynamicConfig 结构来读取配置\n  data, err := dynamicConfig.GetRule(\"dubbo-go-samples-configcenter-nacos-server\", \tconfig_center.WithGroup(\"dubbo\"))\n  if err != nil{\n    panic(err)\n  }\n  logger.Infof(\"get config = %s\", data)\n  \n  \n  // 使用 dynamicConfig 结构, 通过自定义listener来订阅配置更新事件\n  l := &listener{}\n  dynamicConfig.AddListener(\"dubbo-go-samples-configcenter-nacos-server\", l)\n  \n  time.Sleep(time.Second * 10)\n  \n  config.SetProviderService(&GreeterProvider{})\n\n  // 以 API 的形式来启动框架\n  rootConfig := config.NewRootConfigBuilder().\n    SetConfigCenter(config.NewConfigCenterConfigBuilder().\n      SetProtocol(\"nacos\").SetAddress(\"127.0.0.1:8848\"). // 根据配置结构，设置配置中心\n      SetDataID(\"dubbo-go-samples-configcenter-nacos-server\"). // 设置配置ID\n      SetGroup(\"dubbo\").\n      Build()).\n  Build()\n\n  if err := rootConfig.Init(); err != nil { // 框架启动\n    panic(err)\n  }\n  select {}\n}\n\ntype listener struct {\n\t\n}\n\nfunc (l listener) Process(event *config_center.ConfigChangeEvent) {\n  logger.Infof(\"listener get config = %s\", event.Value)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface in Java\nDESCRIPTION: Defines a simple interface with a method that takes and returns a String, not using Protobuf serialization.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/migration/migration-triple.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface IWrapperGreeter {\n\n    //... \n    \n    /**\n     * 这是一个普通接口，没有使用 pb 序列化\n     */\n    String sayHello(String request);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Mapper in Dubbo\nDESCRIPTION: XML configuration to register the custom exception mapper with Dubbo REST protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"rest\" port=\"8888\" extension=\"xxx.MyValidationExceptionMapper\"/>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Dubbo Users Documentation\nDESCRIPTION: This YAML frontmatter defines the metadata for a documentation page about Dubbo users. It specifies the page type as 'advanced-docs', sets both the title and link title to 'Users', and assigns a navigation weight of 3.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/java-sdk/v2.x/introduction/users.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: advanced-docs\ntitle: \"Users\"\nlinkTitle: \"Users\"\nweight: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Dubbo Reference in XML\nDESCRIPTION: This XML snippet demonstrates how to configure a reference to an asynchronous Dubbo service in the consumer's Spring context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-new-async.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference id=\"asyncService\" timeout=\"10000\" interface=\"com.alibaba.dubbo.samples.async.api.AsyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Arthas for Java Application Diagnosis\nDESCRIPTION: Commands to download and start Arthas diagnostic tool, which shows the available Java processes and allows connecting to a specific application for debugging.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://arthas.aliyun.com/arthas-boot.jar\n$ java -jar arthas-boot.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Dump Export Path in Dubbo YAML\nDESCRIPTION: This snippet demonstrates configuring the export path for thread dumps in Dubbo using YAML. It sets the dump directory to /tmp in the application configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n  application:\n    name: dubbo-springboot-demo-provider\n    dump-directory: /tmp\n```\n\n----------------------------------------\n\nTITLE: Executing Dubbo-Go CLI Debug Command\nDESCRIPTION: Command line instruction for debugging Dubbo-Go service calls using defined JSON configurations for request and response objects.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/refer/use_dubbogo_cli.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./dubbo-go-cli -h=localhost -p=20001 -proto=dubbo -i=com.ikurento.user.UserProvider -method=GetUser -sendObj=\"./userCall.json\" -recvObj=\"./user.json\"\n```\n\n----------------------------------------\n\nTITLE: Protocol Interface Implementation - Java\nDESCRIPTION: Core Protocol interface defining the contract for RPC protocol extensions with methods for exposing and referencing remote services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface Protocol {\n    /**\n     * Expose remote service:<br>\n     * 1. The protocol, upon receiving requests, should record the request source address information: RpcContext.getContext().setRemoteAddress();<br>\n     * 2. export() must be idempotent, meaning exposing the same URL's Invoker twice is the same as exposing it once.<br>\n     * 3. The Invoker passed to export() is provided by the framework, and the protocol does not need to be concerned.<br>\n     * \n     * @param <T> Service type\n     * @param invoker Service execution body\n     * @return exporter Reference to exposed service for cancellation\n     * @throws RpcException Thrown when an error occurs in exposing the service, such as port occupied.\n     */\n    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;\n \n    /**\n     * Reference a remote service:<br>\n     * 1. When the user calls invoke() on the Invoker object returned by refer(), the protocol should execute the invoke() method of the Invoker object passed in by remote export() with the same URL.<br>\n     * 2. The Invoker returned by refer() is implemented by the protocol, typically sending the remote request within this Invoker.<br>\n     * 3. When check=false is set in the URL, connection failures should not throw exceptions but should automatically recover internally.<br>\n     * \n     * @param <T> Service type\n     * @param type Service type\n     * @param url Remote service's URL\n     * @return invoker Local proxy of the service\n     * @throws RpcException Thrown when connection to the service provider fails.\n     */\n    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;\n \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Admin Documentation in Apache Dubbo\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about the Admin component in Apache Dubbo. It specifies build instructions, description, manual link reference, title, document type, and weight for page ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/download/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Admin\nmanualLinkRelref: ./#admin\ntitle: Admin\ntype: docs\nweight: 60\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Community Updates Page\nDESCRIPTION: This snippet defines the frontmatter metadata for a Markdown page about community updates. It specifies the page title, link title, and weight for sorting within the site structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Community Updates\"\nlinkTitle: \"Community Updates\"\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Direct Connection via JVM Parameters\nDESCRIPTION: Demonstrates how to use JVM -D parameters to specify direct service connections. This method has the highest priority and is supported in Dubbo versions 1.0.15 and above.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/more/explicit-target.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Services with Spring XML in Dubbo\nDESCRIPTION: Basic Spring XML configuration for local service definition and consumption. This shows the standard pattern of defining a service bean and injecting it into a consumer action bean.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/preface/usage.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"xxxService\" class=\"com.xxx.XxxServiceImpl\" />\n<bean id=\"xxxAction\" class=\"com.xxx.XxxAction\">\n    <property name=\"xxxService\" ref=\"xxxService\" />\n</bean>\n```\n\n----------------------------------------\n\nTITLE: Generating Demo Service Provider with Dubbo Maven Plugin\nDESCRIPTION: This command generates a demo service provider application using Dubbo's Maven plugin. It specifies the application name, package, service interfaces, and version. This is useful for creating a template for a Dubbo service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/maven.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Admin Documentation in Apache Dubbo\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about the Admin component in Apache Dubbo. It specifies build settings, description, manual link reference, title, document type, and weight for ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/download/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n    render: link\ndescription: Admin\nmanualLinkRelref: ./#admin\ntitle: Admin\ntype: docs\nweight: 60\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extension Classes with Cache Support\nDESCRIPTION: Gets extension classes from cache or loads them if not present, using double-checked locking pattern for thread safety.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/dubbo-spi.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<String, Class<?>> getExtensionClasses() {\n    Map<String, Class<?>> classes = cachedClasses.get();\n    if (classes == null) {\n        synchronized (cachedClasses) {\n            classes = cachedClasses.get();\n            if (classes == null) {\n                classes = loadExtensionClasses();\n                cachedClasses.set(classes);\n            }\n        }\n    }\n    return classes;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Stylesheets for API Reference in Markdown\nDESCRIPTION: This snippet lists the stylesheet files used specifically for the API reference section of the Apache Dubbo website. It includes Bootstrap, Font Awesome, and a custom API reference style sheet.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/static/css/README.md#2025-04-08_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- bootstrap-4.3.1.min.css\n- fontawesome-4.7.0.min.css\n- style_apiref.css\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Dubbo-Go Client\nDESCRIPTION: YAML configuration for logging in a Dubbo-Go client application. It defines log levels, encoding formats, and output destinations to provide detailed debugging information during development.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-1.5/configuration/client.md#2025-04-08_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlevel: \"debug\"\ndevelopment: true\ndisableCaller: false\ndisableStacktrace: false\nsampling:\nencoding: \"console\"\n\n# encoder\nencoderConfig:\n  messageKey: \"message\"\n  levelKey: \"level\"\n  timeKey: \"time\"\n  nameKey: \"logger\"\n  callerKey: \"caller\"\n  stacktraceKey: \"stacktrace\"\n  lineEnding: \"\"\n  levelEncoder: \"capital\"\n  timeEncoder: \"iso8601\"\n  durationEncoder: \"seconds\"\n  callerEncoder: \"short\"\n  nameEncoder: \"\"\n\noutputPaths:\n  - \"stderr\"\nerrorOutputPaths:\n  - \"stderr\"\ninitialFields:\n```\n\n----------------------------------------\n\nTITLE: Building Dubbo Source JAR Package\nDESCRIPTION: Maven command to build a source JAR package of Dubbo for debugging purposes, skipping tests during the build.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/build.md#2025-04-08_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmvn clean source:jar install -Dmaven.test.skip\n```\n\n----------------------------------------\n\nTITLE: Implementing RoundRobinLoadBalance in Dubbo 2.6.4\nDESCRIPTION: The initial implementation of weighted round-robin load balancing in Dubbo 2.6.4. It distributes requests based on server weights by decrementing weight counters, but can have performance issues when maxWeight is large, resulting in O(mod) time complexity.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/loadbalance.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = \n        new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        // key = 全限定类名 + \".\" + 方法名，比如 com.xxx.DemoService.sayHello\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size();\n        // 最大权重\n        int maxWeight = 0;\n        // 最小权重\n        int minWeight = Integer.MAX_VALUE;\n        final LinkedHashMap<Invoker<T>, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<Invoker<T>, IntegerWrapper>();\n        // 权重总和\n        int weightSum = 0;\n\n        // 下面这个循环主要用于查找最大和最小权重，计算权重总和等\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            // 获取最大和最小权重\n            maxWeight = Math.max(maxWeight, weight);\n            minWeight = Math.min(minWeight, weight);\n            if (weight > 0) {\n                // 将 weight 封装到 IntegerWrapper 中\n                invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight));\n                // 累加权重\n                weightSum += weight;\n            }\n        }\n\n        // 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。\n        // 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道\n        // AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，\n        // 大家如果感兴趣，可以自行分析\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n\n        // 获取当前的调用编号\n        int currentSequence = sequence.getAndIncrement();\n        // 如果最小权重小于最大权重，表明服务提供者之间的权重是不相等的\n        if (maxWeight > 0 && minWeight < maxWeight) {\n            // 使用调用编号对权重总和进行取余操作\n            int mod = currentSequence % weightSum;\n            // 进行 maxWeight 次遍历\n            for (int i = 0; i < maxWeight; i++) {\n                // 遍历 invokerToWeightMap\n                for (Map.Entry<Invoker<T>, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n\t\t\t\t\t// 获取 Invoker\n                    final Invoker<T> k = each.getKey();\n                    // 获取权重包装类 IntegerWrapper\n                    final IntegerWrapper v = each.getValue();\n                    \n                    // 如果 mod = 0，且权重大于0，此时返回相应的 Invoker\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    \n                    // mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        \n        // 服务提供者之间的权重相等，此时通过轮询选择 Invoker\n        return invokers.get(currentSequence % length);\n    }\n\n    // IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。\n    private static final class IntegerWrapper {\n        private int value;\n\n        public void decrement() {\n            this.value--;\n        }\n        \n        // 省略部分代码\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Reference in Dubbo (Java)\nDESCRIPTION: The getObject and get methods of ReferenceBean, which serve as entry points for service reference. These methods check if the reference has been initialized and call the init method if necessary.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic Object getObject() throws Exception {\n    return get();\n}\n\npublic synchronized T get() {\n    if (destroyed) {\n        throw new IllegalStateException(\"Already destroyed!\");\n    }\n    // 检测 ref 是否为空，为空则通过 init 方法创建\n    if (ref == null) {\n        // init 方法主要用于处理配置，以及调用 createProxy 生成代理类\n        init();\n    }\n    return ref;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Admin Console Backend\nDESCRIPTION: Steps to build and run the Dubbo admin console backend server using Maven and Java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/admin/ops/introduction.md#2025-04-08_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd dubbo-admin-server\nmvn clean package \ncd target\njava -jar dubbo-admin-server-0.1.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Provider Proxy in XML\nDESCRIPTION: This XML snippet demonstrates how to configure the Dubbo provider to use JDK proxy instead of the default Javassist. When this configuration is used, the Javassist dependency is not required.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/dependencies.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider proxy=\"jdk\" />\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Error Response JSON\nDESCRIPTION: Example JSON response showing a pod deployment failure in Kubernetes, including namespace, pod name, uid and error details.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-k8s.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Pod\",\n  \"namespace\": \"lzumwsrddf831iwarhehd14zh2-default\",\n  \"name\": \"dubbo-k8s-demo-610694273-jq238\",\n  \"uid\": \"12892e67-8bc8-11e8-b96a-00163e02c37b\",\n  \"apiVersion\": \"v1\",\n  \"resourceVersion\": \"850282769\"\n}, \"reason\": \"FailedSync\", \"message\": \"Error syncing pod\"\n```\n\n----------------------------------------\n\nTITLE: Abstract Dubbo Plugin Implementation\nDESCRIPTION: Common Dubbo plugin functionality implementation for processing Dubbo service invocations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.dubbo.common.AbstractDubboPlugin\n```\n\n----------------------------------------\n\nTITLE: Listing Service Status via QoS\nDESCRIPTION: This snippet demonstrates using the 'ls' command to check the status of services in Dubbo QoS.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-qos.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndubbo>ls\nAs Provider side:\n+------------------------------------------+---+\n|           Provider Service Name          |PUB|\n+------------------------------------------+---+\n|org.apache.dubbo.demo.provider.DemoService| Y |\n+------------------------------------------+---+\nAs Consumer side:\n+---------------------+---+\n|Consumer Service Name|NUM|\n+---------------------+---+\n```\n\n----------------------------------------\n\nTITLE: Example Software Grant Agreement for Apache Dubbo Donation\nDESCRIPTION: A sample filled-out Software Grant Agreement (SGA) form showing how to properly complete the license agreement when donating code to Apache Dubbo. The example includes annotations indicating where and how to add organization and signatory information.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/contribution-guidelines/contributor/software-donation-guide_dev.md#2025-04-08_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLicense Agreement\n\n\n    This License Agreement is entered into as of the _12th_ day of\n___April____, __2018__ by ___ABC Software Co., Ltd.____ (\"Licensor\"),\nin favor of The Apache Software Foundation, a Delaware nonstock\nmembership corporation (the \"Foundation\").\n\n    WHEREAS, Licensor owns or has sufficient rights to contribute the\nsoftware source code and other related intellectual property as\nitemized on Exhibit A (\"Software\") under the terms of this agreement\nto the Foundation for use within Foundation software development\nprojects (\"Projects\").\n\n    NOW, THEREFORE, FOR GOOD AND VALUABLE CONSIDERATION, the receipt\nand legal sufficiency of which are hereby acknowledged, the parties\nhereto, intending to be legally bound, agree as follows:\n\n1. Subject to the terms and conditions of this License, Licensor\nhereby grants to the Foundation:\n\n  a) a non-exclusive, worldwide, royalty-free, irrevocable\n     copyright license to reproduce, prepare derivative works of,\n     publicly display, publicly perform, distribute and sublicense,\n     internally and externally, the Software and such derivative\n     works, in source code and object code form; and,\n\n  b) a non-exclusive, worldwide, royalty-free, irrevocable\n     patent license under Licensed Patents to make, use, sell,\n     offer to sell, import and otherwise transfer the Software\n     in source code and object code form. \"Licensed Patents\" mean\n     patent claims owned by Licensor which are necessarily\n     infringed by the use or sale of the Software alone.\n\n2. Licensor represents that, to Licensor's knowledge, Licensor is\nlegally entitled to grant the above license. Licensor agrees to notify\nthe Foundation of any facts or circumstances of which Licensor becomes\naware and which makes or would make Licensor's representations in this\nLicense Agreement inaccurate in any respect.\n\n3. This Software is provided AS-IS, WITHOUT WARRANTIES OR CONDITIONS\nOF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,\nANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY\nOR FITNESS FOR A PARTICULAR PURPOSE.  NEITHER THE LICENSOR NOR ITS\nSUPPLIERS WILL BE LIABLE TO THE FOUNDATION OR ITS LICENSEES FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\nTHE USE OR DISTRIBUTION OF THE WORK OR THE EXERCISE OF ANY RIGHTS\nGRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nThis License Agreement is the entire agreement of the parties\nwith respect to its subject matter, and may only be amended by a\nwriting signed by each party. This License Agreement may be\nexecuted in one or more counterparts, each of which shall be\nconsidered an original.\n\n    IN WITNESS WHEREOF, Licensor has executed this License Agreement\nas of the date first written above.\n\n\n    LICENSOR:\n\n\n    Signed By: _____________________________________   <--- Your boss's sign here\n\n    Print Name: _____Lei Li_________________________   <--- Your boss's name here\n\n    Title: ____Director_____________________________   <--- Your boss's title here\n\n    Representing: ____ABC Software Co., Ltd. _______ \n\n    ________________________________________________\n\n    Contact Name: ____Lei Li________________________   <--- Your boss's name here\n\n    Contact Email: ____lilei@abc.com________________   <--- Your boss's email here\n\nExhibit A\n\nList of software and other intellectual property covered by this agreement:\n\n* Github address where your code is hosted\n* Pull request link\n```\n\n----------------------------------------\n\nTITLE: Compiling Dubboctl from Source (Shell)\nDESCRIPTION: Instructions for downloading Dubbo Admin source code, compiling Dubboctl, and adding it to the system path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/architecture.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/apache/dubbo-admin.git\ncd dubbo-admin/cmd/dubboctl\ngo build -o dubboctl .\n\nln -s dubbo-admin/cmd/dubboctl/dubboctl /usr/local/bin/dubboctl\n```\n\n----------------------------------------\n\nTITLE: Defining UserService Interface in Java\nDESCRIPTION: Interface definition for UserService showing method signature for getUser operation\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/control-plane/test.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n//org.apache.dubbo.demo.api.UserService\nResult getUser(String name, UserInfoDO userInfoDO);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo-go Documentation Page Metadata in YAML\nDESCRIPTION: This YAML frontmatter defines the metadata for a Dubbo-go quick start guide documentation page. It specifies the page title, description, aliases for redirects, link title, content type, and weight for ordering in the documentation structure.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/quickstart/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\naliases:\n  - /en/docs3-v2/golang-sdk/quickstart/\n  - /en/docs3-v2/golang-sdk/quickstart/\n  - /en/overview/quickstart/go/\n  - /en/overview/quickstart/go/\ndescription: Dubbo-go Quick Start\nlinkTitle: Quick Start\ntitle: Quick Start\ntype: docs\nweight: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Components with Helm\nDESCRIPTION: Commands to install Istio base CRDs and istiod components using Helm package manager. This includes adding the Istio helm repository, creating the istio-system namespace, and installing the base and istiod components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/deploy2/istio.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm repo add istio https://istio-release.storage.googleapis.com/charts\n$ kubectl create namespace istio-system\n$ helm install istio-base istio/base -n istio-system\n$ helm install istiod istio/istiod --namespace istio-system\n```\n\n----------------------------------------\n\nTITLE: Starting Java Client for Dubbo Intercommunication\nDESCRIPTION: This command runs the Java client implementation, which will make a call to the previously started Go server. It demonstrates the Java to Go intercommunication using the Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/call_java_protocol_triple_protobuf.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./java/java-client/run.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Etcd Dependency for Dubbo Metadata Center\nDESCRIPTION: Maven dependency configuration required for using etcd as a metadata center in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/others.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.dubbo.extensions</groupId>\n    <artifactId>dubbo-metadata-report-etcd</artifactId>\n    <version>3.3.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Querying Interface-Application Mapping in Zookeeper\nDESCRIPTION: Example of retrieving the interface-application mapping from Zookeeper using the zkCli.sh tool. The mapping is stored under the /dubbo/mapping/{interface name} path.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/overview.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./zkCli.sh\n$ get /dubbo/mapping/org.apache.dubbo.demo.DemoService\n$ demo-provider,two-demo-provider,dubbo-demo-annotation-provider\n```\n\n----------------------------------------\n\nTITLE: Provider Service Operation Metadata JSON Structure\nDESCRIPTION: JSON structure of the service operation metadata reported by providers, including parameters, canonical name, code source, methods, and types.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/overview.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"parameters\": {\n  \"side\": \"provider\",\n  \"methods\": \"sayHello\",\n  \"dubbo\": \"2.0.2\",\n  \"threads\": \"100\",\n  \"interface\": \"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\",\n  \"threadpool\": \"fixed\",\n  \"version\": \"1.1.1\",\n  \"generic\": \"false\",\n  \"revision\": \"1.1.1\",\n  \"valid\": \"true\",\n  \"application\": \"metadatareport-configcenter-provider\",\n  \"default.timeout\": \"5000\",\n  \"group\": \"d-test\",\n  \"anyhost\": \"true\"\n },\n \"canonicalName\": \"org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService\",\n \"codeSource\": \"file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/\",\n \"methods\": [{\n  \"name\": \"sayHello\",\n  \"parameterTypes\": [\"java.lang.String\"],\n  \"returnType\": \"java.lang.String\"\n }],\n \"types\": [{\n  \"type\": \"java.lang.String\",\n  \"properties\": {\n   \"value\": {\n    \"type\": \"char[]\"\n   },\n   \"hash\": {\n    \"type\": \"int\"\n   }\n  }\n }, {\n  \"type\": \"int\"\n }, {\n  \"type\": \"char\"\n }]\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Consumer Metadata in Zookeeper using zkCli\nDESCRIPTION: Shell command example showing how to view service consumer metadata stored in Zookeeper using the zkCli tool.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/metadata-center/zookeeper.md#2025-04-08_snippet_5\n\nLANGUAGE: shell script\nCODE:\n```\n[zk: localhost:2181(CONNECTED) 10] get /dubbo/metadata/org.apache.dubbo.demo.DemoService/consumer/demo-consumer\n{\"side\":\"consumer\",\"interface\":\"org.apache.dubbo.demo.DemoService\",\"metadata-type\":\"remote\",\"application\":\"demo-consumer\",\"dubbo\":\"2.0.2\",\"release\":\"\",\"sticky\":\"false\",\"check\":\"false\",\"methods\":\"sayHello,sayHelloAsync\"}\ncZxid = 0x25aa24\nctime = Mon Jun 28 21:57:43 CST 2021\nmZxid = 0x25aa24\nmtime = Mon Jun 28 21:57:43 CST 2021\npZxid = 0x25aa24\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 219\nnumChildren = 0\n```\n\n----------------------------------------\n\nTITLE: Using getRouterSnapshot Command for Router Status Analysis in Dubbo\nDESCRIPTION: The getRouterSnapshot command retrieves the grouping status of each layer of the router, supporting only StateRouter. It takes a serviceName parameter which can be used with pattern matching.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/qos/introduction/router-snapshot.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndubbo>getRouterSnapshot com.dubbo.dubbointegration.BackendService\ncom.dubbo.dubbointegration.BackendService@2c2e824a\n[ All Invokers:2 ] [ Valid Invokers: 2 ]\n\nMockInvokersSelector  Total: 2\n[ Mocked -> Empty (Total: 0) ]\n[ Normal -> 172.18.111.187:20880,172.18.111.183:20880 (Total: 2) ]\n            ↓ \nStandardMeshRuleRouter not support\n            ↓ \nTagStateRouter not support\n            ↓ \nServiceStateRouter not support\n            ↓ \nAppStateRouter not support\n            ↓ \nTailStateRouter End\n\n\ndubbo>\n```\n\n----------------------------------------\n\nTITLE: Adding Avro Dependencies to Maven Project\nDESCRIPTION: Maven dependencies required for using Avro serialization in Dubbo, including both the Dubbo Avro serialization extension and Apache Avro core library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/avro.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-avro</artifactId>\n      <version>3.3.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.avro</groupId>\n        <artifactId>avro</artifactId>\n        <version>1.11.1</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Adding FST Serialization Dependencies in Maven\nDESCRIPTION: Maven dependencies required to use FST serialization in Dubbo applications. Includes both the Dubbo FST extension and the core FST library.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/dubbo/fst.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n      <groupId>org.apache.dubbo.extensions</groupId>\n      <artifactId>dubbo-serialization-fst</artifactId>\n      <version>3.3.0</version>\n    </dependency>\n    <dependency>\n        <groupId>de.ruedigermoeller</groupId>\n        <artifactId>fst</artifactId>\n        <version>3.0.3</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Triple Protocol in Spring Boot YAML\nDESCRIPTION: YAML configuration for enabling the Triple protocol in a Spring Boot application. Specifies 'tri' as the protocol name and 'hessian' as the underlying serialization method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/triple/wrapper.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# application.yml (Spring Boot)\ndubbo:\n protocol:\n   name: tri\n   serialization: hessian\n```\n\n----------------------------------------\n\nTITLE: Higress McpBridge Configuration\nDESCRIPTION: McpBridge resource configuration for connecting Higress with Nacos service registry.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.higress.io/v1\nkind: McpBridge\nmetadata:\n  name: nacos-service-resource\n  namespace: higress-system\nspec:\n  registries:\n  - domain: nacos-server.default.svc.cluster.local\n    nacosGroups:\n    - DEFAULT_GROUP\n    name: nacos-service-resource\n    port: 8848\n    type: nacos2\n```\n\n----------------------------------------\n\nTITLE: Enabling Foreign IP Access for Dubbo QoS in Kubernetes\nDESCRIPTION: This properties configuration enables the Dubbo QoS (Quality of Service) module to accept connections from non-localhost IPs, which is necessary for Kubernetes health check probes to function properly when checking Dubbo application status.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_13\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.application.qosAcceptForeignIp=true\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Provider to Kubernetes\nDESCRIPTION: Commands to deploy the Dubbo provider service and deployment to Kubernetes.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Deploy Service\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/provider/Service.yml\n\n# Deploy Deployment\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/3-extensions/registry/dubbo-samples-mesh-k8s/deploy/provider/Deployment.yml\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Mock Admin Dependency in Maven\nDESCRIPTION: XML snippet for adding the Dubbo Mock Admin dependency to a Maven project. This is required for enabling service mocking functionality in consumer applications.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/observability/console.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.dubbo.extensions</groupId>\n  <artifactId>dubbo-mock-admin</artifactId>\n  <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Admin Security Settings in Java Properties File\nDESCRIPTION: This snippet shows how to replace the default username, password, and JWT Secret Token in the application.properties file for Java-based deployments of Dubbo Admin.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/notices/admin.md#2025-04-08_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nadmin.root.user.name=root\nadmin.root.user.password=root\nadmin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77\n```\n\n----------------------------------------\n\nTITLE: Initializing Dubbolib in Erlang Project\nDESCRIPTION: This snippet shows how to initialize the dubbolib in an Erlang project. It's a necessary step to set up the Dubbo environment before making calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/erlang-sdk/quick-start.md#2025-04-08_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\ndubboerl:init().\n```\n\n----------------------------------------\n\nTITLE: Calculating maxQPS in AutoConcurrencyLimier\nDESCRIPTION: Formula for determining the maximum QPS within a time window used by the AutoConcurrencyLimier algorithm. This metric is essential for calculating concurrency limits.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/proposals/heuristic-flow-control.md#2025-04-08_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmaxQPS = max(qps, maxQPS * (1 - emaFactor) + qps * emaFactor)\n```\n\n----------------------------------------\n\nTITLE: Application-Level Configuration Example in Dubbo\nDESCRIPTION: An example of application-level configuration in Dubbo that enables accesslog for all services provided under the shop-detail application. This configuration will apply to all instances deployed under shop-detail.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/traffic/configuration-rule.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigVersion: v3.0\nscope: application\nkey: shop-detail\nconfigs:\n  - side: provider\n    parameters:\n      accesslog: 'true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Least Active Load Balancing in Consumer Side XML\nDESCRIPTION: XML configuration to set the loadbalance attribute to leastactive for a service reference, which distributes requests to the provider with the least number of active connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" loadbalance=\"leastactive\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Group for Nacos Registry\nDESCRIPTION: Sets a custom group for the Nacos registry in application.yml.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/service-discovery/nacos.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n registry:\n   address: nacos://localhost:8848\n   register-mode: instance\n   group: dubbo\n```\n\n----------------------------------------\n\nTITLE: Dubbo Application Start Failure\nDESCRIPTION: Basic error message indicating Dubbo application failed to start\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/troubleshoot/start-failed.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[DUBBO] Dubbo Application[1.1](first-dubbo-consumer) start failure\n```\n\n----------------------------------------\n\nTITLE: Importing required Dubbo Go packages in server application\nDESCRIPTION: Imports necessary Dubbo Go packages for the server-side application, including config, registry, protocol, and other components.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\thessian \"github.com/apache/dubbo-go-hessian2\"\n\t\"github.com/apache/dubbo-go/config\"\n\t_ \"github.com/apache/dubbo-go/registry/protocol\"\n\t_ \"github.com/apache/dubbo-go/common/proxy/proxy_factory\"\n\t_ \"github.com/apache/dubbo-go/filter/impl\"\n\t_ \"github.com/apache/dubbo-go/cluster/cluster_impl\"\n\t_ \"github.com/apache/dubbo-go/cluster/loadbalance\"\n\t_ \"github.com/apache/dubbo-go/registry/zookeeper\"\n\n\t_ \"github.com/apache/dubbo-go/protocol/dubbo\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Component in Go\nDESCRIPTION: Shows how to implement a component by creating a struct that embeds the Implements[T] type to indicate it implements a particular component interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/google-service-weaver-paper-2023.md#2025-04-08_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype hello struct {\n    weaver.Implements[Hello]\n}\n```\n\n----------------------------------------\n\nTITLE: Modified UserServiceImpl with Debug Logging\nDESCRIPTION: Updated version of the UserServiceImpl that adds System.out.println debugging to log the User object before returning it. This code is used with the redefine command to update running code.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/dubbo-meet-arthas.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\tpublic User findUser(int id) {\n\t\tif (id < 1) {\n\t\t\tthrow new IllegalArgumentException(\"user id < 1, id: \" + id);\n\t\t}\n\t\tfor (User user : users) {\n\t\t\tif (user.getId() == id) {\n\t\t\t\tSystem.out.println(user);\n\t\t\t\treturn user;\n\t\t\t}\n\t\t}\n\t\tthrow new RuntimeException(\"Can not find user, id: \" + id);\n\t}\n```\n\n----------------------------------------\n\nTITLE: Dubbo创建临时节点方法 - Java\nDESCRIPTION: CuratorZookeeperClient类的createEphemeral方法，用于在ZooKeeper中创建临时节点。该方法捕获NodeExistsException异常但不做处理，这导致了当ZooKeeper会话过期但节点尚未删除时可能出现的问题。这是导致provider不能恢复注册的根本原因。\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/guazi.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    public void createEphemeral(String path) {\n        try {\n            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);\n        } catch (NodeExistsException e) {\n        } catch (Exception e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Data in Zookeeper\nDESCRIPTION: Command to get the stored data value from the '/hello-zone' node, displaying the stored 'world' string.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-zk.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nget /hello-zone\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet Bridge Server in Dubbo HTTP Protocol\nDESCRIPTION: Configuration for using Servlet Bridge as the HTTP server implementation (recommended approach).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/http.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol ... server=\"servlet\" />\n```\n\n----------------------------------------\n\nTITLE: Dubbo Admin Configuration YAML\nDESCRIPTION: Configuration YAML for controlling Dubbo Admin behavior, including environment settings, store configuration, server port, registry, and external service integrations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Environment type. Available values are: \"kubernetes\" or \"universal\"\nenvironment: universal # ENV: DUBBO_ENVIRONMENT\n# Mode in which Dubbo CP is running. Available values are: \"standalone\", \"global\", \"zone\"\nmode: standalone # ENV: DUBBO_MODE\n\n# Resource Store configuration\nstore:\n  # Type of Store used in the Control Plane. Available values are: \"kubernetes\", \"postgres\" or \"memory\"\n  type: memory # ENV: DUBBO_STORE_TYPE\n\n  # Kubernetes Store configuration (used when store.type=kubernetes)\n  kubernetes:\n    # Namespace where Control Plane is installed to.\n    systemNamespace: dubbo-system # ENV: DUBBO_STORE_KUBERNETES_SYSTEM_NAMESPACE\n\n  # Postgres Store configuration (used when store.type=postgres)\n  mysql:\n    # Host of the Postgres DB\n    host: 127.0.0.1 # ENV: DUBBO_STORE_POSTGRES_HOST\n    # Port of the Postgres DB\n    port: 15432 # ENV: DUBBO_STORE_POSTGRES_PORT\n    # User of the Postgres DB\n    user: dubbo # ENV: DUBBO_STORE_POSTGRES_USER\n    # Password of the Postgres DB\n    password: dubbo # ENV: DUBBO_STORE_POSTGRES_PASSWORD\n    # Database name of the Postgres DB\n    dbName: dubbo # ENV: DUBBO_STORE_POSTGRES_DB_NAME\n    # Connection Timeout to the DB in seconds\n    connectionTimeout: 5 # ENV: DUBBO_STORE_POSTGRES_CONNECTION_TIMEOUT\n    # Maximum number of open connections to the database\n    # `0` value means number of open connections is unlimited\n    maxOpenConnections: 50 # ENV: DUBBO_STORE_POSTGRES_MAX_OPEN_CONNECTIONS\n    # Maximum number of connections in the idle connection pool\n    # <0 value means no idle connections and 0 means default max idle connections\n    maxIdleConnections: 50  # ENV: DUBBO_STORE_POSTGRES_MAX_IDLE_CONNECTIONS\n    # TLS settings\n    tls:\n      # Mode of TLS connection. Available values are: \"disable\", \"verifyNone\", \"verifyCa\", \"verifyFull\"\n      mode: disable # ENV: DUBBO_STORE_POSTGRES_TLS_MODE\n      # Path to TLS Certificate of the client. Used in verifyCa and verifyFull modes\n      certPath: # ENV: DUBBO_STORE_POSTGRES_TLS_CERT_PATH\n      # Path to TLS Key of the client. Used in verifyCa and verifyFull modes\n      keyPath: # ENV: DUBBO_STORE_POSTGRES_TLS_KEY_PATH\n      # Path to the root certificate. Used in verifyCa and verifyFull modes.\n      caPath: # ENV: DUBBO_STORE_POSTGRES_TLS_ROOT_CERT_PATH\n    # MinReconnectInterval controls the duration to wait before trying to\n    # re-establish the database connection after connection loss. After each\n    # consecutive failure this interval is doubled, until MaxReconnectInterval\n    # is reached. Successfully completing the connection establishment procedure\n    # resets the interval back to MinReconnectInterval.\n    minReconnectInterval: \"10s\" # ENV: DUBBO_STORE_POSTGRES_MIN_RECONNECT_INTERVAL\n    # MaxReconnectInterval controls the maximum possible duration to wait before trying\n    # to re-establish the database connection after connection loss.\n    maxReconnectInterval: \"60s\" # ENV: DUBBO_STORE_POSTGRES_MAX_RECONNECT_INTERVAL\nserver:\n\tport: 38080\nregistry:\n  address: xxx\nmetadata-center:\n  address: xxx\nconfig-center:\n\taddress: xxx\nexternal-services:\n  prometheus:\n      # Prometheus service name is \"metrics\" and is in the \"telemetry\" namespace\n\t\t  # http://prometheus.<dubbo_namespace_name>:9090\n      url: \"http://metrics.telemetry:9090/\"\n  tracing:\n    # Enabled by default. Kiali will anyway fallback to disabled if\n    # Jaeger is unreachable.\n    enabled: true\n    # Jaeger service name is \"tracing\" and is in the \"telemetry\" namespace.\n    # Make sure the URL you provide corresponds to the non-GRPC enabled endpoint\n    # if you set \"use_grpc\" to false.\n    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'\n    use_grpc: true\n    # Public facing URL of Jaeger\n    url: 'http://my-jaeger-host/jaeger'\n\tgrafana:\n      enabled: true\n      # Grafana service name is \"grafana\" and is in the \"telemetry\" namespace.\n      in_cluster_url: 'http://grafana.telemetry:3000/'\n      # Public facing URL of Grafana\n      url: 'http://my-ingress-host/grafana'\n\n# 更多配置\n```\n\n----------------------------------------\n\nTITLE: Retrieving Serialization Status via HTTP in Dubbo (Bash)\nDESCRIPTION: Demonstrates how to use curl to retrieve the serialization check status in JSON format from Dubbo's QoS HTTP endpoint. This method is useful for automated monitoring.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/serialization/serialization.md#2025-04-08_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n> curl http://127.0.0.1:22222/serializeCheckStatus\n{\"checkStatus\":\"WARN\",\"allowedPrefix\":[...],\"checkSerializable\":true,\"disAllowedPrefix\":[...]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Publishing in Dubbo\nDESCRIPTION: XML configuration for publishing a Dubbo service using multiple protocols simultaneously (dubbo, grpc, and rest) to enable diverse client connectivity options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/proposals/protocol-http.md#2025-04-08_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"org.apache.dubbo.samples.DemoService\" protocol=\"dubbo, grpc,rest\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Wrapper Messages\nDESCRIPTION: Defines Protobuf messages used to wrap non-Protobuf requests and responses for compatibility with Triple protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/migration/migration-triple.md#2025-04-08_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage org.apache.dubbo.triple;\n\nmessage TripleRequestWrapper {\n    // hessian4\n    // json\n    string serializeType = 1;\n    repeated bytes args = 2;\n    repeated string argTypes = 3;\n}\n\nmessage TripleResponseWrapper {\n    string serializeType = 1;\n    bytes data = 2;\n    string type = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request to Dubbo Service via Gateway\nDESCRIPTION: Shell command using cURL to test the HTTP-to-Dubbo gateway routing by calling the sayHello method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \"localhost/org.apache.dubbo.samples.gateway.api.DemoService/sayHello?name=HigressTriple\"\n\n\"Hello HigressTriple\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Nacos Server Package\nDESCRIPTION: Commands to extract the downloaded Nacos server package and navigate to the bin directory. Supports both zip and tar formats.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/nacos.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunzip nacos-server-$version.zip\ncd nacos/bin\n#tar -xvf nacos-server-$version.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Adding JAXB XML Root Element Annotation to User Class in Java\nDESCRIPTION: Demonstrates how to add the @XmlRootElement annotation to a class for proper XML serialization using JAXB in JAX-RS implementations. This annotation is required for XML data binding to work correctly.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/protocols/rest.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@XmlRootElement\npublic class User implements Serializable {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Point-to-Point Connection to Memcached\nDESCRIPTION: This XML configuration demonstrates how to connect directly to a Memcached server using Dubbo by specifying the URL attribute with the server address and port.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/others/memcached.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference id=\"cache\" interface=\"java.util.Map\" url=\"memcached://10.20.153.10:11211\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dubbo Service Provider\nDESCRIPTION: Java class implementing the Dubbo service interface with the @DubboService annotation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/dubbo.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String sayHello(String name) {\n        return \"Hello \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dubbo 2.6.x and Earlier Version Comparison Table in Markdown\nDESCRIPTION: This markdown table compares Dubbo versions 2.6.x and earlier, providing information on important features and upgrade recommendations for each version range.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/new-features-in-a-glance.md#2025-04-08_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|      | 版本         | 重要功能                | 升级建议                               |\n| ---- | ------------ | ----------------------- | -------------------------------------- |\n| 1    | 2.6.x        | bugfix                  | 建议持续升级最新版本，所有版本生产可用 |\n| 2    | 2.5.x        | 停止维护 |   建议升级最新 2.6.x 版本    |\n| 3    | 2.4.x 及之前 | 停止维护      | 建议升级最新 2.6.x 版本    |\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Dubbo Provider in Java\nDESCRIPTION: This code snippet demonstrates how to set up TLS configuration for a Dubbo Provider. It includes setting up SSL certificates and enabling SSL for the protocol configuration. It also mentions the option for mutual TLS authentication.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/security/tls.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSslConfig sslConfig = new SslConfig();\nsslConfig.setServerKeyCertChainPath(\"path to cert\");\nsslConfig.setServerPrivateKeyPath(args[1]);\n// 如果开启双向 cert 认证\nif (mutualTls) {\n  sslConfig.setServerTrustCertCollectionPath(args[2]);\n}\n\nProtocolConfig protocolConfig = new ProtocolConfig(\"dubbo/grpc\");\nprotocolConfig.setSslEnabled(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Dubboctl to Executable Path\nDESCRIPTION: Creates a symbolic link to make the dubboctl command accessible from anywhere in the system.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/setup/install.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nln -s dubbo-admin-0.1.0/bin/dubboctl /usr/local/bin/dubboctl\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Client for Dubbo Service\nDESCRIPTION: This Go struct defines the client-side implementation of the Greeter service, with a SayHello method that matches the Java interface. It's generated by protoc-gen-go-triple based on the Protobuf definition.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/languages/golang/dubbo-go-3.0/samples/go_java_interactive.md#2025-04-08_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype GreeterClientImpl struct {\n\t// Sends a greeting\n\tSayHello func(ctx context.Context, in *HelloRequest) (*User, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metrics Aggregation Configuration for Apache Dubbo in Java\nDESCRIPTION: This code snippet defines the AggregationConfig class within Apache Dubbo's metrics configuration. It includes properties for enabling and configuring various metrics aggregations such as QPS, request, and response time.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/properties.md#2025-04-08_snippet_14\n\nLANGUAGE: java\nCODE:\n```\norg.apache.dubbo.config.nested.AggregationConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Readiness Probe in Java\nDESCRIPTION: Example of implementing a custom ReadinessProbe interface in Java. The check() method should be implemented to define the readiness logic.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/readiness.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.xxx;\n\npublic class XxxReadinessProbe implements ReadinessProbe {\n    \n    public boolean check() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom URL Parameter Configuration\nDESCRIPTION: Shows the ServiceURLCustomizer SPI interface for custom URL parameter manipulation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@SPI(scope = APPLICATION)\npublic interface ServiceURLCustomizer extends Prioritized {\n    /**\n     * Customizes {@link URL the service url}\n     *\n     * @param serviceURL {@link URL the service url}\n     * @return new service url\n     */\n    URL customize(URL serviceURL, ApplicationModel applicationModel);\n}\n```\n\n----------------------------------------\n\nTITLE: User-Based Routing YAML Configuration for Reviews Service\nDESCRIPTION: YAML configuration showing how the reviews virtual service is configured to route requests from user 'jason' to v2 and all other users to v1.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\n...\nspec:\n  hosts:\n  - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n```\n\n----------------------------------------\n\nTITLE: Response Processing Implementation\nDESCRIPTION: RPC response handling implementation in ResponsePlugin for processing Dubbo service results.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/how-to-proxy-dubbo-in-apache-shenyu.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\norg.apache.shenyu.plugin.response.ResponsePlugin#execute()\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Connection Limits in Dubbo XML\nDESCRIPTION: Shows how to limit the number of connections used by the client side to 10 connections using either reference or service configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/config-connections.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" connections=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Dubbo Registry Configuration in Logs\nDESCRIPTION: Demonstrates how to find the Dubbo registry configuration in application logs. This is useful when direct access to the QoS service is not available.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/troubleshoot/no-provider.md#2025-04-08_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n[27/02/23 09:36:46:046 CST] main  INFO context.ConfigManager:  [DUBBO] <dubbo:registry address=\"nacos://127.0.0.1:8848\" protocol=\"nacos\" port=\"8848\" />, dubbo version: 3.2.0-beta.6-SNAPSHOT, current host: 30.221.144.195\n```\n\n----------------------------------------\n\nTITLE: Defining a Component Interface in Go\nDESCRIPTION: Demonstrates how to define a component interface using Go interfaces. Components are the key abstraction in the proposed programming model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/proposals/google-service-weaver-paper-2023.md#2025-04-08_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Hello interface {\n    Greet(ctx context.Context, name string) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ThreadPoolExecutor for DemoService in Dubbo\nDESCRIPTION: This snippet implements a custom ThreadPoolExecutor for DemoService with 10 fixed threads and a 60-second keep-alive time. The executor uses a LinkedBlockingDeque queue and a custom NamedThreadFactory for thread creation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// custom thread pool\npublic class DemoServiceExecutor extends ThreadPoolExecutor {\n    public DemoServiceExecutor() {\n        super(10, 10, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),\n            new NamedThreadFactory(\"DemoServiceExecutor\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Spring Boot Application\nDESCRIPTION: YAML configuration for database connection in Spring Boot microservices. This configuration needs to be updated in the account, order, and stock services to connect to the MySQL database.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/trasaction/distributed-transaction.md#2025-04-08_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nurl: jdbc:mysql://127.0.0.1:3306/seata?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useOldAliasMetadataBehavior=true\nusername: root\npassword: 123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Apollo-Specific Parameters\nDESCRIPTION: Properties file snippets showing how to set additional Apollo-specific configuration parameters such as env and apollo.meta for Dubbo's config-center.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config-center/apollo.md#2025-04-08_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.address=apollo://localhost:8080\n```\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.config-center.parameters.apollo.meta=xxx\ndubbo.config-center.parameters.env=xxx\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo Nacos Dependencies for Non-Spring Boot Applications\nDESCRIPTION: XML configuration for adding the required dependencies to use Nacos as a registry in a non-Spring Boot Dubbo application. Includes the core dubbo dependency and the nacos-client dependency.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/nacos.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n    <dependency>\n      <groupId>com.alibaba.nacos</groupId>\n      <artifactId>nacos-client</artifactId>\n      <version>2.1.0</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Dubbo Service Interface and Parameter Classes in Java\nDESCRIPTION: Defines the data structures and interface for HTTP to Dubbo transformation service, including parameter classes and the main service interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/how-to-proxy-dubbo-in-apache-apisix.md#2025-04-08_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class DubboInvocationParameter {\n    private String type;\n    private String value;\n}\n\npublic class DubboInvocation {\n    private String service;\n    private String method;\n    private DubboInvocationParameter[] parameters;\n}\n\npublic interface HTTP2DubboService {\n    Map<String, Object> invoke(Map<String, Object> context)  throws Exception;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Isolation for Services\nDESCRIPTION: Java code example demonstrating how to configure thread pool isolation for different services. This implementation creates separate thread pools for different services to ensure resource isolation between them.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/framework/threading-model.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void test() {\n    // provider app\n    DubboBootstrap providerBootstrap = DubboBootstrap.newInstance();\n\n    ServiceConfig serviceConfig1 = new ServiceConfig();\n    serviceConfig1.setInterface(DemoService.class);\n    serviceConfig1.setRef(new DemoServiceImpl());\n    serviceConfig1.setVersion(version1);\n    // set executor1 for serviceConfig1, max threads is 10\n    NamedThreadFactory threadFactory1 = new NamedThreadFactory(\"DemoService-executor\");\n    ExecutorService executor1 = Executors.newFixedThreadPool(10, threadFactory1);\n    serviceConfig1.setExecutor(executor1);\n\n    ServiceConfig serviceConfig2 = new ServiceConfig();\n    serviceConfig2.setInterface(HelloService.class);\n    serviceConfig2.setRef(new HelloServiceImpl());\n    serviceConfig2.setVersion(version2);\n    // set executor2 for serviceConfig2, max threads is 100\n    NamedThreadFactory threadFactory2 = new NamedThreadFactory(\"HelloService-executor\");\n    ExecutorService executor2 = Executors.newFixedThreadPool(100, threadFactory2);\n    serviceConfig2.setExecutor(executor2);\n\n    ServiceConfig serviceConfig3 = new ServiceConfig();\n    serviceConfig3.setInterface(HelloService.class);\n    serviceConfig3.setRef(new HelloServiceImpl());\n    serviceConfig3.setVersion(version3);\n    // Because executor is not set for serviceConfig3, the default executor of serviceConfig3 is built using\n    // the threadpool parameter of the protocolConfig ( FixedThreadpool , max threads is 200)\n    serviceConfig3.setExecutor(null);\n\n    // It takes effect only if [executor-management-mode=isolation] is configured\n    ApplicationConfig applicationConfig = new ApplicationConfig(\"provider-app\");\n    applicationConfig.setExecutorManagementMode(\"isolation\");\n\n    providerBootstrap\n    .application(applicationConfig)\n    .registry(registryConfig)\n    // export with tri and dubbo protocol\n    .protocol(new ProtocolConfig(\"tri\", 20001))\n    .protocol(new ProtocolConfig(\"dubbo\", 20002))\n    .service(serviceConfig1)\n    .service(serviceConfig2)\n    .service(serviceConfig3);\n\n    providerBootstrap.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContentType Constants for UTF-8 Encoding in Dubbo REST\nDESCRIPTION: Using predefined content type constants with UTF-8 encoding from the ContentType support class in Dubbo REST.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\nUser getUser(@PathParam(\"id\") Long id);\n```\n\n----------------------------------------\n\nTITLE: Registering and Starting Dubbo Server in Java\nDESCRIPTION: Java code to register the DemoService and start the Dubbo server. It configures the Triple protocol, sets the port to 50051, and registers the DemoService implementation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/lightweight-rpc.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) {\n        DubboBootstrap.getInstance()\n            .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))\n            .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())\n            .start()\n            .await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count for Failover Cluster in Dubbo XML\nDESCRIPTION: Shows three ways to configure retry counts for the Failover cluster strategy in Dubbo: at service level, reference level, or method level.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/fault-tolerent-strategy.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service retries=\"2\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference retries=\"2\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:reference>\n    <dubbo:method name=\"findFoo\" retries=\"2\" />\n</dubbo:reference>\n```\n\n----------------------------------------\n\nTITLE: Generating Stack Trace for Task Processing Exception in Dubbo\nDESCRIPTION: This command generates a stack trace log file to help diagnose exceptions occurring during task processing in Dubbo. It uses the jstack utility to capture the stack information of a specific process ID.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/faq/0/19.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njstack [PID] > jstack.log\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Dubbo Documentation\nDESCRIPTION: YAML frontmatter that configures the documentation page metadata, including the type, title, link title and weight for ordering.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/latest/java-sdk/v3.x/reference-manual/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntype: advanced-docs\ntitle: \"Reference Manual\"\nlinkTitle: \"Reference Manual\"\nweight: 5\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Processing for Dubbo Request Handling in Java\nDESCRIPTION: This code implements an exception processing mechanism for Dubbo to handle unknown service requests. It adds an extension point that allows custom handling of decoding exceptions and supports retry logic for request processing.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/users/zhengcaiyun.md#2025-04-08_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n//解码结束后，无论是否异常，都将进入这个方法\n    void handleRequest(final ExchangeChannel channel, Request req) throws RemotingException {\n        if (req.error != null) {\n            // Give ExceptionProcessors a chance to retry request handle or custom exception information.\n            String exPs = System.getProperty(EXCEPTION_PROCESSOR_KEY);\n            if (StringUtils.isNotBlank(exPs)) {\n                ExtensionLoader<ExceptionProcessor> extensionLoader = channel.getUrl().getOrDefaultFrameworkModel().getExtensionLoader(ExceptionProcessor.class);\n                ExceptionProcessor expProcessor = extensionLoader.getOrDefaultExtension(exPs);\n                boolean handleError = expProcessor.shouldHandleError(error);\n                if (handleError) {\n                    //获取异常扩展，执行wrapAndHandleException操作，需要重试的场景可以抛出retry异常\n                    msg = Optional.ofNullable(expProcessor.wrapAndHandleException(channel, req)).orElse(msg);\n                }\n            }\n        }\n\n        res.setErrorMessage(\"Fail to decode request due to: \" + msg);\n        res.setStatus(Response.BAD_REQUEST);\n\n        channel.send(res);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Provider with Spring Annotations\nDESCRIPTION: Demonstrates how to configure a Dubbo service provider using @Configuration and @EnableDubbo annotations. It sets up provider, application, registry, and protocol configurations.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-annotation.md#2025-04-08_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.impl\")\nstatic class ProviderConfiguration {\n    @Bean // #1\n    public ProviderConfig providerConfig() {\n        ProviderConfig providerConfig = new ProviderConfig();\n        providerConfig.setTimeout(1000);\n        return providerConfig;\n    }\n\n    @Bean // #2\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"dubbo-annotation-provider\");\n        return applicationConfig;\n    }\n\n    @Bean // #3\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n\n    @Bean // #4\n    public ProtocolConfig protocolConfig() {\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        protocolConfig.setName(\"dubbo\");\n        protocolConfig.setPort(20880);\n        return protocolConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referring and Implementing Services\nDESCRIPTION: Processes the configuration to refer and implement each referenced service, creating invokers for remote calls.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *ReferenceConfig) Refer(_ interface{}) {\n    cfgURL := common.NewURLWithOptions(\n      common.WithPath(c.id),\n      common.WithProtocol(c.Protocol),\n      common.WithParams(c.getUrlMap()),\n      common.WithParamsValue(constant.BEAN_NAME_KEY, c.id),\n    )\n    // ... (code omitted for brevity)\n    if len(c.urls) == 1 {\n      c.invoker = extension.GetProtocol(c.urls[0].Protocol).Refer(*c.urls[0])\n    } else {\n      invokers := make([]protocol.Invoker, 0, len(c.urls))\n      // ... (code omitted for brevity)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rust Dubbo Consumer\nDESCRIPTION: Commands to clone, build and run the Rust Dubbo consumer client. The client demonstrates various types of RPC calls including unary, client streaming, bi-directional streaming, and server streaming.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/rust-sdk/java-interoperability.md#2025-04-08_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ # clone the source code\n$ git clone https://github.com/apache/dubbo-rust.git\n$ cd dubbo-rust/examples/greeter/\n\n$ # build\n$ cargo build\n\n$ # run the consumer, call the provider\n$ ../../target/debug/greeter-client\n# unary call\nResponse: GreeterReply { message: \"hello, dubbo-rust\" }\n# client stream\nclient streaming, Response: GreeterReply { message: \"hello client streaming\" }\n# bi stream\nparts: Metadata { inner: {\"content-type\": \"application/grpc\", \"date\": \"Wed, 28 Sep 2022 23:54:56 GMT\"} }\nreply: GreeterReply { message: \"server reply: \\\"msg1 from client\\\"\" }\nreply: GreeterReply { message: \"server reply: \\\"msg2 from client\\\"\" }\nreply: GreeterReply { message: \"server reply: \\\"msg3 from client\\\"\" }\ntrailer: Some(Metadata { inner: {\"grpc-message\": \"poll trailer successfully.\", \"grpc-accept-encoding\": \"gzip,identity\", \"content-type\": \"application/grpc\", \"grpc-status\": \"0\"} })\n# server stream\nparts: Metadata { inner: {\"content-type\": \"application/grpc\", \"date\": \"Wed, 28 Sep 2022 23:54:56 GMT\"} }\nreply: GreeterReply { message: \"msg1 from server\" }\nreply: GreeterReply { message: \"msg2 from server\" }\nreply: GreeterReply { message: \"msg3 from server\" }\ntrailer: Some(Metadata { inner: {\"content-type\": \"application/grpc\", \"grpc-message\": \"poll trailer successfully.\", \"grpc-accept-encoding\": \"gzip,identity\", \"grpc-status\": \"0\"} })\n```\n\n----------------------------------------\n\nTITLE: Implementing main function for Dubbo Go server\nDESCRIPTION: Defines the main function for the Dubbo Go server application, which loads the configuration and starts the service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-101.md#2025-04-08_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\tconfig.Load()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Arguments in Dubbo XML\nDESCRIPTION: Example showing how to configure method parameters using dubbo:argument tag within a dubbo:method configuration. This demonstrates setting up a callback parameter for a method named findXxx with timeout and retry settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/xml/dubbo-argument.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:method name=\"findXxx\" timeout=\"3000\" retries=\"2\">\n    <dubbo:argument index=\"0\" callback=\"true\" />\n</dubbo:method>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Protocol Export with XML in Dubbo\nDESCRIPTION: XML configuration for enabling multiple protocols on the same port in Dubbo. The ext-protocol parameter specifies additional protocols (tri, dubbo) to be supported alongside the main protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/architecture/multi-protocol.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" port=\"-1\" ext-protocol=\"tri,\"/>\n\n<bean id=\"greetingService\" class=\"org.apache.dubbo.demo.provider.GreetingServiceImpl\"/>\n\n<dubbo:service delay=\"5000\" version=\"1.0.0\" group=\"greeting\" timeout=\"5000\" interface=\"org.apache.dubbo.demo.GreetingService\" ref=\"greetingService\" protocol=\"dubbo\"/>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing for Dubbo API\nDESCRIPTION: This Java code snippet demonstrates how to configure OpenTelemetry tracing programmatically for Dubbo API, including enabling tracing, setting sampling rate, propagation type, and OTLP exporter settings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/tracing-opentelemetry.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nTracingConfig tracingConfig = new TracingConfig();\n// Enable dubbo tracing\ntracingConfig.setEnabled(true);\n// Set the sampling\ntracingConfig.setSampling(new SamplingConfig(1.0f));\n// Set Propagation, default is W3C, optional W3C/B3\ntracingConfig.setPropagation(new PropagationConfig(\"W3C\"));\n// Set trace reporting\nExporterConfig exporterConfig = new ExporterConfig();\n// Set up trace reporting to Zipkin\nexporterConfig.setZipkin(new ExporterConfig.OtlpConfig(\"http://localhost:4317\", Duration.ofSeconds(10), \"none\"));\ntracingConfig.setExporter(exporterConfig);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Service Consumer with Java Config and Annotations\nDESCRIPTION: This code demonstrates how to configure a Dubbo service consumer using Spring's Java Config and annotations. It includes application configuration, consumer timeout settings, and registry configuration for connecting to ZooKeeper.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/demos/dubbo-annotation.md#2025-04-08_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableDubbo(scanBasePackages = \"com.alibaba.dubbo.samples.action\")\n@ComponentScan(value = {\"com.alibaba.dubbo.samples.action\"})\nstatic class ConsumerConfiguration {\n    @Bean // #1\n    public ApplicationConfig applicationConfig() {\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        applicationConfig.setName(\"dubbo-annotation-consumer\");\n        return applicationConfig;\n    }\n\n    @Bean // #2\n    public ConsumerConfig consumerConfig() {\n        ConsumerConfig consumerConfig = new ConsumerConfig();\n        consumerConfig.setTimeout(3000);\n        return consumerConfig;\n    }\n\n    @Bean // #3\n    public RegistryConfig registryConfig() {\n        RegistryConfig registryConfig = new RegistryConfig();\n        registryConfig.setProtocol(\"zookeeper\");\n        registryConfig.setAddress(\"localhost\");\n        registryConfig.setPort(2181);\n        return registryConfig;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Method-Level Load Balancing in Properties File\nDESCRIPTION: Sets method-level load balancing using dubbo.properties configuration file. This example configures the sayHello method of DemoService to use the roundrobin strategy.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/loadbalance.md#2025-04-08_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.loadbalance=roundrobin\n```\n\n----------------------------------------\n\nTITLE: Assembling Protocol URL in Dubbo Service Export\nDESCRIPTION: This code handles the assembly of a Dubbo URL by gathering protocol configuration, application parameters, and method information. It includes protocol name validation, parameter mapping, and generic service handling.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/export-service.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void doExportUrlsFor1Protocol(ProtocolConfig protocolConfig, List<URL> registryURLs) {\n    String name = protocolConfig.getName();\n    if (name == null || name.length() == 0) {\n        name = \"dubbo\";\n    }\n\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(Constants.SIDE_KEY, Constants.PROVIDER_SIDE);\n    map.put(Constants.DUBBO_VERSION_KEY, Version.getProtocolVersion());\n    map.put(Constants.TIMESTAMP_KEY, String.valueOf(System.currentTimeMillis()));\n    if (ConfigUtils.getPid() > 0) {\n        map.put(Constants.PID_KEY, String.valueOf(ConfigUtils.getPid()));\n    }\n\n    appendParameters(map, application);\n    appendParameters(map, module);\n    appendParameters(map, provider, Constants.DEFAULT_KEY);\n    appendParameters(map, protocolConfig);\n    appendParameters(map, this);\n\n    if (methods != null && !methods.isEmpty()) {\n    }\n\n    if (ProtocolUtils.isGeneric(generic)) {\n        map.put(Constants.GENERIC_KEY, generic);\n        map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);\n    } else {\n        String revision = Version.getVersion(interfaceClass, version);\n        if (revision != null && revision.length() > 0) {\n            map.put(\"revision\", revision);\n        }\n\n        String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();\n        if (methods.length == 0) {\n            logger.warn(\"NO method found in service interface ...\");\n            map.put(Constants.METHODS_KEY, Constants.ANY_VALUE);\n        } else {\n            map.put(Constants.METHODS_KEY, StringUtils.join(new HashSet<String>(Arrays.asList(methods)), \",\"));\n        }\n    }\n\n    if (!ConfigUtils.isEmpty(token)) {\n        if (ConfigUtils.isDefault(token)) {\n            map.put(Constants.TOKEN_KEY, UUID.randomUUID().toString());\n        } else {\n            map.put(Constants.TOKEN_KEY, token);\n        }\n    }\n    if (Constants.LOCAL_PROTOCOL.equals(protocolConfig.getName())) {\n        protocolConfig.setRegister(false);\n        map.put(\"notify\", \"false\");\n    }\n\n    String contextPath = protocolConfig.getContextpath();\n    if ((contextPath == null || contextPath.length() == 0) && provider != null) {\n        contextPath = provider.getContextpath();\n    }\n\n    String host = this.findConfigedHosts(protocolConfig, registryURLs, map);\n    Integer port = this.findConfigedPorts(protocolConfig, name, map);\n    URL url = new URL(name, host, port, (contextPath == null || contextPath.length() == 0 ? \"\" : contextPath + \"/\") + path, map);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataReportFactory SPI Interface in Java\nDESCRIPTION: Defines the SPI interface for MetadataReportFactory with an adaptive method for getting metadata reports based on protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/metadata-report.md#2025-04-08_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SPI(\"redis\")\npublic interface MetadataReportFactory {\n    @Adaptive({\"protocol\"})\n    MetadataReport getMetadataReport(URL url);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Virtual Services Configuration in Kubernetes\nDESCRIPTION: Command to display the defined virtual service routes, showing how traffic is directed to v1 of each microservice.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/mesh/bookinfo-sidecar/security/request-routing.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get virtualservices -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring dubbo2.js Client in TypeScript\nDESCRIPTION: This TypeScript code configures the dubbo2.js client, setting up the Dubbo connection and proxy service for the DemoProvider interface.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo2-js.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dubbo, java, TDubboCallResult } from 'dubbo2.js'\n\nconst dubbo = new Dubbo({\n  application: {name: 'demo-provider'},\n  register: 'localhost:2181',\n  dubboVersion: '2.0.0',\n  interfaces: [\n    'com.alibaba.dubbo.demo.DemoProvider',\n  ],\n});\n\ninterface IDemoService {\n  sayHello(name: string): TDubboCallResult<string>;\n}\n\nexport const demoService = dubbo.proxyService<IDemoService>({\n  dubboInterface: 'com.alibaba.dubbo.demo.DemoProvider',\n  version: '1.0.0',\n  methods: {\n    sayHello(name: string) {\n      return [java.String(name)];\n    },\n\n    echo() {},\n\n    test() {},\n\n    getUserInfo() {\n      return [\n        java.combine('com.alibaba.dubbo.demo.UserRequest', {\n          id: 1,\n          name: 'nodejs',\n          email: 'node@qianmi.com',\n        }),\n      ];\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using throw Keyword for Mock Exceptions in XML\nDESCRIPTION: Examples of using the 'throw' keyword to specify mock exceptions in XML configuration. This can be used to throw default RpcExceptions or custom exceptions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/framework/more/local-mock.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw\"/>\n```\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:reference interface=\"com.foo.BarService\" mock=\"throw com.foo.MockException\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Protocol\nDESCRIPTION: XML configuration to set Dubbo as the default protocol for all providers.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/protocol/dubbo.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"dubbo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Service-Level Fixed Token Authorization in Dubbo XML\nDESCRIPTION: Sets up token authorization for a specific service using a fixed token (like a password).\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/token-authorization.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\" token=\"123456\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Client in Go\nDESCRIPTION: Go code snippet for implementing an HTTP client that sends requests to Pixiu with necessary headers for Dubbo conversion.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/quickstart.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nurl := \"http://localhost:8883/UserService/com.dubbogo.pixiu.UserService/GetUserByName\"\ndata := \"{\\\"types\\\":\\\"string\\\",\\\"values\\\":\\\"tc\\\"}\"\nclient := &http.Client{Timeout: 5 * time.Second}\nreq, err := http.NewRequest(\"POST\", url, strings.NewReader(data))\nreq.Header.Set(\"x-dubbo-http1.1-dubbo-version\", \"1.0.0\")\nreq.Header.Set(\"x-dubbo-service-protocol\", \"dubbo\")\nreq.Header.Set(\"x-dubbo-service-version\", \"1.0.0\")\nreq.Header.Set(\"x-dubbo-service-group\", \"test\")\n\nassert.NoError(t, err)\nreq.Header.Add(\"Content-Type\", \"application/json\")\nresp, err := client.Do(req)\n```\n\n----------------------------------------\n\nTITLE: Configuring Protocol Preference for Dubbo Consumer\nDESCRIPTION: Configuration for setting the preferred protocol for Dubbo consumers when multiple protocols are available. This allows controlling which protocol is used for service invocation.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/protocol.md#2025-04-08_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndubbo:\n consumer:\n   protocol: tri\n```\n\n----------------------------------------\n\nTITLE: Creating Service Proxy in Dubbo using Java\nDESCRIPTION: The createProxy method creates service proxy objects in Dubbo. It determines whether to use local (injvm) or remote references, handles multiple registry URLs, constructs Invoker instances, and generates proxy classes. The method supports direct connections to providers or registry-based service discovery.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/dev/source/refer-service.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate T createProxy(Map<String, String> map) {\n    URL tmpUrl = new URL(\"temp\", \"localhost\", 0, map);\n    final boolean isJvmRefer;\n    if (isInjvm() == null) {\n        // url 配置被指定，则不做本地引用\n        if (url != null && url.length() > 0) {\n            isJvmRefer = false;\n        // 根据 url 的协议、scope 以及 injvm 等参数检测是否需要本地引用\n        // 比如如果用户显式配置了 scope=local，此时 isInjvmRefer 返回 true\n        } else if (InjvmProtocol.getInjvmProtocol().isInjvmRefer(tmpUrl)) {\n            isJvmRefer = true;\n        } else {\n            isJvmRefer = false;\n        }\n    } else {\n        // 获取 injvm 配置值\n        isJvmRefer = isInjvm().booleanValue();\n    }\n\n    // 本地引用\n    if (isJvmRefer) {\n        // 生成本地引用 URL，协议为 injvm\n        URL url = new URL(Constants.LOCAL_PROTOCOL, NetUtils.LOCALHOST, 0, interfaceClass.getName()).addParameters(map);\n        // 调用 refer 方法构建 InjvmInvoker 实例\n        invoker = refprotocol.refer(interfaceClass, url);\n        \n    // 远程引用\n    } else {\n        // url 不为空，表明用户可能想进行点对点调用\n        if (url != null && url.length() > 0) {\n            // 当需要配置多个 url 时，可用分号进行分割，这里会进行切分\n            String[] us = Constants.SEMICOLON_SPLIT_PATTERN.split(url);\n            if (us != null && us.length > 0) {\n                for (String u : us) {\n                    URL url = URL.valueOf(u);\n                    if (url.getPath() == null || url.getPath().length() == 0) {\n                        // 设置接口全限定名为 url 路径\n                        url = url.setPath(interfaceName);\n                    }\n                    \n                    // 检测 url 协议是否为 registry，若是，表明用户想使用指定的注册中心\n                    if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n                        // 将 map 转换为查询字符串，并作为 refer 参数的值添加到 url 中\n                        urls.add(url.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));\n                    } else {\n                        // 合并 url，移除服务提供者的一些配置（这些配置来源于用户配置的 url 属性），\n                        // 比如线程池相关配置。并保留服务提供者的部分配置，比如版本，group，时间戳等\n                        // 最后将合并后的配置设置为 url 查询字符串中。\n                        urls.add(ClusterUtils.mergeUrl(url, map));\n                    }\n                }\n            }\n        } else {\n            // 加载注册中心 url\n            List<URL> us = loadRegistries(false);\n            if (us != null && !us.isEmpty()) {\n                for (URL u : us) {\n                    URL monitorUrl = loadMonitor(u);\n                    if (monitorUrl != null) {\n                        map.put(Constants.MONITOR_KEY, URL.encode(monitorUrl.toFullString()));\n                    }\n                    // 添加 refer 参数到 url 中，并将 url 添加到 urls 中\n                    urls.add(u.addParameterAndEncoded(Constants.REFER_KEY, StringUtils.toQueryString(map)));\n                }\n            }\n\n            // 未配置注册中心，抛出异常\n            if (urls.isEmpty()) {\n                throw new IllegalStateException(\"No such any registry to reference...\");\n            }\n        }\n\n        // 单个注册中心或服务提供者(服务直连，下同)\n        if (urls.size() == 1) {\n            // 调用 RegistryProtocol 的 refer 构建 Invoker 实例\n            invoker = refprotocol.refer(interfaceClass, urls.get(0));\n            \n        // 多个注册中心或多个服务提供者，或者两者混合\n        } else {\n            List<Invoker<?>> invokers = new ArrayList<Invoker<?>>();\n            URL registryURL = null;\n\n            // 获取所有的 Invoker\n            for (URL url : urls) {\n                // 通过 refprotocol 调用 refer 构建 Invoker，refprotocol 会在运行时\n                // 根据 url 协议头加载指定的 Protocol 实例，并调用实例的 refer 方法\n                invokers.add(refprotocol.refer(interfaceClass, url));\n                if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {\n                    registryURL = url;\n                }\n            }\n            if (registryURL != null) {\n                // 如果注册中心链接不为空，则将使用 AvailableCluster\n                URL u = registryURL.addParameter(Constants.CLUSTER_KEY, AvailableCluster.NAME);\n                // 创建 StaticDirectory 实例，并由 Cluster 对多个 Invoker 进行合并\n                invoker = cluster.join(new StaticDirectory(u, invokers));\n            } else {\n                invoker = cluster.join(new StaticDirectory(invokers));\n            }\n        }\n    }\n\n    Boolean c = check;\n    if (c == null && consumer != null) {\n        c = consumer.isCheck();\n    }\n    if (c == null) {\n        c = true;\n    }\n    \n    // invoker 可用性检查\n    if (c && !invoker.isAvailable()) {\n        throw new IllegalStateException(\"No provider available for the service...\");\n    }\n\n    // 生成代理类\n    return (T) proxyFactory.getProxy(invoker);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Factory in Dubbo XML\nDESCRIPTION: XML configuration examples showing how to specify the proxy factory implementation at protocol and provider levels.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/spi/description/proxy-factory.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol proxy=\"xxx\" />\n<!-- Default configuration, used when the <dubbo:protocol> does not configure the proxy attribute -->\n<dubbo:provider proxy=\"xxx\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Higress on Kubernetes using Helm\nDESCRIPTION: This command installs Higress on Kubernetes using Helm. It adds the Higress Helm repository and installs Higress in the 'higress-system' namespace with specific configuration options.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/integrations/higress.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add higress.io https://higress.io/helm-charts\nhelm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes --set global.local=true --set higress-console.o11y.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for Dubbo and Zookeeper in Non-Spring Boot Applications\nDESCRIPTION: This XML snippet demonstrates how to add Maven dependencies for Dubbo and Zookeeper in applications not using Spring Boot. It includes the core Dubbo dependency and Zookeeper-specific dependencies for different versions.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/service-discovery/zookeeper.md#2025-04-08_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>3.3.0</version>\n    </dependency>\n    <!-- This dependency helps to introduce Curator and Zookeeper dependencies that are necessary for Dubbo to work with zookeeper as transitive dependencies. -->\n    <!-- Use this dependency only when Zookeeper Server version is 3.4.x and below -->\n    <dependency>\n        <groupId>org.apache.dubbo</groupId>\n        <artifactId>dubbo-dependencies-zookeeper</artifactId>\n        <version>3.3.0</version>\n        <type>pom</type>\n    </dependency>\n    <!-- Use this dependency only when Zookeeper Server version is 3.5.x and above\n\t<dependency>\n\t\t<groupId>org.apache.dubbo</groupId>\n\t\t<artifactId>dubbo-dependencies-zookeeper-curator5</artifactId>\n\t\t<version>3.3.0</version>\n\t\t<type>pom</type>\n\t</dependency>\n\t-->\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Simplification with Spring Bean for Consumer\nDESCRIPTION: Java configuration using Spring Bean to enable registry simplification for a Dubbo consumer. This enables the simplified registry feature without specifying extra keys.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/simplify-registry-data.md#2025-04-08_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic RegistryConfig registryConfig() {\n    RegistryConfig registryConfig = new RegistryConfig();\n    registryConfig.setAddress(\"zookeeper://127.0.0.1:2181\");\n    registryConfig.setSimplified(true);\n    return registryConfig;\n  }\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Dubbo Consumer Spring Boot Application\nDESCRIPTION: This Java class serves as the entry point for the Spring Boot application that consumes Dubbo services. It uses the @SpringBootApplication annotation to enable auto-configuration and component scanning.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/integration/pinpoint.md#2025-04-08_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.democonsumer;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoConsumerApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoConsumerApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Login Credentials from Kubernetes Secrets\nDESCRIPTION: This command extracts the admin username and password for Grafana from Kubernetes secrets, decoding them from base64.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/integrations/grafana.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secrets grafana -o jsonpath=\"{.data.admin-user}\" | base64 --decode ; echo && kubectl get secrets grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider Bootstrap with XML Configuration\nDESCRIPTION: Java bootstrap class for launching a Dubbo service provider using XML configuration. This class loads the Spring XML context from the classpath and starts the service provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/integration/dubbo-registry-nacos-integration.md#2025-04-08_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage com.alibaba.dubbo.demo.provider;\n\nimport com.alibaba.dubbo.demo.service.DemoService;\n\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.io.IOException;\n\n/**\n * {@link DemoService} provider demo XML bootstrap\n */\npublic class DemoServiceProviderXmlBootstrap {\n\n    public static void main(String[] args) throws IOException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();\n        context.setConfigLocation(\"/META-INF/spring/dubbo-provider-context.xml\");\n        context.refresh();\n        System.out.println(\"DemoService provider (XML) is starting...\");\n        System.in.read();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Dubbo-Nacos Integration\nDESCRIPTION: Maven dependencies required to integrate Dubbo with Nacos registry, including dubbo-registry-nacos, nacos-client, dubbo core, and Spring context support.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/dubbo-registry-nacos-integration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <!-- Dubbo Nacos registry dependency -->\n    <dependency>\n        <groupId>org.apache</groupId>\n        <artifactId>dubbo-registry-nacos</artifactId>\n        <version>0.0.2</version>\n    </dependency>   \n    \n    <!-- Keep latest Nacos client version -->\n    <dependency>\n        <groupId>org.apache.nacos</groupId>\n        <artifactId>nacos-client</artifactId>\n        <version>[0.6.1,)</version>\n    </dependency>\n    \n    <!-- Dubbo dependency -->\n    <dependency>\n        <groupId>org.apache</groupId>\n        <artifactId>dubbo</artifactId>\n        <version>2.6.5</version>\n    </dependency>\n    \n    <!-- Alibaba Spring Context extension -->\n    <dependency>\n        <groupId>org.apache.spring</groupId>\n        <artifactId>spring-context-support</artifactId>\n        <version>1.0.2</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Logic with @DubboService Annotation\nDESCRIPTION: This snippet shows how to implement the DemoService interface with business logic. The @DubboService annotation exposes this implementation as a Dubbo service that can be discovered and consumed by clients.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/what/core-features/service-definition.md#2025-04-08_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    public String hello(String arg) {\n        // put your microservice logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unicast Parameter in Dubbo Consumer Configuration\nDESCRIPTION: Shows an alternative way to set the 'unicast' parameter to false in the consumer configuration, ensuring the consumer can receive messages when running on the same machine as the provider.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/registry/multicast.md#2025-04-08_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:consumer>\n    <dubbo:parameter key=\"unicast\" value=\"false\" />\n</dubbo:consumer>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Dubbo's registry center and service discovery features. Includes page aliases, description, title and navigation properties.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/_index.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naliases:\n    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/\n    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/\ndescription: Registry Center\nlinkTitle: Registry Center and Service Discovery\ntitle: Registry Center, Service Discovery, and Load Balancing\ntype: docs\nweight: 5\n```\n\n----------------------------------------\n\nTITLE: Deploying Dubbo Application in Kubernetes\nDESCRIPTION: Shell command to deploy a Dubbo application in Kubernetes using a predefined YAML configuration.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/gateway/triple.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/2-advanced/dubbo-samples-gateway/dubbo-samples-gateway-higress/dubbo-samples-gateway-higress-triple/deploy/provider/Deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Module Service Repository in Dubbo\nDESCRIPTION: Creating and initializing a ModuleServiceRepository object that stores services for a module model. The repository is linked to the framework service repository which provides the actual storage functionality.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n//创建模块服务存储库对象\nthis.serviceRepository = new ModuleServiceRepository(this);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Protocol with Dubbo SPI (Consumer)\nDESCRIPTION: SPI configuration for consumer side that maps the 'edubbo' protocol name to the EnhancedProtocol implementation, ensuring clients can communicate using the custom protocol.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/protocol.md#2025-04-08_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nedubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring QOS Security via JVM Parameter\nDESCRIPTION: Disables acceptance of commands from foreign IP addresses using a JVM parameter.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/qos.md#2025-04-08_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n-Ddubbo.application.qos.accept.foreign.ip=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Interface-Level Service Discovery in Dubbo3 XML\nDESCRIPTION: XML configuration to continue using interface-level service discovery when upgrading to Dubbo3. This sets the register-mode to 'interface' for the application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration-service-discovery.md#2025-04-08_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dubbo:application name=\"xxx\" register-mode=\"interface\">\n```\n\n----------------------------------------\n\nTITLE: Default Validation Error Response Format\nDESCRIPTION: Example of the default XML format returned for validation errors in Dubbo REST services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rest.md#2025-04-08_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n<violationReport>\n    <constraintViolations>\n        <path>getUserArgument0</path>\n        <message>User ID must be greater than 1</message>\n        <value>0</value>\n    </constraintViolations>\n</violationReport>\n```\n\n----------------------------------------\n\nTITLE: Configuring SPI for Custom Dubbo Filter\nDESCRIPTION: This snippet shows the SPI configuration required to register the custom AppendedFilter with Dubbo. It maps the filter name to the fully qualified class name.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/extensibility/filter.md#2025-04-08_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nappended=org.apache.dubbo.samples.extensibility.filter.provider.AppendedFilter\n```\n\n----------------------------------------\n\nTITLE: Online Service Commands in Dubbo\nDESCRIPTION: Demonstrates how to bring services online using the online command, including both bringing all services online and using regex patterns to selectively enable services.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/reference-manual/qos/introduction/service-management.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n//上线所有服务\ndubbo>online\nOK\n\n//根据正则，上线部分服务\ndubbo>online com.*\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting RMI as Default Protocol for Providers\nDESCRIPTION: XML configuration to set RMI as the default protocol for all service providers in Dubbo.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/rmi.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:provider protocol=\"rmi\" />\n```\n\n----------------------------------------\n\nTITLE: Initialization of ExtensionDirector in ScopeModel\nDESCRIPTION: Shows how the ExtensionDirector is initialized in the ScopeModel class during the initialize() method.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/4-Dubbo的扩展机制.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nthis.extensionDirector = new ExtensionDirector(parent != null ? parent.getExtensionDirector() : null, scope, this);\n```\n\n----------------------------------------\n\nTITLE: Configuring Pixiu YAML for gRPC Network Filter in Dubbo-go-Pixiu\nDESCRIPTION: YAML configuration for Pixiu that sets up an HTTP-to-gRPC proxy on port 8881. It defines listeners, filters, and cluster configuration to route HTTP requests to a gRPC server running on localhost:50001.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/reference/pixiu/user/networkfilter/grpc.md#2025-04-08_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTP\"\n      address:\n        socket_address:\n          address: \"0.0.0.0\"\n          port: 8881\n      filter_chains:\n        filters:\n          - name: dgp.filter.httpconnectionmanager\n            config:\n              route_config:\n                routes:\n                  - match:\n                      prefix: \"/api/v1\"\n                    route:\n                      cluster: \"test-grpc\"\n                      cluster_not_found_response_code: 505\n              http_filters:\n                - name: dgp.filter.http.grpcproxy\n                  config:\n                    path: /mnt/d/WorkSpace/GoLandProjects/dubbo-go-pixiu/samples/http/grpc/proto\n                - name: dgp.filter.http.response\n                  config:\n              server_name: \"test-http-grpc\"\n              generate_request_id: false\n      config:\n        idle_timeout: 5s\n        read_timeout: 5s\n        write_timeout: 5s\n  clusters:\n    - name: \"test-grpc\"\n      lb_policy: \"RoundRobin\"\n      endpoints:\n        - socket_address:\n            address: 127.0.0.1\n            port: 50001\n            protocol_type: \"GRPC\"\n  timeout_config:\n    connect_timeout: \"5s\"\n    request_timeout: \"10s\"\n  shutdown_config:\n    timeout: \"60s\"\n    step_timeout: \"10s\"\n    reject_policy: \"immediacy\"\n```\n\n----------------------------------------\n\nTITLE: Main Function for Client Execution\nDESCRIPTION: Loads configuration, initializes the client, and performs a sample RPC call to the UserProvider service.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/golang/dubbo-go-codewalk-2.md#2025-04-08_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    hessian.RegisterPOJO(&User{})\n    config.Load()\n    time.Sleep(3e9)\n    println(\"\\n\\n\\nstart to test dubbo\")\n    user := &User{}\n    err := userProvider.GetUser(context.TODO(), []interface{}{\"A001\"}, user)\n    if err != nil {\n      panic(err)\n    }\n    println(\"response result: %v\\n\", user)\n    initSignal()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Server and Java Client for Application-Level Service Discovery\nDESCRIPTION: Shell commands to start the Go server and Java client for demonstrating application-level service discovery interoperability between dubbo-go and dubbo-java.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/golang-sdk/tutorial/interop-dubbo/service-discovery.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd go-server\ngo run server.go\n\ncd java-client\nsh run.sh\n```\n\n----------------------------------------\n\nTITLE: Loading Dubbo Provider Configuration in Java\nDESCRIPTION: Java code to load the Spring XML configuration for the Dubbo service provider and start the application context.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/config/spring/xml.md#2025-04-08_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Application {\n    public static void main(String[] args) throws InterruptedException {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring/dubbo-demo-provider.xml\");\n        context.start();\n\n        System.out.println(\"dubbo service started\");\n        // to hang up main thread\n        new CountDownLatch(1).await();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Service in XML for AsyncContext\nDESCRIPTION: XML configuration to expose a synchronous Dubbo service that will be implemented with asynchronous execution using AsyncContext.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/async-execute-on-provider.md#2025-04-08_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"asyncService\" class=\"org.apache.dubbo.samples.governance.impl.AsyncServiceImpl\"/>\n<dubbo:service interface=\"org.apache.dubbo.samples.governance.api.AsyncService\" ref=\"asyncService\"/>\n```\n\n----------------------------------------\n\nTITLE: Common Kubernetes Commands for Dubbo Service Mesh Management\nDESCRIPTION: These shell commands are useful for managing and troubleshooting Dubbo services in a Kubernetes-based service mesh environment.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/dubbo-mesh.md#2025-04-08_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# dump current Envoy configs\nkubectl exec -it ${your pod id} -c istio-proxy curl http://127.0.0.1:15000/config_dump > config_dump\n\n# Enter istio-proxy container\nkubectl exec -it ${your pod id} -c istio-proxy -- /bin/bash\n\n# View container logs\nkubectl logs ${your pod id} -n ${your namespace}\n\nkubectl logs ${your pod id} -n ${your namespace} -c istio-proxy\n\n# Enable automatic sidecar injection\nkubectl label namespace ${your namespace} istio-injection=enabled --overwrite\n\n# Disable automatic sidecar injection\nkubectl label namespace ${your namespace} istio-injection=disabled --overwrite\n```\n\n----------------------------------------\n\nTITLE: Configuring Plain Text Connection to Istiod\nDESCRIPTION: This properties configuration sets up a plain text connection to Istiod instead of the default SSL connection. This option can be useful in certain environments where SSL is not required or causes issues.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/mesh/migration/proxyless.md#2025-04-08_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\ndubbo.registry.secure=plaintext\n```\n\n----------------------------------------\n\nTITLE: Defining Service Interface\nDESCRIPTION: Java interface definition for the Dubbo service\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/tasks/protocols/triple/interface.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface GreetingsService {\n    String sayHi(String name);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading SPI Implementations\nDESCRIPTION: Code demonstrating how to load and use IRepository implementations using ServiceLoader.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/blog/news/introduction-to-dubbo-spi.md#2025-04-08_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nServiceLoader<IRepository> serviceLoader = ServiceLoader.load(IRepository.class);\nIterator<IRepository> it = serviceLoader.iterator();\nwhile (it != null && it.hasNext()){\n    IRepository demoService = it.next();\n    System.out.println(\"class:\" + demoService.getClass().getName());\n    demoService.save(\"tom\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dubbo Logger via Command Line\nDESCRIPTION: Demonstrates how to configure the Dubbo logging framework through a command line parameter. This method allows setting log4j as the logger by passing a system property when starting the Java application.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/advanced/logger-strategy.md#2025-04-08_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njava -Ddubbo.application.logger=log4j\n```\n\n----------------------------------------\n\nTITLE: Limiting Server-side Concurrent Executions at Method Level in XML\nDESCRIPTION: XML configuration to limit the concurrent execution count of the sayHello method in com.foo.BarService to a maximum of 10 threads on the server side.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/mannual/java-sdk/tasks/rate-limit/concurrency-control.md#2025-04-08_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:service interface=\"com.foo.BarService\">\n    <dubbo:method name=\"sayHello\" executes=\"10\" />\n</dubbo:service>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Script-Based Routing Rule Implementation\nDESCRIPTION: This script demonstrates how to implement a script-based routing rule using JavaScript. The function filters invokers based on host IP addresses and returns only those matching a specific host.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/examples/routing-rule-deprecated.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n（function route(invokers) {\n    var result = new java.util.ArrayList(invokers.size());\n    for (i = 0; i < invokers.size(); i ++) {\n        if (\"10.20.153.10\".equals(invokers.get(i).getUrl().getHost())) {\n            result.add(invokers.get(i));\n        }\n    }\n    return result;\n} (invokers)）; // 表示立即执行方法\n```\n\n----------------------------------------\n\nTITLE: Implementing Dubbo Service Provider with Annotations\nDESCRIPTION: Implements a Dubbo service provider with various configuration parameters using annotations including version, group, executes limit, retries, owner, and timeout.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/registry/service-discovery-application-vs-interface.md#2025-04-08_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Service(version = \"1.1.8\", group = \"d-test\", executes = 4500, retries = 7, owner = \"victanno\", timeout = 5300)\npublic class AnnotationServiceImpl implements AnnotationService {\n    @Override\n    public String sayHello(String name) {\n        System.out.println(\"async provider received: \" + name);\n        return \"annotation: hello, \" + name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Listener in Dubbo-go-pixiu YAML\nDESCRIPTION: This snippet demonstrates the configuration for an HTTPS Listener in Dubbo-go-pixiu. It sets the protocol type to HTTPS and includes additional fields for specifying domains and certificate directory.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/overview/reference/pixiu/user/listener/http.md#2025-04-08_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  listeners:\n    - name: \"net/http\"\n      protocol_type: \"HTTPS\"\n      address:\n        socket_address:\n          domains:\n            - \"sample.domain.com\"\n            - \"sample.domain-1.com\"\n            - \"sample.domain-2.com\"\n          certs_dir: $PROJECT_DIR/cert\n```\n\n----------------------------------------\n\nTITLE: Web.xml Configuration for External Servlet Container in Dubbo REST\nDESCRIPTION: Shows the required web.xml configuration when using an external servlet container for Dubbo REST services, including listeners and servlet mappings.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/lifecycle/rest.md#2025-04-08_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<web-app>\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/classes/META-INF/spring/dubbo-demo-provider.xml</param-value>\n    </context-param>\n    \n    <listener>\n        <listener-class>org.apache.dubbo.remoting.http.servlet.BootstrapListener</listener-class>\n    </listener>\n    \n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n----------------------------------------\n\nTITLE: Adding Dubbo3 BOM Dependency Management in Maven\nDESCRIPTION: The first step in upgrading to Dubbo3 is adding the BOM (Bill of Materials) dependency management to centralize version control for all Dubbo components. This ensures consistent versioning across all Dubbo dependencies in the project.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/en/overview/mannual/java-sdk/reference-manual/upgrades-and-compatibility/migration.md#2025-04-08_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-dependencies-bom</artifactId>\n            <version>3.3.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: ModuleConfigManager Constructor Implementation in Dubbo\nDESCRIPTION: Constructor for ModuleConfigManager that initializes the abstract config manager with module model and supported configuration types. It also retrieves the application configuration manager from the parent application model.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/blog/java/codeanalysis/3.0.8/3-框架,应用程序,模块领域模型Model对象的初始化.md#2025-04-08_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npublic ModuleConfigManager(ModuleModel moduleModel) {\n\t//向抽象的配置管理器AbstractConfigManager传递参数\n\t//模块模型参数，模块支持的配置类型集合\n        super(moduleModel, Arrays.asList(ModuleConfig.class, ServiceConfigBase.class, ReferenceConfigBase.class, ProviderConfig.class, ConsumerConfig.class));\n        //获取应用程序配置管理器\n        applicationConfigManager = moduleModel.getApplicationModel().getApplicationConfigManager();\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Connections for Self-Protection\nDESCRIPTION: Sets a limit on the maximum number of connections a provider will accept, protecting the provider from being overwhelmed by too many consumer connections.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docsv2.7/user/references/protocol/dubbo.md#2025-04-08_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dubbo:protocol name=\"dubbo\" accepts=\"1000\" />\n```\n\n----------------------------------------\n\nTITLE: Redis Metadata Key Structure without Version or Group\nDESCRIPTION: Shows the key structure used in Redis when version or group is not specified, maintaining colons as placeholders.\nSOURCE: https://github.com/apache/dubbo-website/blob/master/content/zh-cn/docs/references/metadata.md#2025-04-08_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nProvider: {service name}:::provider:{application name}\nConsumer: {service name}:::consumer:{application name}\n```"
  }
]