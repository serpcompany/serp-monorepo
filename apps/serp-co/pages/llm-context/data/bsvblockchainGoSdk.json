[
  {
    "owner": "bsv-blockchain",
    "repo": "go-sdk",
    "content": "TITLE: Creating and Signing a Bitcoin Transaction with BSV SDK in Go\nDESCRIPTION: This code snippet demonstrates the process of creating a new Bitcoin transaction, adding inputs and outputs, and signing it using a private key. It utilizes the BSV SDK to handle transaction creation, input/output management, and signing operations.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/docs/examples/create_simple_tx/create_simple_tx.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n \"context\"\n \"log\"\n\n wif \"github.com/bsv-blockchain/go-sdk/compat/wif\"\n \"github.com/bsv-blockchain/go-sdk/transaction\"\n \"github.com/bsv-blockchain/go-sdk/transaction/unlocker\"\n)\n\n// https://goplay.tools/snippet/bnsS-pA56ob\nfunc main() {\n // Create a new transaction\n   tx := transaction.NewTransaction()\n\n   // Add the inputs\n   unlockingScriptTemplate, _ := p2pkh.Unlock(priv, nil)\n   if err := tx.AddInputFrom(\n\t\t\"11b476ad8e0a48fcd40807a111a050af51114877e09283bfa7f3505081a1819d\",\n\t\t0,\n\t\t\"76a9144bca0c466925b875875a8e1355698bdcc0b2d45d88ac\",\n\t\t1500,\n\t\tunlockingScriptTemplate,\n\t); err!= nil {\n      log.Fatal(err.Error())\n   }\n\n   // Add the outputs\n   _ = tx.PayToAddress(\n      // Destination address\n      \"1NRoySJ9Lvby6DuE2UQYnyT67AASwNZxGb\",\n      // Value in satoshis\n      1000,\n   )\n\n   priv, _ := ec.PrivateKeyFromWif(\"KznvCNc6Yf4iztSThoMH6oHWzH9EgjfodKxmeuUGPq5DEX5maspS\")\n\n   // Sign the transaction\n   if err := tx.Sign(); err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n   log.Printf(\"tx: %s\\n\", tx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing BSV Transactions in Go\nDESCRIPTION: Example demonstrating how to create and sign a BSV transaction using the SDK. Shows transaction input creation, output payment, and signing using a WIF private key.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\twif \"github.com/bsv-blockchain/go-sdk/compat/wif\"\n\t\"github.com/bsv-blockchain/go-sdk/transaction\"\n\t\"github.com/bsv-blockchain/go-sdk/transaction/unlocker\"\n)\n\nfunc main() {\n\ttx := transaction.NewTransaction()\n\n\tunlockingScriptTemplate, _ := p2pkh.Unlock(priv, nil)\n   if err := tx.AddInputFrom(\n\t\t\"11b476ad8e0a48fcd40807a111a050af51114877e09283bfa7f3505081a1819d\",\n\t\t0,\n\t\t\"76a9144bca0c466925b875875a8e1355698bdcc0b2d45d88ac\",\n\t\t1500,\n\t\tunlockingScriptTemplate,\n\t); err!= nil {\n      log.Fatal(err.Error())\n   }\n\n\t_ = tx.PayToAddress(\"1AdZmoAQUw4XCsCihukoHMvNWXcsd8jDN6\", 1000)\n\n\tpriv, _ := ec.PrivateKeyFromWif(\"KznvCNc6Yf4iztSThoMH6oHWzH9EgjfodKxmeuUGPq5DEX5maspS\")\n\n\tif err := tx.Sign(); err != nil {\n\t\tlog.Fatal(err.Error())\n\t}\n\tlog.Printf(\"tx: %s\\n\", tx)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Transaction Broadcast Client in Go\nDESCRIPTION: This code snippet demonstrates how to create a new transaction, initialize a broadcaster (Arc, TAAL, or WhatsOnChain), and broadcast the transaction to the Bitcoin SV network. It includes error handling and success message printing.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/docs/examples/broadcaster/broadcaster.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"github.com/bsv-blockchain/go-sdk/transaction\"\n        \"github.com/bsv-blockchain/go-sdk/transaction/broadcaster\"\n)\n\nfunc main() {\n\n        // Create a new transaction\n        hexTx := \"010000000100\"\n        tx, _ := transaction.NewTransactionFromHex(hexTx)\n\n        broadcaster := &broadcaster.Arc{\n            ApiUrl: \"https://arc.gorillapool.io\",\n            ApiKey: \"\",\n        }\n\n        // To use TAAL API\n        // broadcaster := &broadcaster.Taal{\n        //     ApiKey: \"\",\n        // }\n\n        // To use Whats on Chain API\n        // broadcaster := &broadcaster.WhatsOnChain{\n        //     ApiKey: \"\",\n        //     Network: broadcaster.WOCMainnet\n        // }\n\n        // Broadcast the transaction\n        success, failure := tx.Broadcast(broadcaster)\n\n        // Check for errors\n        if failure != nil {\n            panic(failure)\n        }\n\n        // Print the success message and transaction ID\n        println(success.Message, success.Txid)\n}\n```\n\n----------------------------------------\n\nTITLE: Converting libsv/go-bt Transaction to go-sdk Transaction in Go\nDESCRIPTION: This function converts a transaction from the libsv/go-bt library format to the go-sdk transaction format. It maps the transaction version, lock time, inputs (including source TXID, output index, unlocking script, and sequence number), and outputs (including satoshis and locking script).\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/docs/examples/GO_BT.md#2025-04-21_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc GoBt2GoSDKTransaction(tx *bt.Tx) *transaction.Transaction {\n    sdkTx := &transaction.Transaction{\n        Version:  tx.Version,\n        LockTime: tx.LockTime,\n    }\n\n    sdkTx.Inputs = make([]*transaction.TransactionInput, len(tx.Inputs))\n    for i, in := range tx.Inputs {\n        sdkTx.Inputs[i] = &transaction.TransactionInput{\n            SourceTXID:       bt.ReverseBytes(in.PreviousTxID()),\n            SourceTxOutIndex: in.PreviousTxOutIndex,\n            UnlockingScript:  (*script.Script)(in.UnlockingScript),\n            SequenceNumber:   in.SequenceNumber,\n        }\n    }\n\n    sdkTx.Outputs = make([]*transaction.TransactionOutput, len(tx.Outputs))\n    for i, out := range tx.Outputs {\n        sdkTx.Outputs[i] = &transaction.TransactionOutput{\n            Satoshis:      out.Satoshis,\n            LockingScript: (*script.Script)(out.LockingScript),\n        }\n    }\n\n    return sdkTx\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BSV Blockchain Go SDK\nDESCRIPTION: Command to install the BSV Blockchain SDK using Go's package manager\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/bsv-blockchain/go-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Bitcoin Script Interpreter Package in Go\nDESCRIPTION: This command installs or updates the interpreter package for Bitcoin scripts in a Go project. It uses the go get command to fetch the latest version from the GitHub repository.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/script/interpreter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ go get -u github.com/bsv-blockchain/go-sdk/script/interpreter\n```\n\n----------------------------------------\n\nTITLE: Creating Release Notes Template in Markdown\nDESCRIPTION: This snippet provides a template for creating structured release notes in Markdown format. It includes sections for added features, changes, deprecations, removals, fixes, and security updates.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [X.X.X] - YYYY-MM-DD\n\n### Added\n- \n\n### Changed\n- \n\n### Deprecated\n- \n\n### Removed\n- \n\n### Fixed\n- \n\n### Security\n- \n```\n\n----------------------------------------\n\nTITLE: Publishing Release with Goreleaser\nDESCRIPTION: Command to use goreleaser for creating the actual release. Requires setting the GITHUB_TOKEN environment variable for authentication.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/RELEASE.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_TOKEN=xxxxxxxx goreleaser release --clean\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository Commands - Git\nDESCRIPTION: Commands for cloning and navigating to the BSV SDK repository\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/PROJECT.git\\ncd bsv-sdk\n```\n\n----------------------------------------\n\nTITLE: Creating a Version Tag\nDESCRIPTION: Git command to create a new version tag for the release. The example shows creating a v1.0.0 tag.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Pushing Version Tag to Remote\nDESCRIPTION: Git command to push the newly created version tag to the remote repository.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/RELEASE.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Merging Tagged Branch to Master\nDESCRIPTION: Command for merging a tagged branch into the master branch as the first step of the release process.\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmerge tagged branch to master branch\n```\n\n----------------------------------------\n\nTITLE: Testing and Documentation Commands - NPM\nDESCRIPTION: Commands for running tests and generating documentation\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\\nnpm run doc\\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation - NPM\nDESCRIPTION: Command for installing project dependencies using npm\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Git Push Command\nDESCRIPTION: Command for pushing changes to a forked repository\nSOURCE: https://github.com/bsv-blockchain/go-sdk/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: git\nCODE:\n```\ngit push origin your-new-branch\n```"
  }
]