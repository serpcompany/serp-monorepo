[
  {
    "owner": "dubzzz",
    "repo": "fast-check",
    "content": "TITLE: Implementing simple properties with fast-check in JavaScript\nDESCRIPTION: Example of writing and testing properties using fast-check, including a 'contains' function test and substring containment test.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\n\n// Code under test\nconst contains = (text, pattern) => text.indexOf(pattern) >= 0;\n\n// Properties\ndescribe('properties', () => {\n  // string text always contains itself\n  it('should always contain itself', () => {\n    fc.assert(\n      fc.property(fc.string(), (text) => {\n        return contains(text, text);\n      }),\n    );\n  });\n\n  // string a + b + c always contains b, whatever the values of a, b and c\n  it('should always contain its substrings', () => {\n    fc.assert(\n      fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {\n        // Alternatively: no return statement and direct usage of expect or assert\n        return contains(a + b + c, b);\n      }),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Email Validator Performance with Fast-Check\nDESCRIPTION: Implementation of a property-based test using fast-check to detect performance issues in Zod's email validation. The test measures execution time and fails if validation takes longer than a specified threshold. Includes configuration for interrupting long-running tests and handling failures.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { z } from 'zod'; // eg.: 3.22.2 is vulnerable\nimport fc from 'fast-check';\nimport { isMainThread } from 'node:worker_threads';\nimport { assert, propertyFor } from '@fast-check/worker';\nconst property = propertyFor(new URL(import.meta.url));\n\nconst timeLimitMs = 1_000;\nconst validator = z.string().email();\nawait assert(\n  property(fc.emailAddress(), (...inputs) => {\n    const startTime = performance.now();\n    try {\n      algorithm(...inputs);\n    } catch (err) {}\n    const endTime = performance.now();\n    const delayMs = endTime - startTime;\n    if (delayMs > timeLimitMs) {\n      throw new Error(`The computation of algorithm(...inputs) took ${delayMs}ms`);\n    }\n  }),\n  {\n    // we want to stop immediately on failure to report issues asap, drop it to have shrinking\n    endOnFailure: true,\n    // we want to kill the predicate if it takes more than {interruptAfterTimeLimit}ms\n    interruptAfterTimeLimit: 60_000,\n    // and mark the run as failed\n    markInterruptAsFailure: true,\n    // fuzzing implies possibly running for longer than usual tests (when we want to look for the issues, not in CI)\n    numRuns: 1_000_000,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Example-Based Testing of Sorting Algorithm in JavaScript\nDESCRIPTION: Traditional unit tests using explicit examples to verify the behavior of a number sorting function. Tests cover already sorted, randomly ordered, and descending ordered arrays.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/our-first-property-based-test.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should keep an already sorted array sorted', () => {\n  expect(sortNumbersAscending([1, 2, 3])).toEqual([1, 2, 3]);\n});\ntest('should sort a randomly ordered array in ascending order', () => {\n  expect(sortNumbersAscending([3, 1, 2])).toEqual([1, 2, 3]);\n});\ntest('should sort a descending ordered array in ascending order', () => {\n  expect(sortNumbersAscending([3, 1, 2])).toEqual([1, 2, 3]);\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Mocked Server Calls in TypeScript\nDESCRIPTION: Demonstrates how to schedule mocked server calls using a custom function that introduces delays to simulate real-world server behavior. This is useful for testing asynchronous operations in applications like TODO-list management.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleMockedServerFunction = <TArgs extends unknown[], TOut>(\n  s: Scheduler,\n  f: (...args: TArgs) => Promise<TOut>,\n) => {\n  return (...args: TArgs) => {\n    return s.schedule(Promise.resolve('Server received the call')).then(() => f(...args));\n  };\n};\n\nconst newAddTodo = scheduleMockedServerFunction(s, (label) => mockedApi.addTodo(label));\n// With newAddTodo = s.scheduleFunction((label) => mockedApi.addTodo(label))\n// The mockedApi would have received todo-1 first, followed by todo-2\n// When each of those calls resolve would have been the responsibility of s\n// In the contrary, with scheduleMockedServerFunction, the mockedApi might receive todo-2 first.\nnewAddTodo('todo-1'); // .then\nnewAddTodo('todo-2'); // .then\n\n// or...\n\nconst scheduleMockedServerFunction = <TArgs extends unknown[], TOut>(\n  s: Scheduler,\n  f: (...args: TArgs) => Promise<TOut>,\n) => {\n  const scheduledF = s.scheduleFunction(f);\n  return (...args: TArgs) => {\n    return s.schedule(Promise.resolve('Server received the call')).then(() => scheduledF(...args));\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Batches of Calls in JavaScript\nDESCRIPTION: This snippet shows how to generate multiple batches of calls using fc.array. It demonstrates the transition from generating a single batch to multiple batches with varying numbers of calls.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/multiple-batches-of-calls.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Single batch:\nfc.integer({ min: 1, max: 10 });\n\n// Multiple batches:\nfc.array(fc.integer({ min: 1, max: 10 }), { minLength: 1 });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Example with Custom toString\nDESCRIPTION: This snippet demonstrates how to create a command for model-based testing with a custom toString method that displays more meaningful information when reporting test failures.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass GoToTrackCommand {\n  constructor(trackPosition) {\n    this.trackPosition = trackPosition;\n  }\n  check(m) {\n    return m.allTracks.length !== 0;\n  }\n  run(m, r) {\n    this.trackName = m.allTracks[this.trackPosition % m.allTracks.length];\n    // execute 'go to track' on the system (r) and impact the model (m) if needed\n  }\n  toString() {\n    return `go to track '${this.trackName}'`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Model-Based Tests with fast-check\nDESCRIPTION: Setting up and executing model-based tests using fast-check's property-based testing framework, defining command generators and running the test assertion.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// define the possible commands and their inputs\nconst allCommands = [\n  fc.integer().map((v) => new PushCommand(v)),\n  fc.constant(new PopCommand()),\n  fc.constant(new SizeCommand()),\n];\n// run everything\nfc.assert(\n  fc.property(fc.commands(allCommands, { size: '+1' }), (cmds) => {\n    const s = () => ({ model: { num: 0 }, real: new List() });\n    fc.modelRun(s, cmds);\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Property with Pre-condition and Boolean Return in JavaScript using fast-check\nDESCRIPTION: This example demonstrates defining a property that uses fc.pre() for pre-conditions and returns boolean values to indicate success or failure. It tests a hypothetical 'crop' function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/properties.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.property(fc.nat(), fc.string(), (maxLength, label) => {\n  fc.pre(label.length <= maxLength); // any label such label.length > maxLength, will be dropped\n  return crop(label, maxLength) === label; // true is success, false is failure\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Asynchronous Property in JavaScript using fast-check\nDESCRIPTION: This snippet demonstrates the basic syntax for defining an asynchronous property in fast-check. It shows how to use fc.asyncProperty() with arbitraries and an async predicate function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/properties.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.asyncProperty(...arbitraries, async (...args) => {});\n```\n\n----------------------------------------\n\nTITLE: Testing Promise Resolution Order\nDESCRIPTION: Initial test implementation showing basic promise resolution order checking. Uses Jest mocks to verify that queued async calls resolve in the correct sequence.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/your-first-race-condition-test.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should resolve in call order', async () => {\n  // Arrange\n  const seenAnswers = [];\n  const call = jest.fn().mockImplementation((v) => Promise.resolve(v));\n\n  // Act\n  const queued = queue(call);\n  await Promise.all([queued(1).then((v) => seenAnswers.push(v)), queued(2).then((v) => seenAnswers.push(v))]);\n\n  // Assert\n  expect(seenAnswers).toEqual([1, 2]);\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Queue Implementation with Scheduler\nDESCRIPTION: Improved version using a scheduler to handle asynchronous operations more robustly, with explicit promise scheduling and better tracking of call order.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/the-missing-part.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let id = 0; id !== numCalls; ++id) {\n  pendingQueries.push(\n    s\n      .schedule(Promise.resolve(`Fire the call for ${id}`))\n      .then(() => {\n        expectedAnswers.push(id);\n        return queued(id);\n      })\n      .then((v) => seenAnswers.push(v)),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a property-based test with manual fast-check integration\nDESCRIPTION: Example of a property-based test using manual fast-check integration within Jest to check a substring function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = require('@jest/globals');\nconst fc = require('fast-check');\n\ntest('should detect the substring', () => {\n  fc.assert(\n    fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {\n      const text = a + b + c;\n      expect(isSubtring(text, b)).toBe(true);\n    }),\n  );\n});\n\n// Code under test: should rather be imported from another file\nfunction isSubtring(text, pattern) {\n  return text.includes(pattern);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining sample Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the sample function in fast-check. It generates an array of sample values from a given arbitrary or property.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sample<Ts>(generator: IRawProperty<Ts, boolean> | Arbitrary<Ts>, params?: number | Parameters<Ts>): Ts[];\n```\n\n----------------------------------------\n\nTITLE: Generating Complex Objects with Various Types in JavaScript using fast-check\nDESCRIPTION: Demonstrates how to generate complex objects with various JavaScript types, including BigInt, boxed values, Date, Map, Set, and more.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object({\n  withBigInt: true,\n  withBoxedValues: true,\n  withDate: true,\n  withMap: true,\n  withNullPrototype: true,\n  withObjectString: true,\n  withSet: true,\n  withTypedArray: true,\n  withSparseArray: true,\n  withUnicodeString: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Race Conditions with fast-check's Scheduler in JavaScript\nDESCRIPTION: A test that detects race conditions using fast-check's scheduler. This approach allows for controlled reordering of asynchronous operations to verify correct behavior in concurrent scenarios.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-03-28-beyond-flaky-tests-bringing-controlled-randomness-to-vitest/index.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('queued calls are resolved in proper order', async ({ g }) => {\n  // Arrange\n  const s = g(fc.scheduler);\n  const sourceFun = (v) => Promise.resolve(v);\n  const queuedFun = queue(s.scheduleFunction(sourceFun));\n\n  // Act\n  const onSuccess = vi.fn();\n  const p1 = queuedFun(1).then(onSuccess);\n  const p2 = queuedFun(2).then(onSuccess);\n  const p3 = queuedFun(3).then(onSuccess);\n  await s.waitFor(Promise.all([p1, p2, p3]));\n\n  // Assert\n  expect(onSuccess).toHaveBeenNthCalledWith(1, 1);\n  expect(onSuccess).toHaveBeenNthCalledWith(2, 2);\n  expect(onSuccess).toHaveBeenNthCalledWith(3, 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Synchronous Property in JavaScript using fast-check\nDESCRIPTION: This snippet demonstrates the basic syntax for defining a synchronous property in fast-check. It shows how to pass arbitraries and a predicate function to fc.property().\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/properties.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.property(...arbitraries, (...args) => {});\n```\n\n----------------------------------------\n\nTITLE: Detecting Zod Email Validator ReDoS with fast-check\nDESCRIPTION: Implementation of fast-check testing specifically for Zod's email validator. It tests if the validator can handle email addresses within a reasonable time limit, helping to detect CVE-2023-4316.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { z } from 'zod'; // eg.: 3.22.2 is vulnerable\nimport fc from 'fast-check';\n\nconst timeLimitMs = 1_000;\nconst validator = z.string().email();\nfc.assert(\n  fc.property(fc.emailAddress(), (rawString) => {\n    const startTime = performance.now();\n    try {\n      validator.parse(rawString);\n    } catch (err) {}\n    const endTime = performance.now();\n    const delayMs = endTime - startTime;\n    if (delayMs > timeLimitMs) {\n      throw new Error(`The computation of validator.parse took ${delayMs}ms`);\n    }\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Full Property-Based Testing Mode Example\nDESCRIPTION: Shows how to use the full property-based testing mode with both array-style and object-style arbitrary definitions. Demonstrates testing string manipulation properties.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/vitest/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, fc } from '@fast-check/vitest';\n\n// for all a, b, c strings\n// b is a substring of a + b + c\ntest.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {\n  return (a + b + c).includes(b);\n});\n\n// same property but using named values\ntest.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {\n  return (a + b + c).includes(b);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic fast-check Setup for ReDOS Detection in JavaScript\nDESCRIPTION: Template for creating a basic fast-check property test that detects excessive execution time in an algorithm. It measures execution time and fails the test if it exceeds a specified threshold.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport fc from 'fast-check';\n\nconst timeLimitMs = 1_000; // TODO: specify a limit based on the algorithm\nconst arbitraries = []; // TODO: our arbitraries or generators for random data\nfc.assert(\n  fc.property(...arbitraries, (...inputs) => {\n    const startTime = performance.now();\n    try {\n      algorithm(...inputs);\n    } catch (err) {}\n    const endTime = performance.now();\n    const delayMs = endTime - startTime;\n    if (delayMs > timeLimitMs) {\n      throw new Error(`The computation of algorithm(...inputs) took ${delayMs}ms`);\n    }\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: One-time Random Testing Mode Example\nDESCRIPTION: Demonstrates how to use the one-time random testing mode to introduce controlled randomness in tests while maintaining reproducibility. Shows usage of the test helper with random generators for string values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/vitest/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, fc } from '@fast-check/vitest';\nimport { expect } from 'vitest';\n\n// You can provide a fixed seed to force a replay by adding this line:\n// >>  fc.configureGlobal({ seed })\n// Eventually you can disable shrinking capabilities with:\n// >>  fc.configureGlobal({ endOnFailure: false })\n// >>  // or combine it with the one above if you need both\n\ntest('test relying on randomness', ({ g }) => {\n  // Arrange\n  const user = {\n    firstName: g(fc.string),\n    lastName: g(fc.string),\n  };\n\n  // Act\n  const displayName = computeDisplayName(user);\n\n  // Assert\n  expect(displayName).toContain(user.firstName);\n});\n\ntest('test not relying on randomness', () => {\n  // your test\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Strings with Regular Expression Patterns\nDESCRIPTION: Examples of using stringMatching to generate strings that match specific regex patterns. Includes patterns for matching programming languages, RGB colors, UUIDs, and IP addresses.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/string.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.stringMatching(/\\s(html|php|css|java(script)?)\\s/);\n\nfc.stringMatching(/^rgb\\((?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d),(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d),(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\)$/);\n\nfc.stringMatching(/^[0-9a-f]{8}-[0-9a-f]{4}-[12345][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/);\n\nfc.stringMatching(\n  /^(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)$/\n);\n```\n\n----------------------------------------\n\nTITLE: Property-Based Test Implementation with fast-check\nDESCRIPTION: Implementation of a property-based test that verifies the sorting algorithm maintains ascending order for any array of integers. Uses fast-check to generate test cases automatically.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/our-first-property-based-test.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should sort numeric elements from the smallest to the largest one', () => {\n  fc.assert(\n    fc.property(fc.array(fc.integer()), (data) => {\n      const sortedData = sortNumbersAscending(data);\n      for (let i = 1; i < data.length; ++i) {\n        expect(sortedData[i - 1]).toBeLessThanOrEqual(sortedData[i]);\n      }\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Recommended Implementation of Faker Integration with fast-check in TypeScript\nDESCRIPTION: This code snippet provides the recommended implementation for integrating Faker with fast-check. It creates a custom Arbitrary class that uses the random generator passed by fast-check to ensure efficient and well-distributed value generation. This implementation addresses the limitations of the naive approach.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, Randomizer, base } from '@faker-js/faker';\nimport fc from 'fast-check';\n\nclass FakerBuilder<TValue> extends fc.Arbitrary<TValue> {\n  constructor(private readonly generator: (faker: Faker) => TValue) {\n    super();\n  }\n  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<TValue> {\n    const randomizer: Randomizer = {\n      next: (): number => mrng.nextDouble(),\n      seed: () => {}, // no-op, no support for updates of the seed, could even throw\n    };\n    const customFaker = new Faker({ locale: base, randomizer });\n    return new fc.Value(this.generator(customFaker), undefined);\n  }\n  canShrinkWithoutContext(value: unknown): value is TValue {\n    return false;\n  }\n  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<TValue>> {\n    return fc.Stream.nil();\n  }\n}\n\nfunction fakerToArb<TValue>(generator: (faker: Faker) => TValue): fc.Arbitrary<TValue> {\n  return new FakerBuilder(generator);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Continuous Fuzzing Test\nDESCRIPTION: Demonstrates how to use fast-check in fuzzing mode by combining the never-failing predicate wrapper with a high number of test runs.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fuzzing.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\n\nfc.configureGlobal({ numRuns: 1_000_000 });\n\ntest('fuzz predicate against arbitraries', () => {\n  fc.assert(fc.property(...arbitraries, neverFailingPredicate(predicate)));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a scheduleCall Helper Function\nDESCRIPTION: This utility function helps schedule function calls within the scheduler. It's useful for testing scenarios with concurrent operations, ensuring the function call becomes part of the scheduler's task queue.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleCall = <T>(s: Scheduler, f: () => Promise<T>) => {\n  s.schedule(Promise.resolve('Start the call')).then(() => f());\n};\n\n// Calling doStuff will be part of the task scheduled in s\nscheduleCall(s, () => doStuff());\n```\n\n----------------------------------------\n\nTITLE: Basic String Generation with fast-check\nDESCRIPTION: Demonstrates basic string generation with default settings using fc.string(). Generates strings containing ASCII grapheme characters.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string();\n// Examples of generated values: \"JT>\\\"C9k\", \"h]iD\\\"27;\", \"S\", \"n\\\\Ye\", \"\"\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing Fibonacci Sequence\nDESCRIPTION: Demonstrates how to write a property-based test for a Fibonacci sequence implementation using fast-check and Node.js test runner. The test verifies that fibo(n) equals fibo(n-1) + fibo(n-2) for values between 2 and 78.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-nodejs-test-runner.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('node:assert');\nconst { test } = require('node:test');\nconst fc = require('fast-check');\n\ntest('should follow the rule: fibo(n) = fibo(n-1) + fibo(n-2)', () => {\n  fc.assert(\n    fc.property(fc.integer({ min: 2, max: 78 }), (n) => {\n      assert.equal(fibo(n), fibo(n - 1) + fibo(n - 2));\n    }),\n  );\n});\n\n// Code under test: should rather be imported from another file\nfunction fibo(n) {\n  // Note: n must be in the range 0 (included) to 78 (included)\n  let a = 0;\n  if (n === 0) {\n    return a;\n  }\n  let b = 1;\n  for (let i = 1; i !== n; ++i) {\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Advanced Integration of Faker with fast-check for First Names in TypeScript\nDESCRIPTION: This code snippet demonstrates a simplified version of the advanced integration, focusing on generating first names. It provides a foundation for incorporating shrinking capabilities while maintaining the benefits of the recommended integration approach.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass FakerFirstNameBuilder extends fc.Arbitrary<string> {\n  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<string> {\n    const randomizer = { next: () => mrng.nextDouble(), seed: () => {} };\n    const customFaker = new Faker({ locale: base, randomizer });\n    return new fc.Value(customFaker.person.firstName(), undefined);\n  }\n  canShrinkWithoutContext(value: unknown): value is string {\n    return false;\n  }\n  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {\n    return fc.Stream.nil();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with Fast-Check and AVA\nDESCRIPTION: Example showing how to write a basic property test using @fast-check/ava to verify substring behavior. Uses string arbitraries and demonstrates basic assertion syntax.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testProp, fc } from '@fast-check/ava';\n\n// for all a, b, c strings\n// b is a substring of a + b + c\ntestProp('should detect the substring', [fc.string(), fc.string(), fc.string()], (t, a, b, c) => {\n  t.true((a + b + c).includes(b));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Property with Filter and Assertion in JavaScript using fast-check\nDESCRIPTION: This example shows an alternative way to define the same property as above, but using .filter() for pre-conditions and expect() for assertions. It uses a record arbitrary for more structured input.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/properties.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.property(\n  fc\n    .record({\n      maxLength: fc.nat(),\n      label: fc.string(),\n    })\n    .filter(({ maxLength, label }) => label.length <= maxLength),\n  ({ maxLength, label }) => {\n    expect(crop(label, maxLength)).toBe(label);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Replaying Model-Based Tests with fast-check\nDESCRIPTION: Example of how to replay a failed model-based test by using the seed, path and replayPath parameters provided in the failure output.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Original code\nfc.assert(\n  fc.property(\n    fc.commands(/* array of commands */),\n    checkEverythingIsOk\n  )\n);\n\n// Replay code: straight to the minimal counterexample.\n// It only replays the minimal counterexample.\nfc.assert(\n  fc.property(\n    fc.commands(\n      /* array of commands */,\n      { replayPath: 'AAAAABAAE:VF' }\n    ),\n    checkEverythingIsOk\n  ),\n  { seed: 670108017, path: '96:5', endOnFailure: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Testing for CVE-2018-3721 using fast-check and @fast-check/poisoning\nDESCRIPTION: This test case uses fast-check and @fast-check/poisoning to detect the prototype pollution vulnerability CVE-2018-3721 in lodash. It generates random objects and checks for poisoning after merging them.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-21-detect-prototype-pollution-automatically/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fc from 'fast-check';\nimport { assertNoPoisoning, restoreGlobals } from '@fast-check/poisoning';\nimport _ from 'lodash';\n\ntest('CVE-2018-3721', () => {\n  fc.assert(\n    fc\n      .property(fc.object(), fc.object(), (instance, other) => {\n        const clone = _.cloneDeep(instance); // no direct side-effects to instances coming out of fast-check\n        _.merge(clone, other);\n        assertNoPoisoning();\n      })\n      .afterEach(restoreGlobals),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Classes for List Operations\nDESCRIPTION: Implementation of three command classes (PushCommand, PopCommand, SizeCommand) that define the operations and assertions for testing the List class.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass PushCommand implements fc.Command<Model, List> {\n  constructor(readonly value: number) {}\n  check = (m: Readonly<Model>) => true;\n  run(m: Model, r: List): void {\n    r.push(this.value); // impact the system\n    ++m.num; // impact the model\n  }\n  toString = () => `push(${this.value})`;\n}\nclass PopCommand implements fc.Command<Model, List> {\n  check(m: Readonly<Model>): boolean {\n    // should not call pop on empty list\n    return m.num > 0;\n  }\n  run(m: Model, r: List): void {\n    assert.equal(typeof r.pop(), 'number');\n    --m.num;\n  }\n  toString = () => 'pop';\n}\nclass SizeCommand implements fc.Command<Model, List> {\n  check = (m: Readonly<Model>) => true;\n  run(m: Model, r: List): void {\n    assert.equal(r.size(), m.num);\n  }\n  toString = () => 'size';\n}\n```\n\n----------------------------------------\n\nTITLE: Async Queue with waitFor Implementation\nDESCRIPTION: Complete implementation showing how to schedule multiple async calls and wait for their completion using waitFor. This approach allows for delayed execution of calls.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/one-step-closer-to-real-usages.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst queued = queue(s.scheduleFunction(call));\npendingQueries.push(queued(1).then((v) => seenAnswers.push(v)));\npendingQueries.push(queued(2).then((v) => seenAnswers.push(v)));\nawait s.waitFor(Promise.all(pendingQueries));\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Property-Based Test for Queue Function in JavaScript\nDESCRIPTION: This code snippet demonstrates an asynchronous property-based test using fast-check and Jest. It tests a queue function to ensure it resolves calls in the correct order. The test uses fc.asyncProperty and a scheduler to manage asynchronous operations.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test } = require('@jest/globals');\nconst fc = require('fast-check');\nconst { queue } = require('./queue.js'); // refer to the section \"connector\" for the code\n\ntest('should resolve in call order', async () => {\n  await fc.assert(\n    fc.asyncProperty(fc.scheduler(), async (s) => {\n      // Arrange\n      const pendingQueries = [];\n      const seenAnswers = [];\n      const call = jest.fn().mockImplementation((v) => Promise.resolve(v));\n\n      // Act\n      const queued = queue(s.scheduleFunction(call));\n      pendingQueries.push(queued(1).then((v) => seenAnswers.push(v)));\n      pendingQueries.push(queued(2).then((v) => seenAnswers.push(v)));\n      await s.waitFor(Promise.all(pendingQueries));\n\n      // Assert\n      expect(seenAnswers).toEqual([1, 2]);\n    }),\n  );\n});\n\n// Code under test: should rather be imported from another file\nfunction queue(fun) {\n  let lastQuery = Promise.resolve();\n  return (...args) => {\n    const currentQuery = fun(...args);\n    const returnedQuery = lastQuery.then(() => currentQuery);\n    lastQuery = currentQuery;\n    return returnedQuery;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Zod Schema Validation with fast-check\nDESCRIPTION: Shows how to convert Zod validators into fast-check arbitraries for property-based testing of user data structures.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as z from 'zod';\nimport * as fc from 'fast-check';\nimport { ZodFastCheck } from 'zod-fast-check';\n\nconst User = z.object({ firstName: z.string(), lastName: z.string() });\nconst userArbitrary = ZodFastCheck().inputOf(User);\n\ntest(\"User's full name always contains their first and last names\", () => {\n  fc.assert(\n    fc.property(userArbitrary, (user) => {\n      const parsedUser = User.parse(user);\n      const fullName = `${parsedUser.firstName} ${parsedUser.lastName}`;\n      expect(fullName).toContain(user.firstName);\n      expect(fullName).toContain(user.lastName);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Batch of Calls in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement a single batch of calls using a for loop and a queue function. It generates a specified number of calls and adds them to a queue for execution.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/multiple-batches-of-calls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst queued = queue(s.scheduleFunction(call));\nfor (let id = 0; id !== numCalls; ++id) {\n  expectedAnswers.push(id);\n  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));\n}\nawait s.waitFor(Promise.all(pendingQueries));\n```\n\n----------------------------------------\n\nTITLE: Basic Property Testing with @fast-check/jest\nDESCRIPTION: Example demonstrating basic property testing with @fast-check/jest using arrays of arbitrary generators and named parameters. Shows how to test that a string contains its substrings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, fc } from '@fast-check/jest';\n\n// for all a, b, c strings\n// b is a substring of a + b + c\ntest.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {\n  return (a + b + c).includes(b);\n});\n\n// Or the exact same test but based on named parameters\ntest.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {\n  return (a + b + c).includes(b);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Values in fast-check Property Tests\nDESCRIPTION: Examples of how to define custom test values for single and multiple parameter properties using the assert function's examples option. Shows syntax for both single and multiple parameter scenarios.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/user-definable-values.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// For a one parameter property\nfc.assert(fc.property(fc.nat(), myCheckFunction), {\n  examples: [\n    [0], // first example I want to test\n    [Number.MAX_SAFE_INTEGER],\n  ],\n});\n\n// For a multiple parameters property\nfc.assert(fc.property(fc.string(), fc.string(), fc.string(), myCheckFunction), {\n  examples: [\n    // Manual case 1\n    [\n      'replace value coming from 1st fc.string',\n      'replace value coming from 2nd fc.string',\n      'replace value coming from 3rd fc.string',\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the SchedulerSequenceItem Type in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript type for SchedulerSequenceItem, which is used to build sequences of operations in the scheduler. It can be either an object with builder function and label, or a direct function that returns a Promise.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SchedulerSequenceItem<TMetadata> =\n  | { builder: () => Promise<any>; label: string; metadata?: TMetadata }\n  | (() => Promise<any>);\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration Examples\nDESCRIPTION: Advanced usage examples showing how to configure test parameters, use test modifiers like .only and .skip, and implement property-based tests with different formats.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/vitest/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { it, test, fc } from '@fast-check/vitest';\n\ntest.prop([fc.nat(), fc.nat()], { seed: 4242 })('should replay the test for the seed 4242', (a, b) => {\n  return a + b === b + a;\n});\n\ntest.skip.prop([fc.string()])('should be skipped', (text) => {\n  return text.length === [...text].length;\n});\n\ndescribe('with it', () => {\n  it.prop([fc.nat(), fc.nat()])('should run too', (a, b) => {\n    return a + b === b + a;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Generation with fast-check\nDESCRIPTION: This code snippet demonstrates how to use fc.object() to generate complex JavaScript objects with medium depth size and a maximum depth of 1000. It includes a note explaining the necessity of specifying maxDepth to avoid using default values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object({\n  depthSize: 'medium',\n  maxDepth: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Using scheduleSequence with React Components\nDESCRIPTION: This example demonstrates using scheduleSequence to test a React component with multiple rerenders in a specific order. It schedules a sequence of operations to change the userId prop of a UserProfilePage component.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Let suppose:\n// - s: Scheduler\n\nconst initialUserId = '001';\nconst otherUserId1 = '002';\nconst otherUserId2 = '003';\n\n// render profile for user {initialUserId}\n// Note: api calls to get back details for one user are also scheduled\nconst { rerender } = render(<UserProfilePage userId={initialUserId} />);\n\ns.scheduleSequence([\n  async () => rerender(<UserProfilePage userId={otherUserId1} />),\n  async () => rerender(<UserProfilePage userId={otherUserId2} />),\n]);\n\nawait s.waitAll();\n// expect to see profile for user otherUserId2\n```\n\n----------------------------------------\n\nTITLE: Testing Unique Letter Filter Function\nDESCRIPTION: A black-box testing scenario where property-based tests need to be written to verify a function that filters duplicate letters based on sender IDs. The letters are objects containing an 'id' field with string values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-02-advent-of-pbt-day-2/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example letter object structure:\n{\n  id: \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing String Contains Method with Mocha and Fast-Check\nDESCRIPTION: Example showing how to use fast-check with Mocha to test string containment properties. Demonstrates two test cases: checking if a string contains itself and if a concatenated string contains its substring.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\n\n// Code under test\nconst contains = (text, pattern) => text.indexOf(pattern) >= 0;\n\n// Properties\ndescribe('properties', () => {\n  // string text always contains itself\n  it('should always contain itself', () => {\n    fc.assert(fc.property(fc.string(), (text) => contains(text, text)));\n  });\n  // string a + b + c always contains b, whatever the values of a, b and c\n  it('should always contain its substrings', () => {\n    fc.assert(\n      fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {\n        // Alternatively: no return statement and direct usage of expect or assert\n        return contains(a + b + c, b);\n      }),\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Property Testing with Jest Variants\nDESCRIPTION: Examples showing advanced usage with custom fast-check parameters, Jest's .skip modifier, and the alternative 'it' syntax. Demonstrates various test configurations including setting a specific random seed.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { it, test, fc } from '@fast-check/jest';\n\n// With custom `fc.Parameters`, here { seed: 4242 }\ntest.prop([fc.nat(), fc.nat()], { seed: 4242 })('should replay the test for the seed 4242', (a, b) => {\n  return a + b === b + a;\n});\n\n// With .skip\ntest.skip.prop([fc.string()])('should be skipped', (text) => {\n  return text.length === [...text].length;\n});\n\n// With it version\ndescribe('with it', () => {\n  it.prop([fc.nat(), fc.nat()])('should run too', (a, b) => {\n    return a + b === b + a;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Valid Date Values in JavaScript\nDESCRIPTION: Uses fc.date() with the noInvalidDate option set to true, ensuring that 'Invalid Date' is never generated.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/date.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.date({ noInvalidDate: true });\n// Examples of generated values:\n// • new Date(\"-043663-07-08T11:17:34.486Z\")\n// • new Date(\"-169183-12-11T00:28:46.358Z\")\n// • new Date(\"1969-12-31T23:59:59.988Z\")\n// • new Date(\"1969-12-31T23:59:59.984Z\")\n// • new Date(\"-271821-04-20T00:00:00.033Z\")\n// …\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Synchronous Property with Hooks in JavaScript using fast-check\nDESCRIPTION: This snippet shows how to define a synchronous property with beforeEach and afterEach hooks in fast-check. These hooks allow for setup and teardown steps before and after each property test execution.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/properties.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.property(...arbitraries, (...args) => {})\n  .beforeEach((previousBeforeEach) => {})\n  .afterEach((previousAfterEach) => {});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Queue Testing with Query Monitoring\nDESCRIPTION: Improved implementation that monitors concurrent query execution by tracking pending queries and detecting overlapping calls.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/wrapping-up.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scheduledCall = s.scheduleFunction(call);\nlet concurrentQueriesDetected = false;\nlet queryPending = false;\nconst monitoredScheduledCall = (...args) => {\n  concurrentQueriesDetected ||= queryPending;\n  queryPending = true;\n  return scheduledCall(...args).finally(() => (queryPending = false));\n};\nconst queued = queue(monitoredScheduledCall);\n//...\nexpect(concurrentQueriesDetected).toBe(false);\n```\n\n----------------------------------------\n\nTITLE: String Generation with Length Range\nDESCRIPTION: Generates strings with both minimum and maximum length constraints between 4 and 6 characters.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ minLength: 4, maxLength: 6 });\n// Note: Any string containing between 4 (included) and 6 (included) characters\n// Examples of generated values: \"Trxlyb\", \"&&@%4\", \"s@IO\", \"0\\\"zM\", \"}#\\\"$\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Prototype Poisoning with @fast-check/poisoning\nDESCRIPTION: Example of using @fast-check/poisoning to detect and prevent prototype poisoning in conjunction with fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\nimport { assertNoPoisoning, restoreGlobals } from '@fast-check/poisoning';\n\nconst ignoredRootRegex = /^(__coverage__|console)$/;\nfunction poisoningAfterEach() {\n  try {\n    assertNoPoisoning({ ignoredRootRegex });\n  } catch (err) {\n    restoreGlobals({ ignoredRootRegex });\n    throw err;\n  }\n}\nfc.configureGlobal({ afterEach: poisoningAfterEach });\n\ntest('should detect the substring', () => {\n  fc.assert(\n    fc.property(fc.string(), fc.string(), fc.string(), (a, b, c) => {\n      expect(isSubstring(a + b + c, b)).toBe(true);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Date Values within a Specific Range in JavaScript\nDESCRIPTION: Uses fc.date() with both minimum and maximum date constraints to generate dates within the year 2000.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/date.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.date({ min: new Date('2000-01-01T00:00:00.000Z'), max: new Date('2000-12-31T23:59:59.999Z') });\n// Examples of generated values:\n// • new Date(\"2000-05-15T03:02:40.263Z\")\n// • new Date(\"2000-10-22T03:00:45.936Z\")\n// • new Date(\"2000-02-25T19:00:10.679Z\")\n// • new Date(\"2000-12-31T23:59:59.997Z\")\n// • new Date(\"2000-01-04T14:12:03.484Z\")\n// …\n```\n\n----------------------------------------\n\nTITLE: String Generation with Grapheme Unit\nDESCRIPTION: Generates strings using printable graphemes that may consist of multiple code points. Length is measured in terms of visual entities.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: 'grapheme' });\n// Note: Any string made only of printable graphemes possibly made of multiple code points.\n// With 'grapheme', minLength (resp. maxLength) refers to length in terms of graphemes (visual entities).\n// As an example, \"\\u{0061}\\u{0300}\" has a length of 1 in this context, as it corresponds to the visual entity: \"à\".\n// Examples of generated values: \"length\", \"🡓𑨭\", \"🚌ﾱॶ🥄ၜ㏹\", \"key\", \"callஈcall\"\n```\n\n----------------------------------------\n\nTITLE: Using scheduleSequence for Ordered Execution in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the scheduleSequence helper in fast-check to run tasks in an ordered sequence. It shows the structure of a scheduled sequence with multiple async tasks.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/multiple-batches-of-calls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { task } = s.scheduleSequence([\n  async () => {\n    // 1st item:\n    // Runnning something for the 1st item.\n  },\n  async () => {\n    // 2nd item:\n    // Runnning something for the 2nd item.\n    // Will never start before the end of `await firstItem()`.\n    // Will have to be scheduled by the runner to run, in other words, it may start\n    // very long after the 1st item.\n  },\n]);\n\n// The sequence also provides a `task` that can be awaited in order to know when all items\n// of the sequence have been fully executed. It also provides other values such as done or\n// faulty if you want to know bugs that may have occurred during the sechduling of it.\n```\n\n----------------------------------------\n\nTITLE: Generating Uint16Array Values with fast-check\nDESCRIPTION: Generate Uint16Array instances with configurable value ranges (0 to 65535) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uint16Array();\n// Examples of generated values:\n// • Uint16Array.from([22507,50336,29220])\n// • Uint16Array.from([3,56136])\n// • Uint16Array.from([2769,5763,11647,10948,13743,23390,60319,8480])\n// • Uint16Array.from([10545,40641,64196])\n// • Uint16Array.from([10645,45125,552,37585,55875])\n// • …\n\nfc.uint16Array({ max: 42, minLength: 1 });\n// Examples of generated values:\n// • Uint16Array.from([40,10,16,0,0,41])\n// • Uint16Array.from([22,28])\n// • Uint16Array.from([24])\n// • Uint16Array.from([38])\n// • Uint16Array.from([1])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Generating Uint8Array Values with fast-check\nDESCRIPTION: Generate Uint8Array instances with configurable value ranges (0 to 255) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uint8Array();\n// Examples of generated values:\n// • Uint8Array.from([146,85,17,121,55,177])\n// • Uint8Array.from([])\n// • Uint8Array.from([10,89])\n// • Uint8Array.from([103,180,114,14,118,92,72,6,30])\n// • Uint8Array.from([83,73,147,245,64,203,161,246,99])\n// • …\n\nfc.uint8Array({ max: 42, minLength: 1 });\n// Examples of generated values:\n// • Uint8Array.from([16])\n// • Uint8Array.from([13,11,41,33,31,7,28,4,17,38,19])\n// • Uint8Array.from([15,11,30,9,12])\n// • Uint8Array.from([5,14,37])\n// • Uint8Array.from([28,3,6,15,0,4,6,17,38,1,40])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Generating fast-check Arbitraries from TypeSpec Models\nDESCRIPTION: JavaScript code generated from TypeSpec models using typespec-fast-check, creating fast-check arbitraries for Car, Address, and Person.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Generated from TypeSpec using `typespec-fast-check`\n\nimport fc from 'fast-check';\n\nexport const Car = fc.record({\n  /** Kind of car */\n  kind: fc.constantFrom('ev', 'ice'),\n  /** Brand of the car */\n  brand: fc.string(),\n  /** Model of the car */\n  model: fc.string(),\n});\n\n/** Represents an address */\nexport const Address = fc.record({\n  street: fc.string(),\n  city: fc.string(),\n  country: fc.string(),\n});\n\nexport const Person = fc.record(\n  {\n    /** The person's first name. */\n    firstName: fc.string(),\n    /** The person's last name. */\n    lastName: fc.string(),\n    /** Age in years which must be equal to or greater than zero. */\n    age: fc.nat(),\n    /** Person address */\n    address: Address,\n    /** List of nick names */\n    nickNames: fc.array(fc.string()),\n    /** List of cars person owns */\n    cars: fc.array(Car),\n  },\n  {\n    requiredKeys: ['firstName', 'lastName', 'age', 'address'],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Faker.js Integration with Fast-Check\nDESCRIPTION: Implementation of a wrapper to use Faker.js with fast-check, ensuring reproducible random data generation through proper seeding.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fake-data.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\nimport { faker } from '@faker-js/faker';\n\nconst fakerToArb = (fakerGen) => {\n  return fc\n    .noShrink(\n      fc.noBias(\n        fc.integer(),\n      ),\n    )\n    .map((seed) => {\n      faker.seed(seed);\n      return fakerGen();\n    });\n};\n\nconst streetAddressArb = fakerToArb(faker.address.streetAddress);\nconst customArb = fakerToArb(() => faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));\n```\n\n----------------------------------------\n\nTITLE: Setting up and running property tests with @fast-check/worker\nDESCRIPTION: Example showing how to use @fast-check/worker to run property tests in dedicated worker threads. The code demonstrates importing necessary modules, setting up a property with propertyFor(), and executing the test with assert(). This approach prevents infinite loops from blocking the main thread.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/worker/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test } from '@jest/globals';\nimport fc from 'fast-check';\nimport { isMainThread } from 'node:worker_threads';\nimport { assert, propertyFor } from '@fast-check/worker';\n\nconst property = propertyFor(new URL(import.meta.url)); // or propertyFor(pathToFileURL(__filename)) in commonjs\nconst p1 = property(fc.nat(), fc.nat(), (start, end) => {\n  // starting a possibly infinite loop\n  for (let i = start; i !== end; ++i) {\n    // doing stuff...\n  }\n});\n\nif (isMainThread) {\n  test('should assess p1', async () => {\n    await assert(p1, { timeout: 1000 });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using the schedule Method with Promises\nDESCRIPTION: This example demonstrates how to use the scheduler's schedule method to control the execution order of promises. It shows that even if shortTask is naturally quicker than longTask, the scheduler can decide which one resolves first.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Let suppose:\n// - s        : Scheduler\n// - shortTask: Promise   - Very quick operation\n// - longTask : Promise   - Relatively long operation\n\nshortTask.then(() => {\n  // not impacted by the scheduler\n  // as it is directly using the original promise\n});\n\nconst scheduledShortTask = s.schedule(shortTask);\nconst scheduledLongTask = s.schedule(longTask);\n\n// Even if in practice, shortTask is quicker than longTask\n// If the scheduler selected longTask to end first,\n// it will wait longTask to end, then once ended it will resolve scheduledLongTask,\n// while scheduledShortTask will still be pending until scheduled.\nawait s.waitOne();\n```\n\n----------------------------------------\n\nTITLE: Limiting Object Depth in JavaScript using fast-check\nDESCRIPTION: Demonstrates how to limit the depth of generated objects using the 'maxDepth' option set to 0.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object({\n  maxDepth: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Strings with Fast-Check\nDESCRIPTION: Shows how to generate valid JSON string representations using fc.json(). Supports generating primitives and complex nested objects with customizable depth and string character sets.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/file.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.json();\n// Examples of generated values:\n// • \"[\\\"oU6LT>'\\\",{\\\"QZ#YUZNw\\\":null,\\\"#\\\":null,\\\")>*\\\":{\\\"q&B1cUDn=\\\":\\\"CZTPpisxH\\\",\\\"u`)})\\\":\\\"_a-\\\",\\\"\\\":null},\\\"dY~Dn>k\\\":true,\\\"=nC#&uS5l%\\\":\\\"0\\\\\\\"j-o,JV\\\",\\\"TX[OKj\\\":-1.7084671585468263e+151,\\\"\\\\\\\"\\\":true,\\\"@(:<LUW\\\":\\\"s-JYYB\\\"},[]]\"\n// • \\\"al[->g\\\"\"\n// • \"null\"\n// • \"-5e-323\"\n// • \"[null,-1.5485504457576672e+192,null,{},-1.417727947024272e-287,null,null,null]\"\n// • …\n\nfc.json({ noUnicodeString: false });\n// Examples of generated values:\n// • \"{}\"\n// • \"[{\\\"󜁳򁿳򎗯􈤘񖇅\\\":null,\\\"򈷩𫨹􏥃򤵪񥉨񢦜꣙\\\":[null,\\\"򉲨򛨰𜥲񆠉򁀿񇆾􀤯񾱄\\\"],\\\"__def\\\":\\\"񥛡\\\",\\\"𴂏򰷳𩪎񡨫\\\":true,\\\"\\u0012􏿺\\\":\\\"\\\",\\\"􍥚󛂾𓴒\\\":false},[3.5931489320423776e+139,[true,\\\"󌘅񪜆󗛃󎩻𙹖򞠚򺳵񨶖\\\",false,{\\\"􊆪򓔝򘥬𔧥󴓌򩁆\\\":null,\\\"\\\":\\\"󌽡𗀥󚨿󊭹򎻎񀓜򧅘򏜣󨓚񯄈\\\",\\\"𽸧򽂵񯆎񷡰𑴵񞱒\\\":[true,\\\"򀲑򿒦\\\",true,\\\"􊔹񒚡𣉟𳡸񮋳󳝶\\\",false,-4.119935921393037e+259,null,-8.9364525362984475e+248]},\\\"򸀿󳿴񥘡򪠾򃰧򣖏\\\",\\\"󱝇򹢖𬂏񠤫󴕠򒐧\\\"]]]\"\n// • \\\"򁤇𫍯􏿬\\u0004񞋰\\u0005򟱉򳟔󽐾\\\"\"\n\nfc.json({ maxDepth: 0 });\n// Examples of generated values: \"null\", \"\\\"T\\\"\", \"-1.6050118268310372e-215\", \"true\", \"\\\"Ep\\\"\"…\n\nfc.json({ maxDepth: 1 });\n// Examples of generated values: \"{\\\"V~<\\\\\\\"#}\\\":\\\"apply\\\"}\", \"{\\\"DZ&2@~yE\\\":4.016561322014934e-232}\", \"null\", \"true\", \"{}\"…\n\nfc.json({ depthSize: 'medium' });\n// Examples of generated values:\n// • \"4.4e-323\"\n// • \"[\\\"v!56\\\",true,{\\\"n.Z-KP\\\":\\\"WeB\\\",\\\"%sT\\\":true,\\\"+vJj71IB1\\\":\\\"p\\\\\\\"9|V\\\\\\\".\\\",\\\"B~U)!j6>:0\\\":\\\"?]2R)hy\\\",\\\"<C\\\":5.763682596504741e-124,\\\"g\\\":5.506486779037679e+86,\\\"^\\\":false,\\\"0beh\\\":null},null,true,false,null]\"\n// • \"5e-323\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Property Timeout in Fast-Check\nDESCRIPTION: Demonstrates how to use the timeout option with assert function to limit execution time of async predicates. The example shows testing package dependencies with a 1-second timeout limit per predicate execution.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/timeouts.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait fc.assert(\n  fc.asyncProperty(packagesArb, fc.nat(), async (packages, selectedSeed) => {\n    // Arrange\n    const allPackagesNames = Array.from(packages.keys());\n    const selectedPackage = allPackagesNames[allPackagesNames.length % selectedSeed];\n\n    // Act\n    const registry = new FakeRegistry(packages);\n    const dependencies = await extractAllDependenciesFor(selectedPackage, registry);\n\n    // Assert\n    for (const dependency of dependencies) {\n      expect(allPackagesNames).toContain(dependency.name);\n    }\n  }),\n  { timeout: 1000 },\n);\n```\n\n----------------------------------------\n\nTITLE: Controlled Randomness Test Example with fast-check in TypeScript\nDESCRIPTION: A test rewritten using fast-check's generator function to provide controlled randomness. This approach eliminates flakiness while maintaining test simplicity and reproducibility.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-03-28-beyond-flaky-tests-bringing-controlled-randomness-to-vitest/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import { test, fc } from '@fast-check/vitest';\n\ntest('considered active if its end timestamp is 100ms after now', ({ g }) => {\n  // Arrange\n  const now = g(fc.nat);\n  const user: User = {\n    // many other fields...\n    endDateTimestamp: now + 100,\n  };\n\n  // Act\n  const active = isStillActive(user, now);\n\n  // Assert\n  expect(active).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Falsy Values with fast-check\nDESCRIPTION: Demonstrates how to generate falsy values (false, null, undefined, 0, '', NaN, 0n) using the falsy arbitrary. Includes an option to include BigInt values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/others.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.falsy();\n// Examples of generated values: null, 0, false, undefined, \"\"…\n\nfc.falsy({ withBigInt: true });\n// Examples of generated values: null, Number.NaN, false, undefined, 0n…\n```\n\n----------------------------------------\n\nTITLE: Implementing a Never-failing Predicate Wrapper\nDESCRIPTION: Creates a function that wraps predicates to catch failures and report them to files instead of terminating the testing process. This allows for continuous fuzzing even when errors are found.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fuzzing.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\nimport fs from 'fs';\nimport process from 'process';\n\nlet failureId = 0;\nfunction reportFailure(inputs, error) {\n  const fileName = `failure-pid${process.pid}-${++failureId}.log`;\n  const fileContent = `Counterexample: ${fc.stringify(inputs)}\\n\\nError: ${error}`;\n  fs.writeFile(fileName, fileContent);\n}\n\nfunction neverFailingPredicate(predicate) {\n  return (...inputs) => {\n    try {\n      const out = predicate(...inputs);\n      if (out === false) {\n        reportFailure(inputs, undefined);\n      }\n    } catch (err) {\n      reportFailure(inputs, err);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Async Queue with waitAll Implementation\nDESCRIPTION: Alternative implementation using waitAll instead of waitFor. This approach requires all promises to be scheduled before calling waitAll.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/one-step-closer-to-real-usages.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queued = queue(s.scheduleFunction(call));\nqueued(1).then((v) => seenAnswers.push(v));\nqueued(2).then((v) => seenAnswers.push(v));\nawait s.waitAll();\n```\n\n----------------------------------------\n\nTITLE: Mocking Async Function\nDESCRIPTION: Simple mock implementation of an async function that immediately resolves with the input value using Promise.resolve().\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/your-first-race-condition-test.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst call = jest.fn().mockImplementation((v) => Promise.resolve(v));\n```\n\n----------------------------------------\n\nTITLE: Basic Tree Structure Generation using fc.letrec\nDESCRIPTION: Demonstrates how to create a basic recursive tree structure with nodes and leaves using fc.letrec. The tree can contain either leaf nodes with natural numbers or internal nodes with left and right children.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/recursive-structure.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tree } = fc.letrec((tie) => ({\n  tree: fc.oneof({ depthSize: 'small', withCrossShrink: true }, tie('leaf'), tie('node')),\n  node: fc.record({\n    left: tie('tree'),\n    right: tie('tree'),\n  }),\n  leaf: fc.nat(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Santa Code Sequence in JavaScript\nDESCRIPTION: This code snippet illustrates the first few values in the Santa Code sequence. It shows how each number in the sequence differs from the previous one by exactly one bit.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-16-advent-of-pbt-day-16/index.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- 0 → `00`\n- 1 → `01`\n- 3 → `11`\n- 2 → `10`\n```\n\n----------------------------------------\n\nTITLE: Generating Int8Array Values with fast-check\nDESCRIPTION: Generate Int8Array instances with configurable value ranges (-128 to 127) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.int8Array();\n// Examples of generated values:\n// • Int8Array.from([122,3,-124])\n// • Int8Array.from([75,-49,-14])\n// • Int8Array.from([-125])\n// • Int8Array.from([-38,57,44,43])\n// • Int8Array.from([-5,3,-122,-7,-59,-122])\n// • …\n\nfc.int8Array({ min: 0, minLength: 1 });\n// Examples of generated values:\n// • Int8Array.from([94,100,90,3,30,8,19,78])\n// • Int8Array.from([1,123,4,3,0,48,125,86,2,91])\n// • Int8Array.from([5,58])\n// • Int8Array.from([126,5,100,127,123])\n// • Int8Array.from([97,6,121])\n// • …\n```\n\n----------------------------------------\n\nTITLE: String Generation with ASCII Graphemes\nDESCRIPTION: Generates strings using only printable ASCII characters with length measured in code units.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: 'grapheme-ascii' });\n// Note: Any string made only of printable ascii characters.\n// With 'grapheme-composite', minLength (resp. maxLength) refers to length in terms of code units aka chars (equivalent to code points and visual entities for this type).\n// Examples of generated values: \"+\", \"y\\\\m4\", \")H\", \"}q% b'\", \"ZvT`W\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Call Queue with ID Tracking\nDESCRIPTION: More sophisticated implementation using call IDs to track and manage the queue state, handling multiple calls more effectively.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/wrapping-up.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet callId = 0;\nlet previous = undefined;\nfunction fireCall(call) {\n  const currentCallId = ++callId;\n  const next = previous === undefined ? call() : previous.then(() => call());\n  previous = next.then(() => {\n    if (callId === currentCallId) {\n      previous = undefined;\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Array of Objects with Custom Selector in JavaScript\nDESCRIPTION: Demonstrates how to generate an array of unique objects based on a specific property (id) using fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(\n  fc.record({\n    id: fc.nat(),\n    name: fc.constantFrom('Anna', 'Paul'),\n  }),\n  { selector: (entry) => entry.id },\n);\n```\n\n----------------------------------------\n\nTITLE: Shelf Management API Interface Definition\nDESCRIPTION: Defines the core API methods for the shelf management system including createShelf for initialization, put for adding items, pop for removing items, and isEmpty for checking shelf status. Each method's return values and failure conditions are specified.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-15-advent-of-pbt-day-15/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateShelf() // Creates a new shelf\nshelf.put()    // Returns position or -1 if full\nshelf.pop()    // Returns oldest item position or -1 if empty\nshelf.isEmpty() // Returns true/false\n```\n\n----------------------------------------\n\nTITLE: Implementing assert Using check in JavaScript\nDESCRIPTION: This example shows how to implement the assert function using the check function in JavaScript. It demonstrates error handling and reporting for failed property checks.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction assert(property, params) {\n  // In this example we only support synchronous properties.\n  // To support both of them, you could use `property.isAsync()` and `asyncDefaultReportMessage`.\n  const out = fc.check(property, params);\n  if (out.failed) {\n    throw new Error(fc.defaultReportMessage(out), { cause: out.errorInstance });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using fc.pre as Type Assertion in TypeScript\nDESCRIPTION: Demonstrates how fc.pre now functions as a proper assertion function in TypeScript 3.7+, helping refine types without additional type assertions. The example shows type narrowing for an optional match result.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-03-04-whats-new-in-fast-check-3-16-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// entries: {value: T}\nconst match = entries.find((e) => e.value === needle);\nfc.pre(match !== undefined);\n// ✅ Now (≥3.16.0): match: {value: T}\n// ❌ Previous (<3.16.0): match: {value: T} | undefined\n```\n\n----------------------------------------\n\nTITLE: Updated API for Improved Faker Integration with fast-check in TypeScript\nDESCRIPTION: This code snippet introduces an updated API for integrating Faker with fast-check. It uses a dedicated instance of Faker to avoid global side effects. The implementation is not provided in this snippet.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fakerToArb<TValue>(generator: (faker: Faker) => TValue): fc.Arbitrary<TValue> {\n  throw new Error('Not implemented yet');\n}\n```\n\n----------------------------------------\n\nTITLE: Depth-Limited Binary Tree Generation\nDESCRIPTION: Shows how to create a binary tree with depth constraints using maxDepth parameter and depth identifiers to control the structure's growth.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/recursive-structure.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.letrec((tie) => ({\n  node: fc.record({\n    value: fc.nat(),\n    left: fc.option(tie('node'), { maxDepth: 1, depthIdentifier: 'tree' }),\n    right: fc.option(tie('node'), { maxDepth: 1, depthIdentifier: 'tree' }),\n  }),\n})).node;\n```\n\n----------------------------------------\n\nTITLE: Fast-Check Scheduler Integration\nDESCRIPTION: Enhanced test implementation using fast-check's scheduler to control async operation timing and detect race conditions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/your-first-race-condition-test.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should resolve in call order', async () => {\n  await fc.assert(fc.asyncProperty(fc.scheduler(), async (s) => {\n    // ...unchanged code...\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Generating 32-bit Floats with fast-check\nDESCRIPTION: Functions for generating 32-bit floating point numbers with configurable ranges and constraints using fc.float(). Supports infinity, NaN, and exclusion options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.float();\nfc.float({ min: 0 });\nfc.float({ noDefaultInfinity: true, noNaN: true });\nfc.float({ noDefaultInfinity: true, min: Number.NEGATIVE_INTEGER, max: Number.POSITIVE_INTEGER });\nfc.float({ min: 0, max: 1, maxExcluded: true });\nfc.float({ noInteger: true });\nfc.noBias(fc.integer({ min: 0, max: (1 << 24) - 1 }).map((v) => v / (1 << 24)));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Character Set String in TypeScript\nDESCRIPTION: Shows how to create a string arbitrary with a custom character set, specifically generating strings made of only '0' and '1' characters with a minimum length of 1.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-08-29-whats-new-in-fast-check-3-22-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfc.string({ unit: fc.constantFrom('0', '1'), minLength: 1 });\n```\n\n----------------------------------------\n\nTITLE: Implementing FizzBuzz Property Test with Deno and fast-check\nDESCRIPTION: Example of a property-based test for FizzBuzz implementation using fast-check in Deno. The test verifies that numbers divisible by 3 always contain 'Fizz' in their output. Includes both test code and the function being tested.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-deno-test-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { assertStringIncludes } from \"jsr:@std/assert\";\nimport fc from \"npm:fast-check\";\n\nDeno.test({\n  name: \"should print Fizz whenever divisible by 3\",\n  fn() {\n    fc.assert(\n      fc.property(\n        fc.nat().map((n) => n * 3),\n        (n) => {\n          assertStringIncludes(fizzbuzz(n), \"Fizz\");\n        }\n      )\n    );\n  },\n});\n\n// Code under test: should rather be imported from another file\nfunction fizzbuzz(n: number): string {\n  return n % 3 === 0\n    ? n % 5 === 0\n      ? \"Fizz Buzz\"\n      : \"Fizz\"\n    : n % 5 === 0\n    ? \"Buzz\"\n    : String(n);\n}\n```\n\n----------------------------------------\n\nTITLE: Using SameValueZero Comparator for Unique Array Generation in JavaScript\nDESCRIPTION: Demonstrates the use of SameValueZero comparator in fast-check's uniqueArray function to handle special number values differently.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN), { comparator: 'SameValueZero' });\n```\n\n----------------------------------------\n\nTITLE: Fast-Check Test Failure Output\nDESCRIPTION: Example output showing a detected performance issue where email validation exceeded the time limit. Shows the seed for reproduction, counterexample that triggered the issue, and the actual execution time that caused the failure.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Property failed after 1233 tests\n{ seed: 2051841007, path: \"1232:5:1:2:12:18:24:30:36\", endOnFailure: true }\nCounterexample: [\"aaaaaakeyconstructorcall1nl=constructorcalle.&g//{%fvf|&q+!v7@npd.z3n5vfs0ivqopytanq2ye37swpycij2a0.v6usxu6qfov9sb9rmown92tk6omw7ujl4-pa274fnbgnx0l9xdn18rq.nmsvklo9r3a-frz-2.gxqagvl7h2c5.imvj9wk-tw1rv8a.i.q3\nhpcqgdugnhc8ydfjvvcfci4k1adqgnssmkecpqmiabqux08cfrh3su5zkf.binumohcqsyzjjetfbuntgknunsjeklecfoirjngvpzi\"]\nShrunk 8 time(s)\nGot error: The computation took 1667.1613000035286ms\n```\n\n----------------------------------------\n\nTITLE: Testing with fast-check Scheduler for Race Condition Detection\nDESCRIPTION: An updated test using fast-check's scheduler to detect race conditions in React components. This approach uses the new granular act function capability to properly handle Promise resolutions in a React testing environment.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-21-whats-new-in-fast-check-3-9-0/index.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should update to the value of the last promise', async () => {\n  await fc.assert(\n    fc.asyncProperty(fc.scheduler(), async (s) => {\n      const promise1 = s.schedule(Promise.resolve(1), undefined, undefined, act);\n      const promise2 = s.schedule(Promise.resolve(2), undefined, undefined, act);\n\n      const { result, rerender } = renderHook((p) => usePromiseAsState(p), {\n        initialProps: promise1,\n      });\n      rerender(promise2);\n      expect(result.current).toBe(undefined);\n\n      await s.waitAll();\n      expect(result.current).toBe(2);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Mapping Arbitraries with .map in JavaScript\nDESCRIPTION: The .map method transforms the produced value of an arbitrary into another value. It can be used to change the type, apply calculations, or format the output.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfc.nat(1024).map((n) => n * n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.nat().map((n) => String(n));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.tuple(fc.integer(), fc.integer()).map((t) => (t[0] < t[1] ? [t[0], t[1]] : [t[1], t[0]]));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string().map((s) => `[${s.length}] -> ${s}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring fast-check for Large Input Sizes\nDESCRIPTION: Code snippet showing how to configure fast-check to generate larger inputs, which is essential for effectively detecting ReDoS vulnerabilities that often manifest with large strings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfc.configureGlobal({ baseSize: 'xlarge' });\n```\n\n----------------------------------------\n\nTITLE: Wrapping Scheduler Tasks with 'act' in JavaScript\nDESCRIPTION: Shows how to use the 'act' function to wrap all scheduled tasks in a testing environment, particularly useful for React applications. This ensures that state updates occur in the proper context during testing.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.assert(\n  fc.asyncProperty(fc.scheduler(), async s => () {\n    // Pushing tasks into the scheduler ...\n    // ....................................\n    while (s.count() !== 0) {\n      await act(async () => {\n        // This construct is mostly needed when you want to test stuff in React\n        // In the context of act from React, using waitAll would not have worked\n        // as some scheduled tasks are triggered after waitOne resolved\n        // and because of act (effects...)\n        await s.waitOne();\n      });\n    }\n  }))\n```\n\n----------------------------------------\n\nTITLE: Generating Value-Producing Functions with func\nDESCRIPTION: Creates functions that produce values using a specified arbitrary generator. Takes an arbitrary as input and generates functions that return values from that arbitrary's domain. Uses internal hashing and stringify methods.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/function.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.func(fc.nat());\n// Examples of generated values:\n// • function(...args) {\n//     // With hash and stringify coming from fast-check\n//     const outs = [18];\n//     return outs[hash('-2147483647' + stringify(args)) % outs.length];\n//   }\n```\n\n----------------------------------------\n\nTITLE: Flat-Mapping Arbitraries with .chain in JavaScript\nDESCRIPTION: The .chain method produces a new arbitrary based on a generated value. It allows for more complex transformations but may have limited shrinking capabilities.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfc.nat().chain((min) => fc.tuple(fc.constant(min), fc.integer({ min, max: 0xffffffff })));\n```\n\n----------------------------------------\n\nTITLE: Increasing Test Runs in fast-check for Better Detection\nDESCRIPTION: Example of how to increase the number of test runs in fast-check to improve the chances of finding rare vulnerabilities in well-maintained projects like Zod.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfc.assert(property, { numRuns: 1_000_000 });\n```\n\n----------------------------------------\n\nTITLE: Generating Date Values with Maximum Date Constraint in JavaScript\nDESCRIPTION: Uses fc.date() with a maximum date constraint set to January 1, 2000. This generates dates up to and including 2000-01-01.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/date.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.date({ max: new Date('2000-01-01T00:00:00.000Z') });\n// Examples of generated values:\n// • new Date(\"-201489-02-25T08:12:55.332Z\")\n// • new Date(\"1969-12-31T23:59:59.994Z\")\n// • new Date(\"1970-01-01T00:00:00.006Z\")\n// • new Date(\"1970-01-01T00:00:00.019Z\")\n// • new Date(\"-271821-04-20T00:00:00.033Z\")\n// …\n```\n\n----------------------------------------\n\nTITLE: Test with Specific Seed Configuration\nDESCRIPTION: Example of configuring a property test with a specific seed and path for reproducing failures\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/read-test-reports.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should sort numeric elements from the smallest to the largest one', () => {\n  fc.assert(\n    fc.property(fc.array(fc.integer()), (data) => {\n      /* code of the predicate */\n    }),\n    { seed: -1819918769, path: '0:...:3', endOnFailure: true },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Array of Natural Numbers in JavaScript\nDESCRIPTION: Uses fast-check to create an array of unique natural numbers between 0 and 99.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(fc.nat(99));\n```\n\n----------------------------------------\n\nTITLE: Generating Natural Numbers with fast-check\nDESCRIPTION: Functions for generating positive integers (including zero) using fc.nat(). Supports configurable upper bound with default maximum of 2147483647.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.nat();\nfc.nat(1000);\nfc.nat({ max: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Removing Bias from Arbitraries with fc.noBias in JavaScript\nDESCRIPTION: Uses fc.noBias to drop bias from an existing arbitrary, resulting in a generator that is close to equi-probable for all values in its range.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.noBias(fc.nat());\n```\n\n----------------------------------------\n\nTITLE: Generating Web URLs with fast-check\nDESCRIPTION: Generates complete web URLs following RFC 3986 and WHATWG URL Standard with configurable schemes, fragments, and query parameters.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.webUrl();\n// Examples of generated values: \"https://1e.pl/\", \"https://s.snp\", \"https://h.ot\", \"https://copze7.wrc/N/\", \"http://ay84wia.bi/%05/_\"…\n\nfc.webUrl({\n  validSchemes: ['ftp', 'ftps'],\n});\n// Examples of generated values:\n// • \"ftps://iq7rvu2my.tm/%F0%91%B3%981V&Hq\"\n// • \"ftp://7eee69dc78fg.nec\"\n// • \"ftp://hye.rbh9r2.hb\"\n// • \"ftp://hmakevcba.uis/~%F3%BC%B3%B2\"\n// • \"ftps://xb1.5787e.cew/d\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Generating Email Addresses with fast-check in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the emailAddress function from fast-check to generate random email addresses. It shows the default usage and how to customize the size of generated addresses.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.emailAddress();\n// Examples of generated values:\n// • \"4@fgqcru.ca\"\n// • \"#!iy8*vt.~#p{nam.y|na.f.afac|.t%^$v*+2di1e.43g@jcc.hl\"\n// • \"fo/2p~zq.kn'e&bfa|1`@9fqau6rah8.8i81fxjk.ox\"\n// • \"==.vra&~to=z.vdc^.=kf/'a$'2sr^.6j6gsw6^&az'.#$}mba.x!|}a@4.wk\"\n// • \"8ic6`_g00syk.}r~b3{0t/7?.!51q'.0yxj2.8wj`f?v-lr}.t6%?z*1$i2+b@cjybzi.pr\"\n// • …\n\nfc.emailAddress({ size: '-1' });\n// Note: Generate smaller email addresses compared to default. As default size is 'small' (if unchanged), it is equivalent to 'xsmall'\n// Examples of generated values: \"k.wh@l7.pc\", \"u@j.ag\", \"p.ag@1f.bj\", \"d@4.yd\", \"!@is8.gb\"…\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Array with Default SameValue Comparator in JavaScript\nDESCRIPTION: Shows how fast-check's uniqueArray function handles special number values like -0, 0, and NaN using the default SameValue algorithm.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN));\n```\n\n----------------------------------------\n\nTITLE: Using stringUnit Option with JSON Arbitrary in TypeScript\nDESCRIPTION: Example of using the new stringUnit constraint to specify character types in generated JSONs. This allows for more control over string generation within JSON structures.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfc.json({ stringUnit: 'grapheme' });\n```\n\n----------------------------------------\n\nTITLE: Generating Optional Values with fc.option in JavaScript\nDESCRIPTION: Uses fc.option to randomly choose between producing a value using the underlying arbitrary or returning nil. It can be configured with various options like frequency, nil value, and depth settings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.option(fc.nat());\n\nfc.option(fc.nat(), { freq: 2 });\n\nfc.option(fc.nat(), { freq: 2, nil: Number.NaN });\n\nfc.option(fc.string(), { nil: undefined });\n```\n\n----------------------------------------\n\nTITLE: Limiting Shrinking Capabilities with fc.limitShrink in JavaScript\nDESCRIPTION: Uses fc.limitShrink to cap the number of potential shrunk values an arbitrary could produce. This is generally not recommended except for creating complex arbitraries.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.limitShrink(fc.nat(), 3);\n```\n\n----------------------------------------\n\nTITLE: Using Context for Logging in fast-check Tests\nDESCRIPTION: Shows how to use the context arbitrary to create a logger for test runs that attaches logs to counterexamples in case of failure.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/others.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.context();\n// The produced value - let's call it ctx - can be used as a logger that will be specific to this run (and only this run).\n// It can be called as follow: ctx.log('My log')\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Tree Structure with Proper Leaf Ordering in TypeScript\nDESCRIPTION: Demonstrates the correct way to define a recursive tree structure using fc.letrec and fc.oneof, ensuring the leaf case is specified first to control depth properly.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { tree } = fc.letrec((tie) => ({\n  tree: fc.oneof(tie('leaf'), tie('node')), // Good!!!\n  node: fc.record({ left: tie('tree'), right: tie('tree') }),\n  leaf: fc.nat(),\n}));\n```\n\n----------------------------------------\n\nTITLE: Generating Web Authority Values with fast-check\nDESCRIPTION: Generates web authority strings following RFC 3986 with support for IPv4, IPv6, ports, and user info components.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.webAuthority();\n// Examples of generated values: \"23ks1pf.mgz\", \"7-ngin.sv\", \"peybeb.f9ia-gsmr.na\", \"9a1hmsddb-cm.iit\", \"xhlstwb.44ctb2efxk.fc\"…\n\nfc.webAuthority({\n  withIPv4: true,\n});\n// Examples of generated values: \"i.fb\", \"237.196.254.199\", \"7.166.63.117\", \"wz0zysek.zb\", \"252.149.163.184\"…\n```\n\n----------------------------------------\n\nTITLE: Generating Date Values with Minimum Date Constraint in JavaScript\nDESCRIPTION: Uses fc.date() with a minimum date constraint set to January 1, 2000. This generates dates from 2000-01-01 onwards.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/date.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.date({ min: new Date('2000-01-01T00:00:00.000Z') });\n// Examples of generated values:\n// • new Date(\"+199816-07-04T12:57:41.796Z\")\n// • new Date(\"2000-01-01T00:00:00.039Z\")\n// • new Date(\"2000-01-01T00:00:00.047Z\")\n// • new Date(\"2000-01-01T00:00:00.003Z\")\n// • new Date(\"+275760-09-12T23:59:59.982Z\")\n// …\n```\n\n----------------------------------------\n\nTITLE: Generating Int32Array Values with fast-check\nDESCRIPTION: Generate Int32Array instances with configurable value ranges (-2147483648 to 2147483647) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.int32Array();\n// Examples of generated values:\n// • Int32Array.from([581737874,363728213,1849261841,2086900089,-739607497,-1663538255])\n// • Int32Array.from([])\n// • Int32Array.from([-959081718,-1066774951])\n// • Int32Array.from([1932414823,-1904516172,-1076953230,327779854,-2127205258,-1298673572,503994952,-1638200570,-1729271522])\n// • Int32Array.from([-1151637165,-722646711,-1773418861,-1345402891,161175616,-1982117429,68362401,-1837239306,-204728221])\n// • …\n\nfc.int32Array({ min: 0, minLength: 1 });\n// Examples of generated values:\n// • Int32Array.from([1785106343,925226031,718971773,1586792878,400900346,1689947645,96279688,1693807166,438809160,1047878745,2063128540])\n// • Int32Array.from([1155662778,398052668,504460415,572805240])\n// • Int32Array.from([2147483628])\n// • Int32Array.from([688082383,20,17,896059968,1869735049,922750045,18])\n// • Int32Array.from([1794203980,11,13,1308253671,3])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Applying IsStrictlyEqual Comparator for Unique Array in JavaScript\nDESCRIPTION: Shows how to use the IsStrictlyEqual comparator in fast-check's uniqueArray function for strict equality comparisons.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN), { comparator: 'IsStrictlyEqual' });\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Object Depth in JavaScript using fast-check\nDESCRIPTION: Shows how to set a maximum depth for generated objects using the 'maxDepth' option set to 1.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object({\n  maxDepth: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Arbitraries with fc.oneof in JavaScript\nDESCRIPTION: Uses fc.oneof to generate one value based on one of the passed arbitraries. It randomly chooses an arbitrary at each new generation and can be configured with cross-shrinking and depth settings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.oneof(fc.string(), fc.boolean());\n\nfc.oneof(fc.string(), fc.boolean(), fc.nat());\n\nfc.oneof({ arbitrary: fc.string(), weight: 5 }, { arbitrary: fc.boolean(), weight: 2 });\n```\n\n----------------------------------------\n\nTITLE: Mapping Integer Ranges to Constants in JavaScript with fast-check\nDESCRIPTION: The mapToConstant arbitrary generates non-contiguous ranges of values by mapping integer values to constants using build functions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/constant.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.mapToConstant(\n  { num: 26, build: (v) => String.fromCharCode(v + 0x61) },\n  { num: 10, build: (v) => String.fromCharCode(v + 0x30) },\n);\n// Examples of generated values: \"6\", \"8\", \"d\", \"9\", \"r\"…\n```\n\n----------------------------------------\n\nTITLE: Generating UUID Values with Fast-Check\nDESCRIPTION: Shows various ways to generate UUIDs using fc.uuid(). Supports UUID versions 1-8 by default and can be configured to generate specific versions up to version 15. Includes examples of basic usage and version-specific generation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/identifier.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uuid();\n// Examples of generated values:\n// • \"4ebb3995-0009-1000-8b20-2254b7902e27\"\n// • \"ffffffef-50fb-40b5-aa9f-05640000001d\"\n// • \"87a8e397-ffec-8fff-8000-001a00000004\"\n// • \"17983d5d-001b-1000-98d3-6afba08e1e61\"\n// • \"7da15579-001d-1000-a6b3-4d71cf6e5de5\"\n// • …\n\nfc.uuid({ version: 4 });\n// Examples of generated values:\n// • \"00000009-2401-464f-bd6c-b85100000018\"\n// • \"ffffffea-ffe7-4fff-af56-be4ec6ccfa3c\"\n// • \"00000013-6705-4bdd-bfe3-0669d6ee4e9a\"\n// • \"ed7479b3-cef8-4562-bc9c-0b0d8b2be3ae\"\n// • \"58dbd17a-7152-4770-8d89-9485fffffff6\"\n// • …\n\nfc.uuid({ version: [4, 7] });\n// Examples of generated values:\n// • \"ffffffe8-4e61-40c1-8000-001d7f621812\"\n// • \"0000001f-b6dc-7d7d-b40c-08568ae90153\"\n// • \"0000000b-0002-4000-9003-de96d8957794\"\n// • \"8b8e8b89-251e-78e7-8000-000000000000\"\n// • \"ffffffe5-000d-4000-bfff-fff496517cc4\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Basic Object Generation in JavaScript using fast-check\nDESCRIPTION: Demonstrates the basic usage of fc.object() to generate random JavaScript objects with various types of values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object();\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Dictionary with Dynamic Identifier in JavaScript\nDESCRIPTION: Shows how to create a recursive dictionary structure using a dynamically created depthIdentifier through the createDepthIdentifier function to control recursion depth.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-03-01-whats-new-in-fast-check-3-15-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst depthIdentifier = fc.createDepthIdentifier();\nconst recursive2 = fc.letrec((tie) => ({\n  self: fc.dictionary(\n    fc.string(),\n    fc.oneof({ depthIdentifier, maxDepth: 1 }, tie('leaf'), tie('self')),\n    { depthIdentifier }, // we bind the two recursive levels together by referencing the same depthIdentifier\n  ),\n  leaf: fc.nat(),\n})).self;\n```\n\n----------------------------------------\n\nTITLE: Naive First-Call Optimization\nDESCRIPTION: Initial attempt to optimize the first call execution while maintaining queue behavior for subsequent calls.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/wrapping-up.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet previous = undefined;\nfunction fireCall(call) {\n  if (previous === undefined) {\n    previous = call();\n  } else {\n    previous = previous.then(() => call());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model-based Testing with Commands in fast-check\nDESCRIPTION: Demonstrates how to implement model-based testing using commands, including setting up command arbitraries and executing them against a model and real system.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/others.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntype Model = { /* stuff */ };\ntype Real  = { /* stuff */ };\n\nclass CommandA extends Command { /* stuff */ };\nclass CommandB extends Command { /* stuff */ };\n// other commands\n\nconst CommandsArbitrary = fc.commands([\n  fc.constant(new CommandA()),        // no custom parameters\n  fc.nat().map(s => new CommandB(s)), // with custom parameter\n  // other commands\n]);\n\nfc.assert(\n  fc.property(\n    CommandsArbitrary,\n    cmds => {\n      const s = () => ({ // initial state builder\n          model: /* new model */,\n          real:  /* new system instance */\n      });\n      fc.modelRun(s, cmds);\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Generating BigUint64Array with fast-check in JavaScript\nDESCRIPTION: Uses fc.bigUint64Array() to generate BigUint64Array instances with various configurations. Supports specifying min/max values and array length.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigUint64Array();\n// Examples of generated values:\n// • BigUint64Array.from([])\n// • BigUint64Array.from([5117275114603473262n,4394569470798804304n,6920020017401806060n,5258603306780069742n,15799194364432350385n,15072217045501931685n,9890565973553172882n,1706618215611458822n])\n// • BigUint64Array.from([8447847048858851281n])\n// • BigUint64Array.from([3878267431246446816n,18446744073709551614n,17n])\n// • BigUint64Array.from([18446744073709551606n,7n,11n,14792271127527525943n,17496620028939466016n,14087698165858284533n,1059307009916302871n])\n// • …\nfc.bigUint64Array({ max: 42n, minLength: 1 });\n// Examples of generated values:\n// • BigUint64Array.from([5n,38n,18n,24n,14n,0n,31n,38n])\n// • BigUint64Array.from([4n,1n,0n])\n// • BigUint64Array.from([13n,1n,41n,1n,15n,0n])\n// • BigUint64Array.from([1n])\n// • BigUint64Array.from([7n,32n,23n,23n,10n,9n,24n,29n,11n,21n])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Using scheduleFunction for API Call Scheduling\nDESCRIPTION: This snippet shows how to use scheduleFunction to control when promises from API calls resolve. It wraps an asynchronous getUserDetails function to make its timing controllable in tests.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Let suppose:\n// - s             : Scheduler\n// - getUserDetails: (uid: string) => Promise - API call to get details for a User\n\nconst getUserDetailsScheduled = s.scheduleFunction(getUserDetails);\n\ngetUserDetailsScheduled('user-001')\n  // What happened under the hood?\n  // - A call to getUserDetails('user-001') has been triggered\n  // - The promise returned by the call to getUserDetails('user-001') has been registered to the scheduler\n  .then((dataUser001) => {\n    // This block will only be executed when the scheduler\n    // will schedule this Promise\n  });\n\n// Unlock one of the scheduled Promise registered on s\n// Not necessarily the first one that resolves\nawait s.waitOne();\n```\n\n----------------------------------------\n\nTITLE: Writing an asynchronous property-based test with Jest connector\nDESCRIPTION: Example of an asynchronous property-based test using the @fast-check/jest connector to check a queue function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, fc } = require('@fast-check/jest');\n\ntest.prop({ s: fc.scheduler() })('should resolve in call order', async ({ s }) => {\n  // Arrange\n  const pendingQueries = [];\n  const seenAnswers = [];\n  const call = jest.fn().mockImplementation((v) => Promise.resolve(v));\n\n  // Act\n  const queued = queue(s.scheduleFunction(call));\n  pendingQueries.push(queued(1).then((v) => seenAnswers.push(v)));\n  pendingQueries.push(queued(2).then((v) => seenAnswers.push(v)));\n  await s.waitFor(Promise.all(pendingQueries));\n\n  // Assert\n  expect(seenAnswers).toEqual([1, 2]);\n});\n\n// Code under test: should rather be imported from another file\nfunction queue(fun) {\n  let lastQuery = Promise.resolve();\n  return (...args) => {\n    const currentQuery = fun(...args);\n    const returnedQuery = lastQuery.then(() => currentQuery);\n    lastQuery = currentQuery;\n    return returnedQuery;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Type for List Testing\nDESCRIPTION: Definition of a simple model type that represents a simplified version of the List class, containing only a single integer for the size of the list.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Model = { num: number };\n```\n\n----------------------------------------\n\nTITLE: Setting up fast-check development environment\nDESCRIPTION: Commands to clone the fast-check repository, install dependencies, and build the project for local development.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dubzzz/fast-check.git && cd fast-check\npnpm install\npnpm --filter fast-check build    #compile the code in packages/fast-check/src, build the packages/fast-check/lib content\n```\n\n----------------------------------------\n\nTITLE: Defining assert Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the assert function in fast-check. It supports both synchronous and asynchronous properties, throwing an error in case of failure.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assert<Ts>(property: IProperty<Ts>, params?: Parameters<Ts>): void;\nfunction assert<Ts>(property: IAsyncProperty<Ts>, params?: Parameters<Ts>): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Filtering Arbitraries with .filter in JavaScript\nDESCRIPTION: Uses .filter to apply a predicate to an existing arbitrary, keeping only values that satisfy the predicate. This allows for more specific value generation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.integer().filter((n) => n % 2 === 0);\n\nfc.integer().filter((n) => n % 2 !== 0);\n\nfc.string().filter((s) => s[0] < s[1]);\n```\n\n----------------------------------------\n\nTITLE: Generating IPv6 Addresses with fast-check\nDESCRIPTION: Generates valid IPv6 addresses supporting various formats including compressed notation and IPv4-mapped addresses.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.ipV6();\n// Examples of generated values:\n// • \"::470:6:192b:ffae:17:2:f\"\n// • \"b1:9:16:0d:3:0157:2.0.3.0\"\n// • \"::54.250.196.255\"\n// • \"b12d:062:04:352:3f:2f:e5a6:4\"\n// • \"::1f58:4b90:7.75.163.156\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Creating Character and Number Arbitrary with mapToConstant in TypeScript\nDESCRIPTION: Example of using mapToConstant to create an arbitrary that generates lowercase letters and single-digit numbers. This demonstrates how to map ranges of values to specific character outputs.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfc.mapToConstant(\n  { num: 26, build: (v) => String.fromCharCode(v + 0x61) },\n  { num: 10, build: (v) => String.fromCharCode(v + 0x30) },\n);\n// Examples of generated values: \"6\", \"8\", \"d\", \"9\", \"r\"…\n```\n\n----------------------------------------\n\nTITLE: Using statistics Function with String Arbitrary in JavaScript\nDESCRIPTION: This example demonstrates how to use the statistics function to analyze the distribution of string lengths generated by the string arbitrary in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.statistics(\n  fc.string(), // source arbitrary\n  (v) => `${v.length} characters`, // classifier\n  { numRuns: 100_000 }, // extra parameters\n);\n// Possible output:\n// >  0 characters...9.65%\n// >  2 characters...9.56%\n// >  1 characters...9.41%\n// >  3 characters...9.30%\n// >  6 characters...9.04%\n// >  9 characters...8.92%\n// >  7 characters...8.90%\n// >  8 characters...8.90%\n// >  10 characters..8.86%\n// >  4 characters...8.79%\n// >  5 characters...8.68%\n```\n\n----------------------------------------\n\nTITLE: Generating Recursive Tree Structure with fc.memo in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up and use fc.memo to generate a recursive tree structure. It defines leaf nodes, internal nodes, and a tree structure with a maximum depth. The example shows how to create and use the arbitrary to generate tree instances.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/recursive-structure.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Setup the tree structure:\nconst tree = fc.memo((n) => fc.oneof(leaf(), node(n)));\nconst node = fc.memo((n) => {\n  if (n <= 1) return fc.record({ left: leaf(), right: leaf() });\n  return fc.record({ left: tree(), right: tree() }); // tree() is equivalent to tree(n-1)\n});\nconst leaf = fc.nat;\n// Use the arbitrary:\ntree(2);\n// Note: Only produce trees having a maximal depth of 2\n// Examples of generated values:\n// • 24\n// • {\"left\":{__proto__:null,\"left\":1696460155,\"right\":2147483646},\"right\":135938859}\n// • 9\n// • {\"left\":27,\"right\":{\"left\":2147483633,\"right\":2147483631}}\n// • {\"left\":29,\"right\":{\"left\":2,\"right\":367441398}}\n// • …\n```\n\n----------------------------------------\n\nTITLE: Shrinking Custom Values in fast-check Tests\nDESCRIPTION: Example showing how to use fast-check's shrinking capability with custom test values. Demonstrates a practical use case with a quickLookup implementation test.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/user-definable-values.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction buildQuickLookup(values) {\n  const fastValues = Object.fromEntries(values.map((value) => [value, true]));\n  return { has: (value) => value in fastValues };\n}\n\nfc.assert(\n  fc.property(fc.array(fc.string()), fc.string(), (allValues, lookForValue) => {\n    // Arrange\n    const expectedResult = allValues.includes(lookForValue);\n\n    // Act\n    const cache = buildQuickLookup(allValues);\n\n    // Assert\n    return cache.has(lookForValue) === expectedResult;\n  }),\n  {\n    examples: [\n      // the user definable corner case to reduce\n      [[], '__proto__'],\n    ],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fast-Check Gen-Based Test Implementation\nDESCRIPTION: Simplified property-based test using fast-check's gen feature, making it as straightforward as writing regular tests while maintaining the benefits of property testing.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fake-data.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest('sort users by ascending age', () => {\n  fc.assert(\n    fc.property(fc.gen(), (g) => {\n      const userA = {\n        firstName: g(firstName),\n        lastName: g(lastName),\n        birthDate: g(birthDate),\n      };\n      const userB = {\n        firstName: g(firstName),\n        lastName: g(lastName),\n        birthDate: g(birthDate, { strictlyOlderThan: userA.birthDate }),\n      };\n      expect(sortByAge([userA, userB])).toEqual([userA, userB]);\n      expect(sortByAge([userB, userA])).toEqual([userA, userB]);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Inheritance in JavaScript\nDESCRIPTION: This snippet shows how JavaScript objects inherit from the Object class by default, which can lead to prototype pollution vulnerabilities.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-21-detect-prototype-pollution-automatically/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst instance = {};\ninstance.__proto__; // Object\n'toString' in instance; // true\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Comparator for Unique Array Generation in JavaScript\nDESCRIPTION: Demonstrates the use of a custom comparator function in fast-check's uniqueArray to define unique values based on absolute values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uniqueArray(fc.constantFrom(-1, -0, 0, 1, Number.NaN), { comparator: (a, b) => Math.abs(a) === Math.abs(b) });\n```\n\n----------------------------------------\n\nTITLE: CodeSandbox Integration Reporter\nDESCRIPTION: Implementation of a custom reporter that generates CodeSandbox environments for failed test cases\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/custom-reports.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getParameters } from 'codesandbox/lib/api/define';\n\nconst buildCodeSandboxReporter = (createFiles) => {\n  return function reporter(runDetails) {\n    if (!runDetails.failed) {\n      return;\n    }\n    const counterexample = runDetails.counterexample;\n    const originalErrorMessage = fc.defaultReportMessage(runDetails);\n    if (counterexample === undefined) {\n      throw new Error(originalErrorMessage);\n    }\n    const files = {\n      ...createFiles(counterexample),\n      'counterexample.js': {\n        content: `export const counterexample = ${fc.stringify(counterexample)}`\n      },\n      'report.txt': {\n        content: originalErrorMessage\n      }\n    }\n    const url = `https://codesandbox.io/api/v1/sandboxes/define?parameters=${getParameters({ files })}`;\n    throw new Error(`${originalErrorMessage}\\n\\nPlay with the failure here: ${url}`);\n  }\n}\n\nfc.assert(\n  fc.property(...),\n  {\n    reporter: buildCodeSandboxReporter(counterexample => ({\n      'index.js': {\n        content: 'console.log(\"Code to reproduce the issue\")'\n      }\n    }))\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Domain Names with fast-check\nDESCRIPTION: Generates valid domain names following RFC 1034, RFC 1123 and WHATWG URL Standard. Supports configurable size parameter for controlling name length.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.domain();\n// Examples of generated values: \"6i1.ws\", \"p.s.snp\", \"r.sc\", \"gkamh0qv6l.krzi6l5r.nwr\", \"ewargum4.oe\"…\n\nfc.domain({ size: '-1' });\n// Note: Generate smaller domain name compared to default. As default size is 'small' (if unchanged), it is equivalent to 'xsmall'\n// Examples of generated values: \"9.pi.ca\", \"hs3.gzh\", \"wa5.6.pr\", \"b.mle\", \"xwh.t3o.qfy\"…\n```\n\n----------------------------------------\n\nTITLE: Scheduling Native Timers with Jest in TypeScript\nDESCRIPTION: Implements a custom 'act' function to schedule native JavaScript timers (setTimeout, setInterval) using Jest's fake timers. This allows for proper ordering and execution of timer-based asynchronous code in tests.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/race-conditions.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// You should call: `jest.useFakeTimers()` at the beginning of your test\n\n// The function below automatically schedules tasks for pending timers.\n// It detects any timer added when tasks get resolved by the scheduler (via the act pattern).\n\n// Instead of calling `await s.waitFor(p)`, you can call `await s.waitFor(p, buildWrapWithTimersAct(s))`.\n// Instead of calling `await s.waitAll()`, you can call `await s.waitAll(buildWrapWithTimersAct(s))`.\n\nfunction buildWrapWithTimersAct(s: fc.Scheduler) {\n  let timersAlreadyScheduled = false;\n\n  function scheduleTimersIfNeeded() {\n    if (timersAlreadyScheduled || jest.getTimerCount() === 0) {\n      return;\n    }\n    timersAlreadyScheduled = true;\n    s.schedule(Promise.resolve('advance timers')).then(() => {\n      timersAlreadyScheduled = false;\n      jest.advanceTimersToNextTimer();\n      scheduleTimersIfNeeded();\n    });\n  }\n\n  return async function wrapWithTimersAct(f: () => Promise<unknown>) {\n    try {\n      await f();\n    } finally {\n      scheduleTimersIfNeeded();\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Unbounded BigInt Values in JavaScript\nDESCRIPTION: Uses fc.bigInt() to generate arbitrary bigint values without specified bounds. This can produce both positive and negative bigints of varying magnitudes.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/bigint.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigInt();\n// Examples of generated values:\n// • 40519302182168582469083131396737815984915854610111397506754347703341259198524n\n// • 23951610212595764539175455250207245555782767082407094676187361741043426472154n\n// • 30295980883260580261886608760731577493472838495202972700546280276253358609031n\n// • -11868238563800054718695098172873792117821728883208728506070757173361404354997n\n// • 35n\n// • …\n```\n\n----------------------------------------\n\nTITLE: Optimized Float Decomposition Implementation in TypeScript\nDESCRIPTION: Improved implementation using bit manipulation and TypedArrays for better performance. This version directly extracts the significand and exponent from the binary representation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-07-24-whats-new-in-fast-check-3-12-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst f32 = new Float32Array(1);\nconst u32 = new Uint32Array(f32.buffer, f32.byteOffset);\n\nfunction bitCastFloatToUInt32(f: number): number {\n  f32[0] = f;\n  return u32[0];\n}\n\nexport function decomposeFloat(f: number): { exponent: number; significand: number } {\n  const bits = bitCastFloatToUInt32(f);\n  const signBit = bits >>> 31;\n  const exponentBits = (bits >>> 23) & 0xff;\n  const significandBits = bits & 0x7fffff;\n\n  const exponent = exponentBits === 0 ? -126 : exponentBits - 127;\n  let significand = exponentBits === 0 ? 0 : 1;\n  significand += significandBits / 2 ** 23;\n  significand *= signBit === 0 ? 1 : -1;\n\n  return { exponent, significand };\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Code Example for Prototype Pollution\nDESCRIPTION: This code demonstrates a vulnerable scenario where a malicious payload can be used to pollute the prototype, potentially affecting unrelated code elsewhere in the application.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-21-detect-prototype-pollution-automatically/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Vulnerable piece of code that may impact...\nconst maliciousPayload = '{\"__proto__\": {\"isAdmin\": true}}';\nmerge({}, JSON.parse(maliciousPayload));\n\n// ...a totally unrelated piece of code anywhere else\nconst newUser = {};\nnewUser.isAdmin; // true\n```\n\n----------------------------------------\n\nTITLE: Defining check Function Signature in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript signature for the check function in fast-check. It's similar to assert but returns a RunDetails object for both synchronous and asynchronous properties.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction check<Ts>(property: IProperty<Ts>, params?: Parameters<Ts>): RunDetails<Ts>;\nfunction check<Ts>(property: IAsyncProperty<Ts>, params?: Parameters<Ts>): Promise<RunDetails<Ts>>;\n```\n\n----------------------------------------\n\nTITLE: Generating Bounded Positive BigInt Values in JavaScript\nDESCRIPTION: Demonstrates using fc.bigInt() with a specified range to generate positive bigint values between 0 and a large upper bound.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/bigint.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigInt({ min: 0n, max: 12345678901234567890n });\n// Note: All possible bigint values between `0n` (included) and `12345678901234567890n` (included)\n// Examples of generated values: 10743587536809719502n, 12345678901234567887n, 1n, 18n, 3991213889543870829n…\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Comparison Functions with compareFunc\nDESCRIPTION: Creates functions that compare two parameters and return an integer. Returns zero for equivalent values, negative for a < b, and positive for a > b. Uses internal hashing and stringify methods from fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/function.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.compareFunc();\n// Examples of generated values:\n// • function(a, b) {\n//     // With hash and stringify coming from fast-check\n//     const cmp = (hA, hB) => hA - hB;\n//     const hA = hash('-1057705109' + stringify(a)) % 2425734305;\n//     const hB = hash('-1057705109' + stringify(b)) % 2425734305;\n//     return cmp(hA, hB);\n//   }\n```\n\n----------------------------------------\n\nTITLE: Advanced Shrinking Implementation with Custom Context for FakerFirstNameBuilder in TypeScript\nDESCRIPTION: This snippet presents a more advanced implementation of FakerFirstNameBuilder with custom context handling. It uses a Symbol to differentiate between values generated by the class and those from strArb, ensuring accurate shrinking behavior.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctxProbe = Symbol();\nconst strArb = fc.string({ minLength: 1 });\n\nclass FakerFirstNameBuilder extends fc.Arbitrary<string> {\n  generate(mrng: fc.Random, biasFactor: number | undefined): fc.Value<string> {\n    const randomizer = { next: () => mrng.nextDouble(), seed: () => {} };\n    const customFaker = new Faker({ locale: base, randomizer });\n    return new fc.Value(customFaker.person.firstName(), ctxProbe);\n  }\n  canShrinkWithoutContext(value: unknown): value is string {\n    return false;\n  }\n  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {\n    if (context !== ctxProbe || strArb.canShrinkWithoutContext(value)) {\n      return strArb.shrink(value, context);\n    }\n    return fc.Stream.nil();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Values with fast-check in JavaScript\nDESCRIPTION: Demonstrates how to use the fc.boolean() function from fast-check to generate boolean values. This arbitrary produces either true or false randomly.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/boolean.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.boolean();\n// Examples of generated values: true, false…\n```\n\n----------------------------------------\n\nTITLE: Prime Factor Decomposition Property Test\nDESCRIPTION: Implementation of a property-based test for a prime factor decomposition function using fast-check and Bun test runner. The test verifies that multiplying the decomposed factors returns the original number.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-bun-test-runner.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { describe, it, expect } from 'bun:test';\nimport fc from 'fast-check';\n\ndescribe('decompose', () => {\n  it('should produce an array such that the product equals the input', () => {\n   fc.assert(\n    fc.property(fc.integer({ min: 2, max: 2 ** 31 - 1 }), (n) => {\n      const factors = decompose(n);\n      const productOfFactors = factors.reduce((a, b) => a * b, 1);\n      return productOfFactors === n;\n    })\n  );\n  });\n});\n\n// Code under test: should rather be imported from another file\nfunction decompose(n: number): number[] {\n  // Quick implementation: the maximal number supported is 2**31-1\n  let done = false;\n  const factors: number[] = [];\n  while (!done) {\n    done = true;\n    const stop = Math.sqrt(n);\n    for (let i = 2; i <= stop; ++i) {\n      if (n % i === 0) {\n        factors.push(i);\n        n = Math.floor(n / i);\n        done = false;\n        break;\n      }\n    }\n  }\n  return [...factors, n];\n}\n```\n\n----------------------------------------\n\nTITLE: String Generation with Maximum Length\nDESCRIPTION: Generates strings with a maximum length constraint of 3 characters using the maxLength parameter.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ maxLength: 3 });\n// Note: Any string containing up to 3 (included) characters\n// Examples of generated values: \"\", \"ref\", \"?D\", \"key\", \"}\"\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Naive Faker Integration with fast-check in TypeScript\nDESCRIPTION: This snippet shows how to use the naive integration of Faker with fast-check in a test scenario. It generates first and last names using Faker and tests a formatting function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('produce a string containing the first and the last name', () => {\n  fc.assert(\n    fc.property(fakerToArb(faker.person.firstName), fakerToArb(faker.person.lastName), (firstName, lastName) => {\n      const formatted = format(firstName, lastName);\n      expect(formatted).toContain(firstName);\n      expect(formatted).toContain(lastName);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Commit Hash in fast-check\nDESCRIPTION: Shows how to access the version number and commit hash of fast-check using the fc.__version and fc.__commitHash properties.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_2.X.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.__version\nfc.__commitHash\n```\n\n----------------------------------------\n\nTITLE: Generating ULID Values with Fast-Check\nDESCRIPTION: Demonstrates the usage of fc.ulid() to generate ULID (Universally Unique Lexicographically Sortable Identifier) values. This function generates random ULID strings that are sortable and unique.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/identifier.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.ulid();\n// Examples of generated values:\n// • \"7AVDFZJAXCM0F25E3SZZZZZZYZ\"\n// • \"7ZZZZZZZYP5XN60H51ZZZZZZZP\"\n// • \"2VXXEMQ2HWRSNWMP9PZZZZZZZA\"\n// • \"15RQ23H1M8YB80EVPD2EG8W7K1\"\n// • \"6QV4RKC7C8ZZZZZZZFSF7PWQF5\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Using Context with Custom Examples in fast-check\nDESCRIPTION: Demonstrates how to properly use context when defining custom examples in fast-check property tests. Creates a helper function to generate valid context objects for examples.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/user-definable-values.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst exampleContext = () => fc.sample(fc.context(), { numRuns: 1 })[0];\n\nfc.assert(fc.property(fc.string(), fc.string(), fc.context(), myCheckFunction), {\n  examples: [['', '', exampleContext()]],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Float32Array with fast-check in JavaScript\nDESCRIPTION: Uses fc.float32Array() to generate Float32Array instances with various configurations. Supports specifying min/max values, array length, and other options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfc.float32Array();\n// Examples of generated values:\n// • Float32Array.from([])\n// • Float32Array.from([-12.122719764709473,-8057332.5,-8.5333065779299e-31,4.203895392974451e-45,-1.401298464324817e-45,2.5223372357846707e-44,-0.15196290612220764,-3.4028190042551758e+38,3.741597751304629e-28,1.401298464324817e-44])\n// • Float32Array.from([-3.24799757855888e-21])\n// • Float32Array.from([-13627700375715840,-2.4350556445205305e+37,-1.392195136951102e-9,-2374.965087890625,4.244262896690998e-8,-5.161676815695077e-19,-0.20675736665725708])\n// • Float32Array.from([1.7366975231216193e-20,-2977645988174364700,2.589363879539297e+31,1.8031471498217155e-12,4.5007039497195254e+25])\n// • …\n\nfc.float32Array({ minLength: 1 });\n// Examples of generated values:\n// • Float32Array.from([2.0374531922717765e-11])\n// • Float32Array.from([30.016468048095703,2.1674793240938824e+30])\n// • Float32Array.from([-2.6624670822171524e-44,-8.629187158980245e+32,-3.4028226550889045e+38,-3.0828566215145976e-44,-170087472,90606641152,2.449428132964808e-27,6.091665951650796e-23])\n// • Float32Array.from([3.4028190042551758e+38])\n// • Float32Array.from([-3.4028190042551758e+38])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Integer Values in Double Arbitrary (Pre-3.18.0)\nDESCRIPTION: Example of how to filter out integer values from double arbitrary before version 3.18.0, using a filter function to exclude any value that is an integer.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-04-28-whats-new-in-fast-check-3-18-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfc.double().filter((value) => !Number.isInteger(value)); // Before version 3.18.0\n```\n\n----------------------------------------\n\nTITLE: Generating Lorem Ipsum Text with lorem in JavaScript\nDESCRIPTION: The lorem function generates lorem ipsum text with configurable options for word or sentence mode and maximum count. It allows for flexible generation of placeholder text.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/file.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.lorem();\n// Examples of generated values:\n// • \"magna ullamcorper iaculis purus nec\"\n// • \"lorem\"\n// • \"eu semper lectus mauris sed in nulla non scelerisque massa enim cras\"\n// • \"mauris arcu cras molestie\"\n// • \"euismod\"\n// • …\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.lorem({ maxCount: 3 });\n// Examples of generated values: \"duis enim nonummy\", \"consequat pharetra iaculis\", \"sollicitudin mi curabitur\", \"faucibus\", \"cursus sit ac\"…\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.lorem({ maxCount: 3, mode: 'sentences' });\n// Examples of generated values:\n// • \"Nec, dolor congue vitae pellentesque orci amet.\"\n// • \"Amet augue metus nibh rhoncus nulla morbi dui sed ac. Aliquam massa, et vestibulum integer suscipit magna pellentesque nonummy. Mi tellus, posuere vestibulum nibh.\"\n// • \"Ullamcorper orci ipsum diam ultrices convallis mollis, ullamcorper. Vitae faucibus bibendum ligula.\"\n// • \"Elementum semper iaculis ligula mauris ipsum mauris. Cursus massa nulla semper feugiat, sed scelerisque.\"\n// • \"Vitae. Dolor primis aenean convallis adipiscing mauris in odio ante. Massa, faucibus.\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Generating Date Values with Default Settings in JavaScript\nDESCRIPTION: Uses fc.date() to generate date values across the entire possible range. This includes dates from -271821-04-20 to +275760-09-13.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/date.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.date();\n// Examples of generated values:\n// • new Date(\"-102261-04-16T03:19:33.548Z\")\n// • new Date(\"1970-01-01T00:00:00.004Z\")\n// • new Date(\"+111995-07-24T19:09:16.732Z\")\n// • new Date(\"-058362-10-19T15:40:37.384Z\")\n// • new Date(\"+208885-10-19T22:12:53.768Z\")\n// …\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Character Representations in TypeScript\nDESCRIPTION: Illustrates different JavaScript character representations for graphemes, including basic Latin, accented characters, and surrogate pairs. Shows how the same visual entity can be represented in different ways.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-08-29-whats-new-in-fast-check-3-22-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'\\u{0061}'; // it's a \"a\"\n'\\u{00E0}'; // it's the NFC version of \"à\"\n'\\u{0061}\\u{0300}'; // it's the NFD version of \"à\"\n```\n\n----------------------------------------\n\nTITLE: Generating Large Positive BigInt Values in JavaScript\nDESCRIPTION: Illustrates using fc.bigInt() with a lower bound set to a large power of 2, generating only large positive bigint values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/bigint.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigInt({ min: 1n << 64n });\n// Note: Any possible bigint value greater or equal to `1n << 64n`\n// Examples of generated values:\n// • 18446744073709551637n\n// • 46981635298839638819090544091451527470150794541406966757340574520618867005787n\n// • 18446744073709551630n\n// • 56018523185942628466562775307785743268387645013311767424219309719910490250614n\n// • 18446744073709551631n\n// • …\n```\n\n----------------------------------------\n\nTITLE: Entry Structure with Start Field for Optimization\nDESCRIPTION: Enhanced entry structure with a 'start' field for each range to enable dichotomic search. This additional information allows for more efficient lookup of the correct build function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst entries = [\n  { start: 0, num: 26, build: (v) => String.fromCharCode(v + 0x61) },\n  { start: 26, num: 10, build: (v) => String.fromCharCode(v + 0x30) },\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Dictionaries with String Keys and Values in JavaScript\nDESCRIPTION: Uses fc.dictionary to create objects with string keys and values. Demonstrates basic usage and options for minimum keys and null prototype.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.dictionary(fc.string(), fc.string());\n// Examples of generated values:\n// • {__proto__:null,\"<H\":\"`D? &7A\",\"T>X0Aa]tp>\":\":5+|\",\"8{0.mI>8R,\":\"j._[Xi&.[\",\"!83F]'E1_\":\"y[bB,G$_S}\",\"NnY,!{\":\"6NZ4,G'}\",\"Y&>Uj\":\"gg@eTi\",\"e>QDNvD/gz\":\"Bt0&oV;\",\"ULLW1\":\"F6i_\",\"?&I\":\"lPd7}\"}\n// • {__proto__:null,\"_\":\" y|\",\"Yo+\\\"O@q+j\":\"cI{H\",\"\":\"3#$}9{5!z\",\"?^~k \":\"w$defipro\",\"[fa4c\":\"J\"}\n// • {__proto__:null,\"~\":\"\"}\n// • {\"lzproperty\":\"?\"}\n// • {\"hOIY\\\"R q}\":\"W\",\"l__defineG\":\"8x`:H0?T\"}\n// • …\n\nfc.dictionary(fc.string(), fc.string(), { minKeys: 2 });\n// Note: Generate instances with at least 2 keys\n// Examples of generated values:\n// • {\"%{\":11,\"4cH\":12,\"ke\":2147483622,\"rqM~i'\":485910780}\n// • {__proto__:null,\"K\":1498847755,\"&cP<5:e(y\\\"\":1430281549,\"!\\\"2a\":1631161561,\"dY+g\":1880545446,\"M2+^,Yq7~t\":1437539188}\n// • {__proto__:null,\"NfXclS\":815533370,\"?\":2060844890,\"\":1862140278,\"R\":618808229,\"N|\":25902062,\"DGw00u?brK\":348863633}\n// • {\" R~Own\":2147483645,\"~\":16,\"i$#D\":1037390287}\n// • {__proto__:null,\">YTN<Tt\":1950414260,\"I6\":1505301756,\"2;]'dH.i!\":815067799,\":kmC'\":1948205418,\"g|GTLPe-\":2101264769}\n// • …\n\nfc.dictionary(fc.string(), fc.string(), { noNullPrototype: true });\n// Note: Do not generate any object with null prototype, always define them with Object prototype\n// Examples of generated values:\n// • {\"~}P-T{^H`\":\"X~bd\\\"T\",\"3Y,I8B\\\\*\":\"i;vLI(7R|\",\"_\":\"o>|L~\",\"RIUht\":\"x>?!**l:\\\\o\",\"8oV?LkD@LD\":\"E%leQ*Q}4O\"}\n// • {}\n// • {\"zQD\\\"x!p\":\"V<GfsgU\",\"q1RH0sG\":\"rXM>>\",\"Eo3iTH4f\":\"\",\"sU3\":\"FJ-\"}\n// • {\"iY7s.{?\":\"&i>\",\"V`x?~qpp4C\":\"3+u$\",\"I!z{na\":\",0D^g/G5\"}\n// • {\"Vo=AG\":\"0D%{Mv2c>w\",\"_~dC3=@D\":\"f-\",\"=\":\"vluzcJ\"}\n// • …\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance Between Houses in Santa's Journey Planner (JavaScript)\nDESCRIPTION: This code snippet demonstrates how the distance between two houses is calculated in Santa's journey planning algorithm. It uses the Manhattan distance formula, which is the sum of the absolute differences of the x and y coordinates.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-18-advent-of-pbt-day-18/index.md#2025-04-11_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nMath.abs(houseA.x - houseB.x) + Math.abs(houseA.y - houseB.y)\n```\n\n----------------------------------------\n\nTITLE: Generating Double Precision Floats with fast-check\nDESCRIPTION: Functions for generating double precision floating point numbers with configurable ranges and constraints using fc.double(). Supports infinity, NaN, and exclusion options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.double();\nfc.double({ min: 0 });\nfc.double({ noDefaultInfinity: true, noNaN: true });\nfc.double({ noDefaultInfinity: true, min: Number.NEGATIVE_INTEGER, max: Number.POSITIVE_INTEGER });\nfc.double({ min: 0, max: 1, maxExcluded: true });\nfc.double({ noInteger: true });\nfc.noBias(\n  fc\n    .tuple(fc.integer({ min: 0, max: (1 << 26) - 1 }), fc.integer({ min: 0, max: (1 << 27) - 1 }))\n    .map((v) => (v[0] * Math.pow(2, 27) + v[1]) * Math.pow(2, -53))\n);\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Optimized Import Style for fast-check in Jest\nDESCRIPTION: A benchmark test that measures the execution time when using a more specific import method for fast-check, targeting only the 'assert' functionality. Demonstrates potential performance improvements.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-11-22-whats-new-in-fast-check-3-14-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { assert } = require('fast-check/assert');\ntest('empty test in spec file with recommended import for fast-check', () => {\n  assert; // no-op, just doing so to avoid bundlers from ignoring the import\n});\n// spec file execution took ~0.47s (4 runs: 0.473, 0.475, 0.474, 0.473)\n```\n\n----------------------------------------\n\nTITLE: Configuring fast-check for Infinite Runs\nDESCRIPTION: Sets up fast-check to run tests an infinite number of times to maximize the potential of finding bugs during fuzzing.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fuzzing.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.configureGlobal({ numRuns: Number.POSITIVE_INFINITY });\n```\n\n----------------------------------------\n\nTITLE: Root Package.json Configuration\nDESCRIPTION: Modern package.json configuration supporting both CJS and ESM with exports field\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"commonjs\",\n  \"main\": \"lib/fast-check.js\",\n  \"module\": \"lib/esm/fast-check.js\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"require\": {\n        \"types\": \"./lib/fast-check.d.ts\",\n        \"default\": \"./lib/fast-check.js\"\n      },\n      \"import\": {\n        \"types\": \"./lib/esm/fast-check.d.ts\",\n        \"default\": \"./lib/esm/fast-check.js\"\n      }\n    }\n  },\n  \"types\": \"lib/fast-check.d.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean Comparison Functions with compareBooleanFunc\nDESCRIPTION: Creates functions that compare two parameters and return a boolean. Returns true when a < b, false when a = b or a > b. Uses internal hashing and stringify methods from fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/function.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.compareBooleanFunc();\n// Examples of generated values:\n// • function(a, b) {\n//     // With hash and stringify coming from fast-check\n//     const cmp = (hA, hB) => hA < hB;\n//     const hA = hash('-29' + stringify(a)) % 17;\n//     const hB = hash('-29' + stringify(b)) % 17;\n//     return cmp(hA, hB);\n//   }\n```\n\n----------------------------------------\n\nTITLE: Shared Settings Using configureGlobal\nDESCRIPTION: Demonstration of using configureGlobal to share settings across multiple test cases, eliminating the need for individual configuration.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.configureGlobal({ numRuns: 10 });\n\ntest('test #1', () => {\n  fc.assert(myProp1);\n});\ntest('test #2', () => {\n  fc.assert(myProp2);\n});\ntest('test #3', () => {\n  fc.assert(myProp3);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Infinite Stream with Fast-Check\nDESCRIPTION: Creates an infinite Stream of natural numbers between 0 and 9 using Fast-Check's infiniteStream arbitrary. The resulting Stream implements IterableIterator<T> interface and includes helper methods for manipulation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/iterable.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.infiniteStream(fc.nat(9));\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Import\nDESCRIPTION: Example of TypeScript module import with .js extension for ESM compatibility\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { a } from './other-file.js'; // ← it's another TS file but we import it with the JS extension\n```\n\n----------------------------------------\n\nTITLE: Record Arbitrary with Object Prototype\nDESCRIPTION: Shows how to configure record arbitrary to maintain Object prototype inheritance.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfc.record(recordModel, {\n  noNullPrototype: true,\n  // other contraints (if any)...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Object Keys in JavaScript using fast-check\nDESCRIPTION: Shows how to customize the keys of generated objects using the 'key' option with fc.constantFrom().\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.object({\n  key: fc.constantFrom('a', 'b', 'c'),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Float64Array with fast-check in JavaScript\nDESCRIPTION: Uses fc.float64Array() to generate Float64Array instances with various configurations. Supports specifying min/max values, array length, and other options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfc.float64Array();\n// Examples of generated values:\n// • Float64Array.from([])\n// • Float64Array.from([-301377788.37725013,-1.7149147913092319e-97,8e-323,1e-323,-4e-323,-2.057106358614005e-7,3.7791002743330725e-63,5e-323,7e-323,-2.7469348785639148e+224])\n// • Float64Array.from([-1.1619421936685911e-164])\n// • Float64Array.from([-7.651385650429631e+128,-8.869426164279998e-72,4.233071733934197e-64,-0.000002350752021139201,7.038756466481596e-175,126806475960244.08,1.1085581712589228e+178])\n// • Float64Array.from([3.477655531645621e-163,8.482885727970808e+246,8.005016653709244e+200,-1.6308036504155555e+224,-1.8149570511597214e-122])\n// • …\n\nfc.float64Array({ minLength: 1 });\n// Examples of generated values:\n// • Float64Array.from([1.179182805455725e-90])\n// • Float64Array.from([33830772.59796326,4.4e-323])\n// • Float64Array.from([4.4e-323,-2.0609982364042263e+263,8.629895099097848e+77,1.4155962948371038e-248,-1.9599359241539372e+245,5.117175856556106e-218,3.0325723805645807e-84,-1.7976931348623147e+308])\n// • Float64Array.from([1.7976931348623147e+308])\n// • Float64Array.from([-1.7976931348623147e+308])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Replaying and Shrinking Failure Cases\nDESCRIPTION: Shows how to replay specific failure cases identified during fuzzing and apply fast-check's shrinking capabilities to simplify the failing input.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fuzzing.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('replay reported error and shrink it', () => {\n  fc.assert(fc.property(...arbitraries, predicate), {\n    numRuns: 1,\n    examples: [\n      [\n        /* reported error */\n      ],\n    ],\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Record Arbitrary Migration\nDESCRIPTION: Shows migration from withDeletedKeys to requiredKeys flag in record arbitrary.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nfc.record(recordModel, {\n-  withDeletedKeys: true,\n+  requiredKeys: [],\n});\nfc.record(recordModel, {\n-  withDeletedKeys: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Shuffled Subarrays in JavaScript with fast-check\nDESCRIPTION: The shuffledSubarray arbitrary generates randomly ordered subarrays, with configurable length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/constant.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.shuffledSubarray([1, 42, 48, 69, 75, 92]);\n// Examples of generated values: [69,92], [92,69,42,75], [48,69,92,75,42,1], [1,42], [75]…\n\nfc.shuffledSubarray([1, 42, 48, 69, 75, 92], { minLength: 5 });\n// Examples of generated values: [48,1,92,69,75,42], [42,1,92,75,69], [69,75,92,48,1], [92,42,48,75,69], [1,69,75,92,42]…\n\nfc.shuffledSubarray([1, 42, 48, 69, 75, 92], { maxLength: 5 });\n// Examples of generated values: [48,1,92], [], [75,1,69,92], [42], [75,1,69,48,42]…\n\nfc.shuffledSubarray([1, 42, 48, 69, 75, 92], { minLength: 2, maxLength: 3 });\n// Examples of generated values: [1,92], [92,75], [1,48], [42,75], [48,69]…\n```\n\n----------------------------------------\n\nTITLE: Implementing a List Class for Testing\nDESCRIPTION: A simple List class implementation that provides push, pop, and size methods, which will be used as the system under test in the model-based testing example.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/model-based-testing.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass List {\n  data: number[] = [];\n  push = (v: number) => this.data.push(v);\n  pop = () => this.data.pop()!;\n  size = () => this.data.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Queue Testing Implementation\nDESCRIPTION: Original test code for detecting concurrent queries in a queue implementation, using scheduled function calls and basic concurrency checks.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/wrapping-up.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst scheduledCall = s.scheduleFunction(call);\nconst queued = queue(scheduledCall);\n//...\nexpect(concurrentQueriesDetected).toBe(false);\n```\n\n----------------------------------------\n\nTITLE: Generating Int16Array Values with fast-check\nDESCRIPTION: Generate Int16Array instances with configurable value ranges (-32768 to 32767) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.int16Array();\n// Examples of generated values:\n// • Int16Array.from([7570,-29355,-239,4473,-969,-5199])\n// • Int16Array.from([])\n// • Int16Array.from([4874,-12711])\n// • Int16Array.from([-12441,-7244,32626,1550,-5002,20572,-9656,-29946,-5858])\n// • Int16Array.from([-5805,-14007,18067,18421,-10176,-13877,-24415,29686,-26525])\n// • …\n\nfc.int16Array({ min: 0, minLength: 1 });\n// Examples of generated values:\n// • Int16Array.from([4007,21551,9085,2478,16634,3581,7304,29246,12872,23641,22492])\n// • Int16Array.from([954,19772,29823,20600])\n// • Int16Array.from([32767])\n// • Int16Array.from([19919,1,14,19008,25737,3165,3])\n// • Int16Array.from([24908,7,7,24039,1])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Optimized Dichotomic Search in mapToConstant\nDESCRIPTION: Improved implementation using dichotomic (binary) search for finding the correct build function, reducing complexity from O(n) to O(log n). This significantly improved performance for arbitraries with many entries.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildForChoiceIndex(choiceIndex: number) {\n  let min = 0;\n  let max = entries.length;\n  while (max - min > 1) {\n    const mid = Math.floor((min + max) / 2);\n    if (choiceIndex < entries[mid].from) {\n      max = mid;\n    } else {\n      min = mid;\n    }\n  }\n  return entries[min].build(choiceIndex - entries[min].start + entries[min].num);\n}\n```\n\n----------------------------------------\n\nTITLE: Reimplementing Removed BigInt Arbitraries in TypeScript\nDESCRIPTION: Provides implementations for the removed bigIntN, bigUintN, and bigUint arbitraries using the new fc.bigInt arbitrary in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bigIntN(n: number): fc.Arbitrary<bigint> {\n  return fc.bigInt({ min: 1n << BigInt(n - 1), max: (1n << BigInt(n - 1)) - 1n });\n}\n\nfunction bigUintN(n: number): fc.Arbitrary<bigint> {\n  return fc.bigInt({ min: 0n, max: (1n << BigInt(n)) - 1n });\n}\n\nfunction bigUint(max: bigint = (1n << 256n) - 1n): fc.Arbitrary<bigint> {\n  return fc.bigInt({ min: 0n, max });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing usePromiseAsState React Hook\nDESCRIPTION: A React hook implementation that takes a promise and translates its resolved value into component state. It updates the state when the promise resolves and includes cleanup to prevent updates after unmounting.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-21-whats-new-in-fast-check-3-9-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Take a promise and translate it into a state\nfunction usePromiseAsState(promise) {\n  const [value, setValue] = useState(undefined);\n\n  useEffect(() => {\n    let canceled = false;\n    setValue(undefined);\n    promise.then(\n      (value) => !canceled && setValue(value),\n      () => {},\n    );\n    return () => (canceled = true);\n  }, [promise]);\n\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @fast-check/vitest for Property-Based Testing\nDESCRIPTION: Example of integrating fast-check with Vitest using @fast-check/vitest, demonstrating both array and object parameter syntax.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, fc } from '@fast-check/vitest';\n\ntest.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {\n  return (a + b + c).includes(b);\n});\n\ntest.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {\n  return (a + b + c).includes(b);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generator Functions in fast-check\nDESCRIPTION: Shows how to use the gen arbitrary to generate random values within test cases, with important notes about deterministic ordering and replay capabilities.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/others.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.gen();\n// The produced value is a function able to generate random values from arbitraries within the tests themselves.\n//\n// It takes from 1 to N parameters:\n// - the first parameter is a function able to return an arbitrary — ⚠️ this function must be a static function and not be recreated from one run to another\n// - and its parameters as second, third...\n//\n// It can be called as follow:\n// - g(fc.nat) — building a random value during the predicate using the arbitrary fc.nat()\n// - g(fc.nat, {max: 10}) — same but using fc.nat({max: 10})\n//\n// ⚠️ But DO NOT USE: g(() => fc.nat({max: 10})).\n// In the case right above, neither the builder of arbitrary nor the arbitrary itself are stable references. It would make shrinking impossible.\n// If you do need to create a dedicated builder, define it outside of `fc.assert` and use it in your predicate as `g(myBuilder, ...parametersForMyBuilder)`.\n```\n\n----------------------------------------\n\nTITLE: Testing YAML String Parsing\nDESCRIPTION: Examples showing YAML parsing issues with special character sequences and space handling\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nYAML.stringify([[':,']]); //=> '- - :,\\n'\nYAML.parse('- - :,\\n'); //=> YAMLSyntaxError: Document is not valid YAML (bad indentation?)\n```\n\n----------------------------------------\n\nTITLE: Using noShrink Arbitrary in TypeScript\nDESCRIPTION: Shows the new method to use noShrink with an arbitrary in fast-check 3.20.0, replacing the deprecated Arbitrary.prototype.noShrink method.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-12-whats-new-in-fast-check-3-20-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfc.noShrink(anyArbitrary);\n```\n\n----------------------------------------\n\nTITLE: Initial Queue Implementation in JavaScript\nDESCRIPTION: Original code showing how to push queries into a queue and track expected answers using a straightforward loop approach.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/the-missing-part.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let id = 0; id !== numCalls; ++id) {\n  expectedAnswers.push(id);\n  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));\n}\n```\n\n----------------------------------------\n\nTITLE: Original String Padding Implementation in TypeScript\nDESCRIPTION: Initial implementation of string padding using Array fill and join operations, which caused unnecessary memory allocations.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-07-24-whats-new-in-fast-check-3-12-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pad(value: string, constLength: number) {\n  return (\n    Array(constLength - value.length)\n      .fill('0')\n      .join('') + value\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Base Size for Depth Control in TypeScript\nDESCRIPTION: Shows how to configure the global base size in fast-check to enable depth inference based on size for recursive structures.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfc.configureGlobal({ baseSize: 'small' });\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Object Signing\nDESCRIPTION: Example showing JWT signing failure when using objects with special property names\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\njwt.sign({ valueOf: 0 }, 'some-key');\n//=> throws TypeError `validator.isValid is not a function`\n```\n\n----------------------------------------\n\nTITLE: Updating noShrink Usage in fast-check\nDESCRIPTION: Demonstrates the migration from the deprecated .noShrink method to the new standalone noShrink arbitrary in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n--myArbitrary.noShrink();\n++fc.noShrink(myArbitrary);\n```\n\n----------------------------------------\n\nTITLE: Character Generation Implementation\nDESCRIPTION: Shows how to generate single characters using the new string arbitrary.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction char(): fc.Arbitrary<string> {\n  return fc.string({ unit: 'grapheme-ascii', minLength: 1, maxLength: 1 });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Arbitrary Shrinking with Unmapper in fast-check\nDESCRIPTION: Shows how to implement custom shrinking for mapped arbitraries using an unmapper function. Includes handling of unsupported values and string array transformation example.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/user-definable-values.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.assert(\n  fc.property(\n    fc.array(fc.string()).map(\n      (arr) => arr.join(','),\n      (raw) => {\n        // unmapper is supposed to handle not supported values by throwing\n        if (typeof raw !== 'string') throw new Error('Unsupported');\n        // remaining is supported\n        return raw.split(',');\n      },\n    ),\n    myCheckFunction\n  ),\n  {\n    examples: [\n      // the user definable corner case to reduce\n      ['__,proto,__'],\n    ],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: ASCII String Generation Functions\nDESCRIPTION: Implementation of ASCII character and string generation using the new string arbitrary.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ascii(): fc.Arbitrary<string> {\n  return fc.string({ unit: 'binary-ascii', minLength: 1, maxLength: 1 });\n}\n\nfunction asciiString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {\n  return fc.string({ ...constraints, unit: 'binary-ascii' });\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated Arbitraries\nDESCRIPTION: List of arbitraries that have been deprecated in Fast-Check v3 and their recommended replacements. Most of these changes can be applied in version 2.x before migrating to 3.x.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- `jsonObject` ➜ `jsonValue` _requires at least 2.20.0_ — [#2933](https://github.com/dubzzz/fast-check/pull/2933)\n- `unicodeJsonObject` ➜ `unicodeJsonValue` _requires at least 2.20.0_ — [#2933](https://github.com/dubzzz/fast-check/pull/2933)\n- `set` ➜ `uniqueArray` _requires at least 2.23.0_ — [#2938](https://github.com/dubzzz/fast-check/pull/2938)\n- `dedup` ➜ `clone` _requires at least 2.5.0_ — [#2938](https://github.com/dubzzz/fast-check/pull/2938)\n- `clonedConstant` ➜ `constant` _requires at least 2.15.0_ — [#2938](https://github.com/dubzzz/fast-check/pull/2938)\n- `genericTuple` ➜ `tuple` _requires at least 2.14.0_ — [#2940](https://github.com/dubzzz/fast-check/pull/2940)\n- `frequency` ➜ `oneof` _requires at least 3.0.0_ — [#2960](https://github.com/dubzzz/fast-check/pull/2960)\n```\n\n----------------------------------------\n\nTITLE: Migrating String Arbitrary Signatures\nDESCRIPTION: Examples of migrating from positional parameters to object parameters for string-related arbitraries in Fast-Check. These changes can be made within version 2.4.0 or later.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `asciiString(maxLength)` ➜ `asciiString({maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n- `asciiString(minLength, maxLength)` ➜ `asciiString({minLength, maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n- `base64String(maxLength)` ➜ `base64String({maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n- `base64String(minLength, maxLength)` ➜ `base64String({minLength, maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n- `fullUnicodeString(maxLength)` ➜ `fullUnicodeString({maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n- `fullUnicodeString(minLength, maxLength)` ➜ `fullUnicodeString({minLength, maxLength})` _requires at least 2.4.0_ — [#2929](https://github.com/dubzzz/fast-check/pull/2929)\n```\n\n----------------------------------------\n\nTITLE: Testing React Component with Manual Promise Resolution\nDESCRIPTION: A test for a React component that uses act() to properly handle Promise resolutions that trigger state updates. This approach manually controls the timing of multiple promises to validate the component's behavior.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-21-whats-new-in-fast-check-3-9-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should update to the value of the last promise', async () => {\n  let resolve1 = null;\n  let resolve2 = null;\n  const promise1 = new Promise((r) => (resolve1 = r));\n  const promise2 = new Promise((r) => (resolve2 = r));\n\n  const { result, rerender } = renderHook((p) => usePromiseAsState(p), {\n    initialProps: promise1,\n  });\n  rerender(promise2);\n  expect(result.current).toBe(undefined);\n\n  await act(async () => {\n    resolve1(1);\n  });\n  expect(result.current).toBe(undefined);\n\n  await act(async () => {\n    resolve2(2);\n  });\n  expect(result.current).toBe(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using @fast-check/ava for Property-Based Testing\nDESCRIPTION: Example of using @fast-check/ava to perform property-based testing with the ava test runner.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { testProp, fc } from '@fast-check/ava';\n\ntestProp('should detect the substring', [fc.string(), fc.string(), fc.string()], (t, a, b, c) => {\n  t.true((a + b + c).includes(b));\n});\n```\n\n----------------------------------------\n\nTITLE: Base64 Character Generation\nDESCRIPTION: Implementation of base64 character generation using constant arbitrary.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction base64(): fc.Arbitrary<string> {\n  return fc.constantFrom(...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating fc.record from with_deleted_keys to withDeletedKeys\nDESCRIPTION: Shows the required change from kebab-case 'with_deleted_keys' to camel-case 'withDeletedKeys' in the fc.record function configuration. This is a breaking change in the API naming convention.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  fc.record(\n    {\n      first_name: fc.string(),\n      last_name: fc.string(),\n      age: fc.nat(),\n    }, {\n---    with_deleted_keys: true\n+++    withDeletedKeys: true\n    })\n```\n\n----------------------------------------\n\nTITLE: Testing Security Key Validation Algorithm with fast-check in JavaScript\nDESCRIPTION: This code snippet is a placeholder for implementing property-based tests using fast-check to validate the security key algorithm. The algorithm should verify if a number is the product of exactly two distinct prime numbers within the range of 2 to 2,147,483,647.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-05-advent-of-pbt-day-5/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<AdventPlaygroundOfTheDay />\n```\n\n----------------------------------------\n\nTITLE: Generating Sparse Arrays with Random Values in JavaScript\nDESCRIPTION: The sparseArray function generates sparse arrays of random length containing values produced by a specified arbitrary. It offers various configuration options to control the array's properties, such as length, number of elements, and trailing holes.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/array.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.sparseArray(fc.nat(), { maxLength: 20 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.sparseArray(fc.nat(), { maxLength: 20, minNumElements: 1, maxNumElements: 3 });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.sparseArray(fc.nat(), { maxLength: 20, noTrailingHole: true });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.sparseArray(fc.nat());\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.sparseArray(fc.nat(), { size: '+1' });\n```\n\n----------------------------------------\n\nTITLE: Hexadecimal String Generation\nDESCRIPTION: Implementation of hexadecimal character and string generation functions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hexa(): fc.Arbitrary<string> {\n  const items = '0123456789abcdef';\n  return fc.integer({ min: 0, max: 15 }).map((n) => items[n]);\n}\n\nfunction hexaString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {\n  return fc.string({ ...constraints, unit: hexa() });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Random Number Generator in fast-check (TypeScript)\nDESCRIPTION: Example of how to pass a custom random number generator to fast-check's assert function. This snippet demonstrates the usage that will be impacted by the new API requirements for random number generators in fast-check v3.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfc.assert(..., {randomType: (seed) => myRandomForSeed(seed)})\n```\n\n----------------------------------------\n\nTITLE: Rendering Advent Challenge Interactive Components\nDESCRIPTION: This code renders the interactive playground component where users can test their property-based testing solutions for the day's challenge, along with a form for submitting answers.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-13-advent-of-pbt-day-13/index.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AdventPlaygroundOfTheDay />\n\n## Your answer\n\n<FormOfTheDay />\n```\n\n----------------------------------------\n\nTITLE: Updating noBias Usage in fast-check\nDESCRIPTION: Shows how to update code to use the new standalone noBias arbitrary instead of the deprecated .noBias method on arbitraries.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n--myArbitrary.noBias();\n++fc.noBias(myArbitrary);\n```\n\n----------------------------------------\n\nTITLE: 16-bit Character Generation\nDESCRIPTION: Implementation of 16-bit character and string generation functions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction char16bits(): fc.Arbitrary<string> {\n  return fc.nat({ max: 0xffff }).map((n) => String.fromCharCode(n));\n}\n\nfunction string16bits(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {\n  return fc.string({ ...constraints, unit: char16bits() });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Array-based Single Batch of Calls in JavaScript\nDESCRIPTION: This snippet shows an alternative implementation of a single batch of calls using an array of IDs. It demonstrates how to use fc.array to generate input values for the queue function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/multiple-batches-of-calls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ids being the result of fc.array(fc.nat(), {minLength: 1})\nconst queued = queue(s.scheduleFunction(call));\nfor (const id of ids) {\n  expectedAnswers.push(id);\n  pendingQueries.push(queued(id).then((v) => seenAnswers.push(v)));\n}\nawait s.waitFor(Promise.all(pendingQueries));\n```\n\n----------------------------------------\n\nTITLE: Tree Statistics Generation\nDESCRIPTION: Demonstrates how to analyze the distribution of generated tree sizes using fc.statistics, including size calculations and bucketing logic.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/recursive-structure.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.statistics(\n  fc.letrec((tie) => ({\n    node: fc.record({\n      value: fc.nat(),\n      left: fc.option(tie('node')),\n      right: fc.option(tie('node')),\n    }),\n  })).node,\n  (v) => {\n    function size(n) {\n      if (n === null) return 0;\n      else return 1 + size(n.left) + size(n.right);\n    }\n    const s = size(v);\n    let lower = 1;\n    const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);\n    while (next(lower) <= s) {\n      lower = next(lower);\n    }\n    return `${lower} to ${next(lower) - 1} items`;\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enriching Existing Global Settings\nDESCRIPTION: Example showing how to add new options while preserving existing global settings using readConfigureGlobal.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.configureGlobal({ ...fc.readConfigureGlobal(), ...myNewOptions });\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Advent PBT Challenge\nDESCRIPTION: This code imports the required React components for the Advent of PBT challenge interface, including the playground component and form component specific to this day's challenge.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-13-advent-of-pbt-day-13/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';\nimport BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';\n```\n\n----------------------------------------\n\nTITLE: Testing Query String Array Handling\nDESCRIPTION: Example showing incorrect handling of null values in arrays when using bracket notation in query-string library\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nm.stringify({ bar: ['a', null, 'b'] }, { arrayFormat: 'bracket' }); //=> \"bar[]=a&bar&bar[]=b\"\nm.parse('bar[]=a&bar&bar[]=b', { arrayFormat: 'bracket' }); //=> {bar: [null, 'b']}\n```\n\n----------------------------------------\n\nTITLE: Manipulating String Case with mixedCase Arbitrary\nDESCRIPTION: Demonstrates the use of mixedCase to generate strings with varied character cases. Shows examples with arrays, constant strings, and custom case toggle functions including emoji manipulation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/string.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.mixedCase(fc.array(fc.constantFrom('a', 'b', 'c')).map((cs) => cs.join('')));\n\nfc.mixedCase(fc.constant('hello world'));\n\nfc.mixedCase(fc.constant('hello world'), {\n  toggleCase: (rawChar) => `UP(${rawChar})`,\n  untoggleAll: (toggledString) => toggleString.replace(/UP\\((.)\\)/g, '$1'),\n});\n\nfc.mixedCase(fc.constant('🐱🐢🐱🐢🐱🐢'), {\n  toggleCase: (rawChar) => (rawChar === '🐱' ? '🐯' : '🐇'),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Records with Specific Structure in JavaScript\nDESCRIPTION: Uses fc.record to create objects with predefined structure. Shows examples with different configurations including required keys and null prototype options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/object.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.record({\n  id: fc.uuid({ version: 4 }),\n  age: fc.nat(99),\n});\n// Examples of generated values:\n// • {__proto__:null,\"id\":\"0000001f-2a24-4215-b068-5798948c5f90\",\"age\":3}\n// • {__proto__:null,\"id\":\"acf6f6c5-fff4-4fff-bfff-fff0a2ca880f\",\"age\":18}\n// • {__proto__:null,\"id\":\"5682d7df-8023-4f9b-b7a7-19500000001a\",\"age\":5}\n// • {\"id\":\"0000000b-001a-4000-8000-0001c7ed6eaf\",\"age\":93}\n// • {\"id\":\"f4f0e509-dcc3-435a-8000-0007fffffffe\",\"age\":7}\n// • …\n\nfc.record(\n  {\n    id: fc.uuid({ version: 4 }),\n    age: fc.nat(99),\n  },\n  { requiredKeys: [] },\n);\n// Note: Both id and age will be optional values\n// Examples of generated values:\n// • {__proto__:null,\"id\":\"fffffffb-c066-4b8c-bfff-fff076fecf56\",\"age\":99}\n// • {\"age\":4}\n// • {__proto__:null,\"age\":4}\n// • {\"id\":\"79a18a26-7f2a-44ae-8000-001d24687e88\"}\n// • {__proto__:null,\"id\":\"00000005-6a47-4c09-b343-053a0000000d\",\"age\":24}\n// • …\n\nfc.record(\n  {\n    id: fc.uuid({ version: 4 }),\n    name: fc.constantFrom('Paul', 'Luis', 'Jane', 'Karen'),\n    age: fc.nat(99),\n    birthday: fc.date({ min: new Date('1970-01-01T00:00:00.000Z'), max: new Date('2100-12-31T23:59:59.999Z') }),\n  },\n  { requiredKeys: ['id'] },\n);\n// Note: All keys except 'id' will be optional values. id has been marked as required.\n// Examples of generated values:\n// • {__proto__:null,\"id\":\"90ff29b1-56e2-408d-bf2a-4f6b0000001f\",\"name\":\"Paul\",\"age\":66,\"birthday\":new Date(\"2050-04-17T15:35:56.134Z\")}\n// • {\"id\":\"fffffff5-ffe5-4fff-8000-000b00000013\",\"name\":\"Luis\",\"age\":3,\"birthday\":new Date(\"1970-01-01T00:00:00.025Z\")}\n// • {__proto__:null,\"id\":\"687e2e0a-000e-4000-bfff-fff30000000a\",\"name\":\"Karen\",\"age\":6,\"birthday\":new Date(\"1970-01-01T00:00:00.040Z\")}\n// • {\"id\":\"f6967db5-3699-45bd-b9b6-4b300ca48a17\",\"name\":\"Paul\",\"age\":94,\"birthday\":new Date(\"2031-12-18T04:14:25.874Z\")}\n// • {__proto__:null,\"id\":\"00000009-377c-4856-8000-000d3b05e20d\",\"age\":79}\n// • …\n\nfc.record(\n  {\n    id: fc.uuid({ version: 4 }),\n    age: fc.nat(99),\n  },\n  { noNullPrototype: true },\n);\n// Note: If you only want instances coming with the prototype of Object, you can toggle the flag noNullPrototype.\n// The prototype of Object carry some extra functions with it: `generatedInstance.toString()` can be achieved on it, it \"cannot\" without a prototype if no toString was explicitely defined.\n// Examples of generated values:\n// • {\"id\":\"f24af89b-fff1-4fff-9941-0ed3ffffffe4\",\"age\":5}\n// • {\"id\":\"00000001-860d-4216-ba28-48790000001a\",\"age\":35}\n// • {\"id\":\"fffffff8-9657-4e22-93a8-24ed21bdd338\",\"age\":3}\n// • {\"id\":\"937c1a2c-fffd-4fff-9c7d-d2d200000007\",\"age\":2}\n// • {\"id\":\"dabdc13e-4e5e-43ed-acf2-062100000014\",\"age\":96}\n// • …\n```\n\n----------------------------------------\n\nTITLE: Limiting Shrink Values with limitShrink in TypeScript\nDESCRIPTION: Demonstrates how to use the new limitShrink arbitrary to restrict the number of shrink values for a given arbitrary in fast-check 3.20.0.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-12-whats-new-in-fast-check-3-20-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfc.limitShrink(anyArbitrary, 4); // here we limit the shrinker of anyArbitrary to produce at most 4 values\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet renders a table of contributors to the fast-check project, including their avatars, names, and contribution types.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://matinzd.dev/\"><img src=\"https://avatars.githubusercontent.com/u/24797481?v=4?s=100\" width=\"100px;\" alt=\"Matin Zadeh Dolatabad\"/><br /><sub><b>Matin Zadeh Dolatabad</b></sub></a><br /><a href=\"https://github.com/dubzzz/fast-check/commits?author=matinzd\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Migrating Numeric Arbitrary Signatures\nDESCRIPTION: Examples of migrating from positional parameters to object parameters for numeric arbitraries in Fast-Check. These changes can be made within various versions as specified.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `double(max)` ➜ `double({max})` _requires at least 2.8.0_ — [#2928](https://github.com/dubzzz/fast-check/pull/2928)\n- `double(min, max)` ➜ `double({min, max})` _requires at least 2.8.0_ — [#2928](https://github.com/dubzzz/fast-check/pull/2928)\n- `float(max)` ➜ `float({max})` _requires at least 2.8.0_ — [#2928](https://github.com/dubzzz/fast-check/pull/2928)\n- `float(min, max)` ➜ `float({min, max})` _requires at least 2.8.0_ — [#2928](https://github.com/dubzzz/fast-check/pull/2928)\n- `integer(max)` ➜ `integer({max})` _requires at least 2.6.0_ — [#2939](https://github.com/dubzzz/fast-check/pull/2939)\n- `integer(min, max)` ➜ `integer({min, max})` _requires at least 2.6.0_ — [#2939](https://github.com/dubzzz/fast-check/pull/2939)\n```\n\n----------------------------------------\n\nTITLE: Generating Null Prototype Objects with dictionary Arbitrary in TypeScript\nDESCRIPTION: New option in the dictionary arbitrary to generate objects without any prototype, useful for testing with prototype-less instances.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-17-whats-new-in-fast-check-3-13-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfc.dictionary(\n  fc.string(), // the keys\n  fc.nat(), // the values\n  { noNullPrototype: false },\n);\n// in v3, you'll have to set the option explicitly to false\n```\n\n----------------------------------------\n\nTITLE: Updated Stringifier Output in New Version\nDESCRIPTION: Examples showing the refined output of the stringifier algorithm in the new major release, which now represents objects with null prototypes more concisely.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nstringify(Object.create(null)); // '{__proto__:null}'\nstringify(Object.assign(Object.create(null), { a: 1 })); // '{__proto__:null,\"a\":1}'\n```\n\n----------------------------------------\n\nTITLE: Configuring fast-check global settings\nDESCRIPTION: Setup file content to configure global fast-check settings for use with Jest.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst fc = require('fast-check');\nfc.configureGlobal({ interruptAfterTimeLimit: 5_000 });\n```\n\n----------------------------------------\n\nTITLE: HTML Contributors Table Layout\nDESCRIPTION: HTML table structure for displaying contributor information including avatars, names, and contribution types. Uses HTML table elements with specific styling attributes for layout and alignment.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dubzzz\"><img src=\"https://avatars.githubusercontent.com/u/5300235?v=4?s=100\" width=\"100px;\" alt=\"Nicolas DUBIEN\"/><br /><sub><b>Nicolas DUBIEN</b></sub></a><br /><a href=\"https://github.com/dubzzz/fast-check/commits?author=dubzzz\" title=\"Code\">💻</a> <a href=\"https://github.com/dubzzz/fast-check/commits?author=dubzzz\" title=\"Documentation\">📖</a> <a href=\"https://github.com/dubzzz/fast-check/commits?author=dubzzz\" title=\"Tests\">⚠️</a> <a href=\"#infra-dubzzz\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-dubzzz\" title=\"Design\">🎨</a> <a href=\"#maintenance-dubzzz\" title=\"Maintenance\">🚧</a></td>\n      <!-- Additional contributor entries follow the same pattern -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using noBias Arbitrary in TypeScript\nDESCRIPTION: Demonstrates the new way to use noBias with an arbitrary in fast-check 3.20.0, replacing the deprecated Arbitrary.prototype.noBias method.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-12-whats-new-in-fast-check-3-20-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfc.noBias(anyArbitrary);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Default Size Behavior in TypeScript\nDESCRIPTION: Shows how to configure the global default size behavior in fast-check to match the maximum specified length.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfc.configureGlobal({ defaultSizeToMaxWhenMaxSpecified: true })\n```\n\n----------------------------------------\n\nTITLE: Initial Linear Search Implementation in mapToConstant\nDESCRIPTION: The original linear search implementation in mapToConstant that caused performance issues with larger entry arrays. This approach had O(n) complexity for each lookup.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction buildForChoiceIndex(choiceIndex: number) {\n  let idx = -1;\n  let numSkips = 0;\n  while (choiceIndex >= numSkips) {\n    numSkips += entries[++idx].num;\n  }\n  return entries[idx].build(choiceIndex - numSkips + entries[idx].num);\n}\n```\n\n----------------------------------------\n\nTITLE: Test with Increased Verbosity\nDESCRIPTION: Example of configuring a property test with increased verbosity for detailed failure reporting\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/read-test-reports.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest('should sort numeric elements from the smallest to the largest one', () => {\n  fc.assert(\n    fc.property(fc.array(fc.integer()), (data) => {\n      /* code of the predicate */\n    }),\n    { verbose: 2 },\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using expectType and expectTypeAssignable in TypeScript\nDESCRIPTION: Demonstrates how to use the expectType and expectTypeAssignable functions from @fast-check/expect-type to perform compile-time type checks. These functions verify that the output of a given expression matches the expected type or is assignable to it.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/expect-type/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expectType, expectTypeAssignable } from '@fast-check/expect-type';\n// your code or you own imports\n\nexpectType<number>()(f(1, 2), 'expect the output of f when passed 1 and 2 to be number');\nexpectTypeAssignable<number>()(f(1, 2), 'expect the output of f when passed 1 and 2 to be assignable to number');\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Table in Markdown\nDESCRIPTION: This markdown table shows the compatibility requirements for different versions of fast-check, including Node.js versions, ECMAScript versions, and TypeScript versions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| fast-check | node                   | ECMAScript version | _TypeScript (optional)_ |\n| ---------- | ---------------------- | ------------------ | ----------------------- |\n| **4.x**    | ≥12.17.0<sup>(1)</sup> | ES2020             | ≥5.0                    |\n| **3.x**    | ≥8<sup>(2)</sup>       | ES2017             | ≥4.1<sup>(3)</sup>      |\n| **2.x**    | ≥8<sup>(2)</sup>       | ES2017             | ≥3.2<sup>(4)</sup>      |\n| **1.x**    | ≥0.12<sup>(2)</sup>    | ES3                | ≥3.0<sup>(4)</sup>      |\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Local Sizes in Fast-Check Tests\nDESCRIPTION: This snippet demonstrates how to override the global size setting to 'medium' and customize the size of a specific arbitrary in a test case. It shows the flexibility of size configuration in Fast-Check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/larger-entries-by-default.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Override the global size to medium.\nfc.configureGlobal({ baseSize: 'medium' });\n\n// Override the local size of the second string only.\n// Size 'medium' will be used by a and c, while b will be 'large' (=medium+1).\ntest('should always contain its substrings', () => {\n  fc.assert(\n    fc.property(fc.string(), fc.string({ size: '+1' }), fc.string(), (a, b, c) => {\n      expect(contains(a + b + c, b)).toBe(true);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Unicode Arbitraries in TypeScript\nDESCRIPTION: Defines functions for generating Unicode characters and strings, including handling of surrogate pairs and Basic Multilingual Plane characters.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst gapSize = 0xdfff + 1 - 0xd800;\nfunction unicodeMapper(v: number) {\n  if (v < 0xd800) return v;\n  return v + gapSize;\n}\nfunction unicode(): Arbitrary<string> {\n  return integer({ min: 0, max: 0xffff - gapSize }).map((v) => String.fromCodePoint(unicodeMapper(v)));\n}\n\nfunction unicodeString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {\n  return fc.string({ ...constraints, unit: unicode() });\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Integers with fast-check\nDESCRIPTION: Functions for generating signed integer values within specified ranges using fc.integer(). Supports configurable min/max bounds with defaults of -2147483648 to 2147483647.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.integer();\nfc.integer({ min: -99, max: 99 });\nfc.integer({ min: 65536 });\n```\n\n----------------------------------------\n\nTITLE: Generating IP v4 Addresses Using stringMatching in fast-check 3.10.0\nDESCRIPTION: This snippet shows the new approach using the stringMatching arbitrary introduced in fast-check 3.10.0. It uses a regular expression to define the pattern for valid IP v4 addresses, simplifying the creation of string generators.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-30-whats-new-in-fast-check-3-10-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ipV4Arbitrary = fc.stringMatching(\n  /^(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)\\.(?:\\d|[1-9]\\d|1\\d\\d|2[0-5]\\d)$/,\n);\n```\n\n----------------------------------------\n\nTITLE: Property-Based Testing Examples Documentation\nDESCRIPTION: Markdown documentation explaining different categories of property-based testing examples and strategies for finding properties to test. Includes examples of various test scenarios and testing rules.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/examples/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Examples based on `fast-check`\n\nThis directory gathers multiple examples of properties you might come with when using `fast-check`.\n\nTry online with [CodeSandbox](https://codesandbox.io/s/github/dubzzz/fast-check/tree/main/examples?previewwindow=tests).\n\n_Teach yourself property based through examples_\n```\n\n----------------------------------------\n\nTITLE: Integrating fast-check with Jest\nDESCRIPTION: Examples of using @fast-check/jest to integrate property-based testing with Jest, including array and object parameter syntax.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, fc } from '@fast-check/jest';\n\ntest.prop([fc.string(), fc.string(), fc.string()])('should detect the substring', (a, b, c) => {\n  return (a + b + c).includes(b);\n});\n\ntest.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {\n  return (a + b + c).includes(b);\n});\n```\n\n----------------------------------------\n\nTITLE: Optimized String Padding Implementation in TypeScript\nDESCRIPTION: Improved implementation using string concatenation to avoid array allocations and reduce memory usage.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-07-24-whats-new-in-fast-check-3-12-0/index.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction pad(value: string, constLength: number) {\n  let extraPadding = '';\n  while (value.length + extraPadding.length < constLength) {\n    extraPadding += '0';\n  }\n  return extraPadding + value;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining statistics Function Signature in TypeScript\nDESCRIPTION: This snippet demonstrates the TypeScript signature for the statistics function in fast-check. It helps analyze the distribution of generated values from an arbitrary or property.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/runners.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction statistics<Ts>(\n  generator: IRawProperty<Ts, boolean> | Arbitrary<Ts>,\n  classify: (v: Ts) => string | string[],\n  params?: number | Parameters<Ts>,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Using the JavaScript API for @fast-check/packaged\nDESCRIPTION: Code example demonstrating the JavaScript API for computing published files and removing non-published files. Includes examples for working with the current directory and subdirectories.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/packaged/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { computePublishedFiles, removeNonPublishedFiles } from '@fast-check/packaged';\n\n// Compute the list of all files that would be part of the bundle\n// if we attempted to publish the packge defined at .\nconst publishedFilesRoot = await computePublishedFiles('.');\n\n// Compute the list of all files that would be part of the bundle\n// if we attempted to publish the packge defined at ./sub-directory\nconst publishedFilesSubDirectory = await computePublishedFiles('./sub-directory');\n\n// Run the deletion of unwanted files\nconst { kept, removed } = await removeNonPublishedFiles('.', { dryRun: false, keepNodeModules: false });\n// kept and removed are arrays of strings\n// they may contain files or directories\n```\n\n----------------------------------------\n\nTITLE: Installing fast-check Dependencies\nDESCRIPTION: Command to install fast-check as a development dependency using npm package manager.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-nodejs-test-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev fast-check\n```\n\n----------------------------------------\n\nTITLE: Specifying Maximum String Length with Size Control in TypeScript\nDESCRIPTION: Demonstrates how to generate strings with a maximum length while also controlling the size distribution using the 'size' parameter in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfc.string({ maxLength: 10_000, size: 'max' })\n```\n\n----------------------------------------\n\nTITLE: Custom Parameters in Fast-Check Tests\nDESCRIPTION: Demonstrates how to pass custom parameters to fast-check using the Parameters object, including options like numRuns for controlling test execution.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testProp, fc } from '@fast-check/ava';\n\ntestProp(\n  'should detect the substring',\n  [fc.string(), fc.string(), fc.string()],\n  (t, a, b, c) => {\n    t.true((a + b + c).includes(b));\n  },\n  { numRuns: 10 }, // Example of parameters\n);\n```\n\n----------------------------------------\n\nTITLE: String Generation with Composite Graphemes\nDESCRIPTION: Generates strings using printable composite graphemes where length is measured in code points.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: 'grapheme-composite' });\n// Note: Any string made only of printable graphemes.\n// With 'grapheme-composite', minLength (resp. maxLength) refers to length in terms of code points (equivalent to visual entities for this type).\n// Examples of generated values: \"🭃𖼰𱍊alleef\", \"#\", \"𝕃ᖺꏪ🪓ሪ㋯𑼓𘠴𑑖\", \"\", \"\\\"isP\"\n```\n\n----------------------------------------\n\nTITLE: Basic Shrinking Implementation for FakerFirstNameBuilder in TypeScript\nDESCRIPTION: This snippet shows a basic implementation of the `shrink` method for FakerFirstNameBuilder, using fc.string() for shrinking. It demonstrates how to leverage existing shrinking capabilities from fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst strArb = fc.string({ minLength: 1 });\n\nclass FakerFirstNameBuilder extends fc.Arbitrary<string> {\n  // generate() {...}\n  // canShrinkWithoutContext() {...}\n  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {\n    return strArb.shrink(value, context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Functions with fast-check Scheduler\nDESCRIPTION: This code snippet demonstrates how to use fast-check's scheduler to test asynchronous functions. It sets up a test scenario with pre-resolved promises and uses the `waitFor` function to manage task execution order.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-04-06-whats-new-in-fast-check-4-1-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// s is the scheduler provided by fast-check\nconst caches = {\n  // our test focuses on caches being already resolved\n  d: Promise.resolve('d'),\n  e: Promise.resolve('e'),\n  f: Promise.resolve('f'),\n};\nconst myapi = fc.scheduleFunction(async (value) => value);\nawait s.waitFor(Promise.all([abc(myapi), def(caches, myapi)]));\n// more code with expectations...\n```\n\n----------------------------------------\n\nTITLE: Installing Fast-Check AVA Package\nDESCRIPTION: Commands to install the @fast-check/ava package using npm package manager. Requires AVA to be installed as a prerequisite.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @fast-check/ava\n```\n\n----------------------------------------\n\nTITLE: Configuring isolation level for worker threads\nDESCRIPTION: Example showing how to customize the isolation level for worker threads. This controls whether workers are shared across properties or isolated per property or predicate execution.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/worker/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst property = propertyFor(new URL(import.meta.url), { isolationLevel: 'predicate' });\n// Other values:\n// - \"file\": Re-use workers cross properties (default)\n// - \"property\": Re-use workers for each run of the predicate. Not shared across properties!\n// - \"predicate\": One worker per run of the predicate\n```\n\n----------------------------------------\n\nTITLE: Using Grapheme Unit in String Arbitrary in TypeScript\nDESCRIPTION: Demonstrates how to create a string arbitrary that generates strings composed of graphemes (visual entities) rather than just ASCII characters. This allows for more diverse string generation including multi-code point characters.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-08-29-whats-new-in-fast-check-3-22-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfc.string({ unit: 'grapheme' });\n```\n\n----------------------------------------\n\nTITLE: Migrating Other Arbitrary Signatures\nDESCRIPTION: Examples of migrating from positional parameters to object parameters for various other arbitraries in Fast-Check. These changes can be made within various versions as specified.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `commands(commandArbs, maxCommands)` ➜ `commands(commandArbs, maxCommands)` _requires at least 1.11.0_ — [#2931](https://github.com/dubzzz/fast-check/pull/2931)\n- `option(arb, freq)` ➜ `option(arb, {freq})` _requires at least 1.17.0_ — [#2932](https://github.com/dubzzz/fast-check/pull/2932)\n- `json(maxDepth)` ➜ `json({maxDepth})` _requires at least 2.5.0_ — [#2933](https://github.com/dubzzz/fast-check/pull/2933)\n- `unicodeJson(maxDepth)` ➜ `unicodeJson({maxDepth})` _requires at least 2.5.0_ — [#2933](https://github.com/dubzzz/fast-check/pull/2933)\n- `lorem(maxWordsCount)` ➜ `lorem({maxWordsCount})` — [#2934](https://github.com/dubzzz/fast-check/pull/2934)\n- `lorem(maxWordsCount, sentencesMode)` ➜ `lorem({maxWordsCount, mode})` _requires at least 2.5.0_ — [#2934](https://github.com/dubzzz/fast-check/pull/2934)\n```\n\n----------------------------------------\n\nTITLE: Integrating Faker with fast-check's Randomizer in TypeScript\nDESCRIPTION: An example showing how to integrate the Faker library with fast-check's controlled randomness, allowing for realistic test data without sacrificing reproducibility.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-03-28-beyond-flaky-tests-bringing-controlled-randomness-to-vitest/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Faker, base } from '@faker-js/faker';\n\ntest('the name of your test', ({ g }) => {\n  const faker = new Faker({\n    locale: base,\n    randomizer: {\n      next: () => g(fc.nat, { max: 0xffffffff }) / 0x100000000,\n      seed: () => {},\n    },\n  });\n  // Your test...\n});\n```\n\n----------------------------------------\n\nTITLE: String Generation with Binary ASCII\nDESCRIPTION: Generates strings using ASCII characters in the 0000-007F range with length measured in code units.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: 'binary-ascii' });\n// Note: Results in strings made of any possible combinations of ascii characters (in 0000-007F range).\n// With 'binary-ascii', minLength (resp. maxLength) refers to length in terms of code units aka chars (equivalent to code points for this type).\n// Examples of generated values: \"c\\\\3\\f\\u0000\\u001f\\u00047\", \"M\\u0006\\fD!U\\u000fXss\", \"\", \"s\\u0000\", \"\\n\\u0006tkK\"\n```\n\n----------------------------------------\n\nTITLE: Importing fast-check Library\nDESCRIPTION: Import statement to include the fast-check testing framework in the test file.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/our-first-property-based-test.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\n```\n\n----------------------------------------\n\nTITLE: Statistics for Web Path Generation With Increased Size\nDESCRIPTION: Example showing how paths starting with '//' could be generated before 3.18.0 by explicitly increasing the size parameter, resulting in about 7.33% of paths with '//'.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-04-28-whats-new-in-fast-check-3-18-0/index.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfc.statistics(fc.webPath({ size: '+1' }), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });\n// without //..92.67%\n// with //......7.33%\n```\n\n----------------------------------------\n\nTITLE: Displaying React Warning in Testing Environment\nDESCRIPTION: An example of a React warning message shown when state updates are not wrapped in act(...) during testing. This warning appears when manually manipulating Promise resolution timing.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-21-whats-new-in-fast-check-3-9-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nWarning: An update to TestComponent inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration Setup\nDESCRIPTION: Configuration for Jest test framework to enable global fast-check settings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  setupFiles: ['./jest.setup.js'],\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fc = require('fast-check');\nfc.configureGlobal({ numRuns: 10 });\n```\n\n----------------------------------------\n\nTITLE: Flaky Test Example with Uncontrolled Randomness in TypeScript\nDESCRIPTION: A test example showing how uncontrolled randomness using Date.now() can lead to flaky tests. This demonstrates the problem of non-deterministic values in test code.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-03-28-beyond-flaky-tests-bringing-controlled-randomness-to-vitest/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest('considered active if its end timestamp is 100ms after now', () => {\n  // Arrange\n  const now = Date.now();\n  const user: User = {\n    // many other fields...\n    endDateTimestamp: Date.now() + 100,\n  };\n\n  // Act\n  const active = isStillActive(user, now);\n\n  // Assert\n  expect(active).toBe(true);\n});\n```\n\n----------------------------------------\n\nTITLE: String Generation with Minimum Length\nDESCRIPTION: Generates strings with a minimum length constraint of 3 characters using the minLength parameter.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ minLength: 3 });\n// Note: Any string containing at least 3 (included) characters\n// Examples of generated values: \"Pv-^X_t\", \"bind\", \"?DM\", \"iEjK.b?^O\", \"}~}S\"\n```\n\n----------------------------------------\n\nTITLE: Basic Property Test Predicate\nDESCRIPTION: JavaScript code showing the predicate function used in property-based testing to verify sorting behavior\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/read-test-reports.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(data) => {\n  const sortedData = sortNumbersAscending(data);\n  for (let i = 1; i < data.length; ++i) {\n    expect(sortedData[i - 1]).toBeLessThanOrEqual(sortedData[i]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Simple Constants in JavaScript with fast-check\nDESCRIPTION: The constant arbitrary always produces the same specified value. It can handle any JavaScript value type including primitives and objects.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/constant.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.constant(1);\n// Examples of generated values: 1…\n\nfc.constant({});\n// Examples of generated values: {}…\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Strings with Fast-Check\nDESCRIPTION: Demonstrates various ways to generate base64 encoded strings using fc.base64String(). Includes examples of basic usage and configuring length constraints. Generated strings are always valid base64 with proper padding.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/file.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.base64String();\n// Examples of generated values: \"\", \"J7B8AB/V89==\", \"3H9Pr5M=\", \"bv6z\", \"V/GSu73r\"…\n\nfc.base64String({ maxLength: 8 });\n// Note: Any base64 string containing up to 8 (included) characters\n// Examples of generated values: \"f3A+nr==\", \"37/7\", \"\", \"wC9q\", \"BLop9YK=\"…\n\nfc.base64String({ minLength: 8 });\n// Note: Any base64 string containing at least 8 (included) characters\n// Examples of generated values: \"f3A+nrd9UefIFrD27/==\", \"7/7+S88//DE/6M9QPAFg\", \"9refalueODsnam==\", \"toString\", \"callerkeyC8=\"…\n\nfc.base64String({ minLength: 4, maxLength: 12 });\n// Note: Any base64 string containing between 4 (included) and 12 (included) characters\n// Examples of generated values: \"YQ7D/IU8fE+2\", \"tjhMHtq9\", \"property\", \"9lm8Vx7bBF==\", \"roto\"…\n```\n\n----------------------------------------\n\nTITLE: Generating Null Prototype Objects with record Arbitrary in TypeScript\nDESCRIPTION: New option in the record arbitrary to generate objects without any prototype, allowing testing with prototype-less record instances.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-17-whats-new-in-fast-check-3-13-0/index.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfc.record(\n  {\n    keyA: fc.nat(), // the keys for our records (here: keyA and keyB)\n    keyB: fc.string(), // and associated values (here: nat and string)\n  },\n  { noNullPrototype: false },\n);\n// in v3, you'll have to set the option explicitly to false\n```\n\n----------------------------------------\n\nTITLE: Mocha Setup Configuration\nDESCRIPTION: Example of configuring global fast-check settings in Mocha test framework.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fc = require('fast-check');\nfc.configureGlobal({ numRuns: 10 });\n```\n\n----------------------------------------\n\nTITLE: Generating Uint32Array Values with fast-check\nDESCRIPTION: Generate Uint32Array instances with configurable value ranges (0 to 4294967295) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uint32Array();\n// Examples of generated values:\n// • Uint32Array.from([3829422059,2425734304,2138206756])\n// • Uint32Array.from([19,1046862664])\n// • Uint32Array.from([3669232337,2464093827,3748932991,1057761988,4236064175,4122041182,1618733983,882909472])\n// • Uint32Array.from([269035825,2242944705,2375219908])\n// • Uint32Array.from([755444117,555135045,2658796072,3505820369,3087063619])\n// • …\n\nfc.uint32Array({ max: 42, minLength: 1 });\n// Examples of generated values:\n// • Uint32Array.from([40,10,16,0,0,41])\n// • Uint32Array.from([22,28])\n// • Uint32Array.from([24])\n// • Uint32Array.from([38])\n// • Uint32Array.from([1])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Bypassing Immediate Shrinking in fast-check for Performance Testing\nDESCRIPTION: Configuration to disable fast-check's shrinking process during initial vulnerability detection, which is useful when the primary goal is identifying inputs causing long execution times.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nfc.assert(property, { endOnFailure: true });\n// with the number of entries and shrinker together:\n// fc.assert(property, { numRuns: 1_000_000, endOnFailure: true });\n```\n\n----------------------------------------\n\nTITLE: Generating Ordered Subarrays in JavaScript with fast-check\nDESCRIPTION: The subarray arbitrary generates subarrays while maintaining original order, with configurable length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/constant.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.subarray([1, 42, 48, 69, 75, 92]);\n// Examples of generated values: [], [1,48,69,75,92], [48], [1,42,75], [1,48,75,92]…\n\nfc.subarray([1, 42, 48, 69, 75, 92], { minLength: 5 });\n// Examples of generated values: [1,42,48,69,75], [1,42,48,69,92], [1,42,48,75,92], [42,48,69,75,92], [1,42,69,75,92]…\n\nfc.subarray([1, 42, 48, 69, 75, 92], { maxLength: 5 });\n// Examples of generated values: [48,75], [1], [], [48,92], [69,75]…\n\nfc.subarray([1, 42, 48, 69, 75, 92], { minLength: 2, maxLength: 3 });\n// Examples of generated values: [48,75], [48,69,92], [42,75], [69,92], [1,42]…\n```\n\n----------------------------------------\n\nTITLE: Custom toString Implementation in fast-check\nDESCRIPTION: Examples of implementing custom string serialization for test values using toStringMethod and asyncToStringMethod\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/custom-reports.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nObject.defineProperties(myInstanceWithoutCustomToString, {\n  [fc.toStringMethod]: { value: () => 'my-value' },\n});\n\nObject.defineProperties(myPromisePossiblyResolved, {\n  [fc.asyncToStringMethod]: {\n    value: async () => {\n      const resolved = await myPromisePossiblyResolved;\n      return `My value: ${resolved}`;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Longest Common Substring with Unicode\nDESCRIPTION: Example showing incorrect handling of Unicode characters outside BMP plan in longest common substring algorithm\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlongestCommonSubstr('𐌵𐌵**ABC', '𐌵𐌵--ABC'); //=> \"𐌵𐌵\"\n// expected to be \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Using the New noInteger Option in Double Arbitrary\nDESCRIPTION: Example of using the new `noInteger` option introduced in version 3.18.0 to directly generate only non-integer double values, providing a more concise and optimized approach.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-04-28-whats-new-in-fast-check-3-18-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfc.double({ noInteger: true }); // Starting at version 3.18.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest setup file\nDESCRIPTION: Jest configuration to include a setup file for global fast-check settings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  setupFiles: ['./jest.setup.js'],\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Constants from Set in JavaScript with fast-check\nDESCRIPTION: The constantFrom arbitrary randomly selects from provided values, using the first value as default for shrinking. Requires at least one value.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/constant.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.constantFrom(1, 2, 3);\n// Examples of generated values: 1, 3, 2…\n\nfc.constantFrom(1, 'string', {});\n// Examples of generated values: 1, \"string\", {}…\n```\n\n----------------------------------------\n\nTITLE: Naive Integration of Faker with fast-check in TypeScript\nDESCRIPTION: This code snippet demonstrates a basic integration of Faker with fast-check. It creates an arbitrary that generates a seed, seeds Faker, and then generates a value using a provided generator function. However, this approach has limitations in terms of performance, distribution, and side effects.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\nimport fc from 'fast-check';\n\nfunction fakerToArb<TValue>(generator: () => TValue): fc.Arbitrary<TValue> {\n  return fc.noShrink(fc.integer()).map((seed) => {\n    faker.seed(seed);\n    return generator();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Null Prototype in JavaScript\nDESCRIPTION: Demonstrates how to create an object instance without inheriting from Object.prototype, which lacks common methods like toString or hasOwnProperty.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-17-whats-new-in-fast-check-3-13-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst instance = Object.create(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reporter in fast-check\nDESCRIPTION: Example of implementing a custom reporter function for assert to customize failure reporting\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/custom-reports.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.assert(\n  fc.property(...),\n  {\n    reporter(out) {\n      if (out.failed) {\n        throw new Error(fc.defaultReportMessage(out));\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in JSX\nDESCRIPTION: This code snippet imports and renders a DocCardList component, likely used to display a list of documentation cards for composite arbitraries in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Migrating Array Arbitrary Signatures\nDESCRIPTION: Examples of migrating from positional parameters to object parameters for array-related arbitraries in Fast-Check. These changes can be made within version 2.4.0 or later.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_2.X_TO_3.X.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `array(arb, maxLength)` ➜ `array(arb, {maxLength})` _requires at least 2.4.0_ — [#2927](https://github.com/dubzzz/fast-check/pull/2927)\n- `array(arb, minLength, maxLength)` ➜ `array(arb, {minLength, maxLength})` _requires at least 2.4.0_ — [#2927](https://github.com/dubzzz/fast-check/pull/2927)\n- `shuffledSubarray(originalArray, minLength, maxLength)` ➜ `shuffledSubarray(originalArray, {minLength, maxLength})` _requires at least 2.4.0_ — [#2930](https://github.com/dubzzz/fast-check/pull/2930)\n- `subarray(originalArray, minLength, maxLength)` ➜ `subarray(originalArray, {minLength, maxLength})` _requires at least 2.4.0_ — [#2930](https://github.com/dubzzz/fast-check/pull/2930)\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Implementation with Raw Async Call\nDESCRIPTION: Shows the original implementation using a raw async queue call.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/one-step-closer-to-real-usages.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst queued = queue(call);\n```\n\n----------------------------------------\n\nTITLE: Legacy Custom Reporter Implementation\nDESCRIPTION: Historical example of implementing a custom reporter before reporter/asyncReporter options were available\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/custom-reports.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst throwIfFailed = (out) => {\n  if (out.failed) {\n    throw new Error(fc.defaultReportMessage(out));\n  }\n};\nconst myCustomAssert = (property, parameters) => {\n  const out = fc.check(property, parameters);\n\n  if (property.isAsync()) {\n    return out.then((runDetails) => {\n      throwIfFailed(runDetails);\n    });\n  }\n  throwIfFailed(out);\n};\n```\n\n----------------------------------------\n\nTITLE: Statistics for Improved Web Path Generation in 3.18.0\nDESCRIPTION: Code showing the improved web path generation in version 3.18.0, where paths starting with '//' are now generated by default without size adjustment, at a rate of about 20.25%.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-04-28-whats-new-in-fast-check-3-18-0/index.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfc.statistics(fc.webPath(), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });\n// without //..79.75%\n// with //.....20.25%\n```\n\n----------------------------------------\n\nTITLE: Updating Explicit Typing for fc.constantFrom\nDESCRIPTION: Comparison of how to use explicit typing with fc.constantFrom in both version 1.x and 2.x. The new version simplifies the typing or requires a different approach when explicit typing is needed.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n/// In version 1.x.x\nfc.constantFrom<boolean | null | number>(false, null, 0);\n\n/// In version 2.x.x\nfc.constantFrom(false, null, 0);\n// or with an explicit typing\nfc.constantFrom<(boolean | null | number)[]>(false, null, 0);\n```\n\n----------------------------------------\n\nTITLE: Markdown Content with Examples of Valid Enchanted Words\nDESCRIPTION: Provides examples of valid enchanted words that Santa uses, including emoji sequences and palindromes. The content specifies that enchanted words can contain any printable character that fits on a single line.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-10-advent-of-pbt-day-10/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- \"⛄⭐⛄\"\n- \"noon\"\n- \"☀️🌙⭐🌙☀️🌙⭐🌙☀️\"\n```\n\n----------------------------------------\n\nTITLE: Non-compiling Example of fc.constantFrom in v1.x\nDESCRIPTION: Example showing code that would not compile in version 1.x due to improper tuple typing in fc.constantFrom. This illustrates the typing issue that has been fixed in version 2.x.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfc.constantFrom(false, null, undefined, 0);\n```\n\n----------------------------------------\n\nTITLE: Advanced Unicode Arbitrary Implementation with Unmapping in TypeScript\nDESCRIPTION: Extends the Unicode arbitrary implementation with an unmapping function for bidirectional conversion, useful for more complex Unicode handling scenarios.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst gapSize = 0xdfff + 1 - 0xd800;\nfunction unicodeMapper(v: number) {\n  if (v < 0xd800) return v;\n  return v + gapSize;\n}\nfunction unicodeUnmapper(v: number) {\n  if (v < 0xd800) return v;\n  if (v <= 0xdfff) return -1;\n  return v - gapSize;\n}\nfunction unicode(): Arbitrary<string> {\n  return integer({ min: 0, max: 0xffff - gapSize }).map(\n    (v) => String.fromCodePoint(unicodeMapper(v)),\n    (s) => {\n      if (typeof s !== 'string') throw new Error('Invalid');\n      if (s.length !== 1) throw new Error('Invalid');\n      return unicodeUnmapper(s.codePointAt(0));\n    },\n  );\n}\n\n// unicodeString unchanged!\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Dictionary with Hardcoded Identifier in JavaScript\nDESCRIPTION: Demonstrates how to create a recursive dictionary structure using a hardcoded depthIdentifier string that is reused between arbitraries to control recursion depth.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-03-01-whats-new-in-fast-check-3-15-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst recursive2 = fc.letrec((tie) => ({\n  self: fc.dictionary(\n    fc.string(),\n    fc.oneof({ depthIdentifier: 'id', maxDepth: 1 }, tie('leaf'), tie('self')),\n    { depthIdentifier: 'id' }, // we bind the two recursive levels together by referencing the same depthIdentifier\n  ),\n  leaf: fc.nat(),\n})).self;\n```\n\n----------------------------------------\n\nTITLE: Generating JSON-Compatible Values with jsonValue in JavaScript\nDESCRIPTION: The jsonValue function generates values that can be stringified to JSON and parsed back to themselves. It supports various configuration options including depth control and character set customization.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/file.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.jsonValue();\n// Examples of generated values:\n// • true\n// • {\"a\":false,\"&{v%\":true,\"O}u&;O\":\"ef\",\"^69fY8G[M\":false,\"^%\":null,\"iC\":-2.11992523062418e-82,\"F%]8l0g6|\":null}\n// • [{\"^\":true,\"1Y??Vih\":-379313284684773500000,\"_5zzvjCE\":\"B\",\"B561n_\":\"2\",\"eqHZM9R\":null},1.2791945048214157e-72]\n// • false\n// • [null,true,true,\"`l+$I\",\"kSros\",null]\n// • …\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.jsonValue({ noUnicodeString: false });\n// Examples of generated values:\n// • [\"򴾼󹤷𡅤񤱓򛗡\"]\n// • {\"􎵔򲁼򀎈𸝔􃌉􊿛񹙦\":[false],\"򨊗𤮈𡈡󵑑񗀏򏗔𙔔𐸵񇘼\":556603.8398649627,\"􏿽\\u000b򸑽\":{\"񐀞󴕃󙉅񂊠𴛐󻕀㢋񦔘\":true,\"񊈒􋚭󷪙𫪀󌧶񉝒𱣆\":null,\"\":5.539268054957889e+74,\"򦹷\":\"񜝍⌳򻍜񇓷񖋦\",\"񥸱񥊔򦹗\":4.847354156832373e-25,\"񜂑򹏁󞦐\":\"𻬫𳤲󵹃򕏧񁃵\",\"𓧎𖰦\":false,\"󛻳򏜚񃛷񌛑𝜀󞅤񪉺\":false}}\n// • [null,[\"󿦼񌅡󯻾𝀹򲓋񁆺񐿏󃢰\",-2.4628931920258706e-282,null,false,2.681696006505804e-238,\"򢰮\"]]\n// • \"򐐩\"\n// • []\n// • …\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.jsonValue({ maxDepth: 0 });\n// Examples of generated values: true, null, false, \"prototype\", \"L4)5M\"…\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.jsonValue({ maxDepth: 1 });\n// Examples of generated values:\n// • 1.1084525170506737e-156\n// • [null,\"co\",null]\n// • [null,null]\n// • [null,\"_\",-4.808983581881553e-305,1.3122779113832298e-87,\"<tiQ8\",null]\n// • true\n// • …\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.statistics(fc.jsonValue(), (v) => {\n  function size(n) {\n    if (Array.isArray(n)) return 1 + n.reduce((acc, child) => acc + size(child), 0);\n    if (typeof n === 'object' && n) return 1 + Object.values(n).reduce((acc, child) => acc + size(child), 0);\n    return 1;\n  }\n  const s = size(v);\n  let lower = 1;\n  const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);\n  while (next(lower) <= s) {\n    lower = next(lower);\n  }\n  return `${lower} to ${next(lower) - 1} items`;\n});\n// Computed statistics for 10k generated values:\n// For size = \"xsmall\":\n// • 1 to 4 items..100.00%\n// For size = \"small\":\n// • 1 to 4 items....43.79%\n// • 10 to 49 items..38.40%\n// • 5 to 9 items....17.64%\n// • 50 to 99 items...0.17%\n// For size = \"medium\":\n// • 50 to 99 items......35.09%\n// • 1 to 4 items........33.88%\n// • 10 to 49 items......20.48%\n// • 100 to 499 items....10.15%\n// • 500 to 999 items.....0.36%\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfc.statistics(fc.jsonValue({ maxDepth: 2 }), (v) => {\n  function size(n) {\n    if (Array.isArray(n)) return 1 + n.reduce((acc, child) => acc + size(child), 0);\n    if (typeof n === 'object' && n) return 1 + Object.values(n).reduce((acc, child) => acc + size(child), 0);\n    return 1;\n  }\n  const s = size(v);\n  let lower = 1;\n  const next = (n) => (String(n)[0] === '1' ? n * 5 : n * 2);\n  while (next(lower) <= s) {\n    lower = next(lower);\n  }\n  return `${lower} to ${next(lower) - 1} items`;\n});\n// Computed statistics for 10k generated values:\n// For size = \"xsmall\":\n// • 1 to 4 items..100.00%\n// For size = \"small\":\n// • 1 to 4 items....44.64%\n// • 5 to 9 items....34.00%\n// • 10 to 49 items..21.36%\n// For size = \"medium\":\n// • 1 to 4 items......34.60%\n// • 50 to 99 items....33.01%\n// • 10 to 49 items....26.56%\n// • 100 to 499 items...4.49%\n// • 5 to 9 items.......1.34%\n```\n\n----------------------------------------\n\nTITLE: Scheduled Queue Implementation\nDESCRIPTION: Demonstrates how to wrap the async call with a scheduler for better race condition detection.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/one-step-closer-to-real-usages.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst queued = queue(s.scheduleFunction(call));\n```\n\n----------------------------------------\n\nTITLE: Default Test Failure Output Format in fast-check\nDESCRIPTION: Example of the default failure report format showing test name, seed, counterexample, and error details\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/custom-reports.md#2025-04-11_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n**FAIL**  sort.test.mjs > should sort numeric elements from the smallest to the largest one\nError: Property failed after 1 tests\n{ seed: -1819918769, path: \"0:...:3\", endOnFailure: true }\nCounterexample: [[2,1000000000]]\nShrunk 66 time(s)\nGot error: AssertionError: expected 1000000000 to be less than or equal to 2\n```\n\n----------------------------------------\n\nTITLE: Installing fast-check and Jest connector\nDESCRIPTION: Command to install fast-check and the Jest connector library using npm or yarn.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev fast-check @fast-check/jest\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm in fast-check Project\nDESCRIPTION: This command runs the tests in the fast-check tutorial project using npm. It assumes the test script is properly configured in package.json.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/basic-setup.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Property-Based Test Implementation for User Age Sorting\nDESCRIPTION: Enhanced version of the user sorting test using fast-check's property-based testing approach. Provides better failure reporting and reproducibility.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fake-data.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntest('sort users by ascending age', () => {\n  fc.assert(\n    fc.property(\n      fc\n        .record({\n          firstName: firstNameArb(),\n          lastName: lastNameArb(),\n          birthDate: birthDateArb(),\n        })\n        .chain((userA) =>\n          fc.record({\n            userA: fc.constant(userA),\n            userB: fc.record({\n              firstName: firstNameArb(),\n              lastName: lastNameArb(),\n              birthDate: birthDateArb({ strictlyOlderThan: userA.birthDate }),\n            }),\n          }),\n        ),\n      ({ userA, userB }) => {\n        expect(sortByAge([userA, userB])).toEqual([userA, userB]);\n        expect(sortByAge([userB, userA])).toEqual([userA, userB]);\n      },\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Fast-Check version 2.x with Package Managers\nDESCRIPTION: Commands for installing Fast-Check version 2.x using either Yarn or npm package managers. These commands update the package to the new major version.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For yarn users\nyarn add fast-check@^2.0.0 --dev\n# For npm users\nnpm install fast-check@2.0.0 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Generating Extended IPv4 Addresses with fast-check\nDESCRIPTION: Generates IPv4 addresses in various formats supported by WhatWG standard including hexadecimal and octal notations.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.ipV4Extended();\n// Examples of generated values: \"0x7.249.0xfe.0x79\", \"07.0x7b.1.0x6\", \"0xa5.0265.22.27\", \"0xd4.0xfd.15664\", \"0x1ed7207\"…\n```\n\n----------------------------------------\n\nTITLE: Running Bun Tests\nDESCRIPTION: Command to execute the property-based tests using Bun test runner.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-bun-test-runner.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun test\n```\n\n----------------------------------------\n\nTITLE: Installing fast-check with Bun\nDESCRIPTION: Command to install fast-check as a development dependency in a Bun project.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-bun-test-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install -D fast-check\n```\n\n----------------------------------------\n\nTITLE: Full Unicode String Generation\nDESCRIPTION: Implementation of full Unicode character and string generation using the new string arbitrary.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fullUnicode(): fc.Arbitrary<string> {\n  return fc.string({ unit: 'binary', minLength: 1, maxLength: 1 });\n}\n\nfunction fullUnicodeString(constraints: Omit<fc.StringConstraints, 'unit'> = {}): fc.Arbitrary<string> {\n  return fc.string({ ...constraints, unit: 'binary' });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating stringOf Usage in fast-check\nDESCRIPTION: Shows how to replace the stringOf arbitrary with the more flexible string arbitrary in fast-check v3.22.0 and later.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n-fc.stringOf(fc.constantFrom('Hello', 'World'));\n+fc.string({ unit: fc.constantFrom('Hello', 'World') });\n```\n\n----------------------------------------\n\nTITLE: Updated Usage of Improved Faker Integration with fast-check in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the updated Faker integration API in a test scenario. It generates first and last names using a scoped Faker instance.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('produce a string containing the first and the last name', () => {\n  fc.assert(\n    fc.property(\n      fakerToArb((faker) => faker.person.firstName),\n      fakerToArb((faker) => faker.person.lastName),\n      (firstName, lastName) => {\n        const formatted = format(firstName, lastName);\n        expect(formatted).toContain(firstName);\n        expect(formatted).toContain(lastName);\n      },\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Minified Browser Bundle for Fast-Check\nDESCRIPTION: Command to create a minified browser bundle for Fast-Check using Browserify and Terser. This produces a size-optimized version for browser usage.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx -p browserify -p terser -c \"browserify node_modules/fast-check/lib/fast-check.js --s fastcheck | terser -c -m > node_modules/fast-check/lib/bundle.js\"\n```\n\n----------------------------------------\n\nTITLE: UUID Version Constraint\nDESCRIPTION: Demonstrates how to limit UUID generation to specific versions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--fc.uuid();\n++fc.uuid({ version: [1, 2, 3, 4, 5] });\n```\n\n----------------------------------------\n\nTITLE: Running Tests with NPM/Yarn\nDESCRIPTION: Command to execute the test suite using npm or yarn package managers\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/read-test-reports.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Type Definition Changes for CommandsIterable\nDESCRIPTION: Breaking change showing the removal of the cloneMethod Symbol from the TypeScript type definitions for the CommandsIterable class.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CommandsIterable<Model extends object, Real, RunResult, CheckAsync extends boolean = false>\n  implements Iterable<CommandWrapper<Model, Real, RunResult, CheckAsync>>\n{\n  readonly commands: CommandWrapper<Model, Real, RunResult, CheckAsync>[];\n  readonly metadataForReplay: () => string;\n  constructor(commands: CommandWrapper<Model, Real, RunResult, CheckAsync>[], metadataForReplay: () => string);\n  [Symbol.iterator](): Iterator<CommandWrapper<Model, Real, RunResult, CheckAsync>>;\n-  [cloneMethod](): CommandsIterable<Model, Real, RunResult, CheckAsync>;\n  toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Schema-Based Data with @effect/schema\nDESCRIPTION: Demonstrates how to generate random test data that conforms to a defined Schema using @effect/schema integration with fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Arbitrary from '@effect/schema/Arbitrary';\nimport * as S from '@effect/schema/Schema';\nimport * as fc from 'fast-check';\n\nconst Person = S.struct({\n  name: S.string,\n  age: S.string.pipe(S.compose(S.NumberFromString), S.int()),\n});\nconst isPerson = S.is(Person);\nconst personArbitrary = Arbitrary.make(Person)(fc);\n\ntest('Only generating valid Person', () => {\n  fc.assert(\n    fc.property(personArbitrary, (person) => {\n      expect(isPerson(person)).toBe(true);\n    }),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Tree Generation with Shared Depth Identifier\nDESCRIPTION: Illustrates the use of createDepthIdentifier() to share depth constraints across different branches of the tree structure.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/recursive-structure.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst depthIdentifier = fc.createDepthIdentifier();\nfc.letrec((tie) => ({\n  node: fc.record({\n    value: fc.nat(),\n    left: fc.option(tie('node'), { maxDepth: 1, depthIdentifier }),\n    right: fc.option(tie('node'), { maxDepth: 1, depthIdentifier }),\n  }),\n})).node;\n```\n\n----------------------------------------\n\nTITLE: Type Definition Changes for CommandWrapper\nDESCRIPTION: Breaking change showing the removal of Symbol-based methods (toStringMethod and asyncToStringMethod) from the TypeScript type definitions for CommandWrapper class.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class CommandWrapper<Model extends object, Real, RunResult, CheckAsync extends boolean>\n  implements ICommand<Model, Real, RunResult, CheckAsync>\n{\n  readonly cmd: ICommand<Model, Real, RunResult, CheckAsync>;\n-  [toStringMethod]?: () => string;\n-  [asyncToStringMethod]?: () => Promise<string>;\n  hasRan: boolean;\n  constructor(cmd: ICommand<Model, Real, RunResult, CheckAsync>);\n  check(m: Readonly<Model>): CheckAsync extends false ? boolean : Promise<boolean>;\n  run(m: Model, r: Real): RunResult;\n  clone(): CommandWrapper<Model, Real, RunResult, CheckAsync>;\n  toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - Version History\nDESCRIPTION: A collection of release notes documenting changes across multiple versions of fast-check, including features, fixes, and other improvements. The notes are organized in reverse chronological order from version 3.20.0 to 3.15.1.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_3.X.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 3.20.0\n\n_New arbitraries to alter shrinking capabilities_\n[[Code](https://github.com/dubzzz/fast-check/tree/v3.20.0)][[Diff](https://github.com/dubzzz/fast-check/compare/v3.19.0...v3.20.0)]\n\n## Features\n\n- ([PR#5047](https://github.com/dubzzz/fast-check/pull/5047)) Introduce new `fc.noShrink` arbitrary\n- ([PR#5050](https://github.com/dubzzz/fast-check/pull/5050)) Introduce new `fc.noBias` arbitrary\n- ([PR#5006](https://github.com/dubzzz/fast-check/pull/5006)) Add ability to limit shrink path\n- ([PR#5112](https://github.com/dubzzz/fast-check/pull/5112)) Simplify `limitShrink` before releasing\n```\n\n----------------------------------------\n\nTITLE: Lorem Ipsum Integration with Fast-Check\nDESCRIPTION: Implementation of a wrapper to use lorem-ipsum with fast-check, demonstrating integration with random-based libraries through custom PRNG implementation.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fake-data.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\nimport { loremIpsum } from 'lorem-ipsum';\n\nconst loremArb = fc\n  .noShrink(\n    fc.infiniteStream(\n      fc.noBias(fc.integer({ min: 0, max: (1 << 24) - 1 }).map((v) => v / (1 << 24))),\n    ),\n  )\n  .map((s) => {\n    const rng = () => s.next().value;\n    return loremIpsum({ random: rng });\n  });\n```\n\n----------------------------------------\n\nTITLE: Dictionary Arbitrary with Object Prototype\nDESCRIPTION: Demonstrates configuring the dictionary arbitrary to ensure objects inherit from Object prototype.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfc.dictionary(fc.string(), fc.string(), {\n  noNullPrototype: true,\n  // other contraints (if any)...\n});\n```\n\n----------------------------------------\n\nTITLE: Executing fast-check in Worker Threads with @fast-check/worker\nDESCRIPTION: Demonstration of using @fast-check/worker to run fast-check predicates in dedicated worker threads, allowing for synchronous stopping of predicates.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { test, expect } from '@jest/globals';\nimport fc from 'fast-check';\nimport { isMainThread } from 'node:worker_threads';\nimport { assert, propertyFor } from '@fast-check/worker';\n\nconst property = propertyFor(new URL(import.meta.url)); // or propertyFor(pathToFileURL(__filename)) in commonjs\nconst isSubstringProperty = property(fc.string(), fc.string(), fc.string(), (a, b, c) => {\n  expect(isSubstring(a + b + c, b)).toBe(true);\n});\n\nif (isMainThread) {\n  test('should detect the substring', async () => {\n    await assert(isSubstringProperty, { timeout: 1000 });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Documentation\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, new features, bug fixes and improvements to the fast-check property testing framework.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_1.X.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.20.1\n\n_Reduce bundle size_\n[[Code](https://github.com/dubzzz/fast-check/tree/v1.20.1)][[Diff](https://github.com/dubzzz/fast-check/compare/v1.20.0...v1.20.1)]\n\n## Features\n\n- ([PR#493](https://github.com/dubzzz/fast-check/pull/493)) Automatically wrap tasks using an `act` function in `fc.scheduler` if provided\n- ([PR#492](https://github.com/dubzzz/fast-check/pull/492)) Also return the sequence task in `fc.scheduleSequence`\n- ([PR#489](https://github.com/dubzzz/fast-check/pull/489)) Allow looser types for beforeEach and afterEach\n```\n\n----------------------------------------\n\nTITLE: Testing new arbitrary in fast-check (JavaScript)\nDESCRIPTION: Example test suite for a new arbitrary in fast-check, including unit tests and integration tests using predefined assertion helpers.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fc from 'fast-check';\nimport { myArbitrary } from '../../../../src/arbitrary/MyArbitrary';\nimport {\n  assertProduceCorrectValues,\n  assertProduceSameValueGivenSameSeed,\n  assertProduceValuesShrinkableWithoutContext,\n  assertShrinkProducesSameValueWithoutInitialContext,\n  assertShrinkProducesStrictlySmallerValue,\n} from './__test-helpers__/NextArbitraryAssertions';\n\ndescribe('myArbitrary', () => {\n  // Tests in isolation!\n  // You may want to check that generate, canShrinkWithoutContext and shrink\n  // are working as expecting given mocked or stubbed data (see our usage of spies).\n});\n\ndescribe('myArbitrary (integration)', () => {\n  // Tests in real life!\n  // In this section we assess that the arbitrary will work as expected by calling it with a real random generator\n  // and without mocking any of its underlyings. In order to do that we have an already predefined set of helpers.\n  // Among those helpers only some are really compulsory as they will ensure that the arbitrary does not break the\n  // rules. The other ones tend to have the best possible version of the arbitrary by ensuring the shrinker will\n  // always shrink towards strictly smaller values or that user defined values can be shrunk.\n\n  type Extra = /* Typing for the extra props received by myArbitraryBuilder */;\n  const extraParameters: fc.Arbitrary<Extra> = /* Arbitrary producing values for myArbitraryBuilder */;\n\n  const isCorrect = (value: /* Type of the value */, extra: Extra) => {\n    // Returns true if the value is correct given extra\n    // Returs false or throws (possibly via expect) if value is invalid\n  };\n\n  const isStrictlySmaller = (vNew: /* Type of the value */, vOld: /* Type of the value */, extra: Extra) => {\n    // Returns true if the vNew is really strictly smaller than vOld\n    // Returs false or throws (possibly via expect) otherwise\n  };\n\n  const myArbitraryBuilder = (extra: Extra) => convertToNext(myArbitrary(extra));\n\n  it('should produce the same values given the same seed', () => {\n    assertProduceSameValueGivenSameSeed(myArbitraryBuilder, { extraParameters });\n  });\n\n  it('should only produce correct values', () => {\n    assertProduceCorrectValues(myArbitraryBuilder, isCorrect, { extraParameters });\n  });\n\n  // OPTIONAL STEP\n  it('should produce values seen as shrinkable without any context', () => {\n    assertProduceValuesShrinkableWithoutContext(myArbitraryBuilder, { extraParameters });\n  });\n\n  // OPTIONAL STEP\n  it('should be able to shrink to the same values without initial context', () => {\n    assertShrinkProducesSameValueWithoutInitialContext(myArbitraryBuilder, { extraParameters });\n  });\n\n  // OPTIONAL STEP\n  it('should preserve strictly smaller ordering in shrink', () => {\n    assertShrinkProducesStrictlySmallerValue(myArbitraryBuilder, isStrictlySmaller, { extraParameters });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: ESM Package.json Configuration\nDESCRIPTION: ESM-specific package.json configuration for the lib/esm directory\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @fast-check/poisoning Package via npm\nDESCRIPTION: Shows the npm package name and version badge for @fast-check/poisoning. This snippet demonstrates how to reference the package in a markdown file.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/poisoning/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://badge.fury.io/js/@fast-check%2Fpoisoning\"><img src=\"https://badge.fury.io/js/@fast-check%2Fpoisoning.svg\" alt=\"npm version\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Converting jsverify Arbitraries to fast-check\nDESCRIPTION: Demonstrates migration path from jsverify to fast-check by converting existing jsverify arbitraries using the jsverify-to-fast-check adapter.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { jsc2fc } from 'jsverify-to-fast-check';\nimport * as jsc from 'jsverify';\nimport * as fc from 'fast-check';\n\n// Here is an old arbitrary you prefer not to migrate for the moment\nconst jscArbitrary = jsc.bless({\n  generator: jsc.generator.bless(() => {\n    switch (jsc.random(0, 2)) {\n      case 0:\n        return 'foo';\n      case 1:\n        return 'bar';\n      case 2:\n        return 'quux';\n    }\n  }),\n});\n\n// It can easily converted into an arbitrary for fast-check using jsc2fc\nconst fcArbitrary = jsc2fc(jscArbitrary);\n```\n\n----------------------------------------\n\nTITLE: Example Usage in Markdown\nDESCRIPTION: Changelog entries showing version updates, pull requests, fixes and features for the fast-check library\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_1.X.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.3.0\n\n_Filter invalid values directly in predicates using `fc.pre`_\n[[Code](https://github.com/dubzzz/fast-check/tree/v1.3.0)][[Diff](https://github.com/dubzzz/fast-check/compare/v1.2.3...v1.3.0)]\n\n## Features\n\n- ([PR#140](https://github.com/dubzzz/fast-check/pull/140)) Make seed and path copy pasteable\n- ([PR#138](https://github.com/dubzzz/fast-check/pull/138)) Remove core-js, no more global namespace pollution\n- ([PR#118](https://github.com/dubzzz/fast-check/pull/118)) Enable preconditions in predicate\n```\n\n----------------------------------------\n\nTITLE: Installing fast-check for manual integration\nDESCRIPTION: Command to install fast-check for manual integration with Jest using npm or yarn.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev fast-check\n```\n\n----------------------------------------\n\nTITLE: Displaying License Badge for @fast-check/poisoning\nDESCRIPTION: Shows how to include a license badge for the @fast-check/poisoning package in a markdown file, linking to the actual license file in the GitHub repository.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/poisoning/README.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://github.com/dubzzz/fast-check/blob/main/packages/poisoning/LICENSE\"><img src=\"https://img.shields.io/npm/l/@fast-check%2Fpoisoning.svg\" alt=\"License\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Adding 'Tested with fast-check' Badge in HTML\nDESCRIPTION: This snippet shows how to add a 'Tested with fast-check' badge to an HTML document. It creates a linked image using the shield.io badge with specific styling and attributes for proper display and linking.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/support-us.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://fast-check.dev/\" target=\"_blank\" rel=\"noopener\"\n  ><img\n    alt=\"Tested with fast-check\"\n    src=\"https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?flat&logoSize=auto&labelColor=%231b1b1d\"\n/></a>\n```\n\n----------------------------------------\n\nTITLE: Testing with Grapheme String Arbitrary\nDESCRIPTION: Example of using the string arbitrary with grapheme unit option in property-based testing. This code demonstrates the context in which the performance optimizations were beneficial.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-11-05-whats-new-in-fast-check-3-23-0/index.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfc.assert(fc.property(fc.string({ unit: 'grapheme' }), (s) => true));\n```\n\n----------------------------------------\n\nTITLE: Updating Date Arbitrary Configuration\nDESCRIPTION: Shows how to modify the date arbitrary configuration to exclude invalid dates in v4.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-fc.date();\n+fc.date({ noInvalidDate: true });\n```\n\n----------------------------------------\n\nTITLE: Custom Test Context Configuration\nDESCRIPTION: Demonstrates how to customize the test execution context with typed interfaces for maintaining state during tests.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fc, testProp as anyTestProp, PropertyTestInterface } from '@fast-check/ava';\n\ntype TestContext = {\n  state: string;\n};\n\nconst testProp = anyTestProp as PropertyTestInterface<TestContext>;\n\ntestProp('should reach terminal state', [fc.string()], (t, received) => {\n  // here t is typed as ExecutionContext<TestContext>\n  console.log(t.context.state); // logs 'uninitialized'\n  // ... omitted for brevity\n});\n```\n\n----------------------------------------\n\nTITLE: Adding 'Tested with fast-check' Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to add a 'Tested with fast-check' badge to a Markdown document. It uses a shield.io badge with customized styling and links to the fast-check website.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/support-us.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Tested with fast-check](https://img.shields.io/badge/tested%20with-fast%E2%80%91check%20%F0%9F%90%92-%23282ea9?flat&logoSize=auto&labelColor=%231b1b1d)](https://fast-check.dev/)\n```\n\n----------------------------------------\n\nTITLE: Release Notes Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, features, and fixes for the fast-check library. Each version includes links to source code and diffs.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_1.X.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.26.0\n\n_New arbitrary to generate falsy values_\n[[Code](https://github.com/dubzzz/fast-check/tree/v1.26.0)][[Diff](https://github.com/dubzzz/fast-check/compare/v1.25.1...v1.26.0)]\n\n## Features\n\n- ([PR#627](https://github.com/dubzzz/fast-check/pull/627)) New arbitrary to generate falsy values\n- ([PR#719](https://github.com/dubzzz/fast-check/pull/719)) Add `withBigInt` flag for `fc.falsy`\n- ([PR#718](https://github.com/dubzzz/fast-check/pull/718)) Add `withBigInt` flag for `fc.anything`\n```\n\n----------------------------------------\n\nTITLE: Displaying Package Metadata Badges in Markdown\nDESCRIPTION: This snippet shows how to use Markdown to display various package metadata badges, including npm version, monthly downloads, last commit, license, and package type.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n![npm version](https://badge.fury.io/js/fp-ts-laws.svg)\n![monthly downloads](https://img.shields.io/npm/dm/fp-ts-laws)\n![last commit](https://img.shields.io/github/last-commit/gcanti/fp-ts-laws)\n![license](https://img.shields.io/npm/l/fp-ts-laws.svg)\n![third party package](https://img.shields.io/badge/-third%20party%20package-%2300abff.svg)\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in MDX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards related to combiners in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n```\n\n----------------------------------------\n\nTITLE: Using Fast-Check with ESM modules via CDN\nDESCRIPTION: Example of how to import Fast-Check as an ESM module using Skypack CDN in a browser environment. This is an alternative approach since browser bundles are no longer provided in version 2.x.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import fc from 'https://cdn.skypack.dev/fast-check';\n  // code...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Jest with Show Seed Option\nDESCRIPTION: Command to run Jest tests with the --show-seed option, which ensures Jest will print the random seed used for test generation (requires Jest ≥29.2.0).\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njest --show-seed\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format Example\nDESCRIPTION: Standard format used for changelog entries, including version number, summary, code/diff links, and categorized changes\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/CHANGELOG_1.X.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.8.2\n\n_Increase range validity for worker_\n[[Code](https://github.com/dubzzz/fast-check/tree/jest%2Fv1.8.2)][[Diff](https://github.com/dubzzz/fast-check/compare/jest%2Fv1.8.1...jest%2Fv1.8.2)]\n\n## Fixes\n\n- ([PR#4452](https://github.com/dubzzz/fast-check/pull/4996)) Bump: Relax version constraint to allow 0.4.x of worker\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post defining title, authors and tags.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-05-23-whats-new-in-fast-check-3-19-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: What's new in fast-check 3.19.0?\nauthors: [dubzzz]\ntags: [what's new, arbitrary]\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in MDX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards for various fake data arbitraries available in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Invalid Dates in TypeScript\nDESCRIPTION: New option in the date arbitrary to generate invalid dates, which are common when building dates from strings and can cause issues if not handled properly.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-17-whats-new-in-fast-check-3-13-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfc.date({ noInvalidDate: false });\n// in v3, you'll have to set the option explicitly to false\n```\n\n----------------------------------------\n\nTITLE: String Generation with Custom Unit\nDESCRIPTION: Generates strings using custom units defined by constant values, where length is measured in terms of unit values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: fc.constantFrom('Hello', 'World') });\n// Note: With a custom arbitrary passed as unit, minLength (resp. maxLength) refers to length in terms of unit values.\n// As an example, \"HelloWorldHello\" has a length of 3 in this context.\n// Examples of generated values: \"\", \"Hello\", \"HelloWorld\", \"HelloWorldHello\", \"WorldWorldHelloWorldHelloWorld\"\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Handling in Left-Pad\nDESCRIPTION: Demonstration of inconsistent handling of Unicode characters outside BMP plan in left-pad library\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nleftPad('a\\u{1f431}b', 4, 'x'); //=> 'a\\u{1f431}b'  -- in: 3 code points, out: 3 code points\nleftPad('abc', 4, '\\u{1f431}'); //=> '\\u{1f431}abc' -- in: 3 code points, out: 4 code points\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Tests\nDESCRIPTION: Command to execute tests using the Node.js test runner.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-nodejs-test-runner.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --test\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in MDX for fast-check Documentation\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards or links related to fast-check concepts.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n```\n\n----------------------------------------\n\nTITLE: React Component Import for Advent Challenge\nDESCRIPTION: Imports custom React components for the advent challenge playground and form components.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-17-advent-of-pbt-day-17/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';\nimport BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in MDX\nDESCRIPTION: Imports and renders a DocCardList component from the docusaurus theme to display a list of documentation cards for navigation purposes.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Initializing fast-check Tutorial Project with npm\nDESCRIPTION: This command initializes a new project for the fast-check tutorial using npx and degit. It creates a new directory, changes into it, and installs dependencies.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/quick-start/basic-setup.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx degit dubzzz/fast-check/website/templates/fast-check-tutorial fast-check-tutorial\ncd fast-check-tutorial\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Deno Tests Command\nDESCRIPTION: Command to execute the property-based tests using Deno test runner in the terminal.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-deno-test-runner.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno test\n```\n\n----------------------------------------\n\nTITLE: CommonJS Module Import\nDESCRIPTION: Example of CommonJS (CJS) syntax for importing dependencies in Node.js\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dep1 = require('dep1');\nconst dep2 = require('dep2');\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in MDX\nDESCRIPTION: Imports and renders a DocCardList component to display migration guide documentation cards.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Generating Uint8ClampedArray Values with fast-check\nDESCRIPTION: Generate Uint8ClampedArray instances with configurable value ranges (0 to 255) and array lengths. Supports optional parameters for min/max values and length constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uint8ClampedArray();\n// Examples of generated values:\n// • Uint8ClampedArray.from([111,195,177,66])\n// • Uint8ClampedArray.from([122,171,50,200,198])\n// • Uint8ClampedArray.from([118,94,97,138,117])\n// • Uint8ClampedArray.from([53,190,83])\n// • Uint8ClampedArray.from([121])\n// • …\n\nfc.uint8ClampedArray({ max: 42, minLength: 1 });\n// Examples of generated values:\n// • Uint8ClampedArray.from([1,0,26,2])\n// • Uint8ClampedArray.from([18,2,27,0,37])\n// • Uint8ClampedArray.from([29,1,33,5,40,40,14,10,15,22,39,11])\n// • Uint8ClampedArray.from([1,14,26,2])\n// • Uint8ClampedArray.from([0,5,4,0])\n// • …\n```\n\n----------------------------------------\n\nTITLE: String Generation with Binary Unit\nDESCRIPTION: Generates strings using any possible combinations of code points, excluding half surrogate pairs.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/string.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfc.string({ unit: 'binary' });\n// Note: Results in strings made of any possible combinations of code points no matter how they join between each others (except half surrogate pairs).\n// With 'binary', minLength (resp. maxLength) refers to length in terms of code points (not in terms of visual entities).\n// As an example, \"\\u{0061}\\u{0300}\" has a length of 2 in this context, even if it corresponds to a single visual entity: \"à\".\n// Examples of generated values: \"length\", \"𒇖ᴣ󠓋򹕎󥰆󕃝󗅛񞙢򂓥񋂐\", \"\", \"󹶇񺓯𢊊񦺖\", \"key\"\n```\n\n----------------------------------------\n\nTITLE: Running the packaged utility with different package managers\nDESCRIPTION: Commands to run the @fast-check/packaged utility at the root of a package using npm, pnpm, or yarn. This will remove files that won't be included in the final npm bundle.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/packaged/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With npm\nnpx -p @fast-check/packaged packaged\n# With pnpm\npnpm --package=@fast-check/packaged dlx packaged\n# With yarn\nyarn dlx -p @fast-check/packaged packaged\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in MDX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of configuration-related documentation pages.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Bluesky Comments Component\nDESCRIPTION: This code renders a component that displays comments from Bluesky social platform related to this challenge, with a specific URL pointing to the discussion thread.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-13-advent-of-pbt-day-13/index.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<BlueskyComments url=\"https://bsky.app/profile/fast-check.dev/post/3ld66zbuon224\" />\n```\n\n----------------------------------------\n\nTITLE: Generating IP v4 Addresses Using Tuple Mapping in fast-check\nDESCRIPTION: This snippet demonstrates the traditional approach to creating custom string generators in fast-check before version 3.10.0. It uses a tuple of four natural numbers (0-255) that are mapped to create an IP v4 address string format.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-05-30-whats-new-in-fast-check-3-10-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ipV4Arbitrary = fc\n  .tuple(fc.nat({ max: 255 }), fc.nat({ max: 255 }), fc.nat({ max: 255 }), fc.nat({ max: 255 }))\n  .map(([a, b, c, d]) => `${a}.${b}.${c}.${d}`);\n```\n\n----------------------------------------\n\nTITLE: Generating Bounded Mixed-Sign BigInt Values in JavaScript\nDESCRIPTION: Shows how to use fc.bigInt() to generate bigint values within a range that includes both negative and positive numbers.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/bigint.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigInt({ min: -3000n, max: 100n });\n// Note: All possible bigint values between `-3000n` (included) and `100n` (included)\n// Examples of generated values: 1n, -2n, -1064n, 0n, -147n…\n```\n\n----------------------------------------\n\nTITLE: Original Float Decomposition Implementation in TypeScript\nDESCRIPTION: Initial implementation of float decomposition that uses a loop to find significand and exponent. This version iterates through possible exponents to find the correct decomposition.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-07-24-whats-new-in-fast-check-3-12-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function decomposeFloat(f: number): { exponent: number; significand: number } {\n  const maxSignificand = 1 + (2 ** 23 - 1) / 2 ** 23;\n  for (let exponent = -126; exponent !== 128; ++exponent) {\n    const powExponent = 2 ** exponent;\n    const maxForExponent = maxSignificand * powExponent;\n    if (Math.abs(f) <= maxForExponent) {\n      return { exponent, significand: f / powExponent };\n    }\n  }\n  return { exponent: Number.NaN, significand: Number.NaN };\n}\n```\n\n----------------------------------------\n\nTITLE: Generating IPv4 Addresses with fast-check\nDESCRIPTION: Generates valid IPv4 addresses in standard format. Returns addresses in dot-decimal notation with values between 0-255 for each octet.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/fake-data/internet.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.ipV4();\n// Examples of generated values: \"149.2.84.39\", \"255.251.100.5\", \"151.253.2.4\", \"93.3.251.97\", \"121.3.113.229\"…\n```\n\n----------------------------------------\n\nTITLE: Generating Safe Natural Numbers with fast-check\nDESCRIPTION: Generates positive integers up to JavaScript's maximum safe integer using fc.maxSafeNat().\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfc.maxSafeNat();\n```\n\n----------------------------------------\n\nTITLE: Random Test Implementation for User Age Sorting\nDESCRIPTION: Example of a basic random test that generates and sorts users by age using fake data generators. This approach lacks reproducibility and proper failure reporting.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/fake-data.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('sort users by ascending age', () => {\n  const userA = {\n    firstName: firstName(),\n    lastName: lastName(),\n    birthDate: birthDate(),\n  };\n  const userB = {\n    firstName: firstName(),\n    lastName: lastName(),\n    birthDate: birthDate({ strictlyOlderThan: userA.birthDate }),\n  };\n  expect(sortByAge([userA, userB])).toEqual([userA, userB]);\n  expect(sortByAge([userB, userA])).toEqual([userA, userB]);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Safe Integer Range with fast-check\nDESCRIPTION: Generates integers within JavaScript's safe integer range using fc.maxSafeInteger().\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/number.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.maxSafeInteger();\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UUID Versions in Fast-Check\nDESCRIPTION: Demonstrates how to generate UUIDs of multiple versions using the new uuid arbitrary. This example shows generating both version 4 and 7 UUIDs using an array of version numbers.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-08-10-whats-new-in-fast-check-3-21-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfc.uuid({ version: [4, 7] });\n```\n\n----------------------------------------\n\nTITLE: Updating UUID Version Specification in fast-check\nDESCRIPTION: Shows how to migrate from the uuidV arbitrary to using the version constraint in the uuid arbitrary for specifying UUID versions.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n--fc.uuidV(4);\n++fc.uuid({ version: 4 });\n```\n\n----------------------------------------\n\nTITLE: Migrating from uuidV to uuid API in Fast-Check\nDESCRIPTION: Shows how to migrate from the deprecated uuidV arbitrary to the new uuid arbitrary with version specification. The new syntax uses an options object with a version parameter.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-08-10-whats-new-in-fast-check-3-21-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n--- fc.uuidV(4)\n+++ fc.uuid({ version: 4 })\n```\n\n----------------------------------------\n\nTITLE: Migrating from unicodeJson to json in fast-check\nDESCRIPTION: Demonstrates how to update code from using unicodeJson and unicodeJsonValue to the new consolidated json and jsonValue arbitraries with custom charset options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n--fc.unicodeJson();\n++fc.json({ stringUnit: 'binary' }); // or 'grapheme'\n\n--fc.unicodeJsonValue();\n++fc.jsonValue({ stringUnit: 'binary' }); // or 'grapheme'\n```\n\n----------------------------------------\n\nTITLE: Generating ULID Strings with fc.ulid() in JavaScript\nDESCRIPTION: This code snippet demonstrates the usage of the newly introduced 'ulid' arbitrary in fast-check 3.11.0. The fc.ulid() function generates random ULID (Universally Unique Lexicographically Sortable Identifier) strings with examples of possible output values.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-06-07-whats-new-in-fast-check-3-11-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfc.ulid();\n// Examples of generated values:\n// • \"7AVDFZJAXCM0F25E3SZZZZZZYZ\"\n// • \"7ZZZZZZZYP5XN60H51ZZZZZZZP\"\n// • \"2VXXEMQ2HWRSNWMP9PZZZZZZZA\"\n// • \"15RQ23H1M8YB80EVPD2EG8W7K1\"\n// • \"6QV4RKC7C8ZZZZZZZFSF7PWQF5\"\n// • …\n```\n\n----------------------------------------\n\nTITLE: Removing Shrinking Capabilities with fc.noShrink in JavaScript\nDESCRIPTION: Uses fc.noShrink to drop shrinking capabilities from an existing arbitrary. This is generally not recommended except for creating complex arbitraries.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfc.noShrink(fc.nat());\n```\n\n----------------------------------------\n\nTITLE: Configuring random value generation location\nDESCRIPTION: Example showing how to configure where random values are generated. This can be useful when working with non-serializable values that need to be generated directly in the worker thread.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/worker/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst property = propertyFor(new URL(import.meta.url), { randomSource: 'worker' });\n// Other values:\n// - \"main-thread\": The main thread will be responsible to generate the random values and send them to the worker thread. It unfortunately cannot send any value that cannot be serialized between threads. (default)\n// - \"worker\": The worker is responsible to generate its own values based on the instructions provided by the main thread. Switching to a worker mode allows to support non-serializable values, unfortunately it drops all shrinking. capabilities.\n```\n\n----------------------------------------\n\nTITLE: Displaying Santa Code Sequence with Indexes in JavaScript\nDESCRIPTION: This snippet demonstrates the correspondence between index values and their Santa Code equivalents for the first few elements of the sequence.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-16-advent-of-pbt-day-16/index.md#2025-04-11_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Index 0 returns 0\n- Index 1 returns 1\n- Index 2 returns 3\n- Index 3 returns 2\n- Index 4 returns 6\n```\n\n----------------------------------------\n\nTITLE: Improved Shrinking with Context Checking for FakerFirstNameBuilder in TypeScript\nDESCRIPTION: This snippet enhances the shrinking implementation by checking if the value can be shrunk without context. It ensures that only appropriate values are passed to strArb.shrink(), improving the robustness of the shrinking process.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-07-18-integrating-faker-with-fast-check/index.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst strArb = fc.string({ minLength: 1 });\n\nclass FakerFirstNameBuilder extends fc.Arbitrary<string> {\n  // generate() {...}\n  // canShrinkWithoutContext() {...}\n  shrink(value: TValue, context: unknown): fc.Stream<fc.Value<string>> {\n    if (context !== undefined || strArb.canShrinkWithoutContext(value)) {\n      return strArb.shrink(value, context);\n    }\n    return fc.Stream.nil();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Arbitrary Values with fc.clone in JavaScript\nDESCRIPTION: Uses fc.clone to generate multiple identical values. It creates a tuple containing multiple instances of the same value, where the values are independent of each other.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/combiners/any.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfc.clone(fc.nat(), 2);\n\nfc.clone(fc.nat(), 3);\n```\n\n----------------------------------------\n\nTITLE: Experimental Worker-Based Runner in ES Modules\nDESCRIPTION: Example of using the experimental worker-based runner in ES Modules format, showing the proper async initialization pattern with await before the init call.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { init, fc } from '@fast-check/jest/worker';\n\nconst { test, expect } = await init(new URL(import.meta.url));\n// can also be passed options such as isolationLevel: init(new URL(import.meta.url), {})\n\ntest.prop([fc.constant(null)])('should pass', (value) => {\n  expect(value).toBe(null);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tic-Tac-Toe Game State Validator Function in TypeScript\nDESCRIPTION: This code defines a TypeScript function signature for checking if a player can still win in a Tic-Tac-Toe game. The function takes a 2D array representing the current board state and a player symbol (either 🎄 or 🎁), and returns a boolean indicating whether the player can still achieve a winning line.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-21-advent-of-pbt-day-21/index.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncanStillWinTheGame(board: ('🎄' | '🎁' | null)[][], player: '🎄' | '🎁'): boolean;\n```\n\n----------------------------------------\n\nTITLE: Rendering Interactive Components for Advent Challenge\nDESCRIPTION: Renders the interactive playground, answer form, and comments components for the Advent of PBT challenge. These components allow users to test the algorithm and submit their findings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-11-advent-of-pbt-day-11/index.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AdventPlaygroundOfTheDay />\n\n## Your answer\n\n<FormOfTheDay />\n\n## Comments\n\n<BlueskyComments url=\"https://bsky.app/profile/fast-check.dev/post/3lcz2znz7f222\" />\n```\n\n----------------------------------------\n\nTITLE: Example Input/Output Explanation\nDESCRIPTION: Shows how a sorted array is rotated by moving elements from the beginning to the end, and the task is to find the original first element's index in the rotated array.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-20-advent-of-pbt-day-20/index.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[i0, i1, ..., in] -> [im+1, im+2, ..., in, i0, i1, ..., im]\n```\n\n----------------------------------------\n\nTITLE: Experimental Worker-Based Runner in CommonJS\nDESCRIPTION: Example of using the experimental worker-based runner in CommonJS format, which can kill long-running synchronous code including infinite loops that would block the main thread.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { init, fc } = require('@fast-check/jest/worker');\nconst { pathToFileURL } = require('node:url');\n\nconst { test, expect } = init(pathToFileURL(__filename));\n// can also be passed options such as isolationLevel: init(pathToFileURL(__filename), {})\n\ntest.prop([fc.constant(null)])('should pass', (value) => {\n  expect(value).toBe(null);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Advent of PBT Challenge\nDESCRIPTION: Imports custom React components including AdventPlaygroundOfTheDay and FormOfTheDay for the interactive testing challenge, as well as BlueskyComments for displaying comments from Bluesky social platform.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-11-advent-of-pbt-day-11/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';\nimport BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';\n```\n\n----------------------------------------\n\nTITLE: Testing Knuth Morris Pratt String Matching in JavaScript\nDESCRIPTION: Example showing incorrect empty string handling in KMP algorithm implementation where empty string was not considered a substring of itself\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknuthMorrisPratt('', ''); //=> -1\nknuthMorrisPratt('a', 'a'); //=> 0\n```\n\n----------------------------------------\n\nTITLE: Installing @fast-check/jest Package with npm\nDESCRIPTION: Command to install the @fast-check/jest package as a development dependency for property-based testing with Jest.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/jest/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @fast-check/jest\n```\n\n----------------------------------------\n\nTITLE: Statistics for Web Path Generation Without Size Configuration\nDESCRIPTION: Code demonstrating statistics collection for web paths before version 3.18.0, showing that paths starting with '//' were never generated using default options.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-04-28-whats-new-in-fast-check-3-18-0/index.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfc.statistics(fc.webPath(), (p) => (p.startsWith('//') ? 'with //' : 'without //'), { numRuns: 100_000 });\n// without //..100.00%\n```\n\n----------------------------------------\n\nTITLE: Testing Set Equality in Jest\nDESCRIPTION: Demonstration of asymmetric Set comparison behavior in Jest's toEqual matcher\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst s1 = new Set([false, true]);\nconst s2 = new Set([new Boolean(true), new Boolean(true)]);\n\nexpect(s1).not.toEqual(s2); // success\nexpect(s2).not.toEqual(s1); // failure\n```\n\n----------------------------------------\n\nTITLE: Building a Browser Bundle for Fast-Check Locally\nDESCRIPTION: Command to locally build a browser bundle for Fast-Check using Browserify. This allows creating the bundle.js file that was previously provided directly by the package.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/MIGRATION_1.X_TO_2.X.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx -p browserify browserify node_modules/fast-check/lib/fast-check.js --s fastcheck > node_modules/fast-check/lib/bundle.js\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Advent of PBT Challenge\nDESCRIPTION: Imports custom React components specifically designed for the Advent of PBT challenge, including the interactive playground and form components for the day's exercise.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-06-advent-of-pbt-day-6/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {AdventPlaygroundOfTheDay,FormOfTheDay} from './AdventOfTheDay';\nimport BlueskyComments from '../2024-12-01-advent-of-pbt-day-1/BlueskyComments';\n```\n\n----------------------------------------\n\nTITLE: Writing a basic property-based test with Jest connector\nDESCRIPTION: Example of a simple property-based test using the @fast-check/jest connector to check a substring function.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/property-based-testing-with-jest.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, fc } = require('@fast-check/jest');\n\ntest.prop({ a: fc.string(), b: fc.string(), c: fc.string() })('should detect the substring', ({ a, b, c }) => {\n  const text = a + b + c;\n  expect(isSubtring(text, b)).toBe(true);\n});\n\n// Code under test: should rather be imported from another file\nfunction isSubtring(text, pattern) {\n  return text.includes(pattern);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rabin Karp String Matching Algorithm\nDESCRIPTION: Examples demonstrating integer overflow and Unicode character handling issues in Rabin Karp implementation\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/track-record.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrabinKarp(\"^ !/'#'pp\", \" !/'#'pp\") //=> -1\n// expected to be 2\n\nrabinKarp(\"a\\u{10000}\", \"\\u{10000}\") //=> -1\n// After 1st fix: issues with unicode characters outside BMP plan\nrabinKarp(\"a耀a\",\"耀a\"))                //=> 1\nrabinKarp(\"\\u0000耀\\u0000\",\"耀\\u0000\")) //=> -1\n// After 2nd fix\n```\n\n----------------------------------------\n\nTITLE: Test Hooks Implementation\nDESCRIPTION: Example of using before/after hooks with @fast-check/ava for setup and teardown operations like database connections.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testProp, fc } from '@fast-check/ava';\n\ntestProp.before((t) => {\n  connectToDatabase();\n});\n\ntestProp();\n// ... omitted for brevity\n\ntestProp.after((t) => {\n  closeDatabaseConnection();\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Card List with DocCardList in MDX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to generate a list of documentation topics or cards for the advanced usage section of fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/advanced/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Models for Person, Address, and Car\nDESCRIPTION: TypeSpec models defining structures for Person, Address, and Car with various properties and constraints.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/ecosystem.md#2025-04-11_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Person {\n  /** The person's first name. */\n  firstName: string;\n\n  /** The person's last name. */\n  lastName: string;\n\n  /** Age in years which must be equal to or greater than zero. */\n  @minValue(0) age: int32;\n\n  /** Person address */\n  address: Address;\n\n  /** List of nick names */\n  nickNames?: string[];\n\n  /** List of cars person owns */\n  cars?: Car[];\n}\n\n/** Represents an address */\nmodel Address {\n  street: string;\n  city: string;\n  country: string;\n}\nmodel Car {\n  /** Kind of car */\n  kind: \"ev\" | \"ice\";\n\n  /** Brand of the car */\n  brand: string;\n\n  /** Model of the car */\n  `model`: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Modifiers and Seed Configuration\nDESCRIPTION: Shows how to use AVA test modifiers like skip and how to configure test seeds for reproducible tests.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/ava/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testProp, fc } from '@fast-check/ava';\n\ntestProp(\n  'should replay the test for the seed 4242',\n  [fc.nat(), fc.nat()],\n  (t, a, b) => {\n    t.is(a + b, b + a);\n  },\n  { seed: 4242 },\n);\n\ntestProp.skip('should be skipped', [fc.string()], (t, text) => {\n  t.is([...text].length, text.length);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in MDX\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards related to primitives arbitraries.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/primitives/index.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Multiple Test Assertions with Individual Settings\nDESCRIPTION: Example showing multiple test cases each configured with the same numRuns parameter individually.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('test #1', () => {\n  fc.assert(myProp1, { numRuns: 10 });\n});\ntest('test #2', () => {\n  fc.assert(myProp2, { numRuns: 10 });\n});\ntest('test #3', () => {\n  fc.assert(myProp3, { numRuns: 10 });\n});\n```\n\n----------------------------------------\n\nTITLE: Generating BigInt64Array with fast-check in JavaScript\nDESCRIPTION: Uses fc.bigInt64Array() to generate BigInt64Array instances with various configurations. Supports specifying min/max values and array length.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/composites/typed-array.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfc.bigInt64Array();\n// Examples of generated values:\n// • BigInt64Array.from([7780786618611046569n])\n// • BigInt64Array.from([3321688158611740109n,5336242056478727470n,-620335768501958405n])\n// • BigInt64Array.from([])\n// • BigInt64Array.from([7655040194619891365n,-609033188233272247n,-3377172262367663000n,-6575651731349736555n,-194007844161260784n,2956209257781779103n])\n// • BigInt64Array.from([-463701052756207261n,7371548932979131799n,-7877987368304813406n,8509643815846265359n,-6285842279948105755n,-7977810195168624590n,-8632461560578801824n,-764227837462381748n])\n// • …\nfc.bigInt64Array({ min: 0n, minLength: 1 });\n// Examples of generated values:\n// • BigInt64Array.from([5794385668286753317n,9223372036854775800n])\n// • BigInt64Array.from([7250361649856044302n,4310753745190106570n,5393690158673113485n,6842387272625948355n,4514914117086513826n,4933290198875114684n,4355527851938090954n,5722670493121068189n,7946781874214666176n,5681273141705345352n,3400318954538433694n,9140895324085985125n])\n// • BigInt64Array.from([7017002079469492577n,8064792390940992730n,5210011569993732916n,7871654509320106441n,5389875796080866293n,842396779505087393n,3513990769024304909n,7624709996764891089n,8471604102740905558n,2981767532172910000n,2216100277924575184n,3375835224553658028n])\n// • BigInt64Array.from([1n,6n,10n])\n// • BigInt64Array.from([2317294315139044277n,2480040720574581119n,7841528177112379523n])\n// • …\n```\n\n----------------------------------------\n\nTITLE: Legacy Package Configuration\nDESCRIPTION: Initial package.json configuration for multiple target environments\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"lib/target-for-node.js\",\n  \"module\": \"lib/target-for-bundler.js\",\n  \"browser\": \"lib/target-for-browser.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in Markdown\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards for the various arbitraries in fast-check.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/core-blocks/arbitraries/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Asynchronous Call Queue\nDESCRIPTION: Simple implementation of asynchronous call queuing using promises, demonstrating non-synchronous execution pattern.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/wrapping-up.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet previous = Promise.resolve();\nfunction fireCall(call) {\n  previous = previous.then(() => call());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AMD Module Definition\nDESCRIPTION: Example of Asynchronous Module Definition (AMD) syntax for loading dependencies in browsers\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-09-04-dual-packages-or-supporting-both-cjs-and-esm/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequirejs(['dep1', 'dep2'], function (dep1, dep2) {\n  // This function is called when dep1.js and dep2.js\n  // and their dependencies are loaded.\n});\n```\n\n----------------------------------------\n\nTITLE: Vitest Configuration Setup\nDESCRIPTION: Configuration for Vitest framework to enable global fast-check settings.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/configuration/global-settings.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n  test: {\n    // ...\n    setupFiles: ['./vitest.setup.js'],\n  },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport fc from 'fast-check';\nfc.configureGlobal({ numRuns: 10 });\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Empty Test in Jest without Imports\nDESCRIPTION: A benchmark test that measures the execution time of an empty Jest test without any imports. This serves as a baseline for comparing different import methods.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-11-22-whats-new-in-fast-check-3-14-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('empty test in spec file without any import', () => {});\n// spec file execution took ~0.44s (4 runs: 0.436, 0.44, 0.441, 0.443)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Current Import Style for fast-check in Jest\nDESCRIPTION: A benchmark test that measures the execution time when using the traditional import method for fast-check. Shows the performance impact of importing the entire library.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-11-22-whats-new-in-fast-check-3-14-0/index.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fc = require('fast-check');\ntest('empty test in spec file with recommended import for fast-check', () => {\n  fc; // no-op, just doing so to avoid bundlers from ignoring the import\n});\n// spec file execution took ~0.67s (4 runs: 0.677, 0.656, 0.7, 0.656)\n```\n\n----------------------------------------\n\nTITLE: Accessing Stringifier Output Examples Before and After Changes\nDESCRIPTION: Examples showing how the stringifier algorithm output has changed between versions. The new version produces more concise and readable output for objects with null prototypes.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/migration/from-3.x-to-4.x.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nstringify(Object.create(null)); // 'Object.create(null)'\nstringify(Object.assign(Object.create(null), { a: 1 })); // 'Object.assign(Object.create(null),{\"a\":1})'\n```\n\n----------------------------------------\n\nTITLE: Generating Both Valid and Invalid Inputs for Comprehensive Testing\nDESCRIPTION: Example of using fast-check's oneof combinator to generate both valid email addresses and arbitrary Unicode strings, providing more comprehensive testing for potential DOS vulnerabilities.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nfc.oneof(fc.emailAddress(), fc.fullUnicodeString());\n```\n\n----------------------------------------\n\nTITLE: Fast-Check Changelog Entry Format\nDESCRIPTION: Standard format used for documenting version changes in the fast-check library, including version number, description, links to code and diffs, and categorized changes.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/CHANGELOG_1.X.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.15.4\n\n_skipAllAfterTimeLimit throws when it passes time limit_\n[[Code](https://github.com/dubzzz/fast-check/tree/v1.15.4)][[Diff](https://github.com/dubzzz/fast-check/compare/v1.15.3...v1.15.4)]\n\n## Fixes\n\n- ([PR#425](https://github.com/dubzzz/fast-check/pull/425)) skipAllAfterTimeLimit throws when it passes time limit\n```\n\n----------------------------------------\n\nTITLE: Installing fast-check via npm\nDESCRIPTION: Command to install fast-check as a dev dependency in an existing project using npm.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev fast-check\n```\n\n----------------------------------------\n\nTITLE: Using @fast-check/worker for Safe Testing of Potentially Infinite Loops\nDESCRIPTION: Advanced setup using @fast-check/worker to execute tests in a separate worker thread, allowing for safe testing of code that might run indefinitely or for extremely long periods.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2023-10-05-finding-back-a-redos-vulnerability-in-zod/index.md#2025-04-11_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport fc from 'fast-check';\nimport { assert, propertyFor } from '@fast-check/worker';\nconst property = propertyFor(new URL(import.meta.url));\n\nconst timeLimitMs = 1_000; // TODO: specify a limit based on the algorithm\nconst arbitraries = []; // TODO: our arbitraries or generators for random data\nawait assert(\n  property(...arbitraries, (rawString) => {\n    const startTime = performance.now();\n    try {\n      validator.parse(rawString);\n    } catch (err) {}\n    const endTime = performance.now();\n    const delayMs = endTime - startTime;\n    if (delayMs > timeLimitMs) {\n      throw new Error(`The computation of validator.parse took ${delayMs}ms`);\n    }\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: React Component Integration for Challenge UI\nDESCRIPTION: Integrates challenge playground and form components into the page layout along with Bluesky comments.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2024-12-17-advent-of-pbt-day-17/index.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AdventPlaygroundOfTheDay />\n\n<FormOfTheDay />\n\n<BlueskyComments url=\"https://bsky.app/profile/fast-check.dev/post/3ldifkvx77k2n\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in MDX\nDESCRIPTION: This code snippet imports and renders a DocCardList component, which is likely used to display a list of documentation cards or links.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List in MDX\nDESCRIPTION: MDX code block that imports and renders a DocCardList component to display a list of documentation cards.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/setting-up-your-test-environment/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Displaying Monthly Downloads Badge for @fast-check/poisoning\nDESCRIPTION: Illustrates how to include a badge showing monthly download statistics for the @fast-check/poisoning package in a markdown file.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/poisoning/README.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://www.npmjs.com/package/@fast-check/poisoning\"><img src=\"https://img.shields.io/npm/dm/@fast-check%2Fpoisoning\" alt=\"monthly downloads\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Defining Asynchronous Functions in JavaScript\nDESCRIPTION: This snippet defines two asynchronous functions, 'abc' and 'def', which demonstrate the use of await and Promise handling. These functions are used to illustrate the improvements in fast-check's scheduler.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/blog/2025-04-06-whats-new-in-fast-check-4-1-0/index.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nasync function abc(myapi) {\n  return await myapi('abc');\n}\nasync function def(caches, myapi) {\n  const d = await caches.d;\n  const e = await caches.e;\n  const f = await caches.f;\n  return await myapi(`${d}${e}${f}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing experimental fast-check version\nDESCRIPTION: Command to install the latest experimental version of fast-check from the main branch using npm.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/introduction/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev https://pkg.pr.new/fast-check@main\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsor Information in Markdown\nDESCRIPTION: This Markdown snippet provides information about project sponsors and how to become one, including links to GitHub Sponsors and OpenCollective.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## Sponsors 💸\n\nMany individuals and companies offer their financial support to the project, a huge thanks to all of them too 💓\n\n<a href=\"https://github.com/sponsors/dubzzz\"><img align=\"center\" src=\"https://raw.githubusercontent.com/dubzzz/sponsors-svg/main/sponsorkit/sponsors.svg\" alt=\"all sponsors\" /></a>\n\nYou can also become one of them by contributing via [GitHub Sponsors](https://github.com/sponsors/dubzzz) or [OpenCollective](https://opencollective.com/fast-check/contribute).\n```\n\n----------------------------------------\n\nTITLE: Installing @fast-check/vitest Package\nDESCRIPTION: Command to install the @fast-check/vitest package as a development dependency using npm.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/vitest/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @fast-check/vitest\n```\n\n----------------------------------------\n\nTITLE: Creating Contributors Table in HTML\nDESCRIPTION: HTML table structure that displays contributor information in a responsive grid layout. Each cell contains a contributor's avatar, name, and contribution badges using aligned table cells with percentage-based widths.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/packages/fast-check/README.md#2025-04-11_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Osman-Sodefa\"><img src=\"https://avatars.githubusercontent.com/u/90332566?v=4?s=100\" width=\"100px;\" alt=\"Makien Osman\"/><br /><sub><b>Makien Osman</b></sub></a><br /><a href=\"https://github.com/dubzzz/fast-check/commits?author=Osman-Sodefa\" title=\"Code\">💻</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in MDX\nDESCRIPTION: MDX code block that imports and renders a DocCardList component for displaying tutorial sections.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/detect-race-conditions/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Tutorial Cards List with Docusaurus MDX\nDESCRIPTION: Imports and renders the DocCardList component from Docusaurus theme to display a list of tutorial cards on the page. The code is preceded by front matter configuration that sets the sidebar position and URL slug.\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/docs/tutorials/index.md#2025-04-11_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all user agents full access to the site and specifies the location of the sitemap file at fast-check.dev/sitemap.xml\nSOURCE: https://github.com/dubzzz/fast-check/blob/main/website/static/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n\nSitemap: https://fast-check.dev/sitemap.xml\n```"
  }
]