[
  {
    "owner": "denoland",
    "repo": "deno",
    "content": "TITLE: Simple Deno Server (TypeScript)\nDESCRIPTION: This TypeScript code creates a basic HTTP server that responds with \"Hello, world!\". It demonstrates the fundamental structure of a Deno server application, using the `Deno.serve` function to handle incoming requests and return a `Response` object.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nDeno.serve((_req: Request) => {\n  return new Response(\"Hello, world!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Run Deno Server\nDESCRIPTION: This command executes the Deno server file `server.ts` with network access enabled. The `--allow-net` flag is required to grant the program permission to listen for and accept network connections.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-net server.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Deno Runtime Tests (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define Deno runtime tests using the `Deno.test()` function.  The first example shows a simple test function, while the second demonstrates a more complex test with ignore conditions based on the OS and permission requirements for read and write access.  These tests exercise the Deno runtime under different permission scenarios.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/unit/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {} from \"./test_util.ts\";\n\nDeno.test(function simpleTestFn(): void {\n  // test code here\n});\n\nDeno.test(\n  {\n    ignore: Deno.build.os === \"windows\",\n    permissions: { read: true, write: true },\n  },\n  function complexTestFn(): void {\n    // test code here\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Simple TypeScript Function\nDESCRIPTION: This TypeScript function `hello` takes a string `name` as input and prints it to the console. It showcases type annotations and basic function definition in TypeScript.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(name: string) {\n  console.log(name);\n}\n\nhello(\"alice\");\n```\n\n----------------------------------------\n\nTITLE: Install Deno (Shell)\nDESCRIPTION: This command uses curl to download and execute the Deno installation script. It's designed for Mac and Linux environments.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://deno.land/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Import and Assign Fetch API in JavaScript\nDESCRIPTION: This snippet imports modules from the `deno_fetch` extension and assigns them to the global scope. It sets up the callback for Wasm streaming operations and defines `fetch`, `Request`, `Response`, `Headers`, and `FormData` as properties of the global object, making the Fetch API available in JavaScript.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/fetch/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as headers from \"ext:deno_fetch/20_headers.js\";\nimport * as formData from \"ext:deno_fetch/21_formdata.js\";\nimport * as request from \"ext:deno_fetch/23_request.js\";\nimport * as response from \"ext:deno_fetch/23_response.js\";\nimport * as fetch from \"ext:deno_fetch/26_fetch.js\";\nimport * as eventSource from \"ext:deno_fetch/27_eventsource.js\";\n\n// Set up the callback for Wasm streaming ops\nDeno.core.setWasmStreamingCallback(fetch.handleWasmStreaming);\n\nObject.defineProperty(globalThis, \"fetch\", {\n  value: fetch.fetch,\n  enumerable: true,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"Request\", {\n  value: request.Request,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"Response\", {\n  value: response.Response,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"Headers\", {\n  value: headers.Headers,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"FormData\", {\n  value: formData.FormData,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Hono App in TypeScript\nDESCRIPTION: This code snippet demonstrates a basic Hono application setup. It imports the `Hono` class, creates a new instance, defines a route that returns 'Hono!!' as text, and exports the app. This is the minimal setup required to run a Hono application.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/testdata/npm/hono/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Hono } from 'hono'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!!'))\n\nexport default app\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Name Certificate with OpenSSL\nDESCRIPTION: This configures the domains.txt file which is used by openssl to setup the domain name certificate.  The file specifies the authority key identifier, basic constraints, key usage and subject alternative names used when generating the domain certificate.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/tls/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = localhost\n```\n\n----------------------------------------\n\nTITLE: Initialize Fetch API ops in Rust\nDESCRIPTION: This snippet initializes the `deno_fetch` ops and ESM within a Deno runtime extension. It requires a struct implementing `deno_fetch::FetchPermissions` and an options struct `deno_fetch::Options` which implements `Default`. It adds the necessary ops to the runtime for fetch functionality.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/fetch/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndeno_fetch::deno_fetch::init_ops_and_esm<Permissions>(Default::default())\n```\n\n----------------------------------------\n\nTITLE: Importing deno_net extension in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to import the networking extension's source within a JavaScript module in Deno. It imports `deno_webidl`, `deno_net`, and `deno_tls` modules, making their functionalities available for use. The `ext:` specifier indicates that these modules are provided by Deno's internal extensions system.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/net/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as webidl from \"ext:deno_webidl/00_webidl.js\";\nimport * as net from \"ext:deno_net/01_net.js\";\nimport * as tls from \"ext:deno_net/02_tls.js\";\n```\n\n----------------------------------------\n\nTITLE: Add a test case in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a test case for the new Node-API function. It imports necessary modules, loads the test library, and uses `Deno.test` to assert the expected behavior of `lib.test_get_boolean` with true and false inputs.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tests/napi/boolean_test.js\nimport { assertEquals, loadTestLibrary } from \"./common.js\";\nconst lib = loadTestLibrary();\nDeno.test(\"napi get boolean\", function () {\n  assertEquals(lib.test_get_boolean(true), true);\n  assertEquals(lib.test_get_boolean(false), false);\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example\nDESCRIPTION: This SQL snippet demonstrates a simple SELECT query, retrieving all columns and the 'biz' and 'buz' columns from the 'baz' table.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\n  seLect * , biz, buz\nfrom baz;\n```\n\n----------------------------------------\n\nTITLE: Deno Assertion with assertEquals\nDESCRIPTION: This TypeScript snippet uses the `assertEquals` function from the `@std/assert` module (Deno's standard library) to assert that 1 + 2 equals 3.  It requires Deno with read permissions. The script begins with a shebang to execute it directly with Deno.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/test_with_shebang/markdown.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env -S deno run --allow-read\nimport { assertEquals } from \"@std/assert\";\nassertEquals(1 + 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Deno Core Op (op_nop) in Rust\nDESCRIPTION: This code defines a benchmark for a simple no-operation (nop) using the `deno_bench_util` crate. It includes setting up a Deno extension with a single op implemented in Rust, then benchmarking the corresponding JavaScript call to that op. It uses `bench_js_sync` to execute the JavaScript code and measure its performance. The `op_nop` function is a simple function that returns a number.\nSOURCE: https://github.com/denoland/deno/blob/main/bench_util/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse deno_bench_util::bench_js_sync;\nuse deno_bench_util::bench_or_profile;\nuse deno_bench_util::bencher::benchmark_group;\nuse deno_bench_util::bencher::Bencher;\nuse deno_core::Extension;\n\n#[op2]\n#[number]\nfn op_nop() -> usize {\n  9\n}\n\nfn setup() -> Vec<Extension> {\n  vec![Extension {\n    name: \"my_ext\",\n    ops: std::borrow::Cow::Borrowed(&[op_nop::DECL]),\n  }]\n}\n\nfn bench_op_nop(b: &mut Bencher) {\n  bench_js_sync(b, r#\"Deno.core.ops.op_nop();\"#, setup);\n}\n\nbenchmark_group!(benches, bench_op_nop);\nbench_or_profile!(benches);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Lib Entries Map\nDESCRIPTION: This JavaScript snippet shows an example of the `libEntries` map within the TypeScript compiler (`deno/cli/tsc/00_typescript.js`).  It maps library names to their corresponding .d.ts file names, allowing the compiler to locate the necessary type definitions. The entries must match the files present on disk.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/update_typescript.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar libEntries = [\n  // JavaScript only\n  [\"es5\", \"lib.es5.d.ts\"],\n  [\"es6\", \"lib.es2015.d.ts\"],\n  [\"es2015\", \"lib.es2015.d.ts\"],\n  [\"es7\", \"lib.es2016.d.ts\"],\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Import and Assign URL APIs to Global Scope (JavaScript)\nDESCRIPTION: This JavaScript code imports the URL, URLPattern, and URLSearchParams APIs from the `ext:deno_url` extension and assigns them to the global scope. This makes these APIs available for use in Deno JavaScript code.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/url/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as url from \"ext:deno_url/00_url.js\";\nimport * as urlPattern from \"ext:deno_url/01_urlpattern.js\";\n\nObject.defineProperty(globalThis, \"URL\", {\n  value: url.URL,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"URLPattern\", {\n  value: url.URLPattern,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"URLSearchParams\", {\n  value: url.URLSearchParams,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic __test__.json Example\nDESCRIPTION: A simple example of a `__test__.json` file that runs `deno run main.js` and asserts that the output matches `main.out`.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"args\": \"run main.js\",\n  \"output\": \"main.out\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running All WPT Tests (Shell)\nDESCRIPTION: This command executes all available Web Platform Tests defined in the `expectation.json` file. The test runner compares the actual output of each test with the expected output, indicating whether the tests passed or failed. No specific dependencies are required other than a correctly set up WPT environment using the setup command.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./tests/wpt/wpt.ts run\n```\n\n----------------------------------------\n\nTITLE: SQL Select Statement\nDESCRIPTION: This SQL snippet selects all columns, 'biz', and 'buz' from the table 'baz'. It demonstrates a basic SQL SELECT statement.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  *,\n  biz,\n  buz\nFROM\n  baz;\n```\n\n----------------------------------------\n\nTITLE: Initializing Console API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import the deno_console extension and assign a console object to the global scope. It uses the Deno.core.print function to handle console messages. The snippet defines the console object as non-enumerable, configurable, and writable.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/console/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as console from \"ext:deno_console/01_console.js\";\nObject.defineProperty(globalThis, \"console\", {\n  value: new console.Console((msg, level) =>\n    globalThis.Deno.core.print(msg, level > 1)\n  ),\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Type Errors in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `ignore` flag within a TypeScript code block embedded in an HTML comment. This tells the type checker to ignore any errors within the block.  It is useful for documentation and testing when showcasing invalid code without causing build failures.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ignore_html_comment/main.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Invalid = \"ignored\";\n```\n\n----------------------------------------\n\nTITLE: Logging to Console TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to log a message to the console using `console.log()`. It showcases a simple TypeScript code example for outputting information during script execution. No dependencies or prerequisites are required beyond a TypeScript environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown/main.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"ts\");\n```\n\n----------------------------------------\n\nTITLE: Script Snapshot Management\nDESCRIPTION: The `ScriptSnapshot` class manages the state of a script for incremental compilation.  It fetches and disposes of the text, gets the text length, and calculates change ranges by interacting with the Deno core via `core.jsonOpSync` to perform operations like `op_get_text`, `op_get_length`, `op_get_change_range`, and `op_dispose`.  The `dispose` method releases resources associated with the snapshot.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  class ScriptSnapshot {\n    /** @type {string} */\n    specifier;\n    /** @type {string} */\n    version;\n    /**\n     * @param {string} specifier\n     * @param {string} version \n     */\n    constructor(specifier, version) {\n      this.specifier = specifier;\n      this.version = version;\n    }\n    /**\n     * @param {number} start \n     * @param {number} end \n     * @returns {string}\n     */\n    getText(start, end) {\n      const { specifier, version } = this;\n      debug(\n        `snapshot.getText(${start}, ${end}) specifier: ${specifier} version: ${version}`,\n      );\n      return core.jsonOpSync(\"op_get_text\", { specifier, version, start, end });\n    }\n    /**\n     * @returns {number}\n     */\n    getLength() {\n      const { specifier, version } = this;\n      debug(`snapshot.getLength() specifier: ${specifier} version: ${version}`);\n      return core.jsonOpSync(\"op_get_length\", { specifier, version });\n    }\n    /**\n     * @param {ScriptSnapshot} oldSnapshot\n     * @returns {ts.TextChangeRange | undefined}\n     */\n    getChangeRange(oldSnapshot) {\n      const { specifier, version } = this;\n      const { version: oldVersion } = oldSnapshot;\n      const oldLength = oldSnapshot.getLength();\n      debug(\n        `snapshot.getLength() specifier: ${specifier} oldVersion: ${oldVersion} version: ${version}`,\n      );\n      return core.jsonOpSync(\n        \"op_get_change_range\",\n        { specifier, oldLength, oldVersion, version },\n      );\n    }\n    dispose() {\n      const { specifier, version } = this;\n      debug(`snapshot.dispose() specifier: ${specifier} version: ${version}`);\n      core.jsonOpSync(\"op_dispose\", { specifier, version });\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running stdio Benchmark with Deno\nDESCRIPTION: This command measures the time it takes for the Deno script `stdio.js` to process input from `/dev/zero` using the `dd` command. Deno executes the script using the `deno run` command, with input piped from `dd`.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/stdio/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntime dd if=/dev/zero bs=65536 count=500000 | deno run stdio.js\n```\n\n----------------------------------------\n\nTITLE: Console log with CSS styling\nDESCRIPTION: This test uses `console.log` to output a styled message to the console, demonstrating the ability to apply CSS styles to console output within the Jupyter environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nconsole.log(\"%c Hello Deno \", \"background-color: #15803d; color: white;\");\n```\n\n----------------------------------------\n\nTITLE: Running FFI Benchmarks in Deno\nDESCRIPTION: This command is used to execute performance benchmarks for the Deno FFI implementation. It requires `--allow-ffi` to enable FFI functionality, `--allow-read` to permit reading necessary files, and `--unstable-ffi` because it uses the unstable FFI API. The script `tests/ffi/tests/bench.js` contains the actual benchmark code.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/ffi/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntarget/release/deno bench --allow-ffi --allow-read --unstable-ffi ./tests/ffi/tests/bench.js\n```\n\n----------------------------------------\n\nTITLE: Handle Language Server Request\nDESCRIPTION: The `serverRequest` function handles incoming requests from the language server. It uses a switch statement to route different method calls to their corresponding language service functions, like getting diagnostics, quick info, completions, etc. The results are then sent back to the language server via the `respond` function.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nfunction serverRequest({ id, ...request }) {\n  debug(`serverRequest()`, { id, ...request });\n  switch (request.method) {\n    case \"configure\": {\n      const { options, errors } = ts\n        .convertCompilerOptionsFromJson(request.compilerOptions, \"\");\n      Object.assign(options, { allowNonTsExtensions: true });\n      if (errors.length) {\n        debug(ts.formatDiagnostics(errors, host));\n      }\n      compilationSettings = options;\n      return respond(id, true);\n    }\n    case \"getAsset\": {\n      const sourceFile = host.getSourceFile(\n        request.specifier,\n        ts.ScriptTarget.ESNext,\n      );\n      return respond(id, sourceFile && sourceFile.text);\n    }\n    case \"getDiagnostics\": {\n      try {\n        /** @type {Record<string, any[]>} */\n        const diagnosticMap = {};\n        for (const specifier of request.specifiers) {\n          diagnosticMap[specifier] = fromTypeScriptDiagnostic([\n            ...languageService.getSemanticDiagnostics(specifier),\n            ...languageService.getSuggestionDiagnostics(specifier),\n            ...languageService.getSyntacticDiagnostics(specifier),\n          ].filter(({ code }) => !IGNORED_DIAGNOSTICS.includes(code)));\n        }\n        return respond(id, diagnosticMap);\n      } catch (e) {\n        if (\"stack\" in e) {\n          error(e.stack);\n        } else {\n          error(e);\n        }\n        return respond(id, {});\n      }\n    }\n    case \"getQuickInfo\": {\n      return respond(\n        id,\n        languageService.getQuickInfoAtPosition(\n          request.specifier,\n          request.position,\n        ),\n      );\n    }\n    case \"getCompletions\": {\n      return respond(\n        id,\n        languageService.getCompletionsAtPosition(\n          request.specifier,\n          request.position,\n          request.preferences,\n        ),\n      );\n    }\n    case \"getDocumentHighlights\": {\n      return respond(\n        id,\n        languageService.getDocumentHighlights(\n          request.specifier,\n          request.position,\n          request.filesToSearch,\n        ),\n      );\n    }\n    case \"getReferences\": {\n      return respond(\n        id,\n        languageService.getReferencesAtPosition(\n          request.specifier,\n          request.position,\n        ),\n      );\n    }\n    case \"getDefinition\": {\n      return respond(\n        id,\n        languageService.getDefinitionAndBoundSpan(\n          request.specifier,\n          request.position,\n        ),\n      );\n    }\n    case \"getImplementation\": {\n      return respond(\n        id,\n        languageService.getImplementationAtPosition(\n          request.specifier,\n          request.position,\n        ),\n      );\n    }\n    case \"findRenameLocations\": {\n      return respond(\n        id,\n        languageService.findRenameLocations(\n          request.specifier,\n          request.position,\n          request.findInStrings,\n          request.findInComments,\n          request.providePrefixAndSuffixTextForRename,\n        ),\n      );\n    }\n    default:\n      throw new TypeError(\n        // @ts-ignore exhausted case statement sets type to never\n        `Invalid request method for request: \"${request.method}\" (${id})`,\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Error TypeScript\nDESCRIPTION: This TypeScript snippet is designed to trigger a type checking error. It attempts to assign a number to a string variable, which will cause the TypeScript compiler to report an error. This is used to demonstrate TypeScript's type safety features.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown/main.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Benchmarking copyFileSync in Deno\nDESCRIPTION: This JavaScript snippet demonstrates how to benchmark the `copyFileSync` function within the Deno environment. It retrieves the function using `getFunction`, benchmarks its execution, and then cleans up the created file using `removeSync` to avoid side effects in subsequent benchmark runs.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/fs/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst copyFileSync = getFunction(\"copyFileSync\");\nbench(() => copyFileSync(\"test\", \"test2\"));\n\n// For functions with side-effects, clean up after `bench` like so:\nconst removeSync = getFunction(\"removeSync\");\nremoveSync(\"test2\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Error Example\nDESCRIPTION: This snippet demonstrates a simple TypeScript type error.  It attempts to assign a number (42) to a variable declared as a string. This will cause a type error during compilation or type checking. It is embedded within an HTML comment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ignore_html_comment/main.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Multi-Step __test__.json Example\nDESCRIPTION: Demonstrates a `__test__.json` configuration with multiple steps, each running a different Deno command and asserting its output and exit code. Uses a temporary directory.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tempDir\": true,\n  \"steps\": [{\n    \"args\": \"cache main.ts\",\n    \"output\": \"cache.out\"\n  }, {\n    \"args\": \"run main.ts\",\n    \"output\": \"error.out\",\n    \"exitCode\": 1\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Return number\nDESCRIPTION: This test confirms that a numerical value (42) is accurately returned in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n42\n```\n\n----------------------------------------\n\nTITLE: Import Deno IO Extension in JavaScript\nDESCRIPTION: This snippet shows how to import the `deno_io` extension's source in JavaScript. It uses the `ext:` specifier to load the module from the extension.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/io/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as io from \"ext:deno_io/12_io.js\";\n```\n\n----------------------------------------\n\nTITLE: Return boolean\nDESCRIPTION: This test checks if the boolean value `true` is correctly returned in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Compiler Host Setup\nDESCRIPTION: This code defines the `host` object, which implements the `ts.CompilerHost` and `ts.LanguageServiceHost` interfaces. It provides the TypeScript compiler with the necessary functions to interact with the Deno environment, including file existence checks, file reading, source file retrieval, writing output files, and resolving module names using `core.jsonOpSync` to call Deno core ops such as `op_load`, `op_emit`, and `op_resolve`.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  /** @type {ts.CompilerOptions} */\n  let compilationSettings = {};\n\n  /** @type {ts.LanguageService} */\n  let languageService;\n\n  /** An object literal of the incremental compiler host, which provides the\n   * specific \"bindings\" to the Deno environment that tsc needs to work.\n   *\n   * @type {ts.CompilerHost & ts.LanguageServiceHost} */\n  const host = {\n    fileExists(fileName) {\n      debug(`host.fileExists(\"${fileName}\")`);\n      return false;\n    },\n    readFile(specifier) {\n      debug(`host.readFile(\"${specifier}\")`);\n      return core.jsonOpSync(\"op_load\", { specifier }).data;\n    },\n    getSourceFile(\n      specifier,\n      languageVersion,\n      _onError,\n      _shouldCreateNewSourceFile,\n    ) {\n      debug(\n        `host.getSourceFile(\"${specifier}\", ${\n          ts.ScriptTarget[languageVersion]\n        })`,\n      );\n      let sourceFile = sourceFileCache.get(specifier);\n      if (sourceFile) {\n        return sourceFile;\n      }\n\n      /** @type {{ data: string; hash?: string; scriptKind: ts.ScriptKind }} */\n      const { data, hash, scriptKind } = core.jsonOpSync(\n        \"op_load\",\n        { specifier },\n      );\n      assert(\n        data != null,\n        `\"data\" is unexpectedly null for \"${specifier}\".`,\n      );\n      sourceFile = ts.createSourceFile(\n        specifier,\n        data,\n        languageVersion,\n        false,\n        scriptKind,\n      );\n      sourceFile.moduleName = specifier;\n      sourceFile.version = hash;\n      sourceFileCache.set(specifier, sourceFile);\n      return sourceFile;\n    },\n    getDefaultLibFileName() {\n      return `${ASSETS}/lib.esnext.d.ts`;\n    },\n    getDefaultLibLocation() {\n      return ASSETS;\n    },\n    writeFile(fileName, data, _writeByteOrderMark, _onError, sourceFiles) {\n      debug(`host.writeFile(\"${fileName}\")`);\n      let maybeSpecifiers;\n      if (sourceFiles) {\n        maybeSpecifiers = sourceFiles.map((sf) => sf.moduleName);\n      }\n      return core.jsonOpSync(\n        \"op_emit\",\n        { maybeSpecifiers, fileName, data },\n      );\n    },\n    getCurrentDirectory() {\n      return CACHE;\n    },\n    getCanonicalFileName(fileName) {\n      return fileName;\n    },\n    useCaseSensitiveFileNames() {\n      return true;\n    },\n    getNewLine() {\n      return \"\\n\";\n    },\n    resolveModuleNames(specifiers, base) {\n      debug(`host.resolveModuleNames()`);\n      debug(`  base: ${base}`);\n      debug(`  specifiers: ${specifiers.join(\", \")}`);\n      /** @type {Array<[string, ts.Extension] | undefined>} */\n      const resolved = core.jsonOpSync(\"op_resolve\", {\n        specifiers,\n        base,\n      });\n      if (resolved) {\n        const result = resolved.map((item) => {\n          if (item) {\n            const [resolvedFileName, extension] = item;\n            return {\n              resolvedFileName,\n              extension,\n              isExternalLibraryImport: false,\n            };\n          }\n```\n\n----------------------------------------\n\nTITLE: Building Deno with Cargo\nDESCRIPTION: This command builds the Deno project using Cargo. The `-p deno` flag specifies the package to build, and the optional `--release` flag builds a release version. This is the first step before using `cargo plonk`.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/faster-rebuilds.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p deno [--release]\n```\n\n----------------------------------------\n\nTITLE: Execute TypeScript Compilation\nDESCRIPTION: The function `exec` is the entry point for executing TypeScript compilation within Deno. It receives configuration, debugging flags, and root file names as input. It configures the TypeScript compiler, performs compilation, gathers diagnostics, and responds to the Deno runtime with the results.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nfunction exec({ config, debug: debugFlag, rootNames }) {\n  setLogDebug(debugFlag, \"TS\");\n  performanceStart();\n  debug(\">>> exec start\", { rootNames });\n  debug(config);\n\n  const { options, errors: configFileParsingDiagnostics } = ts\n    .convertCompilerOptionsFromJson(config, \"\");\n  // The `allowNonTsExtensions` is a \"hidden\" compiler option used in VSCode\n  // which is not allowed to be passed in JSON, we need it to allow special\n  // URLs which Deno supports. So we need to either ignore the diagnostic, or\n  // inject it ourselves.\n  Object.assign(options, { allowNonTsExtensions: true });\n  const program = ts.createIncrementalProgram({\n    rootNames,\n    options,\n    host,\n    configFileParsingDiagnostics,\n  });\n\n  const { diagnostics: emitDiagnostics } = program.emit();\n\n  const diagnostics = [\n    ...program.getConfigFileParsingDiagnostics(),\n    ...program.getSyntacticDiagnostics(),\n    ...program.getOptionsDiagnostics(),\n    ...program.getGlobalDiagnostics(),\n    ...program.getSemanticDiagnostics(),\n    ...emitDiagnostics,\n  ].filter(({ code }) => !IGNORED_DIAGNOSTICS.includes(code));\n  performanceProgram({ program });\n\n  core.jsonOpSync(\"op_respond\", {\n    diagnostics: fromTypeScriptDiagnostic(diagnostics),\n    stats: performanceEnd(),\n  });\n  debug(\"<<< exec stop\");\n}\n```\n\n----------------------------------------\n\nTITLE: Rich class display\nDESCRIPTION: This test demonstrates the creation of a class with a custom display representation using Symbol.for(\"Jupyter.display\"). The class generates HTML to display a colored square.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nclass SuperColor {\n  constructor() {\n      this.color = \"#ff5398\"\n  }\n  hex() {\n      return this.color\n  }\n    \n  [Symbol.for(\"Jupyter.display\")]() {\n      return {\n          \"text/html\": `<div style=\"width: 32px; height: 32px; background-color: ${this.hex()}\" />`\n      }\n  }\n}\n\nlet sc = new SuperColor()\nsc\n```\n\n----------------------------------------\n\nTITLE: Install Deno (Homebrew)\nDESCRIPTION: This command uses Homebrew to install Deno. It's specific to macOS systems with Homebrew installed.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install deno\n```\n\n----------------------------------------\n\nTITLE: Import and Configure WebIDL in JavaScript\nDESCRIPTION: This JavaScript code snippet imports the webidl module from the Deno extension and defines a property on the globalThis object using Object.defineProperty. This property makes the WebIDL brand available and configurable.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/webidl/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as webidl from \"ext:deno_webidl/00_webidl.js\";\nObject.defineProperty(globalThis, webidl.brand, {\n  value: webidl.brand,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Install Deno (WinGet)\nDESCRIPTION: This command uses WinGet to install Deno. It's specific to Windows systems with WinGet installed.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install --id=DenoLand.Deno\n```\n\n----------------------------------------\n\nTITLE: Initialize Build Environment and Load Libraries\nDESCRIPTION: This snippet initializes the build environment by registering core ops, error class, and fetching build info. It retrieves a list of libraries (`libs`) from `core.jsonOpSync(\"op_build_info\", {})` and adds them to the TypeScript compiler's internal library list (`ts.libs`). It ensures common type libraries are cached in memory for re-use by tsc.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// Setup the compiler runtime during the build process.\ncore.ops();\ncore.registerErrorClass(\"Error\", Error);\n\n// A build time only op that provides some setup information that is used to\n// ensure the snapshot is setup properly.\n/** @type {{ buildSpecifier: string; libs: string[] }} */\nconst { buildSpecifier, libs } = core.jsonOpSync(\"op_build_info\", {});\nfor (const lib of libs) {\n  const specifier = `lib.${lib}.d.ts`;\n  // we are using internal APIs here to \"inject\" our custom libraries into\n  // tsc, so things like `\"lib\": [ \"deno.ns\" ]` are supported.\n  if (!ts.libs.includes(lib)) {\n    ts.libs.push(lib);\n    ts.libMap.set(lib, `lib.${lib}.d.ts`);\n  }\n  // we are caching in memory common type libraries that will be re-used by\n  // tsc on when the snapshot is restored\n  assert(\n    host.getSourceFile(`${ASSETS}${specifier}`, ts.ScriptTarget.ESNext),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Import Deno Web Extension Modules - JavaScript\nDESCRIPTION: Imports various modules from the Deno web extension. This is the first step to use the functionality provided by the Deno web extension in JavaScript. Each module represents a specific web API implementation.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/web/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as infra from \"ext:deno_web/00_infra.js\";\nimport * as DOMException from \"ext:deno_web/01_dom_exception.js\";\nimport * as mimesniff from \"ext:deno_web/01_mimesniff.js\";\nimport * as event from \"ext:deno_web/02_event.js\";\nimport * as structuredClone from \"ext:deno_web/02_structured_clone.js\";\nimport * as timers from \"ext:deno_web/02_timers.js\";\nimport * as abortSignal from \"ext:deno_web/03_abort_signal.js\";\nimport * as globalInterfaces from \"ext:deno_web/04_global_interfaces.js\";\nimport * as base64 from \"ext:deno_web/05_base64.js\";\nimport * as streams from \"ext:deno_web/06_streams.js\";\nimport * as encoding from \"ext:deno_web/08_text_encoding.js\";\nimport * as file from \"ext:deno_web/09_file.js\";\nimport * as fileReader from \"ext:deno_web/10_filereader.js\";\nimport * as location from \"ext:deno_web/12_location.js\";\nimport * as messagePort from \"ext:deno_web/13_message_port.js\";\nimport * as compression from \"ext:deno_web/14_compression.js\";\nimport * as performance from \"ext:deno_web/15_performance.js\";\nimport * as imageData from \"ext:deno_web/16_image_data.js\";\n```\n\n----------------------------------------\n\nTITLE: Running Deno and Node.js Benchmarks\nDESCRIPTION: These bash commands are used to execute the benchmark scripts for both Deno and Node.js. The Deno command uses the `-A` flag to grant all permissions and `--unstable` to enable unstable features, while the Node.js command simply executes the `run.js` script using the `node` runtime.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/fs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A --unstable run.mjs\nnode run.js\n```\n\n----------------------------------------\n\nTITLE: Using left-pad to pad strings in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the left-pad library to pad strings. It showcases different scenarios, including padding with spaces and zeros. The module requires left-pad to be installed. It can be used to format strings to a fixed length.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/commonjs/node_modules/left-pad/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst leftPad = require(\"left-pad\");\n\nleftPad(\"foo\", 5);\n// => \"  foo\"\n\nleftPad(\"foobar\", 6);\n// => \"foobar\"\n\nleftPad(1, 2, \"0\");\n// => \"01\"\n\nleftPad(17, 5, 0);\n// => \"00017\"\n```\n\n----------------------------------------\n\nTITLE: Diagnostic transformation\nDESCRIPTION: These functions transform TypeScript diagnostics into a format suitable for Deno. `fromRelatedInformation` converts `ts.DiagnosticRelatedInformation` to a simplified object. `fromTypeScriptDiagnostic` maps an array of `ts.Diagnostic` objects, applying the `fromRelatedInformation` transformation to each.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n  /** @type {Map<string, ts.SourceFile>} */\n  const sourceFileCache = new Map();\n\n  /** @param {ts.DiagnosticRelatedInformation} diagnostic */\n  function fromRelatedInformation({\n    start,\n    length,\n    file,\n    messageText: msgText,\n    ...ri\n  }) {\n    let messageText;\n    let messageChain;\n    if (typeof msgText === \"object\") {\n      messageChain = msgText;\n    } else {\n      messageText = msgText;\n    }\n    if (start !== undefined && length !== undefined && file) {\n      const startPos = file.getLineAndCharacterOfPosition(start);\n      const sourceLine = file.getFullText().split(\"\\n\")[startPos.line];\n      const fileName = file.fileName;\n      return {\n        start: startPos,\n        end: file.getLineAndCharacterOfPosition(start + length),\n        fileName,\n        messageChain,\n        messageText,\n        sourceLine,\n        ...ri,\n      };\n    } else {\n      return {\n        messageChain,\n        messageText,\n        ...ri,\n      };\n    }\n  }\n\n  /** @param {ts.Diagnostic[]} diagnostics */\n  function fromTypeScriptDiagnostic(diagnostics) {\n    return diagnostics.map(({ relatedInformation: ri, source, ...diag }) => {\n      /** @type {any} */\n      const value = fromRelatedInformation(diag);\n      value.relatedInformation = ri\n        ? ri.map(fromRelatedInformation)\n        : undefined;\n      value.source = source;\n      return value;\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Running WPT Tests with Filters and Update Expectations (Shell)\nDESCRIPTION: This command combines the functionality of running filtered tests with updating the `expectation.json` file. It executes a subset of tests defined by the filters and then updates the expectation file with the results. Requires the WPT environment setup and Deno to be built.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./tests/wpt/wpt.ts update -- hr-time streams/piping/general\n```\n\n----------------------------------------\n\nTITLE: Get Script Snapshot for TypeScript Analysis\nDESCRIPTION: This function `getScriptSnapshot` retrieves a snapshot of a script file's content. It checks the `sourceFileCache` first. If the file is cached, it creates a snapshot from the cached text; otherwise, it fetches the script's content using the `op_script_version` Deno core op and creates a `ScriptSnapshot` instance.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetScriptSnapshot(specifier) {\n  debug(`host.getScriptSnapshot(\"${specifier}\")`);\n  const sourceFile = sourceFileCache.get(specifier);\n  if (sourceFile) {\n    return {\n      getText(start, end) {\n        return sourceFile.text.substring(start, end);\n      },\n      getLength() {\n        return sourceFile.text.length;\n      },\n      getChangeRange() {\n        return undefined;\n      },\n    };\n  }\n  /** @type {string | undefined} */\n  const version = core.jsonOpSync(\"op_script_version\", { specifier });\n  if (version != null) {\n    return new ScriptSnapshot(specifier, version);\n  }\n  return undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Integration with nodejs-polars\nDESCRIPTION: This test demonstrates integration with the nodejs-polars library. It fetches data from a URL, reads it as a CSV, and displays the resulting DataFrame.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport pl from \"npm:nodejs-polars\";\n\nlet response = await fetch(\n  \"https://cdn.jsdelivr.net/npm/world-atlas@1/world/110m.tsv\",\n);\nlet data = await response.text();\nlet df = pl.readCSV(data, { sep: \"\\t\" });\n\ndf\n```\n\n----------------------------------------\n\nTITLE: Exposing Functions to Global Scope\nDESCRIPTION: This snippet exposes functions `startup` and `exec` to the global scope. These functions are intended to be called by `tsc::exec()` during TypeScript type checking. Additionally, `serverInit` and `serverRequest` are exposed for language service usage.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// exposes the two functions that are called by `tsc::exec()` when type\n  // checking TypeScript.\n  globalThis.startup = startup;\n  globalThis.exec = exec;\n\n  // exposes the functions that are called when the compiler is used as a\n  // language service.\n  globalThis.serverInit = serverInit;\n  globalThis.serverRequest = serverRequest;\n```\n\n----------------------------------------\n\nTITLE: Initialize Crypto Ops and ESM in Rust\nDESCRIPTION: This snippet describes how to initialize the cryptographic operations and ESM integration in Rust using `deno_crypto::deno_crypto::init_ops_and_esm(Option<u64>)` within the `extensions` field of `RuntimeOptions`.  The `Option<u64>` argument represents an optional seed for initialization.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/crypto/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndeno_crypto::deno_crypto::init_ops_and_esm(Option<u64>)\n```\n\n----------------------------------------\n\nTITLE: Record Program Performance Metrics\nDESCRIPTION: The function `performanceProgram` captures and records performance metrics related to the TypeScript program compilation process. It gathers data on the number of files, nodes, identifiers, symbols, and types, as well as the duration of parsing, binding, checking, and emitting phases.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction performanceProgram({ program, fileCount }) {\n  if (program) {\n    if (\"getProgram\" in program) {\n      program = program.getProgram();\n    }\n    stats.push([\"Files\", program.getSourceFiles().length]);\n    stats.push([\"Nodes\", program.getNodeCount()]);\n    stats.push([\"Identifiers\", program.getIdentifierCount()]);\n    stats.push([\"Symbols\", program.getSymbolCount()]);\n    stats.push([\"Types\", program.getTypeCount()]);\n    stats.push([\"Instantiations\", program.getInstantiationCount()]);\n  } else if (fileCount != null) {\n    stats.push([\"Files\", fileCount]);\n  }\n  const programTime = ts.performance.getDuration(\"Program\");\n  const bindTime = ts.performance.getDuration(\"Bind\");\n  const checkTime = ts.performance.getDuration(\"Check\");\n  const emitTime = ts.performance.getDuration(\"Emit\");\n  stats.push([\"Parse time\", programTime]);\n  stats.push([\"Bind time\", bindTime]);\n  stats.push([\"Check time\", checkTime]);\n  stats.push([\"Emit time\", emitTime]);\n  stats.push(\n    [\"Total TS time\", programTime + bindTime + checkTime + emitTime],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deno Test by Name\nDESCRIPTION: Shows how to run a Deno integration test by name, which might run other tests as well. Also includes how to show output of every test with `-- --nocapture`.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncargo test test_name\n```\n\nLANGUAGE: text\nCODE:\n```\ncargo test test_name -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: Basic Function with Return Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines a simple function named 'foo' that returns a number (2). It demonstrates the usage of type annotations for the return value of a function.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction foo(): number {\n  return       2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatter\nDESCRIPTION: This command executes the code formatter script, format.js, using Deno. It requires read, write, and run permissions to format the codebase.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-read --allow-write --allow-run ./tools/format.js\n```\n\n----------------------------------------\n\nTITLE: Setting up logging\nDESCRIPTION: These functions configure debug and error logging within the compiler isolate. `setLogDebug` enables/disables debug logging and sets the source identifier. `debug` and `error` functions format and print log messages to stderr using `core.print`. The `AssertionError` class and `assert` function provide assertion capabilities.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  let logDebug = false;\n  let logSource = \"JS\";\n\n  function setLogDebug(debug, source) {\n    logDebug = debug;\n    if (source) {\n      logSource = source;\n    }\n  }\n\n  function debug(...args) {\n    if (logDebug) {\n      const stringifiedArgs = args.map((arg) =>\n        typeof arg === \"string\" ? arg : JSON.stringify(arg)\n      ).join(\" \");\n      // adding a non-zero integer value to the end of the debug string causes\n      // the message to be printed to stderr instead of stdout, which is better\n      // aligned to the behaviour of debug messages\n      core.print(`DEBUG ${logSource} - ${stringifiedArgs}\\n`, 1);\n    }\n  }\n\n  function error(...args) {\n    const stringifiedArgs = args.map((arg) =>\n      typeof arg === \"string\" || arg instanceof Error\n        ? String(arg)\n        : JSON.stringify(arg)\n    ).join(\" \");\n    core.print(`ERROR ${logSource} = ${stringifiedArgs}\\n`, 1);\n  }\n\n  class AssertionError extends Error {\n    constructor(msg) {\n      super(msg);\n      this.name = \"AssertionError\";\n    }\n  }\n\n  function assert(cond, msg = \"Assertion failed.\") {\n    if (!cond) {\n      throw new AssertionError(msg);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Upgrading TypeScript using Git and Rsync\nDESCRIPTION: This shell script demonstrates the commands used to upgrade TypeScript in the Deno project. It involves cloning the Deno TypeScript repo, adding the Microsoft TypeScript repo as a remote, fetching the latest tags, checking out a new branch based on a specific tag, cherry-picking custom commits, installing dependencies, and using rsync to copy the updated TypeScript files into the Deno project's `cli/tsc` directory. The script also excludes certain `.d.ts` files during the rsync operation.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/tsc/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/denoland/TypeScript.git\ncd typescript\ngit remote add upstream https://github.com/Microsoft/TypeScript\ngit fetch upstream\ngit checkout v3.9.7\ngit checkout -b branch_v3.9.7\ngit cherry pick <previous-release-branch-commit-we-did>\nnpm install\nnpx hereby\nrsync built/local/typescript.js ~/src/deno/cli/tsc/00_typescript.js\nrsync --exclude=protocol.d.ts --exclude=tsserverlibrary.d.ts --exclude=typescriptServices.d.ts built/local/*.d.ts ~/src/deno/cli/tsc/dts/\n```\n\n----------------------------------------\n\nTITLE: JSON with Comments\nDESCRIPTION: This snippet shows a JSON object with comments, as allowed in JSONC.  It defines a simple JSON structure with key-value pairs and inline comments.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Comment in JSON\n  \"key\": \"value\",\n  \"key2\": \"value2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Node-API function with napi_sym in Rust\nDESCRIPTION: This code snippet demonstrates how to use the `napi_sym` proc_macro to define a Node-API function in Rust. The macro handles the `#[no_mangle]` attribute, symbol export assertions, and result type conversions. It takes `Env`, a boolean value, and a result pointer as input and returns a `deno_napi::Result`.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/sym/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse deno_napi::napi_value;\nuse deno_napi::Env;\nuse deno_napi::Error;\nuse deno_napi::Result;\n\n#[napi_sym::napi_sym]\nfn napi_get_boolean(\n  env: *mut Env,\n  value: bool,\n  result: *mut napi_value,\n) -> Result {\n  let _env: &mut Env = env.as_mut().ok_or(Error::InvalidArg)?;\n  // *result = ...\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcast display updates\nDESCRIPTION: This test showcases the ability to broadcast display updates from the Deno kernel to the Jupyter notebook. It sends a series of messages to update a display with a specific ID, creating a basic animation effect.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nawait Deno.jupyter.broadcast(\"display_data\", {\n    data: { \"text/html\": \"<b>Processing.</b>\" },\n    metadata: {},\n    transient: { display_id: \"progress\" }\n});\n\nawait new Promise((resolve) => setTimeout(resolve, 500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n    data: { \"text/html\": \"<b>Processing..</b>\" },\n    metadata: {},\n    transient: { display_id: \"progress\" }\n});\n\nawait new Promise((resolve) => setTimeout(resolve, 500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n    data: { \"text/html\": \"<b>Processing...</b>\" },\n    metadata: {},\n    transient: { display_id: \"progress\" }\n});\n\nawait new Promise((resolve) => setTimeout(resolve, 500));\n\nawait Deno.jupyter.broadcast(\"update_display_data\", {\n    data: { \"text/html\": \"<b>Complete ✅</b>\" },\n    metadata: {},\n    transient: { display_id: \"progress\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating ECC Localhost Certificate with OpenSSL\nDESCRIPTION: This command generates a localhost certificate, key, and certificate signing request (CSR) using OpenSSL with ECC. It uses the prime256v1 curve and signs the CSR with the root CA. The certificate is valid for 36135 days and configured via the domains.txt file.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/tls/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopenssl ecparam -genkey -name prime256v1 -noout --out localhost_ecc.key\nopenssl req -new -key localhost_ecc.key -out localhost_ecc.csr -subj \"/C=US/ST=YourState/L=YourCity/O=Example-Certificates/CN=localhost.local\"\nopenssl x509 -req -sha256 -days 36135 -in localhost_ecc.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.txt -out localhost_ecc.crt\n```\n\n----------------------------------------\n\nTITLE: Initialize Deno IO Ops and ESM in Rust\nDESCRIPTION: This snippet demonstrates how to initialize the Deno IO ops and ESM from Rust. It uses the `deno_io::deno_io::init_ops_and_esm` function and provides the `deno_io::Stdio` struct as an argument. This function needs to be placed within the `extensions` field of `RuntimeOptions`.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/io/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndeno_io::deno_io::init_ops_and_esm(Option<deno_io::Stdio>)\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Localhost Certificate with OpenSSL\nDESCRIPTION: This command generates a localhost certificate, key, and certificate signing request (CSR) using OpenSSL. It uses an RSA 2048-bit key and signs the CSR with the root CA. The certificate is valid for 36135 days and configured via the domains.txt file.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/tls/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -new -nodes -newkey rsa:2048 -keyout localhost.key -out localhost.csr -subj \"/C=US/ST=YourState/L=YourCity/O=Example-Certificates/CN=localhost.local\"\nopenssl x509 -req -sha256 -days 36135 -in localhost.csr -CA RootCA.pem -CAkey RootCA.key -CAcreateserial -extfile domains.txt -out localhost.crt\n```\n\n----------------------------------------\n\nTITLE: Modify lib.rs to include the new module (diff)\nDESCRIPTION: This diff snippet shows how to modify the `lib.rs` file to include the new `boolean` module and initialize it. This ensures that the test function is registered when the module is loaded.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/README.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// tests/napi/src/lib.rs\n\n+ mod boolean;\n\n...\n\n#[no_mangle]\nunsafe extern \"C\" fn napi_register_module_v1(\n  env: napi_env,\n  exports: napi_value,\n) -> napi_value {\n  ...\n+ boolean::init(env, exports);\n\n  exports\n}\n```\n\n----------------------------------------\n\nTITLE: Return object\nDESCRIPTION: This test ensures that an object is correctly inspected and its properties are displayed in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n{foo: \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Import Crypto API into Global Scope JavaScript\nDESCRIPTION: This snippet demonstrates how to import the deno_crypto extension in JavaScript and assign the `CryptoKey`, `crypto`, `Crypto`, and `SubtleCrypto` objects to the global scope, making them accessible for cryptographic operations.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/crypto/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as crypto from \"ext:deno_crypto/00_crypto.js\";\n\nObject.defineProperty(globalThis, \"CryptoKey\", {\n  value: crypto.CryptoKey,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"crypto\", {\n  value: crypto.crypto,\n  enumerable: false,\n  configurable: true,\n  writable: false,\n});\n\nObject.defineProperty(globalThis, \"Crypto\", {\n  value: crypto.Crypto,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n\nObject.defineProperty(globalThis, \"SubtleCrypto\", {\n  value: crypto.SubtleCrypto,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Root CA Certificate with OpenSSL\nDESCRIPTION: This command generates a root certificate authority (CA) certificate, key, and PEM file using OpenSSL. It creates a self-signed certificate valid for 36135 days with RSA 2048-bit key. The subject includes country (C) and common name (CN).\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/tls/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl req -x509 -nodes -new -sha256 -days 36135 -newkey rsa:2048 -keyout RootCA.key -out RootCA.pem -subj \"/C=US/CN=Example-Root-CA\"\nopenssl x509 -outform pem -in RootCA.pem -out RootCA.crt\n```\n\n----------------------------------------\n\nTITLE: Startup Compiler Runtime\nDESCRIPTION: The `startup` function initializes the compiler runtime environment by registering core Deno ops and setting the debug flag. It ensures that the runtime is only started once.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nfunction startup({ debugFlag = false }) {\n  if (hasStarted) {\n    throw new Error(\"The compiler runtime already started.\");\n  }\n  hasStarted = true;\n  core.ops();\n  setLogDebug(!!debugFlag, \"TS\");\n}\n```\n\n----------------------------------------\n\nTITLE: Console table\nDESCRIPTION: This test uses `console.table` to render a table from a simple array.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nconsole.table([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Broadcast comm messages\nDESCRIPTION: This test demonstrates sending comm messages using `Deno.jupyter.broadcast`. It sends comm_open and comm_msg messages to simulate Jupyter Widgets communication with additional context and buffers.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n// Smoke test: Send example Jupyter Widgets messages with \"extra\" context.\n// No return because we don't have a front-end widget to get the message from.\nawait Deno.jupyter.broadcast(\n    \"comm_open\",\n    {\n        \"comm_id\": \"foo\",\n        \"target_name\": \"jupyter.widget\",\n        \"data\": {\n            \"state\": {},\n        },\n    },\n    {\n        \"metadata\": { \"version\": \"2.1.0\" },\n    },\n);\n\nawait Deno.jupyter.broadcast(\n    \"comm_msg\",\n    {\n        \"comm_id\": \"foo\",\n        \"data\": {\n            \"method\": \"update\",\n            \"state\": { \"answer\": null },\n            \"buffer_paths\": [[\"answer\"]]\n        },\n    },\n    {\n        \"buffers\": [new Uint8Array([42])],\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Rerunning commands with cargo-plonk on changes\nDESCRIPTION: This command uses `cargo plonk run` to re-run commands on changes in the specified package. It includes flags for verbosity (`-v`), package (`-p`), symbol (`-s`), binary (`-b`), watch mode (`--watch`), and an evaluation command with an unstable flag.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/faster-rebuilds.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo plonk run -v \\\n  -p deno_webgpu \\\n  -s init_ops_and_esm \\\n  -b deno \\\n  --watch \\\n  -- eval \"await navigator.gpu.requestAdapter()\" --unstable\n```\n\n----------------------------------------\n\nTITLE: Define Global Properties for Deno Web APIs - JavaScript\nDESCRIPTION: Demonstrates how to assign Deno web extension properties to the global scope using `Object.defineProperty`.  This makes the imported web APIs available for use in the global context, enabling their usage as standard web APIs. It configures properties like `AbortController` making them non-enumerable, configurable and writable.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/web/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty(globalThis, \"AbortController\", {\n  value: abortSignal.AbortController,\n  enumerable: false,\n  configurable: true,\n  writable: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize ops and ESM for deno_url (Rust)\nDESCRIPTION: This Rust code snippet explains the need to call `deno_url::deno_url::init_ops_and_esm()` in the `extensions` field of your `RuntimeOptions` when using the `deno_url` crate in Rust. This initializes the necessary ops and ESM for the crate to function correctly within the Deno runtime.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/url/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Then from rust, provide `deno_url::deno_url::init_ops_and_esm()` in the\n// `extensions` field of your `RuntimeOptions`\n```\n\n----------------------------------------\n\nTITLE: Get Script Version in Deno\nDESCRIPTION: This function `getScriptVersion` retrieves the version of a script file. It first checks if the script is in the `sourceFileCache`. If not, it uses the `op_script_version` Deno core op to get the version.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetScriptVersion(specifier) {\n  debug(`host.getScriptVersion(\"${specifier}\")`);\n  const sourceFile = sourceFileCache.get(specifier);\n  if (sourceFile) {\n    return sourceFile.version ?? \"1\";\n  }\n  return core.jsonOpSync(\"op_script_version\", { specifier });\n}\n```\n\n----------------------------------------\n\nTITLE: Resolve returned promise\nDESCRIPTION: This test verifies that a resolved promise returns its value correctly in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nPromise.resolve(\"it worked!\")\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Compat Tests\nDESCRIPTION: This snippet shows how to run specific Node.js compatibility tests within the Deno environment. The command uses the `deno task test` runner, specifying a filter to include only tests containing 'buffer' in their filename. This allows for targeted testing of specific modules or functionalities.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/node_compat/runner/README.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n/path/to/deno/tests/node_compat/runner\n$ deno task test buffer\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Commits for Patch Release\nDESCRIPTION: This snippet describes the git commands to create and push a branch for a patch release. It checks out the latest minor release, creates a new branch, and pushes it to the 'denoland/deno' repository.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/release/release_doc_template.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# checkout latest minor release\n$ git checkout v$PAST_VERSION\n\n# create a branch\n$ git checkout v$MINOR_VERSION\n\n# push the branch to the `denoland/deno` repository\n$ git push upstream v$MINOR_VERSION\n```\n\n----------------------------------------\n\nTITLE: Upgrading WPT Submodule (Shell)\nDESCRIPTION: These commands upgrade the wpt submodule to the latest version. It fetches the latest changes from the remote repository, checks out the `epochs/daily` branch, and then adds the changed files to the git index. Requires git to be installed and configured.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd tests/wpt/suite\ngit fetch origin\ngit checkout origin/epochs/daily\ncd ../../../\ngit add ./tests/wpt/suite\n```\n\n----------------------------------------\n\nTITLE: Running Copyright Checker\nDESCRIPTION: This command executes the copyright checker script, copyright_checker.js, using Deno. It needs read and run permissions to check copyright headers in code files.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-read --allow-run  ./tools/copyright_checker.js\n```\n\n----------------------------------------\n\nTITLE: Initialize WebIDL in Rust\nDESCRIPTION: This Rust code snippet shows how to initialize the WebIDL functionality within a Deno runtime using the `init_webidl::init_webidl::init_ops_and_esm()` function. It should be included in the extensions field of your RuntimeOptions.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/webidl/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ninit_webidl::init_webidl::init_ops_and_esm()\n```\n\n----------------------------------------\n\nTITLE: Snapshot compile options\nDESCRIPTION: Defines the compiler options used when creating a snapshot of the compiler. These options ensure that the snapshot is created with specific settings for ES module interop, JSX compilation, module kind, strict mode, and target ECMAScript version.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n  const SNAPSHOT_COMPILE_OPTIONS = {\n    esModuleInterop: true,\n    jsx: ts.JsxEmit.React,\n    module: ts.ModuleKind.ESNext,\n    noEmit: true,\n    strict: true,\n    target: ts.ScriptTarget.ESNext,\n  };\n```\n\n----------------------------------------\n\nTITLE: Updating WPT Test Expectations (Shell)\nDESCRIPTION: This command updates the `expectation.json` file to match the current output of the executed tests. It can be used after changes to the tests or Deno itself to ensure that the test expectations reflect the new reality. Requires a correctly configured WPT environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./tests/wpt/wpt.ts update -- hr-time\n```\n\n----------------------------------------\n\nTITLE: Running Filtered WPT Tests (Shell)\nDESCRIPTION: This command runs a subset of Web Platform Tests, filtered by specifying test file names or patterns after the `--` separator. This allows for focused testing on specific features or areas. Requires the WPT environment to be set up.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./tests/wpt/wpt.ts run -- streams/piping/general hr-time\n```\n\n----------------------------------------\n\nTITLE: Initializing deno_net ops in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to initialize the networking ops and ESM within the Deno runtime. It requires a root certificate store provider, a list of certificates to ignore, and a Permissions struct implementing `deno_net::NetPermissions`. This function connects the Rust networking implementation with the JavaScript environment.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/net/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndeno_net::deno_net::init_ops_and_esm::<Permissions>(root_cert_store_provider, unsafely_ignore_certificate_errors)\n```\n\n----------------------------------------\n\nTITLE: Return string\nDESCRIPTION: This test validates that a string is correctly returned as output from the Jupyter cell.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"this is a test of the emergency broadcast system\"\n```\n\n----------------------------------------\n\nTITLE: Running stdio Benchmark with C\nDESCRIPTION: This command measures the time it takes for the compiled C program (`./stdio`) to process input from `/dev/zero` using the `dd` command.  `dd` reads blocks of 65536 bytes from `/dev/zero` and sends 500000 such blocks as input to the compiled C program.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/stdio/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntime dd if=/dev/zero bs=65536 count=500000 | ./stdio\n```\n\n----------------------------------------\n\nTITLE: Initialize Language Server\nDESCRIPTION: The function `serverInit` initializes the TypeScript language service. It creates a language service instance, registers core Deno ops, and sets the debug flag. It throws an error if the server has already been initialized.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nfunction serverInit({ debug: debugFlag }) {\n  if (hasStarted) {\n    throw new Error(\"The language server has already been initialized.\");\n  }\n  hasStarted = true;\n  languageService = ts.createLanguageService(host);\n  core.ops();\n  setLogDebug(debugFlag, \"TSLS\");\n  debug(\"serverInit()\");\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Benchmark Report in Deno\nDESCRIPTION: This command starts a server using Deno to serve the generated benchmark report. The `--allow-net` flag specifies the allowed network address (127.0.0.1:9000), ensuring that the server can only be accessed locally, and the report is rendered by `serve.jsx`.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/fs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-net=127.0.0.1:9000 serve.jsx\n# View rendered report at http://127.0.0.1:9000/\n```\n\n----------------------------------------\n\nTITLE: Initializing Console API in Rust\nDESCRIPTION: This Rust snippet shows how to initialize the ops and ESM required by the deno_console crate. It requires access to the `RuntimeOptions` and the `deno_console::deno_console::init_ops_and_esm()` function. This initialization provides the necessary functionality for the JavaScript console object to function correctly.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/console/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ndeno_console::deno_console::init_ops_and_esm()\n```\n\n----------------------------------------\n\nTITLE: TypeScript transpiling\nDESCRIPTION: This test showcases TypeScript transpiling within the Jupyter environment. It defines a TypeScript interface and function, demonstrating that the kernel can handle TypeScript code and convert it to JavaScript for execution.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninterface SquareConfig {\n  color?: string;\n  width?: number;\n}\n \nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  return {\n    color: config.color || \"red\",\n    area: config.width ? config.width * config.width : 20,\n  };\n}\n \ncreateSquare({ colour: \"red\", width: 100 });\n```\n\n----------------------------------------\n\nTITLE: Implement Node-API function in Rust\nDESCRIPTION: This code snippet shows an example of implementing a Node-API function in Rust using the `napi_sym` attribute macro.  It defines the `napi_get_boolean` function, taking an environment, boolean value, and a pointer to store the result.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/README.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[napi_sym::napi_sym]\nfn napi_get_boolean(\n  env: *mut Env,\n  value: bool,\n  result: *mut napi_value,\n) -> Result {\n  // ...\n  Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Snapshot Program\nDESCRIPTION: This snippet creates a TypeScript program using `ts.createProgram`. It initializes the program with a build specifier, snapshot compile options, and a host. This is used to prepare a snapshot of the TypeScript compiler for faster startup in Deno.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst TS_SNAPSHOT_PROGRAM = ts.createProgram({\n    rootNames: [buildSpecifier],\n    options: SNAPSHOT_COMPILE_OPTIONS,\n    host,\n  });\nts.getPreEmitDiagnostics(TS_SNAPSHOT_PROGRAM);\n```\n\n----------------------------------------\n\nTITLE: WPT Setup Command (Shell)\nDESCRIPTION: This command is used to set up the Web Platform Test environment. It should be run before the first test execution and after any updates to the `./test_util/wpt` submodule. It validates the environment and can optionally rebuild the manifest or auto-configure /etc/hosts.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/wpt/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./tests/wpt/wpt.ts setup\n```\n\n----------------------------------------\n\nTITLE: Async rich class display\nDESCRIPTION: This test demonstrates the creation of an asynchronous class with a custom display representation using Symbol.for(\"Jupyter.display\"). The class generates HTML to display a colored square.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nclass SuperColorAsync {\n  constructor() {\n      this.color = \"#5398ff\"\n  }\n  hex() {\n      return this.color\n  }\n    \n  async [Symbol.for(\"Jupyter.display\")]() {\n      return {\n          \"text/html\": `<div style=\"width: 32px; height: 32px; background-color: ${this.hex()}\" />`\n      }\n  }\n}\n\nlet sc = new SuperColorAsync()\nsc\n```\n\n----------------------------------------\n\nTITLE: Define and Call TypeScript Function\nDESCRIPTION: This snippet defines a TypeScript function named 'bar' that returns the integer 42. The return type is explicitly specified as 'number'. It then calls the function, demonstrating its basic usage with type annotations.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/regular/formatted3.markdown#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar(): number {\n  return 42;\n}\n\nbar();\n```\n\n----------------------------------------\n\nTITLE: Running Specific Deno Test\nDESCRIPTION: Demonstrates how to run a specific Deno integration test using `cargo test` by specifying the category and test name.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncargo test specs::category_name::test_name\n```\n\n----------------------------------------\n\nTITLE: Installing left-pad using npm\nDESCRIPTION: This command installs the left-pad package using the Node Package Manager (npm). It downloads and installs the library and its dependencies, making it available for use in JavaScript projects.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/commonjs/node_modules/left-pad/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install left-pad\n```\n\n----------------------------------------\n\nTITLE: Deno.test passing test with steps\nDESCRIPTION: This test demonstrates the use of `Deno.test()` with `t.step()` to define multiple steps within a test case. Each step is awaited to ensure sequential execution.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nDeno.test(\"passing test with steps\", async (t) => {\n  await t.step(\"step 1\", () => {});\n  await t.step(\"step 2\", () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Print to console\nDESCRIPTION: This test prints \"hi\" to the console, serving as a basic sanity check to ensure the Jupyter kernel is functioning. If this test fails, it's likely that the entire environment is not set up correctly.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nconsole.log(\"hi\")\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-plonk using cargo\nDESCRIPTION: This command installs the `cargo-plonk` crate using the `cargo install` command. `cargo-plonk` is used to speed up Deno rebuilds by hot-swapping symbols using a fresh dynamic library of the local crates.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/faster-rebuilds.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install cargo-plonk\n```\n\n----------------------------------------\n\nTITLE: Running Script with Cargo\nDESCRIPTION: This command executes a script using the current or pending build of the Deno executable via Cargo. It requires read, write, and run permissions.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- run --allow-read --allow-write --allow-run ./tools/<script>\n```\n\n----------------------------------------\n\nTITLE: Implement test functionality in Rust\nDESCRIPTION: This Rust code snippet shows the implementation of the test functionality for the new Node-API function. It defines a `test_boolean` function that checks the argument type and (presumably) uses `napi_get_boolean`.  It also includes an `init` function to register the test function.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/README.md#_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// tests/napi/src/boolean.rs\n\nuse napi_sys::Status::napi_ok;\nuse napi_sys::ValueType::napi_boolean;\nuse napi_sys::*;\n\nextern \"C\" fn test_boolean(\n  env: napi_env,\n  info: napi_callback_info,\n) -> napi_value {\n  let (args, argc, _) = crate::get_callback_info!(env, info, 1);\n  assert_eq!(argc, 1);\n\n  let mut ty = -1;\n  assert!(unsafe { napi_typeof(env, args[0], &mut ty) } == napi_ok);\n  assert_eq!(ty, napi_boolean);\n\n  // Use napi_get_boolean here...\n\n  value\n}\n\npub fn init(env: napi_env, exports: napi_value) {\n  let properties = &[crate::new_property!(env, \"test_boolean\\0\", test_boolean)];\n\n  unsafe {\n    napi_define_properties(env, exports, properties.len(), properties.as_ptr())\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Finalize Performance Monitoring\nDESCRIPTION: This function `performanceEnd` finalizes the performance monitoring process. It calculates the total compilation time, adds it to the `stats` array, and returns the accumulated performance statistics.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction performanceEnd() {\n  const duration = Date.now() - statsStart;\n  stats.push([\"Compile time\", duration]);\n  return stats;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging to Console JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to log a message to the console using `console.log()`. It is a basic example for outputting information during script execution. No dependencies or prerequisites are required.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown/main.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"js\");\n```\n\n----------------------------------------\n\nTITLE: SQL Select Statement (fmt-ignore)\nDESCRIPTION: This SQL snippet shows a `SELECT` statement similar to the above example. The `-- deno-fmt-ignore-file` comment indicates that the file should not be formatted.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n-- deno-fmt-ignore-file\n  seLect * , biz, buz\nfrom baz;\n```\n\n----------------------------------------\n\nTITLE: Simple Function in TypeScript\nDESCRIPTION: This TypeScript snippet defines a function named 'hello' that takes a string as input and prints it to the console. The function is then called with the argument 'alice'.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\nfunction hello(name: string    ) {\n                  console.log(name);\n};\n\nhello(        \"alice\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Error Example\nDESCRIPTION: This TypeScript code snippet demonstrates a type error by assigning a number to a string variable. This example is used to trigger the type-checker and verify that errors are detected during documentation processing.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_full_block_names/main.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Start Performance Monitoring for Compilation\nDESCRIPTION: This function `performanceStart` initializes the performance monitoring system. It resets the `stats` array, records the start time, and enables TypeScript's performance API.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction performanceStart() {\n  stats.length = 0;\n  statsStart = Date.now();\n  ts.performance.enable();\n}\n```\n\n----------------------------------------\n\nTITLE: Get Script File Names for Compilation\nDESCRIPTION: This function `getScriptFileNames` retrieves the names of the script files to be compiled. It uses the `op_script_names` Deno core op to fetch the script names.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetScriptFileNames() {\n  debug(\"host.getScriptFileNames()\");\n  return core.jsonOpSync(\"op_script_names\", undefined);\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output JavaScript (variant)\nDESCRIPTION: This snippet prints 'Hello World2' to the console using JavaScript's `console.log()` function. It demonstrates basic output functionality with a slightly different string.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello World2\");\n```\n\n----------------------------------------\n\nTITLE: Deno.test passing test\nDESCRIPTION: This test demonstrates a basic passing test case using `Deno.test()`. It asserts that the test function executes without throwing an error.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nDeno.test(\"passing test\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Top-level await usage\nDESCRIPTION: This test demonstrates the use of top-level await in the Jupyter environment. It resolves a promise and assigns the result to a variable, then logs the value to the console.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlet x = await Promise.resolve(42);\nconsole.log(\"x is\", x);\n```\n\n----------------------------------------\n\nTITLE: Filtering Deno Benchmarks with Cargo\nDESCRIPTION: This command filters Deno benchmarks using the cargo bench command. It specifies the 'deno_bench' benchmark and includes the 'bundle' feature.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo bench --bench deno_bench -- bundle\n```\n\n----------------------------------------\n\nTITLE: ts-expect-error Usage in Deno (TypeScript)\nDESCRIPTION: This code snippet demonstrates the usage of the `@ts-expect-error` comment in Deno TypeScript. It's used to suppress the type error that would normally be raised when assigning a number to a string variable. This allows for testing error handling and documenting intentional type mismatches.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ts_expect_error/main.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Define and Call JavaScript Function\nDESCRIPTION: This snippet defines a JavaScript function named 'foo' that returns the integer 42. It then calls the function, demonstrating its basic usage.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/regular/formatted3.markdown#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n  return 42;\n}\n\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Type Checking with TypeScript\nDESCRIPTION: This snippet demonstrates a TypeScript code example that intentionally causes a type error. It serves to illustrate how the type checker will behave in such scenarios.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/check/typecheck_doc_in_markdown/markdown.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Retrieve TypeScript Compilation Settings\nDESCRIPTION: This function `getCompilationSettings` retrieves the TypeScript compilation settings. It returns the `compilationSettings` object which contains the configuration options for the TypeScript compiler.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetCompilationSettings() {\n  debug(\"host.getCompilationSettings()\");\n  return compilationSettings;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling C Baseline for stdio Benchmark\nDESCRIPTION: Compiles the C implementation of `stdio` to create an executable file named `stdio`. The `-O3` flag enables aggressive optimization during compilation.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/stdio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncc stdio.c -o stdio -O3\n```\n\n----------------------------------------\n\nTITLE: CSS Styling\nDESCRIPTION: This CSS snippet styles an element with the class 'btn' that is a direct child of an element with the id 'app'. It sets the text color to black.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n#app > .btn {\n  color: #000;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Array of Strings\nDESCRIPTION: This snippet showcases a JSON object containing an array of strings. It defines a simple JSON structure with a key 'numbers' associated with an array of string values.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"numbers\": [\"1\", \"2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure\nDESCRIPTION: This HTML snippet represents a simple div element with the class 'container' containing the text 'content'. It demonstrates basic HTML markup.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=container > content </div>\n```\n\n----------------------------------------\n\nTITLE: HTML Container\nDESCRIPTION: This HTML snippet creates a simple div element with the class 'container' and the text 'content'. It demonstrates basic HTML structure.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">content</div>\n```\n\n----------------------------------------\n\nTITLE: Logging to Console JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a simple console log statement. It serves as a basic example for documentation processing, intended to be extracted and displayed as JavaScript code.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_full_block_names/main.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"js\");\n```\n\n----------------------------------------\n\nTITLE: Running cargo-plonk to hot-swap symbols\nDESCRIPTION: This command runs `cargo plonk` to watch for changes in the `ext/webgpu` crate and hot-swap the `init_ops_and_esm` function into the previously built `deno` binary. It uses the `--package`, `--symbol`, `--bin`, and `--watch` flags.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/faster-rebuilds.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo plonk run \\\n  --package deno_webgpu \\\n  --symbol init_ops_and_esm \\\n  --bin deno \\\n  --watch\n```\n\n----------------------------------------\n\nTITLE: Return symbol\nDESCRIPTION: This test validates that a symbol is returned as a string describing the symbol in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nSymbol(\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Logging to console with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a simple console log statement. It showcases how JavaScript code can be embedded within documentation and executed or tested.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_windows/main.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(\"js\");\n```\n\n----------------------------------------\n\nTITLE: VS Code Autocomplete Configuration\nDESCRIPTION: Configuration snippet for `.vscode/settings.json` to enable auto-completion for `__test__.jsonc` files using a schema.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json.schemas\": [{\n    \"fileMatch\": [\n      \"__test__.jsonc\"\n    ],\n    \"url\": \"./tests/specs/schema.json\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deno Runtime Tests (Shell)\nDESCRIPTION: These shell commands illustrate how to run Deno runtime unit tests using `cargo run`. The first command runs all tests in the specified directory with `--allow-all` permissions and a specified location. The second command runs a specific test module, `files_test.ts`, with the same permissions and location. These commands are essential for executing and verifying the functionality of the Deno runtime.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/unit/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run all tests.\ncargo run --bin deno -- test --allow-all --location=http://js-unit-tests/foo/bar cli/tests/unit/\n\n# Run a specific test module\ncargo run --bin deno -- test --allow-all --location=http://js-unit-tests/foo/bar cli/tests/unit/files_test.ts\n```\n\n----------------------------------------\n\nTITLE: Running Code Linter\nDESCRIPTION: This command executes the linter script, lint.js, using Deno. It requires read, write, and run permissions to lint the codebase.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno run --allow-read --allow-write --allow-run ./tools/lint.js\n```\n\n----------------------------------------\n\nTITLE: Return a string with emoji\nDESCRIPTION: This test confirms that a string containing an emoji is correctly returned as output from the Jupyter cell.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n\"Cool 🫡\"\n```\n\n----------------------------------------\n\nTITLE: Console log\nDESCRIPTION: This test demonstrates using `console.log` to print a message from within Deno's environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nconsole.log(\"Hello from Deno!\")\n```\n\n----------------------------------------\n\nTITLE: Return undefined\nDESCRIPTION: This test verifies that returning `undefined` does not produce a value in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nundefined\n```\n\n----------------------------------------\n\nTITLE: Return null\nDESCRIPTION: This test verifies that returning `null` results in the string \"null\" in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Deno.test failing test\nDESCRIPTION: This test demonstrates a failing test case using `Deno.test()`. It asserts that the test function throws an error, indicating a failure.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nDeno.test(\"failing test\", () => {\n  throw new Error(\"some message\");\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing a string\nDESCRIPTION: This test validates that throwing a string results in the string being displayed as an error in the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nthrow \"a party\"\n```\n\n----------------------------------------\n\nTITLE: Install Deno (Chocolatey)\nDESCRIPTION: This command uses Chocolatey to install Deno. It's specific to Windows systems with Chocolatey installed.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install deno\n```\n\n----------------------------------------\n\nTITLE: Multiple Tests in __test__.json\nDESCRIPTION: Illustrates how to define multiple tests within a single `__test__.json` file, each with its own arguments and expected output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests\": {\n    \"ignore_dir\": {\n      \"args\": \"run script.ts\",\n      \"output\": \"script.out\"\n    },\n    \"some_other_test\": {\n      \"args\": \"run other.ts\",\n      \"output\": \"other.out\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add symbol name to symbol_exports.json (diff)\nDESCRIPTION: This code snippet demonstrates how to add a new symbol name to the `symbol_exports.json` file, which is necessary for making the new Node-API function available. The snippet shows a diff format, adding `napi_get_boolean`.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/napi/README.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"symbols\": [\n    ...\n    \"napi_get_undefined\",\n-   \"napi_get_null\"\n+   \"napi_get_null\",\n+   \"napi_get_boolean\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Return bigint\nDESCRIPTION: This test checks if a bigint value is returned in literal format within the Jupyter output.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n31337n\n```\n\n----------------------------------------\n\nTITLE: Hash Creation in Deno\nDESCRIPTION: This function `createHash` creates a hash of the provided data using a Deno core operation. It calls the `op_create_hash` op and returns the resulting hash value.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateHash(data) {\n  return core.jsonOpSync(\"op_create_hash\", { data }).hash;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Deno fmt Ignore\nDESCRIPTION: This SQL snippet demonstrates a SELECT query, retrieving all columns and the 'biz' and 'buz' columns from the 'baz' table. It includes a deno-fmt-ignore-file comment which disables formatting for the entire file.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\n-- deno-fmt-ignore-file\n  seLect * , biz, buz\nfrom baz;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Error Example\nDESCRIPTION: This TypeScript snippet demonstrates an intentional type error.  The code attempts to assign a number to a string variable, causing a type-checking failure. This illustrates how errors are caught and displayed during documentation generation.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_windows/main.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Standalone TypeScript Type Error\nDESCRIPTION: This standalone TypeScript snippet replicates the type error of assigning a number (42) to a variable of type string. Unlike the previous snippets, this one is not within an HTML comment, meaning it will actively trigger a type error when processed by the TypeScript compiler.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ignore_html_comment/main.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Deno.readFile error\nDESCRIPTION: This test checks error handling for `Deno.readFile` function when passed an invalid file descriptor. It validates if it throws an appropriate error.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nDeno.readFile(1)\n```\n\n----------------------------------------\n\nTITLE: Install Deno (PowerShell)\nDESCRIPTION: This command uses PowerShell to download and execute the Deno installation script. It is designed for Windows environments.\nSOURCE: https://github.com/denoland/deno/blob/main/README.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nirm https://deno.land/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Returning Number\nDESCRIPTION: This TypeScript function `foo` returns a number. It demonstrates a simple function definition with a return type annotation in TypeScript.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(): number {\n  return 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with JavaScript\nDESCRIPTION: This snippet demonstrates basic console logging in JavaScript. It is a simple example to illustrate the use of JavaScript within the Deno documentation.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/check/typecheck_doc_in_markdown/markdown.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"js\");\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Error Example (Multiple HTML Comments)\nDESCRIPTION: This snippet replicates the type error example, again assigning a number to a string variable. It exists within a different HTML comment block to showcase multiple instances within the same document. The snippet is designed to produce a type error during type checking.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ignore_html_comment/main.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: string = 42;\n```\n\n----------------------------------------\n\nTITLE: Svelte Script Block with TypeScript\nDESCRIPTION: This Svelte snippet defines a script block with TypeScript, declaring a variable 'a' of type number. It demonstrates the integration of TypeScript within a Svelte component.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_9\n\nLANGUAGE: Svelte\nCODE:\n```\n<script lang=ts>\nlet a:number\n</script>\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in JavaScript (Variant)\nDESCRIPTION: This JavaScript snippet demonstrates another console log statement, printing 'Hello World2' to the console. This serves as a simple variation of the previous logging example.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"Hello World2\"\n\n)\n```\n\n----------------------------------------\n\nTITLE: Logging to console with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates a simple console log statement. It showcases how TypeScript code can be embedded within documentation and executed or tested. It uses TypeScript's type system.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_windows/main.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(\"ts\");\n```\n\n----------------------------------------\n\nTITLE: JSON Array Example\nDESCRIPTION: This JSON snippet demonstrates a simple JSON object containing an array of strings. It shows how to represent a list of values within a JSON structure.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"numbers\":\n  [\"1\",      \"2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Deno Specs\nDESCRIPTION: Shows the required directory structure for Deno integration tests, which includes category name, test name, and the `__test__.json` file.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntests/specs/<category_name>/<test_name>/__test__.json\n```\n\n----------------------------------------\n\nTITLE: YAML List\nDESCRIPTION: This snippet demonstrates a simple YAML list. It contains a list of two items, 'item1' and 'item2', represented in YAML syntax.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- item1\n- item2\n```\n\n----------------------------------------\n\nTITLE: Logging with TypeScript\nDESCRIPTION: This snippet showcases basic console logging using TypeScript. It provides a simple example of how TypeScript is used within the Deno documentation.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/check/typecheck_doc_in_markdown/markdown.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"ts\");\n```\n\n----------------------------------------\n\nTITLE: Throwing an error\nDESCRIPTION: This test checks if throwing an error from a function is properly handled within the Jupyter environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n(function foo() {\n    throw new Error(\"this is a test\")\n})()\n```\n\n----------------------------------------\n\nTITLE: Defining ignored diagnostics\nDESCRIPTION: This code defines an array of TypeScript diagnostic codes that are intentionally ignored by the Deno compiler. These diagnostics often provide misleading or incorrect information in the context of Deno's compilation environment.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n  /** Diagnostics that are intentionally ignored when compiling TypeScript in\n   * Deno, as they provide misleading or incorrect information. */\n  const IGNORED_DIAGNOSTICS = [\n    // TS1208: All files must be modules when the '--isolatedModules' flag is\n    // provided.  We can ignore because we guarantee that all files are\n    // modules.\n    1208,\n    // TS1375: 'await' expressions are only allowed at the top level of a file\n    // when that file is a module, but this file has no imports or exports.\n    // Consider adding an empty 'export {}' to make this file a module.\n    1375,\n    // TS1103: 'for-await-of' statement is only allowed within an async function\n    // or async generator.\n    1103,\n    // TS2306: File 'file:///Users/rld/src/deno/subdir/amd_like.js' is\n    // not a module.\n    2306,\n    // TS2691: An import path cannot end with a '.ts' extension. Consider\n    // importing 'bad-module' instead.\n    2691,\n    // TS2792: Cannot find module. Did you mean to set the 'moduleResolution'\n    // option to 'node', or to add aliases to the 'paths' option?\n    2792,\n    // TS5009: Cannot find the common subdirectory path for the input files.\n    5009,\n    // TS5055: Cannot write file\n    // 'http://localhost:4545/subdir/mt_application_x_javascript.j4.js'\n    // because it would overwrite input file.\n    5055,\n    // TypeScript is overly opinionated that only CommonJS modules kinds can\n    // support JSON imports.  Allegedly this was fixed in\n    // Microsoft/TypeScript#26825 but that doesn't seem to be working here,\n    // so we will ignore complaints about this compiler setting.\n    5070,\n    // TS7016: Could not find a declaration file for module '...'. '...'\n    // implicitly has an 'any' type.  This is due to `allowJs` being off by\n    // default but importing of a JavaScript module.\n    7016,\n  ];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Error Example (Boolean Assignment)\nDESCRIPTION: This TypeScript snippet demonstrates assigning a string value to a boolean variable. This will result in a type error, indicating a mismatch between the expected and provided data types. The snippet is wrapped in HTML comments.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_ignore_html_comment/main.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: boolean = \"true\";\n```\n\n----------------------------------------\n\nTITLE: Respond to Deno Runtime\nDESCRIPTION: This function `respond` sends a response to the Deno runtime using the `op_respond` core op. It takes an ID and optional data as input.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nfunction respond(id, data = null) {\n  core.jsonOpSync(\"op_respond\", { id, data });\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Release Unlock Message\nDESCRIPTION: This snippet shows the message to be posted in the company's #cli channel after a Deno release is complete. It informs the team that the 'denoland/deno' repository is unlocked and that PRs can now be landed.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/release/release_doc_template.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n:unlock:\n\n@here \n\n`denoland/deno` is now unlocked.\n\n*You can land PRs now*\n\nDeno v$VERSION has been released.\n```\n\n----------------------------------------\n\nTITLE: Removing __proto__ for security\nDESCRIPTION: This code snippet removes the `__proto__` property from `Object.prototype` for security reasons, intentionally making Deno non-compliant with ECMA-262 Annex B.2.2.1. This prevents prototype pollution vulnerabilities.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/lsp/large_file.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Removes the `__proto__` for security reasons.  This intentionally makes\n// Deno non compliant with ECMA-262 Annex B.2.2.1\ndelete Object.prototype.__proto__;\n```\n\n----------------------------------------\n\nTITLE: Hono Benchmarks\nDESCRIPTION: This code snippet presents benchmark results comparing Hono's performance with other routers for Cloudflare Workers. It shows operations per second (ops/sec) for different routers including hono (trie-router and regexp-router), itty-router, sunder, and worktop.\nSOURCE: https://github.com/denoland/deno/blob/main/cli/bench/testdata/npm/hono/README.md#_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\nhono - trie-router(default) x 424,449 ops/sec ±4.98% (77 runs sampled)\nhono - regexp-router x 516,228 ops/sec ±4.79% (81 runs sampled)\nitty-router x 206,641 ops/sec ±3.59% (87 runs sampled)\nsunder x 319,500 ops/sec ±1.33% (93 runs sampled)\nworktop x 187,280 ops/sec ±3.09% (87 runs sampled)\nFastest is hono - regexp-router\n✨  Done in 38.32s.\n```\n\n----------------------------------------\n\nTITLE: Console Output JavaScript\nDESCRIPTION: This snippet prints 'Hello World' to the console using JavaScript's `console.log()` function. It demonstrates basic output functionality.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Ignored TypeScript Constant Declaration\nDESCRIPTION: This TypeScript code declares a constant with an invalid type assignment. The 'ignore' attribute is used to prevent this snippet from being type-checked or included in the final documentation.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_full_block_names/main.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: Invalid = \"ignored\";\n```\n\n----------------------------------------\n\nTITLE: YAML List Example\nDESCRIPTION: This YAML snippet demonstrates a basic list structure. It showcases the simple syntax of YAML for representing a sequence of items.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n-  item1\n-  item2\n```\n\n----------------------------------------\n\nTITLE: CLI Release Lock Message\nDESCRIPTION: This snippet shows the message to be posted in the company's #cli channel when a Deno release is in progress. It informs the team that the 'denoland/deno' repository is locked and that no PRs should be landed until the release is complete.\nSOURCE: https://github.com/denoland/deno/blob/main/tools/release/release_doc_template.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n:lock:\n\n@here\n\nDeno v$VERSION is now getting released.\n\n`denoland/deno` is now locked.\n\n*DO NOT LAND ANY PRs*\n\nRelease checklist: <LINK TO THIS FORKED GIST GOES HERE>\n```\n\n----------------------------------------\n\nTITLE: Logging to Console in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a simple console log statement, printing 'Hello World' to the console. It serves as a basic example for outputting information during script execution.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log(\"Hello World\"\n\n)\n```\n\n----------------------------------------\n\nTITLE: Reject returned promise\nDESCRIPTION: This test confirms that a rejected promise throws an error and is properly handled by the Jupyter kernel.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/jupyter/integration_test.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nPromise.reject(new Error(\"it failed!\"));\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Example\nDESCRIPTION: This CSS snippet defines a style rule for a button element within an app container. It sets the text color to black.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n#app>.btn{ color : #000 }\n```\n\n----------------------------------------\n\nTITLE: JSON with Comments\nDESCRIPTION: This JSON snippet contains comments (using JSONC syntax) and demonstrates a key-value pair structure. It showcases the basic format of a JSON object with string values.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted.md#_snippet_4\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  // Comment in JSON\n  \"key\":          \"value\",\n                \"key2\":\n                \"value2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Ignored TypeScript Constant Declaration\nDESCRIPTION: This TypeScript snippet demonstrates the use of the 'ignore' attribute. The code, which would typically cause a type error, is ignored by the documentation tooling.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/specs/test/markdown_windows/main.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst value: Invalid = \"ignored\";\n```\n\n----------------------------------------\n\nTITLE: Svelte Script (TypeScript)\nDESCRIPTION: This Svelte component snippet declares a TypeScript variable 'a' of type number within the `<script>` tag. It demonstrates the usage of TypeScript in Svelte components.\nSOURCE: https://github.com/denoland/deno/blob/main/tests/testdata/fmt/badly_formatted_fixed.md#_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  let a: number;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Image Processing Flowchart\nDESCRIPTION: This Mermaid flowchart visualizes the data flow in the image processing architecture. It shows how input binary data is converted to an intermediate image, processed, and then converted to output binary data.\nSOURCE: https://github.com/denoland/deno/blob/main/ext/canvas/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  Input[\"input binary<br/>( &[u8] )\"]\n  II[\"intermediate image<br/>( DynamicImage )\"]\n  Ops[\"processing pixel<br/>( ImageBuffer< P, S > )\"]\n  Output[\"output binary<br/>( Box<[u8]> )\"]\n  Input --> II\n  II --> Ops --> II\n  II --> Output\n```"
  }
]