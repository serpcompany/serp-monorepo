[
  {
    "owner": "as7ridenied",
    "repo": "lolzteam",
    "content": "TITLE: Installing LOLZTEAM Package via pip\nDESCRIPTION: Command to install the LOLZTEAM package using pip package manager. This is the simplest way to install the library.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install LOLZTEAM\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to the LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to add a new item to the LolzTeam market using the publishing.add endpoint. It includes required parameters such as price, category ID, origin, and descriptions.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.publishing.add(\n    price=100,\n    category_id=24,\n    origin=\"autoreg\",\n    currency=\"rub\",\n    title=\"Telegram account\",\n    description=\"Public description\",\n    information=\"Private information\"\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fast Selling an Account in Python\nDESCRIPTION: Quickly adds and validates an account for sale on the LolzTeam Market. Multiple parameters are required including price, category, account details, and more.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.publishing.fast(\n    item_id=1234567890,\n    price=100,\n    category_id=24,\n    origin=\"autoreg\",\n    currency=\"rub\",\n    title=\"Telegram account\",\n    description=\"Public description\",\n    information=\"Private information\",\n    login=\"auth_key\",\n    password=\"dc_id\",\n    extra={\"checkSpam\": True},\n    allow_ask_discount=True,\n    proxy_id=12345\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Managing Forums in Python\nDESCRIPTION: Examples of using the forums API to list forums, get specific forum details, and handle forum subscriptions. Includes methods for following, unfollowing, and retrieving followers.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.list()\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.get(forum_id=876)\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.followers(forum_id=876)\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.followed(total=True)\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.follow(forum_id=876, post=True, alert=True, email=False)\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forums.unfollow(forum_id=876)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a New Thread in Python\nDESCRIPTION: This example demonstrates how to create a new thread on the Zelenka.guru forum. It includes various parameters for specifying thread details, tags, and notification preferences.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.create(\n    forum_id=876,\n    post_body=\"Test thread\",\n    title=\"Test thread\",\n    title_en=\"Test thread\",\n    prefix_ids=[1, 2, 3],\n    tags=[\"tag1\", \"tag2\", \"tag3\"],\n    reply_group=2,\n    hide_contacts=False,\n    allow_ask_hidden_content=False,\n    comment_ignore_group=False,\n    dont_alert_followers=False,\n    forum_notifications=True,\n    email_notifications=False\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fast Buying an Item in Python\nDESCRIPTION: Performs a quick purchase of an item on the LolzTeam Market. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.purchasing.fast(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Details in Python\nDESCRIPTION: This snippet shows how to get detailed information about a specific thread on the Zelenka.guru forum using its thread ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.get(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Information in Python\nDESCRIPTION: Gets detailed information about a specific item from the LolzTeam Market API. Requires the item_id parameter to identify the item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.get(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing owned accounts with filtering in Python\nDESCRIPTION: Makes a GET request to retrieve accounts owned by the current user with specific filters. This example shows accounts in category 1 with 'paid' status and minimum price of 250.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.list.owned(category_id=1, show=\"paid\", pmin=250)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to create a new invoice on LolzTeam market with parameters for currency, amount, payment ID, comments, and callback URLs.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.invoice.create(\n    currency=\"rub\",\n    amount=150,\n    payment_id=\"0000001\",\n    comment=\"10x amount of some goods | #0000001\",\n    url_success=\"https://lolz.live/account/ban\",\n    url_callback=\"https://yourweb.site/callback/0000001\",\n    lifetime=300,\n    merchant_id=1\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting a User with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve information about a specific user by their ID. The example demonstrates making a GET request to the /users/{user_id} endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.get(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Account Guarantee in Python\nDESCRIPTION: Checks the account guarantee status and cancels it if there's a valid reason to do so. Requires the item_id parameter to identify the target account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.guarantee.check(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Using LOLZTEAM API Clients with Examples\nDESCRIPTION: Comprehensive example showing how to initialize and use the LOLZTEAM API clients (Forum, Market, Antipublic). Demonstrates synchronous and asynchronous requests, job creation, and configuring client settings like logging, delays, and proxies.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom LOLZTEAM.Client import Forum, Market, Antipublic\nfrom LOLZTEAM.Client.Base import Constants\nimport asyncio\n\ntoken = \"your_token\"\n\nforum = Forum(token=token)\nmarket = Market(token=token)\nantipublic = Antipublic(token=\"Antipublic_key\")\n\n# API Client Parameters\n\n# - **token** (str): Your token.\n# - **language** (str[\"ru\", \"en\"]): Language of the API responses.\n# - **delay_min** (float): Minimal delay between requests.\n# - **proxy** (str): Proxy string.\n#   > protocol://ip:port or protocol://login:password@ip:port (socks5://login:password@192.168.1.1:8080 or http://login:password@192.168.1.1:8080)\n# - **timeout** (float): Request timeout.\n\n\n# All following examples also work for Market & Antipublic clients\n\nforum.settings.logger.enable()                                        # 📝 Start logging\n# Forum & Market client will log into {user_id}.{Client_name}.log file\n# Antipublic client will log into Antipublic.log file\nforum.settings.delay.enable()                                         # 🕒 Enable auto delay (Auto delay is enabled by default for Market & Forum but not for Antipublic)\n\nresponse = forum.users.get(user_id=2410024)                           # ⚡ Sync request\njob = forum.users.get.job(user_id=2410024)                            # 📋 Job creation (Always SYNC)\nresponse = forum.request(\"GET\", \"/users/2410024\")                     # ⚡ Custom request (You can use full url or just path)\njob = forum.request.job(\"GET\", \"/users/2410024\")                      # 📋 Job creation for custom request\n\nasync def async_example():\n    response = await forum.users.get(user_id=2410024)                 # ⚡ Async request\n    job = forum.users.get.job(user_id=2410024)                        # 📋 Job creation (Always SYNC)\n    response = await forum.request(\"GET\", \"/users/2410024\")           # ⚡ Custom async request\n    job = forum.request.job(\"GET\", \"/users/2410024\")                  # 📋 Job creation for custom request\n\nasyncio.run(async_example())\n\n# You should just add \".job\" between function name and parentheses to create a job.\n# You can't create a job for methods that are uploading files (like avatar/background) and ofc not for client.batch(...) method.\n# P.s Your IDE probably may not show that \".job\" function exists but it does, trust me.\n\nforum.settings.token = \"token\"                                        # 🔑 Change token\nforum.settings.language = \"en\"                                        # 🌍 Change language (Antipublic client doesn't support language changing)\nforum.settings.proxy = \"http://login:password@192.168.1.1:8080\"       # 🌐 Change proxy\nforum.settings.delay.min = 3                                          # 🕒 Set minimal delay (E.g. your minimal delay is 3 seconds, but if a method you want to use has a \n                                                                      #     delay of 0.5 seconds, your script will sleep for 3 seconds instead of 0.5 seconds)\nforum.settings.delay.disable()                                        # 🕒 Disable auto delay\nforum.settings.logger.disable()                                       # 📝 Stop logging\n\n# You can view all changeable settings in LOLZTEAM/Client/Base/Core.py file\n```\n\n----------------------------------------\n\nTITLE: Retrieving Forum Categories in Python\nDESCRIPTION: Examples of using the categories API endpoints to list and get specific categories. Shows how to pass parameters like parent category ID and ordering options.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.categories.list(parent_category_id=1, parent_forum_id=1, order=\"natural\")\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.categories.get(category_id=1)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AntiPublic API Client in Python\nDESCRIPTION: Demonstrates initialization of the AntiPublic API client with various configuration options. Shows both synchronous and asynchronous request methods, as well as configuration of tokens, proxies, logging, and request delays.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom LOLZTEAM.Client import Antipublic\nimport asyncio\n\ntoken = \"your_antipublic_key\"\n\nantipublic = Antipublic(token=token)\n\nantipublic.settings.logger.enable()                                    # -> Start logging\nantipublic.settings.delay.enable()                                     # Enable delay. Idk why you would ever need to enable delay for antipublic, but there it is\nresponse = antipublic.info.lines()                                     # Sync request\nresponse = antipublic.request(\"GET\", \"/countLines\")                    # Custom sync request\n\nasync def async_example():\n    async_response = await antipublic.info.lines()                     # Async request\n    async_response = await antipublic.request(\"GET\", \"/countLines\")    # Custom async request\n\nasyncio.run(async_example())\n\nantipublic.settings.token = \"token\"                                    # Change token\nantipublic.settings.proxy = \"http://login:password@192.168.1.1:8080\"   # Change proxy\nantipublic.settings.delay.min = 2410024                                # Change minimal delay\nantipublic.settings.delay.disable()                                    # Disable delay\nantipublic.settings.logger.disable()                                   # <- Stop logging\n```\n\n----------------------------------------\n\nTITLE: Getting Payment History from LolzTeam Market in Python\nDESCRIPTION: This code retrieves payment history from LolzTeam market with filtering options for operation type, amount range, comments, and date range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.history(\n    operation_type=\"income\",\n    min_amount=500,\n    max_amount=500,\n    comment=\"Payment comment\",\n    show_payment_stats=True\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Link on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to generate a payment link for LolzTeam market. The link can be shared with others to initiate a payment to your account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_111\n\nLANGUAGE: python\nCODE:\n```\npayment_link = market.payments.create_link(user_id=2410024, amount=250, comment=\"Comment\", redirect_url=\"https://example.com\")\nprint(payment_link)\n#  https://lzt.market/balance/transfer?user_id=2410024&amount=250&comment=Comment&redirect=https%3A%2F%2Fexample.com\n```\n\n----------------------------------------\n\nTITLE: Listing all categories in Python\nDESCRIPTION: Makes a GET request to retrieve a list of all available categories on the LolzTeam Market. This provides an overview of all account types that can be bought or sold.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.list()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to create a new post in a thread, with optional quoting of another post. The example demonstrates making a POST request with parameters for post body content, thread ID, and optional quote post ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.create(post_body=\"Test post\", thread_id=5523020, quote_post_id=1234567)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Initializing LOLZTEAM Forum API Client in Python\nDESCRIPTION: Example of setting up and using the LOLZTEAM Forum API Client with both synchronous and asynchronous methods. Shows basic configuration including token setup, logging, delay settings, and making requests.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom LOLZTEAM.Client import Forum\nimport asyncio\n\ntoken = \"your_token\"\n\nforum = Forum(token=token)\n\nforum.settings.logger.enable()                                        # -> Start logging\nforum.settings.delay.enable()                                         # Enable delay (btw delay is enabled by default)\n\nresponse = forum.users.get(user_id=2410024)                           # Sync request\njob = forum.users.get.job(user_id=2410024)                            # Job creation (Always SYNC)\nresponse = forum.request(\"GET\", \"/users/2410024\")                     # Custom request\njob = forum.request.job(\"GET\", \"/users/2410024\")                      # Job creation for custom request\n\nasync def async_example():\n    response = await forum.users.get(user_id=2410024)                 # Async request\n    job = forum.users.get.job(user_id=2410024)                        # Job creation (Always SYNC)\n    response = await forum.request(\"GET\", \"/users/2410024\")           # Custom async request\n    job = forum.request.job(\"GET\", \"/users/2410024\")                  # Job creation for custom request\n\nasyncio.run(async_example())\n\n# You should just add \".job\" between function name and parentheses to create a job.\n# You can't create a job for methods that are uploading files (like avatar/background) and ofc not for forum.batch(...) method.\n# P.s Your IDE probably may not show that \".job\" function exists but it does.\n\nforum.settings.token = \"token\"                                        # Change token\nforum.settings.language = \"en\"                                        # Change language\nforum.settings.proxy = \"http://login:password@192.168.1.1:8080\"       # Change proxy\nforum.settings.delay.min = 1                                          # Change minimal delay\nforum.settings.delay.disable()                                        # Disable delay\nforum.settings.logger.disable()                                       # <- Stop logging\n```\n\n----------------------------------------\n\nTITLE: Getting Email Code in Python\nDESCRIPTION: Retrieves an email verification code for an item on the LolzTeam Market. Requires the item_id parameter to identify the specific account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.email_code(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Conversation with Python\nDESCRIPTION: Starts a new group conversation with multiple users. Parameters include usernames list, initial message, conversation title, and several boolean flags for conversation settings.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.create_group(\n    usernames=[\"user1\", \"user2\"],\n    message=\"Hello, world!\",\n    title=\"Group Conversation\",\n    open_invite=True,\n    conversation_locked=False,\n    allow_edit_messages=True\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Category Accounts in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve accounts from the 'latest' category with optional filtering parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.latest.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Bumping an Item in Python\nDESCRIPTION: Bumps an item to improve its visibility in search results on the LolzTeam Market. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.bump(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to create a new profile post on a user's profile. The example demonstrates making a POST request with the user ID and post body parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.create(user_id=2410024, post_body=\"Test post\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Opening an Item in Python\nDESCRIPTION: Opens a previously closed item on the LolzTeam Market, making it available for purchase. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.open(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Requests on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to make batch requests to the LolzTeam market API, allowing multiple operations in a single API call. It also shows how to use the executor for handling multiple jobs.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.batch(jobs=[{\"method\": \"GET\", \"url\": \"/1234567890\", params: {}}])\n#  Also you can create jobs for almost all functions like this:\n#  job = market.managing.get.job(item_id=1234567890)\nprint(response.json())\n\n#  You also can use executor to ease work with batch requests while you have a lot of jobs:\njobs = [market.managing.get.job(item_id=1234567890) for _ in range(42)]\nwhile jobs:  # It will be running until all jobs will be executed\n    jobs, response = market.batch.executor(jobs=jobs)\n    print(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing Profile on LolzTeam Market in Python\nDESCRIPTION: This code shows how to edit your LolzTeam market profile settings using the profile.edit endpoint. It demonstrates changing title, discount settings, and password change preferences.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.profile.edit(\n    title=\"I'am the best seller in da world\",\n    allow_ask_discount=True,\n    max_discount_percent=25,\n    change_password_on_purchase=True\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to Favorites in Python\nDESCRIPTION: Adds an item to the user's favorites list on the LolzTeam Market. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.favorite(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Requests to LOLZTEAM API (Python)\nDESCRIPTION: Demonstrates how to send multiple API requests in a single batch to the Zelenka.guru API. Shows both manual job creation and using helper methods, plus using an executor for processing large batches of requests.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.batch(jobs=[{\"method\": \"GET\", \"url\": \"/users/2410024\", \"params\": {}}])\n#  Also you can create jobs for almost all functions like this:\n#  job = forum.users.get.job(user_id=2410024)\nprint(response.json())\n\n#  You also can use executor to ease work with batch requests while you have a lot of jobs:\njobs = [forum.users.get.job(user_id=i*1000) for i in range(42)]\nwhile jobs:  # It will be running until all jobs will be executed\n    jobs, response = forum.batch.executor(jobs=jobs)\n    print(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Conversation Message with Python\nDESCRIPTION: Sends a new message to an existing conversation. Requires the conversation_id parameter to identify the target conversation and the message parameter containing the message text.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.messages.create(conversation_id=123456, message=\"Hello, world!\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching AntiPublic Database for Specific Entries\nDESCRIPTION: Shows how to search the AntiPublic database for entries matching specific criteria like email, password, or domain. Supports various search parameters including ordering and grouping options.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.search(searchBy=\"email\", query={\"email\": \"test@mail.ru\"}, direction={\"email\": \"start\"})\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Item Validity on LolzTeam Market in Python\nDESCRIPTION: This code shows how to check an account for validity to make it available for purchase using the publishing.check endpoint. It requires the item ID and authentication credentials.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.publishing.check(\n    item_id=1234567890,\n    login=\"auth_key\",\n    password=\"dc_id\"\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Steam Category Accounts in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve accounts from the 'steam' category with optional filtering parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.steam.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Initializing LOLZTEAM Market API Client in Python\nDESCRIPTION: Sets up the Market client with authentication token and optional parameters like language, delay, proxy, and timeout.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom LOLZTEAM.Client import Market\nimport asyncio\n\ntoken = \"your_token\"\n\nmarket = Market(token=token)\n\nmarket.settings.logger.enable()                                        # -> Start logging\nmarket.settings.delay.enable()                                         # Enable delay (btw delay is enabled by default)\n\nresponse = market.profile.get()                                        # Sync request\njob = market.profile.get.job()                                         # Job creation (Always SYNC)\nresponse = market.request(\"GET\", \"/me\")                                # Custom request\njob = market.request.job(\"GET\", \"/me\")                                 # Job creation for custom request\n\nasync def async_example():\n    response = await market.profile.get()                              # Async request\n    job = market.profile.get.job()                                     # Job creation (Always SYNC)\n    response = await market.request(\"GET\", \"/me\")                      # Custom async request\n    job = market.request.job(\"GET\", \"/me\")                             # Job creation for custom request\n\nasyncio.run(async_example())\n\n# You should just add \".job\" between function name and parentheses to create a job.\n# P.s Your IDE probably may not show that \".job\" function exists but it does.\n\nmarket.settings.token = \"token\"                                        # Change token\nmarket.settings.language = \"en\"                                        # Change language\nmarket.settings.proxy = \"http://login:password@192.168.1.1:8080\"       # Change proxy\nmarket.settings.delay.min = 1                                          # Change minimal delay\nmarket.settings.delay.disable()                                        # Disable delay\nmarket.settings.logger.disable()                                       # <- Stop logging\n```\n\n----------------------------------------\n\nTITLE: Listing Chat Messages with Python\nDESCRIPTION: Retrieves messages from a specific chat room. Requires the room_id parameter to identify which chat room to fetch messages from.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.messages.list(room_id=1)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Transfer on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to cancel a transfer on LolzTeam market. Note that this only works for payments sent to you with a hold period.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.cancel(payment_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Confirming Item Purchase in Python\nDESCRIPTION: Completes the purchase of an item on the LolzTeam Market without validity checking. Requires the item_id and price parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.purchasing.buy(item_id=1234567890, price=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Recent Threads in Python\nDESCRIPTION: This code demonstrates how to fetch recent threads from the Zelenka.guru forum. It includes parameters for specifying the time range, forum ID, and limits.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.list_recent(days=1, forum_id=876, limit=10, data_limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Notifications with Python\nDESCRIPTION: Retrieves a list of notifications for the authenticated user. No parameters are required for this endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.notifications.list()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Transferring Item Ownership in Python\nDESCRIPTION: Transfers an item to another user on the LolzTeam Market. Requires the item_id, username of the recipient, and the secret answer for verification.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.transfer(item_id=1234567890, username=\"AS7RID\", secret_answer=\"secret_answer\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting accounts from a specific category in Python\nDESCRIPTION: Makes a GET request to fetch accounts from a specific category, in this case 'telegram'. This allows for directly accessing account listings in any category by name.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.category.get(category_name=\"telegram\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Updating Item Note in Python\nDESCRIPTION: Edits the note associated with an item on the LolzTeam Market. Requires the item_id parameter and the new text content.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.note(item_id=1234567890, text=\"New Note\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Currency Information from LolzTeam Market in Python\nDESCRIPTION: This code retrieves currency information from the LolzTeam market API. It does not require any parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.currency()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Unpublished Item Information in Python\nDESCRIPTION: This code retrieves information about an unpublished item on LolzTeam market, including temporary email for categories that require it. It only requires the item ID as a parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.publishing.mail(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve a paginated list of users on the forum. The example demonstrates making a GET request with pagination parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.list(page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Comments for a Post in Python\nDESCRIPTION: This snippet demonstrates how to retrieve comments for a specific post on the Zelenka.guru forum. It includes options to filter comments based on timestamp or comment ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.comments.list(post_id=5523020, before_comment=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Access to AntiPublic Services\nDESCRIPTION: Shows how to verify access to the AntiPublic service using the account.access() method which calls the /checkAccess endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.account.access()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Steam item inventory value in Python\nDESCRIPTION: Makes a GET request to retrieve the inventory value of a specific Steam account. This example checks the value of the CS:GO (app_id 730) inventory for the account with the given item_id.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.item_value(item_id=\"1234567890\", app_id=730)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Form-based Threads via LOLZTEAM API (Python)\nDESCRIPTION: Creates a new thread using a specified form template through the Zelenka.guru API. Requires form_id and fields parameters, where fields is a dictionary of form field IDs mapped to their values.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forms.create(form_id=1, fields={\n    \"7\": \"sell\",\n    \"8\": 100,\n    \"11\": 99,\n    \"15\": \"market\",\n    \"16\": \"rub\",\n    \"17\": \"SBP\",\n    \"18\": \"rub\",\n    \"14\": \"Note to the exchange\"\n})\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Adding Proxies to LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to add one or multiple proxies to your LolzTeam market account using the proxies.add endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.proxies.add(proxy=[\"login:password@192.168.1.0:8080\", \"login:password@192.168.1.1:8080\"])\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing User Profile with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to update the current user's profile information, including title, display group, date of birth, and custom fields. The example shows making a PUT request to the /users/me endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.edit(title=\"Test title\", display_group_id=1, dob=(1, 1, 2000), fields={\"_4\": \"My new interests\", \"occupation\": \"My new occupation\"})\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Bumping a Thread in Python\nDESCRIPTION: This snippet shows how to bump a thread on the Zelenka.guru forum, which brings it to the top of the list. It only requires the thread ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.bump(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available AntiPublic Queries\nDESCRIPTION: Shows how to get information about available queries for the current account using the account.queries() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.account.queries()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Conversations with Python\nDESCRIPTION: Retrieves a paginated list of the authenticated user's conversations. Parameters include page number and limit to control results per page.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.list(page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching All Content with Python\nDESCRIPTION: Searches across all content types with flexible filtering options. Parameters include user_id and forum_id for filtering, along with page and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.search.all(user_id=2410024, forum_id=876, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Profile Information from LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to retrieve information about your LolzTeam market profile using the profile.get endpoint. It does not require any parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.profile.get()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Steam Guard code in Python\nDESCRIPTION: Makes a GET request to retrieve the current Steam Guard authentication code from a MaFile for a specific Steam account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.guard(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Posts with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve posts from a specific thread with pagination support. The example demonstrates making a GET request with parameters for thread_id, page number, limit, and sorting order.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.list(thread_id=5523020, page=1, limit=10, order=\"natural\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Arbitrage for an Item in Python\nDESCRIPTION: Initiates an arbitrage process for an item on the LolzTeam Market. Requires the item_id parameter and the post body content describing the issue.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.arbitrage(item_id=1234567890, post_body=\"New Post Body\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Steam account HTML preview in Python\nDESCRIPTION: Makes a GET request to retrieve an HTML preview of a specific Steam account. This example gets the 'profiles' type preview for the account with the given item_id.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.html_preview(item_id=1234567890, type=\"profiles\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Confirming Steam account with SDA in Python\nDESCRIPTION: Makes a POST request to confirm a Steam account using Steam Desktop Authenticator. This request will cancel any active account guarantee.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.sda(item_id=1234567890, id=1234567890, nonce=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing a Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to edit an existing post by providing the post ID and new body text. The example shows making a PUT request to the /posts/{post_id} endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.edit(post_id=5523020, post_body=\"Test post\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Items in Bulk in Python\nDESCRIPTION: Fetches information for multiple items simultaneously from the LolzTeam Market. Limited to a maximum of 250 items and only returns accounts you own or have purchased.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.bulk(item_ids=[12345678900, 12345678901])\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting Proxies from LolzTeam Market in Python\nDESCRIPTION: This code shows how to delete proxies from your LolzTeam market account, either by specific ID or all at once using the 'all' parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.proxies.delete(all=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting a Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to delete a post from the forum with an optional reason. The example demonstrates making a DELETE request to the /posts/{post_id} endpoint with the post ID and reason parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.delete(post_id=5523020, reason=\"Test reason\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving AntiPublic Database Lines Count\nDESCRIPTION: Shows how to get the count of rows in the AntiPublic database. Uses the info.lines() method which calls the /countLines endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.info.lines()\nprint(response.text)\n```\n\n----------------------------------------\n\nTITLE: Getting Telegram Login Code in Python\nDESCRIPTION: Retrieves a telegram confirmation code for a specific item using the LolzTeam Market API. It requires an item_id parameter to identify the account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.telegram.code(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to edit an existing profile post by providing the post ID and new body text. The example shows making a PUT request to the /profile-posts/{post_id} endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.edit(post_id=5523020, post_body=\"Test post\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing an Existing Thread in Python\nDESCRIPTION: This snippet shows how to edit an existing thread on the Zelenka.guru forum. It allows modifying various thread properties including title, content, and settings.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.edit(\n    thread_id=5523020,\n    title=\"Test thread\",\n    title_en=\"Test thread\",\n    post_body=\"Test thread\",\n    prefix_ids=[1, 2, 3],\n    tags=[\"tag1\", \"tag2\", \"tag3\"],\n    discussion_state=True,\n    hide_contacts=False,\n    allow_ask_hidden_content=False,\n    reply_group=2,\n    comment_ignore_group=False\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting a Chat Message with Python\nDESCRIPTION: Removes a message from a chat room. Only requires the message_id parameter to identify which message to delete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.messages.delete(message_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Sticking an Item to Top of Search Results in Python\nDESCRIPTION: Pins an item to the top of search results on the LolzTeam Market for improved visibility. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.sticky(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unignoring Users in Chat via LOLZTEAM API (Python)\nDESCRIPTION: Shows how to unignore a previously ignored user in the chatbox using a DELETE request to the Zelenka.guru API. Requires the user_id parameter to identify the user to unignore.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.unignore(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing User Profile Posts with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve profile posts for a specific user with pagination support. The example demonstrates making a GET request with parameters for user ID, page number, and limit.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.list(user_id=2410024, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing Item Details in Python\nDESCRIPTION: Updates various properties of an item on the LolzTeam Market including title, price, description, and more. Requires the item_id parameter and any fields that need updating.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.edit(\n    item_id=1234567890,\n    title=\"New Title\",\n    price=100.0,\n    currency=\"rub\",\n    origin=\"steam\",\n    description=\"New Description\",\n    information=\"New Information\",\n    email=\"email@example.com:email_password\",\n    email_type=\"native\",\n    allow_ask_discount=True,\n    proxy_id=1234567890\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Tags with Python\nDESCRIPTION: Retrieves a paginated list of tags from the forum. Parameters include page number and limit to control results per page.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.tags.list(page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Closing an Item in Python\nDESCRIPTION: Closes an item on the LolzTeam Market, making it unavailable for purchase. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.close(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Reporting a Chat Message with Python\nDESCRIPTION: Reports a problematic chat message to moderators. Requires the message_id parameter to identify which message to report and the reason parameter explaining the report.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.messages.report(message_id=1234567890, reason=\"Report reason.\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spotify accounts with price filtering in Python\nDESCRIPTION: Makes a GET request to fetch Spotify accounts with prices between 100 and 500 units. The response contains a list of accounts that match the specified price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.spotify.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Transferring Money to Another User on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to transfer money to another user on LolzTeam market with parameters for amount, currency, user ID, and optional hold settings.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.transfer(\n    amount=100,\n    currency=\"rub\",\n    secret_answer=\"secret_answer\",\n    user_id=2410024,\n    comment=\"Payment comment\",\n    hold=10,\n    hold_option=\"day\"\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Updating Steam account inventory in Python\nDESCRIPTION: Makes a POST request to update the inventory information for a specific Steam account. This example updates the entire inventory for the account with the given item_id.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.inventory_update(item_id=1234567890, all=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Money Contest by Count in Python\nDESCRIPTION: Creates a member count-based money contest thread with configurable prize amount, winners count, member limit, and participation requirements. This example shows how to use the forum.threads.contests.money.create_by_count method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.contests.money.create_by_count(post_body=\"Contest\", prize_amount=500, winners_count=1,\n                                                       needed_members=300, require_week_sympathy=1, require_total_sympathy=50,\n                                                       secret_answer=\"My secret answer\", title=\"Contest\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching Tagged Content with Python\nDESCRIPTION: Searches for content with specific tags. Supports both single tag and multiple tags parameters, along with page and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.search.tagged(tag=\"example\", tags=[\"example\", \"example2\"], page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to delete a profile post with an optional reason. The example demonstrates making a DELETE request to the /profile-posts/{post_id} endpoint with post ID and reason parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.delete(post_id=5523020, reason=\"Test reason\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Resetting Telegram Authorizations in Python\nDESCRIPTION: Resets all active telegram authorizations for a specific account on LolzTeam Market. Requires the item_id parameter to identify the target account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.telegram.reset_auth(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Money Contest by Time in Python\nDESCRIPTION: Creates a time-based money contest thread with configurable prize amount, winners count, duration, and participation requirements. The code demonstrates how to use the forum.threads.contests.money.create_by_time method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.contests.money.create_by_time(\n    post_body=\"Contest\",\n    prize_amount=500,\n    winners_count=1,\n    length=3,\n    length_option=\"days\",\n    require_week_sympathy=1,\n    require_total_sympathy=50,\n    secret_answer=\"My secret answer\",\n    title=\"Contest\"\n)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching Posts with Python\nDESCRIPTION: Searches specifically for posts with filtering options. Parameters include user_id for filtering by author, along with page and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.search.posts(user_id=2410024, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve a specific profile post by its ID. The example shows making a GET request to the /profile-posts/{post_id} endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.get(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment on a Post in Python\nDESCRIPTION: This example shows how to create a new comment on a specific post on the Zelenka.guru forum. It requires the post ID and the comment content.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.comments.create(post_id=5523020, post_body=\"Test comment\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Uploading a User Background with Zelenka.guru API in Python\nDESCRIPTION: Shows how to upload and crop a new profile background image. The example demonstrates reading a file and making a POST request with the image data and cropping parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"background.png\", \"rb\") as file:\n    response = forum.users.background.upload(file=file.read(), x=100, y=100, size=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Market Arbitrage Thread in Python\nDESCRIPTION: Creates an arbitrage thread to handle disputes between users in marketplace transactions. This example shows how to specify the respondent, disputed item, amount, and other required details for filing a complaint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.arbitrage.market(responder=\"AS7RID\", item_id=1000000, amount=1000,\n                                          post_body=\"Arbitrage test\", currency=\"rub\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching Threads with Python\nDESCRIPTION: Searches specifically for threads with filtering options. Parameters include user_id for filtering by author, along with page and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.search.threads(user_id=2410024, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unsticking an Item from Top of Search Results in Python\nDESCRIPTION: Removes the pin status of an item on the LolzTeam Market, no longer showing it at the top of search results. Requires the item_id parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.unstick(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Unread Threads in Python\nDESCRIPTION: This snippet shows how to retrieve a list of unread threads from the Zelenka.guru forum. It allows specifying the forum ID, limit of threads, and data limit.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.list_unread(forum_id=876, limit=10, data_limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Cropping a User Background with Zelenka.guru API in Python\nDESCRIPTION: Shows how to crop an existing profile background image without uploading a new one. The example demonstrates making a POST request with cropping coordinates and size parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.background.crop(x=100, y=100, size=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Tagging an Item in Python\nDESCRIPTION: Applies a tag to an item on the LolzTeam Market for organization purposes. Requires both item_id and tag_id parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.tag(item_id=1234567890, tag_id=12345)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching for Tags with Python\nDESCRIPTION: Searches for tags matching a given query. Requires the tag parameter containing the search term to find matching tags.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.tags.search(tag=\"example\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Conversation with Python\nDESCRIPTION: Fetches details of a specific conversation. Only requires the conversation_id parameter to identify which conversation to retrieve.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.get(conversation_id=123456)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unliking a Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to remove a like from a post that the user previously liked. The example shows making a DELETE request to the /posts/{post_id}/likes endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.unlike(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Uploading a User Avatar with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to upload and crop a new avatar image for the current user. The example shows reading a file and making a POST request with the image data and cropping parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"avatar.png\", \"rb\") as file:\n    response = forum.users.avatar.upload(file=file.read(), x=100, y=100, size=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching Profile Posts with Python\nDESCRIPTION: Searches specifically for profile posts with filtering options. Parameters include user_id for filtering by author, along with page and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.search.profile_posts(user_id=2410024, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Calculating Transfer Fee on LolzTeam Market in Python\nDESCRIPTION: This code shows how to calculate the transfer fee for a specified amount on LolzTeam market using the payments.fee endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.fee(amount=5000)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing a Comment with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to edit an existing comment on the forum by providing the comment ID and new body text. The example shows making a PUT request to the /posts/comments endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.comments.edit(comment_id=5523020, comment_body=\"Test comment\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Post Comment with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to add a comment to a profile post. The example shows making a POST request with the profile post ID and comment body parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.comments.create(post_id=5523020, post_body=\"Test comment\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying ChatGPT Accounts - Python API\nDESCRIPTION: Retrieves ChatGPT accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.chatgpt.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Liking a Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to like a specific post on the forum. The example demonstrates making a POST request to the /posts/{post_id}/likes endpoint with the post ID parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.like(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Liking a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to like a specific profile post. The example demonstrates making a POST request to the /profile-posts/{post_id}/likes endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.likes.like(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from Favorites in Python\nDESCRIPTION: Removes an item from the user's favorites list on the LolzTeam Market. Requires the item_id parameter to identify the target item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.unfavorite(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Image in Python\nDESCRIPTION: Gets the image associated with an item on the LolzTeam Market. Returns binary data that can be saved as a file. Requires item_id and image_type parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.image(item_id=1234567890, image_type=\"skins\")\n# Response is a bytes\nwith open(\"image.png\", \"wb\") as f:\n    f.write(response.content)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Thread in Python\nDESCRIPTION: This code demonstrates how to delete a thread from the Zelenka.guru forum. It requires the thread ID and a reason for deletion.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.delete(thread_id=5523020, reason=\"Test reason\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Account Validity before Purchase in Python\nDESCRIPTION: Verifies if an account is valid before proceeding with the purchase on the LolzTeam Market. Requires the item_id parameter to identify the target account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.purchasing.check(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Removing a Tag from an Item in Python\nDESCRIPTION: Removes a specific tag from an item on the LolzTeam Market. Requires both item_id and tag_id parameters to identify the item and tag.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.untag(item_id=1234567890, tag_id=12345)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Moving a Thread in Python\nDESCRIPTION: This example demonstrates how to move a thread to a different forum on Zelenka.guru. It includes parameters for specifying the new forum, title, and other options.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.move(thread_id=5523020, forum_id=876, title=\"Test thread\", title_en=\"Test thread\", prefix_ids=[1, 2, 3], send_alert=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing viewed accounts with filtering in Python\nDESCRIPTION: Makes a GET request to retrieve accounts previously viewed by the current user with specific filters. This example shows viewed accounts in category 1 with minimum price of 250.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.list.viewed(category_id=1, pmin=250)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Following a User with Python\nDESCRIPTION: Follows a specified user on the forum. Only requires the user_id parameter to identify which user to follow.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.follow(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Instagram Accounts - Python API\nDESCRIPTION: Retrieves Instagram accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.instagram.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching parameters for Roblox accounts in Python\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Roblox category. This provides information about what filters and options can be used when searching for Roblox accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.roblox.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing favorite accounts with filtering in Python\nDESCRIPTION: Makes a GET request to retrieve accounts marked as favorite by the current user with specific filters. This example shows favorite accounts in category 1 with minimum price of 250.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.list.favorite(category_id=1, pmin=250)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Searching for Users with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to search for users by username and custom fields. The example shows making a GET request with username and custom field parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.search(username=\"test\", fields={\"field1\": \"value1\", \"field2\": \"value2\"})\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unfollowing a User with Python\nDESCRIPTION: Unfollows a specified user on the forum. Only requires the user_id parameter to identify which user to unfollow.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.unfollow(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Conversation with Python\nDESCRIPTION: Starts a new one-on-one conversation with another user. Requires the user_id parameter to identify the recipient and the message parameter containing the first message text.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.create(user_id=2410024, message=\"Hello, world!\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Discord Category Parameters - Python API\nDESCRIPTION: Retrieves available parameters for the Discord category using the params() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.discord.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Market Arbitrage Thread in Python\nDESCRIPTION: This snippet demonstrates how to create a non-market arbitrage thread using the Zelenka.guru API. It includes parameters for specifying the responder, amount, currency, and other details related to the arbitrage claim.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.arbitrage.non_market(responder=\"AS7RID\", amount=100, currency=\"rub\", receipt=\"no\",\n                                              post_body=\"Non market arbitrage\", pay_claim=\"now\", transfer_type=\"notsafe\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games for Minecraft accounts in Python\nDESCRIPTION: Makes a GET request to fetch the list of games associated with the Minecraft category. This provides information about games that might be included with Minecraft accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.minecraft.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Discord Accounts - Python API\nDESCRIPTION: Retrieves Discord accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.discord.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting User Custom Fields with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve the custom fields available for the current user's profile. The example demonstrates making a GET request to the /users/fields endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.fields()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Reporting a Post with Zelenka.guru API in Python\nDESCRIPTION: Shows how to report a post for moderation with a specific reason. The example demonstrates making a POST request to the /posts/{post_id}/report endpoint with post ID and reason parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.report(post_id=5523020, reason=\"Test reason\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Minecraft accounts with price filtering in Python\nDESCRIPTION: Makes a GET request to fetch Minecraft accounts with prices between 100 and 500 units. The response contains a list of accounts that match the specified price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.minecraft.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying TikTok Accounts - Python API\nDESCRIPTION: Retrieves TikTok accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.tiktok.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Fortnite Accounts\nDESCRIPTION: Example of retrieving Fortnite accounts within a specific price range using the LZT Market API.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.fortnite.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting a Profile Post Comment with Zelenka.guru API in Python\nDESCRIPTION: Shows how to retrieve a specific comment on a profile post. The example demonstrates making a GET request with the profile post ID and comment ID parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.comments.get(post_id=5523020, comment_id=1)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Removing Steam account mafile in Python\nDESCRIPTION: Makes a DELETE request to remove the mafile from a specific Steam account. This will unlink the authenticator from the account and remove the mafile from the item.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.mafile_remove(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Roblox accounts with price filtering in Python\nDESCRIPTION: Makes a GET request to fetch Roblox accounts with prices between 100 and 500 units. The response contains a list of accounts that match the specified price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.roblox.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Notification with Python\nDESCRIPTION: Fetches details of a specific notification. Only requires the notification_id parameter to identify which notification to retrieve.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.notifications.get(notification_id=123456)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Chat Message with Python\nDESCRIPTION: Sends a new message to a chat room. Requires the room_id parameter to identify the target room and the message parameter containing the message text.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.messages.create(room_id=1, message=\"Hello, world!\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting User Trophies with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve the trophies earned by a specific user. The example shows making a GET request to the /users/{user_id}/trophies endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.trophies(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Cropping a User Avatar with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to crop an existing avatar image without uploading a new one. The example shows making a POST request with cropping coordinates and size parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.avatar.crop(x=100, y=100, size=100)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying VPN Accounts - Python API\nDESCRIPTION: Retrieves VPN accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.vpn.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Ignoring Users in Chat via LOLZTEAM API (Python)\nDESCRIPTION: Demonstrates how to ignore a user in the chatbox using a POST request to the Zelenka.guru API. The function requires a user_id parameter to specify which user to ignore.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.ignore(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Invoices on LolzTeam Market in Python\nDESCRIPTION: This code demonstrates how to retrieve a list of your invoices from LolzTeam market. It allows filtering by status and other optional parameters.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.invoice.list(status=\"paid\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Uplay category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Uplay category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.uplay.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Steam Category Parameters in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the 'steam' category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.steam.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in Social Club category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the Social Club category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.socialclub.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Ignoring a User with Python\nDESCRIPTION: Adds a user to the authenticated user's ignore list. Only requires the user_id parameter to identify which user to ignore.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.ignore(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve details for a specific post by its ID. The example shows making a GET request to the /posts/{post_id} endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.get(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Escape from Tarkov category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Escape from Tarkov category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.eft.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting AntiPublic Version Information\nDESCRIPTION: Demonstrates how to retrieve the current version of AntiPublic using the info.version() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.info.version()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Escape from Tarkov accounts with price range\nDESCRIPTION: Makes a GET request to retrieve Escape from Tarkov accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.eft.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uplay accounts with price range\nDESCRIPTION: Makes a GET request to retrieve Uplay accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.uplay.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving WoT Blitz accounts with price range\nDESCRIPTION: Makes a GET request to retrieve WoT Blitz accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.wot_blitz.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in Gifts category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the Gifts category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.gifts.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Profile Post Comments with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve comments on a profile post with pagination support. The example shows making a GET request with parameters for post ID, timestamp, and limit.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.comments.list(post_id=5523020, before=100, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epic Games accounts with price range\nDESCRIPTION: Makes a GET request to retrieve Epic Games accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.epicgames.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unliking a Profile Post with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to remove a like from a profile post that the user previously liked. The example shows making a DELETE request to the /profile-posts/{post_id}/likes endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.likes.unlike(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Changing Item Password in Python\nDESCRIPTION: Changes the password of an item on the LolzTeam Market or retrieves login data without changing the password if cancel is set to true. Requires the item_id parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.change_password(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gifts within price range\nDESCRIPTION: Makes a GET request to retrieve gift accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.gifts.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Post Likes with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve the list of users who liked a specific post, with pagination support. The example shows making a GET request to the /posts/{post_id}/likes endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.posts.likes(post_id=5523020, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Gifts category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Gifts category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.gifts.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Steam Category Games in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve the list of games available in the 'steam' category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.steam.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Invoice Information from LolzTeam Market in Python\nDESCRIPTION: This code shows how to retrieve information about a specific invoice by its ID from the LolzTeam market using the invoice.get endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.payments.invoice.get(invoice_id=1)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Avatar with Zelenka.guru API in Python\nDESCRIPTION: Shows how to remove the current user's avatar. The example demonstrates making a DELETE request to the /users/me/avatar endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.avatar.delete()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Riot Accounts\nDESCRIPTION: Example of retrieving Riot accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.riot.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Mihoyo Accounts\nDESCRIPTION: Example of retrieving Mihoyo accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.mihoyo.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Followers in Python\nDESCRIPTION: This snippet shows how to get a list of followers for a specific thread on the Zelenka.guru forum using its thread ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.followers(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Voting in a Poll using Python\nDESCRIPTION: This example demonstrates how to vote in a poll on the Zelenka.guru forum. It requires the thread ID and a list of option IDs to vote for.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.poll.vote(thread_id=5523020, option_ids=[1, 2, 3])\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Upgrade Contest by Count in Python\nDESCRIPTION: Creates a member count-based upgrade contest thread where winners receive account upgrades. Shows how to specify prize group, winners count, member limit, and other thread settings.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.contests.upgrade.create_by_count(post_body=\"Contest\", prize_group=1, winners_count=1,\n                                                       needed_members=300, require_week_sympathy=1,\n                                                       require_total_sympathy=50, secret_answer=\"My secret answer\", title=\"Contest\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Battlenet Accounts - Python API\nDESCRIPTION: Retrieves Battlenet accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.battlenet.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in Epic Games category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the Epic Games category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.epicgames.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing purchased accounts with filtering in Python\nDESCRIPTION: Makes a GET request to retrieve accounts purchased by the current user with specific filters. This example shows purchased accounts in category 1 with minimum price of 250.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.list.purchased(category_id=1, pmin=250)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating Upgrade Contest by Time in Python\nDESCRIPTION: Creates a time-based upgrade contest thread where winners receive account upgrades instead of money. The example demonstrates setting prize group type, duration, and participation requirements.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.contests.upgrade.create_by_time(post_body=\"Contest\", prize_group=1, winners_count=1,\n                                                       length=3, length_option=\"days\", require_week_sympathy=1,\n                                                       require_total_sympathy=50, secret_answer=\"My secret answer\", title=\"Contest\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Origin Accounts\nDESCRIPTION: Example of retrieving Origin accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.origin.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag Content with Python\nDESCRIPTION: Fetches content associated with a specific tag. Parameters include tag_id to identify the tag, along with page number and limit for pagination.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.tags.get(tag_id=123456, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Following a Thread in Python\nDESCRIPTION: This snippet shows how to follow a thread on the Zelenka.guru forum. It includes an option to receive email notifications.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.follow(thread_id=5523020, email=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Cinema Accounts - Python API\nDESCRIPTION: Retrieves Cinema accounts from the marketplace within specified price range using the get() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.cinema.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying World of Tanks Accounts\nDESCRIPTION: Example of retrieving World of Tanks accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.wot.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Popular Tags with Python\nDESCRIPTION: Fetches a list of the most popular tags on the forum. No parameters are required for this endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.tags.popular()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Temporary Email Password in Python\nDESCRIPTION: Retrieves a temporary email password for an item on the LolzTeam Market. Requires the item_id parameter to identify the specific account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.email_password(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Supercell Accounts\nDESCRIPTION: Example of retrieving Supercell accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.supercell.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ignored Chat Users with Python\nDESCRIPTION: Fetches a list of users that the authenticated user has ignored in chat. No parameters are required for this endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.ignored()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games for Spotify accounts in Python\nDESCRIPTION: Makes a GET request to fetch the list of games associated with the Spotify category. This provides information about games that might be included with Spotify accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.spotify.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Timeline Content with Python\nDESCRIPTION: Fetches a paginated timeline of a user's activity. Parameters include user_id for the target user, page number, and limit to control results per page.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.content(user_id=2410024, page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Querying Telegram Accounts\nDESCRIPTION: Example of retrieving Telegram accounts within a specific price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.telegram.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching parameters for Minecraft accounts in Python\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Minecraft category. This provides information about what filters and options can be used when searching for Minecraft accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.minecraft.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching parameters for Warface accounts in Python\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Warface category. This provides information about what filters and options can be used when searching for Warface accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.warface.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Canceling Account Guarantee in Python\nDESCRIPTION: Cancels the guarantee for an item on the LolzTeam Market. This requires the item_id parameter to identify the specific account.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.guarantee.cancel(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Fortnite Games List\nDESCRIPTION: Example of retrieving available games in the Fortnite category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.fortnite.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching War Thunder category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the War Thunder category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.war_thunder.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fortnite Category Parameters\nDESCRIPTION: Example of getting available parameters for the Fortnite category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.fortnite.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Steam account mafile in Python\nDESCRIPTION: Makes a GET request to retrieve the mafile (mobile authenticator file) for a specific Steam account. This will cancel any active account guarantee.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.managing.steam.mafile(item_id=1234567890)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Checking Credentials Against AntiPublic Database\nDESCRIPTION: Demonstrates how to check if provided credentials (email:password or login:password) exist in the AntiPublic database. Supports optional insertion of private rows into the database.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.check(lines=[\"email:password\", \"login:password\"], insert=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Epic Games category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Epic Games category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.epicgames.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching Social Club category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Social Club category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.socialclub.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing a Chat Message with Python\nDESCRIPTION: Modifies an existing chat message. Requires the message_id parameter to identify which message to edit and the message parameter containing the new text.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.messages.edit(message_id=1234567890, message=\"Hello, world!\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Followed Users of a Thread in Python\nDESCRIPTION: This code demonstrates how to get a list of users who are following a specific thread on Zelenka.guru. It includes an option to retrieve the total count.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.followed(thread_id=5523020, total=True)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching WoT Blitz category parameters\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the WoT Blitz category. The response is printed as JSON after the API call.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.wot_blitz.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Editing a Conversation Message with Python\nDESCRIPTION: Modifies an existing message in a conversation. Requires the message_id parameter to identify which message to edit and the message parameter containing the new text.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.messages.edit(message_id=123456, message=\"Hello, world!\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Discord Games List - Python API\nDESCRIPTION: Retrieves list of games available in the Discord category using the games() method.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.discord.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Background with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to remove the current user's profile background. The example shows making a DELETE request to the /users/me/background endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.background.delete()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unfollowing a Thread in Python\nDESCRIPTION: This example demonstrates how to unfollow a thread on the Zelenka.guru forum using its thread ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.unfollow(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thread Navigation in Python\nDESCRIPTION: This code shows how to get navigation information for a specific thread on the Zelenka.guru forum using its thread ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.navigation(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Category Parameters in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the 'latest' category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.latest.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Working with Pages in Python\nDESCRIPTION: Examples of listing all available pages and retrieving specific page details using the pages API endpoints.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.pages.list()\nprint(response.json())\n```\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.pages.get(page_id=1)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Followers with Python\nDESCRIPTION: Fetches a paginated list of followers for a specified user. Parameters include user_id for the target user, order for sorting, page number, and limit to control results per page.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.followers(user_id=2410024, order=\"follow_date\", page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Social Club accounts with price range\nDESCRIPTION: Makes a GET request to retrieve Social Club accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.socialclub.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Conversation Message with Python\nDESCRIPTION: Fetches a specific message from a conversation. Only requires the message_id parameter to identify which message to retrieve.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.messages.get(message_id=123456)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving War Thunder accounts with price range\nDESCRIPTION: Makes a GET request to retrieve War Thunder accounts with prices between 100 and 500. The response is printed as JSON after the API call is complete.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.war_thunder.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Category Games in LOLZTEAM Market API\nDESCRIPTION: Makes a GET request to retrieve the list of games available in the 'latest' category.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.latest.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in War Thunder category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the War Thunder category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.war_thunder.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Followings with Python\nDESCRIPTION: Fetches a paginated list of users that the specified user is following. Takes user_id as the target user, order for sorting, page number, and limit to control results per page.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.followed(user_id=2410024, order=\"follow_date\", page=1, limit=10)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games for Roblox accounts in Python\nDESCRIPTION: Makes a GET request to fetch the list of games associated with the Roblox category. This provides information about games that might be included with Roblox accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.roblox.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Proxy Information from LolzTeam Market in Python\nDESCRIPTION: This code retrieves information about your proxies registered on LolzTeam market using the proxies.get endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.proxies.get()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games for Warface accounts in Python\nDESCRIPTION: Makes a GET request to fetch the list of games associated with the Warface category. This provides information about games that might be included with Warface accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.warface.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Getting Profile Post Likes with Zelenka.guru API in Python\nDESCRIPTION: Demonstrates how to retrieve the list of users who liked a specific profile post. The example shows making a GET request to the /profile-posts/{post_id}/likes endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.profile_posts.likes.list(post_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Warface accounts with price filtering in Python\nDESCRIPTION: Makes a GET request to fetch Warface accounts with prices between 100 and 500 units. The response contains a list of accounts that match the specified price range.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.warface.get(pmin=100, pmax=500)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Leaving a Conversation with Python\nDESCRIPTION: Removes the authenticated user from a conversation. Requires the conversation_id parameter to identify which conversation to leave and the leave_type parameter to specify how to leave.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.conversations.leave(conversation_id=123456, leave_type=\"delete\")\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Poll Information in Python\nDESCRIPTION: This code snippet shows how to retrieve poll information for a specific thread using the Zelenka.guru API. It requires the thread ID as a parameter.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.threads.poll.get(thread_id=5523020)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chat Rooms with Python\nDESCRIPTION: Fetches available chat rooms. Optionally accepts a parent parameter to filter by parent ID.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.chat.get()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Fetching parameters for Spotify accounts in Python\nDESCRIPTION: Makes a GET request to retrieve the available parameters for the Spotify category. This provides information about what filters and options can be used when searching for Spotify accounts.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.spotify.params()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Marking Notifications as Read with Python\nDESCRIPTION: Marks notifications as read for the authenticated user. No specific notification_id is provided in the example, suggesting it might mark all as read.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.notifications.read()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Navigation Data from LOLZTEAM API (Python)\nDESCRIPTION: Gets navigation structure from the Zelenka.guru API. Accepts an optional parent parameter to retrieve specific sections of the navigation hierarchy.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.navigation()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Unignoring a User with Python\nDESCRIPTION: Removes a user from the authenticated user's ignore list. Only requires the user_id parameter to identify which user to unignore.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.unignore(user_id=2410024)\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in Uplay category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the Uplay category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.uplay.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in Escape from Tarkov category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the Escape from Tarkov category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.eft.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Listing Forms from LOLZTEAM API (Python)\nDESCRIPTION: Retrieves a list of available forms from the Zelenka.guru API. The function accepts an optional page parameter for pagination of results.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.forms.list()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ignored Users with Python\nDESCRIPTION: Fetches a list of users that the authenticated user has ignored. No parameters are required for this endpoint.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Forum.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nresponse = forum.users.ignored()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving games in WoT Blitz category\nDESCRIPTION: Makes a GET request to fetch the list of games available in the WoT Blitz category. The response is printed as JSON.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Market.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresponse = market.categories.wot_blitz.games()\nprint(response.json())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Passwords for Specific Logins/Emails\nDESCRIPTION: Demonstrates how to retrieve passwords associated with specific email addresses or logins. Supports limiting the number of results per email and returning only passwords without associated emails.\nSOURCE: https://github.com/as7ridenied/lolzteam/blob/main/Documentation/Antipublic.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = antipublic.passwords(emails=[\"test@mail.ru\", \"test2@mail.ru\"], limit=1)\nprint(response.json())\n```"
  }
]