[
  {
    "owner": "descope",
    "repo": "descope-kotlin",
    "content": "TITLE: Initializing Descope SDK in Android Application\nDESCRIPTION: Shows how to initialize the Descope SDK in an Android application's onCreate method, including optional configuration settings for custom base URL and logging.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.descope.Descope\n\n// Application on create\noverride fun onCreate() {\n    Descope.setup(this, projectId = \"<Your-Project-Id>\")\n\n    // Optionally, you can configure your SDK to your needs\n    Descope.setup(this, projectId = \"<Your-Project-Id>\") {\n        // set a custom base URL (needs to be set up in the Descope console)\n        baseUrl = \"https://my.app.com\"\n        // enable the logger\n        if (BuildConfig.DEBUG) {\n            logger = DescopeLogger()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Descope Authentication Flow in Kotlin\nDESCRIPTION: Implementation of a Descope authentication flow with a DescopeFlowView. Demonstrates setting up event listeners for flow completion, handling authentication success, errors, and navigation events.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\ndescopeFlowView.listener = object : DescopeFlowView.Listener {\n    override fun onReady() {\n        // present the flow view via animation, or however you see fit\n    }\n\n    override fun onSuccess(response: AuthenticationResponse) {\n        // optionally hide the flow UI\n\n        // manage the incoming session\n        Descope.sessionManager.manageSession(DescopeSession(response))\n\n        // launch the \"logged in\" UI of your app\n    }\n\n    override fun onError(exception: DescopeException) {\n        // handle any errors here\n    }\n\n    override fun onNavigation(uri: Uri): DescopeFlowView.NavigationStrategy {\n        // manage navigation event by deciding whether to open the URI\n        // in a custom tab (default behavior), inline, or do nothing.\n    }\n}\n\nval descopeFlow = DescopeFlow(\"<URL_FOR_FLOW_IN_SETUP_#1>\")\n// set the OAuth provider ID that is configured to \"sign in with Google\"\ndescopeFlow.oauthNativeProvider = OAuthProvider.Google\n// set the oauth redirect URI to use your app's deep link \ndescopeFlow.oauthRedirect = \"<URL_FOR_APP_LINK_IN_SETUP_#2>\"\n// customize the flow presentation further\ndescopeFlow.presentation = flowPresentation\n// run the flow\ndescopeFlowView.run(descopeFlow)\n```\n\n----------------------------------------\n\nTITLE: Adding Descope SDK Dependency in Gradle\nDESCRIPTION: Instructions for adding the Descope SDK to an Android project using Gradle dependencies.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'com.descope:descope-kotlin:0.14.1'\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing User Session on App Launch\nDESCRIPTION: Code snippet that checks if there's a valid user session from a previous app launch to determine which UI to display.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n// check if we have a valid session from a previous launch and that it hasn't expired yet\nval session = Descope.sessionManager.session\nif (session != null && !session.refreshToken.isExpired) {\n    // Show main UI\n} else {\n    // Show login UI\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Authenticated Session\nDESCRIPTION: Demonstrates how to create a Descope session after successful verification and manage it with the session manager.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval authResponse = try {\n    Descope.otp.verify(DeliverMethod.Email, \"andy@example.com\", \"123456\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\nval session = DescopeSession(authResponse)\nDescope.sessionManager.manageSession(session)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Network Requests with Session Token\nDESCRIPTION: Shows how to authenticate outgoing API requests to a backend server using the active Descope session.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val connection = url.openConnection() as HttpsURLConnection\n    connection.setAuthorization(Descope.sessionManager)\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Sign Up in Kotlin using Descope SDK\nDESCRIPTION: Creates a new user account with password authentication. The function requires a login ID (email), password, and optional user details such as name. The password must meet the security requirements configured in the Descope console.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.password.signUp(\n        \"andy@example.com\",\n        \"securePassword123!\",\n        SignUpDetails(\n            name = \"Andy Rhoads\"\n        )\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Sign In in Kotlin using Descope SDK\nDESCRIPTION: Authenticates an existing user using their login ID (email) and password. Returns an authentication response containing session tokens upon successful authentication.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.password.signIn(\n        \"andy@example.com\",\n        \"securePassword123!\"\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication with Descope in Kotlin\nDESCRIPTION: Code for implementing OAuth authentication, demonstrating how to initiate OAuth flow with a provider like GitHub and handle the redirect with code exchange for a session.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\n// Choose an oauth provider out of the supported providers\n// If configured globally, the redirect URL is optional. If provided however, it will be used\n// instead of any global configuration.\n// Redirect the user to the returned URL to start the OAuth redirect chain\ntry {\n    val authURL = Descope.oauth.signUpOrIn(OAuthProvider.Github, redirectUrl = \"exampleauthschema://my-app.com/handle-oauth\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Catch the redirect using a dedicated deep link Activity\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    val incomingUri: Uri = intent?.data ?: return\n    val code = incomingUri.getQueryParameter(\"code\")\n\n    // could be any scope that makes sense in your application\n    GlobalScope.launch {\n        try {\n            // Exchange code for session\n            val authResponse = Descope.oauth.exchange(code)\n            val session = DescopeSession(authResponse)\n            Descope.sessionManager.manageSession(session)\n        } catch (e: DescopeException) {\n            // Handle errors here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SSO/SAML Authentication with Descope in Kotlin\nDESCRIPTION: Code for implementing SSO/SAML authentication, showing how to initiate SSO for a specific tenant and handle the redirect with code exchange for a session.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\n// Choose which tenant to log into\n// If configured globally, the return URL is optional. If provided however, it will be used\n// instead of any global configuration.\n// Redirect the user to the returned URL to start the SSO/SAML redirect chain\nval authURL = Descope.sso.start(emailOrTenantId = \"my-tenant-ID\", redirectUrl = \"exampleauthschema://my-app.com/handle-saml\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\n// Catch the redirect using a dedicated deep link Activity\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    val incomingUri: Uri = intent?.data ?: return\n    val code = incomingUri.getQueryParameter(\"code\")\n\n    // could be any scope that makes sense in your application\n    GlobalScope.launch {\n        try {\n            // Exchange code for session\n            val authResponse = Descope.sso.exchange(code)\n            val session = DescopeSession(authResponse)\n            Descope.sessionManager.manageSession(session)\n        } catch (e: DescopeException) {\n            // Handle errors here\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication with Descope in Kotlin\nDESCRIPTION: Code for implementing Passkey (WebAuthn) authentication, showing how to authenticate users with passkeys using a suspending function approach that handles the modal authentication view.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\n// Enter loading state...\n\ntry {\n    val authResponse = Descope.passkey.signUpOrIn(this@MyActivity, loginId)\n    val session = DescopeSession(authResponse)\n    Descope.sessionManager.manageSession(session)\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n\n// Exit loading state...\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication with Descope in Kotlin\nDESCRIPTION: Code for implementing Magic Link authentication, showing how to send a Magic Link to a user's email and verify the token when the user clicks the link.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\n// If configured globally, the redirect URI is optional. If provided however, it will be used\n// instead of any global configuration\ntry {\n    Descope.magiclink.signUp(DeliveryMethod.Email, \"andy@example.com\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.magiclink.verify(\"<token>\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Authentication with Email\nDESCRIPTION: Demonstrates how to start an OTP (One-Time Password) authentication flow by sending a code to a user's email address.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// sends an OTP code to the given email address\nDescope.otp.signUp(method = DeliveryMethod.Email, loginId = \"andy@example.com\")\n```\n\n----------------------------------------\n\nTITLE: Verifying OTP Code and Managing User Session\nDESCRIPTION: Shows how to verify an OTP code entered by the user, handle various error scenarios, and manage the authenticated session using the session manager.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval authResponse = try {\n    // if the user entered the right code the authentication is successful\n    Descope.otp.verify(method = DeliveryMethod.Email, loginId = \"andy@example.com\", code = code)\n} catch (e: DescopeException) {\n    // Here's an example of how a typical error would be handled\n    when(e) {\n        // handle one or more kinds of errors where we don't\n        // need to use the actual error object\n        DescopeException.wrongOtpCode,\n        DescopeException.invalidRequest -> showBadCodeAlert()\n\n        // handle a specific kind of error and do something\n        // with the [DescopeException] object\n        DescopeException.networkError -> {\n            logError(\"A network error has occurred\", e.desc, e.cause)\n            showNetworkErrorRetry()\n        }\n\n        // handle any other scenario\n        else -> {\n            logError(\"Unexpected authentication failure: $e\")\n            showUnexpectedErrorAlert(e)\n        }\n    }    \n}\n// we create a DescopeSession object that represents an authenticated user session\nval session = DescopeSession(authResponse)\n\n// the session manager automatically takes care of persisting the session\n// and refreshing it as needed\nDescope.sessionManager.manageSession(session)\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Authentication with Descope in Kotlin\nDESCRIPTION: Code for implementing One-Time Password (OTP) authentication with Descope, showing how to sign up a user with email and verify the received code.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\n// Every user must have a loginId. All other user details are optional:\ntry {\n    Descope.otp.signUp(\n        DeliveryMethod.Email, \"andy@example.com\", SignUpDetails(\n            name = \"Andy Rhoads\"\n        )\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.otp.verify(DeliveryMethod.Email, \"andy@example.com\", \"123456\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TOTP Authentication Sign Up in Kotlin using Descope SDK\nDESCRIPTION: Creates a new user with TOTP authentication and provides three options for setting up an authenticator app: provisioning URL, QR image, or key. The code returns a TOTP response object containing these credentials for the user to add to their authenticator app.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    // Every user must have a loginId. All other user information is optional\n    val totpResponse = Descope.totp.signUp(loginId = \"andy@example.com\")\n\n    // Use one of the provided options to have the user add their credentials to the authenticator\n    // totpResponse.provisioningURL\n    // totpResponse.image\n    // totpResponse.key\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying TOTP Authentication in Kotlin using Descope SDK\nDESCRIPTION: Authenticates an existing user using a time-based one-time password code generated by an authenticator app. The function requires the user's login ID and the verification code from their authenticator app.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.totp.verify(loginId = \"andy@example.com\", code = \"987654\")\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Logged-in User on App Launch\nDESCRIPTION: Demonstrates how to check if a user is already logged in when the application starts by accessing the session manager.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\n// Application class onCreate\noverride fun onCreate() {\n    super.onCreate()\n    Descope.setup(this, projectId = \"<Your-Project-Id>\")\n    Descope.sessionManager.session?.run {\n        print(\"User is logged in: $this\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Logout with Session Revocation\nDESCRIPTION: Shows how to log a user out by clearing the local session and revoking the session on the server.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nDescope.sessionManager.clearSession()\nDescope.sessionManager.session?.refreshJwt?.let { refreshJwt ->\n    // revoke can be called without waiting for the response or \n    // any error handling since it's not a required measure\n    // to log the user out\n    myScope.launch(Dispatchers.Main) {\n        try {\n            Descope.auth.revokeSessions(RevokeType.CurrentSession, refreshJwt)\n        } catch (ignored: Exception) {\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Password Reset Email in Kotlin using Descope SDK\nDESCRIPTION: Initiates a password reset flow by sending a reset email to the user. Requires the user's login ID (email) and a redirect URL where the user will be directed after clicking the reset link in the email.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    Descope.password.sendReset(\n        \"andy@example.com\",\n        \"exampleauthschema://my-app.com/handle-reset\"\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing User Password in Kotlin using Descope SDK\nDESCRIPTION: Replaces a user's password by providing their login ID, current password, and new password. This function is used when the user knows their current password and wants to change it.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    val authResponse = Descope.password.replace(\n        \"andy@example.com\",\n        \"securePassword123!\",\n        \"newSecurePassword456!\"\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Password in Kotlin using Descope SDK\nDESCRIPTION: Updates an existing user's password using their login ID, new password, and a refresh JWT token for authorization. This is typically used when the application needs to update a password programmatically.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    Descope.password.update(\n        \"andy@example.com\",\n        \"newSecurePassword456!\",\n        \"user-refresh-jwt\"\n    )\n} catch (e: DescopeException) {\n    // Handle errors here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Descope Authentication Flow Redirection\nDESCRIPTION: XML configuration for the FlowRedirectActivity in the Android manifest to handle authentication redirects. Includes both https and custom scheme intent filters for broad browser compatibility.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n    android:name=\".FlowRedirectActivity\"\n    android:exported=\"true\">  <!-- exported required for app links -->\n    <intent-filter android:autoVerify=\"true\"> <!-- autoVerify required for app links -->\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n\n        <!-- replace with your host, the path can change must must be reflected when running the flow -->\n        <data android:scheme=\"https\" android:host=\"<YOUR_HOST_HERE>\" android:path=\"/done\" />\n    </intent-filter>\n\n    <!-- Optional: App Links are blocked by default on Opera and some other browsers. Add a custom scheme for that use case specifically -->\n    <intent-filter>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n\n        <!-- replace with something unique. this will only be used as a backup for Opera users. -->\n        <data android:scheme=\"myapp\" android:host=\"auth\"  />\n    </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Handling App Links for Authentication Flow Resumption\nDESCRIPTION: Shows how to implement an Activity that handles incoming App Links and resumes the authentication flow after external authentication steps like Magic Links or OAuth.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nclass FlowRedirectActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        // assuming descopeFlowView is a reference to your instance of DescopeFlowView\n        intent?.data?.run {\n            descopeFlowView.resumeFromDeepLink(this)\n        }\n    }\n\n    // alternatively you might receive the URI from another activity\n    override fun onNewIntent(intent: Intent?) {\n        super.onNewIntent(intent)\n        intent?.getStringExtra(descopeFlowUri)?.run {\n            // assuming descopeFlowView is a reference to your instance of DescopeFlowView\n            descopeFlowView.resumeFromDeepLink(Uri.parse(this))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests with Custom Authorization Header\nDESCRIPTION: Shows how to add a custom authorization header to network requests using the session JWT directly.\nSOURCE: https://github.com/descope/descope-kotlin/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\ntry {\n    Descope.sessionManager.refreshSessionIfNeeded()\n} catch (e: DescopeException) {\n    // Handle errors here\n}\nDescope.sessionManager.session?.sessionJwt?.apply {\n    connection.setRequestProperty(\"X-Auth-Token\", this)\n} ?: throw ServerError.unauthorized\n```"
  }
]