[
  {
    "owner": "appflowy-io",
    "repo": "appflowy",
    "content": "TITLE: Basic Popover Implementation in Flutter\nDESCRIPTION: A basic implementation of the Popover widget showing how to create a popover that appears when clicking a button. The example demonstrates setting trigger actions, direction, and popup content builder.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPopover(\n  // Define how to trigger the popover\n  triggerActions: PopoverTriggerActionFlags.click,\n  child: TextButton(child: Text(\"Popover\"), onPressed: () {}),\n  // Define the direction of the popover\n  direction: PopoverDirection.bottomWithLeftAligned,\n  popupBuilder(BuildContext context) {\n    return PopoverMenu();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Integration\nDESCRIPTION: Configures the build integration with the Flutter tool backend. Creates custom commands and targets to ensure the Flutter libraries and source files are properly generated during the build process.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AppFlowy UI Package Dependencies in Flutter\nDESCRIPTION: YAML configuration showing how to add the AppFlowy UI package dependency to a Flutter project's pubspec.yaml file. Specifies version 1.0.0 or higher of the package.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  appflowy_ui: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets Installation in CMake\nDESCRIPTION: Configures the installation of Flutter assets. It ensures fresh assets are copied on each build by removing any existing assets directory before installing the new one.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Managing Exclusive Popovers with PopoverMutex\nDESCRIPTION: Demonstrates using PopoverMutex to ensure only one popover is displayed at a time from a group of popovers. This pattern is useful for creating dropdown menus where only one should be open at a time.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/README.md#2025-04-23_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidgetState extends State<GridDateCell> {\n  final _popoverMutex = PopoverMutex();\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Popover(\n          mutex: _popoverMutex,\n          ...\n        ),\n        Popover(\n          mutex: _popoverMutex,\n          ...\n        ),\n        Popover(\n          mutex: _popoverMutex,\n          ...\n        ),\n      ]\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Command\nDESCRIPTION: Creates a custom command and target to run the Flutter tool backend during build. This ensures the Flutter library and headers are properly generated before building the application.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources\nDESCRIPTION: Defines source file lists for the Flutter C++ wrapper components. Organizes source files into core, plugin, and app categories for use in subsequent library definitions.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter App Wrapper Library\nDESCRIPTION: Creates a static library for the Flutter application wrapper, including core implementations and app-specific components.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Defines the list of Flutter library headers and creates a Flutter interface library. This sets up the necessary include directories and links to the Flutter library and required GTK dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings in CMake for AppFlowy\nDESCRIPTION: Sets up installation directories and makes the install step default for Visual Studio builds, ensuring the application can run in place without a separate bundle.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(DART_FFI_DIR \"${CMAKE_INSTALL_PREFIX}\")\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies for Desktop App\nDESCRIPTION: Sets up Flutter library and tool build rules, adds system-level dependencies like GTK, and defines the application target with necessary source files.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running AppFlowy Development Environment Setup Script\nDESCRIPTION: Commands to download and execute the AppFlowy setup script which automates installation of dependencies. The script provides a complete environment setup.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://raw.githubusercontent.com/AppFlowy-IO/AppFlowy/main/frontend/scripts/install_dev_deps.sh -o install_dev_deps.sh\nchmod +x install_dev_deps.sh\n./install_dev_deps.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the application bundle including executables, ICU data, libraries, and assets. Handles different configurations for Debug/Profile/Release builds.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories for Flutter Application\nDESCRIPTION: Sets up the installation directory structure for the Flutter application. It defines where the executable, data files, and libraries will be placed during installation.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Desktop Application\nDESCRIPTION: Sets up the initial CMake configuration for a Flutter desktop application. It defines the project name, executable name, and application ID.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS with Homebrew\nDESCRIPTION: Commands for installing required dependencies on macOS using the Homebrew package manager. This installs Rust, CMake, Ninja, protobuf, and Flutter SDK.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install rustup cmake ninja protobuf\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and GTK Dependencies\nDESCRIPTION: Integrates Flutter library by adding its managed directory as a subdirectory. Sets up system-level dependencies by finding the GTK package which is required for Linux GUI applications. Also defines the application ID as a preprocessor definition.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for AppFlowy Import\nDESCRIPTION: This snippet shows how to create a basic markdown table with two columns and five rows of data. It demonstrates the structure and syntax for markdown tables that can be imported into AppFlowy.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/assets/test/workspaces/markdowns/markdown_with_table.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| S.No. | Column 2 |\n| --- | --- |\n| 1. | row 1 |\n| 2. | row 2 |\n| 3. | row 3 |\n| 4. | row 4 |\n| 5. | row 5 |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Windows with Chocolatey\nDESCRIPTION: PowerShell commands for installing required dependencies on Windows using Chocolatey package manager. This installs CMake, Ninja, LLVM, and protobuf.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install cmake ninja llvm protoc\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build Dependencies in CMake\nDESCRIPTION: Configures the Flutter library directories and tools. It adds the Flutter managed directory and runner subdirectory to the build, and includes plugin build rules.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Platform Build Environment with System Root\nDESCRIPTION: Sets up the cross-building environment when FLUTTER_TARGET_PLATFORM_SYSROOT is defined. Configures the system root and find root paths to properly locate programs, packages, libraries, and include files during cross-compilation.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Interface Library\nDESCRIPTION: Configures a Flutter interface library with required headers and dependencies. This library provides the core Flutter functionality and interfaces for the Windows application.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing rustup on Linux/macOS\nDESCRIPTION: Command to install Rust and Cargo using rustup on Linux or macOS systems. This provides the Rust compiler and package manager.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hello World Program in Rust\nDESCRIPTION: A basic Rust program with a main function that prints a greeting message to the console. The main function is the entry point of the Rust application.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/code.txt#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// This is the main function.\nfn main() {\n    // Print text to the console.\n    println!(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake\nDESCRIPTION: Sets up the Flutter library, defines paths to required resources, and publishes variables to parent scopes for installation steps. Includes paths to the Flutter DLL, ICU data file, and other essential components.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(DART_FFI_DLL \"${CMAKE_CURRENT_SOURCE_DIR}/dart_ffi/dart_ffi.dll\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Flutter in Bash\nDESCRIPTION: Command to fetch and install the required dependencies for the Flutter project using the pub package manager.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_ui/example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up the Flutter Linux library configuration including system dependencies, library paths, and header files. Configures GTK, GLIB, and GIO dependencies using pkg-config.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running AppFlowy from Command Line\nDESCRIPTION: Command to run AppFlowy from the command line using the Flutter run command with specific configuration. This is used for development and testing.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nflutter run -d macos # or windows/linux\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command in CMake\nDESCRIPTION: Creates a custom command to run the Flutter tool backend script which generates the Flutter library and headers. Uses a _phony_ output file to ensure the command runs every time.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets for AppFlowy\nDESCRIPTION: Configures installation of Flutter assets by removing any stale files from previous installations and copying the current asset directory to the bundle data directory.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Windows Environment in CMake\nDESCRIPTION: Configures the CMake build environment for Flutter Windows integration. Defines paths to the Flutter library, sets up include directories, and establishes dependencies for the build process.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Bundle Directory\nDESCRIPTION: Sets up the installation directory structure for the application bundle. Defines the bundle directory and ensures the installation prefix is set to this directory unless explicitly specified otherwise. Also cleans the bundle directory before installation.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries for Plugins and Applications\nDESCRIPTION: Defines and configures the C++ wrapper libraries for Flutter plugins and applications. Sets up source files, compiler settings, and establishes dependencies between libraries.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings for Flutter Targets\nDESCRIPTION: Defines a function to apply standard compilation settings to targets. It sets C++14 standard, adds warning flags, and configures optimization levels based on build type.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Platform Support to Flutter Plugin\nDESCRIPTION: Command to add platform support to the Flutter plugin project. It demonstrates how to use the 'flutter create' command with the '-t plugin' flag to specify platforms.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create -t plugin --platforms <platforms> .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Dependencies in CMake\nDESCRIPTION: Configures the project's dependencies and include directories, linking with Flutter libraries and adding the source directory to the include path. This ensures all necessary Flutter components are available during compilation.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/runner/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Setup for installing the application bundle including assets, libraries, and runtime components.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flowy Infra UI Plugin\nDESCRIPTION: Sets up a CMake project for building a shared library plugin. Configures compiler settings, includes directories, and links required Flutter dependencies. The plugin is built with hidden visibility and includes necessary compiler definitions for Flutter plugin implementation.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(PROJECT_NAME \"flowy_infra_ui\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"flowy_infra_ui_plugin\")\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"flowy_infra_ui_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(flowy_infra_ui_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Function to apply standard compilation settings to targets including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Application Build Configuration\nDESCRIPTION: Configuration for building the main application executable including source files and dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Build Target\nDESCRIPTION: Defines the AppFlowy executable target by specifying source files. Applies the standard settings to the target, links Flutter and GTK libraries, and adds dependencies on Flutter assembly. Sets output directory to discourage running unbundled executables.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows CMake Environment\nDESCRIPTION: Sets up basic configuration and includes generated Flutter configuration. Establishes directory paths and Flutter library references for the Windows build environment.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and Application Components in CMake\nDESCRIPTION: Sets up the Flutter managed directory, adds the Flutter library, runner application, and includes generated plugin build rules for the AppFlowy project.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake\nDESCRIPTION: Initial CMake configuration including project name, binary name, and basic build options. Sets up multi-configuration support and build types (Debug/Profile/Release).\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(flowy_infra_ui_example LANGUAGES CXX)\n\nset(BINARY_NAME \"flowy_infra_ui_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Executable in CMake\nDESCRIPTION: Defines the main executable target for a Flutter Windows application runner with all necessary source files, including Flutter window handling, main entry point, and Windows-specific components. The target is set up as a WIN32 application.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/runner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for AppFlowy Components\nDESCRIPTION: Specifies installation rules for the binary executable, ICU data file, Dart FFI DLL, Flutter library, and plugin bundled libraries into appropriate directories.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${DART_FFI_DLL}\" DESTINATION \"${DART_FFI_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Settings in CMake for Flutter\nDESCRIPTION: Defines settings for the Profile build mode by inheriting flags from the Release configuration. This ensures that performance-focused builds have appropriate compiler settings.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flowy Infra UI Plugin Build in CMake\nDESCRIPTION: This CMake script defines the build configuration for the Flowy Infra UI plugin. It creates a shared library with the necessary compiler settings, includes, and dependencies like Flutter and GTK. The script also configures visibility settings and defines bundled libraries.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/linux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nset(PROJECT_NAME \"flowy_infra_ui\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"flowy_infra_ui_plugin\")\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"flowy_infra_ui_plugin.cc\"\n  \"flowy_infra_u_i_plugin.cc\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(flowy_infra_ui_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for AppFlowy Backend Plugin\nDESCRIPTION: Configures a shared library build for the AppFlowy backend plugin. Sets up project naming, compilation settings, visibility presets, and links required Flutter dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(PROJECT_NAME \"appflowy_backend\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"appflowy_backend_plugin\")\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"appflowy_backend_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(appflowy_backend_bundled_libraries\n \"\" \n PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Settings Function Definition\nDESCRIPTION: Defines a function to apply standard compilation settings including C++17 support and compiler options.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Application Executable and Runtime Dependencies\nDESCRIPTION: Installs the application executable to the bundle directory. Also copies essential runtime files including ICU data, Dart FFI DLL, Flutter library, and any bundled plugin libraries to their appropriate locations in the bundle.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${DART_FFI_DLL}\" DESTINATION \"${DART_FFI_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration for AppFlowy Linux Build\nDESCRIPTION: Sets up the initial CMake project configuration including minimum required version, project name, binary name, and application ID. Also configures CMAKE_INSTALL_RPATH to ensure libraries can be found at runtime.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"AppFlowy\")\nset(APPLICATION_ID \"io.appflowy.appflowy\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions in CMake for AppFlowy\nDESCRIPTION: Adds Unicode definitions to ensure all projects in the build use Unicode character encoding.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes Flutter-generated plugin build rules from the generated_plugins.cmake file. This ensures all plugins required by the application are properly built and integrated into the application bundle.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function that applies standard compilation settings to targets. It sets C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Configuration for AppFlowy\nDESCRIPTION: Defines the default build type as \"Debug\" if not already specified. Sets available build type options to Debug, Profile, and Release which are standard Flutter build modes.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Launch Screen Asset Configuration\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Application Components with CMake\nDESCRIPTION: Defines installation rules for the Flutter application components. It specifies how to install the executable, ICU data file, Flutter library, and plugin libraries.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Configuration\nDESCRIPTION: Initial CMake setup including project name, version requirements, and basic build settings.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(flowy_sdk_example LANGUAGES CXX)\n\nset(BINARY_NAME \"flowy_sdk_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Production Flutter Builds\nDESCRIPTION: Adds installation rules for the AOT (Ahead-Of-Time) compiled library, which is only installed for Profile and Release configurations to optimize performance.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up AppFlowy Project Configuration in CMake\nDESCRIPTION: Initializes the CMake project for AppFlowy Flutter with C++ language support, sets the binary name, and configures basic project properties including installation RPATH.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(appflowy_flutter LANGUAGES CXX)\n\nset(BINARY_NAME \"AppFlowy\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds\nDESCRIPTION: Adds an installation rule for the AOT (Ahead-Of-Time) compiled library, but only for Profile and Release configurations, not for Debug builds.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for Flutter Desktop Application\nDESCRIPTION: Configures the installation process for the Flutter desktop application. It sets up the bundle directory, installs necessary files and libraries, and handles asset copying.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Configuration\nDESCRIPTION: Sets up the custom build command for Flutter tool backend. Creates a phony target to ensure the command runs every time and configures the Flutter tool environment and build parameters.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Application Wrapper Library\nDESCRIPTION: Builds the Flutter wrapper library for the application, providing the necessary interfaces for the main application to interact with the Flutter engine. Sets up dependencies and include directories.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Project\nDESCRIPTION: Sets the default build type to Debug if not specified and defines available build types. This ensures proper configuration for different build scenarios.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: A helper function that prepends a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...), which isn't available in CMake 3.10.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build Configuration\nDESCRIPTION: Configuration for Flutter-specific build settings including managed directory and plugin rules.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the application, including bundle directory configuration and file copying.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Asset Installation Configuration\nDESCRIPTION: Configures the installation of Flutter assets and ensures clean asset directory on each build.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration\nDESCRIPTION: Initial CMake setup including project name, binary name, and application ID configuration.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"flowy_infra_ui_example\")\nset(APPLICATION_ID \"com.example.flowy_infra_ui\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter Windows DLL and its associated header files, creating an interface library that other components can link against.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Manual Popover Triggering with PopoverController\nDESCRIPTION: An example showing how to manually trigger a popover using PopoverController. This approach allows controlling the popover display from outside events rather than relying solely on user interaction with the trigger element.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/README.md#2025-04-23_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyWidgetState extends State<GridDateCell> {\n  late PopoverController _popover;\n\n  @override\n  void initState() {\n    _popover = PopoverController();\n    super.initState();\n  }\n\n  // triggered by another widget\n  _onClick() {\n    _popover.show();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Popover(\n      controller: _popover,\n      ...\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration in CMake\nDESCRIPTION: Creates a list of Flutter library headers and prepends the ephemeral directory path to each. Then configures the Flutter interface library with include directories and dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library for Flutter plugin wrapper functionality, including core implementations and plugin registrar components.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AppFlowy Runner on Windows\nDESCRIPTION: This CMake script configures the project for building the AppFlowy runner executable on Windows. It sets up the project, defines the executable target with necessary source files, applies standard settings, and configures dependencies including Flutter.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/runner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates the APPLY_STANDARD_SETTINGS function that configures standard compilation settings for targets. Sets C++14 standard, enables warnings as errors, and optimizes release builds with -O3 and NDEBUG flags.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend\nDESCRIPTION: Sets up the custom build command to generate Flutter-related files using the Flutter tool backend, ensuring proper build dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: NDK Path Logging\nDESCRIPTION: Logs the NDK path and indicates the start of library copying process.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/app/src/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(CONFIGURE_LOG \"NDK PATH: ${ANDROID_NDK}\")\nmessage(CONFIGURE_LOG \"Copying libc++_shared.so\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings in CMake for Flutter\nDESCRIPTION: Sets up the root filesystem and find root path settings for cross-building the Flutter application. This is crucial for targeting different platforms.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/linux/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: Adds a compiler definition to disable Windows macros (specifically min and max) that can conflict with C++ standard library functions. This prevents naming collisions when using the standard library.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/runner/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: Defines a custom function to prepend a prefix to all elements in a list. This is used as an alternative to list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Flags in CMake for AppFlowy\nDESCRIPTION: Configures linker and compiler flags for the Profile build configuration by inheriting from Release configuration flags, ensuring optimized performance for profiling.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Version Requirements\nDESCRIPTION: Sets the minimum required CMake version and defines the project name.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/app/src/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10.0)\n\nproject(AppFlowy)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Setup\nDESCRIPTION: Configures build types (Debug/Profile/Release) and handles multi-configuration generators.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter Library Paths to Parent Scope\nDESCRIPTION: Sets variables in the parent scope for use during the install step, including paths to the Flutter library, Dart FFI DLL, ICU data file and build directories.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(DART_FFI_DLL \"${CMAKE_CURRENT_SOURCE_DIR}/dart_ffi/libdart_ffi.so\" PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: x86_64 Library Copy Configuration\nDESCRIPTION: Copies libc++_shared.so library for x86_64 architecture from NDK to project's jniLibs directory.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/app/src/main/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfile(COPY\n    ${ANDROID_NDK}/sources/cxx-stl/llvm-libc++/libs/x86_64/libc++_shared.so\n    DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/jniLibs/x86_64\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake for Windows\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for Windows. This command generates necessary files and updates the Flutter library and wrapper sources when changes are detected.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: ARMv7 Library Copy Configuration\nDESCRIPTION: Copies libc++_shared.so library for ARMv7 architecture from NDK to project's jniLibs directory.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/app/src/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfile(COPY\n    ${ANDROID_NDK}/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_shared.so\n    DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/jniLibs/armeabi-v7a\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Version Definitions in CMake\nDESCRIPTION: Sets up compiler definitions for the Flutter version information, which makes version details available to the application at compile time. This allows the Windows runner to report the correct version information.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/runner/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: Creates two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the runner. These libraries include core implementations, standard codec, and specific functionalities for plugins and the main app.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo Android Targets\nDESCRIPTION: Configuration for cargo to locate Android tools (linker and archiver) for different CPU architectures including aarch64, armv7, i686, and x86_64. This needs to be added to ~/.cargo/config file.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[target.aarch64-linux-android]\nar = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar\"\nlinker = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android29-clang\"\n\n[target.armv7-linux-androideabi]\nar = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar\"\nlinker = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi29-clang\"\n\n[target.i686-linux-android]\nar = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar\"\nlinker = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android29-clang\"\n\n[target.x86_64-linux-android]\nar = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar\"\nlinker = \"/home/user/Android/Sdk/ndk/24.0.8215888/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android29-clang\"\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories for AppFlowy Bundle Components\nDESCRIPTION: Sets up directory variables for various components of the application bundle. Defines paths for Dart FFI binaries, data files, and library files that will be used in subsequent installation commands.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(DART_FFI_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Clang Configuration for NDK v24\nDESCRIPTION: Content for libgcc.a file required for Clang to work properly with NDK version 24. This needs to be placed in specific architecture folders.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nINPUT(-lunwind)\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version and Including Generated Config\nDESCRIPTION: Sets the minimum required CMake version and includes the Flutter-generated configuration file. This establishes the basic project configuration.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu/Debian Linux\nDESCRIPTION: Command for installing required dependencies on Ubuntu or Debian-based Linux distributions. This installs necessary packages for development including Rust and Flutter dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install curl build-essential libsqlite3-dev libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Application with CMake\nDESCRIPTION: Sets up the CMake project for building the Windows runner application that hosts the Flutter content. It defines the executable target with necessary source files, applies standard build settings, adds dependencies, and configures compilation flags.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/runner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter bin to PATH on macOS/Linux\nDESCRIPTION: Command to add Flutter bin directory to PATH environment variable for macOS and Linux users. This ensures the Flutter commands are accessible from anywhere.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n----------------------------------------\n\nTITLE: Main Function Example in JSX\nDESCRIPTION: A simple main function implementation that prints 'Hello World!' to the console. Demonstrates basic function declaration and console output in JSX syntax.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/plain_text.txt#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This is the main function.\nfn main() {\n    // Print text to the console.\n    **println**!(\"Hello World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Building AppFlowy with desktop-release Mode\nDESCRIPTION: Command to build AppFlowy in desktop-release mode for production use. This creates an optimized binary for the target platform.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/image.txt#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend\nflutter build macos # or windows/linux\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: Builds the Flutter wrapper library for plugins, which provides the necessary interface for Flutter plugins to interact with the native Windows platform. Configures build settings and dependencies.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Application in Bash\nDESCRIPTION: Command to start the Flutter application in debug mode. This will compile and run the app on the default connected device or simulator.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_ui/example/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Cleans and installs Flutter assets to ensure no stale files remain from previous installations. For non-Debug builds, also installs the Ahead-Of-Time (AOT) compiled library which improves runtime performance.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building AppFlowy Docker Image with User Permissions\nDESCRIPTION: Command to build AppFlowy Docker image using docker-compose with current user's UID and GID to maintain proper file permissions.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/scripts/docker-buildfiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose build --build-arg uid=$(id -u) --build-arg gid=$(id -g)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sample Usage in Dart\nDESCRIPTION: This code snippet provides a basic example of how to use the package. It's a placeholder that should be replaced with actual usage examples relevant to the package being documented.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_result/README.md#2025-04-23_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst like = 'sample';\n```\n\n----------------------------------------\n\nTITLE: Inserting Code Block in AppFlowy Markdown\nDESCRIPTION: This snippet demonstrates how to insert a code block in AppFlowy using a markdown command. Users can type '/code' to create a new code block for syntax-highlighted code snippets.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/assets/test/workspaces/markdowns/test1.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/code\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for AppFlowy Runner on Windows\nDESCRIPTION: This CMake snippet sets up the project configuration for building the AppFlowy runner executable on Windows. It specifies the minimum CMake version, project name, source files, compiler definitions, and dependencies including Flutter.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_backend/example/windows/runner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Highlighting in Markdown\nDESCRIPTION: This snippet shows how to create nested highlighting effects in Markdown using backticks. It demonstrates single, double, and triple backtick usage for different levels of emphasis.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/rust-lib/flowy-document/tests/assets/text/bulleted_list.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHighlight\n`You can also`\n``nest``\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project Configuration for Flutter Application\nDESCRIPTION: Initializes the CMake project with minimum required version and project name. It sets the binary name and configures build types for the project.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to AppFlowy Roadmap Resources\nDESCRIPTION: Markdown formatted links pointing to AppFlowy's roadmap documentation on GitBook and their public project roadmap on GitHub Projects.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/doc/roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[AppFlowy Roadmap ReadMe](https://appflowy.gitbook.io/docs/essential-documentation/roadmap)\n\n[AppFlowy Public Roadmap](https://github.com/orgs/AppFlowy-IO/projects/5/views/12)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Utility function that prepends a prefix to each element in a list. Provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions below 3.10.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Android NDK Path\nDESCRIPTION: Shell environment variable export command to add Android NDK to system PATH. Should be added to shell configuration file (.vimrc, .zshrc, .profile, or .bashrc).\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/README.md#2025-04-23_snippet_2\n\nLANGUAGE: vim\nCODE:\n```\nexport PATH=/home/sean/Android/Sdk/ndk/24.0.8215888\n```\n\n----------------------------------------\n\nTITLE: Building Debian Package for AppFlowy using bash script\nDESCRIPTION: Bash command to build a .deb package for AppFlowy using the build_deb.sh script. Takes three parameters: the Linux production release path, version number, and desired package name.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/scripts/linux_distribution/deb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd frontend/\nsh scripts/linux_distribution/deb/build_deb.sh [LINUX_PRODUCTION_RELEASE_PATH] [VERSION] [PACKAGE_NAME]\n\n# for example\nsh scripts/linux_distribution/deb/build_deb.sh appflowy_flutter/product/0.2.9/linux/Release 0.2.9 AppFlowy_0.2.9.deb\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Shell command to open the iOS Runner project workspace in Xcode for customizing launch screen assets\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Integration\nDESCRIPTION: Sets up the integration with the Flutter tool backend for building Flutter artifacts. Creates custom commands and targets to ensure Flutter resources are properly assembled during the build process.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/flutter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux GTK\nDESCRIPTION: Configures the system-level dependencies required for Flutter Linux GTK integration, including GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/linux/flutter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: ARM64 Library Copy Configuration\nDESCRIPTION: Copies libc++_shared.so library for ARM64 architecture from NDK to project's jniLibs directory.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/android/app/src/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(COPY\n    ${ANDROID_NDK}/sources/cxx-stl/llvm-libc++/libs/arm64-v8a/libc++_shared.so\n    DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/jniLibs/arm64-v8a\n)\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory in Bash\nDESCRIPTION: Command to change the current directory to the example folder. This is a prerequisite step before running the Flutter application.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_ui/example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd example\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options in CMake for AppFlowy\nDESCRIPTION: Sets up build configuration types (Debug, Profile, Release) based on whether the generator supports multiple configurations. Ensures appropriate build type is set if not explicitly specified.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/windows/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: Sets up the Flutter library and its headers for use in the project. It defines the location of the Flutter DLL, ICU data file, and necessary header files.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/appflowy_popover/example/windows/flutter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate text to include in files when applying the Apache License 2.0 to a project. The template includes placeholders for copyright year and owner information, along with the standard license notice and link to the full license text.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/assets/google_fonts/Roboto_Mono/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function\nDESCRIPTION: Function to apply standard compilation settings including C++14 support and optimization flags.\nSOURCE: https://github.com/appflowy-io/appflowy/blob/main/frontend/appflowy_flutter/packages/flowy_infra_ui/example/linux/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```"
  }
]