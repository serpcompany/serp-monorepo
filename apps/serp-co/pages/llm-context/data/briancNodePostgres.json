[
  {
    "owner": "brianc",
    "repo": "node-postgres",
    "content": "TITLE: Connecting to PostgreSQL using environment variables in Node.js\nDESCRIPTION: This snippet demonstrates how to connect to a PostgreSQL database using environment variables with both Pool and Client classes from node-postgres. It shows basic query execution and connection management.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool, Client } = pg\n\n// pools will use environment variables\n// for connection information\nconst pool = new Pool()\n\n// you can also use async/await\nconst res = await pool.query('SELECT NOW()')\nawait pool.end()\n\n// clients will also use environment variables\n// for connection information\nconst client = new Client()\nawait client.connect()\n\nconst res = await client.query('SELECT NOW()')\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Transaction with Error Handling in Node.js\nDESCRIPTION: Example of implementing a database transaction that inserts records into users and photos tables with proper error handling and rollback functionality. Uses async/await syntax and demonstrates proper client connection management from a connection pool.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/transactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\nconst pool = new Pool()\n\nconst client = await pool.connect()\n\ntry {\n  await client.query('BEGIN')\n  const queryText = 'INSERT INTO users(name) VALUES($1) RETURNING id'\n  const res = await client.query(queryText, ['brianc'])\n\n  const insertPhotoText = 'INSERT INTO photos(user_id, photo_url) VALUES ($1, $2)'\n  const insertPhotoValues = [res.rows[0].id, 's3.bucket.foo']\n  await client.query(insertPhotoText, insertPhotoValues)\n  await client.query('COMMIT')\n} catch (e) {\n  await client.query('ROLLBACK')\n  throw e\n} finally {\n  client.release()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Connection Pool with Error Handling in Node.js\nDESCRIPTION: Demonstrates how to create and use a connection pool with proper error handling and client release. Shows checkout, query execution, and client release pattern.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/pooling.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\n// the pool will emit an error on behalf of any idle clients\n// it contains if a backend error or network partition happens\npool.on('error', (err, client) => {\n  console.error('Unexpected error on idle client', err)\n  process.exit(-1)\n})\n\nconst client = await pool.connect()\nconst res = await client.query('SELECT * FROM users WHERE id = $1', [1])\nconsole.log(res.rows[0])\n\nclient.release()\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using programmatic configuration in Node.js\nDESCRIPTION: This snippet shows how to connect to a PostgreSQL database by programmatically configuring connection parameters for both Pool and Client classes. It demonstrates query execution and proper connection management.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool, Client } = pg\n\nconst pool = new Pool({\n  user: 'dbuser',\n  password: 'secretpassword',\n  host: 'database.server.com',\n  port: 3211,\n  database: 'mydb',\n})\n\nconsole.log(await pool.query('SELECT NOW()'))\n\nconst client = new Client({\n  user: 'dbuser',\n  password: 'secretpassword',\n  host: 'database.server.com',\n  port: 3211,\n  database: 'mydb',\n})\n\nawait client.connect()\n\nconsole.log(await client.query('SELECT NOW()'))\n\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Parameterized Query in Node-Postgres\nDESCRIPTION: Safe query execution with parameter substitution to prevent SQL injection. Demonstrates inserting user data with returning clause.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = 'INSERT INTO users(name, email) VALUES($1, $2) RETURNING *'\nconst values = ['brianc', 'brian.m.carlson@gmail.com']\n\nconst res = await client.query(text, values)\nconsole.log(res.rows[0])\n// { name: 'brianc', email: 'brian.m.carlson@gmail.com' }\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Connection with Async/Await\nDESCRIPTION: Demonstrates the simplest way to connect to PostgreSQL, execute a query, and disconnect using async/await pattern. Uses Client class to establish connection and execute a parameterized query.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\nawait client.connect()\n\nconst res = await client.query('SELECT $1::text as message', ['Hello world!'])\nconsole.log(res.rows[0].message) // Hello world!\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Releasing Client from pg.Pool in JavaScript\nDESCRIPTION: Demonstrates how to acquire a client from the pool using pool.connect(), execute a query, and then release the client back to the pool.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nconst client = await pool.connect()\nawait client.query('SELECT NOW()')\nclient.release()\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL with Self-signed Certificates in node-postgres\nDESCRIPTION: Demonstrates how to configure SSL connections using self-signed certificates with both Client and Pool instances. Includes certificate file loading and basic connection establishment.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/ssl.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  database: 'database-name',\n  host: 'host-or-ip',\n  // this object will be passed to the TLSSocket constructor\n  ssl: {\n    rejectUnauthorized: false,\n    ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n    key: fs.readFileSync('/path/to/client-key/postgresql.key').toString(),\n    cert: fs.readFileSync('/path/to/client-certificates/postgresql.crt').toString(),\n  },\n}\n\nimport pg from 'pg'\nconst { Client, Pool } = pg\n\nconst client = new Client(config)\nawait client.connect()\nconsole.log('connected')\nawait client.end()\n\nconst pool = new Pool(config)\nconst pooledClient = await pool.connect()\nconsole.log('connected')\npooledClient.release()\nawait pool.end()\n```\n\n----------------------------------------\n\nTITLE: Setting up Database Connection Pool in node-postgres\nDESCRIPTION: Initializes a PostgreSQL connection pool and exports a query function for database access. The pool uses default connection parameters and provides a simple interface for executing SQL queries.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/async-express.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nexport const query = (text, params) => pool.query(text, params)\n```\n\n----------------------------------------\n\nTITLE: Using Database Adapter in Express Route Handler with JavaScript\nDESCRIPTION: Demonstrates how to use the custom database adapter in an Express route handler to query user data.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/project-structure.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// notice here I'm requiring my database adapter file\n// and not requiring node-postgres directly\nimport * as db from '../db/index.js'\n\napp.get('/:id', async (req, res, next) => {\n  const result = await db.query('SELECT * FROM users WHERE id = $1', [req.params.id])\n  res.send(result.rows[0])\n})\n\n// ... many other routes in this file\n```\n\n----------------------------------------\n\nTITLE: Handling UUID and JSON Data Types in node-postgres\nDESCRIPTION: This example shows how to create a table with UUID and JSONB columns, insert data, and retrieve it. It demonstrates automatic conversion of JavaScript objects to JSON and vice versa, as well as UUID handling.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst createTableText = `\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\n\nCREATE TEMP TABLE IF NOT EXISTS users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  data JSONB\n);\n`\n// create our temp table\nawait client.query(createTableText)\n\nconst newUser = { email: 'brian.m.carlson@gmail.com' }\n// create a new user\nawait client.query('INSERT INTO users(data) VALUES($1)', [newUser])\n\nconst { rows } = await client.query('SELECT * FROM users')\n\nconsole.log(rows)\n/*\noutput:\n[{\n  id: 'd70195fd-608e-42dc-b0f5-eee975a621e9',\n  data: { email: 'brian.m.carlson@gmail.com' }\n}]\n*/\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Database Adapter with node-postgres in JavaScript\nDESCRIPTION: Creates a basic database adapter using node-postgres. It exports a query function that uses a connection pool to execute SQL queries.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/project-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nexport const query = (text, params, callback) => {\n  return pool.query(text, params, callback)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL using Connection URI in Node.js\nDESCRIPTION: This example demonstrates how to connect to a PostgreSQL database using a connection string URI for both Pool and Client classes. This method is common in environments like Heroku where connection strings are provided as environment variables.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool, Client } = pg\nconst connectionString = 'postgresql://dbuser:secretpassword@database.server.com:3211/mydb'\n\nconst pool = new Pool({\n  connectionString,\n})\n\nawait pool.query('SELECT NOW()')\nawait pool.end()\n\nconst client = new Client({\n  connectionString,\n})\n\nawait client.connect()\n\nawait client.query('SELECT NOW()')\n\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error Handling with Try/Catch\nDESCRIPTION: Shows proper error handling pattern using try/catch blocks with async/await when executing PostgreSQL queries. Includes cleanup in finally block.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\nawait client.connect()\n\ntry {\n   const res = await client.query('SELECT $1::text as message', ['Hello world!'])\n   console.log(res.rows[0].message) // Hello world!\n} catch (err) {\n   console.error(err);\n} finally {\n   await client.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Single Query Execution with Connection Pool in Node.js\nDESCRIPTION: Shows the simplified way to execute a single query using the pool's query method, which automatically handles client checkout and release.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/pooling.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nconst res = await pool.query('SELECT * FROM users WHERE id = $1', [1])\nconsole.log('user:', res.rows[0])\n```\n\n----------------------------------------\n\nTITLE: Executing a Parameterized Query with Client\nDESCRIPTION: Shows how to execute a parameterized SQL query using client.query() with values array, which helps prevent SQL injection by properly escaping parameters.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\n\nawait client.connect()\n\nconst result = await client.query('SELECT $1::text as name', ['brianc'])\nconsole.log(result)\n\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Executing Query with pg.Pool in JavaScript\nDESCRIPTION: Shows how to use pool.query() method to execute a single query on the first available idle client and return its result.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nconst result = await pool.query('SELECT $1::text as name', ['brianc'])\nconsole.log(result.rows[0].name) // brianc\n```\n\n----------------------------------------\n\nTITLE: Migrating from Global Singleton to Pool in Node-Postgres 7.0\nDESCRIPTION: Demonstrates how to migrate from the deprecated global singleton pattern to the new Pool-based connection management system. Shows both the old deprecated way and the new recommended approach.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/upgrading.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// old way, deprecated in 6.3.0:\n\n// connection using global singleton\npg.connect(function (err, client, done) {\n  client.query(/* etc, etc */)\n  done()\n})\n\n// singleton pool shutdown\npg.end()\n\n// ------------------\n\n// new way, available since 6.0.0:\n\n// create a pool\nvar pool = new pg.Pool()\n\n// connection using created pool\npool.connect(function (err, client, done) {\n  client.query(/* etc, etc */)\n  done()\n})\n\n// pool shutdown\npool.end()\n```\n\n----------------------------------------\n\nTITLE: Using pool.query() Helper Method in pg-pool\nDESCRIPTION: Examples of using the pool.query() helper method for simple queries without manual client management.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\nvar time = await pool.query('SELECT NOW()')\nvar name = await pool.query('select $1::text as name', ['brianc'])\nconsole.log(name.rows[0].name, 'says hello at', time.rows[0].now)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.query('SELECT $1::text as name', ['brianc'], function (err, res) {\n  console.log(res.rows[0].name) // brianc\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Text Query in Node-Postgres\nDESCRIPTION: Simple query execution without parameters using client.query method.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.query('SELECT NOW() as now')\n```\n\n----------------------------------------\n\nTITLE: Extended Database Adapter with Client Checkout in JavaScript\nDESCRIPTION: Further extends the database adapter to include a method for checking out a client from the connection pool, useful for transactions.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/project-structure.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nexport const query = async (text, params) => {\n  const start = Date.now()\n  const res = await pool.query(text, params)\n  const duration = Date.now() - start\n  console.log('executed query', { text, duration, rows: res.rowCount })\n  return res\n}\n\nexport const getClient = () => {\n  return pool.connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Plain Text Query with Client\nDESCRIPTION: Demonstrates how to execute a simple SQL query without parameters using client.query(), connect to the server first and end the connection after the query completes.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\n\nawait client.connect()\n\nconst result = await client.query('SELECT NOW()')\nconsole.log(result)\n\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Server with Client\nDESCRIPTION: Shows how to establish a connection to the PostgreSQL server using the client.connect() method, which returns a Promise.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\n\nawait client.connect()\n```\n\n----------------------------------------\n\nTITLE: Handling pg.Pool Events in JavaScript\nDESCRIPTION: Shows how to listen for and handle various events emitted by the pool, including connect, acquire, error, release, and remove events.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pool = new Pool()\npool.on('connect', (client) => {\n  client.query('SET DATESTYLE = iso, mdy')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating pg.Pool Instance with Configuration in JavaScript\nDESCRIPTION: Demonstrates how to create a new pool instance with specific configuration options such as host, user, max connections, and timeouts.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool({\n  host: 'localhost',\n  user: 'database-user',\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cursor Usage with Node-Postgres\nDESCRIPTION: Example demonstrating how to create and use a cursor to read from a database table. Shows connection setup, cursor creation, and proper cleanup.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/cursor.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\nimport Cursor from 'pg-cursor'\n\nconst pool = new Pool()\nconst client = await pool.connect()\nconst text = 'SELECT * FROM my_large_table WHERE something > $1'\nconst values = [10]\n\nconst cursor = client.query(new Cursor(text, values))\n\ncursor.read(100, (err, rows) => {\n  cursor.close(() => {\n    client.release()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Acquiring Clients with Promises in pg-pool\nDESCRIPTION: Example of using promises to acquire a client from the pool and execute a query.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.connect().then(client => {\n  client.query('select $1::text as name', ['pg-pool']).then(res => {\n    client.release()\n    console.log('hello from', res.rows[0].name)\n  })\n  .catch(e => {\n    client.release()\n    console.error('query error', e.message, e.stack)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming PostgreSQL Query Results\nDESCRIPTION: Example showing how to stream 1 million rows from PostgreSQL using pg-query-stream. The code demonstrates connection pooling, query streaming, and proper cleanup using the done callback. Uses cursor-based streaming to maintain low memory usage.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-query-stream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('pg')\nvar pool = new pg.Pool()\nconst QueryStream = require('pg-query-stream')\nconst JSONStream = require('JSONStream')\n\n//pipe 1,000,000 rows to stdout without blowing up your memory usage\npool.connect((err, client, done) => {\n  if (err) throw err\n  const query = new QueryStream('SELECT * FROM generate_series(0, $1) num', [1000000])\n  const stream = client.query(query)\n  //release the client when the stream is finished\n  stream.on('end', done)\n  stream.pipe(JSONStream.stringify()).pipe(process.stdout)\n})\n```\n\n----------------------------------------\n\nTITLE: Promise-Based Query Example in Node-Postgres\nDESCRIPTION: Demonstration of using promises with client.query() to execute database queries.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect()\nclient.query('SELECT $1::text as name', ['brianc']).then(function (res) {\n  console.log('hello from', res.rows[0])\n  client.end()\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Client from PostgreSQL Server\nDESCRIPTION: Shows how to properly disconnect a client from the PostgreSQL server using the client.end() method, which returns a Promise that resolves when the connection is closed.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.end()\nconsole.log('client has disconnected')\n```\n\n----------------------------------------\n\nTITLE: Creating a Client with Specific Connection Parameters in JavaScript\nDESCRIPTION: Demonstrates how to create a Client instance with explicit connection parameters instead of relying on environment variables.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\n\nconst client = new Client({\n  user: 'database-user',\n  password: 'secretpassword!!',\n  host: 'my.database-server.com',\n  port: 5334,\n  database: 'database-name',\n})\n```\n\n----------------------------------------\n\nTITLE: Enhanced Database Adapter with Query Logging in JavaScript\nDESCRIPTION: Extends the basic database adapter to include query logging. It logs the query text, execution duration, and number of rows returned for each query.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/project-structure.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nexport const query = async (text, params) => {\n  const start = Date.now()\n  const res = await pool.query(text, params)\n  const duration = Date.now() - start\n  console.log('executed query', { text, duration, rows: res.rowCount })\n  return res\n}\n```\n\n----------------------------------------\n\nTITLE: Graceful Pool Shutdown in Node.js\nDESCRIPTION: Demonstrates how to properly shut down a connection pool, showing the execution order of pending queries and pool drainage.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/pooling.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\nconst pool = new Pool()\n\nconsole.log('starting async query')\nconst result = await pool.query('SELECT NOW()')\nconsole.log('async query finished')\n\nconsole.log('starting callback query')\npool.query('SELECT NOW()', (err, res) => {\n  console.log('callback query finished')\n})\n\nconsole.log('calling end')\nawait pool.end()\nconsole.log('pool has drained')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pool Instance in Node.js\nDESCRIPTION: Examples of creating pool instances with different configurations, including default, custom, and native client options.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Pool = require('pg-pool')\n\n// by default the pool uses the same\n// configuration as whatever `pg` version you have installed\nvar pool = new Pool()\n\n// you can pass properties to the pool\n// these properties are passed unchanged to both the node-postgres Client constructor\n// and the node-pool (https://github.com/coopernurse/node-pool) constructor\n// allowing you to fully configure the behavior of both\nvar pool2 = new Pool({\n  database: 'postgres',\n  user: 'brianc',\n  password: 'secret!',\n  port: 5432,\n  ssl: true,\n  max: 20, // set pool max size to 20\n  idleTimeoutMillis: 1000, // close idle clients after 1 second\n  connectionTimeoutMillis: 1000, // return an error after 1 second if connection could not be established\n  maxUses: 7500, // close (and replace) a connection after it has been used 7500 times (see below for discussion)\n})\n\n//you can supply a custom client constructor\n//if you want to use the native postgres client\nvar NativeClient = require('pg').native.Client\nvar nativePool = new Pool({ Client: NativeClient })\n\n//you can even pool pg-native clients directly\nvar PgNativeClient = require('pg-native')\nvar pgNativePool = new Pool({ Client: PgNativeClient })\n```\n\n----------------------------------------\n\nTITLE: Working with Date and Timestamp Types in node-postgres\nDESCRIPTION: This snippet illustrates how node-postgres handles DATE, TIMESTAMP, and TIMESTAMPTZ data types. It shows table creation, data insertion using JavaScript Date objects, and retrieval of date/time values.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst createTableText = `\nCREATE TEMP TABLE dates(\n  date_col DATE,\n  timestamp_col TIMESTAMP,\n  timestamptz_col TIMESTAMPTZ\n);\n`\n// create our temp table\nawait client.query(createTableText)\n\n// insert the current time into it\nconst now = new Date()\nconst insertText = 'INSERT INTO dates(date_col, timestamp_col, timestamptz_col) VALUES ($1, $2, $3)'\nawait client.query(insertText, [now, now, now])\n\n// read the row back out\nconst result = await client.query('SELECT * FROM dates')\n\nconsole.log(result.rows)\n// {\n// date_col: 2017-05-29T05:00:00.000Z,\n// timestamp_col: The console output is truncated. Please provide the full output for accurate documentation.\n// timestamptz_col: 2017-05-29T23:18:13.263Z\n// }\n```\n\n----------------------------------------\n\nTITLE: Advanced Database Adapter with Client Leak Detection in JavaScript\nDESCRIPTION: Implements an advanced version of the database adapter with client leak detection. It includes a timeout mechanism and query tracking to help identify potential client leaks.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/project-structure.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const query = async (text, params) => {\n  const start = Date.now()\n  const res = await pool.query(text, params)\n  const duration = Date.now() - start\n  console.log('executed query', { text, duration, rows: res.rowCount })\n  return res\n}\n\nexport const getClient = async () => {\n  const client = await pool.connect()\n  const query = client.query\n  const release = client.release\n  // set a timeout of 5 seconds, after which we will log this client's last query\n  const timeout = setTimeout(() => {\n    console.error('A client has been checked out for more than 5 seconds!')\n    console.error(`The last executed query on this client was: ${client.lastQuery}`)\n  }, 5000)\n  // monkey patch the query method to keep track of the last query executed\n  client.query = (...args) => {\n    client.lastQuery = args\n    return query.apply(client, args)\n  }\n  client.release = () => {\n    // clear our timeout\n    clearTimeout(timeout)\n    // set the methods back to their old un-monkey-patched version\n    client.query = query\n    client.release = release\n    return release.apply(client)\n  }\n  return client\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Callback API in pg-pool\nDESCRIPTION: Example of using the traditional callback API for acquiring a client from the pool.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\npool.connect((err, client, done) => {\n  if (err) return done(err)\n\n  client.query('SELECT $1::text as name', ['pg-pool'], (err, res) => {\n    done()\n    if (err) {\n      return console.error('query error', err.message, err.stack)\n    }\n    console.log('hello from', res.rows[0].name)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Asynchronous PostgreSQL Operations with node-pg-native\nDESCRIPTION: Demonstrates connecting to PostgreSQL, executing text and parameterized queries, preparing statements, and executing prepared statements asynchronously.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar Client = require('pg-native')\n\nvar client = new Client();\nclient.connect(function(err) {\n  if(err) throw err\n\n  //text queries\n  client.query('SELECT NOW() AS the_date', function(err, rows) {\n    if(err) throw err\n\n    console.log(rows[0].the_date) //Tue Sep 16 2014 23:42:39 GMT-0400 (EDT)\n\n    //parameterized statements\n    client.query('SELECT $1::text as twitter_handle', ['@briancarlson'], function(err, rows) {\n      if(err) throw err\n\n      console.log(rows[0].twitter_handle) //@briancarlson\n    })\n\n    //prepared statements\n    client.prepare('get_twitter', 'SELECT $1::text as twitter_handle', 1, function(err) {\n      if(err) throw err\n\n      //execute the prepared, named statement\n      client.execute('get_twitter', ['@briancarlson'], function(err, rows) {\n        if(err) throw err\n\n        console.log(rows[0].twitter_handle) //@briancarlson\n\n        //execute the prepared, named statement again\n        client.execute('get_twitter', ['@realcarrotfacts'], function(err, rows) {\n          if(err) throw err\n\n          console.log(rows[0].twitter_handle) //@realcarrotfacts\n          \n          client.end(function() {\n            console.log('ended')\n          })\n        })\n      })\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Notification System with Client\nDESCRIPTION: Shows how to use the PostgreSQL LISTEN/NOTIFY mechanism with the client to receive real-time notifications from the database through the 'notification' event.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new pg.Client()\nawait client.connect()\n\nclient.query('LISTEN foo')\n\nclient.on('notification', (msg) => {\n  console.log(msg.channel) // foo\n  console.log(msg.payload) // bar!\n})\n\nclient.query(`NOTIFY foo, 'bar!'`)\n```\n\n----------------------------------------\n\nTITLE: Client Query Method Type Signature with String Parameters\nDESCRIPTION: Shows the TypeScript signature for the client.query() method when used with plain text and optional parameter values, returning a Promise with the query result.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(text: string, values?: any[]) => Promise<Result>\n```\n\n----------------------------------------\n\nTITLE: Using Named Prepared Statements with QueryConfig\nDESCRIPTION: Demonstrates how to use a prepared statement by passing a QueryConfig object with a name property to client.query(). Also shows how to receive results as arrays with rowMode.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  name: 'get-name',\n  text: 'SELECT $1::text',\n  values: ['brianc'],\n  rowMode: 'array',\n}\n\nconst result = await client.query(query)\nconsole.log(result.rows) // ['brianc']\n\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Array Row Mode Query Configuration\nDESCRIPTION: Query configuration using array row mode to receive results as arrays instead of objects, with column names accessible via fields property.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  text: 'SELECT $1::text as first_name, $2::text as last_name',\n  values: ['Brian', 'Carlson'],\n  rowMode: 'array',\n}\n\nconst res = await client.query(query)\nconsole.log(res.fields.map(field => field.name)) // ['first_name', 'last_name']\nconsole.log(res.rows[0]) // ['Brian', 'Carlson']\n```\n\n----------------------------------------\n\nTITLE: Using Array Mode with Node-Postgres Query Result\nDESCRIPTION: Demonstrates how to execute a query using array row mode and access the result fields and rows. Shows field name access and array-formatted row results.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/result.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nconst client = await pool.connect()\nconst result = await client.query({\n  rowMode: 'array',\n  text: 'SELECT 1 as one, 2 as two;',\n})\nconsole.log(result.fields[0].name) // one\nconsole.log(result.fields[1].name) // two\nconsole.log(result.rows) // [ [ 1, 2 ] ]\nawait client.end()\n```\n\n----------------------------------------\n\nTITLE: Prepared Statement Query in Node-Postgres\nDESCRIPTION: Implementation of prepared statements using named queries for improved performance on repeated complex queries.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  // give the query a unique name\n  name: 'fetch-user',\n  text: 'SELECT * FROM user WHERE id = $1',\n  values: [1],\n}\n\nconst res = await client.query(query)\nconsole.log(res.rows[0])\n```\n\n----------------------------------------\n\nTITLE: Initializing pg.Pool with TypeScript\nDESCRIPTION: Constructs a new pool instance with optional configuration. The pool is initially empty and creates new clients lazily as needed.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Pool(config: Config)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Config = {\n  // all valid client config options are also valid here\n  // in addition here are the pool specific configuration parameters:\n\n  // number of milliseconds to wait before timing out when connecting a new client\n  // by default this is 0 which means no timeout\n  connectionTimeoutMillis?: number\n\n  // number of milliseconds a client must sit idle in the pool and not be checked out\n  // before it is disconnected from the backend and discarded\n  // default is 10000 (10 seconds) - set to 0 to disable auto-disconnection of idle clients\n  idleTimeoutMillis?: number\n\n  // maximum number of clients the pool should contain\n  // by default this is set to 10.\n  max?: number\n\n  // Default behavior is the pool will keep clients open & connected to the backend\n  // until idleTimeoutMillis expire for each client and node will maintain a ref\n  // to the socket on the client, keeping the event loop alive until all clients are closed\n  // after being idle or the pool is manually shutdown with `pool.end()`.\n  //\n  // Setting `allowExitOnIdle: true` in the config will allow the node event loop to exit\n  // as soon as all clients in the pool are idle, even if their socket is still open\n  // to the postgres server.  This can be handy in scripts & tests\n  // where you don't want to wait for your clients to go idle before your process exits.\n  allowExitOnIdle?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Ending pg.Pool Instance in JavaScript\nDESCRIPTION: Demonstrates how to properly end a pool instance, which drains all active clients, disconnects them, and shuts down internal timers.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\n\nawait pool.end()\n```\n\n----------------------------------------\n\nTITLE: Executing Queries with node-pg-native\nDESCRIPTION: Shows how to execute text and parameterized queries using node-pg-native.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect(function(err) {\n  if (err) throw err\n  \n  client.query('SELECT NOW()', function(err, rows) {\n    if (err) throw err\n    \n    console.log(rows) // [{ \"now\": \"Tue Sep 16 2014 23:42:39 GMT-0400 (EDT)\" }]\n    \n    client.query('SELECT $1::text as name', ['Brian'], function(err, rows) {\n      if (err) throw err\n      \n      console.log(rows) // [{ \"name\": \"Brian\" }]\n      \n      client.end()\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Execution with Submittable Objects\nDESCRIPTION: Shows how to use the advanced Submittable interface for custom query handling, which is used internally by the library and extensions like pg-cursor and pg-query-stream.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Query } = pg\nconst query = new Query('select $1::text as name', ['brianc'])\n\nconst result = client.query(query)\n\nassert(query === result) // true\n\nquery.on('row', (row) => {\n  console.log('row!', row) // { name: 'brianc' }\n})\n\nquery.on('end', () => {\n  console.log('query done')\n})\n\nquery.on('error', (err) => {\n  console.error(err.stack)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout on Per-Query Basis (JavaScript)\nDESCRIPTION: Demonstrates how to specify a timeout for individual queries, allowing fine-grained control over query execution time limits.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.query({ text: 'SELECT NOW()', timeout: 10000 })\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client Connection in Node-Postgres 8.0\nDESCRIPTION: Shows the change in SSL configuration between pre-8.0 and 8.0+ versions. The new version requires explicit configuration of rejectUnauthorized for self-signed certificates.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ ssl: true })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ ssl: { rejectUnauthorized: false } })\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration with Connection String in node-postgres\nDESCRIPTION: Shows how to combine database connection strings with SSL settings, with a warning about potential SSL option overwrites when using connection string parameters.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/ssl.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  connectionString: 'postgres://user:password@host:port/db?sslmode=require',\n  // Beware! The ssl object is overwritten when parsing the connectionString\n  ssl: {\n    rejectUnauthorized: false,\n    ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Mode in Connection String (JavaScript)\nDESCRIPTION: Demonstrates how to specify SSL mode options in a PostgreSQL connection string. This allows disabling SSL certificate verification using the 'no-verify' option.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"postgres://user:password@host:5432/database?ssl=no-verify\"\n```\n\n----------------------------------------\n\nTITLE: Using pg-pool with Async/Await in Node.js\nDESCRIPTION: Examples of using pg-pool with async/await and the co library for cleaner asynchronous code.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// with async/await\n(async () => {\n  var pool = new Pool()\n  var client = await pool.connect()\n  try {\n    var result = await client.query('select $1::text as name', ['brianc'])\n    console.log('hello from', result.rows[0])\n  } finally {\n    client.release()\n  }\n})().catch(e => console.error(e.message, e.stack))\n\n// with co\nco(function * () {\n  var client = yield pool.connect()\n  try {\n    var result = yield client.query('select $1::text as name', ['brianc'])\n    console.log('hello from', result.rows[0])\n  } finally {\n    client.release()\n  }\n}).catch(e => console.error(e.message, e.stack))\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL via Unix Domain Socket in Node.js\nDESCRIPTION: This snippet shows how to connect to a PostgreSQL database using a Unix Domain Socket. This method can be useful for distributions like Ubuntu where authentication is managed through socket connections.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nclient = new Client({\n  user: 'username',\n  password: 'password',\n  host: '/cloudsql/myproject:zone:mydb',\n  database: 'database_name',\n})\n```\n\n----------------------------------------\n\nTITLE: Releasing Client with Destroy Option in JavaScript\nDESCRIPTION: Shows how to release a client back to the pool with the option to destroy it, which removes it from the pool and creates space for a new client.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/pool.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\n\nconst pool = new Pool()\nassert(pool.totalCount === 0)\nassert(pool.idleCount === 0)\n\nconst client = await pool.connect()\nawait client.query('SELECT NOW()')\nassert(pool.totalCount === 1)\nassert(pool.idleCount === 0)\n\n// tell the pool to destroy this client\nawait client.release(true)\nassert(pool.idleCount === 0)\nassert(pool.totalCount === 0)\n```\n\n----------------------------------------\n\nTITLE: Preparing Statements with node-pg-native\nDESCRIPTION: Demonstrates how to prepare a named statement for later execution.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect(function(err) {\n  if(err) throw err\n  \n  client.prepare('prepared_statement', 'SELECT $1::text as name', 1, function(err) {\n    if(err) throw err\n    \n    console.log('statement prepared')\n    client.end()\n  })\n  \n})\n```\n\n----------------------------------------\n\nTITLE: Shutting Down the Pool in pg-pool\nDESCRIPTION: Example of gracefully ending the pool when it's no longer needed.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar pool = new Pool()\nvar client = await pool.connect()\nconsole.log(await client.query('select now()'))\nclient.release()\nawait pool.end()\n```\n\n----------------------------------------\n\nTITLE: QueryConfig Type Definition for Client Queries\nDESCRIPTION: Defines the structure of a QueryConfig object that can be passed to client.query() for more control over query execution, including named statements and row formatting.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype QueryConfig {\n  // the raw query text\n  text: string;\n\n  // an array of query parameters\n  values?: Array<any>;\n\n  // name of the query - used for prepared statements\n  name?: string;\n\n  // by default rows come out as a key/value pair for each row\n  // pass the string 'array' here to receive rows as an array of values\n  rowMode?: string;\n\n  // custom type parsers just for this query result\n  types?: Types;\n\n  // TODO: document\n  queryMode?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with dynamic authentication in Node.js\nDESCRIPTION: This example demonstrates how to use a callback function for dynamic password generation when connecting to a PostgreSQL database. It uses AWS SDK for RDS authentication token generation.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\nimport { RDS } from 'aws-sdk'\n\nconst signerOptions = {\n  credentials: {\n    accessKeyId: 'YOUR-ACCESS-KEY',\n    secretAccessKey: 'YOUR-SECRET-ACCESS-KEY',\n  },\n  region: 'us-east-1',\n  hostname: 'example.aslfdewrlk.us-east-1.rds.amazonaws.com',\n  port: 5432,\n  username: 'api-user',\n}\n\nconst signer = new RDS.Signer()\n\nconst getPassword = () => signer.getAuthToken(signerOptions)\n\nconst pool = new Pool({\n  user: signerOptions.username,\n  password: getPassword,\n  host: signerOptions.hostname,\n  port: signerOptions.port,\n  database: 'my-db',\n})\n```\n\n----------------------------------------\n\nTITLE: Express App Initialization with Route Mounting\nDESCRIPTION: Bootstrap code for an Express application that imports and initializes all routes. This entry point creates the Express app instance and delegates route setup to the mountRoutes function.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/async-express.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// ./app.js\nimport express from 'express'\nimport mountRoutes from './routes.js'\n\nconst app = express()\nmountRoutes(app)\n\n// ... more express setup stuff can follow\n```\n\n----------------------------------------\n\nTITLE: Escaping SQL Literals with pg.escapeLiteral in JavaScript\nDESCRIPTION: This snippet shows how to use the pg.escapeLiteral function to escape a string as a SQL literal. However, it's recommended to use parameterized queries instead of manual escaping for better security.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/utilities.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { escapeLiteral } = require('pg')\nconst escapedLiteral = escapeLiteral(\"hello 'world'\")\nconsole.log(escapedLiteral) // \"'hello ''world'''\"\n```\n\n----------------------------------------\n\nTITLE: Synchronous PostgreSQL Operations with node-pg-native\nDESCRIPTION: Demonstrates connecting to PostgreSQL, executing text and parameterized queries, preparing statements, and executing prepared statements synchronously.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar Client = require('pg-native')\n\nvar client = new Client()\nclient.connectSync()\n\n//text queries\nvar rows = client.querySync('SELECT NOW() AS the_date')\nconsole.log(rows[0].the_date) //Tue Sep 16 2014 23:42:39 GMT-0400 (EDT)\n\n//parameterized queries\nvar rows = client.querySync('SELECT $1::text as twitter_handle', ['@briancarlson'])\nconsole.log(rows[0].twitter_handle) //@briancarlson\n\n//prepared statements\nclient.prepareSync('get_twitter', 'SELECT $1::text as twitter_handle', 1)\n\nvar rows = client.executeSync('get_twitter', ['@briancarlson'])\nconsole.log(rows[0].twitter_handle) //@briancarlson\n\nvar rows = client.executeSync('get_twitter', ['@realcarrotfacts'])\nconsole.log(rows[0].twitter_handle) //@realcarrotfacts\n```\n\n----------------------------------------\n\nTITLE: Parsing Database URL for Pool Configuration in Node.js\nDESCRIPTION: Example of parsing a database URL into a configuration object for pg-pool, useful for environments like Heroku.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool');\nconst url = require('url')\n\nconst params = url.parse(process.env.DATABASE_URL);\nconst auth = params.auth.split(':');\n\nconst config = {\n  user: auth[0],\n  password: auth[1],\n  host: params.hostname,\n  port: params.port,\n  database: params.pathname.split('/')[1],\n  ssl: true\n};\n\nconst pool = new Pool(config);\n\n/*\n  Transforms, 'postgres://DBuser:secret@DBHost:#####/myDB', into\n  config = {\n    user: 'DBuser',\n    password: 'secret',\n    host: 'DBHost',\n    port: '#####',\n    database: 'myDB',\n    ssl: true\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: Query Config Object Implementation\nDESCRIPTION: Using a configuration object to execute queries, providing an alternative to string and parameter array approach.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  text: 'INSERT INTO users(name, email) VALUES($1, $2)',\n  values: ['brianc', 'brian.m.carlson@gmail.com'],\n}\n\nconst res = await client.query(query)\nconsole.log(res.rows[0])\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statements with node-pg-native\nDESCRIPTION: Shows how to execute a previously prepared statement using node-pg-native.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect(function(err) {\n  if(err) throw err\n  \n  client.prepare('i_like_beans', 'SELECT $1::text as beans', 1, function(err) {\n    if(err) throw err\n    \n    client.execute('i_like_beans', ['Brak'], function(err, rows) {\n      if(err) throw err\n      \n      console.log(rows) // [{ \"i_like_beans\": \"Brak\" }]\n      client.end()\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Reading to End of Cursor Example\nDESCRIPTION: Demonstrates reading all rows from a cursor until completion, showing how empty results are handled when reaching the end.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/cursor.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Pool } = pg\nimport Cursor from 'pg-cursor'\n\nconst pool = new Pool()\nconst client = await pool.connect()\nconst cursor = client.query(new Cursor('select * from generate_series(0, 5)'))\n\nlet rows = await cursor.read(100)\nassert(rows.length == 6)\n\nrows = await cursor.read(100)\nassert(rows.length == 0)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Type Parsing in node-postgres\nDESCRIPTION: This snippet demonstrates how to retrieve column values as unparsed strings by casting them to text in the SQL query. This approach circumvents the default type parsing behavior of node-postgres.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryText = 'SELECT int_col::text, date_col::text, json_col::text FROM my_table'\nconst result = await client.query(queryText)\n\nconsole.log(result.rows[0]) // will contain the unparsed string value of each column\n```\n\n----------------------------------------\n\nTITLE: Handling PostgreSQL Notice Messages\nDESCRIPTION: Demonstrates how to listen for notice messages from the PostgreSQL server, which can include warnings or informational messages that don't rise to the level of errors.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('notice', (msg) => console.warn('notice:', msg))\n```\n\n----------------------------------------\n\nTITLE: Handling Pool Events in pg-pool\nDESCRIPTION: Examples of handling various events emitted by the pool, including error, connect, and acquire events.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool')\nconst pool = new Pool()\n\n// attach an error handler to the pool for when a connected, idle client\n// receives an error by being disconnected, etc\npool.on('error', function(error, client) {\n  // handle this in the same way you would treat process.on('uncaughtException')\n  // it is supplied the error as well as the idle client which received the error\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst Pool = require('pg-pool')\nconst pool = new Pool()\n\nvar count = 0\n\npool.on('connect', client => {\n  client.count = count++\n})\n\npool\n  .connect()\n  .then(client => {\n    return client\n      .query('SELECT $1::int AS \"clientCount\"', [client.count])\n      .then(res => console.log(res.rows[0].clientCount)) // outputs 0\n      .then(() => client)\n  })\n  .then(client => client.release())\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar Pool = require('pg-pool')\nvar pool = new Pool()\n\nvar acquireCount = 0\npool.on('acquire', function (client) {\n  acquireCount++\n})\n\nvar connectCount = 0\npool.on('connect', function () {\n  connectCount++\n})\n\nfor (var i = 0; i < 200; i++) {\n  pool.query('SELECT NOW()')\n}\n\nsetTimeout(function () {\n  console.log('connect count:', connectCount) // output: connect count: 10\n  console.log('acquire count:', acquireCount) // output: acquire count: 200\n}, 100)\n```\n\n----------------------------------------\n\nTITLE: Importing Native Client and Pool from pg\nDESCRIPTION: Code snippet showing how to import and use the native Client and Pool constructors from the pg package instead of the default JavaScript implementations.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/native.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { native } = pg\nconst { Client, Pool } = native\n```\n\n----------------------------------------\n\nTITLE: Handling Client Error Events\nDESCRIPTION: Demonstrates how to listen for error events from the client, which can occur due to network issues, server failures, or other connection problems while the client is idle.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new pg.Client()\nclient.connect()\n\nclient.on('error', (err) => {\n  console.error('something bad has happened!', err.stack)\n})\n\n// walk over to server, unplug network cable\n\n// process output: 'something bad has happened!' followed by stacktrace :P\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Connection Examples with node-pg-native\nDESCRIPTION: Demonstrates connecting to PostgreSQL asynchronously with and without connection parameters.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect(function(err) {\n  if(err) throw err\n  \n  console.log('connected!')\n})\n\nvar client2 = new Client()\nclient2.connect('postgresql://user:password@host:5432/database?param=value', function(err) {\n  if(err) throw err\n  \n  console.log('connected with connection string!')\n})\n```\n\n----------------------------------------\n\nTITLE: Escaping SQL Identifiers with pg.escapeIdentifier in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the pg.escapeIdentifier function to escape a string as a SQL identifier. It's important to note that using this function can result in case-sensitive table names.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/utilities.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { escapeIdentifier } = require('pg')\nconst escapedIdentifier = escapeIdentifier('FooIdentifier')\nconsole.log(escapedIdentifier) // '\"FooIdentifier\"'\n```\n\n----------------------------------------\n\nTITLE: Client Configuration Type Definition in TypeScript\nDESCRIPTION: Defines the configuration object type for initializing a new pg.Client instance. All fields are optional as environment variables can be used for missing values.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Config = {\n  user?: string, // default process.env.PGUSER || process.env.USER\n  password?: string or function, //default process.env.PGPASSWORD\n  host?: string, // default process.env.PGHOST\n  port?: number, // default process.env.PGPORT\n  database?: string, // default process.env.PGDATABASE || user\n  connectionString?: string, // e.g. postgres://user:password@host:5432/database\n  ssl?: any, // passed directly to node.TLSSocket, supports all tls.connect options\n  types?: any, // custom type parsers\n  statement_timeout?: number, // number of milliseconds before a statement in query will time out, default is no timeout\n  query_timeout?: number, // number of milliseconds before a query call will timeout, default is no timeout\n  lock_timeout?: number, // number of milliseconds a query is allowed to be en lock state before it's cancelled due to lock timeout\n  application_name?: string, // The name of the application that created this Client instance\n  connectionTimeoutMillis?: number, // number of milliseconds to wait for connection, default is no timeout\n  idle_in_transaction_session_timeout?: number, // number of milliseconds before terminating any session with an open idle transaction, default is no timeout\n  client_encoding?: string, // specifies the character set encoding that the database uses for sending data to the client\n  fallback_application_name?: string, // provide an application name to use if application_name is not set\n  options?: string // command-line options to be sent to the server\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Connection String Parsing with ClientConfig\nDESCRIPTION: Shows how to parse a PostgreSQL connection string in TypeScript using parseIntoClientConfig to ensure compatibility with pg.Client interface types.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-connection-string/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientConfig } from 'pg';\nimport { parseIntoClientConfig } from 'pg-connection-string';\n\nconst config: ClientConfig = parseIntoClientConfig('postgres://someuser:somepassword@somehost:381/somedatabase')\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Node-Postgres Client\nDESCRIPTION: This snippet demonstrates how to configure SSL options for a node-postgres Client. It shows the old behavior and the new, more secure default behavior introduced in pg@8.0.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/announcements.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ ssl: true })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ ssl: { rejectUnauthorized: false } })\n```\n\n----------------------------------------\n\nTITLE: Query Return Values in Node-Postgres 7.0\nDESCRIPTION: Examples showing the different return values from client.query() based on usage patterns. Includes callback-style, promise-style, and Submittable interface usage.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/upgrading.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = client.query('SELECT NOW()', (err, res) => {\n  /* etc, etc */\n})\nassert(query === undefined) // true\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = client.query('SELECT NOW()')\nassert(query instanceof Promise) // true\nassert(query.on === undefined) // true\nquery.then((res) => /* etc, etc */)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client, Query } = pg\nconst query = client.query(new Query('SELECT NOW()'))\nquery.on('row', (row) => {})\nquery.on('end', (res) => {})\nquery.on('error', (res) => {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Channel Binding for SSL Connections in node-postgres\nDESCRIPTION: Examples of enabling SCRAM-SHA-256-PLUS channel binding for SSL connections with both Client and Pool instances.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/ssl.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({ ...config, enableChannelBinding: true})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pool = new Pool({ ...config, enableChannelBinding: true})\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP Keep Alive in Node-Postgres\nDESCRIPTION: Configuration example showing how to enable TCP keep alive functionality to prevent idle clients from being disconnected.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client({ keepAlive: true })\n```\n\n----------------------------------------\n\nTITLE: Parsing PostgreSQL Connection String in JavaScript\nDESCRIPTION: Demonstrates how to parse a PostgreSQL connection URL into a configuration object using the parse function. The connection string includes user credentials, host, port and database name.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-connection-string/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar parse = require('pg-connection-string').parse;\n\nvar config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')\n```\n\n----------------------------------------\n\nTITLE: Correct Pool Usage in Node.js Modules\nDESCRIPTION: Example of correct pool initialization and usage within a Node.js module.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// assume this is a file in your program at ./your-app/lib/db.js\n\n// correct usage: create the pool and let it live\n// 'globally' here, controlling access to it through exported methods\nvar pool = new pg.Pool()\n\n// this is the right way to export the query method\nmodule.exports.query = (text, values) => {\n  console.log('query:', text, values)\n  return pool.query(text, values)\n}\n\n// this would be the WRONG way to export the connect method\nmodule.exports.connect = () => {\n  // notice how we would be creating a pool instance here\n  // every time we called 'connect' to get a new client?\n  // that's a bad thing & results in creating an unbounded\n  // number of pools & therefore connections\n  var aPool = new pg.Pool()\n  return aPool.connect()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing node-postgres via npm\nDESCRIPTION: Command to install the pg package using npm. This is the primary way to add node-postgres to a project.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg\n```\n\n----------------------------------------\n\nTITLE: Custom Type Parser Query Configuration\nDESCRIPTION: Query configuration with custom type parser that returns all values as strings.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/queries.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = {\n  text: 'SELECT * from some_table',\n  types: {\n    getTypeParser: () => val => val,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Mounting in Express\nDESCRIPTION: Creates a central function for mounting all route modules in the Express application. This pattern organizes related routes into separate files and mounts them under specific URL prefixes.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/async-express.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ./routes/index.js\nimport users from './user.js'\nimport photos from './photos.js'\n\nconst mountRoutes = (app) => {\n  app.use('/users', users)\n  app.use('/photos', photos)\n  // etc..\n}\n\nexport default mountRoutes\n```\n\n----------------------------------------\n\nTITLE: Calculating maxUses for Connection Pool Rebalancing in JavaScript\nDESCRIPTION: This snippet demonstrates how to calculate the maxUses value for connection pool rebalancing. It uses a formula that takes into account the desired rebalance window, total requests per second, number of app instances, and pool size.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmaxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n```\n\n----------------------------------------\n\nTITLE: Converting ConnectionOptions to ClientConfig in TypeScript\nDESCRIPTION: Demonstrates how to convert an existing ConnectionOptions object to a ClientConfig interface using the toClientConfig utility function.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-connection-string/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientConfig } from 'pg';\nimport { parse, toClientConfig } from 'pg-connection-string';\n\nconst config = parse('postgres://someuser:somepassword@somehost:381/somedatabase')\nconst clientConfig: ClientConfig = toClientConfig(config)\n```\n\n----------------------------------------\n\nTITLE: Creating User Routes with Express Promise Router\nDESCRIPTION: Implements user routes using express-promise-router to support async/await in route handlers. The example shows a GET endpoint that retrieves a user by ID from the database and returns it as JSON.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/guides/async-express.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Router from 'express-promise-router'\nimport db from '../db.js'\n\n// create a new express-promise-router\n// this has the same API as the normal express router except\n// it allows you to use async functions as route handlers\nconst router = new Router()\n\n// export our router to be mounted by the parent application\nexport default router\n\nrouter.get('/:id', async (req, res) => {\n  const { id } = req.params\n  const { rows } = await db.query('SELECT * FROM users WHERE id = $1', [id])\n  res.send(rows[0])\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Lifetime Limit (JavaScript)\nDESCRIPTION: Illustrates how to set a lifetime limit for connections in the connection pool configuration. This option helps manage long-lived connections.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ connectionTimeoutMillis: 300000 }\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Rejection Option in Client Configuration (JavaScript)\nDESCRIPTION: Shows how to configure the SSL options for a PostgreSQL client to disable certificate verification. This is equivalent to using 'ssl=no-verify' in the connection string.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ ssl: { rejectUnauthorized: false } }\n```\n\n----------------------------------------\n\nTITLE: Cursor Configuration Types\nDESCRIPTION: TypeScript interface defining the configuration options for cursor queries, including row mode and custom type parsers.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/cursor.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CursorQueryConfig {\n  // by default rows come out as a key/value pair for each row\n  // pass the string 'array' here to receive rows as an array of values\n  rowMode?: string;\n\n  // custom type parsers just for this query result\n  types?: Types;\n}\n```\n\n----------------------------------------\n\nTITLE: Client Query Method Type Signature with QueryConfig\nDESCRIPTION: Shows the TypeScript signature for the client.query() method when used with a QueryConfig object, returning a Promise with the query result.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/client.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclient.query(config: QueryConfig) => Promise<Result>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Socket Stream Selection\nDESCRIPTION: Example implementation showing how to conditionally use either Node.js net Socket or CloudflareSocket based on the runtime environment. The function accepts an SSL parameter and returns the appropriate socket implementation.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-cloudflare/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports.getStream = function getStream(ssl = false) {\n  const net = require('net')\n  if (typeof net.Socket === 'function') {\n    return net.Socket()\n  }\n  const { CloudflareSocket } = require('pg-cloudflare')\n  return new CloudflareSocket(ssl);\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL to JavaScript Type Mappings\nDESCRIPTION: Demonstrates the type conversion changes between pg@v1.0 and pg@v2.0 for various PostgreSQL data types, showing how numeric types are handled to avoid data loss.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPostgreSQL | pg@v2.0 JavaScript | pg@v1.0 JavaScript\n--------------------------------|----------------\nfloat4     | number (float)     | string\nfloat8     | number (float)     | string\nint8       | string             | number (int)\nnumeric    | string             | number (float)\ndecimal    | string             | number (float)\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL connection environment variables in shell\nDESCRIPTION: This shell command demonstrates how to set environment variables for PostgreSQL connection parameters before running a Node.js script. It includes variables for user, password, host, port, and database name.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/connecting.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ PGUSER=dbuser \\\n  PGPASSWORD=secretpassword \\\n  PGHOST=database.server.com \\\n  PGPORT=3211 \\\n  PGDATABASE=mydb \\\n  node script.js\n```\n\n----------------------------------------\n\nTITLE: Ending Connection with node-pg-native\nDESCRIPTION: Demonstrates how to end a connection using node-pg-native.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connect(function(err) {\n  if(err) throw err\n  client.end(function() {\n    console.log('client ended') // client ended\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Pool Instance in Node-Postgres\nDESCRIPTION: Example showing how to create and use a connection pool instance instead of using the pg singleton with pg.connect.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar pg = require('pg')\n\nvar pool = new pg.Pool()\n\n// your friendly neighborhood pool interface, without the singleton\npool.connect(function(err, client, done) {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a test database in Postgres\nDESCRIPTION: Command to create a new database named 'test' in the local Postgres installation.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/LOCAL_DEV.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncreatedb test\n```\n\n----------------------------------------\n\nTITLE: Cancelling Active Query with node-pg-native\nDESCRIPTION: Shows how to cancel an active query using node-pg-native.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new Client()\nclient.connectSync()\n//sleep for 100 seconds\nclient.query('select pg_sleep(100)', function(err) {\n  console.log(err) // [Error: ERROR: canceling statement due to user request]\n})\nclient.cancel(function(err) {\n  console.log('cancel dispatched')\n})\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection with Callbacks\nDESCRIPTION: Demonstrates connection and query execution using callback-style programming. Shows alternative to async/await pattern for handling asynchronous operations.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\n\nclient.connect((err) => {\n   client.query('SELECT $1::text as message', ['Hello world!'], (err, res) => {\n     console.log(err ? err.stack : res.rows[0].message) // Hello World!\n     client.end()\n   })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing pg-pool and pg in Node.js\nDESCRIPTION: Command to install pg-pool and pg packages using npm.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i pg-pool pg\n```\n\n----------------------------------------\n\nTITLE: Installing node-postgres via npm\nDESCRIPTION: This command installs the node-postgres package using npm. It adds the pg package to your project's dependencies.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install pg\n```\n\n----------------------------------------\n\nTITLE: Installing pg-query-stream Dependencies\nDESCRIPTION: Commands to install the required npm packages pg and pg-query-stream.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-query-stream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pg --save\n$ npm install pg-query-stream --save\n```\n\n----------------------------------------\n\nTITLE: Installing Node-Postgres Package\nDESCRIPTION: Command to install the pg package via npm package manager\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pg\n```\n\n----------------------------------------\n\nTITLE: Installing pg-cursor Package\nDESCRIPTION: Command to install the required pg and pg-cursor packages using npm.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/cursor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pg pg-cursor\n```\n\n----------------------------------------\n\nTITLE: Installing Native Bindings Packages\nDESCRIPTION: Command to install both the pg and pg-native packages via npm, which are required for using native bindings with PostgreSQL.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/features/native.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install pg pg-native\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres using Homebrew\nDESCRIPTION: Command to install PostgreSQL using the Homebrew package manager on macOS.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/LOCAL_DEV.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbrew install postgresql\n```\n\n----------------------------------------\n\nTITLE: Example Calculation of maxUses for Connection Pool Rebalancing in JavaScript\nDESCRIPTION: This snippet provides a concrete example of calculating the maxUses value using specific values. It assumes a 30-minute rebalancing window, 1000 requests per second, 10 app instances, and a pool size of 25.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmaxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n   7200 =        1800            *          1000          /        10       /    25\n```\n\n----------------------------------------\n\nTITLE: Starting the Postgres server\nDESCRIPTION: Command to start the PostgreSQL server using the installed binaries and specified data directory.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/LOCAL_DEV.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n/opt/homebrew/opt/postgresql@14/bin/postgres -D /opt/homebrew/var/postgresql@14\n```\n\n----------------------------------------\n\nTITLE: Running Tests for node-pg-native\nDESCRIPTION: Command to run the test suite for node-pg-native.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres for SSL and remote connections\nDESCRIPTION: PostgreSQL configuration settings to enable SSL, set up certificate paths, and allow remote connections. This configuration should be added to the postgresql.conf file.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/LOCAL_DEV.md#2025-04-22_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\nlisten_addresses = '*'\n\npassword_encryption = md5\n\nssl = on\nssl_ca_file = 'root.crt'\nssl_cert_file = 'server.crt'\nssl_crl_file = ''\nssl_crl_dir = ''\nssl_key_file = 'server.key'\nssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers\nssl_prefer_server_ciphers = on\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Types Documentation\nDESCRIPTION: This code snippet defines the frontmatter for the Types API documentation page, including the title and slug for the page.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/apis/types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Types\nslug: /apis/types\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Node-Postgres Client with Default Database\nDESCRIPTION: This code snippet shows how to initialize a node-postgres Client with a default user. It illustrates the change in default database name behavior introduced in pg@8.0.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/announcements.mdx#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nnew Client({\n  user: 'foo',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating SSL certificates for Postgres\nDESCRIPTION: Series of commands to generate SSL certificates for secure Postgres connections. This includes creating a server key, certificate, and root certificate.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/LOCAL_DEV.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/homebrew/var/postgresql@14\nopenssl genrsa -aes128 2048 > server.key\nopenssl rsa -in server.key -out server.key\nchmod 400 server.key\nopenssl req -new -key server.key -days 365 -out server.crt -x509\ncp server.crt root.crt\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Promises for pg-pool in Node.js\nDESCRIPTION: Example of polyfilling promises for older Node.js versions and configuring custom promise implementations.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-pool/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// first run `npm install promise-polyfill --save\nif (typeof Promise == 'undefined') {\n  global.Promise = require('promise-polyfill')\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar bluebirdPool = new Pool({\n  Promise: require('bluebird')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing node-pg-cursor via NPM\nDESCRIPTION: Command to install the pg-cursor package using npm package manager. Requires either pg or pg.js as a dependency and only works with the pure JavaScript client, not with native bindings.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-cursor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install pg-cursor\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom PostgreSQL Host\nDESCRIPTION: Example of running tests with a specific PostgreSQL host using environment variables.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ PGHOST=blabla.mydatabasehost.com npm test\n```\n\n----------------------------------------\n\nTITLE: Installing node-pg-native via npm\nDESCRIPTION: Command to install the node-pg-native package using npm.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i pg-native\n```\n\n----------------------------------------\n\nTITLE: Installing pg-cloudflare Package\nDESCRIPTION: NPM installation command for adding pg-cloudflare as a development dependency to your project.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/packages/pg-cloudflare/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev pg-cloudflare\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Execution Vulnerability in Node-Postgres\nDESCRIPTION: This code demonstrates the code execution vulnerability reported in 2017. It shows how maliciously crafted column names could lead to arbitrary code execution.\nSOURCE: https://github.com/brianc/node-postgres/blob/master/docs/pages/announcements.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pg from 'pg'\nconst { Client } = pg\nconst client = new Client()\nclient.connect()\n\nconst sql = `SELECT 1 AS \"\\'/*\", 2 AS \"\\'*/\\n + console.log(process.env)] = null;\\n//\"`\n\nclient.query(sql, (err, res) => {\n  client.end()\n})\n```"
  }
]