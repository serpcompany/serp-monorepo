[
  {
    "owner": "apache",
    "repo": "incubator-kie-kogito-runtimes",
    "content": "TITLE: Adding Kogito Add-On Dependency in Maven POM\nDESCRIPTION: Demonstrates how to add a Kogito Add-On dependency to a Maven project's pom.xml file. This example uses the kie-addons-quarkus-process-management add-on.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.kie</groupId>\n    <artifactId>kie-addons-quarkus-process-management</artifactId>\n    <version>${kogito.version}</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kogito Maven Plugin in pom.xml\nDESCRIPTION: Maven plugin configuration for enabling Kogito code generation during the compile phase. The plugin generates necessary Java classes from Kogito assets like DMN, PMML, BPMN, and DRL files.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-maven-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<plugin>\n    <groupId>org.kie.kogito</groupId>\n    <artifactId>kogito-maven-plugin</artifactId>\n    <version>${version.org.kie.kogito}</version>\n    <executions>\n        <execution>\n            <phase>compile</phase>\n            <goals>\n              <goal>generateModel</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Process Management with Multiple Service Methods in Java\nDESCRIPTION: Demonstrates using multiple service methods to manage a process lifecycle, including creation, starting, and aborting. Shows how different component actions can be represented as distinct methods.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n   LocalProcessInstanceId lpid = svc.createProcess(processId, inputDataContext);\n   DataContext started = svc.start(lpid);\n   DataContext aborted = svc.abort(lpid);\n\n```\n\n----------------------------------------\n\nTITLE: Evaluating a DMN Decision Using Path-Based Identification in Java\nDESCRIPTION: Shows how to evaluate a DMN (Decision Model and Notation) decision using the path-based identification pattern. This demonstrates accessing a decision by namespace and name to perform an evaluation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n   LocalDecisionId decisionId = appRoot.get(DecisionIds.class).get(namespaceString, nameString);\n   DataContext result = svc.evaluate(decisionId, dataContext);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Generated Application Class in Java\nDESCRIPTION: Shows the structure of the main generated Application class, which serves as the entry point for the Kogito application. It includes methods for accessing different components like Processes and RuleUnits.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage org.kie.kogito.app;\n\npublic class Application extends org.kie.kogito.StaticApplication {\n\n  public Application() {\n    super(new ApplicationConfig());\n    loadEngines(new Processes(), new RuleUnits());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Kogito Engines in Custom Beans with Java\nDESCRIPTION: Illustrates how to inject and use Kogito engines (like Processes and DecisionModels) in custom application-scoped beans. This approach is preferred for both Spring and Quarkus scenarios.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.my.package;\n\n@ApplicationScoped\npublic class MyCustomBean {\n  \n  @Inject\n  private Processes processes;\n\n  @Inject\n  private DecisionModels decisionModels;\n  \n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding jBPM with Drools Spring Boot Starter to Maven Project\nDESCRIPTION: Adds the all-in-one jBPM with Drools Spring Boot starter to a Maven project. This starter includes support for Decisions, Rules, Process, Predictions and Serverless Workflow implementation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.jbpm</groupId>\n    <artifactId>jbpm-with-drools-spring-boot-starter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Process Management with CompletableFuture in Java\nDESCRIPTION: Shows how to manage process lifecycle asynchronously using CompletableFuture. Demonstrates chaining asynchronous operations for process creation and starting.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n   CompletableFuture<LocalProcessInstanceId> futureLpid = asyncSvc.createProcess(processId, inputDataContext);\n   CompletableFuture<DataContext> futureStarted = futureLpid.andThen(lpid -> asyncSvc.start(lpid));\n   ...\n\n```\n\n----------------------------------------\n\nTITLE: Adding Kogito Spring Boot BOM to Maven Project\nDESCRIPTION: Adds the Kogito Spring Boot BOM to a Maven project's dependency management section. This allows consistent versioning across all Kogito dependencies.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.kie.kogito</groupId>\n      <artifactId>kogito-spring-boot-bom</artifactId>\n      <version>${version.kogito}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Initializing ApplicationGenerator in Java\nDESCRIPTION: Creates an instance of ApplicationGenerator using a KogitoBuildContext. This is the main entry point for code generation in Kogito.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nApplicationGenerator appGen =\n        new ApplicationGenerator(context);\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Kogito Spring Boot Project\nDESCRIPTION: Command to generate a new Kogito project based on Spring Boot using Maven archetype. This creates a basic project structure with the specified group and artifact IDs.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.kie.kogito \\\n    -DarchetypeArtifactId=kogito-spring-boot-archetype \\\n    -DarchetypeVersion=2.0.0-SNAPSHOT \\\n    -DgroupId=com.company \\\n    -DartifactId=sample-kogito\n```\n\n----------------------------------------\n\nTITLE: Setting up Generators Manually in Java\nDESCRIPTION: Demonstrates how to manually set up Rule and Process generators using the ApplicationGenerator's setupGenerator method. This approach allows for explicit configuration of generators.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nappGen.setupGenerator(RuleCodegen.ofPath(context, ruleSourceDirectory));\n\nappGen.setupGenerator(ProcessCodegen.ofPath(context, processSourceDirectory));\n```\n\n----------------------------------------\n\nTITLE: Using Component Service with Path-Based Identification Pattern in Java\nDESCRIPTION: Demonstrates the general pattern for component interaction using a service implementation with path-based identification. The pattern shows how to access component services using a fluent API for path construction.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n   LocalId id = appRoot.get(MyComponent.class).get(\"componentName\").subs().get(\"someSubComponent\")\n   DataContext result = svc.evaluationMethod(id, dataContext);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Java Functions in Kogito Serverless Workflow\nDESCRIPTION: Shows how to declare and implement Java functions within a Kogito Serverless Workflow. The function is defined in the workflow JSON and implemented in a Java class, with examples of method signatures.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-serverless-workflow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"name\": \"myFunction\",\n      \"type\": \"custom\",\n      \"operation\": \"service:java:com.acme.MyInterfaceOrClass::myMethod\"\n    }\n  ]\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class MyInterfaceOrClass {\n\n    public void myMethod(JsonNode workflowData) {\n        // do whatever I want with the JsonNode:\n        // { \"workflowdata\": {} }\n    }\n\n    public JsonNode myMethod(JsonNode workflowData) {\n        // do whatever I want with the JsonNode:\n        // { \"workflowdata\": {} }\n        // return the modified content:\n        return workflowData;\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"states\": [\n    {\n      \"name\": \"myState\",\n      \"type\": \"operation\",\n      \"actions\": [\n        {\n          \"name\": \"callJavaFunctionAction\",\n          \"functionRef\": {\n            \"refName\": \"myFunction\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"states\": [\n    {\n      \"name\": \"myState\",\n      \"type\": \"operation\",\n      \"actions\": [\n        {\n          \"name\": \"callJavaFunctionAction\",\n          \"functionRef\": {\n            \"refName\": \"myFunction\",\n            \"arguments\": {\n              \"data\": \".my.path.to.data\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Subcomponents with Fluent API Path Construction in Java\nDESCRIPTION: Demonstrates how to construct paths to subcomponents (such as a decision service within a DMN model) using a fluent API for path construction. Shows the pattern for accessing nested resources.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n   LocalDecisionId decisionServiceId = appRoot.get(DecisionIds.class).get(namespaceString, nameString).services().get(serviceString);\n   DataContext result = svc.evaluate(decisionServiceId, dataContext);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Drools Rules Spring Boot Starter to Maven Project\nDESCRIPTION: Adds the Drools Rules engine (DRL) Spring Boot starter to a Maven project. This starter provides support for Drools Rule Language.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.drools</groupId>\n    <artifactId>drools-rules-spring-boot-starter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Rule for Checking Adult Status in Drools\nDESCRIPTION: A rule that identifies persons who are 18 or older and sets their adult status to true. Uses the modify statement to update the Person object.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_2\n\nLANGUAGE: drools\nCODE:\n```\nrule CheckAdult when\n    $p: /persons[ age >= 18 ]\nthen\n    modify($p) { setAdult(true) };\nend\n```\n\n----------------------------------------\n\nTITLE: Adding jBPM Spring Boot Starter to Maven Project\nDESCRIPTION: Adds the jBPM engine (BPMN) Spring Boot starter to a Maven project. This starter provides support for Business Process Model and Notation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.jbpm</groupId>\n    <artifactId>jbpm-spring-boot-starter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Traffic Violation DMN Model in XML\nDESCRIPTION: This XML snippet defines the overall structure of the DMN model for traffic violations. It includes namespace declarations and the root dmn:definitions element.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/TrafficViolation.txt#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version='1.0' encoding='UTF-8'?>\n<dmn:definitions xmlns:dmn=\"http://www.omg.org/spec/DMN/20180521/MODEL/\" xmlns=\"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\" xmlns:di=\"http://www.omg.org/spec/DMN/20180521/DI/\" xmlns:kie=\"http://www.drools.org/kie/dmn/1.2\" xmlns:feel=\"http://www.omg.org/spec/DMN/20180521/FEEL/\" xmlns:dmndi=\"http://www.omg.org/spec/DMN/20180521/DMNDI/\" xmlns:dc=\"http://www.omg.org/spec/DMN/20180521/DC/\" id=\"_1C792953-80DB-4B32-99EB-25FBE32BAF9E\" name=\"Traffic Violation\" expressionLanguage=\"http://www.omg.org/spec/DMN/20180521/FEEL/\" typeLanguage=\"http://www.omg.org/spec/DMN/20180521/FEEL/\" namespace=\"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\">\n  <!-- Content omitted for brevity -->\n</dmn:definitions>\n```\n\n----------------------------------------\n\nTITLE: Checking Adult Status Rule in Drools\nDESCRIPTION: Rule to check if a person is an adult (age >= 18) and set their adult status to true.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/drl1.txt#2025-04-23_snippet_1\n\nLANGUAGE: Drools\nCODE:\n```\nrule CheckAdult when\n    $p: /persons[ age >= 18 ]\nthen\n    modify($p) { setAdult(true) };\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Kogito Predictions Spring Boot Starter to Maven Project\nDESCRIPTION: Adds the Kogito Predictions (PMML) Spring Boot starter to a Maven project. This starter provides support for Predictive Model Markup Language.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.kie</groupId>\n    <artifactId>kie-predictions-spring-boot-starter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining DMN Item Definitions for Driver and Violation\nDESCRIPTION: This snippet defines the structure for the 'tDriver' and 'tViolation' item definitions in the DMN model. These definitions specify the data types and components for representing a driver and a traffic violation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/TrafficViolation.txt#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dmn:itemDefinition id=\"_63824D3F-9173-446D-A940-6A7F0FA056BB\" name=\"tDriver\" isCollection=\"false\">\n  <dmn:itemComponent id=\"_9DAB5DAA-3B44-4F6D-87F2-95125FB2FEE4\" name=\"Name\" isCollection=\"false\">\n    <dmn:typeRef>string</dmn:typeRef>\n  </dmn:itemComponent>\n  <dmn:itemComponent id=\"_856BA8FA-EF7B-4DF9-A1EE-E28263CE9955\" name=\"Age\" isCollection=\"false\">\n    <dmn:typeRef>number</dmn:typeRef>\n  </dmn:itemComponent>\n  <!-- Other components omitted for brevity -->\n</dmn:itemDefinition>\n\n<dmn:itemDefinition id=\"_40731093-0642-4588-9183-1660FC55053B\" name=\"tViolation\" isCollection=\"false\">\n  <dmn:itemComponent id=\"_39E88D9F-AE53-47AD-B3DE-8AB38D4F50B3\" name=\"Code\" isCollection=\"false\">\n    <dmn:typeRef>string</dmn:typeRef>\n  </dmn:itemComponent>\n  <!-- Other components omitted for brevity -->\n</dmn:itemDefinition>\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Tests for Generators in Java\nDESCRIPTION: Shows how to use @ParameterizedTest and KogitoContextTestUtils to test generators with different build contexts (Spring, Quarkus, Java). This approach ensures comprehensive testing across different platforms.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ParameterizedTest\n@MethodSource(\"org.kie.kogito.codegen.api.utils.KogitoContextTestUtils#contextBuilders\")\nvoid test(KogitoBuildContext.Builder contextBuilder) {\n  KogitoBuildContext context = contextBuilder.build();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kogito Spring Boot BOM in Maven Project\nDESCRIPTION: Example showing how to add the Kogito Spring Boot BOM dependency management to a Maven project. This BOM aligns Kogito libraries with Spring Boot dependencies.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-build/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.kie.kogito</groupId>\n      <artifactId>kogito-spring-boot-bom</artifactId>\n      <version>${kogito.version}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot Properties for Kubernetes Integration\nDESCRIPTION: Essential properties required for enabling Kubernetes client functionality in tests. These settings ensure the correct KubernetesClient bean is created for the application.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/addons/kubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nspring.main.cloud-platform=KUBERNETES\nspring.cloud.bootstrap.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Kogito BOM in Maven Project\nDESCRIPTION: Example showing how to add the main Kogito BOM dependency management to a Maven project. This BOM contains all libraries distributed and maintained by the Kogito project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-build/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.kie.kogito</groupId>\n      <artifactId>kogito-bom</artifactId>\n      <version>${kogito.version}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Defining AdultUnit Rule Unit in Drools\nDESCRIPTION: Declares the AdultUnit rule unit that extends RuleUnitData. It contains a DataStore of Person objects that will be processed by the rules.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_1\n\nLANGUAGE: drools\nCODE:\n```\ndeclare AdultUnit extends RuleUnitData\n   persons: DataStore<Person>\nend\n```\n\n----------------------------------------\n\nTITLE: Using EndpointDiscovery in Spring Boot Component\nDESCRIPTION: Example of a Spring Boot component that injects and uses the EndpointDiscovery service to find Kubernetes endpoints. The code demonstrates how to look up service endpoints by namespace and name.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/addons/kubernetes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Optional;\n\nimport org.kie.kogito.addons.k8s.Endpoint;\nimport org.kie.kogito.addons.k8s.EndpointDiscovery;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class EndpointFetcher {\n\n    @Autowired\n    EndpointDiscovery endpointDiscovery;\n\n    public void queryEndpoint(String namespace, String name) {\n        final Optional<Endpoint> endpoint = endpointDiscovery.findEndpoint(namespace, name);\n        if (endpoint.isEmpty()) {\n            System.out.println(\"Endpoint not found :(\");\n        } else {\n            System.out.println(\"This is the url for the service \" + name + \": \" + endpoint.get().getUrl());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Kogito Spring Boot BOM in Maven\nDESCRIPTION: XML snippet showing how to add the Kogito Spring Boot BOM in a Maven project's dependencyManagement section. This allows projects to inherit consistent dependency versions without specifying individual versions.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/bom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.kie.kogito</groupId>\n      <artifactId>kogito-spring-boot-bom</artifactId>\n      <version>${project.version}</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Keycloak Test Container Configuration\nDESCRIPTION: Examples of configuring Keycloak test containers in both Quarkus and Spring Boot environments.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTest\n@QuarkusTestResource(KeycloakQuarkusTestResource.class)\npublic class MyTest {\n   // ...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(SpringExtension.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n@ContextConfiguration(initializers = KeycloakSpringBootTestResource.class)\npublic class MyTest {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kogito Quarkus Add-ons Reference Table\nDESCRIPTION: Markdown table listing all available Kogito Quarkus add-ons with their artifact IDs and initial release versions. The table is organized alphabetically and includes various categories of add-ons such as events handling, monitoring, persistence options, and process management tools.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/addons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Add-On Description     | Artifact ID                                 | Since  |\n|------------------------|---------------------------------------------|--------|\n| Events Decisions       | kie-addons-quarkus-events-decisions      | 1.2.0  |\n| Events Predictions     | kogito-addons-quarkus-events-predictions    | 1.12.0 |\n| Events Rules           | drools-addons-quarkus-events-rules          | 1.12.0 |\n| Events Smallrye        | kogito-addons-quarkus-events-smallrye       | 0.3.0  |\n| Explainability         | kie-addons-quarkus-explainability           | 0.15.0 |\n| Jobs Management        | kogito-addons-quarkus-jobs-management       | 0.6.0  |\n| Knative Eventing       | kie-addons-quarkus-knative-eventing         | 1.10.0 |\n| Kubernetes             | kie-addons-quarkus-kubernetes               | 1.13.0 |\n| Mail                   | jbpm-addons-quarkus-mail                    | 1.6.0  |\n| Messaging              | kie-addons-quarkus-messaging                | 1.0.0  |\n| Monitoring Elastic     | kie-addons-quarkus-monitoring-elastic       | 1.2.0  |\n| Monitoring Prometheus  | kie-addons-quarkus-monitoring-prometheus    | 0.1.0  |\n| Persistence FileSystem | kie-addons-quarkus-persistence-filesystem   | 1.12.0 |\n| Persistence Infinispan | kie-addons-quarkus-persistence-infinispan   | 1.12.0 |\n| Persistence JDBC       | kie-addons-quarkus-persistence-jdbc         | 1.12.0 |\n| Persistence Kafka      | kie-addons-quarkus-persistence-kafka        | 1.4.0  |\n| Persistence MongoDB    | kie-addons-quarkus-persistence-mongodb      | 1.12.0 |\n| Persistence Postgresql | kie-addons-quarkus-persistence-postgresql   | 1.12.0 |\n| Process Management     | kie-addons-quarkus-process-management       | 0.3.0  |\n| Process SVG            | kie-addons-quarkus-process-svg              | 1.0.0  |\n| Task Management        | jbpm-addons-quarkus-task-management         | 1.4.0  |\n| Task Notification      | jbpm-addons-quarkus-task-notification       | 1.6.0  |\n| Tracing Decision       | kie-addons-quarkus-tracing-decision         | 0.11.0 |\n| Events MongoDB         | kogito-addons-quarkus-events-mongodb        | 1.11.0 |\n```\n\n----------------------------------------\n\nTITLE: Kafka Test Container and Client Configuration\nDESCRIPTION: Examples of configuring Kafka test containers and client usage in both Quarkus and Spring Boot environments.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.apache.kafka</groupId>\n  <artifactId>kafka-clients</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTest\n@QuarkusTestResource(KafkaQuarkusTestResource.class)\npublic class MyTest {\n   \n   @ConfigProperty(name = KafkaQuarkusTestResource.KOGITO_KAFKA_PROPERTY)\n   private String kafkaBootstrapServers;\n   // ...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@Autowired\nprivate KafkaTestClient kafkaClient;\n```\n\nLANGUAGE: java\nCODE:\n```\n@ConfigProperty(name = KafkaQuarkusTestResource.KOGITO_KAFKA_PROPERTY)\nprivate String kafkaBootstrapServers;\n\n@Test\npublic void myTest() {\n    KafkaClient kafkaClient = new KafkaClient(kafkaBootstrapServers);\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drools Decisions Spring Boot Starter to Maven Project\nDESCRIPTION: Adds the Drools Decisions (DMN) Spring Boot starter to a Maven project. This starter provides support for Decision Model and Notation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/starters/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.drools</groupId>\n    <artifactId>drools-decisions-spring-boot-starter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Sysout Functions in Kogito Serverless Workflow\nDESCRIPTION: Demonstrates how to define and use a sysout function for debugging purposes in a Kogito Serverless Workflow. The function is defined in the functions array and then referenced in a state's action.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-serverless-workflow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": [\n    {\n      \"name\": \"printMessage\",\n      \"metadata\": {\n        \"type\": \"sysout\"\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"states\": [\n    {\n      \"name\": \"myState\",\n      \"type\": \"operation\",\n      \"actions\": [\n        {\n          \"name\": \"printAction\",\n          \"functionRef\": {\n            \"refName\": \"printMessage\",\n            \"arguments\": {\n              \"message\": \".\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Infinispan Quarkus Test Configuration\nDESCRIPTION: Example of configuring Infinispan test containers in a Quarkus test environment.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTest\n@QuarkusTestResource(InfinispanQuarkusTestResource.class)\npublic class MyTest {\n   // ...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n@QuarkusTestResource(value = InfinispanQuarkusTestResource.Conditional.class)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes RoleBinding for Kogito Service\nDESCRIPTION: YAML configuration for granting the 'view' ClusterRole to a Kogito service's ServiceAccount, providing the necessary permissions for the Kubernetes Add-On to access service and pod information.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/kubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: my-kogito-service-view\nroleRef:\n  kind: ClusterRole\n  apiGroup: rbac.authorization.k8s.io\n  name: view\nsubjects:\n  - kind: ServiceAccount\n    name: my-kogito-service\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Kogito in Spring Boot\nDESCRIPTION: This snippet shows the configuration settings for connecting to a PostgreSQL database in a Spring Boot-based Kogito project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.username=kogito-user\nspring.datasource.password=kogito-pass\nspring.datasource.url=jdbc:postgresql://localhost:5432/kogito\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database for Kogito in Quarkus\nDESCRIPTION: This snippet demonstrates the configuration settings for connecting to an Oracle database in a Quarkus-based Kogito project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.datasource.db-kind=oracle\nquarkus.datasource.username=kogito-user\nquarkus.datasource.password=kogito-user\nquarkus.datasource.jdbc.url=jdbc:oracle:thin:@localhost:1521:kogito\n```\n\n----------------------------------------\n\nTITLE: Framework Agnostic Kogito Test Utils Dependency\nDESCRIPTION: Maven dependency configuration for framework-independent Kogito test utilities.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-test-utils</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database for Kogito in Spring Boot\nDESCRIPTION: This snippet shows the configuration settings for connecting to an Oracle database in a Spring Boot-based Kogito project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.username=workflow\nspring.datasource.password=workflow\nspring.datasource.url=jdbc:oracle:thin:@localhost:1521:kogito\n```\n\n----------------------------------------\n\nTITLE: Quarkus Test Utils Dependency\nDESCRIPTION: Maven dependency configuration for Quarkus-specific Kogito test utilities.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-quarkus-test-utils</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto DDL Creation in Kogito JDBC Persistence\nDESCRIPTION: This snippet shows how to enable automatic generation of necessary database objects by setting the 'autoDLL' property to true.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nkogito.persistence.auto.ddl=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarkus Bootstrap Maven Plugin for Runtime Module\nDESCRIPTION: XML configuration for setting up the quarkus-bootstrap-maven-plugin in a runtime module's pom.xml. This configuration is essential for proper extension descriptor generation and annotation processing.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-bootstrap-maven-plugin</artifactId>\n      <configuration>\n        <annotationProcessorPaths>\n          <path>\n            <groupId>io.quarkus</groupId>\n            <artifactId>quarkus-extension-processor</artifactId>\n            <version>${version.io.quarkus}</version>\n          </path>\n        </annotationProcessorPaths>\n      </configuration>\n      <executions>\n        <execution>\n          <goals>\n            <goal>extension-descriptor</goal>\n          </goals>\n          <phase>compile</phase>\n          <configuration>\n            <deployment>${project.groupId}:${project.artifactId}-deployment:${project.version}\n            </deployment>\n          </configuration>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Configuring Integration Test Dependencies for Extension Testing\nDESCRIPTION: XML configuration showing how to set up dependencies for integration testing of a Kogito Quarkus extension. This includes explicit dependency on the deployment module to ensure tests won't run if deployment compilation fails.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-quarkus-*-deployment</artifactId>\n  <version>${project.version}</version>\n  <type>pom</type>\n  <scope>test</scope>\n  <exclusions>\n    <exclusion>\n      <groupId>*</groupId>\n      <artifactId>*</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring KIE Flyway Properties\nDESCRIPTION: Example of a kie-flyway.properties file that defines the module name and SQL script locations for different database types.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/flyway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n# Name that identifies the module\nmodule.name=runtime-persistence\n\n# Script locations for the current module\nmodule.locations.h2=classpath:kie-flyway/db/persistence-jdbc/h2\nmodule.locations.postgresql=classpath:kie-flyway/db/persistence-jdbc/postgresql\n# Default sql locations if the application db type isn't none of the above (ej: oracle)\nmodule.locations.default=classpath:kie-flyway/db/persistence-jdbc/ansi\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Deployment Module\nDESCRIPTION: XML configuration showing the required dependencies for a Kogito Quarkus extension deployment module. This includes the common deployment module and extension-specific dependencies.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-quarkus-common-deployment</artifactId>\n  <version>${project.version}</version>\n</dependency>\n\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-*</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring KIE Flyway in Application Properties\nDESCRIPTION: Example of application.properties file showing how to enable KIE Flyway and exclude specific modules from initialization.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/flyway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# KIE Flyway setup\nkie.flyway.enabled=true\nkie.flyway.modules.\"data-index\".enabled=false\nkie.flyway.modules.\"jobs-service\".enabled=false\n```\n\n----------------------------------------\n\nTITLE: Using EndpointDiscovery in Kogito Applications with Java\nDESCRIPTION: Example demonstrating how to inject and use the EndpointDiscovery interface to find service endpoints in Kubernetes. The code shows a service class that can query endpoints by namespace and name, and handle the response appropriately.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/addons/kubernetes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Optional;\n\nimport org.kie.kogito.addons.k8s.Endpoint;\nimport org.kie.kogito.addons.k8s.EndpointDiscovery;\n\n@ApplicationScoped\npublic class EndpointFetcher {\n\n    @Inject\n    EndpointDiscovery endpointDiscovery;\n\n    public void queryEndpoint(String namespace, String name) {\n        final Optional<Endpoint> endpoint = endpointDiscovery.findEndpoint(namespace, name);\n        if (endpoint.isEmpty()) {\n            System.out.println(\"Endpoint not found :(\");\n        } else {\n            System.out.println(\"This is the url for the service \" + name + \": \" + endpoint.get().getURL());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KIE Flyway with Advanced Configuration\nDESCRIPTION: Java code example demonstrating KIE Flyway initialization with additional parameters like custom ClassLoader and module exclusions.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/flyway/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport org.kie.flyway.initializer.KieFlywayInitializer;\n\n...\n        KieFlywayInitializer.builder()\n                .withDatasource(dataSource)\n                .withClassLoader(this.getClass().getClassLoader())\n                .withModuleExclusions(List.of(\"data-index\", \"jobs-service\"))\n                .build()\n                .migrate();\n```\n\n----------------------------------------\n\nTITLE: Setting Expression Language in Kogito Serverless Workflow\nDESCRIPTION: Demonstrates how to set the expression language to jsonpath instead of the default jq in a Kogito Serverless Workflow definition.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-serverless-workflow/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"myworkflow\",\n  \"version\": \"1.0\",\n  \"expressionLang\": \"jsonpath\",\n  \"name\": \"Workflow example\",\n  \"description\": \"An example of how to use workflows\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Maven Dependencies for Parameterized Tests in XML\nDESCRIPTION: Specifies the Maven dependencies required for implementing parameterized tests in generator unit tests. These dependencies enable the use of JUnit Jupiter and Kogito test utilities.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-codegen-api</artifactId>\n  <type>test-jar</type>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.junit.jupiter</groupId>\n  <artifactId>junit-jupiter-params</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Removing Kafka Events Publisher Dependency for Quarkus\nDESCRIPTION: XML snippet showing how to remove the Kafka events publisher dependency for Quarkus applications. This step is necessary before adding the MongoDB events publisher.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/events/mongodb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-addons-quarkus-events-smallrye</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Service Evaluation Pattern in Java\nDESCRIPTION: Demonstrates the pattern for asynchronous service evaluation using CompletableFuture. Shows how service methods can return futures to support non-blocking operations.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n   LocalId id = appRoot.get(MyComponent.class).get(\"componentName\").subs().get(\"someSubComponent\")\n   CompletableFuture<DataContext> result = asyncSvc.evaluationMethod(id, dataContext);\n\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Availability Resolver in Java\nDESCRIPTION: Demonstrates how to mock the class availability resolver for testing generators that use context.hasClassAvailable. This allows for controlled testing of class availability checks.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ncontextBuilder.withClassAvailabilityResolver(\n  mockClassAvailabilityResolver(\n      includedClasses, excludedClasses));\n```\n\n----------------------------------------\n\nTITLE: Converting Between DataContext Types in Java\nDESCRIPTION: Shows how to convert between different DataContext implementations, specifically converting a MapDataContext to a POJO that implements DataContext. This demonstrates the flexible data handling approach.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass Person implements DataContext, DefaultCastable { String name; }\nMapDataContext ctx = MapDataContext.create();\nctx.set(\"name\", \"Paul\");\nPerson p = ctx.as(Person.class);\nString name = p.name; // \"Paul\"\n\n```\n\n----------------------------------------\n\nTITLE: Generating Dashboard for DMN Endpoint with Decision Panels in Java\nDESCRIPTION: Method to generate a Grafana dashboard for a DMN endpoint, including custom panels based on the decisions in the DMN model. It takes the template path, endpoint, and a list of decisions as parameters.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/grafana-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static String generateDashboardForDMNEndpoint(String templatePath, String endpoint, List<Decision> decisions);\n```\n\n----------------------------------------\n\nTITLE: Evaluating Different Types of Components Using the Same Service Method in Java\nDESCRIPTION: Shows how a single 'evaluate' method can be used to evaluate different types of components based on the provided ID. This demonstrates polymorphic evaluation across component types.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/api/kogito-api-incubation-common/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n   DataContext result = svc.evaluate(serviceId, inputDataContext);\n   DataContext serviceResult = svc.evaluate(decisionServiceId, inputDataContext);\n\n```\n\n----------------------------------------\n\nTITLE: Infinispan Spring Boot Test Configuration\nDESCRIPTION: Example of configuring Infinispan test containers in a Spring Boot test environment, including required properties.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(SpringExtension.class)\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n@ContextConfiguration(initializers = InfinispanSpringBootTestResource.class)\npublic class MyTest {    \n    // ...\n}\n```\n\nLANGUAGE: properties\nCODE:\n```\n# Infinispan\ninfinispan.remote.sasl-mechanism=PLAIN\ninfinispan.remote.auth-server-name=infinispan\ninfinispan.remote.use-auth=true\ninfinispan.remote.auth-realm=default\ninfinispan.remote.auth-username=admin\ninfinispan.remote.auth-password=admin\n```\n\n----------------------------------------\n\nTITLE: Creating KogitoScenarioJunitActivator Test Class in Java\nDESCRIPTION: Java class that serves as an activator for the Kogito JUnit runner. This class uses the KogitoJunitActivator to load and execute all *.scesim files available in the project, with each scenario row generating a JUnit test result.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/drools/kogito-scenario-simulation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage testscenario;\n\n/**\n * KogitoJunitActivator is a custom JUnit runner that enables the execution of Test Scenario files (*.scesim).\n * This activator class, when executed, will load all scesim files available in the project and run them.\n * Each row of the scenario will generate a test JUnit result. */\n@org.junit.runner.RunWith(org.kogito.scenariosimulation.runner.KogitoJunitActivator.class)\npublic class KogitoScenarioJunitActivatorTest {\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Test Utils Dependency\nDESCRIPTION: Maven dependency configuration for Spring Boot-specific Kogito test utilities.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-test-utils/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.kie.kogito</groupId>\n  <artifactId>kogito-spring-boot-test-utils</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Generating Dashboard for Generic Endpoint in Java\nDESCRIPTION: Method to generate a customized Grafana dashboard for a specific endpoint using a template. It takes the template path and handler name as parameters.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/grafana-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static String generateDashboardForEndpoint(String templatePath, String handlerName);\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Report for Kogito Runtimes\nDESCRIPTION: Command to generate a Jacoco test coverage report for the Kogito Runtimes project. The report will be available in the target/site/jacoco/ directory after execution.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify -Ptest-coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring JaxbContexts Class with Context Path Management in Java\nDESCRIPTION: This class provides utilities for managing JAXBContext configurations with support for adding context paths. It maintains a map of JAXBContexts indexed by their context paths and allows for dynamic context creation and lookup.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/kogito-codegen-core/src/test/resources/.a-hidden-file.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.kie.kogito.codegen.process.config;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\n\npublic class JaxbContexts {\n\n    private final Map<String, JAXBContext> jaxbContexts = new ConcurrentHashMap<>();\n    private final Set<String> registeredContextPaths = new HashSet<>();\n\n    public JAXBContext getContextForPath(String path) {\n        return jaxbContexts.computeIfAbsent(path, this::buildContext);\n    }\n\n    public JAXBContext buildContext(String path) {\n        try {\n            return JAXBContext.newInstance(path);\n        } catch (JAXBException e) {\n            throw new RuntimeException(\"Error while creating JAXB context for path: \" + path, e);\n        }\n    }\n\n    public void addContextPath(String path) {\n        registeredContextPaths.add(path);\n    }\n\n    public Set<String> getContextPaths() {\n        return registeredContextPaths;\n    }\n\n    public <T> T unmarshal(String content, String contextPath, Class<T> clazz) {\n        try {\n            JAXBContext jaxbContext = getContextForPath(contextPath);\n\n            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n            Object unmarshalled = jaxbUnmarshaller.unmarshal(stream);\n\n            return clazz.cast(unmarshalled);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error while unmarshalling content\", e);\n        }\n    }\n\n    public String marshall(Object object, String contextPath) {\n        try {\n            JAXBContext jaxbContext = getContextForPath(contextPath);\n\n            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();\n            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n\n            StringWriter writer = new StringWriter();\n            jaxbMarshaller.marshal(object, writer);\n            return writer.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error while marshalling content\", e);\n        }\n    }\n\n    public Map<String, String> getContextParameters() {\n        Map<String, String> contextParameters = new HashMap<>();\n        registeredContextPaths.forEach(path -> contextParameters.put(\"kogito.xsd.\" + path.replaceAll(\"\\\\.\", \"_\"), path));\n        return contextParameters;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Events Publisher Dependency for Spring Boot\nDESCRIPTION: XML snippet demonstrating how to add the MongoDB events publisher dependency for Spring Boot applications. This enables the use of MongoDB for event publishing in Kogito.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/events/mongodb/README.md#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie</groupId>\n  <artifactId>kie-addons-springboot-events-mongodb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Kogito Runtimes with Quick Build Option\nDESCRIPTION: Commands to clone the Kogito Runtimes repository from GitHub and build it with the '-Dquickly' flag, which skips plugins and goes straight to build and install phases for faster compilation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/kiegroup/kogito-runtimes.git\ncd kogito-runtimes\n./mvnw clean install -Dquickly\n# Wait... success!\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Events Publisher Dependency for Quarkus\nDESCRIPTION: XML snippet showing how to add the MongoDB events publisher dependency for Quarkus applications. This enables the use of MongoDB for event publishing in Kogito.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/events/mongodb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie</groupId>\n  <artifactId>kie-addons-quarkus-events-mongodb</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running License Header Formatting in Kogito\nDESCRIPTION: Maven command to automatically format copyright headers in source files to ensure compliance with project standards.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn com.mycila:license-maven-plugin:format\n```\n\n----------------------------------------\n\nTITLE: Removing Kafka Events Publisher Dependency for Spring Boot\nDESCRIPTION: XML snippet demonstrating how to remove the Kafka events publisher dependency for Spring Boot applications. This step is required before adding the MongoDB events publisher.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/events/mongodb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n  <groupId>org.kie</groupId>\n  <artifactId>kie-addons-springboot-events-kafka</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Kogito Contribution\nDESCRIPTION: Examples of creating a new Git branch for addressing a specific issue in Kogito. The branch name should include the issue number and a brief description.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b Fix_#XYZ\n# or\ngit checkout -b Fix_#XYZ-my-fix\n```\n\n----------------------------------------\n\nTITLE: Initializing KIE Flyway with Basic Configuration\nDESCRIPTION: Java code example showing how to initialize KIE Flyway with the required DataSource parameter.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/flyway/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.kie.flyway.initializer.KieFlywayInitializer;\n\n...\n        KieFlywayInitializer.builder()\n                .withDatasource(dataSource)\n                .build()\n                .migrate();\n```\n\n----------------------------------------\n\nTITLE: Adding Kogito Add-Ons to Project Generation\nDESCRIPTION: Command to generate a Kogito Spring Boot project with specific add-ons. The 'addons' parameter accepts a comma-separated list of Kogito add-ons (like monitoring and persistence options) to include in the project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.kie.kogito \\\n    -DarchetypeArtifactId=kogito-spring-boot-archetype \\\n    -DarchetypeVersion=2.0.0-SNAPSHOT \\\n    -DgroupId=com.company \\\n    -DartifactId=sample-kogito \\\n    -Daddons=monitoring-prometheus,persistence-infinispan\n```\n\n----------------------------------------\n\nTITLE: Defining DMN Context for Driver Suspension Decision\nDESCRIPTION: This snippet defines the decision logic for determining if a driver should be suspended. It calculates total points and uses a conditional expression to make the decision.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/TrafficViolation.txt#2025-04-23_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dmn:decision id=\"_8A408366-D8E9-4626-ABF3-5F69AA01F880\" name=\"Should the driver be suspended?\">\n  <dmn:question>Should the driver be suspended due to points on his license?</dmn:question>\n  <dmn:allowedAnswers>\"Yes\", \"No\"</dmn:allowedAnswers>\n  <dmn:variable id=\"_40387B66-5D00-48C8-BB90-E83EE3332C72\" name=\"Should the driver be suspended?\" typeRef=\"string\"/>\n  <!-- Information requirements omitted for brevity -->\n  <dmn:context id=\"_F39732F1-0AA7-468F-86C4-DCC07E6F81CF\">\n    <dmn:contextEntry>\n      <dmn:variable id=\"_09385E8D-68E0-4DFD-AAD8-141C15C96B71\" name=\"Total Points\" typeRef=\"number\"/>\n      <dmn:literalExpression id=\"_F1BEBF16-033F-4A25-9523-CAC23ACC5DFC\">\n        <dmn:text>Driver.Points + Fine.Points</dmn:text>\n      </dmn:literalExpression>\n    </dmn:contextEntry>\n    <dmn:contextEntry>\n      <dmn:literalExpression id=\"_1929D813-B1C9-43C5-9497-CE5D8B2B040C\">\n        <dmn:text>if Total Points >= 20 then \"Yes\" else \"No\"</dmn:text>\n      </dmn:literalExpression>\n    </dmn:contextEntry>\n  </dmn:context>\n</dmn:decision>\n```\n\n----------------------------------------\n\nTITLE: Adding Kogito Spring Boot Starters to Project Generation\nDESCRIPTION: Command to generate a Kogito Spring Boot project with specific starters included. The 'starters' parameter accepts a comma-separated list of Kogito capabilities (decisions, rules, processes) to include in the project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn archetype:generate \\\n    -DarchetypeGroupId=org.kie.kogito \\\n    -DarchetypeArtifactId=kogito-spring-boot-archetype \\\n    -DarchetypeVersion=2.0.0-SNAPSHOT \\\n    -DgroupId=com.company \\\n    -DartifactId=sample-kogito \\\n    -Dstarters=decisions,rules,processes\n```\n\n----------------------------------------\n\nTITLE: Defining DMN Decision Table for Fine Calculation\nDESCRIPTION: This snippet shows the decision table used to calculate fines based on the type and severity of the traffic violation. It defines rules for different violation types and speed ranges.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/TrafficViolation.txt#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dmn:decision id=\"_4055D956-1C47-479C-B3F4-BAEB61F1C929\" name=\"Fine\">\n  <dmn:variable id=\"_8C1EAC83-F251-4D94-8A9E-B03ACF6849CD\" name=\"Fine\" typeRef=\"tFine\"/>\n  <dmn:informationRequirement id=\"_800A3BBB-90A3-4D9D-BA5E-A311DED0134F\">\n    <dmn:requiredInput href=\"#_1929CBD5-40E0-442D-B909-49CEDE0101DC\"/>\n  </dmn:informationRequirement>\n  <dmn:decisionTable id=\"_C8F7F579-E06C-4A2F-8485-65FAFAC3FE6A\" hitPolicy=\"UNIQUE\" preferredOrientation=\"Rule-as-Row\">\n    <!-- Decision table content omitted for brevity -->\n  </dmn:decisionTable>\n</dmn:decision>\n```\n\n----------------------------------------\n\nTITLE: Running Kogito Spring Boot Application with Maven\nDESCRIPTION: Command to compile and run the Kogito Spring Boot application using Maven's Spring Boot plugin.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/src/main/resources/archetype-resources/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Setting Active GraalVM Version\nDESCRIPTION: Command to set GraalVM as the active Java version using sdkman\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsdk use java (*current_graalvm_version*)-grl\n```\n\n----------------------------------------\n\nTITLE: Building Native Image with Maven\nDESCRIPTION: Maven command to build native image using the native profile\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -Pnative\n```\n\n----------------------------------------\n\nTITLE: Query for Adult Names\nDESCRIPTION: Defines a query to retrieve names of all persons marked as adults in the system.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_2\n\nLANGUAGE: drools\nCODE:\n```\nquery FindAdultNames\n    /persons[ adult, $name : name ]\nend\n```\n\n----------------------------------------\n\nTITLE: Linking GraalVM with sdkman\nDESCRIPTION: Command to link installed GraalVM with sdkman for version management\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsdk install java (*current_graalvm_version*)-grl /Library/Java/JavaVirtualMachines/(*current_graalvm_version*)/Contents/Home\n```\n\n----------------------------------------\n\nTITLE: Adult Status Validation Rules\nDESCRIPTION: Contains two rules for determining adult status: CheckAdult sets adult flag to true for age >= 18, while CheckNotAdult sets it to false for age < 18.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_1\n\nLANGUAGE: drools\nCODE:\n```\nrule CheckAdult when\n    $p: /persons[ age >= 18 ]\nthen\n    modify($p) { setAdult(true) };\nend\n\nrule CheckNotAdult when\n    $p: /persons[ age < 18 ]\nthen\n    modify($p) { setAdult(false) };\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Person Declaration in Drools\nDESCRIPTION: Declares a Person data type with properties for name, age, and adult status. This structure is used in the rules to determine adult status based on age.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_0\n\nLANGUAGE: drools\nCODE:\n```\ndeclare Person\n   name:  String\n   age: int\n   adult: boolean\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Person and AdultUnit Data Structures\nDESCRIPTION: Declares the Person fact type with name, age, and adult status fields, and defines the AdultUnit rule unit with a DataStore of Person objects.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_0\n\nLANGUAGE: drools\nCODE:\n```\ndeclare Person\n   name:  String\n   age: int\n   adult: boolean\nend\n\ndeclare AdultUnit extends RuleUnitData\n   persons: DataStore<Person>\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Adult Names in Drools\nDESCRIPTION: Query to find names of persons who are marked as adults.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/drl1.txt#2025-04-23_snippet_3\n\nLANGUAGE: Drools\nCODE:\n```\nquery FindAdultNames\n    /persons[ adult, $name : name ]\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Verify Command in Shell\nDESCRIPTION: This script runs the Maven verify command with specific flags. It uses -B for batch mode, -e for stacktraces, and -Dquickly-ci to likely speed up the CI process.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/src/test/resources/projects/it-basic/goal.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\n\nmvn -B -e verify -Dquickly-ci\n```\n\n----------------------------------------\n\nTITLE: Checking Non-Adult Status Rule in Drools\nDESCRIPTION: Rule to check if a person is not an adult (age < 18) and set their adult status to false.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/drl1.txt#2025-04-23_snippet_2\n\nLANGUAGE: Drools\nCODE:\n```\nrule CheckNotAdult when\n    $p: /persons[ age < 18 ]\nthen\n    modify($p) { setAdult(false) };\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Adult Persons in Drools\nDESCRIPTION: Query to find all Person objects that are marked as adults.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/drl1.txt#2025-04-23_snippet_4\n\nLANGUAGE: Drools\nCODE:\n```\nquery FindAdults\n    $p: /persons[ adult ]\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum numpy Version Requirement\nDESCRIPTION: This snippet defines a minimum version requirement for the numpy package. It requires numpy version 1.21.0 or higher to be installed, which is important for numerical computations in Python.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-serverless-workflow/kogito-serverless-workflow-executor-python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy>=1.21.0\n```\n\n----------------------------------------\n\nTITLE: Defining AdultUnit RuleUnitData in Drools\nDESCRIPTION: Declares the AdultUnit rule unit, extending RuleUnitData and containing a DataStore of Person objects.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-rules-extension/kogito-quarkus-rules-integration-test-hot-reload/src/test/resources/drl1.txt#2025-04-23_snippet_0\n\nLANGUAGE: Drools\nCODE:\n```\ndeclare AdultUnit extends RuleUnitData\n   persons: DataStore<Person>\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying NumPy Dependency Version Requirement\nDESCRIPTION: Specifies NumPy package with a minimum version requirement of 1.21.0. This is typically used in a requirements.txt file to ensure compatibility with newer NumPy features introduced in version 1.21.0.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/addons/python/integration-tests/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy>=1.21.0\n```\n\n----------------------------------------\n\nTITLE: Adding Kogito Scenario Simulation Dependency in Maven\nDESCRIPTION: XML snippet showing how to add the kogito-scenario-simulation dependency to your project's POM file. This dependency is required to execute *.scesim files in your project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/drools/kogito-scenario-simulation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.kie.kogito</groupId>\n    <artifactId>kogito-scenario-simulation</artifactId>\n    <version>${kogito.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing GraalVM using Homebrew\nDESCRIPTION: Command to install GraalVM using homebrew cask\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask graalvm/tap/(*current_graalvm_version*)\n```\n\n----------------------------------------\n\nTITLE: Implementing JaxbRuntimeGenerator for Dynamic JAXB Context in Java\nDESCRIPTION: A class that implements the CodeGenerator interface to support JAXB marshalling at runtime. It uses JAXBContextDiscovery to find and register runtime JAXB classes and generates necessary configuration for XML marshalling and unmarshalling.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/kogito-codegen-core/src/test/resources/.a-hidden-file.txt#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage org.kie.kogito.codegen.process.config;\n\nimport org.drools.util.StringUtils;\nimport org.kie.kogito.codegen.api.context.KogitoBuildContext;\nimport org.kie.kogito.codegen.api.template.TemplatedGenerator;\nimport org.kie.kogito.codegen.core.AbstractGenerator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class JaxbRuntimeGenerator extends AbstractGenerator {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(JaxbRuntimeGenerator.class);\n\n    private final JaxbContexts contexts;\n    private static final String TEMPLATE_RESOURCE = \"/class-templates/config/JaxbConfigModuleTemplate.java\";\n\n    public JaxbRuntimeGenerator(KogitoBuildContext context, JaxbContexts contexts) {\n        super(context, \"JaxbConfig\", \"config\", new PackageName(context.getPackageName(), \"config\"));\n        this.contexts = contexts;\n    }\n\n    @Override\n    public void generateComponents() {\n        if (!StringUtils.isEmpty(JAXBContextDiscovery.findContextPath())) {\n            LOGGER.debug(\"JAXB Found context path {}\", JAXBContextDiscovery.findContextPath());\n            // Create KieRuntimeJaxbContext\n            if (!contexts.getContextPaths().isEmpty()) {\n                TemplatedGenerator generator = TemplatedGenerator.builder()\n                        .withPackageName(packageName.qualifiedName())\n                        .withFallbackContext(KogitoBuildContext.builder().build())\n                        .withTemplateBasePath(TEMPLATE_RESOURCE)\n                        .withResourceHelper(resourceHelper)\n                        .build(context, \"JaxbConfigModule\");\n\n                generator.withClassName(generatedFilename)\n                        .withPackageName(packageName.qualifiedName());\n\n                applicationSection.resources().generate(generator);\n            }\n        }\n    }\n\n    @Override\n    public int priority() {\n        return 10;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew Package Manager\nDESCRIPTION: Command to install homebrew package manager on MAC\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: A series of markdown snippets to display various project-related badges, including GitHub stats, chat links, license, and social media follow buttons.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![GitHub Stars](https://img.shields.io/github/stars/apache/incubator-kie-kogito-runtimes.svg)](https://github.com/apache/incubator-kie-kogito-runtimes/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/apache/incubator-kie-kogito-runtimes.svg)](https://github.com/apache/incubator-kie-kogito-runtimes/network/members)\n[![GitHub Issues](https://img.shields.io/github/issues/apache/incubator-kie-kogito-runtimes.svg)](https://github.com/apache/incubator-kie-kogito-runtimes/issues)\n[![Pull Requests](https://img.shields.io/github/issues-pr/apache/incubator-kie-kogito-runtimes.svg?style=flat-square)](https://github.com/apache/incubator-kie-kogito-runtimes/pulls)\n[![Zulip chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)]( https://kie.zulipchat.com)\n[![Contributors](https://img.shields.io/github/contributors/apache/incubator-kie-kogito-runtimes.svg?style=flat-square)](https://github.com/apache/incubator-kie-kogito-runtimes/graphs/contributors)\n[![License](https://img.shields.io/github/license/apache/incubator-kie-kogito-runtimes.svg)](https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/LICENSE)\n[![Twitter Follow](https://img.shields.io/twitter/follow/kogito_kie.svg?label=Follow&style=social)](https://twitter.com/kogito_kie?lang=en)\n```\n\n----------------------------------------\n\nTITLE: Installing sdkman Package Manager\nDESCRIPTION: Command to install sdkman Java version manager using curl\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/Develop_on_Mac.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://get.sdkman.io\" | bash\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment in Markdown\nDESCRIPTION: Standard Apache License 2.0 header comment block explaining the licensing terms for the documentation file.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/process-management/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Defining DMN Shapes and Edges in XML\nDESCRIPTION: XML markup defining a DMN diagram with shapes and connecting edges. The snippet contains DMN shape definitions with styling properties (colors), positioning coordinates, and edge definitions that connect the shapes together to form a complete decision model visualization.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/TrafficViolation.txt#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dmndi:DMNShape id=\"dmnshape-_1929CBD5-40E0-442D-B909-49CEDE0101DC\" dmnElementRef=\"_1929CBD5-40E0-442D-B909-49CEDE0101DC\" isCollapsed=\"false\">\n  <dmndi:DMNStyle>\n    <dmndi:FillColor red=\"255\" green=\"255\" blue=\"255\"/>\n    <dmndi:StrokeColor red=\"0\" green=\"0\" blue=\"0\"/>\n    <dmndi:FontColor red=\"0\" green=\"0\" blue=\"0\"/>\n  </dmndi:DMNStyle>\n  <dc:Bounds x=\"708\" y=\"350\" width=\"100\" height=\"50\"/>\n  <dmndi:DMNLabel/>\n</dmndi:DMNShape>\n<dmndi:DMNShape id=\"dmnshape-_4055D956-1C47-479C-B3F4-BAEB61F1C929\" dmnElementRef=\"_4055D956-1C47-479C-B3F4-BAEB61F1C929\" isCollapsed=\"false\">\n  <dmndi:DMNStyle>\n    <dmndi:FillColor red=\"255\" green=\"255\" blue=\"255\"/>\n    <dmndi:StrokeColor red=\"0\" green=\"0\" blue=\"0\"/>\n    <dmndi:FontColor red=\"0\" green=\"0\" blue=\"0\"/>\n  </dmndi:DMNStyle>\n  <dc:Bounds x=\"709\" y=\"210\" width=\"100\" height=\"50\"/>\n  <dmndi:DMNLabel/>\n</dmndi:DMNShape>\n<dmndi:DMNShape id=\"dmnshape-_1F9350D7-146D-46F1-85D8-15B5B68AF22A\" dmnElementRef=\"_1F9350D7-146D-46F1-85D8-15B5B68AF22A\" isCollapsed=\"false\">\n  <dmndi:DMNStyle>\n    <dmndi:FillColor red=\"255\" green=\"255\" blue=\"255\"/>\n    <dmndi:StrokeColor red=\"0\" green=\"0\" blue=\"0\"/>\n    <dmndi:FontColor red=\"0\" green=\"0\" blue=\"0\"/>\n  </dmndi:DMNStyle>\n  <dc:Bounds x=\"369\" y=\"344\" width=\"100\" height=\"50\"/>\n  <dmndi:DMNLabel/>\n</dmndi:DMNShape>\n<dmndi:DMNShape id=\"dmnshape-_8A408366-D8E9-4626-ABF3-5F69AA01F880\" dmnElementRef=\"_8A408366-D8E9-4626-ABF3-5F69AA01F880\" isCollapsed=\"false\">\n  <dmndi:DMNStyle>\n    <dmndi:FillColor red=\"255\" green=\"255\" blue=\"255\"/>\n    <dmndi:StrokeColor red=\"0\" green=\"0\" blue=\"0\"/>\n    <dmndi:FontColor red=\"0\" green=\"0\" blue=\"0\"/>\n  </dmndi:DMNStyle>\n  <dc:Bounds x=\"534\" y=\"83\" width=\"133\" height=\"63\"/>\n  <dmndi:DMNLabel/>\n</dmndi:DMNShape>\n<dmndi:DMNEdge id=\"dmnedge-_800A3BBB-90A3-4D9D-BA5E-A311DED0134F\" dmnElementRef=\"_800A3BBB-90A3-4D9D-BA5E-A311DED0134F\">\n  <di:waypoint x=\"758\" y=\"375\"/>\n  <di:waypoint x=\"759\" y=\"235\"/>\n</dmndi:DMNEdge>\n<dmndi:DMNEdge id=\"dmnedge-_982211B1-5246-49CD-BE85-3211F71253CF\" dmnElementRef=\"_982211B1-5246-49CD-BE85-3211F71253CF\">\n  <di:waypoint x=\"419\" y=\"369\"/>\n  <di:waypoint x=\"600.5\" y=\"114.5\"/>\n</dmndi:DMNEdge>\n<dmndi:DMNEdge id=\"dmnedge-_AEC4AA5F-50C3-4FED-A0C2-261F90290731\" dmnElementRef=\"_AEC4AA5F-50C3-4FED-A0C2-261F90290731\">\n  <di:waypoint x=\"759\" y=\"235\"/>\n  <di:waypoint x=\"600.5\" y=\"114.5\"/>\n</dmndi:DMNEdge>\n```\n\n----------------------------------------\n\nTITLE: Implementing JAXBContextDiscovery for Runtime Class Detection in Java\nDESCRIPTION: A utility class that discovers JAXB context paths from META-INF files during runtime. It scans the classpath for specific XML binding files and builds a context path string for JAXB initialization.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/kogito-codegen-modules/kogito-codegen-core/src/test/resources/.a-hidden-file.txt#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.kie.kogito.codegen.process.config;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class JAXBContextDiscovery {\n\n    private static final Logger logger = LoggerFactory.getLogger(JAXBContextDiscovery.class);\n    private static final String METAINF_FOLDER = \"META-INF\";\n    private static final String JAXB_FILE_PATH = \"kogito-jaxb.idx\";\n\n    public static String findContextPath() {\n        return findContextPath(METAINF_FOLDER + \"/\" + JAXB_FILE_PATH);\n    }\n\n    public static String findContextPath(String filePath) {\n        Set<String> paths = new LinkedHashSet<>();\n        try {\n            ClassLoader cl = Thread.currentThread().getContextClassLoader();\n            if (cl == null) {\n                cl = JAXBContextDiscovery.class.getClassLoader();\n            }\n            Enumeration<URL> resources = cl.getResources(filePath);\n\n            if (!resources.hasMoreElements()) {\n                logger.debug(\"No jaxb file paths found\");\n                return \"\";\n            }\n\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                logger.debug(\"JAXB file path: {}\", url);\n                paths.add(url.getFile());\n            }\n\n            return String.join(\":\", paths);\n        } catch (IOException e) {\n            logger.error(\"Failed to discover and build JAXB context due to {}\", e.getMessage(), e);\n            throw new RuntimeException(\"Failed to discover and build JAXB context\", e);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header Declaration in XML\nDESCRIPTION: XML comment block containing the standard Apache License 2.0 header describing the licensing terms for the software.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/jobs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Testing Kogito Greetings Process with cURL\nDESCRIPTION: cURL command to test the sample greetings process endpoint by sending an empty JSON payload to the application's REST API.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/springboot/archetype/src/main/resources/archetype-resources/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{}' -H \"Content-Type: application/json\" -X POST http://localhost:8080/greetings\n```\n\n----------------------------------------\n\nTITLE: Apache License Header in HTML Comments\nDESCRIPTION: Standard Apache License 2.0 header included as HTML comments, indicating the licensing terms for the codebase.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/rest-exception-handler/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Apache License Header Comment in XML/HTML\nDESCRIPTION: Standard Apache License 2.0 header comment block used to specify the licensing terms for the code file.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/process-svg/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Apache License Header\nDESCRIPTION: Standard Apache License 2.0 header that specifies the licensing terms for the software\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/messaging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Apache License Header in Markdown\nDESCRIPTION: Standard Apache License 2.0 header included at the top of the file. It specifies the terms under which the software is distributed.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/tracing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one\n  or more contributor license agreements.  See the NOTICE file\n  distributed with this work for additional information\n  regarding copyright ownership.  The ASF licenses this file\n  to you under the Apache License, Version 2.0 (the\n  \"License\"); you may not use this file except in compliance\n  with the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing,\n  software distributed under the License is distributed on an\n  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, either express or implied.  See the License for the\n  specific language governing permissions and limitations\n  under the License.\n  -->\n```\n\n----------------------------------------\n\nTITLE: Service Configuration File Path\nDESCRIPTION: Example path specification for the MessagePayloadDecorator service configuration file\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/messaging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nMETA-INF/services/org.kie.kogito.addon.cloudevents.message.MessagePayloadDecorator\n```\n\n----------------------------------------\n\nTITLE: Executing System Command and Setting Context Variable in Java\nDESCRIPTION: A malicious script that prints a message indicating it was loaded from an external entity and sets a context variable 'testScript2' to 'XXE issue'. This demonstrates XXE vulnerability exploitation.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/jbpm/jbpm-tests/src/test/resources/xxe-protection/Text2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nSystem.out.println(\"Yikes! This script has been read from Text2.txt via an external entity.\");\nkcontext.setVariable(\"testScript2\", \"XXE issue\");\n```\n\n----------------------------------------\n\nTITLE: Executing External Entity Content in Kogito Runtime\nDESCRIPTION: The code demonstrates a potential XXE vulnerability where external content is processed. It prints a warning message and sets a process variable named 'testScript1' with a value indicating an XXE issue occurred.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/jbpm/jbpm-tests/src/test/resources/xxe-protection/Text1.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(\"Yikes! This script has been read from Text1.txt via an external entity.\");\nkcontext.setVariable(\"testScript1\", \"XXE issue\");\n```\n\n----------------------------------------\n\nTITLE: Rule for Checking Non-Adult Status in Drools\nDESCRIPTION: A rule that identifies persons who are under 18 and sets their adult status to false. Uses the modify statement to update the Person object.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_3\n\nLANGUAGE: drools\nCODE:\n```\nrule CheckNotAdult when\n    $p: /persons[ age < 18 ]\nthen\n    modify($p) { setAdult(false) };\nend\n```\n\n----------------------------------------\n\nTITLE: Query for Finding Adult Names in Drools\nDESCRIPTION: A Drools query that retrieves the names of persons who have been marked as adults. This query can be executed to obtain a list of adult names from the rule unit.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/quarkus/extensions/kogito-quarkus-decisions-extension/kogito-quarkus-decisions-integration-test-hot-reload/src/test/resources/adult.txt#2025-04-23_snippet_4\n\nLANGUAGE: drools\nCODE:\n```\nquery FindAdultNames\n    /persons[ adult, $name : name ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database for Kogito in Quarkus\nDESCRIPTION: This snippet demonstrates the configuration settings for connecting to a PostgreSQL database in a Quarkus-based Kogito project.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nquarkus.datasource.db-kind=postgresql\nquarkus.datasource.username=postgres\nquarkus.datasource.password=changeme\nquarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/kogito\n```\n\n----------------------------------------\n\nTITLE: Enabling JDBC Persistence in Kogito\nDESCRIPTION: This snippet shows how to enable JDBC persistence in Kogito projects by setting the persistence type to 'jdbc'.\nSOURCE: https://github.com/apache/incubator-kie-kogito-runtimes/blob/main/addons/common/persistence/jdbc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkogito.persistence.type=jdbc\n```"
  }
]