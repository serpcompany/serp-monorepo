[
  {
    "owner": "tyktechnologies",
    "repo": "tyk",
    "content": "TITLE: Configuring HTTP Test Runner for Handler Unit Testing\nDESCRIPTION: Demonstrates how to set up the HTTPTestRunner for unit testing HTTP handlers directly. Uses httptest.NewRecorder to capture the handler's response without making actual network requests.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/TykTechnologies/tyk/test\"\n\n...\nhandler := func(wr http.RequestWriter, r *http.Request){...}\nrunner := test.HTTPTestRunner{\n    Do: func(r *http.Request, _ *TestCase) (*http.Response, error) {\n\t\trec := httptest.NewRecorder()\n\t\thandler(rec, r)\n\t\treturn rec.Result(), nil\n\t},\n}\nrunner.Run(t, testCases...)\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Tyk Gateway using Docker Compose\nDESCRIPTION: Steps to quickly set up Tyk Gateway using Docker Compose. This includes cloning the repository, changing to the project directory, and starting the containers.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TykTechnologies/tyk-gateway-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd tyk-gateway-docker\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Compiling Tyk Gateway from Source\nDESCRIPTION: Instructions for cloning the Tyk repository and building the gateway from source code. Requires Go version 1.22 for the master branch. Officially supported on Linux/amd64, Linux/i386, and Linux/arm64 platforms.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/TykTechnologies/tyk\ngo build\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Upstream Mock in Go for Tyk API Gateway\nDESCRIPTION: This snippet demonstrates how to create a custom upstream test server using the httptest package. It shows setting up a test server with custom logic and overriding the API's target URL to use the test server.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n ts := gateway.StartTest(nil)\n defer ts.Close()\n\nupstream := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // custom logic\n}))\n\nts.Gw.buildAndLoadAPI(func(spec *APISpec) {\n    spec.Proxy.TargetURL = upstream.URL\n})\n```\n\n----------------------------------------\n\nTITLE: Built-in Test Functions for Common Use Cases\nDESCRIPTION: Lists the pre-configured test functions exported by the package for common testing scenarios. These helper functions wrap the HTTPTestRunner for testing both HTTP servers and HTTP handlers.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nfunc TestHttpServer(t testing.TB, baseURL string, testCases ...TestCase)\nfunc TestHttpHandler(t testing.TB, handle http.HandlerFunc, testCases ...TestCase)\n```\n\n----------------------------------------\n\nTITLE: Testing Coprocess Python Auth Plugin in Go for Tyk API Gateway\nDESCRIPTION: This snippet demonstrates how to test a Python coprocess auth plugin in the Tyk API Gateway. It includes creating a bundle with a manifest and Python script, registering the bundle, and setting up an API spec to use the plugin.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar pythonBundleWithAuthCheck = map[string]string{\n    \"manifest.json\": `\n        {\n            \"file_list\": [\n                \"middleware.py\"\n            ],\n            \"custom_middleware\": {\n                \"driver\": \"python\",\n                \"auth_check\": {\n                    \"name\": \"MyAuthHook\"\n                }\n            }\n        }\n    `,\n    \"middleware.py\": `\nfrom tyk.decorators import *\nfrom gateway import TykGateway as tyk\n@Hook\ndef MyAuthHook(request, session, metadata, spec):\n    print(\"MyAuthHook is called\")\n    auth_header = request.get_header('Authorization')\n    if auth_header == 'valid_token':\n        session.rate = 1000.0\n        session.per = 1.0\n        metadata[\"token\"] = \"valid_token\"\n    return request, session, metadata\n    `,\n}\n    \nfunc TestPython(t *testing.T) {\n     ts := gateway.StartTest(nil)\n     defer ts.Close()\n    \n    bundleID := ts.registerBundle(\"python_with_auth_check\", pythonBundleWithAuthCheck)\n\n    ts.Gw.buildAndLoadAPI(func(spec *APISpec) {\n        spec.UseKeylessAccess = false\n        spec.EnableCoProcessAuth = true\n        spec.CustomMiddlewareBundle = bundleID\n    })\n    // test code goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Coprocess Settings in Tyk\nDESCRIPTION: This JSON snippet shows the global configuration for enabling Coprocess in Tyk, including gRPC server settings and bundle downloader options.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/grpc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"coprocess_options\": {\n  \"enable_coprocess\": true,\n  \"coprocess_grpc_server\": \"tcp://127.0.0.1:5555\"\n},\n\"enable_bundle_downloader\": true,\n\"bundle_base_url\": \"http://my-bundle-server.com/bundles/\",\n\"public_key_path\": \"/path/to/my/pubkey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Settings for Coprocess Authentication and Middleware\nDESCRIPTION: This JSON snippet demonstrates how to configure an API to use Coprocess authentication and middleware, specifying pre-middleware and auth check functions.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/grpc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"enable_coprocess_auth\": true,\n\"custom_middleware\": {\n  \"pre\": [\n    {\n      \"name\": \"MyPreMiddleware\",\n      \"require_session\": false\n    }\n  ],\n  \"auth_check\": {\n    \"name\": \"MyAuthCheck\"\n  },\n  \"driver\": \"grpc\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Sessions in Go for Tyk API Gateway\nDESCRIPTION: This code snippet shows how to create a user session in the Tyk API Gateway. It demonstrates creating a session with custom settings and also mentions how to create a session with default settings.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n ts := gateway.StartTest(nil)\n defer ts.Close()\n\nkey := ts.Gw.createSession(func(s *user.SessionState) {\n    s.QuotaMax = 2\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Go Workspace\nDESCRIPTION: Commands to set up a Go workspace, including the Gateway and plugins folders, and fetching the correct Gateway dependency.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo work init ./tyk-release-5.3.6\ngo work use ./plugins\ncommit_hash=$(cd tyk-release-5.3.6 && git rev-parse HEAD)\ncd plugins && go get github.com/TykTechnologies/tyk@${commit_hash} && go mod tidy && cd -\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Middleware Functions\nDESCRIPTION: Sample Python middleware implementation showing pre and post processing hooks using decorators.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tyk.decorators import *\n\n@Pre\ndef MyPreMiddleware(request, session, spec):\n    print(\"my_middleware: MyPreMiddleware\")\n    return request, session\n\n@Post\ndef MyPreMiddleware(request, session, spec):\n    print(\"my_middleware: MyPreMiddleware\")\n    return request, session\n```\n\n----------------------------------------\n\nTITLE: Mocking RPC (Hybrid) in Go for Tyk API Gateway\nDESCRIPTION: This snippet demonstrates how to mock the RPC server for testing Hybrid mode in the Tyk API Gateway. It uses the gorpc library to create a dispatcher and mock RPC functions.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc TestSyncAPISpecsRPCSuccess(t *testing.T) {\n    // Mock RPC\n    dispatcher := gorpc.NewDispatcher()\n    dispatcher.AddFunc(\"GetApiDefinitions\", func(clientAddr string, dr *DefRequest) (string, error) {\n        return \"[{}]\", nil\n    })\n    dispatcher.AddFunc(\"Login\", func(clientAddr, userKey string) bool {\n        return true\n    })\n    rpc := startRPCMock(dispatcher)\n    defer stopRPCMock(rpc)\n    count := syncAPISpecs()\n    if count != 1 {\n        t.Error(\"Should return array with one spec\", apiSpecs)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Test using Tyk Test Framework\nDESCRIPTION: Test function demonstrating how to use the Tyk test framework to test Basic Authentication scenarios. It sets up a test server, prepares auth sessions, and runs multiple test cases.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestBasicAuth(t *testing.T) {\n\tts := StartTest(nil)\n\tdefer ts.Close()\n\n\tsession := ts.testPrepareBasicAuth(false)\n\n\tvalidPassword := map[string]string{\"Authorization\": genAuthHeader(\"user\", \"password\")}\n\twrongPassword := map[string]string{\"Authorization\": genAuthHeader(\"user\", \"wrong\")}\n\twrongFormat := map[string]string{\"Authorization\": genAuthHeader(\"user\", \"password:more\")}\n\tmalformed := map[string]string{\"Authorization\": \"not base64\"}\n\n\tts.Run(t, []test.TestCase{\n\t\t// Create base auth based key\n\t\t{Method: \"POST\", Path: \"/tyk/keys/defaultuser\", Data: session, AdminAuth: true, Code: 200},\n\t\t{Method: \"GET\", Path: \"/\", Code: 401, BodyMatch: `Authorization field missing`},\n\t\t{Method: \"GET\", Path: \"/\", Headers: validPassword, Code: 200},\n\t\t{Method: \"GET\", Path: \"/\", Headers: wrongPassword, Code: 401},\n\t\t{Method: \"GET\", Path: \"/\", Headers: wrongFormat, Code: 400, BodyMatch: `Attempted access with malformed header, values not in basic auth format`},\n\t\t{Method: \"GET\", Path: \"/\", Headers: malformed, Code: 400, BodyMatch: `Attempted access with malformed header, auth data not encoded correctly`},\n\t}...)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Tyk Test Server with Custom Config\nDESCRIPTION: Example of initializing a Tyk test server with custom configuration options. This demonstrates how to set up a test environment with specific settings.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nts := gateway.StartTest(nil, gateway.TestConfig{\n           // Run control API on a separate port\n           sepatateControlAPI: true,\n           // Add delay after each test case, if you code depend on timing\n           // Bad practice, but sometimes needed\n           delay: 10 * time.Millisecond,\n           // Emulate that Gateway restarted using SIGUSR2\n           hotReload: true,\n           // Emulate that listener will \n           overrideDefaults, true,\n           // if you want to skip the redis cleaning process\n           SkipEmptyRedis: false\n    })\n    defer ts.Close()\n```\n\n----------------------------------------\n\nTITLE: File Naming Pattern for Regression Tests\nDESCRIPTION: File naming pattern examples for regression test files, test functions, test data, and utility files. Shows the required format using Jira issue IDs as identifiers.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/tests/regression/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nissue_<jira-id>_test.go\nTest_Issue<jira-id>\ntestdata/issue-<jira-id>-<type>.<ext>\nregression_test.go\n```\n\n----------------------------------------\n\nTITLE: Loading and Configuring APIs in Tyk Tests\nDESCRIPTION: Example of loading and configuring APIs in Tyk tests. This demonstrates how to set up API specifications for testing purposes.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nts := gateway.StartTest(nil)\ndefer ts.Close()\n\nts.Gw.buildAndLoadAPI(func(spec *APISpec) {\n    spec.UseBasicAuth = true\n    spec.UseKeylessAccess = false\n    spec.Proxy.ListenPath = \"/\"\n    spec.OrgID = \"default\"\n})\n```\n\n----------------------------------------\n\nTITLE: Building Gateway and Plugin\nDESCRIPTION: Commands to build both the Tyk Gateway and the custom plugin using the correct build flags.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tyk-release-5.3.6 && go build -tags=goplugin -trimpath . && cd -\ncd plugins           && go build -trimpath -buildmode=plugin . && cd -\n```\n\n----------------------------------------\n\nTITLE: Implementing CoProcess Object Structure in Go\nDESCRIPTION: Go structure definition for handling hook types, HTTP requests, and session data in the middleware\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype CoProcessObject struct {\n\tHookType string\n\tRequest  CoProcessMiniRequestObject\n\tSession  SessionState\n\tMetadata map[string]string\n\tSpec     map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middleware in API Definition\nDESCRIPTION: JSON configuration for setting up pre and post middleware hooks in the API definition file.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"custom_middleware\": {\n  \"pre\": [\n      {\n        \"name\": \"MyPreMiddleware\",\n        \"require_session\": false\n      }\n    ],\n  \"post\": [\n    {\n        \"name\": \"MyPostMiddleware\",\n        \"require_session\": false\n    }\n  ],\n  \"driver\": \"python\"\n}\n```\n\n----------------------------------------\n\nTITLE: Task Commands for Tyk Development\nDESCRIPTION: Commands using Task runner to setup the project and run integration tests. Requires Task to be installed following the taskfile.dev instructions.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntask setup   # Sets up the project depdendencies, including pre-commit hooks\ntask test:integration    # Runs the tests\n```\n\n----------------------------------------\n\nTITLE: Complete Middleware Configuration in JSON\nDESCRIPTION: Full JSON configuration example showing all available middleware hooks and their configuration options\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"custom_middleware\": {\n  \"pre\": [\n      {\n          \"name\": \"MyPreMiddleware\",  \n          \"require_session\": false\n      },\n      {\n          \"name\": \"AnotherPreMiddleware\",\n          \"require_session\": false\n      }\n  ],\n  \"post\": [\n    {\n      \"name\": \"MyPostMiddleware\",\n      \"require_session\": false\n    }\n  ],\n  \"post_key_auth\": [\n    {\n      \"name\": \"MyPostKeyAuthMiddleware\",\n      \"require_session\": true\n    }\n  ],\n  \"auth_check\": {\n    \"name\": \"MyAuthCheck\"\n  },\n  \"driver\": \"python\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Cases in Go for Tyk API Gateway\nDESCRIPTION: This snippet demonstrates how to define test cases using the TestCase structure from the test package. It includes various HTTP requests with different methods, paths, headers, and expected response codes.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nts.Run(t, []test.TestCase{\n        // Create base auth based key\n        {Method: \"POST\", Path: \"/tyk/keys/defaultuser\", Data: session, AdminAuth: true, Code: 200},\n        {Method: \"GET\", Path: \"/\", Code: 401, BodyMatch: `Authorization field missing`},\n        {Method: \"GET\", Path: \"/\", Headers: validPassword, Code: 200},\n        {Method: \"GET\", Path: \"/\", Headers: wrongPassword, Code: 401},\n        {Method: \"GET\", Path: \"/\", Headers: wrongFormat, Code: 400, BodyMatch: `Attempted access with malformed header, values not in basic auth format`},\n        {Method: \"GET\", Path: \"/\", Headers: malformed, Code: 400, BodyMatch: `Attempted access with malformed header, auth data not encoded correctly`},\n    }...)\n}\n```\n\n----------------------------------------\n\nTITLE: TestCase Structure Definition in Go for Tyk API Gateway\nDESCRIPTION: This code defines the TestCase structure used for specifying test cases in the Tyk API Gateway. It includes fields for HTTP request details, response assertions, and test execution options.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype TestCase struct {\n\tMethod, Path    string            `json:\",omitempty\"`\n\tDomain          string            `json:\",omitempty\"`\n\tProto           string            `json:\",omitempty\"`\n\tCode            int               `json:\",omitempty\"`\n\tData            interface{}       `json:\",omitempty\"`\n\tHeaders         map[string]string `json:\",omitempty\"`\n\tPathParams      map[string]string `json:\",omitempty\"`\n\tCookies         []*http.Cookie    `json:\",omitempty\"`\n\tDelay           time.Duration     `json:\",omitempty\"`\n\tBodyMatch       string            `json:\",omitempty\"`\n\tBodyMatchFunc   func([]byte) bool `json:\",omitempty\"`\n\tBodyNotMatch    string            `json:\",omitempty\"`\n\tHeadersMatch    map[string]string `json:\",omitempty\"`\n\tHeadersNotMatch map[string]string `json:\",omitempty\"`\n\tJSONMatch       map[string]string `json:\",omitempty\"`\n\tErrorMatch      string            `json:\",omitempty\"`\n\tBeforeFn        func()            `json:\"-\"`\n\tClient          *http.Client      `json:\"-\"`\n\n\tAdminAuth      bool `json:\",omitempty\"`\n\tControlRequest bool `json:\",omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtractTo Method for OAS Struct in Go\nDESCRIPTION: Pattern for implementing the ExtractTo method in OAS structs. This method extracts the contents of an OAS API definition into a classic API definition.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/apidef-oas.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif u.RateLimit == nil {\n\tu.RateLimit = &RateLimit{}\n\tdefer func() {\n\t\tu.RateLimit = nil\n\t}()\n}\n\nu.RateLimit.ExtractTo(api)\n```\n\n----------------------------------------\n\nTITLE: Changing Config Variables in Go for Tyk API Gateway\nDESCRIPTION: This snippet shows how to update configuration variables in the Tyk API Gateway. It demonstrates obtaining the current config, modifying it, setting the new config, and performing a reload if necessary.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n   ts := gateway.StartTest(nil)\n   defer ts.Close()\n    \n   // Obtains current config\n   currentConfig := ts.Gw.GetConfig()\n   // perform changes\n   currentConfig..HTTPProfile = true\n   // set new config\n   ts.Gw.SetConfig(currentConfig)\n   // in some cases will be needed a reload\n   ts.Gw.DoReload()\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Handlers in API Definition\nDESCRIPTION: JSON configuration for setting up custom event handlers for authentication failures.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"event_handlers\": {\n  \"events\": {\n    \"AuthFailure\": [\n      {\n        \"handler_name\": \"cp_dynamic_handler\",\n        \"handler_meta\": {\n          \"name\": \"my_handler\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Dispatcher Service for Tyk Coprocess\nDESCRIPTION: This snippet defines the gRPC service for the Tyk Coprocess dispatcher. It includes methods for dispatching objects and events.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/grpc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice Dispatcher {\n  rpc Dispatch (Object) returns (Object) {}\n  rpc DispatchEvent (Event) returns (EventReply) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Event Handler\nDESCRIPTION: Python implementation of an event handler for processing authentication failures.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom tyk.decorators import Event\n\n@Event\ndef my_handler(event, spec):\n    print(\"-- my_handler:\")\n    print(\" Event:\", event)\n    print(\" Spec:\", spec)\n```\n\n----------------------------------------\n\nTITLE: Building Tyk with Python Support\nDESCRIPTION: Shell commands for building Tyk with Coprocess and Python support enabled.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo build -tags 'coprocess python'\n\ncd coprocess/python\n./cythonize gateway\n```\n\n----------------------------------------\n\nTITLE: Running Tyk Gateway Tests\nDESCRIPTION: Command to run all tests for Tyk Gateway. Requires Redis to be running on the local machine with default port settings. For writing custom tests, refer to the provided testing guide.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Mocking Dashboard in Go for Tyk API Gateway\nDESCRIPTION: This code shows how to mock the dashboard for testing purposes in the Tyk API Gateway. It sets up a test server to handle dashboard API requests and configures the gateway to use this mock dashboard.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ndashboard := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.URL.Path == \"/system/apis\" {\n        w.Write([]byte(`{\"Status\": \"OK\", \"Nonce\": \"1\", \"Message\": [{\"api_definition\": {}}]}`))\n    } else {\n        t.Fatal(\"Unknown dashboard API request\", r)\n    }\n}))\n\nconf := func(confi *config.Config) {\n\t\tconfi.Global.UseDBAppConfigs = true\n        confi.Global.AllowInsecureConfigs = true\n        confi.Global.DBAppConfOptions.ConnectionString = dashboard.URL\n}\n\nts := gateway.StartTest(conf)\ndefer ts.Close()\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Test Runner Structure in Go\nDESCRIPTION: Defines the structure of the HTTP test runner with customizable behavior through function variables. The main struct contains Do, Assert, and RequestBuilder function fields that can be overridden to customize testing behavior.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPTestRunner struct {\n\tDo             func(*http.Request, *TestCase) (*http.Response, error)\n\tAssert         func(*http.Response, *TestCase) error\n\tRequestBuilder func(*TestCase) (*http.Request, error)\n}\nfunc (r HTTPTestRunner) Run(t testing.TB, testCases ...TestCase) {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Go Workspace for Plugin Development\nDESCRIPTION: Series of commands to set up a Go workspace for plugin development, including creating necessary files and fetching sample plugin code.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p plugins\ncd plugins\ngo mod init testplugin\ngo mod edit -go $(go mod edit -json go.mod | jq -r .Go)\nwget -q https://raw.githubusercontent.com/TykTechnologies/custom-go-plugin/refs/heads/master/go/src/CustomGoPlugin.go\ncd -\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Test Runner for Server Testing\nDESCRIPTION: Shows how to configure the HTTPTestRunner for testing against a live server. Sets a baseURL and overrides the Do and RequestBuilder functions to make actual HTTP requests to a server.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/TykTechnologies/tyk/test\"\n\n...\nbaseURL := \"http://example.com\"\nrunner := test.HTTPTestRunner{\n    Do: func(r *http.Request, tc *TestCase) (*http.Response, error) {\n      return tc.Client.Do(r)  \n    }\n    RequestBuilder: func(tc *TestCase) (*http.Request, error) {\n        tc.BaseURL = baseURL\n        return NewRequest(tc)\n    },\n}\nrunner.Run(t, testCases...)\n...\n```\n\n----------------------------------------\n\nTITLE: Building Plugin with Docker\nDESCRIPTION: Example command for building a Tyk plugin using the plugin compiler Docker image. This command builds a plugin for Tyk Gateway v3.0.4 and outputs a .so file.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v `pwd`:/plugin-source tykio/tyk-plugin-compiler:v3.0.4 testplugin.so\n```\n\n----------------------------------------\n\nTITLE: Using Storage API in Python Middleware\nDESCRIPTION: Example of using the Tyk storage API to interact with Redis from Python middleware.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/python/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom tyk.decorators import *\nfrom gateway import TykGateway as tyk\n\n@Pre\ndef SetKeyOnRequest(request, session, spec):\n    tyk.store_data( \"my_key\", \"expiring_soon\", 15 )\n    val = tyk.get_data(\"cool_key\")\n    return request, session\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for OAuth2.0 Introspection\nDESCRIPTION: Environment variables configuration for the OAuth2.0 introspection plugin, specifying the endpoint URL and authorization header value to be used in the introspection request.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/tests/plugin-compiler/testdata/test-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nOAUTH2_INTROSPECT_ENDPOINT=\"https://SOME_AUTHORIZATION_SERVER_INTROSPECTION_ENDPOINT\"\nOAUTH2_INTROSPECT_AUTHORIZATION=\"AUTHORIZATION_HEADER_VALUE\"\n```\n\n----------------------------------------\n\nTITLE: Basic Auth Configuration Example for OAuth2.0 Introspection\nDESCRIPTION: Example of configuring the plugin with Basic Authentication, showing the environment variable setup and the resulting HTTP request format used for token introspection.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/tests/plugin-compiler/testdata/test-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOAUTH2_INTROSPECT_AUTHORIZATION=\"Bearer 23410913-abewfq.123483\"\n\n     POST /introspect HTTP/1.1\n     Host: server.example.com\n     Accept: application/json\n     Content-Type: application/x-www-form-urlencoded\n     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\n\n     token=2YotnFZFEjr1zCsicMWpAA\n```\n\n----------------------------------------\n\nTITLE: Updating API Version in Tyk Tests\nDESCRIPTION: Example of updating an API version in Tyk tests. This shows how to modify specific version details of an API specification.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nts := gateway.StartTest(nil)\ndefer ts.Close()\n\nts.Gw.updateAPIVersion(spec, \"v1\", func(v *apidef.VersionInfo) {\n    v.Paths.BlackList = []string{\"/blacklist/literal\", \"/blacklist/{id}/test\"}\n    v.UseExtendedPaths = false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring API Definition JSON for OAuth2.0 Introspection Plugin\nDESCRIPTION: JSON configuration for enabling the OAuth2.0 Introspection plugin in a Tyk API definition. It sets up the plugin in the post_key_auth hook to validate tokens after authentication.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/tests/plugin-compiler/testdata/test-plugin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"custom_middleware\": {\n    \"post_key_auth\": [{\n      \"name\": \"OAuth2Introspect\",\n      \"path\": \"SOMEDIRECTORY/oauth2_introspection/oauth2_introspection.so\"\n    }],\n  \"driver\": \"goplugin\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoProcess Message Structure in C\nDESCRIPTION: C structure definition for message passing between Go and other languages using Protocol Buffers\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct CoProcessMessage {\n  void* p_data;\n  int length;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling VersionData in ExtractTo Method for OAS Struct in Go\nDESCRIPTION: Example of using helper functions to handle VersionData in the ExtractTo method of OAS structs.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/apidef-oas.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (g *GlobalRequestSizeLimit) ExtractTo(api *apidef.APIDefinition) {\n\tmainVersion := requireMainVersion(api)\n\tdefer func() {\n\t\tupdateMainVersion(api, mainVersion)\n\t}()\n\n\t// manipulate the Main VersionInfo here\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Gateway API Functions in Go\nDESCRIPTION: Example of exporting Go functions for C interoperability using cgo\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//export TykTriggerEvent\nfunc TykTriggerEvent( CEventName *C.char, CPayload *C.char ) {\n  eventName := C.GoString(CEventName)\n  payload := C.GoString(CPayload)\n\n  FireSystemEvent(tykcommon.TykEvent(eventName), EventMetaDefault{\n    Message: payload,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Python FFI Bridge\nDESCRIPTION: Example of Python/Cython code for calling exported C functions\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncdef extern:\n  void TykTriggerEvent(char* event_name, char* payload);\n\ndef call():\n  event_name = 'my event'.encode('utf-8')\n  payload = 'my payload'.encode('utf-8')\n  TykTriggerEvent( event_name, payload )\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Middleware in JSON\nDESCRIPTION: JSON configuration example showing how to set up custom middleware with ID extractor for authentication caching\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"custom_middleware\": {\n  \"pre\": [\n    {\n      \"name\": \"MyPreMiddleware\",\n      \"require_session\": false\n    }\n  ],\n  \"id_extractor\": {\n    \"extract_from\": \"header\",\n    \"extract_with\": \"value\",\n    \"extractor_config\": {\n      \"header_name\": \"Authorization\"\n    }\n  },\n  \"driver\": \"grpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Bento Config Schema Generator Script (Go)\nDESCRIPTION: Command to run the Bento Configuration Validator Schema generator script directly using Go. This method is useful for development purposes and allows specifying an output path.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/how-to-generate-bento-config-validation-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run generate_bento_config_schema.go\n```\n\n----------------------------------------\n\nTITLE: OAS Fixture Configuration Example\nDESCRIPTION: YAML configuration example showing how to set up an OAS to Classic API migration test fixture with custom authentication settings.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/oas-fixtures.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: \"Plugins\"\ntests:\n  - desc: \"From OAS to Classic\"\n    source: oas\n    debug: true\n    input:\n      x-tyk-api-gateway:\n        server:\n          authentication:\n            custom:\n              enabled: true\n              functionName: \"name\"\n              path: \"/path/to/file.so\"\n              rawBodyOnly: true\n              requireSession: true\n```\n\n----------------------------------------\n\nTITLE: Verifying Tyk Gateway Installation\nDESCRIPTION: Command to check if the Tyk Gateway is running correctly by querying the 'hello' endpoint. This should return a JSON response with status and version information.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/hello\n```\n\n----------------------------------------\n\nTITLE: OAS Fixture Error Configuration\nDESCRIPTION: YAML configuration showing how to set up error checking in OAS test fixtures.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/oas-fixtures.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    errors:\n      enabled: true\n      want: true\n```\n\n----------------------------------------\n\nTITLE: OAS Fixture Debug Output Configuration\nDESCRIPTION: YAML configuration demonstrating how to filter debug output by ignoring specific keys or values in the test results.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/oas-fixtures.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    ignores:\n      - key: \"use_\"\n        values: [false]\n      - key: \"disabled\"\n        values: [true]\n      - values: [\"\", 0]\n```\n\n----------------------------------------\n\nTITLE: Importing Build Package in Go\nDESCRIPTION: Example showing how to import and use the build package to access VERSION information that is injected at build time by goreleaser.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/internal/build/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/TykTechnologies/tyk/internal/build\"\n// use build.VERSION\n```\n\n----------------------------------------\n\nTITLE: Cloning Tyk Gateway Source Code\nDESCRIPTION: Command to clone a specific release branch of Tyk Gateway source code from GitHub.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch release-5.3.6 https://github.com/TykTechnologies/tyk.git tyk-release-5.3.6 || true\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Loading\nDESCRIPTION: Command to test loading the built plugin into the Tyk Gateway binary.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./tyk-release-5.3.6/tyk plugin load -f plugins/testplugin.so -s AuthCheck\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin with curl\nDESCRIPTION: Command to test the compiled plugin by making an HTTP request and verifying the response headers.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8080/goplugin/headers\n```\n\n----------------------------------------\n\nTITLE: Go Workspace File Structure\nDESCRIPTION: Example content of the Go workspace file (go.work) showing the included modules.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo 1.22.7\n\nuse (\n\t./plugins\n\t./tyk-release-5.3.6\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Symbols Using nm Command\nDESCRIPTION: Command to list compiled symbols from a plugin binary using nm tool. Shows exported functions and symbols from the testplugin.so file, useful for debugging compatibility issues.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# nm -gD testplugin.so | grep testplugin\n00000000014db4b0 R go:link.pkghashbytes.testplugin\n000000000170f7d0 D go:link.pkghash.testplugin\n000000000130f5e0 T testplugin.AddFooBarHeader\n000000000130f900 T testplugin.AddFooBarHeader.deferwrap1\n000000000130f980 T testplugin.AuthCheck\n0000000001310100 T testplugin.AuthCheck.deferwrap1\n000000000130f540 T testplugin.init\n0000000001310ce0 T testplugin.init.0\n0000000001ce9580 D testplugin..inittask\n0000000001310480 T testplugin.InjectConfigData\n0000000001310180 T testplugin.InjectMetadata\n0000000001d2a3e0 B testplugin.logger\n0000000001310cc0 T testplugin.main\n0000000001310820 T testplugin.MakeOutboundCall\n0000000001310c40 T testplugin.MakeOutboundCall.deferwrap1\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Image Commands\nDESCRIPTION: Series of commands for testing the plugin compiler image, including setting version tag, removing existing plugins, running the compiler, and starting the test environment.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport tag=v2.9.5\nrm -v testplugin/*.so\ndocker run --rm -v `pwd`/testplugin:/plugin-source tykio/tyk-plugin-compiler:${tag} testplugin.so\ndocker-compose -f test.yml up\n```\n\n----------------------------------------\n\nTITLE: Checking Build Configuration with go version\nDESCRIPTION: Using go version -m command to verify build configuration and ensure compatibility between Gateway and plugin. Shows build mode, compiler options, and environment variables.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/plugins/go-development-flow.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n[output truncated]\n\tbuild\t-buildmode=exe\n\tbuild\t-compiler=gc\n\tbuild\t-race=true\n\tbuild\t-tags=goplugin\n\tbuild\t-trimpath=true\n\tbuild\tCGO_ENABLED=1\n\tbuild\tGOARCH=amd64\n\tbuild\tGOOS=linux\n\tbuild\tGOAMD64=v1\n\tbuild\tvcs=git\n\tbuild\tvcs.revision=1db1935d899296c91a55ba528e7b653aec02883b\n\tbuild\tvcs.time=2024-09-24T12:54:26Z\n\tbuild\tvcs.modified=false\n```\n\n----------------------------------------\n\nTITLE: Generating Swagger.yml with Make Command\nDESCRIPTION: This Makefile command removes any existing swagger.yml file, generates a new one using Go, and then lints it with Redocly. It's used to create and validate the OpenAPI specification for Tyk gateway endpoints.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/schemas/swagger.md#2025-04-22_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nrm -f swagger.yml && go run main.go && redocly lint swagger.yml\n```\n\n----------------------------------------\n\nTITLE: Generating Bento Config Schema via Task Runner (Shell)\nDESCRIPTION: Command to generate the Bento Configuration Validator Schema using a task runner in the Tyk Gateway repository. This method automatically updates the schema file in the correct location.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/how-to-generate-bento-config-validation-schema.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntask generate-bento-config-validator-schema\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin with jq\nDESCRIPTION: Command to test the plugin using curl and jq to verify the expected header value is present.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8080/goplugin/headers | jq '.headers.Foo == \"Bar\"'\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command for building the plugin compiler Docker image with a specific Tyk Gateway version tag.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker build --build-arg TYK_GW_TAG=v2.8.4 -t tykio/tyk-plugin-compiler:v2.8.4 -f images/plugin-compiler/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Importing Bento Component for Schema Generation (Go)\nDESCRIPTION: Example of importing a Bento component (redis) for its side effects to include it in the generated JSON schema. This is part of the process for adding new input and output resources to the schema.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/how-to-generate-bento-config-validation-schema.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n_ \"http://github.com/warpstreamlabs/bento/public/components/redis\"\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Test Command\nDESCRIPTION: Command to execute the plugin test script with a specific version parameter. The version must be available in Docker Hub and is used by the plugin-compiler.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/smoke-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./test.sh <version>\n```\n\n----------------------------------------\n\nTITLE: Linting Exclusion for Bash Script in Tyk Gateway Tests\nDESCRIPTION: This code snippet shows a linting exclusion for a bash script in the Tyk Gateway test suite. It demonstrates a specific case where double quoting is not enforced to prevent globbing and word splitting, mainly for readability purposes.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIn ./api-functionality/test.sh line 12:\nsetup $1\n      ^-- SC2086 (info): Double quote to prevent globbing and word splitting.\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Configuration Example for OAuth2.0 Introspection\nDESCRIPTION: Example of configuring the plugin with Bearer token authentication, showing the environment variable setup and the resulting HTTP request format used for token introspection.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/tests/plugin-compiler/testdata/test-plugin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nOAUTH2_INTROSPECT_AUTHORIZATION=\"Bearer 23410913-abewfq.123483\"\n\n     POST /introspect HTTP/1.1\n     Host: server.example.com\n     Accept: application/json\n     Content-Type: application/x-www-form-urlencoded\n     Authorization: Bearer 23410913-abewfq.123483\n\n     token=2YotnFZFEjr1zCsicMWpAA\n```\n\n----------------------------------------\n\nTITLE: Implementing Fill Method for OAS Struct in Go\nDESCRIPTION: Pattern for implementing the Fill method in OAS structs. This method populates the struct from a classic API definition and ensures fields are reset when not configured.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/apidef-oas.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nif u.RateLimit == nil {\n\tu.RateLimit = &RateLimit{}\n}\n\nu.RateLimit.Fill(api)\nif ShouldOmit(u.RateLimit) {\n\tu.RateLimit = nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Auth Header in Go\nDESCRIPTION: Function to generate a Basic Authentication header by encoding username and password.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc genAuthHeader(username, password string) string {\n\ttoEncode := strings.Join([]string{username, password}, \":\")\n\tencodedPass := base64.StdEncoding.EncodeToString([]byte(toEncode))\n\treturn fmt.Sprintf(\"Basic %s\", encodedPass)\n}\n```\n\n----------------------------------------\n\nTITLE: Running OAS Fixtures Tests in Bash\nDESCRIPTION: Command to run the fixtures test file in isolation for testing API definition migrations.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/docs/dev/oas-fixtures.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -count=1 -v fixtures_test.go\n```\n\n----------------------------------------\n\nTITLE: Traditional Go Test for Basic Auth Wrong Password\nDESCRIPTION: Example of a traditional Go test function for testing Basic Authentication with a wrong password. This demonstrates the older testing style for comparison.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestBasicAuthWrongPassword(t *testing.T) {\n    spec := createSpecTest(t, basicAuthDef)\n    session := createBasicAuthSession()\n    username := \"4321\"\n\n    // Basic auth sessions are stored as {org-id}{username}, so we need to append it here when we create the session.\n    spec.SessionManager.UpdateSession(\"default4321\", session, 60)\n\n    to_encode := strings.Join([]string{username, \"WRONGPASSTEST\"}, \":\")\n    encodedPass := base64.StdEncoding.EncodeToString([]byte(to_encode))\n\n    recorder := httptest.NewRecorder()\n    req := testReq(t, \"GET\", \"/\", nil)\n    req.Header.Set(\"Authorization\", fmt.Sprintf(\"Basic %s\", encodedPass))\n\n    chain := getBasicAuthChain(spec)\n    chain.ServeHTTP(recorder, req)\n\n    if recorder.Code == 200 {\n        t.Error(\"Request should have failed and returned non-200 code!: \\n\", recorder.Code)\n    }\n\n    if recorder.Code != 401 {\n        t.Error(\"Request should have returned 401 code!: \\n\", recorder.Code)\n    }\n\n    if recorder.Header().Get(\"WWW-Authenticate\") == \"\" {\n        t.Error(\"Request should have returned WWW-Authenticate header!: \\n\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Version using JSON in Tyk Tests\nDESCRIPTION: Example of updating an API version using JSON unmarshaling in Tyk tests. This demonstrates how to modify API definitions using JSON data.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nts := gateway.StartTest(nil)\n defer ts.Close()\n\n ts.Gw.updateAPIVersion(spec, \"v1\", func(v *apidef.VersionInfo) {\n     json.Unmarshal([]byte(`[\n         {\n            \"path\": \"/ignored/literal\",\n            \"method_actions\": {\"GET\": {\"action\": \"no_action\"}}\n        },\n        {\n            \"path\": \"/ignored/{id}/test\",\n            \"method_actions\": {\"GET\": {\"action\": \"no_action\"}}\n        }\n    ]`), &v.ExtendedPaths.Ignored)\n })\n```\n\n----------------------------------------\n\nTITLE: System Tests Warning Documentation\nDESCRIPTION: Markdown documentation explaining the nature of system tests, their dependencies, and potential flakiness due to code and toolchain changes.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/tests/system/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# System tests\\n\\nThese tests are system level and depend on the current code structure\\nand go toolchain behaviour. They are flaky as code and the go toolchain\\nchanges and drifts from what's asserted here.\n```\n\n----------------------------------------\n\nTITLE: Overriding Default HTTP Server Options in Go for Tyk API Gateway\nDESCRIPTION: This code snippet demonstrates how to override default HTTP server options in the Tyk API Gateway configuration. It sets OverrideDefaults and SkipURLCleaning to true, and defers resetting the test config.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/TESTING.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nconfig.Global.HttpServerOptions.OverrideDefaults = true\nconfig.Global.HttpServerOptions.SkipURLCleaning = true\ndefer resetTestConfig()\n```\n\n----------------------------------------\n\nTITLE: AMQP Load Generator Usage Help\nDESCRIPTION: Command-line help output showing available options for the AMQP load generator script including protocol selection, URL configuration, and queue/exchange settings.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/tests/streams/scripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ go run amqp_load_generator.go -h\nUsage: amqp_load_generator [options]\n\nAMQP load generator. Publishes messages to a RabbitMQ queue using the specified protocol.\n\nOptions:\n  -h, --help     Print this message and exit.\n      --protocol AMQP protocol version to use. Supported values: amqp_0_9, amqp_1. Default: amqp_0_9.\n      --url      RabbitMQ server URL. Default: amqp://guest:guest@localhost:5672/.\n      --queue    RabbitMQ queue name. Default: tyk-streams-test-queue.\n      --exchange RabbitMQ exchange name, only valid for amqp_0_9 Default: tyk-streams-test-exchange.\n```\n\n----------------------------------------\n\nTITLE: Disabling Nginx Server in Tyk Multi-Cloud\nDESCRIPTION: Environment variable configuration to disable the built-in Nginx server in the Tyk Multi-Cloud Docker image. This can be set when running the container.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/ci/images/hybrid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-e DISABLENGINX=1\n```\n\n----------------------------------------\n\nTITLE: Running RabbitMQ in Docker\nDESCRIPTION: Docker command to run RabbitMQ 4.0.x with management interface exposed on ports 5672 and 15672.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/tests/streams/scripts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:4.0-management\n```\n\n----------------------------------------\n\nTITLE: Declaring API Header in C\nDESCRIPTION: C header file declaration for exported functions\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/README.md#2025-04-22_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#ifndef TYK_COPROCESS_API\n#define TYK_COPROCESS_API\nextern void TykTriggerEvent(char* event_name, char* payload);\n#endif\n```\n\n----------------------------------------\n\nTITLE: AMQP Load Generator Sample Execution\nDESCRIPTION: Example output showing the load generator publishing messages using AMQP 1.0 protocol with timestamps as payloads.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/tests/streams/scripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n➜  scripts git:(master) ✗ go run amqp_load_generator.go --protocol amqp_1\nPublishing message to amqp_1: {payload: 1744619969422}\nPublishing message to amqp_1: {payload: 1744619970429}\nPublishing message to amqp_1: {payload: 1744619971436}\nPublishing message to amqp_1: {payload: 1744619972439}\nPublishing message to amqp_1: {payload: 1744619973450}\nPublishing message to amqp_1: {payload: 1744619974460}\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Lua-CJSON Dependency via LuaRocks\nDESCRIPTION: Command to install the required lua-cjson package using the LuaRocks package manager. This package is essential for JSON processing in Lua-based Tyk middleware.\nSOURCE: https://github.com/tyktechnologies/tyk/blob/master/coprocess/lua/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n% luarocks install lua-cjson\n```"
  }
]