[
  {
    "owner": "fuellabs",
    "repo": "sway",
    "content": "TITLE: Core Sway Standard Library Components\nDESCRIPTION: The prelude's core components including Address, ContractId, Identity, Vec, StorageMap, Option, Result, assert, revert, log, and msg_sender. These components are automatically imported into every Sway program and provide essential functionality for blockchain development.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/prelude.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nAddress      // A struct containing a b256 value for wallet addresses\nContractId   // A struct containing a b256 value for contract IDs\nIdentity     // An enum containing Address & ContractID structs\nVec          // A growable, heap-allocated vector\nStorageMap   // A key-value mapping in contract storage\nOption       // An enum containing Some<T> or None\nResult       // An enum representing Ok or Err states\nassert       // Functions for condition verification\nrevert       // Functions for reverting execution\nlog          // Function for logging arbitrary stack types\nmsg_sender   // Function to get the calling Identity\n```\n\n----------------------------------------\n\nTITLE: Public Library Components Declaration\nDESCRIPTION: Demonstrates how to make library components publicly accessible using the pub keyword. Shows examples of exposing functions, structs, traits, and other components.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\npub const SOME_CONSTANT = 42;\n\npub struct Point {\n    x: u64,\n    y: u64,\n}\n\npub enum Color {\n    Red: (),\n    Blue: (),\n    Green: (),\n}\n\npub trait Shape {\n    fn area(self) -> u64;\n}\n\npub fn add_one(x: u64) -> u64 {\n    x + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Contract Logic in Sway\nDESCRIPTION: Implementation of the Counter contract that manages a count value in storage. The contract initializes a count with zero and provides methods to increment and decrement the count by one, as well as return the current value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/counter.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    count: u64 = 0,\n}\n\nimpl Counter for Contract {\n    #[storage(read, write)]\n    fn increment() {\n        storage.count = storage.count + 1;\n    }\n\n    #[storage(read, write)]\n    fn decrement() {\n        storage.count = storage.count - 1;\n    }\n\n    #[storage(read)]\n    fn count() -> u64 {\n        storage.count\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Trait in Sway\nDESCRIPTION: This example shows how to implement the 'Compare' trait for the 'u64' type, providing the required 'equals' method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl Compare for u64 {\n    fn equals(self, b: Self) -> bool {\n        self == b\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Native Asset Contract in Sway\nDESCRIPTION: This Sway contract implements a single native asset, equivalent to an ERC-20 token. It includes implementations for SRC-20 (Native Asset), SRC-3 (Mint and Burn), and SRC-5 (Ownership) standards. The contract allows minting and burning of tokens, setting metadata like name and symbol, and managing ownership.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_13\n\nLANGUAGE: sway\nCODE:\n```\n// ERC20 equivalent in Sway.\ncontract;\n\nuse standards::{\n    src3::SRC3,\n    src5::{\n        SRC5, \n        State, \n        AccessError,\n    },\n    src20::{\n        SetDecimalsEvent, \n        SetNameEvent, \n        SetSymbolEvent, \n        SRC20, \n        TotalSupplyEvent,\n    },\n};\nuse std::{\n    asset::{\n        burn,\n        mint_to,\n    },\n    call_frames::msg_asset_id,\n    constants::DEFAULT_SUB_ID,\n    context::msg_amount,\n    string::String,\n    contract_id::ContractId\n};\n\nconfigurable {\n    DECIMALS: u8 = 9u8,\n    NAME: str[7] = __to_str_array(\"MyAsset\"),\n    SYMBOL: str[5] = __to_str_array(\"MYTKN\"),\n}\n\nstorage {\n    total_supply: u64 = 0,\n    owner: State = State::Uninitialized,\n}\n\n// Native Asset Standard\nimpl SRC20 for Contract {\n    #[storage(read)]\n    fn total_assets() -> u64 {\n        1\n    }\n\n    #[storage(read)]\n    fn total_supply(asset: AssetId) -> Option<u64> {\n        if asset == AssetId::default() {\n            Some(storage.total_supply.read())\n        } else {\n            None\n        }\n    }\n\n    #[storage(read)]\n    fn name(asset: AssetId) -> Option<String> {\n        if asset == AssetId::default() {\n            Some(String::from_ascii_str(from_str_array(NAME)))\n        } else {\n            None\n        }\n    }\n\n    #[storage(read)]\n    fn symbol(asset: AssetId) -> Option<String> {\n        if asset == AssetId::default() {\n            Some(String::from_ascii_str(from_str_array(SYMBOL)))\n        } else {\n            None\n        }\n    }\n\n    #[storage(read)]\n    fn decimals(asset: AssetId) -> Option<u8> {\n        if asset == AssetId::default() {\n            Some(DECIMALS)\n        } else {\n            None\n        }\n    }\n}\n\n// Ownership Standard\nimpl SRC5 for Contract {\n    #[storage(read)]\n    fn owner() -> State {\n        storage.owner.read()\n    }\n}\n\n// Mint and Burn Standard\nimpl SRC3 for Contract {\n    #[storage(read, write)]\n    fn mint(recipient: Identity, sub_id: Option<SubId>, amount: u64) {\n        require(sub_id.is_some() && sub_id.unwrap() == DEFAULT_SUB_ID, \"incorrect-sub-id\");\n        require_access_owner();\n\n        let new_supply = storage.total_supply.read() + amount;\n        storage\n            .total_supply\n            .write(new_supply);\n        mint_to(recipient, DEFAULT_SUB_ID, amount);\n        \n        TotalSupplyEvent::new(\n            AssetId::default(), \n            new_supply, \n            msg_sender().unwrap()\n        ).log();\n    }\n\n    #[storage(read, write)]\n    fn burn(sub_id: SubId, amount: u64) {\n        require(sub_id == DEFAULT_SUB_ID, \"incorrect-sub-id\");\n        require(msg_amount() >= amount, \"incorrect-amount-provided\");\n        require(\n            msg_asset_id() == AssetId::default(),\n            \"incorrect-asset-provided\",\n        );\n        require_access_owner();\n\n        let new_supply = storage.total_supply.read() - amount;\n        storage\n            .total_supply\n            .write(new_supply);\n        burn(DEFAULT_SUB_ID, amount);\n        \n        TotalSupplyEvent::new(\n            AssetId::default(), \n            new_supply, \n            msg_sender().unwrap()\n        ).log();\n    }\n}\n\nabi SingleAsset {\n    #[storage(read, write)]\n    fn constructor(owner_: Identity);\n}\n\nimpl SingleAsset for Contract {\n    #[storage(read, write)]\n    fn constructor(owner_: Identity) {\n        require(storage.owner.read() == State::Uninitialized, \"owner-initialized\");\n        storage.owner.write(State::Initialized(owner_));\n    }\n}\n\n#[storage(read)]\nfn require_access_owner() {\n    require(\n        storage.owner.read() == State::Initialized(msg_sender().unwrap()),\n        AccessError::NotOwner,\n    );\n}\n\nabi EmitSRC20Events {\n    fn emit_src20_events();\n}\n\nimpl EmitSRC20Events for Contract {\n    fn emit_src20_events() {\n        // Metadata that is stored as a configurable should only be emitted once.\n        let asset = AssetId::default();\n        let sender = msg_sender().unwrap();\n        let name = Some(String::from_ascii_str(from_str_array(NAME)));\n        let symbol = Some(String::from_ascii_str(from_str_array(SYMBOL)));\n\n        SetNameEvent::new(asset, name, sender).log();\n        SetSymbolEvent::new(asset, symbol, sender).log();\n        SetDecimalsEvent::new(asset, DECIMALS, sender).log();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an ABI for a Smart Contract in Sway\nDESCRIPTION: Demonstrates how to implement an ABI for a specific contract using the 'impl <ABI name> for Contract' syntax, following the Checks, Effects, Interactions pattern.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_smart_contract/src/main.sw:abi_impl}}\n```\n\n----------------------------------------\n\nTITLE: Public Key Recovery from Signatures in Sway\nDESCRIPTION: Shows how to recover a public key from a cryptographic signature and message. The function demonstrates using the ec_recover method to obtain the PublicKey from a given signature and message.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:public_key_recovery}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Struct Storage Variables in Sway\nDESCRIPTION: Shows how to declare structs in persistent storage with both individual field assignments and by using a constructor that can be evaluated during compilation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nstruct Point {\n    x: u64,\n    y: u64,\n}\n\nimpl Point {\n    pub fn new(x: u64, y: u64) -> Self {\n        Self { x, y }\n    }\n}\n\nstorage {\n    // individual field assignment\n    point: Point = Point {\n        x: 0,\n        y: 0,\n    },\n    // constructor\n    public_point: Point = Point::new(0, 0),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wallet Contract Functions in Sway\nDESCRIPTION: Implements the wallet contract functionality, including receiving funds, tracking balances, and transferring funds to recipients. It includes access control to ensure only the owner can transfer funds.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/wallet.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl Wallet for Contract {\n    #[payable]\n    fn receive() {\n        assert(msg_asset_id() == BASE_ASSET_ID);\n        storage.received_amount.write(storage.received_amount.read() + msg_amount());\n    }\n\n    fn transfer(amount: u64, recipient: Identity) {\n        let sender = msg_sender().unwrap();\n        assert(sender.as_identity() == OWNER);\n        assert(storage.received_amount.read() >= amount);\n        storage.received_amount.write(storage.received_amount.read() - amount);\n        transfer(amount, BASE_ASSET_ID, recipient);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Instantiation in Sway\nDESCRIPTION: Demonstrates three different ways to instantiate structs: hardcoding values, using different variable names, and shorthand notation with matching field names.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    // Method 1: Hardcoding the values\n    let foo1 = Foo {\n        bar: 42,\n        baz: true,\n    };\n\n    // Method 2: Using variables with different names\n    let number = 42;\n    let boolean = true;\n    let foo2 = Foo {\n        bar: number,\n        baz: boolean,\n    };\n\n    // Method 3: Using variables with the same name as fields\n    let bar = 42;\n    let baz = true;\n    let foo3 = Foo { bar, baz };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Call Implementation in Sway\nDESCRIPTION: Demonstrates a basic contract-to-contract call setup with two contracts: ContractA defines a receivable interface, while ContractB implements the calling functionality.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/calling_contracts.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// ./contract_a.sw\ncontract;\n\nabi ContractA {\n    fn receive(field_1: bool, field_2: u64) -> u64;\n}\n\nimpl ContractA for Contract {\n    fn receive(field_1: bool, field_2: u64) -> u64 {\n        assert(field_1 == true);\n        assert(field_2 > 0);\n        return_45()\n    }\n}\n\nfn return_45() -> u64 {\n  45\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\n// ./contract_b.sw\ncontract;\n\nuse contract_a::ContractA;\n\nabi ContractB {\n    fn make_call();\n}\n\nconst contract_id = 0x79fa8779bed2f36c3581d01c79df8da45eee09fac1fd76a5a656e16326317ef0;\n\nimpl ContractB for Contract {\n    fn make_call() {\n      let x = abi(ContractA, contract_id);\n      let return_value = x.receive(true, 3); // will be 45\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Contract Call with Gas and Asset Forwarding\nDESCRIPTION: Shows how to make a contract call with specified gas limits and native asset transfers, demonstrating Sway's capability to forward multiple parameters in contract calls.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/calling_contracts.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nabi MyContract {\n    fn foo(field_1: bool, field_2: u64);\n}\n\nfn main() {\n    let x = abi(MyContract, 0x79fa8779bed2f36c3581d01c79df8da45eee09fac1fd76a5a656e16326317ef0);\n    let asset_id = 0x7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777_7777;\n    x.foo {\n        gas: 5000, asset_id: asset_id, coins: 5000\n    }\n    (true, 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Assets to Identity in Sway\nDESCRIPTION: Demonstrates how to mint a specified amount of an asset and send it to a target Identity, which can be either an Address or Contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/address-or-contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to}}\n```\n\n----------------------------------------\n\nTITLE: Transferring Assets to a Contract in Sway\nDESCRIPTION: This code snippet demonstrates how to transfer a specified amount of an asset to a contract. It uses the force_transfer_to_contract function, which takes the amount to transfer, the asset identifier, and the ContractId of the recipient contract as parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:force_transfer_to_contract}}\n```\n\n----------------------------------------\n\nTITLE: Enum with Struct Variants in Sway\nDESCRIPTION: Demonstrates how to create enums with structured variants containing additional data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\npub enum Shape {\n    Circle: Circle,\n    Square: Square,\n}\n\npub struct Circle {\n    pub radius: u64,\n    pub x: u64,\n    pub y: u64,\n}\n\npub struct Square {\n    pub side_length: u64,\n    pub x: u64,\n    pub y: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Storage Variables in Sway\nDESCRIPTION: Demonstrates how to declare persistent storage variables with initial values in a Sway smart contract using the storage block. Initial values must be compile-time constants.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    counter: u64 = 0,\n    new_counter: u64 = 0,\n    another_counter: u64 = 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Asset Native Token Contract in Sway\nDESCRIPTION: A comprehensive smart contract implementation that handles multiple native assets with minting, burning, and metadata management capabilities. It implements SRC-20 (Native Asset), SRC-3 (Mint and Burn), and SRC-5 (Ownership) standards. The contract maintains asset metadata including name, symbol, decimals, and total supply for each asset.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_14\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nuse standards::{\n    src5::{\n        SRC5, \n        State, \n        AccessError\n    },\n    src20::{\n        SetDecimalsEvent, \n        SetNameEvent, \n        SetSymbolEvent, \n        SRC20, \n        TotalSupplyEvent,\n    }\n    src3::SRC3,\n};\nuse std::{\n    asset::{\n        burn,\n        mint_to,\n    },\n    call_frames::msg_asset_id,\n    hash::{\n        Hash,\n    },\n    context::this_balance,\n    storage::storage_string::*,\n    string::String,\n    contract_id::ContractId\n};\n\nstorage {\n    total_assets: u64 = 0,\n    total_supply: StorageMap<AssetId, u64> = StorageMap {},\n    name: StorageMap<AssetId, StorageString> = StorageMap {},\n    symbol: StorageMap<AssetId, StorageString> = StorageMap {},\n    decimals: StorageMap<AssetId, u8> = StorageMap {},\n    owner: State = State::Uninitialized,\n}\n\n// Native Asset Standard\nimpl SRC20 for Contract {\n    #[storage(read)]\n    fn total_assets() -> u64 {\n        storage.total_assets.read()\n    }\n\n    #[storage(read)]\n    fn total_supply(asset: AssetId) -> Option<u64> {\n        storage.total_supply.get(asset).try_read()\n    }\n\n    #[storage(read)]\n    fn name(asset: AssetId) -> Option<String> {\n        storage.name.get(asset).read_slice()\n    }\n    \n    #[storage(read)]\n    fn symbol(asset: AssetId) -> Option<String> {\n        storage.symbol.get(asset).read_slice()\n    }\n\n    #[storage(read)]\n    fn decimals(asset: AssetId) -> Option<u8> {\n        storage.decimals.get(asset).try_read()\n    }\n}\n\n// Mint and Burn Standard\nimpl SRC3 for Contract {\n    #[storage(read, write)]\n    fn mint(recipient: Identity, sub_id: Option<SubId>, amount: u64) {\n        require(sub_id.is_some(), \"Error: SubId is None\");\n        require_access_owner();\n\n        let asset_id = AssetId::new(ContractId::this(), sub_id.unwrap());\n        let supply = storage.total_supply.get(asset_id).try_read();\n        if supply.is_none() {\n            storage.total_assets.write(storage.total_assets.try_read().unwrap_or(0) + 1);\n        }\n        let new_supply = supply.unwrap_or(0) + amount;\n        storage.total_supply.insert(asset_id, new_supply);\n        mint_to(recipient, sub_id, amount);\n        \n        TotalSupplyEvent::new(\n            asset_id, \n            new_supply, \n            msg_sender().unwrap()\n        ).log();\n    }\n    \n    #[storage(read, write)]\n    fn burn(sub_id: SubId, amount: u64) {\n        require_access_owner();\n        let asset_id = AssetId::new(ContractId::this(), sub_id);\n        require(this_balance(asset_id) >= amount, \"not-enough-coins\");\n        \n        let supply = storage.total_supply.get(asset_id).try_read();\n        let new_supply = supply.unwrap_or(0) - amount;\n        storage.total_supply.insert(asset_id, new_supply);\n        burn(sub_id, amount);\n\n        TotalSupplyEvent::new(\n            asset_id, \n            new_supply, \n            msg_sender().unwrap()\n        ).log();\n    }\n}\n\nabi MultiAsset {\n    #[storage(read, write)]\n    fn constructor(owner_: Identity);\n    \n    #[storage(read, write)]\n    fn set_name(asset: AssetId, name: Option<String>);\n\n    #[storage(read, write)]\n    fn set_symbol(asset: AssetId, symbol: Option<String>);\n\n    #[storage(read, write)]\n    fn set_decimals(asset: AssetId, decimals: u8);\n}\n\nimpl MultiAsset for Contract {\n    #[storage(read, write)]\n    fn constructor(owner_: Identity) {\n        require(storage.owner.read() == State::Uninitialized, \"owner-initialized\");\n        storage.owner.write(State::Initialized(owner_));\n    }\n    \n    #[storage(read, write)]\n    fn set_name(asset: AssetId, name: Option<String>) {\n        require_access_owner();\n        storage.name.insert(asset, StorageString {});\n        storage.name.get(asset).write_slice(name);\n\n        SetNameEvent::new(asset, name, msg_sender().unwrap()).log();\n    }\n\n    #[storage(read, write)]\n    fn set_symbol(asset: AssetId, symbol: Option<String>) {\n        require_access_owner();\n        storage.symbol.insert(asset, StorageString {});\n        storage.symbol.get(asset).write_slice(symbol);\n\n        SetSymbolEvent::new(asset, symbol, msg_sender().unwrap()).log();\n    }\n\n    #[storage(read, write)]\n    fn set_decimals(asset: AssetId, decimals: u8) {\n        require_access_owner();\n        storage.decimals.insert(asset, decimals);\n\n        SetDecimalsEvent::new(asset, decimals, msg_sender().unwrap()).log();\n    }\n}\n\n#[storage(read)]\nfn require_access_owner() {\n    require(\n        storage.owner.read() == State::Initialized(msg_sender().unwrap()),\n        AccessError::NotOwner,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Liquidity Pool Contract in Sway\nDESCRIPTION: This code implements a basic liquidity pool contract that allows users to add and remove liquidity using two tokens. The contract mints LP tokens to represent a user's share of the pool and manages token swaps with a constant product formula (x*y=k). It demonstrates Fuel's native asset operations including minting, burning, and balance tracking.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/liquidity_pool.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/liquidity_pool/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Defining an ABI Declaration in Sway\nDESCRIPTION: Demonstrates how to declare an Application Binary Interface (ABI) for a wallet contract, specifying methods for receiving and sending funds.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_abi/src/main.sw:abi}}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Storage in Sway\nDESCRIPTION: This example demonstrates both reading from and writing to storage in a single function. It uses the #[storage(read, write)] attribute to indicate both operations and shows how to increment the 'counter' based on its current value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/read-write.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read, write)]\nfn increment_counter_by(amount: u64) {\n    storage.counter += amount;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Trait Constraints in Generic Functions in Sway\nDESCRIPTION: This example demonstrates how to use trait constraints with generic functions. The function 'convert_to_rectangle' can convert any type T to Rectangle, as long as Rectangle implements Convert<T>.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generics_and_trait_constraints.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn convert_to_rectangle<T>(t: T) -> Rectangle\nwhere\n    Rectangle: Convert<T>\n{\n    Rectangle::from(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset-Specific Logic in Sway\nDESCRIPTION: This code demonstrates how to check which asset has been sent to the contract and perform different computations based on the asset type using the msg_asset_id() function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/msg-asset.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\npub fn deposit() {\n    if msg_asset_id() == BASE_ASSET_ID {\n        // Deposit base asset\n    } else {\n        // Deposit other asset\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Function in Sway\nDESCRIPTION: Demonstrates the basic syntax for creating a generic function that can operate on any type. The noop function takes an argument of type T and returns the same value unchanged.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn noop<T>(argument: T) -> T {\n    argument\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Smart Contract from a Script in Sway\nDESCRIPTION: Shows how to call a contract from a script using the 'abi cast' functionality, including how to specify special parameters like gas, coins, and asset_id.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_contract_caller_script/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageMap in Sway\nDESCRIPTION: Shows how to read values from a StorageMap using get() which returns the value at the specified key, and try_get() which returns an Option type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\n// can revert\nlet map_val = storage.map.get(0);\n\n// returns Option\nlet try_map_val = storage.map.try_get(0).unwrap_or(false);\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Owner Only Function Example in Sway\nDESCRIPTION: Demonstrates how to restrict a function to be callable only by the contract owner using the ownership library require_owner() modifier.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/access_control.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn owner_function() {\n    require_owner();\n    // Function logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing remove_liquidity Function in Sway\nDESCRIPTION: This function removes liquidity from the pool by burning liquidity tokens and returning a proportional amount of both tokens to the user.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/liquidity-pool.md#2025-04-17_snippet_2\n\nLANGUAGE: Sway\nCODE:\n```\nfn remove_liquidity(pool: LiquidityPool, liquidity_amount: u64) -> (LiquidityPool, u64, u64) {\n    let token1_amount = (liquidity_amount * pool.token1_balance) / pool.liquidity_tokens;\n    let token2_amount = (liquidity_amount * pool.token2_balance) / pool.liquidity_tokens;\n\n    LiquidityPool {\n        token1_balance: pool.token1_balance - token1_amount,\n        token2_balance: pool.token2_balance - token2_amount,\n        liquidity_tokens: pool.liquidity_tokens - liquidity_amount,\n    },\n    token1_amount,\n    token2_amount\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Sway\nDESCRIPTION: Demonstrates how to declare a struct named 'Foo' with a public field 'bar' of type u64 and a private field 'baz' of type bool. Public fields are accessible wherever the struct is accessible, while private fields are only accessible within the module where the struct is declared.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/structs.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Foo {\n    pub bar: u64,\n    baz: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Asset Transfer in Sway\nDESCRIPTION: Demonstrates how to transfer a specified amount of an asset to a target Identity. The function requires three parameters: the amount to transfer, the asset identifier, and the recipient's Identity.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/address-or-contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:transfer}}\n```\n\n----------------------------------------\n\nTITLE: Applying Checks-Effects-Interactions Pattern in Sway\nDESCRIPTION: This snippet illustrates the Checks-Effects-Interactions pattern in Sway. It ensures that all state changes are made before any external calls, preventing potential re-entrancy vulnerabilities.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/reentrancy.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn transfer(recipient: Address, amount: u64) {\n    // Check\n    require(balances.get(msg_sender()) >= amount, \"Insufficient balance\");\n\n    // Effect\n    balances.insert(msg_sender(), balances.get(msg_sender()) - amount);\n    balances.insert(recipient, balances.get(recipient) + amount);\n\n    // Interaction\n    let response = Notify::notify(recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Re-entrancy Guard in Sway Contract Function\nDESCRIPTION: This code demonstrates how to call the re-entrancy guard within a contract function. It should be placed at the beginning of the function to detect and prevent re-entrancy attacks.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/reentrancy.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn vulnerable_function() {\n    reentrancy_guard();\n    // Function logic\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Vector in Sway\nDESCRIPTION: Creates a mutable vector and adds elements using the push() method. The mut keyword allows the vector to be modified after initialization.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet mut v = Vec::new();\nv.push(5);\nv.push(6);\nv.push(7);\nv.push(8);\n```\n\n----------------------------------------\n\nTITLE: Reading from Storage in Sway\nDESCRIPTION: This example shows how to read a built-in type from storage in Sway. It uses the #[storage(read)] attribute to indicate a read operation and demonstrates accessing the 'counter' variable from storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/read-write.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn read_counter() -> u64 {\n    storage.counter\n}\n```\n\n----------------------------------------\n\nTITLE: Re-entrancy Guard Implementation\nDESCRIPTION: Demonstrates how to implement re-entrancy protection in Sway contracts using the sway-libs reentrancy guard.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/calling_contracts.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nuse reentrancy::reentrancy_guard;\n\nabi MyContract {\n    fn some_method();\n}\n\nimpl ContractB for Contract {\n    fn some_method() {\n        reentrancy_guard();\n        // do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Struct Storage Variables in Sway\nDESCRIPTION: Demonstrates writing to struct storage variables, both updating the entire struct and modifying individual fields within the stored struct.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n// field assignment\nstorage.point.x = 1;\nstorage.point.y = 2;\n\n// struct assignment\nstorage.point = Point::new(3, 4);\nstorage.public_point = Point::new(5, 6);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Modifying Arrays in Sway\nDESCRIPTION: These examples show how to declare arrays and modify their elements in Sway. Arrays in Sway have a fixed size and can hold elements of the same type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_9\n\nLANGUAGE: Sway\nCODE:\n```\nlet x = [1, 2, 3, 4, 5];\n\nlet mut x = [1, 2, 3, 4, 5];\nx[0] = 0;\n```\n\n----------------------------------------\n\nTITLE: Implementing swap Function in Sway\nDESCRIPTION: This function performs a token swap in the liquidity pool. It calculates the output amount based on the constant product formula and updates the pool balances.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/liquidity-pool.md#2025-04-17_snippet_3\n\nLANGUAGE: Sway\nCODE:\n```\nfn swap(pool: LiquidityPool, token1_in: u64, token2_out: u64) -> (LiquidityPool, u64) {\n    let k = pool.token1_balance * pool.token2_balance;\n    let new_token2_balance = pool.token2_balance - token2_out;\n    let new_token1_balance = k / new_token2_balance;\n    let token1_in_required = new_token1_balance - pool.token1_balance;\n\n    assert(token1_in >= token1_in_required, \"Insufficient input amount\");\n\n    LiquidityPool {\n        token1_balance: new_token1_balance,\n        token2_balance: new_token2_balance,\n        liquidity_tokens: pool.liquidity_tokens,\n    },\n    token2_out\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ownership Functions in Sway\nDESCRIPTION: Implements the set_owner and action functions. set_owner can only be called if there's no owner or by the current owner. The action function can only be called by the current owner.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/contract-ownership.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nimpl Ownership for Contract {\n    #[storage(read, write)]\n    fn set_owner(new_owner: Identity) {\n        if (storage.owner.is_none() || storage.owner.unwrap() == msg_sender().unwrap()) {\n            storage.owner = Option::Some(new_owner);\n        }\n    }\n\n    #[storage(read)]\n    fn action() {\n        require(storage.owner.unwrap() == msg_sender().unwrap(), \"Caller is not the owner\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Asset to Specific Identity\nDESCRIPTION: Demonstrates minting an asset directly to a specific identity using std::asset::mint_to()\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nstd::asset::mint_to(recipient, DEFAULT_SUB_ID, 1_000);\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageMap in Sway\nDESCRIPTION: Demonstrates how to insert values into a StorageMap using both insert() and try_insert() methods, where try_insert() returns an Option type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\n// void return type\nstorage.map.insert(0, true);\n\n// returns Option\nlet returned_value = storage.map.try_insert(0, true);\n```\n\n----------------------------------------\n\nTITLE: EVM Address Recovery from Signatures in Sway\nDESCRIPTION: Shows how to recover an Ethereum Virtual Machine (EVM) address from a signature and message. This functionality enables interoperability with Ethereum-based systems.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:evm_address_recovery}}\n```\n\n----------------------------------------\n\nTITLE: Reading from Struct Storage Variables in Sway\nDESCRIPTION: Shows how to read from struct storage variables, including reading individual fields and the entire struct from persistent storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n// field reading\nlet x = storage.point.x.read();\nlet y = storage.point.y.read();\n\n// struct reading\nlet point = storage.point.read();\nlet public_point = storage.public_point.read();\n```\n\n----------------------------------------\n\nTITLE: Minting Assets to Address in Sway\nDESCRIPTION: Demonstrates how to mint a specified amount of an asset and send it to a target address. Takes amount and address parameters to perform the minting operation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/address.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to_address}}\n```\n\n----------------------------------------\n\nTITLE: Using Type Constraints with Generics in Sway\nDESCRIPTION: This example demonstrates how to use type constraints with generics in Sway. The 'largest' function works with any type T that implements the 'PartialOrd' trait, ensuring the elements can be compared.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/generics/index.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn largest<T: PartialOrd>(list: &[T]) -> &T {\n    let mut largest = &list[0];\n    for item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n    largest\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Functions in Sway Script\nDESCRIPTION: This script demonstrates how to call functions on a Vault contract. It creates a callable type using the Vault interface and a contract address, then calls the deposit and balance functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/contract-call.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nuse std::constants::ZERO_B256;\n\nabi Vault {\n    fn deposit();\n    fn withdraw(amount: u64);\n    fn balance() -> u64;\n}\n\nfn main() {\n    let vault = abi(Vault, ZERO_B256);\n    vault.deposit();\n    let balance = vault.balance();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Attributes in Sway Functions\nDESCRIPTION: Examples of how to declare pure and impure functions in Sway using the storage attribute. Demonstrates read-only access, read-write access, and pure functions both with and without explicit declaration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/purity.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn get_amount() -> u64 {\n    ...\n}\n\n#[storage(read, write)]\nfn increment_amount(increment: u64) -> u64 {\n    ...\n}\n\nfn a_pure_function() {\n    ...\n}\n\n#[storage()]\nfn also_a_pure_function() {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Result<T, E> for Error Handling in Sway\nDESCRIPTION: Example of using Result<T, E> for error handling in a function that performs division. It returns Ok with the result if successful, or Err with an error message if division by zero is attempted.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/commonly_used_library_types.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nuse std::result::Result;\n\nfn divide(dividend: u64, divisor: u64) -> Result<u64, str[11]> {\n    if divisor == 0 {\n        Result::Err(\"Divide by 0\")\n    } else {\n        Result::Ok(dividend / divisor)\n    }\n}\n\nfn main() -> u64 {\n    let result = divide(10, 2);\n    match result {\n        Result::Ok(value) => value,\n        Result::Err(_) => 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Fuel Project with Forc\nDESCRIPTION: Command to create a new Sway project using the Forc build tool. This initializes a basic project structure with required files.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/forc_project.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforc new my-fuel-project\n```\n\n----------------------------------------\n\nTITLE: Fallback Function Implementation\nDESCRIPTION: Shows how to implement a fallback function in Sway contracts, including accessing method selectors and call arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/calling_contracts.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nabi MyContract {\n    fn some_method();\n}\n\nimpl MyContract for Contract {\n    fn some_method() {\n    }\n}\n\n#[fallback]\nfn fallback() {\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\n#[fallback]\nfn fallback() {\n    // the method selector is the first four bytes of sha256(\"foobar(bool,u64)\")\n    // per https://fuellabs.github.io/fuel-specs/master/protocol/abi#function-selector-encoding\n    let method_selector = std::call_frames::first_param::<u64>();\n\n    // the arguments tuple is (true, 42)\n    let arguments = std::call_frames::second_param::<(bool, u64)>();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Sent Asset Amount in Sway\nDESCRIPTION: This snippet demonstrates how to use the msg_amount() function to check the amount of any asset sent in a transaction. It includes logic to revert the transaction if an incorrect amount is sent.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/msg-asset-amount.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn deposit() {\n    let amount = msg_amount();\n    if amount != 10 {\n        revert(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Smart Contract ABI in Sway\nDESCRIPTION: This code demonstrates how to implement the Wallet ABI for a Contract. The implementation includes functions for checking balance, receiving funds from messages, and sending funds to specified recipients, with proper storage handling.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nuse std::\n    storage::StorageMap,\n    auth::msg_sender,\n    constants::ZERO_B256,\n    identity::Identity,\n    context::msg_amount;\n\n//Import the `ABI` interface, which will include the function signatures\nuse wallet_abi::Wallet;\n\nstorage {\n    balances: StorageMap<Identity, u64> = StorageMap {},\n}\n\nimpl Wallet for Contract {\n    #[storage(read)]\n    fn get_balance() -> u64 {\n        let sender = msg_sender().unwrap();\n        storage.balances.get(sender).unwrap_or(0)\n    }\n\n    #[storage(write)]\n    fn receive_funds() {\n        let sender = msg_sender().unwrap();\n        let amount = msg_amount();\n        storage.balances.insert(sender, storage.balances.get(sender).unwrap_or(0) + amount);\n    }\n\n    #[storage(read, write)]\n    fn send_funds(amount_to_send: u64, recipient_address: Identity) {\n        let sender = msg_sender().unwrap();\n        let current_balance = storage.balances.get(sender).unwrap_or(0);\n        require(current_balance >= amount_to_send, \"Not enough funds to send\");\n\n        storage.balances.insert(sender, current_balance - amount_to_send);\n        storage.balances.insert(recipient_address, storage.balances.get(recipient_address).unwrap_or(0) + amount_to_send);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Storage in Sway\nDESCRIPTION: This snippet demonstrates how to read a value from storage in Sway. It uses the storage() function to access a storage variable and retrieve its value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/storage.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstorage {\n    value: u64 = 0,\n}\n\n#[storage(read)]\nfn get_value() -> u64 {\n    storage().value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Result<T, E> Enum in Sway\nDESCRIPTION: Definition of the Result<T, E> enum used for returning and propagating errors. It has two variants: Ok(T) for success and Err(E) for errors.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/commonly_used_library_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nenum Result<T, E> {\n    Ok: T,\n    Err: E,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing add_liquidity Function in Sway\nDESCRIPTION: This function adds liquidity to the pool by depositing both tokens. It calculates the amount of liquidity tokens to mint based on the deposits and current pool state.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/liquidity-pool.md#2025-04-17_snippet_1\n\nLANGUAGE: Sway\nCODE:\n```\nfn add_liquidity(pool: LiquidityPool, token1_amount: u64, token2_amount: u64) -> (LiquidityPool, u64) {\n    let liquidity_minted: u64;\n    if pool.liquidity_tokens == 0 {\n        liquidity_minted = token1_amount;\n    } else {\n        let token1_fraction = (token1_amount * pool.liquidity_tokens) / pool.token1_balance;\n        let token2_fraction = (token2_amount * pool.liquidity_tokens) / pool.token2_balance;\n        liquidity_minted = min(token1_fraction, token2_fraction);\n    }\n\n    LiquidityPool {\n        token1_balance: pool.token1_balance + token1_amount,\n        token2_balance: pool.token2_balance + token2_amount,\n        liquidity_tokens: pool.liquidity_tokens + liquidity_minted,\n    },\n    liquidity_minted\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with msg_sender in Sway\nDESCRIPTION: Demonstrates how to implement an owner-only access control mechanism using msg_sender(). The function requires_owner checks if the caller matches the OWNER constant and reverts if unauthorized.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/msg-sender.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn requires_owner() {\n    // Only the owner should be able to call this function\n    require(msg_sender().unwrap() == OWNER, \"caller is not owner\");\n\n    // Function continues here\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Basic Storage Variables in Sway\nDESCRIPTION: Illustrates how to read from storage variables using both read() and try_read() methods. The try_read() method is recommended for additional safety.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet read_val = storage.counter.read();\n\nlet try_read_val = storage.counter.try_read().unwrap_or(0);\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Trait in Sway\nDESCRIPTION: This snippet illustrates the definition of a generic trait in Sway. The 'Container' trait is generic over type T and defines methods for working with containers of that type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/generics/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\ntrait Container<T> {\n    fn contains(&self, item: &T) -> bool;\n    fn add(&mut self, item: T);\n    fn remove(&mut self) -> Option<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New AssetId in Sway\nDESCRIPTION: Demonstrates creating a new AssetId using a ContractId and SubId with the new() function\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet asset = AssetId::new(contract_id, sub_id);\n```\n\n----------------------------------------\n\nTITLE: Creating an Incrementable Trait in Sway\nDESCRIPTION: Defines a trait that allows types to specify their own incrementor value, which can be used for calculating successors in a type-safe way.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\ntrait Incrementable {\n    /// Returns the value to add when calculating the successor of a value.\n    fn incrementor() -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Storage Collections in Sway\nDESCRIPTION: Demonstrates how to declare various storage collections including StorageMap, StorageVec, StorageBytes, and StorageString inside a storage block.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    map: StorageMap<u64, bool> = StorageMap {}, // key: u64, value: bool\n    vec: StorageVec<u64> = StorageVec {},          // vector of u64\n    bytes: StorageBytes = StorageBytes {},          // bytes\n    string: StorageString = StorageString {},       // string\n}\n```\n\n----------------------------------------\n\nTITLE: Array Operations in Sway\nDESCRIPTION: This comprehensive example demonstrates various operations with arrays in Sway, including declaration, accessing elements, and using built-in functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_10\n\nLANGUAGE: Sway\nCODE:\n```\nscript;\n\nfn main() -> u64 {\n    // Create an array of type [u64; 5]\n    let mut my_array = [1, 2, 3, 4, 5];\n\n    // Change the value of the third element\n    my_array[2] = 42;\n\n    // Get the length of an array\n    let array_length = my_array.len();\n\n    // Arrays must have a known length\n    let known_length_array: [u64; 3] = [4, 5, 6];\n\n    // You can get references to array values\n    let mut sum = 0;\n    let mut index = 0;\n    while index < known_length_array.len() {\n        sum += known_length_array[index];\n        index += 1;\n    }\n\n    // Return the sum\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop with Iterator\nDESCRIPTION: Demonstrates using a for loop to iterate over vector elements using an iterator.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nfor element in vector.iter() {\n    sum += element;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Proxy Contract in Sway\nDESCRIPTION: This snippet demonstrates a basic proxy contract implementation in Sway. It includes functions to set a target contract and execute external code, showcasing the use of run_external for upgradeable contracts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/external_code.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nstorage {\n    target_contract: ContractId = ContractId::from(0x0000000000000000000000000000000000000000000000000000000000000000),\n}\n\nabi Proxy {\n    #[storage(read, write)]\n    fn set_target_contract(new_target: ContractId);\n\n    #[storage(read)]\n    fn double_input(input: u64) -> u64;\n}\n\nimpl Proxy for Contract {\n    #[storage(read, write)]\n    fn set_target_contract(new_target: ContractId) {\n        storage.target_contract = new_target;\n    }\n\n    #[storage(read)]\n    fn double_input(input: u64) -> u64 {\n        let target = storage.target_contract;\n        abi TargetAbi {\n            fn double_input(input: u64) -> u64;\n        }\n        let result: u64 = abi(TargetAbi, target.into()).double_input(input);\n        result\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option<T> Enum in Sway\nDESCRIPTION: Definition of the Option<T> enum used for representing optional values. It has two variants: Some(T) for present values and None for absent values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/commonly_used_library_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nenum Option<T> {\n    None: (),\n    Some: T,\n}\n```\n\n----------------------------------------\n\nTITLE: Signature Verification Using Public Keys in Sway\nDESCRIPTION: Demonstrates verification of a signature using a public key and message. The code shows how to confirm that a message was cryptographically signed by the owner of a specific public key.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:signature_verification}}\n```\n\n----------------------------------------\n\nTITLE: Writing to a StorageVec Nested in a StorageMap\nDESCRIPTION: Demonstrates how to write to a StorageVec that is stored as a value in a StorageMap, showing the proper access pattern for nested storage collections.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/nested_storage_variables/src/main.sw:nested_vec_storage_write}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Smart Contract ABI in Sway\nDESCRIPTION: This code snippet shows how to define an Application Binary Interface (ABI) for a wallet contract. The ABI declares the external functions that can be called, including storage interactions and documentation comments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nabi Wallet {\n    /// By using `#[storage(read)]` we tell the compiler that this function\n    /// only needs read access to storage which is useful for gas estimation.\n    #[storage(read)]\n    fn get_balance() -> u64;\n\n    /// By using `#[storage(write)]` we tell the compiler that this function\n    /// modifies the contracts storage\n    #[storage(write)]\n    fn receive_funds();\n\n    /// We can use a combination of annotations if needed\n    #[storage(read, write)]\n    fn send_funds(amount_to_send: u64, recipient_address: Identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Storage Variables in Sway\nDESCRIPTION: This snippet demonstrates how to declare storage variables in Sway. It shows the syntax for defining a contract with a storage variable named 'counter' of type u64.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/read-write.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nstorage {\n    counter: u64 = 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet ABI Library Declaration in Sway\nDESCRIPTION: Defines the Application Binary Interface (ABI) for a wallet smart contract as a library in Sway. This ABI specifies the contract's public functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/wallet_smart_contract.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_abi/src/main.sw:abi_library}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods for a Struct in Sway\nDESCRIPTION: This example shows how to implement methods for the Point struct using the impl keyword. It includes a new method to create a Point and a translate method to move the Point.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/method.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl Point {\n    fn new(x: u64, y: u64) -> Self {\n        Self {\n            x,\n            y,\n        }\n    }\n\n    fn translate(ref mut self, dx: u64, dy: u64) {\n        self.x += dx;\n        self.y += dy;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assert with U64 Subtraction in Sway\nDESCRIPTION: Demonstrates how to use the assert function to ensure safe subtraction of unsigned 64-bit integers. The assertion checks if b is less than or equal to a before performing subtraction, preventing underflow errors.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/assert.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn subtract(a: u64, b: u64) -> u64 {\n    assert(b <= a);\n    a - b\n}\n```\n\n----------------------------------------\n\nTITLE: Converting b256 to ContractId or Address in Sway\nDESCRIPTION: Shows how to convert a b256 hash value to ContractId or Address types using the from() method. This is useful when you have a raw hash and need to convert it to identity types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from b256 to ContractId or Address\nlet b256_contract_id: ContractId = ContractId::from(b256_value);\nlet b256_address: Address = Address::from(b256_value);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Unnamed Catch-all in Sway\nDESCRIPTION: Demonstrates the encouraged pattern matching approach using an underscore (_) as a catch-all case. This approach indicates that important cases have been explicitly handled above and the remaining cases are not significant enough to warrant specific naming.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/pattern-matching.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/pattern_matching/src/lib.sw:style_match_unnamed}}\n```\n\n----------------------------------------\n\nTITLE: Defining Counter ABI with Storage Annotations in Sway\nDESCRIPTION: Definition of a Counter ABI using storage annotations to expose methods that manipulate and retrieve the count value. The ABI defines three functions: one to increment the count, one to decrement it, and one to get the current value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/counter.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nabi Counter {\n    #[storage(read, write)]\n    fn increment();\n    #[storage(read, write)]\n    fn decrement();\n    #[storage(read)]\n    fn count() -> u64;\n}\n```\n\n----------------------------------------\n\nTITLE: Revert Test Case in Sway\nDESCRIPTION: Shows how to test for expected revert conditions using #[test(should_revert)]. The test passes if the code reverts as expected.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/test.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:revert_test}}\n```\n\n----------------------------------------\n\nTITLE: Transferring Assets to Address in Sway\nDESCRIPTION: Demonstrates how to transfer a specified amount of an asset to a target address. Takes amount, asset, and address as parameters for the transfer operation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/address.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:transfer_to_address}}\n```\n\n----------------------------------------\n\nTITLE: Storing Multiple Data Types in a Vector Using Enums in Sway\nDESCRIPTION: Demonstrates how to store different types in a single vector by using an enum. Each enum variant can hold a different type, allowing the vector to effectively contain multiple data types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nenum SpreadsheetCell {\n    Int(u64),\n    Hash(b256),\n    Bool(bool),\n}\n\nlet row = vec![\n    SpreadsheetCell::Int(3),\n    SpreadsheetCell::Hash(0x0000000000000000000000000000000000000000000000000000000000000000),\n    SpreadsheetCell::Bool(true),\n];\n```\n\n----------------------------------------\n\nTITLE: Transferring Native Asset in Sway\nDESCRIPTION: Shows how to transfer native assets to a target identity\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nstd::asset::transfer(recipient, asset_id, 1_000);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Predicate in Sway\nDESCRIPTION: This snippet demonstrates a basic predicate implementation in Sway. The predicate takes two arguments and returns true if the first argument is greater than the second. Predicates must return a Boolean value and evaluate to true to be valid.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/predicate.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npredicate;\n\nfn main(x: u64, y: u64) -> bool {\n    x > y\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageVec in Sway\nDESCRIPTION: Demonstrates how to read values from a StorageVec using get() and try_get() methods, and how to retrieve the length of the vector with len() and is_empty().\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_12\n\nLANGUAGE: sway\nCODE:\n```\n// can revert\nlet vec_val = storage.vec.get(0);\n\n// returns Option\nlet try_vec_val = storage.vec.try_get(0).unwrap_or(0);\n\n// length\nlet vec_len = storage.vec.len();\nlet vec_is_empty = storage.vec.is_empty();\n```\n\n----------------------------------------\n\nTITLE: Minting Native Asset in Sway\nDESCRIPTION: Shows how to mint a new native asset using std::asset::mint()\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nstd::asset::mint(DEFAULT_SUB_ID, 1_000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Payable Function in Sway Contract\nDESCRIPTION: This code snippet demonstrates how to use the payable keyword to allow a contract function to accept forwarded assets. The function takes an amount parameter and is marked as payable.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/payable.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[payable]\nfn deposit(amount: u64) {\n    // Function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generic Values from Sway Storage\nDESCRIPTION: Shows how to retrieve a u64 value from storage using a b256 key. The get() function returns an Option type, returning None if the storage slot hasn't been set.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/store-get.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet value: Option<u64> = get(key);\n```\n\n----------------------------------------\n\nTITLE: Casting Between ContractId and b256 in Sway\nDESCRIPTION: Demonstrates the casting operations between ContractId and b256 types, showing how to convert between these two related types in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/contract-id.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/operations/namespace/src/lib.sw:contract_id_cast}}\n```\n\n----------------------------------------\n\nTITLE: Using Mutable Parameters with ref mut in Sway Functions\nDESCRIPTION: This example shows how to use 'ref mut' to make a function parameter mutable, allowing the function to modify the passed argument. It includes an increment function and its usage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/functions.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn increment(ref mut num: u64) {\n    num += 1;\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let mut num = 0;\n    increment(num);\n    assert(num == 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Early Return Pattern in Sway Functions\nDESCRIPTION: This snippet shows how to use explicit return as a mechanism to exit a function early when certain conditions are met, rather than just at the end of the function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/return.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/functions/src/explicit.sw:return_data}}\n```\n\n----------------------------------------\n\nTITLE: Using Associated Types in Trait Methods\nDESCRIPTION: Shows a complete example of declaring and implementing a trait with an associated type, including a method that returns the associated type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/associated_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\ntrait MyTrait {\n    type AssociatedType;\n    \n    fn get_value(self) -> Self::AssociatedType;\n}\n\nstruct MyStruct;\n\nimpl MyTrait for MyStruct {\n    type AssociatedType = u32;\n\n    fn get_value(self) -> Self::AssociatedType {\n        42\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Smart Contract Implementation in Sway\nDESCRIPTION: The complete implementation of a wallet smart contract in Sway that implements the wallet ABI. This code provides the actual functionality for the contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/wallet_smart_contract.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_smart_contract/src/main.sw:full_wallet}}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageMap in Sway\nDESCRIPTION: Shows how to read data from a StorageMap using the .get() method. It demonstrates handling the returned Option value with unwrap_or.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-map.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn get_user(id: u64) -> u64 {\n    let user = storage.user.get((msg_sender().unwrap(), id)).unwrap_or(0);\n    user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Owner Identity Storage in Sway\nDESCRIPTION: Defines storage for the owner's identity. Initially, there is no owner, so it's set to None. This storage is used to track the current owner of the contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/contract-ownership.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    owner: Option<Identity> = None,\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Pattern Matching in Sway\nDESCRIPTION: Demonstrates basic pattern matching in Sway where different integer values are matched against patterns, with the result assigned to a variable. Each arm returns a different multiple of 10 based on the matched value, with a catch-all case handling unmatched values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/single-line.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn simple_match(input: u64) -> u64 {\n    // With match expressions we can match our parameter to a specific variable.\n    let mult = match input {\n        0 => 0,\n        1 => 10,\n        2 => 20,\n        3 => 30,\n        4 => 40,\n        5 | 10 => 50,\n        _ => 999,\n    };\n\n    mult\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over StorageVec\nDESCRIPTION: Shows how to iterate over elements in a StorageVec with proper storage access.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn iterate_values() {\n    let mut i = 0;\n    while i < storage.v.len() {\n        let value = storage.v.get(i).read();\n        // Do something with value\n        i += 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Success Case for Contract Call\nDESCRIPTION: Test function that calls a contract method and verifies the successful result. Uses the abi cast with CONTRACT_ID to interact with the contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n#[test]\nfn test_success() {\n    let caller = abi(MyContract, CONTRACT_ID);\n    let result = caller.test_function {}();\n    assert(result == true)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Interface in Sway\nDESCRIPTION: This snippet defines an ABI (Application Binary Interface) for a Vault contract in Sway. It includes functions for depositing and withdrawing funds, as well as checking the balance.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/contract-call.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nabi Vault {\n    fn deposit();\n    fn withdraw(amount: u64);\n    fn balance() -> u64;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Owner at Compile Time in Sway\nDESCRIPTION: Shows how to set the contract owner during compile time by initializing storage with an owner value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/access_control.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    owner: Option<Identity> = Option::Some(Identity::Address(Address::from(OWNER_ADDRESS))),\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods and Associated Functions in Sway\nDESCRIPTION: This snippet demonstrates how to declare and implement methods and associated functions for a struct in Sway. It includes a constructor, a method that takes self as a parameter, and an associated function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/methods_and_associated_functions.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstruct Foo {\n    bar: u64,\n    baz: bool,\n}\n\nimpl Foo {\n    fn new(bar: u64) -> Self {\n        Self {\n            bar,\n            baz: false,\n        }\n    }\n\n    fn get_bar(&self) -> u64 {\n        self.bar\n    }\n\n    fn is_baz_true(&self) -> bool {\n        self.baz\n    }\n\n    fn flip_baz(ref mut self) {\n        self.baz = !self.baz;\n    }\n\n    fn one() -> u64 {\n        1\n    }\n}\n\nfn main() {\n    let foo = Foo::new(5);\n    let bar = foo.get_bar();\n    let baz = foo.is_baz_true();\n    let one = Foo::one();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signature Recovery in Sway\nDESCRIPTION: This code snippet demonstrates how to implement signature recovery in Sway. It defines a function that takes a message and a signature as inputs and returns the recovered public key.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/signatures/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::ecr::ec_recover;\n\nfn recover_public_key(message: b256, signature: b512) -> b256 {\n    ec_recover(message, signature)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structs in Sway\nDESCRIPTION: Example showing how to declare structs with public and private fields, including basic geometric types and nested structures. Demonstrates field access control and struct visibility.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Foo {\n    pub bar: u64,\n    pub baz: bool,\n}\n\npub struct Point {\n    pub x: u64,\n    pub y: u64,\n}\n\npub struct Line {\n    pub p1: Point,\n    pub p2: Point,\n}\n\npub struct TupleInStruct {\n    pub tuple: (u64, bool),\n}\n\npub struct StructWithPrivateFields {\n    some_number: u64,\n    another_number: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract ABI for Ownership in Sway\nDESCRIPTION: The interface contains functions to set the owner and perform an action that only the owner can use. It defines the contract's external interface.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/contract-ownership.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nabi Ownership {\n    #[storage(read, write)]\n    fn set_owner(new_owner: Identity);\n\n    #[storage(read)]\n    fn action();\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageVec in Sway\nDESCRIPTION: Demonstrates how to write data to StorageVec using the .push() method. Shows pushing a tuple containing the caller's Identity and an ID value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-vec.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn write_storage() {\n    let sender = msg_sender().unwrap();\n    storage.user.push((sender, 0));\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Contract Ownership in Sway\nDESCRIPTION: Shows how to revoke contract ownership by setting the owner to None.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/access_control.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn revoke_owner() {\n    storage.owner.write(Option::None);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Line Arms in Sway Match Expressions\nDESCRIPTION: This snippet demonstrates how to use multi-line arms in a match expression by wrapping the code after the arrow (=>) in curly braces {}. The example shows matching against a value and executing multiple statements within a single match arm.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/multi-line.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/control_flow/src/lib.sw:multi_line_match}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Predicate in Sway\nDESCRIPTION: A trivial predicate that always evaluates to true. This demonstrates the basic structure of a predicate in Sway, which requires a main function returning a Boolean value. When executed, this predicate will always return true, allowing any assets sent to its address to be claimed.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/predicates.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npredicate;\n\n// All predicates require a main function which returns a Boolean value.\nfn main() -> bool {\n    true\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from a StorageString Nested in a StorageMap\nDESCRIPTION: Demonstrates how to read from a StorageString that is nested within a StorageMap, showing the correct access pattern for retrieving string data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/nested_storage_variables/src/main.sw:nested_string_storage_read}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Storage Collections in Sway\nDESCRIPTION: Example showing how to declare nested storage collections in a storage block, including a StorageMap with StorageVec, a StorageMap with StorageString, and a StorageVec with StorageBytes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/nested_storage_variables/src/main.sw:nested_storage_declaration}}\n```\n\n----------------------------------------\n\nTITLE: Initializing StorageVec in Sway\nDESCRIPTION: Demonstrates how to import and initialize StorageVec from the standard library. Includes initialization of two storage variables: a single-value balance and a tuple-based user storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-vec.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::StorageVec;\nuse std::auth::msg_sender;\n\nstorage {\n    balance: StorageVec<u64> = StorageVec {},\n    user: StorageVec<(Identity, u64)> = StorageVec {},\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Payable Function\nDESCRIPTION: Demonstrates how to create a payable function that can receive native assets\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_12\n\nLANGUAGE: sway\nCODE:\n```\n#[payable]\nfn deposit() { }\n```\n\n----------------------------------------\n\nTITLE: Nested Enums in Sway\nDESCRIPTION: Shows how to define and use nested enums for error handling, including both preferred and inadvisable usage patterns.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\npub enum ArithmeticError {\n    DivisionByZero: (), \n    Overflow: (),\n}\n\npub enum ParseError {\n    InvalidCharacter: (),\n    TooLong: (),\n}\n\npub enum Error {\n    ArithmeticError: ArithmeticError,\n    ParseError: ParseError,\n}\n```\n\n----------------------------------------\n\nTITLE: Fuel Address Recovery from Signatures in Sway\nDESCRIPTION: Demonstrates how to recover a Fuel address from a signature and message. The code shows the process of obtaining an Address type from signature verification data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:address_recovery}}\n```\n\n----------------------------------------\n\nTITLE: Complex Storage Initialization with Multiple Patterns\nDESCRIPTION: Demonstrates two different approaches to storage initialization: explicit declaration and using associated functions. Shows how to track multiple values and use constructors in storage blocks.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/init.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    current_owners: u64 = 0,\n    // Explicit initialization\n    explicit_owner: Owner = Owner {\n        id: 1,\n        active: true,\n        role: Role::Admin,\n    },\n    // Constructor initialization\n    default_owner: Owner = Owner::default(),\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StorageVec in Sway\nDESCRIPTION: Shows how to import the StorageVec type for use in a Sway contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::StorageVec;\n```\n\n----------------------------------------\n\nTITLE: Creating an ABI Library in Sway\nDESCRIPTION: Shows how to define an ABI in a separate library file, which is considered a good practice as it allows callers to import the ABI directly when interacting with your contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_abi/src/main.sw:abi_library}}\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Functions in Traits\nDESCRIPTION: This example shows how to declare associated functions in a trait, which must be implemented by types adopting the trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\ntrait Trait {\n    fn associated_fn(self, b: Self) -> bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageVec in Sway\nDESCRIPTION: Shows how to retrieve data from StorageVec using the .get() method. Demonstrates reading both single values and unpacking tuple values from storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-vec.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn read_storage() {\n    let balance = storage.balance.get(0).unwrap_or(0);\n    let (identity, id) = storage.user.get(0).unwrap_or((Identity::Address(Address::from(0)), 0));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Marker Traits for Error Handling\nDESCRIPTION: This example shows how to use a marker trait 'Error' to specify that a generic argument must be compatible with the 'panic' expression.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nfn panic_with_error<E>(err: E) where E: Error {\n    panic err;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Vector Iteration Pattern in Sway\nDESCRIPTION: Shows a more complex iteration pattern using a while loop for greater control. This example iterates backwards through the vector and accesses only every second element.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet mut i = v.len() - 1;\nwhile i > 0 {\n    let n_ref = v.get(i).unwrap();\n    i -= 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Signature Verification Using EVM Addresses in Sway\nDESCRIPTION: Demonstrates verification of signatures using Ethereum Virtual Machine (EVM) addresses. This functionality allows Sway programs to verify signatures from Ethereum wallets and smart contracts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:evm_address_verification}}\n```\n\n----------------------------------------\n\nTITLE: Nested Storage Map Declaration\nDESCRIPTION: Shows how to declare nested storage maps for more complex data structures.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_nested}}\n```\n\n----------------------------------------\n\nTITLE: Storing Generic Values in Sway Storage\nDESCRIPTION: Demonstrates storing a u64 value in storage using a b256 key. The store() function takes a generic type T and stores it at the specified key location.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/store-get.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstore(key, 42);\n```\n\n----------------------------------------\n\nTITLE: Message Sending Intrinsic in Sway\nDESCRIPTION: This intrinsic is used for sending messages with arbitrary data and coins to a recipient address.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\n__smo<T>(recipient: b256, data: T, coins: u64)\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Contract ABI in Sway\nDESCRIPTION: Declares the interface for a wallet contract, including functions for receiving funds and transferring the base asset.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/wallet.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nabi Wallet {\n    #[payable]\n    fn receive();\n    fn transfer(amount: u64, recipient: Identity);\n}\n```\n\n----------------------------------------\n\nTITLE: Function with Implicit Return in Sway\nDESCRIPTION: This snippet illustrates a complete function using implicit return syntax. Unlike explicit returns, implicit returns can only be used at the end of a function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/return.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/functions/src/implicit.sw:return_data}}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageString in Sway\nDESCRIPTION: Demonstrates how to read string data from StorageString storage using read_string() which can revert and try_read_string() which returns an Option type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_18\n\nLANGUAGE: sway\nCODE:\n```\n// can revert\nlet string_val = storage.string.read_string();\n\n// returns Option\nlet try_string_val = storage.string.try_read_string().unwrap_or(String::new());\n```\n\n----------------------------------------\n\nTITLE: Declaring Tuples in Sway\nDESCRIPTION: This example demonstrates how to declare tuples in Sway. Tuples are created by wrapping values in parentheses, and can contain elements of different types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn declare_tuples() {\n    let empty = ();\n    let single_value = (42,);\n    let two_values = (1, 2);\n    let different_types = (42, true, \"sway\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sway Contract Implementation\nDESCRIPTION: A simple Sway contract that implements a test function returning a boolean value. This demonstrates the basic structure of a contract-type Sway program.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/forc_project.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nabi MyContract {\n    fn test_function() -> bool;\n}\n\nimpl MyContract for Contract {\n    fn test_function() -> bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Hashing Operations in Sway\nDESCRIPTION: Demonstrates how to use sha256 and keccak256 hash functions in Sway. The code shows importing the hash functions and using them on different types of data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/hashing/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Defining Supertraits in Sway\nDESCRIPTION: This snippet demonstrates how to create supertraits, where one trait requires functionality from another trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\ntrait Eq {\n    fn equals(self, b: Self) -> bool;\n}\n\ntrait Ord: Eq {\n    fn gte(self, b: Self) -> bool;\n}\n\nimpl Ord for u64 {\n    fn gte(self, b: Self) -> bool {\n        // As `Eq` is a supertrait of `Ord`, `Ord` can access the equals method\n        self.equals(b) || self.gt(b)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FizzBuzz as a Smart Contract in Sway\nDESCRIPTION: This Sway code implements FizzBuzz as a smart contract with an ABI method that accepts a u64 input and returns a custom enum. It demonstrates how to define custom types that will be automatically included in the ABI JSON for off-chain code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/fizzbuzz.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/fizzbuzz/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Testing Expected Reversion with should_revert Attribute\nDESCRIPTION: Test function that is expected to fail (revert) marked with the #[test(should_revert)] attribute. This test passes only if the assertion fails and causes a reversion.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n#[test(should_revert)]\nfn test_meaning_of_life() {\n    assert(6 * 6 == 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring StorageVec in Sway\nDESCRIPTION: Demonstrates how to declare a StorageVec in a storage block with type annotation and initialization.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    v: StorageVec<u64> = StorageVec {},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Proxy Function with Fallback in Sway\nDESCRIPTION: This snippet demonstrates a proxy function that attempts to call a non-existent function in the target contract, triggering a fallback function. It showcases how to handle cases where the target function doesn't exist.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/external_code.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn does_not_exist_in_the_target(_foo: u64) -> u64 {\n    let target = storage.target_contract;\n    abi TargetAbi {\n        fn does_not_exist_in_the_target(_foo: u64) -> u64;\n    }\n    let result: u64 = abi(TargetAbi, target.into()).does_not_exist_in_the_target(_foo);\n    result\n}\n```\n\n----------------------------------------\n\nTITLE: Encouraged Getter Function Naming in Sway\nDESCRIPTION: Demonstrates the recommended way of naming getter functions in Sway by omitting the 'get_' prefix. This style is more concise and aligns with Sway's preferred conventions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/getters.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub fn balance() -> u64 {\n    // ...\n}\n\npub fn owner() -> Address {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from a StorageVec Nested in a StorageMap\nDESCRIPTION: Shows how to read from a StorageVec that is nested within a StorageMap, demonstrating the correct way to access nested collections for retrieval operations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/nested_storage_variables/src/main.sw:nested_vec_storage_read}}\n```\n\n----------------------------------------\n\nTITLE: Minting Assets with Amount Parameter\nDESCRIPTION: Demonstrates how to mint a specified amount of an asset using the mint() function in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/mint.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Sway Library\nDESCRIPTION: The fundamental structure of a Sway library file, starting with the 'library' keyword to indicate that this file defines a library module.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\n// library code\n```\n\n----------------------------------------\n\nTITLE: Initializing StorageMap in Sway\nDESCRIPTION: Demonstrates how to initialize StorageMap variables in Sway. It shows two examples: one with a single value key and another with a tuple key.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-map.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::auth::msg_sender;\n\nstorage {\n    balance: StorageMap<Identity, u64> = StorageMap {},\n    user: StorageMap<(Identity, u64), u64> = StorageMap {},\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using Call Data in a Sway Contract\nDESCRIPTION: This example shows how to match on the function selector in a Sway contract. It extracts the first four bytes from the call data to determine which function is being called.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/call-data/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn main() -> bool {\n    // Extract the first four bytes from the call data\n    let selector = asm(r1, r2, r3) {\n        mir_call_data r1;\n        lw r2 r1 i0;\n        and r3 r2 0xFFFFFFFF;\n        r3: u32\n    };\n    \n    // Match the function selector\n    match selector {\n        0x0000000a => do_something(),\n        0x0000000b => do_something_else(),\n        _ => revert(0),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic If-Else Conditions in Sway\nDESCRIPTION: Demonstrates the basic structure of if-else conditional branching with numeric comparisons.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        // do something\n    } else if number % 3 == 0 {\n        // do something else\n    } else {\n        // do something else\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Sway Contract Using Forc CLI\nDESCRIPTION: Command to deploy a Sway smart contract using the Forc CLI tool, which creates and sends a deployment transaction to a running Fuel node\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_deploy.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforc deploy\n```\n\n----------------------------------------\n\nTITLE: Signature Verification Using Fuel Addresses in Sway\nDESCRIPTION: Shows how to verify a signature using a Fuel address and message. This method confirms that a message was signed by the private key associated with a specific Fuel address.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/hashing_and_cryptography.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/signatures/src/main.sw:address_verification}}\n```\n\n----------------------------------------\n\nTITLE: Using Option<T> for Handling Invalid Operations in Sway\nDESCRIPTION: Example of using Option<T> to handle potentially invalid operations, specifically division by zero. The function returns Some with the result if valid, or None if division by zero is attempted.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/commonly_used_library_types.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nuse std::option::Option;\n\nfn divide(dividend: u64, divisor: u64) -> Option<u64> {\n    if divisor == 0 {\n        Option::None\n    } else {\n        Option::Some(dividend / divisor)\n    }\n}\n\nfn main() -> u64 {\n    let result = divide(10, 2);\n    match result {\n        Option::Some(value) => value,\n        Option::None => 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Burning Assets using burn() Function in Sway\nDESCRIPTION: Demonstrates how to burn a specified amount of an asset using the burn() function. The amount parameter determines how much of the asset should be destroyed.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/burn.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nburn(100);\n```\n\n----------------------------------------\n\nTITLE: Generic Result Enum in Sway\nDESCRIPTION: Implementation of the standard library Result enum, which represents either a successful value of type T or an error of type E.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nenum Result<T, E> {\n    Ok: T,\n    Err: E,\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to a StorageString Nested in a StorageMap\nDESCRIPTION: Example of writing to a StorageString that is stored as a value in a StorageMap, showing the correct pattern for string storage within maps.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/nested_storage_variables/src/main.sw:nested_string_storage_write}}\n```\n\n----------------------------------------\n\nTITLE: Error Type Definition in Sway\nDESCRIPTION: Example showing how to define an error type enum variant with a custom error message using the #[error] and #[error_type] attributes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[error_type]\nenum SomeErrors {\n    #[error(m = \"An unexpected error occurred.\")]\n    UnexpectedError: (),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations in Sway\nDESCRIPTION: This example demonstrates how to explicitly annotate variables with their types in Sway. The compiler can usually infer types, but annotations can be added for clarity or when inference isn't possible.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/type.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/annotations/src/main.sw:example}}\n```\n\n----------------------------------------\n\nTITLE: Generic Struct with Trait Constraints in Sway\nDESCRIPTION: Example of a generic struct that requires its type parameter to implement the Add trait, demonstrating how trait constraints can be applied to struct definitions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\nstruct Foo<T>\n    where T: Add\n{\n    field_one: T,\n}\n```\n\n----------------------------------------\n\nTITLE: Sway Hash Module Usage\nDESCRIPTION: Reference to the hash module in Sway standard library showing available hashing functions and their generic implementation. The functions accept any type T and return a b256 hash value. Multiple values must be wrapped in composite types like tuples, arrays, structs, or enums for hashing.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/hashing/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`sha256`](sha256.md)\n- [`keccak256`](keccak256.md)\n```\n\n----------------------------------------\n\nTITLE: Declaring Storage Map in Sway\nDESCRIPTION: Shows how to declare a storage map that maps Address keys to u64 values in a storage block.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_decl}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Multi-Type StorageVec\nDESCRIPTION: Demonstrates declaring a StorageVec that can hold multiple types using an enum.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    row: StorageVec<SpreadsheetCell> = StorageVec {},\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values from ASM Block Using Tuple Pointers in Sway\nDESCRIPTION: Example showing how to return multiple values from an assembly block by modifying a tuple pointer. This technique allows assembly operations to modify data structures when more than one return value is needed.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/assembly.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/asm_return_tuple_pointer/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Converting to u16 in Sway\nDESCRIPTION: Shows how to convert various types to u16 in Sway, including conversion from u8 and casting from larger types with potential truncation using the into() and as methods.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from other types to u16\nlet a: u16 = 5u8.into();\n\n// The as operator can also be used\nlet b = 5u8 as u16;\n\n// Converting from larger types (this may truncate)\nlet c = 5u64 as u16;\nlet d = 5u32 as u16;\n```\n\n----------------------------------------\n\nTITLE: Defining a receive_funds Method in an ABI\nDESCRIPTION: Shows the declaration of an ABI method called 'receive_funds' which is designed to receive funds into a wallet. No parameters are required for this method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_abi/src/main.sw:receive_funds}}\n```\n\n----------------------------------------\n\nTITLE: Implementing ContractId Type in Sway\nDESCRIPTION: Definition of the ContractId type as a wrapper around b256 primitive type, used for unique contract identification.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\npub struct ContractId {\n    value: b256,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constants in Non-Trait Impl Blocks in Sway\nDESCRIPTION: This snippet shows how to define constants inside a non-trait impl block. It creates a Point struct with x and y coordinates and defines a ZERO constant representing the origin point.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/constants.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nstruct Point {\n    x: u64,\n    y: u64,\n}\n\nimpl Point {\n    const ZERO: Point = Point { x: 0, y: 0 };\n}\n\nfn main() -> u64  {\n    Point::ZERO.x\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Storage Management Using Low-Level API\nDESCRIPTION: Example of direct storage manipulation using the standard library's storage_api functions for manually writing to and reading from storage with custom keys.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_example/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Multiple Types in StorageVec\nDESCRIPTION: Shows how to define an enum to store multiple types in a StorageVec.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nenum SpreadsheetCell {\n    Int: u64,\n    Float: u64,\n    Text: str[4],\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Values into Storage Map\nDESCRIPTION: Demonstrates how to insert key-value pairs into a storage map using the insert method. Requires storage write annotation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_insert}}\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageMap in Sway\nDESCRIPTION: Illustrates how to write data to a StorageMap using the .insert() method. It retrieves the current balance, increments it, and stores the new value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/storage-map.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn increment_balance() {\n    let sender = msg_sender().unwrap();\n    let sender_balance = storage.balance.get(sender).unwrap_or(0);\n    storage.balance.insert(sender, sender_balance + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Implementation in Sway\nDESCRIPTION: Demonstrates how to import and use the log function from the standard library to log a u64 value. The example shows basic logging functionality that can be applied to any generic type including structs, enums, and strings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/log.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::logging::log;\n\nfn main() {\n    let number = 42;\n    log(number);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Storage Initialization in Sway\nDESCRIPTION: Demonstrates the basic syntax for declaring storage variables using the storage keyword. Shows empty storage initialization pattern.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/init.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    // empty storage\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from StorageBytes in Sway\nDESCRIPTION: Shows how to read byte data from StorageBytes storage using read_bytes() which can revert and try_read_bytes() which returns an Option type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_15\n\nLANGUAGE: sway\nCODE:\n```\n// can revert\nlet bytes_val = storage.bytes.read_bytes();\n\n// returns Option\nlet try_bytes_val = storage.bytes.try_read_bytes().unwrap_or(Bytes::new());\n```\n\n----------------------------------------\n\nTITLE: Using Trait Constraints in Sway\nDESCRIPTION: This snippet demonstrates how to use trait constraints with the 'where' keyword to restrict generic parameters in functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\ntrait SomeTrait { }\ntrait SomeOtherTrait { }\n\nfn expects_some_trait<T>(t: T) where T: SomeTrait {\n    // ...\n}\n\nfn expects_some_other_trait<T>(t: T) where T: SomeOtherTrait {\n    // ...\n}\n\nfn expects_both_traits<T>(t: T) where T: SomeTrait + SomeOtherTrait {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiquidityPool Struct in Sway\nDESCRIPTION: This snippet defines the LiquidityPool struct with fields for token balances and liquidity tokens. It uses the Sway language's struct syntax.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/liquidity-pool.md#2025-04-17_snippet_0\n\nLANGUAGE: Sway\nCODE:\n```\nstruct LiquidityPool {\n    token1_balance: u64,\n    token2_balance: u64,\n    liquidity_tokens: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SHA256 Function in Sway\nDESCRIPTION: This snippet demonstrates how to import the sha256 function in Sway. The sha256 function must be imported before it can be used in the code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/hashing/sha256.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::hash::sha256;\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Trait for Type Conversion in Sway\nDESCRIPTION: This snippet defines a generic 'Convert' trait in Sway, which includes a method 'from' for converting between types. The trait is generic over type T, allowing for flexible implementations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generics_and_trait_constraints.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ntrait Convert<T> {\n    fn from(t: T) -> Self;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Vector Using For Loop in Sway\nDESCRIPTION: Shows the idiomatic way to iterate over vector elements using a for loop with the iter() method. This approach is more concise and less error-prone than manual indexing.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nlet v = vec![100, 32, 57];\nfor n_ref in v.iter() {\n    // Use n_ref\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Address Type in Sway\nDESCRIPTION: This snippet shows the definition of the Address type in Sway. It is a struct containing a single field of type b256.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/address.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Address {\n    value: b256,\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Contract's ContractId\nDESCRIPTION: Demonstrates how to obtain the ContractId of the current contract in an internal context.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nimpl MyContract for Contract {\n    fn foo() {\n        let this_contract_id: ContractId = ContractId::this();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Storage Map\nDESCRIPTION: Shows how to retrieve values from a storage map using the get method and handle the Option return type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_get}}\n```\n\n----------------------------------------\n\nTITLE: Token Operation Examples\nDESCRIPTION: Commands for common token operations including checking balances and transferring tokens. These examples show how to interact with token contracts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n# Check token balance\nforc call <CONTRACT_ID> --abi <PATH> balance_of 0x1234...\n\n# Transfer tokens\nforc call <CONTRACT_ID> --abi <PATH> transfer 0x1234... 100 --live\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Complex Enums in Sway\nDESCRIPTION: Shows how to use pattern matching on enum variants in Sway by specifying the enum name and its variant. Pattern matching is a fundamental feature for handling different enum cases in conditional logic.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/complex/enum.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../../code/language/control_flow/src/lib.sw:complex_enum_match}}\n```\n\n----------------------------------------\n\nTITLE: Safe Math Implementation in FuelVM\nDESCRIPTION: Explains how math operations in the FuelVM are safe by default, with overflow checks performed at the VM implementation level rather than at bytecode level like in Solidity.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/solidity_differences.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMath in the FuelVM is by default safe (i.e. any overflow or exception is a panic). Safety checks are performed natively in the VM implementation, rather than at the bytecode level like [Solidity's default safe math](https://docs.soliditylang.org/en/latest/080-breaking-changes.html#silent-changes-of-the-semantics).\n```\n\n----------------------------------------\n\nTITLE: Converting to Byte Arrays in Sway\nDESCRIPTION: Demonstrates how to convert various types to byte arrays in Sway using functions from the bytes_conversions module. This allows for serialization of different types to a consistent byte representation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_15\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from u8 to byte array\nlet a: [u8; 1] = u8_to_byte_array(5u8);\n\n// Convert from u16 to byte array\nlet b: [u8; 2] = u16_to_byte_array(5u16);\n\n// Convert from u32 to byte array\nlet c: [u8; 4] = u32_to_byte_array(5u32);\n\n// Convert from u64 to byte array\nlet d: [u8; 8] = u64_to_byte_array(5u64);\n\n// Convert from u256 to byte array\nlet e: [u8; 32] = u256_to_byte_array(u256 { bits: [0, 0, 0, 5] });\n\n// Convert from b256 to byte array\nlet f: [u8; 32] = b256_to_byte_array(0x0000000000000000000000000000000000000000000000000000000000000005);\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Branching in Sway\nDESCRIPTION: Demonstrates basic conditional branching using if, else if, and else statements. The example shows how to check if a number is divisible by different values and execute different functions based on the conditions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/if-expressions.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/control_flow/src/lib.sw:conditional}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Enum in Sway\nDESCRIPTION: This code snippet shows the implementation of the Identity enum in Sway. It defines two variants: Address and ContractId, allowing for flexible handling of different identity types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/identity.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub enum Identity {\n    Address: Address,\n    ContractId: ContractId,\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Storage Maps\nDESCRIPTION: Demonstrates how to access values in nested storage maps.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_nested_access}}\n```\n\n----------------------------------------\n\nTITLE: Access Control with Identity\nDESCRIPTION: Demonstrates using Identity type for implementing access control that works with both Address and ContractId.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/identity/src/main.sw:access_control_with_identity}}\n```\n\n----------------------------------------\n\nTITLE: Using Never Type in Option Handling with Match Expression in Sway\nDESCRIPTION: This function example demonstrates using the Never type in a match expression when handling an Option. The return statement in the None case has type Never, allowing it to coerce to u64.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/never_type.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn foo() {\n    let num: u64 = match Option::None::<u64> {\n        Some(num) => num,\n        None => return,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in SCREAMING_SNAKE_CASE in Sway\nDESCRIPTION: Demonstrates the use of SCREAMING_SNAKE_CASE for defining constants in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/name-convention.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nconst PI: u64 = 3;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Trait in Sway\nDESCRIPTION: This snippet demonstrates how to declare a trait called 'Compare' with an interface surface and provided methods.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ntrait Compare {\n    fn equals(self, b: Self) -> bool;\n} {\n    fn not_equals(self, b: Self) -> bool {\n        !self.equals(b)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Generic Successor Function with Multiple Trait Constraints\nDESCRIPTION: Enhanced version of the successor function that uses multiple trait constraints. The type T must implement both Add and Incrementable traits, ensuring type safety.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nfn successor<T>(argument: T)\n    where T: Add,\n          T: Incrementable\n{\n    argument + T::incrementor()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Function in Sway\nDESCRIPTION: This snippet demonstrates how to define a generic function in Sway that can work with any type. The function 'first' takes a tuple of two elements of the same type and returns the first element.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/generics/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn first<T>(tuple: (T, T)) -> T {\n    tuple.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modules in snake_case in Sway\nDESCRIPTION: Shows how to define a module using snake_case naming convention in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/name-convention.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nmod my_module;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Trait for Specific Types in Sway\nDESCRIPTION: This example demonstrates how to implement the 'Convert' trait for specific types. It shows the conversion from 'Square' to 'Rectangle', illustrating how generic traits can be used with concrete types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generics_and_trait_constraints.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct Square {\n    side: u64,\n}\n\nstruct Rectangle {\n    width: u64,\n    height: u64,\n}\n\nimpl Convert<Square> for Rectangle {\n    fn from(square: Square) -> Self {\n        Self {\n            width: square.side,\n            height: square.side,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Constant in Sway\nDESCRIPTION: This snippet demonstrates how to define a simple constant in Sway. Constants are always evaluated at compile-time and cannot be mutable.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nconst ID: u32 = 0;\n```\n\n----------------------------------------\n\nTITLE: Burning Native Asset in Sway\nDESCRIPTION: Example of burning native assets using std::asset::burn()\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nstd::asset::burn(DEFAULT_SUB_ID, 1_000);\n```\n\n----------------------------------------\n\nTITLE: Formal Type Notation for Generic Functions\nDESCRIPTION: Mathematical notation showing the formal type signature of the noop function, indicating it's defined for all types T and maps from T to T.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nnoop :: ∀T. T -> T\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Addition Contract in Sway\nDESCRIPTION: A simple Sway contract that implements an addition function through the ContractABI interface. The contract provides a function to add two u64 numbers and return their sum.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nabi ContractABI {\n  fn add(a: u64, b: u64) -> u64;\n}\n\nimpl ContractABI for Contract {\n  fn add(a: u64, b: u64) -> u64 {\n    a + b\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storage Functions in Sway\nDESCRIPTION: Shows how to import the required storage functions store() and get() from the std::storage module.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/libraries/store-get.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::*;\n```\n\n----------------------------------------\n\nTITLE: Basic Match Expression Structure\nDESCRIPTION: Demonstrates the basic syntax of match expressions for pattern matching in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet result = match expression {\n    pattern1 => code_to_execute_if_expression_matches_pattern1,\n    pattern2 => code_to_execute_if_expression_matches_pattern2,\n    pattern3 | pattern4 => code_to_execute_if_expression_matches_pattern3_or_pattern4\n    ...\n    _ => code_to_execute_if_expression_matches_no_pattern,\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing to Storage in Sway\nDESCRIPTION: Illustrates how to annotate a function that both reads from and writes to storage using both 'read' and 'write' keywords.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/storage.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read, write)]\nfn increment_count(amount: u64) -> u64 {\n    let new_count = storage.count.read() + amount;\n    storage.count.write(new_count);\n    new_count\n}\n```\n\n----------------------------------------\n\nTITLE: Using Associated Functions in Sway\nDESCRIPTION: Shows how to call the 'new' associated function on the Point struct to create a new instance with coordinates (1, 2).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/associated-function.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn demo() {\n    let point = Point::new(1, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Storage in Sway\nDESCRIPTION: This example shows how to write a value to storage in Sway. It uses the storage() function to access and modify a storage variable.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/storage.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nstorage {\n    value: u64 = 0,\n}\n\n#[storage(write)]\nfn set_value(new_value: u64) {\n    storage().value = new_value;\n}\n```\n\n----------------------------------------\n\nTITLE: Stepping Through Factorial Calculation in Sway Debugger\nDESCRIPTION: This snippet shows how to step through the factorial calculation loop, inspecting register values at each iteration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n>> c\nStopped on breakpoint at address 588 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n\n>> r 0x10 0x11\nreg[0x10] = 1        # reg16\nreg[0x11] = 2        # reg17\n\n>> c\nStopped on breakpoint at address 588 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n\n>> r 0x10 0x11\nreg[0x10] = 2        # reg16\nreg[0x11] = 3        # reg17\n\n>> c\nStopped on breakpoint at address 588 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n\n>> r 0x10 0x11\nreg[0x10] = 6        # reg16\nreg[0x11] = 4        # reg17\n\n>> c\nStopped on breakpoint at address 588 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n\n>> r 0x10 0x11\nreg[0x10] = 24       # reg16\nreg[0x11] = 5        # reg17\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Type StorageVec\nDESCRIPTION: Shows how to push different types of values to a StorageVec using enum variants.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read, write)]\nfn use_row() {\n    storage.row.push(SpreadsheetCell::Int(3));\n    storage.row.push(SpreadsheetCell::Text(\"blue\"));\n    storage.row.push(SpreadsheetCell::Float(10));\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Base Asset in Sway\nDESCRIPTION: Example of retrieving the base asset (Ether) using the base() function\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nlet base_asset = AssetId::base();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Annotation Usage in Sway\nDESCRIPTION: Shows examples of variable declarations with and without type annotations. Demonstrates how type annotations can be omitted when the compiler can infer types, while still allowing explicit type declarations when it improves code clarity.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/annotations.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/annotation_style/src/lib.sw:type_annotation}}\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageBytes in Sway\nDESCRIPTION: Demonstrates how to write byte data to StorageBytes storage. This shows storing a Bytes object into persistent storage using store() and try_store() methods.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_14\n\nLANGUAGE: sway\nCODE:\n```\nlet b = Bytes::from_str_array(\"fuel\");\n\n// void return type\nstorage.bytes.store_bytes(b.clone());\n\n// returns Option\nlet store_result = storage.bytes.try_store_bytes(b);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tuple Elements by Index in Sway\nDESCRIPTION: This example shows how to access individual elements from a tuple using index notation. In Sway, tuple indices start from 0.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn access_tuple_by_index() {\n    let point = (1, 2, 3, 4);\n    let x = point.0;\n    let y = point.1;\n    let z = point.2;\n    let w = point.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Transfer Function in Sway\nDESCRIPTION: Shows how to import the necessary transfer function for asset operations in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/address.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:transfer_import}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Methods for a Generic Type\nDESCRIPTION: An implementation block that adds methods to the Option<T> type, showing how to define functionality for types in a library.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nimpl<T> Option<T> {\n\n    fn is_some(self) -> bool {\n        // body of is_some\n    }\n\n    // other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Balance in Sway\nDESCRIPTION: This function retrieves the balance of a specific asset for the current contract. It uses the `this_balance` function from the `std::context::this_balance` module.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/balance.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::context::this_balance;\n\nfn contract_balance(asset_id: ContractId) -> u64 {\n    this_balance(asset_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fallback Function in Target Contract in Sway\nDESCRIPTION: This snippet shows how to implement a fallback function in a target contract. It demonstrates accessing function parameters using the call_frames module from the std-lib.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/external_code.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n#[fallback]\nfn fallback() {\n    let args = std::call_frames::called_args();\n    let foo = args[0].get::<u64>().unwrap();\n    let result = foo * 3;\n    std::call_frames::output(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a send_funds Method in an ABI\nDESCRIPTION: Shows the declaration of an ABI method called 'send_funds' which takes two parameters: the amount to send and the address to send the funds to.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_abi/src/main.sw:send_funds}}\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Asset ID\nDESCRIPTION: Demonstrates how to get the asset ID from a transaction\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\nlet asset = std::call_frames::msg_asset_id();\n```\n\n----------------------------------------\n\nTITLE: Test Annotation Example in Sway\nDESCRIPTION: Shows the syntax for marking test functions in Sway using the #[test] annotation for unit testing.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[test]\n```\n\n----------------------------------------\n\nTITLE: Converting to Identity Type in Sway\nDESCRIPTION: Demonstrates how to convert ContractId and Address types to the Identity type in Sway. This is useful when working with interfaces that accept the Identity type for flexibility.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from ContractId or Address to Identity\nlet contract_identity: Identity = contract_id.into();\nlet address_identity: Identity = address.into();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Boolean Operations in Sway\nDESCRIPTION: Shows basic Boolean variable declaration and manipulation using the NOT operator (!). The function creates two Boolean variables and performs logical operations to demonstrate Boolean type usage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/built-ins/booleans/src/lib.sw:syntax}}\n```\n\n----------------------------------------\n\nTITLE: Importing an ABI in Sway\nDESCRIPTION: Shows how to import an ABI into either a script for calling or a contract for implementing. This example imports a Wallet ABI.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/smart_contracts.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_smart_contract/src/main.sw:abi_import}}\n```\n\n----------------------------------------\n\nTITLE: If Let Pattern Matching Example 1\nDESCRIPTION: Demonstrates basic pattern matching using if let to compare an enum variant.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/if-expressions.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/control_flow/src/lib.sw:if_let_example1}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Various Numeric Types in Sway\nDESCRIPTION: This snippet demonstrates different ways to declare numeric types in Sway, including hexadecimal, binary, base-10, and underscore-delineated formats.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_2\n\nLANGUAGE: Sway\nCODE:\n```\n0xffffff    // hexadecimal\n0b10101010  // binary\n10          // base-10\n100_000     // underscore delineated base-10\n0x1111_0000 // underscore delineated binary\n0xfff_aaa   // underscore delineated hexadecimal\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageString in Sway\nDESCRIPTION: Shows how to write string data to StorageString storage using store_string() which can revert and try_store_string() which returns an Option type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_17\n\nLANGUAGE: sway\nCODE:\n```\nlet s = String::from_str_array(\"fuel\");\n\n// void return type\nstorage.string.store_string(s.clone());\n\n// returns Option\nlet store_result = storage.string.try_store_string(s);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Target Contract for Upgradeable Proxy in Sway\nDESCRIPTION: This snippet shows an implementation contract that can be used with the proxy contract. It includes a function to double an input value and update storage, demonstrating how upgradeable contracts work in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/external_code.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nstorage {\n    value: u64 = 0,\n}\n\nabi Target {\n    #[storage(read, write)]\n    fn double_input(input: u64) -> u64;\n}\n\nimpl Target for Contract {\n    #[storage(read, write)]\n    fn double_input(input: u64) -> u64 {\n        let new_value = input * 2;\n        storage.value = new_value;\n        new_value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Struct in Sway\nDESCRIPTION: This example shows how to define a generic struct in Sway. The 'Wrapper' struct can hold a value of any type, demonstrating the use of generics in data structures.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/generics/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct Wrapper<T> {\n    value: T,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multi-Contract Call Test in Sway\nDESCRIPTION: This Sway code defines a contract with two ABIs (CallerContract and CalleeContract) and implements a test function that makes calls to both contracts. The test asserts the return values of these calls.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_ide.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nabi CallerContract {\n    fn test_false() -> bool;\n}\n\nimpl CallerContract for Contract {\n    fn test_false() -> bool {\n        false\n    }\n}\n\nabi CalleeContract {\n    fn test_true() -> bool;\n}\n\n#[test]\nfn test_multi_contract_calls() {\n    let caller = abi(CallerContract, CONTRACT_ID);\n    let callee = abi(CalleeContract, callee::CONTRACT_ID);\n\n    let should_be_false = caller.test_false();\n    let should_be_true = callee.test_true();\n    assert(!should_be_false);\n    assert(should_be_true);\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Pattern Matching with If Let in Sway\nDESCRIPTION: Shows how to define an enum type Foo with variants and use it in pattern matching scenarios.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/if-expressions.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/control_flow/src/lib.sw:if_let_enum}}\n```\n\n----------------------------------------\n\nTITLE: Associated Constants Example in Sway\nDESCRIPTION: Shows how to use associated constants within traits, referenced from the code examples directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/traits/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/traits/associated-consts/src/lib.sw}}\n```\n\n----------------------------------------\n\nTITLE: Checking External Contract Balance\nDESCRIPTION: Shows how to check the balance of an external contract\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\nlet balance = std::context::balance_of(target, asset_id);\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens from Contract in Sway\nDESCRIPTION: This snippet demonstrates how to transfer tokens from a contract to a specified address. It uses the `transfer` function from the `std::token::transfer` module to send tokens.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/balance.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse std::token::transfer;\n\nfn transfer_from_contract(amount: u64, asset_id: ContractId, to: Address) {\n    transfer(amount, asset_id, to);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom Types with Traits\nDESCRIPTION: This snippet demonstrates how to define a custom struct 'MyCard' and implement the 'Card' trait for it, allowing it to be used with functions that expect the 'Card' trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nuse games::*;\n\nstruct MyCard {\n    suit: Suit,\n    value: u8\n}\n\nimpl Card for MyCard {\n    fn suit(self) -> Suit {\n        self.suit\n    }\n    fn value(self) -> u8 {\n        self.value\n    }\n}\n\nfn main() {\n    let mut i = 52;\n    let mut deck: Vec<MyCard> = Vec::with_capacity(50);\n    while i > 0 {\n        i = i - 1;\n        deck.push(MyCard { suit: generate_random_suit(), value: i % 4}\n    }\n    play_game_with_deck(deck);\n}\n\nfn generate_random_suit() -> Suit {\n  [ ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing msg_amount Function in Sway\nDESCRIPTION: This snippet shows how to import the msg_amount() function from the Sway standard library. This function is used to retrieve the amount of asset sent in a transaction.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/msg-asset-amount.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::context::msg_amount;\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Functionality in Sway\nDESCRIPTION: Demonstrates how to use the log function to generate both Log and LogData receipts for different data types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nfn log_values(){\n  // Generates a Log receipt\n  log(42);\n\n  // Generates a LogData receipt\n  let string = \"sway\";\n  log(string);\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Multiple Values with SHA256 in Sway\nDESCRIPTION: This code snippet shows how to use the sha256 function to hash multiple values in Sway. The values are wrapped in a tuple, which is then passed to the sha256 function. Other compound types can also be used for hashing multiple values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/hashing/sha256.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet hash = sha256((value_1, value_2, value_3));\n```\n\n----------------------------------------\n\nTITLE: Declaring and Accessing Tuples in Sway\nDESCRIPTION: These examples show how to declare tuples of different types and how to access their values using tuple indexing and destructuring in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_7\n\nLANGUAGE: Sway\nCODE:\n```\nlet x: (u64, u64) = (0, 0);\n\nlet x: (u64, bool) = (42, true);\nassert(x.1);\n\nstruct Foo {}\nlet x: (u64, Foo, bool) = (42, Foo {}, true);\nlet (number, foo, boolean) = x;\n```\n\n----------------------------------------\n\nTITLE: Importing Re-entrancy Guard in Sway\nDESCRIPTION: This snippet shows how to import the stateless re-entrancy guard provided by Sway. The guard reverts at run-time when re-entrancy is detected.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/reentrancy.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::reentrancy::*;\n```\n\n----------------------------------------\n\nTITLE: Adding Local Path Dependencies in Forc.toml\nDESCRIPTION: Example demonstrating how to reference a local library using the path dependency source. The dependency 'custom_lib' is referenced from a relative path.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/dependencies.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncustom_lib = { path = \"../custom_lib\" }\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases to Simplify Complex Types in Sway\nDESCRIPTION: Demonstrates how type aliases can improve code readability by replacing verbose type declarations with shorter, more descriptive names.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_types.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\ntype MyArray = [MyStruct<u64, b256>; 5];\n\nfn process(arrays: [MyArray; 10]) -> MyArray {\n    let buffer: MyArray = arrays[0];\n    // Do something with buffer\n    buffer\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single While Loop with Multiple Conditions in Sway\nDESCRIPTION: This snippet demonstrates a while loop in Sway that uses two conditions to control iteration. The loop continues as long as the counter is less than 10 and the condition variable is true. It showcases how to combine multiple conditions and modify loop control variables within the loop body.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/looping/while.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet mut counter = 0;\nlet mut condition = true;\n\nwhile counter < 10 && condition {\n    if counter == 5 {\n        condition = false;\n    }\n    counter += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Sway Style Guide Introduction\nDESCRIPTION: This markdown snippet introduces the concept of programming language style guides and states the purpose of the document for Sway code styling.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Style Guide\n\nProgramming languages have different ways of styling code i.e. how variables, functions, structures etc. are written.\n\nThe following snippets present the style guide for writing `Sway`.\n\n> TODO: overview of content\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Unit Test in Sway\nDESCRIPTION: A simple test function annotated with the #[test] attribute that verifies a mathematical operation. Tests pass if they return successfully without reverting.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[test]\nfn test_meaning_of_life() {\n    assert(6 * 7 == 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating revert Function Usage in Sway\nDESCRIPTION: This snippet shows how to use the revert function in Sway. It takes a u64 parameter as an exit code, which can be used to distinguish between different reverts. The function will either panic and crash the program in a predicate context or revert the virtual machine in other contexts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/revert.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let _result = revert(42);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Internal Libraries in Sway\nDESCRIPTION: Shows how to import an internal library using the 'mod' keyword and selectively import items using the 'use' keyword. The example demonstrates bringing 'my_library' into scope and using its functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/internal.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/program-types/libraries/internal/my_lib/src/lib.sw}}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using an Equality Function in Sway\nDESCRIPTION: This snippet demonstrates how to declare a function that compares two u64 parameters for equality and returns a boolean result. It also shows how to call this function with different arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/functions.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn equals(first_param: u64, second_param: u64) -> bool {\n    first_param == second_param\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    equals(5, 5); // evaluates to `true`\n    equals(5, 6); // evaluates to `false`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AssetId from b256 Value\nDESCRIPTION: Shows how to create an AssetId from an existing b256 value using the from() function\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet asset = AssetId::from(0x0000000000000000000000000000000000000000000000000000000000000000);\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Declaration in Sway\nDESCRIPTION: Demonstrates how to declare an immutable variable in Sway. The variable foo is assigned the value 5 and is automatically typed as u64, which is the default numeric type in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/variables.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Defining Fuel Address Type in Sway\nDESCRIPTION: This snippet defines the Fuel Address type as a 32-byte value and implements various methods for its construction and manipulation. It includes functions for creating addresses from different input types and comparing addresses.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/signatures/fuel.md#2025-04-17_snippet_0\n\nLANGUAGE: Sway\nCODE:\n```\nlibrary;\n\nuse ::core::ops::*;\nuse ::core::primitives::*;\n\n/// The `Address` type represents a 32-byte value used to identify accounts and contracts.\n///\n/// It is a fundamental type in the Fuel ecosystem and is used extensively throughout the blockchain.\npub struct Address {\n    value: b256,\n}\n\nimpl Address {\n    /// Creates a new `Address` from a `b256` value.\n    ///\n    /// # Arguments\n    ///\n    /// * `addr`: The `b256` value to create the address from.\n    ///\n    /// # Returns\n    ///\n    /// * The new `Address`.\n    pub fn from(addr: b256) -> Self {\n        Self { value: addr }\n    }\n\n    /// Creates a new `Address` from a `ContractId`.\n    ///\n    /// # Arguments\n    ///\n    /// * `contract_id`: The `ContractId` to create the address from.\n    ///\n    /// # Returns\n    ///\n    /// * The new `Address`.\n    pub fn from_contract_id(contract_id: ContractId) -> Self {\n        Self {\n            value: contract_id.into(),\n        }\n    }\n\n    /// Gets the underlying `b256` value of the `Address`.\n    ///\n    /// # Returns\n    ///\n    /// * The `b256` value of the address.\n    pub fn as_b256(self) -> b256 {\n        self.value\n    }\n}\n\nimpl Eq for Address {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl From<b256> for Address {\n    fn from(addr: b256) -> Self {\n        Self::from(addr)\n    }\n}\n\nimpl From<ContractId> for Address {\n    fn from(contract_id: ContractId) -> Self {\n        Self::from_contract_id(contract_id)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Balance\nDESCRIPTION: Example of checking a contract's balance for a specific asset\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\nlet balance = std::context::this_balance(asset_id);\n```\n\n----------------------------------------\n\nTITLE: Getting Transaction Amount\nDESCRIPTION: Shows how to retrieve the amount of coins sent in a transaction\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\nlet amount = std::context::msg_amount();\n```\n\n----------------------------------------\n\nTITLE: Importing from Sway Standard Library\nDESCRIPTION: Example of how to import items from the Sway standard library into your project using the use keyword. This specific example imports all items from the storage_vec module.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/standard_library.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::storage_vec::*;\n```\n\n----------------------------------------\n\nTITLE: Variable Shadowing with Block Scope in Sway\nDESCRIPTION: Shows how to temporarily reuse a variable name within a limited block scope without altering the original variable. The variable is redefined only within the curly brackets, preserving the original value outside that scope.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/variable-shadowing.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let foo = 5;\n    {\n        let foo = 12;\n        // Prints \"12\"\n        log(foo);\n    }\n    // Prints \"5\"\n    log(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Option Enum in Sway\nDESCRIPTION: Implementation of the standard library Option enum, which wraps a value of any type T or represents absence of a value with None.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nenum Option<T> {\n    Some: T,\n    None: (),\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Internal Library\nDESCRIPTION: Example showing how to import and use an internal library within a Sway project using the 'mod' and 'use' keywords.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\nmod internal_lib; // Assuming the library name in `internal_lib.sw` is `internal_lib`\n\nuse internal_lib::mint;\n\n// `mint` from `internal_library` is now available in this file\n```\n\n----------------------------------------\n\nTITLE: Declaring Namespaces in Sway Storage Blocks\nDESCRIPTION: This snippet demonstrates how to declare a namespace within a storage block in Sway. It shows the syntax for creating a namespace and defining variables inside it.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/namespace.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    #[namespace(\"my_namespace\")]\n    struct MyNamespace {\n        foo: u64,\n        bar: bool,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Vector Using While Loop in Sway\nDESCRIPTION: Demonstrates iterating through vector elements using a while loop with the length of the vector. The get() method returns an Option<T> which is unwrapped to access the actual value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nlet v = vec![100, 32, 57];\nlet mut i = 0;\nwhile i < v.len() {\n    let n_ref = v.get(i).unwrap();\n    i += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Function with Unknown Error Type\nDESCRIPTION: Example function that requires type annotation for the error type E since it cannot be inferred from the function body.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\nfn foo<T, E>(t: T) -> Result<T, E> {\n    Ok(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Elements from a Vector in Sway\nDESCRIPTION: Demonstrates how to access vector elements using the get() method which returns an Option<T>. The index is zero-based, so get(2) returns the third element.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet v = vec![1, 2, 3, 4, 5];\nlet third: Option<u64> = v.get(2);\nlet does_not_exist = v.get(100);\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Constants in Sway Structs\nDESCRIPTION: Shows how to declare and use associated constants within an impl block for a struct. Creates a Point struct with a ZERO constant and demonstrates accessing it.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/const.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct Point {\n    x: u64,\n    y: u64,\n}\n\nimpl Point {\n    const ZERO: Point = Point { x: 0, y: 0 };\n}\n\nfn main() -> u64  {\n    Point::ZERO.x\n}\n```\n\n----------------------------------------\n\nTITLE: Importing From Another Library in the Standard Library\nDESCRIPTION: Example of importing a specific function from another library within the Sway standard library using the 'use' statement.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nuse ::revert::revert;\n```\n\n----------------------------------------\n\nTITLE: Implementing Subtraction with Assertion in Sway\nDESCRIPTION: This function subtracts two u64 values with a require assertion to ensure b is not greater than a. If the condition is not met, it logs an error message and reverts the virtual machine.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/require.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn subtract(a: u64, b: u64) -> u64 {\n    require(b <= a, \"b is too large\");\n    a - b\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Fuel Project with Forc CLI\nDESCRIPTION: This snippet demonstrates the command-line process of creating a new Fuel project using Forc, changing into the project directory, and displaying the project structure. It shows the creation of a Forc.toml manifest file and a src directory containing a main.sw Sway file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_new.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ forc new my-fuel-project\n$ cd my-fuel-project\n$ tree\n.\n├── Forc.toml\n└── src\n    └── main.sw\n```\n\n----------------------------------------\n\nTITLE: Asserting Inequality Using assert_ne in Sway\nDESCRIPTION: This function demonstrates the usage of assert_ne to ensure that two parameters 'a' and 'b' are not equal. If they are equal, the virtual machine will revert.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/assert-ne.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn assert_not_equal(a: u64, b: u64) {\n    assert_ne(a, b);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Type in Sway\nDESCRIPTION: Definition of the Address type as a wrapper around b256 primitive type, used for representing externally owned accounts or predicate hashes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Address {\n    value: b256,\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Variables in Sway\nDESCRIPTION: This snippet shows how to access variables that are inside a namespace within a storage block in Sway. It demonstrates the dot notation used to reference namespaced variables.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/namespace.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage.my_namespace.foo\n```\n\n----------------------------------------\n\nTITLE: Ignoring Elements When Destructuring Tuples in Sway\nDESCRIPTION: This example shows how to destructure a tuple while ignoring certain elements using the underscore (_) placeholder. This is useful when you only need a subset of the tuple's values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nfn ignore_elements_when_destructure() {\n    let point = (1, 2, 3, 4);\n    \n    let (_, b, _, d) = point;\n\n    let v = b + d;\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring a Struct in Sway\nDESCRIPTION: Demonstrates how to access fields of a struct through destructuring. When destructuring structs with private fields outside of the struct's defining module, the private fields must be omitted using the '..' syntax.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/structs.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn destructure_foo(foo: Foo) {\n    let Foo { bar, baz } = foo;\n    let bar2 = foo.bar;\n\n    // The following would not work from outside the module where Foo is defined\n    let baz2 = foo.baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StorageString in Sway\nDESCRIPTION: Demonstrates how to import the StorageString type from the standard library using the glob operator, which is required for string storage in a Sway smart contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_16\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::storage_string::*;\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants in Sway\nDESCRIPTION: Demonstrates how to declare constants in Sway using the const keyword, showing a simple numeric constant declaration with a value of 5.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/const.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nconst NUMBER_OF_MONTHS: u8 = 5;\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Assertion Condition in Sway\nDESCRIPTION: This snippet demonstrates a condition that could be used in an assertion to enforce a constraint on a function argument.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nargument < 5\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Function in a Sway Library\nDESCRIPTION: Demonstrates how to create a public function in a Sway library that can be imported by other libraries. The 'pub' keyword is used to make the function accessible externally.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/external.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/program-types/libraries/external/my_other_library/src/lib.sw}}\n```\n\n----------------------------------------\n\nTITLE: Writing to Storage in Sway\nDESCRIPTION: This snippet illustrates how to write to a built-in type in storage using Sway. It uses the #[storage(write)] attribute and shows how to update the 'counter' variable in storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/read-write.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(write)]\nfn increment_counter() {\n    storage.counter += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Constants in Trait Definition in Sway\nDESCRIPTION: This snippet demonstrates how to define an associated constant directly in the interface of a trait. The constant ID is defined with a default value of 0.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/constants.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\ntrait ConstantId {\n    const ID: u32 = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures for Storage in Sway\nDESCRIPTION: Shows how to define Owner and Role structures with a default constructor implementation for storage use. Includes enum definition and struct with associated function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/init.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nenum Role {\n    Admin: (),\n    User: (),\n}\n\nstruct Owner {\n    id: u64,\n    active: bool,\n    role: Role,\n}\n\nimpl Owner {\n    fn default() -> Self {\n        Self {\n            id: 0,\n            active: false,\n            role: Role::User,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Constant Initialization in Sway\nDESCRIPTION: This example shows how to use function calls and compound data structures in constant initializers. It demonstrates that constants can involve complex expressions, but with certain limitations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn bool_to_num(b: bool) -> u64 {\n    if b {\n        1\n    } else {\n        0\n    }\n}\n\nfn arr_wrapper(a: u64, b: u64, c: u64) -> [u64; 3] {\n    [a, b, c]\n}\n\nconst ARR2 = arr_wrapper(bool_to_num(1) + 42, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Never Type with Return Statement in Sway\nDESCRIPTION: This snippet demonstrates assigning a Never type to a variable using a return statement. Since the return expression never completes to produce a value, it can be typed as Never (!).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/never_type.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet x: ! = {\n    return 123\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Functions for a Struct in Sway\nDESCRIPTION: Demonstrates how to implement an associated function 'new' for the Point struct that creates a new instance with the given coordinates. This is a constructor function that doesn't use 'self'.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/associated-function.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl Point {\n    pub fn new(x: u64, y: u64) -> Self {\n        Self {\n            x,\n            y,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Contract Definition for Testing\nDESCRIPTION: Sample contract definition with an ABI method test_function() that returns a boolean value. This contract will be called from unit tests.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nabi MyContract {\n    fn test_function() -> bool;\n}\n\nimpl MyContract for Contract {\n    fn test_function() -> bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty ASM Block in Sway\nDESCRIPTION: The basic syntax for declaring an inline assembly block in Sway. This empty block structure serves as the foundation for using assembly within Sway code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/assembly.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nasm() {...}\n```\n\n----------------------------------------\n\nTITLE: Converting from Bytes in Sway\nDESCRIPTION: Shows how to convert from the Bytes type back to various primitive types in Sway. Uses the specialized conversion methods provided by the Bytes type to extract the original data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_13\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from Bytes to u8\nlet bytes_u8 = Bytes::from(5u8);\nlet a = bytes_u8.as_u8();\n\n// Convert from Bytes to u16\nlet bytes_u16 = Bytes::from(5u16);\nlet b = bytes_u16.as_u16();\n\n// Convert from Bytes to u32\nlet bytes_u32 = Bytes::from(5u32);\nlet c = bytes_u32.as_u32();\n\n// Convert from Bytes to u64\nlet bytes_u64 = Bytes::from(5u64);\nlet d = bytes_u64.as_u64();\n\n// Convert from Bytes to u256\nlet bytes_u256 = Bytes::from(u256 { bits: [0, 0, 0, 5] });\nlet e = bytes_u256.as_u256();\n\n// Convert from Bytes to b256\nlet bytes_b256 = Bytes::from(0x0000000000000000000000000000000000000000000000000000000000000005);\nlet f = bytes_b256.as_b256();\n\n// Convert from Bytes to a [u8; N] array\nlet bytes_array = Bytes::from([0u8, 1u8, 2u8, 3u8]);\nlet g = bytes_array.as_raw();\n\n// Convert from Bytes to a struct\nlet bytes_struct = Bytes::from(SomeStruct { a: 1, b: 2 });\nlet h: SomeStruct = bytes_struct.into();\n```\n\n----------------------------------------\n\nTITLE: Testing Failure Case for Contract Call\nDESCRIPTION: Test function that expects a contract call to fail, marked with should_revert attribute. Tests a condition that should cause the assertion to fail.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\n#[test(should_revert)]\nfn test_fail() {\n    let caller = abi(MyContract, CONTRACT_ID);\n    let result = caller.test_function {}();\n    assert(result == false)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Break to Exit a While Loop in Sway\nDESCRIPTION: This snippet demonstrates how to use the 'break' keyword to exit a while loop before its condition is met. It uses a counter that increments until it reaches 6, at which point the loop breaks, despite being set to continue until 10.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/looping/break.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet mut counter = 0;\nwhile counter < 10 {\n    if counter == 6 {\n        break;\n    }\n    counter += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Vector in Sway\nDESCRIPTION: Creates a new empty vector using Vec::new() function. Type annotation is required when no elements are initially added to help the compiler determine the element type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet v: Vec<u64> = Vec::new();\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Enums in Sway\nDESCRIPTION: Example of how to define enums in Sway, including nested enums within a parent enum. This pattern allows for organizing related error types hierarchically.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/enums.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub enum StateError {\n    Aborted: (),\n    NotFound: (),\n}\n\npub enum UserError {\n    InvalidId: (),\n    BalanceTooLow: (),\n}\n\npub enum Error {\n    StateError: StateError,\n    UserError: UserError,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Configurable Constants in Sway\nDESCRIPTION: This example shows how to declare configurable constants in Sway. Configurable constants can be modified after the program has been built, making them useful for contract factories.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/configurable_constants/src/main.sw:configurable_block}}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Struct in Sway\nDESCRIPTION: Shows how to create an instance of the previously defined 'Foo' struct by providing values for all fields, both public and private. Note that structs with private fields can only be instantiated within the module where the struct is declared.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/structs.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn instantiate_foo() -> Foo {\n    Foo {\n        bar: 42,\n        baz: true,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counter Contract Implementation in Sway\nDESCRIPTION: A reference to the main Sway implementation file for the counter contract. This is an include directive that would display the actual counter contract code from the examples directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/counter.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/counter/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Implicit Return in Sway Functions\nDESCRIPTION: This snippet demonstrates how to use implicit return syntax in Sway by omitting both the 'return' keyword and the semicolon at the end of the expression. This is a more concise way to return values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/return.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/functions/src/implicit.sw:main}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Type Alias in Sway\nDESCRIPTION: Shows how to create a type alias in Sway by defining 'Kilometers' as a synonym for the 'u64' type using the 'type' keyword.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ntype Kilometers = u64;\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases with Operations in Sway\nDESCRIPTION: Demonstrates that type aliases are treated as their underlying type, allowing operations between values of the alias type and the original type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_types.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\ntype Kilometers = u64;\n\nfn main() {\n    let x: u64 = 5;\n    let y: Kilometers = 5;\n\n    let z = x + y; // Valid: Kilometers and u64 are the same type\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Bytecode of a Sway Counter Project\nDESCRIPTION: This snippet displays the output of the 'forc parse-bytecode' command, which analyzes the bytecode of the compiled Sway counter project. It shows the half-word, byte, operation, raw bytecode, and notes for each instruction in the bytecode.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_parse-bytecode.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncounter$ forc parse-bytecode obj\n\n  half-word   byte   op                   raw           notes\n          0   0      JI(4)                90 00 00 04   conditionally jumps to byte 16\n          1   4      NOOP                 47 00 00 00\n          2   8      Undefined            00 00 00 00   data section offset lo (0)\n          3   12     Undefined            00 00 00 c8   data section offset hi (200)\n          4   16     LW(63, 12, 1)        5d fc c0 01\n          5   20     ADD(63, 63, 12)      10 ff f3 00\n         ...\n         ...\n         ...\n         60   240    Undefined            00 00 00 00\n         61   244    Undefined            fa f9 0d d3\n         62   248    Undefined            00 00 00 00\n         63   252    Undefined            00 00 00 c8\n```\n\n----------------------------------------\n\nTITLE: Defining and Initializing Basic Enums in Sway\nDESCRIPTION: Demonstrates how to define a basic enum named 'Color' with multiple variants using the unit type, and how to initialize variables with enum values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/enums.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nenum Color {\n    Blue: (),\n    Green: (),\n    Red: (),\n    Silver: (),\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let favorite_color = Color::Blue;\n    let second_favorite_color = Color::Green;\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting VM State in Sway Debugger\nDESCRIPTION: This snippet shows how to inspect the initial state of the VM by checking register values and memory contents.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n>> register ggas\n\nreg[0x9] = 1000000  # ggas\n\n>> memory 0x10 0x8\n\n 000010: db f3 63 c9 1c 7f ec 95\n```\n\n----------------------------------------\n\nTITLE: Converting to u64 in Sway\nDESCRIPTION: Shows how to convert various types to u64 in Sway. Includes conversions from smaller numeric types and extracting values from tuples and arrays using into() and as() methods.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from other types to u64\nlet a: u64 = 5u32.into();\nlet b: u64 = 5u16.into();\nlet c: u64 = 5u8.into();\n\n// The as operator can also be used\nlet d = 5u32 as u64;\nlet e = 5u16 as u64;\nlet f = 5u8 as u64;\n\n// Converting from u256 with from_u256\nlet g: u64 = u256 { bits: [0, 0, 0, 5] }.as_u64().unwrap();\n\n// Get a limb from u256\nlet u256_value = u256 { bits: [1, 2, 3, 4] };\nlet h: u64 = u256_value.bits[0];\n```\n\n----------------------------------------\n\nTITLE: Defining Fizzbuzz Game State Enum in Sway\nDESCRIPTION: This snippet defines an enum called 'State' that represents the possible outcomes of the Fizzbuzz game. It includes variants for Fizz, Buzz, Fizzbuzz, and a Number variant that holds a u64 value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/fizzbuzz.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nenum State {\n    Fizz: (),\n    Buzz: (),\n    Fizzbuzz: (),\n    Number: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to Bytes in Sway\nDESCRIPTION: Demonstrates how to convert various types to the Bytes type in Sway using the from methods. Supports conversion from a variety of types including primitives, arrays, and structs.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_12\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from u8 to Bytes\nlet a = Bytes::from(5u8);\n\n// Convert from u16 to Bytes\nlet b = Bytes::from(5u16);\n\n// Convert from u32 to Bytes\nlet c = Bytes::from(5u32);\n\n// Convert from u64 to Bytes\nlet d = Bytes::from(5u64);\n\n// Convert from u256 to Bytes\nlet e = Bytes::from(u256 { bits: [0, 0, 0, 5] });\n\n// Convert from b256 to Bytes\nlet f = Bytes::from(0x0000000000000000000000000000000000000000000000000000000000000005);\n\n// Convert from str to Bytes\nlet g = Bytes::from(\"Hello, world!\");\n\n// Convert from [u8] to Bytes\nlet h = Bytes::from([0u8, 1u8, 2u8, 3u8]);\n\n// Convert from a struct to Bytes\nlet i = Bytes::from(SomeStruct { a: 1, b: 2 });\n```\n\n----------------------------------------\n\nTITLE: Casting to Identity Type in Sway\nDESCRIPTION: This code snippet demonstrates how to explicitly cast an Address or ContractId to an Identity type in Sway. It shows the syntax for creating Identity instances from both Address and ContractId.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/identity.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nuse std::constants::DEFAULT_SUB_ID;\n\nlet addr = Address::from(0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b);\nlet contract_id = ContractId::from(0x9299da6c73e6dc03eeabcce242bb347de3f5f56cd1c70926d76526d7ed199b8b);\n\nlet identity_from_address = Identity::Address(addr);\nlet identity_from_contract = Identity::ContractId(contract_id);\n```\n\n----------------------------------------\n\nTITLE: Using Logs in Tests for Debugging\nDESCRIPTION: Script with test function that demonstrates logging variables for debugging. Shows how to use log() function to output variable values during test execution.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nfn main() {}\n\n#[test]\nfn test_fn() {\nlet a = 10;\n    log(a);\n    let b = 30;\n    log(b);\n    assert_eq(a, 10)\n    assert_eq(b, 30)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Struct Shorthand in Sway\nDESCRIPTION: Example of initializing a struct using shorthand notation where the variable name matches the field name, resulting in cleaner code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/structs.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn make_payment(amount: u64) -> Payment {\n    // Notice that we only need to write \"amount\" once.\n    // This implicitly means Payment { amount: amount }\n    Payment { amount }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ContractId or Address to b256 in Sway\nDESCRIPTION: Demonstrates how to convert ContractId or Address types to the underlying b256 hash value. This is useful for working with the raw underlying data.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from ContractId or Address to b256\nlet contract_id_b256: b256 = contract_id.into();\nlet address_b256: b256 = address.into();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Method with Mutable Reference in Sway\nDESCRIPTION: This snippet shows how to implement a method that takes a mutable reference to self and modifies the struct's state. It demonstrates the use of 'ref mut' in method parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/methods_and_associated_functions.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl Point {\n    fn move_right(ref mut self, distance: u64) {\n        self.x += distance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion and Conversion Intrinsics in Sway\nDESCRIPTION: These intrinsics are used for type assertions and conversions, particularly for string arrays. They include __assert_is_str_array and __to_str_array.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n__assert_is_str_array<T>()\n```\n\nLANGUAGE: sway\nCODE:\n```\n__to_str_array(s: str) -> str[N]\n```\n\n----------------------------------------\n\nTITLE: Generic Function with Trait Constraints in Sway\nDESCRIPTION: Implementation of a function that requires the generic type to implement a specific trait. The get_hashmap_key function requires its argument to implement the Hash trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn get_hashmap_key<T>(key: T) -> b256\n    where T: Hash\n{\n    // Code within here can then call methods associated with the Hash trait on Key\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Mutable Variables in Sway\nDESCRIPTION: Demonstrates how to declare a mutable variable using the `let mut` syntax. Mutable variables can have their values changed after initialization, unlike immutable variables.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/let.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet mut foo = 5;\nfoo = 6;\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Types in Sway\nDESCRIPTION: Demonstrates how to implement a trait with an associated type for a concrete struct, specifying u32 as the associated type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/associated_types.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct MyStruct;\n\nimpl MyTrait for MyStruct {\n    type AssociatedType = u32; // Implementing the associated type with u32\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Enums with Struct Variants in Sway\nDESCRIPTION: Shows how to define an enum with a variant that contains a struct, demonstrating more complex data types within enums.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/enums.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct Item {\n    id: u64,\n    quantity: u64,\n}\n\nenum MyEnum {\n    Product: Item,\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Variable Declaration and Modification in Sway\nDESCRIPTION: Shows how to declare and modify a mutable variable using the mut keyword. The variable can be reassigned after its initial declaration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/variables.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet mut foo = 5;\nfoo = 6;\n```\n\n----------------------------------------\n\nTITLE: Nested While Loops\nDESCRIPTION: Shows how to implement nested while loops with multiple conditions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nwhile condition_1 == true {\n    // do stuff...\n    while condition_2 == true {\n        // do more stuff...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Trait Methods in Sway\nDESCRIPTION: This snippet shows how to use the implemented 'Convert' trait methods. It creates a 'Square' instance and converts it to a 'Rectangle' using the 'from' method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generics_and_trait_constraints.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet square = Square { side: 5 };\nlet rectangle = Rectangle::from(square);\n```\n\n----------------------------------------\n\nTITLE: Calling a Method with Mutable Reference in Sway\nDESCRIPTION: This snippet demonstrates how to call a method that takes a mutable reference to self. It shows the usage of the 'mut' keyword when declaring the variable and calling the method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/methods_and_associated_functions.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet mut my_point = Point::new(5, 5);\nmy_point.move_right(1);\n```\n\n----------------------------------------\n\nTITLE: Casting Between Address and b256 in Sway\nDESCRIPTION: This code demonstrates how to cast between Address and b256 types in Sway. It shows both directions of casting.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/address.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet addr = Address::from(0x0000000000000000000000000000000000000000000000000000000000000000);\nlet b256_value = addr.into();\n```\n\n----------------------------------------\n\nTITLE: Specific Revert Code Test in Sway\nDESCRIPTION: Demonstrates testing for a specific revert code condition. This allows for more precise testing of error conditions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/test.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:revert_code_test}}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using b256 Type in Sway\nDESCRIPTION: This code snippet demonstrates the syntax for declaring and using the b256 type in Sway. It shows how to create a b256 variable and assign it a value using hexadecimal notation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/b256.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet my_b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;\n```\n\n----------------------------------------\n\nTITLE: Adding End-of-Line Comments in Sway Code\nDESCRIPTION: Demonstrates how to add comments at the end of code lines to provide inline documentation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let baz = 8; // Eight is a lucky number\n}\n```\n\n----------------------------------------\n\nTITLE: Encouraged Enum Usage Pattern in Sway\nDESCRIPTION: The preferred approach to working with enums in Sway, using individual enums directly. This approach is cleaner, easier to follow, and results in shorter lines of code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/enums.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nuse StateError::*;\nuse UserError::*;\n\nfn handle_error() {\n    let x = StateError::Aborted;\n    let y = UserError::InvalidId;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Storage Position with 'in' Keyword in Sway\nDESCRIPTION: Demonstrates how to use the 'in' keyword to force a storage variable to be stored at a specific position using HASH_KEY. This overrides the default behavior where the position would be calculated from the variable name using SHA-256.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/storage/in-keyword.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    current_owners in HASH_KEY: StorageVec<b256> = StorageVec {},\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying to Mainnet\nDESCRIPTION: Command to deploy a contract to mainnet using the mainnet flag.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --mainnet\n```\n\n----------------------------------------\n\nTITLE: Contract State Query Examples\nDESCRIPTION: Examples of using forc call to query contract state, including reading state without parameters and querying with specific parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n# Read contract state\nforc call <CONTRACT_ID> --abi <PATH> get_balance\n\n# Query with parameters\nforc call <CONTRACT_ID> --abi <PATH> get_user_info 0x1234...\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Struct Fields in Sway\nDESCRIPTION: Demonstrates how to match specific fields within a struct while ignoring others using the spread operator (..). This is particularly useful when working with imported structs that have private fields or when only certain fields are relevant for the match condition.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/complex/struct.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../../code/language/control_flow/src/lib.sw:complex_struct_unpacking_match}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Call Data in Sway\nDESCRIPTION: This snippet demonstrates how to access call data in a Sway contract. It shows loading the call data using the msg_data assembly instruction to store it into the frame pointer.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/call-data/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nasm(r1: ptr) {\n    msg_data r1;\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Enums within Enums in Sway\nDESCRIPTION: Illustrates how to create nested enum structures by using an enum as a variant type for another enum.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/enums.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nenum Shape {\n    Circle: (),\n    Square: (),\n}\n\nenum MyEnum {\n    TheShape: Shape,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 1 to a Number Using Inline Assembly in Sway\nDESCRIPTION: Example function showing how to use assembly to add 1 to a number. It demonstrates specifying input registers, performing operations, and returning a value with a specific type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/assembly.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\npub fn add_1(num: u32) -> u32 {\n    asm(r1: num, r2) {\n        add r2 r1 one;\n        r2: u32\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Definition in Sway\nDESCRIPTION: Example of defining a basic enumeration type for colors with unit variants.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\npub enum Color {\n    Blue: (),\n    Green: (),\n    Red: (),\n    Yellow: (),\n    White: (),\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Immutable Variables in Sway\nDESCRIPTION: Shows how to declare an immutable variable using the `let` keyword. By default, variables in Sway are immutable, meaning their values cannot be changed after initialization.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/let.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Using ref mut with Complex Data Types in Sway Functions\nDESCRIPTION: This snippet demonstrates how to use 'ref mut' with more complex data types such as tuples and enums. It includes functions for modifying tuple and enum values, along with example usage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/functions.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn modify_tuple(ref mut tuple: (u64, u64)) {\n    tuple.0 += 1;\n    tuple.1 += 1;\n}\n\nenum Number {\n    One: u64,\n    Two: u64,\n}\n\nfn modify_enum(ref mut num: Number) {\n    match num {\n        Number::One(ref mut n) => { *n += 1 },\n        Number::Two(ref mut n) => { *n += 2 },\n    }\n}\n```\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let mut tuple = (0, 0);\n    modify_tuple(tuple);\n    assert(tuple.0 == 1 && tuple.1 == 1);\n\n    let mut num = Number::One(0);\n    modify_enum(num);\n    match num {\n        Number::One(n) => assert(n == 1),\n        _ => revert(0),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Hash Trait for StorageMap in Sway\nDESCRIPTION: Shows how to import the Hash trait, which is required for using StorageMap even though StorageMap itself is included in the prelude.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nuse std::hash::Hash;\n```\n\n----------------------------------------\n\nTITLE: Converting to u256 in Sway\nDESCRIPTION: Demonstrates various methods to convert different types to u256 in Sway. Includes conversions from numeric types, arrays, and tuples using the into() method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from other types to u256\nlet a: u256 = 5u64.into();\nlet b: u256 = 5u32.into();\nlet c: u256 = 5u16.into();\nlet d: u256 = 5u8.into();\n\n// Converting arrays and tuples to u256\nlet e: u256 = [5u64, 5u64, 5u64, 5u64].into();\nlet f: u256 = (5u64, 5u64, 5u64, 5u64).into();\n```\n\n----------------------------------------\n\nTITLE: Struct with Constant ID Definition in Sway\nDESCRIPTION: This code demonstrates the definition of a struct named S containing a constant ID. It shows the implementation of the struct with an associated constant.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/constants.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\npub struct S {\n    x: u64,\n}\n\nimpl S {\n    pub const ID: u64 = 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Different Executions with Identity\nDESCRIPTION: Shows how to handle different execution paths based on Identity type variants.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/identity/src/main.sw:different_executions}}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Implementing Associated Constants in Sway\nDESCRIPTION: This example shows how to declare a constant in a trait and implement it in a struct. The trait ConstantId declares ID without initialization, and the Struct implementation sets ID to 1.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/constants.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\ntrait ConstantId {\n    const ID: u32;\n}\n\nstruct Struct {}\n\nimpl ConstantId for Struct {\n    const ID: u32 = 1;\n}\n\nfn main() -> u32 {\n    Struct::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Using If Expression in Let Statement\nDESCRIPTION: Shows how to use if as an expression to assign values to variables based on conditions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet my_data = if some_bool < 10 { foo() } else { bar() };\n```\n\n----------------------------------------\n\nTITLE: Running Contract with Default Signer\nDESCRIPTION: Command to run a contract using the default signer on a local node.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nforc-run --default-signer\n```\n\n----------------------------------------\n\nTITLE: Storage Map with Tuple Keys\nDESCRIPTION: Example of implementing a storage map with multiple keys using tuples.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_map.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_map/src/main.sw:storage_map_tuple_key}}\n```\n\n----------------------------------------\n\nTITLE: Using Continue Statement in While Loop - Sway\nDESCRIPTION: Example demonstrating how to use the continue keyword to skip iterations in a while loop when certain conditions are met. The code shows skipping even numbers in a counter loop, which could be used for operations like summing only odd numbers from 0 to 10.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/looping/continue.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/control_flow/src/lib.sw:continue_example}}\n```\n\n----------------------------------------\n\nTITLE: String Conversion in Sway\nDESCRIPTION: This snippet demonstrates how to convert between string slices and string arrays in Sway, using 'try_as_str_array' and 'from_str_array' functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_6\n\nLANGUAGE: Sway\nCODE:\n```\nlet a: str = \"abcd\";\nlet b: str[4] = a.try_as_str_array().unwrap();\nlet c: str = from_str_array(b);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Slices in Sway\nDESCRIPTION: Demonstrates the syntax for declaring and using slice references in Sway. The example shows how to declare a slice type, create a reference to a slice from an array, and access elements within the slice.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/slices.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn slice_example() {\n    // declare a slice. They can only be used through references.\n    let array: [u8; 4] = [1, 2, 3, 4];\n    let slice_ref: &[u8] = &array;\n\n    // we can also create a slice to a subset of the array\n    let subset: &[u8] = &array[1..3];\n\n    // we can access individual elements of a slice with the index operator\n    assert(subset[0] == 2);\n    assert(subset[1] == 3);\n}\n```\n\n----------------------------------------\n\nTITLE: While Loop Implementation\nDESCRIPTION: Shows the basic structure of a while loop with a counter increment example.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nwhile counter < 10 {\n    counter = counter + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContractId Struct in Sway\nDESCRIPTION: Definition of the ContractId struct type which wraps a b256 value to create unique contract identifiers. This type is fundamental for contract identification in the Fuel ecosystem.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/namespace/contract-id.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/operations/namespace/src/lib.sw:contract_id}}\n```\n\n----------------------------------------\n\nTITLE: Accessing StorageVec Elements\nDESCRIPTION: Demonstrates how to read elements from a StorageVec using the get method.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn get_value() -> Option<u64> {\n    storage.v.get(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fizzbuzz Logic Function in Sway\nDESCRIPTION: This function takes a u64 input and returns a State enum based on the Fizzbuzz rules. It checks divisibility by 3 and 5, returning the appropriate State variant accordingly.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/examples/fizzbuzz.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn fizzbuzz(input: u64) -> State {\n    if input % 15 == 0 {\n        State::Fizzbuzz\n    } else if input % 3 == 0 {\n        State::Fizz\n    } else if input % 5 == 0 {\n        State::Buzz\n    } else {\n        State::Number(input)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Transfer Function in Sway\nDESCRIPTION: This snippet shows how to import the transfer function, which is necessary for performing asset transfers in Sway. It demonstrates the correct syntax for importing specific functions from the standard library.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:transfer_import}}\n```\n\n----------------------------------------\n\nTITLE: Importing Mint Function in Sway\nDESCRIPTION: Shows how to import the mint functionality required for creating new assets in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/mint.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_import}}\n```\n\n----------------------------------------\n\nTITLE: Identity Type Casting Example\nDESCRIPTION: Shows how to cast to the Identity type which can handle both Address and ContractId types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/identity/src/main.sw:cast_to_identity}}\n```\n\n----------------------------------------\n\nTITLE: Native Asset Transfer Example\nDESCRIPTION: Command for transferring native assets when calling a contract function. The --amount flag specifies the amount to transfer, and --live ensures the transaction is executed on-chain.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Native asset transfer\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --amount 100 --live\n```\n\n----------------------------------------\n\nTITLE: Contract Administration Examples\nDESCRIPTION: Examples of administrative operations on contracts, such as checking the contract owner and updating contract parameters. These are common management functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n# Check contract owner\nforc call <CONTRACT_ID> --abi <PATH> owner\n\n# Update contract parameters\nforc call <CONTRACT_ID> --abi <PATH> update_params 42 --live\n```\n\n----------------------------------------\n\nTITLE: Including Wallet Contract Caller Script Example in Sway\nDESCRIPTION: Example script showing how to include and reference a wallet contract caller implementation. The script demonstrates the use of the main() function as an entry point and potential interaction with contracts through ABI casts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/scripts.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/wallet_contract_caller_script/src/main.sw}}\n```\n\n----------------------------------------\n\nTITLE: Checking Forc Installation in Terminal\nDESCRIPTION: This command is used to verify if 'forc' is properly installed and available in the system's PATH.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/lsp/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nforc --help\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Pattern Matching using Tuples in Sway\nDESCRIPTION: Example showing how to match multiple values simultaneously by wrapping them in a tuple structure. The pattern matching is performed on complex multi-argument enum values, demonstrating how to handle multiple values in a single match expression.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/complex/multiple-values.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../../code/language/control_flow/src/lib.sw:complex_multi_arg_enum_match}}\n```\n\n----------------------------------------\n\nTITLE: If Let Pattern Matching Example 2\nDESCRIPTION: Shows how to assign the result of a pattern match comparison directly to a variable using if let.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/if-expressions.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/control_flow/src/lib.sw:if_let_example2}}\n```\n\n----------------------------------------\n\nTITLE: Importing Asset-Related Functions in Sway\nDESCRIPTION: This snippet shows how to import the msg_asset_id() function from the standard library and the base asset for comparison in a Sway smart contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/msg-asset.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::{call_frames::msg_asset_id, constants::BASE_ASSET_ID};\n```\n\n----------------------------------------\n\nTITLE: Deploying to Testnet\nDESCRIPTION: Command to deploy a contract to the latest testnet using the testnet flag.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --testnet\n```\n\n----------------------------------------\n\nTITLE: Implicit Unit Type Return in Sway Function\nDESCRIPTION: This example shows that if a function's return type is not specified in Sway, it defaults to the unit type. This is semantically equivalent to explicitly returning the unit type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_1\n\nLANGUAGE: Sway\nCODE:\n```\nfn returns_unit() {\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to StorageVec in Sway\nDESCRIPTION: Shows how to add values to a StorageVec using push() and try_push() methods, and how to manipulate values with set() and try_set() methods.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\n// void return type\nstorage.vec.push(1);\nstorage.vec.push(2);\n\n// returns Option\nlet push_result = storage.vec.try_push(3);\n\n// void return type\nstorage.vec.set(0, 4);\n\n// returns Option\nlet set_result = storage.vec.try_set(0, 5);\n```\n\n----------------------------------------\n\nTITLE: Basic forc call Syntax\nDESCRIPTION: The fundamental syntax pattern for using forc call with required arguments including contract ID, ABI path/URL, selector, and any function arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforc call [OPTIONS] --abi <ABI-PATH/URL> <CONTRACT_ID> <SELECTOR> [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Writing to Basic Storage Variables in Sway\nDESCRIPTION: Shows how to write to storage variables using the storage keyword. This example demonstrates incrementing counters stored in persistent storage.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstorage.counter = 5;\nstorage.new_counter += 1;\nstorage.another_counter = storage.counter + storage.new_counter;\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Constants for a Struct in Sway\nDESCRIPTION: This example demonstrates how to declare an associated constant in a trait and implement it for a specific struct. It shows the flexibility of associated constants in traits and implementations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\ntrait ConstantId {\n    const ID: u32;\n}\n\nstruct Struct {}\n\nimpl ConstantId for Struct {\n    const ID: u32 = 1;\n}\n\nfn main() -> u32 {\n    Struct::ID\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ToOutput with Generic Value\nDESCRIPTION: Example demonstrating ToOutput trait implementation for Option type with generic value V where V implements ToOutput\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/output.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nimpl<V, T> ToOutput<Option<T>> for Option<V> where V: ToOutput<T> {\n    fn to_output(&self) -> Option<T> {\n        match self {\n            Some(ref value) => Some(value.to_output()),\n            None => None,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Never Type in Match Expressions with Break Statement in Sway\nDESCRIPTION: This example shows how the Never type allows for type-checking in match expressions. The break statement, which never produces a value, coerces to any required type (u32 in this case).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/never_type.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet num: u32 = match get_a_number() {\n    Some(num) => num,\n    None => break,\n};\n```\n\n----------------------------------------\n\nTITLE: Identity Type Pattern Matching\nDESCRIPTION: Demonstrates pattern matching on Identity type to handle Address and ContractId cases separately.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/identity/src/main.sw:identity_to_contract_id}}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operation Intrinsics in Sway\nDESCRIPTION: These intrinsics perform bitwise operations on integer types. They include __and, __or, __xor, __mod, __rsh, __lsh, and __not.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\n__and<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__or<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__xor<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__mod<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__rsh<T>(lhs: T, rhs: u64) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__lsh<T>(lhs: T, rhs: u64) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__not(op: T) -> T\n```\n\n----------------------------------------\n\nTITLE: Converting str[] to str in Sway\nDESCRIPTION: Shows how to convert a string array (str[]) to a single string slice (str) by accessing the first element. This only works when you know the array has at least one element.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from str[] to str\nlet str_array = [\"hello\"];\nlet single_str = str_array[0];\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Owner at Runtime in Sway\nDESCRIPTION: Demonstrates setting contract ownership during runtime through a function call.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/access_control.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn set_owner() {\n    storage.owner.write(Option::Some(Identity::Address(msg_sender().unwrap())));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Non-Breaking Forc Version\nDESCRIPTION: Command to install the latest non-breaking version of forc using fuelup.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfuelup component add forc@0.66.42\n```\n\n----------------------------------------\n\nTITLE: Hashing Multiple Values with Keccak256 in Sway\nDESCRIPTION: Demonstrates how to hash multiple values by wrapping them in a tuple using the keccak256 function. Other compound types can also be used for grouping values to hash.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/hashing/keccak256.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/operations/hashing/src/lib.sw:keccak256}}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Functions from External Libraries in Sway\nDESCRIPTION: Demonstrates how to import specific functions from an external library using the 'use' keyword in Sway. After importing, the functions can be used within the library.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/external.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/program-types/libraries/external/my_library/src/lib.sw}}\n```\n\n----------------------------------------\n\nTITLE: Using Storage Namespace for Storage Isolation\nDESCRIPTION: Shows how to use the namespace annotation to add a salt to storage slot calculations, preventing collisions when loading code from different contracts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_storage.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/storage_namespace/src/main.sw:storage_namespace}}\n```\n\n----------------------------------------\n\nTITLE: Importing StorageBytes in Sway\nDESCRIPTION: Shows how to import the StorageBytes type from the standard library using the glob operator, which is required for byte storage in a Sway smart contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_13\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::storage_bytes::*;\n```\n\n----------------------------------------\n\nTITLE: Toml Configuration for Multi-Contract Calls\nDESCRIPTION: Manifest file (Forc.toml) configuration that specifies contract dependencies needed for multi-contract interaction in tests.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n{{#include ../../../../examples/multi_contract_calls/caller/Forc.toml:multi_contract_call_toml}}\n```\n\n----------------------------------------\n\nTITLE: Using Configurable Constants in Sway\nDESCRIPTION: This snippet demonstrates how to use configurable constants in Sway code. Configurable constants can be read directly like regular constants but offer post-build configurability.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/configurable_constants/src/main.sw:using_configurables}}\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Constants in a Trait in Sway\nDESCRIPTION: This snippet shows how to define an associated constant directly in a trait interface. Associated constants can be defined with a default value in the trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\ntrait ConstantId {\n    const ID: u32 = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Associated Types with Generics in Sway\nDESCRIPTION: This snippet shows how to use associated types with generics in Sway. The 'Iterator' trait has an associated type 'Item', which represents the type of item being iterated over.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/generics/index.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\ntrait Iterator {\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Updated Integration Tests in Console\nDESCRIPTION: Commands to build the updated Sway project and run the new integration tests using cargo test.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nforc build\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cargo test\n   Compiling my-fuel-project v0.1.0 (/home/mindtree/programming/sway/my-fuel-project)\n    Finished test [unoptimized + debuginfo] target(s) in 11.61s\n     Running tests/harness.rs (target/debug/deps/integration_tests-373971ac377845f7)\n\nrunning 1 test\ntest initialize_and_increment ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 1.25s\n```\n\n----------------------------------------\n\nTITLE: Using Methods on a Struct Instance in Sway\nDESCRIPTION: This snippet demonstrates how to create an instance of the Point struct using the new method and then call the translate method on it.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/method.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet mut point = Point::new(5, 5);\npoint.translate(1, 1);\n```\n\n----------------------------------------\n\nTITLE: Importing StorageMap from Sway Standard Library\nDESCRIPTION: Demonstrates how to import the StorageMap type from the Sway standard library using the use keyword. This is a common pattern for accessing standard library components in Sway programs.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/sway-lib-std/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::StorageMap;\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Dependencies in Forc.toml\nDESCRIPTION: Example Forc.toml configuration showing how to declare a contract dependency using a local path. This allows a contract or script to interact with another contract by making its ID available at compile time.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"user\"]\nentry = \"main.sw\"\norganization = \"Fuel_Labs\"\nlicense = \"Apache-2.0\"\nname = \"wallet_contract\"\n\n[contract-dependencies]\nfoo = { path = \"../foo\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Trait Definition in Sway\nDESCRIPTION: Demonstrates the basic syntax for defining a trait in Sway with a function signature and method implementation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/traits/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ntrait Trait {\n    fn fn_sig(self, b: Self) -> bool;\n} {\n    fn method(self, b: Self) -> bool {\n        true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Project with Experimental Features\nDESCRIPTION: Command to build the project with experimental features enabled.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nforc build --experimental storage_domains,references\n```\n\n----------------------------------------\n\nTITLE: Pushing Elements to StorageVec\nDESCRIPTION: Shows how to add elements to a StorageVec using the push method with proper storage annotations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read, write)]\nfn push_values() {\n    storage.v.push(1);\n    storage.v.push(2);\n    storage.v.push(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Variable in Sway\nDESCRIPTION: Shows an example of an unused variable (timestamp) in a function call context. This represents a common scenario where some returned values may not be needed in the current scope.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/unused-variables.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/unused_variables/src/lib.sw:unused_variable}}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum with b256 Variant in Sway\nDESCRIPTION: Example of defining an enum with two variants where the largest is a b256 type. The enum takes up 40 bytes of memory (8 bytes for the tag and 32 bytes for the b256).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nenum K {\n    A: u64,\n    B: b256,\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Fixed-Length Strings in Sway\nDESCRIPTION: This snippet demonstrates how to create implicit fixed-length strings in Sway using double-quotation marks. Once created, the string's length cannot be changed, even if the variable is mutable.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/string.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/built-ins/strings/src/lib.sw:implicit}}\n```\n\n----------------------------------------\n\nTITLE: Expanded Contract Call Implementation\nDESCRIPTION: Shows the full expansion of a contract call including parameter encoding and buffer handling.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet first_parameter = encode(\"some_method\");\nlet second_parameter = encode((0,));\nlet params = encode((\n    CONTRACT_ID,\n    first_parameter.ptr(),\n    second_parameter.ptr(),\n));\n\nlet (ptr, len) = __contract_call(params.ptr(), coins, asset_id, gas);\n\nlet mut buffer = BufferReader::from_parts(ptr, len);\nT::abi_decode(buffer)\n```\n\n----------------------------------------\n\nTITLE: Constant Matching Rules - Sway\nDESCRIPTION: Explains the requirements for matching against constants, emphasizing that only constant values can be used for pattern matching. Dynamic values like function arguments are treated as catch-all cases.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/pattern-matching.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWhen matching on [constants] we specify that a constant must be used in order to match on a variable. Dynamic values, such as an argument to a function, cannot be matched upon because it will be treated as a [`catch_all`] case and thus any subsequent patterns will not be checked.\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Types in Traits\nDESCRIPTION: This example shows how to declare associated types in a trait, which can be customized by implementations of the trait.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\ntrait MyTrait {\n    type AssociatedType;\n}\n```\n\n----------------------------------------\n\nTITLE: Associated Types Example in Sway\nDESCRIPTION: Demonstrates the usage of associated types in traits, allowing for placeholder types that can be specified by implementations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/traits/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/traits/associated-types/src/lib.sw}}\n```\n\n----------------------------------------\n\nTITLE: Importing from an External Library\nDESCRIPTION: Example showing how to import and use items from an external library after adding it as a dependency in Forc.toml.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\nuse external_library::mint;\n\n// `mint` from `external_library` is now available in this file\n```\n\n----------------------------------------\n\nTITLE: Nesting Match Expressions in Code Blocks in Sway\nDESCRIPTION: This code snippet demonstrates how to nest match expressions by placing them inside code blocks in Sway. It shows the pattern matching on nested enums using multiple match expressions, where the outer match handles the primary enum and inner matches handle nested enum variants.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/complex/nested-expression.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../../code/language/control_flow/src/lib.sw:nested_enum_match}}\n```\n\n----------------------------------------\n\nTITLE: Declaring Main Function for Scripts and Predicates\nDESCRIPTION: Shows the entry point function name for scripts and predicates in Sway. This function serves as the starting point of execution for these program types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nmain()\n```\n\n----------------------------------------\n\nTITLE: Accessing Contract ID in Sway Script\nDESCRIPTION: Example showing how to access a contract dependency's ID in Sway code. The CONTRACT_ID constant is automatically made available through the contract dependency's namespace.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nfn main() {\n  let foo_id = foo::CONTRACT_ID;\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in Sway\nDESCRIPTION: This example demonstrates how to destructure a tuple into individual variables in a single assignment statement. Destructuring allows for extracting multiple values simultaneously.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nfn destructure_tuple() {\n    let point = (1, 2, 3, 4);\n    \n    let (a, b, c, d) = point;\n\n    let v = a + b + c + d;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Run Test in TOML\nDESCRIPTION: This snippet shows a common configuration for tests in the 'should_pass/language' directory. It specifies that the test should be compiled, run on the VM, expect a return value of 42, and validate the ABI generation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/test_programs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ncategory = \"run\"\nexpected_result = { action = \"return\", value = 42 }\nvalidate_abi = true\n```\n\n----------------------------------------\n\nTITLE: Converting from Identity to ContractId or Address in Sway\nDESCRIPTION: Shows how to convert the Identity type back to more specific ContractId or Address types using pattern matching. Returns an Option that will be None if the Identity is not of the expected type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from Identity to ContractId or Address\nlet maybe_contract_id: Option<ContractId> = match identity {\n    Identity::ContractId(id) => Some(id),\n    _ => None,\n};\n\nlet maybe_address: Option<Address> = match identity {\n    Identity::Address(addr) => Some(addr),\n    _ => None,\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying with Default Signer\nDESCRIPTION: Example of deploying a contract using the default signer, which is useful for local development as it signs transactions with a pre-funded account in the local node.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> forc deploy --default-signer\n\n    Building /Users/test/test-projects/test-contract\n    Finished release [optimized + fuel] target(s) in 11.40s\n  Confirming transactions [deploy impl-contract]\n             Network: http://127.0.0.1:4000\n    Finished deploying impl-contract 0xf9fb08ef18ce226954270d6d4f67677d484b8782a5892b3d436572b405407544\n    Deployed in block 00000001\n```\n\n----------------------------------------\n\nTITLE: Instantiating the b256 Variant\nDESCRIPTION: Example showing that instantiating the b256 variant of enum K takes up 40 bytes of memory space, consisting of the tag and the actual b256 value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nlet b256_type = K::B(0x0000000000000000000000000000000000000000000000000000000000000000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in Forc.toml\nDESCRIPTION: Shows how to add an external library as a dependency in the Forc.toml configuration file. This is necessary to use code from one library in another.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/external.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{{#include ../../../../code/language/program-types/libraries/external/my_library/Forc.toml}}\n```\n\n----------------------------------------\n\nTITLE: Importing Byte Array Functions in Sway\nDESCRIPTION: Shows the required import statement for using byte array conversion functions from the standard library in Sway. Required for working with byte array conversions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_14\n\nLANGUAGE: sway\nCODE:\n```\nuse std::bytes_conversions::*;\n```\n\n----------------------------------------\n\nTITLE: Problematic Successor Function Implementation\nDESCRIPTION: An example of a problematic generic function that will cause type errors. The function attempts to add a literal 1 to a generic type T that implements Add, but doesn't account for type incompatibilities.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn successor<T>(argument: T)\n    where T: Add\n{\n    argument + 1\n}\n```\n\n----------------------------------------\n\nTITLE: Control Flow and Pointer Manipulation Intrinsics in Sway\nDESCRIPTION: These intrinsics handle control flow and pointer operations. They include __revert for reverting with an error code, __ptr_add and __ptr_sub for pointer arithmetic, and __jmp_mem for jumping to a memory address.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\n__revert(code: u64)\n```\n\nLANGUAGE: sway\nCODE:\n```\n__ptr_add(ptr: raw_ptr, offset: u64)\n```\n\nLANGUAGE: sway\nCODE:\n```\n__ptr_sub(ptr: raw_ptr, offset: u64)\n```\n\nLANGUAGE: sway\nCODE:\n```\n__jmp_mem()\n```\n\n----------------------------------------\n\nTITLE: Using Turbofish on Function Call for Type Specification\nDESCRIPTION: Shows how to use the turbofish syntax when calling a generic function to explicitly specify the type arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    foo::<Bar, Baz>()\n}\n```\n\n----------------------------------------\n\nTITLE: Mutable Array Assignment with Side Effects in Sway\nDESCRIPTION: Demonstrates complex mutable variable behavior where assignment order matters. Shows how right-hand side evaluation occurs before assignment, affecting both array contents and counter variable.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/variables.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet mut array = [0, 0, 0];\nlet mut i = 0;\n\narray[i] = {\n    i += 1;\n    i\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Reversion with Specific Error Code\nDESCRIPTION: Test function that expects a specific reversion error code, specified in the should_revert attribute. This allows testing for specific error conditions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n#[test(should_revert = \"18446744073709486084\")]\nfn test_meaning_of_life() {\n    assert(6 * 6 == 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Library Structure\nDESCRIPTION: Example of a nested library structure where a library file defines its own sub-libraries using the 'mod' keyword.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\nmod evm;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Default AssetId in Sway\nDESCRIPTION: Example showing how to get the default asset ID from an internal contract call using the default() function\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/native_assets.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet asset = AssetId::default();\n```\n\n----------------------------------------\n\nTITLE: Declaring String Slice in Sway\nDESCRIPTION: This snippet demonstrates how to declare a string slice in Sway. String slices are stored as a pointer to the string data and its length.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_4\n\nLANGUAGE: Sway\nCODE:\n```\nlet my_string: str = \"fuel\";\n```\n\n----------------------------------------\n\nTITLE: Creating New Sway Project with Forc CLI\nDESCRIPTION: Command to create a new Sway script project named dbg_example\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforc new --script dbg_example && cd dbg_example\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested While Loops in Sway\nDESCRIPTION: This code snippet illustrates the use of nested while loops in Sway. It demonstrates how to structure loops within loops, allowing for more complex iteration patterns. The outer loop iterates 3 times, while the inner loop iterates 5 times for each outer loop iteration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/looping/while.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet mut i = 0;\nwhile i < 3 {\n    let mut j = 0;\n    while j < 5 {\n        j += 1;\n    }\n    i += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration for Wallet Smart Contract\nDESCRIPTION: Shows how to configure the Forc.toml file to specify an external ABI library dependency for the wallet smart contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/wallet_smart_contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[dependencies]\nwallet_abi = { path = \"../wallet_abi/\" }\n```\n\n----------------------------------------\n\nTITLE: Discouraged Getter Function Naming in Sway\nDESCRIPTION: Illustrates the discouraged style of naming getter functions in Sway by prepending 'get_' to the function names. This approach is less preferred in Sway programming.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/getters.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\npub fn get_balance() -> u64 {\n    // ...\n}\n\npub fn get_owner() -> Address {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Rust Integration Tests for Counter Contract\nDESCRIPTION: Rust code demonstrating how to write integration tests for the Sway counter contract, including setup and method calls.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse fuels::{prelude::*, types::ContractId};\n\n// Load abi from json\nabigen!(Contract(\n    name = \"MyContract\",\n    abi = \"out/debug/my-fuel-project-abi.json\"\n));\n\nasync fn get_contract_instance() -> (MyContract<WalletUnlocked>, ContractId) {\n    // Launch a local network and deploy the contract\n    let mut wallets = launch_custom_provider_and_get_wallets(\n        WalletsConfig::new(\n            Some(1),             /* Single wallet */\n            Some(1),             /* Single coin (UTXO) */\n            Some(1_000_000_000), /* Amount per coin */\n        ),\n        None,\n        None,\n    )\n    .await\n    .unwrap();\n    let wallet = wallets.pop().unwrap();\n\n    let id = Contract::load_from(\n        \"./out/debug/my-fuel-project.bin\",\n        LoadConfiguration::default().set_storage_configuration(\n            StorageConfiguration::load_from(\n                \"./out/debug/my-fuel-project-storage_slots.json\",\n            )\n            .unwrap(),\n        ),\n    )\n    .unwrap()\n    .deploy(&wallet, TxPolicies::default())\n    .await\n    .unwrap();\n\n    let instance = MyContract::new(id.clone(), wallet);\n\n    (instance, id.into())\n}\n\n#[tokio::test]\nasync fn initialize_and_increment() {\n    let (contract_instance, _id) = get_contract_instance().await;\n    // Now you have an instance of your contract you can use to test each function\n\n    let result = contract_instance\n        .methods()\n        .initialize_counter(42)\n        .call()\n        .await\n        .unwrap();\n\n    assert_eq!(42, result.value);\n\n    // Call `increment_counter()` method in our deployed contract.\n    let result = contract_instance\n        .methods()\n        .increment_counter(10)\n        .call()\n        .await\n        .unwrap();\n\n    assert_eq!(52, result.value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sway Library Module\nDESCRIPTION: Example showing how to define a basic library module in Sway using the library keyword.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n```\n\n----------------------------------------\n\nTITLE: Importing Mint Functions in Sway\nDESCRIPTION: Shows how to import the required mint functionality for asset operations in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/address.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to_import}}\n```\n\n----------------------------------------\n\nTITLE: Mutating Entire Tuples in Sway\nDESCRIPTION: This example shows how to replace an entire tuple with a new one, as long as the tuple is declared as mutable and the types of elements match between the old and new tuples.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn mutate_tuple() {\n    let mut point = (1, 2, 3, 4);\n    \n    point = (5, 6, 7, 8);\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Manipulation Intrinsics in Sway\nDESCRIPTION: These intrinsics are used for reading from and writing to storage. They include functions for loading and storing words and quads.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\n__state_load_word(key: b256) -> u64\n```\n\nLANGUAGE: sway\nCODE:\n```\n__state_load_quad(key: b256, ptr: raw_ptr, slots: u64) -> bool\n```\n\nLANGUAGE: sway\nCODE:\n```\n__state_store_word(key: b256, val: u64) -> bool\n```\n\nLANGUAGE: sway\nCODE:\n```\n__state_store_quad(key: b256, ptr: raw_ptr, slots: u64) -> bool\n```\n\n----------------------------------------\n\nTITLE: Matching Complex Constants in Sway\nDESCRIPTION: This code snippet shows how to use complex constants in a match expression in Sway. It defines a constant tuple and demonstrates matching against it.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/control-flow/match/complex/constant.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nconst TUPLE = (1u32, 2u32);\n\nfn complex_constant_match(x: u32, y: u32) -> u32 {\n    match (x, y) {\n        TUPLE => 1,\n        _ => 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting str to str[] in Sway\nDESCRIPTION: Demonstrates how to convert a string slice (str) to a string array (str[]) by creating a single-element array. This is useful when an API requires a string array but you have a single string.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from str to str[]\nlet single_str = \"hello\";\nlet str_array = [single_str];\n```\n\n----------------------------------------\n\nTITLE: Using Documentation Comments in Sway\nDESCRIPTION: Illustrates documentation comments in Sway which start with /// and are placed above functions or struct fields. These comments are used by tools for automatic documentation generation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/comments/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n/// This function adds two numbers together.\n/// It takes in two parameters, both of type u32.\n/// It returns a u32.\nfn add(a: u32, b: u32) -> u32 {\n    a + b\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Usage Example\nDESCRIPTION: Example showing how configurables are used in code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nconfigurable { SOMETHING: u64 = 1 }\n\nfn main() -> u64 { SOMETHING }\n```\n\n----------------------------------------\n\nTITLE: Deploying Scripts and Predicates using forc deploy in Sway\nDESCRIPTION: The 'forc deploy' command is used to deploy scripts and predicates as blobs with generated loaders. This process involves uploading the bytecode as a blob, generating a loader for execution, and saving the loader bytecode in the project's output directory. After deployment, new loader files are created for scripts and predicates.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nforc deploy\n```\n\n----------------------------------------\n\nTITLE: Defining an Equality Function in Sway\nDESCRIPTION: This snippet shows how to declare a function named 'equals' that takes two u64 parameters and returns a Boolean indicating whether they are equal. The function implicitly returns the result of the comparison operation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/function.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn equals(first_number: u64, second_number: u64) -> bool {\n    first_number == second_number\n}\n```\n\n----------------------------------------\n\nTITLE: Running Verbose Tests\nDESCRIPTION: Command to run tests with verbose output enabled, showing warnings and errors. Uses environment variable to control verbosity.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nSWAY_TEST_VERBOSE=true cargo run [pattern]\n```\n\n----------------------------------------\n\nTITLE: Mutating Individual Tuple Elements in Sway\nDESCRIPTION: This example demonstrates how to mutate individual elements of a mutable tuple. The new value must have the same type as the element being replaced.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/tuples.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn mutate_internal_tuple() {\n    let mut point = (1, 2, 3, 4);\n    \n    point.0 = 5;\n    point.1 = 6;\n    point.2 = 7;\n    point.3 = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in Forc.toml\nDESCRIPTION: Example of a basic project configuration in Forc.toml showing common project metadata fields and custom metadata section for external tools.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"user\"]\nentry = \"main.sw\"\ndescription = \"Wallet contract\"\nversion = \"1.0.0\"\nhomepage = \"https://example.com/\"\nrepository = \"https://example.com/\"\ndocumentation = \"https://example.com/\"\norganization = \"Fuel_Labs\"\nlicense = \"Apache-2.0\"\nname = \"wallet_contract\"\ncategories = [\"example\"]\nkeywords = [\"example\"]\n\n[project.metadata]\nindexing = { namespace = \"counter-contract\", schema_path = \"out/release/counter-contract-abi.json\" }\n```\n\n----------------------------------------\n\nTITLE: Calling External Contract Methods\nDESCRIPTION: Example of a contract that calls methods from an external contract dependency. Shows how to interact with multiple contracts in the Sway ecosystem.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../examples/multi_contract_calls/caller/src/main.sw:multi_contract_calls}}\n```\n\n----------------------------------------\n\nTITLE: Factorial Implementation in Sway\nDESCRIPTION: A Sway script that implements a factorial function and logs its result. The program calculates factorial of 5 using a while loop and the standard logging facility.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nuse std::logging::log;\n\nfn factorial(n: u64) -> u64 {\n    let mut result = 1;\n    let mut counter = 0;\n    while counter < n {\n        counter = counter + 1;\n        result = result * counter;\n    }\n    return result;\n}\n\nfn main() {\n    log::<u64>(factorial(5)); // 120\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Asset Minting Functionality in Sway\nDESCRIPTION: Import statement required to use the mint_to_contract functionality in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to_import}}\n```\n\n----------------------------------------\n\nTITLE: Example of Undefined Behavior in Vector Iteration in Sway\nDESCRIPTION: Demonstrates a logical error where modifying a vector during iteration leads to undefined behavior. This pattern should be avoided as it can cause unpredictable results.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/vec.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nlet mut v = vec![100, 32, 57];\nfor n_ref in v.iter() {\n    v.push(0); // undefined behavior\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Intrinsics in Sway\nDESCRIPTION: These intrinsics perform comparisons between values of the same type. They include __eq, __gt, and __lt, with constraints on the types they can be used with.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\n__eq<T>(lhs: T, rhs: T) -> bool\n```\n\nLANGUAGE: sway\nCODE:\n```\n__gt<T>(lhs: T, rhs: T) -> bool\n```\n\nLANGUAGE: sway\nCODE:\n```\n__lt<T>(lhs: T, rhs: T) -> bool\n```\n\n----------------------------------------\n\nTITLE: Struct Definition in Sway\nDESCRIPTION: Defines a Point struct with x and y coordinates as fields, which will be used to demonstrate associated functions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/associated-function.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Point {\n    x: u64,\n    y: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a DEX Contract on Testnet\nDESCRIPTION: Example of querying the owner of a deployed DEX contract on the Fuel testnet. This demonstrates using a remote ABI file and connecting to the testnet.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforc call \\\n  --testnet \\\n  --abi https://raw.githubusercontent.com/mira-amm/mira-v1-periphery/refs/heads/main/fixtures/mira-amm/mira_amm_contract-abi.json \\\n  0xd5a716d967a9137222219657d7877bd8c79c64e1edb5de9f2901c98ebe74da80 \\\n  owner\n```\n\n----------------------------------------\n\nTITLE: ContractId Type Casting Example\nDESCRIPTION: Shows explicit type casting between b256 and ContractId types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nlet my_number: b256 = 0x000000000000000000000000000000000000000000000000000000000000002A;\nlet my_contract_id: ContractId = ContractId::from(my_number);\nlet forty_two: b256 = my_contract_id.into();\n```\n\n----------------------------------------\n\nTITLE: Parsing Bytecode Output\nDESCRIPTION: Command to read and parse the generated bytecode\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforc parse-bytecode out/debug/dbg_example.bin\n```\n\n----------------------------------------\n\nTITLE: Verbose Type Usage in Sway Without Aliases\nDESCRIPTION: Shows how verbose type declarations can make code harder to read and write, demonstrating a scenario where type aliases would be beneficial.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/advanced_types.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn process(arrays: [[MyStruct<u64, b256>; 5]; 10]) -> [MyStruct<u64, b256>; 5] {\n    let buffer: [MyStruct<u64, b256>; 5] = arrays[0];\n    // Do something with buffer\n    buffer\n}\n```\n\n----------------------------------------\n\nTITLE: Tuple Usage in Sway\nDESCRIPTION: Shows how to create and access tuple values in Sway, demonstrating tuple type declaration and value destructuring.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/structs_tuples_and_enums.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let point = (0, 4);\n    let x = point.0;\n    let y = point.1;\n\n    let (a, b) = point;\n\n    let nested_tuple = (0, (1, 2), 3);\n    let inner = nested_tuple.1;\n    let inner_first = inner.0;\n    let inner_second = inner.1;\n    let first = nested_tuple.0;\n    let last = nested_tuple.2;\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Artifact Example\nDESCRIPTION: JSON format of deployment artifacts saved in the out/deployments folder after a successful deployment.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transaction_id\": \"0xec27bb7a4c8a3b8af98070666cf4e6ea22ca4b9950a0862334a1830520012f5d\",\n  \"salt\": \"0x9e35d1d5ef5724f29e649a3465033f5397d3ebb973c40a1d76bb35c253f0dec7\",\n  \"network_endpoint\": \"http://127.0.0.1:4000\",\n  \"chain_id\": 0,\n  \"contract_id\": \"0x767eeaa7af2621e637f9785552620e175d4422b17d4cf0d76335c38808608a7b\",\n  \"deployment_size\": 68,\n  \"deployed_block_id\": \"0x915c6f372252be6bc54bd70df6362dae9bf750ba652bf5582d9b31c7023ca6cf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Contract in Sway\nDESCRIPTION: A simple counter contract implementation in Sway, including methods to initialize and increment the counter.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\ncontract;\n\nstorage {\n    counter: u64 = 0,\n}\n\nabi MyContract {\n    #[storage(read, write)]\n    fn initialize_counter(value: u64) -> u64;\n\n    #[storage(read, write)]\n    fn increment_counter(amount: u64) -> u64;\n}\n\nimpl MyContract for Contract {\n    #[storage(read, write)]\n    fn initialize_counter(value: u64) -> u64 {\n        storage.counter = value;\n        value\n    }\n\n    #[storage(read, write)]\n    fn increment_counter(amount: u64) -> u64 {\n        storage.counter += amount;\n        storage.counter\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies in Sway Manifest (TOML)\nDESCRIPTION: This snippet demonstrates how to declare dependencies in a Sway project manifest. It shows different ways to specify dependency sources and versions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/manifest/index.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nfoo = { path = \"../foo\" }\nbar = { git = \"https://github.com/foo/bar\", tag = \"v0.1.0\" }\nbaz = { git = \"https://github.com/foo/baz\", rev = \"4d2c2416fad3\" }\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying a Sway Contract\nDESCRIPTION: Commands for building and deploying the Sway counter contract to the Fuel testnet. These use the Forc CLI to compile the contract and deploy it to the network.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/counter.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build the contract\nforc build\n\n# Deploy the contract\nforc deploy --testnet\n```\n\n----------------------------------------\n\nTITLE: Desugared Script Entry Function\nDESCRIPTION: Compiler-generated entry function showing how script arguments are decoded and processed.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub fn __entry() -> raw_slice {\n    let args: (u64,) = decode_script_data::<(u64,)>(); // or decode_predicate_data\n    let result: u64 = main(args.0); \n    encode::<u64>(result)\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the u64 Variant with b256 Enum\nDESCRIPTION: Example showing that even when instantiating the u64 variant of enum K, it still takes up 40 bytes of memory space due to the largest variant (b256) determining the overall size.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nlet u64_type = K::A(10);\n```\n\n----------------------------------------\n\nTITLE: Address Type Casting Example\nDESCRIPTION: Demonstrates explicit type casting between b256 and Address types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/blockchain_types.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet my_number: b256 = 0x000000000000000000000000000000000000000000000000000000000000002A;\nlet my_address: Address = Address::from(my_number);\nlet forty_two: b256 = my_address.into();\n```\n\n----------------------------------------\n\nTITLE: Success Test Case in Sway\nDESCRIPTION: Demonstrates a basic successful test case using the #[test] attribute. The test passes if execution completes without reverting.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/test.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:success_test}}\n```\n\n----------------------------------------\n\nTITLE: Importing Mint To Function in Sway\nDESCRIPTION: Shows how to import the necessary mint_to function to enable minting assets to addresses or contracts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/address-or-contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to_import}}\n```\n\n----------------------------------------\n\nTITLE: Declaring String Array in Sway\nDESCRIPTION: This example shows how to declare a static-length string array in Sway. The size of the string is part of its type, denoted with square brackets.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_5\n\nLANGUAGE: Sway\nCODE:\n```\nlet my_string: str[4] = __to_str_array(\"fuel\");\n```\n\n----------------------------------------\n\nTITLE: Test Annotation Example in Sway\nDESCRIPTION: Example showing the test annotation syntax used for unit testing in Sway programming language.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[test]\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for Integer Variable in Sway\nDESCRIPTION: Shows explicit type annotation for a variable declaration, specifying u32 as the type for an integer value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/variables.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nlet foo: u32 = 5;\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Sway\nDESCRIPTION: This snippet demonstrates how to define a struct named Point with x and y coordinates in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/method.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstruct Point {\n    x: u64,\n    y: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Program in Rust\nDESCRIPTION: Performs type checking on the program, resolving names with previously built namespaces and ensuring consistent and correct type usage. It also handles monomorphization for generic types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nimpl TyProgram {\n    pub fn type_check(\n        handler: &Handler,\n        engines: &Engines,\n        parsed: &ParseProgram,\n        initial_namespace: namespace::Root,\n        package_name: &str,\n        build_config: Option<&BuildConfig>,\n    ) -> Result<Self, ErrorEmitted>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StorageVec in Sway\nDESCRIPTION: Demonstrates how to import the StorageVec collection from the standard library using the glob operator, which is required to use this type in a Sway smart contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/storage.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\nuse std::storage::storage_vec::*;\n```\n\n----------------------------------------\n\nTITLE: Creating and Building a Sway Counter Project\nDESCRIPTION: This snippet shows how to create a new Sway project using the counter template, navigate to the project directory, and build the project using the Fuel Orchestrator (forc) tool.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_parse-bytecode.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforc new --template counter counter\ncd counter\nforc build -o obj\n```\n\n----------------------------------------\n\nTITLE: Dependency Patching Configuration\nDESCRIPTION: Examples demonstrating how to patch dependencies using git repositories and local paths.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"user\"]\nentry = \"main.sw\"\norganization = \"Fuel_Labs\"\nlicense = \"Apache-2.0\"\nname = \"wallet_contract\"\n\n[dependencies]\n\n[patch.'https://github.com/fuellabs/sway']\nstd = { git = \"https://github.com/fuellabs/sway\", branch = \"test\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\n[patch.'https://github.com/fuellabs/sway']\nstd = { path = \"/path/to/local_std_version\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"user\"]\nentry = \"main.sw\"\norganization = \"Fuel_Labs\"\nlicense = \"Apache-2.0\"\nname = \"wallet_contract\"\n\n[dependencies]\nfoo = { git = \"https://github.com/foo/foo\", branch = \"master\" }\n\n[patch.'https://github.com/foo']\nfoo = { git = \"https://github.com/foo/foo\", branch = \"test\" }\n```\n\n----------------------------------------\n\nTITLE: Error Type Enum Declaration in Sway\nDESCRIPTION: Demonstration of how to declare an error type enum using the #[error_type] attribute. Error type enums are used for rich error reporting in panic expressions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/attributes.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n#[error_type]\nenum SomeErrors {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Script/Predicate Main Function Implementation\nDESCRIPTION: Example of a main function implementation in scripts and predicates that takes arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn main(v: u64) -> bool {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Log Function Implementation\nDESCRIPTION: Example of log function usage and its desugared implementation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nlog(1);\n```\n\nLANGUAGE: rust\nCODE:\n```\n__log(encode(1));\n```\n\n----------------------------------------\n\nTITLE: Converting from Byte Arrays in Sway\nDESCRIPTION: Shows how to convert from byte arrays back to various primitive types in Sway using functions from the bytes_conversions module. This allows for deserialization of byte data into usable types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_16\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from byte array to u8\nlet byte_array_u8: [u8; 1] = [5u8];\nlet a = byte_array_to_u8(byte_array_u8);\n\n// Convert from byte array to u16\nlet byte_array_u16: [u8; 2] = [0u8, 5u8];\nlet b = byte_array_to_u16(byte_array_u16);\n\n// Convert from byte array to u32\nlet byte_array_u32: [u8; 4] = [0u8, 0u8, 0u8, 5u8];\nlet c = byte_array_to_u32(byte_array_u32);\n\n// Convert from byte array to u64\nlet byte_array_u64: [u8; 8] = [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8];\nlet d = byte_array_to_u64(byte_array_u64);\n\n// Convert from byte array to u256\nlet byte_array_u256: [u8; 32] = [\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8\n];\nlet e = byte_array_to_u256(byte_array_u256);\n\n// Convert from byte array to b256\nlet byte_array_b256: [u8; 32] = [\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8\n];\nlet f = byte_array_to_b256(byte_array_b256);\n```\n\n----------------------------------------\n\nTITLE: Explicit Return in Sway Functions\nDESCRIPTION: This snippet demonstrates how to use the explicit return syntax in Sway, using the 'return' keyword followed by the value to be returned and a semicolon. This approach can be used anywhere in the function body.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/return.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/functions/src/explicit.sw:main}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Contract Project with Forc Template\nDESCRIPTION: Command to generate a new counter project using the Forc CLI template feature. This creates a baseline counter project structure with all necessary files.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/counter.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforc template --template-name counter my_counter_project\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Constants in Traits\nDESCRIPTION: This snippet demonstrates how to declare associated constants in a trait, both with and without default values.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/traits.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\ntrait Trait {\n    const ID: u32 = 0;\n}\n\ntrait Trait {\n    const ID: u32;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Specialized Sway Library\nDESCRIPTION: Example of importing the Ownership library from the sway-libs repository, which provides ownership control functionality.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\nuse ownership::Ownership;\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct in Sway\nDESCRIPTION: Definition of a struct with a field named 'amount' of type u64, which will be used to demonstrate struct shorthand.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/structs.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\npub struct Payment {\n    amount: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Semantic Analysis Process with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the semantic analysis step, which transforms the AST into a typed AST.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n    AST[Abstract Syntax Tree] --> SemanticAnalysis[Semantic Analysis];\n    SemanticAnalysis --> TypedAST[Typed AST];\n```\n\n----------------------------------------\n\nTITLE: Defining Function Structure in Sway\nDESCRIPTION: This snippet demonstrates the basic template for declaring functions in Sway, showing the required 'fn' keyword, function name, parameter list with types, and optional return type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn function_name(param1: Type1, param2: Type2) -> ReturnType {\n    // Function body\n    // Manipulate parameters to return ReturnType\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Salt for Contract Dependencies\nDESCRIPTION: Example Forc.toml configuration showing how to specify a custom salt value for a contract dependency. The salt is used to modify the deterministic contract ID to allow multiple deployments of the same contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[contract-dependencies]\nfoo = { path = \"../foo\", salt = \"0x1000000000000000000000000000000000000000000000000000000000000000\" }\n```\n\n----------------------------------------\n\nTITLE: External Library Dependency Configuration\nDESCRIPTION: Configuration in Forc.toml to add an external library as a dependency by specifying its path.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nexternal_library = { path = \"../external_library\" }\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Named Catch-all in Sway\nDESCRIPTION: Shows an alternative pattern matching approach where the catch-all case is given a meaningful name to provide additional context. This should only be used when the name adds valuable information to the code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/pattern-matching.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/pattern_matching/src/lib.sw:style_match_named}}\n```\n\n----------------------------------------\n\nTITLE: Using Patch Section in Workspace Manifest\nDESCRIPTION: This example shows how to use the patch section in a workspace manifest to override dependencies. In this case, it overrides the 'std' dependency to use a specific branch from the Sway GitHub repository.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/workspaces.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"member1\", \"path/to/member2\"]\n\n\n[patch.'https://github.com/fuellabs/sway']\nstd = { git = \"https://github.com/fuellabs/sway\", branch = \"test\" }\n```\n\n----------------------------------------\n\nTITLE: Converting to u32 in Sway\nDESCRIPTION: Demonstrates various methods to convert different types to u32 in Sway, including type conversion from smaller numeric types and casting from larger types with potential truncation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from other types to u32\nlet a: u32 = 5u16.into();\nlet b: u32 = 5u8.into();\n\n// The as operator can also be used\nlet c = 5u16 as u32;\nlet d = 5u8 as u32;\n\n// Converting from larger types (this may truncate)\nlet e = 5u64 as u32;\n```\n\n----------------------------------------\n\nTITLE: Usage of forc deploy command for Fuel contract deployment\nDESCRIPTION: This snippet shows the basic usage of the 'forc deploy' command, including its options and arguments. It demonstrates how to deploy a contract, specify a node URL, set gas parameters, and provide contract arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_deploy.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# forc deploy\n\nUsage: forc deploy [OPTIONS] [CONTRACT_ID]\n\nArguments:\n  [CONTRACT_ID]  Contract ID to deploy\n\nOptions:\n      --node <NODE_URL>            Node URL to deploy to [default: beta-3.fuel.network]\n      --gas-price <GAS_PRICE>      Gas price for deployment\n      --gas-limit <GAS_LIMIT>      Gas limit for deployment\n      --maturity <MATURITY>        Set maturity of the transaction\n      --salt <SALT>                Provide a salt to randomize contract ID\n      --unsigned                   Generate a transaction request for remote signing\n  -s, --signed <SIGNED_TX>         Path to a JSON file containing a signed transaction\n      --params <PARAMS>            Provide contract arguments\n      --pkg-path <PKG_PATH>        Path to the Forc.toml project manifest [default: .]\n  -o, --output <OUTPUT>            Output destination for the compiled contract\n      --network <NETWORK>          Configure the network to use\n      --realm-client-id <REALM>    The Realm client ID (optional)\n  -h, --help                       Print help\n```\n\n----------------------------------------\n\nTITLE: Using Turbofish on Return Value for Type Specification\nDESCRIPTION: Demonstrates using the turbofish syntax to specify generic type parameters on a return value when they cannot be inferred.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/generic_types.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\nfn foo<T, E>(t: T) -> Result<T, E> {\n    Ok::<T, MyErrorType>(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Specific Thread Count\nDESCRIPTION: Command to run tests using a specific number of threads for execution. Useful for controlling parallelism or running tests serially.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nforc test --test-threads 1\n```\n\n----------------------------------------\n\nTITLE: Library Forc.toml Configuration\nDESCRIPTION: Example Forc.toml file for a Sway library project, defining metadata like authors, entry point, license, and project name.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"Fuel Labs <contact@fuel.sh>\"]\nentry = \"lib.sw\"\nlicense = \"Apache-2.0\"\nname = \"my_library\"\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Using a Function in Sway\nDESCRIPTION: This snippet demonstrates how to call the previously defined 'equals' function with two numeric arguments. It shows the pattern for function invocation in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/functions/function.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let first = 5;\n    let second = 5;\n    let result = equals(first, second);\n    assert(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Specification JSON\nDESCRIPTION: Sample transaction JSON configuration for debugging Sway scripts\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Script\": {\n    \"body\": {\n      \"script_gas_limit\": 1000000,\n      \"script\": [\n        26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 96, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 0, 184, 80, 67, 176, 80, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 37, 80, 71, 176, 40, 26, 233, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 136, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 79, 176, 120, 114, 68, 0, 24, 40, 79, 180, 64, 80, 71, 176, 160, 114, 72, 0, 24, 40, 69, 52, 128, 80, 71, 176, 96, 114, 72, 0, 24, 40, 69, 52, 128, 80, 75, 176, 64, 26, 233, 16, 0, 26, 229, 32, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 144, 26, 71, 208, 0, 80, 75, 176, 24, 114, 76, 0, 16, 40, 73, 20, 192, 80, 71, 176, 144, 114, 76, 0, 16, 40, 69, 36, 192, 114, 72, 0, 16, 40, 65, 20, 128, 93, 69, 0, 1, 93, 65, 0, 0, 37, 65, 16, 0, 149, 0, 0, 63, 150, 8, 0, 0, 26, 236, 80, 0, 145, 0, 1, 88, 26, 87, 224, 0, 95, 236, 16, 42, 95, 236, 0, 41, 93, 67, 176, 41, 114, 68, 0, 5, 22, 65, 4, 64, 118, 64, 0, 81, 93, 67, 176, 42, 80, 71, 176, 200, 26, 233, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 87, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 176, 160, 114, 72, 0, 24, 40, 71, 180, 128, 80, 75, 176, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 176, 88, 114, 76, 0, 24, 40, 69, 36, 192, 93, 83, 176, 11, 93, 79, 176, 12, 93, 71, 176, 13, 114, 72, 0, 8, 16, 73, 20, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 7, 114, 72, 0, 2, 27, 73, 52, 128, 114, 76, 0, 8, 16, 77, 36, 192, 38, 76, 0, 0, 40, 29, 68, 64, 26, 80, 112, 0, 16, 73, 68, 64, 95, 73, 0, 0, 114, 64, 0, 8, 16, 65, 20, 0, 80, 71, 176, 112, 95, 237, 64, 14, 95, 237, 48, 15, 95, 237, 0, 16, 80, 67, 176, 48, 114, 72, 0, 24, 40, 65, 20, 128, 80, 71, 176, 136, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 177, 8, 114, 72, 0, 24, 40, 65, 20, 128, 80, 71, 177, 48, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 177, 48, 80, 71, 176, 240, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 224, 26, 233, 16, 0, 26, 229, 0, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 56, 26, 67, 208, 0, 80, 71, 176, 72, 114, 72, 0, 16, 40, 69, 4, 128, 80, 67, 177, 32, 114, 72, 0, 16, 40, 65, 20, 128, 80, 71, 176, 184, 114, 72, 0, 16, 40, 69, 4, 128, 93, 67, 240, 0, 93, 71, 176, 23, 93, 75, 176, 24, 52, 1, 4, 82, 26, 244, 0, 0, 116, 0, 0, 8, 93, 67, 176, 41, 16, 65, 0, 64, 95, 237, 0, 41, 93, 67, 176, 42, 93, 71, 176, 41, 27, 65, 4, 64, 95, 237, 0, 42, 117, 0, 0, 91, 146, 0, 1, 88, 26, 249, 80, 0, 152, 8, 0, 0, 151, 0, 0, 63, 74, 248, 0, 0, 149, 0, 0, 15, 150, 8, 0, 0, 26, 236, 80, 0, 145, 0, 0, 72, 26, 67, 160, 0, 26, 71, 224, 0, 114, 72, 4, 0, 38, 72, 0, 0, 26, 72, 112, 0, 80, 79, 176, 24, 95, 237, 32, 3, 114, 72, 4, 0, 95, 237, 32, 4, 95, 236, 0, 5, 114, 72, 0, 24, 40, 237, 52, 128, 80, 75, 176, 48, 114, 76, 0, 24, 40, 75, 180, 192, 114, 76, 0, 24, 40, 65, 36, 192, 26, 245, 0, 0, 146, 0, 0, 72, 26, 249, 16, 0, 152, 8, 0, 0, 151, 0, 0, 15, 74, 248, 0, 0, 149, 0, 0, 63, 150, 8, 0, 0, 26, 236, 80, 0, 145, 0, 0, 104, 26, 67, 160, 0, 26, 71, 144, 0, 26, 75, 224, 0, 80, 79, 176, 80, 114, 80, 0, 24, 40, 77, 5, 0, 114, 64, 0, 24, 40, 237, 52, 0, 80, 67, 176, 40, 114, 76, 0, 24, 40, 67, 180, 192, 93, 79, 176, 5, 80, 65, 0, 16, 80, 83, 176, 64, 95, 237, 48, 8, 80, 77, 64, 8, 114, 84, 0, 8, 40, 77, 5, 64, 80, 67, 176, 24, 114, 76, 0, 16, 40, 65, 68, 192, 114, 76, 0, 16, 40, 69, 4, 192, 26, 245, 16, 0, 146, 0, 0, 104, 26, 249, 32, 0, 152, 8, 0, 0, 151, 0, 0, 63, 74, 248, 0, 0, 71, 0, 0, 0, 21, 6, 230, 244, 76, 29, 98, 145\n      ],\n      \"script_data\": [],\n      \"receipts_root\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"policies\": {\n      \"bits\": \"MaxFee\",\n      \"values\": [0, 0, 0, 0]\n    },\n    \"inputs\": [\n      {\n        \"CoinSigned\": {\n          \"utxo_id\": {\n            \"tx_id\": \"c49d65de61cf04588a764b557d25cc6c6b4bc0d7429227e2a21e61c213b3a3e2\",\n            \"output_index\": 18\n          },\n          \"owner\": \"f1e92c42b90934aa6372e30bc568a326f6e66a1a0288595e6e3fbd392a4f3e6e\",\n          \"amount\": 10599410012256088000,\n          \"asset_id\": \"2cafad611543e0265d89f1c2b60d9ebf5d56ad7e23d9827d6b522fd4d6e44bc3\",\n          \"tx_pointer\": {\n            \"block_height\": 0,\n            \"tx_index\": 0\n          },\n          \"witness_index\": 0,\n          \"maturity\": 0,\n          \"predicate_gas_used\": null,\n          \"predicate\": null,\n          \"predicate_data\": null\n        }\n      }\n    ],\n    \"outputs\": [],\n    \"witnesses\": [\n      {\n        \"data\": [156, 254, 34, 102, 65, 96, 133, 170, 254, 105, 147, 35, 196, 199, 179, 133, 132, 240, 208, 149, 11, 46, 30, 96, 44, 91, 121, 195, 145, 184, 159, 235, 117, 82, 135, 41, 84, 154, 102, 61, 61, 16, 99, 123, 58, 173, 75, 226, 219, 139, 62, 33, 41, 176, 16, 18, 132, 178, 8, 125, 130, 169, 32, 108]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Storage in Sway\nDESCRIPTION: Shows how to annotate a function that writes to storage using the 'write' keyword above the function signature.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/storage.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(write)]\nfn set_count(new_count: u64) {\n    storage.count.write(new_count);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Git Dependencies in Forc.toml\nDESCRIPTION: Example showing how to add a git-based dependency with optional branch, tag, or revision specifications. The dependency 'custom_lib' is referenced from a GitHub repository.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/dependencies.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncustom_lib = { git = \"https://github.com/FuelLabs/custom_lib\", branch = \"master\" }\n# custom_lib = { git = \"https://github.com/FuelLabs/custom_lib\", tag = \"v0.0.1\" }\n# custom_lib = { git = \"https://github.com/FuelLabs/custom_lib\", rev = \"87f80bdf323e2d64e213895d0a639ad468f4deff\" }\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Signing Key\nDESCRIPTION: Example of providing an explicit signing key for transaction authorization when making contract calls. This allows using a specific key without relying on a wallet.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n# with an explicit signing key\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --signing-key <KEY>\n```\n\n----------------------------------------\n\nTITLE: Factorial Calculator Script in Sway\nDESCRIPTION: Sample Sway script that calculates factorial of 5 and logs the result\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nuse std::logging::log;\n\nfn factorial(n: u64) -> u64 {\n    let mut result = 1;\n    let mut counter = 0;\n    while counter < n {\n        counter = counter + 1;\n        result = result * counter;\n    }\n    return result;\n}\n\nfn main() {\n    log::<u64>(factorial(5)); // 120\n}\n```\n\n----------------------------------------\n\nTITLE: Forc.toml Project Manifest Configuration\nDESCRIPTION: Example of a Forc.toml manifest file for a Sway project. It defines project metadata such as name, authors, license, entry point and dependencies.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/forc_project.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"User\"]\nentry = \"main.sw\"\nlicense = \"Apache-2.0\"\nname = \"my-fuel-project\"\n\n[dependencies]\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested StorageVec\nDESCRIPTION: Shows how to declare nested StorageVec structures.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_8\n\nLANGUAGE: sway\nCODE:\n```\nstorage {\n    nested_vec: StorageVec<StorageVec<u64>> = StorageVec {},\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Unit Type Function in Sway\nDESCRIPTION: This snippet demonstrates how to declare a function that returns the unit type in Sway. The unit type is represented by '()' and indicates the absence of a meaningful value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_0\n\nLANGUAGE: Sway\nCODE:\n```\nfn returns_unit() -> () { // Here, `()` represent the unit type.\n    ()                    // Here, `()` represents the single unit value of the unit type.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Registry Dependencies in Forc.toml\nDESCRIPTION: Example demonstrating how to add a dependency from the Forc registry (forc.pub). The dependency 'custom_lib' is referenced using a version number.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/dependencies.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncustom_lib = \"0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Importing Keccak256 Function in Sway\nDESCRIPTION: Shows how to import the keccak256 hashing function from the standard library in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/hashing/keccak256.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/operations/hashing/src/lib.sw:import_keccak256}}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Sway Project with Internal Library\nDESCRIPTION: Demonstrates the typical directory structure of a Sway project that contains an internal library. The library file 'my_library.sw' is located in the same 'src' directory as other program files.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/internal.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tree\n.\n├── Cargo.toml\n├── Forc.toml\n└── src\n    ├── lib.sw\n    └── my_library.sw\n```\n\n----------------------------------------\n\nTITLE: Return Value Demotion Example\nDESCRIPTION: Shows how return values are handled in contract methods and the demotion process.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl TestContract for Contract {\n    fn some_method() -> Vec<u64> {\n        Vec::new()\n    }\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn __contract_entry_some_method(return_value: &mut Vec<u64>) {\n    *return_value = Vec::new();\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Specification JSON\nDESCRIPTION: Example transaction specification JSON for debugging, including script execution parameters and input configuration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Script\": {\n    \"body\": {\n      \"script_gas_limit\": 1000000,\n      \"script\": [],\n      \"script_data\": [],\n      \"receipts_root\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"policies\": {\n      \"bits\": \"MaxFee\",\n      \"values\": [...]\n    },\n    \"inputs\": [\n      {\n        \"CoinSigned\": {\n          \"utxo_id\": {\n            \"tx_id\": \"c49d65de61cf04588a764b557d25cc6c6b4bc0d7429227e2a21e61c213b3a3e2\",\n            \"output_index\": 18\n          },\n          \"owner\": \"f1e92c42b90934aa6372e30bc568a326f6e66a1a0288595e6e3fbd392a4f3e6e\",\n          \"amount\": 10599410012256088000,\n          \"asset_id\": \"2cafad611543e0265d89f1c2b60d9ebf5d56ad7e23d9827d6b522fd4d6e44bc3\",\n          \"tx_pointer\": {\n            \"block_height\": 0,\n            \"tx_index\": 0\n          },\n          \"witness_index\": 0,\n          \"maturity\": 0,\n          \"predicate_gas_used\": null,\n          \"predicate\": null,\n          \"predicate_data\": null\n        }\n      }\n    ],\n    \"outputs\": [],\n    \"witnesses\": [\n      {\n        \"data\": [...]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Storage in Sway\nDESCRIPTION: Demonstrates how to annotate a function that reads from storage using the 'read' keyword above the function signature.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/storage.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn get_count() -> u64 {\n    storage.count.read()\n}\n```\n\n----------------------------------------\n\nTITLE: Building Sway Project While Keeping Prism Directory\nDESCRIPTION: Command to build the Sway project while keeping the 'prism' directory. This is useful for active development and testing.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/prism/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build.sh keep\n```\n\n----------------------------------------\n\nTITLE: Adding IPFS Dependencies in Forc.toml\nDESCRIPTION: Example showing how to add a dependency using IPFS content identifier (CID). The dependency 'custom_lib' is referenced using an IPFS hash.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/dependencies.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ncustom_lib = { ipfs = \"QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG\" }\n```\n\n----------------------------------------\n\nTITLE: Calling a Contract Function in Dry-run Mode\nDESCRIPTION: Example of calling a simple addition function on a deployed contract in dry-run mode. This allows testing the function call without executing it on the blockchain.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforc call 0xe18de7c7c8c61a1c706dccb3533caa00ba5c11b5230da4428582abf1b6831b4d \\\n  --abi ./out/debug/counter-contract-abi.json \\\n  add 1 2\n```\n\n----------------------------------------\n\nTITLE: Using Intermediate Variables for Contextual Assignment in Sway\nDESCRIPTION: This snippet demonstrates how to use intermediate variables to provide context about values. Creating a descriptive variable name helps convey the meaning of complex expressions to readers of the code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/intermediate-variables.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn contextual_assignment(value: u64) -> u64 {\n    // DO\n    let is_value_even = value % 2 == 0;\n    if is_value_even {\n        return value / 2;\n    }\n\n    // DON'T\n    if value % 2 == 0 {\n        return value / 2;\n    }\n\n    value\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Run Test with Return Data in TOML\nDESCRIPTION: This example configures a test that expects specific return data. The return data is presented as a memory range, which is what the RETD opcode returns.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/test_programs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncategory = \"run\"\nexpected_result = { action = \"return_data\", value = \"0000000003ffffc400000000000000040000000000000003\" }\nvalidate_abi = true\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested StorageVec\nDESCRIPTION: Demonstrates how to access elements in a nested StorageVec structure.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/common-collections/storage_vec.md#2025-04-17_snippet_9\n\nLANGUAGE: sway\nCODE:\n```\n#[storage(read)]\nfn access_nested() -> Option<u64> {\n    storage.nested_vec.get(0).get(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Configuration Examples\nDESCRIPTION: Commands demonstrating various gas-related settings for contract calls, including setting gas price, forwarding gas to the contract, and specifying a maximum fee.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n# Set gas price\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --gas-price 1\n\n# Forward gas to contract\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --gas-forwarded 1000\n\n# Set maximum fee\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --max-fee 5000\n```\n\n----------------------------------------\n\nTITLE: Rust Enum Variant Syntax Example\nDESCRIPTION: Demonstrates the three forms of enum variants in Rust: unit variants (no data), tuple variants (tuple data), and struct variants (named fields).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/rust_differences.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Foo {\n    UnitVariant,\n    TupleVariant(u32, u64, bool),\n    StructVariant {\n        field_one: bool,\n        field_two: bool\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project Metadata in Sway Manifest (TOML)\nDESCRIPTION: This snippet shows the basic structure of a Sway project manifest file. It includes project metadata such as name, version, authors, and edition.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/manifest/index.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"example_project\"\nversion = \"0.1.0\"\nauthors = [\"Fuel Labs <contact@fuel.sh>\"]\nedition = \"2021\"\n```\n\n----------------------------------------\n\nTITLE: Library Entry Point with Module Declarations\nDESCRIPTION: Example of a library entry point (lib.sw) that registers submodules using the 'mod' keyword to make them accessible from the parent library.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\nmod block;\nmod storage;\nmod constants;\nmod vm;\n// .. Other deps\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for External Libraries in Sway\nDESCRIPTION: Shows the typical directory structure for multiple Sway libraries. Each library has its own Cargo.toml, Forc.toml, and src directory containing a lib.sw file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/libraries/external.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tree\n.\n├── my_library\n│   ├── Cargo.toml\n│   ├── Forc.toml\n│   └─── src\n│       └── lib.sw\n│\n└── my_other_library\n    ├── Cargo.toml\n    ├── Forc.toml\n    └─── src\n        └── lib.sw\n```\n\n----------------------------------------\n\nTITLE: Defining Sway File Extension\nDESCRIPTION: Specifies the file extension for Sway programs, which is '.sw'. The first line of a Sway file declares the program type.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/program-types/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nmain.sw\n```\n\n----------------------------------------\n\nTITLE: Discouraged Enum Usage Pattern in Sway\nDESCRIPTION: A discouraged pattern for using nested enums in Sway. This approach requires importing all enum types, results in unnecessarily long lines, and has unergonomic syntax.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/enums.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nuse Error::*;\nuse StateError::*;\nuse UserError::*;\n\nfn handle_error() {\n    let x = Error::StateError(StateError::Aborted);\n    let y = Error::UserError(UserError::InvalidId);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Transfer Function in Sway\nDESCRIPTION: Shows how to import the transfer function required for asset operations in Sway. This is a prerequisite step before performing any asset transfers.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/address-or-contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:transfer_import}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Project Structure in Console\nDESCRIPTION: Shows the updated project structure after generating the test harness, including new files like Cargo.toml and tests/harness.rs.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ tree .\n├── Cargo.toml\n├── Forc.toml\n├── build.rs\n├── src\n│   └── main.sw\n└── tests\n    └── harness.rs\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Proxy Contract in Forc.toml\nDESCRIPTION: Configuration in Forc.toml to update an existing proxy contract instead of deploying a new one.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_14\n\nLANGUAGE: TOML\nCODE:\n```\n[project]\nname = \"test_contract\"\nauthors = [\"Fuel Labs <contact@fuel.sh>\"]\nentry = \"main.sw\"\nlicense = \"Apache-2.0\"\nimplicit-std = false\n\n[proxy]\nenabled = true\naddress = \"0xd8c4b07a0d1be57b228f4c18ba7bca0c8655eb6e9d695f14080f2cf4fc7cd946\" # example proxy contract address\n```\n\n----------------------------------------\n\nTITLE: Cloning and building the Sway repository\nDESCRIPTION: Commands to clone the Sway repository from GitHub and build the Sway toolchain using Cargo.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:FuelLabs/sway.git\ncd sway\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Build Profile Configuration\nDESCRIPTION: Example showing how to configure debug and release build profiles with custom compiler settings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nauthors = [\"user\"]\nentry = \"main.sw\"\norganization = \"Fuel_Labs\"\nlicense = \"Apache-2.0\"\nname = \"wallet_contract\"\n\n[build-profile.debug]\nprint-asm = { virtual = false, allocated = false, final = true }\nprint-ir = { initial = false, final = true, modified = false, passes = []}\nterse = false\n\n[build-profile.release]\nprint-asm = { virtual = true, allocated = false, final = true }\nprint-ir = { initial = true, final = false, modified = true, passes = [\"dce\", \"sroa\"]}\nterse = true\n```\n\n----------------------------------------\n\nTITLE: Array and Slice Manipulation Intrinsics in Sway\nDESCRIPTION: These intrinsics are used for manipulating arrays and slices, including slicing and element access. They include __slice and __elem_at with various overloads for different types and mutability.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\n__slice(item: &[T; N], start: u64, end: u64) -> &[T]\n__slice(item: &[T], start: u64, end: u64) -> &[T]\n__slice(item: &mut [T; N], start: u64, end: u64) -> &mut [T]\n__slice(item: &mut [T], start: u64, end: u64) -> &mut [T]\n```\n\nLANGUAGE: sway\nCODE:\n```\n__elem_at(item: &[T; N], index: u64) -> &T\n__elem_at(item: &[T], index: u64) -> &T\n__elem_at(item: &mut [T; N], index: u64) -> &mut T\n__elem_at(item: &mut [T], index: u64) -> &mut T\n```\n\n----------------------------------------\n\nTITLE: Custom Asset Transfer Example\nDESCRIPTION: Example of transferring custom assets identified by an asset ID when calling a contract function. This allows sending non-native tokens in a transaction.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n# Custom asset transfer\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> \\\n    --amount 100 \\\n    --asset-id 0x1234... \\\n    --live\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure After Build in Console\nDESCRIPTION: Shows the project structure after building, including the new 'out' directory with generated artifacts.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ tree\n├── Cargo.toml\n├── Forc.lock\n├── Forc.toml\n├── build.rs\n├── out\n│   └── debug\n│       ├── my-fuel-project-abi.json\n│       ├── my-fuel-project.bin\n│       └── my-fuel-project-storage_slots.json\n├── src\n│   └── main.sw\n└── tests\n    └── harness.rs\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy Contracts in Forc.toml\nDESCRIPTION: Configuration in Forc.toml to enable automatic proxy contract deployment based on SRC-14 standard.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_13\n\nLANGUAGE: TOML\nCODE:\n```\n[project]\nname = \"test_contract\"\nauthors = [\"Fuel Labs <contact@fuel.sh>\"]\nentry = \"main.sw\"\nlicense = \"Apache-2.0\"\nimplicit-std = false\n\n[proxy]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Sway Capitalization Conventions\nDESCRIPTION: Defines the standard capitalization formats for different code elements in Sway. Structs, traits, and enums use CapitalCase, modules, variables, and functions use snake_case, and constants use SCREAMING_SNAKE_CASE. The compiler enforces these conventions through warnings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/style_guide.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstructs, traits, enums: CapitalCase\nmodules, variables, functions: snake_case\nconstants: SCREAMING_SNAKE_CASE\n```\n\n----------------------------------------\n\nTITLE: Documenting Sway Code with Doc Attributes\nDESCRIPTION: Example showing how to add documentation attributes to Sway code using /// for item documentation and //! for module documentation\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n/// Defines my contract ABI...\nabi MyContractABI {}\n```\n\nLANGUAGE: sway\nCODE:\n```\n//! Library containing types used for...\nlibrary;\n```\n\n----------------------------------------\n\nTITLE: Deploying Using Local Wallet Integration\nDESCRIPTION: Example of deploying a contract using forc-client's integration with local forc-wallet, where the CLI asks for wallet password and account selection.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n> forc deploy\n\n    Building /Users/yourname/test-projects/test-contract\n    Finished release [optimized + fuel] target(s) in 11.39s\n  Confirming transactions [deploy impl-contract]\n             Network: https://testnet.fuel.network\n             Wallet: /Users/yourname/.fuel/wallets/.wallet\n✔ Wallet password · ********\n? Wallet account ›\n❯ [0] fuel12pls73y9hnqdqthvduy2x44x48zt8s50pkerf32kq26f2afeqdwq6rj9ar - 0.002197245 ETH\n  [1] fuel1vzrm6kw9s3tv85gl25lpptsxrdguyzfhq6c8rk07tr6ft5g45nwqqh0uty - 0.001963631 ETH\n? Do you agree to sign 1 transaction? (y/n) › yes\n     Finished deploying impl-contract https://app.fuel.network/contract/0x94b712901f04332682d14c998a5fc5a078ed15321438f46d58d0383200cde43d\n     Deployed in block https://app.fuel.network/block/5958351\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Accounts\nDESCRIPTION: Command to list all existing accounts in the forc-wallet.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nforc wallet accounts\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue for Sway Implementation Limitation\nDESCRIPTION: Links to a GitHub issue describing a limitation in Sway's implementation of `impl` blocks. Functions within `impl` blocks cannot call each other, and all `impl` blocks must be defined before their functions can be called.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/general.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Issue: #870](https://github.com/FuelLabs/sway/issues/870)\n  - All `impl` blocks need to be defined before any of the functions they define can be called. This includes sibling functions in the same `impl` declaration, i.e., functions in an `impl` can't call each other yet.\n```\n\n----------------------------------------\n\nTITLE: Importing Burn Function in Sway\nDESCRIPTION: Shows how to import the burn function from the standard library's asset module to enable asset burning functionality.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/burn.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nuse std::asset::burn;\n```\n\n----------------------------------------\n\nTITLE: Deploying with Target Alias\nDESCRIPTION: Command to deploy a contract using a target alias like 'testnet'.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --target testnet\n```\n\n----------------------------------------\n\nTITLE: Creating Project from Template Repository\nDESCRIPTION: Command to create a new project from a template repository. Fetches the HEAD of the template repo, searches for Forc.toml at the root, and creates a new project with the specified name.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_template.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforc template --url https://github.com/owner/template/ --project_name my_example_project\n```\n\n----------------------------------------\n\nTITLE: Forcing Function Inlining in Sway\nDESCRIPTION: Uses the #[inline(always)] attribute to suggest the compiler copy the function code rather than generating a call. This annotation provides a hint to the compiler but does not guarantee the function will be inlined.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/inline.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:always_inline}}\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Syntax Tree Structure in Rust\nDESCRIPTION: Struct definitions for the Abstract Syntax Tree, representing a more structured form of the parsed Sway program.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub struct ParseProgram {\n    pub kind: TreeType,\n    pub root: ParseModule,\n}\n\npub struct ParseModule {\n    pub tree: ParseTree,\n    pub submodules: Vec<(ModName, ParseSubmodule)>,\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using forc-wallet for Contract Calls\nDESCRIPTION: Command showing how to use forc-wallet for signing transactions when making contract calls. This integrates with the Fuel wallet system for authentication.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# utilising the forc-wallet\nforc call <CONTRACT_ID> --abi <PATH> <FUNCTION> --wallet\n```\n\n----------------------------------------\n\nTITLE: Boolean Negation in Sway\nDESCRIPTION: This example shows how to use boolean negation in Sway. The function returns the negation of a boolean value using the unary negation operator '!'.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_3\n\nLANGUAGE: Sway\nCODE:\n```\nfn returns_false() -> bool {\n    let boolean_value: bool = true;\n    !boolean_value\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the u64 Variant\nDESCRIPTION: Example showing that instantiating the u64 variant of enum T takes up 16 bytes of memory space, consisting of the tag and the actual u64 value.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nlet u64_type = T::B(10);\n```\n\n----------------------------------------\n\nTITLE: Sway Equivalent Enum Variant Syntax\nDESCRIPTION: Shows the equivalent enum implementation in Sway, where each variant must specify exactly one type. Demonstrates how Sway achieves the same functionality with a different syntactic approach.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/rust_differences.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nenum Foo {\n    UnitVariant: (),\n    TupleVariant: (u32, u64, bool),\n    StructVariant: MyStruct,\n}\n\nstruct MyStruct {\n    field_one: bool,\n    field_two: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Library Declaration\nDESCRIPTION: Basic structure of a deeply nested sub-library showing the library declaration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_7\n\nLANGUAGE: sway\nCODE:\n```\nlibrary;\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Undefined Behavior in For Loop\nDESCRIPTION: Example showing undefined behavior when modifying a vector during iteration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/control_flow.md#2025-04-17_snippet_5\n\nLANGUAGE: sway\nCODE:\n```\nfor element in vector.iter() {\n    if element == 3 {\n        vector.push(6); // Modification of the vector!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace and Project Metadata Configuration\nDESCRIPTION: Examples showing how to configure metadata at both workspace and project levels in Forc.toml.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/manifest_reference.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[workspace.metadata]\nmy_tool = { shared_setting = \"value\" }\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project.metadata.any_name_here]\noption1 = \"value\"\noption2 = \"value\"\n\n[project.metadata.my_custom_config]\nsetting1 = \"value\"\nsetting2 = \"value\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[project.metadata.indexing]\nnamespace = \"counter-contract\"\nschema_path = \"out/release/counter-contract-abi.json\"\n```\n\n----------------------------------------\n\nTITLE: Linking PR to Issue with Reference Keyword\nDESCRIPTION: Markdown syntax to link a pull request to an issue without closing it when the PR is merged.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nref #456\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays in Sway\nDESCRIPTION: Demonstrates the syntax for defining arrays in Sway. Arrays hold elements of the same type, are declared using square brackets, and separate values with commas. Unlike tuples, arrays can be iterated over through indexing.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/arrays.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// Arrays with fixed length\nlet array_1: [u8; 3] = [1, 2, 3];\nlet array_2 = [4, 5, 6];\n\n// Arrays can be indexed\nlet first_value = array_1[0];\nlet second_value = array_2[1];\n```\n\n----------------------------------------\n\nTITLE: Deploying with Default Signer to Local Node\nDESCRIPTION: Command to deploy a contract with the default signer to a local node, which uses a pre-funded private key.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --default-signer\n```\n\n----------------------------------------\n\nTITLE: Showing Breaking Changes with forc-migrate\nDESCRIPTION: Command to display upcoming breaking changes and migration steps using forc-migrate.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nforc migrate show\n```\n\n----------------------------------------\n\nTITLE: Preventing Function Inlining in Sway\nDESCRIPTION: Uses the #[inline(never)] attribute to suggest the compiler generate code for function calls rather than inlining them. This annotation provides a hint to the compiler but does not guarantee the function won't be inlined.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/inline.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:never_inline}}\n```\n\n----------------------------------------\n\nTITLE: IR Generation from Typed AST in Rust\nDESCRIPTION: Compiles the typed AST into an intermediate representation (IR), serving as a bridge between high-level code and target code generation. The IR can be output for inspection using the --ir option with forc build.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\npub fn compile_program<'eng>(\n    program: &ty::TyProgram,\n    include_tests: bool,\n    engines: &'eng Engines,\n    experimental: ExperimentalFlags,\n) -> Result<Context<'eng>, Vec<CompileError>>\n```\n\nLANGUAGE: rust\nCODE:\n```\nscript {\n    fn main() -> bool {\n        entry():\n        v0 = const u64 11\n        v1 = const u64 0\n        v2 = cmp eq v0 v1\n        br block0()\n\n        block0():\n        v9 = const bool false\n        ret bool v9\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local ABI File\nDESCRIPTION: Example of using forc call with a local ABI file to interact with a contract. The ABI file provides the necessary information about the contract's interface.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nforc call <CONTRACT_ID> --abi ./path/to/abi.json <FUNCTION> [ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Defining Structs, Traits, and Enums in CapitalCase in Sway\nDESCRIPTION: Demonstrates the use of CapitalCase for structs, traits, and enums in Sway. Struct fields use snake_case, while enum variants use CapitalCase.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/name-convention.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nstruct Point {\n    x: u64,\n    y: u64,\n}\n\ntrait Shape {\n    fn area(self) -> u64;\n}\n\nenum Direction {\n    North,\n    South,\n    East,\n    West,\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Unit Variant with u64 Enum\nDESCRIPTION: Example showing that even when instantiating the unit variant of enum T, it still takes up 16 bytes of memory space due to the largest variant (u64) determining the overall size.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet unit_type = T::A;\n```\n\n----------------------------------------\n\nTITLE: Listing Callable Functions of a Contract with forc call\nDESCRIPTION: Command to list all callable functions of a contract given its ABI file. This helps developers understand what functions are available to call on a deployed contract.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforc call 0xe18de7c7c8c61a1c706dccb3533caa00ba5c11b5230da4428582abf1b6831b4d \\\n  --abi ./out/debug/counter-contract-abi.json \\\n  --list-functions\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum with u64 Variant in Sway\nDESCRIPTION: Example of defining an enum with two variants where the largest is a u64 type. The enum takes up 16 bytes of memory (8 bytes for the tag and 8 bytes for the u64).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/enums.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nenum T {\n    A: (),\n    B: u64,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Comments in Sway\nDESCRIPTION: Shows how to create multi-line block comments using /* */ syntax to document code more extensively.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_3\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    /*\n    You can write on multiple lines\n    like this if you want\n    */\n    let baz = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Forc Command Entry in Markdown\nDESCRIPTION: Example markdown entry format for adding a new forc command in SUMMARY.md\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/README.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [forc explore](./forc_explore.md)\n```\n\n----------------------------------------\n\nTITLE: Declaring Numbers with Alternative Syntax in Sway\nDESCRIPTION: Demonstrates different ways to declare numeric values in Sway using binary, hexadecimal, and base-10 notation with underscores for readability.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/built-ins/numeric.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nlet a = 0b101010; // binary\nlet b = 0xff00ff; // hex\nlet c = 42; // decimal\nlet d = 1_000_000; // decimal with underscores\n```\n\n----------------------------------------\n\nTITLE: Reloading Zsh for New Completions\nDESCRIPTION: This command reloads the Zsh shell to apply newly installed completions without logging out and back in.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexec zsh\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Connection\nDESCRIPTION: Examples of specifying the node URL or target network for forc call. This allows connecting to specific networks like local development environments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nforc call --node-url http://127.0.0.1:4000 ...\n# or\nforc call --target local ...\n```\n\n----------------------------------------\n\nTITLE: Checking Project Build\nDESCRIPTION: Command to ensure the project builds without errors before migration.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nforc build\n```\n\n----------------------------------------\n\nTITLE: Updating Sway Toolchain and LSP Version\nDESCRIPTION: Commands to install the latest Sway toolchain and verify the LSP version using fuelup package manager.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/lsp/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfuelup toolchain install latest\nfuelup update\nforc-lsp --version\n```\n\n----------------------------------------\n\nTITLE: Bytecode Analysis Output\nDESCRIPTION: Sample output showing key bytecode instructions for the factorial calculation\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n  half-word   byte    op                                                 raw\n          58   232    MOVI { dst: 0x11, val: 5 }                         72 44 00 05                                 \n          59   236    LT { dst: 0x10, lhs: 0x10, rhs: 0x11 }             16 41 04 40                                 \n          60   240    JNZF { cond_nz: 0x10, dynamic: 0x0, fixed: 81 }    76 40 00 51\n```\n\n----------------------------------------\n\nTITLE: Sending Funds Directly to an Address\nDESCRIPTION: Command to directly send funds to a specific address using forc call in live mode. This allows transferring assets without calling a specific contract function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nforc call 0x2c7Fd852EF2BaE281e90ccaDf18510701989469f7fc4b042F779b58a39919Eec --amount 2 --mode=live\n```\n\n----------------------------------------\n\nTITLE: Using Block Comments in Sway\nDESCRIPTION: Shows how to use block comments in Sway with the /* */ syntax. Block comments can span multiple lines and can also be placed at the end of code statements.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/comments/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n/* This is a comment. */\n/* This is\na multi-line\ncomment */\nlet x = 5; /* This is a comment at the end of a line of code. */\n```\n\n----------------------------------------\n\nTITLE: Inspecting Register Values in Sway Debugger\nDESCRIPTION: This snippet demonstrates how to inspect register values at a breakpoint during the factorial calculation loop.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n>> r 0x10 0x11\nreg[0x10] = 1        # reg16\nreg[0x11] = 1        # reg17\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Sway Wallet Contract\nDESCRIPTION: Shows the recommended directory structure for organizing a wallet smart contract project with separate ABI declaration and implementation components.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/examples/wallet_smart_contract.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── wallet_abi\n│   ├── Forc.toml\n│   └── src\n│       └── main.sw\n└── wallet_smart_contract\n    ├── Forc.toml\n    └── src\n        └── main.sw\n```\n\n----------------------------------------\n\nTITLE: Declaring Strings with Single Quotes in Sway\nDESCRIPTION: This snippet demonstrates that using single quotes for string declaration in Sway results in an error. Sway strings must be declared using double quotes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/strings.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let x = 'Hello, World!';\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Value Definition\nDESCRIPTION: Example of defining configurable values that are evaluated at compile time.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nconfigurable {\n    SOMETHING: u64 = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Compiler Intrinsics\nDESCRIPTION: Simple markdown header defining the document section for compiler intrinsics documentation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/advanced-concepts/compiler-intrinsics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Compiler Intrinsics\n```\n\n----------------------------------------\n\nTITLE: Defining Constants in Non-Trait Impl Blocks in Sway\nDESCRIPTION: This snippet illustrates how to declare constants inside non-trait impl blocks. It shows how to associate constants with specific structs or types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/constants.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nscript;\n\nstruct Point {\n    x: u64,\n    y: u64,\n}\n\nimpl Point {\n    const ZERO: Point = Point { x: 0, y: 0 };\n}\n\nfn main() -> u64  {\n    Point::ZERO.x\n}\n```\n\n----------------------------------------\n\nTITLE: Match Expression Constraints - Sway\nDESCRIPTION: Describes the rules and constraints for using match expressions, particularly noting that match expressions can only be used on the right side of => arrows within curly braces, and cannot be used as patterns on the left side.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/pattern-matching.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn [nested match expressions] we nest a `match` expression by embedding it inside the `{}` brackets on the right side of the arrow `=>`.\n\nMatch expressions cannot be used as a pattern, the left side of the arrow `=>`.\n```\n\n----------------------------------------\n\nTITLE: Running ABI Implementation Tests Example\nDESCRIPTION: Example command showing how to run tests filtered with the 'abi_impl' pattern. Demonstrates specific test filtering in action.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin=test -- abi_impl\n```\n\n----------------------------------------\n\nTITLE: Example Output of Rust Toolchain List Command\nDESCRIPTION: Example output showing the Rust stable channel is installed and set as default, which is required for Sway installation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/cargo.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstable-x86_64-unknown-linux-gnu (default)\n```\n\n----------------------------------------\n\nTITLE: Sway Standard Library Variants Structure\nDESCRIPTION: Hierarchical breakdown of the reduced Sway Standard Library variants, showing the incremental functionality additions in each version from assert to conversions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/reduced_std_libs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `assert` (in `sway-lib-std-assert`)\nContains:\n- asserting\n- logging\n- reverting\n \n### `option-result` (in `sway-lib-std-option-result`)\nContains:\n- everything available in `assert`\n- `Option`\n- `Result`\n \n### `vec` (in `sway-lib-std-vec`)\nContains:\n- everything available in `option-result`\n- `Vec`\n- `Iterator` trait\n- `From` and `Into` traits\n\n### `conversions` (in `sway-lib-std-conversions`)\nContains:\n- everything available in `vec`\n- intrinsics\n- `Bytes`\n- bytes conversions\n- array conversions\n- primitive conversions\n```\n\n----------------------------------------\n\nTITLE: Example Output of Listing Contract Functions\nDESCRIPTION: Sample output when listing callable functions of a contract. It shows the available functions along with their signatures and provides an example command to call the function.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nAvailable functions in contract: 0xe18de7c7c8c61a1c706dccb3533caa00ba5c11b5230da4428582abf1b6831b4d\n\nadd(a: u64, b: u64) -> u64\n  forc call \\\n    --abi ./out/debug/counter-contract-abi.json \\\n    0xe18de7c7c8c61a1c706dccb3533caa00ba5c11b5230da4428582abf1b6831b4d \\\n    add \"0\" \"0\"\n```\n\n----------------------------------------\n\nTITLE: Using Shortened Names for Intermediate Variables in Sway\nDESCRIPTION: This example shows how to use intermediate variables with shorter names to improve readability when dealing with multiple levels of indentation or verbose names.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/intermediate-variables.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nstruct VeryLongNameThatDescribesTheObject {\n    field: u64,\n}\n\nfn shortened_name(objects: Vec<VeryLongNameThatDescribesTheObject>) -> u64 {\n    let mut sum = 0;\n\n    // DO\n    for object in objects.iter() {\n        let o = object;\n        if o.field > 5 {\n            if o.field < 10 {\n                sum += o.field;\n            }\n        }\n    }\n\n    // DON'T\n    for object in objects.iter() {\n        if object.field > 5 {\n            if object.field < 10 {\n                sum += object.field;\n            }\n        }\n    }\n\n    sum\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing forc fmt Command for Sway Code Formatting\nDESCRIPTION: The 'forc fmt' command is used to format Sway code. It likely applies a set of predefined styling rules to ensure consistent code formatting across the project.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_fmt.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# forc fmt\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fuel Project with Forc\nDESCRIPTION: This snippet demonstrates the command-line steps to create a new Fuel project using Forc. It shows how to create a directory, navigate into it, and initialize the project structure.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_init.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir my-fuel-project\n$ cd my-fuel-project\n$ forc init\n$ tree\n.\n├── Forc.toml\n└── src\n    └── main.sw\n```\n\n----------------------------------------\n\nTITLE: Logging and Arithmetic Intrinsics in Sway\nDESCRIPTION: These intrinsics provide logging functionality and basic arithmetic operations. They include __log for logging and various arithmetic operations like __add, __sub, __mul, and __div.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_6\n\nLANGUAGE: sway\nCODE:\n```\n__log<T>(val: T)\n```\n\nLANGUAGE: sway\nCODE:\n```\n__add<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__sub<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__mul<T>(lhs: T, rhs: T) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__div<T>(lhs: T, rhs: T) -> T\n```\n\n----------------------------------------\n\nTITLE: Defining Functions and Variables in snake_case in Sway\nDESCRIPTION: Illustrates the use of snake_case for defining functions and variables in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/name-convention.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn calculate_area(width: u64, height: u64) -> u64 {\n    let area = width * height;\n    area\n}\n```\n\n----------------------------------------\n\nTITLE: Size Calculation Intrinsics in Sway\nDESCRIPTION: These intrinsics are used to determine the size of types and values in bytes. They include __size_of_val, __size_of, and __size_of_str_array.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n__size_of_val<T>(val: T) -> u64\n```\n\nLANGUAGE: sway\nCODE:\n```\n__size_of<T>() -> u64\n```\n\nLANGUAGE: sway\nCODE:\n```\n__size_of_str_array<T>() -> u64\n```\n\n----------------------------------------\n\nTITLE: Attempting String Indexing in Sway\nDESCRIPTION: This snippet shows that string indexing is not supported in Sway due to UTF-8 encoding. Attempting to index a string will result in an error.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/misc/workarounds/strings.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let x = \"Hello, World!\";\n    let first_char = x[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrent Slab Implementation in Rust\nDESCRIPTION: Implementation of a concurrent memory slab using RwLock for thread-safe access, storing items in a vector with a free list for memory management.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) struct ConcurrentSlab<T> {\n    pub inner: RwLock<Inner<T>>,\n}\n\npub struct Inner<T> {\n    pub items: Vec<Option<Arc<T>>>,\n    pub free_list: Vec<usize>,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Steps\nDESCRIPTION: Command to execute migration steps on the project with experimental features enabled.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nforc migrate run --experimental storage_domains,references\n```\n\n----------------------------------------\n\nTITLE: Running Filtered VM Tests\nDESCRIPTION: Command pattern for running specific tests using regex pattern matching. Allows targeting particular test cases or groups.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin=test -- specific_tests_pattern\n```\n\n----------------------------------------\n\nTITLE: Using forc submit to deploy compiled Sway contracts to the Fuel network\nDESCRIPTION: This command submits a built Sway project to a specified Fuel network node. It requires project compilation prior to submission and accepts various options including the node endpoint, a private key for signing transactions, and gas parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_submit.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# forc submit\n```\n\n----------------------------------------\n\nTITLE: Single Line Comments in Sway\nDESCRIPTION: Single line comments start with double forward slashes and continue until the end of the line. This is the generally preferred comment style in Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/comments.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// comment\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Default Formatter for Sway\nDESCRIPTION: JSON configuration to set the Sway VS Code plugin as the default formatter for Sway files. This enables automatic formatting of Sway files on save in Visual Studio Code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/fuel_toolchain.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"[sway]\": {\n  \"editor.defaultFormatter\": \"FuelLabs.sway-vscode-plugin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forc CLI\nDESCRIPTION: Command to build and execute all tests within a Sway package using the Forc CLI test command.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nforc test\n```\n\n----------------------------------------\n\nTITLE: Transaction and Memory Intrinsics in Sway\nDESCRIPTION: These intrinsics deal with transaction fields and memory operations. They include __gtf for getting transaction fields and __addr_of for obtaining memory addresses.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\n__gtf<T>(index: u64, tx_field_id: u64) -> T\n```\n\nLANGUAGE: sway\nCODE:\n```\n__addr_of<T>(val: T) -> raw_ptr\n```\n\n----------------------------------------\n\nTITLE: Verbose Struct Initialization in Sway (Not Recommended)\nDESCRIPTION: Example of initializing a struct without using shorthand notation, which is more verbose and less preferred when variable names match field names.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/structs.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nfn make_payment(amount: u64) -> Payment {\n    // This works but is more verbose.\n    Payment { amount: amount }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluation Order with Mutable Variables in Sway\nDESCRIPTION: Illustrates the evaluation order when working with mutable variables in Sway. The right-hand side of an assignment is evaluated before the left-hand side, which affects how operations with mutable variables behave.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/let.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet mut array = [0, 0, 0];\nlet mut i = 0;\narray[i + 1] = { i += 1; i };\n```\n\n----------------------------------------\n\nTITLE: Importing Bytes Type in Sway\nDESCRIPTION: Shows the required import statement for using the Bytes type from the standard library in Sway. This is a prerequisite for working with Bytes conversions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_11\n\nLANGUAGE: sway\nCODE:\n```\nuse std::bytes::Bytes;\n```\n\n----------------------------------------\n\nTITLE: Building Module Dependency Graph in Rust\nDESCRIPTION: Analyzes a parsed module to produce a dependency graph, which is used to determine the correct module evaluation order for subsequent passes on the AST.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nimpl ty::TyModule {\n    /// Analyzes the given parsed module to produce a dependency graph.\n    pub fn build_dep_graph(\n        handler: &Handler,\n        parsed: &ParseModule,\n    ) -> Result<ModuleDepGraph, ErrorEmitted>\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Bytecode Command\nDESCRIPTION: Command to parse and display the compiled bytecode from the binary output file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforc parse-bytecode out/debug/dbg_example.bin\n```\n\n----------------------------------------\n\nTITLE: Running Basic VM Tests in Sway\nDESCRIPTION: Basic command to run all VM tests using cargo in debug mode. Executes the test binary without any filtering.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin=test\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Members in Forc.toml\nDESCRIPTION: This snippet demonstrates how to specify workspace members in the Forc.toml manifest file. The members field accepts entries provided as relative paths to the workspace root, allowing organization of multiple packages within a workspace.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/workspaces.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[workspace]\nmembers = [\"member1\", \"path/to/member2\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Project from Sway Examples\nDESCRIPTION: Command to create a new project from an existing example in the Sway repository. Specifically fetches the 'counter' example from sway/examples and creates a new project with the specified name.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_template.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nforc template --url https://github.com/FuelLabs/sway --template_name counter --project_name my_example_project\n```\n\n----------------------------------------\n\nTITLE: Using forc clean command in Sway projects\nDESCRIPTION: The 'forc clean' command is used to clean up build artifacts in Sway projects. This command is typically executed in the terminal and doesn't require any additional parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/commands/forc_clean.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nforc clean\n```\n\n----------------------------------------\n\nTITLE: Executing Script with ABI in Sway Debugger\nDESCRIPTION: This snippet shows how to start a transaction with an ABI file to decode log values. It executes a factorial calculation and displays the result.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n>> start_tx tx.json out/debug/dbg_example-abi.json\n\nReceipt: LogData { id: 0000000000000000000000000000000000000000000000000000000000000000, ra: 0, rb: 1515152261580153489, ptr: 67107840, len: 8, digest: d2b80ebb9ce633ad49a9ccfcc58ac7ad33a9ab4741529ae4247a3b07e8fa1c74, pc: 10924, is: 10368, data: Some(0000000000000078) }\nDecoded log value: 120, from contract: 0000000000000000000000000000000000000000000000000000000000000000\nReceipt: ReturnData { id: 0000000000000000000000000000000000000000000000000000000000000000, ptr: 67106816, len: 0, digest: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, pc: 10564, is: 10368, data: Some() }\nReceipt: ScriptResult { result: Success, gas_used: 1273 }\nTerminated\n```\n\n----------------------------------------\n\nTITLE: Building Sway Project\nDESCRIPTION: Command to build the Sway project and generate bytecode\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforc build\n```\n\n----------------------------------------\n\nTITLE: Deploying with Custom Node URL\nDESCRIPTION: Command to deploy a contract to a specific node URL.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --node-url https://mainnet.fuel.network\n```\n\n----------------------------------------\n\nTITLE: Creating New Sway Project with Forc CLI\nDESCRIPTION: Example usage of the 'forc new' command to create a new Sway project named 'my_project'. The command initializes a project with a default structure including a Forc.toml file and a src directory with a main.sw file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/commands/forc_new.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ forc new my_project\n$ cd my_project\n$ tree .\n.\n├── Forc.toml\n└── src\n    └── main.sw\n\n1 directory, 2 files\n```\n\n----------------------------------------\n\nTITLE: Type Checking Intrinsics in Sway\nDESCRIPTION: These intrinsics are used to check properties of types, such as whether they are reference types or string arrays. They include __is_reference_type and __is_str_array.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/compiler_intrinsics.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n__is_reference_type<T>() -> bool\n```\n\nLANGUAGE: sway\nCODE:\n```\n__is_str_array<T>() -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Directory for Zsh Completions\nDESCRIPTION: This snippet creates a hidden directory in the user's home folder for storing Zsh completion scripts. It's a preparatory step for installing Forc completions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir ~/.zfunc\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated and Allow Deprecated Annotations in Sway\nDESCRIPTION: This example demonstrates how to mark a function as deprecated with a custom message using #[deprecated], and how to suppress the warning when using a deprecated item with #[allow(deprecated)].\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/deprecated.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:allow_deprecated_annotation}}\n```\n\n----------------------------------------\n\nTITLE: Installing or Updating Fuel Core using Cargo\nDESCRIPTION: This command installs or updates Fuel Core, the full node implementation for the Fuel blockchain, using Cargo, the Rust package manager. Additional system dependencies may be required for successful installation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/fuel-core.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install fuel-core\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint at Specific Address in Sway Debugger\nDESCRIPTION: This snippet shows how to set a breakpoint at a specific address (halfword-offset 147) and start the transaction to stop at that breakpoint.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n>>> breakpoint 147\n\n>> start_tx tx.json out/debug/dbg_example-abi.json\n\nReceipt: ScriptResult { result: Success, gas_used: 82 }\nStopped on breakpoint at address 588 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Converting to u8 in Sway\nDESCRIPTION: Demonstrates how to convert larger numeric types to u8 in Sway using the as operator. Note that this may truncate the value if it exceeds the range of u8.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/converting_types.md#2025-04-17_snippet_10\n\nLANGUAGE: sway\nCODE:\n```\n// Convert from other types to u8\n// These will truncate if the value is too large\nlet a = 5u64 as u8;\nlet b = 5u32 as u8;\nlet c = 5u16 as u8;\n```\n\n----------------------------------------\n\nTITLE: Serving Sway Reference Documentation with Hot-Reloading\nDESCRIPTION: This command serves a hot-reloading instance of the Sway reference book in the browser, allowing for real-time updates as changes are made.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmdbook serve --open\n```\n\n----------------------------------------\n\nTITLE: Continuing Execution and Resetting VM in Sway Debugger\nDESCRIPTION: This snippet demonstrates how to continue execution until the end and reset the VM to remove breakpoints.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n>> continue\n\nReceipt: LogData { id: 0000000000000000000000000000000000000000000000000000000000000000, ra: 0, rb: 1515152261580153489, ptr: 67107840, len: 8, digest: d2b80ebb9ce633ad49a9ccfcc58ac7ad33a9ab4741529ae4247a3b07e8fa1c74, pc: 10924, is: 10368, data: Some(0000000000000078) }\nDecoded log value: 120, from contract: 0000000000000000000000000000000000000000000000000000000000000000\nReceipt: ReturnData { id: 0000000000000000000000000000000000000000000000000000000000000000, ptr: 67106816, len: 0, digest: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855, pc: 10564, is: 10368, data: Some() }\nTerminated\n\n>> reset\n```\n\n----------------------------------------\n\nTITLE: LogData Receipt Console Output for Reference Types\nDESCRIPTION: Shows the console output format of a LogData receipt generated when logging reference types or large non-reference types.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"LogData\": {\n  \"data\": \"1111111111111111111111111111111111111111111111111111111111111111\",\n  \"digest\": \"02d449a31fbb267c8f352e9968a79e3e5fc95c1bbeaa502fd6454ebde5a4bedc\",\n  \"id\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  \"is\": 10352,\n  \"len\": 32,\n  \"pc\": 10444,\n  \"ptr\": 10468,\n  \"ra\": 0,\n  \"rb\": 1018194\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Address by Index\nDESCRIPTION: Command to get the address of a specific account by its index in the forc-wallet.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nforc wallet account <account_index>\n```\n\n----------------------------------------\n\nTITLE: Initiating Semantic Analysis in Rust\nDESCRIPTION: The main function for semantic analysis, which takes a parsed program and returns a fully-typed Abstract Syntax Tree.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npub fn parsed_to_ast(\n    handler: &Handler,\n    engines: &Engines,\n    parse_program: &mut parsed::ParseProgram,\n    initial_namespace: namespace::Root,\n    build_config: Option<&BuildConfig>,\n    package_name: &str,\n    retrigger_compilation: Option<Arc<AtomicBool>>,\n) -> Result<ty::TyProgram, ErrorEmitted>\n```\n\n----------------------------------------\n\nTITLE: Using forc check command in Sway ecosystem\nDESCRIPTION: The 'forc check' command checks a Sway project's code for errors without compiling it to bytecode. This is useful for quickly validating syntax and semantic correctness during development.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/commands/forc_check.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# forc check\n```\n\n----------------------------------------\n\nTITLE: Initiating Parsing Process in Rust\nDESCRIPTION: The main parsing function that takes tokenized input and returns both the Concrete Syntax Tree (CST) and Abstract Syntax Tree (AST).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn parse(\n    input: Arc<str>,\n    handler: &Handler,\n    engines: &Engines,\n    config: Option<&BuildConfig>,\n) -> Result<(lexed::LexedProgram, parsed::ParseProgram), ErrorEmitted>\n```\n\n----------------------------------------\n\nTITLE: Installing Forc-Explore Plugin with Cargo\nDESCRIPTION: Command to install the forc-explore plugin using Cargo, which adds network explorer functionality to the forc tool.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install forc-explore\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completions for Forc (macOS/Homebrew)\nDESCRIPTION: This snippet demonstrates how to install Bash completions for Forc on macOS using Homebrew. It assumes the bash-completion formula is installed and uses the Homebrew prefix to determine the installation directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p $(brew --prefix)/etc/bash_completion.d\nforc completions --shell=bash > $(brew --prefix)/etc/bash_completion.d/forc.bash-completion\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Structure in Console\nDESCRIPTION: Console output showing the directory structure of a newly created Forc project, which includes a Forc.toml manifest file and a src directory with main.sw.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/forc_project.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd my-fuel-project\n$ tree .\n├── Forc.toml\n└── src\n    └── main.sw\n```\n\n----------------------------------------\n\nTITLE: Building Forc from Source using Cargo\nDESCRIPTION: Command to build the forc tool from source code in the Sway repository. This creates an executable binary in the target/debug directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/source.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Launch Settings for Sway Debugging\nDESCRIPTION: This JSON configuration sets up VSCode to debug Sway programs. It specifies the debug type as 'sway', sets the request type to 'launch', and uses the currently open file as the program to debug.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_ide.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n        \"type\": \"sway\",\n        \"request\": \"launch\",\n        \"name\": \"Debug Sway\",\n        \"program\": \"${file}\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bash Completions for Forc (Unix/Linux)\nDESCRIPTION: This snippet shows how to create a user-specific directory for Bash completions and install the Forc completion script. It requires the forc command to be available.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/.local/share/bash-completion/completions\nforc completions --shell=bash >> ~/.local/share/bash-completion/completions/forc\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sway Repository\nDESCRIPTION: Commands to clone the Sway repository and navigate to the project directory after forking the project.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/FuelLabs/sway\ncd sway\n```\n\n----------------------------------------\n\nTITLE: Configuring a Contract Test on Fuel Core Node in TOML\nDESCRIPTION: This configuration sets up a test to be run on a Fuel Core node. It specifies the expected result and lists the contracts that need to be deployed before running the test.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/test_programs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\ncategory = \"run_on_node\"\nexpected_result = { action = \"result\", value = 11 }\ncontracts = [\"should_pass/test_contracts/test_contract_a\", \"should_pass/test_contracts/test_contract_b\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Fail Test with FileCheck in TOML\nDESCRIPTION: This snippet demonstrates how to configure a test expected to fail, using FileCheck for pattern matching. It includes multiple check directives to verify specific error messages.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/test_programs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ncategory = \"fail\"\n\n# check: // this asm block should return unit, i.e. nothing\n# nextln: asm(r1: 5) {\n# check: $()Mismatched types.\n# nextln: $()expected: ()\n# nextln: $()found:    u64.\n# nextln: $()help: Implicit return must match up with block's type.\n```\n\n----------------------------------------\n\nTITLE: Optimization Pass Configuration in Rust\nDESCRIPTION: Configures optimization passes in the PassManager with different optimization levels including constant demotion, argument demotion, memory copy optimization, dead code elimination and control flow simplification.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n        pass_group.append_pass(CONST_DEMOTION_NAME);\n        pass_group.append_pass(ARG_DEMOTION_NAME);\n        pass_group.append_pass(RET_DEMOTION_NAME);\n        pass_group.append_pass(MISC_DEMOTION_NAME);\n\n        // Convert loads and stores to mem_copies where possible.\n        pass_group.append_pass(MEMCPYOPT_NAME);\n\n        // Run a DCE and simplify-cfg to clean up any obsolete instructions.\n        pass_group.append_pass(DCE_NAME);\n        pass_group.append_pass(SIMPLIFY_CFG_NAME);\n\n        match build_config.optimization_level {\n            OptLevel::Opt1 => {\n                pass_group.append_pass(SROA_NAME);\n                pass_group.append_pass(MEM2REG_NAME);\n                pass_group.append_pass(DCE_NAME);\n            }\n            OptLevel::Opt0 => {}\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Nameless Variable with Underscore\nDESCRIPTION: Shows how to completely discard unused values by assigning them to a single underscore. This approach is used when the variable context is not important for code understanding.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/unused-variables.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/unused_variables/src/lib.sw:nameless_variable}}\n```\n\n----------------------------------------\n\nTITLE: Defining Concrete Syntax Tree Structure in Rust\nDESCRIPTION: Struct definitions for the Concrete Syntax Tree, representing the hierarchical structure of the parsed Sway program.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct LexedProgram {\n    pub kind: TreeType,\n    pub root: LexedModule,\n}\n\npub struct LexedModule {\n    pub tree: Module,\n    pub submodules: Vec<(ModName, LexedSubmodule)>,\n}\n\npub struct LexedSubmodule {\n    pub module: LexedModule,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdbook using Cargo for Sway Reference Documentation\nDESCRIPTION: This command installs mdbook, a tool for creating books with Markdown, using Cargo, the Rust package manager.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Building Sway Syntax Highlighting with Development Mode\nDESCRIPTION: Build command that preserves the highlight.js directory for active development and testing purposes\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/highlightjs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./build.sh keep\n```\n\n----------------------------------------\n\nTITLE: Collecting Symbols from AST in Rust\nDESCRIPTION: Collects symbols present in the AST, resulting in a tree of namespaces containing information needed to resolve string-based identifiers into links to corresponding declarations.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nimpl ty::TyAstNode {\n    pub(crate) fn collect(\n        handler: &Handler,\n        engines: &Engines,\n        ctx: &mut SymbolCollectionContext,\n        node: &AstNode,\n    ) -> Result<(), ErrorEmitted>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing or Updating Sway Toolchain with Cargo\nDESCRIPTION: Command to install or update the Sway toolchain using Cargo, which will install the forc command-line tool.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/cargo.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install forc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Owner State in Sway\nDESCRIPTION: Demonstrates how to get the current state of contract ownership.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/blockchain-development/access_control.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nfn get_owner() -> Option<Identity> {\n    storage.owner.read()\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Delayed Transactions\nDESCRIPTION: Command to submit a transaction without waiting for its finalization, useful for multisig transactions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nforc-deploy --submit-only\n```\n\n----------------------------------------\n\nTITLE: Defining CLI Structure for forc-doc in Rust\nDESCRIPTION: This snippet defines the command-line interface structure for the forc-doc tool using the clap crate. It specifies various options for documentation generation, including output format, destination, and visibility settings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_doc.md#2025-04-17_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug, Parser)]\n#[clap(author, version, about)]\npub struct Command {\n    /// Set the output format.\n    #[clap(short = 'f', long = \"format\", default_value = \"html\")]\n    pub format: String,\n\n    /// Set the destination for the documentation.\n    #[clap(short, long, default_value = \"docs\")]\n    pub destination: String,\n\n    /// Include non-public items in the documentation.\n    #[clap(long)]\n    pub document_private_items: bool,\n\n    /// Build (if needed) the current project before generating documentation.\n    #[clap(long)]\n    pub build: bool,\n\n    /// Show non-public modules and functions in the documentation.\n    #[clap(long)]\n    pub show_all: bool,\n\n    /// Do not include docs for dependant packages.\n    #[clap(long)]\n    pub no_deps: bool,\n\n    /// Print files instead of rendering docs.\n    #[clap(long)]\n    pub json: bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output in Console\nDESCRIPTION: Example output from running forc test showing test execution results, including test names, status, execution time, and summary statistics.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/unit-testing.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n  Compiled library \"std\".\n  Compiled library \"lib_single_test\".\n  Bytecode size is 92 bytes.\n   Running 1 tests\n      test test_meaning_of_life ... ok (170.652µs)\n   Result: OK. 1 passed. 0 failed. Finished in 1.564996ms.\n```\n\n----------------------------------------\n\nTITLE: ABI Example with Vector Type\nDESCRIPTION: Demonstrates potential ABI instability issues with complex types like Vec.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nabi MyContract {\n    fn some_method(arg: Vec<u64>);\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable ABI JSON Structure\nDESCRIPTION: JSON structure showing how configurable values are represented in the ABI with their binary offsets.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"SOMETHING\",\n    \"configurableType\": { ... },\n    \"offset\": 7104\n}\n```\n\n----------------------------------------\n\nTITLE: Named Unused Variable with Underscore Prefix\nDESCRIPTION: Demonstrates the practice of preserving variable names by prepending an underscore when the variable is unused. This maintains code readability while avoiding compiler warnings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/unused-variables.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../code/language/style-guide/unused_variables/src/lib.sw:named_unused_variable}}\n```\n\n----------------------------------------\n\nTITLE: Enumerating AST Node Types in Rust\nDESCRIPTION: Enum defining different types of nodes in the Sway Abstract Syntax Tree, such as use statements, declarations, and expressions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\npub enum AstNodeContent {\n    UseStatement(UseStatement),\n    Declaration(Declaration),\n    Expression(Expression),\n    IncludeStatement(IncludeStatement),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Forc Version\nDESCRIPTION: Command to verify the successful installation of forc by checking its version. This helps confirm that the build process completed correctly.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/source.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/sway/target/debug/forc --version\n```\n\n----------------------------------------\n\nTITLE: Installing mdbook-forc-documenter Preprocessor (Shell)\nDESCRIPTION: Command to install the mdbook-forc-documenter preprocessor from the project's scripts directory. This tool is necessary for building the Sway documentation book.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --path ./scripts/mdbook-forc-documenter\n```\n\n----------------------------------------\n\nTITLE: Pass Manager Execution in Rust\nDESCRIPTION: Executes the optimization passes on the intermediate representation (IR) code using the configured PassManager.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n    // Run the passes.\n    let res = if let Err(ir_error) = pass_mgr.run(&mut ir, &pass_group) {\n```\n\n----------------------------------------\n\nTITLE: Creating New Sway Project with Forc\nDESCRIPTION: Command to create a new Sway project named dbg_example using the Forc CLI tool.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforc new --script dbg_example && cd dbg_example\n```\n\n----------------------------------------\n\nTITLE: Never Type Coercion with Return Statement in Sway\nDESCRIPTION: This snippet demonstrates how an expression with Never type coerces into any other type. The return statement inside the block causes the entire block to be of type Never, which then coerces to u32.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/never_type.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\nlet x: u32 = {\n    return 123\n};\n```\n\n----------------------------------------\n\nTITLE: Using Remote ABI URL\nDESCRIPTION: Command demonstrating how to use forc call with a remote ABI file accessed via URL. This is useful when the ABI is hosted in a repository or other online location.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/forc_call.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nforc call <CONTRACT_ID> --abi https://example.com/abi.json <FUNCTION> [ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Namespace and Lexical Scope Structures in Rust\nDESCRIPTION: Defines structures for namespaces, modules, and lexical scopes used in the semantic analysis phase to represent the hierarchical structure of the code and its symbols.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\npub struct Namespace {\n    /// An immutable namespace that consists of the names that should always be present.\n    init: Module,\n    /// The `root` of the project namespace.\n    pub(crate) root: Root,\n    ...\n}\n\npub struct Root {\n    pub(crate) module: Module,\n}\n\npub struct Module {\n    /// Submodules of the current module represented as an ordered map.\n    pub(crate) submodules: im::OrdMap<ModuleName, Module>,\n    /// Keeps all lexical scopes associated with this module.\n    pub lexical_scopes: Vec<LexicalScope>,\n    ...\n}\n\n/// A `LexicalScope` contains a set of all items that exist within the lexical scope via declaration or\n/// importing, along with all its associated hierarchical scopes.\npub struct LexicalScope {\n    /// The set of symbols, implementations, synonyms and aliases present within this scope.\n    pub items: Items,\n    /// The set of available scopes defined inside this scope's hierarchy.\n    pub children: Vec<LexicalScopeId>,\n    /// The parent scope associated with this scope. Will be None for a root scope.\n    pub parent: Option<LexicalScopeId>,\n}\n\n/// The set of items that exist within some lexical scope via declaration or importing.\npub struct Items {\n    /// A map from `Ident`s to their associated parsed declarations.\n    pub(crate) parsed_symbols: ParsedSymbolMap,\n    /// A map from `Ident`s to their associated typed declarations.\n    pub(crate) symbols: SymbolMap,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Steps\nDESCRIPTION: Command to dry-run migration steps and get detailed information about required changes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nforc migrate check\n```\n\n----------------------------------------\n\nTITLE: Checking Fuelup Version in Bash\nDESCRIPTION: Command to verify the installed version of Fuelup toolchain manager. Returns the current version number of the installed Fuelup instance.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/fuelup.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfuelup --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nfuelup 0.13.0\n```\n\n----------------------------------------\n\nTITLE: Running Rust Integration Tests in Console\nDESCRIPTION: Command to run the Rust integration tests using cargo test, showing the output of a successful test run.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cargo test\n    Updating crates.io index\n   Compiling version_check v0.9.4\n   Compiling proc-macro2 v1.0.46\n   Compiling quote v1.0.21\n   ...\n   Compiling fuels v0.24.0\n   Compiling my-fuel-project v0.1.0 (/home/user/path/to/my-fuel-project)\n    Finished test [unoptimized + debuginfo] target(s) in 1m 03s\n     Running tests/harness.rs (target/debug/deps/integration_tests-373971ac377845f7)\n\nrunning 1 test\ntest can_get_contract_id ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.36s\n```\n\n----------------------------------------\n\nTITLE: Basic Contract Call in Sway\nDESCRIPTION: Shows how a basic contract method call is made from the caller's perspective, which gets desugared into a lower-level contract call.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet contract = abi(TestContract, CONTRACT_ID);\ncontract.some_method(0);\n```\n\nLANGUAGE: rust\nCODE:\n```\nstd::codec::contract_call(\n    CONTRACT_ID,\n    \"some_method\",\n    (0,),\n)\n```\n\n----------------------------------------\n\nTITLE: Building Sway Documentation Book (Shell)\nDESCRIPTION: Command to build the Sway documentation book using mdbook. This should be run from the project root directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmdbook build docs/book\n```\n\n----------------------------------------\n\nTITLE: Setting Block Constraint for Inlining in FuelLabs/sway Project\nDESCRIPTION: This example shows how to configure the inliner to only inline functions with at most 2 blocks. It uses a comment at the start of the IR file to set the constraint.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/sway-ir/tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// blocks 2\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Forc Plugins\nDESCRIPTION: Command and output showing how to check which plugins are installed for forc, displaying forc-explore in the list of installed plugins.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/index.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ forc plugins\nInstalled Plugins:\nforc-explore\n```\n\n----------------------------------------\n\nTITLE: Declaring Associated Types in Sway\nDESCRIPTION: Shows the basic syntax for declaring an associated type within a trait definition.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/advanced/associated_types.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\ntrait MyTrait {\n    type AssociatedType;\n}\n```\n\n----------------------------------------\n\nTITLE: Reassigning Variables in Sway\nDESCRIPTION: Demonstrates how to redefine the type and value of a variable by instantiating a new version after the first declaration. This example shows a variable initially defined as an integer being reassigned as a string.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/variables/variable-shadowing.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn main() {\n    let foo = 5;\n    let foo = \"Hello\";\n\n    // Prints \"Hello\"\n    log(foo);\n}\n```\n\n----------------------------------------\n\nTITLE: Engines Structure Definition in Rust\nDESCRIPTION: Definition of the Engines struct that contains various engine components for types, declarations, queries and source code management.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\npub struct Engines {\n    type_engine: TypeEngine,\n    decl_engine: DeclEngine,\n    parsed_decl_engine: ParsedDeclEngine,\n    query_engine: QueryEngine,\n    source_engine: SourceEngine,\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Console\nDESCRIPTION: Shows the initial structure of an empty Sway project using the tree command in the console.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd my-fuel-project\n$ tree .\n├── Forc.toml\n└── src\n    └── main.sw\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Forc.toml\nDESCRIPTION: Example of updating project dependencies to versions compatible with the next Sway breaking change version.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_migrate.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\n# Changed v0.66.1 -> v0.67.0\nstd = { git = \"https://github.com/FuelLabs/sway\", tag = \"v0.67.0\" }\n# Changed v1.0.0  -> v2.0.0\nthird_party_lib = { git = \"https://github.com/ThirdParty/swaylib\", tag = \"v2.0.0\" }\n```\n\n----------------------------------------\n\nTITLE: Python Script for Bytecode Array Generation\nDESCRIPTION: Python command to convert binary bytecode into a JSON array format\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -c 'print(list(open(\"out/debug/dbg_example.bin\", \"rb\").read()))'\n```\n\n----------------------------------------\n\nTITLE: Implementing Documentation Generation Logic in Rust\nDESCRIPTION: This function implements the main logic for generating documentation using the forc-doc tool. It processes command-line arguments, configures the documentation generator, and executes the generation process.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_doc.md#2025-04-17_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\npub fn exec(command: Command) -> Result<()> {\n    let manifest_dir = env::var(\"CARGO_MANIFEST_DIR\").map_err(|_| {\n        anyhow!(\n            \"Failed to read {} environment variable\",\n            \"CARGO_MANIFEST_DIR\"\n        )\n    })?;\n    let manifest_path = PathBuf::from(manifest_dir).join(\"Forc.toml\");\n    let mut project = Project::from_manifest(&manifest_path)?;\n\n    if command.build {\n        let build_plan = project.build_plan();\n        let built_project = crate::build::build_with_options(&build_plan, BuildProfile::Release, BuildOptions::default())?;\n        project = built_project.compiled_project;\n    }\n\n    let mut config = DocgenConfig::default();\n    config.manifest_path = manifest_path;\n    config.output_path = PathBuf::from(&command.destination);\n    config.format = command.format.parse().unwrap_or(OutputFormat::Html);\n    config.target = RustDocumentationTarget::Sway;\n    config.document_private_items = command.document_private_items;\n    config.show_all = command.show_all;\n    config.no_deps = command.no_deps;\n    config.json = command.json;\n\n    docgen::build(&project, &config)?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Sway Debugger\nDESCRIPTION: This snippet demonstrates how to set a breakpoint at address 0 and start the transaction again. It shows the execution stopping at the breakpoint.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/debugging/debugging_with_cli.md#2025-04-17_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n>> breakpoint 0\n\n>> start_tx tx.json out/debug/dbg_example-abi.json\n\nReceipt: ScriptResult { result: Success, gas_used: 0 }\nStopped on breakpoint at address 0 of contract 0x0000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Building Sway Project\nDESCRIPTION: Command to build the Sway project after updating the 'prism-sway.js' file. This command removes the 'prism' directory after building.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/prism/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Manually Running Sway Formatter (Shell)\nDESCRIPTION: This snippet shows how to manually run the Sway formatter on a file named 'my_file.sw' using Cargo from the Sway project root.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/swayfmt/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# copy paste some Sway code into my_file.sw and run the formatter from cargo while in the Sway project root\ncargo run --bin=forc-fmt my_file.sw\n```\n\n----------------------------------------\n\nTITLE: Running Formatter Tests in Sway Project (Shell)\nDESCRIPTION: This snippet demonstrates how to clone the Sway repository, navigate to the swayfmt directory, and run the formatter tests using Cargo.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/swayfmt/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# from /sway\ncd swayfmt && cargo test\n```\n\n----------------------------------------\n\nTITLE: Running the Fuel Network Explorer\nDESCRIPTION: Command and output for launching the Fuel Network Explorer, which shows the server starting and listening on the local port 3030.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/index.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ forc explore\nFuel Network Explorer 0.1.1\nRunning server on http://127.0.0.1:3030\nServer::run{addr=127.0.0.1:3030}: listening on http://127.0.0.1:3030\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Generic Enum in a Library\nDESCRIPTION: Example showing how to define a public generic enum in a library. The 'pub' keyword makes the type available outside the library.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/sway-program-types/libraries.md#2025-04-17_snippet_2\n\nLANGUAGE: sway\nCODE:\n```\npub enum Option<T> {\n    // variants\n}\n```\n\n----------------------------------------\n\nTITLE: Running Forc Doc CLI Commands\nDESCRIPTION: Shell commands demonstrating how to verify forc-doc installation and generate documentation\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd my_fuel_project\n$ ls # check Forc.toml exists\n# src Forc.toml\n$ forc --version # check forc is installed\n$ forc doc --version # check forc doc is installed\n$ forc doc --open # open docs in default browser\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Types in Rust\nDESCRIPTION: Example Rust code showing how to add new documentable item types to the context system\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// in context.rs\npub(crate) enum ContextType {\n    // Add in the new declaration's context type\n    CoolNewFields(Vec<TyCoolNewField>),\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mdbook for Sway Documentation (Shell)\nDESCRIPTION: Command to install mdbook, which is required to build the Sway documentation locally. This should be run in a new terminal session.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo install mdbook\n```\n\n----------------------------------------\n\nTITLE: Running forc doc Command\nDESCRIPTION: Shell command for running the forc doc binary to generate documentation, including the option to automatically open the generated docs in a browser.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- --path path/to/manifest --open\n```\n\n----------------------------------------\n\nTITLE: Installing Forc Plugins for Documentation (Shell)\nDESCRIPTION: Series of commands to install various Forc plugins that are documented within the book. These include client, doc, explore, fmt, and lsp plugins.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --path ./forc-plugins/forc-client\ncargo install --path ./forc-plugins/forc-doc\ncargo install forc-explore\ncargo install --path ./forc-plugins/forc-fmt\ncargo install --path ./forc-plugins/forc-lsp\n```\n\n----------------------------------------\n\nTITLE: Suppressing Dead Code Warnings with #[allow(dead_code)] in Sway\nDESCRIPTION: Demonstrates how to use the #[allow(dead_code)] annotation to disable compiler warnings for unused code in Sway. This is useful when you have intentionally unused code that you want to keep without warnings.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/allow.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:allow_deadcode_annotation}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexical Analysis in Rust\nDESCRIPTION: The entry point for lexical analysis in Sway, which breaks down source code into tokens. It returns a TokenStream containing a tree of tokens.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn lex(\n    handler: &Handler,\n    src: &Arc<str>,\n    start: usize,\n    end: usize,\n    source_id: Option<SourceId>,\n) -> Result<TokenStream> {\n```\n\n----------------------------------------\n\nTITLE: Referencing Static Files Directory in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a relative link to the static.files directory using Markdown syntax. It's used to reference the location of the assets associated with the licenses documented in this file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/src/licenses/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`static.files`](../static.files/)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Single-Line Comments in Sway\nDESCRIPTION: Shows how to create multiple consecutive single-line comments by starting each line with double slashes (//).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n// let's make a couple of lines\n// commented.\n```\n\n----------------------------------------\n\nTITLE: Multiple Type Annotations Examples in Sway\nDESCRIPTION: Demonstrates type annotations for different data types including fixed-length strings and booleans.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/variables.md#2025-04-17_snippet_4\n\nLANGUAGE: sway\nCODE:\n```\nlet bar: str[4] = __to_str_array(\"sway\");\nlet baz: bool = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Forc Doc from Source\nDESCRIPTION: Shell commands for cloning and installing forc-doc from source code\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/FuelLabs/sway.git\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ cd sway\n$ cargo install --path forc-plugins/forc-doc\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ forc doc --path src/tests/data/impl_traits --open\n```\n\n----------------------------------------\n\nTITLE: Configuring Forc Preprocessor in TOML\nDESCRIPTION: Configuration entry required in book.toml to enable the Forc documenter preprocessor\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[preprocessor.forc-documenter]\n```\n\n----------------------------------------\n\nTITLE: Verifying the Sway toolchain installation\nDESCRIPTION: Command to confirm that the Sway toolchain built successfully by running the forc command-line interface with the help flag.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin forc -- --help\n```\n\n----------------------------------------\n\nTITLE: Sample Forc Version Output\nDESCRIPTION: Example output from the version check command showing the installed forc version. This indicates what a successful installation should display.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/source.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforc 0.31.2\n```\n\n----------------------------------------\n\nTITLE: Building Sway Reference Documentation with mdbook\nDESCRIPTION: This command builds the Sway reference book using mdbook. It should be run from the /docs/reference directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmdbook build\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecated Warnings with #[allow(deprecated)] in Sway\nDESCRIPTION: Shows how to use the #[allow(deprecated)] annotation to disable compiler warnings when using deprecated items in Sway. This is useful when you need to use deprecated functionality temporarily.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/annotations/attributes/allow.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/language/annotations/src/main.sw:allow_deprecated_annotation}}\n```\n\n----------------------------------------\n\nTITLE: Running Sway Formatter via Command Line\nDESCRIPTION: Command to manually run the Sway formatter (forc-fmt) on Sway files. This formatter provides canonical formatting for Sway code.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/fuel_toolchain.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforc fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Forc Registry Credentials\nDESCRIPTION: Configuration file format for storing the Forc registry authentication token in ~/.forc/credentials.toml. This allows authenticating with the registry without passing the token via command line arguments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-publish/README.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[registry]\ntoken = \"YOUR_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Equality Assertion in Sway\nDESCRIPTION: This function demonstrates the use of assert_eq to ensure that two parameters are equal. If a and b are not equal, the virtual machine will revert.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/assertions/assert-eq.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nfn must_be_equal(a: u64, b: u64) {\n    assert_eq(a, b);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Line Comments in Sway\nDESCRIPTION: Demonstrates how to create a simple single-line comment in Sway using double slashes (//).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Declaring One-Arity Tuples in Sway\nDESCRIPTION: This snippet demonstrates how to declare one-arity tuples in Sway, which require a trailing comma to distinguish them from parenthesized expressions.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/built_in_types.md#2025-04-17_snippet_8\n\nLANGUAGE: Sway\nCODE:\n```\nlet x: u64 = (42);     // x is of type u64\nlet y: (u64) = (42);   // y is of type u64\nlet z: (u64,) = (42,); // z is of type (u64), i.e. a one-arity tuple\nlet w: (u64) = (42,);  // type error\n```\n\n----------------------------------------\n\nTITLE: Enumerating Item Types in Rust\nDESCRIPTION: Enum defining different types of items that can appear in a Sway module, such as functions, structs, and traits.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub enum ItemKind {\n    Submodule(Submodule),\n    Use(ItemUse),\n    Struct(ItemStruct),\n    Enum(ItemEnum),\n    Fn(ItemFn),\n    Trait(ItemTrait),\n    Impl(ItemImpl),\n    Abi(ItemAbi),\n    Const(ItemConst),\n    Storage(ItemStorage),\n    Configurable(ItemConfigurable),\n    TypeAlias(ItemTypeAlias),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Sway Compilation Process with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the main steps of the Sway compilation process, from source code to deployment and execution.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n    SourceCode[Source Code] --> LexicalAnalysis;\n    LexicalAnalysis[Lexical Analysis] --> SyntaxAnalysis;\n    SyntaxAnalysis[Syntax Analysis] --> SemanticAnalysis;\n    SemanticAnalysis[Semantic Analysis] --> IntermediateRepresentation;\n    IntermediateRepresentation[Intermediate Representation] --> Optimization;\n    Optimization[Optimization] --> CodeGeneration[Code Generation];\n    CodeGeneration[Code Generation] --> DeployExecute[Deploy & Execute];\n```\n\n----------------------------------------\n\nTITLE: Building Sway Documentation in Strict Mode (Shell)\nDESCRIPTION: Command to build the Sway documentation book in strict mode, which checks if pages should be removed or added within the Forc Reference.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nMDBOOK_preprocessor__FORC_documenter__STRICT=\"true\" mdbook build docs/book\n```\n\n----------------------------------------\n\nTITLE: Building Sway Project\nDESCRIPTION: Command to build the Sway project using Forc build system.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforc build\n```\n\n----------------------------------------\n\nTITLE: Building Sway Project with forc in Console\nDESCRIPTION: Command to build the Sway project using forc, generating necessary artifacts like ABI and bytecode.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ forc build\n  Creating a new `Forc.lock` file. (Cause: lock file did not exist)\n    Adding std git+https://github.com/fuellabs/sway?tag=v0.24.5#e695606d8884a18664f6231681333a784e623bc9\n   Created new lock file at /home/user/path/to/my-fuel-project/Forc.lock\n  Compiled library \"std\".\n  Compiled contract \"my-fuel-project\".\n  Bytecode size is 60 bytes.\n```\n\n----------------------------------------\n\nTITLE: Implementing ToOutput Trait Example\nDESCRIPTION: Example showing how to implement ToOutput trait for converting types to output format in Sway\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/transfer/output.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\nimpl<V> ToOutput<()> for Option<V> {\n    fn to_output(&self) -> () {\n        ()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Receipt Console Output for Non-Reference Types\nDESCRIPTION: Shows the console output format of a Log receipt generated when logging non-reference types like integers.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/basics/comments_and_logging.md#2025-04-17_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"Log\": {\n  \"id\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  \"is\": 10352,\n  \"pc\": 10404,\n  \"ra\": 42,\n  \"rb\": 1018205,\n  \"rc\": 0,\n  \"rd\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Rust stable toolchain for Sway development\nDESCRIPTION: Command to configure the Rust toolchain to use the stable version, which is required for developing the Sway compiler and toolchain.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrustup default stable\n```\n\n----------------------------------------\n\nTITLE: Terminating LSP Server Processes\nDESCRIPTION: Command to kill all running instances of the forc-lsp server to address performance issues.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/lsp/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npkill forc-lsp\n```\n\n----------------------------------------\n\nTITLE: Defining Token Types in Rust\nDESCRIPTION: Enum definition for different types of tokens in the Sway lexer, including punctuation, identifiers, groups, literals, and doc comments.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub enum GenericTokenTree<T> {\n    Punct(Punct),\n    Ident(Ident),\n    Group(GenericGroup<T>),\n    Literal(Literal),\n    DocComment(DocComment),\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimized IR Pass Check in Sway Tests\nDESCRIPTION: Example showing how to configure optimized IR checker with specific pass names or the o1 optimization level in test files.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/ir_generation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::check-ir-optimized::\npass: o1\n```\n\n----------------------------------------\n\nTITLE: Adding Cargo bin directory to PATH\nDESCRIPTION: Shell command to add the Cargo bin directory to the PATH environment variable by modifying the .profile file, allowing direct execution of Rust binaries.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport PATH=\"${HOME}/.cargo/bin:${PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Generate Bytecode Array Command\nDESCRIPTION: Python command to convert binary bytecode into a JSON array format for the transaction specification.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-debug/docs/walkthrough.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -c 'print(list(open(\"out/debug/dbg_example.bin\", \"rb\").read()))'\n```\n\n----------------------------------------\n\nTITLE: Documenting Call Data Concepts in Sway Markdown\nDESCRIPTION: Markdown documentation outlining the three main types of call data available in Sway: message sender (caller identity), asset sent (token type), and amount of asset sent (token quantity).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/call-data/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Call Data\n\nThe term `call-data` refers to the metadata that is available to the recipient of a call.\n\nIn the following sections we'll cover the following `call-data`:\n\n- [`Message Sender`](msg-sender.md): who is making the call\n- [`Asset Sent`](msg-asset.md): which asset has been sent into the contract\n- [`Amount of Asset Sent`](msg-asset-amount.md): how much of an asset has been sent\n```\n\n----------------------------------------\n\nTITLE: Building Sway Test Projects using Cargo and Forc\nDESCRIPTION: This command compiles all Sway programs in the workspace by running the 'forc build' command through Cargo. It targets the test projects located in the 'test/src/sdk-harness' directory.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/sdk-harness/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# from project root\ncargo run --bin=forc build --path test/src/sdk-harness\n```\n\n----------------------------------------\n\nTITLE: Horrorshow Search Bar Implementation in Rust\nDESCRIPTION: Rust implementation using the horrorshow library to generate the equivalent HTML search bar component. The code demonstrates horrorshow's templating syntax for creating reusable HTML components.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nmod search {\n    use horrorshow::{box_html, RenderBox};\n\n    pub(crate) fn generate_searchbar() -> Box<dyn RenderBox> {\n        box_html! {\n            nav(class=\"sub\") {\n                form(class=\"search-form\") {\n                    div(class=\"search-container\") {\n                        span;\n                        input(\n                            class=\"search-input\",\n                            name=\"search\",\n                            autocomplete=\"off\",\n                            spellcheck=\"false\",\n                            placeholder=\"Click or press 'S' to search, '?' for more options…\",\n                            type=\"search\"\n                        );\n                        div(id=\"help-button\", title=\"help\", tabindex=\"-1\") {\n                            a(href=\"../help.html\") { : \"?\" }\n                        }\n                        div(id=\"settings-menu\", tabindex=\"-1\") {\n                            a(href=\"../settings.html\", title=\"settings\") {\n                                img(\n                                    width=\"22\",\n                                    height=\"22\",\n                                    alt=\"change settings\",\n                                    src=\"../static.files/wheel-7b819b6101059cd0.svg\"\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Fuel Core Service\nDESCRIPTION: Command to start the fuel-core service which is required for testing Sway.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nfuel-core\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Constraints for Inlining in FuelLabs/sway\nDESCRIPTION: This snippet illustrates how to set multiple constraints for the inliner, including maximum blocks, instructions, and stack elements. It uses a single comment line to define all constraints.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/sway-ir/tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// blocks 2 instrs 20 stack 10\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Aliasing Security Issue in Rust\nDESCRIPTION: Example showing potential security vulnerability when allowing direct pointer passing to contracts without proper encoding.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nimpl TestContract for Contract {\n    fn some_method(v: Vec<u64>) {\n        let some_value1 = do_something(&v);\n        // do some_thing that allocate memory\n        let some_value2 = do_something(&v);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Structure in Rust\nDESCRIPTION: Struct definition for a Module in the Sway AST, containing a list of items representing different language constructs.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub struct Module {\n    pub kind: ModuleKind,\n    pub items: Vec<Item>,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Apache License 2.0 Notice in Project Files\nDESCRIPTION: This snippet provides the template for including the Apache License 2.0 notice in project files. It includes instructions for customization and placement within the file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/src/licenses/LICENSE-APACHE.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Using Line Comments in Sway\nDESCRIPTION: Demonstrates how to use single-line comments in Sway with the // syntax. Comments can appear on multiple lines by starting each with // and can be placed at the end of code statements.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/comments/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sway\nCODE:\n```\n// This is a comment.\n// This is a comment on a second line.\nlet x = 5; // This is a comment at the end of a line of code.\n```\n\n----------------------------------------\n\nTITLE: Building a Sway Project with Assembly Output\nDESCRIPTION: Console command and output for compiling a Sway project with Forc, including the --asm flag to display the generated assembly code. Shows the compilation process and bytecode size.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/introduction/forc_project.md#2025-04-17_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ forc build --asm final\n...\n.program:\nji   i4\nnoop\nDATA_SECTION_OFFSET[0..32]\nDATA_SECTION_OFFSET[32..64]\nlw   $ds $is 1\nadd  $$ds $$ds $is\nlw   $r0 $fp i73              ; load input function selector\nlw   $r1 data_0               ; load fn selector for comparison\neq   $r2 $r0 $r1              ; function selector comparison\njnzi $r2 i12                  ; jump to selected function\nmovi $$tmp i123               ; special code for mismatched selector\nrvrt $$tmp                    ; revert if no selectors matched\nret  $one\n.data:\ndata_0 .word 559005003\n\n  Compiled contract \"my-fuel-project\".\n  Bytecode size is 60 bytes.\n```\n\n----------------------------------------\n\nTITLE: AST to Assembly Compilation Function in Rust\nDESCRIPTION: Function signature for compiling Abstract Syntax Tree (AST) to assembly code, taking handler, engines, programs and build configuration as inputs.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/internals.md#2025-04-17_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n/// Given an AST compilation result, try compiling to a `CompiledAsm`,\n/// containing the asm in opcode form (not raw bytes/bytecode).\npub fn ast_to_asm(\n    handler: &Handler,\n    engines: &Engines,\n    programs: &Programs,\n    build_config: &BuildConfig,\n) -> Result<CompiledAsm, ErrorEmitted> {\n```\n\n----------------------------------------\n\nTITLE: Running Sway Library Tests with Cargo\nDESCRIPTION: This command executes the test suite for the Sway standard library using Cargo. It should be run after successfully building all the test projects.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/sdk-harness/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Toolchain Default Channel in Bash\nDESCRIPTION: Command to verify the installed Rust toolchain and its default channel, which is required to be stable for Sway installation.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/introduction/installation/cargo.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup toolchain list\n```\n\n----------------------------------------\n\nTITLE: Checking LSP Binary Location\nDESCRIPTION: Command to verify the location of the forc-lsp binary in the system PATH.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/lsp/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwhich forc-lsp\n```\n\n----------------------------------------\n\nTITLE: Running VM Tests in Release Mode\nDESCRIPTION: Command to run tests in release mode for improved performance. Can significantly speed up test execution compared to debug mode.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/test/src/e2e_vm_tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --release --bin=test\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP Server Logging\nDESCRIPTION: VSCode settings configuration to enable verbose logging for the Sway Language Server.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/lsp/troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"sway-lsp.trace.server\": \"verbose\"\n```\n\n----------------------------------------\n\nTITLE: Installing Zsh Completions for Forc\nDESCRIPTION: This code installs the Forc completion script for Zsh in a custom directory. It assumes the ~/.zfunc directory has been created and added to the fpath in .zshrc.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nforc completions --shell=zsh > ~/.zfunc/_forc\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Profile if Not Exists\nDESCRIPTION: This PowerShell command creates a new profile script if one doesn't already exist. It's used when setting up Forc completions for the first time.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -path $profile -type file -force\n```\n\n----------------------------------------\n\nTITLE: Contract Implementation Code\nDESCRIPTION: Shows the basic contract implementation that gets called.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl TestContract for Contract {\n    fn some_method(qty: u64) {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure in Markdown\nDESCRIPTION: A hierarchical markdown structure defining the navigation and organization of the Sway programming language documentation. Includes sections for introduction, language features, operations, examples, and miscellaneous topics.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/SUMMARY.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n## Introduction\n\n- [Welcome!](./index.md)\n- [Installation](./documentation/introduction/installation/index.md)\n  - [Fuelup](./documentation/introduction/installation/fuelup.md)\n  - [Cargo](./documentation/introduction/installation/cargo.md)\n  - [From Source](./documentation/introduction/installation/source.md)\n  - [Fuel Core](./documentation/introduction/installation/fuel-core.md)\n\n[...remainder of structure...]\n```\n\n----------------------------------------\n\nTITLE: Installing Fish Completions for Forc\nDESCRIPTION: This code creates a user-specific directory for Fish shell completions and installs the Forc completion script. It requires the forc command to be available.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/.config/fish/completions\nforc completions --shell=fish > ~/.config/fish/completions/forc.fish\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Descriptors in Rust\nDESCRIPTION: Example Rust code showing how to handle new declaration types in the documenting phase\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// in descriptor.rs\npub(crate) enum Descriptor {\n    Documentable(Document),\n    NonDocumentable,\n}\nimpl Descriptor {\n    pub(crate) fn from_typed_decl(/* ... */) -> Result<Self> {\n        match ty_decl {\n            // Add the new declaration to the match arm\n            ty::TyDecl::CoolNewDecl(ty::CoolNewDecl { decl_id, .. }) => {\n                let decl = decl_engine.get_cool_new_decl(decl_id);\n                if !document_private_items && decl.visibility.is_private() {\n                    Ok(Descriptor::NonDocumentable)\n                } else {\n                    let item_name = decl.call_path.suffix;\n                    let attrs_opt = (!decl.attributes.is_empty())\n                        .then(|| decl.attributes.to_html_string());\n                    // Fill in the context of the new declaration\n                    let context = (!decl.fields.is_empty()).then_some(Context::new(\n                        module_info.clone(),\n                        ContextType::CoolNewFields(decl.fields),\n                    ));\n\n                    Ok(Descriptor::Documentable(Document {\n                        module_info: module_info.clone(),\n                        item_header: ItemHeader {\n                            module_info: module_info.clone(),\n                            friendly_name: ty_decl.friendly_type_name(),\n                            item_name: item_name.clone(),\n                        },\n                        item_body: ItemBody {\n                            module_info,\n                            ty_decl: ty_decl.clone(),\n                            item_name,\n                            code_str: swayfmt::parse::parse_format::<sway_ast::ItemCoolNew>(\n                                decl.span.as_str(),\n                            )?,\n                            attrs_opt: attrs_opt.clone(),\n                            item_context: ItemContext {\n                                context_opt: context,\n                                impl_traits: None,\n                            },\n                        },\n                        raw_attributes: attrs_opt,\n                    }))\n                }\n            }\n            /* ... */\n            _ => Ok(Descriptor::NonDocumentable),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Desugared Configurable Implementation\nDESCRIPTION: Internal representation of how configurables are processed by the compiler.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nconst SOMETHING: u64;\n\nfn __entry() -> raw_slice {\n    std::codec::abi_decode_in_place(&mut SOMETHING, 7104, 8);\n    encode(main())\n}\n\nfn main() -> u64 {\n    SOMETHING\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Harness with cargo-generate in Console\nDESCRIPTION: Command to generate the default test harness using the sway-test-rs template from the FuelLabs/sway repository.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncargo generate --init fuellabs/sway templates/sway-test-rs --name my-fuel-project --force\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-generate in Console\nDESCRIPTION: Command to install the cargo-generate tool, which is used to generate the Rust integration test harness.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/testing/testing-with-rust.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncargo install cargo-generate\n```\n\n----------------------------------------\n\nTITLE: Running the Sway Test Suite\nDESCRIPTION: Command to run the Sway test suite using Cargo to verify the setup is working correctly.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin test\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Inlining in Rust for FuelLabs/sway Inliner\nDESCRIPTION: This snippet demonstrates how to configure the inliner to inline all CALL instructions found in the input. It uses a simple comment at the beginning of the IR file.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/sway-ir/tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// all\n```\n\n----------------------------------------\n\nTITLE: Linking PR to Issue with Close Keyword\nDESCRIPTION: Markdown syntax to link a pull request to an issue and automatically close the issue when the PR is merged.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nclose #123\n```\n\n----------------------------------------\n\nTITLE: Serving Sway Documentation Locally (Shell)\nDESCRIPTION: Command to serve the built Sway documentation book locally for preview and testing purposes.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nmdbook serve docs/book\n```\n\n----------------------------------------\n\nTITLE: Linking PR to Multiple Issues\nDESCRIPTION: Markdown syntax to link a pull request to multiple issues with different actions (closing and referencing).\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nclose #123, ref #456\n```\n\n----------------------------------------\n\nTITLE: HTML Search Bar Template from docs.rs\nDESCRIPTION: Example HTML structure for a documentation search bar component, matching the docs.rs implementation with search input, help button, and settings menu.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/forc-plugins/forc-doc/README.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<nav class=\"sub\">\n  <form class=\"search-form\">\n    <div class=\"search-container\">\n      <span></span>\n      <input\n        class=\"search-input\"\n        name=\"search\"\n        autocomplete=\"off\"\n        spellcheck=\"false\"\n        placeholder=\"Click or press 'S' to search, '?' for more options…\"\n        type=\"search\"\n      />\n      <div id=\"help-button\" title=\"help\" tabindex=\"-1\">\n        <a href=\"../help.html\">?</a>\n      </div>\n      <div id=\"settings-menu\" tabindex=\"-1\">\n        <a href=\"../settings.html\" title=\"settings\">\n          <img\n            width=\"22\"\n            height=\"22\"\n            alt=\"change settings\"\n            src=\"../static.files/wheel-7b819b6101059cd0.svg\"\n          />\n        </a>\n      </div>\n    </div>\n  </form>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Default Signer Private Key\nDESCRIPTION: The private key used by the default signer flag when interacting with a local node.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/forc/plugins/forc_client/index.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n0xde97d8624a438121b86a1956544bd72ed68cd69f2c99555b08b1e8c51ffd511c\n```\n\n----------------------------------------\n\nTITLE: Executing Forc Build Command for Sway Projects\nDESCRIPTION: This snippet demonstrates how to use the 'forc build' command to compile Sway files in a project. It shows the command execution and typical output, including compilation confirmation and bytecode size.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_build.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ forc build\nCompiled script \"my-fuel-project\".\nBytecode size is 28 bytes.\n```\n\n----------------------------------------\n\nTITLE: Test Suite Success Output\nDESCRIPTION: The expected console output when the Sway test suite passes successfully.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/book/src/reference/contributing_to_sway.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nTests passed.\n_n_ tests run (0 skipped)\n```\n\n----------------------------------------\n\nTITLE: Expanded Contract Entry Point\nDESCRIPTION: Shows how the contract entry point is expanded to handle method dispatch and parameter decoding.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/slides/encoding.md#2025-04-17_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\npub fn __entry() {\n    let method_name = std::codec::decode_first_param::<str>();\n    if method_name == \"some_method\" {\n        let mut buffer = std::codec::BufferReader::from_second_parameter();\n        let args: (u64,) = buffer.decode::<(u64,)>();\n        let result: () = __contract_entry_some_method(args.0);\n        let result: raw_slice = encode::<()>(result);\n        __contract_ret(result.ptr(), result.len::<u8>());\n    }\n    __revert(123);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing PowerShell Profile\nDESCRIPTION: This PowerShell command checks if a user profile script already exists. It's a preparatory step for installing Forc completions in PowerShell.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nTest-Path $profile\n```\n\n----------------------------------------\n\nTITLE: Minting Assets to Contract in Sway\nDESCRIPTION: Function call to mint a specified amount of an asset and transfer it directly to a target ContractId. Takes amount and ContractId as parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/operations/asset/mint/contract.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n{{#include ../../../../code/operations/asset_operations/src/lib.sw:mint_to_contract}}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Comments in Sway\nDESCRIPTION: Multi-line comments are enclosed between /* and */ delimiters. These are recommended when comments need to be placed inline with code or when documenting function parameters.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/docs/reference/src/documentation/language/style-guide/comments.md#2025-04-17_snippet_1\n\nLANGUAGE: sway\nCODE:\n```\n/* comment */\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Completions for Forc\nDESCRIPTION: This command generates PowerShell completions for Forc and appends them directly to the user's PowerShell profile script.\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/examples/forc_completions.md#2025-04-17_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nforc completions --shell=powershell >> ${env:USERPROFILE}\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n```\n\n----------------------------------------\n\nTITLE: Building Sway Syntax Highlighting\nDESCRIPTION: Basic build command for Sway syntax highlighting after updating sway.js\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/highlightjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Running Strict Mode Build Command\nDESCRIPTION: Shell command to build the mdBook with strict mode enabled using environment variables\nSOURCE: https://github.com/FuelLabs/sway/blob/master/scripts/mdbook-forc-documenter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nMDBOOK_preprocessor__FORC_documenter__STRICT=\"true\" mdbook build docs/book\n```"
  }
]