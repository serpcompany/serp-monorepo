[
  {
    "owner": "geopandas",
    "repo": "geopandas",
    "content": "TITLE: Multi-layer Interactive Map with Folium Integration\nDESCRIPTION: Creates a complex interactive map combining multiple GeoDataFrames with custom styling, layer control, and alternative tile layers using both GeoPandas and Folium functionality.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/interactive_mapping.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport folium\n\nm = chicago.explore(\n    column=\"POP2010\",  # make choropleth based on \"POP2010\" column\n    scheme=\"naturalbreaks\",  # use mapclassify's natural breaks scheme\n    legend=True,  # show legend\n    k=10,  # use 10 bins\n    tooltip=False,  # hide tooltip\n    popup=[\"POP2010\", \"POP2000\"],  # show popup (on-click)\n    legend_kwds=dict(colorbar=False),  # do not use colorbar\n    name=\"chicago\",  # name of the layer in the map\n)\n\ngroceries.explore(\n    m=m,  # pass the map object\n    color=\"red\",  # use red color on all points\n    marker_kwds=dict(radius=5, fill=True),  # make marker radius 10px with fill\n    tooltip=\"Address\",  # show \"name\" column in the tooltip\n    tooltip_kwds=dict(labels=False),  # do not show column label in the tooltip\n    name=\"groceries\",  # name of the layer in the map\n)\n\nfolium.TileLayer(\"CartoDB positron\", show=False).add_to(m)  # use folium to add alternative tiles\nfolium.LayerControl().add_to(m)  # use folium to add layer control\n\nm  # show map\n```\n\n----------------------------------------\n\nTITLE: Customized Choropleth Map with GeoPandas\nDESCRIPTION: Creates a customized choropleth map with specific styling, tooltips, popups, and tile layers using the explore() method with various parameters.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/interactive_mapping.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnybb.explore(\n    column=\"BoroName\",  # make choropleth based on \"BoroName\" column\n    tooltip=\"BoroName\",  # show \"BoroName\" value in tooltip (on hover)\n    popup=True,  # show all values in popup (on click)\n    tiles=\"CartoDB positron\",  # use \"CartoDB positron\" tiles\n    cmap=\"Set1\",  # use \"Set1\" matplotlib colormap\n    style_kwds=dict(color=\"black\"),  # use black outline\n)\n```\n\n----------------------------------------\n\nTITLE: Setting New Geometry Column in GeoDataFrame in Python\nDESCRIPTION: This snippet details how to create a new centroid column in a GeoDataFrame based on existing geometries and then set this new column as the active geometry column. It's a crucial step in the spatial analysis workflow to ensure the right geometrical representation is used.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncolombia['centroid_column'] = colombia.centroid\ncolombia = colombia.set_geometry('centroid_column')\n\n@savefig colombia_centroids.png\ncolombia.plot();\n```\n\n----------------------------------------\n\nTITLE: Creating GeoDataFrame from Longitude and Latitude\nDESCRIPTION: Converts a DataFrame to a GeoDataFrame using the points_from_xy function from GeoPandas, transforming longitude and latitude to shapely Point objects. Requires GeoPandas and its dependencies like Shapely.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngdf = geopandas.GeoDataFrame(\n    df, geometry=geopandas.points_from_xy(df.Longitude, df.Latitude), crs=\"EPSG:4326\"\n)\n```\n\n----------------------------------------\n\nTITLE: Reading GeoPandas Data File\nDESCRIPTION: Demonstrates how to read geospatial data into a GeoDataFrame using geopandas.read_file(). Uses the nybb dataset from geodatasets package.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nfrom geodatasets import get_path\n\npath_to_data = get_path(\"nybb\")\ngdf = geopandas.read_file(path_to_data)\n\ngdf\n```\n\n----------------------------------------\n\nTITLE: Executing Spatial Joins in GeoPandas\nDESCRIPTION: Demonstrates how to perform spatial joins between two GeoDataFrames based on their geometric relationships. Shows joining grocery stores with community boundaries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mergingdata.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# One GeoDataFrame of communities, one of grocery stores.\n# Want to merge to get each grocery's community.\nchicago.head()\ngroceries.head()\n\n# Execute spatial join\ngroceries_with_community = groceries.sjoin(chicago, how=\"inner\", predicate='intersects')\ngroceries_with_community.head()\n```\n\n----------------------------------------\n\nTITLE: Building GeoDataFrame from WKT Column\nDESCRIPTION: Constructs a GeoDataFrame using the GeoSeries prepared from WKT data, establishing the geometry column. Utilizes GeoPandas for GeoDataFrame creation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngdf = geopandas.GeoDataFrame(df, geometry=\"Coordinates\")\n\nprint(gdf.head())\n```\n\n----------------------------------------\n\nTITLE: Difference Operation for Spatial Analysis in GeoPandas - Python\nDESCRIPTION: The final example demonstrates how to compute the geographical areas of Chicago considered far from groceries by utilizing the difference operation in GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nchicago_peripheries = chicago.overlay(groceries, how='difference')\n@savefig chicago_peripheries.png width=5in\nchicago_peripheries.plot(alpha=0.5, edgecolor='k', cmap='tab10');\n```\n\n----------------------------------------\n\nTITLE: Reading Shapefile and Manipulating GeoDataFrame in Python with GeoPandas\nDESCRIPTION: Demonstrates reading a shapefile using GeoPandas, manipulating the resulting GeoDataFrame by setting an index and sorting, and then displaying the data. Uses NYC borough boundaries as an example dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import geodatasets\n>>> nybb_path = geodatasets.get_path('nybb')\n>>> boros = geopandas.read_file(nybb_path)\n>>> boros.set_index('BoroCode', inplace=True)\n>>> boros.sort_index(inplace=True)\n>>> boros\n               BoroName     Shape_Leng    Shape_Area  \\\nBoroCode\n1             Manhattan  359299.096471  6.364715e+08\n2                 Bronx  464392.991824  1.186925e+09\n3              Brooklyn  741080.523166  1.937479e+09\n4                Queens  896344.047763  3.045213e+09\n5         Staten Island  330470.010332  1.623820e+09\n\n                                                   geometry\nBoroCode\n1         MULTIPOLYGON (((981219.0557861328 188655.31579...\n2         MULTIPOLYGON (((1012821.805786133 229228.26458...\n3         MULTIPOLYGON (((1021176.479003906 151374.79699...\n4         MULTIPOLYGON (((1029606.076599121 156073.81420...\n5         MULTIPOLYGON (((970217.0223999023 145643.33221...\n```\n\n----------------------------------------\n\nTITLE: Reprojecting Data in GeoPandas\nDESCRIPTION: Example of loading US data, checking its current projection, and reprojecting it to Albers contiguous USA projection. The code also includes visualization steps to compare the different projections.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\n# load example data\nusa = geopandas.read_file(geodatasets.get_path('geoda.natregimes'))\n\n# Check original projection\n# (it's Plate Carr√©e! x-y are long and lat)\nusa.crs\n\n# Visualize\nax = usa.plot()\nax.set_title(\"WGS84 (lat/lon)\")\n\n# Reproject to Albers contiguous USA\nusa = usa.to_crs(\"ESRI:102003\")\nax = usa.plot()\nax.set_title(\"NAD 1983 Albers contiguous USA\")\n```\n\n----------------------------------------\n\nTITLE: Using EPSG Codes for CRS in GeoPandas\nDESCRIPTION: Demonstrates the recommended approach of using EPSG codes instead of proj4 strings.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngdf.crs = \"EPSG:2163\"\n```\n\n----------------------------------------\n\nTITLE: Performing Spatial Joins in GeoPandas\nDESCRIPTION: Examples of performing left, right, and inner spatial joins using GeoPandas sjoin() method, along with a nearest neighbor join using sjoin_nearest().\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/spatial_joins.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\njoin_left_df = pointdf.sjoin(polydf, how=\"left\")\njoin_right_df = pointdf.sjoin(polydf, how=\"right\")\njoin_inner_df = pointdf.sjoin(polydf, how=\"inner\")\n\n# Using different predicate\npointdf.sjoin(polydf, how=\"left\", predicate=\"within\")\n\n# Nearest neighbor join\npointdf.sjoin_nearest(polydf, how=\"left\", distance_col=\"Distances\")\n```\n\n----------------------------------------\n\nTITLE: Adding a CartoDB Positron Style Basemap to GeoPandas Plot\nDESCRIPTION: Creates a plot with the CartoDB Positron basemap style instead of the default OpenStreetMap style. Also removes the axes for a cleaner map appearance.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax, source=cx.providers.CartoDB.Positron)\nax.set_axis_off()\n```\n\n----------------------------------------\n\nTITLE: GIS Vector File Operations in GeoPandas\nDESCRIPTION: Functions for handling GIS vector files, including listing layers, reading files, and writing GeoDataFrames to files.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/reference/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlist_layers\nread_file\nGeoDataFrame.to_file\n```\n\n----------------------------------------\n\nTITLE: Loading Geographic Data with GeoPandas\nDESCRIPTION: Demonstrates loading multiple geographic datasets using GeoPandas and geodatasets package, including New York boroughs, Chicago community data, and grocery locations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/interactive_mapping.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport geodatasets\n\nnybb = geopandas.read_file(geodatasets.get_path(\"nybb\"))\nchicago = geopandas.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = geopandas.read_file(geodatasets.get_path(\"geoda.groceries\")).explode(ignore_index=True)\n```\n\n----------------------------------------\n\nTITLE: Adding a Legend to a Choropleth Map\nDESCRIPTION: Creates a choropleth map with a legend enabled. The legend visually represents the color scale used for the population data mapping.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Plot population estimates with an accurate legend\nchicago.plot(column='POP2010', legend=True);\n```\n\n----------------------------------------\n\nTITLE: Reading File using GeoPandas\nDESCRIPTION: Basic method to read spatial data files using geopandas.read_file() function, supporting multiple file formats and sources\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngeopandas.read_file(...)\n```\n\n----------------------------------------\n\nTITLE: Creating MultiPolygon from Buffer Union - Python\nDESCRIPTION: This example demonstrates unioning buffered geometries from a GeoSeries into a single MultiPolygon. Uses the GeoSeries.buffer method to obtain buffers and union_all for aggregation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ncircles = pts.buffer(2000)\nmp = circles.union_all()\n# Output: MultiPolygon containing the union of all buffered circles\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing NYC Data in GeoPandas\nDESCRIPTION: Python code to load NYC borough data and generate point geometries for spatial join demonstration. Sets up two GeoDataFrames with matching coordinate reference systems.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/spatial_joins.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nfrom shapely.geometry import Point\nfrom geopandas import GeoDataFrame, read_file\nimport geodatasets\n\n# NYC Boros\nzippath = geodatasets.get_path(\"nybb\")\npolydf = read_file(zippath)\n\n# Generate some points\nb = [int(x) for x in polydf.total_bounds]\nN = 8\npointdf = GeoDataFrame(\n    [\n        {\"geometry\": Point(x, y), \"value1\": x + y, \"value2\": x - y}\n        for x, y in zip(\n            range(b[0], b[2], int((b[2] - b[0]) / N)),\n            range(b[1], b[3], int((b[3] - b[1]) / N)),\n        )\n    ]\n)\n\n# Make sure they're using the same projection reference\npointdf.crs = polydf.crs\n```\n\n----------------------------------------\n\nTITLE: Writing Spatial Data to Files\nDESCRIPTION: Demonstrates writing GeoDataFrames to various file formats like Shapefile, GeoJSON, and GeoPackage\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncountries_gdf.to_file(\"countries.shp\")\ncountries_gdf.to_file(\"countries.geojson\", driver='GeoJSON')\ncountries_gdf.to_file(\"package.gpkg\", layer='countries', driver=\"GPKG\")\n```\n\n----------------------------------------\n\nTITLE: Performing Intersection Overlay and Plotting Results in Python\nDESCRIPTION: This snippet demonstrates the intersection overlay operation between two GeoDataFrames and plots the result using a custom colormap.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnewdf = polydf.overlay(polydf2, how=\"intersection\")\nnewdf.plot(cmap=\"tab20b\")\n```\n\n----------------------------------------\n\nTITLE: Adding Color-Coded Markers to Folium Map\nDESCRIPTION: Creates interactive markers for each volcano on the Folium map, color-coded by volcano type, with popup information showing details like year, name, country, type, and coordinates.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create a geometry list from the GeoDataFrame\ngeo_df_list = [[point.xy[1][0], point.xy[0][0]] for point in geo_df.geometry]\n\n# Iterate through list and add a marker for each volcano, color-coded by its type.\ni = 0\nfor coordinates in geo_df_list:\n    # assign a color marker for the type of volcano, Strato being the most common\n    if geo_df.Type[i] == \"Stratovolcano\":\n        type_color = \"green\"\n    elif geo_df.Type[i] == \"Complex volcano\":\n        type_color = \"blue\"\n    elif geo_df.Type[i] == \"Shield volcano\":\n        type_color = \"orange\"\n    elif geo_df.Type[i] == \"Lava dome\":\n        type_color = \"pink\"\n    else:\n        type_color = \"purple\"\n\n    # Place the markers with the popup labels and data\n    map.add_child(\n        folium.Marker(\n            location=coordinates,\n            popup=\"Year: \"\n            + str(geo_df.Year[i])\n            + \"<br>\"\n            + \"Name: \"\n            + str(geo_df.Name[i])\n            + \"<br>\"\n            + \"Country: \"\n            + str(geo_df.Country[i])\n            + \"<br>\"\n            + \"Type: \"\n            + str(geo_df.Type[i])\n            + \"<br>\"\n            + \"Coordinates: \"\n            + str(geo_df_list[i]),\n            icon=folium.Icon(color=\"%s\" % type_color),\n        )\n    )\n    i = i + 1\n```\n\n----------------------------------------\n\nTITLE: Reading Borough Boundaries and Geocoding in Python\nDESCRIPTION: This snippet demonstrates how to read borough boundary data from a geodataset and geocode the names of the boroughs in New York City. It uses GeoPandas and geodatasets to obtain the data and the geocode function to get the locations of the boroughs. The output is plotted on a map using matplotlib.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geocoding.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nboros = geopandas.read_file(geodatasets.get_path(\"nybb\"))\nboros.BoroName\nboro_locations = geopandas.tools.geocode(boros.BoroName)\nboro_locations\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\n\nboros.to_crs(\"EPSG:4326\").plot(ax=ax, color=\"white\", edgecolor=\"black\");\n@savefig boro_centers_over_bounds.png\nboro_locations.plot(ax=ax, color=\"red\");\n```\n\n----------------------------------------\n\nTITLE: Ensuring Common CRS for Layered Maps\nDESCRIPTION: Demonstrates ensuring that different geodataframes share the same coordinate reference system (CRS) before overlaying them in maps. Uses to_crs() to transform coordinates.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Check crs\ngroceries = groceries.to_crs(chicago.crs)\n```\n\n----------------------------------------\n\nTITLE: Modern CRS Specification in GeoPandas\nDESCRIPTION: Shows the recommended way to specify CRS in GeoPandas using EPSG codes directly.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n## NEW\nGeoDataFrame(..., crs=\"EPSG:4326\")\n# or\ngdf.crs = \"EPSG:4326\"\n# or\ngdf.to_crs(\"EPSG:4326\")\n```\n\n----------------------------------------\n\nTITLE: Plotting GeoDataFrame in Python\nDESCRIPTION: This snippet shows how to plot a GeoDataFrame with adjusted markersize, rendering a visual representation of spatial data. The plot is saved as an image file. It's an essential operation for visualizing geographic information.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Plot countries\n@savefig colombia_borders.png\ncolombia.plot(markersize=.5);\n```\n\n----------------------------------------\n\nTITLE: Plotting Generated Circles GeoDataFrame with Custom Colormap in Python\nDESCRIPTION: This snippet plots the generated circles GeoDataFrame using a custom colormap ('tab20b') for visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npolydf2.plot(cmap=\"tab20b\")\n```\n\n----------------------------------------\n\nTITLE: Performing Union Operation with GeoDataFrame.overlay - Python\nDESCRIPTION: This snippet displays how to perform a union operation on two GeoDataFrames using GeoPandas' overlay method. The union operation returns all geometries covered by the combination of the two dataframes.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nres_union = df1.overlay(df2, how='union')\nres_union\n\nax = res_union.plot(alpha=0.5, cmap='tab10')\ndf1.plot(ax=ax, facecolor='none', edgecolor='k');\n@savefig overlay_example_union.png width=5in\ndf2.plot(ax=ax, facecolor='none', edgecolor='k');\n```\n\n----------------------------------------\n\nTITLE: Clipping GeoSeries/GeoDataFrame by Rectangle in Python\nDESCRIPTION: Example of using the new clip_by_rect() method to perform fast rectangle clipping on a GeoSeries or GeoDataFrame.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclipped = gdf.clip_by_rect(xmin, ymin, xmax, ymax)\n```\n\n----------------------------------------\n\nTITLE: Performing Difference Operation with GeoDataFrame.overlay - Python\nDESCRIPTION: This code snippet demonstrates how to use the difference operation to obtain geometries part of df1 but not contained in df2 using GeoPandas' overlay method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres_difference = df1.overlay(df2, how='difference')\nres_difference\n\nax = res_difference.plot(cmap='tab10')\ndf1.plot(ax=ax, facecolor='none', edgecolor='k');\n@savefig overlay_example_difference.png width=5in\ndf2.plot(ax=ax, facecolor='none', edgecolor='k');\n```\n\n----------------------------------------\n\nTITLE: Performing Spatial Index Queries\nDESCRIPTION: Demonstrates basic spatial index queries using the sindex property to find intersecting geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbbox_query_inside = nyc.sindex.query(point_inside)\nbbox_query_outside = nyc.sindex.query(point_outside)\nbbox_query_inside, bbox_query_outside\n```\n\n----------------------------------------\n\nTITLE: Creating Choropleth Map with Population Data\nDESCRIPTION: Creates a choropleth map where areas are colored based on population values from the POP2010 column. This demonstrates using the column parameter to create value-based maps.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Plot by population\nchicago.plot(column=\"POP2010\");\n```\n\n----------------------------------------\n\nTITLE: Performing Intersection Operation with GeoDataFrame.overlay - Python\nDESCRIPTION: This snippet shows how to use the intersection operation in GeoPandas which returns only geometries contained by both input GeoDataFrames, df1 and df2.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nres_intersection = df1.overlay(df2, how='intersection')\nres_intersection\n\nax = res_intersection.plot(cmap='tab10')\ndf1.plot(ax=ax, facecolor='none', edgecolor='k');\n@savefig overlay_example_intersection.png width=5in\ndf2.plot(ax=ax, facecolor='none', edgecolor='k');\n```\n\n----------------------------------------\n\nTITLE: Basic Dissolve Operation in GeoPandas\nDESCRIPTION: This code shows how to perform a basic dissolve operation on the Nepal data, aggregating districts into zones without any additional aggregation functions.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/aggregation_with_dissolve.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnepal_zone = nepal[['zone', 'geometry']]\nzones = nepal_zone.dissolve(by='zone')\n\n@savefig zones1.png\nzones.plot();\n\nzones.head()\n```\n\n----------------------------------------\n\nTITLE: Sampling Raster Data and Storing Values in GeoDataFrame - Python\nDESCRIPTION: This snippet performs the actual sampling of the raster data at the specified coordinates and stores the resulting values in a new column 'value' in the GeoDataFrame. It is designed to handle multiple bands from the raster data if present.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"value\"] = [x for x in src.sample(coord_list)]\ngdf.head()\n```\n\n----------------------------------------\n\nTITLE: Performing Symmetric Difference with GeoDataFrame.overlay - Python\nDESCRIPTION: This example uses symmetric difference to obtain geometries that are part of either one of the GeoDataFrames but not both, using GeoPandas' overlay method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres_symdiff = df1.overlay(df2, how='symmetric_difference')\nres_symdiff\n\nax = res_symdiff.plot(cmap='tab10')\ndf1.plot(ax=ax, facecolor='none', edgecolor='k');\n@savefig overlay_example_symdiff.png width=5in\ndf2.plot(ax=ax, facecolor='none', edgecolor='k');\n```\n\n----------------------------------------\n\nTITLE: Adding Separated Map Base and Label Layers\nDESCRIPTION: Creates a plot with separated base and label layers from CartoDB. This approach allows the data to appear between the map background and labels, preventing data from obscuring important map elements.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels)\ncx.add_basemap(ax, source=cx.providers.CartoDB.PositronOnlyLabels)\n```\n\n----------------------------------------\n\nTITLE: Clipping Chicago Data\nDESCRIPTION: Demonstrate clipping of Chicago community data using a custom polygon and visualize the results.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plot_clip.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchicago_clipped = chicago.clip(polygon)\n\n# Plot the clipped data\n# The plot below shows the results of the clip function applied to the chicago\n# sphinx_gallery_thumbnail_number = 2\nfig, ax = plt.subplots(figsize=(12, 8))\nchicago_clipped.plot(ax=ax, color=\"purple\")\nchicago.boundary.plot(ax=ax)\npoly_gdf.boundary.plot(ax=ax, color=\"red\")\nax.set_title(\"Chicago Clipped\", fontsize=20)\nax.set_axis_off()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Using geometric operations through the 'geo' accessor\nDESCRIPTION: Shows how to perform spatial operations between two geometry Series using the 'geo' accessor. In this example, it calculates the distance between corresponding points in two Series.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/pandas_accessor.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns2 = pd.Series(\n    [Point(-1, -2), Point(-3, -4), Point(-5, -6)],\n    dtype='geometry',\n)\ns.geo.distance(s2)\n```\n\n----------------------------------------\n\nTITLE: Writing GeoPandas DataFrame to PostGIS Database in Python\nDESCRIPTION: This snippet demonstrates how to write a GeoPandas GeoDataFrame to a PostGIS database using SQLAlchemy. It creates a database connection and uses the to_postgis method to write the data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\ndb_connection_url = \"postgresql://myusername:mypassword@myhost:5432/mydatabase\";\nengine = create_engine(db_connection_url)\ncountries_gdf.to_postgis(\"countries_table\", con=engine)\n```\n\n----------------------------------------\n\nTITLE: Dropping Duplicate Geometries in GeoPandas using normalize\nDESCRIPTION: This snippet shows how to drop duplicate geometries in GeoPandas by first normalizing the geometry column and then using the standard drop_duplicates method. This approach ensures that geometries with different coordinate orders but identical shapes are treated as duplicates.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/how_to.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ngdf[\"geometry\"] = gdf.normalize()\ngdf.drop_duplicates()\n```\n\n----------------------------------------\n\nTITLE: Re-projecting Geospatial Data using Fiona and GDAL in Python\nDESCRIPTION: This snippet demonstrates how to use Fiona and GDAL to re-project geospatial data. It includes functions to convert CRS to Fiona-compatible format, transform geometries, and applies the transformation to a GeoPandas DataFrame of world land data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/reproject_fiona.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\n\nimport fiona\nimport geopandas\nfrom fiona.transform import transform_geom\nfrom packaging import version\nfrom pyproj import CRS\nfrom pyproj.enums import WktVersion\nfrom shapely.geometry import mapping, shape\n\n\n# set up Fiona transformer\ndef crs_to_fiona(proj_crs):\n    proj_crs = CRS.from_user_input(proj_crs)\n    if version.parse(fiona.__gdal_version__) < version.parse(\"3.0.0\"):\n        fio_crs = proj_crs.to_wkt(WktVersion.WKT1_GDAL)\n    else:\n        # GDAL 3+ can use WKT2\n        fio_crs = proj_crs.to_wkt()\n    return fio_crs\n\ndef base_transformer(geom, src_crs, dst_crs):\n    return shape(\n        transform_geom(\n            src_crs=crs_to_fiona(src_crs),\n            dst_crs=crs_to_fiona(dst_crs),\n            geom=mapping(geom),\n            antimeridian_cutting=True,\n        )\n    )\n\n# load natural earth land data\nworld = geopandas.read_file(\"https://naciscdn.org/naturalearth/110m/physical/ne_110m_land.zip\")\n\ndestination_crs = \"EPSG:3395\"\nforward_transformer = partial(base_transformer, src_crs=world.crs, dst_crs=destination_crs)\n\n# Reproject to Mercator (after dropping Antartica)\nworld = world.drop(7)\nwith fiona.Env(OGR_ENABLE_PARTIAL_REPROJECTION=\"YES\"):\n    mercator_world = world.set_geometry(world.geometry.apply(forward_transformer), crs=destination_crs)\n```\n\n----------------------------------------\n\nTITLE: Plotting GeoDataFrame on a Map\nDESCRIPTION: Visualizes the GeoDataFrame by plotting it on a map of South America, highlighting the specified locations using Matplotlib and GeoPandas. Assumes access to geographic datasets via geodatasets.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nworld = geopandas.read_file(get_path(\"naturalearth.land\"))\n\n# We restrict to South America.\nax = world.clip([-90, -55, -25, 15]).plot(color=\"white\", edgecolor=\"black\")\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax, color=\"red\")\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating GeoSeries in Python with GeoPandas\nDESCRIPTION: Creates a GeoSeries containing three polygon geometries using Shapely and GeoPandas. Demonstrates basic instantiation of geometric objects and their string representation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import geopandas\n>>> from shapely.geometry import Polygon\n>>> p1 = Polygon([(0, 0), (1, 0), (1, 1)])\n>>> p2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])\n>>> p3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])\n>>> g = geopandas.GeoSeries([p1, p2, p3])\n>>> g\n0         POLYGON ((0 0, 1 0, 1 1, 0 0))\n1    POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))\n2    POLYGON ((2 0, 3 0, 3 1, 2 1, 2 0))\ndtype: geometry\n```\n\n----------------------------------------\n\nTITLE: Computing Convex Hull of Geometries in Python with GeoPandas\nDESCRIPTION: Shows how to compute the convex hull of each geometry in a GeoDataFrame. The convex hull is the smallest convex polygon that contains all points in the geometry.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> boros['geometry'].convex_hull\nBoroCode\n1    POLYGON ((977855.4451904297 188082.3223876953,...\n2    POLYGON ((1017949.977600098 225426.8845825195,...\n3    POLYGON ((988872.8212280273 146772.0317993164,...\n4    POLYGON ((1000721.531799316 136681.776184082, ...\n5    POLYGON ((915517.6877458114 120121.8812543372,...\ndtype: geometry\n```\n\n----------------------------------------\n\nTITLE: Calculating Fractional Area in GeoPandas - Python\nDESCRIPTION: Calculates the fractional area of intersected geometries compared to their original size using GeoPandas methods. Demonstrates performing arithmetic operations on GeoSeries objects.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nholes.area / boros.geometry.area\n# Output: Series with fractional area values for each borough\n```\n\n----------------------------------------\n\nTITLE: Reading Files with CRS in GeoPandas\nDESCRIPTION: Shows how to read a geospatial file with geopandas.read_file and retrieve its CRS information.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = geopandas.read_file(geodatasets.get_path('naturalearth.land'))\ndf.crs\n```\n\n----------------------------------------\n\nTITLE: Buffer Operation for Spatial Analysis in GeoPandas - Python\nDESCRIPTION: This code snippet showcases buffering of grocery store locations by 1km to create a spatial boundary for analysis purposes, illustrating data preparation steps in GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nchicago = geopandas.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = geopandas.read_file(geodatasets.get_path(\"geoda.groceries\"))\n\n# Project to crs that uses meters as distance measure\nchicago = chicago.to_crs(\"ESRI:102003\")\ngroceries = groceries.to_crs(\"ESRI:102003\")\n```\n\nLANGUAGE: python\nCODE:\n```\n# Look at Chicago:\n@savefig chicago_basic.png width=5in\nchicago.plot();\n\n# Now buffer groceries to find area within 1km.\n# Check CRS -- USA Contiguous Albers Equal Area, units of meters.\ngroceries.crs\n\n# make 1km buffer\ngroceries['geometry']= groceries.buffer(1000)\n@savefig groceries_buffers.png width=5in\ngroceries.plot();\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Loading Data with GeoPandas\nDESCRIPTION: This snippet imports necessary libraries and loads geospatial data using GeoPandas. It uses the 'naturalearth.land' dataset from the geodatasets package.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport geopandas\nfrom cartopy import crs as ccrs\nfrom geodatasets import get_path\n\npath = get_path(\"naturalearth.land\")\ndf = geopandas.read_file(path)\n```\n\n----------------------------------------\n\nTITLE: Renaming Geometry Column in GeoDataFrame in Python\nDESCRIPTION: This code snippet illustrates how to rename the active geometry column of a GeoDataFrame and verify the new name. Renaming geometries is essential for maintaining clarity when working with multiple geometry types in a dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncolombia = colombia.rename_geometry('borders')\ncolombia.geometry.name\n```\n\n----------------------------------------\n\nTITLE: Performing Attribute Joins with GeoDataFrames\nDESCRIPTION: Shows how to merge GeoDataFrames with regular DataFrames using common attributes. Demonstrates joining community shapes with community names using area IDs.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mergingdata.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# `chicago_shapes` is GeoDataFrame with community shapes and area IDs\nchicago_shapes.head()\n\n# `chicago_names` is DataFrame with community names and area ID\nchicago_names.head()\n\n# Merge with `merge` method on shared variable (area ID):\nchicago_shapes = chicago_shapes.merge(chicago_names, on='NID')\nchicago_shapes.head()\n```\n\n----------------------------------------\n\nTITLE: Plotting GeoSeries in Python with GeoPandas\nDESCRIPTION: Shows how to create a simple plot of a GeoSeries using the integrated plotting functionality built on matplotlib. GeoPandas objects have a plot method for quick visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> g.plot()\n```\n\n----------------------------------------\n\nTITLE: Basic Interactive Map Creation\nDESCRIPTION: Shows the simplest way to create an interactive map using the explore() method on a GeoDataFrame.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/interactive_mapping.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnybb.explore()\n```\n\n----------------------------------------\n\nTITLE: Adding a Basemap with Controlled Zoom Level\nDESCRIPTION: Adds a basemap with a specified zoom level (12) to control the level of detail in the map tiles. Higher zoom values show more detail but result in larger downloads.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax, zoom=12)\n```\n\n----------------------------------------\n\nTITLE: Buffering Geometric Objects in GeoSeries - Python\nDESCRIPTION: This snippet shows how to apply a buffer operation to each geometry in a GeoSeries, returning a new GeoSeries with buffered polygons. The method requires specifying a buffer distance.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ng.buffer(0.5)\n# Output: GeoSeries with buffered polygons\n```\n\n----------------------------------------\n\nTITLE: Loading GeoPandas Datasets for Mapping Examples\nDESCRIPTION: Loads example datasets for Chicago community population data and groceries locations using geodatasets package. These datasets will be used throughout the mapping examples.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nchicago = geopandas.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = geopandas.read_file(geodatasets.get_path(\"geoda.groceries\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Example GeoDataFrames with Shapely - Python\nDESCRIPTION: This code snippet demonstrates how to create example GeoDataFrames using the Shapely library to define polygons within a GeoSeries. These GeoDataFrames, df1 and df2, are used for demonstrating overlay operations in GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.geometry import Polygon\npolys1 = geopandas.GeoSeries([Polygon([(0,0), (2,0), (2,2), (0,2)]),\n                              Polygon([(2,2), (4,2), (4,4), (2,4)])])\npolys2 = geopandas.GeoSeries([Polygon([(1,1), (3,1), (3,3), (1,3)]),\n                              Polygon([(3,3), (5,3), (5,5), (3,5)])])\n\ndf1 = geopandas.GeoDataFrame({'geometry': polys1, 'df1':[1,2]})\ndf2 = geopandas.GeoDataFrame({'geometry': polys2, 'df2':[1,2]})\n```\n\n----------------------------------------\n\nTITLE: Writing Attribute Table with Pyogrio\nDESCRIPTION: Demonstrates how to write a pandas DataFrame without geometry column using Pyogrio's write_dataframe function.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/fiona_to_pyogrio.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyogrio\n>>> df = pd.DataFrame({\"data_column\": [1, 2, 3]})\n>>> pyogrio.write_dataframe(df, \"test_attribute_table.gpkg\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Plotting NYC Borough Boundaries in GeoPandas\nDESCRIPTION: Reads NYC borough boundary data from geodatasets and creates a basic plot with semi-transparent polygons and black outlines.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = geopandas.read_file(geodatasets.get_path(\"nybb\"))\nax = df.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\n```\n\n----------------------------------------\n\nTITLE: Performing and Plotting Various Overlay Operations in Python\nDESCRIPTION: These snippets demonstrate different overlay operations (union, identity, symmetric difference, and difference) and plot the results using a custom colormap.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnewdf = polydf.overlay(polydf2, how=\"union\")\nnewdf.plot(cmap=\"tab20b\")\n```\n\nLANGUAGE: python\nCODE:\n```\nnewdf = polydf.overlay(polydf2, how=\"identity\")\nnewdf.plot(cmap=\"tab20b\")\n```\n\nLANGUAGE: python\nCODE:\n```\nnewdf = polydf.overlay(polydf2, how=\"symmetric_difference\")\nnewdf.plot(cmap=\"tab20b\")\n```\n\nLANGUAGE: python\nCODE:\n```\nnewdf = polydf.overlay(polydf2, how=\"difference\")\nnewdf.plot(cmap=\"tab20b\")\n```\n\n----------------------------------------\n\nTITLE: Generating Coordinate List from GeoDataFrame - Python\nDESCRIPTION: This snippet extracts coordinates from the geometry column of the GeoDataFrame to create a list in the format required for sampling with Rasterio. The coordinates are formatted as (x, y) tuples.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncoord_list = [(x, y) for x, y in zip(gdf[\"geometry\"].x, gdf[\"geometry\"].y)]\n```\n\n----------------------------------------\n\nTITLE: Advanced Dissolve with Multiple Aggregations in GeoPandas\nDESCRIPTION: This example shows how to use the dissolve function with multiple aggregation functions, including counting districts and finding min/max populations for each zone.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/aggregation_with_dissolve.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nzones = nepal.dissolve(\n    by=\"zone\",\n    aggfunc={\n        \"district\": \"count\",\n        \"population\": [\"min\", \"max\"],\n    },\n)\nzones.head()\n```\n\n----------------------------------------\n\nTITLE: Loading GeoDataFrame from Dataset - Python\nDESCRIPTION: This snippet demonstrates how to load a GeoDataFrame using a dataset from the 'geodatasets' package. The resulting GeoDataFrame contains geographical boundaries of Chile from the 'geoda.chile_labor' dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/indexing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nchile = geopandas.read_file(geodatasets.get_path('geoda.chile_labor'))\n@savefig chile.png\nchile.plot(figsize=(8, 8));\n```\n\n----------------------------------------\n\nTITLE: Basic Examination and Plotting of GeoDataFrame\nDESCRIPTION: Examines the first few rows of the Chicago GeoDataFrame and creates a basic plot with a single color. This demonstrates the simplest form of GeoPandas mapping.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Examine the chicago GeoDataFrame\nchicago.head()\n\n# Basic plot, single color\nchicago.plot();\n```\n\n----------------------------------------\n\nTITLE: Creating Natural Breaks Choropleth Map with GeoPandas in Python\nDESCRIPTION: Demonstrates the creation of a choropleth map using the natural breaks (Jenks) classification scheme with 3 bins.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Compare this to the previous 3-bin figure with quantiles\ntracts.plot(\n    column=\"CRIME\",\n    scheme=\"natural_breaks\",\n    k=3,\n    cmap=\"OrRd\",\n    edgecolor=\"k\",\n    legend=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Area of GeoSeries - Python\nDESCRIPTION: This snippet calculates the area of each polygon in a GeoSeries and returns a pandas Series object as the result. It utilizes the 'area' attribute of GeoSeries, requiring GeoPandas to be previously installed and imported.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprint(g.area)\n# Output: Series with the area of each item in the GeoSeries\n```\n\n----------------------------------------\n\nTITLE: Creating and configuring a new conda environment for GeoPandas\nDESCRIPTION: Series of commands to create a new conda environment named 'geo_env', configure it to use conda-forge, and install GeoPandas. This approach helps avoid dependency conflicts with other installed packages.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n geo_env\nconda activate geo_env\nconda config --env --add channels conda-forge\nconda config --env --set channel_priority strict\nconda install python=3 geopandas\n```\n\n----------------------------------------\n\nTITLE: Displaying the Folium Map with Markers\nDESCRIPTION: Displays the Folium map with all the added volcano markers, allowing for interactive exploration of the data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmap\n```\n\n----------------------------------------\n\nTITLE: Formatted Scale Bar with Ticks in GeoPandas Python\nDESCRIPTION: This code snippet illustrates how to enhance the scale bar's formatting by using ticks. It allows customization of the scale bar's maximum length, major and minor divisions, colors, and tick positioning through a detailed `bar` dictionary. This snippet expands on the basic scale bar by adding significant styling options for improved visual clarity on geographical maps.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nax = nybb.plot()\nscale_bar(\n    ax,\n    location=\"upper left\",\n    style=\"ticks\",\n    bar={\n        \"projection\": nybb.crs,\n        \"max\": 12,\n        \"major_div\": 2,\n        \"minor_div\": 3,\n        \"minor_type\": \"first\",\n        \"tick_loc\": \"middle\",\n        \"tickcolors\": \"blue\",\n        \"basecolors\": \"blue\",\n        \"tickwidth\": 1.5,\n    },\n    labels={\"loc\": \"above\", \"style\": \"major\"},\n    units={\"loc\": \"bar\", \"fontsize\": 8},\n    text={\"fontfamily\": \"monospace\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Identity Operation with GeoDataFrame.overlay - Python\nDESCRIPTION: This example utilizes the identity operation in GeoPandas, where the result consists of the surface of df1 with geometries from the overlay with df2.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres_identity = df1.overlay(df2, how='identity')\nres_identity\n\nax = res_identity.plot(cmap='tab10')\ndf1.plot(ax=ax, facecolor='none', edgecolor='k');\n@savefig overlay_example_identity.png width=5in\ndf2.plot(ax=ax, facecolor='none', edgecolor='k');\n```\n\n----------------------------------------\n\nTITLE: Intersect Operation for Spatial Analysis in GeoPandas - Python\nDESCRIPTION: This snippet illustrates the use of intersection in GeoPandas to identify the portions of community areas within proximity to grocery stores, highlighting the overlay operation in spatial analysis.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchicago_cores = chicago.overlay(groceries, how='intersection')\n@savefig chicago_cores.png width=5in\nchicago_cores.plot(alpha=0.5, edgecolor='k', cmap='tab10');\n```\n\n----------------------------------------\n\nTITLE: Plotting Point Features with Custom Markers\nDESCRIPTION: Shows how to plot point geometries (groceries) with custom markers, colors, and sizes. Uses standard pyplot styling options for marker customization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Look at capitals\n# Note use of standard `pyplot` line style options\ngroceries.plot(marker='*', color='green', markersize=5);\n```\n\n----------------------------------------\n\nTITLE: Visualizing WKT GeoDataFrame\nDESCRIPTION: Plots the GeoDataFrame containing data from WKT coordinates on a regional map, similar to the latitude and longitude approach. Requires Matplotlib and GeoPandas for plotting.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nax = world.clip([-90, -55, -25, 15]).plot(color=\"white\", edgecolor=\"black\")\n\ngdf.plot(ax=ax, color=\"red\")\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a pandas Series with geometry data type\nDESCRIPTION: Creates a pandas Series containing Shapely Point objects and specifies 'geometry' as the data type. This enables GeoPandas functionality on the regular pandas Series.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/pandas_accessor.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = pd.Series(\n    [Point(1, 2), Point(3, 4), Point(5, 6)],\n    dtype='geometry',\n)\ns\n```\n\n----------------------------------------\n\nTITLE: Appending GeoDataFrames and GeoSeries\nDESCRIPTION: Shows how to append geographic data using pandas concat function. Demonstrates appending both GeoSeries and GeoDataFrames with matching CRS.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mergingdata.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Appending GeoSeries\njoined = pd.concat([chicago.geometry, groceries.geometry])\n\n# Appending GeoDataFrames\ndouglas = chicago[chicago.community == 'DOUGLAS']\noakland = chicago[chicago.community == 'OAKLAND']\ndouglas_oakland = pd.concat([douglas, oakland])\n```\n\n----------------------------------------\n\nTITLE: Combining CartoPy and GeoPandas Plots\nDESCRIPTION: This final snippet demonstrates how to combine CartoPy and GeoPandas plots by creating a CartoPy plot of country shapes and overlaying centroids calculated with GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Generate a CartoPy figure and add the countries to it\nfig, ax = plt.subplots(subplot_kw={\"projection\": crs_new})\nax.add_geometries(new_geometries, crs=crs_new)\n\n# Calculate centroids and plot\ndf_aea_centroids = df_aea.geometry.centroid\n# Need to provide \"zorder\" to ensure the points are plotted above the polygons\ndf_aea_centroids.plot(ax=ax, markersize=5, color=\"r\", zorder=10)\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a New GeoDataFrame from CartoPy Projections\nDESCRIPTION: This snippet shows how to create a new GeoDataFrame using the geometries projected by CartoPy and plot it using GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf_aea = geopandas.GeoDataFrame(\n    df.drop(columns=\"geometry\"), geometry=new_geometries, crs=crs_new.proj4_init\n)\ndf_aea.plot()\n```\n\n----------------------------------------\n\nTITLE: Adding Borough Polygons to Folium Map\nDESCRIPTION: Iterates through borough geometries, simplifies their representation, and adds them to the Folium map with borough names as popups\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor _, r in df.iterrows():\n    sim_geo = gpd.GeoSeries(r[\"geometry\"]).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j, style_function=lambda x: {\"fillColor\": \"orange\"})\n    folium.Popup(r[\"BoroName\"]).add_to(geo_j)\n    geo_j.add_to(m)\nm\n```\n\n----------------------------------------\n\nTITLE: Old vs New CRS Specification in GeoPandas\nDESCRIPTION: Demonstrates the difference between the old and new ways of specifying CRS in GeoPandas, showing the deprecated 'init' proj4 string format and the recommended EPSG code format.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n## OLD\nGeoDataFrame(..., crs={'init': 'epsg:4326'})\n# or\ngdf.crs = {'init': 'epsg:4326'}\n# or\ngdf.to_crs({'init': 'epsg:4326'})\n```\n\n----------------------------------------\n\nTITLE: Using Classification Schemes for Choropleth Maps\nDESCRIPTION: Demonstrates using the 'quantiles' classification scheme from mapclassify to create a categorized choropleth map. This groups data into equal-sized quantiles for visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nchicago.plot(column='POP2010', cmap='OrRd', scheme='quantiles');\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing GeoPandas Data\nDESCRIPTION: Load Chicago community and grocery store data from geodatasets, and create a custom polygon for clipping. Ensures all data is in the same CRS.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plot_clip.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nchicago = geopandas.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = geopandas.read_file(geodatasets.get_path(\"geoda.groceries\")).to_crs(chicago.crs)\n\n# Create a subset of the chicago data that is just the South American continent\nnear_west_side = chicago[chicago[\"community\"] == \"NEAR WEST SIDE\"]\n\n# Create a custom polygon\npolygon = box(-87.8, 41.90, -87.5, 42)\npoly_gdf = geopandas.GeoDataFrame([1], geometry=[polygon], crs=chicago.crs)\n```\n\n----------------------------------------\n\nTITLE: Creating Folium Base Map\nDESCRIPTION: Initializes a Folium map centered on New York City with a specific zoom level and tile style\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nm = folium.Map(location=[40.70, -73.94], zoom_start=10, tiles=\"CartoDB positron\")\nm\n```\n\n----------------------------------------\n\nTITLE: Reprojecting GeoDataFrame to WGS84 in GeoPandas\nDESCRIPTION: This snippet demonstrates how to reproject a GeoDataFrame's geometries to the WGS84 CRS (EPSG:4326). It sets the geometry column and visualizes the reprojected GeoDataFrame.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ngdf = gdf.set_geometry(\"geometry\")\nboroughs_4326 = gdf.to_crs(\"EPSG:4326\")\nboroughs_4326.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scale Bar for Geographic Coordinate System in Python\nDESCRIPTION: This code shows how to add a scale bar to a GeoPandas map using a geographic coordinate system with degrees as units.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnybb = gpd.read_file(get_path(\"nybb\"))\nnybb = nybb.to_crs(4326)  # Using geographic WGS 84\n\nax = nybb.plot()\nax.add_artist(ScaleBar(distance_meters))\n```\n\n----------------------------------------\n\nTITLE: Creating a Heatmap of Volcano Density\nDESCRIPTION: Creates a heatmap visualization using Folium's plugins to show the global density of volcanoes. This helps identify regions with higher concentrations of volcanic activity.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# This example uses heatmaps to visualize the density of volcanoes\n# which is more in some parts of the world compared to others.\n\nfrom folium import plugins\n\nmap = folium.Map(location=[15, 30], tiles=\"Cartodb dark_matter\", zoom_start=2)\n\nheat_data = [[point.xy[1][0], point.xy[0][0]] for point in geo_df.geometry]\n\nheat_data\nplugins.HeatMap(heat_data).add_to(map)\n\nmap\n```\n\n----------------------------------------\n\nTITLE: Adjusting Display Precision for GeoPandas in Python\nDESCRIPTION: This code modifies the global display precision setting in GeoPandas, allowing for more decimal places to be shown for coordinates in the geometry column. This adjustment aids in achieving desired precision when visualizing spatial data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngeopandas.options.display_precision = 9\ncolombia['centroid_column'].head()\n```\n\n----------------------------------------\n\nTITLE: Converting GeoPandas Data to CartoPy CRS\nDESCRIPTION: This snippet defines a CartoPy Coordinate Reference System (CRS) and converts the GeoPandas DataFrame to this CRS. It then plots the transformed data using both GeoPandas and CartoPy.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Define the CartoPy CRS object.\ncrs = ccrs.AzimuthalEquidistant()\n\n# This can be converted into a `proj4` string/dict compatible with GeoPandas\ncrs_proj4 = crs.proj4_init\ndf_ae = df.to_crs(crs_proj4)\n\n# Here's what the plot looks like in GeoPandas\ndf_ae.plot()\n```\n\n----------------------------------------\n\nTITLE: Adding a Basemap to Web Mercator Projected GeoPandas Plot\nDESCRIPTION: Creates a plot with the reprojected data and adds a default OpenStreetMap basemap using contextily. This approach changes the data's CRS to match the basemap tiles.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports necessary Python packages including geopandas, matplotlib, shapely and geodatasets for spatial data handling and visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport matplotlib.pyplot as plt\nimport shapely\n\nfrom geodatasets import get_path\n```\n\n----------------------------------------\n\nTITLE: Creating Geometry Buffers\nDESCRIPTION: Creates buffered versions of both borough polygons and centroids with a 10000 feet radius.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# buffering the active geometry by 10 000 feet (geometry is already in feet)\ngdf[\"buffered\"] = gdf.buffer(10000)\n\n# buffering the centroid geometry by 10 000 feet (geometry is already in feet)\ngdf[\"buffered_centroid\"] = gdf[\"centroid\"].buffer(10000)\n```\n\n----------------------------------------\n\nTITLE: Setting a CRS in GeoPandas\nDESCRIPTION: Demonstrates how to set the coordinate reference system (CRS) for a GeoSeries using either the EPSG code directly or with the epsg parameter.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_geoseries = my_geoseries.set_crs(\"EPSG:4326\")\nmy_geoseries = my_geoseries.set_crs(epsg=4326)\n```\n\n----------------------------------------\n\nTITLE: Adding a Basemap with Reprojected Tiles to GeoPandas Plot\nDESCRIPTION: Creates a plot with original data and adds a basemap by reprojecting the tiles to match the data's CRS. This avoids reprojecting potentially large datasets.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nax = df.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax, crs=df.crs)\n```\n\n----------------------------------------\n\nTITLE: Bounding Box Filter for Data Loading\nDESCRIPTION: Shows how to load spatial data using a specific bounding box filter\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbbox = (\n    1031051.7879884212, 224272.49231459625, 1047224.3104931959, 244317.30894023244\n)\ngdf = geopandas.read_file(\n    geodatasets.get_path(\"nybb\"),\n    bbox=bbox,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Layered Maps Method 2: Using Matplotlib Objects\nDESCRIPTION: Shows the second method for creating layered maps by manually creating matplotlib figure and axes objects. Provides more flexibility for complex visualizations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots()\n\nchicago.plot(ax=ax, color='white', edgecolor='black')\ngroceries.plot(ax=ax, marker='o', color='red', markersize=5)\nplt.show();\n```\n\n----------------------------------------\n\nTITLE: Sample Points from GeoDataFrame\nDESCRIPTION: Samples 200 random points from each feature in the GeoDataFrame using the `sample_points()` method and visualizes the sampled points on an interactive map.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nn200_sampled_points = nybb.sample_points(200)\nm = nybb.explore()\nn200_sampled_points.explore(m=m, color='red')\n```\n\n----------------------------------------\n\nTITLE: Loading New York Boroughs Geometric Data\nDESCRIPTION: Loads the nybb dataset containing polygon geometries of New York boroughs using GeoPandas and displays the first few rows\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npath = geodatasets.get_path(\"nybb\")\ndf = gpd.read_file(path)\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Interactive Map Visualization with GeoPandas\nDESCRIPTION: Example of using the new explore() method to create an interactive map visualization of a GeoDataFrame or GeoSeries using folium.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngdf.explore(column='value', scheme='quantiles')\n```\n\n----------------------------------------\n\nTITLE: Measuring Distance Between Points\nDESCRIPTION: Calculates the distance from each centroid to the first centroid in the dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfirst_point = gdf[\"centroid\"].iloc[0]\ngdf[\"distance\"] = gdf[\"centroid\"].distance(first_point)\ngdf[\"distance\"]\n```\n\n----------------------------------------\n\nTITLE: Reading GIS Files with PyOGRIO in Python\nDESCRIPTION: Example of using the new pyogrio engine option to read GIS files with geopandas.read_file(). This provides faster vectorized IO for GDAL/OGR vector data sources.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngeopandas.read_file(\"path/to/file.shp\", engine=\"pyogrio\")\n```\n\n----------------------------------------\n\nTITLE: Computing Area of Geometries with GeoSeries in Python\nDESCRIPTION: Shows how to calculate the area of each polygon in a GeoSeries. This example demonstrates that some geometric operations return standard pandas Series objects with appropriate data types.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(g.area)\n0    0.5\n1    1.0\n2    1.0\ndtype: float64\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas with all optional dependencies using pip\nDESCRIPTION: Command to install GeoPandas along with all its optional runtime dependencies using pip. This ensures a full installation with all available features.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install 'geopandas[all]'\n```\n\n----------------------------------------\n\nTITLE: Parsing WKT to GeoSeries\nDESCRIPTION: Converts the WKT format in the DataFrame to a GeoSeries using Shapely's WKT module, preparing for conversion to a GeoDataFrame. Requires Shapely and GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely import wkt\n\ndf[\"Coordinates\"] = geopandas.GeoSeries.from_wkt(df[\"Coordinates\"])\n```\n\n----------------------------------------\n\nTITLE: Changing Colormap for Choropleth Maps\nDESCRIPTION: Demonstrates changing the colormap used in choropleth maps with the cmap parameter. Uses the 'OrRd' (Orange-Red) colormap for population visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nchicago.plot(column='POP2010', cmap='OrRd');\n```\n\n----------------------------------------\n\nTITLE: Adding Basemap Layers with Different Zoom Levels\nDESCRIPTION: Creates a plot with different zoom levels for the map base (more detailed at zoom 12) and labels (larger text at zoom 10). This technique allows fine control over the appearance of each map layer.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nax = df_wm.plot(figsize=(10, 10), alpha=0.5, edgecolor=\"k\")\ncx.add_basemap(ax, source=cx.providers.CartoDB.PositronNoLabels, zoom=12)\ncx.add_basemap(ax, source=cx.providers.CartoDB.PositronOnlyLabels, zoom=10)\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas from conda-forge channel\nDESCRIPTION: Command to install GeoPandas from the conda-forge channel, which often has more up-to-date versions of geospatial packages. This is recommended for users who need the latest features or compatibility with other conda-forge packages.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install --channel conda-forge geopandas\n```\n\n----------------------------------------\n\nTITLE: Calculating Polygon Area\nDESCRIPTION: Calculates and stores the area of each polygon in a new column.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"area\"] = gdf.area\ngdf[\"area\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Static Map with Matplotlib\nDESCRIPTION: Creates a static map visualization using Matplotlib where the world map is plotted as a background and volcanoes are plotted on top, color-coded by their type.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(24, 18))\nworld.plot(ax=ax, alpha=0.4, color=\"grey\")\ngeo_df.plot(column=\"Type\", ax=ax, legend=True)\nplt.title(\"Volcanoes\")\n```\n\n----------------------------------------\n\nTITLE: Spatial Index Constructor and Methods in GeoPandas\nDESCRIPTION: Lists the constructor and methods available for spatial indexing in GeoPandas. Methods include intersection, is_empty, nearest, query, size, and valid_query_predicates. The spatial index is built upon Shapely's STRtree implementation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/reference/sindex.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nGeoSeries.sindex\n\n# Available methods:\nSpatialIndex.intersection()\nSpatialIndex.is_empty()\nSpatialIndex.nearest()\nSpatialIndex.query()\nSpatialIndex.size()\nSpatialIndex.valid_query_predicates()\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas with conda\nDESCRIPTION: Command to install the latest version of GeoPandas using the conda package manager. This method is recommended for most users as it handles dependencies automatically.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install geopandas\n```\n\n----------------------------------------\n\nTITLE: Creating CRS from EPSG Code\nDESCRIPTION: This snippet creates a CRS object directly from an EPSG code using pyproj.  It highlights the difference in axis order compared to a CRS created from a WKT string.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> pyproj.CRS(\"EPSG:2953\")\n   <Projected CRS: EPSG:2953>\n   Name: NAD83(CSRS) / New Brunswick Stereographic\n   Axis Info [cartesian]:\n   - N[north]: Northing (metre)\n   - E[east]: Easting (metre)\n   ...\n```\n\n----------------------------------------\n\nTITLE: Handling CRS Conflicts in GeoPandas\nDESCRIPTION: Shows how the CRS error is triggered when trying to create a GeoSeries with a different CRS than the geometry array already has, and how to properly handle this situation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> array.crs\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\n...\n>>> GeoSeries(array, crs=4326)  # crs=4326 is okay, as it matches the existing CRS\n>>> GeoSeries(array, crs=3395)  # crs=3395 is forbidden as array already has CRS\nValueError: CRS mismatch between CRS of the passed geometries and 'crs'. Use 'GeoSeries.set_crs(crs, allow_override=True)' to overwrite CRS or 'GeoSeries.to_crs(crs)' to reproject geometries.\n    GeoSeries(array, crs=3395).crs\n```\n\n----------------------------------------\n\nTITLE: Applying Buffer Operation on GeoSeries in Python\nDESCRIPTION: Demonstrates the buffer operation which creates a polygon at a specified distance around each geometry in the GeoSeries. This example shows that geometric operations often return GeoSeries objects.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> g.buffer(0.5)\n0    POLYGON ((-0.3535533905932737 0.35355339059327...\n1    POLYGON ((-0.5 0, -0.5 1, -0.4975923633360985 ...\n2    POLYGON ((1.5 0, 1.5 1, 1.502407636663901 1.04...\ndtype: geometry\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas using Conda\nDESCRIPTION: The recommended way to install GeoPandas using conda package manager and the conda-forge channel. This method helps avoid installation issues related to C dependencies.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge geopandas\n```\n\n----------------------------------------\n\nTITLE: Creating CRS from proj4 String\nDESCRIPTION: This snippet shows how to create a CRS object from a proj4 string using pyproj. It illustrates the issue where a CRS might be a 'Bound CRS' due to the 'towgs84' clause.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyproj\n>>> crs = pyproj.CRS(\"+proj=lcc +lat_1=51.16666723333333 +lat_2=49.8333339 +lat_0=90 +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438 +ellps=intl +towgs84=106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1 +units=m +no_defs\")\n>>> crs\n   <Bound CRS: +proj=lcc +lat_1=51.16666723333333 +lat_2=49.83333 ...>\n   Name: unknown\n   Axis Info [cartesian]:\n   - E[east]: Easting (metre)\n   - N[north]: Northing (metre)\n   Area of Use:\n   - undefined\n   Coordinate Operation:\n   - name: Transformation from unknown to WGS84\n   - method: Position Vector transformation (geog2D domain)\n   Datum: Unknown based on International 1909 (Hayford) ellipsoid\n   - Ellipsoid: International 1909 (Hayford)\n   - Prime Meridian: Greenwich\n   Source CRS: unknown\n```\n\n----------------------------------------\n\nTITLE: Reading GeoDataFrame from GeoDatasets in Python\nDESCRIPTION: This snippet demonstrates how to read a GeoDataFrame from a dataset using GeoPandas. It utilizes the 'geodatasets' library to access the 'geoda.malaria' dataset and then displays the first few records. This is useful for visualizing spatial data contained in files.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\ncolombia = geopandas.read_file(geodatasets.get_path('geoda.malaria'))\ncolombia.head()\n```\n\n----------------------------------------\n\nTITLE: Creating DataFrame with WKT Coordinates\nDESCRIPTION: Sets up a DataFrame where city coordinates are stored in WKT format, a string format representing geometric objects. Requires Pandas for DataFrame operations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(\n    {\n        \"City\": [\"Buenos Aires\", \"Brasilia\", \"Santiago\", \"Bogota\", \"Caracas\"],\n        \"Country\": [\"Argentina\", \"Brazil\", \"Chile\", \"Colombia\", \"Venezuela\"],\n        \"Coordinates\": [\n            \"POINT(-58.66 -34.58)\",\n            \"POINT(-47.91 -15.78)\",\n            \"POINT(-70.66 -33.45)\",\n            \"POINT(-74.08 4.60)\",\n            \"POINT(-66.86 10.48)\",\n        ],\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Quantile-based Choropleth Maps with GeoPandas in Python\nDESCRIPTION: Demonstrates the creation of choropleth maps using the quantiles classification scheme with 3 and 2 bins respectively.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Splitting the data in three shows some spatial clustering around the center\ntracts.plot(\n    column=\"CRIME\", scheme=\"quantiles\", k=3, cmap=\"OrRd\", edgecolor=\"k\", legend=True\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# We can also see where the top and bottom halves are located\ntracts.plot(\n    column=\"CRIME\", scheme=\"quantiles\", k=2, cmap=\"OrRd\", edgecolor=\"k\", legend=True\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries and Loading Sample Data\nDESCRIPTION: Demonstrates how to import GeoPandas and load sample geographic datasets for Chicago communities and groceries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mergingdata.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nchicago = geopandas.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = geopandas.read_file(geodatasets.get_path(\"geoda.groceries\"))\n\n# For attribute join\nchicago_shapes = chicago[['geometry', 'NID']]\nchicago_names = chicago[['community', 'NID']]\n\n# For spatial join\nchicago = chicago[['geometry', 'community']].to_crs(groceries.crs)\n```\n\n----------------------------------------\n\nTITLE: Plotting with CartoPy\nDESCRIPTION: This snippet demonstrates how to create a plot using CartoPy with the transformed data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(subplot_kw={\"projection\": crs})\nax.add_geometries(df_ae[\"geometry\"], crs=crs)\n```\n\n----------------------------------------\n\nTITLE: Creating GeoSeries with Missing and Empty Geometries in GeoPandas\nDESCRIPTION: This snippet demonstrates how to create a GeoSeries with a polygon, a missing value, and an empty polygon. The `geopandas.GeoSeries` class along with `shapely.geometry.Polygon` is used, and the GeoSeries object `s` contains various types of geometry data. It highlights differences between missing values and empty geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/missing_empty.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.geometry import Polygon\ns = geopandas.GeoSeries([Polygon([(0, 0), (1, 1), (0, 1)]), None, Polygon([])])\ns\n```\n\n----------------------------------------\n\nTITLE: Loading Columbus Shapefile and Displaying Data with GeoPandas in Python\nDESCRIPTION: Loads a PySAL example shapefile (Columbus, OH) into a GeoPandas DataFrame and displays the first few rows. It also prints the shape of the dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# We use a PySAL example shapefile\nimport libpysal as ps\n\npth = ps.examples.get_path(\"columbus.shp\")\ntracts = gpd.GeoDataFrame.from_file(pth)\nprint(\"Observations, Attributes:\", tracts.shape)\ntracts.head()\n```\n\n----------------------------------------\n\nTITLE: Writing GIS Files with PyOGRIO in Python\nDESCRIPTION: Example of using the new pyogrio engine option to write GIS files with GeoDataFrame.to_file(). This provides faster vectorized IO for GDAL/OGR vector data sources.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngdf.to_file(\"path/to/output.shp\", engine=\"pyogrio\")\n```\n\n----------------------------------------\n\nTITLE: PostGIS Database Operations in GeoPandas\nDESCRIPTION: Methods for reading from and writing to PostGIS databases using GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/reference/io.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nread_postgis\nGeoDataFrame.to_postgis\n```\n\n----------------------------------------\n\nTITLE: Using proj4 Strings vs EPSG Codes in GeoPandas\nDESCRIPTION: Shows how to replace a full proj4 string with an equivalent EPSG code for better CRS specification.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngdf.crs = \"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\"\n```\n\n----------------------------------------\n\nTITLE: Plotting Overlayed GeoDataFrames in Matplotlib - Python\nDESCRIPTION: This snippet showcases the plotting of two GeoDataFrames df1 and df2 using Matplotlib to visually represent their overlapping areas or lack thereof. This serves as a precursor to set operations using overlay.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/set_operations.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nax = df1.plot(color='red');\n@savefig overlay_example.png width=5in\ndf2.plot(ax=ax, color='green', alpha=0.5);\n```\n\n----------------------------------------\n\nTITLE: Plotting Unclassified Choropleth Map with GeoPandas in Python\nDESCRIPTION: Creates a basic choropleth map of the CRIME variable without any classification scheme, using a continuous color gradient.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntracts.plot(column=\"CRIME\", cmap=\"OrRd\", edgecolor=\"k\", legend=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Centroid Markers to Folium Map\nDESCRIPTION: Iterates through borough data, places centroid markers on the map with popup information about length and area\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfor _, r in df.iterrows():\n    lat = r[\"centroid\"].y\n    lon = r[\"centroid\"].x\n    folium.Marker(\n        location=[lat, lon],\n        popup=\"length: {} <br> area: {}\".format(r[\"Shape_Leng\"], r[\"Shape_Area\"]),\n    ).add_to(m)\n\nm\n```\n\n----------------------------------------\n\nTITLE: Creating Folium Map with CartoDB Positron Tileset\nDESCRIPTION: Initializes a Folium map centered at specific coordinates using the CartoDB Positron tileset for a clean, light background.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# CartoDB Positron\nmap = folium.Map(location=[13.406, 80.110], tiles=\"CartoDB Positron\", zoom_start=9)\nmap\n```\n\n----------------------------------------\n\nTITLE: Selecting Southern Part of Chile - Python\nDESCRIPTION: This snippet utilizes the coordinate-based indexing feature of GeoPandas to select only the southern part of Chile that extends south of -50 degrees latitude. The result is visualized in a plot.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/indexing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsouthern_chile = chile.cx[:, :-50]\n@savefig chile_southern.png\nsouthern_chile.plot(figsize=(8, 8));\n```\n\n----------------------------------------\n\nTITLE: Read and Simplify New York Borough Data\nDESCRIPTION: Reads the New York Borough dataset from geodatasets into a GeoDataFrame, then simplifies the geometry to reduce the file size and improve rendering speed.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnybb = geopandas.read_file(geodatasets.get_path(\"nybb\"))\n# simplify geometry to save space when rendering many interactive maps\nnybb.geometry = nybb.simplify(200)\n```\n\n----------------------------------------\n\nTITLE: Reading Web URL GeoJSON\nDESCRIPTION: Demonstrates loading geospatial data directly from a web URL using geopandas.read_file()\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nurl = \"http://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_land.geojson\"\ndf = geopandas.read_file(url)\n```\n\n----------------------------------------\n\nTITLE: Customizing Scale Bar Appearance in Python\nDESCRIPTION: This snippet demonstrates various ways to customize the appearance of scale bars, including position, color, and font properties.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnybb = gpd.read_file(get_path(\"nybb\")).to_crs(32619)\nax = nybb.plot()\n\n# Position and layout\nscale1 = ScaleBar(\n    dx=1,\n    label=\"Scale 1\",\n    location=\"upper left\",  # in relation to the whole plot\n    label_loc=\"left\",\n    scale_loc=\"bottom\",  # in relation to the line\n)\n\n# Color\nscale2 = ScaleBar(\n    dx=1,\n    label=\"Scale 2\",\n    location=\"center\",\n    color=\"#b32400\",\n    box_color=\"yellow\",\n    box_alpha=0.8,  # Slightly transparent box\n)\n\n# Font and text formatting\nscale3 = ScaleBar(\n    dx=1,\n    label=\"Scale 3\",\n    font_properties={\n        \"family\": \"serif\",\n        \"size\": \"large\",\n    },  # For more information, see the cell below\n    scale_formatter=lambda value, unit: f\"> {value} {unit} <\",\n)\n\nax.add_artist(scale1)\nax.add_artist(scale2)\nax.add_artist(scale3)\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Missing Value Display\nDESCRIPTION: Creates a more advanced visualization of missing values with custom hatching, colors, and a label in the legend. Uses multiple parameters in missing_kwds to fully customize the appearance.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nchicago.plot(\n    column=\"POP2010\",\n    legend=True,\n    scheme=\"quantiles\",\n    figsize=(15, 10),\n    missing_kwds={\n        \"color\": \"lightgrey\",\n        \"edgecolor\": \"red\",\n        \"hatch\": \"///\",\n        \"label\": \"Missing values\",\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic North Arrow to a GeoPandas Map in Python\nDESCRIPTION: This code shows how to add a basic north arrow to a GeoPandas map using the north_arrow function from matplotlib-map-utils.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Making a basic arrow using the minimum amount of arguments\nax = nybb.plot()\nnorth_arrow(\n    ax, location=\"upper left\", rotation={\"crs\": nybb.crs, \"reference\": \"center\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Coordinate Reference System Transformation\nDESCRIPTION: Transforms the geometric data from a projected coordinate system (EPSG:2263) to a geographic coordinate system (WGS 84, EPSG:4326) for Folium compatibility\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf = df.to_crs(epsg=4326)\nprint(df.crs)\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Using SpatialIndex Query with Boolean Array Output\nDESCRIPTION: New feature that allows SpatialIndex.query to return results as dense or sparse boolean arrays, requiring scipy for sparse output\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSpatialIndex.query(output_format='boolean')\n```\n\n----------------------------------------\n\nTITLE: Computing Area and Unions in GeoPandas GeoSeries\nDESCRIPTION: This snippet performs spatial operations on a GeoSeries to compute areas and unions. It demonstrates how missing geometries propagate in results and how empty geometries are treated as valid geometry objects. Methods used include `s.area`, `s.union`, and `s.intersection`.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/missing_empty.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns.area\ns.union(Polygon([(0, 0), (0, 1), (1, 1), (1, 0)]))\ns.intersection(Polygon([(0, 0), (0, 1), (1, 1), (1, 0)]))\n```\n\n----------------------------------------\n\nTITLE: Controlling Layer Order with Custom zorder\nDESCRIPTION: Shows how to control the stacking order of map layers using the zorder parameter. Higher zorder values are drawn on top of lower values, regardless of geometry type.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nax = groceries.plot(color='k', zorder=2)\nchicago.plot(ax=ax, zorder=1);\n```\n\n----------------------------------------\n\nTITLE: Plotting Unclipped Data\nDESCRIPTION: Create visualization of the original unclipped data showing Chicago communities and grocery locations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plot_clip.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\nchicago.plot(ax=ax1)\npoly_gdf.boundary.plot(ax=ax1, color=\"red\")\nnear_west_side.boundary.plot(ax=ax2, color=\"green\")\ngroceries.plot(ax=ax2, color=\"purple\")\nax1.set_title(\"All Unclipped Chicago Communities\", fontsize=20)\nax2.set_title(\"All Unclipped Groceries\", fontsize=20)\nax1.set_axis_off()\nax2.set_axis_off()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Points with Geometries\nDESCRIPTION: Creates visualization comparing test points against both original geometries and their bounding boxes.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(1, 2, sharey=True, figsize=(8, 4))\n\nnyc.plot(ax=axs[0], edgecolor=\"black\", linewidth=1)\nnyc.envelope.boundary.plot(ax=axs[1], color='black')\npoints.plot(ax=axs[0], color=\"limegreen\")\npoints.plot(ax=axs[1], color=\"limegreen\");\n```\n\n----------------------------------------\n\nTITLE: Creating Folium Map with OpenStreetMap Tileset\nDESCRIPTION: Initializes a Folium map using the OpenStreetMap tileset, which provides more detailed street and landmark information.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# OpenStreetMap\nmap = folium.Map(location=[13.406, 80.110], tiles=\"OpenStreetMap\", zoom_start=9)\nmap\n```\n\n----------------------------------------\n\nTITLE: Creating GeoDataFrame from Coordinates\nDESCRIPTION: Converts the pandas DataFrame to a GeoDataFrame by creating point geometries from longitude and latitude coordinates, which allows for geospatial operations and visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create point geometries\ngeometry = geopandas.points_from_xy(df.Longitude, df.Latitude)\ngeo_df = geopandas.GeoDataFrame(\n    df[[\"Year\", \"Name\", \"Country\", \"Latitude\", \"Longitude\", \"Type\"]], geometry=geometry\n)\n\ngeo_df.head()\n```\n\n----------------------------------------\n\nTITLE: Accessing Geo Methods via Pandas Series Accessor\nDESCRIPTION: New accessor module allowing access to GeoSeries methods through pandas extension mechanism using Series.geo\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas.accessors\npandas.Series.geo\n```\n\n----------------------------------------\n\nTITLE: Creating Layered Maps Method 1: Using Axes\nDESCRIPTION: Shows the first method for creating layered maps by passing the axis from one plot to another. Creates a base map with Chicago polygons and overlays groceries points.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nbase = chicago.plot(color='white', edgecolor='black')\ngroceries.plot(ax=base, marker='o', color='red', markersize=5);\n```\n\n----------------------------------------\n\nTITLE: Reading Zipfile Spatial Data\nDESCRIPTION: Shows different methods of reading spatial data from ZIP files with various path configurations\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nzipfile = \"zip:///Users/name/Downloads/cb_2017_us_state_500k.zip\"\nstates = geopandas.read_file(zipfile)\n```\n\n----------------------------------------\n\nTITLE: Reading and Manipulating ESRI Shapefiles - Python\nDESCRIPTION: Shows how to read ESRI shapefiles using GeoPandas and perform manipulations like setting an index and sorting. It utilizes the geodatasets package for retrieving the path to shapefiles.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport geodatasets\nnybb_path = geodatasets.get_path('nybb')\nboros = geopandas.read_file(nybb_path)\nboros.set_index('BoroCode', inplace=True)\nboros.sort_index(inplace=True)\nboros\n# Output: GeoDataFrame with Borough data of NYC\n```\n\n----------------------------------------\n\nTITLE: Sample Variable Number of Points\nDESCRIPTION: Samples a variable number of points from each geometry in the GeoDataFrame by passing a list of sample sizes to the `sample_points()` method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvariable_size = nybb.sample_points([10, 50, 100, 200, 500])\nm = nybb.explore()\nvariable_size.explore(m=m, color='red')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GeoPandas normalize method effect on LineStrings\nDESCRIPTION: This example illustrates the effect of the normalize method on a GeoSeries containing two LineString objects with the same coordinates in different orders. After normalization, both LineStrings have identical WKT representations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/how_to.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> geopandas.GeoSeries([\n...     shapely.LineString([(0, 0), (1, 0), (2, 0)]),\n...     shapely.LineString([(2, 0), (1, 0), (0, 0)]),\n... ]).normalize().to_wkt()\n0    LINESTRING (0 0, 1 0, 2 0)\n1    LINESTRING (0 0, 1 0, 2 0)\ndtype: object\n```\n\n----------------------------------------\n\nTITLE: Plotting GeoSeries with Matplotlib - Python\nDESCRIPTION: Demonstrates plotting capabilities of GeoPandas using matplotlib. The snippet plots the GeoSeries object, displaying the geometries in a graphical format. Requires matplotlib and GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ng.plot()\n# Output: Plot of the GeoSeries using matplotlib\n```\n\n----------------------------------------\n\nTITLE: Feather File Operations in GeoPandas\nDESCRIPTION: Functions for reading and writing GeoPandas data in Feather format.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/reference/io.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nread_feather\nGeoDataFrame.to_feather\n```\n\n----------------------------------------\n\nTITLE: Re-projecting Geospatial Data using Rasterio and GDAL in Python\nDESCRIPTION: This snippet shows how to use Rasterio and GDAL to re-project geospatial data. It loads world land data, excludes Antarctica, and re-projects the geometries to the Mercator projection (EPSG:3395). This example requires Rasterio 1.2+ and GDAL 3+.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/reproject_fiona.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport rasterio.warp\nfrom shapely.geometry import shape\n\n# load example data\nworld = geopandas.read_file(\"https://naciscdn.org/naturalearth/110m/physical/ne_110m_land.zip\")\n# Reproject to Mercator (after dropping Antartica)\nworld = world.drop(7)\ndestination_crs = \"EPSG:3395\"\ngeometry = rasterio.warp.transform_geom(\n    src_crs=world.crs,\n    dst_crs=destination_crs,\n    geom=world.geometry.values,\n)\nmercator_world = world.set_geometry(\n    [shape(geom) for geom in geometry],\n    crs=destination_crs,\n)\n```\n\n----------------------------------------\n\nTITLE: Explode Sampled Points\nDESCRIPTION: Separates the individual sampled points into separate features in the GeoDataFrame using the `.explode()` method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmanhattan_border_points.explode(ignore_index=True).head()\n```\n\n----------------------------------------\n\nTITLE: Importing GeoPandas and Creating GeoSeries - Python\nDESCRIPTION: This snippet demonstrates how to import GeoPandas and create a GeoSeries from shapely Polygon objects. The key dependencies are GeoPandas and Shapely. It initializes geometric polygons and stores them in a GeoSeries object.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport geopandas\nfrom geopandas import GeoSeries\nfrom shapely.geometry import Polygon\np1 = Polygon([(0, 0), (1, 0), (1, 1)])\np2 = Polygon([(0, 0), (1, 0), (1, 1), (0, 1)])\np3 = Polygon([(2, 0), (3, 0), (3, 1), (2, 1)])\ng = GeoSeries([p1, p2, p3])\ng\n# Output: GeoSeries with defined polygons\n```\n\n----------------------------------------\n\nTITLE: Creating CRS from WKT String\nDESCRIPTION: This snippet creates a CRS object from a WKT string using pyproj. It highlights the potential issue of incorrect axis order in WKT definitions.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> crs = pyproj.CRS(\"\"\"PROJCS[\"NAD83(CSRS) / New Brunswick Stereographic\",\n   ...     GEOGCS[\"NAD83(CSRS)\",\n   ...         DATUM[\"NAD83_Canadian_Spatial_Reference_System\",\n   ...             SPHEROID[\"GRS 1980\",6378137,298.257222101,\n   ...                 AUTHORITY[\"EPSG\",\"7019\"]],\n   ...             AUTHORITY[\"EPSG\",\"6140\"]],\n   ...         PRIMEM[\"Greenwich\",0,\n   ...             AUTHORITY[\"EPSG\",\"8901\"]],\n   ...         UNIT[\"degree\",0.0174532925199433,\n   ...             AUTHORITY[\"EPSG\",\"9122\"]],\n   ...         AUTHORITY[\"EPSG\",\"4617\"]],\n   ...     PROJECTION[\"Oblique_Stereographic\"],\n   ...     PARAMETER[\"latitude_of_origin\",46.5],\n   ...     PARAMETER[\"central_meridian\",-66.5],\n   ...     PARAMETER[\"scale_factor\",0.999912],\n   ...     PARAMETER[\"false_easting\",2500000],\n   ...     PARAMETER[\"false_northing\",7500000],\n   ...     UNIT[\"metre\",1,\n   ...         AUTHORITY[\"EPSG\",\"9001\"]],\n   ...     AUTHORITY[\"EPSG\",\"2953\"]]\"\"\")\n\n>>> crs\n   <Projected CRS: PROJCS[\"NAD83(CSRS) / New Brunswick Stereographic\" ...>\n   Name: NAD83(CSRS) / New Brunswick Stereographic\n   Axis Info [cartesian]:\n   - E[east]: Easting (metre)\n   - N[north]: Northing (metre)\n   ...\n```\n\n----------------------------------------\n\nTITLE: Customizing North Arrow Appearance in Python\nDESCRIPTION: This snippet demonstrates how to create a more customized north arrow on a GeoPandas map, including changes to color, size, and label.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Making a more customized arrow\nax = nybb.plot()\nnorth_arrow(\n    ax,\n    location=\"upper left\",\n    scale=0.4,\n    rotation={\"crs\": nybb.crs, \"reference\": \"center\"},\n    base={\"edgecolor\": \"blue\", \"linewidth\": 2},\n    fancy=False,\n    shadow=False,  # this turns off the component\n    label={\"position\": \"top\", \"text\": \"North\", \"fontsize\": 8},\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Scale Bar to a GeoPandas Map in Python\nDESCRIPTION: This code demonstrates how to add a basic scale bar to a GeoPandas map using the scale_bar function from matplotlib-map-utils.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Making a basic scale bar using the minimum amount of arguments\n# Note that the data is auto-converted to miles\nax = nybb.plot()\nscale_bar(ax, location=\"upper left\", style=\"boxes\", bar={\"projection\": nybb.crs})\n```\n\n----------------------------------------\n\nTITLE: Identifying Missing and Empty Geometries in GeoPandas\nDESCRIPTION: This snippet demonstrates how to use `GeoSeries.isna` and `GeoSeries.is_empty` to identify missing and empty geometries, respectively. It also shows how to filter GeoSeries to exclude missing and empty geometries using logical operations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/missing_empty.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns.isna()\n```\n\nLANGUAGE: python\nCODE:\n```\ns.is_empty\n```\n\nLANGUAGE: python\nCODE:\n```\ns.is_empty | s.isna()\ns[~(s.is_empty | s.isna())]\n```\n\n----------------------------------------\n\nTITLE: Aligning GeoSeries with Missing Values in GeoPandas\nDESCRIPTION: This snippet uses the `GeoSeries.align` method to handle missing values in GeoSeries. The example reflects changes in how missing data is treated in GeoPandas v0.6.0 compared to previous versions, aligning more consistently with pandas behavior.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/missing_empty.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.geometry import Point\ns1 = geopandas.GeoSeries([Point(0, 0), Point(1, 1)], index=[0, 1])\ns2 = geopandas.GeoSeries([Point(1, 1), Point(2, 2)], index=[1, 2])\ns1\ns2\n```\n\nLANGUAGE: python\nCODE:\n```\ns1_aligned, s2_aligned = s1.align(s2)\ns1_aligned\ns2_aligned\n```\n\nLANGUAGE: python\nCODE:\n```\ns1.intersection(s2)\n```\n\n----------------------------------------\n\nTITLE: Creating DataFrame with City Coordinates\nDESCRIPTION: Initializes a standard Pandas DataFrame containing city names alongside their respective latitude and longitude coordinates. No special dependencies required beyond Pandas itself.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.DataFrame(\n    {\n        \"City\": [\"Buenos Aires\", \"Brasilia\", \"Santiago\", \"Bogota\", \"Caracas\"],\n        \"Country\": [\"Argentina\", \"Brazil\", \"Chile\", \"Colombia\", \"Venezuela\"],\n        \"Latitude\": [-34.58, -15.78, -33.45, 4.60, 10.48],\n        \"Longitude\": [-58.66, -47.91, -70.66, -74.08, -66.86],\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Getting EPSG Code from CRS Object\nDESCRIPTION: This snippet shows how to retrieve the EPSG code from a CRS object. It demonstrates that a 'Bound CRS' might not directly provide the EPSG code, but accessing the `source_crs` will.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> crs.to_epsg()\n\n>>> crs.source_crs.to_epsg()\n   31370\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Nepal District Data with GeoPandas\nDESCRIPTION: This snippet demonstrates how to load district-level data for Nepal using GeoPandas and prepare it for aggregation by renaming columns.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/aggregation_with_dissolve.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geodatasets\n\nnepal = geopandas.read_file(geodatasets.get_path('geoda.nepal'))\nnepal = nepal.rename(columns={\"name_2\": \"zone\"})  # rename to remember the column\nnepal[[\"zone\", \"geometry\"]].head()\n```\n\n----------------------------------------\n\nTITLE: Calculating Polygon Centroids\nDESCRIPTION: Computes and stores the centroid of each polygon as a new geometry column.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"centroid\"] = gdf.centroid\ngdf[\"centroid\"]\n```\n\n----------------------------------------\n\nTITLE: Adding a Scale Bar with GeoPandas in Python\nDESCRIPTION: This snippet demonstrates how to add a basic scale bar styled as boxes to a plotted geographical map using GeoPandas. It utilizes the `scale_bar` function, which requires the axis object from the plot and accepts necessary parameters for styling the scale bar based on the geographical coordinate system.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nax = nybb.plot()\nscale_bar(\n    ax, location=\"upper left\", style=\"boxes\", bar={\"projection\": nybb.crs, \"unit\": \"km\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sampling Points - Python\nDESCRIPTION: This snippet creates a set of sampling points using the Point class from shapely and generates a GeoDataFrame with these points. It demonstrates how to initialize the GeoDataFrame with a Coordinate Reference System (CRS) of EPSG:32630.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Create sampling points\npoints = [\n    Point(625466, 5621289),\n    Point(626082, 5621627),\n    Point(627116, 5621680),\n    Point(625095, 5622358),\n]\ngdf = geopandas.GeoDataFrame([1, 2, 3, 4], geometry=points, crs=32630)\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram of Crime Data using Matplotlib in Python\nDESCRIPTION: Generates a histogram of the CRIME variable from the Columbus dataset using Matplotlib. It sets labels and title for the plot.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Let's take a look at how the CRIME variable is distributed with a histogram\ntracts[\"CRIME\"].hist(bins=20)\nplt.xlabel(\"CRIME\\nResidential burglaries and vehicle thefts per 1000 households\")\nplt.ylabel(\"Number of neighbourhoods\")\nplt.title(\"Distribution of neighbourhoods by crime rate in Columbus, OH\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Transforming Centroids to Geographic Coordinate System\nDESCRIPTION: Re-projects centroids back to WGS 84 geographic coordinate system to enable marker placement on Folium map\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndf = df.to_crs(epsg=4326)\ndf[\"centroid\"] = df[\"centroid\"].to_crs(epsg=4326)\ndf.head()\n```\n\n----------------------------------------\n\nTITLE: Plotting Original Geometric Data\nDESCRIPTION: Creates a basic plot of the original geometric data using Matplotlib, demonstrating the initial polygon representation\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf.plot(figsize=(6, 6))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Clipping Grocery Store Data\nDESCRIPTION: Clip grocery store locations to the Near West Side boundary and visualize the results.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plot_clip.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngroceries_clipped = groceries.clip(near_west_side)\n\n# Plot the clipped data\n# The plot below shows the results of the clip function applied to the capital cities\nfig, ax = plt.subplots(figsize=(12, 8))\ngroceries_clipped.plot(ax=ax, color=\"purple\")\nnear_west_side.boundary.plot(ax=ax, color=\"green\")\nax.set_title(\"Groceries Clipped\", fontsize=20)\nax.set_axis_off()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Checking CRS after reprojecting in GeoPandas\nDESCRIPTION: This snippet checks the CRS of the reprojected GeoDataFrame, confirming that its geometries are now in WGS84. It is essential to ensure that the CRS has been set correctly after reprojecting.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nboroughs_4326.crs\n```\n\n----------------------------------------\n\nTITLE: Advanced Legend Customization with Axes Grid\nDESCRIPTION: Uses mpl_toolkits.axes_grid1 to create more precise control over the legend positioning. Creates a separate axis for the legend and aligns it with the main plot axis.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Plot population estimates with an accurate legend\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nfig, ax = plt.subplots(1, 1)\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"bottom\", size=\"5%\", pad=0.1)\nchicago.plot(\n    column=\"POP2010\",\n    ax=ax,\n    legend=True,\n    cax=cax,\n    legend_kwds={\"label\": \"Population in 2010\", \"orientation\": \"horizontal\"},\n);\n```\n\n----------------------------------------\n\nTITLE: Loading World Data and Examining Volcano Types\nDESCRIPTION: Loads a world map dataset using geodatasets and checks the unique types of volcanoes in the dataset.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nworld = geopandas.read_file(geodatasets.get_path(\"naturalearth.land\"))\ndf.Type.unique()\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas with pip\nDESCRIPTION: Command to install GeoPandas using pip. This method requires all dependencies to be correctly installed, which may be challenging on some platforms without pre-compiled wheels.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install geopandas\n```\n\n----------------------------------------\n\nTITLE: Geocoding with a Specific Provider in Python\nDESCRIPTION: This code snippet illustrates how to perform geocoding using GeoPandas with a specified provider. It shows how to indicate the provider as 'nominatim' and how to set a user agent for the Nominatim service. This allows for more control over the geocoding process and ensures compliance with service usage policies.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geocoding.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngeopandas.tools.geocode(boros.BoroName, provider='nominatim', user_agent=\"my-application\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Scale Bar for Projected Coordinate System in Python\nDESCRIPTION: This code demonstrates how to add a scale bar to a GeoPandas map using a projected coordinate system with meters as units.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnybb = gpd.read_file(get_path(\"nybb\"))\nnybb = nybb.to_crs(32619)  # Convert the dataset to a coordinate\n# system which uses meters\n\nax = nybb.plot()\nax.add_artist(ScaleBar(1))\n```\n\n----------------------------------------\n\nTITLE: Implementing Max-P Classification for Choropleth Maps in Python\nDESCRIPTION: Defines a function to apply the Max-P classification scheme from PySAL, adds the results as a new column to the GeoDataFrame, and plots the result.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef max_p(values, k):\n    \"\"\"\n    Given a list of values and `k` bins,\n    returns a list of their Maximum P bin number.\n    \"\"\"\n    from mapclassify import MaxP\n\n    binning = MaxP(values, k=k)\n    return binning.yb\n\n\ntracts[\"Max_P\"] = max_p(tracts[\"CRIME\"].values, k=5)\ntracts.head()\n```\n\nLANGUAGE: python\nCODE:\n```\ntracts.plot(column=\"Max_P\", cmap=\"OrRd\", edgecolor=\"k\", categorical=True, legend=True)\n```\n\n----------------------------------------\n\nTITLE: Plotting Only Boundaries Without Fill\nDESCRIPTION: Shows how to plot only the boundaries of shapes without filling the polygons. Uses the boundary attribute to extract and plot only the outline of shapes.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchicago.boundary.plot();\n```\n\n----------------------------------------\n\nTITLE: Creating a Ticks-Style Scale Bar in Python\nDESCRIPTION: This snippet shows how to create a scale bar with a 'ticks' style instead of the default 'boxes' style on a GeoPandas map.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Making the same scale bar but in the other style (ticks)\nax = nybb.plot()\nscale_bar(ax, location=\"upper left\", style=\"ticks\", bar={\"projection\": nybb.crs})\n```\n\n----------------------------------------\n\nTITLE: Accessing Geometry Data Using PyGEOS Functions in Python\nDESCRIPTION: Demonstrates the pattern of accessing geometry data using PyGEOS functions in older versions of GeoPandas, which should now be refactored for Shapely 2.0. Required: PyGEOS library. Input: Geometry data from a GeoDataFrame. Output: Minimum rotated rectangle geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/pygeos_to_shapely.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pygeos\n>>> geometries = gdf.geometry.values.data\n>>> mrr = pygeos.minimum_rotated_rectangle(geometries)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for GeoPandas Clipping\nDESCRIPTION: Import necessary Python packages including matplotlib, geopandas, shapely, and geodatasets for visualization and geometric operations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plot_clip.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport geopandas\nfrom shapely.geometry import box\nimport geodatasets\n```\n\n----------------------------------------\n\nTITLE: Handling EMPTY Geometries with Fiona and Pyogrio\nDESCRIPTION: Compares how Fiona and Pyogrio handle EMPTY and None geometries when writing to GPKG files.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/fiona_to_pyogrio.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport shapely\n\ngdf = geopandas.GeoDataFrame(geometry=[shapely.Polygon(), None], crs=31370)\ngdf.to_file(\"test_fiona.gpkg\", engine=\"fiona\")\ngdf.to_file(\"test_pyogrio.gpkg\", engine=\"pyogrio\")\ngeopandas.read_file(\"test_fiona.gpkg\").head()\ngeopandas.read_file(\"test_pyogrio.gpkg\").head()\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing GeoDataFrames for Spatial Overlay in Python\nDESCRIPTION: This snippet loads NYC borough data and generates circular geometries. It uses GeoPandas to read shapefiles and create GeoDataFrames for demonstration of spatial overlay operations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nfrom shapely.geometry import Point\nfrom geopandas import GeoDataFrame, read_file\nfrom geopandas.tools import overlay\nfrom geodatasets import get_path\n\n# NYC Boros\nzippath = get_path(\"nybb\")\npolydf = read_file(zippath)\n\n# Generate some circles\nb = [int(x) for x in polydf.total_bounds]\nN = 10\npolydf2 = GeoDataFrame(\n    [\n        {\"geometry\": Point(x, y).buffer(10000), \"value1\": x + y, \"value2\": x - y}\n        for x, y in zip(\n            range(b[0], b[2], int((b[2] - b[0]) / N)),\n            range(b[1], b[3], int((b[3] - b[1]) / N)),\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Refactoring Geometry Operations to Shapely 2.0 in Python\nDESCRIPTION: Presents the recommended approach for performing geometry operations using Shapely 2.0 without modifying code based on which geometry backend is used by GeoPandas. Required: Shapely 2.0 library. Input: Geometry array from a GeoDataFrame. Output: Minimum rotated rectangle geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/pygeos_to_shapely.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import shapely  # shapely 2.0\n>>> mrr = shapely.minimum_rotated_rectangle(gdf.geometry.array)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Geopandas and Folium\nDESCRIPTION: Imports the necessary Python libraries including pandas for data manipulation, geopandas for geospatial data, folium for interactive maps, geodatasets for accessing geographic datasets, and matplotlib for static plotting.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import Libraries\nimport pandas as pd\nimport geopandas\nimport folium\nimport geodatasets\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Data in Maps with Random NaN Values\nDESCRIPTION: Creates a demonstration dataset with missing values by randomly setting some POP2010 values to NaN. Shows how GeoPandas handles missing values in plots by default (ignoring them).\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nchicago.loc[np.random.choice(chicago.index, 30), 'POP2010'] = np.nan\nchicago.plot(column='POP2010');\n```\n\n----------------------------------------\n\nTITLE: Configuring Matplotlib Figure Size in Python\nDESCRIPTION: This snippet imports the Matplotlib library, retrieves the current figure size settings, and modifies them to increase the size of figures by 1.5 times. This configuration change is critical for ensuring plots are appropriately sized for visibility.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport matplotlib\norig = matplotlib.rcParams['figure.figsize']\nmatplotlib.rcParams['figure.figsize'] = [orig[0] * 1.5, orig[1] * 1.5]\n```\n\n----------------------------------------\n\nTITLE: Computing Polygon Centroids\nDESCRIPTION: Projects data to a projected coordinate system to compute polygon centroids and create a new column with centroid geometries\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf = df.to_crs(epsg=2263)\ndf[\"centroid\"] = df.centroid\n```\n\n----------------------------------------\n\nTITLE: Opening Raster Data with Rasterio - Python\nDESCRIPTION: This snippet opens a raster data file using Rasterio for subsequent sampling operations. The input file is specified as 's2a_l2a_fishbourne.tif'.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsrc = rasterio.open(\"s2a_l2a_fishbourne.tif\")\n```\n\n----------------------------------------\n\nTITLE: Accessing EPSG Code from CRS Object\nDESCRIPTION: This snippet shows the old way of accessing EPSG from the `.crs` attribute and the new way using the `to_epsg` method on the pyproj.CRS object.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ngdf.crs['init']\n```\n\n----------------------------------------\n\nTITLE: Displaying Head of Original GeoDataFrames and Overlay Result in Python\nDESCRIPTION: These snippets show the first few rows of the original GeoDataFrames and the result of the overlay operation to compare their attributes.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npolydf.head()\n```\n\nLANGUAGE: python\nCODE:\n```\npolydf2.head()\n```\n\nLANGUAGE: python\nCODE:\n```\nnewdf.head()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Points in GeoSeries - Python\nDESCRIPTION: Illustrates the creation of random points within specified bounds using numpy for random number generation and shapely for point geometries, assigning them to a GeoSeries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/geometric_manipulations.rst#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom shapely.geometry import Point\nxmin, xmax, ymin, ymax = 900000, 1080000, 120000, 280000\nxc = (xmax - xmin) * np.random.random(2000) + xmin\nyc = (ymax - ymin) * np.random.random(2000) + ymin\npts = GeoSeries([Point(x, y) for x, y in zip(xc, yc)])\n# Output: GeoSeries with 2000 random points\n```\n\n----------------------------------------\n\nTITLE: Geometry Filter for Data Loading\nDESCRIPTION: Demonstrates filtering spatial data loading based on a geometry mask\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/io.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngdf_mask = geopandas.read_file(\n    geodatasets.get_path(\"geoda.nyc\")\n)\ngdf = geopandas.read_file(\n    geodatasets.get_path(\"geoda.nyc education\"),\n    mask=gdf_mask[gdf_mask.name==\"Coney Island\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing CRS Objects with EPSG Code\nDESCRIPTION: This snippet demonstrates how to compare a CRS object created from a WKT string with an EPSG code. It shows that they might not be equal due to differences in axis order.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> crs == \"EPSG:2953\"\n   False\n```\n\n----------------------------------------\n\nTITLE: Loading NYC Spatial Data\nDESCRIPTION: Loads New York City subborough spatial data using geopandas read_file function.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnyc = geopandas.read_file(get_path(\"geoda nyc\"))\n```\n\n----------------------------------------\n\nTITLE: Changing Matplotlib Figure Size Back in Python\nDESCRIPTION: This snippet restores the original Matplotlib figure size settings after modifications. This is important for ensuring that any subsequent plots use the initial configuration, maintaining consistency in figure sizes throughout analyses.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/data_structures.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmatplotlib.rcParams['figure.figsize'] = orig\n```\n\n----------------------------------------\n\nTITLE: Dissolve with Population Aggregation in GeoPandas\nDESCRIPTION: This snippet demonstrates how to use the dissolve function with an aggregation function to sum population data when aggregating districts into zones.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/aggregation_with_dissolve.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnepal_pop = nepal[['zone', 'geometry', 'population']]\nzones = nepal_pop.dissolve(by='zone', aggfunc='sum')\n\n@savefig zones2.png\nzones.plot(column = 'population', scheme='quantiles', cmap='YlOrRd');\n\nzones.head()\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Libraries for GeoPandas\nDESCRIPTION: This snippet imports essential libraries, including GeoPandas and Matplotlib, to facilitate the creation and visualization of GeoDataFrames. Dependencies include Pandas, GeoPandas, and Matplotlib.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport geopandas\nimport matplotlib.pyplot as plt\nfrom geodatasets import get_path\n```\n\n----------------------------------------\n\nTITLE: Customizing the Display of Missing Values in Maps\nDESCRIPTION: Demonstrates customizing how missing values are displayed in maps using the missing_kwds parameter. First example shows a basic light grey fill for areas with missing data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nchicago.plot(column='POP2010', missing_kwds={'color': 'lightgrey'});\n```\n\n----------------------------------------\n\nTITLE: Setting GeoDataFrame Index\nDESCRIPTION: Sets borough names as the index of the GeoDataFrame for easier data access.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngdf = gdf.set_index(\"BoroName\")\n```\n\n----------------------------------------\n\nTITLE: Converting GeoPandas Data to Web Mercator CRS\nDESCRIPTION: Transforms the NYC borough data to the Web Mercator projection (EPSG:3857), which is the standard projection used by most web map tiles.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf_wm = df.to_crs(epsg=3857)\n```\n\n----------------------------------------\n\nTITLE: Nearest Spatial Join in GeoPandas\nDESCRIPTION: Example of using the new sjoin_nearest() method to perform a spatial join based on proximity, with an optional maximum search radius.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\njoined = gdf1.sjoin_nearest(gdf2, max_distance=1000)\n```\n\n----------------------------------------\n\nTITLE: Sample Points with Cluster Poisson Process\nDESCRIPTION: Samples points using a 'cluster_poisson' process, requiring the `pointpats` package. Parameters include the method name, total size, number of seeds, and cluster radius.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsample_t = nybb.sample_points(method='cluster_poisson', size=50, n_seeds=5, cluster_radius=7500)\n```\n\n----------------------------------------\n\nTITLE: Listing GeoPandas Dependencies in requirements.txt Format\nDESCRIPTION: This snippet enumerates the required and optional dependencies for the GeoPandas project, including version specifications. It covers core libraries, database access tools, geocoding, plotting libraries, testing frameworks, and additional utilities.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# required\nnumpy>=1.24\npyogrio>=0.7.2\npandas>=2.0\npyproj>=3.5.0\nshapely>=2.0.0\npackaging\n\n# geodatabase access\npsycopg2-binary>=2.8.0\npsycopg[binary]>=3.1.0\nSQLAlchemy>=2.0\n\n# geocoding\ngeopy\n\n# plotting\nmatplotlib>=3.7\nmapclassify>=2.5\nxyzservices\nfolium\n\n# testing\npytest>=3.1.0\npytest-cov\npytest-xdist\npytest-doctestplus\nfsspec\ncodecov\ngeodatasets\n\n# styling\npre-commit\nruff\n\n# PostGIS writing\nGeoAlchemy2\n\n# parquet\npyarrow>=10.0.0\ngeoarrow-pyarrow\n\n# sparse\nscipy\n\n# sampling\npointpats\n\n# io\nfiona\n```\n\n----------------------------------------\n\nTITLE: Using Pandas Index with GeoDataFrame Plot\nDESCRIPTION: Enhancement allowing pd.Index as input for the column parameter in GeoDataFrame.plot method\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nGeoDataFrame.plot(column=pd.Index([]))\n```\n\n----------------------------------------\n\nTITLE: SQL Left Outer Join PostGIS Example\nDESCRIPTION: SQL query demonstrating a left outer spatial join between points and polygons using PostGIS ST_Intersects function.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/spatial_joins.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pts.geom, pts.id as ptid, polys.id as polyid  \nFROM pts\nLEFT OUTER JOIN polys\nON ST_Intersects(pts.geom, polys.geom);\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Git\nDESCRIPTION: This snippet shows the command used to commit changes to a local Git repository with an explanatory message. The GeoPandas project follows a specific convention for commit message prefixes and layout, as detailed in the documentation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m\n```\n\n----------------------------------------\n\nTITLE: Printing GeoDataFrame Preview\nDESCRIPTION: Displays the first few rows of the newly created GeoDataFrame to verify its contents. Uses standard Pandas DataFrame methods for output.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/create_geopandas_from_pandas.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(gdf.head())\n```\n\n----------------------------------------\n\nTITLE: Plotting NYC Boroughs GeoDataFrame in Python\nDESCRIPTION: This snippet plots the NYC boroughs GeoDataFrame using the default plot method of GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/overlays.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npolydf.plot()\n```\n\n----------------------------------------\n\nTITLE: Version Number Declaration\nDESCRIPTION: Specifies the version number 2.0.0 for the GeoPandas library. This follows semantic versioning format with major version 2, minor version 0, and patch version 0.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/geopandas/tests/data/naturalearth_cities/naturalearth_cities.VERSION.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2.0.0\n```\n\n----------------------------------------\n\nTITLE: SQL Inner Join PostGIS Example\nDESCRIPTION: SQL query demonstrating an inner spatial join between points and polygons using PostGIS ST_Intersects function.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/spatial_joins.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT pts.geom, pts.id as ptid, polys.id as polyid  \nFROM pts\nINNER JOIN polys\nON ST_Intersects(pts.geom, polys.geom);\n```\n\n----------------------------------------\n\nTITLE: Building GeoPandas Documentation with Sphinx\nDESCRIPTION: This snippet shows how to build the GeoPandas documentation using Sphinx. The user navigates to the `doc` folder and executes `make html`. The resulting HTML pages are then located in the `doc/build/html` directory.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Setting Default IO Engine in GeoPandas\nDESCRIPTION: Shows how to configure Pyogrio as the default I/O engine globally in GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/fiona_to_pyogrio.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ngeopandas.options.io_engine = \"pyogrio\"\n```\n\n----------------------------------------\n\nTITLE: Getting Polygon Boundary\nDESCRIPTION: Extracts and stores the boundary of each polygon as a new geometry column.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"boundary\"] = gdf.boundary\ngdf[\"boundary\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing geometry properties via the 'geo' accessor\nDESCRIPTION: Demonstrates accessing the x-coordinates of all points in the Series using the 'geo' accessor. This provides access to geometry properties without converting to a GeoSeries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/pandas_accessor.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns.geo.x\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Ruff\nDESCRIPTION: This snippet illustrates how to install pre-commit hooks to automatically run Ruff before each Git commit. It first checks if pre-commit is installed and installs it if necessary.  Then it installs the GeoPandas pre-commit configuration.  These hooks help maintain code quality by ensuring Ruff checks pass before committing changes.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install pre-commit\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Checking the Coordinate Reference System (CRS) of GeoPandas Data\nDESCRIPTION: Examines the current coordinate reference system of the loaded NYC borough data. This is important to know before adding basemaps, which typically use Web Mercator (EPSG:3857).\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf.crs\n```\n\n----------------------------------------\n\nTITLE: Creating Convex Hull\nDESCRIPTION: Generates and plots convex hull of polygons with boundaries overlay.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"convex_hull\"] = gdf.convex_hull\n\n# saving the first plot as an axis and setting alpha (transparency) to 0.5\nax = gdf[\"convex_hull\"].plot(alpha=0.5)\n# passing the first plot and setting linewidth to 0.5\ngdf[\"boundary\"].plot(ax=ax, color=\"white\", linewidth=0.5)\n```\n\n----------------------------------------\n\nTITLE: Parquet File Operations in GeoPandas\nDESCRIPTION: Methods for handling Parquet file format in GeoPandas, including reading and writing operations.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/reference/io.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nread_parquet\nGeoDataFrame.to_parquet\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean Distance\nDESCRIPTION: Computes the mean of previously calculated distances using pandas functionality.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngdf[\"distance\"].mean()\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks in GeoPandas\nDESCRIPTION: A shell command to install pre-commit hooks within the GeoPandas repository. Executing this from the root directory sets up automatic format checks using ruff during commits. Pre-commit must be installed prior to running this command.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Using Pandas Plotting Styles with GeoPandas\nDESCRIPTION: Demonstrates using pandas-style scatter plot with GeoPandas data. Shows the relationship between population in 2000 and 2010 using a scatter plot instead of a map.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nchicago.plot(kind=\"scatter\", x=\"POP2010\", y=\"POP2000\")\n```\n\n----------------------------------------\n\nTITLE: Writing GeoDataFrame to File\nDESCRIPTION: Shows how to write a GeoDataFrame to a file in GeoJSON format using to_file() method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ngdf.to_file(\"my_file.geojson\", driver=\"GeoJSON\")\n```\n\n----------------------------------------\n\nTITLE: Importing GeoPandas accessor for pandas integration\nDESCRIPTION: This code imports the necessary modules to register the 'geo' accessor on pandas.Series. The geopandas.accessors import registers the accessor, even though it's not directly used in the code.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/pandas_accessor.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import geopandas.accessors to register the \"geo\" accessor.\nimport geopandas.accessors  # noqa # pylint: disable=unused-import\nimport pandas as pd\nfrom shapely import Point\n```\n\n----------------------------------------\n\nTITLE: SQL Right Outer Join PostGIS Example\nDESCRIPTION: SQL query demonstrating a right outer spatial join between points and polygons using PostGIS ST_Intersects function.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/spatial_joins.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT polys.geom, pts.id as ptid, polys.id as polyid  \nFROM pts\nRIGHT OUTER JOIN polys\nON ST_Intersects(pts.geom, polys.geom);\n```\n\n----------------------------------------\n\nTITLE: Loading and Filtering Volcano Data with Pandas\nDESCRIPTION: Reads a CSV file containing volcano data using pandas and filters it to keep only the relevant columns needed for analysis.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_with_folium.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf1 = pd.read_csv(\"volcano_data_2010.csv\")\n\n# Keep only relevant columns\ndf = df1.loc[:, (\"Year\", \"Name\", \"Country\", \"Latitude\", \"Longitude\", \"Type\")]\ndf.info()\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with reStructuredText Directives\nDESCRIPTION: This code uses reStructuredText directives to create a documentation navigation layout for GeoPandas, including a container with navigation buttons and a table of contents tree with maximum depth of 2 levels.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. container:: button\n\n    :doc:`User guide <docs/user_guide>` :doc:`Advanced guide <docs/advanced_guide>`\n    :doc:`Examples <gallery/index>` :doc:`API reference <docs/reference>`\n\n\n.. toctree::\n  :maxdepth: 2\n  :caption: Documentation\n\n  User guide <docs/user_guide>\n  Advanced guide <docs/advanced_guide>\n  API reference <docs/reference>\n  Changelog <docs/changelog>\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas development dependencies\nDESCRIPTION: Command to install GeoPandas development dependencies using pip. This is useful for contributors or users who want to run tests or build documentation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Creating Histograms from GeoPandas Data\nDESCRIPTION: Shows how to create a histogram plot using the plot.hist() accessor method on a GeoDataFrame. Compares the distribution of population values between two census years.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nchicago[[\"POP2000\", \"POP2010\", \"geometry\"]].plot.hist(alpha=.4)\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit for GeoPandas\nDESCRIPTION: This shell command uses pip to install pre-commit, a framework for managing and maintaining multi-language pre-commit hooks, improving the contribution workflow in GeoPandas. The pre-commit package is necessary for running automatic code formatting checks during a git commit.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m pip install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Creating Test Points\nDESCRIPTION: Generates two test points for demonstrating spatial queries, one inside and one outside the geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npoint_inside = shapely.Point(950000, 155000)\npoint_outside = shapely.Point(1050000, 150000)\npoints = geopandas.GeoSeries([point_inside, point_outside], crs=nyc.crs)\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Position and Adding a Label\nDESCRIPTION: Creates a choropleth map with a horizontal legend below the map. Uses legend_kwds to customize the legend with a label and orientation.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Plot population estimates with an accurate legend\nchicago.plot(\n    column=\"POP2010\",\n    legend=True,\n    legend_kwds={\"label\": \"Population in 2010\", \"orientation\": \"horizontal\"},\n);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Geometry Envelopes\nDESCRIPTION: Creates a comparative plot showing original geometries and their bounding boxes using matplotlib.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/spatial_indexing.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = plt.subplots(1, 2, sharey=True, figsize=(8, 4))\n\nnyc.plot(ax=axs[0], edgecolor=\"black\", linewidth=1)\nnyc.envelope.boundary.plot(ax=axs[1], color='black');\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Scale Bars and North Arrows in Python\nDESCRIPTION: This snippet shows the necessary imports for adding scale bars and north arrows to GeoPandas maps using matplotlib-scalebar and matplotlib-map-utils.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom geodatasets import get_path\nfrom matplotlib_scalebar.scalebar import ScaleBar\n\nimport geopandas as gpd\n```\n\n----------------------------------------\n\nTITLE: Basic GeoPandas Plot\nDESCRIPTION: This snippet demonstrates a simple plot of the loaded data using GeoPandas' built-in plotting functionality.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf.plot()\n```\n\n----------------------------------------\n\nTITLE: Generating Equal Interval Choropleth Maps with GeoPandas in Python\nDESCRIPTION: Shows how to create choropleth maps using the equal interval classification scheme with 4 and 12 bins.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntracts.plot(\n    column=\"CRIME\",\n    scheme=\"equal_interval\",\n    k=4,\n    cmap=\"OrRd\",\n    edgecolor=\"k\",\n    legend=True,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# No legend here as we'd be out of space\ntracts.plot(column=\"CRIME\", scheme=\"equal_interval\", k=12, cmap=\"OrRd\", edgecolor=\"k\")\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas directly from GitHub\nDESCRIPTION: Command to install the latest development version of GeoPandas directly from the GitHub repository using pip. This is an alternative to cloning the repository locally.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install git+git://github.com/geopandas/geopandas.git\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for GeoPandas with Background Maps\nDESCRIPTION: Imports the necessary libraries for working with geographic data visualization: geopandas for spatial data handling, geodatasets for example datasets, and contextily for adding basemaps to plots.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/plotting_basemap_background.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport geodatasets\nimport contextily as cx\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Buttons with RST Container Directive for GeoPandas Documentation\nDESCRIPTION: This snippet creates a button container with links to key community documents including Contributing guidelines, Code of Conduct, and Ecosystem information.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. container:: button\n\n    :doc:`Contributing <community/contributing>` :doc:`Code of Conduct <community/code_of_conduct>`\n    :doc:`Ecosystem <community/ecosystem>`\n```\n\n----------------------------------------\n\nTITLE: Calculating Distance for Geographic Coordinate System in Python\nDESCRIPTION: This snippet shows how to calculate the distance between two points in a geographic coordinate system for use in creating a scale bar.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom shapely.geometry.point import Point\n\npoints = gpd.GeoSeries(\n    [Point(-73.5, 40.5), Point(-74.5, 40.5)], crs=4326\n)  # Geographic WGS 84 - degrees\npoints = points.to_crs(32619)  # Projected WGS 84 - meters\n\ndistance_meters = points[0].distance(points[1])\n```\n\n----------------------------------------\n\nTITLE: Sample Points from Manhattan Boundary\nDESCRIPTION: Samples 200 random points along the boundary of Manhattan Island using the `sample_points()` method and visualizes the result.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmanhattan_border_points = manhattan_island.boundary.sample_points(200)\nm = manhattan_island.explore()\nmanhattan_border_points.explore(m=m, color='red')\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for matplotlib-map-utils in Python\nDESCRIPTION: This code shows the necessary imports for using the matplotlib-map-utils library to add north arrows and scale bars to GeoPandas maps.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom geodatasets import get_path\nfrom matplotlib_map_utils.core.north_arrow import NorthArrow, north_arrow\nfrom matplotlib_map_utils.core.scale_bar import ScaleBar, scale_bar\n\nimport geopandas as gpd\n```\n\n----------------------------------------\n\nTITLE: Extract Manhattan Island Boundary\nDESCRIPTION: Extracts the boundary of Manhattan Island from the GeoDataFrame using `.iloc[]` and `.explode()`. This creates a GeoSeries representing the boundary.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmanhattan_parts = nybb.iloc[[3]].explode(ignore_index=True)\nmanhattan_island = manhattan_parts.iloc[[30]]\nmanhattan_island.boundary.explore()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for GeoPandas and Rasterio - Python\nDESCRIPTION: This snippet imports the necessary libraries for handling geospatial data with GeoPandas and Rasterio, as well as visualizing data using matplotlib. Dependencies include geopandas, rasterio, and matplotlib.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport rasterio\nimport matplotlib.pyplot as plt\nfrom shapely.geometry import Point\n```\n\n----------------------------------------\n\nTITLE: Importing GeoPandas Library - Python\nDESCRIPTION: This snippet imports the GeoPandas library, enabling access to geographical data manipulation features. Ensure that the GeoPandas library is installed prior to executing this code.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/indexing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\n```\n\n----------------------------------------\n\nTITLE: Setting Geometry with Drop Behavior Example\nDESCRIPTION: Example showing how to replicate the deprecated drop=True behavior in set_geometry() method by explicitly dropping and renaming columns.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngeo_col_name = gdf.active_geometry_name\ngdf.set_geometry(new_geo_col).drop(columns=geo_col_name).rename_geometry(geo_col_name)\n```\n\n----------------------------------------\n\nTITLE: Controlling Layer Order with Default zorder\nDESCRIPTION: Demonstrates the default layer ordering behavior when plotting multiple geometry types. Without specified zorder, point geometries may be drawn below polygon geometries.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nax = groceries.plot(color='k')\nchicago.plot(ax=ax);\n```\n\n----------------------------------------\n\nTITLE: Overlaying Raster Data with Point Data - Python\nDESCRIPTION: This snippet visualizes the raster data and the sampling points on a plot using matplotlib. It transforms raster data to real-world coordinates to ensure accurate overlay. Key functionality includes setting the extent for the plot based on the raster bounds.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/geopandas_rasterio_sample.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rasterio.plot import show\n\nfig, ax = plt.subplots()\n\n# transform rasterio plot to real world coords\nextent = [src.bounds[0], src.bounds[2], src.bounds[1], src.bounds[3]]\nax = rasterio.plot.show(src, extent=extent, ax=ax, cmap=\"pink\")\n\ngdf.plot(ax=ax)\n```\n\n----------------------------------------\n\nTITLE: Auto-formatting code with Ruff\nDESCRIPTION: This snippet demonstrates how to use Ruff to automatically format and check the GeoPandas codebase. It includes commands to format the code, check for errors, and identify differences using git diff. These commands help ensure consistent code style throughout the project.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nruff format geopandas\nruff check geopandas\ngit diff upstream/main -u -- \"*.py\" | ruff check .\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas from source using GitHub repository\nDESCRIPTION: Series of commands to clone the GeoPandas GitHub repository and install it from the local directory using pip. This method is useful for installing the latest development version.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/geopandas/geopandas.git\ncd geopandas\npip install .\n```\n\n----------------------------------------\n\nTITLE: Projecting Geometry with CartoPy\nDESCRIPTION: This snippet demonstrates how to project geometry using CartoPy's projection methods and create a new plot with the projected data.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncrs_new = ccrs.AlbersEqualArea()\nnew_geometries = [\n    crs_new.project_geometry(ii, src_crs=crs) for ii in df_ae[\"geometry\"].values\n]\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": crs_new})\nax.add_geometries(new_geometries, crs=crs_new)\n```\n\n----------------------------------------\n\nTITLE: Running GeoPandas Tests with Pytest\nDESCRIPTION: This snippet shows how to run the GeoPandas test suite using pytest directly from the Git clone. This allows developers to verify their code changes without installing GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Removing Axis Labels from Maps\nDESCRIPTION: Demonstrates how to remove axis labels and ticks from maps for a cleaner presentation. Uses the set_axis_off() method on the axis object to hide all axis elements.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/mapping.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nax = chicago.plot()\nax.set_axis_off();\n```\n\n----------------------------------------\n\nTITLE: Converting to EPSG CRS and Comparing CartoPy and GeoPandas Plots\nDESCRIPTION: This snippet shows how to convert the data to an EPSG-defined CRS and create side-by-side plots using both CartoPy and GeoPandas for comparison.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/cartopy_convert.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncrs_epsg = ccrs.epsg(\"3857\")\ndf_epsg = df.to_crs(epsg=\"3857\")\n\n# Generate a figure with two axes, one for CartoPy, one for GeoPandas\nfig, axs = plt.subplots(1, 2, subplot_kw={\"projection\": crs_epsg}, figsize=(10, 5))\n# Make the CartoPy plot\naxs[0].add_geometries(\n    df_epsg[\"geometry\"], crs=crs_epsg, facecolor=\"white\", edgecolor=\"black\"\n)\n# Make the GeoPandas plot\ndf_epsg.plot(ax=axs[1], color=\"white\", edgecolor=\"black\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Conda Environment for Documentation\nDESCRIPTION: This snippet shows how to create a new Conda environment based on the environment.yml specification in the doc folder. It includes activating the environment, registering a Jupyter kernel, and building the documentation using `make html`. This is useful for resolving errors encountered during documentation builds.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\nconda env create -f environment.yml\nconda activate geopandas_docs\npython -m ipykernel install --user --name geopandas_docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Ignoring revs file with git blame\nDESCRIPTION: This git configuration command sets up the local git environment to ignore specific revisions in git blame output, particularly those introducing large formatting changes. This command is useful for focusing on substantive changes rather than cosmetic ones.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Importing GeoPandas and Matplotlib for Spatial Data Visualization in Python\nDESCRIPTION: Imports the necessary libraries (GeoPandas and Matplotlib) for spatial data handling and visualization.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/choropleths.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Displaying CRS Information\nDESCRIPTION: This snippet demonstrates how to display CRS information using the pyproj library. It shows the axis information, including latitude and longitude order, based on the EPSG code.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\">>> pyproj.CRS(3EPSG:4326\")\n   <Geographic 2D CRS: EPSG:4326>\n   ...\n   Axis Info [ellipsoidal]:\n   - Lat[north]: Geodetic latitude (degree)\n   - Lon[east]: Geodetic longitude (degree)\n   ...\"\n```\n\n----------------------------------------\n\nTITLE: Citing GeoPandas in BibTeX Format\nDESCRIPTION: This snippet provides a BiBTeX entry for citing the GeoPandas software version 0.8.1. It includes essential fields such as author, title, month, year, publisher, version, DOI, and URL. This format is used for referencing in academic works.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/about/citing.md#2025-04-21_snippet_0\n\nLANGUAGE: BibTeX\nCODE:\n```\n@software{kelsey_jordahl_2020_3946761,\n  author       = {Kelsey Jordahl and\n                  Joris Van den Bossche and\n                  Martin Fleischmann and\n                  Jacob Wasserman and\n                  James McBride and\n                  Jeffrey Gerard and\n                  Jeff Tratner and\n                  Matthew Perry and\n                  Adrian Garcia Badaracco and\n                  Carson Farmer and\n                  Geir Arne Hjelle and\n                  Alan D. Snow and\n                  Micah Cochran and\n                  Sean Gillies and\n                  Lucas Culbertson and\n                  Matt Bartos and\n                  Nick Eubank and\n                  maxalbert and\n                  Aleksey Bilogur and\n                  Sergio Rey and\n                  Christopher Ren and\n                  Dani Arribas-Bel and\n                  Leah Wasser and\n                  Levi John Wolf and\n                  Martin Journois and\n                  Joshua Wilson and\n                  Adam Greenhall and\n                  Chris Holdgraf and\n                  Filipe and\n                  Fran√ßois Leblanc},\n  title        = {geopandas/geopandas: v0.8.1},\n  month        = jul,\n  year         = 2020,\n  publisher    = {Zenodo},\n  version      = {v0.8.1},\n  doi          = {10.5281/zenodo.3946761},\n  url          = {https://doi.org/10.5281/zenodo.3946761}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up NorthArrow and ScaleBar Sizes in Python\nDESCRIPTION: This snippet demonstrates how to set up the sizes for NorthArrow and ScaleBar objects to match the default plot size in GeoPandas.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/matplotlib_scalebar.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nNorthArrow.set_size(\"small\")\nScaleBar.set_size(\"small\")\n```\n\n----------------------------------------\n\nTITLE: Accessing CRS of a GeoDataFrame in GeoPandas\nDESCRIPTION: This snippet retrieves the Coordinate Reference System (CRS) of the GeoDataFrame. It helps understand which CRS is currently set for the geometries, which is crucial for any spatial analysis.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/introduction.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ngdf.crs\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Projected CRS\nDESCRIPTION: This snippet demonstrates how to access the underlying projected CRS from a 'Bound CRS' object using the `.source_crs` attribute. This allows you to get the actual CRS definition.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> crs.source_crs\n   <Projected CRS: PROJCRS[\"unknown\",BASEGEOGCRS[\"unknown\",DATUM[\"Unk ...>\n   Name: unknown\n   ...\n```\n\n----------------------------------------\n\nTITLE: Installing GeoPandas dependencies with conda\nDESCRIPTION: Command to install the main dependencies of GeoPandas using conda. This can be useful when installing GeoPandas from source to ensure all required libraries are available.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/getting_started/install.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nconda install pandas pyogrio shapely pyproj\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation with Jinja2 and reStructuredText\nDESCRIPTION: This template generates API documentation for Python objects. It uses Jinja2 variables and control structures along with Sphinx directives to create a standardized documentation format. The template includes the object's full name, sets the current module, auto-documents the object, and conditionally includes examples and HTML styling for certain object types.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/_templates/autosummary.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n\n.. currentmodule:: {{ module }}\n\n.. auto{{ objtype }}:: {{ objname }}\n\n{% if objtype in ['class', 'method', 'function'] %}\n\n.. include:: {{module}}.{{objname}}.examples\n\n.. raw:: html\n\n    <div class=\"clear\"></div>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining toctree structure in reStructuredText for GeoPandas documentation\nDESCRIPTION: A reStructuredText toctree directive that defines the structure and pages of the advanced guide section. It lists the available advanced topics including spatial indexing, handling missing/empty values, reprojection with Fiona, migrating from PyGEOS to Shapely, and transitioning from Fiona to Pyogrio.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/advanced_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n\n  user_guide/spatial_indexing\n  user_guide/missing_empty\n  user_guide/reproject_fiona\n  user_guide/pygeos_to_shapely\n  user_guide/fiona_to_pyogrio\n```\n\n----------------------------------------\n\nTITLE: Displaying Green Color Circle in HTML\nDESCRIPTION: This HTML snippet creates an SVG circle element to display the green color used in the GeoPandas logo. It sets the circle's dimensions, position, and fill color.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/about/logo.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\" style=\"float: left\">\n    <circle cx=\"33\" cy=\"33\" r=\"33\" fill=\"#139C5A\"></circle>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Import GeoPandas and Geodatasets\nDESCRIPTION: Imports the necessary libraries: `geopandas` for geospatial data manipulation and `geodatasets` for sample datasets.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas\nimport geodatasets\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx nbgallery for GeoPandas Examples\nDESCRIPTION: Configures a Sphinx notebook gallery to display GeoPandas examples. The directive uses the nbgallery extension to automatically include all example notebooks in the current directory.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. nbgallery::\n    :name: nbshpinx-gallery\n    :glob:\n\n    ./*\n```\n\n----------------------------------------\n\nTITLE: Ignoring Axis Order when Comparing CRS\nDESCRIPTION: This snippet shows how to ignore axis order when comparing a CRS object with an EPSG code by using the `min_confidence` parameter in the `to_epsg()` method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> crs.to_epsg()\n\n>>> crs.to_epsg(min_confidence=20)\n   2953\n```\n\n----------------------------------------\n\nTITLE: Referencing External GeoParquet Test Data Source\nDESCRIPTION: Markdown link referencing the source GitHub repository where the test data originates from.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/geopandas/io/tests/data/arrow/geoparquet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntest-data\n```\n\n----------------------------------------\n\nTITLE: Displaying Pink Color Circle in HTML\nDESCRIPTION: This HTML snippet creates an SVG circle element to display the pink color used in the GeoPandas logo. It sets the circle's dimensions, position, and fill color.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/about/logo.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\" style=\"float: left\">\n    <circle cx=\"33\" cy=\"33\" r=\"33\" fill=\"#E70488\"></circle>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Checking for UTM Zone\nDESCRIPTION: This snippet demonstrates the old and new ways to check if a CRS is a specific UTM zone. The new method uses the `utm_zone` attribute, which requires pyproj 2.6+.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n'+proj=utm ' in gdf.crs\n```\n\nLANGUAGE: python\nCODE:\n```\ngdf.crs.utm_zone is not None\n```\n\n----------------------------------------\n\nTITLE: Displaying Yellow Color Circle in HTML\nDESCRIPTION: This HTML snippet creates an SVG circle element to display the yellow color used in the GeoPandas logo. It sets the circle's dimensions, position, and fill color.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/about/logo.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\" style=\"float: left\">\n    <circle cx=\"33\" cy=\"33\" r=\"33\" fill=\"#FFCA00\"></circle>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Document Structure with reStructuredText in GeoPandas Documentation\nDESCRIPTION: This RST code defines the document structure for the GeoPandas community page, including a toctree configuration that organizes related documentation pages about community guidelines.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/community.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  :caption: Community\n  :hidden:\n\n  Contributing <community/contributing>\n  Code of Conduct <community/code_of_conduct>\n  Ecosystem <community/ecosystem>\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG.md in documentation\nDESCRIPTION: This snippet demonstrates how to include the contents of a CHANGELOG.md file within another document or system, likely a documentation system like Sphinx or MkDocs. The `{include}` directive is used to insert the file's content directly into the current document. The path specified is a relative path to the CHANGELOG.md file.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n``` {include} ../../../CHANGELOG.md\n```\n```\n\n----------------------------------------\n\nTITLE: Finding EPSG Code from proj4 String with pyproj\nDESCRIPTION: Shows how to use pyproj to find the equivalent EPSG code for a given proj4 string.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/projections.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import pyproj\n>>> crs = pyproj.CRS(\"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\")\n>>> crs.to_epsg()\n2163\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Geospatial Visualization\nDESCRIPTION: Imports necessary libraries for geospatial data manipulation and visualization, including GeoPandas, GeoDB datasets, Folium, and Matplotlib\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/gallery/polygon_plotting_with_folium.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport geopandas as gpd\nimport geodatasets\nimport folium\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Visualize Cluster Poisson Samples\nDESCRIPTION: Visualizes the points sampled using the 'cluster_poisson' method.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nm = nybb.explore()\nsample_t.explore(m=m, color='red')\n```\n\n----------------------------------------\n\nTITLE: Visualize GeoDataFrame\nDESCRIPTION: Visualizes the GeoDataFrame using the `explore()` method, which creates an interactive map.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnybb.explore()\n```\n\n----------------------------------------\n\nTITLE: Display Sampled Points Geometry\nDESCRIPTION: Displays the geometry of the sampled points, which is a single multi-part geometry.\nSOURCE: https://github.com/geopandas/geopandas/blob/main/doc/source/docs/user_guide/sampling.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmanhattan_border_points\n```"
  }
]