[
  {
    "owner": "orval-labs",
    "repo": "orval",
    "content": "TITLE: Configuring Orval with JavaScript configuration file\nDESCRIPTION: Example of an Orval configuration file that defines input and output paths for generating API client code from an OpenAPI specification file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/quick-start.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'petstore-file': {\n    input: './petstore.yaml',\n    output: './src/petstore.ts',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters for Path Parameters\nDESCRIPTION: Configuration to generate operation interfaces with named path parameters instead of individual arguments. This creates a more structured API for operations with multiple path parameters.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useNamedParameters: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval using TypeScript\nDESCRIPTION: This snippet shows how to configure Orval using a TypeScript configuration file. It imports the defineConfig function from Orval and defines the same configuration as the JavaScript example.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'orval';\n\nexport default defineConfig({\n  petstore: {\n    input: './petstore.yaml',\n    output: './petstore.ts',\n    hooks: {\n      afterAllFilesWrite: 'prettier --write',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fetch Client in Orval\nDESCRIPTION: Configuration setup to use Fetch API as the HTTP client instead of the default Axios client. This is done through the httpClient option in the Orval configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch-client.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      client: 'swr',\n      httpClient: 'fetch'\n      ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Zod and SWR Generation in JavaScript\nDESCRIPTION: This snippet shows an Orval configuration file (orval.config.js) that sets up generation for both SWR client and Zod schemas from a Petstore API specification.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/client-with-zod.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      target: './petstore.yaml',\n    },\n    output: {\n      mode: 'tags-split',\n      client: 'swr',\n      target: 'src/gen/endpoints',\n      schemas: 'src/gen/models',\n      mock: true,\n    },\n  },\n  petstoreZod: {\n    input: {\n      target: './petstore.yaml',\n    },\n    output: {\n      mode: 'tags-split',\n      client: 'zod',\n      target: 'src/gen/endpoints',\n      fileExtension: '.zod.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval with Basic Settings in JavaScript\nDESCRIPTION: Example configuration file showing basic Orval setup for generating API client code from a Petstore OpenAPI spec. Demonstrates output configuration for single file mode, target paths, schema generation, and mock data setup, along with input specification targeting.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/basics.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'petstore-file-transfomer': {\n    output: {\n      mode: 'single',\n      target: './src/petstore.ts',\n      schemas: './src/model',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for API Client Generation in JavaScript\nDESCRIPTION: This configuration sets up Orval to generate an API client for a petstore API. It includes settings for output formatting, React Query integration, mocking with Faker.js, custom overrides for specific operations, and post-generation formatting with Prettier.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/full-example.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { faker } = require('@faker-js/faker');\n\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'react-query',\n      mock: true,\n      override: {\n        operations: {\n          listPets: {\n            mutator: 'src/response-type.js',\n            mock: {\n              properties: () => {\n                return {\n                  id: () => faker.number.int({ min: 1, max: 99999 }),\n                };\n              },\n            },\n          },\n          showPetById: {\n            mock: {\n              data: () => ({\n                id: faker.number.int({ min: 1, max: 99 }),\n                name: faker.person.firstName(),\n                tag: faker.helpers.arrayElement([\n                  faker.word.sample(),\n                  undefined,\n                ]),\n              }),\n            },\n          },\n        },\n        mock: {\n          properties: {\n            '/tag|name/': () => faker.person.lastName(),\n          },\n          delay: 500,\n        },\n      },\n      allParamsOptional: true,\n      urlEncodeParameters: true,\n    },\n    input: {\n      target: './petstore.yaml',\n      override: {\n        transformer: 'src/add-version.js',\n      },\n    },\n    hooks: {\n      afterAllFilesWrite: 'prettier --write',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval with Fetch Client in TypeScript\nDESCRIPTION: Configuration example for setting up Orval to use the fetch API as an HTTP client. This defines the output mode, target files, schemas location, and enables mock data generation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'orval';\n\nexport default defineConfig({\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'app/gen/petstore.ts',\n      schemas: 'app/gen/models',\n      client: 'fetch',\n      baseUrl: 'http://localhost:3000',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Generated SWR and Zod Definitions in TypeScript React Application\nDESCRIPTION: This code snippet demonstrates how to use the automatically generated SWR hooks and Zod schemas in a React application. It includes importing the necessary functions and types, and shows error handling with Zod validation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/client-with-zod.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pet } from './gen/models';\nimport { useListPets, useCreatePets } from './gen/endpoints/pets/pets';\nimport { createPetsBodyItem } from './gen/endpoints/pets/pets.zod';\n\nfunction App() {\n  const { data } = useListPets();\n  const { trigger } = useCreatePets();\n\n  const createPet = async () => {\n    // For example, specifying the number 123 in the name will result in a `zod` error.\n    const pet = { name: '123', tag: 'test' };\n\n    try {\n      const parsedPet = createPetsBodyItem.parse(pet);\n\n      await trigger([parsedPet]);\n    } catch (error) {\n      console.log('raise error', error);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch-based API Client with SWR\nDESCRIPTION: Complete implementation of a TypeScript-based API client using Fetch and SWR. Includes URL parameter handling, response type definitions, and a custom hook for data fetching.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch-client.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @summary List all pets\n */\nexport type listPetsResponse = {\n  data: Pets | BadRequest;\n  status: number;\n};\n\nexport const getListPetsUrl = (params?: ListPetsParams) => {\n  const normalizedParams = new URLSearchParams();\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (value === null) {\n      normalizedParams.append(key, 'null');\n    } else if (value !== undefined) {\n      normalizedParams.append(key, value.toString());\n    }\n  });\n\n  return normalizedParams.size\n    ? `http://localhost:8000/pets?${normalizedParams.toString()}`\n    : `http://localhost:8000/pets`;\n};\n\nexport const listPets = async (\n  params?: ListPetsParams,\n  options?: RequestInit,\n): Promise<listPetsResponse> => {\n  const res = await fetch(getListPetsUrl(params), {\n    ...options,\n    method: 'GET',\n  });\n  const data: Pets =\n    [204, 205, 304].includes(res.status) || !res.body ? {} : await res.json();\n\n  return { status: res.status, data };\n};\n\nexport const getListPetsKey = (params?: ListPetsParams) =>\n  [`http://localhost:8000/pets`, ...(params ? [params] : [])] as const;\n\nexport type ListPetsQueryResult = NonNullable<\n  Awaited<ReturnType<typeof listPets>>\n>;\nexport type ListPetsQueryError = Promise<Pets | Error>;\n\n/**\n * @summary List all pets\n */\nexport const useListPets = <TError = Promise<Pets | Error>>(\n  params?: ListPetsParams,\n  options?: {\n    swr?: SWRConfiguration<Awaited<ReturnType<typeof listPets>>, TError> & {\n      swrKey?: Key;\n      enabled?: boolean;\n    };\n    fetch?: RequestInit;\n  },\n) => {\n  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};\n\n  const isEnabled = swrOptions?.enabled !== false;\n  const swrKey =\n    swrOptions?.swrKey ?? (() => (isEnabled ? getListPetsKey(params) : null));\n  const swrFn = () => listPets(params, fetchOptions);\n\n  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(\n    swrKey,\n    swrFn,\n    swrOptions,\n  );\n\n  return {\n    swrKey,\n    ...query,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Generated React Query Hook for API Endpoint in TypeScript\nDESCRIPTION: This snippet demonstrates a generated React Query hook for a specific API endpoint. It includes the API call function, query key generator, and a custom hook for data fetching.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/react-query.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const showPetById = (\n  petId: string,\n  options?: AxiosRequestConfig,\n): Promise<AxiosResponse<Pet>> => {\n  return axios.get(`/pets/${petId}`, options);\n};\n\nexport const getShowPetByIdQueryKey = (petId: string) => [`/pets/${petId}`];\n\nexport const useShowPetById = <\n  TData = AsyncReturnType<typeof showPetById>,\n  TError = Error,\n>(\n  petId: string,\n  options?: {\n    query?: UseQueryOptions<AsyncReturnType<typeof showPetById>, TError, TData>;\n    axios?: AxiosRequestConfig;\n  },\n) => {\n  const { query: queryOptions, axios: axiosOptions } = options ?? {};\n\n  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);\n  const queryFn = () => showPetById(petId, axiosOptions);\n\n  const query = useQuery<AsyncReturnType<typeof queryFn>, TError, TData>(\n    queryKey,\n    queryFn,\n    { enabled: !!petId, ...queryOptions },\n  );\n\n  return {\n    queryKey,\n    ...query,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Axios Instance (TypeScript)\nDESCRIPTION: This snippet defines a custom Axios instance with a base URL and a customInstance function. It includes type definitions for error and body types, and handles request cancellation. The implementation allows for additional options to be passed to each query.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-axios.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Axios, { AxiosRequestConfig } from 'axios';\n\nexport const AXIOS_INSTANCE = Axios.create({ baseURL: '<BACKEND URL>' }); // use your own URL here or environment variable\n\n// add a second `options` argument here if you want to pass extra options to each generated query\nexport const customInstance = <T>(\n  config: AxiosRequestConfig,\n  options?: AxiosRequestConfig,\n): Promise<T> => {\n  const source = Axios.CancelToken.source();\n  const promise = AXIOS_INSTANCE({\n    ...config,\n    ...options,\n    cancelToken: source.token,\n  }).then(({ data }) => data);\n\n  // @ts-ignore\n  promise.cancel = () => {\n    source.cancel('Query was cancelled');\n  };\n\n  return promise;\n};\n\n// In some case with react-query and swr you want to be able to override the return error type so you can also do it here like this\nexport type ErrorType<Error> = AxiosError<Error>;\n\nexport type BodyType<BodyData> = BodyData;\n\n// Or, in case you want to wrap the body type (optional)\n// (if the custom instance is processing data before sending it, like changing the case for example)\nexport type BodyType<BodyData> = CamelCase<BodyData>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Composite Routes with Tag Splitting in JavaScript\nDESCRIPTION: This configuration snippet shows how to set up Orval to generate composite routes for Hono, using tag-based splitting from an OpenAPI specification. It defines input, output, and override options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/hono.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      target: './petstore.yaml',\n    },\n    output: {\n      mode: 'tags-split',\n      client: 'hono',\n      target: 'src/endpoints',\n      schemas: 'src/schemas',\n      override: {\n        hono: {\n          compositeRoute: 'src/routes.ts',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for React Query Generation in JavaScript\nDESCRIPTION: This snippet shows how to configure Orval to generate React Query hooks. It specifies the output mode, target files, and input OpenAPI specification.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/react-query.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'react-query',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Angular Service Generation\nDESCRIPTION: Example Orval configuration for generating Angular services from an OpenAPI specification. It defines output settings including mode, target files, client type, and mocking options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/angular.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'angular',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fetch Client with Dynamic Base URL (TypeScript)\nDESCRIPTION: This code defines a custom fetch client that dynamically sets the base URL based on the environment. It allows for flexible URL configuration in different deployment scenarios.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst getUrl = (contextUrl: string): string => {\n  const url = new URL(contextUrl);\n  const pathname = url.pathname;\n  const search = url.search;\n  const baseUrl =\n    process.env.NODE_ENV === 'production'\n      ? 'productionBaseUrl'\n      : 'http://localhost:3000';\n\n  const requestUrl = new URL(`${baseUrl}${pathname}${search}`);\n\n  return requestUrl.toString();\n};\n\nexport const customFetch = async <T>(\n  url: string,\n  options: RequestInit,\n): Promise<T> => {\n  const requestUrl = getUrl(url);\n  const requestInit: RequestInit = {\n    ...options,\n  };\n\n  const request = new Request(requestUrl, requestInit);\n  const response = await fetch(request);\n  const data = await getBody<T>(response);\n\n  return { status: response.status, data } as T;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Generated Zod Schemas for Validation and Type Inference\nDESCRIPTION: Example demonstrating how to use the generated Zod schemas for both data validation with parse() and for TypeScript type inference with z.infer.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/zod.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { z } from 'zod';\nimport { createPetsBodyItem } from './src/gen/zod/swaggerPetstore.ts';\n\nconst pet = { id: 1, name: 'pet name', tag: 'tag' };\n\n// parsing\nconst parsedPet = createPetsBodyItem.parse(pet);\nconsole.log(parsedPet);\n// => Object { id: 1, name: \"pet name\", tag: \"tag\" }\n\n// inferred type\ntype Pet = z.infer<typeof createPetsBodyItem>;\nconsole.log(pet as Pet);\n// => Object { id: 1, name: \"pet name\", tag: \"tag\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for MSW Mock Generation in JavaScript\nDESCRIPTION: Example of an Orval configuration file (orval.config.js) that sets up mock generation for a Petstore API.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/msw.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  'petstore-file-transfomer': {\n    output: {\n      mode: 'single',\n      target: './src/petstore.ts',\n      schemas: './src/model',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generated SWR Hook Implementation for API Endpoint\nDESCRIPTION: Example of the TypeScript code generated by Orval in SWR mode. This includes a fetch function for getting pet details by ID, a key generator function for SWR cache management, and a custom hook that uses SWR for data fetching with TypeScript typing.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/swr.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const showPetById = (\n  petId: string,\n  options?: AxiosRequestConfig,\n): Promise<AxiosResponse<Pet>> => {\n  return axios.get(`/pets/${petId}`, options);\n};\n\nexport const getShowPetByIdKey = (petId: string) => [`/pets/${petId}`];\nRe;\n\nexport const useShowPetById = <TError = Error>(\n  petId: string,\n  options?: {\n    swr?: SWRConfiguration<AsyncReturnType<typeof showPetById>, TError> & {\n      swrKey?: Key;\n      enabled?: boolean;\n    };\n    axios?: AxiosRequestConfig;\n  },\n) => {\n  const { swr: swrOptions, axios: axiosOptions } = options ?? {};\n\n  const isEnabled = swrOptions?.enabled !== false && !!petId;\n  const swrKey =\n    swrOptions?.swrKey ?? (() => (isEnabled ? getShowPetByIdKey(petId) : null));\n  const swrFn = () => showPetById(petId, axiosOptions);\n\n  const query = useSwr<AsyncReturnType<typeof swrFn>, TError>(\n    swrKey,\n    swrFn,\n    swrOptions,\n  );\n\n  return {\n    swrKey,\n    ...query,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Generated Vue Query Hook Implementation\nDESCRIPTION: Example of a generated Vue Query hook implementation for fetching pet details by ID. Includes axios request function, query key generator, and custom hook with TypeScript types.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/vue-query.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const showPetById = (\n  petId: string,\n  options?: AxiosRequestConfig,\n): Promise<AxiosResponse<Pet>> => {\n  return axios.get(`/pets/${petId}`, options);\n};\n\nexport const getShowPetByIdQueryKey = (petId: string) => [`/pets/${petId}`];\n\nexport const useShowPetById = <\n  TData = AsyncReturnType<typeof showPetById>,\n  TError = Error,\n>(\n  petId: string,\n  options?: {\n    query?: UseQueryOptions<AsyncReturnType<typeof showPetById>, TError, TData>;\n    axios?: AxiosRequestConfig;\n  },\n) => {\n  const { query: queryOptions, axios: axiosOptions } = options ?? {};\n\n  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);\n  const queryFn = () => showPetById(petId, axiosOptions);\n\n  const query = useQuery<AsyncReturnType<typeof queryFn>, TError, TData>(\n    queryKey,\n    queryFn,\n    {\n      enabled: !!petId,\n      ...queryOptions,\n    },\n  );\n\n  return {\n    queryKey,\n    ...query,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Operation-specific Query Override in Orval\nDESCRIPTION: Configuration example showing how to override query settings for specific operations or tags in your API. This allows for fine-grained control of how different endpoints generate query hooks.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/svelte-query.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        operations: {\n          listPets: {\n            query: {\n              ...\n            },\n          }\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Zod Schema Generation\nDESCRIPTION: Configuration example for orval.config.js that specifies Zod as the client. This setup generates Zod schemas from OpenAPI specifications in a single output file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/zod.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      client: 'zod',\n      mode: 'single',\n      target: './src/gen/zod',\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Generated Svelte Query Hook Example\nDESCRIPTION: Example of a generated Svelte Query hook from an OpenAPI specification. It includes the base API function, a query key generator, and a custom hook that implements useQuery with proper typing and configuration options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/svelte-query.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const showPetById = (\n  petId: string,\n  options?: AxiosRequestConfig,\n): Promise<AxiosResponse<Pet>> => {\n  return axios.get(`/pets/${petId}`, options);\n};\n\nexport const getShowPetByIdQueryKey = (petId: string) => [`/pets/${petId}`];\n\nexport const useShowPetById = <\n  TData = AsyncReturnType<typeof showPetById>,\n  TError = Error,\n>(\n  petId: string,\n  options?: {\n    query?: UseQueryOptions<AsyncReturnType<typeof showPetById>, TError, TData>;\n    axios?: AxiosRequestConfig;\n  },\n) => {\n  const { query: queryOptions, axios: axiosOptions } = options ?? {};\n\n  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);\n  const queryFn = () => showPetById(petId, axiosOptions);\n\n  const query = useQuery<AsyncReturnType<typeof queryFn>, TError, TData>(\n    queryKey,\n    queryFn,\n    {\n      enabled: !!petId,\n      ...queryOptions,\n    },\n  );\n\n  return {\n    queryKey,\n    ...query,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval with SWR Client Mode\nDESCRIPTION: Example configuration for Orval that sets up SWR as the client mode. This configuration generates SWR hooks from a petstore OpenAPI specification, with tag-based splitting, mock data generation, and specified output locations.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/swr.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'swr',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Mutation Options in TypeScript\nDESCRIPTION: Example of a custom mutation options function in TypeScript, demonstrating how to invalidate queries based on specific operations.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useCustomMutatorOptions = <T, TError, TData, TContext>(\n  options: UseMutationOptions<T, TError, TData, TContext> &\n    Required<\n      Pick<UseMutationOptions<T, TError, TData, TContext>, 'mutationFn'>\n    >,\n  /* Optional */ path: { url: string },\n  /* Optional */ operation: { operationId: string; operationName: string },\n) => {\n  const queryClient = useQueryClient();\n  if (operation.operationId === 'createPet') {\n    queryClient.invalidateQueries({ queryKey: getGetPetsQueryKey() });\n  }\n  return options;\n};\n```\n\n----------------------------------------\n\nTITLE: Making Options Parameter Required in API Functions\nDESCRIPTION: Configuration to make the second 'options' parameter required in API function calls. This is useful when using a custom axios instance that requires specific options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      optionsParamRequired: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Hono Client Generation in JavaScript\nDESCRIPTION: This snippet shows how to configure Orval to generate a Hono client from an OpenAPI specification. It defines input and output options, including the client type and file paths.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/hono.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      target: './petstore.yaml',\n    },\n    output: {\n      mode: 'split',\n      client: 'hono',\n      target: 'src/petstore.ts',\n      override: {\n        hono: {\n          handlers: 'src/handlers',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval using JavaScript\nDESCRIPTION: This snippet demonstrates how to configure Orval using a JavaScript configuration file. It specifies input, output, and a hook for running Prettier after file generation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: './petstore.yaml',\n    output: './petstore.ts',\n    hooks: {\n      afterAllFilesWrite: 'prettier --write',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Client Type in Orval Configuration\nDESCRIPTION: Specifies the API client framework to use for generated code. Supports various client libraries like react-query, axios, swr, and more with axios-functions as default.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      client: 'react-query',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Parameters Serializer in Orval with Axios\nDESCRIPTION: Example configuration for adding a custom parameters serializer to all API requests with query parameters. Requires Axios as the HTTP client and specifies a path and function name for the serializer.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        paramsSerializer: {\n          path: './api/mutator/custom-params-serializer-fn.ts',\n          name: 'customParamsSerializerFn',\n          // default: true\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval with Vue Query\nDESCRIPTION: Basic configuration example for setting up Orval with Vue Query mode. Defines output paths, client type, and enables mock data generation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/vue-query.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'vue-query',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for MCP Server Generation in TypeScript\nDESCRIPTION: Configuration example for generating an MCP server from a Petstore OpenAPI specification. This setup defines the input source, output mode, client type, and file destinations.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/mcp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'orval';\n\nexport default defineConfig({\n  petstore: {\n    input: {\n      target: './petstore.yaml',\n    },\n    output: {\n      mode: 'single',\n      client: 'mcp',\n      baseUrl: 'https://petstore3.swagger.io/api/v3',\n      target: 'src/handlers.ts',\n      schemas: 'src/http-schemas',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Output Mode in Orval\nDESCRIPTION: Configures how generated files are organized. Options include 'single' (default), 'split', 'tags', and 'tags-split' to control file organization based on API tags and file types.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fetch Client\nDESCRIPTION: Configuration setup for using a custom Fetch client implementation through the override option in Orval.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch-client.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      client: 'swr',\n      httpClient: 'fetch',\n      override: {\n        mutator: {\n          path: './src/mutator.ts',\n          name: 'customFetch',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Axios Instance Implementation\nDESCRIPTION: TypeScript implementation of a custom axios instance with cancel token support.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport Axios, { AxiosRequestConfig } from 'axios';\n\nexport const AXIOS_INSTANCE = Axios.create({ baseURL: '' });\n\nexport const customInstance = <T>(config: AxiosRequestConfig): Promise<T> => {\n  const source = Axios.CancelToken.source();\n  const promise = AXIOS_INSTANCE({ ...config, cancelToken: source.token }).then(\n    ({ data }) => data,\n  );\n\n  // @ts-ignore\n  promise.cancel = () => {\n    source.cancel('Query was cancelled by React Query');\n  };\n\n  return promise;\n};\n\n// In some case with react-query and swr you want to be able to override the return error type so you can also do it here like this\nexport type ErrorType<Error> = AxiosError<Error>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags Output Mode in Orval\nDESCRIPTION: Sets up the 'tags' output mode which generates one file per OpenAPI tag in the target directory, with a single shared schema file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      mock: true,\n      mode: 'tags',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Server URLs from OpenAPI Specification\nDESCRIPTION: Configures Orval to use server URLs defined in the OpenAPI specification, with path-specific overrides when available. This example demonstrates the use of different URLs for different API paths.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://api.example.com\npaths:\n  /pets:\n    servers:\n      - url: https://pets.example.com\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      baseUrl: {\n        getBaseUrlFromSpecification: true,\n        // prepend url defined in specification, in this example: 'https://api.example.com'\n        // for all calls, except for calls to /pets, which will instead use 'https://pets.example.com' as base url.\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Type Override\nDESCRIPTION: Configuration to override the default Fetch response type handling, allowing for cleaner response types without HTTP status information.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch-client.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        fetch: {\n          includeHttpResponseReturnType: false,\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Fetch Instance for Orval\nDESCRIPTION: Custom implementation of an HTTP client using the Fetch API. This function handles URL generation, query parameters, and makes HTTP requests with the specified method and body. Includes type definitions for error and body handling.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-client.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// custom-instance.ts\n\nconst baseURL = '<BACKEND URL>'; // use your own URL here or environment variable\n\nexport const customInstance = async <T>(\n  url: string,\n  {\n    method,\n    params,\n    body,\n  }: {\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n    params?: any;\n    body?: BodyType<unknown>;\n    responseType?: string;\n  },\n): Promise<T> => {\n  let targetUrl = `${baseURL}${url}`;\n\n  if (params) {\n    targetUrl += '?' + new URLSearchParams(params);\n  }\n\n  const response = await fetch(targetUrl, {\n    method,\n    body,\n  });\n\n  return response.json();\n};\n\nexport default customInstance;\n\n// In some case with react-query and swr you want to be able to override the return error type so you can also do it here like this\nexport type ErrorType<Error> = AxiosError<Error>;\n// In case you want to wrap the body type (optional)\n// (if the custom instance is processing data before sending it, like changing the case for example)\nexport type BodyType<BodyData> = CamelCase<BodyType>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags-Split Output Mode in Orval\nDESCRIPTION: Sets up the 'tags-split' output mode which combines the tags and split modes, creating a directory per tag with multiple files inside each directory.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      mock: true,\n      mode: 'tags-split',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in Orval Configuration\nDESCRIPTION: Sets a constant base URL to be used for all API calls in the generated client code. This URL will be prepended to all endpoint paths.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      baseUrl: 'https://api.example.com', // prepend https://api.example.com to all api calls\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Axios Interceptor for Base URL (JavaScript)\nDESCRIPTION: This code demonstrates how to use an Axios interceptor to set the base URL for all requests. It allows for dynamic configuration of the base URL.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\naxios.interceptors.request.use((config) => {\n  return {\n    ...config,\n    baseURL: '<BACKEND URL>', // use your own URL here or environment variable\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Fetch API Client for API Endpoints in TypeScript\nDESCRIPTION: Example of the generated code using fetch API for a listPets endpoint. Shows the response type definition, URL generation function with query parameter handling, and the fetch implementation function.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @summary List all pets\n */\nexport type listPetsResponse = {\n  data: Pets;\n  status: number;\n};\n\nexport const getListPetsUrl = (params?: ListPetsParams) => {\n  const normalizedParams = new URLSearchParams();\n\n  Object.entries(params || {}).forEach(([key, value]) => {\n    if (value === null) {\n      normalizedParams.append(key, 'null');\n    } else if (value !== undefined) {\n      normalizedParams.append(key, value.toString());\n    }\n  });\n\n  return `http://localhost:3000/pets?${normalizedParams.toString()}`;\n};\n\nexport const listPets = async (\n  params?: ListPetsParams,\n  options?: RequestInit,\n): Promise<listPetsResponse> => {\n  const res = await fetch(getListPetsUrl(params), {\n    ...options,\n    method: 'GET',\n  });\n  const data = await res.json();\n\n  return { status: res.status, data };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client in Orval\nDESCRIPTION: Specifies the underlying HTTP client implementation to use with client libraries. Can be set to 'fetch' or 'axios' (default), and is applicable when using SWR, React Query, Vue Query, or Svelte Query.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      client: 'swr',\n      httpClient: 'fetch',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Conversion in Axios for Orval-Generated Clients\nDESCRIPTION: TypeScript implementation of date handling for Axios, which converts ISO date strings to JavaScript Date objects. This is required when using the useDates option in Orval configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\n// type signature\nconst client = axios.create({\n  baseURL: '',\n});\n\nclient.interceptors.response.use((originalResponse) => {\n  handleDates(originalResponse.data);\n  return originalResponse;\n});\n\nexport default client;\n\nconst isoDateFormat =\n  /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[-+]\\d{2}:?\\d{2}|Z)?$/;\n\nfunction isIsoDateString(value: any): boolean {\n  return value && typeof value === 'string' && isoDateFormat.test(value);\n}\n\nexport function handleDates(body: any) {\n  if (body === null || body === undefined || typeof body !== 'object')\n    return body;\n\n  for (const key of Object.keys(body)) {\n    const value = body[key];\n    if (isIsoDateString(value)) {\n      body[key] = new Date(value); // default JS conversion\n      // body[key] = parseISO(value); // date-fns conversion\n      // body[key] = luxon.DateTime.fromISO(value); // Luxon conversion\n      // body[key] = moment(value).toDate(); // Moment.js conversion\n    } else if (typeof value === 'object') {\n      handleDates(value);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mutator in Orval (JavaScript)\nDESCRIPTION: This snippet shows how to configure Orval to use a custom mutator function for API requests. It specifies the path and name of the custom instance file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-axios.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        mutator: {\n          path: './api/mutator/custom-instance.ts',\n          name: 'customInstance',\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding API Operations by OperationID\nDESCRIPTION: Configuration to customize specific API operations by their operationId, including transformers, mutators, and mock data generation using dynamic functions.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        operations: {\n          listPets: {\n            transformer: 'src/yourfunction.js',\n            mutator: 'src/response-type.js',\n            mock: {\n              properties: () => {\n                return {\n                  id: () => faker.number.int({ min: 1, max: 99999 }),\n                };\n              },\n            },\n          },\n          showPetById: {\n            mock: {\n              data: () => ({\n                id: faker.number.int({ min: 1, max: 99 }),\n                name: faker.person.firstName(),\n                tag: faker.helpers.arrayElement([\n                  faker.word.sample(),\n                  undefined,\n                ]),\n              }),\n            },\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Workspace Directory in Orval\nDESCRIPTION: Defines a base directory for all generated files. When specified, an index.ts file with all exports will also be created. All other paths in the configuration will be relative to this workspace.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      workspace: 'src/'\n      target: './petstore.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Date Object Conversion in Orval\nDESCRIPTION: Configuration to convert OpenAPI date/datetime to JavaScript Date objects instead of strings. Requires an additional Axios converter to handle the actual conversion.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useDates: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orval for Svelte Query\nDESCRIPTION: Basic configuration for using Orval with Svelte Query. This setup uses 'tags-split' mode to organize outputs, generates mock data, and specifies Svelte Query as the client library.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/svelte-query.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      target: 'src/petstore.ts',\n      schemas: 'src/model',\n      client: 'svelte-query',\n      mock: true,\n    },\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Configuration in Orval\nDESCRIPTION: Advanced configuration for Svelte Query in Orval that enables both regular queries and infinite queries. It demonstrates how to set up infinite query pagination with a 'nextId' parameter and configure query options like staleTime.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/svelte-query.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        query: {\n          useQuery: true,\n          useInfinite: true,\n          useInfiniteQueryParam: 'nextId',\n          options: {\n            staleTime: 10000,\n          },\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Orval with config via command line\nDESCRIPTION: Shows how to run Orval using a configuration file, either by explicitly specifying the config file path or by using the default configuration in the current directory.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/quick-start.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --config ./orval.config.js\n# or\n$ orval\n```\n\n----------------------------------------\n\nTITLE: Enabling BigInt Usage for int64 Format\nDESCRIPTION: Configuration to convert OpenAPI int64 format to JavaScript BigInt objects instead of number. This is useful for handling large integers that exceed JavaScript's number precision.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useBigInt: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fetch Function in Orval\nDESCRIPTION: Configuration example showing how to add a custom fetch function implementation to the Orval setup using the mutator override option.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        mutator: {\n          path: './custom-fetch.ts',\n          name: 'customFetch',\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mock Data Generation in Orval (JavaScript)\nDESCRIPTION: Example of configuring mock data generation options in Orval, including custom property overrides and format-specific mocking.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mock: {\n          properties: {\n            '/tag|name/': 'jon', // Matches every property named 'tag' or 'name', including nested ones\n            '/.*.user.id/': faker.string.uuid(), // Matches every property named 'id', inside an object named 'user', including nested ones\n            email: () => faker.internet.email(), // Matches only the property 'email'\n            'user.id': () => faker.string.uuid(), // Matches only the full path 'user.id'\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Orval CLI Usage\nDESCRIPTION: The basic command to run Orval, which by default searches for an orval.config.js file in the current directory.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ orval\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters Serializer Options with qs Library\nDESCRIPTION: Configuration for specifying how parameters are serialized using the qs library. This is used when a custom paramsSerializer is not defined and allows customization of array formatting.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        paramsSerializerOptions: {\n          qs: {\n            arrayFormat: 'repeat',\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced afterAllFilesWrite Hook in JavaScript\nDESCRIPTION: Shows how to configure an advanced afterAllFilesWrite hook using an object configuration. This approach allows control over whether generated files are injected into the command.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    hooks: {\n      afterAllFilesWrite: {\n        command: 'prettier --write .',\n        injectGeneratedDirsAndFiles: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SWR Options in Orval (JavaScript)\nDESCRIPTION: Example of configuring SWR-specific options in Orval, including enabling infinite queries and setting custom SWR options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        swr: {\n          useInfinite: true,\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI Input Source with Orval CLI\nDESCRIPTION: Uses the --input (-i) option to specify the path or link to an OpenAPI specification file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --input ./petstore.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Split Output Mode in Orval\nDESCRIPTION: Sets up the 'split' output mode which divides code into separate files for implementation, schemas, and mocks, all within the same directory.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      mock: true,\n      mode: 'split',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Making All Parameters Optional Except Path Parameters\nDESCRIPTION: Configuration to make all parameters optional except path parameters. This is particularly useful for Tanstack Query to take advantage of Orval's auto-enable feature.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      allParamsOptional: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Query Options for Specific Operations in JavaScript\nDESCRIPTION: This configuration example demonstrates how to override query options for specific API operations or tags in Orval.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/react-query.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        operations: {\n          listPets: {\n            query: {\n              ...\n            },\n          }\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Specification Path in Orval\nDESCRIPTION: Demonstrates how to specify the path to the OpenAPI/Swagger specification file that Orval should use as input.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      target: './petstore.yaml',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Output Mode in Orval\nDESCRIPTION: Sets up the 'single' output mode which generates all code in one file. This is the default behavior when no mode is specified.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      mock: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Composite Route Output\nDESCRIPTION: Example showing how to generate a composite routes file for Hono, with the resulting file structure demonstration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        hono: {\n          compositeRoute: 'src/routes.ts',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MSW HTTP Request Handler in TypeScript\nDESCRIPTION: Function that generates an MSW HTTP request handler for mocking API responses. It supports custom response overrides and async handlers.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/msw.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpResponse, delay, http } from 'msw';\n\nexport const getShowPetByIdMockHandler = (\n  overrideResponse?:\n    | Pet\n    | ((\n        info: Parameters<Parameters<typeof http.get>[1]>[0],\n      ) => Promise<Pet> | Pet),\n) => {\n  return http.get('*/pets/:petId', async (info) => {\n    await delay(1000);\n    return new HttpResponse(\n      JSON.stringify(\n        overrideResponse !== undefined\n          ? typeof overrideResponse === 'function'\n            ? await overrideResponse(info)\n            : overrideResponse\n          : getShowPetByIdResponseMock(),\n      ),\n      {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      },\n    );\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base URL in Orval (TypeScript)\nDESCRIPTION: This snippet demonstrates how to set a custom base URL in Orval configuration. It allows specifying a partial or complete URL to be used as the base for API requests.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      baseUrl: '/api/v2',\n      // baseUrl: 'https://petstore.swagger.io/v2',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Content Types in Generated API Client\nDESCRIPTION: Configuration to include or exclude specific content types when generating the API client. This allows focusing on specific content types like application/json while excluding others.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        contentType: {\n          include: ['application/json'],\n          exclude: ['application/xml'],\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Specification URL in Orval (TypeScript)\nDESCRIPTION: This configuration shows how to use the URL defined in the OpenAPI specification's 'servers' field. It enables Orval to identify the correct base URL for each operation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n      baseUrl: {\n        getBaseUrlFromSpecification: true,\n        variables: {\n          environment: 'api.dev',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Query Options in Orval for JavaScript\nDESCRIPTION: This configuration snippet shows how to set up advanced query options in Orval, including useInfiniteQuery and custom stale time for React Query hooks.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/react-query.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        query: {\n          useQuery: true,\n          useInfinite: true,\n          useInfiniteQueryParam: 'nextId',\n          options: {\n            staleTime: 10000,\n          },\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Mock Generation in Orval\nDESCRIPTION: Basic configuration to enable mock API generation using the default settings (MSW and faker) by setting the mock option to true.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mock: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tag Inclusion Filters in Orval\nDESCRIPTION: Shows how to include specific tags and patterns for API generation using filters.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      filters: {\n        tags: ['pets', /health/],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic afterAllFilesWrite Hook in JavaScript\nDESCRIPTION: Demonstrates how to configure a basic afterAllFilesWrite hook that runs Prettier on generated files. The hook automatically receives the generated file paths as arguments.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    hooks: {\n      afterAllFilesWrite: 'prettier --write',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Title Function in Orval\nDESCRIPTION: Provides a function to customize the generated API function names. This allows for consistent naming conventions such as appending 'Api' to all function titles.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: {\n    override: {\n      title: (title) => `${title}Api`,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mock Options in Orval\nDESCRIPTION: Advanced configuration for mock generation with custom settings for the mock type, response delay, and example usage options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mock: {\n        type: 'msw',\n        delay: 1000,\n        useExamples: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Filters in Orval\nDESCRIPTION: Example of filtering specific schema names for generation using string and regex patterns.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      filters: {\n        schemas: ['Error', /Cat/],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Client Mutator in Orval\nDESCRIPTION: Configuration for setting up a custom HTTP client instance in an Orval config file. This specifies the path and name of the mutator function to be used for HTTP requests.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-client.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        mutator: {\n          path: './api/mutator/custom-instance.ts',\n          name: 'customInstance',\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom FormData Generation\nDESCRIPTION: Configuration to customize how FormData is generated for multipart requests, with options to specify a custom implementation function.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        formData: {\n          path: './api/mutator/custom-form-data-fn.ts',\n          name: 'customFormDataFn',\n          // default: true\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: React Query Custom Hook Implementation\nDESCRIPTION: TypeScript implementation of a custom hook for use with React Query.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport Axios, { AxiosRequestConfig } from 'axios';\nimport { useQueryClient } from 'react-query';\n\nexport const AXIOS_INSTANCE = Axios.create({ baseURL: '' });\n\nexport const useCustomInstance = <T>(): ((\n  config: AxiosRequestConfig,\n) => Promise<T>) => {\n  const token = useToken(); // Do what you want\n\n  return (config: AxiosRequestConfig) => {\n    const source = Axios.CancelToken.source();\n    const promise = AXIOS_INSTANCE({\n      ...config,\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n      cancelToken: source.token,\n    }).then(({ data }) => data);\n\n    // @ts-ignore\n    promise.cancel = () => {\n      source.cancel('Query was cancelled by React Query');\n    };\n\n    return promise;\n  };\n};\n\nexport default useCustomInstance;\n\nexport type ErrorType<Error> = AxiosError<Error>;\n```\n\n----------------------------------------\n\nTITLE: Aggregating MSW Handlers in TypeScript\nDESCRIPTION: Function that aggregates all generated MSW handlers for a specific API into an array, ready to be used with MSW server setup.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/msw.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getPetsMock = () => [\n  getListPetsMockHandler(),\n  getCreatePetsMockHandler(),\n  getShowPetByIdMockHandler(),\n];\n```\n\n----------------------------------------\n\nTITLE: Enabling URL Encoding for Parameters\nDESCRIPTION: Configuration to enable URL encoding of path and query parameters. Currently works only for Tanstack Query clients and is recommended for safer parameter handling.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      urlEncodeParameters: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Schema with Enum Names Extension\nDESCRIPTION: An example OpenAPI schema that uses the x-enumNames extension to associate human-readable names with numeric enum values. This extension allows Orval to generate proper enum constants with meaningful names rather than just the raw values.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/enums.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: '3.1.0'\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\ncomponents:\n  schemas:\n    MyObject:\n      type: object\n      properties:\n        myEnum:\n          type: number\n          enum:\n            - 1\n            - 2\n            - 3\n            - 4\n          x-enumNames:\n            - One\n            - Two\n            - Three\n            - Four\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Size Limits for Mock Data with arrayMax\nDESCRIPTION: Configuration example showing how to set the maximum length of generated mock arrays using the arrayMax property. The default value is 10 if not specified.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mock: {\n          arrayMax: 15,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenAPI Validation in Orval\nDESCRIPTION: Shows how to enable IBM's OpenAPI linter validation for ensuring specification quality.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      validation: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up MSW Server with Generated Mocks in TypeScript\nDESCRIPTION: Example of how to set up an MSW server using the generated mock handlers for testing or development purposes.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/msw.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getPetsMock } from 'petstore.msw';\nimport { setupServer } from 'msw/node';\n\nconst server = setupServer();\nserver.use(...getPetsMock());\n```\n\n----------------------------------------\n\nTITLE: Generated Client Using Custom Fetch Function\nDESCRIPTION: Example of the generated code that uses a custom fetch function implementation rather than the native fetch API. The custom function allows for centralized request handling logic.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const listPets = async (\n  params?: ListPetsParams,\n  options?: RequestInit,\n): Promise<listPetsResponse> => {\n  return customFetch<Promise<listPetsResponse>>(getListPetsUrl(params), {\n    ...options,\n    method: 'GET',\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Generated Zod Schema\nDESCRIPTION: An example of a Zod schema automatically generated by Orval from an OpenAPI specification. It defines an object schema with required and optional properties.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/zod.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createPetsBody = zod.object({\n  id: zod.number(),\n  name: zod.string(),\n  tag: zod.string().optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Example-Based Mock Generation with useExamples\nDESCRIPTION: Configuration to use the 'example' property from the OpenAPI specification when generating mocks. Falls back to default behavior if no examples are defined.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mock: {\n          useExamples: true,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Hono Server with Composite Routes in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to create a Hono server that incorporates the generated composite routes. It imports the routes and sets them up with a base path.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/hono.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono';\nimport routes from './routes';\n\nconst app = new Hono();\n\napp.route('/', routes);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configuring Specification Transformer in Orval\nDESCRIPTION: Example of setting up a transformer function to modify the OpenAPI specification during generation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  input: {\n    override: {\n      transformer: 'src/api/transformer/add-version.js',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Type Instead of Interface in TypeScript Output\nDESCRIPTION: Configuration to use TypeScript type instead of interface in the generated code. This affects how model definitions are generated in the output TypeScript files.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useTypeOverInterfaces: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FormData Generator Function\nDESCRIPTION: TypeScript function signature for implementing a custom FormData generation function that can be referenced in the Orval configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// type signature\nexport const customFormDataFn = <Body>(body: Body): FormData => {\n  // do your implementation to transform it to FormData\n\n  return FormData;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Composite Routes for Hono in TypeScript\nDESCRIPTION: This TypeScript code shows the structure of a generated composite routes file for Hono. It imports handlers from tag-specific files and sets up routes using the Hono framework.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/hono.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from 'hono';\nimport {\n  listPetsHandlers,\n  createPetsHandlers,\n  updatePetsHandlers,\n  showPetByIdHandlers,\n} from './endpoints/pets/pets.handlers';\n\nconst app = new Hono();\n\napp.get('/pets', ...listPetsHandlers);\napp.post('/pets', ...createPetsHandlers);\napp.put('/pets', ...updatePetsHandlers);\napp.get('/pets/:petId', ...showPetByIdHandlers);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular HttpClient Mutator for Orval\nDESCRIPTION: Custom implementation of an HTTP client using Angular's HttpClient. This function creates an Observable that makes HTTP requests with the specified method, URL, params, and body, targeting Angular applications.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-client.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// response-type.ts\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst responseType = <Result>(\n  {\n    url,\n    method,\n    params,\n    data,\n  }: {\n    url: string;\n    method: string;\n    params?: any;\n    data?: any;\n    headers?: any;\n  },\n  http: HttpClient,\n): Observable<Result> =>\n  http.request<Result>(method, url, {\n    params,\n    body: data,\n    responseType: 'json',\n  });\n\nexport default responseType;\n```\n\n----------------------------------------\n\nTITLE: Excluding Deprecated Operations from Generated Client\nDESCRIPTION: Configuration to exclude any operation marked as deprecated in the OpenAPI specification. By default, deprecated operations are included in the generated client.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useDeprecatedOperations: false,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring FormData Array Handling\nDESCRIPTION: Configuration showing how to set the array handling strategy for FormData generation, with options for serialization formats.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        formData: {\n          mutator: {\n            path: './api/mutator/custom-form-data-fn.ts',\n            name: 'customFormDataFn',\n          },\n          arrayHandling: 'serialize-with-brackets',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono API Handler Generation\nDESCRIPTION: Configuration options for customizing the output paths for Hono API handlers, validator, and composite routes.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        hono: {\n          handlers: 'src/handlers',\n          validatorOutputPath: 'src/validator.ts',\n          compositeRoute: 'src/routes.ts',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Suppressing Readonly Modifiers in Generated Types\nDESCRIPTION: Configuration to suppress the readonly modifier in generated TypeScript types and interfaces, even when specified in the OpenAPI specification. By default, readonly fields are preserved.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        suppressReadonlyModifier: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Watching for File Changes with Orval CLI\nDESCRIPTION: Uses the --watch (-w) option to automatically regenerate code when specification files change. Can be used without a path to watch specification files or with a path to watch specific directories.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --watch\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --watch ./src\n```\n\n----------------------------------------\n\nTITLE: FormData Serialization: 'serialize-with-brackets' Strategy\nDESCRIPTION: Generated TypeScript code for FormData creation using the 'serialize-with-brackets' strategy, which appends '[]' to array field names.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData();\nif (pet.name !== undefined) {\n  formData.append(`name`, pet.name);\n}\nif (pet.age !== undefined) {\n  formData.append(`age`, pet.age.toString());\n}\nif (pet.relatives !== undefined) {\n  pet.relatives.forEach((value) =>\n    formData.append(`relatives[]`, JSON.stringify(value)),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Handler Output Path\nDESCRIPTION: Example showing how to specify the output directory for generated Hono API handlers, with resulting file structure example.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        hono: {\n          handlers: 'src/handlers',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Output Path in Orval\nDESCRIPTION: Defines the folder path where model schema files will be generated. By default, schemas are placed in the same location as the target file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      schemas: './api/model',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Mock Index File Generation with Tags-Split Mode\nDESCRIPTION: Configuration to generate an index.msw.ts file that exports all mock functions when using tags-split mode, making it easier to import all mocks at once.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'tags-split',\n      mock: {\n        indexMockFiles: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom FormUrlEncoded Generation\nDESCRIPTION: Configuration to customize how URLSearchParams is generated for form URL encoded requests, with options to specify a custom implementation function.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        formUrlEncoded: {\n          path: './api/mutator/custom-form-url-encoded-fn.ts',\n          name: 'customFormUrlEncodedFn',\n          // default: true\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mutation Options in Orval (JavaScript)\nDESCRIPTION: Example of configuring custom mutation options in Orval, including specifying a custom mutator function and its path.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        query: {\n          mutationOptions: {\n            path: './api/mutator/custom-mutator-options.ts',\n            name: 'useCustomMutatorOptions',\n            // default: true\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pet Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines a Pet entity with required id and name properties, plus an optional tag property. Used for type checking in a React application.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/interfaces/Pet.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Pet {\n  id: number;\n  name: string;\n  tag?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL with Object Configuration\nDESCRIPTION: An alternative way to set a static base URL using the object configuration format. This achieves the same result as setting baseUrl directly as a string.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      baseUrl: {\n        getBaseUrlFromSpecification: false,\n        baseUrl: 'https://api.example.com', // The same as setting petstore.output.baseUrl: 'https://api.example.com'\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom FormUrlEncoded Generator Function\nDESCRIPTION: TypeScript function signature for implementing a custom URLSearchParams generation function that can be referenced in the Orval configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\n// type signature\nexport const customFormUrlEncodedFn = <Body>(body: Body): URLSearchParams => {\n  // do your implementation to transform it to FormData\n\n  return URLSearchParams;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Zod Schema Generation Options in Orval (JavaScript)\nDESCRIPTION: Example of setting Zod-specific options in Orval configuration, including strict mode and coercion settings for different parts of the API.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        zod: {\n          strict: {\n            response: true,\n            query: true,\n            param: true,\n            header: true,\n            body: true\n          },\n          coerce: {\n            response: true,\n              query: true,\n              param: true,\n              header: true,\n              body: true\n          },\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Error Interface with code and message Properties in TypeScript\nDESCRIPTION: A TypeScript interface definition for an Error object with two properties: a numeric code property and a string message property. This interface is likely used for standardized error handling across the application.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/interfaces/Error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Error {\n  code: number;\n  message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Target Path in Orval\nDESCRIPTION: Sets the file path where the API implementation will be generated. The target option specifies the destination file for the Orval output.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      target: 'src/petstore.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Parameters Serializer Function Implementation for Axios\nDESCRIPTION: TypeScript implementation of a custom parameters serializer function that transforms API request parameters. The function accepts a parameters record and returns a serialized string.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n// type signature\nexport const customParamsSerializerFn = (\n  params: Record<string, any>,\n): string => {\n  // do your implementation to transform the params\n\n  return params;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Server Variables in URL Templates\nDESCRIPTION: Configures variables for URL templates defined in the OpenAPI specification's servers section. This is useful for environments with variable URLs such as different environments or tenant subdomains.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://{environment}.example.com/v1\n    variables:\n      environment:\n        default: api\n        enum:\n          - api\n          - api.dev\n          - api.staging\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      baseUrl: {\n        getBaseUrlFromSpecification: true,\n        variables: {\n          environment: 'api.dev',\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Pets Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Pets type alias as an array of Pet objects. It uses the Pet interface, which is likely defined in another file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/Pets.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Pets = Pet[];\n```\n\n----------------------------------------\n\nTITLE: Setting File Extension for Generated Files\nDESCRIPTION: Customizes the file extension for generated client files. The default is '.ts', but this option allows specifying alternatives like '.gen.ts' for better file identification.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      mode: 'split',\n      target: './gen/endpoints',\n      schemas: './gen/model',\n      fileExtension: '.gen.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Type Coercion for Zod Schemas\nDESCRIPTION: Configuration to enable type coercion for Zod schemas, specifically for query parameters. This helps convert string-serialized query parameters to their correct types before validation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        coerceTypes: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting Server URL by Index\nDESCRIPTION: Specifies which server URL to use when multiple are defined in the OpenAPI specification. When not specified, the first server URL is used by default.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservers:\n  - url: https://api.example.com/v1\n  - url: https://api.dev.example.com/v1\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      baseUrl: {\n        getBaseUrlFromSpecification: true,\n        index: 1,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ListPetsResult Type Alias in TypeScript for React App\nDESCRIPTION: This code snippet defines a type alias named ListPetsResult. It represents the response from an API call to list pets, using Axios for HTTP requests and returning a Pets object.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/ListPetsResult.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ListPetsResult = AxiosResponse<Pets>\n```\n\n----------------------------------------\n\nTITLE: Creating Angular HTTP Interceptor for Base URL (TypeScript)\nDESCRIPTION: This snippet defines an Angular HTTP interceptor that automatically adds the API base URL to all requests. It's a clean way to manage base URLs in Angular applications.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class APIInterceptor implements HttpInterceptor {\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n  ): Observable<HttpEvent<any>> {\n    const apiReq = req.clone({ url: `<BACKEND URL>/${req.url}` });\n    return next.handle(apiReq);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Native TypeScript Enums (Deprecated Configuration)\nDESCRIPTION: Deprecated configuration to generate native TypeScript enums instead of type and const combinations. This option has been replaced by the enumGenerationType configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        useNativeEnums: true,\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Component Naming Conventions\nDESCRIPTION: Configuration to override the naming conventions for generated models, responses, parameters, and request bodies by adding specific suffixes.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        components: {\n          schemas: {\n            suffix: 'DTO',\n          },\n          responses: {\n            suffix: 'Response',\n          },\n          parameters: {\n            suffix: 'Params',\n          },\n          requestBodies: {\n            suffix: 'Bodies',\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePetsResult Type Alias in TypeScript\nDESCRIPTION: Type definition for the result of a create pets API operation. It uses the AxiosResponse type with a void payload type, indicating the operation returns an HTTP response without data content.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/CreatePetsResult.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**CreatePetsResult**: `AxiosResponse`\\<`void`\\>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular HTTP Interceptor in Module (TypeScript)\nDESCRIPTION: This configuration adds the custom HTTP interceptor to the Angular module's providers. It ensures that the interceptor is used for all HTTP requests in the application.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: APIInterceptor,\n    multi: true,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Sort Order in Generated Models\nDESCRIPTION: Configuration to specify how properties in the generated models are sorted. Options include 'Alphabetical' or 'Specification' (default) which preserves the order from the OpenAPI spec.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      propertySortOrder: 'Alphabetical',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Generation Type in Orval\nDESCRIPTION: Configuration to specify how enums are generated in the TypeScript output. Options include 'const' (default), 'enum' for native enums, or 'union' for simple union types.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        enumGenerationType: 'const',\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Naming Convention for Generated Files\nDESCRIPTION: Defines the naming convention used for generated files. Supports 'camelCase' (default), 'PascalCase', 'snake_case', and 'kebab-case' to match your project's coding style.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      namingConvention: 'PascalCase',\n      mode: 'split',\n      target: './gen/endpoints',\n      schemas: './gen/model',\n      fileExtension: '.gen.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ListPetsParams Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias called ListPetsParams which is an object containing an optional 'limit' property. The limit parameter controls how many pets to return at one time with a maximum of 100 items.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/ListPetsParams.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ListPetsParams = object;\n\n## Type declaration\n\n### limit?\n\n> `optional` **limit**: `string`\n\nHow many items to return at one time (max 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Axios Instance with Base URL (JavaScript)\nDESCRIPTION: This snippet creates a custom Axios instance with a predefined base URL. It's useful for creating separate configurations for different API endpoints.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst AXIOS_INSTANCE = axios.create({ baseURL: '<BACKEND URL>' }); // use your own URL here or environment variable\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Options with Override\nDESCRIPTION: Configuration example showing how to override query options globally, including infinite query setup and stale time configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/vue-query.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        query: {\n          useQuery: true,\n          useInfinite: true,\n          useInfiniteQueryParam: 'nextId',\n          options: {\n            staleTime: 10000,\n          },\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Instance with Alias Configuration\nDESCRIPTION: Configuration example showing how to set up alias paths with a custom mutator.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mutator: {\n          path: './api/mutator/custom-instance.ts',\n          name: 'customInstance',\n          alias: {\n            '@config': path.resolve(_dirname, './src/config'),\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePetsBody Type Alias in TypeScript\nDESCRIPTION: A TypeScript type alias definition for CreatePetsBody, which represents an object with two required string properties: name and tag. This type is likely used for API requests when creating new pet entities.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/CreatePetsBody.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreatePetsBody = object\n\n## Type declaration\n\n### name\n\n> **name**: string\n\n### tag\n\n> **tag**: string\n```\n\n----------------------------------------\n\nTITLE: Setting Default Base URL in Axios (JavaScript)\nDESCRIPTION: This snippet shows how to set a default base URL for all requests in Axios. It's a simple way to configure the base URL directly on the HTTP client.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/set-base-url.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\naxios.defaults.baseURL = '<BACKEND URL>'; // use your own URL here or environment variable\n```\n\n----------------------------------------\n\nTITLE: Operation-Specific Query Override\nDESCRIPTION: Example showing how to override query configuration for specific operations or tags in the OpenAPI specification.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/vue-query.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        operations: {\n          listPets: {\n            query: {\n              ...\n            },\n          }\n        },\n      },\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Size Limits for Mock Data with arrayMin\nDESCRIPTION: Configuration example showing how to set the minimum length of generated mock arrays using the arrayMin property. The default value is 1 if not specified.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mock: {\n          arrayMin: 5,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaration of showPetById Function in TypeScript\nDESCRIPTION: TypeScript declaration of the showPetById function that takes a pet ID and optional Axios request configuration options. It returns a Promise that resolves to pet data, with a default return type of AxiosResponse<Pet>.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/functions/showPetById.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshowPetById<TData>(petId, options?): Promise<TData>\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Orval Development Environment Debugging\nDESCRIPTION: VS Code launch configuration for debugging the Orval development environment. This setup allows developers to place breakpoints and step through code while running the development server with yarn dev.\nSOURCE: https://github.com/orval-labs/orval/blob/master/DEBUGGING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Run Dev Server\",\n  \"runtimeExecutable\": \"yarn\",\n  \"args\": [\"dev\"],\n  \"skipFiles\": [\"<node_internals>/**\"],\n  \"console\": \"integratedTerminal\",\n  \"internalConsoleOptions\": \"neverOpen\",\n  \"env\": {\n    \"PATH\": \"${workspaceFolder}/node_modules/.bin:${env:PATH}\" // This ensures VS Code references the project's local packages\n  },\n  \"cwd\": \"${workspaceFolder}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Mock Schema Object in TypeScript\nDESCRIPTION: Function that generates a mock object for a Pet schema using Faker.js. It allows partial overrides of the generated mock.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/msw.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { faker } from '@faker-js/faker';\n\nexport const getShowPetByIdResponseMock = (\n  overrideResponse: Partial<Pet> = {},\n): Pet => ({\n  id: faker.number.int({ min: undefined, max: undefined }),\n  name: faker.string.alpha(20),\n  tag: faker.string.alpha(20),\n  ...overrideResponse,\n});\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Enum from Orval\nDESCRIPTION: The resulting TypeScript enum code generated by Orval when using the x-enumNames extension. This shows how the numeric values are associated with their corresponding human-readable names in the final TypeScript code.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/enums.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyEnum {\n  One: 1,\n  Two: 2,\n  Three: 3,\n  Four: 4\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Running Orval without config via command line\nDESCRIPTION: Demonstrates how to run Orval directly from the command line without a configuration file, specifying input and output paths directly as arguments.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/quick-start.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --input ./petstore.yaml --output ./src/petstore.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code for Test-Based Debugging in Orval\nDESCRIPTION: VS Code launch configuration for debugging test files in the Orval project. This setup enables developers to run and debug tests for specific files, which is useful for isolating and testing individual components of the codebase.\nSOURCE: https://github.com/orval-labs/orval/blob/master/DEBUGGING.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"Debug Current Test File\",\n  \"runtimeExecutable\": \"yarn\",\n  \"args\": [\n    \"test\",\n    \"${file}\" // Refers to the currently open file in the editor\n  ],\n  \"skipFiles\": [\"<node_internals>/**\"],\n  \"console\": \"integratedTerminal\",\n  \"internalConsoleOptions\": \"neverOpen\",\n  \"env\": {\n    \"PATH\": \"${workspaceFolder}/node_modules/.bin:${env:PATH}\" // This ensures VS Code references the project's local packages\n  },\n  \"cwd\": \"${workspaceFolder}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono Endpoint Handler in TypeScript\nDESCRIPTION: This code demonstrates how to implement a Hono endpoint handler using the generated template. It includes request and response validation using zod, and shows how to return a JSON response.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/hono.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFactory } from 'hono/factory';\nimport { zValidator } from '../petstore.validator';\nimport { ListPetsContext } from '../petstore.context';\nimport { listPetsQueryParams, listPetsResponse } from '../petstore.zod';\n\nconst factory = createFactory();\n\nexport const listPetsHandlers = factory.createHandlers(\n  zValidator('query', listPetsQueryParams),\n  zValidator('response', listPetsResponse),\n  async (c: ListPetsContext) => {\n    return c.json([\n      {\n        id: 1,\n        name: 'doggie',\n      },\n    ]);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Pets with Axios in TypeScript\nDESCRIPTION: Generic function for creating pets that accepts a request body and optional Axios configuration. Returns a Promise that resolves to the specified response type TData, defaulting to AxiosResponse<void>.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/functions/createPets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePets<TData = AxiosResponse<void, any>>(createPetsBody: CreatePetsBody, options?: AxiosRequestConfig<any>): Promise<TData>\n```\n\n----------------------------------------\n\nTITLE: Formatting Generated Files with Prettier\nDESCRIPTION: Uses the --prettier option to format generated files using Prettier. Requires Prettier to be installed globally.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --prettier\n```\n\n----------------------------------------\n\nTITLE: Importing and Executing Orval in JavaScript\nDESCRIPTION: This snippet shows how to import Orval and execute it with a configuration file. The 'orval' function is imported from the 'orval' package and called with the path to the Orval configuration file as an argument.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/integration.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport orval from 'orval';\n\norval('./orval.config.js');\n```\n\n----------------------------------------\n\nTITLE: Generated MCP Server File Structure\nDESCRIPTION: Directory structure showing the files generated by Orval for an MCP server implementation, including schema definitions, handlers, client code, and server configuration.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/mcp.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/\n├── http-schemas\n│   ├── createPetsBodyItem.ts\n│   ├── error.ts\n│   ├── index.ts\n│   ├── listPetsParams.ts\n│   ├── pet.ts\n│   ├── pets.ts\n│   └── updatePetByParamsParams.ts\n├── handlers.ts\n├── http-client.ts\n├── server.ts\n└── tool-schemas.zod.ts\n```\n\n----------------------------------------\n\nTITLE: Defining ShowPetByIdResult Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for an AxiosResponse containing a Pet object. This type is used for handling API responses when fetching individual pet details.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/type-aliases/ShowPetByIdResult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ShowPetByIdResult = AxiosResponse<Pet>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration File with Orval CLI\nDESCRIPTION: Uses the --config (-c) option to set a custom path to the Orval configuration file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --config ./api/orval.config.js\n```\n\n----------------------------------------\n\nTITLE: Setting Converter Options in Orval\nDESCRIPTION: Shows how to configure Swagger to OpenAPI 3.0.x conversion options.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      converterOptions: true,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Agent for MCP Server Integration\nDESCRIPTION: JSON configuration example for connecting an AI agent (Cline) to the MCP server. This setup specifies the Docker command to run the server container and related parameters.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/mcp.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"petstore\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp-petstore\"\n      ],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Header Generation Configuration\nDESCRIPTION: TypeScript configuration example for customizing file header generation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        header: (info: InfoObject): String[] => [\n          `Generated by orval 🍺`,\n          `Do not edit manually.`,\n          ...(info.title ? [info.title] : []),\n          ...(info.description ? [info.description] : []),\n          ...(info.version ? [`OpenAPI spec version: ${info.version}`] : []),\n        ],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an External Store in Svelte for HMR State Preservation\nDESCRIPTION: This snippet demonstrates how to create a simple external store in Svelte to preserve component state during Hot Module Replacement (HMR). Using the writable store from Svelte's store module helps maintain state that would otherwise be lost during HMR updates.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/svelte-query/custom-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// store.ts\n// An extremely simple external store\nimport { writable } from 'svelte/store';\nexport default writable(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Options in Orval\nDESCRIPTION: Demonstrates how to set custom parser options for handling multiple file specifications.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      parserOptions: {\n        resolve: { gitlab: gitlabResolver },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Axios Instance Configuration\nDESCRIPTION: JavaScript configuration for setting up a custom axios instance mutator.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      override: {\n        mutator: {\n          path: './api/mutator/custom-instance.ts',\n          name: 'customInstance',\n          // default: true\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Index Files Generation in Orval\nDESCRIPTION: Controls whether index.ts files should be generated for schema directories. When set to false, no index files will be created in the schemas output folder.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      schemas: 'src/gen/model',\n      indexFiles: false,\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Dependency Resolution\nDESCRIPTION: JSON configuration snippet for resolving missing dependencies in Orval debugging. This sets the PATH environment variable to include the local node_modules/.bin directory, which helps IDE tools locate necessary binaries like TSC or Vitest.\nSOURCE: https://github.com/orval-labs/orval/blob/master/DEBUGGING.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"env\": {\n  \"PATH\": \"${workspaceFolder}/node_modules/.bin:${env:PATH}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining listPets Function in TypeScript for React App\nDESCRIPTION: This code snippet defines the listPets function, which is a generic function that takes optional params and options parameters. It returns a Promise that resolves to the specified TData type, defaulting to an AxiosResponse containing Pets data.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/docs-markdown/functions/listPets.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlistPets<TData = AxiosResponse<Pets, any>>(params?: ListPetsParams, options?: AxiosRequestConfig<any>): Promise<TData>\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular-specific Options in Orval (JavaScript)\nDESCRIPTION: Example of setting Angular-specific options in Orval configuration, such as specifying the 'provideIn' value for generated services.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        angular: {\n          provideIn: 'any',\n        },\n      },\n    },\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: FormData Serialization: 'serialize' Strategy\nDESCRIPTION: Generated TypeScript code for FormData creation using the 'serialize' strategy, which converts arrays to JSON strings.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData();\nif (pet.name !== undefined) {\n  formData.append(`name`, pet.name);\n}\nif (pet.age !== undefined) {\n  formData.append(`age`, pet.age.toString());\n}\nif (pet.relatives !== undefined) {\n  pet.relatives.forEach((value) =>\n    formData.append(`relatives`, JSON.stringify(value)),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Code Reference to Orval\nDESCRIPTION: Reference to the Orval package name as used in documentation\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\norval\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Conventional Commit Format\nDESCRIPTION: Example of staging files and creating a commit using the conventional commit format. This format prepends the commit message with a type such as feat, fix, chore, or docs.\nSOURCE: https://github.com/orval-labs/orval/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add <file> && git commit -m \"feat/fix/chore/docs: commit message\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Client Mutator in Orval\nDESCRIPTION: Configuration for setting up a custom HTTP client for Angular applications in Orval. This specifies the path to the mutator function that will handle Angular HttpClient implementation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/custom-client.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    output: {\n      ...\n      override: {\n        mutator: 'src/api/mutator/response-type.ts'\n      }\n    }\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: FormData Serialization: 'explode' Strategy\nDESCRIPTION: Generated TypeScript code for FormData creation using the 'explode' strategy, which flattens nested objects and arrays into individual form fields with indexed notation.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst formData = new FormData();\nif (pet.name !== undefined) {\n  formData.append(`name`, pet.name);\n}\nif (pet.age !== undefined) {\n  formData.append(`age`, pet.age.toString());\n}\nif (pet.relatives !== undefined) {\n  pet.relatives.forEach((value, index) => {\n    if (value.name !== undefined) {\n      formData.append(`relatives[${index}].name`, value.name);\n    }\n    if (value.colors !== undefined) {\n      value.colors.forEach((value, index1) =>\n        formData.append(`relatives[${index}].colors[${index1}]`, value),\n      );\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parser options for TypeScript in a React Vite project\nDESCRIPTION: This code snippet demonstrates how to configure the top-level parserOptions property in ESLint for a React TypeScript project. It sets up the ECMAScript version, source type, and includes multiple TypeScript configuration files for type-aware linting.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app-with-swr/fetch-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json', './tsconfig.app.json'],\n    tsconfigRootDir: __dirname,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Orval with NPM\nDESCRIPTION: Command to install Orval as a dev dependency using NPM package manager.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i orval -D\n```\n\n----------------------------------------\n\nTITLE: Setting Output Path for Generated Files with Orval CLI\nDESCRIPTION: Uses the --output (-o) option to specify where to generate the API models and HTTP calls.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --output ./api/endpoints/petstoreFromFileSpec.ts\"\n```\n\n----------------------------------------\n\nTITLE: Request Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of request configuration based on AxiosRequestConfig.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RequestConfig {\n  method: 'get' | 'put' | 'patch' | 'post' | 'delete';\n  url: string;\n  params?: any;\n  data?: any;\n  responseType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Pet Schema Definition for FormData Examples\nDESCRIPTION: Example OpenAPI schema definition for a Pet type with nested arrays, used to demonstrate different FormData serialization strategies.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/output.md#2025-04-22_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      properties:\n        name:\n          type: string\n        age:\n          type: number\n        relatives:\n          type: array\n          items:\n            type: object\n            properties:\n              name:\n                type: string\n              colors:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - white\n                    - black\n                    - green\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Composite Routes with Tags Split Example\nDESCRIPTION: Commands to install dependencies and start the development server for a project demonstrating Orval's composite routes with tags splitting functionality.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/composite-routes-with-tags-split/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Orval Development Server\nDESCRIPTION: Commands for installing project dependencies and starting the development server. This initializes the project and runs it in development mode.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/hono-with-fetch-client/hono-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Focusing on a Specific Project with Orval CLI\nDESCRIPTION: Uses the --project (-p) option to generate code for a specific project defined in the Orval config.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --project petstore\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Files with Orval CLI\nDESCRIPTION: Uses the --clean option to remove all generated files. Can be used globally or for a specific directory.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --clean\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --clean ./src\n```\n\n----------------------------------------\n\nTITLE: Creating New Svelte Project using NPM\nDESCRIPTION: Commands to create a new Svelte project either in the current directory or in a specified directory using create-svelte CLI tool.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/svelte-query/basic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in React Projects\nDESCRIPTION: This snippet demonstrates how to configure the top-level parserOptions property in ESLint for a React + TypeScript project. It sets up the ECMAScript version, module type, and specifies TypeScript configuration files for proper type-aware linting.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-query/custom-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Exclusion Filters in Orval\nDESCRIPTION: Demonstrates how to exclude specific tags from API generation using filters.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/configuration/input.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  petstore: {\n    input: {\n      filters: {\n        mode: 'exclude',\n        tags: ['pets'],\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying TSConfig Path with Orval CLI\nDESCRIPTION: Uses the --tsconfig option to specify a custom path to the TypeScript configuration file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --tsconfig ./src/tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server\nDESCRIPTION: Commands to start the development server for a Svelte project, with an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/svelte-query/basic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parserOptions for TypeScript in a React Vite Project\nDESCRIPTION: This snippet demonstrates how to configure the top-level parserOptions property in an ESLint configuration file for a TypeScript React project. It sets up the TypeScript configuration to check multiple tsconfig files and properly analyze the codebase.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/swr-with-zod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json', './tsconfig.app.json'],\n    tsconfigRootDir: __dirname,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server for Pet Store Example\nDESCRIPTION: Configuration example for launching a generated server.ts file using Docker. This snippet shows how to set up the MCP client to run the TypeScript server generated by Orval.\nSOURCE: https://github.com/orval-labs/orval/blob/master/packages/mcp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"pet-store-server\": {\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\",\n    \"-i\",\n    \"--rm\",\n    \"pet-store-mcp\",\n    \"bash\",\n    \"-c\",\n    \"ts-node\",\n    \"src/gen/server.ts\"\n  ],\n  \"disabled\": false,\n  \"alwaysAllow\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Using Biome with Orval CLI\nDESCRIPTION: Uses the --biome option to format generated files with Biome. Requires Biome to be installed globally.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --biome\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Development Environment in Orval\nDESCRIPTION: Commands to install dependencies and start the development server. First installs all required packages with npm install, then initiates the development server with npm run dev.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/hono-with-zod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server using Different Package Managers\nDESCRIPTION: Commands to start the Next.js development server using npm, yarn, pnpm, or bun. Running any of these commands will start a local development server, typically on port 3000.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/hono-with-fetch-client/next-app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Package Path Configuration for Test Discovery\nDESCRIPTION: JSON configuration snippet for fixing test discovery issues in Orval's monorepo structure. This sets the current working directory (cwd) to target a specific package within the monorepo, which helps the test runner locate tests correctly.\nSOURCE: https://github.com/orval-labs/orval/blob/master/DEBUGGING.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"cwd\": \"${workspaceFolder}/packages/{package-to-reference}\"\n```\n\n----------------------------------------\n\nTITLE: Using TSLint with Orval CLI\nDESCRIPTION: Uses the --tslint option to specify TSLint as the TypeScript linter instead of ESLint. Requires TSLint in dependencies, though it's noted that TSLint is deprecated.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/reference/cli.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ orval --tslint\n```\n\n----------------------------------------\n\nTITLE: Deploying Orval Project\nDESCRIPTION: Command to deploy the Orval project to production or staging environments. This single command handles the build and deployment process.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/hono-with-zod/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Project for Production\nDESCRIPTION: Command to create a production-ready build of the Svelte application.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/svelte-query/basic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating Centered Heading with Link in Markdown\nDESCRIPTION: This snippet shows how to create a centered heading with a hyperlink to the project documentation using HTML within a markdown file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/packages/mock/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<h1 align=\"center\">\n  Visit <a href=\"https://orval.dev\" target=\"_blank\">orval.dev</a> for docs, guides, API and beer!\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing Orval with Yarn\nDESCRIPTION: Command to install Orval as a dev dependency using Yarn package manager.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add orval -D\n```\n\n----------------------------------------\n\nTITLE: Deploying Orval Project\nDESCRIPTION: Command to deploy the Orval project to production environment. Executes the deployment script defined in package.json.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/hono/hono-with-fetch-client/hono-app/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Orval Docs\nDESCRIPTION: Command to install all required project dependencies using Yarn package manager.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Badges in Markdown\nDESCRIPTION: This snippet shows how to include project badges for npm version, license, and test status using markdown syntax.\nSOURCE: https://github.com/orval-labs/orval/blob/master/packages/mock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![npm version](https://badge.fury.io/js/orval.svg)](https://badge.fury.io/js/orval)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![tests](https://github.com/orval-labs/orval/actions/workflows/tests.yaml/badge.svg)](https://github.com/orval-labs/orval/actions/workflows/tests.yaml)\n```\n\n----------------------------------------\n\nTITLE: Building and Running MCP Server with Docker\nDESCRIPTION: Shell command for building a Docker image for the MCP server implementation. This creates a containerized version of the generated MCP server that can be used by AI agents.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/guides/mcp.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker build ./ -t mcp-petstore\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for MCP Petstore\nDESCRIPTION: Command to build the Docker image for the MCP Petstore demo server. The image is tagged as 'mcp-petstore'.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/mcp/petstore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker build ./ -t mcp-petstore\n```\n\n----------------------------------------\n\nTITLE: Supported Specification Formats\nDESCRIPTION: Inline reference to supported API specification formats\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/src/pages/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nyaml\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njson\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/next-app-with-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Forking Orval Repository using GitHub CLI\nDESCRIPTION: Command to fork the Orval repository using the GitHub CLI. This is the first step in setting up a local development environment for contributing.\nSOURCE: https://github.com/orval-labs/orval/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo fork orval-labs/orval\n```\n\n----------------------------------------\n\nTITLE: Configuring Algolia Environment Variables\nDESCRIPTION: Environment variable configuration for Algolia search integration, including app ID, API key, and index name settings.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_ALGOLIA_APP_ID=<YOUR APP ID>\nNEXT_PUBLIC_ALGOLIA_API_KEY=<YOUR API KEY>\nNEXT_PUBLIC_ALGOLIA_INDEX_NAME=<YOUR INDEX NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that allows all user agents (*) full access with no disallowed paths. References the robotstxt.org specification.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app-with-swr/basic/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Sets default access rules for web crawlers. This configuration allows all user agents to access the entire website with no path restrictions.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-query/basic/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Orval Repository\nDESCRIPTION: Command to clone the forked Orval repository to the local machine using GitHub CLI. This step follows forking and allows for local development.\nSOURCE: https://github.com/orval-labs/orval/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone <your-github-name>/orval\n```\n\n----------------------------------------\n\nTITLE: Centering Logo Image in Markdown\nDESCRIPTION: This snippet demonstrates how to center-align and size the project logo using HTML within a markdown file.\nSOURCE: https://github.com/orval-labs/orval/blob/master/packages/mock/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n  <img src=\"./logo/orval-logo-horizontal.svg?raw=true\" width=\"500\" height=\"160\" alt=\"orval - Restful Client Generator\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard robots.txt File with No Restrictions\nDESCRIPTION: A minimal robots.txt configuration that allows all web crawlers (User-agent: *) to access the entire website. The empty Disallow directive indicates no paths are restricted from crawling.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-app/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server in AI Agent\nDESCRIPTION: JSON configuration for setting up the MCP Petstore server in the 'cline' AI agent. The configuration specifies the Docker command and arguments needed to run the server container.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/mcp/petstore/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"petstore\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp-petstore\"\n      ],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Website Access in robots.txt\nDESCRIPTION: This configuration allows all web crawlers and bots unrestricted access to the entire website. The universal wildcard user-agent (*) targets all bots, while the empty Disallow directive indicates no paths are restricted.\nSOURCE: https://github.com/orval-labs/orval/blob/master/docs/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Using robots.txt\nDESCRIPTION: A standard robots.txt configuration that permits all web crawlers (User-agent: *) to access all content on the website by not specifying any Disallow paths.\nSOURCE: https://github.com/orval-labs/orval/blob/master/samples/react-query/custom-client/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]