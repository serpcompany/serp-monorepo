[
  {
    "owner": "lelylan",
    "repo": "simple-oauth2",
    "content": "TITLE: Configuring OAuth2 Client Options\nDESCRIPTION: Configuration object structure for initializing OAuth2 grant classes, including client credentials, authorization endpoints, HTTP options, and formatting preferences.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  client: {\n    id: \"client_id_value\",\n    secret: \"client_secret_value\",\n    idParamName: \"client_id\",\n    secretParamName: \"client_secret\"\n  },\n  auth: {\n    tokenHost: \"https://oauth.provider.com\",\n    tokenPath: \"/oauth/token\",\n    refreshPath: \"/oauth/token\",\n    revokePath: \"/oauth/revoke\",\n    authorizeHost: \"https://oauth.provider.com\",\n    authorizePath: \"/oauth/authorize\"\n  },\n  http: {\n    json: \"strict\",\n    redirects: false,\n    headers: {\n      accept: \"application/json\"\n    }\n  },\n  options: {\n    scopeSeparator: \" \",\n    credentialsEncodingMode: \"strict\",\n    bodyFormat: \"form\",\n    authorizationMethod: \"header\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Code Grant Flow\nDESCRIPTION: Creates an authorization URL, redirects the user, and exchanges the returned authorization code for an access token using the Authorization Code grant type.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const client = new AuthorizationCode(config);\n\n  const authorizationUri = client.authorizeURL({\n    redirect_uri: 'http://localhost:3000/callback',\n    scope: '<scope>',\n    state: '<state>',\n    \n    customParam: 'foo', // non-standard oauth params may be passed as well\n  });\n\n  // Redirect example using Express (see http://expressjs.com/api.html#res.redirect)\n  res.redirect(authorizationUri);\n\n  const tokenParams = {\n    code: '<code>',\n    redirect_uri: 'http://localhost:3000/callback',\n    scope: '<scope>',\n  };\n\n  try {\n    const accessToken = await client.getToken(tokenParams);\n  } catch (error) {\n    console.log('Access Token Error', error.message);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with AuthorizationCode Grant\nDESCRIPTION: Exchanges an authorization code for an access token in the OAuth2 Authorization Code flow. Requires the code received from the authorization server and the redirect URI used in the authorization request.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait .getToken({\n  code: \"authorization_code_from_callback\",\n  redirectURI: \"https://example.com/callback\",\n  scope: \"read write\"\n}, httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Client Instances with Minimal Configuration\nDESCRIPTION: Sets up a basic configuration object with client credentials and authorization endpoint, then imports the different grant type classes from the simple-oauth2 library.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  client: {\n    id: '<client-id>',\n    secret: '<client-secret>'\n  },\n  auth: {\n    tokenHost: 'https://api.oauth.com'\n  }\n};\n\nconst { ClientCredentials, ResourceOwnerPassword, AuthorizationCode } = require('simple-oauth2');\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with AuthorizationCode Grant\nDESCRIPTION: Creates an authorization URL for the OAuth2 Authorization Code flow. This method combines client configuration with authorization options to generate the URL where users are redirected for authentication.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.authorizeURL({\n  redirectURI: \"https://example.com/callback\",\n  scope: [\"read\", \"write\"],\n  state: \"random-state-string\"\n})\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Access Token\nDESCRIPTION: Refreshes the current access token using its refresh token. Allows requesting a subset of the original scopes and customizing HTTP options for the refresh request.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait .refresh({\n  scope: \"read\"\n}, httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Preemptive OAuth2 Token Refresh with Expiration Window\nDESCRIPTION: Handles the race condition of expiring tokens by using an expiration window to refresh the token before it actually expires, accounting for network and processing latency.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const EXPIRATION_WINDOW_IN_SECONDS = 300; // Window of time before the actual expiration to refresh the token\n\n  if (accessToken.expired(EXPIRATION_WINDOW_IN_SECONDS)) {\n    try {\n      accessToken = await accessToken.refresh();\n    } catch (error) {\n      console.log('Error refreshing access token: ', error.message);\n    }\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Expired OAuth2 Access Token\nDESCRIPTION: Checks if an access token is expired using the expired() method and refreshes it if necessary by calling the refresh() method.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  if (accessToken.expired()) {\n    try {\n      const refreshParams = {\n        scope: '<scope>',\n      };\n\n      accessToken = await accessToken.refresh(refreshParams);\n    } catch (error) {\n      console.log('Error refreshing access token: ', error.message);\n    }\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Checking if Access Token is Expired\nDESCRIPTION: Determines if the current access token has expired. The optional expirationWindowSeconds parameter allows checking if the token will expire soon within the specified window of time.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n.expired(expirationWindowSeconds)\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth2 Client Error Responses\nDESCRIPTION: Demonstrates how to catch and handle errors thrown by the library, which are returned as boom error objects with detailed error information.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const client = new ClientCredentials(config);\n\n  try {\n    await client.getToken();\n  } catch(error) {\n    console.log(error.output);\n  }\n}\n\nrun();\n\n// { statusCode: 401,\n//   payload:\n//    { statusCode: 401,\n//      error: 'Unauthorized',\n//      message: 'Response Error: 401 Unauthorized' },\n//   headers: {} }\n```\n\n----------------------------------------\n\nTITLE: Creating Access Token from Existing Token Data\nDESCRIPTION: Creates an AccessToken instance from existing token data that complies with RFC6750. This is useful when you already have token information and need to use the library's token management capabilities.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n.createToken(token)\n```\n\n----------------------------------------\n\nTITLE: Restoring a Persisted OAuth2 Access Token\nDESCRIPTION: Retrieves a previously persisted access token and converts it back to an AccessToken instance using the client's createToken method.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const accessTokenJSONString = await getPersistedAccessTokenJSON();\n\n  let accessToken = client.createToken(JSON.parse(accessTokenJSONString));\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Serializing and Persisting OAuth2 Access Token\nDESCRIPTION: Demonstrates how to serialize an access token to JSON for storage in an external database in long-lived applications.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const accessTokenJSONString = JSON.stringify(accessToken);\n\n  await persistAccessTokenJSON(accessTokenJSONString);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Revoking an Access or Refresh Token\nDESCRIPTION: Revokes either the access token or refresh token by specifying the token type. This method invalidates the token on the authorization server.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait .revoke(\"access_token\", httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Revoking All Tokens\nDESCRIPTION: Revokes both the current access and refresh tokens in a single operation. This is a convenience method that calls revoke() twice with different token types.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait .revokeAll(httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Revoking Both OAuth2 Tokens with a Single Method Call\nDESCRIPTION: Uses the revokeAll() convenience method to revoke both access and refresh tokens in a single operation, where the refresh token is only revoked if the access token is successfully revoked.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  try {\n    // Revokes both tokens, refresh token is only revoked if the access_token is properly revoked\n    await accessToken.revokeAll();\n  } catch (error) {\n    console.log('Error revoking token: ', error.message);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth2 Access and Refresh Tokens Individually\nDESCRIPTION: Shows how to revoke access and refresh tokens separately, useful for implementing logout functionality.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  try {\n    await accessToken.revoke('access_token');\n    await accessToken.revoke('refresh_token');\n  } catch (error) {\n    console.log('Error revoking token: ', error.message);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with ClientCredentials Grant\nDESCRIPTION: Obtains an access token using the Client Credentials grant type. Only requires the client credentials already provided in the configuration, with optional scope parameter.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait .getToken({\n  scope: \"read write\"\n}, httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Credentials Grant Flow\nDESCRIPTION: Obtains an access token using only the client credentials, typically used for accessing resources about the client itself rather than user resources.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const client = new ClientCredentials(config);\n\n  const tokenParams = {\n    scope: '<scope>',\n  };\n\n  try {\n    const accessToken = await client.getToken(tokenParams);\n  } catch (error) {\n    console.log('Access Token error', error.message);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token with ResourceOwnerPassword Grant\nDESCRIPTION: Obtains an access token using the Resource Owner Password Credentials grant type. Requires username and password credentials of the resource owner, with optional scope parameter.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/API.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait .getToken({\n  username: \"user_identifier\",\n  password: \"user_password\",\n  scope: \"read write\"\n}, httpOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Owner Password Credentials Grant\nDESCRIPTION: Obtains an access token using username and password credentials with the Resource Owner Password Credentials grant type. This approach is not recommended due to security concerns.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function run() {\n  const client = new ResourceOwnerPassword(config);\n\n  const tokenParams = {\n    username: 'username',\n    password: 'password',\n    scope: '<scope>',\n  };\n\n  try {\n    const accessToken = await client.getToken(tokenParams);\n  } catch (error) {\n    console.log('Access Token Error', error.message);\n  }\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Environment Variable for Simple OAuth2\nDESCRIPTION: Shows how to enable debug logging for the simple-oauth2 module using the debug environment variable. This helps in error diagnosis and troubleshooting.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=*simple-oauth2*\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth2 Environment Variables in Bash\nDESCRIPTION: Sets the required environment variables for client ID and client secret before running any OAuth2 examples.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/example/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport CLIENT_ID=\"your client id\"\nexport CLIENT_SECRET=\"your client secret\"\n```\n\n----------------------------------------\n\nTITLE: Installing Simple OAuth2 Library via NPM\nDESCRIPTION: This command installs the simple-oauth2 library using npm package manager and saves it as a dependency in the project's package.json file.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save simple-oauth2\n```\n\n----------------------------------------\n\nTITLE: Running Github OAuth2 Example in Bash\nDESCRIPTION: Executes the Github-specific OAuth2 example implementation.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/example/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:github\n```\n\n----------------------------------------\n\nTITLE: Running Microsoft OAuth2 Example in Bash\nDESCRIPTION: Executes the Microsoft-specific OAuth2 example implementation.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/example/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:microsoft\n```\n\n----------------------------------------\n\nTITLE: Running Dropbox OAuth2 Example in Bash\nDESCRIPTION: Executes the Dropbox-specific OAuth2 example implementation.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/example/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:dropbox\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with doctoc\nDESCRIPTION: Command to regenerate the table of contents in README.md using the doctoc tool when documentation headers are modified.\nSOURCE: https://github.com/lelylan/simple-oauth2/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs-gen\n```"
  }
]