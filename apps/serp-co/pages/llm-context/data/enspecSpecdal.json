[
  {
    "owner": "enspec",
    "repo": "specdal",
    "content": "TITLE: Running SpecDAL Pipeline for Basic Spectrum Processing\nDESCRIPTION: This command processes all spectrum files in a specified directory, producing individual plots and text files for each spectrum, and stores the results in an output directory.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline  -o specdal_output /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Applying Jump Correction to a Collection\nDESCRIPTION: Shows how to apply jump correction to all spectra in a collection at specific splice points (1000nm and 1800nm), using the first spectrum as reference, and then plot the results.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nc.jump_correct(splices=[1000, 1800], reference=0)\nc.plot(legend=False, ylim=(0, 0.5))\nc.plot(legend=False, xlim=(900, 1100), ylim=(0.4, 0.5))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Mean Spectra for Each Group\nDESCRIPTION: Creates a new Collection containing the mean spectrum for each group, then plots all the mean spectra together. This demonstrates how to calculate statistics across grouped spectra and visualize the results.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngroup_means = Collection(name='Group Means')\nfor group_key, group_collection in groups.items():\n    group_means.append(group_collection.mean())\n# plot the group means\ngroup_means.plot(title='Group means', figsize=(15, 6), ylim=(0, 1))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Filtering and Grouping Spectra with SpecDAL Pipeline\nDESCRIPTION: This complex command filters out white reference spectra and outliers based on specific wavelength ranges, then groups the remaining spectra by filename components.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline --filter_white --filter_std 750 1200 1 500 600 2 \n-g -gi 0 1 2 /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Stitching Overlapping Wavelength Bands in SpecDAL\nDESCRIPTION: Uses the stitch method to correct the folds in the spectrum around 1000 and 1900 nm wavelengths caused by overlapping bands in the spectrometer. The 'mean' method averages values in the overlapping regions.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ns.stitch(method='mean')\ns.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean Spectrum from a Collection\nDESCRIPTION: Demonstrates how to calculate the mean spectrum from a collection, which returns a Spectrum object, and then plot it.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmean = c.mean()\nprint(type(mean))\nmean.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Loading Spectrum Files into a Collection\nDESCRIPTION: Creates a Collection object and loads multiple spectrum files by iterating through a directory. Each file is loaded as a Spectrum object and appended to the collection.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\ndatadir = \"/home/young/data/specdal/aidan_data2/ASD/\"\nc = Collection(name='myFirst')\nfor f in sorted(os.listdir(datadir))[1:11]:\n    spectrum = Spectrum(filepath=os.path.join(datadir, f))\n    c.append(spectrum)\n```\n\n----------------------------------------\n\nTITLE: Grouping Spectra by Name Components\nDESCRIPTION: Demonstrates the groupby function to organize spectra into groups based on specific components of their names. The groupby function splits names using a separator and combines specified indices to form group identifiers.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngroups = c.groupby(separator='_', indices=[0, 1, 2, 3])\ngroup_names = list(groups.keys())\nprint(group_names)\n```\n\n----------------------------------------\n\nTITLE: Usage of specdal_pipeline Command\nDESCRIPTION: Shows the basic usage syntax for the specdal_pipeline command, including all available options and arguments.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: specdal_pipeline [-h] [--proximal_reference PATH] [-o PATH]\n                            [-op PREFIX] [-of] [-od] [-oi] [-i {slinear,cubic}]\n                            [-is SPC] [-s {mean,median,min,max}] [-j {additive}]\n                            [-js WVL [WVL ...]] [-jr REF] [-g] [-gs S]\n                            [-gi [I [I ...]]] [-gmean] [-gmedian] [-gstd]\n                            [-fstd wl0 wl1 n_std [wl0 wl1 n_std ...]]\n                            [-fthresh wl0 wl1 LO HI [wl0 wl1 LO HI ...]] [-fwhite]\n                            [-fg method] [-fo set] [-yl ymin ymax] [-q] [-f]\n                            INPUT_PATH\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation and Appending to Collection\nDESCRIPTION: Shows how to calculate the standard deviation spectrum and append it to the original collection, then plot all spectra including the standard deviation.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nc.std(append=True) # append the spectrum to the original collection\nc.plot(legend=False)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Loading a Spectrum from File using SpecDAL in Python\nDESCRIPTION: Creates a Spectrum object by loading a .sig file from a specified filepath. The Spectrum object contains the spectral measurements and metadata.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = specdal.Spectrum(filepath=\"/home/young/data/specdal/aidan_data/SVC/ACPA_F_B_SU_20160617_003.sig\")\nprint(s)\n```\n\n----------------------------------------\n\nTITLE: Plotting a Collection of Spectra\nDESCRIPTION: Shows how to plot all spectra in a collection using the plot method wrapper around pandas.DataFrame, with customized y-axis limits and no legend.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nc.plot(legend=False, ylim=(0, 0.5))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Grouping Spectra by Filename Components with SpecDAL Pipeline\nDESCRIPTION: This command groups input files based on the first three underscore-separated components of their filenames, allowing for organized processing of related spectra.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline -g -gi 0 1 2 -- /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Output Group Mean and Median\nDESCRIPTION: Demonstrates how to group spectra and output the mean and median for each group using specdal_pipeline.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline -g -gi 0 1 2  -gmean -gmedian /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Accessing Measurement Data from a Spectrum Object in Python\nDESCRIPTION: Demonstrates how to access the measurement data from a Spectrum object. The measurement is stored as a pandas DataFrame or Series.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(type(s.measurement))\nprint(s.measurement.head())\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Data as a DataFrame\nDESCRIPTION: Demonstrates how to access spectral data in the collection as a pandas DataFrame and display its first few rows.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(type(c.data))\nc.data.head()\n```\n\n----------------------------------------\n\nTITLE: Accessing Spectra by Name in a Collection\nDESCRIPTION: Demonstrates how to access individual spectrum objects in a collection by their name identifier and display their type and contents.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(type(c[\"ACPA_F_A_SU_20160617_00000\"]))\nprint(c[\"ACPA_F_A_SU_20160617_00000\"])\n```\n\n----------------------------------------\n\nTITLE: Filter Spectra and Group by Filename\nDESCRIPTION: Shows how to filter spectra based on standard deviation and then group the remaining spectra by filename using specdal_pipeline.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline --filter_std 750 1200 1 500 600 2 \n-g -gi 0 1 2 /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Filter Spectra Based on Standard Deviation\nDESCRIPTION: Demonstrates how to use specdal_pipeline to filter out spectra based on standard deviation from the mean in specific wavelength ranges.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline --filter_std 750 1200 1 500 600 2  -- /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Plotting Spectra from a Single Group\nDESCRIPTION: Visualizes all the spectra from a single group using the plot method of the Collection class. This demonstrates how to access a specific group from the groupby results and plot its spectra.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# plotting a single group\ngroups['ACSA_T_C_SU'].plot(figsize=(15, 6))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Zooming into a Specific Wavelength Range\nDESCRIPTION: Demonstrates how to zoom into a specific wavelength range (900-1100nm) where data jumps occur, using customized x-axis and y-axis limits.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nc.plot(legend=False, xlim=(900, 1100), ylim=(0.4, 0.5))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Executing Specdal GUI Script\nDESCRIPTION: Command to run the Specdal graphical user interface for processing spectral data files. The GUI provides tools for stitching, jump correcting, grouping spectra, and manual filtering options.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_gui.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nspecdal_gui\n```\n\n----------------------------------------\n\nTITLE: Accessing Spectra as a List in a Collection\nDESCRIPTION: Shows how to access the collection's spectra as a list and iterate through them to display their contents.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(type(c.spectra))\nfor s in c.spectra[0:2]:\n    print(s)\n```\n\n----------------------------------------\n\nTITLE: Installing SpecDAL from Source using Git and Pip\nDESCRIPTION: This command clones the SpecDAL repository from GitHub and installs it using pip. It will override any existing SpecDAL installations in the current environment.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/EnSpec/SpecDAL.git && pip install SpecDAL/\n```\n\n----------------------------------------\n\nTITLE: Loading Spectral Data from Directory\nDESCRIPTION: Creates a Collection object by reading all spectrum files from a specified directory. The Collection constructor automatically reads all compatible files and uses filenames as spectrum identifiers.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# read spectrum files in directory\nc = Collection(name='Sample data', directory='/home/young/data/specdal/sample/ASD/')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of specdal_pipeline\nDESCRIPTION: Demonstrates how to use specdal_pipeline to process spectra files and output results to a specific directory.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline  -o specdal_output /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Remove White Reference Spectra\nDESCRIPTION: Shows how to use specdal_pipeline to remove all white reference spectra from the output dataset.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline --filter_white /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Interpolating Spectral Data with SpecDAL in Python\nDESCRIPTION: Performs linear interpolation on the spectral data to resample it to the nearest integer wavelengths. This helps standardize the wavelength intervals.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns.interpolate(method='linear')\nprint(s.measurement.head())\n```\n\n----------------------------------------\n\nTITLE: Visualizing Spectral Data with SpecDAL and Matplotlib in Python\nDESCRIPTION: Plots the spectral measurements using the plot method of the Spectrum object, which is a wrapper around pandas Series plotting functionality.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ns.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Group Spectra and Filter Within Groups\nDESCRIPTION: Demonstrates how to group spectra by filename and then perform filtering on each group using specdal_pipeline.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline --filter_std 750 1200 1 500 600 2 \n-g -gi 0 1 2  --filter_on group /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Group Input Files by Filename Components\nDESCRIPTION: Shows how to group input files based on specific components of their filenames using specdal_pipeline.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline -g -gi 0 1 2 -- /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for EnSpec/SpecDAL\nDESCRIPTION: This snippet lists the required Python packages for the EnSpec/SpecDAL project. It includes numpy, pandas (version 0.20.0 or higher), matplotlib, scipy, and numpydoc. These packages are essential for data manipulation, visualization, scientific computing, and documentation in the project.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy\npandas >= 0.20.0\nmatplotlib\nscipy\nnumpydoc\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Spectral Data Analysis\nDESCRIPTION: Imports the necessary libraries for spectral data processing and visualization, including SpecDAL for spectral analysis, matplotlib for plotting, and numpy for numerical operations.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom specdal import Collection, Spectrum, read\nfrom matplotlib import pyplot as plt\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Importing SpecDAL and Matplotlib\nDESCRIPTION: Imports necessary modules from SpecDAL library and Matplotlib for plotting spectral data.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_collection.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom specdal import Collection, Spectrum, read\nfrom matplotlib import pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Importing SpecDAL and Matplotlib in Python\nDESCRIPTION: Imports the SpecDAL library for spectral data processing and pyplot from Matplotlib for data visualization.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/process_spectrum.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport specdal\nfrom matplotlib import pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Using the specdal_info Command Line Interface\nDESCRIPTION: The command-line interface for the specdal_info tool, showing all available options and arguments for analyzing spectral data files.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_info.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nusage: specdal_info [-h] [--raw] [--list_measure_types]\n                        [--list_metadata_fields] [--measure_type MEASURE_TYPE]\n                        [--metadata [FIELD [FIELD ...]]] [-n N] [-d]\n                        FILE [FILE ...]\n```\n\n----------------------------------------\n\nTITLE: Installing SpecDAL from source\nDESCRIPTION: Commands to navigate to the cloned SpecDAL directory and install the package from source.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ./SpecDAL\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Installing SpecDAL in development mode\nDESCRIPTION: Command to install SpecDAL in development mode, which allows modifying the source code without reinstalling.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Installing stable SpecDAL with pip\nDESCRIPTION: Command to install the stable version of SpecDAL using pip3, with the upgrade flag to ensure the latest stable version.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install specdal --upgrade\n```\n\n----------------------------------------\n\nTITLE: Running SpecDAL Docker Container\nDESCRIPTION: This command runs a bash script to start and enter the SpecDAL Docker container, mapping the current directory to /home/ in the container.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash runDocker\n```\n\n----------------------------------------\n\nTITLE: Building SpecDAL Docker Image\nDESCRIPTION: This command builds a Docker image for SpecDAL, enabling containerized deployment of the package.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/README.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t specdal --no-cache -f Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Cloning SpecDAL repository from GitHub\nDESCRIPTION: Command to clone the SpecDAL repository from GitHub to the local machine for source-based installation.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/EnSpec/SpecDAL.git\n```\n\n----------------------------------------\n\nTITLE: Activating a virtual environment\nDESCRIPTION: Command to activate the previously created virtual environment, which isolates the Python session.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/venv/specdal/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating a Python3 virtual environment\nDESCRIPTION: Command to create a new virtual environment called 'specdal_env' using Python 3 as the default interpreter.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv -p python3 ~/venv/specdal_env\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenv with pip\nDESCRIPTION: Command to install the virtualenv package using pip installer with user permissions.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install --user virtualenv\n```\n\n----------------------------------------\n\nTITLE: Creating a directory for virtual environments\nDESCRIPTION: Command to create a directory named 'venv' in the user's home directory for storing virtual environments.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/venv\n```\n\n----------------------------------------\n\nTITLE: Installing development SpecDAL with pip\nDESCRIPTION: Command to install the latest development version of SpecDAL using pip3 with the pre-release flag.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install specdal --pre\n```\n\n----------------------------------------\n\nTITLE: Deactivating a virtual environment\nDESCRIPTION: Command to exit an activated virtual environment and return to the global Python environment.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Uninstalling SpecDAL development mode\nDESCRIPTION: Command to uninstall SpecDAL from development mode when finished with source code modifications.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/installation.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ python setup.py develop --uninstall\n```\n\n----------------------------------------\n\nTITLE: Output Whole-Dataset Images and Files Only\nDESCRIPTION: Shows how to use specdal_pipeline to output only whole-dataset images and files, omitting individual spectrum outputs.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline  -oi -o specdal_output /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Output Images Only\nDESCRIPTION: Demonstrates how to use specdal_pipeline to output only images, without any data files.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/doc/specdal_pipeline.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nspecdal_pipeline  -od -o specdal_output /path/to/spectra/\n```\n\n----------------------------------------\n\nTITLE: Listing Random Spectrum Names\nDESCRIPTION: Displays 10 randomly selected spectrum names from the collection to illustrate the naming patterns before grouping. Uses numpy's random choice function to select a sample of names.\nSOURCE: https://github.com/EnSpec/SpecDAL/blob/main/specdal/examples/grouping.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlist(np.random.choice([s.name for s in c.spectra], size=10)) # list some names\n```"
  }
]