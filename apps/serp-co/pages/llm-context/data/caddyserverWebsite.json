[
  {
    "owner": "caddyserver",
    "repo": "website",
    "content": "TITLE: Basic Caddyfile with Site Address\nDESCRIPTION: The simplest Caddyfile configuration that just defines a site address. This is the starting point for any Caddyfile configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n```\n\n----------------------------------------\n\nTITLE: Basic WordPress Server Configuration in Caddyfile\nDESCRIPTION: A production-ready Caddyfile configuration that sets up a WordPress site with automatic HTTPS. It configures the root directory, enables encoding, sets up PHP FastCGI, and enables the file server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /var/www/wordpress\n\tencode\n\tphp_fastcgi unix//run/php/php-version-fpm.sock\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Server Configuration\nDESCRIPTION: Simple example of configuring a file server for localhost.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Proxy to HTTPS Backend with Caddy CLI\nDESCRIPTION: Command to set up an HTTPS reverse proxy that connects to an HTTPS backend, demonstrating end-to-end encryption.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from :2080 --to https://localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Caddyfile Address in Caddy\nDESCRIPTION: Demonstrates how to define a basic Caddyfile with a localhost address. This is the first step in configuring a Caddy server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Caddyfile\nDESCRIPTION: Demonstrates a simple Caddyfile configuration to enable HTTPS for a domain, responding with a static message.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com\n\nrespond \"Hello, privacy!\"\n```\n\n----------------------------------------\n\nTITLE: Setting up HTTPS Reverse Proxy with Caddy\nDESCRIPTION: Command-line option to create an HTTPS reverse proxy to a local backend using Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Starting Caddy Server from Command Line\nDESCRIPTION: Demonstrates the command to start Caddy server from the command line. This should be run from the same folder containing the Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy start\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy Configuration in Caddy\nDESCRIPTION: Two reverse proxy patterns: one for proxying all requests to a backend service, and another for selectively proxying API requests while serving static files for other paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\treverse_proxy localhost:5000\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /var/www\n\treverse_proxy /api/* localhost:5000\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy Directive Syntax in Caddyfile\nDESCRIPTION: Complete syntax definition for the reverse_proxy directive in Caddyfile, showing all possible configuration options including backend configuration, load balancing, health checks, streaming options, header manipulation, and response handling.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nreverse_proxy [<matcher>] [<upstreams...>] {\n\t# backends\n\tto      <upstreams...>\n\tdynamic <module> ...\n\n\t# load balancing\n\tlb_policy       <name> [<options...>]\n\tlb_retries      <retries>\n\tlb_try_duration <duration>\n\tlb_try_interval <interval>\n\tlb_retry_match  <request-matcher>\n\n\t# active health checking\n\thealth_uri      <uri>\n\thealth_upstream <ip:port>\n\thealth_port     <port>\n\thealth_interval <interval>\n\thealth_passes   <num>\n\thealth_fails\t<num>\n\thealth_timeout  <duration>\n\thealth_status   <status>\n\thealth_body     <regexp>\n\thealth_follow_redirects\n\thealth_headers {\n\t\t<field> [<values...>]\n\t}\n\n\t# passive health checking\n\tfail_duration     <duration>\n\tmax_fails         <num>\n\tunhealthy_status  <status>\n\tunhealthy_latency <duration>\n\tunhealthy_request_count <num>\n\n\t# streaming\n\tflush_interval     <duration>\n\trequest_buffers    <size>\n\tresponse_buffers   <size>\n\tstream_timeout     <duration>\n\tstream_close_delay <duration>\n\n\t# request/header manipulation\n\ttrusted_proxies [private_ranges] <ranges...>\n\theader_up   [+|-]<field> [<value|regexp> [<replacement>]]\n\theader_down [+|-]<field> [<value|regexp> [<replacement>]]\n\tmethod <method>\n\trewrite <to>\n\n\t# round trip\n\ttransport <name> {\n\t\t...\n\t}\n\n\t# optionally intercept responses from upstream\n\t@name {\n\t\tstatus <code...>\n\t\theader <field> [<value>]\n\t}\n\treplace_status [<matcher>] <status_code>\n\thandle_response [<matcher>] {\n\t\t<directives...>\n\n\t\t# special directives only available in handle_response\n\t\tcopy_response [<matcher>] [<status>] {\n\t\t\tstatus <status>\n\t\t}\n\t\tcopy_response_headers [<matcher>] {\n\t\t\tinclude <fields...>\n\t\t\texclude <fields...>\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Static File Server Configuration in Caddy\nDESCRIPTION: Basic Caddyfile configuration for serving static files from a directory. Specifies the site domain and root directory path.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /var/www\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Caddyfile\nDESCRIPTION: Demonstrates how to use environment variables in the Caddyfile for flexible configuration. Variables are substituted before parsing begins and can expand to various forms of content.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\treverse_proxy {$UPSTREAMS}\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{$DOMAIN:localhost} {\n\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tacme_dns cloudflare {env.CLOUDFLARE_API_TOKEN}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Default Caddyfile\nDESCRIPTION: Command to run Caddy using a Caddyfile in the current directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Compression\nDESCRIPTION: A Caddyfile configuration that enables Gzip and Zstandard compression for responses, along with templates and file serving. This demonstrates adding multiple directives to enhance functionality.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nencode\ntemplates\nfile_server browse\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Options in Caddy Reverse Proxy\nDESCRIPTION: This example shows how to configure transport options such as dial timeout and response header timeout in Caddy's reverse proxy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy localhost:8080 {\n\t\ttransport http {\n\t\t\tdial_timeout 2s\n\t\t\tresponse_header_timeout 30s\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Multiple Site Blocks\nDESCRIPTION: A Caddyfile that defines two different sites on different ports, each with their own configuration. This demonstrates how to host multiple sites with different responses.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\n:8080 {\n\trespond \"I am 8080\"\n}\n\n:8081 {\n\trespond \"I am 8081\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caddyfile Configuration for Reverse Proxy\nDESCRIPTION: Simple Caddyfile configuration to set up a reverse proxy from port 2080 to port 9000.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\n:2080\n\nreverse_proxy :9000\n```\n\n----------------------------------------\n\nTITLE: FrankenPHP Configuration in Caddy\nDESCRIPTION: Configuration for using FrankenPHP, a Caddy distribution that calls PHP directly using CGO for improved performance.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\n{\n    frankenphp\n    order php_server before file_server\n}\n\nexample.com {\n\troot * /srv/public\n    encode zstd br gzip\n    php_server\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddyserver for caddyserver.com Website\nDESCRIPTION: This Caddyfile configures the server for caddyserver.com. It sets up file serving, templating, encoding, redirects, rewrites, and a reverse proxy for the API endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/website-caddyfile.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\ncaddyserver.com\n\nroot * src\n\nfile_server\ntemplates # markdown & syntax highlighting!\nencode zstd gzip\n\nredir   /docs/json   /docs/json/\nrewrite /docs/json/* /docs/json/index.html\nrewrite /docs/*      /docs/index.html\n\nreverse_proxy /api/* localhost:9002\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy File Server with Caddyfile\nDESCRIPTION: Examples of Caddyfile configurations for setting up a static file server. Includes basic setup, enabling directory browsing, and specifying a custom root directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/static-files.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nfile_server\n```\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nfile_server browse\n```\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nroot * /var/www/mysite\nfile_server\n```\n\n----------------------------------------\n\nTITLE: Routing Requests with Handle Directive in Caddyfile\nDESCRIPTION: This example demonstrates how to use the handle directive to route requests to different handlers based on the path. It uses a file server for '/foo/' and a reverse proxy for other requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\thandle /foo/* {\n\t\tfile_server\n\t}\n\n\thandle {\n\t\treverse_proxy 127.0.0.1:8080\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Global Options Reference in Caddyfile\nDESCRIPTION: Comprehensive reference showing all available global options in a Caddyfile configuration, organized by category. Includes general options, TLS options, server options, file systems, PKI options, and event options.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\t# General Options\n\tdebug\n\thttp_port    <port>\n\thttps_port   <port>\n\tdefault_bind <hosts...>\n\torder <dir1> first|last|[before|after <dir2>]\n\tstorage <module_name> {\n\t\t<options...>\n\t}\n\tstorage_clean_interval <duration>\n\tadmin   off|<addr> {\n\t\torigins <origins...>\n\t\tenforce_origin\n\t}\n\tpersist_config off\n\tlog [name] {\n\t\toutput  <writer_module> ...\n\t\tformat  <encoder_module> ...\n\t\tlevel   <level>\n\t\tinclude <namespaces...>\n\t\texclude <namespaces...>\n\t}\n\tgrace_period   <duration>\n\tshutdown_delay <duration>\n\tmetrics {\n\t\tper_host\n\t}\n\n\t# TLS Options\n\tauto_https off|disable_redirects|ignore_loaded_certs|disable_certs\n\temail <yours>\n\tdefault_sni <name>\n\tfallback_sni <name>\n\tlocal_certs\n\tskip_install_trust\n\tacme_ca <directory_url>\n\tacme_ca_root <pem_file>\n\tacme_eab {\n\t\tkey_id <key_id>\n\t\tmac_key <mac_key>\n\t}\n\tacme_dns <provider> ...\n\tdns <provider> ...\n\tech <public_names...> {\n\t\tdns <provider> ...\n\t}\n\ton_demand_tls {\n\t\task        <endpoint>\n\t\tpermission <module>\n\t}\n\tkey_type ed25519|p256|p384|rsa2048|rsa4096\n\tcert_issuer <name> ...\n\trenew_interval <duration>\n\tcert_lifetime  <duration>\n\tocsp_interval  <duration>\n\tocsp_stapling off\n\tpreferred_chains [smallest] {\n\t\troot_common_name <common_names...>\n\t\tany_common_name  <common_names...>\n\t}\n\n\t# Server Options\n\tservers [<listener_address>] {\n\t\tname <name>\n\t\tlistener_wrappers {\n\t\t\t<listener_wrappers...>\n\t\t}\n\t\ttimeouts {\n\t\t\tread_body   <duration>\n\t\t\tread_header <duration>\n\t\t\twrite       <duration>\n\t\t\tidle        <duration>\n\t\t}\n\t\tkeepalive_interval <duration>\n\t\ttrusted_proxies <module> ...\n\t\tclient_ip_headers <headers...>\n\t\ttrace\n\t\tmax_header_size <size>\n\t\tenable_full_duplex\n\t\tlog_credentials\n\t\tprotocols [h1|h2|h2c|h3]\n\t\tstrict_sni_host [on|insecure_off]\n\t}\n\n\t# File Systems\n\tfilesystem <name> <module> {\n\t\t<options...>\n\t}\n\n\t# PKI Options\n\tpki {\n\t\tca [<id>] {\n\t\t\tname                  <name>\n\t\t\troot_cn               <name>\n\t\t\tintermediate_cn       <name>\n\t\t\tintermediate_lifetime <duration>\n\t\t\troot {\n\t\t\t\tformat <format>\n\t\t\t\tcert   <path>\n\t\t\t\tkey    <path>\n\t\t\t}\n\t\t\tintermediate {\n\t\t\t\tformat <format>\n\t\t\t\tcert   <path>\n\t\t\t\tkey    <path>\n\t\t\t}\n\t\t}\n\t}\n\n\t# Event options\n\tevents {\n\t\ton <event> <handler...>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Caddy Configuration via API\nDESCRIPTION: Command to upload a JSON configuration file to Caddy using the admin API's /load endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n\t-H \"Content-Type: application/json\" \\\n\t-d @caddy.json\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxying to HTTPS Upstream in Caddy\nDESCRIPTION: This configuration demonstrates how to set up a reverse proxy to an HTTPS upstream server in Caddy, including setting the Host header.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_20\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy https://example.com {\n\t\theader_up Host {upstream_hostport}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Configuration in Caddy\nDESCRIPTION: This snippet demonstrates how to configure load balancing between multiple backend servers in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy node1:80 node2:80 node3:80\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Sites in Caddy\nDESCRIPTION: Illustrates how to define multiple sites in a Caddyfile using curly braces. This example sets up two different responses for localhost and localhost:2016.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\trespond \"Hello, world!\"\n}\n\nlocalhost:2016 {\n\trespond \"Goodbye, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Host Header for HTTPS Reverse Proxy in Caddy\nDESCRIPTION: Demonstrates how to configure a reverse proxy to HTTPS upstream with proper Host header management. The configuration ensures the Host header matches the TLS ServerName value by setting it to the upstream host and port.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy-d\nCODE:\n```\nreverse_proxy https://example.com {\n\theader_up Host {upstream_hostport}\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Handle and Handle_Path Directives in Caddyfile\nDESCRIPTION: This snippet shows how to use both handle and handle_path directives in the same site configuration, demonstrating their mutual exclusivity and different path handling behaviors.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\thandle_path /foo/* {\n\t\t# The path has the \"/foo\" prefix stripped\n\t}\n\n\thandle /bar/* {\n\t\t# The path still retains \"/bar\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Domain HTTPS Reverse Proxy with Caddy CLI\nDESCRIPTION: Command to set up an HTTPS reverse proxy with a custom domain name, proxying to a backend on port 9000.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to :9000\n```\n\n----------------------------------------\n\nTITLE: Running Caddy File Server via Command Line\nDESCRIPTION: Basic command to start Caddy as a file server in the current directory. Includes variations for specifying port, enabling directory browsing, and setting a custom root directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/static-files.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server\n```\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server --listen :2015\n```\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server --browse\n```\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server --root ~/mysite\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy with Load Balancing\nDESCRIPTION: Advanced example showing reverse proxy configuration with load balancing policy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\treverse_proxy localhost:9000 localhost:9001 {\n\t\tlb_policy first\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for HTTPS Reverse Proxy\nDESCRIPTION: Caddyfile configuration to set up an HTTPS reverse proxy with a custom domain, proxying to a backend on port 9000.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com\n\nreverse_proxy :9000\n```\n\n----------------------------------------\n\nTITLE: Basic Directive Syntax in Caddyfile\nDESCRIPTION: Example showing the standard syntax pattern for Caddyfile directives. Demonstrates the structure with optional matchers, arguments, and subdirectives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\ndirective [<matcher>] <args...> {\n\tsubdirective [<args...>]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Caddyfile\nDESCRIPTION: Shows how to add comments in the Caddyfile using the # symbol. Comments can be at the start of a line or at the end, but cannot appear in the middle of a token.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy\nCODE:\n```\n# Comments can start a line\ndirective  # or go at the end\n```\n\n----------------------------------------\n\nTITLE: Default Directive Order in Caddyfile\nDESCRIPTION: The default evaluation order for Caddy HTTP directives. This order can be customized using the 'order' global option or the 'route' directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\ntracing\n\nmap\nvars\nfs\nroot\nlog_append\nlog_skip\nlog_name\n\nheader\ncopy_response_headers # only in reverse_proxy's handle_response block\nrequest_body\n\nredir\n\n# incoming request manipulation\nmethod\nrewrite\nuri\ntry_files\n\n# middleware handlers; some wrap responses\nbasic_auth\nforward_auth\nrequest_header\nencode\npush\nintercept\ntemplates\n\n# special routing & dispatching directives\ninvoke\nhandle\nhandle_path\nroute\n\n# handlers that typically respond to requests\nabort\nerror\ncopy_response # only in reverse_proxy's handle_response block\nrespond\nmetrics\nreverse_proxy\nphp_fastcgi\nfile_server\nacme_server\n```\n\n----------------------------------------\n\nTITLE: PHP-FPM Configuration in Caddy\nDESCRIPTION: Configuration patterns for serving PHP applications using PHP-FPM, including both TCP and Unix socket connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv/public\n\tencode\n\tphp_fastcgi localhost:9000\n\tfile_server\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nphp_fastcgi unix//run/php/php8.2-fpm.sock\n```\n\n----------------------------------------\n\nTITLE: Caddy Server Multi-Purpose Proxy Configuration\nDESCRIPTION: Comprehensive Caddy server configuration demonstrating PHP handling, dynamic backend proxying, load balanced service proxying, and HTTPS upstream proxying. Includes settings for health checks and load balancing policies.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/proxy.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com\n\n# Serve PHP sites\nhandle /blog/* {\n\troot * /var/www/wordpress\n\tphp_fastcgi localhost:9000\n\tfile_server\n}\n\n# Proxy an autoscaling API with dynamic backends\nreverse_proxy /api/* {\n\tdynamic srv _api._tcp.example.com\n}\n\n# Proxy a compute-heavy distributed service\n# with load balancing and health checks\nreverse_proxy /service/* {\n\tto              10.0.1.1:80 10.0.1.2:80 10.0.1.3:80\n\tlb_policy       least_conn\n\tlb_try_duration 10s\n\tfail_duration   5s\n}\n\n# Proxy everything else to an HTTPS upstream\nreverse_proxy https://service.example.com {\n\theader_up Host {upstream_hostport}\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Certificate Configuration in Caddy\nDESCRIPTION: Configuration for serving multiple subdomains using wildcard certificates with DNS challenge.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\n*.example.com {\n\ttls {\n\t\tdns <provider_name> [<params...>]\n\t}\n\n\t@foo host foo.example.com\n\thandle @foo {\n\t\trespond \"Foo!\"\n\t}\n\n\t@bar host bar.example.com\n\thandle @bar {\n\t\trespond \"Bar!\"\n\t}\n\n\thandle {\n\t\tabort\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example with File Server\nDESCRIPTION: Shows a practical example of using the error directive with handle_errors to serve custom error pages. Demonstrates error triggering for specific paths and serving corresponding HTML error pages.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/error.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv\n\n\t# Trigger errors for certain paths\n    error /private* \"Unauthorized\" 403\n\terror /hidden* \"Not found\" 404\n\n    # Handle the error by serving an HTML page \n    handle_errors {\n        rewrite * /{err.status_code}.html\n\t\tfile_server\n    }\n\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Backend Discovery using DNS A/AAAA Records in Caddy\nDESCRIPTION: This example shows how to dynamically discover backend servers using DNS A/AAAA record queries in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_27\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy {\n\t\tdynamic a example.com 9000\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy Configuration in JSON Format\nDESCRIPTION: A basic Caddy configuration in JSON format that sets up an HTTP server listening on port 2015 and responding with a static message.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {\n\t\t\"http\": {\n\t\t\t\"servers\": {\n\t\t\t\t\"example\": {\n\t\t\t\t\t\"listen\": [\":2015\"],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"handle\": [{\n\t\t\t\t\t\t\t\t\"handler\": \"static_response\",\n\t\t\t\t\t\t\t\t\"body\": \"Hello, world!\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Caddy\nDESCRIPTION: Docker Compose YAML configuration for running Caddy container with proper port mappings, volume mounts for persistence, and restart policy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  caddy:\n    image: caddy:<version>\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"443:443/udp\"\n    volumes:\n      - ./Caddyfile:/etc/caddy/Caddyfile\n      - ./site:/srv\n      - caddy_data:/data\n      - caddy_config:/config\n\nvolumes:\n  caddy_data:\n  caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Reloading Caddy Configuration from Command Line\nDESCRIPTION: Shows the command to reload Caddy's configuration from the command line, which is an alternative to using the API directly.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reload\n```\n\n----------------------------------------\n\nTITLE: Basic Reverse Proxy Configuration\nDESCRIPTION: Simple example of configuring a reverse proxy for localhost.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\treverse_proxy localhost:9000\n}\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration Block Syntax in Caddy\nDESCRIPTION: Defines the complete syntax structure for TLS configuration in Caddy server, including all available directives for certificate management, security settings, and client authentication.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\ntls [internal|<email>] | [<cert_file> <key_file>] {\n\tprotocols <min> [<max>]\n\tciphers   <cipher_suites...>\n\tcurves    <groups...>\n\talpn      <values...>\n\tload      <paths...>\n\tca        <ca_dir_url>\n\tca_root   <pem_file>\n\tkey_type  ed25519|p256|p384|rsa2048|rsa4096\n\tdns       <provider_name> [<params...>]\n\tpropagation_timeout <duration>\n\tpropagation_delay   <duration>\n\tdns_ttl             <duration>\n\tdns_challenge_override_domain <domain>\n\tresolvers <dns_servers...>\n\teab       <key_id> <mac_key>\n\ton_demand\n\treuse_private_keys\n\tclient_auth {\n\t\tmode                   [request|require|verify_if_given|require_and_verify]\n\t\ttrust_pool             <module>\n\t\tverifier \t\t\t   <module>\n\t}\n\tissuer          <issuer_name>  [<params...>]\n\tget_certificate <manager_name> [<params...>]\n\tinsecure_secrets_log <log_file>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caddyfile Configuration\nDESCRIPTION: A simple Caddyfile configuration that achieves the same result as the JSON configuration above, listening on port 2015 and responding with 'Hello, world!'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\n:2015\n\nrespond \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Backend Discovery using DNS SRV Records in Caddy\nDESCRIPTION: This configuration demonstrates how to dynamically discover backend servers using DNS SRV record queries in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_28\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy {\n\t\tdynamic srv _api._tcp.example.com\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Daemon Command\nDESCRIPTION: The command to start Caddy as a daemon process. This runs Caddy in the foreground and blocks the terminal until terminated.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Starting the Caddy Daemon with CLI Command\nDESCRIPTION: Command to start the Caddy daemon process using the run subcommand, which blocks and continues running until terminated.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP FastCGI in Caddy 2\nDESCRIPTION: Demonstrates how to set up PHP FastCGI in Caddy 2 using the php_fastcgi directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nphp_fastcgi localhost:9005\n```\n\n----------------------------------------\n\nTITLE: Formatting Caddyfile\nDESCRIPTION: Demonstrates the usage of the 'caddy fmt' command for formatting or prettifying a Caddyfile, with options for overwriting the original file or displaying differences.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncaddy fmt [<path>]\n\t[-w, --overwrite]\n\t[-d, --diff]\n```\n\n----------------------------------------\n\nTITLE: Running Caddy File Server\nDESCRIPTION: Illustrates the usage of the 'caddy file-server' command to start a static file server, including various options for customization such as root directory, domain, and compression settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server\n\t[-r, --root <path>]\n\t[--listen <addr>]\n\t[-d, --domain <example.com>]\n\t[-b, --browse]\n\t[--reveal-symlinks]\n\t[-t, --templates]\n\t[--access-log]\n\t[-v, --debug]\n\t[--no-compress]\n\t[-p, --precompressed]\n```\n\n----------------------------------------\n\nTITLE: PHP FastCGI Expanded Configuration\nDESCRIPTION: Shows the complete expanded form of the php_fastcgi directive, demonstrating how it handles path canonicalization, index files, and PHP file proxying.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nroute {\n\t# Add trailing slash for directory requests\n\t# This redirection is automatically disabled if \"{http.request.uri.path}/index.php\"\n\t# doesn't appear in the try_files list\n\t@canonicalPath {\n\t\tfile {path}/index.php\n\t\tnot path */\n\t}\n\tredir @canonicalPath {http.request.orig_uri.path}/ 308\n\n\t# If the requested file does not exist, try index files and assume index.php always exists\n\t@indexFiles file {\n\t\ttry_files {path} {path}/index.php index.php\n\t\ttry_policy first_exist_fallback\n\t\tsplit_path .php\n\t}\n\trewrite @indexFiles {file_match.relative}\n\n\t# Proxy PHP files to the FastCGI responder\n\t@phpFiles path *.php\n\treverse_proxy @phpFiles <php-fpm_gateway> {\n\t\ttransport fastcgi {\n\t\t\tsplit .php\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Site Block Syntax\nDESCRIPTION: A Caddyfile using the site block syntax with curly braces, which is equivalent to the previous configuration. This syntax allows defining multiple sites in a single Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\tencode\n\ttemplates\n\tfile_server browse\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Reverse Proxy with Caddy\nDESCRIPTION: The 'caddy reverse-proxy' command creates a simple but production-ready reverse proxy. It supports customization of source and destination addresses, headers, and various proxy-related options.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy\n\t[-f, --from <addr>]\n\t(-t, --to <addr>)\n\t[-H, --header-up \"<Field>: <value>\"]\n\t[-d, --header-down \"<Field>: <value>\"]\n\t[-c, --change-host-header]\n\t[-r, --disable-redirects]\n\t[-i, --internal-certs]\n\t[-v, --debug]\n\t[--access-log]\n\t[--insecure]\n```\n\n----------------------------------------\n\nTITLE: Example of Named Routes with invoke in Caddyfile\nDESCRIPTION: Demonstrates how to define a named route with a reverse_proxy configuration and then invoke it in multiple sites, allowing the same in-memory load balancing state to be reused across configurations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/invoke.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n&(app-proxy) {\n\treverse_proxy app-01:8080 app-02:8080 app-03:8080 {\n\t\tlb_policy least_conn\n\t\thealth_uri /healthz\n\t\thealth_interval 5s\n\t}\n}\n\n# Apex domain allows accessing the app via an /app subpath\n# and the main site otherwise.\nexample.com {\n\thandle_path /app* {\n\t\tinvoke app-proxy\n\t}\n\n\thandle {\n\t\troot * /srv\n\t\tfile_server\n\t}\n}\n\n# The app is also accessible via a subdomain.\napp.example.com {\n\tinvoke app-proxy\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy in Daemon Mode\nDESCRIPTION: The 'caddy run' command starts Caddy and runs it indefinitely in daemon mode. It supports options for specifying the initial configuration, adapter, PID file, environment variables, and automatic reloading.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n\t[-c, --config <path>]\n\t[-a, --adapter <name>]\n\t[--pidfile <file>]\n\t[-e, --environ]\n\t[--envfile <file>]\n\t[-r, --resume]\n\t[-w, --watch]\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for Header Directive in Caddyfile\nDESCRIPTION: Defines the syntax for the header directive in Caddyfile, showing various operations like adding, setting, deleting, replacing headers and setting default values. It includes special prefixes for different operations and options for deferring header manipulations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader [<matcher>] [[+|-|?|>]<field> [<value>|<find>] [<replace>]] {\n\t# Add\n\t+<field> <value>\n\n\t# Set\n\t<field> <value>\n\n\t# Set with defer\n\t><field> <value>\n\n\t# Delete\n\t-<field>\n\n\t# Replace\n\t<field> <find> <replace>\n\n\t# Replace with defer\n\t><field> <find> <replace>\n\n\t# Default\n\t?<field> <value>\n\n\t[defer]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Pages for Upstream Errors in Caddy\nDESCRIPTION: This configuration demonstrates how to serve custom error pages for specific error status codes from the upstream server in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_26\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy localhost:8080 {\n\t\t@error status 500 503\n\t\thandle_response @error {\n\t\t\troot    * /path/to/error/pages\n\t\t\trewrite * /{rp.status_code}.html\n\t\t\tfile_server\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Path Matcher for Reverse Proxy\nDESCRIPTION: A Caddyfile that uses a path matcher to route API requests to a reverse proxy and all other requests to a file server. This demonstrates how to conditionally apply directives based on the request path.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nreverse_proxy /api/* 127.0.0.1:9005\nfile_server\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with File Server\nDESCRIPTION: A Caddyfile configuration that serves files from the current directory with directory listing enabled. This replaces the static response with a dynamic file server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nfile_server browse\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Transport in Caddy\nDESCRIPTION: This snippet shows the structure and available options for configuring the HTTP transport in Caddy. It includes settings for buffers, timeouts, TLS, keepalive, and various other connection parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy-d\nCODE:\n```\ntransport http {\n\tread_buffer             <size>\n\twrite_buffer            <size>\n\tmax_response_header     <size>\n\tproxy_protocol          v1|v2\n\tdial_timeout            <duration>\n\tdial_fallback_delay     <duration>\n\tresponse_header_timeout <duration>\n\texpect_continue_timeout <duration>\n\tresolvers <ip...>\n\ttls\n\ttls_client_auth <automate_name> | <cert_file> <key_file>\n\ttls_insecure_skip_verify\n\ttls_curves <curves...>\n\ttls_timeout <duration>\n\ttls_trust_pool <module>\n\ttls_server_name <server_name>\n\ttls_renegotiation <level>\n\ttls_except_ports <ports...>\n\tkeepalive [off|<duration>]\n\tkeepalive_interval <interval>\n\tkeepalive_idle_conns <max_count>\n\tkeepalive_idle_conns_per_host <count>\n\tversions <versions...>\n\tcompression off\n\tmax_conns_per_host <count>\n\tforward_proxy_url <url>\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Port HTTPS Reverse Proxy with Caddy CLI\nDESCRIPTION: Command to set up an HTTPS reverse proxy on a custom port (8443) with a specific domain, proxying to a backend on port 9000.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com:8443 --to :9000\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Caddy Docker Image\nDESCRIPTION: Dockerfile to build a custom Caddy binary with plugins using the Caddy builder image, then copy it to a clean Caddy image for a smaller final image.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM caddy:<version>-builder AS builder\n\nRUN xcaddy build \\\n    --with github.com/caddyserver/nginx-adapter \\\n    --with github.com/hairyhenderson/caddy-teapot-module@v0.0.3-0\n\nFROM caddy:<version>\n\nCOPY --from=builder /usr/bin/caddy /usr/bin/caddy\n```\n\n----------------------------------------\n\nTITLE: Logging Reverse Proxy Metrics in Caddyfile\nDESCRIPTION: Example demonstrating how to use log_append with placeholders to track which upstream server was used in a load-balanced setup, along with performance metrics like duration and latency in milliseconds.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_append.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog\n\n\thandle {\n\t\treverse_proxy node1:80 node2:80 node3:80 {\n\t\t\tlb_policy random_choose 2 \n\t\t}\n\t\tlog_append upstream_host {rp.upstream.host}\n\t\tlog_append upstream_duration_ms {rp.upstream.duration_ms}\n\t\tlog_append upstream_latency_ms {rp.upstream.latency_ms}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Replacement in Caddy Reverse Proxy\nDESCRIPTION: This configuration demonstrates how to replace a path prefix before proxying requests in Caddy using the rewrite directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_24\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\thandle_path /old-prefix/* {\n\t\trewrite * /new-prefix{path}\n\t\treverse_proxy localhost:9000\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Stripping in Caddy Reverse Proxy\nDESCRIPTION: This example shows how to strip a path prefix before proxying requests in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_23\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\thandle_path /prefix/* {\n\t\treverse_proxy localhost:9000\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax of request_header Directive in Caddy\nDESCRIPTION: Defines the syntax for the request_header directive which manipulates HTTP request headers. It supports setting, adding, or deleting header fields with optional pattern matching and replacement capabilities.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/request_header.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nrequest_header [<matcher>] [[+|-]<field> [<value>|<find>] [<replace>]]\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with YAML Configuration via Command Line\nDESCRIPTION: Demonstrates how to use the yaml adapter with the caddy run command to load a YAML configuration file.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/config-adapters.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run --config caddy.yaml --adapter yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Precompressed File Serving in Caddyfile\nDESCRIPTION: Configures the file server to check for and serve precompressed files if supported by the client.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server {\n\tprecompressed\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Imported Configurations in Caddyfile\nDESCRIPTION: Illustrates how to pass arguments to imported configurations (snippets or files) and use them within the imported content. This allows for more dynamic and flexible configurations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy\nCODE:\n```\n(snippet) {\n\trespond \"Yahaha! You found {args[0]}!\"\n}\n\na.example.com {\n\timport snippet \"Example A\"\n}\n\nb.example.com {\n\timport snippet \"Example B\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter to Existing Query String in Caddyfile\nDESCRIPTION: Example demonstrating how to preserve the existing query string and add a key-value pair for requests to the /api/ endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\trewrite /api/* ?{query}&a=b\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Start Command in Bash\nDESCRIPTION: Starts Caddy in the background with various configuration options including config file path, adapter, environment file, PID file, and watch mode.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncaddy start\n\t[-c, --config <path>]\n\t[-a, --adapter <name>]\n\t[--envfile <file>]\n\t[--pidfile <file>]\n\t[-w, --watch]\n```\n\n----------------------------------------\n\nTITLE: Setting Security and Privacy Headers in Caddyfile\nDESCRIPTION: Example showing how to set multiple security and privacy headers using a block syntax, including FLoC tracking prevention, HSTS, content type options, and clickjacking protection.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader {\n\t# disable FLoC tracking\n\tPermissions-Policy interest-cohort=()\n\n\t# enable HSTS\n\tStrict-Transport-Security max-age=31536000;\n\n\t# disable clients from sniffing the media type\n\tX-Content-Type-Options nosniff\n\n\t# clickjacking protection\n\tX-Frame-Options DENY\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Request Paths in Caddy Configuration\nDESCRIPTION: Examples of using the path matcher to match specific request paths in Caddy configuration. Includes exact matches, wildcards, and multiple paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_23\n\nLANGUAGE: caddy-d\nCODE:\n```\n@assets path /js/* /css/* /images/*\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@favicon path /favicon.ico\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@extensions path *.js *.css\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@assets `path('/js/*', '/css/*', '/images/*')`\n```\n\n----------------------------------------\n\nTITLE: Active Health Checks and Retries in Caddy Reverse Proxy\nDESCRIPTION: This configuration demonstrates how to use active health checks and enable retries on failed connections in Caddy's reverse proxy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy node1:80 node2:80 node3:80 {\n\t\thealth_uri /healthz\n\t\tlb_try_duration 5s\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Single Site Block Configuration\nDESCRIPTION: Shows a simple single site configuration without curly braces, demonstrating reverse proxy and file server directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nreverse_proxy /api/* localhost:9001\nfile_server\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy on Fedora or RHEL/CentOS 8\nDESCRIPTION: Commands to enable the Caddy COPR repository and install Caddy on Fedora or RHEL/CentOS 8 systems. The package includes systemd service unit files but doesn't enable them by default.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndnf install 'dnf-command(copr)'\ndnf copr enable @caddy/caddy\ndnf install caddy\n```\n\n----------------------------------------\n\nTITLE: Complete PHP Site Configuration\nDESCRIPTION: Full configuration example including root directory, PHP FastCGI, and static file serving.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /var/www/html/public\n\tphp_fastcgi 127.0.0.1:9000\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics in Caddyfile Global Options\nDESCRIPTION: Configuration snippet showing how to enable metrics in Caddy's global options using the Caddyfile format.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tmetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Redaction in Logs\nDESCRIPTION: Demonstrates how to redact or remove sensitive cookie values from log entries.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\tformat filter {\n\t\t\trequest>headers>Cookie cookie {\n\t\t\t\treplace session REDACTED\n\t\t\t\tdelete secret\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Caddyfile Example with handle_path and handle\nDESCRIPTION: A full Caddyfile example showing how to use handle_path for an API endpoint while using handle for static content. This demonstrates the mutually exclusive nature of these directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_path.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\t# Serve your API, stripping the /api prefix\n\thandle_path /api/* {\n\t\treverse_proxy localhost:9000\n\t}\n\n\t# Serve your static site\n\thandle {\n\t\troot * /srv\n\t\tfile_server\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: PHP FastCGI Basic Syntax Configuration\nDESCRIPTION: Demonstrates the basic syntax and configuration options for the php_fastcgi directive in Caddyfile, including all available subdirectives and their parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nphp_fastcgi [<matcher>] <php-fpm_gateways...> {\n\troot <path>\n\tsplit <substrings...>\n\tindex <filename>|off\n\ttry_files <files...>\n\tenv [<key> <value>]\n\tresolve_root_symlink\n\tcapture_stderr\n\tdial_timeout  <duration>\n\tread_timeout  <duration>\n\twrite_timeout <duration>\n\n\t<any other reverse_proxy subdirectives...>\n}\n```\n\n----------------------------------------\n\nTITLE: Authelia Integration Example with forward_auth\nDESCRIPTION: An example configuration showing how to integrate Authelia authentication with Caddy using the forward_auth directive to protect an application.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/forward_auth.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\n# Serve the authentication gateway itself\nauth.example.com {\n\treverse_proxy authelia:9091\n}\n\n# Serve your app\napp1.example.com {\n\tforward_auth authelia:9091 {\n\t\turi /api/authz/forward-auth\n\t\tcopy_headers Remote-User Remote-Groups Remote-Name Remote-Email\n\t}\n\n\treverse_proxy app1:8080\n}\n```\n\n----------------------------------------\n\nTITLE: Encode Directive Syntax in Caddyfile\nDESCRIPTION: The complete syntax for the encode directive in Caddyfile, showing all available options and configuration structure.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nencode [<matcher>] [<formats...>] {\n\t# encoding formats\n\tgzip [<level>]\n\tzstd [<level>]\n\t\n\tminimum_length <length>\n\n\tmatch {\n\t\tstatus <code...>\n\t\theader <field> [<value>]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Header Field Matching\nDESCRIPTION: Shows how to match requests based on HTTP header fields.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader <field> [<value> ...]\n\nexpression header({'<field>': '<value>'})\n```\n\n----------------------------------------\n\nTITLE: Example of Status Code Matcher in Caddy\nDESCRIPTION: Example of creating a named response matcher that targets successful responses with status codes in the 2xx range.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\n@success status 2xx\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy on Arch Linux, Manjaro, Parabola\nDESCRIPTION: Command to install Caddy on Arch-based Linux distributions using the pacman package manager. The package includes modified systemd service unit files.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npacman -Syu caddy\n```\n\n----------------------------------------\n\nTITLE: Rewriting All Requests to Index.html in Caddyfile\nDESCRIPTION: Example of rewriting all requests to index.html while preserving any query string parameters. Uses the wildcard matcher to apply to all requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\trewrite * /index.html\n}\n```\n\n----------------------------------------\n\nTITLE: Root with File Server Configuration in Caddyfile\nDESCRIPTION: Example showing a common pattern of pairing the root directive with file_server to serve static files from a specific directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/root.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\troot * /srv\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Defining file_server Directive Syntax in Caddyfile\nDESCRIPTION: Specifies the syntax for the file_server directive in Caddyfile, including optional matcher and browse flag, along with various subdirectives for customizing behavior.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server [<matcher>] [browse] {\n\tfs            <backend...>\n\troot          <path>\n\thide          <files...>\n\tindex         <filenames...>\n\tbrowse        [<template_file>] {\n\t\treveal_symlinks\n\t}\n\tprecompressed [<formats...>]\n\tstatus        <status>\n\tdisable_canonical_uris\n\tpass_thru\n\tsort          <sort_field> [<direction>]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Caddy in Background\nDESCRIPTION: Command to start Caddy in the background, allowing the terminal to be used for other commands.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncaddy start\n```\n\n----------------------------------------\n\nTITLE: Enabling strict SNI host validation in Caddy Server\nDESCRIPTION: Requires that a request's Host header matches the ServerName sent in TLS ClientHello. This is a security feature to prevent domain fronting, especially important when using TLS client authentication.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_48\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tstrict_sni_host on\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Simple HTTP Responses with Caddy\nDESCRIPTION: The 'caddy respond' command starts simple HTTP servers for development, staging, or debugging purposes. It allows customization of status codes, headers, body content, and listener addresses.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncaddy respond\n\t[-s, --status <code>]\n\t[-H, --header \"<Field>: <value>\"]\n\t[-b, --body <content>]\n\t[-l, --listen <addr>]\n\t[-v, --debug]\n\t[--access-log]\n\t[<status|body>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Caddyfile Unmarshaler for a Module in Go\nDESCRIPTION: Example implementation of the caddyfile.Unmarshaler interface for a module called Gizmo. This method parses Caddyfile tokens to configure the module, handling required and optional arguments.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// UnmarshalCaddyfile implements caddyfile.Unmarshaler. Syntax:\n//\n// gizmo <name> [<option>]\n//\nfunc (g *Gizmo) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n\td.Next() // consume directive name\n\n\tif !d.Args(&g.Name) {\n\t\t// not enough args\n\t\treturn d.ArgErr()\n\t}\n\tif d.NextArg() {\n\t\t// optional arg\n\t\tg.Option = d.Val()\n\t}\n\tif d.NextArg() {\n\t\t// too many args\n\t\treturn d.ArgErr()\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTP Handler Module Implementation\nDESCRIPTION: A complete example of an HTTP handler module that prints visitor IP addresses. Includes Caddyfile support, provisioning, validation, and all necessary interface implementations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage visitorip\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/caddyserver/caddy/v2\"\n\t\"github.com/caddyserver/caddy/v2/caddyconfig/caddyfile\"\n\t\"github.com/caddyserver/caddy/v2/caddyconfig/httpcaddyfile\"\n\t\"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n)\n\nfunc init() {\n\tcaddy.RegisterModule(Middleware{})\n\thttpcaddyfile.RegisterHandlerDirective(\"visitor_ip\", parseCaddyfile)\n}\n\n// Middleware implements an HTTP handler that writes the\n// visitor's IP address to a file or stream.\ntype Middleware struct {\n\t// The file or stream to write to. Can be \"stdout\"\n\t// or \"stderr\".\n\tOutput string `json:\"output,omitempty\"`\n\n\tw io.Writer\n}\n\n// CaddyModule returns the Caddy module information.\nfunc (Middleware) CaddyModule() caddy.ModuleInfo {\n\treturn caddy.ModuleInfo{\n\t\tID:  \"http.handlers.visitor_ip\",\n\t\tNew: func() caddy.Module { return new(Middleware) },\n\t}\n}\n\n// Provision implements caddy.Provisioner.\nfunc (m *Middleware) Provision(ctx caddy.Context) error {\n\tswitch m.Output {\n\tcase \"stdout\":\n\t\tm.w = os.Stdout\n\tcase \"stderr\":\n\t\tm.w = os.Stderr\n\tdefault:\n\t\treturn fmt.Errorf(\"an output stream is required\")\n\t}\n\treturn nil\n}\n\n// Validate implements caddy.Validator.\nfunc (m *Middleware) Validate() error {\n\tif m.w == nil {\n\t\treturn fmt.Errorf(\"no writer\")\n\t}\n\treturn nil\n}\n\n// ServeHTTP implements caddyhttp.MiddlewareHandler.\nfunc (m Middleware) ServeHTTP(w http.ResponseWriter, r *http.Request, next caddyhttp.Handler) error {\n\tm.w.Write([]byte(r.RemoteAddr))\n\treturn next.ServeHTTP(w, r)\n}\n\n// UnmarshalCaddyfile implements caddyfile.Unmarshaler.\nfunc (m *Middleware) UnmarshalCaddyfile(d *caddyfile.Dispenser) error {\n\td.Next() // consume directive name\n\n\t// require an argument\n\tif !d.NextArg() {\n\t\treturn d.ArgErr()\n\t}\n\n\t// store the argument\n\tm.Output = d.Val()\n\treturn nil\n}\n\n// parseCaddyfile unmarshals tokens from h into a new Middleware.\nfunc parseCaddyfile(h httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error) {\n\tvar m Middleware\n\terr := m.UnmarshalCaddyfile(h.Dispenser)\n\treturn m, err\n}\n\n// Interface guards\nvar (\n\t_ caddy.Provisioner           = (*Middleware)(nil)\n\t_ caddy.Validator             = (*Middleware)(nil)\n\t_ caddyhttp.MiddlewareHandler = (*Middleware)(nil)\n\t_ caddyfile.Unmarshaler       = (*Middleware)(nil)\n)\n```\n\n----------------------------------------\n\nTITLE: Secure HTTPS Reverse Proxy with Custom CA in Caddy\nDESCRIPTION: This configuration demonstrates how to set up a secure HTTPS reverse proxy by explicitly trusting the upstream's certificate and setting the TLS-SNI.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_22\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy 10.0.0.1:443 {\n\t\ttransport http {\n\t\t\ttls_trusted_ca_certs /path/to/cert.pem\n\t\t\ttls_server_name app.example.com\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth for All Requests in Caddy\nDESCRIPTION: Example showing how to require authentication for all requests to a domain. Includes a BCrypt hashed password for user 'Bob' and demonstrates access to the authenticated username via a placeholder.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/basic_auth.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\tbasic_auth {\n\t\t# Username \"Bob\", password \"hiccup\"\n\t\tBob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n\t}\n\trespond \"Welcome, {http.auth.user.id}\" 200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PROXY Protocol in Caddy\nDESCRIPTION: This snippet demonstrates how to enable and configure PROXY protocol parsing using the 'proxy_protocol' listener wrapper in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_35\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tlistener_wrappers {\n\t\t\tproxy_protocol {\n\t\t\t\ttimeout 2s\n\t\t\t\tallow 192.168.86.1/24 192.168.86.1/24\n\t\t\t\tdeny 10.0.0.0/8\n\t\t\t\tfallback_policy reject\n\t\t\t}\n\t\t\ttls\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Request Method Example in Caddyfile\nDESCRIPTION: Demonstrates how to change the HTTP method to POST for all requests under the /api path using the method directive with a path matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/method.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nmethod /api* POST\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files over HTTPS with Caddy\nDESCRIPTION: Command-line option to serve static files over HTTPS for a specific domain using Caddy's file-server directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncaddy file-server --domain example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Handle Directive Syntax in Caddyfile\nDESCRIPTION: This snippet shows the basic syntax for the handle directive in Caddyfile. It includes an optional matcher and a block for containing other directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle [<matcher>] {\n\t<directives...>\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Request Paths with Regular Expressions in Caddy\nDESCRIPTION: Examples of using the path_regexp matcher to match request paths using regular expressions in Caddy configuration. Includes named capture groups and accessing matched values.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_24\n\nLANGUAGE: caddy-d\nCODE:\n```\n@static path_regexp static \\.([a-f0-9]{6})\\.(css|js)$\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@static path_regexp \\.([a-f0-9]{6})\\.(css|js)$\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@static `path_regexp('\\.([a-f0-9]{6})\\.(css|js)$') && file()`\n```\n\n----------------------------------------\n\nTITLE: Upgrading Caddy Binary in Bash\nDESCRIPTION: Replaces the current Caddy binary with the latest version, including all installed modules and third-party plugins.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncaddy upgrade\n\t[-k, --keep-backup]\n```\n\n----------------------------------------\n\nTITLE: Basic try_files Syntax\nDESCRIPTION: The basic syntax for the try_files directive, showing the structure and policy options for file matching.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files <files...> {\n\tpolicy first_exist|first_exist_fallback|smallest_size|largest_size|most_recently_modified\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Fallback Example\nDESCRIPTION: Example showing how to rewrite requests to index.php if no static files match.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files {path} /index.php\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Caddy Module in Go\nDESCRIPTION: Template for creating a new Caddy module that implements the caddy.Module interface. This snippet demonstrates the minimum required functions to register a module with Caddy including the initialization function and CaddyModule method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage mymodule\n\nimport \"github.com/caddyserver/caddy/v2\"\n\nfunc init() {\n\tcaddy.RegisterModule(Gizmo{})\n}\n\n// Gizmo is an example; put your own type here.\ntype Gizmo struct {\n}\n\n// CaddyModule returns the Caddy module information.\nfunc (Gizmo) CaddyModule() caddy.ModuleInfo {\n\treturn caddy.ModuleInfo{\n\t\tID:  \"foo.gizmo\",\n\t\tNew: func() caddy.Module { return new(Gizmo) },\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging\nDESCRIPTION: Example of configuring JSON logging for HTTP access and admin logs to stdout.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tlog default {\n\t\toutput stdout\n\t\tformat json\n\t\tinclude http.log.access admin.api\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Request Header in Caddy Proxy\nDESCRIPTION: Example of removing a specific request header before it reaches the backend.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nheader_up -Some-Header\n```\n\n----------------------------------------\n\nTITLE: Module Interface Type Definitions in Go\nDESCRIPTION: A comprehensive reference table showing the mapping between Caddy module namespaces and their corresponding Go interface types. Each namespace represents a different functionality area in the Caddy server ecosystem.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/namespaces.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ninterface App\ninterface AdminRouter\ninterface AdminHandler\ninterface ConfigLoader\ninterface fs.FS\ninterface ListenerWrapper\ninterface zapcore.Encoder\ninterface LogFieldFilter\ninterface WriterOpener\ninterface StorageConverter\ninterface DNSProvider\ninterface Handler\ninterface Comparer\ninterface Hasher\ninterface Authenticator\ninterface Encoding\ninterface Encoder\ninterface MiddlewareHandler\ninterface IPRangeSource\ninterface RequestMatcher\ninterface CELLibraryProducer\ninterface Precompressed\ninterface CircuitBreaker\ninterface Selector\ninterface RoundTripper\ninterface UpstreamSource\ninterface CA\ninterface CertificateLoader\ninterface ClientCertificateVerifier\ninterface ECHPublisher\ninterface Manager\ninterface ConnectionMatcher\ninterface Issuer\ninterface LeafCertificateLoader\ninterface OnDemandPermission\ninterface STEKProvider\n```\n\n----------------------------------------\n\nTITLE: Importing Instrumented Route Snippet with Pre-loaded Middleware in Caddyfile\nDESCRIPTION: Demonstrates importing a snippet that serves any set of directives with a pre-loaded middleware, using both arguments and a block.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\n(instrumented-route) {\n\theader {\n\t\tAlt-Svc `h3=\"0.0.0.0:443\"; ma=2592000`\n\t}\n\ttracing {\n\t\tspan args[0]\n\t}\n\t{block}\n}\n\nexample.com {\n\timport instrumented-route example-com {\n\t\trespond \"OK\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Certificate Configuration in Caddy\nDESCRIPTION: Example of using custom certificate and key files for a domain. The certificate must include appropriate Subject Alternative Names.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\ttls cert.pem key.pem\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Caddy Configuration\nDESCRIPTION: The 'caddy reload' command applies a new configuration to a running Caddy instance. It supports options for specifying the config file, adapter, admin address, and force reloading.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reload\n\t[-c, --config <path>]\n\t[-a, --adapter <name>]\n\t[--address <interface>]\n\t[-f, --force]\n```\n\n----------------------------------------\n\nTITLE: URI Directive Basic Syntax in Caddyfile\nDESCRIPTION: Shows the various syntax options for the uri directive, including strip_prefix, strip_suffix, replace, path_regexp, and query operations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri [<matcher>] strip_prefix <target>\nuri [<matcher>] strip_suffix <target>\nuri [<matcher>] replace      <target> <replacement> [<limit>]\nuri [<matcher>] path_regexp  <target> <replacement>\nuri [<matcher>] query        [-|+]<param> [<value>]\nuri [<matcher>] query {\n\t<param> [<value>] [<replacement>]\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Listings in Caddyfile\nDESCRIPTION: Shows how to enable directory listings (browse functionality) for the file server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server browse\n```\n\n----------------------------------------\n\nTITLE: DNS Challenge Configuration with Cloudflare in Caddy\nDESCRIPTION: Setup for DNS challenge using Cloudflare credentials, enabling wildcard certificate support.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_21\n\nLANGUAGE: caddy\nCODE:\n```\n*.example.com {\n\ttls {\n\t\tdns cloudflare {env.CLOUDFLARE_API_TOKEN}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Configurable Hello World Snippet with Block in Caddyfile\nDESCRIPTION: Shows how to import a snippet that responds with a configurable 'hello world' message and content-type, using a block to pass configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\n(hello-world) {\n\theader {\n\t\tCache-Control max-age=3600\n\t\tX-Foo bar\n\t\t{blocks.content_type}\n\t}\n\trespond /hello-world 200 {\n\t\t{blocks.body}\n\t}\n}\n\nexample.com {\n\timport hello-world {\n\t\tcontent_type {\n\t\t\tContent-Type text/html\n\t\t}\n\t\tbody {\n\t\t\tbody \"<h1>hello world</h1>\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Caddyfile to JSON Configuration\nDESCRIPTION: Shows how to use the 'caddy adapt' command to convert a Caddyfile to Caddy's native JSON configuration format, with options for pretty-printing and validation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncaddy adapt\n\t[-c, --config <path>]\n\t[-a, --adapter <name>]\n\t[-p, --pretty]\n\t[--validate]\n```\n\n----------------------------------------\n\nTITLE: Route Directive Syntax in Caddyfile\nDESCRIPTION: Defines the syntax for the route directive in Caddyfile. It accepts an optional matcher and contains a list of directives that won't be reordered by Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/route.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nroute [<matcher>] {\n\t<directives...>\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing Requests with API Path in Caddyfile\nDESCRIPTION: Example that prefixes all requests with '/api' while preserving the rest of the URI, then reverse proxies to a local application server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\napi.example.com {\n\trewrite * /api{uri}\n\treverse_proxy localhost:8080\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration into Caddy via API\nDESCRIPTION: Command to upload a JSON configuration file to Caddy using curl with the /load endpoint of Caddy's admin API.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n\t-H \"Content-Type: application/json\" \\\n\t-d @caddy.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies in Caddy\nDESCRIPTION: This snippet shows how to configure trusted proxy IP ranges using the 'trusted_proxies' option in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_38\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttrusted_proxies static 12.34.56.0/24 1200:ab00::/32\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Named Routes in Caddyfile\nDESCRIPTION: Explains the experimental feature of named routes, which are special blocks defined outside of site blocks and can be reused within any site using the invoke directive. This helps reduce memory usage for repeated configurations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy\nCODE:\n```\n&(app-proxy) {\n\treverse_proxy app-01:8080 app-02:8080 app-03:8080\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tinvoke app-proxy\n}\n\nwww.example.com {\n\tinvoke app-proxy\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Files and Using Globs in Caddyfile\nDESCRIPTION: Shows how to use the import directive to include other files or use globs to import multiple files. This can be done anywhere in the Caddyfile, including outside of site blocks.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\temail admin@example.com\n}\n\nimport sites/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Automated TLS Certificates in Caddy JSON\nDESCRIPTION: JSON configuration block that specifies multiple domains for automatic TLS certificate issuance and management by Caddy. The configuration enables automatic HTTPS for example.com, sub.example.com, and example.net domains.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/json-automate-certs.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apps\": {\n    \"tls\": {\n      \"certificates\": {\n        \"automate\": [\n          \"example.com\",\n          \"sub.example.com\",\n          \"example.net\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Fallback with Query Parameters\nDESCRIPTION: Example showing PHP fallback with original path added to query string.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files {path} /index.php?{query}&p={path}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Auth Syntax in Caddy\nDESCRIPTION: Demonstrates the syntax for the basic_auth directive in Caddyfile configuration. Shows the structure including optional matcher, hash algorithm, realm, and required username/password pairs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/basic_auth.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nbasic_auth [<matcher>] [<hash_algorithm> [<realm>]] {\n\t<username> <hashed_password>\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Caddy-to-Caddy Proxy Configuration\nDESCRIPTION: Configuration for setting up Caddy as both front-facing and backend proxy servers with trusted proxy settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nfoo.example.com, bar.example.com {\n\treverse_proxy 10.0.0.1:80\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttrusted_proxies static private_ranges\n\t}\n}\n\nhttp://foo.example.com {\n\treverse_proxy foo-app:8080\n}\n\nhttp://bar.example.com {\n\treverse_proxy bar-app:9000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracing in Caddyfile with Multiple Handlers\nDESCRIPTION: Illustrates a complete Caddyfile example using the 'tracing' directive with different span names for API and app handlers, along with request header modification and reverse proxying.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tracing.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\thandle /api* {\n\t\ttracing {\n\t\t\tspan api\n\t\t}\n\t\trequest_header X-Trace-Id {http.vars.trace_id}\n\t\treverse_proxy localhost:8081\n\t}\n\n\thandle {\n\t\ttracing {\n\t\t\tspan app\n\t\t}\n\t\treverse_proxy localhost:8080\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Matching Example\nDESCRIPTION: Example showing how to match both files and directories with PHP fallback.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files {path} {path}/ /index.php?{query}&p={path}\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy with Docker\nDESCRIPTION: Command to pull the official Caddy Docker image from Docker Hub. This provides Caddy in a containerized environment.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull caddy\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Example for SPA with API Proxy in Caddyfile\nDESCRIPTION: Demonstrates using route to maintain proper order between reverse_proxy and try_files directives. This ensures API requests are proxied before any URI rewriting occurs for the single-page application.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/route.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv\n\troute {\n\t\treverse_proxy /api* localhost:9000\n\n\t\ttry_files {path} /index.html\n\t\tfile_server\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-App Docker PHP Configuration\nDESCRIPTION: Configuration for serving multiple PHP applications in Docker with separate web roots.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\napp1.example.com {\n\troot * /srv/app1/public\n\tphp_fastcgi app1:9000 {\n\t\troot /var/www/html/public\n\t}\n\tfile_server\n}\n\napp2.example.com {\n\troot * /srv/app2/public\n\tphp_fastcgi app2:9000 {\n\t\troot /var/www/html/public\n\t}\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Site Blocks Configuration\nDESCRIPTION: Example of configuring multiple sites in a single Caddyfile using separate blocks.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample1.com {\n\troot * /www/example.com\n\tfile_server\n}\n\nexample2.com {\n\treverse_proxy localhost:9000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Pages in Caddy 2\nDESCRIPTION: Shows how to set up custom error pages in Caddy 2 using the handle_errors directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nhandle_errors {\n\trewrite * /{err.status_code}.html\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Building Caddy with Custom Plugins Using xcaddy\nDESCRIPTION: Command to build Caddy with custom plugins (nginx-adapter and ntlm-transport) using xcaddy, specifying exact plugin versions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nxcaddy build \\\n    --with github.com/caddyserver/nginx-adapter\n\t--with github.com/caddyserver/ntlm-transport@v0.1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Caddy JSON\nDESCRIPTION: JSON configuration for Caddy to enable automatic HTTPS for a domain, responding with a static message.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {\n\t\t\"http\": {\n\t\t\t\"servers\": {\n\t\t\t\t\"hello\": {\n\t\t\t\t\t\"listen\": [\":443\"],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"match\": [{\n\t\t\t\t\t\t\t\t\"host\": [\"example.com\"]\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\"handle\": [{\n\t\t\t\t\t\t\t\t\"handler\": \"static_response\",\n\t\t\t\t\t\t\t\t\"body\": \"Hello, privacy!\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Compression Formats Example\nDESCRIPTION: Example showing how to enable both Zstandard and Gzip compression, with Zstandard preferred.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nencode zstd gzip\n```\n\n----------------------------------------\n\nTITLE: Aborting Connections for Unknown Domains with Wildcard Certificate\nDESCRIPTION: Demonstrates how to use the abort directive to forcefully close connections for unhandled domains when using a wildcard certificate. The example shows a configuration that only allows requests to specific subdomains while aborting all others.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/abort.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n*.example.com {\n    @foo host foo.example.com\n    handle @foo {\n        respond \"This is foo!\" 200\n    }\n\n    handle {\n\t\t# Unhandled domains fall through to here,\n\t\t# but we don't want to accept their requests\n        abort\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Trust Pool Provider in Caddyfile\nDESCRIPTION: Demonstrates how to use the inline module to specify trusted root certificates directly in the Caddyfile using base64 DER-encoded format. The trust_der directive can be repeated for multiple certificates.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\ntrust_pool inline {\n\ttrust_der      <base64_der>\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Pages with File Server in Caddy\nDESCRIPTION: Configures error handling to serve static error pages based on HTTP status codes, using rewrite and file_server directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\trewrite * /{err.status_code}.html\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage-based Trust Pool Provider in Caddyfile\nDESCRIPTION: Demonstrates how to use the storage module to extract trusted root certificates from Caddy storage. It allows specifying a custom storage module and multiple storage keys for certificate retrieval.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy-d\nCODE:\n```\n... storage [<storage_keys>...] {\n\tstorage <storage_module>\n\tkeys    <storage_keys>...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Append Encoder in Caddy\nDESCRIPTION: Shows the configuration for the append encoder in Caddy's logging setup. This encoder allows appending additional fields to all log entries, useful for adding instance-specific information.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\nformat append {\n\tfields {\n\t\t<field> <value>\n\t}\n\t<field> <value>\n\twrap <encode_module> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Management Commands\nDESCRIPTION: Essential Docker Compose commands for managing Caddy container, including starting service, reloading configuration, and viewing logs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec -w /etc/caddy caddy caddy reload\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs caddy -n=1000 -f\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin API Endpoint\nDESCRIPTION: Examples of configuring Caddy's admin API endpoint including port changes, disabling the API, using unix sockets, and enforcing origin headers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tadmin :2020\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tadmin off\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tadmin unix//run/caddy-admin.sock\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tadmin :2019 {\n\t\torigins localhost\n\t\tenforce_origin\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rewrite Rules Migration in Caddy\nDESCRIPTION: Shows how rewrite rules have evolved to use named matchers in v2, making them more powerful and flexible.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nrewrite {\n\tif {>User-Agent} has mobile\n\tto /mobile{uri}\n}\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@mobile {\n\theader User-Agent *mobile*\n}\nrewrite @mobile /mobile{uri}\n```\n\n----------------------------------------\n\nTITLE: Installing Local HTTPS Certificates\nDESCRIPTION: Platform-specific commands for installing Caddy's root CA certificate for local HTTPS development across different operating systems.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose cp \\\n    caddy:/data/caddy/pki/authorities/local/root.crt \\\n    /usr/local/share/ca-certificates/root.crt \\\n  && sudo update-ca-certificates\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose cp \\\n    caddy:/data/caddy/pki/authorities/local/root.crt \\\n    /tmp/root.crt \\\n  && sudo security add-trusted-cert -d -r trustRoot \\\n    -k /Library/Keychains/System.keychain /tmp/root.crt\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose cp \\\n    caddy:/data/caddy/pki/authorities/local/root.crt \\\n    %TEMP%/root.crt \\\n  && certutil -addstore -f \"ROOT\" %TEMP%/root.crt\n```\n\n----------------------------------------\n\nTITLE: Loading a Caddyfile configuration via cURL\nDESCRIPTION: Example showing how to load a Caddyfile configuration using cURL with the --data-binary flag to preserve line breaks.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/load\" \\\n\t-H \"Content-Type: text/caddyfile\" \\\n\t--data-binary @Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Matching HTTP Methods in Caddy Configuration\nDESCRIPTION: Examples of using the method matcher to match specific HTTP methods in Caddy configuration. Includes matching single and multiple methods.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_21\n\nLANGUAGE: caddy-d\nCODE:\n```\n@get method GET\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@put-delete method PUT DELETE\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@read `method('GET', 'HEAD', 'OPTIONS')`\n```\n\n----------------------------------------\n\nTITLE: Templated Error Pages in Caddy\nDESCRIPTION: Sets up error handling to serve a single template-based error page that can display custom error messages.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\trewrite * /error.html\n\ttemplates\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PHP FastCGI Configuration\nDESCRIPTION: Simple configuration to proxy all PHP requests to a FastCGI responder on localhost port 9000.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nphp_fastcgi 127.0.0.1:9000\n```\n\n----------------------------------------\n\nTITLE: Matching Remote IP Addresses in Caddy Configuration\nDESCRIPTION: Examples of using the remote_ip matcher to match specific IP addresses or ranges in Caddy configuration. Includes matching private IP ranges and using CEL expressions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_27\n\nLANGUAGE: caddy-d\nCODE:\n```\n@private-ipv4 remote_ip 192.168.0.0/16 172.16.0.0/12 10.0.0.0/8 127.0.0.1/8\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\t@denied not remote_ip private_ranges\n\tabort @denied\n\n\trespond \"Hello, you must be from a private network!\"\n}\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@my-friends `remote_ip('12.23.34.45', '23.34.45.56')`\n```\n\n----------------------------------------\n\nTITLE: Hiding Git Directories in File Server Configuration\nDESCRIPTION: Shows how to configure the file server to hide all .git folders and their contents.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server {\n\thide .git\n}\n```\n\n----------------------------------------\n\nTITLE: Log Emission in Go Using Caddy's Structured Logging\nDESCRIPTION: Example of how logs are emitted in Caddy's codebase using the zap logging library. This code from Caddy's reverse proxy shows how strongly-typed fields are attached to log messages for comprehensive diagnostics.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/logging.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlogger.Debug(\"proxy roundtrip\",\n\tzap.String(\"upstream\", di.Upstream.String()),\n\tzap.Object(\"request\", caddyhttp.LoggableHTTPRequest{Request: req}),\n\tzap.Object(\"headers\", caddyhttp.LoggableHTTPHeader(res.Header)),\n\tzap.Duration(\"duration\", duration),\n\tzap.Int(\"status\", res.StatusCode),\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Caddy Configuration\nDESCRIPTION: Curl command to load a basic configuration that sets up a simple HTTP server responding with 'Hello, world!' on port 2015.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n    -H \"Content-Type: application/json\" \\\n    -d @- << EOF\n    {\n        \"apps\": {\n            \"http\": {\n                \"servers\": {\n                    \"hello\": {\n                        \"listen\": [\":2015\"],\n                        \"routes\": [\n                            {\n                                \"handle\": [{\n                                    \"handler\": \"static_response\",\n                                    \"body\": \"Hello, world!\"\n                                }]\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Local HTTPS and HTTP Endpoints in Caddy\nDESCRIPTION: Configuration snippet showing how to set up Caddy server to respond to different local endpoints. Includes automatic HTTPS for localhost and local IP addresses, plus explicit HTTP handling.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/local-https.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\trespond \"Hello from HTTPS!\"\n}\n\n192.168.1.10 {\n\trespond \"Also HTTPS!\"\n}\n\nhttp://localhost {\n\trespond \"Plain HTTP\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Map Directive Example in Caddyfile\nDESCRIPTION: A detailed example demonstrating various features of the map directive including exact matches, regular expressions, capture groups, and default values. The example switches on the host value to set custom placeholders.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/map.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nmap {host}                {my_placeholder}  {magic_number} {\n\texample.com           \"some value\"      3\n\tfoo.example.com       \"another value\"\n\t~(.*)\\.\\.example\\.com$  \"${1} subdomain\"  5\n\n\t~.*\\.net$             -                 7\n\t~.*\\.xyz$             -                 15\n\n\tdefault               \"unknown domain\"  42\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global and Automatic Resource Pushing in Caddyfile\nDESCRIPTION: Shows how to enable automatic pushing of resources from Link headers and also push a specific resource for all requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/push.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\npush * /resources/style.css\n```\n\n----------------------------------------\n\nTITLE: Starting HTTP Reverse Proxy with Caddy CLI\nDESCRIPTION: Command to start a plaintext HTTP reverse proxy from port 2080 to port 9000 using Caddy's command-line interface.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from :2080 --to :9000\n```\n\n----------------------------------------\n\nTITLE: Responding with HTML Content using Heredoc Syntax in Caddyfile\nDESCRIPTION: This example illustrates how to use the 'respond' directive with heredoc syntax to write an HTML response, while also setting the appropriate Content-Type header.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/respond.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\theader Content-Type text/html\n\trespond <<HTML\n\t\t<html>\n\t\t\t<head><title>Foo</title></head>\n\t\t\t<body>Foo</body>\n\t\t</html>\n\t\tHTML 200\n}\n```\n\n----------------------------------------\n\nTITLE: Importing HTTPS Proxy Snippet with Multiple Arguments in Caddyfile\nDESCRIPTION: Illustrates importing a snippet for an HTTPS proxy, passing multiple upstream servers as arguments.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\n(https-proxy) {\n\treverse_proxy {args[:]} {\n\t\ttransport http {\n\t\t\ttls\n\t\t}\n\t}\n}\n\nexample.com {\n\timport https-proxy 10.0.0.1 10.0.0.2 10.0.0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP protocols in Caddy Server\nDESCRIPTION: Specifies which HTTP protocols the server should support. Default is 'h1 h2 h3'. This example enables HTTP/1.1 and HTTP/2 over cleartext (H2C) on port 80.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_47\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers :80 {\n\t\tprotocols h1 h2c\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Service with sc.exe\nDESCRIPTION: Commands to create, start and stop Caddy as a Windows service using sc.exe. Replace YOURPATH with the actual path to caddy.exe.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsc.exe create caddy start= auto binPath= \"YOURPATH\\caddy.exe run\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsc.exe start caddy\n```\n\nLANGUAGE: bash\nCODE:\n```\nsc.exe stop caddy\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Based Load Balancing with Fallback in Caddy\nDESCRIPTION: Demonstrates how to configure a header-based load balancing policy with a fallback to the 'first' policy. This allows developers to choose a specific upstream using a header, with a fallback for primary/secondary failover.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nlb_policy header X-Upstream {\n\tfallback first\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Variable in Caddyfile\nDESCRIPTION: Example of setting a single variable conditionally based on the request path and responding with its value.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/vars.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tvars /foo* isFoo \"yep\"\n\tvars isFoo \"nope\"\n\n\trespond {vars.isFoo}\n}\n```\n\n----------------------------------------\n\nTITLE: Sticky Load Balancing for API Requests in Caddy\nDESCRIPTION: This example shows how to configure sticky load balancing for API requests using the cookie policy in Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy /api/* node1:80 node2:80 node3:80 {\n\t\tlb_policy cookie api_sticky\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Valid Network Address Formats in Caddy\nDESCRIPTION: Shows multiple valid examples of network address formats that can be used in Caddy, including simple port specifications, IP addresses with ports, domain names, IPv6 addresses, port ranges, and Unix socket paths with optional permissions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/conventions.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n:8080\n127.0.0.1:8080\nlocalhost:8080\nlocalhost:8080-8085\ntcp/localhost:8080\ntcp/localhost:8080-8085\nudp/localhost:9005\n[::1]:8080\ntcp6/[fe80::1%eth0]:8080\nunix//path/to/socket\nunix//path/to/socket|0200\n```\n\n----------------------------------------\n\nTITLE: Importing CORS Snippet with Arguments in Caddyfile\nDESCRIPTION: Shows how to import a snippet that sets CORS headers, passing an argument to specify the allowed origin.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\n(cors) {\n\t@origin header Origin {args[0]}\n\theader @origin Access-Control-Allow-Origin \"{args[0]}\"\n\theader @origin Access-Control-Allow-Methods \"OPTIONS,HEAD,GET,POST,PUT,PATCH,DELETE\"\n}\n\nexample.com {\n\timport cors example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in Caddy Module\nDESCRIPTION: Shows how to properly implement logging in a Caddy module using zap logger instead of Go's standard library logger. The code demonstrates obtaining a logger instance during module provisioning.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (g *Gizmo) Provision(ctx caddy.Context) error {\n\tg.logger = ctx.Logger() // g.logger is a *zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Caddyfile\nDESCRIPTION: Command to run Caddy using the configuration specified in the Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords for Caddy Configuration\nDESCRIPTION: Shows how to use the 'caddy hash-password' command to generate hashed passwords for use in Caddy configurations, with options for specifying the plaintext password and hashing algorithm.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncaddy hash-password\n\t[-p, --plaintext <password>]\n\t[-a, --algorithm <name>]\n```\n\n----------------------------------------\n\nTITLE: Enabling ECH with JSON Configuration\nDESCRIPTION: JSON configuration for enabling Encrypted Client Hello in Caddy Server. This approach offers more flexibility for customizing ECH behavior in advanced setups.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/automatic-https.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"encrypted_client_hello\": {\n\t\"configs\": [\n\t\t{\n\t\t\t\"public_name\": \"example.com\"\n\t\t}\n\t]\n},\n\"dns\": {\n\t\"name\": \"<provider name>\",\n\t// provider configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Defining handle_errors Directive Syntax in Caddy\nDESCRIPTION: Defines the syntax for the handle_errors directive, which accepts optional status codes and a block of directives to execute when errors occur.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors [<status_codes...>] {\n\t<directives...>\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Both Path and Query String in Caddyfile\nDESCRIPTION: Advanced example showing how to change both the path and query string, preserving the original query parameters while adding the original path as a new parameter.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\trewrite * /index.php?{query}&p={path}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an @id Tag for a Configuration Object\nDESCRIPTION: Command to add an @id tag to a handler object in the configuration for easier access via the API.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\tlocalhost:2019/config/apps/http/servers/example/routes/0/handle/0/@id \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '\"msg\"'\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Caddyfile Addresses\nDESCRIPTION: Shows how to use Caddyfile-style environment variables in site addresses. This allows for dynamic configuration based on environment settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\n{$DOMAIN:localhost} {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting the entire Caddy configuration\nDESCRIPTION: Example showing how to export the entire Caddy configuration using the /config/ endpoint and format it with jq.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/config/\" | jq\n```\n\n----------------------------------------\n\nTITLE: Executing Caddy Config Reload Command in Bash\nDESCRIPTION: Command to perform a zero-downtime configuration reload in Caddy server. This command uses the API under the hood to gracefully replace the active configuration without interrupting service.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reload\n```\n\n----------------------------------------\n\nTITLE: Deleting Headers with Wildcards in Caddy\nDESCRIPTION: Example demonstrating how to delete all headers containing an underscore from HTTP requests using the wildcard (*) pattern matching feature of request_header directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/request_header.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nrequest_header -*_*\n```\n\n----------------------------------------\n\nTITLE: Tailscale Integration Example with forward_auth\nDESCRIPTION: An example configuration showing how to use Tailscale's authentication service with Caddy, demonstrating header renaming syntax with the '>' operator.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/forward_auth.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nforward_auth unix//run/tailscale.nginx-auth.sock {\n\turi /auth\n\theader_up Remote-Addr {remote_host}\n\theader_up Remote-Port {remote_port}\n\theader_up Original-URI {uri}\n\tcopy_headers {\n\t\tTailscale-User>X-Webauth-User\n\t\tTailscale-Name>X-Webauth-Name\n\t\tTailscale-Login>X-Webauth-Login\n\t\tTailscale-Tailnet>X-Webauth-Tailnet\n\t\tTailscale-Profile-Picture>X-Webauth-Profile-Picture\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Static Site Template Configuration\nDESCRIPTION: Shows how to enable templates for a static site with root directory and file server configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/templates.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv\n\ttemplates\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto HTTPS\nDESCRIPTION: Configuration to disable automatic HTTPS redirects.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tauto_https disable_redirects\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Domain Logging Configuration\nDESCRIPTION: Creates separate log files for different subdomains using snippets and hostname-specific logging.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy\nCODE:\n```\n(subdomain-log) {\n\tlog {\n\t\thostnames {args[0]}\n\t\toutput file /var/log/{args[0]}.log\n\t}\n}\n\n*.example.com {\n\timport subdomain-log foo.example.com\n\t@foo host foo.example.com\n\thandle @foo {\n\t\trespond \"foo\"\n\t}\n\n\timport subdomain-log bar.example.com\n\t@bar host bar.example.com\n\thandle @bar {\n\t\trespond \"bar\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Caddy server via API\nDESCRIPTION: Example of using the /stop endpoint to gracefully shut down the Caddy server and exit the process.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"http://localhost:2019/stop\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Names in Caddy\nDESCRIPTION: This snippet shows how to assign custom names to servers using the 'name' option in the 'servers' block for both HTTPS and HTTP servers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_34\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers :443 {\n\t\tname https\n\t}\n\t\n\tservers :80 {\n\t\tname http\n\t}\n}\n\nexample.com {\n}\n\nhttp:// {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Caddy 2\nDESCRIPTION: Shows how to update the basic authentication directive from Caddy 1 to Caddy 2, using hashed passwords instead of plaintext.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nbasic_auth /secret/* {\n\tBob JDJhJDEwJEVCNmdaNEg2Ti5iejRMYkF3MFZhZ3VtV3E1SzBWZEZ5Q3VWc0tzOEJwZE9TaFlZdEVkZDhX\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Config Adapter in Go for Caddy\nDESCRIPTION: This code snippet provides a template for creating a custom config adapter for Caddy. It includes the basic structure for registering the adapter, defining the adapter type, and implementing the Adapt method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/config-adapters.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage myadapter\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/caddyserver/caddy/v2/caddyconfig\"\n)\n\nfunc init() {\n\tcaddyconfig.RegisterAdapter(\"adapter_name\", MyAdapter{})\n}\n\n// MyAdapter adapts ____ to Caddy JSON.\ntype MyAdapter struct{\n}\n\n// Adapt adapts the body to Caddy JSON.\nfunc (a MyAdapter) Adapt(body []byte, options map[string]interface{}) ([]byte, []caddyconfig.Warning, error) {\n\t// TODO: parse body and convert it to JSON\n\treturn nil, nil, fmt.Errorf(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Directive Order with Route Block in Caddyfile\nDESCRIPTION: Shows how to use the route directive to ensure file_server executes before redir, preserving the exact order specified in the configuration rather than using Caddy's default ordering.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/route.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troute {\n\t\tfile_server /specific.html\n\t\tredir https://anothersite.com{uri}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Certificate Issuance in Caddy\nDESCRIPTION: Configures the ACME module for obtaining certificates using the ACME protocol. Includes options for directory URLs, email, timeouts, challenge types, DNS settings, and preferred certificate chains.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\n... acme [<directory_url>] {\n\tdir      <directory_url>\n\ttest_dir <test_directory_url>\n\temail    <email>\n\ttimeout  <duration>\n\tdisable_http_challenge\n\tdisable_tlsalpn_challenge\n\talt_http_port    <port>\n\talt_tlsalpn_port <port>\n\teab <key_id> <mac_key>\n\ttrusted_roots <pem_files...>\n\tdns [<provider_name> [<options>]]\n\tpropagation_timeout <duration>\n\tpropagation_delay   <duration>\n\tdns_ttl             <duration>\n\tdns_challenge_override_domain <domain>\n\tresolvers <dns_servers...>\n\tpreferred_chains [smallest] {\n\t\troot_common_name <common_names...>\n\t\tany_common_name  <common_names...>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Caddyfile Configuration\nDESCRIPTION: Command to start Caddy using the configuration specified in a Caddyfile located in the current directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/static-files.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Configuring trusted_proxies_strict in Caddy Server\nDESCRIPTION: Enables right-to-left parsing of client IP headers when working with upstream proxies like HAProxy, CloudFlare, AWS ALB, etc. This is recommended when the left-most IP in headers may be spoofed by clients.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_39\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttrusted_proxies static private_ranges\n\t\ttrusted_proxies_strict\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Host Header Matching\nDESCRIPTION: Shows how to match requests based on the Host header field.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy-d\nCODE:\n```\nhost <hosts...>\n\nexpression host('<hosts...')\n```\n\n----------------------------------------\n\nTITLE: Copying Caddy Storage Between Modules in Bash\nDESCRIPTION: Demonstrates how to export storage from an old configuration and import it into a new configuration using piping in a single command.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ caddy storage export -c Caddyfile.old -o- |\n  caddy storage import -c Caddyfile.new -i-\n```\n\n----------------------------------------\n\nTITLE: Implementing X-Accel-Redirect Support with Intercept in Caddyfile\nDESCRIPTION: This example shows how to use the 'intercept' directive to implement X-Accel-Redirect support when using FrankenPHP's php_server. It intercepts responses with the X-Accel-Redirect header and serves static files as requested by the PHP app.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/intercept.md#2025-04-20_snippet_2\n\nLANGUAGE: Caddyfile\nCODE:\n```\nlocalhost {\n\troot * /srv\n\n\tintercept {\n\t\t@accel header X-Accel-Redirect *\n\t\thandle_response @accel {\n\t\t\troot * /path/to/private/files\n\t\t\trewrite {resp.header.X-Accel-Redirect}\n\t\t\tmethod GET\n\t\t\tfile_server\n\t\t}\n\t}\n\n\tphp_server\n}\n```\n\n----------------------------------------\n\nTITLE: 404 Error Fallback Example\nDESCRIPTION: Example showing how to return a 404 error if no files or directories match.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files {path} {path}/ =404\n```\n\n----------------------------------------\n\nTITLE: Basic forward_auth Caddyfile Syntax\nDESCRIPTION: The basic syntax for the forward_auth directive in Caddyfile, showing the main structure and supported parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/forward_auth.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nforward_auth [<matcher>] [<upstreams...>] {\n\turi          <to>\n\tcopy_headers <fields...> {\n\t\t<fields...>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Handle Blocks for Complex Routing in Caddyfile\nDESCRIPTION: This example illustrates how to nest handle blocks to create more complex routing logic, including specific path matching and fallback handling.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\thandle /foo* {\n\t\thandle /foo/bar* {\n\t\t\t# This block only matches paths under /foo/bar\n\t\t}\n\n\t\thandle {\n\t\t\t# This block matches everything else under /foo/\n\t\t}\n\t}\n\n\thandle {\n\t\t# This block matches everything else (acts as a fallback)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Root Directive Syntax in Caddyfile\nDESCRIPTION: Shows the basic syntax for the root directive in Caddyfile. The directive sets the site root path, which is used by various matchers and directives that access the file system.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/root.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nroot [<matcher>] <path>\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Headers from Upstream in Caddyfile\nDESCRIPTION: Example demonstrating how to override cache control headers from an upstream proxy for specific paths, using deferred header manipulation with the greater-than prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader /no-cache* >Cache-Control nocache\nreverse_proxy upstream:443\n```\n\n----------------------------------------\n\nTITLE: Updating Caddy Configuration via API in Bash\nDESCRIPTION: Demonstrates how to update Caddy's configuration using its API. This curl command sends the contents of the Caddyfile to the Caddy API for a configuration reload.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n\t-H \"Content-Type: text/caddyfile\" \\\n\t--data-binary @Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Enabling ECH with Caddyfile\nDESCRIPTION: Configuration example for enabling Encrypted Client Hello using Caddyfile syntax. Requires a DNS provider module and specifies the ECH public name to use for all sites.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/automatic-https.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdns <provider config...>\n\tech example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ACME DNS Challenge Provider in Caddy\nDESCRIPTION: Configures the ACME DNS challenge provider for all ACME transactions. Requires a custom build of Caddy with the appropriate DNS provider plugin.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_22\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tacme_dns cloudflare {env.CLOUDFLARE_API_TOKEN}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Metrics Directive Syntax\nDESCRIPTION: Shows the basic syntax for configuring metrics endpoint in Caddy with optional matcher and OpenMetrics configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/metrics.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nmetrics [<matcher>] {\n\tdisable_openmetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Health Checks and Other Requests in Caddyfile\nDESCRIPTION: This example demonstrates how to use the 'respond' directive to handle health check requests with an empty 200 status and respond with a simple message for all other requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/respond.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\trespond /health-check 200\n\trespond \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: X-Accel-Redirect Support in Caddy\nDESCRIPTION: This example shows how to implement X-Accel-Redirect support in Caddy by intercepting responses and serving static files as requested.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_25\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy localhost:8080 {\n\t\t@accel header X-Accel-Redirect *\n\t\thandle_response @accel {\n\t\t\troot    * /path/to/private/files\n\t\t\trewrite * {rp.header.X-Accel-Redirect}\n\t\t\tmethod  * GET\n\t\t\tfile_server\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing listener addresses with PATCH\nDESCRIPTION: Example of replacing all listener addresses with new values using the PATCH method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '[\":8081\", \":8082\"]' \\\n\t\"http://localhost:2019/config/apps/http/servers/myserver/listen\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Encoder in Caddy\nDESCRIPTION: Demonstrates the configuration for the JSON encoder in Caddy's logging setup. This encoder formats each log entry as a JSON object.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\nformat json\n```\n\n----------------------------------------\n\nTITLE: Customizing Storage Location in Caddyfile\nDESCRIPTION: Example showing how to configure Caddy's storage mechanism by specifying a custom file system location. Useful when syncing Caddy's storage across multiple instances.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tstorage file_system /path/to/custom/location\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Based Reverse Proxy Configuration\nDESCRIPTION: Example showing path-based matching for reverse proxy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nreverse_proxy /api/* localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Defining redir Directive Syntax in Caddyfile\nDESCRIPTION: Specifies the syntax for the 'redir' directive in Caddyfile. It includes optional matcher, required target location, and optional HTTP status code.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/redir.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nredir [<matcher>] <to> [<code>]\n```\n\n----------------------------------------\n\nTITLE: Redirecting Specific Path with Reverse Proxy in Caddyfile\nDESCRIPTION: Demonstrates how to redirect a specific path ('/about-us' to '/about') while using reverse proxy for other requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/redir.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tredir /about-us /about\n\treverse_proxy localhost:9000\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Specific Path in Caddyfile\nDESCRIPTION: Configures the file server to only serve files from the /static directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server /static/*\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Static Response\nDESCRIPTION: A simple Caddyfile configuration that serves a static \"Hello, world!\" response for all requests to localhost. This demonstrates the basic structure of a Caddyfile with an address and a directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nrespond \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Issuers in Caddy\nDESCRIPTION: Configures certificate issuers globally instead of per-site. Multiple issuers can be defined and will be tried in order.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_27\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tcert_issuer acme {\n\t\t...\n\t}\n\tcert_issuer zerossl {\n\t\t...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Expression Matchers in Caddy\nDESCRIPTION: Implements advanced error handling using expression matchers to filter errors by status codes within a single handle_errors block.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\t@404-410 `{err.status_code} in [404, 410]`\n\thandle @404-410 {\n\t\trespond \"It's a 404 or 410 error!\"\n\t}\n\n\t@5xx `{err.status_code} >= 500 && {err.status_code} < 600`\n\thandle @5xx {\n\t\trespond \"It's a 5xx error.\"\n\t}\n\n\thandle {\n\t\trespond \"It's another error\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring file Output Module in Caddyfile\nDESCRIPTION: Syntax for the file output module that writes logs to a file with options for log rotation, permissions, and retention settings to manage disk space.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\noutput file <filename> {\n\tmode          <mode>\n\troll_disabled\n\troll_size     <size>\n\troll_uncompressed\n\troll_local_time\n\troll_keep     <num>\n\troll_keep_for <days>\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Specific IP and Port\nDESCRIPTION: Example demonstrating how to bind to a specific IP address with a custom port.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com:8080 {\n\tbind 10.0.0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding multiple listener addresses with POST\nDESCRIPTION: Example of adding multiple listener addresses at once using the special /... path suffix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '[\":8080\", \":5133\"]' \\\n\t\"http://localhost:2019/config/apps/http/servers/myserver/listen/...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring per-host metrics in Caddy Server\nDESCRIPTION: Enables Prometheus metrics with per-host labeling, allowing metrics to be grouped by hostname.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_42\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tmetrics {\n\t\tper_host\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Trailing Slash Handling in Caddy\nDESCRIPTION: Configurations for enforcing trailing slashes using both internal rewrites and external redirects.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\trewrite /add     /add/\n\trewrite /remove/ /remove\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tredir /add     /add/\n\tredir /remove/ /remove\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stdout Output Module in Caddyfile\nDESCRIPTION: Syntax for the stdout output module that writes logs to standard output (console).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\noutput stdout\n```\n\n----------------------------------------\n\nTITLE: Insecure HTTPS Reverse Proxy in Caddy (Not Recommended)\nDESCRIPTION: This example shows how to disable TLS verification for an HTTPS upstream in Caddy. This is not recommended for security reasons.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_21\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy 10.0.0.1:443 {\n\t\ttransport http {\n\t\t\ttls_insecure_skip_verify\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ACME Email Configuration in Caddy\nDESCRIPTION: Configuration for specifying an email address for ACME account registration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_20\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\ttls your@email.com\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Abort Directive Syntax in Caddyfile\nDESCRIPTION: Shows the basic syntax for the abort directive which can be used with an optional matcher to conditionally abort connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/abort.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nabort [<matcher>]\n```\n\n----------------------------------------\n\nTITLE: WebSocket Proxy Configuration\nDESCRIPTION: Complex example showing websocket proxy configuration with header-based matching.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\t@websockets {\n\t\theader Connection *Upgrade*\n\t\theader Upgrade    websocket\n\t}\n\treverse_proxy @websockets localhost:6001\n\n\treverse_proxy localhost:8080\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Directive Syntax in Caddyfile\nDESCRIPTION: Demonstrates the basic syntax for the error directive in Caddyfile configurations. Includes optional matcher, status code, and message parameters with block syntax for multi-line messages.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/error.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nerror [<matcher>] <status>|<message> [<status>] {\n    message <text>\n}\n```\n\n----------------------------------------\n\nTITLE: File-based Access Logging in Caddy\nDESCRIPTION: Configures access logging to write to a file with default log rolling enabled.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\toutput file /var/log/access.log\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Site Addresses in Caddyfile\nDESCRIPTION: Demonstrates different ways to specify multiple site addresses in a Caddyfile configuration block. Addresses can be separated by commas, spaces, or newlines.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\n# Comma separated site addresses\nlocalhost:8080, example.com, www.example.com {\n\t...\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n# Space separated site addresses\nlocalhost:8080 example.com www.example.com {\n\t...\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n# Comma and new-line separated site addresses\nlocalhost:8080,\nexample.com,\nwww.example.com {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Filesystem Configuration in Caddyfile\nDESCRIPTION: Shows how to configure Caddy to use a specific filesystem only for certain paths within a site, using a path matcher to serve images from a custom filesystem while serving other content from the default filesystem.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/fs.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tfs /images* foo\n\troot /srv\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Full Site Configuration with Compression\nDESCRIPTION: Complete Caddyfile example demonstrating how to compress static files served by the file_server directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\troot * /srv\n\tencode\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the log_skip Directive Syntax in Caddy\nDESCRIPTION: Shows the basic syntax for the log_skip directive, which can be used with an optional matcher to specify which requests should be excluded from access logging.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_skip.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nlog_skip [<matcher>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Listener Wrappers for Different Ports in Caddy\nDESCRIPTION: This snippet demonstrates how to configure different options for servers on ports 443 and 80 using the 'servers' block in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_33\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers :443 {\n\t\tlistener_wrappers {\n\t\t\thttp_redirect\n\t\t\ttls\n\t\t}\n\t}\n\n\tservers :80 {\n\t\tprotocols h1 h2c\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Browsing in Caddy 2\nDESCRIPTION: Demonstrates how to enable file browsing functionality in Caddy 2 using the file_server directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nfile_server /subfolder/* browse\n```\n\n----------------------------------------\n\nTITLE: Removing a Header in Caddyfile\nDESCRIPTION: Example showing how to strip or remove a header field from responses using the minus prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader -Hidden\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Custom Caddyfile Path\nDESCRIPTION: Command to run Caddy with a Caddyfile located at a specific path.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run --config /path/to/Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Path-Specific PHP FastCGI Configuration\nDESCRIPTION: Configuration to proxy PHP requests only under the /blog/ path to a FastCGI responder.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nphp_fastcgi /blog/* localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Binding to Localhost Interface\nDESCRIPTION: Example showing how to bind a site to the local loopback interface, making it accessible only on the current machine.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tbind 127.0.0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Log Directive Syntax in Caddyfile\nDESCRIPTION: The main syntax for the log directive in Caddyfile, showing the basic structure and available options including hostnames, output, format, and level configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nlog [<logger_name>] {\n\thostnames <hostnames...>\n\tno_hostname\n\toutput <writer_module> ...\n\tformat <encoder_module> ...\n\tlevel  <level>\n}\n```\n\n----------------------------------------\n\nTITLE: SRV Dynamic Upstream Module Syntax in Caddyfile\nDESCRIPTION: Configuration syntax for the SRV dynamic upstream module that retrieves backend addresses from SRV DNS records. Includes options for specifying service details, refresh intervals, and connection parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\n\tdynamic srv [<full_name>] {\n\t\tservice   <service>\n\t\tproto     <proto>\n\t\tname      <name>\n\t\trefresh   <interval>\n\t\tresolvers <ip...>\n\t\tdial_timeout        <duration>\n\t\tdial_fallback_delay <duration>\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions on Request Path in Caddyfile\nDESCRIPTION: Example of using the uri directive with path_regexp to collapse all repeated slashes in the request path to a single slash.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri path_regexp /{2,} /\n```\n\n----------------------------------------\n\nTITLE: Basic Bind Directive Syntax\nDESCRIPTION: Shows the fundamental syntax for the bind directive in Caddyfile configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nbind <hosts...>\n```\n\n----------------------------------------\n\nTITLE: Protecting Specific Paths with Basic Auth in Caddy\nDESCRIPTION: Example showing how to protect only certain paths with authentication while allowing public access to others. Uses a path matcher to restrict access to the /secret/ directory to user 'Bob'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/basic_auth.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\troot * /srv\n\n\tbasic_auth /secret/* {\n\t\t# Username \"Bob\", password \"hiccup\"\n\t\tBob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG\n\t}\n\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Header in Caddyfile\nDESCRIPTION: Example showing how to set a custom header field for all requests. This demonstrates the basic usage of the header directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader Custom-Header \"My value\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Templates Directive in Caddyfile\nDESCRIPTION: Defines the basic syntax structure for the templates directive including configuration options for MIME types, delimiters, and root path settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/templates.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\ntemplates [<matcher>] {\n\tmime    <types...>\n\tbetween <open_delim> <close_delim>\n\troot    <path>\n}\n```\n\n----------------------------------------\n\nTITLE: Map Directive Basic Syntax in Caddyfile\nDESCRIPTION: Defines the basic syntax for the map directive in Caddyfile. The directive maps a source value to destination placeholders based on input conditions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/map.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nmap [<matcher>] <source> <destinations...> {\n\t[~]<input> <outputs...>\n\tdefault    <defaults...>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring discard Output Module in Caddyfile\nDESCRIPTION: Syntax for the discard output module that suppresses log output completely.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\noutput discard\n```\n\n----------------------------------------\n\nTITLE: Custom Metrics Path Configuration\nDESCRIPTION: Shows how to expose metrics at a custom path instead of the default location.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/metrics.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nmetrics /foo/bar/baz\n```\n\n----------------------------------------\n\nTITLE: Server ID Logging with Header Filtering\nDESCRIPTION: Appends a server ID from an environment variable to log entries while filtering cookie headers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\tformat append {\n\t\t\tserver_id {env.SERVER_ID}\n\t\t\twrap filter {\n\t\t\t\trequest>headers>Cookie delete\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying DNS Records with curl\nDESCRIPTION: Uses curl to perform an authoritative DNS lookup for A records of a domain using Cloudflare's DNS-over-HTTPS API.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://cloudflare-dns.com/dns-query?name=example.com&type=A\" \\\n  -H \"accept: application/dns-json\"\n```\n\n----------------------------------------\n\nTITLE: Binding to IPv4 and IPv6 Localhost\nDESCRIPTION: Configuration example showing how to bind to both IPv4 and IPv6 loopback interfaces.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tbind 127.0.0.1 [::1]\n}\n```\n\n----------------------------------------\n\nTITLE: Binding to Unix Domain Socket\nDESCRIPTION: Shows how to bind to a Unix domain socket instead of a network interface.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tbind unix//run/caddy\n}\n```\n\n----------------------------------------\n\nTITLE: Default Metrics Path Configuration\nDESCRIPTION: Demonstrates how to expose metrics at the default /metrics path.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nmetrics /metrics\n```\n\n----------------------------------------\n\nTITLE: Enabling Gzip Compression in Caddy 2\nDESCRIPTION: Shows how to enable Gzip compression in Caddy 2 using the encode directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nencode gzip\n```\n\n----------------------------------------\n\nTITLE: Defining Response Matcher Syntax in Caddyfile\nDESCRIPTION: The basic syntax for defining a named response matcher in a Caddyfile. Response matchers use the @name syntax and can include status and header matching conditions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\n@name {\n\tstatus <code...>\n\theader <field> [<value>]\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Query String in Caddyfile Rewrite\nDESCRIPTION: Example showing how to replace the query string on all API requests with 'a=b', while leaving the path unchanged.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\trewrite * ?a=b\n}\n```\n\n----------------------------------------\n\nTITLE: IP-Based Access Control Configuration\nDESCRIPTION: Examples showing IP-based access control with private network ranges.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\n@private-ipv4 client_ip 192.168.0.0/16 172.16.0.0/12 10.0.0.0/8 127.0.0.1/8\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\t@denied not client_ip private_ranges\n\tabort @denied\n\n\trespond \"Hello, you must be from a private network!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting All Requests to HTTPS Domain in Caddyfile\nDESCRIPTION: Demonstrates how to use the 'redir' directive to redirect all requests from www subdomain to the HTTPS version of the main domain.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/redir.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example.com {\n\tredir https://example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reverse Proxy Upstream Status using GET /reverse_proxy/upstreams\nDESCRIPTION: This snippet shows how to retrieve the current status of configured reverse proxy upstreams using the GET /reverse_proxy/upstreams endpoint. It uses curl to send a GET request and pipes the response through jq for JSON formatting.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/reverse_proxy/upstreams\" | jq\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\"address\": \"10.0.1.1:80\", \"num_requests\": 4, \"fails\": 2},\n\t{\"address\": \"10.0.1.2:80\", \"num_requests\": 5, \"fails\": 4},\n\t{\"address\": \"10.0.1.3:80\", \"num_requests\": 3, \"fails\": 3}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy Root Certificate in Bash\nDESCRIPTION: Installs a root certificate for a CA managed by Caddy's PKI app into local trust stores with options for specifying CA, address, and configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncaddy trust\n\t[--ca <id>]\n\t[--address <interface>]\n\t[-c, --config <path> [-a, --adapter <name>]]\n```\n\n----------------------------------------\n\nTITLE: Example of Using Custom Filesystem in Caddyfile\nDESCRIPTION: Demonstrates setting up a named filesystem 'foo' using a hypothetical 'custom' module with API key authentication, then using it within a site configuration with root and file_server directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/fs.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tfilesystem foo custom {\n\t\tapi_key abc123\n\t}\n}\n\nexample.com {\n\tfs foo\n\troot /srv\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Environment Configuration\nDESCRIPTION: Systemd unit file configuration for setting environment variables for Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_2\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"CF_API_TOKEN=super-secret-cloudflare-tokenvalue\"\n```\n\n----------------------------------------\n\nTITLE: Explicit Wildcard Matcher Configuration\nDESCRIPTION: Example showing explicit wildcard matcher usage in reverse proxy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nreverse_proxy * localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Registering a Top-Level HTTP Caddyfile Directive in Go\nDESCRIPTION: Example of registering a custom directive for the HTTP Caddyfile adapter in the init() function, which allows the module to be used in Caddyfile configurations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\thttpcaddyfile.RegisterDirective(\"gizmo\", parseCaddyfile)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Site Root with Wildcard Matcher in Caddyfile\nDESCRIPTION: Example showing how to set the site root to a specific directory with a wildcard matcher. This was required before v2.8.0 to avoid ambiguity with path matchers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/root.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nroot * /home/bob/public_html\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI Root Trust Pool Provider in Caddyfile\nDESCRIPTION: Illustrates the use of the pki_root module to obtain and trust root certificates from a certificate authority defined in the PKI app. The authority directive can accept multiple authorities.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\n... pki_root [<ca_name>...] {\n\tauthority <ca_name>...\n}\n```\n\n----------------------------------------\n\nTITLE: Subdomain Metrics Configuration\nDESCRIPTION: Illustrates how to serve metrics on a separate subdomain using Caddy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/metrics.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nmetrics.example.com {\n\tmetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Site Root in Caddyfile\nDESCRIPTION: Example showing how to set the site root to a directory relative to the current working directory for all requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/root.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nroot public_html\n```\n\n----------------------------------------\n\nTITLE: Building Caddy Using xcaddy\nDESCRIPTION: Basic command to build Caddy with version information using the xcaddy build tool.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcaddy build\n```\n\n----------------------------------------\n\nTITLE: Adding Response Headers in Caddy Proxy\nDESCRIPTION: Example of adding multiple values to a response header coming downstream from the backend.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\nheader_down +Some-Header \"first value\"\nheader_down +Some-Header \"second value\"\n```\n\n----------------------------------------\n\nTITLE: Matching Query Parameters in Caddy Configuration\nDESCRIPTION: Examples of using the query matcher to match specific query string parameters in Caddy configuration. Includes matching single and multiple parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_26\n\nLANGUAGE: caddy-d\nCODE:\n```\n@search query q=*\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@sorted query sort=asc sort=desc\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@search-sort `query({'sort': ['asc', 'desc'], 'q': '*'})`\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy Error Handling in Caddy\nDESCRIPTION: Configures error handling to proxy error requests to an external service (http.cat) that serves HTTP error code images.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\trewrite * /{err.status_code}\n\treverse_proxy https://http.cat {\n\t\theader_up Host {upstream_hostport}\n\t\treplace_status {err.status_code}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration via API with YAML Format\nDESCRIPTION: Shows how to send a YAML configuration to Caddy's /load API endpoint using curl. This allows changing Caddy's configuration while it's running.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/config-adapters.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n\t-H \"Content-Type: application/yaml\" \\\n\t--data-binary @caddy.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring External Account Binding for ACME in Caddy\nDESCRIPTION: Specifies an External Account Binding to use for all ACME transactions. Example uses mock ZeroSSL credentials.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_21\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tacme_eab {\n\t\tkey_id GD-VvWydSVFuss_GhBwYQQ\n\t\tmac_key MjXU3MH-Z0WQ7piMAnVsCpD1shgMiWx6ggPWiTmydgUaj7dWWWfQfA\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Directive Migration from v1 to v2\nDESCRIPTION: Illustrates the change from proxy to reverse_proxy directive in Caddy v2, with enhanced default behavior for header handling and websocket support.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nproxy / localhost:9005\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\nreverse_proxy localhost:9005\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI with custom CA name in Caddy Server\nDESCRIPTION: Sets a custom name for the local certificate authority used by Caddy for local HTTPS certificates.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_49\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca local {\n\t\t\tname \"My Local CA\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Client Authentication Configuration in Caddy\nDESCRIPTION: Setup for TLS client authentication requiring valid client certificates verified against specified CA certificates.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_23\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\ttls {\n\t\tclient_auth {\n\t\t\ttrust_pool file ../caddy.ca.cer ../root.ca.cer\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Caddyfile to JSON\nDESCRIPTION: Command to adapt a Caddyfile to Caddy's native JSON structure, useful for understanding how Caddyfile directives map to JSON.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncaddy adapt\n```\n\n----------------------------------------\n\nTITLE: Accessing Caddy Admin API\nDESCRIPTION: Using curl to access Caddy's admin API at localhost:2019 to check the current configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/config/\n```\n\n----------------------------------------\n\nTITLE: Redirecting with URI Preservation in Caddyfile\nDESCRIPTION: Shows how to use the 'redir' directive with a placeholder to preserve the existing URI when redirecting to a new domain.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/redir.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example.com {\n\tredir https://example.com{uri}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ACME CA Root Certificate in Caddy\nDESCRIPTION: Specifies a PEM file that contains a trusted root certificate for ACME CA endpoints, if not in the system trust store.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_20\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tacme_ca_root /path/to/ca/root.pem\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Provision Method for Caddy Modules\nDESCRIPTION: Example implementation of the Provision method from the caddy.Provisioner interface. This method is called after a module is initialized and configured to perform additional setup tasks.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Provision sets up the module.\nfunc (g *Gizmo) Provision(ctx caddy.Context) error {\n\t// TODO: set up the module\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Header in Caddy Proxy\nDESCRIPTION: Example of setting a request header going upstream to the backend, which will overwrite any existing values.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nheader_up Some-Header \"the value\"\n```\n\n----------------------------------------\n\nTITLE: Example Caddy configuration structure\nDESCRIPTION: JSON output showing a sample Caddy configuration structure with an HTTP server definition for example.com.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {\n\t\t\"http\": {\n\t\t\t\"servers\": {\n\t\t\t\t\"myserver\": {\n\t\t\t\t\t\"listen\": [\n\t\t\t\t\t\t\":443\"\n\t\t\t\t\t],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"match\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"host\": [\n\t\t\t\t\t\t\t\t\t\t\"example.com\"\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"handle\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"handler\": \"file_server\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Output Format Logging\nDESCRIPTION: Configures multiple log outputs with different formats for the same subdomain using global options.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_20\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tlog access-formatted {\n\t\tinclude http.log.access.foo\n\t\toutput file /var/log/access-foo.log\n\t\tformat transform \"{common_log}\"\n\t}\n\n\tlog access-json {\n\t\tinclude http.log.access.foo\n\t\toutput file /var/log/access-foo.json\n\t\tformat json\n\t}\n}\n\nfoo.example.com {\n\tlog foo\n}\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Watch Mode\nDESCRIPTION: Command to run Caddy with the --watch flag, which automatically applies changes to the Caddyfile without requiring a restart.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run --watch\n```\n\n----------------------------------------\n\nTITLE: A/AAAA Dynamic Upstream Module Syntax in Caddyfile\nDESCRIPTION: Configuration syntax for the A/AAAA dynamic upstream module that retrieves backend addresses from A/AAAA DNS records. Includes options for specifying domain name, port, refresh intervals, and IP version preferences.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\n\tdynamic a [<name> <port>] {\n\t\tname      <name>\n\t\tport      <port>\n\t\trefresh   <interval>\n\t\tresolvers <ip...>\n\t\tdial_timeout        <duration>\n\t\tdial_fallback_delay <duration>\n\t\tversions ipv4|ipv6\n\t}\n```\n\n----------------------------------------\n\nTITLE: Template Response with Dynamic Content\nDESCRIPTION: Demonstrates how to serve a static response using a template with Content-Type header and date formatting.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/templates.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\theader Content-Type text/plain\n\ttemplates\n\trespond `Current year is: {{now | date \"2006\"}}`\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up an ACME Server with Custom CA in Caddyfile\nDESCRIPTION: Example configuration for serving an ACME server with ID 'home' on a specific domain. This includes PKI global option customization and TLS configuration using the internal issuer for self-signed certificates.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/acme_server.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\n{\n\tpki {\n\t\tca home {\n\t\t\tname \"My Home CA\"\n\t\t}\n\t}\n}\n\nacme.example.com {\n\ttls {\n\t\tissuer internal {\n\t\t\tca home\n\t\t}\n\t}\n\tacme_server {\n\t\tca home\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Path for File Server in Caddyfile\nDESCRIPTION: Demonstrates how to use the root directive in conjunction with file_server to set the root path for serving files.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\troot * /srv\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Source Dynamic Upstreams in Caddy\nDESCRIPTION: Defines the syntax for configuring multiple dynamic upstream sources in Caddy. This allows for redundant sources of upstreams, such as primary and secondary clusters of SRVs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\ndynamic multi {\n\t<source> [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring acme_server Directive in Caddyfile\nDESCRIPTION: Syntax definition for the acme_server directive in Caddyfile. This shows all available configuration options including CA specification, lifetime settings, resolver configuration, challenge types, and access control policies.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/acme_server.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nacme_server [<matcher>] {\n\tca         <id>\n\tlifetime   <duration>\n\tresolvers  <resolvers...>\n\tchallenges <challenges...>\n\tallow_wildcard_names\n\tallow {\n\t\tdomains <domains...>\n\t\tip_ranges <addresses...>\n\t}\n\tdeny {\n\t\tdomains <domains...>\n\t\tip_ranges <addresses...>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Single-Page App (SPA) Configuration in Caddy\nDESCRIPTION: Configurations for serving single-page applications, including file serving with fallback to index.html and API proxying.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv\n\tencode\n\ttry_files {path} /index.html\n\tfile_server\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tencode\n\n\thandle /api/* {\n\t\treverse_proxy backend:8000\n\t}\n\n\thandle {\n\t\troot * /srv\n\t\ttry_files {path} /index.html\n\t\tfile_server\n\t}\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nroute {\n\ttry_files {path} /index.html\n\theader /index.html Cache-Control \"public, max-age=0, must-revalidate\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default DNS Provider in Caddy\nDESCRIPTION: Sets a default DNS provider to use when none other is specified locally. Used for ACME DNS challenges and publishing ECH configs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_23\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdns cloudflare {env.CLOUDFLARE_API_TOKEN}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand TLS in Caddyfile\nDESCRIPTION: Caddyfile configuration for enabling on-demand TLS with abuse prevention through an ask endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/quick-assist/content.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\ton_demand_tls {\n\t\task http://localhost:5555/check\n\t}\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nhttps:// {\n\ttls {\n\t\ton_demand\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Caddy Root Certificate Trust in Bash\nDESCRIPTION: Untrusts a root certificate from the local trust store(s) with options to specify the certificate path, CA, address, and configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncaddy untrust\n\t[-p, --cert <path>]\n\t[--ca <id>]\n\t[--address <interface>]\n\t[-c, --config <path> [-a, --adapter <name>]]\n```\n\n----------------------------------------\n\nTITLE: Basic Block Structure in Caddyfile\nDESCRIPTION: Demonstrates the basic structure of blocks in Caddyfile using curly braces. The open brace must be at the end of its line with a preceding space, and the close brace must be on its own line.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\n... {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Log Rolling Configuration\nDESCRIPTION: Sets up custom log rolling parameters including size limit, number of files to keep, and retention period.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\toutput file /var/log/access.log {\n\t\t\troll_size 1gb\n\t\t\troll_keep 5\n\t\t\troll_keep_for 720h\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Caddy User and Group\nDESCRIPTION: Commands for setting up a dedicated system user and group for Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd --system \\\n    --gid caddy \\\n    --create-home \\\n    --home-dir /var/lib/caddy \\\n    --shell /usr/sbin/nologin \\\n    --comment \"Caddy web server\" \\\n    caddy\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Snippets in Caddyfile\nDESCRIPTION: Demonstrates how to create reusable configuration blocks called snippets and use them with the import directive. Snippets can be defined with a name in parentheses and reused across multiple site blocks.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy\nCODE:\n```\n(logging) {\n\tlog {\n\t\toutput file /var/log/caddy.log\n\t\tformat json\n\t}\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\timport logging\n}\n\nwww.example.com {\n\timport logging\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Format Properties in Caddy\nDESCRIPTION: Demonstrates the syntax for setting common properties on most encoders in Caddy's logging configuration. These properties control aspects like key names, time formats, and level formatting.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\nformat <encoder_module> {\n\tmessage_key     <key>\n\tlevel_key       <key>\n\ttime_key        <key>\n\tname_key        <key>\n\tcaller_key      <key>\n\tstacktrace_key  <key>\n\tline_ending     <char>\n\ttime_format     <format>\n\ttime_local\n\tduration_format <format>\n\tlevel_format    <format>\n}\n```\n\n----------------------------------------\n\nTITLE: On-Demand Local Certificate Configuration in Caddy\nDESCRIPTION: Setup for on-demand locally-trusted certificates. Not recommended for public-facing servers due to potential resource exhaustion.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy\nCODE:\n```\nhttps:// {\n\ttls internal {\n\t\ton_demand\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent handle Directive with URI Stripping in Caddyfile\nDESCRIPTION: Demonstrates the equivalent configuration using handle with uri strip_prefix, which is more verbose than using handle_path. This comparison shows why handle_path is more convenient.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_path.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nhandle /prefix/* {\n\turi strip_prefix /prefix\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy on RHEL/CentOS 7\nDESCRIPTION: Commands to enable the Caddy COPR repository and install Caddy on RHEL/CentOS 7 systems. Uses yum package manager with the copr plugin.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyum install yum-plugin-copr\nyum copr enable @caddy/caddy\nyum install caddy\n```\n\n----------------------------------------\n\nTITLE: Specifying Network Addresses in Caddy\nDESCRIPTION: Demonstrates the format for specifying network addresses in Caddy configurations. The format includes an optional network type followed by an address section, supporting various network types including TCP, UDP, IP, and Unix sockets.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/conventions.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnetwork/address\n```\n\n----------------------------------------\n\nTITLE: Expanded Form of forward_auth Directive\nDESCRIPTION: The equivalent expanded configuration that the forward_auth directive translates to, showing the underlying reverse_proxy setup with all the necessary headers and handling logic.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/forward_auth.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nreverse_proxy <upstreams...> {\n\t# Always GET, so that the incoming\n\t# request's body is not consumed\n\tmethod GET\n\n\t# Change the URI to the auth gateway's\n\t# verification endpoint\n\trewrite <to>\n\n\t# Forward the original method and URI,\n\t# since they get rewritten above; this\n\t# is in addition to other X-Forwarded-*\n\t# headers already set by reverse_proxy\n\theader_up X-Forwarded-Method {method}\n\theader_up X-Forwarded-Uri {uri}\n\n\t# On a successful response, copy response headers\n\t@good status 2xx\n\thandle_response @good {\n\t\t# for example, for each copy_headers field...\n\t\trequest_header Remote-User {rp.header.Remote-User}\n\t\trequest_header Remote-Email {rp.header.Remote-Email}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a specific HTTP server\nDESCRIPTION: Example of stopping and removing a specific HTTP server from the configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \"http://localhost:2019/config/apps/http/servers/myserver\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Encoder in Caddy\nDESCRIPTION: Illustrates how to use the filter encoder for per-field filtering in Caddy's logging configuration. It allows for complex log manipulation including field deletion, renaming, replacement, and more.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\nformat filter {\n\tfields {\n\t\t<field> <filter> ...\n\t}\n\t<field> <filter> ...\n\twrap <encode_module> ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Caddy from Source\nDESCRIPTION: Instructions for building Caddy from source code using Go. Requires git and Go to be installed.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/quick-assist/content.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone \"https://github.com/caddyserver/caddy.git\"\ncd caddy/cmd/caddy/\ngo build\n```\n\n----------------------------------------\n\nTITLE: Defining Method Directive Syntax in Caddyfile\nDESCRIPTION: Shows the basic syntax structure for the method directive in Caddyfile. The directive accepts an optional matcher and requires a method parameter to specify the new HTTP method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/method.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nmethod [<matcher>] <method>\n```\n\n----------------------------------------\n\nTITLE: Setting up FrankenPHP and PHP Server in Caddy\nDESCRIPTION: Basic Caddy configuration that enables FrankenPHP module and configures a PHP server for a domain. The configuration enables FrankenPHP globally and sets up PHP serving for example.com from the current directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/frankenphp.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\t# Enable FrankenPHP\n\tfrankenphp\n}\n\nexample.com {\n\t# Serve PHP app from current directory\n\tphp_server\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Caddy Configuration with HTTP Request\nDESCRIPTION: Command to test the configured Caddy server by making an HTTP request to the endpoint and displaying the response.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2015\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy Configuration Structure in JSON\nDESCRIPTION: Demonstrates the top-level structure of a Caddy configuration file in JSON format, showing the main sections including admin, logging, and apps.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/architecture.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"admin\": {},\n\t\"logging\": {},\n\t\"apps\": {•••},\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Caddy for macOS with xcaddy\nDESCRIPTION: Command to build Caddy for macOS using xcaddy with the GOOS environment variable.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=darwin xcaddy build\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Handler Order in Caddyfile\nDESCRIPTION: Example of setting execution order for HTTP handler directives. This is essential when using third-party HTTP handler modules to ensure they execute in the correct sequence.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\torder replace after encode\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling PHP Configuration\nDESCRIPTION: Configuration with custom 404 error handling for PHP sites not using index.php as entrypoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tphp_fastcgi localhost:9000 {\n\t\ttry_files {path} {path}/index.php =404\n\t}\n\n\thandle_errors {\n\t\trespond \"{err.status_code} {err.status_text}\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Handler Directive for HTTP Caddyfile in Go\nDESCRIPTION: Example of registering a handler directive for the HTTP Caddyfile adapter, which is a simplified approach for modules that only return a single HTTP handler.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\thttpcaddyfile.RegisterHandlerDirective(\"gizmo\", parseCaddyfileHandler)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Extendable Proxy Snippet with Block Options in Caddyfile\nDESCRIPTION: Illustrates importing a snippet for a reverse proxy with extendable options, using blocks to configure proxy target and options.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\n(extendable-proxy) {\n\treverse_proxy {\n\t\t{blocks.proxy_target}\n\t\t{blocks.proxy_options}\n\t}\n}\n\nexample.com {\n\timport extendable-proxy {\n\t\tproxy_target {\n\t\t\tto 10.0.0.1\n\t\t}\n\t\tproxy_options {\n\t\t\ttransport http {\n\t\t\t\ttls\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Caddy Repository with Git\nDESCRIPTION: Command to clone the Caddy web server repository from GitHub using git.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone \"https://github.com/caddyserver/caddy.git\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Settings for HTTP Trust Pool Provider in Caddyfile\nDESCRIPTION: Details the TLS configuration options available when using the http module for trust pool provisioning. It includes settings for CA, verification skip, handshake timeout, server name, and renegotiation levels.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy-d\nCODE:\n```\n... {\n\tca                    <ca_module>\n\tinsecure_skip_verify\n\thandshake_timeout     <duration>\n\tserver_name           <name>\n\trenegotiation         <never|once|freely>\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Caddy's Structured JSON Log Format\nDESCRIPTION: A sample of Caddy's structured log output in JSON format. This example shows the rich information available in Caddy's logs, including request details, headers, TLS information, timing, and response data.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/logging.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"level\": \"info\",\n\t\"ts\": 1646861401.5241024,\n\t\"logger\": \"http.log.access\",\n\t\"msg\": \"handled request\",\n\t\"request\": {\n\t\t\"remote_ip\": \"127.0.0.1\",\n\t\t\"remote_port\": \"41342\",\n\t\t\"client_ip\": \"127.0.0.1\",\n\t\t\"proto\": \"HTTP/2.0\",\n\t\t\"method\": \"GET\",\n\t\t\"host\": \"localhost\",\n\t\t\"uri\": \"/\",\n\t\t\"headers\": {\n\t\t\t\"User-Agent\": [\"curl/7.82.0\"],\n\t\t\t\"Accept\": [\"*/*\"],\n\t\t\t\"Accept-Encoding\": [\"gzip, deflate, br\"]\n\t\t},\n\t\t\"tls\": {\n\t\t\t\"resumed\": false,\n\t\t\t\"version\": 772,\n\t\t\t\"cipher_suite\": 4865,\n\t\t\t\"proto\": \"h2\",\n\t\t\t\"server_name\": \"example.com\"\n\t\t}\n\t},\n\t\"bytes_read\": 0,\n\t\"user_id\": \"\",\n\t\"duration\": 0.000929675,\n\t\"size\": 10900,\n\t\"status\": 200,\n\t\"resp_headers\": {\n\t\t\"Server\": [\"Caddy\"],\n\t\t\"Content-Encoding\": [\"gzip\"],\n\t\t\"Content-Type\": [\"text/html; charset=utf-8\"],\n\t\t\"Vary\": [\"Accept-Encoding\"]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via DPKG (Debian/Ubuntu)\nDESCRIPTION: Commands to install Caddy server on Debian-based systems using apt package manager. Sets up repository keys and installs required dependencies.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/quick-assist/content.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n```\n\n----------------------------------------\n\nTITLE: Testing a Caddy Module with xcaddy CLI\nDESCRIPTION: Command to list all registered modules using xcaddy, including your custom module. This is used to verify that your module is properly registered with Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nxcaddy list-modules\n...\nfoo.gizmo\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via Webi on Windows\nDESCRIPTION: Command to install Caddy using the Webi installation method on Windows. This community-maintained method may require adjusting Windows firewall rules for non-localhost connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\ncurl.exe https://webi.ms/caddy | powershell\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Caddyfile\nDESCRIPTION: Syntax for setting variables using the 'vars' directive in Caddyfile. It shows the basic structure and explains the parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/vars.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nvars [<matcher>] [<name> <value>] {\n    <name> <value>\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Caddy from Source Code\nDESCRIPTION: Commands to navigate to the Caddy command directory and build the binary using Go.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd caddy/cmd/caddy/\ngo build\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy JSON Configuration\nDESCRIPTION: A JSON configuration for Caddy that sets up a simple HTTP server listening on port 2015 and responding with 'Hello, world!' to all requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {\n\t\t\"http\": {\n\t\t\t\"servers\": {\n\t\t\t\t\"example\": {\n\t\t\t\t\t\"listen\": [\":2015\"],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"handle\": [{\n\t\t\t\t\t\t\t\t\"handler\": \"static_response\",\n\t\t\t\t\t\t\t\t\"body\": \"Hello, world!\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Matchers to Directives in Caddyfile\nDESCRIPTION: Illustrates how to use matchers with directives in a Caddyfile. Matchers allow specifying which requests a directive applies to.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy\nCODE:\n```\nroot *           /var/www  # matcher token: *\nroot /index.html /var/www  # matcher token: /index.html\nroot @post       /var/www  # matcher token: @post\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Templates Enabled\nDESCRIPTION: A Caddyfile configuration that enables template processing for HTML files before serving them. This allows the use of template tags in static HTML files.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\ntemplates\nfile_server browse\n```\n\n----------------------------------------\n\nTITLE: Enabling Gzip Compression Example\nDESCRIPTION: Simple example showing how to enable only Gzip compression in a Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nencode gzip\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Email\nDESCRIPTION: Configuration for setting administrator email address for ACME account creation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\temail admin@example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Push Directive Syntax in Caddyfile\nDESCRIPTION: Specifies the syntax for the 'push' directive in Caddyfile. It allows configuring resources to push, methods, and custom headers for push requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/push.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\npush [<matcher>] [<resource>] {\n\t[GET|HEAD] <resource>\n\theaders {\n\t\t[+]<field> [<value|regexp> [<replacement>]]\n\t\t-<field>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Rekor for Artifact UUID\nDESCRIPTION: Searches the Rekor transparency log server for a specific artifact and returns its UUID in JSON format\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrekor-cli search --artifact ./caddy_2.6.0_checksums.txt --format json | jq -r '.UUIDs[0]'\n```\n\n----------------------------------------\n\nTITLE: Configuring custom root and intermediate certificates in Caddy Server PKI\nDESCRIPTION: Specifies existing certificate and key files to use as the root and intermediate certificates for Caddy's local certificate authority instead of auto-generating them.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_53\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca local {\n\t\t\troot {\n\t\t\t\tformat pem_file\n\t\t\t\tcert /path/to/root.pem\n\t\t\t\tkey /path/to/root.key\n\t\t\t}\n\t\t\tintermediate {\n\t\t\t\tformat pem_file\n\t\t\t\tcert /path/to/intermediate.pem\n\t\t\t\tkey /path/to/intermediate.key\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Prefix from Request Path in Caddyfile\nDESCRIPTION: Example of using the uri directive to strip '/api' from the beginning of all request paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri strip_prefix /api\n```\n\n----------------------------------------\n\nTITLE: Defining Tracing Directive Syntax in Caddyfile\nDESCRIPTION: Demonstrates the syntax for the 'tracing' directive in Caddyfile. It allows specifying a span name which can include placeholders.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tracing.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\ntracing {\n\t[span <span_name>]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Caddyfile\nDESCRIPTION: Shell command to set an environment variable that can be used in a Caddyfile. This allows for dynamic configuration based on the environment.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport SITE_ADDRESS=localhost:9055\n```\n\n----------------------------------------\n\nTITLE: Appending Query Parameter in Caddyfile\nDESCRIPTION: Example of using the uri directive to append the 'foo' parameter with value 'bar' to the query string without overwriting existing parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query +foo bar\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Variables with Type Conversion in Caddyfile\nDESCRIPTION: Example of setting multiple variables, each converted to the appropriate scalar type (boolean, integer, float, string).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/vars.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nvars {\n\t# boolean\n\tabc true\n\n\t# integer\n\tdef 1\n\n\t# float\n\tghi 2.3\n\n\t# string\n\tjkl \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom CA and ACME Server in Caddy\nDESCRIPTION: Demonstrates the configuration of a custom Corporate Certificate Authority and its associated ACME server endpoint in Caddy. The configuration defines a CA named 'corporate' and sets up an internal ACME server at /acme/corporate/directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/custom-ca.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca corporate {\n\t\t\tname \"Our Corporation Authority\"\n\t\t}\n\t}\n}\n\ninternal.example.com {\n\t# ACME endpoint: /acme/corporate/directory\n\tacme_server {\n\t\tca corporate\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log Outputs with log_name\nDESCRIPTION: Demonstrates how to configure separate log files for different request types using log_name directive. Shows setup for main access logs and health check logs with the no_hostname option.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_name.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\tlog {\n\t\toutput file ./caddy.access.log\n\t}\n\n\tlog health_check_log {\n\t\toutput file ./caddy.access.health.log\n\t\tno_hostname\n\t}\n\n\thandle /healthz* {\n\t\tlog_name health_check_log\n\t\trespond \"Healthy\"\n\t}\n\n\thandle {\n\t\trespond \"Hello World\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Path Regular Expression Matching\nDESCRIPTION: Demonstrates matching multiple path patterns using regular expressions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy-d\nCODE:\n```\n@user expression path_regexp('^/user/(\\w*)') || path_regexp('^/(\\w*)')\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy CLI Usage\nDESCRIPTION: Demonstrates the basic structure of Caddy command line usage, including notation for required and optional parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy <command> [<args...>]\n```\n\n----------------------------------------\n\nTITLE: Specifying TLS Key Type in Caddy\nDESCRIPTION: Sets the type of key to generate for TLS certificates. Options include ed25519, p256, p384, rsa2048, and rsa4096.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_26\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tkey_type ed25519\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Certificates\nDESCRIPTION: Configuration to use internal certificate issuance instead of public ACME CAs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tlocal_certs\n}\n```\n\n----------------------------------------\n\nTITLE: DNS Resolver Configuration Example in Caddy\nDESCRIPTION: Example showing how to configure custom DNS resolvers for DNS challenges using Google Public DNS servers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nresolvers 8.8.8.8 8.8.4.4\n```\n\n----------------------------------------\n\nTITLE: Interactive UI Highlighting for Caddy Config\nDESCRIPTION: JavaScript code that adds interactive highlighting to different sections of a Caddy configuration example by wrapping specific content ranges with styled spans.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/proxy.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nready(() => {\n\tlet startElement, endElement;\n\n\tstartElement = findWithContent('.ex-proxy pre.chroma code span', 'php_fastcgi');\n\tendElement = findNextText(startElement, '9000');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-php rollover-green');\n\n\tstartElement = findWithContent('.ex-proxy pre.chroma code span.line', 'reverse_proxy /api/* {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-dynamic-backends rollover-purple');\n\n\tstartElement = findWithContent('.ex-proxy pre.chroma code span.line', 'reverse_proxy /service/* {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-ha rollover-blue');\n\n\twindow.$_('.ex-proxy code').classList.add('dark');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring client_ip_headers in Caddy Server\nDESCRIPTION: Specifies which headers to use when determining the client's IP address when using trusted proxies. Multiple header fields can be specified, with the first non-empty header value being used.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_40\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttrusted_proxies static private_ranges\n\t\tclient_ip_headers X-Forwarded-For X-Real-IP\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Caddy Configuration in Bash\nDESCRIPTION: Validates a Caddy configuration file by deserializing and provisioning modules without actually starting the server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncaddy validate\n\t[-c, --config <path>]\n\t[-a, --adapter <name>]\n\t[--envfile <file>]\n```\n\n----------------------------------------\n\nTITLE: Header Directive Usage in Caddy v1 and v2\nDESCRIPTION: Demonstrates the syntax change for the header directive between Caddy v1 and v2, showing how to set HTTP headers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nheader / Strict-Transport-Security max-age=31536000;\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader Strict-Transport-Security max-age=31536000;\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholders in Caddyfile\nDESCRIPTION: Example showing the difference between environment variable substitution ({$HOST}) and global placeholders ({env.HOST}) in Caddyfile configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/placeholders.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\n:8080 {\n\trespond {$HOST} 200\n}\n\n:8081 {\n\trespond {env.HOST} 200\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting specific configuration values\nDESCRIPTION: Example showing how to export just the listener addresses from the Caddy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/config/apps/http/servers/myserver/listen\"\n```\n\n----------------------------------------\n\nTITLE: IP Address Masking in Logs\nDESCRIPTION: Masks IP addresses in logs while preserving network portions for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\tformat filter {\n\t\t\trequest>remote_ip ip_mask 16 32\n\t\t\trequest>client_ip ip_mask 16 32\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Caddy Manual Pages\nDESCRIPTION: The 'caddy manpage' command generates manual pages for Caddy commands and writes them to a specified directory. It requires the --directory option to specify the output location.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncaddy manpage\n\t(-o, --directory <path>)\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Error Codes in Caddy\nDESCRIPTION: Demonstrates how to handle specific error codes differently using multiple handle_errors blocks with different status code matchers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors 404 410 {\n\trespond \"It's a 404 or 410 error!\"\n}\n\nhandle_errors 5xx {\n\trespond \"It's a 5xx error.\"\n}\n\nhandle_errors {\n\trespond \"It's another error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Renewal Interval in Caddy\nDESCRIPTION: Specifies how often to scan all loaded, managed certificates for expiration and trigger renewal if expired.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_28\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\trenew_interval 30m\n}\n```\n\n----------------------------------------\n\nTITLE: Status Response Configuration in Caddy\nDESCRIPTION: Demonstrates the migration from status directive to respond directive in v2, with improved capability to include response bodies.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nstatus 404 /secrets/\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\nrespond /secrets/* 404\n```\n\n----------------------------------------\n\nTITLE: Logging Request Areas in Caddyfile\nDESCRIPTION: Example showing how to use log_append to indicate whether a request is being served from static or dynamic areas of a site. Works alongside the log directive which enables access logging.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_append.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog\n\n\thandle /static* {\n\t\tlog_append area \"static\"\n\t\trespond \"Static response!\"\n\t}\n\n\thandle {\n\t\tlog_append area \"dynamic\"\n\t\treverse_proxy localhost:9000\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings in Request URI in Caddyfile\nDESCRIPTION: Example of using the uri directive to replace '/docs/' with '/v1/docs/' in any request URI.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri replace /docs/ /v1/docs/\n```\n\n----------------------------------------\n\nTITLE: Configuring FastCGI Transport in Caddy\nDESCRIPTION: This snippet demonstrates how to configure the FastCGI transport in Caddy, including options for root directory, path splitting, environment variables, timeouts, and error capturing.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy-d\nCODE:\n```\ntransport fastcgi {\n\troot  <path>\n\tsplit <at>\n\tenv   <key> <value>\n\tresolve_root_symlink\n\tdial_timeout  <duration>\n\tread_timeout  <duration>\n\twrite_timeout <duration>\n\tcapture_stderr\n}\n```\n\n----------------------------------------\n\nTITLE: Root Directory Configuration with Wildcard\nDESCRIPTION: Example showing root directory configuration with explicit wildcard matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nroot * /home/www/mysite\n```\n\n----------------------------------------\n\nTITLE: Stopping Caddy Server from Command Line\nDESCRIPTION: Shows the command to stop the Caddy server when finished using it.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncaddy stop\n```\n\n----------------------------------------\n\nTITLE: Configuring a Caddy Client to Use External ACME Server\nDESCRIPTION: Example configuration for a Caddy client that uses an external ACME server for certificate issuance. This demonstrates how to specify the ACME CA endpoint and root certificate location.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/acme_server.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\n{\n\tacme_ca https://acme.example.com/acme/home/directory\n\tacme_ca_root /path/to/home_ca_root.crt\n}\n\nexample.com {\n\trespond \"Hello, world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Health Checks with Upstream Information in Caddy\nDESCRIPTION: This example shows how to use active health checks with a separate health check service, passing the original upstream information in a header.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_29\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy node1:80 node2:80 node3:80 {\n\t\thealth_uri /health\n\t\thealth_upstream 127.0.0.1:53336\n\t\thealth_headers {\n\t\t\tFull-Upstream {http.reverse_proxy.active.target_upstream}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: User-Agent Header Filtering in Logs\nDESCRIPTION: Removes the User-Agent header from log entries using the filter format.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog {\n\t\tformat filter {\n\t\t\trequest>headers>User-Agent delete\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Optional Blocks to Imported Snippets in Caddyfile\nDESCRIPTION: Demonstrates an experimental feature (v2.9.x+) where optional blocks can be passed to imported snippets, allowing for more customization within the imported configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy\nCODE:\n```\n(snippet) {\n\t{block}\n\trespond \"OK\"\n}\n\na.example.com {\n\timport snippet {\n\t\theader +foo bar\n\t}\n}\n\nb.example.com {\n\timport snippet {\n\t\theader +bar foo\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic handle_path Syntax in Caddyfile\nDESCRIPTION: Demonstrates the basic syntax for the handle_path directive in Caddyfile. It accepts a path matcher and a block of directives to execute when the path is matched.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_path.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nhandle_path <path_matcher> {\n\t<directives...>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Directive Syntax in Caddyfile\nDESCRIPTION: The syntax definition for the request_body directive in Caddyfile configuration. It shows how to use matchers and the max_size parameter to restrict request body sizes.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/request_body.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nrequest_body [<matcher>] {\n\tmax_size <value>\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Query Parameter in Caddyfile\nDESCRIPTION: Example of using the uri directive to remove the 'foo' parameter from the query string.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query -foo\n```\n\n----------------------------------------\n\nTITLE: Matching HTTP Status Codes in Caddy Response Matcher\nDESCRIPTION: Syntax for matching responses by HTTP status code. Supports individual codes and range patterns like '2xx' to match all codes in a range (e.g., 200-299).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nstatus <code...>\n```\n\n----------------------------------------\n\nTITLE: Converting Specific Caddyfile to JSON\nDESCRIPTION: Command to adapt a specific Caddyfile located at a custom path to Caddy's native JSON structure.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncaddy adapt --config /path/to/Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Basic Rewrite Directive Syntax in Caddyfile\nDESCRIPTION: The syntax for the rewrite directive, showing the matcher and target parameters. Only specified components of the URI will be modified.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/rewrite.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nrewrite [<matcher>] <to>\n```\n\n----------------------------------------\n\nTITLE: Starting Caddy Server\nDESCRIPTION: Command to start the Caddy server in an idle state with blank configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy start\n```\n\n----------------------------------------\n\nTITLE: Setting Query Parameter Value in Caddyfile\nDESCRIPTION: Example of using the uri directive to set the value of the 'foo' query parameter to 'bar'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query foo bar\n```\n\n----------------------------------------\n\nTITLE: Testing Hello World Endpoint\nDESCRIPTION: Command to test the configured endpoint that returns 'Hello, world!'\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2015\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand TLS in Caddy\nDESCRIPTION: Sets up On-Demand TLS configuration, including an HTTP request to authorize certificate issuance for domains.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_25\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\ton_demand_tls {\n\t\task http://localhost:9123/ask\n\t}\n}\n\nhttps:// {\n\ttls {\n\t\ton_demand\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Caddy Version in Bash\nDESCRIPTION: Prints the version of Caddy and exits.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncaddy version\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Caddy Modules\nDESCRIPTION: Illustrates the usage of the 'caddy list-modules' command to display installed Caddy modules, with options for including package and version information.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncaddy list-modules\n\t[--packages]\n\t[--versions]\n\t[-s, --skip-standard]\n```\n\n----------------------------------------\n\nTITLE: Skipping Access Logging with Regular Expression Pattern in Caddy\nDESCRIPTION: Example showing how to skip access logging for specific file types by defining a named matcher with a regular expression pattern, then applying it to the log_skip directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_skip.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\n@skip path_regexp \\.(js|css|png|jpe?g|gif|ico|woff|otf|ttf|eot|svg|txt|pdf|docx?|xlsx?)$\nlog_skip @skip\n```\n\n----------------------------------------\n\nTITLE: Unloading the entire configuration\nDESCRIPTION: Example of unloading the entire configuration while leaving the Caddy process running.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \"http://localhost:2019/config/\"\n```\n\n----------------------------------------\n\nTITLE: Default Encode Configuration Example\nDESCRIPTION: Example showing the default configuration which enables both zstd and gzip compression.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nencode\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via Webi on Linux/macOS\nDESCRIPTION: Command to install Caddy using the Webi installation method on Linux and macOS systems. This is a community-maintained installation method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://webi.sh/caddy | sh\n```\n\n----------------------------------------\n\nTITLE: Caddy Environment File Configuration\nDESCRIPTION: Environment file format for storing Caddy environment variables.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nCF_API_TOKEN=super-secret-cloudflare-tokenvalue\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variables for Tracing\nDESCRIPTION: Shows how to set environment variables for configuring the OpenTelemetry exporter, including headers and endpoint for OTLP traces.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tracing.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_HEADERS=\"myAuthHeader=myToken,anotherHeader=value\"\nexport OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=https://my-otlp-endpoint:55680\n```\n\n----------------------------------------\n\nTITLE: Testing Goodbye Endpoint\nDESCRIPTION: Command to test the second configured endpoint that returns 'Goodbye, world!'\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2016\n```\n\n----------------------------------------\n\nTITLE: Multiple Query Operations in a Block in Caddyfile\nDESCRIPTION: Example of using the uri directive's query block syntax to perform multiple query operations at once, including adding, removing, setting, and renaming parameters.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query {\n\t+foo bar\n\t-baz\n\tqux test\n\trenamethis>renamed\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Template Example\nDESCRIPTION: An HTML file with an embedded template that displays the current date and time. This demonstrates how Caddy's template engine can be used to generate dynamic content.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Caddy tutorial</title>\n\t</head>\n\t<body>\n\t\tPage loaded at: {{now | date \"Mon Jan 2 15:04:05 MST 2006\"}}\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Encrypted ClientHello (ECH) in Caddy\nDESCRIPTION: Enables ECH using specified public domain names as plaintext server names in TLS handshakes. Requires DNS provider configuration for publication.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_24\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdns cloudflare {env.CLOUDFLARE_API_TOKEN}\n\tech ech.example.net\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Encoder in Caddy\nDESCRIPTION: Shows how to use the console encoder in Caddy's logging configuration. This encoder formats log entries for human readability while preserving some structure.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nformat console\n```\n\n----------------------------------------\n\nTITLE: Example: Matching Map Directive Output with vars\nDESCRIPTION: Example showing how to match an output of the 'map' directive named 'magic_number' for the values '3' or '5'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_29\n\nLANGUAGE: caddy-d\nCODE:\n```\nvars {magic_number} 3 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Lifetime in Caddy\nDESCRIPTION: Sets the validity period to request from the CA for issued certificates. Default is 0 (CA chooses, usually 90 days).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_29\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tcert_lifetime 30d\n}\n```\n\n----------------------------------------\n\nTITLE: Stripping Suffix from Request Path in Caddyfile\nDESCRIPTION: Example of using the uri directive to strip '.php' from the end of all request paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri strip_suffix .php\n```\n\n----------------------------------------\n\nTITLE: Initializing Link Generation for Matcher References\nDESCRIPTION: JavaScript code that adds clickable links to matcher references in code blocks, connecting them to their associated anchor tags in the documentation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\tlet headers = $('article h3').map((i, el) => el.id.replace(/-/g, \"_\")).toArray();\n\twindow.$('pre.chroma .k')\n\t\t.filter((k, item) => headers.includes(item.innerText))\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\t\t\tlet url = '#' + item.innerText.replace(/_/g, \"-\");\n\t\t\twindow.$(item).html(`<a href=\"${url}\" style=\"color: inherit;\" title=\"${text}\">${text}</a>`);\n\t\t});\n\n\twindow.$('pre.chroma .nd')\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\t\t\tlet anchor = \"named-matchers\"\n\t\t\tif (text == \"*\") anchor = \"wildcard-matchers\"\n\t\t\tif (text.startsWith('/')) anchor = \"path-matchers\"\n\t\t\twindow.$(item).html(`<a href=\"#${anchor}\" style=\"color: inherit;\" title=\"Matcher token\">${text}</a>`);\n\t\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Importing a Custom Module in Go\nDESCRIPTION: Example of how xcaddy imports your custom module when building Caddy with your plugin. The underscore import ensures the module is initialized without directly using its exported identifiers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport _ \"github.com/example/mymodule\"\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Configuration Routes via API\nDESCRIPTION: Command to retrieve specific routes configuration from Caddy using the admin API with path traversal.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/config/apps/http/servers/example/routes\n```\n\n----------------------------------------\n\nTITLE: Configuring Preferred Certificate Chains in Caddy\nDESCRIPTION: Specifies which certificate chain Caddy should prefer if the CA provides multiple chains. Options include smallest, root_common_name, and any_common_name.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_32\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpreferred_chains smallest\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpreferred_chains {\n\t\troot_common_name \"ISRG Root X2\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Resource Pushing in Caddyfile\nDESCRIPTION: Demonstrates how to enable automatic pushing of resources described by Link headers in the response.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/push.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\npush\n```\n\n----------------------------------------\n\nTITLE: Directive Token Examples\nDESCRIPTION: Demonstrates different ways to handle tokens and quotes in directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\ndirective abc def\ndirective \"abc def\"\ndirective \"\\\"abc def\\\"\"\ndirective `{\"foo\": \"bar\"}`\ndirective \"first line\n\tsecond line\"\n```\n\n----------------------------------------\n\nTITLE: Enabling full duplex communication in Caddy Server\nDESCRIPTION: Enables full-duplex communication for HTTP/1 requests, allowing handlers to concurrently read from requests while writing responses. Only works with Go 1.21+ and may cause issues with older clients.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_45\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tenable_full_duplex\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Caddyfile Server Type in Go\nDESCRIPTION: This code snippet demonstrates how to register a custom Caddyfile server type for Caddy. It shows the initialization function that registers the adapter with a specific ServerType implementation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/config-adapters.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tcaddyconfig.RegisterAdapter(\"caddyfile\",  caddyfile.Adapter{ServerType: ServerType{}})\n}\n```\n\n----------------------------------------\n\nTITLE: Global Options Configuration\nDESCRIPTION: Example of setting global options in Caddyfile, showing debug option enablement.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdebug\n}\n```\n\n----------------------------------------\n\nTITLE: Permanent Redirection with URI Preservation in Caddyfile\nDESCRIPTION: Illustrates the use of 'redir' directive for a permanent redirect (301) while preserving the original URI.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/redir.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example.com {\n\tredir https://example.com{uri} permanent\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Configuration with caddy adapt Command\nDESCRIPTION: Demonstrates how to use the caddy adapt command to convert a YAML configuration to JSON without actually loading it into Caddy.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/config-adapters.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy adapt --config caddy.yaml --adapter yaml\n```\n\n----------------------------------------\n\nTITLE: Renaming Query Parameter in Caddyfile\nDESCRIPTION: Example of using the uri directive to rename the 'foo' query parameter to 'bar'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query foo>bar\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Request Headers with Pattern in Caddy Proxy\nDESCRIPTION: Example of removing all request headers matching a suffix pattern.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\nheader_up -Some-*\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Delay\nDESCRIPTION: Example of configuring shutdown delay with health check endpoint behavior.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tshutdown_delay 30s\n}\n\nexample.com {\n\thandle /health-check {\n\t\t@goingDown vars {http.shutting_down} true\n\t\trespond @goingDown \"Bye-bye in {http.time_until_shutdown}\" 503\n\t\trespond 200\n\t}\n\thandle {\n\t\trespond \"Hello, world!\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Caddy Configuration from File\nDESCRIPTION: Alternative curl command to load configuration from a JSON file instead of using heredoc.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/load \\\n  -H \"Content-Type: application/json\" \\\n  -d @caddy.json\n```\n\n----------------------------------------\n\nTITLE: Writing Error Response and Closing Connection in Caddyfile\nDESCRIPTION: This snippet shows how to use the 'respond' directive to write an error response for specific paths and close the connection afterwards.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/respond.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\trespond /secret/* \"Access denied\" 403 {\n\t\tclose\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WWW Subdomain Redirect Configurations in Caddy\nDESCRIPTION: Patterns for handling www subdomain redirects, including adding www, removing www, and handling multiple domains.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/patterns.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tredir https://www.{host}{uri}\n}\n\nwww.example.com {\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example.com {\n\tredir https://example.com{uri}\n}\n\nexample.com {\n}\n```\n\nLANGUAGE: caddy\nCODE:\n```\nwww.example-one.com, www.example-two.com {\n\tredir https://{labels.1}.{labels.0}{uri}\n}\n\nexample-one.com, example-two.com {\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Updated Caddy Configuration with Curl\nDESCRIPTION: Demonstrates how to test the updated Caddy configuration by curling the new endpoint at localhost:2016.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://localhost:2016\n```\n\n----------------------------------------\n\nTITLE: Running Caddy with Caddyfile Configuration\nDESCRIPTION: Command to start Caddy using the Caddyfile configuration in the current directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/https.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Expanded Form of try_files\nDESCRIPTION: Shows the equivalent expanded form of the try_files directive using file matcher and rewrite directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\n@try_files file <files...>\nrewrite @try_files {file_match.relative}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Configuration Path via API Traversal\nDESCRIPTION: Command demonstrating how to update a specific part of the configuration by traversing the config structure through the API path.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\tlocalhost:2019/config/apps/http/servers/example/routes/0/handle/0/body \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '\"Work smarter, not harder.\"'\n```\n\n----------------------------------------\n\nTITLE: Basic Reverse Proxy Configuration\nDESCRIPTION: Example showing basic reverse proxy configuration in Caddyfile with wildcard matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nreverse_proxy localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Example: Matching Placeholder Values with vars\nDESCRIPTION: Example showing how to match an arbitrary placeholder's value, specifically the authenticated user's ID for either 'Bob' or 'Alice'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_30\n\nLANGUAGE: caddy-d\nCODE:\n```\nvars {http.auth.user.id} Bob Alice\n```\n\n----------------------------------------\n\nTITLE: Using @id in Caddy JSON configuration\nDESCRIPTION: Example JSON object with an @id field for easier direct access to that part of the configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"@id\": \"my_proxy\",\n\t\"handler\": \"reverse_proxy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy on Debian/Ubuntu/Raspbian (Testing)\nDESCRIPTION: Commands to add the Caddy testing repository and install Caddy on Debian-based systems. This includes beta releases and release candidates.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/testing/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-testing-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/testing/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-testing.list\nsudo apt update\nsudo apt install caddy\n```\n\n----------------------------------------\n\nTITLE: Unix Socket PHP-FPM Configuration\nDESCRIPTION: Configuration for PHP-FPM listening on a unix socket instead of TCP port.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nphp_fastcgi unix//run/php/php8.2-fpm.sock\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Trust Pool Provider in Caddyfile\nDESCRIPTION: Shows how to use the file module to read trusted root certificates from PEM files on disk. The pem_file directive can accept multiple file paths and be repeated.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\n... file [<pem_file>...] {\n\tpem_file <pem_file>...\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a listener address with PUT\nDESCRIPTION: Example of inserting a new listener address at the beginning of the listeners array using PUT.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '\":8080\"' \\\n\t\"http://localhost:2019/config/apps/http/servers/myserver/listen/0\"\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of log_append Directive in Caddyfile\nDESCRIPTION: Shows the basic syntax for the log_append directive. It requires a matcher (optional), a key, and a value which can be either a static string or a placeholder.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_append.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nlog_append [<matcher>] <key> <value>\n```\n\n----------------------------------------\n\nTITLE: Example of Traditional Unstructured Log Format (CLF)\nDESCRIPTION: An example of the Common Log Format (CLF) used by traditional HTTP servers. This format is unstructured, lacks important information like the Host header, and is limited to HTTP requests only.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/logging.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 - - [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.1\" 200 2326\n```\n\n----------------------------------------\n\nTITLE: Modifying Cookie Headers with Regular Expressions in Caddyfile\nDESCRIPTION: Example showing how to perform a deferred update to a Set-Cookie header using regular expressions to add the SameSite attribute, capturing the existing value and appending to it.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader >Set-Cookie (.*) \"$1; SameSite=None;\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default SNI\nDESCRIPTION: Configuration for setting default ServerName for non-SNI TLS connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdefault_sni example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Named Matcher Configuration\nDESCRIPTION: Example showing simplified one-line named matcher syntax for POST requests.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\n@post method POST\nreverse_proxy @post localhost:6001\n```\n\n----------------------------------------\n\nTITLE: Named Matcher with Multiple Conditions\nDESCRIPTION: Example showing a named matcher definition with multiple conditions for POST requests to specific paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\n@postfoo {\n\tmethod POST\n\tpath /foo/*\n}\nreverse_proxy @postfoo localhost:9000\n```\n\n----------------------------------------\n\nTITLE: Negating Matchers in Caddy Configuration\nDESCRIPTION: Examples of using the not matcher to negate other matchers in Caddy configuration. Includes single and multiple negations.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_22\n\nLANGUAGE: caddy-d\nCODE:\n```\n@not-assets {\n\tnot path /css/* /js/*\n}\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@with-neither {\n\tnot path /api/*\n\tnot method POST\n}\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@without-both {\n\tnot {\n\t\tpath /api/*\n\t\tmethod POST\n\t}\n}\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@without-both `!path('/api*') && !method('POST')`\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@without-both `!(path('/api*') || method('POST'))`\n```\n\n----------------------------------------\n\nTITLE: Skipping Access Logging for Static Files in Caddy\nDESCRIPTION: Example configuration that sets up access logging for a website but skips logging for all requests to files in the /static directory. This uses a simple path matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_skip.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\troot * /srv\n\n\tlog\n\tlog_skip /static*\n\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Reverse Proxy with cURL\nDESCRIPTION: Command to test the HTTPS reverse proxy setup using cURL, sending a request to the secure proxy endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v https://localhost\n```\n\n----------------------------------------\n\nTITLE: Verifying Signature with Cosign\nDESCRIPTION: Validates the artifact's signature using Cosign CLI tool with experimental features enabled.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCOSIGN_EXPERIMENTAL=1 cosign verify-blob --certificate ./caddy_2.6.0_checksums.txt.pem --signature ./caddy_2.6.0_checksums.txt.sig ./caddy_2.6.0_checksums.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP-based Trust Pool Provider in Caddyfile\nDESCRIPTION: Illustrates the use of the http module to obtain trusted certificates from HTTP endpoints. It includes options for specifying multiple endpoints and configuring TLS settings for the connection.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy-d\nCODE:\n```\n... http [<endpoints...>] {\n\tendpoints   <endpoints...>\n\ttls         <tls_config>\n}\n```\n\n----------------------------------------\n\nTITLE: File Matcher Configuration\nDESCRIPTION: Complete file matcher syntax showing various configuration options.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile {\n\troot       <path>\n\ttry_files  <files...>\n\ttry_policy first_exist|first_exist_fallback|smallest_size|largest_size|most_recently_modified\n\tsplit_path <delims...>\n}\nfile <files...>\n\nexpression `file({\n\t'root': '<path>',\n\t'try_files': ['<files...>'],\n\t'try_policy': 'first_exist|first_exist_fallback|smallest_size|largest_size|most_recently_modified',\n\t'split_path': ['<delims...>']\n})`\nexpression file('<files...>')\n```\n\n----------------------------------------\n\nTITLE: Configuring root certificate CN in Caddy Server PKI\nDESCRIPTION: Sets a custom CommonName for the root certificate used by Caddy's local certificate authority.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_50\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca local {\n\t\t\troot_cn \"My Local CA - 2024 ECC Root\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Custom Error Pages in Caddy\nDESCRIPTION: Implements conditional error handling that checks for the existence of custom error pages before serving them, with a fallback response.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\t@custom_err file /err-{err.status_code}.html /err.html\n\thandle @custom_err {\n\t\trewrite * {file_match.relative}\n\t\tfile_server\n\t}\n\trespond \"{err.status_code} {err.status_text}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expression Matcher Configuration\nDESCRIPTION: Example showing expression matcher usage for 404 errors.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\n@not-found `{err.status_code} == 404`\n```\n\n----------------------------------------\n\nTITLE: Configuring stderr Output Module in Caddyfile\nDESCRIPTION: Syntax for the stderr output module that writes logs to standard error, which is the default output for Caddy logs.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy-d\nCODE:\n```\noutput stderr\n```\n\n----------------------------------------\n\nTITLE: Multi-line CEL Expression\nDESCRIPTION: Shows how to use heredoc syntax for multi-line Common Expression Language (CEL) expressions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy-d\nCODE:\n```\n@api <<CEL\n\t{method} == \"GET\"\n\t&& {path}.startsWith(\"/api/\")\n\tCEL\nrespond @api \"Hello, API!\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Query Parameter Value with Regex in Caddyfile\nDESCRIPTION: Example of using the uri directive to replace the value of the 'foo' query parameter using regex, changing values that begin with 'bar' to 'baz'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/uri.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy-d\nCODE:\n```\nuri query foo ^(ba)r $1z\n```\n\n----------------------------------------\n\nTITLE: Removing Referer Header in Caddy\nDESCRIPTION: Example showing how to remove the Referer header from HTTP requests using the request_header directive with the delete (-) prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/request_header.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nrequest_header -Referer\n```\n\n----------------------------------------\n\nTITLE: Deleting All Request Headers in Caddy Proxy\nDESCRIPTION: Example of removing all request headers (not recommended).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\nheader_up -*\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for fs Directive in Caddyfile\nDESCRIPTION: Defines the basic syntax for the fs directive which allows specifying a filesystem to use for file operations. The directive can be used with an optional matcher to limit its scope.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/fs.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nfs [<matcher>] <filesystem>\n```\n\n----------------------------------------\n\nTITLE: Binding Event Handler to Certificate Obtained Event in Caddy\nDESCRIPTION: This snippet demonstrates how to use the 'on' directive to run a command after a certificate is obtained. It requires a third-party plugin and uses a placeholder to pass part of the event payload to the script.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_54\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tevents {\n\t\ton cert_obtained exec ./my-script.sh {event.data.certificate_path}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 Certificate with Bash\nDESCRIPTION: Converts a base64-encoded PEM certificate file to its decoded format for inspection.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbase64 -d < caddy_2.6.0_checksums.txt.pem > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Resource Pushing in Caddyfile\nDESCRIPTION: Illustrates how to push a specific resource only when a particular page is requested by the client.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/push.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\npush /foo.html /foo.jpg\n```\n\n----------------------------------------\n\nTITLE: Disabling Config Persistence\nDESCRIPTION: Configuration to disable persistent storage of JSON config in the configuration directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpersist_config off\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Median Response Size Query\nDESCRIPTION: PromQL query to determine the median response size in bytes for successful GET requests on the file_server handler.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.5, caddy_http_response_size_bytes_bucket{method=\"GET\", handler=\"file_server\", code=\"200\"})\n```\n\n----------------------------------------\n\nTITLE: Adding a listener address with POST\nDESCRIPTION: Example of adding a new listener address to the server configuration using the POST method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '\":8080\"' \\\n\t\"http://localhost:2019/config/apps/http/servers/myserver/listen\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus metrics collection in Caddy Server\nDESCRIPTION: Enables Prometheus metrics collection for monitoring server performance. This is necessary before scraping metrics, though it may reduce performance on busy servers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_41\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tmetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Using vars_regexp Matcher with Caddy\nDESCRIPTION: Similar to vars matcher but supports regular expressions using RE2 syntax. Can capture groups and make them available as placeholders in later directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_31\n\nLANGUAGE: caddy-d\nCODE:\n```\nvars_regexp [<name>] <variable> <regexp>\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback SNI\nDESCRIPTION: Experimental configuration for setting fallback ServerName for TLS connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_16\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tfallback_sni example.com\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Files from sites-enabled Directory in Caddyfile\nDESCRIPTION: Demonstrates how to import all non-hidden files from an adjacent sites-enabled folder using a glob pattern.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nimport sites-enabled/*\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Caddy for Linux ARMv6\nDESCRIPTION: Command to build Caddy for Linux ARM architecture (version 6) using environment variables for cross-platform compilation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=linux GOARCH=arm GOARM=6 go build\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME CA URL in Caddy\nDESCRIPTION: Specifies the URL to the ACME CA's directory. It's recommended to use Let's Encrypt's staging endpoint for testing.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tacme_ca https://acme-staging-v02.api.letsencrypt.org/directory\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Environment Variable\nDESCRIPTION: A Caddyfile that uses an environment variable for the site address. This demonstrates how to make configurations more flexible and environment-specific.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy\nCODE:\n```\n{$SITE_ADDRESS}\n\nfile_server\n```\n\n----------------------------------------\n\nTITLE: Setting Default Headers for Proxied Content in Caddyfile\nDESCRIPTION: Example showing how to set a default cache expiration header when the upstream server doesn't define one, using the question mark prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader ?Cache-Control \"max-age=3600\"\nreverse_proxy upstream:443\n```\n\n----------------------------------------\n\nTITLE: Guest Module Loading Implementation\nDESCRIPTION: Shows how to load guest modules during the provision phase using ctx.LoadModule(). Includes error handling and type assertion of the loaded module.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Provision sets up g and loads its gadget.\nfunc (g *Gizmo) Provision(ctx caddy.Context) error {\n\tif g.GadgetRaw != nil {\n\t\tval, err := ctx.LoadModule(g, \"GadgetRaw\")\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"loading gadget module: %v\", err)\n\t\t}\n\t\tg.Gadget = val.(Gadgeter)\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Per-Host Metrics in Caddyfile\nDESCRIPTION: Configuration for enabling host-specific metrics in Caddy. With this option, metrics will include a Host tag to differentiate between different hostnames.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tmetrics {\n\t\tper_host\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using handle_path with Example Path in Caddyfile\nDESCRIPTION: Shows a concise example of handle_path directive with a path prefix that uses a wildcard matcher. Any request matching /prefix/* will be handled with the directives in the block.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_path.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nhandle_path /prefix/* {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Caddy Module with JSON\nDESCRIPTION: Example JSON structure showing how apps appear in Caddy's configuration. Apps are modules with an empty namespace that conventionally become their own top-level namespace.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a new JSON configuration via cURL\nDESCRIPTION: Example of using cURL to set a new active configuration by sending a JSON file to the /load endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/load\" \\\n\t-H \"Content-Type: application/json\" \\\n\t-d @caddy.json\n```\n\n----------------------------------------\n\nTITLE: Example: Named Matcher with vars_regexp\nDESCRIPTION: Example showing how to match a 'magic_number' variable against a pattern starting with '4', capturing the value in a named capture group that can be accessed with placeholders.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_32\n\nLANGUAGE: caddy-d\nCODE:\n```\n@magic vars_regexp magic {magic_number} ^(4.*)\n```\n\n----------------------------------------\n\nTITLE: Using Let's Encrypt Staging Endpoint for ACME Testing in Caddy\nDESCRIPTION: Let's Encrypt staging endpoint URL that can be used for testing Caddy's TLS configuration without hitting production rate limits. This endpoint should be configured in the ACME issuer settings when testing.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/automatic-https.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://acme-staging-v02.api.letsencrypt.org/directory\n```\n\n----------------------------------------\n\nTITLE: Disabling OCSP Stapling in Caddy\nDESCRIPTION: Allows disabling OCSP stapling, useful in environments where responders are not reachable due to firewalls.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_31\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tocsp_stapling off\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Rekor Entry Details by UUID\nDESCRIPTION: Retrieves detailed information about an entry from Rekor using its UUID\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrekor-cli get --uuid 04deb84e5a73ba75ea69092c6d700eaeb869c29cae3e0cf98dbfef871361ed09 --format json | jq -r '.'\n```\n\n----------------------------------------\n\nTITLE: CEL Expression Matcher Examples\nDESCRIPTION: Examples showing CEL expression matcher usage for IP matching and method checking.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\n@my-friends `client_ip('12.23.34.45', '23.34.45.56')`\n```\n\nLANGUAGE: caddy\nCODE:\n```\n@mutable `{method}.startsWith(\"P\")`\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Caddyfile Global Options\nDESCRIPTION: Example of enabling debug mode in the global options block. This sets the log level to DEBUG for the default logger, providing more detailed information useful for troubleshooting.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdebug\n}\n```\n\n----------------------------------------\n\nTITLE: Host Module Structure Definition\nDESCRIPTION: Demonstrates the structure of a host module that can load guest modules, including JSON field tags and Caddy-specific struct tags for module configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Gizmo struct {\n\tGadgetRaw json.RawMessage `json:\"gadget,omitempty\" caddy:\"namespace=foo.gizmo.gadgets inline_key=gadgeter\"`\n\n\tGadget Gadgeter `json:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Comment Syntax\nDESCRIPTION: Example of how to add comments in a Caddyfile using the # symbol. Comments are useful for documenting configurations and explaining the purpose of directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy\nCODE:\n```\n# this starts a comment\n```\n\n----------------------------------------\n\nTITLE: Limiting Request Body Size Example in Caddyfile\nDESCRIPTION: A practical example showing how to limit incoming request body sizes to 10 megabytes for the domain example.com before proxying to a backend server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/request_body.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\trequest_body {\n\t\tmax_size 10MB\n\t}\n\treverse_proxy localhost:8080\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration by @id Tag\nDESCRIPTION: Command to directly access a configuration object using its @id tag instead of the full path traversal.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/id/msg\n```\n\n----------------------------------------\n\nTITLE: Matching Hosts in Caddy Configuration\nDESCRIPTION: Examples of using the host matcher to match specific domains and subdomains in Caddy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_20\n\nLANGUAGE: caddy-d\nCODE:\n```\n@sub host sub.example.com\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@site host example.com www.example.com\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@app `host('app1.example.com', 'app2.example.com')`\n```\n\n----------------------------------------\n\nTITLE: Redirect Configuration with Path Matcher\nDESCRIPTION: Example showing URL redirection using path matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nredir /old.html /new.html\n```\n\n----------------------------------------\n\nTITLE: Skipping Trust Store Installation\nDESCRIPTION: Configuration to skip installation of local CA root into system trust stores.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tskip_install_trust\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Long-Running SSH Tunnel\nDESCRIPTION: Commands for creating and managing a background SSH tunnel\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nssh -f -N -M -S /tmp/caddy-tunnel.sock username@example.com -L 8123:localhost:2019\n```\n\nLANGUAGE: bash\nCODE:\n```\nssh -S /tmp/caddy-tunnel.sock -O exit e\n```\n\n----------------------------------------\n\nTITLE: Retrieving PKI CA Information using GET /pki/ca/<id>\nDESCRIPTION: This snippet shows how to retrieve information about a particular PKI Certificate Authority (CA) using the GET /pki/ca/<id> endpoint. It uses curl to send a GET request and pipes the response through jq for JSON formatting.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/pki/ca/local\" | jq\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": \"local\",\n\t\"name\": \"Caddy Local Authority\",\n\t\"root_common_name\": \"Caddy Local Authority - 2022 ECC Root\",\n\t\"intermediate_common_name\": \"Caddy Local Authority - ECC Intermediate\",\n\t\"root_certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIB ... gRw==\\n-----END CERTIFICATE-----\\n\",\n\t\"intermediate_certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIB ... FzQ==\\n-----END CERTIFICATE-----\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Route-Based Header Configuration in Caddyfile\nDESCRIPTION: Example showing how to configure mutually-exclusive header directives using the route block, applying different cache control settings for different paths.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nroute {\n\theader           Cache-Control max-age=3600\n\theader /static/* Cache-Control max-age=31536000\n}\n```\n\n----------------------------------------\n\nTITLE: Using vars Matcher with Caddy\nDESCRIPTION: Matches by exact value of a variable in the request context or a placeholder. Multiple values can be specified to match any of those values (OR logic).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_28\n\nLANGUAGE: caddy-d\nCODE:\n```\nvars <variable> <values...>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Package Support for Custom Caddy Builds\nDESCRIPTION: Series of commands for Debian-based systems to use a custom Caddy binary while maintaining package support files, using dpkg-divert and update-alternatives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg-divert --divert /usr/bin/caddy.default --rename /usr/bin/caddy\nsudo mv ./caddy /usr/bin/caddy.custom\nsudo update-alternatives --install /usr/bin/caddy caddy /usr/bin/caddy.default 10\nsudo update-alternatives --install /usr/bin/caddy caddy /usr/bin/caddy.custom 50\nsudo systemctl restart caddy\n```\n\n----------------------------------------\n\nTITLE: Unix Socket with Custom Permissions\nDESCRIPTION: Example showing how to bind to a Unix domain socket with custom file permissions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tbind unix//run/caddy|0222\n}\n```\n\n----------------------------------------\n\nTITLE: Most Recently Modified File Selection\nDESCRIPTION: Example showing how to serve the most recently modified version of a static file using file patterns.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/try_files.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\ntry_files {file.base}.*.{file.ext} {\n\tpolicy most_recently_modified\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverse Proxy for pprof Access\nDESCRIPTION: Caddy configuration to reverse proxy the pprof debug endpoints through your site\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nreverse_proxy /debug/pprof/* localhost:2019 {\n\theader_up Host {upstream_hostport}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling trace logging in Caddy Server\nDESCRIPTION: Logs each individual handler that is invoked, requiring DEBUG level logging. Note that this may log sensitive configuration data and is an experimental feature.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_43\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttrace\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Caddyfile Syntax Highlighting with JavaScript\nDESCRIPTION: This JavaScript code improves the rendering of response matchers in the Caddyfile syntax highlighting. It adds appropriate colors and links to relevant sections of the documentation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/intercept.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.$(function() {\n\t// Fix response matchers to render with the right color,\n\t// and link to response matchers section\n\twindow.$('pre.chroma .k:contains(\"@\")')\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\t\t\tlet url = '#' + item.innerText.replace(/_/g, \"-\");\n\t\t\twindow.$(item).addClass('nd').removeClass('k')\n\t\t\twindow.$(item).html(`<a href=\"#response-matcher\" style=\"color: inherit;\" title=\"Response matcher\">${text}</a>`);\n\t\t});\n\n\t// Response matchers\n\twindow.$('pre.chroma .nd:contains(\"@name\")').first().slice(0, 3)\n\t\t.wrapAll('<span class=\"nd\">').parent()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\">@name</a>')\n\twindow.$('pre.chroma .k:contains(\"replace_status\")').first().next()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">[&lt;matcher&gt;]</a>')\n\twindow.$('pre.chroma .k:contains(\"handle_response\")').first().next()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">[&lt;matcher&gt;]</a>')\n\twindow.$('pre.chroma .k')\n\t\t.filter((i, el) => el.innerText === 'status')\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers#status\" style=\"color: inherit;\">status</a>')\n\twindow.$('pre.chroma .k:contains(\"header\")').first()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers#header\" style=\"color: inherit;\">header</a>')\n\n\t// We'll add links to all the subdirectives if a matching anchor tag is found on the page.\n\taddLinksToSubdirectives();\n});\n```\n\n----------------------------------------\n\nTITLE: Curling HTTPS Localhost in Bash\nDESCRIPTION: Shows how to use curl to test the HTTPS connection to localhost, which should return the configured response.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://localhost\n```\n\n----------------------------------------\n\nTITLE: Profile Comparison Analysis\nDESCRIPTION: Command and output showing how to compare two different profiles using pprof's diff functionality.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof -diff_base=before.prof after.prof\nFile: caddy\nType: inuse_space\nTime: Aug 29, 2022 at 1:21am (MDT)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top\nShowing nodes accounting for -26.97MB, 49.32% of 54.68MB total\nDropped 10 nodes (cum <= 0.27MB)\nShowing top 10 nodes out of 137\n      flat  flat%   sum%        cum   cum%\n  -27.04MB 49.45% 49.45%   -27.04MB 49.45%  bufio.NewWriterSize\n      -2MB  3.66% 53.11%       -2MB  3.66%  runtime.allocm\n    1.06MB  1.93% 51.18%     1.06MB  1.93%  github.com/yuin/goldmark/util.init\n    1.03MB  1.89% 49.29%     1.03MB  1.89%  github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.glob..func2\n       1MB  1.84% 47.46%        1MB  1.84%  bufio.NewReaderSize\n      -1MB  1.83% 49.29%       -1MB  1.83%  runtime.malg\n       1MB  1.83% 47.46%        1MB  1.83%  github.com/caddyserver/caddy/v2/modules/caddyhttp/reverseproxy.cloneRequest\n      -1MB  1.83% 49.29%       -1MB  1.83%  net/http.(*Server).newConn\n   -0.55MB  1.00% 50.29%    -0.55MB  1.00%  html.populateMaps\n    0.53MB  0.97% 49.32%     0.53MB  0.97%  github.com/alecthomas/chroma.TypeRemappingLexer\n```\n\n----------------------------------------\n\nTITLE: Method Expression Matching in Caddy\nDESCRIPTION: Demonstrates matching HTTP methods that start with 'P' using expressions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy-d\nCODE:\n```\n@methods expression {method}.startsWith(\"P\")\n```\n\n----------------------------------------\n\nTITLE: Testing Caddy Configuration Response\nDESCRIPTION: Command to test if the Caddy configuration is working by making a request to the configured endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2015\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Cleaning Interval in Caddyfile\nDESCRIPTION: Example of configuring how often Caddy scans storage units for old or expired assets. For large deployments, a longer interval is recommended to reduce load on the storage module.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tstorage_clean_interval 7d\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Certificate Management in Caddy\nDESCRIPTION: Demonstrates how to configure Caddy to obtain certificates from a Tailscale instance. This is typically unnecessary as Caddy automatically handles *.ts.net domains.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_14\n\nLANGUAGE: caddy\nCODE:\n```\nget_certificate tailscale\n```\n\n----------------------------------------\n\nTITLE: Header Regular Expression Matching\nDESCRIPTION: Demonstrates matching headers using regular expressions with named capture groups.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_18\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader_regexp [<name>] <field> <regexp>\n\nexpression header_regexp('<name>', '<field>', '<regexp>')\nexpression header_regexp('<field>', '<regexp>')\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy Storage in Bash\nDESCRIPTION: Imports the contents of a tarball into Caddy's configured data storage from a specified input or stdin.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncaddy storage import\n\t-c, --config <path>\n\t-i, --input <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring max_header_size in Caddy Server\nDESCRIPTION: Sets the maximum size to parse from a client's HTTP request headers. If exceeded, the server responds with HTTP 431. Default is 1MB.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_44\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tmax_header_size 5MB\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling credential logging in Caddy Server\nDESCRIPTION: By default, sensitive headers are redacted in access logs. This option enables logging of credentials in headers like Cookie, Authorization, etc.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_46\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tlog_credentials\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Restart Configuration\nDESCRIPTION: Systemd configuration for automatic service restart on failure.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_4\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\n# Automatically restart caddy if it crashes except if the exit code was 1\nRestartPreventExitStatus=1\nRestart=on-failure\nRestartSec=5s\n```\n\n----------------------------------------\n\nTITLE: Starting Caddy with Unikraft\nDESCRIPTION: Command to run Caddy with Unikraft using the kraft tool. This method runs Caddy as a unikernel instance with specified platform, architecture, and memory allocation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nkraft run --rm -p 2015:2015 --plat qemu --arch x86_64 -M 256M caddy:2.7\n```\n\n----------------------------------------\n\nTITLE: Example of Multiple Header Values Matching in Caddy\nDESCRIPTION: Example of a named response matcher that matches when the 'Foo' header has either the value 'bar' OR 'baz', demonstrating how multiple values are OR-ed together.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\n@foo {\n\theader Foo bar\n\theader Foo baz\n}\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Root Configuration in Caddyfile\nDESCRIPTION: Example showing how to change the site root only for specific request paths using a path matcher.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/root.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nroot /foo/* /home/user/public_html/foo\n```\n\n----------------------------------------\n\nTITLE: Disable OpenMetrics Configuration\nDESCRIPTION: Example showing how to disable OpenMetrics negotiation when serving metrics.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/metrics.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\nmetrics /metrics {\n\tdisable_openmetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Syntax in Caddyfile\nDESCRIPTION: Specifies the syntax for the 'import' directive in Caddyfile, including the pattern and optional arguments.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nimport <pattern> [<args...>] [{block}]\n```\n\n----------------------------------------\n\nTITLE: Defining Respond Directive Syntax in Caddyfile\nDESCRIPTION: This snippet shows the syntax for the 'respond' directive in Caddyfile. It includes optional matcher, status code, body, and additional options for specifying body content and connection closure.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/respond.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\nrespond [<matcher>] <status>|<body> [<status>] {\n\tbody <text>\n\tclose\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Certificate with OpenSSL\nDESCRIPTION: Uses OpenSSL to examine the details of the extracted certificate\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in cert.pem -text\n```\n\n----------------------------------------\n\nTITLE: Importing Caddy's Public Key for GPG Verification\nDESCRIPTION: This command imports Caddy's public key into the GPG keyring. The key is downloaded from Caddy's GitHub repository and then imported using gpg.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://github.com/caddyserver/caddy/raw/master/caddy.asc | gpg --import\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Incorrect Multiple Handlers\nDESCRIPTION: An example of a problematic Caddyfile where both file_server and reverse_proxy are applied to all requests, which won't work as intended due to directive precedence.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_10\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nfile_server\nreverse_proxy 127.0.0.1:9005\n```\n\n----------------------------------------\n\nTITLE: Adapting Caddyfile to JSON using POST /adapt\nDESCRIPTION: This snippet demonstrates how to use the POST /adapt endpoint to convert a Caddyfile configuration to JSON format. It uses curl to send a POST request with the Caddyfile content as the request body.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/adapt\" \\\n\t-H \"Content-Type: text/caddyfile\" \\\n\t--data-binary @Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Cross-Compiling Caddy for Windows\nDESCRIPTION: Command to build Caddy for Windows platform when compiling from a non-Windows environment using the GOOS environment variable.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=windows go build\n```\n\n----------------------------------------\n\nTITLE: Heredoc Configuration Example\nDESCRIPTION: Shows how to use heredoc syntax for multi-line content in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_8\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\trespond <<HTML\n\t\t<html>\n\t\t  <head><title>Foo</title></head>\n\t\t  <body>Foo</body>\n\t\t</html>\n\t\tHTML 200\n}\n```\n\n----------------------------------------\n\nTITLE: Defining log_name Syntax in Caddyfile\nDESCRIPTION: Shows the basic syntax for the log_name directive, which accepts an optional matcher and one or more logger names.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_name.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\nlog_name [<matcher>] <names...>\n```\n\n----------------------------------------\n\nTITLE: Local Trust Certificate Configuration in Caddy\nDESCRIPTION: Configuration for using locally-trusted certificates instead of public ACME certificates, useful for development environments.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_17\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\ttls internal\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Between Custom and Default Caddy Binaries\nDESCRIPTION: Command to switch between different Caddy binaries after setting up alternatives, allowing easy toggling between custom and default versions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/build.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nupdate-alternatives --config caddy\n```\n\n----------------------------------------\n\nTITLE: Default Response Matcher for Encode Directive\nDESCRIPTION: The default response matcher configuration that determines which responses get encoded based on Content-Type headers.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/encode.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nmatch {\n\theader Content-Type application/atom+xml*\n\theader Content-Type application/eot*\n\theader Content-Type application/font*\n\theader Content-Type application/geo+json*\n\theader Content-Type application/graphql+json*\n\theader Content-Type application/javascript*\n\theader Content-Type application/json*\n\theader Content-Type application/ld+json*\n\theader Content-Type application/manifest+json*\n\theader Content-Type application/opentype*\n\theader Content-Type application/otf*\n\theader Content-Type application/rss+xml*\n\theader Content-Type application/truetype*\n\theader Content-Type application/ttf*\n\theader Content-Type application/vnd.api+json*\n\theader Content-Type application/vnd.ms-fontobject*\n\theader Content-Type application/wasm*\n\theader Content-Type application/x-httpd-cgi*\n\theader Content-Type application/x-javascript*\n\theader Content-Type application/x-opentype*\n\theader Content-Type application/x-otf*\n\theader Content-Type application/x-perl*\n\theader Content-Type application/x-protobuf*\n\theader Content-Type application/x-ttf*\n\theader Content-Type application/xhtml+xml*\n\theader Content-Type application/xml*\n\theader Content-Type font/*\n\theader Content-Type image/svg+xml*\n\theader Content-Type image/vnd.microsoft.icon*\n\theader Content-Type image/x-icon*\n\theader Content-Type multipart/bag*\n\theader Content-Type multipart/mixed*\n\theader Content-Type text/*\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Response Headers in Caddy\nDESCRIPTION: Syntax for matching responses based on HTTP header fields. Supports exact matching, prefix/suffix matching with wildcards, and negation with the ! prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader <field> [<value>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving PKI CA Certificates using GET /pki/ca/<id>/certificates\nDESCRIPTION: This snippet demonstrates how to retrieve the certificate chain of a particular PKI Certificate Authority (CA) using the GET /pki/ca/<id>/certificates endpoint. It uses curl to send a GET request.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://localhost:2019/pki/ca/local/certificates\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN CERTIFICATE-----\nMIIByDCCAW2gAwIBAgIQViS12trTXBS/nyxy7Zg9JDAKBggqhkjOPQQDAjAwMS4w\n...\nBy75JkP6C14OfU733oElfDUMa5ctbMY53rWFzQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIBpDCCAUmgAwIBAgIQTS5a+3LUKNxC6qN3ZDR8bDAKBggqhkjOPQQDAjAwMS4w\n...\n9M9t0FwCIQCAlUr4ZlFzHE/3K6dARYKusR1ck4A3MtucSSyar6lgRw==\n-----END CERTIFICATE-----\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via Ansible\nDESCRIPTION: Command to install Caddy using Ansible Galaxy. This is a community-maintained installation method that leverages the nvjacobo.caddy role.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nansible-galaxy install nvjacobo.caddy\n```\n\n----------------------------------------\n\nTITLE: Prometheus Request Rate Query\nDESCRIPTION: PromQL query to determine the per-second request rate for the file_server handler, averaged over a 5-minute window.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nrate(caddy_http_requests_total{handler=\"file_server\"}[5m])\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration in Caddy v2\nDESCRIPTION: Shows the simplified logging directive in Caddy v2 which outputs structured JSON logs to stderr by default.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/v2-upgrade.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\nlog\n```\n\n----------------------------------------\n\nTITLE: HTTPS Reverse Proxy with Caddy CLI\nDESCRIPTION: Command to start an HTTPS reverse proxy to a backend on port 9000 using Caddy's automatic HTTPS feature.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --to :9000\n```\n\n----------------------------------------\n\nTITLE: Multiple Interface Binding\nDESCRIPTION: Advanced example showing how to bind the same domain to different interfaces with different responses.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/bind.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tbind 10.0.0.1\n\trespond \"One\"\n}\n\nexample.com {\n\tbind 10.0.0.2\n\trespond \"Two\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Intercept Directive Syntax in Caddyfile\nDESCRIPTION: This snippet demonstrates the syntax for the 'intercept' directive in Caddyfile. It shows how to define response matchers, replace status codes, and handle responses with custom directives.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/intercept.md#2025-04-20_snippet_1\n\nLANGUAGE: Caddyfile\nCODE:\n```\nintercept [<matcher>] {\n\t@name {\n\t\tstatus <code...>\n\t\theader <field> [<value>]\n\t}\n\n\treplace_status [<matcher>] <code>\n\n\thandle_response [<matcher>] {\n\t\t<directives...>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Header Substring Matching in Caddy\nDESCRIPTION: Example of creating a named response matcher that checks if the 'Foo' header contains the substring 'bar' anywhere in its value.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy-d\nCODE:\n```\n@upgrade header Foo *bar*\n```\n\n----------------------------------------\n\nTITLE: Parsing Caddyfile Blocks with Subdirectives in Go\nDESCRIPTION: Code example showing how to parse a Caddyfile block containing subdirectives by iterating through the block while maintaining the proper nesting level.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfor nesting := d.Nesting(); d.NextBlock(nesting); {\n\tswitch d.Val() {\n\t\tcase \"sub_directive_1\":\n\t\t// ...\n\t\tcase \"sub_directive_2\":\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Response from listener addresses export\nDESCRIPTION: JSON response showing the listener addresses configured for a server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\":443\"]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Property via @id Tag\nDESCRIPTION: Command to retrieve a specific property value from a configuration object using its @id tag.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/id/msg/body\n```\n\n----------------------------------------\n\nTITLE: Using log_skip Within a Handled Path in Caddy\nDESCRIPTION: Example demonstrating how to use log_skip within a handle_path block, where an explicit matcher is not needed because the directive is already within a path-matched context.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log_skip.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_path /static* {\n\troot * /srv/static\n\tlog_skip\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus 95th Percentile Request Duration Query\nDESCRIPTION: PromQL query to find the 95th percentile request duration for the file_server handler using histogram_quantile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_5\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.95, sum(caddy_http_request_duration_seconds_bucket{handler=\"file_server\"}) by (le))\n```\n\n----------------------------------------\n\nTITLE: Setting Grace Period\nDESCRIPTION: Configuration for setting a grace period for HTTP server shutdown.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tgrace_period 10s\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Single Site Block with Braces\nDESCRIPTION: Shows the same single site configuration with explicit curly braces for comparison.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/concepts.md#2025-04-20_snippet_2\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost {\n\treverse_proxy /api/* localhost:9001\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Request Protocols in Caddy Configuration\nDESCRIPTION: Example of using the protocol matcher to match specific HTTP versions in Caddy configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_25\n\nLANGUAGE: caddy-d\nCODE:\n```\n@http2 protocol http/2+\n```\n\nLANGUAGE: caddy-d\nCODE:\n```\n@http2 `protocol('http/2+')`\n```\n\n----------------------------------------\n\nTITLE: Defining Global Options Block Structure in Caddyfile\nDESCRIPTION: Shows the basic syntax for a global options block in Caddyfile. This block must appear at the top of the configuration file and can only appear once.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Header Replacement in Caddy Proxy\nDESCRIPTION: Example of performing a regular expression replacement on a request header using RE2 syntax.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_11\n\nLANGUAGE: caddy\nCODE:\n```\nheader_up Some-Header \"^prefix-([A-Za-z0-9]*)$\" \"replaced-$1-suffix\"\n```\n\n----------------------------------------\n\nTITLE: Prometheus Latency Threshold Breach Rate Query\nDESCRIPTION: PromQL query to calculate the rate at which requests exceed a 100ms latency threshold for a specific server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nsum(rate(caddy_http_request_duration_seconds_count{server=\"srv0\"}[5m])) by (handler)\n-\nsum(rate(caddy_http_request_duration_seconds_bucket{le=\"0.100\", server=\"srv0\"}[5m])) by (handler)\n```\n\n----------------------------------------\n\nTITLE: Updated Handler Configuration for Static Response\nDESCRIPTION: JSON snippet showing an updated static_response handler configuration with a different message.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"handler\": \"static_response\",\n\t\"body\": \"I can do hard things.\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Enhancing Caddyfile Documentation Rendering\nDESCRIPTION: JavaScript code that runs when the documentation page loads to enhance rendering of response matchers with appropriate styling and links, and to add links to subdirectives if matching anchor tags are found on the page.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// Fix response matchers to render with the right color,\n\t// and link to response matchers section\n\twindow.$('pre.chroma .k:contains(\"@\")')\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\t\t\tlet url = '#' + item.innerText.replace(/_/g, \"-\");\n\t\t\twindow.$(item).addClass('nd').removeClass('k')\n\t\t\twindow.$(item).html(`<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">${text}</a>`);\n\t\t});\n\n\t// Fix matcher placeholder\n\twindow.$('pre.chroma .nd:contains(\"@name\")').first()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">@name</a>')\n\twindow.$('pre.chroma .k:contains(\"replace_status\")').first().next().slice(0, 3)\n\t\t.wrapAll('<span class=\"nd\">').parent()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">[&lt;matcher&gt;]</a>')\n\twindow.$('pre.chroma .k:contains(\"handle_response\")').first().next().slice(0, 3)\n\t\t.wrapAll('<span class=\"nd\">').parent()\n\t\t.html('<a href=\"/docs/caddyfile/response-matchers\" style=\"color: inherit;\" title=\"Response matcher\">[&lt;matcher&gt;]</a>')\n\n\t// We'll add links to all the subdirectives if a matching anchor tag is found on the page.\n\taddLinksToSubdirectives();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Caddy Exit Code in Bash\nDESCRIPTION: Command to display the exit code of the last executed Caddy process in a bash shell. Exit codes range from 0 (normal exit) to 3 (failed quit).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\necho $?\n```\n\n----------------------------------------\n\nTITLE: Querying Caddy's Current Configuration via API\nDESCRIPTION: Command to retrieve the current active configuration from Caddy's admin API using curl.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:2019/config/\n```\n\n----------------------------------------\n\nTITLE: Stopping Caddy Server\nDESCRIPTION: Command to stop the Caddy server and clean up resources.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncaddy stop\n```\n\n----------------------------------------\n\nTITLE: Verifying Caddy Asset Integrity with GPG\nDESCRIPTION: This command uses GPG to verify the integrity of a Caddy asset. It compares the downloaded asset file against its corresponding signature file to ensure authenticity.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngpg --verify caddy_2.4.5_linux_amd64.tar.gz.asc caddy_2.4.5_linux_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Scraping Caddy Metrics\nDESCRIPTION: YAML configuration file for Prometheus to scrape metrics from Caddy's admin API endpoint. Sets a 15-second scrape interval and targets Caddy's default admin API address.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/metrics.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# prometheus.yaml\nglobal:\n  scrape_interval: 15s # default is 1 minute\n\nscrape_configs:\n  - job_name: caddy\n    static_configs:\n      - targets: ['localhost:2019']\n```\n\n----------------------------------------\n\nTITLE: Implementing a Caddyfile Handler Parser Function in Go\nDESCRIPTION: Example of a parser function that creates and configures a middleware handler from Caddyfile tokens, utilizing an existing UnmarshalCaddyfile method.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// parseCaddyfileHandler unmarshals tokens from h into a new middleware handler value.\nfunc parseCaddyfileHandler(h httpcaddyfile.Helper) (caddyhttp.MiddlewareHandler, error) {\n\tvar g Gizmo\n\terr := g.UnmarshalCaddyfile(h.Dispenser)\n\treturn g, err\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Caddy Server\nDESCRIPTION: Command to stop a Caddy server that was started in the background.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/getting-started.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncaddy stop\n```\n\n----------------------------------------\n\nTITLE: Installing Kraft for Unikraft\nDESCRIPTION: Command to install Kraft, the companion tool for Unikraft, which is required before running Caddy with Unikraft. Uses a script fetched via HTTPS.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://get.kraftkit.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Initializing DOM manipulations for code blocks using JavaScript\nDESCRIPTION: JavaScript function that runs on document load to fix formatting issues with '>' characters in code blocks and add links to subdirectives when matching anchor tags are found on the page.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// Fix > in code blocks\n\twindow.$('pre.chroma .k:contains(\">\")')\n\t\t.each(function() {\n\t\t\tconst e = window.$(this);\n\t\t\t// Skip if ends with >\n\t\t\tif (e.text().trim().endsWith('>')) return;\n\t\t\t// Replace > with <span class=\"p\">&gt;</span>\n\t\t\te.html(e.html().replace(/&gt;/g, '<span class=\"p\">&gt;</span>'));\n\t\t});\n\n\t// We'll add links to all the subdirectives if a matching anchor tag is found on the page.\n\taddLinksToSubdirectives();\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Proxy Rewrite Snippet with Prefix in Caddyfile\nDESCRIPTION: Demonstrates importing a snippet that creates a proxy with a prefix rewrite rule, using the first argument as the prefix.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/import.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\n(proxy-rewrite) {\n\trewrite * {args[0]}{uri}\n\treverse_proxy {args[1:]}\n}\n\nexample.com {\n\timport proxy-rewrite /api 10.0.0.1 10.0.0.2 10.0.0.3\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Caddy Stop Command in Bash\nDESCRIPTION: Gracefully stops the running Caddy process with options to specify the address and configuration.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncaddy stop\n\t[--address <interface>]\n\t[-c, --config <path> [-a, --adapter <name>]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin API Through SSH Tunnel\nDESCRIPTION: curl command to access the pprof endpoint through an SSH tunnel\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://localhost:8123/debug/pprof/ -H \"Host: localhost:2019\"\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy Service Commands\nDESCRIPTION: Commands for checking Caddy service status and managing the service.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncaddy version\n```\n\n----------------------------------------\n\nTITLE: Error Status Code Matching\nDESCRIPTION: Shows how to match 404 error status codes in error handling.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy-d\nCODE:\n```\n@404 expression {err.status_code} == 404\n```\n\n----------------------------------------\n\nTITLE: Setting OCSP Staple Update Interval in Caddy\nDESCRIPTION: Defines how often to check if OCSP staples need updating. Default is 1 hour.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_30\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tocsp_interval 2h\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Directive Order for HTTP Caddyfile in Go\nDESCRIPTION: Example of registering the order of a custom directive relative to standard directives in the HTTP Caddyfile, ensuring proper handler execution sequence.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nhttpcaddyfile.RegisterDirectiveOrder(\"gizmo\", httpcaddyfile.After, \"header\")\n```\n\n----------------------------------------\n\nTITLE: Interface Guard Implementation\nDESCRIPTION: Shows how to implement interface guards for compile-time type checking of module interfaces. Includes both single and multiple interface guard examples.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nvar _ InterfaceName = (*YourType)(nil)\n```\n\nLANGUAGE: go\nCODE:\n```\n// Interface guards\nvar (\n\t_ caddy.Provisioner           = (*FileServer)(nil)\n\t_ caddyhttp.MiddlewareHandler = (*FileServer)(nil)\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Placeholders in ServeHTTP\nDESCRIPTION: Go code example demonstrating how to process placeholders during request handling with access to HTTP-specific placeholders.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/placeholders.md#2025-04-20_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (g *Gizmo) ServeHTTP(w http.ResponseWriter, r *http.Request, next caddyhttp.Handler) error {\n\trepl := r.Context().Value(caddy.ReplacerCtxKey).(*caddy.Replacer)\n\t_, err := w.Write([]byte(repl.ReplaceAll(g.Name,\"\")))\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn next.ServeHTTP(w, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Keepalive Interval in Caddy\nDESCRIPTION: This snippet demonstrates how to set the keepalive interval for TCP connections in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_37\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\tkeepalive_interval 30s\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Combined Rekor Search and Get Command\nDESCRIPTION: One-liner that combines searching for an artifact and retrieving its entry details from Rekor\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrekor-cli get --uuid $(rekor-cli search --artifact ./caddy_2.6.0_checksums.txt --format json | jq -r '.UUIDs[0]') --format json | jq -r '.'\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Website with Docker\nDESCRIPTION: This snippet demonstrates how to run the Caddy website project using Docker. It stops and removes any existing container, then runs a new one with the necessary volume mounts and port mappings.\nSOURCE: https://github.com/caddyserver/website/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop caddy-website || true && docker rm caddy-website || true\ndocker run --name caddy-website -it -p 8443:443 -v ./:/wd caddy sh -c \"cd /wd && caddy run\"\n```\n\n----------------------------------------\n\nTITLE: Basic Access Logging Configuration in Caddy\nDESCRIPTION: Enables basic access logging to the default logger (stderr).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tlog\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Bind Address in Caddyfile\nDESCRIPTION: Example of setting the default bind address for all sites in a Caddyfile. This applies to all sites that don't explicitly use the 'bind' directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_4\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tdefault_bind 10.0.0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Placeholders in Provision Method\nDESCRIPTION: Go code example showing how to process placeholders during the Provision step using a new replacer instance.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/placeholders.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (g *Gizmo) Provision(ctx caddy.Context) error {\n\trepl := caddy.NewReplacer()\n\tg.Name = repl.ReplaceAll(g.Name,\"\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Header Non-Existence Matching in Caddy\nDESCRIPTION: Example of a response matcher that matches when the 'Foo' header field does not exist at all in the response.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/response-matchers.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\n@not_foo header !Foo\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Validation\nDESCRIPTION: Demonstrates how to implement the caddy.Validator interface to validate module configuration. This is an optional interface that runs after Provision().\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Validate validates that the module has a usable config.\nfunc (g Gizmo) Validate() error {\n\t// TODO: validate the module's setup\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Interface Guard for Caddyfile Unmarshaler in Go\nDESCRIPTION: Implementation of an interface guard to ensure a module type properly satisfies the caddyfile.Unmarshaler interface at compile time.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/caddyfile.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar _ caddyfile.Unmarshaler = (*Gizmo)(nil)\n```\n\n----------------------------------------\n\nTITLE: Querying Rekor Transparency Log\nDESCRIPTION: Retrieves and formats transparency log entry using rekor-cli and jq.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrekor-cli get --uuid 04deb84e5a73ba75ea69092c6d700eaeb869c29cae3e0cf98dbfef871361ed09 --format json | jq -r '.'\n```\n\n----------------------------------------\n\nTITLE: Highlighting Caddy Configuration Sections with JavaScript\nDESCRIPTION: This JavaScript code identifies and highlights specific sections of a Caddy server configuration using custom CSS classes. It targets elements within a pre-formatted code block and wraps them with span elements for styling.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/file-server.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nready(() => {\n\tlet startElement, endElement;\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span.line', 'file_server /downloads/* {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-compress rollover-blue');\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span', 'encode');\n\tendElement = findNextText(startElement, 'gzip');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-compress rollover-blue');\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span.line', 'file_server /database/* {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-vfs rollover-green');\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span.line', 'file_server /embedded/* {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-vfs rollover-green');\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span', '# (Range/Etag/etc. all work without extra config)');\n\twrapRangeWithSpan(startElement, startElement, 'rollover-range rollover-yellow');\n\n\tstartElement = findWithContent('.ex-fs pre.chroma code span', 'file_server');\n\tendElement = findNextText(startElement, 'browse');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-browse rollover-purple');\n\n\twindow.$_('.ex-fs code').classList.add('light');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Package to Caddy in Bash\nDESCRIPTION: Replaces the current Caddy binary with a new version that includes specified additional packages.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncaddy add-package <packages...>\n\t[-k, --keep-backup]\n```\n\n----------------------------------------\n\nTITLE: Replacing Header Content in Caddyfile\nDESCRIPTION: Example demonstrating how to replace part of a header value, in this case replacing http:// with https:// in the Location header.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/header.md#2025-04-20_snippet_3\n\nLANGUAGE: caddy-d\nCODE:\n```\nheader Location http:// https://\n```\n\n----------------------------------------\n\nTITLE: Full HTTPS Reverse Proxy with Caddy CLI\nDESCRIPTION: Command to set up a full HTTPS reverse proxy, serving HTTPS from client to proxy and from proxy to backend.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to https://example.com:9000\n```\n\n----------------------------------------\n\nTITLE: WinSW Service Configuration\nDESCRIPTION: XML configuration for setting up Caddy as a Windows service using WinSW. Defines service properties, executable path, and logging settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/running.md#2025-04-20_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<service>\n  <id>caddy</id>\n  <!-- Display name of the service -->\n  <name>Caddy Web Server (powered by WinSW)</name>\n  <!-- Service description -->\n  <description>Caddy Web Server (https://caddyserver.com/)</description>\n  <executable>%BASE%\\caddy.exe</executable>\n  <arguments>run</arguments>\n  <log mode=\"roll-by-time\">\n    <pattern>yyyy-MM-dd</pattern>\n  </log>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Filtering Runtime Functions from CPU Profile\nDESCRIPTION: pprof analysis showing CPU utilization of non-runtime code by filtering out runtime-related functions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n(pprof) top -runtime  \nActive filters:\n   ignore=runtime\nShowing nodes accounting for 0.92s, 1.31% of 70.11s total\nDropped 160 nodes (cum <= 0.35s)\nShowing top 10 nodes out of 243\n      flat  flat%   sum%        cum   cum%\n     0.17s  0.24%  0.24%      0.28s   0.4%  sync.(*Pool).getSlow\n     0.11s  0.16%   0.4%      0.11s  0.16%  github.com/prometheus/client_golang/prometheus.(*histogram).observe (inline)\n     0.10s  0.14%  0.54%      0.23s  0.33%  github.com/prometheus/client_golang/prometheus.(*MetricVec).hashLabels\n     0.10s  0.14%  0.68%      0.12s  0.17%  net/textproto.CanonicalMIMEHeaderKey\n     0.10s  0.14%  0.83%      0.10s  0.14%  sync.(*poolChain).popTail\n     0.08s  0.11%  0.94%      0.26s  0.37%  github.com/prometheus/client_golang/prometheus.(*histogram).Observe\n     0.07s   0.1%  1.04%      0.07s   0.1%  internal/poll.(*fdMutex).rwlock\n     0.07s   0.1%  1.14%      0.10s  0.14%  path/filepath.Clean\n     0.06s 0.086%  1.23%      0.06s 0.086%  context.value\n     0.06s 0.086%  1.31%      0.06s 0.086%  go.uber.org/zap/buffer.(*Buffer).AppendByte\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Links for TLS Subdirectives in JavaScript\nDESCRIPTION: JavaScript code that runs when the document is ready, adding links to all TLS subdirectives if matching anchor tags are found on the page.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// We'll add links to all the subdirectives if a matching anchor tag is found on the page.\n\taddLinksToSubdirectives();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring intermediate certificate CN in Caddy Server PKI\nDESCRIPTION: Sets a custom CommonName for the intermediate certificates used by Caddy's local certificate authority.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_51\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca local {\n\t\t\tintermediate_cn \"My Local CA - ECC Intermediate\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration with Processed Placeholders\nDESCRIPTION: Generated JSON configuration showing how different placeholder types are processed during Caddyfile adaptation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy/placeholders.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apps\": {\n    \"http\": {\n      \"servers\": {\n        \"srv0\": {\n          \"listen\": [\":8080\"],\n          \"routes\": [\n            {\n              \"handle\": [\n                {\n                  \"body\": \"example\",\n                  \"handler\": \"static_response\",\n                  \"status_code\": 200\n                }\n              ]\n            }\n          ]\n        },\n        \"srv1\": {\n          \"listen\": [\":8081\"],\n          \"routes\": [\n            {\n              \"handle\": [\n                {\n                  \"body\": \"{env.HOST}\",\n                  \"handler\": \"static_response\",\n                  \"status_code\": 200\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Light Theme to Caddyfile Code Block\nDESCRIPTION: This JavaScript snippet adds the 'light' class to the code element containing the Caddyfile configuration, likely for styling purposes.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/website-caddyfile.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$_('.ex-website-caddyfile code').classList.add('light');\n```\n\n----------------------------------------\n\nTITLE: Removing Package from Caddy in Bash\nDESCRIPTION: Replaces the current Caddy binary with a new version that excludes specified packages.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncaddy remove-package <packages...>\n\t[-k, --keep-backup]\n```\n\n----------------------------------------\n\nTITLE: Example: Simplified vars_regexp with Inferred Name\nDESCRIPTION: Simplified version of the previous example, omitting the explicit name which will be inferred from the named matcher (@magic).\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/matchers.md#2025-04-20_snippet_33\n\nLANGUAGE: caddy-d\nCODE:\n```\n@magic vars_regexp {magic_number} ^(4.*)\n```\n\n----------------------------------------\n\nTITLE: Responding with a Simple Message in Caddy\nDESCRIPTION: Shows how to configure Caddy to respond with a \"Hello, world!\" message for the localhost address. This example includes both the address and the response directive.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/caddyfile.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nlocalhost\n\nrespond \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Links to Documentation with JavaScript\nDESCRIPTION: JavaScript that enhances the documentation by adding links from code blocks to corresponding anchor tags in the document. It processes elements in syntax-highlighted code blocks to create clickable references to their documentation sections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// We'll add links on the options in the code block at the top\n\t// to their associated anchor tags.\n\tlet headers = $('article h5').map((i, el) => el.id.replace(/-/g, \"_\")).toArray();\n\twindow.$('pre.chroma .k')\n\t\t.filter((k, item) => headers.includes(item.innerText))\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText.replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\t\t\tlet url = '#' + item.innerText.replace(/_/g, \"-\");\n\t\t\twindow.$(item).html(`<a href=\"${url}\" style=\"color: inherit;\" title=\"${text}\">${text}</a>`);\n\t\t});\n\t// Add links on comments to their respective sections\n\twindow.$('pre.chroma .c1')\n\t\t.filter((k, item) => item.innerText.includes('#'))\n\t\t.map(function(k, item) {\n\t\t\tlet text = item.innerText;\n\t\t\tlet before = text.slice(0, text.indexOf('#')); // the leading whitespace\n\t\t\ttext = text.slice(text.indexOf('#')); // only the comment part\n\t\t\tlet url = '#' + text.replace(/#/g, '').trim().toLowerCase().replace(/ /g, \"-\");\n\t\t\twindow.$(item).html(`${before}<a href=\"${url}\" style=\"color: inherit;\" title=\"${text}\">${text}</a>`);\n\t\t});\n\t// Surgically fix a duplicate link; 'name' appears twice as a link\n\t// for two different sections, so we change the second to #name-1\n\twindow.$('pre.chroma .line:contains(\"ca [<id>]\")')\n\t\t.next()\n\t\t.find('a:contains(\"name\")')\n\t\t.attr('href', '#name-1');\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Site Caddy Configuration\nDESCRIPTION: JSON configuration for multiple sites running on different ports, demonstrating how to set up multiple server endpoints with different responses.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/api.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apps\": {\n\t\t\"http\": {\n\t\t\t\"servers\": {\n\t\t\t\t\"hello\": {\n\t\t\t\t\t\"listen\": [\":2015\"],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"handle\": [{\n\t\t\t\t\t\t\t\t\"handler\": \"static_response\",\n\t\t\t\t\t\t\t\t\"body\": \"Hello, world!\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"bye\": {\n\t\t\t\t\t\"listen\": [\":2016\"],\n\t\t\t\t\t\"routes\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"handle\": [{\n\t\t\t\t\t\t\t\t\"handler\": \"static_response\",\n\t\t\t\t\t\t\t\t\"body\": \"Goodbye, world!\"\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Certificate from Rekor Response\nDESCRIPTION: Extracts and decodes the certificate from a Rekor entry response into a PEM file\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrekor-cli get --uuid $(rekor-cli search --artifact ./caddy_2.6.0_checksums.txt --format json | jq -r '.UUIDs[0]') --format json | jq -r '.Body.HashedRekordObj.signature.publicKey.content' | base64 -d > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Tunnel for Remote Access\nDESCRIPTION: Command to create an SSH tunnel for accessing Caddy's admin interface remotely\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nssh -N username@example.com -L 8123:localhost:2019\n```\n\n----------------------------------------\n\nTITLE: Highlighting On-Demand TLS Configuration in JavaScript\nDESCRIPTION: This JavaScript code highlights specific parts of the Caddy configuration example. It wraps the 'on_demand_tls' block with a purple background and the 'tls' block with a green background.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/on-demand.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nready(() => {\n\tlet startElement, endElement;\n\n\tstartElement = findWithContent('.ex-on-demand pre.chroma code span.line', 'on_demand_tls {');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-abuse rollover-purple');\n\n\tstartElement = findWithContent('.ex-on-demand pre.chroma code span.line', 'tls');\n\tendElement = findNextText(startElement, '}');\n\twrapRangeWithSpan(startElement, endElement, 'rollover-ondemand rollover-green');\n\n\twindow.$_('.ex-on-demand code').classList.add('light');\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript DOM Manipulation for Caddyfile Documentation\nDESCRIPTION: JavaScript code that runs when the page loads to fix rendering issues in code blocks, specifically handling '>' characters and fixing URI subdirective display issues.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/forward_auth.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// Fix > in code blocks\n\twindow.$('pre.chroma .k:contains(\">\")')\n\t\t.each(function() {\n\t\t\tconst e = window.$(this);\n\t\t\t// Skip if ends with >\n\t\t\tif (e.text().trim().endsWith('>')) return;\n\t\t\t// Replace > with <span class=\"p\">&gt;</span>\n\t\t\te.html(e.html().replace(/&gt;/g, '<span class=\"p\">&gt;</span>'));\n\t\t});\n\n\t// Fix uri subdirective, gets parsed as matcher arg because of \"uri\" directive\n\twindow.$('.k:contains(\"uri\") + .nd')\n\t\t.each(function() {\n\t\t\twindow.$(this)\n\t\t\t\t.removeClass('nd')\n\t\t\t\t.addClass('s')\n\t\t\t\t.text(window.$(this).text());\n\t\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Caddy Storage in Bash\nDESCRIPTION: Exports the contents of Caddy's configured data storage to a specified output or stdout.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/command-line.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncaddy storage export\n\t-c, --config <path>\n\t[-o, --output <path>]\n```\n\n----------------------------------------\n\nTITLE: Configuring net Output Module in Caddyfile\nDESCRIPTION: Syntax for the net output module that writes logs to a network socket with options for connection timeout and soft start behavior when the remote logging service is unavailable.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/log.md#2025-04-20_snippet_6\n\nLANGUAGE: caddy-d\nCODE:\n```\noutput net <address> {\n\tdial_timeout <duration>\n\tsoft_start\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profile Top Consumers\nDESCRIPTION: Output from pprof's top command showing the main CPU consumers, focusing on runtime operations and garbage collection impact.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n(pprof) top\nShowing nodes accounting for 38.36s, 54.71% of 70.11s total\nDropped 785 nodes (cum <= 0.35s)\nShowing top 10 nodes out of 196\n      flat  flat%   sum%        cum   cum%\n    10.97s 15.65% 15.65%     10.97s 15.65%  runtime/internal/syscall.Syscall6\n     6.59s  9.40% 25.05%     36.65s 52.27%  runtime.gcDrain\n     5.03s  7.17% 32.22%      5.34s  7.62%  runtime.(*lfstack).pop (inline)\n     3.69s  5.26% 37.48%     11.02s 15.72%  runtime.scanobject\n     2.42s  3.45% 40.94%      2.42s  3.45%  runtime.(*lfstack).push\n     2.26s  3.22% 44.16%      2.30s  3.28%  runtime.pageIndexOf (inline)\n     2.11s  3.01% 47.17%      2.56s  3.65%  runtime.findObject\n     2.03s  2.90% 50.06%      2.03s  2.90%  runtime.markBits.isMarked (inline)\n     1.69s  2.41% 52.47%      1.69s  2.41%  runtime.memclrNoHeapPointers\n     1.57s  2.24% 54.71%      1.57s  2.24%  runtime.epollwait\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Property via @id Tag\nDESCRIPTION: Command to update a specific property of a configuration object using its @id tag for simplified access.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api-tutorial.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n\tlocalhost:2019/id/msg/body \\\n\t-H \"Content-Type: application/json\" \\\n\t-d '\"Some shortcuts are good.\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Reverse Proxy with cURL\nDESCRIPTION: Command to test the reverse proxy setup using cURL, sending a request to the proxy endpoint.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 127.0.0.1:2080\n```\n\n----------------------------------------\n\nTITLE: Custom Internal CA Configuration in Caddy\nDESCRIPTION: Example of configuring custom options for the internal Certificate Authority.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_19\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\ttls {\n\t\tissuer internal {\n\t\t\tca foo\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Directive Order in Caddyfile\nDESCRIPTION: Demonstrates a problematic configuration where directive ordering matters. In this example, the redir directive would execute before file_server due to Caddy's default ordering, which is not the intended behavior.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/route.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com {\n\tfile_server /specific.html\n\tredir https://anothersite.com{uri}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending elements to arrays in Go\nDESCRIPTION: Go code snippet illustrating how the /... path suffix works when appending multiple elements to an array.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/api.md#2025-04-20_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nbaseSlice = append(baseSlice, newElems...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Profiles via HTTP\nDESCRIPTION: Example URL showing how to access Caddy's pprof profiles through the admin interface\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:2019/debug/pprof/\n```\n\n----------------------------------------\n\nTITLE: Example Goroutine Profile Output\nDESCRIPTION: Sample output from a goroutine profile showing stack traces\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ngoroutine profile: total 88\n23 @ 0x43e50e 0x436d37 0x46bda5 0x4e1327 0x4e261a 0x4e2608 0x545a65 0x5590c5 0x6b2e9b 0x50ddb8 0x6b307e 0x6b0650 0x6b6918 0x6b6921 0x4b8570 0xb11a05 0xb119d4 0xb12145 0xb1d087 0x4719c1\n#\t0x46bda4\tinternal/poll.runtime_pollWait+0x84\t\t\truntime/netpoll.go:343\n#\t0x4e1326\tinternal/poll.(*pollDesc).wait+0x26\t\t\tinternal/poll/fd_poll_runtime.go:84\n#\t0x4e2619\tinternal/poll.(*pollDesc).waitRead+0x279\t\tinternal/poll/fd_poll_runtime.go:89\n#\t0x4e2607\tinternal/poll.(*FD).Read+0x267\t\t\t\tinternal/poll/fd_unix.go:164\n#\t0x545a64\tnet.(*netFD).Read+0x24\t\t\t\t\tnet/fd_posix.go:55\n#\t0x5590c4\tnet.(*conn).Read+0x44\t\t\t\t\tnet/net.go:179\n#\t0x6b2e9a\tcrypto/tls.(*atLeastReader).Read+0x3a\t\t\tcrypto/tls/conn.go:805\n#\t0x50ddb7\tbytes.(*Buffer).ReadFrom+0x97\t\t\t\tbytes/buffer.go:211\n#\t0x6b307d\tcrypto/tls.(*Conn).readFromUntil+0xdd\t\t\tcrypto/tls/conn.go:827\n#\t0x6b064f\tcrypto/tls.(*Conn).readRecordOrCCS+0x24f\t\tcrypto/tls/conn.go:625\n#\t0x6b6917\tcrypto/tls.(*Conn).readRecord+0x157\t\t\tcrypto/tls/conn.go:587\n#\t0x6b6920\tcrypto/tls.(*Conn).Read+0x160\t\t\t\tcrypto/tls/conn.go:1369\n#\t0x4b856f\tio.ReadAtLeast+0x8f\t\t\t\t\tio/io.go:335\n#\t0xb11a04\tio.ReadFull+0x64\t\t\t\t\tio/io.go:354\n#\t0xb119d3\tgolang.org/x/net/http2.readFrameHeader+0x33\t\tgolang.org/x/net@v0.14.0/http2/frame.go:237\n#\t0xb12144\tgolang.org/x/net/http2.(*Framer).ReadFrame+0x84\t\tgolang.org/x/net@v0.14.0/http2/frame.go:498\n#\t0xb1d086\tgolang.org/x/net/http2.(*serverConn).readFrames+0x86\tgolang.org/x/net@v0.14.0/http2/server.go:818\n\n1 @ 0x43e50e 0x44e286 0xafeeb3 0xb0af86 0x5c29fc 0x5c3225 0xb0365b 0xb03650 0x15cb6af 0x43e09b 0x4719c1\n#\t0xafeeb2\tgithub.com/caddyserver/caddy/v2/cmd.cmdRun+0xcd2\t\t\t\t\tgithub.com/caddyserver/caddy/v2@v2.7.4/cmd/commandfuncs.go:277\n#\t0xb0af85\tgithub.com/caddyserver/caddy/v2/cmd.init.1.func2.WrapCommandFuncForCobra.func1+0x25\tgithub.com/caddyserver/caddy/v2@v2.7.4/cmd/cobra.go:126\n```\n\n----------------------------------------\n\nTITLE: Downloading Caddy's Asset Signature File\nDESCRIPTION: This command downloads the signature file for a specific Caddy asset. The example uses curl to fetch the signature file for 'caddy_2.4.5_linux_amd64.tar.gz'.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://github.com/caddyserver/caddy/releases/download/v2.4.5/caddy_2.4.5_linux_amd64.tar.gz.asc -o caddy_2.4.5_linux_amd64.tar.gz.asc\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with JSON Tags for Module Configuration\nDESCRIPTION: Example of a struct definition with JSON struct tags for module configuration. The struct uses snake_case naming convention in the JSON tags with the omitempty option to keep JSON output clean.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/extending-caddy.md#2025-04-20_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Gizmo struct {\n\tMyField string `json:\"my_field,omitempty\"`\n\tNumber  int    `json:\"number,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Rekor Log Entry JSON Structure\nDESCRIPTION: Example JSON output showing the structure of a transparency log entry including hash, signature, and certificate details.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Attestation\": \"\",\n  \"AttestationType\": \"\",\n  \"Body\": {\n    \"HashedRekordObj\": {\n      \"data\": {\n        \"hash\": {\n          \"algorithm\": \"sha256\",\n          \"value\": \"508f1044ecd9f14c43c6c8986b45b90fc79f25736e2bc85c0911433ce82533f2\"\n        }\n      },\n      \"signature\": {\n        \"content\": \"MEUCIHGL2HP5XzcUESTxIk72FS1aNK54LesTfyo+dVhRMeduAiEAnWZDZ5Ur44Y9056vr4to2Fb9FteG53eAFotv3fUZ4h4=\",\n        \"publicKey\": {\n          \"content\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURsRENDQXhtZ0F3SUJBZ0lVSXJCRm5hM1hWSmhuWnJmZU1RSHZTZ0tyKzJBd0NnWUlLb1pJemowRUF3TXcKTnpFVk1CTUdBMVVFQ2hNTWMybG5jM1J2Y21VdVpHVjJNUjR3SEFZRFZRUURFeFZ6YVdkemRHOXlaUzFwYm5SbApjbTFsWkdsaGRHVXdIaGNOTWpJd09USXdNVGN4TnpBMldoY05Nakl3T1RJd01UY3lOekEyV2pBQU1Ga3dFd1lICktvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVJdTcyc1lVYzNzK1FIWkYxTnNTQ25WUmU4NlpiUHhpSmlndmUKMkpOOEFrQTVBTlJPR1Fzd2s4eWswTjgxOTdFSUpJblBPamdHLzVKMUJvUzFuaVdNbXFPQ0FqZ3dnZ0kwTUE0RwpBMVVkRHdFQi93UUVBd0lIZ0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREF6QWRCZ05WSFE0RUZnUVVPOERSCjBzaTZMVldWSDJoNDNNWXMyYlVYRHVvd0h3WURWUjBqQkJnd0ZvQVUzOVBwejFZa0VaYjVxTmpwS0ZXaXhpNFkKWkQ4d1lRWURWUjBSQVFIL0JGY3dWWVpUYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJOaFpHUjVjMlZ5ZG1WeQpMMk5oWkdSNUx5NW5hWFJvZFdJdmQyOXlhMlpzYjNkekwzSmxiR1ZoYzJVdWVXMXNRSEpsWm5NdmRHRm5jeTkyCk1pNDJMakF3T1FZS0t3WUJCQUdEdnpBQkFRUXJhSFIwY0hNNkx5OTBiMnRsYmk1aFkzUnBiMjV6TG1kcGRHaDEKWW5WelpYSmpiMjUwWlc1MExtTnZiVEFTQmdvckJnRUVBWU8vTUFFQ0JBUndkWE5vTURZR0Npc0dBUVFCZzc4dwpBUU1FS0RneU1XRXdPR0UyWlRNNVpXUXdaVGRqTkROaU1ESTNNV05qWmpFeU5tTXhPVFJsWWpZek16a3dGUVlLCkt3WUJCQUdEdnpBQkJBUUhVbVZzWldGelpUQWZCZ29yQmdFRUFZTy9NQUVGQkJGallXUmtlWE5sY25abGNpOWoKWVdSa2VUQWVCZ29yQmdFRUFZTy9NQUVHQkJCeVpXWnpMM1JoWjNNdmRqSXVOaTR3TUlHS0Jnb3JCZ0VFQWRaNQpBZ1FDQkh3RWVnQjRBSFlBQ0dDUzhDaFMvMmhGMGRGcko0U2NSV2NZckJZOXd6alNiZWE4SWdZMmIzSUFBQUdEClcrZEVVd0FBQkFNQVJ6QkZBaUVBbkQ1TlJLWmhGTGhDSEhESXpWNmJ3VkFxbFlQNmRXMEN3S1dEbzFqem1FWUMKSUU1WmVlSzE0b2k2SSs3ejJWUlhTVnE0L3IxNUdBRnhZYUNNRnJJMFVPampNQW9HQ0NxR1NNNDlCQU1EQTJrQQpNR1lDTVFDK3N6d1ZWbmhreGcrOFNHbXBDaWZOVFpJNUFGQkNxQ3F0RVUxazhtRTE3QWpwdFdvVUcvYkJEa2J1Cm9GUUlKdUVDTVFDbmJaZmJUTWpkUnhNOUtIcW04MlJRTEZxZG5SRFF6Mi9RNlRkMi9jeU9uY05ydW5nSFFHcEEKMXR2Mmw5VnFOcDA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n        }\n      }\n    }\n  },\n  \"LogIndex\": 3618623,\n  \"IntegratedTime\": 1663694226,\n  \"UUID\": \"04deb84e5a73ba75ea69092c6d700eaeb869c29cae3e0cf98dbfef871361ed09\",\n  \"LogID\": \"c0d23d6ad406973f9559f3ba2d1ca01f84147d8ffc5b8445c224f98b9591801d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Goroutine Stack Trace Format\nDESCRIPTION: Shows the standard format for a goroutine stack trace entry. Each line includes the memory address, package/function name, offset, and file location.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n<address> <package/func>+<offset> <filename>:<line>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Certificate with OpenSSL\nDESCRIPTION: Uses OpenSSL to examine the decoded certificate's contents, showing signature algorithm, issuer, validity period, and extensions.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/signature-verification.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in cert.pem -text\n```\n\n----------------------------------------\n\nTITLE: Initializing pprof CPU Profile Analysis\nDESCRIPTION: Command to start interactive pprof session for analyzing CPU profiles, showing the initial prompt and basic profile information.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo tool pprof profile\nFile: caddy_master\nType: cpu\nTime: Aug 29, 2022 at 8:47pm (MDT)\nDuration: 30.02s, Total samples = 70.11s (233.55%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) \n```\n\n----------------------------------------\n\nTITLE: Full Goroutine Dump Example\nDESCRIPTION: Example of a full goroutine dump showing an IO wait state. Includes goroutine number, state, duration and stack trace information.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngoroutine 61961905 [IO wait, 1 minutes]:\ninternal/poll.runtime_pollWait(0x7f9a9a059eb0, 0x72)\n\truntime/netpoll.go:343 +0x85\n...\ngolang.org/x/net/http2.(*serverConn).readFrames(0xc001756f00)\n\tgolang.org/x/net@v0.14.0/http2/server.go:818 +0x87\ncreated by golang.org/x/net/http2.(*serverConn).serve in goroutine 61961902\n\tgolang.org/x/net@v0.14.0/http2/server.go:930 +0x56a\n```\n\n----------------------------------------\n\nTITLE: Styling for Directive Table in CSS\nDESCRIPTION: CSS styling for the directive table that improves readability and adds hover effects. Includes styling for table overflow handling and clickable rows.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#directive-table table {\n\tmargin: 0 auto;\n\toverflow: hidden;\n}\n\n#directive-table tr:hover {\n\tbackground: rgba(109, 226, 255, 0.11);\n}\n\n#directive-table tr td:first-child {\n\tposition: relative;\n}\n\n#directive-table a:before {\n\tcontent: '';\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\tbottom: 0;\n\tdisplay: block;\n\twidth: 100vw;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Title Metadata\nDESCRIPTION: HTML frontmatter defining the page title for the TLS directive documentation.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n---\ntitle: tls (Caddyfile directive)\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Server with Various File Serving Options\nDESCRIPTION: This Caddy server configuration demonstrates multiple file serving scenarios, including serving precompressed files, using a database as a file system, serving embedded files, and enabling directory listings. It also includes compression settings for non-precompressed files.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/file-server.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\nexample.com\n\nroot * /var/www\n\n# Serve precompressed files if present\nfile_server /downloads/* {\n\tprecompressed\n}\n\n# Compress everything else that would benefit\nencode zstd gzip\n\n# Static site using database as file system\nfile_server /database/* {\n\tfs sqlite data.sql \n}\n\n# Static site embedded within the Caddy binary\nfile_server /embedded/* {\n\tfs embedded\n}\n\n# (Range/Etag/etc. all work without extra config)\n\n# Serve static site with directory listings\nfile_server browse\n```\n\n----------------------------------------\n\nTITLE: Configuring ZeroSSL Certificate Issuance in Caddy\nDESCRIPTION: Configures the ZeroSSL module for obtaining certificates using ZeroSSL's proprietary API. Includes options for API key, validity period, HTTP port, DNS settings, and propagation settings.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_12\n\nLANGUAGE: caddy\nCODE:\n```\n... zerossl <api_key> {\n\tvalidity_days <days>\n\talt_http_port <port>\n\tdns <provider_name> ...\n\tpropagation_delay <duration>\n\tpropagation_timeout <duration>\n\tresolvers <list...>\n\tdns_ttl <duration>\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Profile Stack Example\nDESCRIPTION: Example of a memory profile stack trace showing allocation patterns. Shows live objects, memory usage, and allocation details.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/profiling.md#2025-04-20_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n0: 0 [1: 4096] @ 0xb1fc05 0xb1fc4d 0x48d8d1 0xb1fce6 0xb184c7 0xb1bc8e 0xb41653 0xb4105c 0xb4151d 0xb23b14 0x4719c1\n#\t0xb1fc04\tbufio.NewWriterSize+0x24\t\t\t\t\tbufio/bufio.go:599\n#\t0xb1fc4c\tgolang.org/x/net/http2.glob..func8+0x6c\t\t\t\tgolang.org/x/net@v0.17.0/http2/http2.go:263\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy on Debian/Ubuntu/Raspbian (Stable)\nDESCRIPTION: Commands to add the Caddy stable repository and install Caddy on Debian-based systems. This installs Caddy as a systemd service that starts automatically.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/install.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n```\n\n----------------------------------------\n\nTITLE: Configuring On-Demand TLS in Caddy\nDESCRIPTION: This Caddy configuration snippet demonstrates how to set up on-demand TLS. It includes a global on_demand_tls block that specifies an HTTP endpoint for TLS decision-making, and a site block that enables on-demand TLS for HTTPS connections.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/examples/on-demand.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\ton_demand_tls {\n\t\task http://localhost:9123/check\n\t}\n}\n\nhttps:// {\n\ttls {\n\t\ton_demand\n\t}\n\t# reverse_proxy, etc...\n}\n\n# other sites...\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI Intermediate Trust Pool Provider in Caddyfile\nDESCRIPTION: Shows how to use the pki_intermediate module to obtain and trust intermediate certificates from a certificate authority defined in the PKI app. The authority directive can accept multiple authorities.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_7\n\nLANGUAGE: caddy-d\nCODE:\n```\n... pki_intermediate [<ca_name>...] {\n\tauthority <ca_name>...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring intermediate certificate lifetime in Caddy Server PKI\nDESCRIPTION: Sets the validity duration for intermediate certificates. Must be less than the root certificate lifetime (3600d). Default is 7d, which is recommended.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_52\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tpki {\n\t\tca local {\n\t\t\tintermediate_lifetime 30d\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts in Caddy\nDESCRIPTION: This snippet shows how to set various timeout values for read_body, read_header, write, and idle connections in Caddyfile.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/options.md#2025-04-20_snippet_36\n\nLANGUAGE: caddy\nCODE:\n```\n{\n\tservers {\n\t\ttimeouts {\n\t\t\tread_body   10s\n\t\t\tread_header 5s\n\t\t\twrite       30s\n\t\t\tidle        10m\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Page Links with JavaScript\nDESCRIPTION: JavaScript code that runs when the page loads to add links to subdirectives if matching anchor tags are found.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/php_fastcgi.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.$(function() {\n\t// We'll add links to all the subdirectives if a matching anchor tag is found on the page.\n\taddLinksToSubdirectives();\n});\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for invoke Directive in Caddyfile\nDESCRIPTION: Defines the syntax for the invoke directive, which allows referencing a previously defined named route. If the referenced route is not found, an error will be triggered.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/invoke.md#2025-04-20_snippet_0\n\nLANGUAGE: caddy-d\nCODE:\n```\ninvoke [<matcher>] <route-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Certificate Authority in Caddy\nDESCRIPTION: Configures the internal module for obtaining certificates from an internal certificate authority. Includes options for CA name, certificate lifetime, and signing preferences.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_13\n\nLANGUAGE: caddy\nCODE:\n```\n... internal {\n\tca       <name>\n\tlifetime <duration>\n\tsign_with_root\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile with Multiple Addresses for One Site\nDESCRIPTION: A Caddyfile that applies the same configuration to multiple addresses by listing them together with commas. This allows reusing the same configuration for different domains or ports.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile-tutorial.md#2025-04-20_snippet_9\n\nLANGUAGE: caddy\nCODE:\n```\n:8080, :8081 {\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Certificate Retrieval Configuration in Caddy\nDESCRIPTION: Shows how to configure Caddy to obtain certificates via HTTP requests. The endpoint must return a PEM chain with certificate and private key.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy\nCODE:\n```\nget_certificate http <url>\n```\n\n----------------------------------------\n\nTITLE: Installing Caddy via RPM (RedHat/Fedora)\nDESCRIPTION: Commands to install Caddy server on RPM-based systems using dnf package manager with COPR repository.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/includes/quick-assist/content.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndnf install 'dnf-command(copr)'\ndnf copr enable @caddy/caddy\ndnf install caddy\n```\n\n----------------------------------------\n\nTITLE: Basic Reverse Proxy Configuration in Caddy\nDESCRIPTION: This example shows a simple reverse proxy configuration in Caddy, forwarding all requests to a local backend server.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/reverse_proxy.md#2025-04-20_snippet_15\n\nLANGUAGE: caddy-d\nCODE:\n```\nexample.com {\n\treverse_proxy localhost:9005\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Error Response in Caddy\nDESCRIPTION: Configures a basic error handler that responds with the HTTP error code and status text.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/handle_errors.md#2025-04-20_snippet_5\n\nLANGUAGE: caddy-d\nCODE:\n```\nhandle_errors {\n\trespond \"{err.status_code} {err.status_text}\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Reverse Proxy with Host Header Modification\nDESCRIPTION: Command to set up an HTTPS reverse proxy with host header modification, necessary when proxying to a different hostname.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/quick-starts/reverse-proxy.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy \\\n\t--from example.com \\\n\t--to https://localhost:9000 \\\n\t--change-host-header\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Static File Server in Caddyfile\nDESCRIPTION: Demonstrates the simplest configuration for a static file server serving files from the current directory.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/file_server.md#2025-04-20_snippet_1\n\nLANGUAGE: caddy-d\nCODE:\n```\nfile_server\n```\n\n----------------------------------------\n\nTITLE: HTTP Certificate Manager Configuration in Caddy\nDESCRIPTION: Configuration for obtaining certificates via HTTP requests instead of ACME issuance.\nSOURCE: https://github.com/caddyserver/website/blob/master/src/docs/markdown/caddyfile/directives/tls.md#2025-04-20_snippet_22\n\nLANGUAGE: caddy\nCODE:\n```\nhttps:// {\n\ttls {\n\t\tget_certificate http http://localhost:9007/certs\n\t}\n}\n```"
  }
]