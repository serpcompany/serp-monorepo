[
  {
    "owner": "t3-oss",
    "repo": "t3-env",
    "content": "TITLE: Defining environment schema with t3-env for Next.js\nDESCRIPTION: Creates a typesafe environment schema using t3-env with Next.js configuration. The schema defines server-side and client-side environment variables with zod validation, ensuring type safety and runtime validation.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// src/env.mjs\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /*\n   * Serverside Environment variables, not available on the client.\n   * Will throw if you access these variables on the client.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  /*\n   * Environment variables available on the client (and server).\n   *\n   * 💡 You'll get type errors if these are not prefixed with NEXT_PUBLIC_.\n   */\n  client: {\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  /*\n   * Due to how Next.js bundles environment variables on Edge and Client,\n   * we need to manually destructure them to make sure all are included in bundle.\n   *\n   * 💡 You'll get type errors if not all variables from `server` & `client` are included here.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Environment Schema with T3 Env Core\nDESCRIPTION: Example of creating a combined server and client environment schema in a single file. This approach defines validation rules for environment variables using Zod and configures client/server separation with prefixes.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n\n  /**\n   * The prefix that client-side variables must have. This is enforced both at\n   * a type-level and at runtime.\n   */\n  clientPrefix: \"PUBLIC_\",\n\n  client: {\n    PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n\n  /**\n   * What object holds the environment variables at runtime. This is usually\n   * `process.env` or `import.meta.env`.\n   */\n  runtimeEnv: process.env,\n\n  /**\n   * By default, this library will feed the environment variables directly to\n   * the Zod validator.\n   *\n   * This means that if you have an empty string for a value that is supposed\n   * to be a number (e.g. `PORT=` in a \".env\" file), Zod will incorrectly flag\n   * it as a type mismatch violation. Additionally, if you have an empty string\n   * for a value that is supposed to be a string with a default value (e.g.\n   * `DOMAIN=` in an \".env\" file), the default value will never be applied.\n   *\n   * In order to solve these issues, we recommend that all new projects\n   * explicitly specify this option as true.\n   */\n  emptyStringAsUndefined: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using typed environment variables in Next.js route handler\nDESCRIPTION: Demonstrates how to use the typesafe environment variables in a Next.js route handler. The environment values are strongly typed with full IDE autocompletion support.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/hello/route.ts\nimport { env } from \"../env.mjs\";\n\nexport const GET = (req: Request) => {\n  const DATABASE_URL = env.DATABASE_URL;\n  // use it...\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variables Validation with Zod in TypeScript\nDESCRIPTION: A simple implementation of environment variables validation using Zod, showing how to parse process.env and extend the ProcessEnv interface for type safety. This example demonstrates the basic approach that T3 Env improves upon.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/introduction/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nconst envVariables = z.object({\n  DATABASE_URL: z.string(),\n  CUSTOM_STUFF: z.string(),\n});\n\nenvVariables.parse(process.env);\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv extends z.infer<typeof envVariables> {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validated Environment Variables in an API Endpoint\nDESCRIPTION: Example showing how to import and use the validated environment variables in an API endpoint with full type safety. The env object provides autocompletion and type checking.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"~/env\"; // On server\n\nexport const GET = async () => {\n  // do fancy ai stuff\n  const magic = await fetch(\"...\", {\n    headers: { Authorization: env.OPEN_AI_API_KEY },\n  });\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating T3 Env Schema for Next.js\nDESCRIPTION: Sets up environment variable schema with validation for both server and client-side variables using Zod. Includes configuration for different Next.js versions and runtime environments.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  client: {\n    NEXT_PUBLIC_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\n    NEXT_PUBLIC_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming String Environment Variables to Booleans with t3-env\nDESCRIPTION: Demonstrates two different approaches to convert string environment variables to booleans: one that uses a loose transformation (treating only '0' and 'false' as false values) and another that strictly validates for 'true' or 'false' strings before conversion.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/recipes/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const env = createEnv({\n  server: {\n    COERCED_BOOLEAN: z\n      .string()\n      // transform to boolean using preferred coercion logic\n      .transform((s) => s !== \"false\" && s !== \"0\"),\n\n    ONLY_BOOLEAN: z\n      .string()\n      // only allow \"true\" or \"false\"\n      .refine((s) => s === \"true\" || s === \"false\")\n      // transform to boolean\n      .transform((s) => s === \"true\"),\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Converting String Environment Variables to Numbers with t3-env\nDESCRIPTION: Shows two methods to convert string environment variables to numbers: a manual approach using parseInt with validation, and a simpler approach using Zod's built-in coercion functionality.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/recipes/page.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const env = createEnv({\n  server: {\n    SOME_NUMBER: z\n      .string()\n      // transform to number\n      .transform((s) => parseInt(s, 10))\n      // make sure transform worked\n      .pipe(z.number()),\n\n    // Alternatively, use Zod's default primitives coercion\n    // https://zod.dev/?id=coercion-for-primitives\n    ZOD_NUMBER_COERCION: z.coerce.number(),\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Strict Runtime Environment Configuration with T3 Env Core\nDESCRIPTION: Example demonstrating the runtimeEnvStrict option for more explicit environment variable access. This approach requires explicitly referencing each environment variable, which prevents accidental omissions.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\n\nexport const env = createEnv({\n  clientPrefix: \"PUBLIC_\",\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  client: {\n    PUBLIC_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  /**\n   * Makes sure you explicitly access **all** environment variables\n   * from `server` and `client` in your `runtimeEnv`.\n   */\n  runtimeEnvStrict: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\n    PUBLIC_PUBLISHABLE_KEY: process.env.PUBLIC_PUBLISHABLE_KEY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Schema with T3 Env in Nuxt\nDESCRIPTION: Demonstrates how to create a combined server and client environment schema using T3 Env and Zod validation\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nuxt\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  client: {\n    NUXT_PUBLIC_PUBLISHABLE_KEY: z.string().min(1),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Environment Presets in T3 Env\nDESCRIPTION: Demonstrates how to extend T3 Env with preset configurations for different hosting providers like Vercel, allowing reuse of common environment variable definitions.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\nimport { vercel } from \"@t3-oss/env-core/presets-zod\";\n\nexport const env = createEnv({\n  // ...\n  // Extend the Vercel preset.\n  extends: [vercel()],\n});\n\nenv.VERCEL_URL; // string\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Presets in T3 Env\nDESCRIPTION: Shows how to create and use custom environment presets in T3 Env, which is useful for sharing environment configurations across multiple packages in a monorepo.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/auth/env.ts\nimport { createEnv } from \"@t3-oss/env-core\";\nexport const env = createEnv({\n  // ...\n});\n\n// apps/web/env.ts\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { env as authEnv } from \"@repo/auth/env\";\n\nexport const env = createEnv({\n  // ...\n  extends: [authEnv],\n});\n```\n\n----------------------------------------\n\nTITLE: Split Server Environment Configuration\nDESCRIPTION: Separate server-side environment configuration for sensitive variables, demonstrating how to split schema for better security.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  experimental__runtimeEnv: process.env\n});\n```\n\n----------------------------------------\n\nTITLE: Split Client Environment Configuration\nDESCRIPTION: Separate client-side environment configuration for public variables, showing how to handle client-only environment variables.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  client: {\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  runtimeEnv: {\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Server-only Environment Schema with T3 Env Core\nDESCRIPTION: Example of a server-only environment schema file to keep server variable names private. This approach is recommended when variable names are considered sensitive information.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  runtimeEnv: process.env,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-only Environment Schema with T3 Env Core\nDESCRIPTION: Example of a client-only environment schema file to separate client configuration from server variables. Works in conjunction with a separate server schema when variable names should be kept private.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  clientPrefix: \"PUBLIC_\",\n  client: {\n    PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  runtimeEnv: process.env,\n});\n```\n\n----------------------------------------\n\nTITLE: Separate Server Environment Schema Configuration\nDESCRIPTION: Shows how to define server-only environment variables in a separate file for enhanced security\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nuxt\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Separate Client Environment Schema Configuration\nDESCRIPTION: Shows how to define client-only environment variables in a separate file\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-nuxt\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  client: {\n    PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nuxt Config with Environment Validation\nDESCRIPTION: Configuration to validate environment variables during build time in Nuxt\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"./env\";\n\nexport default defineNuxtConfig({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Server-side Environment Usage in Nuxt API\nDESCRIPTION: Example of using validated environment variables in a Nuxt server API endpoint\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { env } from \"~~/env\"; // On server\n\nexport default defineEventHandler(() => {\n  // do fancy ai stuff\n  const magic = await fetch(\"...\", {\n    headers: { Authorization: env.OPEN_AI_API_KEY },\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side Environment Usage in Vue Component\nDESCRIPTION: Example of using validated environment variables in a Vue component template\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { env } from \"~~/env\"; // On client - same import!\n</script>\n<template>\n  <div>Client says {{ env.NUXT_PUBLIC_GREETING }}!</div>\n  <a href=\"/api/hello\">See what the server has to say!</a>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migration Example for Env Presets in t3-env\nDESCRIPTION: This snippet demonstrates how to migrate from the old syntax to the new function-based syntax for environment presets in t3-env. It shows the difference between directly referencing preset objects and calling them as functions.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-     extends: [vercel],\n+     extends: [vercel()],\n```\n\n----------------------------------------\n\nTITLE: Skipping Validation in T3 Env\nDESCRIPTION: Shows how to configure the T3 Env library to skip environment variable validation. This is useful during linting or when building Docker images where not all variables are present, though generally not recommended for production use.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\n\nexport const env = createEnv({\n  // ...\n  // Tell the library to skip validation if condition is true.\n  skipValidation: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Error Handlers in T3 Env\nDESCRIPTION: Demonstrates how to customize error handling in T3 Env by setting custom handlers for validation errors and invalid client-side access to server variables.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\n\nexport const env = createEnv({\n  // ...\n  // Called when the schema validation fails.\n  onValidationError: (issues: StandardSchemaV1.Issue[]) => {\n    console.error(\n      \"❌ Invalid environment variables:\",\n      issues\n    );\n    throw new Error(\"Invalid environment variables\");\n  },\n  // Called when server variables are accessed on the client.\n  onInvalidAccess: (variable: string) => {\n    throw new Error(\n      \"❌ Attempted to access a server-side environment variable on the client\"\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Context Detection in T3 Env\nDESCRIPTION: Shows how to define when the application is running in a server context, which affects how environment variables are accessed and validated.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\n\nexport const env = createEnv({\n  // ...\n  // Tell the library when we're in a server context.\n  isServer: typeof window === \"undefined\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Strings as Undefined in T3 Env\nDESCRIPTION: Explains how to configure T3 Env to treat empty strings as undefined, which helps with type validation and default values when environment variables are empty.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/customization/page.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createEnv } from \"@t3-oss/env-core\";\n\nexport const env = createEnv({\n  // ...\n  // Treat empty strings as undefined.\n  emptyStringAsUndefined: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Build-time Validation Configuration\nDESCRIPTION: Setup for validating environment variables during build time using jiti for TypeScript import support.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from \"node:url\";\nimport createJiti from \"jiti\";\nconst jiti = createJiti(fileURLToPath(import.meta.url));\n\njiti(\"./app/env\");\n\nexport default {\n  /** ... */\n};\n```\n\n----------------------------------------\n\nTITLE: Next.js Standalone Configuration\nDESCRIPTION: Configuration for Next.js standalone output mode, including necessary package transpilation settings.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from \"next\"\n\nconst nextConfig: NextConfig = {\n  output: \"standalone\",\n  transpilePackages: [\"@t3-oss/env-nextjs\", \"@t3-oss/env-core\"],\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Integrating t3-env with Storybook Configuration\nDESCRIPTION: Shows how to make t3-env environment variables available in Storybook by explicitly adding them to Storybook's environment configuration in the main.ts file.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/recipes/page.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// .storybook/main.ts\n\nimport { env as t3Env } from \"~/env/client.mjs\";\n\nconst config: StorybookConfig = {\n  // other Storybook config...\n  env: (config1) => ({\n    ...config1,\n    ...t3Env,\n  })\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing t3-env with package manager\nDESCRIPTION: Commands for installing the t3-env package using pnpm. Shows installation options for both the core package and the Next.js-specific version, which requires zod as a dependency.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Core package, no framework specific features\npnpm add @t3-oss/env-core zod\n# or, with options preconfigured for Next.js\npnpm add @t3-oss/env-nextjs zod\n```\n\n----------------------------------------\n\nTITLE: Installing T3 Env Core Dependencies with npm\nDESCRIPTION: Command to install the core T3 Env package along with Zod for schema validation. This is the first step required to use T3 Env in any project.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/core/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @t3-oss/env-core zod\n```\n\n----------------------------------------\n\nTITLE: Installing T3 Env Dependencies for Next.js\nDESCRIPTION: Command to install the required T3 Env Next.js package and Zod validation library using pnpm package manager.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nextjs/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @t3-oss/env-nextjs zod\n```\n\n----------------------------------------\n\nTITLE: Installing T3 Env Dependencies for Nuxt\nDESCRIPTION: Command to install the required T3 Env Nuxt package and Zod for schema validation\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/docs/src/app/docs/nuxt/page.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @t3-oss/env-nuxt zod\n```\n\n----------------------------------------\n\nTITLE: Converting env presets to functions in @t3-oss/env-nuxt\nDESCRIPTION: Code showing the migration from object-based presets to function-based presets when using the vercel preset with t3-env. This breaking change was introduced in version 0.10.0.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/packages/nuxt/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  import { vercel } from '@t3-oss/env-core/presets'\n\n  const env = createEnv({\n      /** ... */\n-     extends: [vercel],\n+     extends: [vercel()],\n  })\n```\n\n----------------------------------------\n\nTITLE: Migrating Env Preset Usage\nDESCRIPTION: Demonstrates how to migrate from using static env presets to function calls in the configuration.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/packages/nextjs/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { vercel } from '@t3-oss/env-core/presets'\n\nconst env = createEnv({\n    /** ... */\n-     extends: [vercel],\n+     extends: [vercel()],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in package.json\nDESCRIPTION: Shows how to update the dependencies for @t3-oss/env-core in the package.json file.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/packages/nextjs/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@t3-oss/env-core\": \"^0.12.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands for installing project dependencies using different package managers (yarn, npm, pnpm). These should be run before starting development or building the project.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/examples/nuxt/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn install\n\n# npm\nnpm install\n\n# pnpm\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Command to start the Nuxt 3 development server. This will run the application in development mode on http://localhost:3000.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/examples/nuxt/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: Command to build the Nuxt 3 application for production deployment. This creates optimized files ready for serving in a production environment.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/examples/nuxt/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Command to locally preview the production build of the Nuxt 3 application. This allows testing the production version before actual deployment.\nSOURCE: https://github.com/t3-oss/t3-env/blob/main/examples/nuxt/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```"
  }
]